// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.certificateregistration.outputs;

import com.pulumi.azurenative.certificateregistration.outputs.AppServiceCertificateResponse;
import com.pulumi.azurenative.certificateregistration.outputs.CertificateDetailsResponse;
import com.pulumi.azurenative.certificateregistration.outputs.SystemDataResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetAppServiceCertificateOrderResult {
    /**
     * @return Reasons why App Service Certificate is not renewable at the current moment.
     * 
     */
    private final List<String> appServiceCertificateNotRenewableReasons;
    /**
     * @return &lt;code&gt;true&lt;/code&gt; if the certificate should be automatically renewed when it expires; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    private final @Nullable Boolean autoRenew;
    /**
     * @return State of the Key Vault secret.
     * 
     */
    private final @Nullable Map<String,AppServiceCertificateResponse> certificates;
    /**
     * @return Last CSR that was created for this order.
     * 
     */
    private final @Nullable String csr;
    /**
     * @return Certificate distinguished name.
     * 
     */
    private final @Nullable String distinguishedName;
    /**
     * @return Domain verification token.
     * 
     */
    private final String domainVerificationToken;
    /**
     * @return Certificate expiration time.
     * 
     */
    private final String expirationTime;
    /**
     * @return Resource Id.
     * 
     */
    private final String id;
    /**
     * @return Intermediate certificate.
     * 
     */
    private final CertificateDetailsResponse intermediate;
    /**
     * @return &lt;code&gt;true&lt;/code&gt; if private key is external; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    private final Boolean isPrivateKeyExternal;
    /**
     * @return Certificate key size.
     * 
     */
    private final @Nullable Integer keySize;
    /**
     * @return Kind of resource.
     * 
     */
    private final @Nullable String kind;
    /**
     * @return Certificate last issuance time.
     * 
     */
    private final String lastCertificateIssuanceTime;
    /**
     * @return Resource Location.
     * 
     */
    private final String location;
    /**
     * @return Resource Name.
     * 
     */
    private final String name;
    /**
     * @return Time stamp when the certificate would be auto renewed next
     * 
     */
    private final String nextAutoRenewalTimeStamp;
    /**
     * @return Certificate product type.
     * 
     */
    private final String productType;
    /**
     * @return Status of certificate order.
     * 
     */
    private final String provisioningState;
    /**
     * @return Root certificate.
     * 
     */
    private final CertificateDetailsResponse root;
    /**
     * @return Current serial number of the certificate.
     * 
     */
    private final String serialNumber;
    /**
     * @return Signed certificate.
     * 
     */
    private final CertificateDetailsResponse signedCertificate;
    /**
     * @return Current order status.
     * 
     */
    private final String status;
    /**
     * @return The system metadata relating to this resource.
     * 
     */
    private final SystemDataResponse systemData;
    /**
     * @return Resource tags.
     * 
     */
    private final @Nullable Map<String,String> tags;
    /**
     * @return Resource type.
     * 
     */
    private final String type;
    /**
     * @return Duration in years (must be between 1 and 3).
     * 
     */
    private final @Nullable Integer validityInYears;

    @CustomType.Constructor
    private GetAppServiceCertificateOrderResult(
        @CustomType.Parameter("appServiceCertificateNotRenewableReasons") List<String> appServiceCertificateNotRenewableReasons,
        @CustomType.Parameter("autoRenew") @Nullable Boolean autoRenew,
        @CustomType.Parameter("certificates") @Nullable Map<String,AppServiceCertificateResponse> certificates,
        @CustomType.Parameter("csr") @Nullable String csr,
        @CustomType.Parameter("distinguishedName") @Nullable String distinguishedName,
        @CustomType.Parameter("domainVerificationToken") String domainVerificationToken,
        @CustomType.Parameter("expirationTime") String expirationTime,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("intermediate") CertificateDetailsResponse intermediate,
        @CustomType.Parameter("isPrivateKeyExternal") Boolean isPrivateKeyExternal,
        @CustomType.Parameter("keySize") @Nullable Integer keySize,
        @CustomType.Parameter("kind") @Nullable String kind,
        @CustomType.Parameter("lastCertificateIssuanceTime") String lastCertificateIssuanceTime,
        @CustomType.Parameter("location") String location,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("nextAutoRenewalTimeStamp") String nextAutoRenewalTimeStamp,
        @CustomType.Parameter("productType") String productType,
        @CustomType.Parameter("provisioningState") String provisioningState,
        @CustomType.Parameter("root") CertificateDetailsResponse root,
        @CustomType.Parameter("serialNumber") String serialNumber,
        @CustomType.Parameter("signedCertificate") CertificateDetailsResponse signedCertificate,
        @CustomType.Parameter("status") String status,
        @CustomType.Parameter("systemData") SystemDataResponse systemData,
        @CustomType.Parameter("tags") @Nullable Map<String,String> tags,
        @CustomType.Parameter("type") String type,
        @CustomType.Parameter("validityInYears") @Nullable Integer validityInYears) {
        this.appServiceCertificateNotRenewableReasons = appServiceCertificateNotRenewableReasons;
        this.autoRenew = autoRenew;
        this.certificates = certificates;
        this.csr = csr;
        this.distinguishedName = distinguishedName;
        this.domainVerificationToken = domainVerificationToken;
        this.expirationTime = expirationTime;
        this.id = id;
        this.intermediate = intermediate;
        this.isPrivateKeyExternal = isPrivateKeyExternal;
        this.keySize = keySize;
        this.kind = kind;
        this.lastCertificateIssuanceTime = lastCertificateIssuanceTime;
        this.location = location;
        this.name = name;
        this.nextAutoRenewalTimeStamp = nextAutoRenewalTimeStamp;
        this.productType = productType;
        this.provisioningState = provisioningState;
        this.root = root;
        this.serialNumber = serialNumber;
        this.signedCertificate = signedCertificate;
        this.status = status;
        this.systemData = systemData;
        this.tags = tags;
        this.type = type;
        this.validityInYears = validityInYears;
    }

    /**
     * @return Reasons why App Service Certificate is not renewable at the current moment.
     * 
     */
    public List<String> appServiceCertificateNotRenewableReasons() {
        return this.appServiceCertificateNotRenewableReasons;
    }
    /**
     * @return &lt;code&gt;true&lt;/code&gt; if the certificate should be automatically renewed when it expires; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    public Optional<Boolean> autoRenew() {
        return Optional.ofNullable(this.autoRenew);
    }
    /**
     * @return State of the Key Vault secret.
     * 
     */
    public Map<String,AppServiceCertificateResponse> certificates() {
        return this.certificates == null ? Map.of() : this.certificates;
    }
    /**
     * @return Last CSR that was created for this order.
     * 
     */
    public Optional<String> csr() {
        return Optional.ofNullable(this.csr);
    }
    /**
     * @return Certificate distinguished name.
     * 
     */
    public Optional<String> distinguishedName() {
        return Optional.ofNullable(this.distinguishedName);
    }
    /**
     * @return Domain verification token.
     * 
     */
    public String domainVerificationToken() {
        return this.domainVerificationToken;
    }
    /**
     * @return Certificate expiration time.
     * 
     */
    public String expirationTime() {
        return this.expirationTime;
    }
    /**
     * @return Resource Id.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Intermediate certificate.
     * 
     */
    public CertificateDetailsResponse intermediate() {
        return this.intermediate;
    }
    /**
     * @return &lt;code&gt;true&lt;/code&gt; if private key is external; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    public Boolean isPrivateKeyExternal() {
        return this.isPrivateKeyExternal;
    }
    /**
     * @return Certificate key size.
     * 
     */
    public Optional<Integer> keySize() {
        return Optional.ofNullable(this.keySize);
    }
    /**
     * @return Kind of resource.
     * 
     */
    public Optional<String> kind() {
        return Optional.ofNullable(this.kind);
    }
    /**
     * @return Certificate last issuance time.
     * 
     */
    public String lastCertificateIssuanceTime() {
        return this.lastCertificateIssuanceTime;
    }
    /**
     * @return Resource Location.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return Resource Name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Time stamp when the certificate would be auto renewed next
     * 
     */
    public String nextAutoRenewalTimeStamp() {
        return this.nextAutoRenewalTimeStamp;
    }
    /**
     * @return Certificate product type.
     * 
     */
    public String productType() {
        return this.productType;
    }
    /**
     * @return Status of certificate order.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return Root certificate.
     * 
     */
    public CertificateDetailsResponse root() {
        return this.root;
    }
    /**
     * @return Current serial number of the certificate.
     * 
     */
    public String serialNumber() {
        return this.serialNumber;
    }
    /**
     * @return Signed certificate.
     * 
     */
    public CertificateDetailsResponse signedCertificate() {
        return this.signedCertificate;
    }
    /**
     * @return Current order status.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The system metadata relating to this resource.
     * 
     */
    public SystemDataResponse systemData() {
        return this.systemData;
    }
    /**
     * @return Resource tags.
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return Resource type.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Duration in years (must be between 1 and 3).
     * 
     */
    public Optional<Integer> validityInYears() {
        return Optional.ofNullable(this.validityInYears);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAppServiceCertificateOrderResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<String> appServiceCertificateNotRenewableReasons;
        private @Nullable Boolean autoRenew;
        private @Nullable Map<String,AppServiceCertificateResponse> certificates;
        private @Nullable String csr;
        private @Nullable String distinguishedName;
        private String domainVerificationToken;
        private String expirationTime;
        private String id;
        private CertificateDetailsResponse intermediate;
        private Boolean isPrivateKeyExternal;
        private @Nullable Integer keySize;
        private @Nullable String kind;
        private String lastCertificateIssuanceTime;
        private String location;
        private String name;
        private String nextAutoRenewalTimeStamp;
        private String productType;
        private String provisioningState;
        private CertificateDetailsResponse root;
        private String serialNumber;
        private CertificateDetailsResponse signedCertificate;
        private String status;
        private SystemDataResponse systemData;
        private @Nullable Map<String,String> tags;
        private String type;
        private @Nullable Integer validityInYears;

        public Builder() {
    	      // Empty
        }

        public Builder(GetAppServiceCertificateOrderResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appServiceCertificateNotRenewableReasons = defaults.appServiceCertificateNotRenewableReasons;
    	      this.autoRenew = defaults.autoRenew;
    	      this.certificates = defaults.certificates;
    	      this.csr = defaults.csr;
    	      this.distinguishedName = defaults.distinguishedName;
    	      this.domainVerificationToken = defaults.domainVerificationToken;
    	      this.expirationTime = defaults.expirationTime;
    	      this.id = defaults.id;
    	      this.intermediate = defaults.intermediate;
    	      this.isPrivateKeyExternal = defaults.isPrivateKeyExternal;
    	      this.keySize = defaults.keySize;
    	      this.kind = defaults.kind;
    	      this.lastCertificateIssuanceTime = defaults.lastCertificateIssuanceTime;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.nextAutoRenewalTimeStamp = defaults.nextAutoRenewalTimeStamp;
    	      this.productType = defaults.productType;
    	      this.provisioningState = defaults.provisioningState;
    	      this.root = defaults.root;
    	      this.serialNumber = defaults.serialNumber;
    	      this.signedCertificate = defaults.signedCertificate;
    	      this.status = defaults.status;
    	      this.systemData = defaults.systemData;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
    	      this.validityInYears = defaults.validityInYears;
        }

        public Builder appServiceCertificateNotRenewableReasons(List<String> appServiceCertificateNotRenewableReasons) {
            this.appServiceCertificateNotRenewableReasons = Objects.requireNonNull(appServiceCertificateNotRenewableReasons);
            return this;
        }
        public Builder appServiceCertificateNotRenewableReasons(String... appServiceCertificateNotRenewableReasons) {
            return appServiceCertificateNotRenewableReasons(List.of(appServiceCertificateNotRenewableReasons));
        }
        public Builder autoRenew(@Nullable Boolean autoRenew) {
            this.autoRenew = autoRenew;
            return this;
        }
        public Builder certificates(@Nullable Map<String,AppServiceCertificateResponse> certificates) {
            this.certificates = certificates;
            return this;
        }
        public Builder csr(@Nullable String csr) {
            this.csr = csr;
            return this;
        }
        public Builder distinguishedName(@Nullable String distinguishedName) {
            this.distinguishedName = distinguishedName;
            return this;
        }
        public Builder domainVerificationToken(String domainVerificationToken) {
            this.domainVerificationToken = Objects.requireNonNull(domainVerificationToken);
            return this;
        }
        public Builder expirationTime(String expirationTime) {
            this.expirationTime = Objects.requireNonNull(expirationTime);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder intermediate(CertificateDetailsResponse intermediate) {
            this.intermediate = Objects.requireNonNull(intermediate);
            return this;
        }
        public Builder isPrivateKeyExternal(Boolean isPrivateKeyExternal) {
            this.isPrivateKeyExternal = Objects.requireNonNull(isPrivateKeyExternal);
            return this;
        }
        public Builder keySize(@Nullable Integer keySize) {
            this.keySize = keySize;
            return this;
        }
        public Builder kind(@Nullable String kind) {
            this.kind = kind;
            return this;
        }
        public Builder lastCertificateIssuanceTime(String lastCertificateIssuanceTime) {
            this.lastCertificateIssuanceTime = Objects.requireNonNull(lastCertificateIssuanceTime);
            return this;
        }
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder nextAutoRenewalTimeStamp(String nextAutoRenewalTimeStamp) {
            this.nextAutoRenewalTimeStamp = Objects.requireNonNull(nextAutoRenewalTimeStamp);
            return this;
        }
        public Builder productType(String productType) {
            this.productType = Objects.requireNonNull(productType);
            return this;
        }
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        public Builder root(CertificateDetailsResponse root) {
            this.root = Objects.requireNonNull(root);
            return this;
        }
        public Builder serialNumber(String serialNumber) {
            this.serialNumber = Objects.requireNonNull(serialNumber);
            return this;
        }
        public Builder signedCertificate(CertificateDetailsResponse signedCertificate) {
            this.signedCertificate = Objects.requireNonNull(signedCertificate);
            return this;
        }
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        public Builder systemData(SystemDataResponse systemData) {
            this.systemData = Objects.requireNonNull(systemData);
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder validityInYears(@Nullable Integer validityInYears) {
            this.validityInYears = validityInYears;
            return this;
        }        public GetAppServiceCertificateOrderResult build() {
            return new GetAppServiceCertificateOrderResult(appServiceCertificateNotRenewableReasons, autoRenew, certificates, csr, distinguishedName, domainVerificationToken, expirationTime, id, intermediate, isPrivateKeyExternal, keySize, kind, lastCertificateIssuanceTime, location, name, nextAutoRenewalTimeStamp, productType, provisioningState, root, serialNumber, signedCertificate, status, systemData, tags, type, validityInYears);
        }
    }
}
