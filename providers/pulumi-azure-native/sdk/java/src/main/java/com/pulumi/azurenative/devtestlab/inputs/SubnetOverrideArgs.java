// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.devtestlab.inputs;

import com.pulumi.azurenative.devtestlab.enums.UsagePermissionType;
import com.pulumi.azurenative.devtestlab.inputs.SubnetSharedPublicIpAddressConfigurationArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Property overrides on a subnet of a virtual network.
 * 
 */
public final class SubnetOverrideArgs extends com.pulumi.resources.ResourceArgs {

    public static final SubnetOverrideArgs Empty = new SubnetOverrideArgs();

    /**
     * The name given to the subnet within the lab.
     * 
     */
    @Import(name="labSubnetName")
    private @Nullable Output<String> labSubnetName;

    /**
     * @return The name given to the subnet within the lab.
     * 
     */
    public Optional<Output<String>> labSubnetName() {
        return Optional.ofNullable(this.labSubnetName);
    }

    /**
     * The resource ID of the subnet.
     * 
     */
    @Import(name="resourceId")
    private @Nullable Output<String> resourceId;

    /**
     * @return The resource ID of the subnet.
     * 
     */
    public Optional<Output<String>> resourceId() {
        return Optional.ofNullable(this.resourceId);
    }

    /**
     * Properties that virtual machines on this subnet will share.
     * 
     */
    @Import(name="sharedPublicIpAddressConfiguration")
    private @Nullable Output<SubnetSharedPublicIpAddressConfigurationArgs> sharedPublicIpAddressConfiguration;

    /**
     * @return Properties that virtual machines on this subnet will share.
     * 
     */
    public Optional<Output<SubnetSharedPublicIpAddressConfigurationArgs>> sharedPublicIpAddressConfiguration() {
        return Optional.ofNullable(this.sharedPublicIpAddressConfiguration);
    }

    /**
     * Indicates whether this subnet can be used during virtual machine creation (i.e. Allow, Deny).
     * 
     */
    @Import(name="useInVmCreationPermission")
    private @Nullable Output<Either<String,UsagePermissionType>> useInVmCreationPermission;

    /**
     * @return Indicates whether this subnet can be used during virtual machine creation (i.e. Allow, Deny).
     * 
     */
    public Optional<Output<Either<String,UsagePermissionType>>> useInVmCreationPermission() {
        return Optional.ofNullable(this.useInVmCreationPermission);
    }

    /**
     * Indicates whether public IP addresses can be assigned to virtual machines on this subnet (i.e. Allow, Deny).
     * 
     */
    @Import(name="usePublicIpAddressPermission")
    private @Nullable Output<Either<String,UsagePermissionType>> usePublicIpAddressPermission;

    /**
     * @return Indicates whether public IP addresses can be assigned to virtual machines on this subnet (i.e. Allow, Deny).
     * 
     */
    public Optional<Output<Either<String,UsagePermissionType>>> usePublicIpAddressPermission() {
        return Optional.ofNullable(this.usePublicIpAddressPermission);
    }

    /**
     * The virtual network pool associated with this subnet.
     * 
     */
    @Import(name="virtualNetworkPoolName")
    private @Nullable Output<String> virtualNetworkPoolName;

    /**
     * @return The virtual network pool associated with this subnet.
     * 
     */
    public Optional<Output<String>> virtualNetworkPoolName() {
        return Optional.ofNullable(this.virtualNetworkPoolName);
    }

    private SubnetOverrideArgs() {}

    private SubnetOverrideArgs(SubnetOverrideArgs $) {
        this.labSubnetName = $.labSubnetName;
        this.resourceId = $.resourceId;
        this.sharedPublicIpAddressConfiguration = $.sharedPublicIpAddressConfiguration;
        this.useInVmCreationPermission = $.useInVmCreationPermission;
        this.usePublicIpAddressPermission = $.usePublicIpAddressPermission;
        this.virtualNetworkPoolName = $.virtualNetworkPoolName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SubnetOverrideArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SubnetOverrideArgs $;

        public Builder() {
            $ = new SubnetOverrideArgs();
        }

        public Builder(SubnetOverrideArgs defaults) {
            $ = new SubnetOverrideArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param labSubnetName The name given to the subnet within the lab.
         * 
         * @return builder
         * 
         */
        public Builder labSubnetName(@Nullable Output<String> labSubnetName) {
            $.labSubnetName = labSubnetName;
            return this;
        }

        /**
         * @param labSubnetName The name given to the subnet within the lab.
         * 
         * @return builder
         * 
         */
        public Builder labSubnetName(String labSubnetName) {
            return labSubnetName(Output.of(labSubnetName));
        }

        /**
         * @param resourceId The resource ID of the subnet.
         * 
         * @return builder
         * 
         */
        public Builder resourceId(@Nullable Output<String> resourceId) {
            $.resourceId = resourceId;
            return this;
        }

        /**
         * @param resourceId The resource ID of the subnet.
         * 
         * @return builder
         * 
         */
        public Builder resourceId(String resourceId) {
            return resourceId(Output.of(resourceId));
        }

        /**
         * @param sharedPublicIpAddressConfiguration Properties that virtual machines on this subnet will share.
         * 
         * @return builder
         * 
         */
        public Builder sharedPublicIpAddressConfiguration(@Nullable Output<SubnetSharedPublicIpAddressConfigurationArgs> sharedPublicIpAddressConfiguration) {
            $.sharedPublicIpAddressConfiguration = sharedPublicIpAddressConfiguration;
            return this;
        }

        /**
         * @param sharedPublicIpAddressConfiguration Properties that virtual machines on this subnet will share.
         * 
         * @return builder
         * 
         */
        public Builder sharedPublicIpAddressConfiguration(SubnetSharedPublicIpAddressConfigurationArgs sharedPublicIpAddressConfiguration) {
            return sharedPublicIpAddressConfiguration(Output.of(sharedPublicIpAddressConfiguration));
        }

        /**
         * @param useInVmCreationPermission Indicates whether this subnet can be used during virtual machine creation (i.e. Allow, Deny).
         * 
         * @return builder
         * 
         */
        public Builder useInVmCreationPermission(@Nullable Output<Either<String,UsagePermissionType>> useInVmCreationPermission) {
            $.useInVmCreationPermission = useInVmCreationPermission;
            return this;
        }

        /**
         * @param useInVmCreationPermission Indicates whether this subnet can be used during virtual machine creation (i.e. Allow, Deny).
         * 
         * @return builder
         * 
         */
        public Builder useInVmCreationPermission(Either<String,UsagePermissionType> useInVmCreationPermission) {
            return useInVmCreationPermission(Output.of(useInVmCreationPermission));
        }

        /**
         * @param useInVmCreationPermission Indicates whether this subnet can be used during virtual machine creation (i.e. Allow, Deny).
         * 
         * @return builder
         * 
         */
        public Builder useInVmCreationPermission(String useInVmCreationPermission) {
            return useInVmCreationPermission(Either.ofLeft(useInVmCreationPermission));
        }

        /**
         * @param useInVmCreationPermission Indicates whether this subnet can be used during virtual machine creation (i.e. Allow, Deny).
         * 
         * @return builder
         * 
         */
        public Builder useInVmCreationPermission(UsagePermissionType useInVmCreationPermission) {
            return useInVmCreationPermission(Either.ofRight(useInVmCreationPermission));
        }

        /**
         * @param usePublicIpAddressPermission Indicates whether public IP addresses can be assigned to virtual machines on this subnet (i.e. Allow, Deny).
         * 
         * @return builder
         * 
         */
        public Builder usePublicIpAddressPermission(@Nullable Output<Either<String,UsagePermissionType>> usePublicIpAddressPermission) {
            $.usePublicIpAddressPermission = usePublicIpAddressPermission;
            return this;
        }

        /**
         * @param usePublicIpAddressPermission Indicates whether public IP addresses can be assigned to virtual machines on this subnet (i.e. Allow, Deny).
         * 
         * @return builder
         * 
         */
        public Builder usePublicIpAddressPermission(Either<String,UsagePermissionType> usePublicIpAddressPermission) {
            return usePublicIpAddressPermission(Output.of(usePublicIpAddressPermission));
        }

        /**
         * @param usePublicIpAddressPermission Indicates whether public IP addresses can be assigned to virtual machines on this subnet (i.e. Allow, Deny).
         * 
         * @return builder
         * 
         */
        public Builder usePublicIpAddressPermission(String usePublicIpAddressPermission) {
            return usePublicIpAddressPermission(Either.ofLeft(usePublicIpAddressPermission));
        }

        /**
         * @param usePublicIpAddressPermission Indicates whether public IP addresses can be assigned to virtual machines on this subnet (i.e. Allow, Deny).
         * 
         * @return builder
         * 
         */
        public Builder usePublicIpAddressPermission(UsagePermissionType usePublicIpAddressPermission) {
            return usePublicIpAddressPermission(Either.ofRight(usePublicIpAddressPermission));
        }

        /**
         * @param virtualNetworkPoolName The virtual network pool associated with this subnet.
         * 
         * @return builder
         * 
         */
        public Builder virtualNetworkPoolName(@Nullable Output<String> virtualNetworkPoolName) {
            $.virtualNetworkPoolName = virtualNetworkPoolName;
            return this;
        }

        /**
         * @param virtualNetworkPoolName The virtual network pool associated with this subnet.
         * 
         * @return builder
         * 
         */
        public Builder virtualNetworkPoolName(String virtualNetworkPoolName) {
            return virtualNetworkPoolName(Output.of(virtualNetworkPoolName));
        }

        public SubnetOverrideArgs build() {
            return $;
        }
    }

}
