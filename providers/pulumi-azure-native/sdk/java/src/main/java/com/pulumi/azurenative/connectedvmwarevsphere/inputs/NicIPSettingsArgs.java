// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.connectedvmwarevsphere.inputs;

import com.pulumi.azurenative.connectedvmwarevsphere.enums.IPAddressAllocationMethod;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Defines the network interface ip settings.
 * 
 */
public final class NicIPSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final NicIPSettingsArgs Empty = new NicIPSettingsArgs();

    /**
     * Gets or sets the nic allocation method.
     * 
     */
    @Import(name="allocationMethod")
    private @Nullable Output<Either<String,IPAddressAllocationMethod>> allocationMethod;

    /**
     * @return Gets or sets the nic allocation method.
     * 
     */
    public Optional<Output<Either<String,IPAddressAllocationMethod>>> allocationMethod() {
        return Optional.ofNullable(this.allocationMethod);
    }

    /**
     * Gets or sets the dns servers.
     * 
     */
    @Import(name="dnsServers")
    private @Nullable Output<List<String>> dnsServers;

    /**
     * @return Gets or sets the dns servers.
     * 
     */
    public Optional<Output<List<String>>> dnsServers() {
        return Optional.ofNullable(this.dnsServers);
    }

    /**
     * Gets or sets the gateway.
     * 
     */
    @Import(name="gateway")
    private @Nullable Output<List<String>> gateway;

    /**
     * @return Gets or sets the gateway.
     * 
     */
    public Optional<Output<List<String>>> gateway() {
        return Optional.ofNullable(this.gateway);
    }

    /**
     * Gets or sets the ip address for the nic.
     * 
     */
    @Import(name="ipAddress")
    private @Nullable Output<String> ipAddress;

    /**
     * @return Gets or sets the ip address for the nic.
     * 
     */
    public Optional<Output<String>> ipAddress() {
        return Optional.ofNullable(this.ipAddress);
    }

    /**
     * Gets or sets the mask.
     * 
     */
    @Import(name="subnetMask")
    private @Nullable Output<String> subnetMask;

    /**
     * @return Gets or sets the mask.
     * 
     */
    public Optional<Output<String>> subnetMask() {
        return Optional.ofNullable(this.subnetMask);
    }

    private NicIPSettingsArgs() {}

    private NicIPSettingsArgs(NicIPSettingsArgs $) {
        this.allocationMethod = $.allocationMethod;
        this.dnsServers = $.dnsServers;
        this.gateway = $.gateway;
        this.ipAddress = $.ipAddress;
        this.subnetMask = $.subnetMask;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NicIPSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NicIPSettingsArgs $;

        public Builder() {
            $ = new NicIPSettingsArgs();
        }

        public Builder(NicIPSettingsArgs defaults) {
            $ = new NicIPSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allocationMethod Gets or sets the nic allocation method.
         * 
         * @return builder
         * 
         */
        public Builder allocationMethod(@Nullable Output<Either<String,IPAddressAllocationMethod>> allocationMethod) {
            $.allocationMethod = allocationMethod;
            return this;
        }

        /**
         * @param allocationMethod Gets or sets the nic allocation method.
         * 
         * @return builder
         * 
         */
        public Builder allocationMethod(Either<String,IPAddressAllocationMethod> allocationMethod) {
            return allocationMethod(Output.of(allocationMethod));
        }

        /**
         * @param allocationMethod Gets or sets the nic allocation method.
         * 
         * @return builder
         * 
         */
        public Builder allocationMethod(String allocationMethod) {
            return allocationMethod(Either.ofLeft(allocationMethod));
        }

        /**
         * @param allocationMethod Gets or sets the nic allocation method.
         * 
         * @return builder
         * 
         */
        public Builder allocationMethod(IPAddressAllocationMethod allocationMethod) {
            return allocationMethod(Either.ofRight(allocationMethod));
        }

        /**
         * @param dnsServers Gets or sets the dns servers.
         * 
         * @return builder
         * 
         */
        public Builder dnsServers(@Nullable Output<List<String>> dnsServers) {
            $.dnsServers = dnsServers;
            return this;
        }

        /**
         * @param dnsServers Gets or sets the dns servers.
         * 
         * @return builder
         * 
         */
        public Builder dnsServers(List<String> dnsServers) {
            return dnsServers(Output.of(dnsServers));
        }

        /**
         * @param dnsServers Gets or sets the dns servers.
         * 
         * @return builder
         * 
         */
        public Builder dnsServers(String... dnsServers) {
            return dnsServers(List.of(dnsServers));
        }

        /**
         * @param gateway Gets or sets the gateway.
         * 
         * @return builder
         * 
         */
        public Builder gateway(@Nullable Output<List<String>> gateway) {
            $.gateway = gateway;
            return this;
        }

        /**
         * @param gateway Gets or sets the gateway.
         * 
         * @return builder
         * 
         */
        public Builder gateway(List<String> gateway) {
            return gateway(Output.of(gateway));
        }

        /**
         * @param gateway Gets or sets the gateway.
         * 
         * @return builder
         * 
         */
        public Builder gateway(String... gateway) {
            return gateway(List.of(gateway));
        }

        /**
         * @param ipAddress Gets or sets the ip address for the nic.
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(@Nullable Output<String> ipAddress) {
            $.ipAddress = ipAddress;
            return this;
        }

        /**
         * @param ipAddress Gets or sets the ip address for the nic.
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(String ipAddress) {
            return ipAddress(Output.of(ipAddress));
        }

        /**
         * @param subnetMask Gets or sets the mask.
         * 
         * @return builder
         * 
         */
        public Builder subnetMask(@Nullable Output<String> subnetMask) {
            $.subnetMask = subnetMask;
            return this;
        }

        /**
         * @param subnetMask Gets or sets the mask.
         * 
         * @return builder
         * 
         */
        public Builder subnetMask(String subnetMask) {
            return subnetMask(Output.of(subnetMask));
        }

        public NicIPSettingsArgs build() {
            return $;
        }
    }

}
