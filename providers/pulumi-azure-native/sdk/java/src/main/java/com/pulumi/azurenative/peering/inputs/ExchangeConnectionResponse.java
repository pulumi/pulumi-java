// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.peering.inputs;

import com.pulumi.azurenative.peering.inputs.BgpSessionResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The properties that define an exchange connection.
 * 
 */
public final class ExchangeConnectionResponse extends com.pulumi.resources.InvokeArgs {

    public static final ExchangeConnectionResponse Empty = new ExchangeConnectionResponse();

    /**
     * The BGP session associated with the connection.
     * 
     */
    @Import(name="bgpSession")
    private @Nullable BgpSessionResponse bgpSession;

    /**
     * @return The BGP session associated with the connection.
     * 
     */
    public Optional<BgpSessionResponse> bgpSession() {
        return Optional.ofNullable(this.bgpSession);
    }

    /**
     * The unique identifier (GUID) for the connection.
     * 
     */
    @Import(name="connectionIdentifier")
    private @Nullable String connectionIdentifier;

    /**
     * @return The unique identifier (GUID) for the connection.
     * 
     */
    public Optional<String> connectionIdentifier() {
        return Optional.ofNullable(this.connectionIdentifier);
    }

    /**
     * The state of the connection.
     * 
     */
    @Import(name="connectionState", required=true)
    private String connectionState;

    /**
     * @return The state of the connection.
     * 
     */
    public String connectionState() {
        return this.connectionState;
    }

    /**
     * The error message related to the connection state, if any.
     * 
     */
    @Import(name="errorMessage", required=true)
    private String errorMessage;

    /**
     * @return The error message related to the connection state, if any.
     * 
     */
    public String errorMessage() {
        return this.errorMessage;
    }

    /**
     * The PeeringDB.com ID of the facility at which the connection has to be set up.
     * 
     */
    @Import(name="peeringDBFacilityId")
    private @Nullable Integer peeringDBFacilityId;

    /**
     * @return The PeeringDB.com ID of the facility at which the connection has to be set up.
     * 
     */
    public Optional<Integer> peeringDBFacilityId() {
        return Optional.ofNullable(this.peeringDBFacilityId);
    }

    private ExchangeConnectionResponse() {}

    private ExchangeConnectionResponse(ExchangeConnectionResponse $) {
        this.bgpSession = $.bgpSession;
        this.connectionIdentifier = $.connectionIdentifier;
        this.connectionState = $.connectionState;
        this.errorMessage = $.errorMessage;
        this.peeringDBFacilityId = $.peeringDBFacilityId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExchangeConnectionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExchangeConnectionResponse $;

        public Builder() {
            $ = new ExchangeConnectionResponse();
        }

        public Builder(ExchangeConnectionResponse defaults) {
            $ = new ExchangeConnectionResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param bgpSession The BGP session associated with the connection.
         * 
         * @return builder
         * 
         */
        public Builder bgpSession(@Nullable BgpSessionResponse bgpSession) {
            $.bgpSession = bgpSession;
            return this;
        }

        /**
         * @param connectionIdentifier The unique identifier (GUID) for the connection.
         * 
         * @return builder
         * 
         */
        public Builder connectionIdentifier(@Nullable String connectionIdentifier) {
            $.connectionIdentifier = connectionIdentifier;
            return this;
        }

        /**
         * @param connectionState The state of the connection.
         * 
         * @return builder
         * 
         */
        public Builder connectionState(String connectionState) {
            $.connectionState = connectionState;
            return this;
        }

        /**
         * @param errorMessage The error message related to the connection state, if any.
         * 
         * @return builder
         * 
         */
        public Builder errorMessage(String errorMessage) {
            $.errorMessage = errorMessage;
            return this;
        }

        /**
         * @param peeringDBFacilityId The PeeringDB.com ID of the facility at which the connection has to be set up.
         * 
         * @return builder
         * 
         */
        public Builder peeringDBFacilityId(@Nullable Integer peeringDBFacilityId) {
            $.peeringDBFacilityId = peeringDBFacilityId;
            return this;
        }

        public ExchangeConnectionResponse build() {
            $.connectionState = Objects.requireNonNull($.connectionState, "expected parameter 'connectionState' to be non-null");
            $.errorMessage = Objects.requireNonNull($.errorMessage, "expected parameter 'errorMessage' to be non-null");
            return $;
        }
    }

}
