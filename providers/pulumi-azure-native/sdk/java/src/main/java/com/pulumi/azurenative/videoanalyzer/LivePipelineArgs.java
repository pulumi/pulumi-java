// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.videoanalyzer;

import com.pulumi.azurenative.videoanalyzer.inputs.ParameterDefinitionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class LivePipelineArgs extends com.pulumi.resources.ResourceArgs {

    public static final LivePipelineArgs Empty = new LivePipelineArgs();

    /**
     * The Azure Video Analyzer account name.
     * 
     */
    @Import(name="accountName", required=true)
      private final Output<String> accountName;

    public Output<String> accountName() {
        return this.accountName;
    }

    /**
     * Maximum bitrate capacity in Kbps reserved for the live pipeline. The allowed range is from 500 to 3000 Kbps in increments of 100 Kbps. If the RTSP camera exceeds this capacity, then the service will disconnect temporarily from the camera. It will retry to re-establish connection (with exponential backoff), checking to see if the camera bitrate is now below the reserved capacity. Doing so will ensure that one &#39;noisy neighbor&#39; does not affect other live pipelines in your account.
     * 
     */
    @Import(name="bitrateKbps", required=true)
      private final Output<Integer> bitrateKbps;

    public Output<Integer> bitrateKbps() {
        return this.bitrateKbps;
    }

    /**
     * An optional description for the pipeline.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> description() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * Live pipeline unique identifier.
     * 
     */
    @Import(name="livePipelineName")
      private final @Nullable Output<String> livePipelineName;

    public Output<String> livePipelineName() {
        return this.livePipelineName == null ? Codegen.empty() : this.livePipelineName;
    }

    /**
     * List of the instance level parameter values for the user-defined topology parameters. A pipeline can only define or override parameters values for parameters which have been declared in the referenced topology. Topology parameters without a default value must be defined. Topology parameters with a default value can be optionally be overridden.
     * 
     */
    @Import(name="parameters")
      private final @Nullable Output<List<ParameterDefinitionArgs>> parameters;

    public Output<List<ParameterDefinitionArgs>> parameters() {
        return this.parameters == null ? Codegen.empty() : this.parameters;
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The reference to an existing pipeline topology defined for real-time content processing. When activated, this live pipeline will process content according to the pipeline topology definition.
     * 
     */
    @Import(name="topologyName", required=true)
      private final Output<String> topologyName;

    public Output<String> topologyName() {
        return this.topologyName;
    }

    public LivePipelineArgs(
        Output<String> accountName,
        Output<Integer> bitrateKbps,
        @Nullable Output<String> description,
        @Nullable Output<String> livePipelineName,
        @Nullable Output<List<ParameterDefinitionArgs>> parameters,
        Output<String> resourceGroupName,
        Output<String> topologyName) {
        this.accountName = Objects.requireNonNull(accountName, "expected parameter 'accountName' to be non-null");
        this.bitrateKbps = Objects.requireNonNull(bitrateKbps, "expected parameter 'bitrateKbps' to be non-null");
        this.description = description;
        this.livePipelineName = livePipelineName;
        this.parameters = parameters;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.topologyName = Objects.requireNonNull(topologyName, "expected parameter 'topologyName' to be non-null");
    }

    private LivePipelineArgs() {
        this.accountName = Codegen.empty();
        this.bitrateKbps = Codegen.empty();
        this.description = Codegen.empty();
        this.livePipelineName = Codegen.empty();
        this.parameters = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.topologyName = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LivePipelineArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> accountName;
        private Output<Integer> bitrateKbps;
        private @Nullable Output<String> description;
        private @Nullable Output<String> livePipelineName;
        private @Nullable Output<List<ParameterDefinitionArgs>> parameters;
        private Output<String> resourceGroupName;
        private Output<String> topologyName;

        public Builder() {
    	      // Empty
        }

        public Builder(LivePipelineArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountName = defaults.accountName;
    	      this.bitrateKbps = defaults.bitrateKbps;
    	      this.description = defaults.description;
    	      this.livePipelineName = defaults.livePipelineName;
    	      this.parameters = defaults.parameters;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.topologyName = defaults.topologyName;
        }

        public Builder accountName(Output<String> accountName) {
            this.accountName = Objects.requireNonNull(accountName);
            return this;
        }
        public Builder accountName(String accountName) {
            this.accountName = Output.of(Objects.requireNonNull(accountName));
            return this;
        }
        public Builder bitrateKbps(Output<Integer> bitrateKbps) {
            this.bitrateKbps = Objects.requireNonNull(bitrateKbps);
            return this;
        }
        public Builder bitrateKbps(Integer bitrateKbps) {
            this.bitrateKbps = Output.of(Objects.requireNonNull(bitrateKbps));
            return this;
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder livePipelineName(@Nullable Output<String> livePipelineName) {
            this.livePipelineName = livePipelineName;
            return this;
        }
        public Builder livePipelineName(@Nullable String livePipelineName) {
            this.livePipelineName = Codegen.ofNullable(livePipelineName);
            return this;
        }
        public Builder parameters(@Nullable Output<List<ParameterDefinitionArgs>> parameters) {
            this.parameters = parameters;
            return this;
        }
        public Builder parameters(@Nullable List<ParameterDefinitionArgs> parameters) {
            this.parameters = Codegen.ofNullable(parameters);
            return this;
        }
        public Builder parameters(ParameterDefinitionArgs... parameters) {
            return parameters(List.of(parameters));
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder topologyName(Output<String> topologyName) {
            this.topologyName = Objects.requireNonNull(topologyName);
            return this;
        }
        public Builder topologyName(String topologyName) {
            this.topologyName = Output.of(Objects.requireNonNull(topologyName));
            return this;
        }        public LivePipelineArgs build() {
            return new LivePipelineArgs(accountName, bitrateKbps, description, livePipelineName, parameters, resourceGroupName, topologyName);
        }
    }
}
