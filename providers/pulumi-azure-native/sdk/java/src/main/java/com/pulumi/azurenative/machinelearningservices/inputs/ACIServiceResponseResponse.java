// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.machinelearningservices.inputs;

import com.pulumi.azurenative.machinelearningservices.inputs.ACIServiceResponseResponseDataCollection;
import com.pulumi.azurenative.machinelearningservices.inputs.ACIServiceResponseResponseEncryptionProperties;
import com.pulumi.azurenative.machinelearningservices.inputs.ACIServiceResponseResponseEnvironmentImageRequest;
import com.pulumi.azurenative.machinelearningservices.inputs.ACIServiceResponseResponseVnetConfiguration;
import com.pulumi.azurenative.machinelearningservices.inputs.ContainerResourceRequirementsResponse;
import com.pulumi.azurenative.machinelearningservices.inputs.ModelResponse;
import com.pulumi.azurenative.machinelearningservices.inputs.ServiceResponseBaseResponseError;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The response for an ACI service.
 * 
 */
public final class ACIServiceResponseResponse extends com.pulumi.resources.InvokeArgs {

    public static final ACIServiceResponseResponse Empty = new ACIServiceResponseResponse();

    /**
     * Whether or not Application Insights is enabled.
     * 
     */
    @Import(name="appInsightsEnabled")
    private @Nullable Boolean appInsightsEnabled;

    public Optional<Boolean> appInsightsEnabled() {
        return Optional.ofNullable(this.appInsightsEnabled);
    }

    /**
     * Whether or not authentication is enabled on the service.
     * 
     */
    @Import(name="authEnabled")
    private @Nullable Boolean authEnabled;

    public Optional<Boolean> authEnabled() {
        return Optional.ofNullable(this.authEnabled);
    }

    /**
     * The CName for the service.
     * 
     */
    @Import(name="cname")
    private @Nullable String cname;

    public Optional<String> cname() {
        return Optional.ofNullable(this.cname);
    }

    /**
     * The compute environment type for the service.
     * Expected value is &#39;ACI&#39;.
     * 
     */
    @Import(name="computeType", required=true)
    private String computeType;

    public String computeType() {
        return this.computeType;
    }

    /**
     * The container resource requirements.
     * 
     */
    @Import(name="containerResourceRequirements")
    private @Nullable ContainerResourceRequirementsResponse containerResourceRequirements;

    public Optional<ContainerResourceRequirementsResponse> containerResourceRequirements() {
        return Optional.ofNullable(this.containerResourceRequirements);
    }

    /**
     * Details of the data collection options specified.
     * 
     */
    @Import(name="dataCollection")
    private @Nullable ACIServiceResponseResponseDataCollection dataCollection;

    public Optional<ACIServiceResponseResponseDataCollection> dataCollection() {
        return Optional.ofNullable(this.dataCollection);
    }

    /**
     * The deployment type for the service.
     * 
     */
    @Import(name="deploymentType")
    private @Nullable String deploymentType;

    public Optional<String> deploymentType() {
        return Optional.ofNullable(this.deploymentType);
    }

    /**
     * The service description.
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The encryption properties.
     * 
     */
    @Import(name="encryptionProperties")
    private @Nullable ACIServiceResponseResponseEncryptionProperties encryptionProperties;

    public Optional<ACIServiceResponseResponseEncryptionProperties> encryptionProperties() {
        return Optional.ofNullable(this.encryptionProperties);
    }

    /**
     * The Environment, models and assets used for inferencing.
     * 
     */
    @Import(name="environmentImageRequest")
    private @Nullable ACIServiceResponseResponseEnvironmentImageRequest environmentImageRequest;

    public Optional<ACIServiceResponseResponseEnvironmentImageRequest> environmentImageRequest() {
        return Optional.ofNullable(this.environmentImageRequest);
    }

    /**
     * The error details.
     * 
     */
    @Import(name="error", required=true)
    private ServiceResponseBaseResponseError error;

    public ServiceResponseBaseResponseError error() {
        return this.error;
    }

    /**
     * The service tag dictionary. Tags are mutable.
     * 
     */
    @Import(name="kvTags")
    private @Nullable Map<String,String> kvTags;

    public Optional<Map<String,String>> kvTags() {
        return Optional.ofNullable(this.kvTags);
    }

    /**
     * The name of the Azure location/region.
     * 
     */
    @Import(name="location")
    private @Nullable String location;

    public Optional<String> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Details on the models and configurations.
     * 
     */
    @Import(name="modelConfigMap", required=true)
    private Map<String,Object> modelConfigMap;

    public Map<String,Object> modelConfigMap() {
        return this.modelConfigMap;
    }

    /**
     * The list of models.
     * 
     */
    @Import(name="models")
    private @Nullable List<ModelResponse> models;

    public Optional<List<ModelResponse>> models() {
        return Optional.ofNullable(this.models);
    }

    /**
     * The service property dictionary. Properties are immutable.
     * 
     */
    @Import(name="properties")
    private @Nullable Map<String,String> properties;

    public Optional<Map<String,String>> properties() {
        return Optional.ofNullable(this.properties);
    }

    /**
     * The public Fqdn for the service.
     * 
     */
    @Import(name="publicFqdn")
    private @Nullable String publicFqdn;

    public Optional<String> publicFqdn() {
        return Optional.ofNullable(this.publicFqdn);
    }

    /**
     * The public IP address for the service.
     * 
     */
    @Import(name="publicIp")
    private @Nullable String publicIp;

    public Optional<String> publicIp() {
        return Optional.ofNullable(this.publicIp);
    }

    /**
     * The Uri for sending scoring requests.
     * 
     */
    @Import(name="scoringUri", required=true)
    private String scoringUri;

    public String scoringUri() {
        return this.scoringUri;
    }

    /**
     * The public SSL certificate in PEM format to use if SSL is enabled.
     * 
     */
    @Import(name="sslCertificate")
    private @Nullable String sslCertificate;

    public Optional<String> sslCertificate() {
        return Optional.ofNullable(this.sslCertificate);
    }

    /**
     * Whether or not SSL is enabled.
     * 
     */
    @Import(name="sslEnabled")
    private @Nullable Boolean sslEnabled;

    public Optional<Boolean> sslEnabled() {
        return Optional.ofNullable(this.sslEnabled);
    }

    /**
     * The public SSL key in PEM format for the certificate.
     * 
     */
    @Import(name="sslKey")
    private @Nullable String sslKey;

    public Optional<String> sslKey() {
        return Optional.ofNullable(this.sslKey);
    }

    /**
     * The current state of the service.
     * 
     */
    @Import(name="state", required=true)
    private String state;

    public String state() {
        return this.state;
    }

    /**
     * The Uri for sending swagger requests.
     * 
     */
    @Import(name="swaggerUri", required=true)
    private String swaggerUri;

    public String swaggerUri() {
        return this.swaggerUri;
    }

    /**
     * The virtual network configuration.
     * 
     */
    @Import(name="vnetConfiguration")
    private @Nullable ACIServiceResponseResponseVnetConfiguration vnetConfiguration;

    public Optional<ACIServiceResponseResponseVnetConfiguration> vnetConfiguration() {
        return Optional.ofNullable(this.vnetConfiguration);
    }

    private ACIServiceResponseResponse() {}

    private ACIServiceResponseResponse(ACIServiceResponseResponse $) {
        this.appInsightsEnabled = $.appInsightsEnabled;
        this.authEnabled = $.authEnabled;
        this.cname = $.cname;
        this.computeType = $.computeType;
        this.containerResourceRequirements = $.containerResourceRequirements;
        this.dataCollection = $.dataCollection;
        this.deploymentType = $.deploymentType;
        this.description = $.description;
        this.encryptionProperties = $.encryptionProperties;
        this.environmentImageRequest = $.environmentImageRequest;
        this.error = $.error;
        this.kvTags = $.kvTags;
        this.location = $.location;
        this.modelConfigMap = $.modelConfigMap;
        this.models = $.models;
        this.properties = $.properties;
        this.publicFqdn = $.publicFqdn;
        this.publicIp = $.publicIp;
        this.scoringUri = $.scoringUri;
        this.sslCertificate = $.sslCertificate;
        this.sslEnabled = $.sslEnabled;
        this.sslKey = $.sslKey;
        this.state = $.state;
        this.swaggerUri = $.swaggerUri;
        this.vnetConfiguration = $.vnetConfiguration;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ACIServiceResponseResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ACIServiceResponseResponse $;

        public Builder() {
            $ = new ACIServiceResponseResponse();
        }

        public Builder(ACIServiceResponseResponse defaults) {
            $ = new ACIServiceResponseResponse(Objects.requireNonNull(defaults));
        }

        public Builder appInsightsEnabled(@Nullable Boolean appInsightsEnabled) {
            $.appInsightsEnabled = appInsightsEnabled;
            return this;
        }

        public Builder authEnabled(@Nullable Boolean authEnabled) {
            $.authEnabled = authEnabled;
            return this;
        }

        public Builder cname(@Nullable String cname) {
            $.cname = cname;
            return this;
        }

        public Builder computeType(String computeType) {
            $.computeType = computeType;
            return this;
        }

        public Builder containerResourceRequirements(@Nullable ContainerResourceRequirementsResponse containerResourceRequirements) {
            $.containerResourceRequirements = containerResourceRequirements;
            return this;
        }

        public Builder dataCollection(@Nullable ACIServiceResponseResponseDataCollection dataCollection) {
            $.dataCollection = dataCollection;
            return this;
        }

        public Builder deploymentType(@Nullable String deploymentType) {
            $.deploymentType = deploymentType;
            return this;
        }

        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        public Builder encryptionProperties(@Nullable ACIServiceResponseResponseEncryptionProperties encryptionProperties) {
            $.encryptionProperties = encryptionProperties;
            return this;
        }

        public Builder environmentImageRequest(@Nullable ACIServiceResponseResponseEnvironmentImageRequest environmentImageRequest) {
            $.environmentImageRequest = environmentImageRequest;
            return this;
        }

        public Builder error(ServiceResponseBaseResponseError error) {
            $.error = error;
            return this;
        }

        public Builder kvTags(@Nullable Map<String,String> kvTags) {
            $.kvTags = kvTags;
            return this;
        }

        public Builder location(@Nullable String location) {
            $.location = location;
            return this;
        }

        public Builder modelConfigMap(Map<String,Object> modelConfigMap) {
            $.modelConfigMap = modelConfigMap;
            return this;
        }

        public Builder models(@Nullable List<ModelResponse> models) {
            $.models = models;
            return this;
        }

        public Builder models(ModelResponse... models) {
            return models(List.of(models));
        }

        public Builder properties(@Nullable Map<String,String> properties) {
            $.properties = properties;
            return this;
        }

        public Builder publicFqdn(@Nullable String publicFqdn) {
            $.publicFqdn = publicFqdn;
            return this;
        }

        public Builder publicIp(@Nullable String publicIp) {
            $.publicIp = publicIp;
            return this;
        }

        public Builder scoringUri(String scoringUri) {
            $.scoringUri = scoringUri;
            return this;
        }

        public Builder sslCertificate(@Nullable String sslCertificate) {
            $.sslCertificate = sslCertificate;
            return this;
        }

        public Builder sslEnabled(@Nullable Boolean sslEnabled) {
            $.sslEnabled = sslEnabled;
            return this;
        }

        public Builder sslKey(@Nullable String sslKey) {
            $.sslKey = sslKey;
            return this;
        }

        public Builder state(String state) {
            $.state = state;
            return this;
        }

        public Builder swaggerUri(String swaggerUri) {
            $.swaggerUri = swaggerUri;
            return this;
        }

        public Builder vnetConfiguration(@Nullable ACIServiceResponseResponseVnetConfiguration vnetConfiguration) {
            $.vnetConfiguration = vnetConfiguration;
            return this;
        }

        public ACIServiceResponseResponse build() {
            $.computeType = Codegen.stringProp("computeType").arg($.computeType).require();
            $.error = Objects.requireNonNull($.error, "expected parameter 'error' to be non-null");
            $.modelConfigMap = Objects.requireNonNull($.modelConfigMap, "expected parameter 'modelConfigMap' to be non-null");
            $.scoringUri = Objects.requireNonNull($.scoringUri, "expected parameter 'scoringUri' to be non-null");
            $.state = Objects.requireNonNull($.state, "expected parameter 'state' to be non-null");
            $.swaggerUri = Objects.requireNonNull($.swaggerUri, "expected parameter 'swaggerUri' to be non-null");
            return $;
        }
    }

}
