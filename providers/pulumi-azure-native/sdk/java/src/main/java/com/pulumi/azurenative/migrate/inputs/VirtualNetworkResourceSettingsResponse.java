// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.migrate.inputs;

import com.pulumi.azurenative.migrate.inputs.SubnetResourceSettingsResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Defines the virtual network resource settings.
 * 
 */
public final class VirtualNetworkResourceSettingsResponse extends com.pulumi.resources.InvokeArgs {

    public static final VirtualNetworkResourceSettingsResponse Empty = new VirtualNetworkResourceSettingsResponse();

    /**
     * Gets or sets the address prefixes for the virtual network.
     * 
     */
    @Import(name="addressSpace")
    private @Nullable List<String> addressSpace;

    public Optional<List<String>> addressSpace() {
        return Optional.ofNullable(this.addressSpace);
    }

    /**
     * Gets or sets DHCPOptions that contains an array of DNS servers available to VMs
     * deployed in the virtual network.
     * 
     */
    @Import(name="dnsServers")
    private @Nullable List<String> dnsServers;

    public Optional<List<String>> dnsServers() {
        return Optional.ofNullable(this.dnsServers);
    }

    /**
     * Gets or sets a value indicating whether gets or sets whether the
     * DDOS protection should be switched on.
     * 
     */
    @Import(name="enableDdosProtection")
    private @Nullable Boolean enableDdosProtection;

    public Optional<Boolean> enableDdosProtection() {
        return Optional.ofNullable(this.enableDdosProtection);
    }

    /**
     * The resource type. For example, the value can be Microsoft.Compute/virtualMachines.
     * Expected value is &#39;Microsoft.Network/virtualNetworks&#39;.
     * 
     */
    @Import(name="resourceType", required=true)
    private String resourceType;

    public String resourceType() {
        return this.resourceType;
    }

    /**
     * Gets or sets List of subnets in a VirtualNetwork.
     * 
     */
    @Import(name="subnets")
    private @Nullable List<SubnetResourceSettingsResponse> subnets;

    public Optional<List<SubnetResourceSettingsResponse>> subnets() {
        return Optional.ofNullable(this.subnets);
    }

    /**
     * Gets or sets the target Resource name.
     * 
     */
    @Import(name="targetResourceName", required=true)
    private String targetResourceName;

    public String targetResourceName() {
        return this.targetResourceName;
    }

    private VirtualNetworkResourceSettingsResponse() {}

    private VirtualNetworkResourceSettingsResponse(VirtualNetworkResourceSettingsResponse $) {
        this.addressSpace = $.addressSpace;
        this.dnsServers = $.dnsServers;
        this.enableDdosProtection = $.enableDdosProtection;
        this.resourceType = $.resourceType;
        this.subnets = $.subnets;
        this.targetResourceName = $.targetResourceName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VirtualNetworkResourceSettingsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VirtualNetworkResourceSettingsResponse $;

        public Builder() {
            $ = new VirtualNetworkResourceSettingsResponse();
        }

        public Builder(VirtualNetworkResourceSettingsResponse defaults) {
            $ = new VirtualNetworkResourceSettingsResponse(Objects.requireNonNull(defaults));
        }

        public Builder addressSpace(@Nullable List<String> addressSpace) {
            $.addressSpace = addressSpace;
            return this;
        }

        public Builder addressSpace(String... addressSpace) {
            return addressSpace(List.of(addressSpace));
        }

        public Builder dnsServers(@Nullable List<String> dnsServers) {
            $.dnsServers = dnsServers;
            return this;
        }

        public Builder dnsServers(String... dnsServers) {
            return dnsServers(List.of(dnsServers));
        }

        public Builder enableDdosProtection(@Nullable Boolean enableDdosProtection) {
            $.enableDdosProtection = enableDdosProtection;
            return this;
        }

        public Builder resourceType(String resourceType) {
            $.resourceType = resourceType;
            return this;
        }

        public Builder subnets(@Nullable List<SubnetResourceSettingsResponse> subnets) {
            $.subnets = subnets;
            return this;
        }

        public Builder subnets(SubnetResourceSettingsResponse... subnets) {
            return subnets(List.of(subnets));
        }

        public Builder targetResourceName(String targetResourceName) {
            $.targetResourceName = targetResourceName;
            return this;
        }

        public VirtualNetworkResourceSettingsResponse build() {
            $.resourceType = Codegen.stringProp("resourceType").arg($.resourceType).require();
            $.targetResourceName = Objects.requireNonNull($.targetResourceName, "expected parameter 'targetResourceName' to be non-null");
            return $;
        }
    }

}
