// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.migrate.inputs;

import com.pulumi.azurenative.migrate.enums.AssessmentSizingCriterion;
import com.pulumi.azurenative.migrate.enums.AssessmentStage;
import com.pulumi.azurenative.migrate.enums.AzureDiskType;
import com.pulumi.azurenative.migrate.enums.AzureHybridUseBenefit;
import com.pulumi.azurenative.migrate.enums.AzureLocation;
import com.pulumi.azurenative.migrate.enums.AzureOfferCode;
import com.pulumi.azurenative.migrate.enums.AzurePricingTier;
import com.pulumi.azurenative.migrate.enums.AzureStorageRedundancy;
import com.pulumi.azurenative.migrate.enums.AzureVmFamily;
import com.pulumi.azurenative.migrate.enums.Currency;
import com.pulumi.azurenative.migrate.enums.Percentile;
import com.pulumi.azurenative.migrate.enums.ReservedInstance;
import com.pulumi.azurenative.migrate.enums.TimeRange;
import com.pulumi.azurenative.migrate.inputs.VmUptimeArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Properties of an assessment.
 * 
 */
public final class AssessmentPropertiesArgs extends com.pulumi.resources.ResourceArgs {

    public static final AssessmentPropertiesArgs Empty = new AssessmentPropertiesArgs();

    /**
     * Storage type selected for this disk.
     * 
     */
    @Import(name="azureDiskType", required=true)
    private Output<Either<String,AzureDiskType>> azureDiskType;

    public Output<Either<String,AzureDiskType>> azureDiskType() {
        return this.azureDiskType;
    }

    /**
     * AHUB discount on windows virtual machines.
     * 
     */
    @Import(name="azureHybridUseBenefit", required=true)
    private Output<Either<String,AzureHybridUseBenefit>> azureHybridUseBenefit;

    public Output<Either<String,AzureHybridUseBenefit>> azureHybridUseBenefit() {
        return this.azureHybridUseBenefit;
    }

    /**
     * Target Azure location for which the machines should be assessed. These enums are the same as used by Compute API.
     * 
     */
    @Import(name="azureLocation", required=true)
    private Output<Either<String,AzureLocation>> azureLocation;

    public Output<Either<String,AzureLocation>> azureLocation() {
        return this.azureLocation;
    }

    /**
     * Offer code according to which cost estimation is done.
     * 
     */
    @Import(name="azureOfferCode", required=true)
    private Output<Either<String,AzureOfferCode>> azureOfferCode;

    public Output<Either<String,AzureOfferCode>> azureOfferCode() {
        return this.azureOfferCode;
    }

    /**
     * Pricing tier for Size evaluation.
     * 
     */
    @Import(name="azurePricingTier", required=true)
    private Output<Either<String,AzurePricingTier>> azurePricingTier;

    public Output<Either<String,AzurePricingTier>> azurePricingTier() {
        return this.azurePricingTier;
    }

    /**
     * Storage Redundancy type offered by Azure.
     * 
     */
    @Import(name="azureStorageRedundancy", required=true)
    private Output<Either<String,AzureStorageRedundancy>> azureStorageRedundancy;

    public Output<Either<String,AzureStorageRedundancy>> azureStorageRedundancy() {
        return this.azureStorageRedundancy;
    }

    /**
     * List of azure VM families.
     * 
     */
    @Import(name="azureVmFamilies", required=true)
    private Output<List<Either<String,AzureVmFamily>>> azureVmFamilies;

    public Output<List<Either<String,AzureVmFamily>>> azureVmFamilies() {
        return this.azureVmFamilies;
    }

    /**
     * Currency to report prices in.
     * 
     */
    @Import(name="currency", required=true)
    private Output<Either<String,Currency>> currency;

    public Output<Either<String,Currency>> currency() {
        return this.currency;
    }

    /**
     * Custom discount percentage to be applied on final costs. Can be in the range [0, 100].
     * 
     */
    @Import(name="discountPercentage", required=true)
    private Output<Double> discountPercentage;

    public Output<Double> discountPercentage() {
        return this.discountPercentage;
    }

    /**
     * Percentile of performance data used to recommend Azure size.
     * 
     */
    @Import(name="percentile", required=true)
    private Output<Either<String,Percentile>> percentile;

    public Output<Either<String,Percentile>> percentile() {
        return this.percentile;
    }

    /**
     * Azure reserved instance.
     * 
     */
    @Import(name="reservedInstance", required=true)
    private Output<Either<String,ReservedInstance>> reservedInstance;

    public Output<Either<String,ReservedInstance>> reservedInstance() {
        return this.reservedInstance;
    }

    /**
     * Scaling factor used over utilization data to add a performance buffer for new machines to be created in Azure. Min Value = 1.0, Max value = 1.9, Default = 1.3.
     * 
     */
    @Import(name="scalingFactor", required=true)
    private Output<Double> scalingFactor;

    public Output<Double> scalingFactor() {
        return this.scalingFactor;
    }

    /**
     * Assessment sizing criterion.
     * 
     */
    @Import(name="sizingCriterion", required=true)
    private Output<Either<String,AssessmentSizingCriterion>> sizingCriterion;

    public Output<Either<String,AssessmentSizingCriterion>> sizingCriterion() {
        return this.sizingCriterion;
    }

    /**
     * User configurable setting that describes the status of the assessment.
     * 
     */
    @Import(name="stage", required=true)
    private Output<Either<String,AssessmentStage>> stage;

    public Output<Either<String,AssessmentStage>> stage() {
        return this.stage;
    }

    /**
     * Time range of performance data used to recommend a size.
     * 
     */
    @Import(name="timeRange", required=true)
    private Output<Either<String,TimeRange>> timeRange;

    public Output<Either<String,TimeRange>> timeRange() {
        return this.timeRange;
    }

    /**
     * Specify the duration for which the VMs are up in the on-premises environment.
     * 
     */
    @Import(name="vmUptime", required=true)
    private Output<VmUptimeArgs> vmUptime;

    public Output<VmUptimeArgs> vmUptime() {
        return this.vmUptime;
    }

    private AssessmentPropertiesArgs() {}

    private AssessmentPropertiesArgs(AssessmentPropertiesArgs $) {
        this.azureDiskType = $.azureDiskType;
        this.azureHybridUseBenefit = $.azureHybridUseBenefit;
        this.azureLocation = $.azureLocation;
        this.azureOfferCode = $.azureOfferCode;
        this.azurePricingTier = $.azurePricingTier;
        this.azureStorageRedundancy = $.azureStorageRedundancy;
        this.azureVmFamilies = $.azureVmFamilies;
        this.currency = $.currency;
        this.discountPercentage = $.discountPercentage;
        this.percentile = $.percentile;
        this.reservedInstance = $.reservedInstance;
        this.scalingFactor = $.scalingFactor;
        this.sizingCriterion = $.sizingCriterion;
        this.stage = $.stage;
        this.timeRange = $.timeRange;
        this.vmUptime = $.vmUptime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AssessmentPropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AssessmentPropertiesArgs $;

        public Builder() {
            $ = new AssessmentPropertiesArgs();
        }

        public Builder(AssessmentPropertiesArgs defaults) {
            $ = new AssessmentPropertiesArgs(Objects.requireNonNull(defaults));
        }

        public Builder azureDiskType(Output<Either<String,AzureDiskType>> azureDiskType) {
            $.azureDiskType = azureDiskType;
            return this;
        }

        public Builder azureDiskType(Either<String,AzureDiskType> azureDiskType) {
            return azureDiskType(Output.of(azureDiskType));
        }

        public Builder azureDiskType(String azureDiskType) {
            return azureDiskType(Either.ofLeft(azureDiskType));
        }

        public Builder azureDiskType(AzureDiskType azureDiskType) {
            return azureDiskType(Either.ofRight(azureDiskType));
        }

        public Builder azureHybridUseBenefit(Output<Either<String,AzureHybridUseBenefit>> azureHybridUseBenefit) {
            $.azureHybridUseBenefit = azureHybridUseBenefit;
            return this;
        }

        public Builder azureHybridUseBenefit(Either<String,AzureHybridUseBenefit> azureHybridUseBenefit) {
            return azureHybridUseBenefit(Output.of(azureHybridUseBenefit));
        }

        public Builder azureHybridUseBenefit(String azureHybridUseBenefit) {
            return azureHybridUseBenefit(Either.ofLeft(azureHybridUseBenefit));
        }

        public Builder azureHybridUseBenefit(AzureHybridUseBenefit azureHybridUseBenefit) {
            return azureHybridUseBenefit(Either.ofRight(azureHybridUseBenefit));
        }

        public Builder azureLocation(Output<Either<String,AzureLocation>> azureLocation) {
            $.azureLocation = azureLocation;
            return this;
        }

        public Builder azureLocation(Either<String,AzureLocation> azureLocation) {
            return azureLocation(Output.of(azureLocation));
        }

        public Builder azureLocation(String azureLocation) {
            return azureLocation(Either.ofLeft(azureLocation));
        }

        public Builder azureLocation(AzureLocation azureLocation) {
            return azureLocation(Either.ofRight(azureLocation));
        }

        public Builder azureOfferCode(Output<Either<String,AzureOfferCode>> azureOfferCode) {
            $.azureOfferCode = azureOfferCode;
            return this;
        }

        public Builder azureOfferCode(Either<String,AzureOfferCode> azureOfferCode) {
            return azureOfferCode(Output.of(azureOfferCode));
        }

        public Builder azureOfferCode(String azureOfferCode) {
            return azureOfferCode(Either.ofLeft(azureOfferCode));
        }

        public Builder azureOfferCode(AzureOfferCode azureOfferCode) {
            return azureOfferCode(Either.ofRight(azureOfferCode));
        }

        public Builder azurePricingTier(Output<Either<String,AzurePricingTier>> azurePricingTier) {
            $.azurePricingTier = azurePricingTier;
            return this;
        }

        public Builder azurePricingTier(Either<String,AzurePricingTier> azurePricingTier) {
            return azurePricingTier(Output.of(azurePricingTier));
        }

        public Builder azurePricingTier(String azurePricingTier) {
            return azurePricingTier(Either.ofLeft(azurePricingTier));
        }

        public Builder azurePricingTier(AzurePricingTier azurePricingTier) {
            return azurePricingTier(Either.ofRight(azurePricingTier));
        }

        public Builder azureStorageRedundancy(Output<Either<String,AzureStorageRedundancy>> azureStorageRedundancy) {
            $.azureStorageRedundancy = azureStorageRedundancy;
            return this;
        }

        public Builder azureStorageRedundancy(Either<String,AzureStorageRedundancy> azureStorageRedundancy) {
            return azureStorageRedundancy(Output.of(azureStorageRedundancy));
        }

        public Builder azureStorageRedundancy(String azureStorageRedundancy) {
            return azureStorageRedundancy(Either.ofLeft(azureStorageRedundancy));
        }

        public Builder azureStorageRedundancy(AzureStorageRedundancy azureStorageRedundancy) {
            return azureStorageRedundancy(Either.ofRight(azureStorageRedundancy));
        }

        public Builder azureVmFamilies(Output<List<Either<String,AzureVmFamily>>> azureVmFamilies) {
            $.azureVmFamilies = azureVmFamilies;
            return this;
        }

        public Builder azureVmFamilies(List<Either<String,AzureVmFamily>> azureVmFamilies) {
            return azureVmFamilies(Output.of(azureVmFamilies));
        }

        public Builder azureVmFamilies(Either<String,AzureVmFamily>... azureVmFamilies) {
            return azureVmFamilies(List.of(azureVmFamilies));
        }

        public Builder currency(Output<Either<String,Currency>> currency) {
            $.currency = currency;
            return this;
        }

        public Builder currency(Either<String,Currency> currency) {
            return currency(Output.of(currency));
        }

        public Builder currency(String currency) {
            return currency(Either.ofLeft(currency));
        }

        public Builder currency(Currency currency) {
            return currency(Either.ofRight(currency));
        }

        public Builder discountPercentage(Output<Double> discountPercentage) {
            $.discountPercentage = discountPercentage;
            return this;
        }

        public Builder discountPercentage(Double discountPercentage) {
            return discountPercentage(Output.of(discountPercentage));
        }

        public Builder percentile(Output<Either<String,Percentile>> percentile) {
            $.percentile = percentile;
            return this;
        }

        public Builder percentile(Either<String,Percentile> percentile) {
            return percentile(Output.of(percentile));
        }

        public Builder percentile(String percentile) {
            return percentile(Either.ofLeft(percentile));
        }

        public Builder percentile(Percentile percentile) {
            return percentile(Either.ofRight(percentile));
        }

        public Builder reservedInstance(Output<Either<String,ReservedInstance>> reservedInstance) {
            $.reservedInstance = reservedInstance;
            return this;
        }

        public Builder reservedInstance(Either<String,ReservedInstance> reservedInstance) {
            return reservedInstance(Output.of(reservedInstance));
        }

        public Builder reservedInstance(String reservedInstance) {
            return reservedInstance(Either.ofLeft(reservedInstance));
        }

        public Builder reservedInstance(ReservedInstance reservedInstance) {
            return reservedInstance(Either.ofRight(reservedInstance));
        }

        public Builder scalingFactor(Output<Double> scalingFactor) {
            $.scalingFactor = scalingFactor;
            return this;
        }

        public Builder scalingFactor(Double scalingFactor) {
            return scalingFactor(Output.of(scalingFactor));
        }

        public Builder sizingCriterion(Output<Either<String,AssessmentSizingCriterion>> sizingCriterion) {
            $.sizingCriterion = sizingCriterion;
            return this;
        }

        public Builder sizingCriterion(Either<String,AssessmentSizingCriterion> sizingCriterion) {
            return sizingCriterion(Output.of(sizingCriterion));
        }

        public Builder sizingCriterion(String sizingCriterion) {
            return sizingCriterion(Either.ofLeft(sizingCriterion));
        }

        public Builder sizingCriterion(AssessmentSizingCriterion sizingCriterion) {
            return sizingCriterion(Either.ofRight(sizingCriterion));
        }

        public Builder stage(Output<Either<String,AssessmentStage>> stage) {
            $.stage = stage;
            return this;
        }

        public Builder stage(Either<String,AssessmentStage> stage) {
            return stage(Output.of(stage));
        }

        public Builder stage(String stage) {
            return stage(Either.ofLeft(stage));
        }

        public Builder stage(AssessmentStage stage) {
            return stage(Either.ofRight(stage));
        }

        public Builder timeRange(Output<Either<String,TimeRange>> timeRange) {
            $.timeRange = timeRange;
            return this;
        }

        public Builder timeRange(Either<String,TimeRange> timeRange) {
            return timeRange(Output.of(timeRange));
        }

        public Builder timeRange(String timeRange) {
            return timeRange(Either.ofLeft(timeRange));
        }

        public Builder timeRange(TimeRange timeRange) {
            return timeRange(Either.ofRight(timeRange));
        }

        public Builder vmUptime(Output<VmUptimeArgs> vmUptime) {
            $.vmUptime = vmUptime;
            return this;
        }

        public Builder vmUptime(VmUptimeArgs vmUptime) {
            return vmUptime(Output.of(vmUptime));
        }

        public AssessmentPropertiesArgs build() {
            $.azureDiskType = Objects.requireNonNull($.azureDiskType, "expected parameter 'azureDiskType' to be non-null");
            $.azureHybridUseBenefit = Objects.requireNonNull($.azureHybridUseBenefit, "expected parameter 'azureHybridUseBenefit' to be non-null");
            $.azureLocation = Objects.requireNonNull($.azureLocation, "expected parameter 'azureLocation' to be non-null");
            $.azureOfferCode = Objects.requireNonNull($.azureOfferCode, "expected parameter 'azureOfferCode' to be non-null");
            $.azurePricingTier = Objects.requireNonNull($.azurePricingTier, "expected parameter 'azurePricingTier' to be non-null");
            $.azureStorageRedundancy = Objects.requireNonNull($.azureStorageRedundancy, "expected parameter 'azureStorageRedundancy' to be non-null");
            $.azureVmFamilies = Objects.requireNonNull($.azureVmFamilies, "expected parameter 'azureVmFamilies' to be non-null");
            $.currency = Objects.requireNonNull($.currency, "expected parameter 'currency' to be non-null");
            $.discountPercentage = Objects.requireNonNull($.discountPercentage, "expected parameter 'discountPercentage' to be non-null");
            $.percentile = Objects.requireNonNull($.percentile, "expected parameter 'percentile' to be non-null");
            $.reservedInstance = Objects.requireNonNull($.reservedInstance, "expected parameter 'reservedInstance' to be non-null");
            $.scalingFactor = Objects.requireNonNull($.scalingFactor, "expected parameter 'scalingFactor' to be non-null");
            $.sizingCriterion = Objects.requireNonNull($.sizingCriterion, "expected parameter 'sizingCriterion' to be non-null");
            $.stage = Objects.requireNonNull($.stage, "expected parameter 'stage' to be non-null");
            $.timeRange = Objects.requireNonNull($.timeRange, "expected parameter 'timeRange' to be non-null");
            $.vmUptime = Objects.requireNonNull($.vmUptime, "expected parameter 'vmUptime' to be non-null");
            return $;
        }
    }

}
