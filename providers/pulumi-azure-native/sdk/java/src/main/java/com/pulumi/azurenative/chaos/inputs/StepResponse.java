// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.chaos.inputs;

import com.pulumi.azurenative.chaos.inputs.BranchResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Model that represents a step in the Experiment resource.
 * 
 */
public final class StepResponse extends com.pulumi.resources.InvokeArgs {

    public static final StepResponse Empty = new StepResponse();

    /**
     * List of branches.
     * 
     */
    @Import(name="branches", required=true)
    private List<BranchResponse> branches;

    /**
     * @return List of branches.
     * 
     */
    public List<BranchResponse> branches() {
        return this.branches;
    }

    /**
     * String of the step name.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return String of the step name.
     * 
     */
    public String name() {
        return this.name;
    }

    private StepResponse() {}

    private StepResponse(StepResponse $) {
        this.branches = $.branches;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StepResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StepResponse $;

        public Builder() {
            $ = new StepResponse();
        }

        public Builder(StepResponse defaults) {
            $ = new StepResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param branches List of branches.
         * 
         * @return builder
         * 
         */
        public Builder branches(List<BranchResponse> branches) {
            $.branches = branches;
            return this;
        }

        /**
         * @param branches List of branches.
         * 
         * @return builder
         * 
         */
        public Builder branches(BranchResponse... branches) {
            return branches(List.of(branches));
        }

        /**
         * @param name String of the step name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public StepResponse build() {
            $.branches = Objects.requireNonNull($.branches, "expected parameter 'branches' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            return $;
        }
    }

}
