// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.recoveryservices.inputs;

import com.pulumi.azurenative.recoveryservices.inputs.AgentDetailsResponse;
import com.pulumi.azurenative.recoveryservices.inputs.DraDetailsResponse;
import com.pulumi.azurenative.recoveryservices.inputs.ProcessServerDetailsResponse;
import com.pulumi.azurenative.recoveryservices.inputs.PushInstallerDetailsResponse;
import com.pulumi.azurenative.recoveryservices.inputs.RcmProxyDetailsResponse;
import com.pulumi.azurenative.recoveryservices.inputs.ReplicationAgentDetailsResponse;
import com.pulumi.azurenative.recoveryservices.inputs.ReprotectAgentDetailsResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * InMageRcm fabric specific details.
 * 
 */
public final class InMageRcmFabricSpecificDetailsResponse extends com.pulumi.resources.InvokeArgs {

    public static final InMageRcmFabricSpecificDetailsResponse Empty = new InMageRcmFabricSpecificDetailsResponse();

    /**
     * The list of agent details.
     * 
     */
    @Import(name="agentDetails", required=true)
    private List<AgentDetailsResponse> agentDetails;

    public List<AgentDetailsResponse> agentDetails() {
        return this.agentDetails;
    }

    /**
     * The control plane Uri.
     * 
     */
    @Import(name="controlPlaneUri", required=true)
    private String controlPlaneUri;

    public String controlPlaneUri() {
        return this.controlPlaneUri;
    }

    /**
     * The data plane Uri.
     * 
     */
    @Import(name="dataPlaneUri", required=true)
    private String dataPlaneUri;

    public String dataPlaneUri() {
        return this.dataPlaneUri;
    }

    /**
     * The list of DRAs.
     * 
     */
    @Import(name="dras", required=true)
    private List<DraDetailsResponse> dras;

    public List<DraDetailsResponse> dras() {
        return this.dras;
    }

    /**
     * Gets the class type. Overridden in derived classes.
     * Expected value is &#39;InMageRcm&#39;.
     * 
     */
    @Import(name="instanceType", required=true)
    private String instanceType;

    public String instanceType() {
        return this.instanceType;
    }

    /**
     * The ARM Id of the physical site.
     * 
     */
    @Import(name="physicalSiteId", required=true)
    private String physicalSiteId;

    public String physicalSiteId() {
        return this.physicalSiteId;
    }

    /**
     * The list of process servers.
     * 
     */
    @Import(name="processServers", required=true)
    private List<ProcessServerDetailsResponse> processServers;

    public List<ProcessServerDetailsResponse> processServers() {
        return this.processServers;
    }

    /**
     * The list of push installers.
     * 
     */
    @Import(name="pushInstallers", required=true)
    private List<PushInstallerDetailsResponse> pushInstallers;

    public List<PushInstallerDetailsResponse> pushInstallers() {
        return this.pushInstallers;
    }

    /**
     * The list of RCM proxies.
     * 
     */
    @Import(name="rcmProxies", required=true)
    private List<RcmProxyDetailsResponse> rcmProxies;

    public List<RcmProxyDetailsResponse> rcmProxies() {
        return this.rcmProxies;
    }

    /**
     * The list of replication agents.
     * 
     */
    @Import(name="replicationAgents", required=true)
    private List<ReplicationAgentDetailsResponse> replicationAgents;

    public List<ReplicationAgentDetailsResponse> replicationAgents() {
        return this.replicationAgents;
    }

    /**
     * The list of reprotect agents.
     * 
     */
    @Import(name="reprotectAgents", required=true)
    private List<ReprotectAgentDetailsResponse> reprotectAgents;

    public List<ReprotectAgentDetailsResponse> reprotectAgents() {
        return this.reprotectAgents;
    }

    /**
     * The service container Id.
     * 
     */
    @Import(name="serviceContainerId", required=true)
    private String serviceContainerId;

    public String serviceContainerId() {
        return this.serviceContainerId;
    }

    /**
     * The service endpoint.
     * 
     */
    @Import(name="serviceEndpoint", required=true)
    private String serviceEndpoint;

    public String serviceEndpoint() {
        return this.serviceEndpoint;
    }

    /**
     * The service resource Id.
     * 
     */
    @Import(name="serviceResourceId", required=true)
    private String serviceResourceId;

    public String serviceResourceId() {
        return this.serviceResourceId;
    }

    /**
     * The ARM Id of the VMware site.
     * 
     */
    @Import(name="vmwareSiteId", required=true)
    private String vmwareSiteId;

    public String vmwareSiteId() {
        return this.vmwareSiteId;
    }

    private InMageRcmFabricSpecificDetailsResponse() {}

    private InMageRcmFabricSpecificDetailsResponse(InMageRcmFabricSpecificDetailsResponse $) {
        this.agentDetails = $.agentDetails;
        this.controlPlaneUri = $.controlPlaneUri;
        this.dataPlaneUri = $.dataPlaneUri;
        this.dras = $.dras;
        this.instanceType = $.instanceType;
        this.physicalSiteId = $.physicalSiteId;
        this.processServers = $.processServers;
        this.pushInstallers = $.pushInstallers;
        this.rcmProxies = $.rcmProxies;
        this.replicationAgents = $.replicationAgents;
        this.reprotectAgents = $.reprotectAgents;
        this.serviceContainerId = $.serviceContainerId;
        this.serviceEndpoint = $.serviceEndpoint;
        this.serviceResourceId = $.serviceResourceId;
        this.vmwareSiteId = $.vmwareSiteId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InMageRcmFabricSpecificDetailsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InMageRcmFabricSpecificDetailsResponse $;

        public Builder() {
            $ = new InMageRcmFabricSpecificDetailsResponse();
        }

        public Builder(InMageRcmFabricSpecificDetailsResponse defaults) {
            $ = new InMageRcmFabricSpecificDetailsResponse(Objects.requireNonNull(defaults));
        }

        public Builder agentDetails(List<AgentDetailsResponse> agentDetails) {
            $.agentDetails = agentDetails;
            return this;
        }

        public Builder agentDetails(AgentDetailsResponse... agentDetails) {
            return agentDetails(List.of(agentDetails));
        }

        public Builder controlPlaneUri(String controlPlaneUri) {
            $.controlPlaneUri = controlPlaneUri;
            return this;
        }

        public Builder dataPlaneUri(String dataPlaneUri) {
            $.dataPlaneUri = dataPlaneUri;
            return this;
        }

        public Builder dras(List<DraDetailsResponse> dras) {
            $.dras = dras;
            return this;
        }

        public Builder dras(DraDetailsResponse... dras) {
            return dras(List.of(dras));
        }

        public Builder instanceType(String instanceType) {
            $.instanceType = instanceType;
            return this;
        }

        public Builder physicalSiteId(String physicalSiteId) {
            $.physicalSiteId = physicalSiteId;
            return this;
        }

        public Builder processServers(List<ProcessServerDetailsResponse> processServers) {
            $.processServers = processServers;
            return this;
        }

        public Builder processServers(ProcessServerDetailsResponse... processServers) {
            return processServers(List.of(processServers));
        }

        public Builder pushInstallers(List<PushInstallerDetailsResponse> pushInstallers) {
            $.pushInstallers = pushInstallers;
            return this;
        }

        public Builder pushInstallers(PushInstallerDetailsResponse... pushInstallers) {
            return pushInstallers(List.of(pushInstallers));
        }

        public Builder rcmProxies(List<RcmProxyDetailsResponse> rcmProxies) {
            $.rcmProxies = rcmProxies;
            return this;
        }

        public Builder rcmProxies(RcmProxyDetailsResponse... rcmProxies) {
            return rcmProxies(List.of(rcmProxies));
        }

        public Builder replicationAgents(List<ReplicationAgentDetailsResponse> replicationAgents) {
            $.replicationAgents = replicationAgents;
            return this;
        }

        public Builder replicationAgents(ReplicationAgentDetailsResponse... replicationAgents) {
            return replicationAgents(List.of(replicationAgents));
        }

        public Builder reprotectAgents(List<ReprotectAgentDetailsResponse> reprotectAgents) {
            $.reprotectAgents = reprotectAgents;
            return this;
        }

        public Builder reprotectAgents(ReprotectAgentDetailsResponse... reprotectAgents) {
            return reprotectAgents(List.of(reprotectAgents));
        }

        public Builder serviceContainerId(String serviceContainerId) {
            $.serviceContainerId = serviceContainerId;
            return this;
        }

        public Builder serviceEndpoint(String serviceEndpoint) {
            $.serviceEndpoint = serviceEndpoint;
            return this;
        }

        public Builder serviceResourceId(String serviceResourceId) {
            $.serviceResourceId = serviceResourceId;
            return this;
        }

        public Builder vmwareSiteId(String vmwareSiteId) {
            $.vmwareSiteId = vmwareSiteId;
            return this;
        }

        public InMageRcmFabricSpecificDetailsResponse build() {
            $.agentDetails = Objects.requireNonNull($.agentDetails, "expected parameter 'agentDetails' to be non-null");
            $.controlPlaneUri = Objects.requireNonNull($.controlPlaneUri, "expected parameter 'controlPlaneUri' to be non-null");
            $.dataPlaneUri = Objects.requireNonNull($.dataPlaneUri, "expected parameter 'dataPlaneUri' to be non-null");
            $.dras = Objects.requireNonNull($.dras, "expected parameter 'dras' to be non-null");
            $.instanceType = Codegen.stringProp("instanceType").arg($.instanceType).require();
            $.physicalSiteId = Objects.requireNonNull($.physicalSiteId, "expected parameter 'physicalSiteId' to be non-null");
            $.processServers = Objects.requireNonNull($.processServers, "expected parameter 'processServers' to be non-null");
            $.pushInstallers = Objects.requireNonNull($.pushInstallers, "expected parameter 'pushInstallers' to be non-null");
            $.rcmProxies = Objects.requireNonNull($.rcmProxies, "expected parameter 'rcmProxies' to be non-null");
            $.replicationAgents = Objects.requireNonNull($.replicationAgents, "expected parameter 'replicationAgents' to be non-null");
            $.reprotectAgents = Objects.requireNonNull($.reprotectAgents, "expected parameter 'reprotectAgents' to be non-null");
            $.serviceContainerId = Objects.requireNonNull($.serviceContainerId, "expected parameter 'serviceContainerId' to be non-null");
            $.serviceEndpoint = Objects.requireNonNull($.serviceEndpoint, "expected parameter 'serviceEndpoint' to be non-null");
            $.serviceResourceId = Objects.requireNonNull($.serviceResourceId, "expected parameter 'serviceResourceId' to be non-null");
            $.vmwareSiteId = Objects.requireNonNull($.vmwareSiteId, "expected parameter 'vmwareSiteId' to be non-null");
            return $;
        }
    }

}
