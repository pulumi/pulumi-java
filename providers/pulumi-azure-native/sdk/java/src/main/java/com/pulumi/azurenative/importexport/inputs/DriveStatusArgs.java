// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.importexport.inputs;

import com.pulumi.azurenative.importexport.enums.DriveState;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Provides information about the drive&#39;s status
 * 
 */
public final class DriveStatusArgs extends com.pulumi.resources.ResourceArgs {

    public static final DriveStatusArgs Empty = new DriveStatusArgs();

    /**
     * The BitLocker key used to encrypt the drive.
     * 
     */
    @Import(name="bitLockerKey")
    private @Nullable Output<String> bitLockerKey;

    public Optional<Output<String>> bitLockerKey() {
        return Optional.ofNullable(this.bitLockerKey);
    }

    /**
     * Bytes successfully transferred for the drive.
     * 
     */
    @Import(name="bytesSucceeded")
    private @Nullable Output<Double> bytesSucceeded;

    public Optional<Output<Double>> bytesSucceeded() {
        return Optional.ofNullable(this.bytesSucceeded);
    }

    /**
     * Detailed status about the data transfer process. This field is not returned in the response until the drive is in the Transferring state.
     * 
     */
    @Import(name="copyStatus")
    private @Nullable Output<String> copyStatus;

    public Optional<Output<String>> copyStatus() {
        return Optional.ofNullable(this.copyStatus);
    }

    /**
     * The drive header hash value.
     * 
     */
    @Import(name="driveHeaderHash")
    private @Nullable Output<String> driveHeaderHash;

    public Optional<Output<String>> driveHeaderHash() {
        return Optional.ofNullable(this.driveHeaderHash);
    }

    /**
     * The drive&#39;s hardware serial number, without spaces.
     * 
     */
    @Import(name="driveId")
    private @Nullable Output<String> driveId;

    public Optional<Output<String>> driveId() {
        return Optional.ofNullable(this.driveId);
    }

    /**
     * A URI that points to the blob containing the error log for the data transfer operation.
     * 
     */
    @Import(name="errorLogUri")
    private @Nullable Output<String> errorLogUri;

    public Optional<Output<String>> errorLogUri() {
        return Optional.ofNullable(this.errorLogUri);
    }

    /**
     * The relative path of the manifest file on the drive.
     * 
     */
    @Import(name="manifestFile")
    private @Nullable Output<String> manifestFile;

    public Optional<Output<String>> manifestFile() {
        return Optional.ofNullable(this.manifestFile);
    }

    /**
     * The Base16-encoded MD5 hash of the manifest file on the drive.
     * 
     */
    @Import(name="manifestHash")
    private @Nullable Output<String> manifestHash;

    public Optional<Output<String>> manifestHash() {
        return Optional.ofNullable(this.manifestHash);
    }

    /**
     * A URI that points to the blob containing the drive manifest file.
     * 
     */
    @Import(name="manifestUri")
    private @Nullable Output<String> manifestUri;

    public Optional<Output<String>> manifestUri() {
        return Optional.ofNullable(this.manifestUri);
    }

    /**
     * Percentage completed for the drive.
     * 
     */
    @Import(name="percentComplete")
    private @Nullable Output<Integer> percentComplete;

    public Optional<Output<Integer>> percentComplete() {
        return Optional.ofNullable(this.percentComplete);
    }

    /**
     * The drive&#39;s current state.
     * 
     */
    @Import(name="state")
    private @Nullable Output<Either<String,DriveState>> state;

    public Optional<Output<Either<String,DriveState>>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * A URI that points to the blob containing the verbose log for the data transfer operation.
     * 
     */
    @Import(name="verboseLogUri")
    private @Nullable Output<String> verboseLogUri;

    public Optional<Output<String>> verboseLogUri() {
        return Optional.ofNullable(this.verboseLogUri);
    }

    private DriveStatusArgs() {}

    private DriveStatusArgs(DriveStatusArgs $) {
        this.bitLockerKey = $.bitLockerKey;
        this.bytesSucceeded = $.bytesSucceeded;
        this.copyStatus = $.copyStatus;
        this.driveHeaderHash = $.driveHeaderHash;
        this.driveId = $.driveId;
        this.errorLogUri = $.errorLogUri;
        this.manifestFile = $.manifestFile;
        this.manifestHash = $.manifestHash;
        this.manifestUri = $.manifestUri;
        this.percentComplete = $.percentComplete;
        this.state = $.state;
        this.verboseLogUri = $.verboseLogUri;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DriveStatusArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DriveStatusArgs $;

        public Builder() {
            $ = new DriveStatusArgs();
        }

        public Builder(DriveStatusArgs defaults) {
            $ = new DriveStatusArgs(Objects.requireNonNull(defaults));
        }

        public Builder bitLockerKey(@Nullable Output<String> bitLockerKey) {
            $.bitLockerKey = bitLockerKey;
            return this;
        }

        public Builder bitLockerKey(String bitLockerKey) {
            return bitLockerKey(Output.of(bitLockerKey));
        }

        public Builder bytesSucceeded(@Nullable Output<Double> bytesSucceeded) {
            $.bytesSucceeded = bytesSucceeded;
            return this;
        }

        public Builder bytesSucceeded(Double bytesSucceeded) {
            return bytesSucceeded(Output.of(bytesSucceeded));
        }

        public Builder copyStatus(@Nullable Output<String> copyStatus) {
            $.copyStatus = copyStatus;
            return this;
        }

        public Builder copyStatus(String copyStatus) {
            return copyStatus(Output.of(copyStatus));
        }

        public Builder driveHeaderHash(@Nullable Output<String> driveHeaderHash) {
            $.driveHeaderHash = driveHeaderHash;
            return this;
        }

        public Builder driveHeaderHash(String driveHeaderHash) {
            return driveHeaderHash(Output.of(driveHeaderHash));
        }

        public Builder driveId(@Nullable Output<String> driveId) {
            $.driveId = driveId;
            return this;
        }

        public Builder driveId(String driveId) {
            return driveId(Output.of(driveId));
        }

        public Builder errorLogUri(@Nullable Output<String> errorLogUri) {
            $.errorLogUri = errorLogUri;
            return this;
        }

        public Builder errorLogUri(String errorLogUri) {
            return errorLogUri(Output.of(errorLogUri));
        }

        public Builder manifestFile(@Nullable Output<String> manifestFile) {
            $.manifestFile = manifestFile;
            return this;
        }

        public Builder manifestFile(String manifestFile) {
            return manifestFile(Output.of(manifestFile));
        }

        public Builder manifestHash(@Nullable Output<String> manifestHash) {
            $.manifestHash = manifestHash;
            return this;
        }

        public Builder manifestHash(String manifestHash) {
            return manifestHash(Output.of(manifestHash));
        }

        public Builder manifestUri(@Nullable Output<String> manifestUri) {
            $.manifestUri = manifestUri;
            return this;
        }

        public Builder manifestUri(String manifestUri) {
            return manifestUri(Output.of(manifestUri));
        }

        public Builder percentComplete(@Nullable Output<Integer> percentComplete) {
            $.percentComplete = percentComplete;
            return this;
        }

        public Builder percentComplete(Integer percentComplete) {
            return percentComplete(Output.of(percentComplete));
        }

        public Builder state(@Nullable Output<Either<String,DriveState>> state) {
            $.state = state;
            return this;
        }

        public Builder state(Either<String,DriveState> state) {
            return state(Output.of(state));
        }

        public Builder state(String state) {
            return state(Either.ofLeft(state));
        }

        public Builder state(DriveState state) {
            return state(Either.ofRight(state));
        }

        public Builder verboseLogUri(@Nullable Output<String> verboseLogUri) {
            $.verboseLogUri = verboseLogUri;
            return this;
        }

        public Builder verboseLogUri(String verboseLogUri) {
            return verboseLogUri(Output.of(verboseLogUri));
        }

        public DriveStatusArgs build() {
            $.state = Codegen.stringProp("state").left(DriveState.class).output().arg($.state).def("Specified").getNullable();
            return $;
        }
    }

}
