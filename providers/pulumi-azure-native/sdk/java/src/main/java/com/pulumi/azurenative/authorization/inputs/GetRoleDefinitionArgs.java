// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.authorization.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class GetRoleDefinitionArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetRoleDefinitionArgs Empty = new GetRoleDefinitionArgs();

    /**
     * The ID of the role definition.
     * 
     */
    @Import(name="roleDefinitionId", required=true)
    private Output<String> roleDefinitionId;

    /**
     * @return The ID of the role definition.
     * 
     */
    public Output<String> roleDefinitionId() {
        return this.roleDefinitionId;
    }

    /**
     * The scope of the role definition.
     * 
     */
    @Import(name="scope", required=true)
    private Output<String> scope;

    /**
     * @return The scope of the role definition.
     * 
     */
    public Output<String> scope() {
        return this.scope;
    }

    private GetRoleDefinitionArgs() {}

    private GetRoleDefinitionArgs(GetRoleDefinitionArgs $) {
        this.roleDefinitionId = $.roleDefinitionId;
        this.scope = $.scope;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetRoleDefinitionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetRoleDefinitionArgs $;

        public Builder() {
            $ = new GetRoleDefinitionArgs();
        }

        public Builder(GetRoleDefinitionArgs defaults) {
            $ = new GetRoleDefinitionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param roleDefinitionId The ID of the role definition.
         * 
         * @return builder
         * 
         */
        public Builder roleDefinitionId(Output<String> roleDefinitionId) {
            $.roleDefinitionId = roleDefinitionId;
            return this;
        }

        /**
         * @param roleDefinitionId The ID of the role definition.
         * 
         * @return builder
         * 
         */
        public Builder roleDefinitionId(String roleDefinitionId) {
            return roleDefinitionId(Output.of(roleDefinitionId));
        }

        /**
         * @param scope The scope of the role definition.
         * 
         * @return builder
         * 
         */
        public Builder scope(Output<String> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope The scope of the role definition.
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        public GetRoleDefinitionArgs build() {
            $.roleDefinitionId = Objects.requireNonNull($.roleDefinitionId, "expected parameter 'roleDefinitionId' to be non-null");
            $.scope = Objects.requireNonNull($.scope, "expected parameter 'scope' to be non-null");
            return $;
        }
    }

}
