// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.netapp;

import com.pulumi.azurenative.netapp.enums.QosType;
import com.pulumi.azurenative.netapp.enums.ServiceLevel;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Double;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PoolArgs extends com.pulumi.resources.ResourceArgs {

    public static final PoolArgs Empty = new PoolArgs();

    /**
     * The name of the NetApp account
     * 
     */
    @Import(name="accountName", required=true)
    private Output<String> accountName;

    /**
     * @return The name of the NetApp account
     * 
     */
    public Output<String> accountName() {
        return this.accountName;
    }

    /**
     * Resource location
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Resource location
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name of the capacity pool
     * 
     */
    @Import(name="poolName")
    private @Nullable Output<String> poolName;

    /**
     * @return The name of the capacity pool
     * 
     */
    public Optional<Output<String>> poolName() {
        return Optional.ofNullable(this.poolName);
    }

    /**
     * The qos type of the pool
     * 
     */
    @Import(name="qosType")
    private @Nullable Output<Either<String,QosType>> qosType;

    /**
     * @return The qos type of the pool
     * 
     */
    public Optional<Output<Either<String,QosType>>> qosType() {
        return Optional.ofNullable(this.qosType);
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The service level of the file system
     * 
     */
    @Import(name="serviceLevel", required=true)
    private Output<Either<String,ServiceLevel>> serviceLevel;

    /**
     * @return The service level of the file system
     * 
     */
    public Output<Either<String,ServiceLevel>> serviceLevel() {
        return this.serviceLevel;
    }

    /**
     * Provisioned size of the pool (in bytes). Allowed values are in 4TiB chunks (value must be multiply of 4398046511104).
     * 
     */
    @Import(name="size", required=true)
    private Output<Double> size;

    /**
     * @return Provisioned size of the pool (in bytes). Allowed values are in 4TiB chunks (value must be multiply of 4398046511104).
     * 
     */
    public Output<Double> size() {
        return this.size;
    }

    /**
     * Resource tags
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Resource tags
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private PoolArgs() {}

    private PoolArgs(PoolArgs $) {
        this.accountName = $.accountName;
        this.location = $.location;
        this.poolName = $.poolName;
        this.qosType = $.qosType;
        this.resourceGroupName = $.resourceGroupName;
        this.serviceLevel = $.serviceLevel;
        this.size = $.size;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PoolArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PoolArgs $;

        public Builder() {
            $ = new PoolArgs();
        }

        public Builder(PoolArgs defaults) {
            $ = new PoolArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountName The name of the NetApp account
         * 
         * @return builder
         * 
         */
        public Builder accountName(Output<String> accountName) {
            $.accountName = accountName;
            return this;
        }

        /**
         * @param accountName The name of the NetApp account
         * 
         * @return builder
         * 
         */
        public Builder accountName(String accountName) {
            return accountName(Output.of(accountName));
        }

        /**
         * @param location Resource location
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Resource location
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param poolName The name of the capacity pool
         * 
         * @return builder
         * 
         */
        public Builder poolName(@Nullable Output<String> poolName) {
            $.poolName = poolName;
            return this;
        }

        /**
         * @param poolName The name of the capacity pool
         * 
         * @return builder
         * 
         */
        public Builder poolName(String poolName) {
            return poolName(Output.of(poolName));
        }

        /**
         * @param qosType The qos type of the pool
         * 
         * @return builder
         * 
         */
        public Builder qosType(@Nullable Output<Either<String,QosType>> qosType) {
            $.qosType = qosType;
            return this;
        }

        /**
         * @param qosType The qos type of the pool
         * 
         * @return builder
         * 
         */
        public Builder qosType(Either<String,QosType> qosType) {
            return qosType(Output.of(qosType));
        }

        /**
         * @param qosType The qos type of the pool
         * 
         * @return builder
         * 
         */
        public Builder qosType(String qosType) {
            return qosType(Either.ofLeft(qosType));
        }

        /**
         * @param qosType The qos type of the pool
         * 
         * @return builder
         * 
         */
        public Builder qosType(QosType qosType) {
            return qosType(Either.ofRight(qosType));
        }

        /**
         * @param resourceGroupName The name of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param serviceLevel The service level of the file system
         * 
         * @return builder
         * 
         */
        public Builder serviceLevel(Output<Either<String,ServiceLevel>> serviceLevel) {
            $.serviceLevel = serviceLevel;
            return this;
        }

        /**
         * @param serviceLevel The service level of the file system
         * 
         * @return builder
         * 
         */
        public Builder serviceLevel(Either<String,ServiceLevel> serviceLevel) {
            return serviceLevel(Output.of(serviceLevel));
        }

        /**
         * @param serviceLevel The service level of the file system
         * 
         * @return builder
         * 
         */
        public Builder serviceLevel(String serviceLevel) {
            return serviceLevel(Either.ofLeft(serviceLevel));
        }

        /**
         * @param serviceLevel The service level of the file system
         * 
         * @return builder
         * 
         */
        public Builder serviceLevel(ServiceLevel serviceLevel) {
            return serviceLevel(Either.ofRight(serviceLevel));
        }

        /**
         * @param size Provisioned size of the pool (in bytes). Allowed values are in 4TiB chunks (value must be multiply of 4398046511104).
         * 
         * @return builder
         * 
         */
        public Builder size(Output<Double> size) {
            $.size = size;
            return this;
        }

        /**
         * @param size Provisioned size of the pool (in bytes). Allowed values are in 4TiB chunks (value must be multiply of 4398046511104).
         * 
         * @return builder
         * 
         */
        public Builder size(Double size) {
            return size(Output.of(size));
        }

        /**
         * @param tags Resource tags
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Resource tags
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public PoolArgs build() {
            $.accountName = Objects.requireNonNull($.accountName, "expected parameter 'accountName' to be non-null");
            $.qosType = Codegen.stringProp("qosType").left(QosType.class).output().arg($.qosType).def("Auto").getNullable();
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.serviceLevel = Codegen.stringProp("serviceLevel").left(ServiceLevel.class).output().arg($.serviceLevel).def("Premium").require();
            $.size = Objects.requireNonNull($.size, "expected parameter 'size' to be non-null");
            return $;
        }
    }

}
