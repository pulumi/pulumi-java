// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.apimanagement.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Details of the Backend WebProxy Server to use in the Request to Backend.
 * 
 */
public final class BackendProxyContractResponse extends com.pulumi.resources.InvokeArgs {

    public static final BackendProxyContractResponse Empty = new BackendProxyContractResponse();

    /**
     * Password to connect to the WebProxy Server
     * 
     */
    @Import(name="password")
    private @Nullable String password;

    /**
     * @return Password to connect to the WebProxy Server
     * 
     */
    public Optional<String> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * WebProxy Server AbsoluteUri property which includes the entire URI stored in the Uri instance, including all fragments and query strings.
     * 
     */
    @Import(name="url", required=true)
    private String url;

    /**
     * @return WebProxy Server AbsoluteUri property which includes the entire URI stored in the Uri instance, including all fragments and query strings.
     * 
     */
    public String url() {
        return this.url;
    }

    /**
     * Username to connect to the WebProxy server
     * 
     */
    @Import(name="username")
    private @Nullable String username;

    /**
     * @return Username to connect to the WebProxy server
     * 
     */
    public Optional<String> username() {
        return Optional.ofNullable(this.username);
    }

    private BackendProxyContractResponse() {}

    private BackendProxyContractResponse(BackendProxyContractResponse $) {
        this.password = $.password;
        this.url = $.url;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BackendProxyContractResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BackendProxyContractResponse $;

        public Builder() {
            $ = new BackendProxyContractResponse();
        }

        public Builder(BackendProxyContractResponse defaults) {
            $ = new BackendProxyContractResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param password Password to connect to the WebProxy Server
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable String password) {
            $.password = password;
            return this;
        }

        /**
         * @param url WebProxy Server AbsoluteUri property which includes the entire URI stored in the Uri instance, including all fragments and query strings.
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            $.url = url;
            return this;
        }

        /**
         * @param username Username to connect to the WebProxy server
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable String username) {
            $.username = username;
            return this;
        }

        public BackendProxyContractResponse build() {
            $.url = Objects.requireNonNull($.url, "expected parameter 'url' to be non-null");
            return $;
        }
    }

}
