// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.azurenative.network.inputs.NatGatewaySkuResponse;
import com.pulumi.azurenative.network.inputs.SubResourceResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Nat Gateway resource.
 * 
 */
public final class NatGatewayResponse extends com.pulumi.resources.InvokeArgs {

    public static final NatGatewayResponse Empty = new NatGatewayResponse();

    /**
     * A unique read-only string that changes whenever the resource is updated.
     * 
     */
    @Import(name="etag", required=true)
    private String etag;

    public String etag() {
        return this.etag;
    }

    /**
     * Resource ID.
     * 
     */
    @Import(name="id")
    private @Nullable String id;

    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The idle timeout of the nat gateway.
     * 
     */
    @Import(name="idleTimeoutInMinutes")
    private @Nullable Integer idleTimeoutInMinutes;

    public Optional<Integer> idleTimeoutInMinutes() {
        return Optional.ofNullable(this.idleTimeoutInMinutes);
    }

    /**
     * Resource location.
     * 
     */
    @Import(name="location")
    private @Nullable String location;

    public Optional<String> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Resource name.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    public String name() {
        return this.name;
    }

    /**
     * The provisioning state of the NAT gateway resource.
     * 
     */
    @Import(name="provisioningState", required=true)
    private String provisioningState;

    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * An array of public ip addresses associated with the nat gateway resource.
     * 
     */
    @Import(name="publicIpAddresses")
    private @Nullable List<SubResourceResponse> publicIpAddresses;

    public Optional<List<SubResourceResponse>> publicIpAddresses() {
        return Optional.ofNullable(this.publicIpAddresses);
    }

    /**
     * An array of public ip prefixes associated with the nat gateway resource.
     * 
     */
    @Import(name="publicIpPrefixes")
    private @Nullable List<SubResourceResponse> publicIpPrefixes;

    public Optional<List<SubResourceResponse>> publicIpPrefixes() {
        return Optional.ofNullable(this.publicIpPrefixes);
    }

    /**
     * The resource GUID property of the NAT gateway resource.
     * 
     */
    @Import(name="resourceGuid", required=true)
    private String resourceGuid;

    public String resourceGuid() {
        return this.resourceGuid;
    }

    /**
     * The nat gateway SKU.
     * 
     */
    @Import(name="sku")
    private @Nullable NatGatewaySkuResponse sku;

    public Optional<NatGatewaySkuResponse> sku() {
        return Optional.ofNullable(this.sku);
    }

    /**
     * An array of references to the subnets using this nat gateway resource.
     * 
     */
    @Import(name="subnets", required=true)
    private List<SubResourceResponse> subnets;

    public List<SubResourceResponse> subnets() {
        return this.subnets;
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
    private @Nullable Map<String,String> tags;

    public Optional<Map<String,String>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Resource type.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    public String type() {
        return this.type;
    }

    /**
     * A list of availability zones denoting the zone in which Nat Gateway should be deployed.
     * 
     */
    @Import(name="zones")
    private @Nullable List<String> zones;

    public Optional<List<String>> zones() {
        return Optional.ofNullable(this.zones);
    }

    private NatGatewayResponse() {}

    private NatGatewayResponse(NatGatewayResponse $) {
        this.etag = $.etag;
        this.id = $.id;
        this.idleTimeoutInMinutes = $.idleTimeoutInMinutes;
        this.location = $.location;
        this.name = $.name;
        this.provisioningState = $.provisioningState;
        this.publicIpAddresses = $.publicIpAddresses;
        this.publicIpPrefixes = $.publicIpPrefixes;
        this.resourceGuid = $.resourceGuid;
        this.sku = $.sku;
        this.subnets = $.subnets;
        this.tags = $.tags;
        this.type = $.type;
        this.zones = $.zones;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NatGatewayResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NatGatewayResponse $;

        public Builder() {
            $ = new NatGatewayResponse();
        }

        public Builder(NatGatewayResponse defaults) {
            $ = new NatGatewayResponse(Objects.requireNonNull(defaults));
        }

        public Builder etag(String etag) {
            $.etag = etag;
            return this;
        }

        public Builder id(@Nullable String id) {
            $.id = id;
            return this;
        }

        public Builder idleTimeoutInMinutes(@Nullable Integer idleTimeoutInMinutes) {
            $.idleTimeoutInMinutes = idleTimeoutInMinutes;
            return this;
        }

        public Builder location(@Nullable String location) {
            $.location = location;
            return this;
        }

        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public Builder provisioningState(String provisioningState) {
            $.provisioningState = provisioningState;
            return this;
        }

        public Builder publicIpAddresses(@Nullable List<SubResourceResponse> publicIpAddresses) {
            $.publicIpAddresses = publicIpAddresses;
            return this;
        }

        public Builder publicIpAddresses(SubResourceResponse... publicIpAddresses) {
            return publicIpAddresses(List.of(publicIpAddresses));
        }

        public Builder publicIpPrefixes(@Nullable List<SubResourceResponse> publicIpPrefixes) {
            $.publicIpPrefixes = publicIpPrefixes;
            return this;
        }

        public Builder publicIpPrefixes(SubResourceResponse... publicIpPrefixes) {
            return publicIpPrefixes(List.of(publicIpPrefixes));
        }

        public Builder resourceGuid(String resourceGuid) {
            $.resourceGuid = resourceGuid;
            return this;
        }

        public Builder sku(@Nullable NatGatewaySkuResponse sku) {
            $.sku = sku;
            return this;
        }

        public Builder subnets(List<SubResourceResponse> subnets) {
            $.subnets = subnets;
            return this;
        }

        public Builder subnets(SubResourceResponse... subnets) {
            return subnets(List.of(subnets));
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            $.tags = tags;
            return this;
        }

        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public Builder zones(@Nullable List<String> zones) {
            $.zones = zones;
            return this;
        }

        public Builder zones(String... zones) {
            return zones(List.of(zones));
        }

        public NatGatewayResponse build() {
            $.etag = Objects.requireNonNull($.etag, "expected parameter 'etag' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.provisioningState = Objects.requireNonNull($.provisioningState, "expected parameter 'provisioningState' to be non-null");
            $.resourceGuid = Objects.requireNonNull($.resourceGuid, "expected parameter 'resourceGuid' to be non-null");
            $.subnets = Objects.requireNonNull($.subnets, "expected parameter 'subnets' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
