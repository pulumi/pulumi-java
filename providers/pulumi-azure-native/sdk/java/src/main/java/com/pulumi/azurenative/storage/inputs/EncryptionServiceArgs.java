// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.storage.inputs;

import com.pulumi.azurenative.storage.enums.KeyType;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A service that allows server-side encryption to be used.
 * 
 */
public final class EncryptionServiceArgs extends com.pulumi.resources.ResourceArgs {

    public static final EncryptionServiceArgs Empty = new EncryptionServiceArgs();

    /**
     * A boolean indicating whether or not the service encrypts the data as it is stored.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return A boolean indicating whether or not the service encrypts the data as it is stored.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Encryption key type to be used for the encryption service. &#39;Account&#39; key type implies that an account-scoped encryption key will be used. &#39;Service&#39; key type implies that a default service key is used.
     * 
     */
    @Import(name="keyType")
    private @Nullable Output<Either<String,KeyType>> keyType;

    /**
     * @return Encryption key type to be used for the encryption service. &#39;Account&#39; key type implies that an account-scoped encryption key will be used. &#39;Service&#39; key type implies that a default service key is used.
     * 
     */
    public Optional<Output<Either<String,KeyType>>> keyType() {
        return Optional.ofNullable(this.keyType);
    }

    private EncryptionServiceArgs() {}

    private EncryptionServiceArgs(EncryptionServiceArgs $) {
        this.enabled = $.enabled;
        this.keyType = $.keyType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EncryptionServiceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EncryptionServiceArgs $;

        public Builder() {
            $ = new EncryptionServiceArgs();
        }

        public Builder(EncryptionServiceArgs defaults) {
            $ = new EncryptionServiceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enabled A boolean indicating whether or not the service encrypts the data as it is stored.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled A boolean indicating whether or not the service encrypts the data as it is stored.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param keyType Encryption key type to be used for the encryption service. &#39;Account&#39; key type implies that an account-scoped encryption key will be used. &#39;Service&#39; key type implies that a default service key is used.
         * 
         * @return builder
         * 
         */
        public Builder keyType(@Nullable Output<Either<String,KeyType>> keyType) {
            $.keyType = keyType;
            return this;
        }

        /**
         * @param keyType Encryption key type to be used for the encryption service. &#39;Account&#39; key type implies that an account-scoped encryption key will be used. &#39;Service&#39; key type implies that a default service key is used.
         * 
         * @return builder
         * 
         */
        public Builder keyType(Either<String,KeyType> keyType) {
            return keyType(Output.of(keyType));
        }

        /**
         * @param keyType Encryption key type to be used for the encryption service. &#39;Account&#39; key type implies that an account-scoped encryption key will be used. &#39;Service&#39; key type implies that a default service key is used.
         * 
         * @return builder
         * 
         */
        public Builder keyType(String keyType) {
            return keyType(Either.ofLeft(keyType));
        }

        /**
         * @param keyType Encryption key type to be used for the encryption service. &#39;Account&#39; key type implies that an account-scoped encryption key will be used. &#39;Service&#39; key type implies that a default service key is used.
         * 
         * @return builder
         * 
         */
        public Builder keyType(KeyType keyType) {
            return keyType(Either.ofRight(keyType));
        }

        public EncryptionServiceArgs build() {
            return $;
        }
    }

}
