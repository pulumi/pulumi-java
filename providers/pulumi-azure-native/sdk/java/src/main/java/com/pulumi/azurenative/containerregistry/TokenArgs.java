// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.containerregistry;

import com.pulumi.azurenative.containerregistry.enums.TokenStatus;
import com.pulumi.azurenative.containerregistry.inputs.TokenCredentialsPropertiesArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TokenArgs extends com.pulumi.resources.ResourceArgs {

    public static final TokenArgs Empty = new TokenArgs();

    /**
     * The credentials that can be used for authenticating the token.
     * 
     */
    @Import(name="credentials")
    private @Nullable Output<TokenCredentialsPropertiesArgs> credentials;

    public Optional<Output<TokenCredentialsPropertiesArgs>> credentials() {
        return Optional.ofNullable(this.credentials);
    }

    /**
     * The name of the container registry.
     * 
     */
    @Import(name="registryName", required=true)
    private Output<String> registryName;

    public Output<String> registryName() {
        return this.registryName;
    }

    /**
     * The name of the resource group to which the container registry belongs.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The resource ID of the scope map to which the token will be associated with.
     * 
     */
    @Import(name="scopeMapId")
    private @Nullable Output<String> scopeMapId;

    public Optional<Output<String>> scopeMapId() {
        return Optional.ofNullable(this.scopeMapId);
    }

    /**
     * The status of the token example enabled or disabled.
     * 
     */
    @Import(name="status")
    private @Nullable Output<Either<String,TokenStatus>> status;

    public Optional<Output<Either<String,TokenStatus>>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The name of the token.
     * 
     */
    @Import(name="tokenName")
    private @Nullable Output<String> tokenName;

    public Optional<Output<String>> tokenName() {
        return Optional.ofNullable(this.tokenName);
    }

    private TokenArgs() {}

    private TokenArgs(TokenArgs $) {
        this.credentials = $.credentials;
        this.registryName = $.registryName;
        this.resourceGroupName = $.resourceGroupName;
        this.scopeMapId = $.scopeMapId;
        this.status = $.status;
        this.tokenName = $.tokenName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TokenArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TokenArgs $;

        public Builder() {
            $ = new TokenArgs();
        }

        public Builder(TokenArgs defaults) {
            $ = new TokenArgs(Objects.requireNonNull(defaults));
        }

        public Builder credentials(@Nullable Output<TokenCredentialsPropertiesArgs> credentials) {
            $.credentials = credentials;
            return this;
        }

        public Builder credentials(TokenCredentialsPropertiesArgs credentials) {
            return credentials(Output.of(credentials));
        }

        public Builder registryName(Output<String> registryName) {
            $.registryName = registryName;
            return this;
        }

        public Builder registryName(String registryName) {
            return registryName(Output.of(registryName));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder scopeMapId(@Nullable Output<String> scopeMapId) {
            $.scopeMapId = scopeMapId;
            return this;
        }

        public Builder scopeMapId(String scopeMapId) {
            return scopeMapId(Output.of(scopeMapId));
        }

        public Builder status(@Nullable Output<Either<String,TokenStatus>> status) {
            $.status = status;
            return this;
        }

        public Builder status(Either<String,TokenStatus> status) {
            return status(Output.of(status));
        }

        public Builder status(String status) {
            return status(Either.ofLeft(status));
        }

        public Builder status(TokenStatus status) {
            return status(Either.ofRight(status));
        }

        public Builder tokenName(@Nullable Output<String> tokenName) {
            $.tokenName = tokenName;
            return this;
        }

        public Builder tokenName(String tokenName) {
            return tokenName(Output.of(tokenName));
        }

        public TokenArgs build() {
            $.registryName = Objects.requireNonNull($.registryName, "expected parameter 'registryName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
