// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.videoanalyzer.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Options for controlling the validation of TLS endpoints.
 * 
 */
public final class TlsValidationOptionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final TlsValidationOptionsArgs Empty = new TlsValidationOptionsArgs();

    /**
     * When set to &#39;true&#39; causes the certificate subject name validation to be skipped. Default is &#39;false&#39;.
     * 
     */
    @Import(name="ignoreHostname")
    private @Nullable Output<String> ignoreHostname;

    /**
     * @return When set to &#39;true&#39; causes the certificate subject name validation to be skipped. Default is &#39;false&#39;.
     * 
     */
    public Optional<Output<String>> ignoreHostname() {
        return Optional.ofNullable(this.ignoreHostname);
    }

    /**
     * When set to &#39;true&#39; causes the certificate chain trust validation to be skipped. Default is &#39;false&#39;.
     * 
     */
    @Import(name="ignoreSignature")
    private @Nullable Output<String> ignoreSignature;

    /**
     * @return When set to &#39;true&#39; causes the certificate chain trust validation to be skipped. Default is &#39;false&#39;.
     * 
     */
    public Optional<Output<String>> ignoreSignature() {
        return Optional.ofNullable(this.ignoreSignature);
    }

    private TlsValidationOptionsArgs() {}

    private TlsValidationOptionsArgs(TlsValidationOptionsArgs $) {
        this.ignoreHostname = $.ignoreHostname;
        this.ignoreSignature = $.ignoreSignature;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TlsValidationOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TlsValidationOptionsArgs $;

        public Builder() {
            $ = new TlsValidationOptionsArgs();
        }

        public Builder(TlsValidationOptionsArgs defaults) {
            $ = new TlsValidationOptionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param ignoreHostname When set to &#39;true&#39; causes the certificate subject name validation to be skipped. Default is &#39;false&#39;.
         * 
         * @return builder
         * 
         */
        public Builder ignoreHostname(@Nullable Output<String> ignoreHostname) {
            $.ignoreHostname = ignoreHostname;
            return this;
        }

        /**
         * @param ignoreHostname When set to &#39;true&#39; causes the certificate subject name validation to be skipped. Default is &#39;false&#39;.
         * 
         * @return builder
         * 
         */
        public Builder ignoreHostname(String ignoreHostname) {
            return ignoreHostname(Output.of(ignoreHostname));
        }

        /**
         * @param ignoreSignature When set to &#39;true&#39; causes the certificate chain trust validation to be skipped. Default is &#39;false&#39;.
         * 
         * @return builder
         * 
         */
        public Builder ignoreSignature(@Nullable Output<String> ignoreSignature) {
            $.ignoreSignature = ignoreSignature;
            return this;
        }

        /**
         * @param ignoreSignature When set to &#39;true&#39; causes the certificate chain trust validation to be skipped. Default is &#39;false&#39;.
         * 
         * @return builder
         * 
         */
        public Builder ignoreSignature(String ignoreSignature) {
            return ignoreSignature(Output.of(ignoreSignature));
        }

        public TlsValidationOptionsArgs build() {
            return $;
        }
    }

}
