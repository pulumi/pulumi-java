// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.logic.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AS2ValidationSettingsResponse {
    /**
     * @return The value indicating whether to check for certificate revocation list on receive.
     * 
     */
    private final Boolean checkCertificateRevocationListOnReceive;
    /**
     * @return The value indicating whether to check for certificate revocation list on send.
     * 
     */
    private final Boolean checkCertificateRevocationListOnSend;
    /**
     * @return The value indicating whether to check for duplicate message.
     * 
     */
    private final Boolean checkDuplicateMessage;
    /**
     * @return The value indicating whether the message has to be compressed.
     * 
     */
    private final Boolean compressMessage;
    /**
     * @return The value indicating whether the message has to be encrypted.
     * 
     */
    private final Boolean encryptMessage;
    /**
     * @return The encryption algorithm.
     * 
     */
    private final String encryptionAlgorithm;
    /**
     * @return The number of days to look back for duplicate interchange.
     * 
     */
    private final Integer interchangeDuplicatesValidityDays;
    /**
     * @return The value indicating whether to override incoming message properties with those in agreement.
     * 
     */
    private final Boolean overrideMessageProperties;
    /**
     * @return The value indicating whether the message has to be signed.
     * 
     */
    private final Boolean signMessage;
    /**
     * @return The signing algorithm.
     * 
     */
    private final @Nullable String signingAlgorithm;

    @CustomType.Constructor
    private AS2ValidationSettingsResponse(
        @CustomType.Parameter("checkCertificateRevocationListOnReceive") Boolean checkCertificateRevocationListOnReceive,
        @CustomType.Parameter("checkCertificateRevocationListOnSend") Boolean checkCertificateRevocationListOnSend,
        @CustomType.Parameter("checkDuplicateMessage") Boolean checkDuplicateMessage,
        @CustomType.Parameter("compressMessage") Boolean compressMessage,
        @CustomType.Parameter("encryptMessage") Boolean encryptMessage,
        @CustomType.Parameter("encryptionAlgorithm") String encryptionAlgorithm,
        @CustomType.Parameter("interchangeDuplicatesValidityDays") Integer interchangeDuplicatesValidityDays,
        @CustomType.Parameter("overrideMessageProperties") Boolean overrideMessageProperties,
        @CustomType.Parameter("signMessage") Boolean signMessage,
        @CustomType.Parameter("signingAlgorithm") @Nullable String signingAlgorithm) {
        this.checkCertificateRevocationListOnReceive = checkCertificateRevocationListOnReceive;
        this.checkCertificateRevocationListOnSend = checkCertificateRevocationListOnSend;
        this.checkDuplicateMessage = checkDuplicateMessage;
        this.compressMessage = compressMessage;
        this.encryptMessage = encryptMessage;
        this.encryptionAlgorithm = encryptionAlgorithm;
        this.interchangeDuplicatesValidityDays = interchangeDuplicatesValidityDays;
        this.overrideMessageProperties = overrideMessageProperties;
        this.signMessage = signMessage;
        this.signingAlgorithm = signingAlgorithm;
    }

    /**
     * @return The value indicating whether to check for certificate revocation list on receive.
     * 
     */
    public Boolean checkCertificateRevocationListOnReceive() {
        return this.checkCertificateRevocationListOnReceive;
    }
    /**
     * @return The value indicating whether to check for certificate revocation list on send.
     * 
     */
    public Boolean checkCertificateRevocationListOnSend() {
        return this.checkCertificateRevocationListOnSend;
    }
    /**
     * @return The value indicating whether to check for duplicate message.
     * 
     */
    public Boolean checkDuplicateMessage() {
        return this.checkDuplicateMessage;
    }
    /**
     * @return The value indicating whether the message has to be compressed.
     * 
     */
    public Boolean compressMessage() {
        return this.compressMessage;
    }
    /**
     * @return The value indicating whether the message has to be encrypted.
     * 
     */
    public Boolean encryptMessage() {
        return this.encryptMessage;
    }
    /**
     * @return The encryption algorithm.
     * 
     */
    public String encryptionAlgorithm() {
        return this.encryptionAlgorithm;
    }
    /**
     * @return The number of days to look back for duplicate interchange.
     * 
     */
    public Integer interchangeDuplicatesValidityDays() {
        return this.interchangeDuplicatesValidityDays;
    }
    /**
     * @return The value indicating whether to override incoming message properties with those in agreement.
     * 
     */
    public Boolean overrideMessageProperties() {
        return this.overrideMessageProperties;
    }
    /**
     * @return The value indicating whether the message has to be signed.
     * 
     */
    public Boolean signMessage() {
        return this.signMessage;
    }
    /**
     * @return The signing algorithm.
     * 
     */
    public Optional<String> signingAlgorithm() {
        return Optional.ofNullable(this.signingAlgorithm);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AS2ValidationSettingsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Boolean checkCertificateRevocationListOnReceive;
        private Boolean checkCertificateRevocationListOnSend;
        private Boolean checkDuplicateMessage;
        private Boolean compressMessage;
        private Boolean encryptMessage;
        private String encryptionAlgorithm;
        private Integer interchangeDuplicatesValidityDays;
        private Boolean overrideMessageProperties;
        private Boolean signMessage;
        private @Nullable String signingAlgorithm;

        public Builder() {
    	      // Empty
        }

        public Builder(AS2ValidationSettingsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.checkCertificateRevocationListOnReceive = defaults.checkCertificateRevocationListOnReceive;
    	      this.checkCertificateRevocationListOnSend = defaults.checkCertificateRevocationListOnSend;
    	      this.checkDuplicateMessage = defaults.checkDuplicateMessage;
    	      this.compressMessage = defaults.compressMessage;
    	      this.encryptMessage = defaults.encryptMessage;
    	      this.encryptionAlgorithm = defaults.encryptionAlgorithm;
    	      this.interchangeDuplicatesValidityDays = defaults.interchangeDuplicatesValidityDays;
    	      this.overrideMessageProperties = defaults.overrideMessageProperties;
    	      this.signMessage = defaults.signMessage;
    	      this.signingAlgorithm = defaults.signingAlgorithm;
        }

        public Builder checkCertificateRevocationListOnReceive(Boolean checkCertificateRevocationListOnReceive) {
            this.checkCertificateRevocationListOnReceive = Objects.requireNonNull(checkCertificateRevocationListOnReceive);
            return this;
        }
        public Builder checkCertificateRevocationListOnSend(Boolean checkCertificateRevocationListOnSend) {
            this.checkCertificateRevocationListOnSend = Objects.requireNonNull(checkCertificateRevocationListOnSend);
            return this;
        }
        public Builder checkDuplicateMessage(Boolean checkDuplicateMessage) {
            this.checkDuplicateMessage = Objects.requireNonNull(checkDuplicateMessage);
            return this;
        }
        public Builder compressMessage(Boolean compressMessage) {
            this.compressMessage = Objects.requireNonNull(compressMessage);
            return this;
        }
        public Builder encryptMessage(Boolean encryptMessage) {
            this.encryptMessage = Objects.requireNonNull(encryptMessage);
            return this;
        }
        public Builder encryptionAlgorithm(String encryptionAlgorithm) {
            this.encryptionAlgorithm = Objects.requireNonNull(encryptionAlgorithm);
            return this;
        }
        public Builder interchangeDuplicatesValidityDays(Integer interchangeDuplicatesValidityDays) {
            this.interchangeDuplicatesValidityDays = Objects.requireNonNull(interchangeDuplicatesValidityDays);
            return this;
        }
        public Builder overrideMessageProperties(Boolean overrideMessageProperties) {
            this.overrideMessageProperties = Objects.requireNonNull(overrideMessageProperties);
            return this;
        }
        public Builder signMessage(Boolean signMessage) {
            this.signMessage = Objects.requireNonNull(signMessage);
            return this;
        }
        public Builder signingAlgorithm(@Nullable String signingAlgorithm) {
            this.signingAlgorithm = signingAlgorithm;
            return this;
        }        public AS2ValidationSettingsResponse build() {
            return new AS2ValidationSettingsResponse(checkCertificateRevocationListOnReceive, checkCertificateRevocationListOnSend, checkDuplicateMessage, compressMessage, encryptMessage, encryptionAlgorithm, interchangeDuplicatesValidityDays, overrideMessageProperties, signMessage, signingAlgorithm);
        }
    }
}
