// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * The linked integration runtime information.
 * 
 */
public final class LinkedIntegrationRuntimeResponse extends com.pulumi.resources.InvokeArgs {

    public static final LinkedIntegrationRuntimeResponse Empty = new LinkedIntegrationRuntimeResponse();

    /**
     * The creating time of the linked integration runtime.
     * 
     */
    @Import(name="createTime", required=true)
    private String createTime;

    /**
     * @return The creating time of the linked integration runtime.
     * 
     */
    public String createTime() {
        return this.createTime;
    }

    /**
     * The location of the data factory for which the linked integration runtime belong to.
     * 
     */
    @Import(name="dataFactoryLocation", required=true)
    private String dataFactoryLocation;

    /**
     * @return The location of the data factory for which the linked integration runtime belong to.
     * 
     */
    public String dataFactoryLocation() {
        return this.dataFactoryLocation;
    }

    /**
     * The name of the data factory for which the linked integration runtime belong to.
     * 
     */
    @Import(name="dataFactoryName", required=true)
    private String dataFactoryName;

    /**
     * @return The name of the data factory for which the linked integration runtime belong to.
     * 
     */
    public String dataFactoryName() {
        return this.dataFactoryName;
    }

    /**
     * The name of the linked integration runtime.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return The name of the linked integration runtime.
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * The subscription ID for which the linked integration runtime belong to.
     * 
     */
    @Import(name="subscriptionId", required=true)
    private String subscriptionId;

    /**
     * @return The subscription ID for which the linked integration runtime belong to.
     * 
     */
    public String subscriptionId() {
        return this.subscriptionId;
    }

    private LinkedIntegrationRuntimeResponse() {}

    private LinkedIntegrationRuntimeResponse(LinkedIntegrationRuntimeResponse $) {
        this.createTime = $.createTime;
        this.dataFactoryLocation = $.dataFactoryLocation;
        this.dataFactoryName = $.dataFactoryName;
        this.name = $.name;
        this.subscriptionId = $.subscriptionId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LinkedIntegrationRuntimeResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LinkedIntegrationRuntimeResponse $;

        public Builder() {
            $ = new LinkedIntegrationRuntimeResponse();
        }

        public Builder(LinkedIntegrationRuntimeResponse defaults) {
            $ = new LinkedIntegrationRuntimeResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param createTime The creating time of the linked integration runtime.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param dataFactoryLocation The location of the data factory for which the linked integration runtime belong to.
         * 
         * @return builder
         * 
         */
        public Builder dataFactoryLocation(String dataFactoryLocation) {
            $.dataFactoryLocation = dataFactoryLocation;
            return this;
        }

        /**
         * @param dataFactoryName The name of the data factory for which the linked integration runtime belong to.
         * 
         * @return builder
         * 
         */
        public Builder dataFactoryName(String dataFactoryName) {
            $.dataFactoryName = dataFactoryName;
            return this;
        }

        /**
         * @param name The name of the linked integration runtime.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param subscriptionId The subscription ID for which the linked integration runtime belong to.
         * 
         * @return builder
         * 
         */
        public Builder subscriptionId(String subscriptionId) {
            $.subscriptionId = subscriptionId;
            return this;
        }

        public LinkedIntegrationRuntimeResponse build() {
            $.createTime = Objects.requireNonNull($.createTime, "expected parameter 'createTime' to be non-null");
            $.dataFactoryLocation = Objects.requireNonNull($.dataFactoryLocation, "expected parameter 'dataFactoryLocation' to be non-null");
            $.dataFactoryName = Objects.requireNonNull($.dataFactoryName, "expected parameter 'dataFactoryName' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.subscriptionId = Objects.requireNonNull($.subscriptionId, "expected parameter 'subscriptionId' to be non-null");
            return $;
        }
    }

}
