// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.azurenative.network.enums.Access;
import com.pulumi.azurenative.network.enums.RouteFilterRuleType;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Route Filter Rule Resource.
 * 
 */
public final class RouteFilterRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final RouteFilterRuleArgs Empty = new RouteFilterRuleArgs();

    /**
     * The access type of the rule.
     * 
     */
    @Import(name="access", required=true)
      private final Output<Either<String,Access>> access;

    public Output<Either<String,Access>> access() {
        return this.access;
    }

    /**
     * The collection for bgp community values to filter on. e.g. ['12076:5010','12076:5020'].
     * 
     */
    @Import(name="communities", required=true)
      private final Output<List<String>> communities;

    public Output<List<String>> communities() {
        return this.communities;
    }

    /**
     * Resource ID.
     * 
     */
    @Import(name="id")
      private final @Nullable Output<String> id;

    public Output<String> id() {
        return this.id == null ? Codegen.empty() : this.id;
    }

    /**
     * Resource location.
     * 
     */
    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> location() {
        return this.location == null ? Codegen.empty() : this.location;
    }

    /**
     * The name of the resource that is unique within a resource group. This name can be used to access the resource.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * The rule type of the rule.
     * 
     */
    @Import(name="routeFilterRuleType", required=true)
      private final Output<Either<String,RouteFilterRuleType>> routeFilterRuleType;

    public Output<Either<String,RouteFilterRuleType>> routeFilterRuleType() {
        return this.routeFilterRuleType;
    }

    public RouteFilterRuleArgs(
        Output<Either<String,Access>> access,
        Output<List<String>> communities,
        @Nullable Output<String> id,
        @Nullable Output<String> location,
        @Nullable Output<String> name,
        Output<Either<String,RouteFilterRuleType>> routeFilterRuleType) {
        this.access = Objects.requireNonNull(access, "expected parameter 'access' to be non-null");
        this.communities = Objects.requireNonNull(communities, "expected parameter 'communities' to be non-null");
        this.id = id;
        this.location = location;
        this.name = name;
        this.routeFilterRuleType = Objects.requireNonNull(routeFilterRuleType, "expected parameter 'routeFilterRuleType' to be non-null");
    }

    private RouteFilterRuleArgs() {
        this.access = Codegen.empty();
        this.communities = Codegen.empty();
        this.id = Codegen.empty();
        this.location = Codegen.empty();
        this.name = Codegen.empty();
        this.routeFilterRuleType = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RouteFilterRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<Either<String,Access>> access;
        private Output<List<String>> communities;
        private @Nullable Output<String> id;
        private @Nullable Output<String> location;
        private @Nullable Output<String> name;
        private Output<Either<String,RouteFilterRuleType>> routeFilterRuleType;

        public Builder() {
    	      // Empty
        }

        public Builder(RouteFilterRuleArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.access = defaults.access;
    	      this.communities = defaults.communities;
    	      this.id = defaults.id;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.routeFilterRuleType = defaults.routeFilterRuleType;
        }

        public Builder access(Output<Either<String,Access>> access) {
            this.access = Objects.requireNonNull(access);
            return this;
        }
        public Builder access(Either<String,Access> access) {
            this.access = Output.of(Objects.requireNonNull(access));
            return this;
        }
        public Builder communities(Output<List<String>> communities) {
            this.communities = Objects.requireNonNull(communities);
            return this;
        }
        public Builder communities(List<String> communities) {
            this.communities = Output.of(Objects.requireNonNull(communities));
            return this;
        }
        public Builder communities(String... communities) {
            return communities(List.of(communities));
        }
        public Builder id(@Nullable Output<String> id) {
            this.id = id;
            return this;
        }
        public Builder id(@Nullable String id) {
            this.id = Codegen.ofNullable(id);
            return this;
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Codegen.ofNullable(location);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder routeFilterRuleType(Output<Either<String,RouteFilterRuleType>> routeFilterRuleType) {
            this.routeFilterRuleType = Objects.requireNonNull(routeFilterRuleType);
            return this;
        }
        public Builder routeFilterRuleType(Either<String,RouteFilterRuleType> routeFilterRuleType) {
            this.routeFilterRuleType = Output.of(Objects.requireNonNull(routeFilterRuleType));
            return this;
        }        public RouteFilterRuleArgs build() {
            return new RouteFilterRuleArgs(access, communities, id, location, name, routeFilterRuleType);
        }
    }
}
