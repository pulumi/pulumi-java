// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Skip error file.
 * 
 */
public final class SkipErrorFileArgs extends com.pulumi.resources.ResourceArgs {

    public static final SkipErrorFileArgs Empty = new SkipErrorFileArgs();

    /**
     * Skip if source/sink file changed by other concurrent write. Default is false. Type: boolean (or Expression with resultType boolean).
     * 
     */
    @Import(name="dataInconsistency")
    private @Nullable Output<Object> dataInconsistency;

    /**
     * @return Skip if source/sink file changed by other concurrent write. Default is false. Type: boolean (or Expression with resultType boolean).
     * 
     */
    public Optional<Output<Object>> dataInconsistency() {
        return Optional.ofNullable(this.dataInconsistency);
    }

    /**
     * Skip if file is deleted by other client during copy. Default is true. Type: boolean (or Expression with resultType boolean).
     * 
     */
    @Import(name="fileMissing")
    private @Nullable Output<Object> fileMissing;

    /**
     * @return Skip if file is deleted by other client during copy. Default is true. Type: boolean (or Expression with resultType boolean).
     * 
     */
    public Optional<Output<Object>> fileMissing() {
        return Optional.ofNullable(this.fileMissing);
    }

    private SkipErrorFileArgs() {}

    private SkipErrorFileArgs(SkipErrorFileArgs $) {
        this.dataInconsistency = $.dataInconsistency;
        this.fileMissing = $.fileMissing;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SkipErrorFileArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SkipErrorFileArgs $;

        public Builder() {
            $ = new SkipErrorFileArgs();
        }

        public Builder(SkipErrorFileArgs defaults) {
            $ = new SkipErrorFileArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dataInconsistency Skip if source/sink file changed by other concurrent write. Default is false. Type: boolean (or Expression with resultType boolean).
         * 
         * @return builder
         * 
         */
        public Builder dataInconsistency(@Nullable Output<Object> dataInconsistency) {
            $.dataInconsistency = dataInconsistency;
            return this;
        }

        /**
         * @param dataInconsistency Skip if source/sink file changed by other concurrent write. Default is false. Type: boolean (or Expression with resultType boolean).
         * 
         * @return builder
         * 
         */
        public Builder dataInconsistency(Object dataInconsistency) {
            return dataInconsistency(Output.of(dataInconsistency));
        }

        /**
         * @param fileMissing Skip if file is deleted by other client during copy. Default is true. Type: boolean (or Expression with resultType boolean).
         * 
         * @return builder
         * 
         */
        public Builder fileMissing(@Nullable Output<Object> fileMissing) {
            $.fileMissing = fileMissing;
            return this;
        }

        /**
         * @param fileMissing Skip if file is deleted by other client during copy. Default is true. Type: boolean (or Expression with resultType boolean).
         * 
         * @return builder
         * 
         */
        public Builder fileMissing(Object fileMissing) {
            return fileMissing(Output.of(fileMissing));
        }

        public SkipErrorFileArgs build() {
            return $;
        }
    }

}
