// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.machinelearningservices.inputs;

import com.pulumi.azurenative.machinelearningservices.inputs.ModelDockerSectionResponseResponseBaseImageRegistry;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The definition of a Docker container.
 * 
 */
public final class ModelEnvironmentDefinitionResponseResponseDocker extends com.pulumi.resources.InvokeArgs {

    public static final ModelEnvironmentDefinitionResponseResponseDocker Empty = new ModelEnvironmentDefinitionResponseResponseDocker();

    /**
     * Base Dockerfile used for Docker-based runs. Mutually exclusive with BaseImage.
     * 
     */
    @Import(name="baseDockerfile")
    private @Nullable String baseDockerfile;

    /**
     * @return Base Dockerfile used for Docker-based runs. Mutually exclusive with BaseImage.
     * 
     */
    public Optional<String> baseDockerfile() {
        return Optional.ofNullable(this.baseDockerfile);
    }

    /**
     * Base image used for Docker-based runs. Mutually exclusive with BaseDockerfile.
     * 
     */
    @Import(name="baseImage")
    private @Nullable String baseImage;

    /**
     * @return Base image used for Docker-based runs. Mutually exclusive with BaseDockerfile.
     * 
     */
    public Optional<String> baseImage() {
        return Optional.ofNullable(this.baseImage);
    }

    /**
     * Image registry that contains the base image.
     * 
     */
    @Import(name="baseImageRegistry")
    private @Nullable ModelDockerSectionResponseResponseBaseImageRegistry baseImageRegistry;

    /**
     * @return Image registry that contains the base image.
     * 
     */
    public Optional<ModelDockerSectionResponseResponseBaseImageRegistry> baseImageRegistry() {
        return Optional.ofNullable(this.baseImageRegistry);
    }

    private ModelEnvironmentDefinitionResponseResponseDocker() {}

    private ModelEnvironmentDefinitionResponseResponseDocker(ModelEnvironmentDefinitionResponseResponseDocker $) {
        this.baseDockerfile = $.baseDockerfile;
        this.baseImage = $.baseImage;
        this.baseImageRegistry = $.baseImageRegistry;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ModelEnvironmentDefinitionResponseResponseDocker defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ModelEnvironmentDefinitionResponseResponseDocker $;

        public Builder() {
            $ = new ModelEnvironmentDefinitionResponseResponseDocker();
        }

        public Builder(ModelEnvironmentDefinitionResponseResponseDocker defaults) {
            $ = new ModelEnvironmentDefinitionResponseResponseDocker(Objects.requireNonNull(defaults));
        }

        /**
         * @param baseDockerfile Base Dockerfile used for Docker-based runs. Mutually exclusive with BaseImage.
         * 
         * @return builder
         * 
         */
        public Builder baseDockerfile(@Nullable String baseDockerfile) {
            $.baseDockerfile = baseDockerfile;
            return this;
        }

        /**
         * @param baseImage Base image used for Docker-based runs. Mutually exclusive with BaseDockerfile.
         * 
         * @return builder
         * 
         */
        public Builder baseImage(@Nullable String baseImage) {
            $.baseImage = baseImage;
            return this;
        }

        /**
         * @param baseImageRegistry Image registry that contains the base image.
         * 
         * @return builder
         * 
         */
        public Builder baseImageRegistry(@Nullable ModelDockerSectionResponseResponseBaseImageRegistry baseImageRegistry) {
            $.baseImageRegistry = baseImageRegistry;
            return this;
        }

        public ModelEnvironmentDefinitionResponseResponseDocker build() {
            return $;
        }
    }

}
