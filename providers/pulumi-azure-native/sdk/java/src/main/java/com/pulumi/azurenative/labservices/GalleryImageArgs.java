// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.labservices;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class GalleryImageArgs extends com.pulumi.resources.ResourceArgs {

    public static final GalleryImageArgs Empty = new GalleryImageArgs();

    /**
     * The name of the gallery Image.
     * 
     */
    @Import(name="galleryImageName")
      private final @Nullable Output<String> galleryImageName;

    public Output<String> galleryImageName() {
        return this.galleryImageName == null ? Codegen.empty() : this.galleryImageName;
    }

    /**
     * Indicates whether this gallery image is enabled.
     * 
     */
    @Import(name="isEnabled")
      private final @Nullable Output<Boolean> isEnabled;

    public Output<Boolean> isEnabled() {
        return this.isEnabled == null ? Codegen.empty() : this.isEnabled;
    }

    /**
     * Indicates whether this gallery has been overridden for this lab account
     * 
     */
    @Import(name="isOverride")
      private final @Nullable Output<Boolean> isOverride;

    public Output<Boolean> isOverride() {
        return this.isOverride == null ? Codegen.empty() : this.isOverride;
    }

    /**
     * Indicates if the plan has been authorized for programmatic deployment.
     * 
     */
    @Import(name="isPlanAuthorized")
      private final @Nullable Output<Boolean> isPlanAuthorized;

    public Output<Boolean> isPlanAuthorized() {
        return this.isPlanAuthorized == null ? Codegen.empty() : this.isPlanAuthorized;
    }

    /**
     * The name of the lab Account.
     * 
     */
    @Import(name="labAccountName", required=true)
      private final Output<String> labAccountName;

    public Output<String> labAccountName() {
        return this.labAccountName;
    }

    /**
     * The location of the resource.
     * 
     */
    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> location() {
        return this.location == null ? Codegen.empty() : this.location;
    }

    /**
     * The provisioning status of the resource.
     * 
     */
    @Import(name="provisioningState")
      private final @Nullable Output<String> provisioningState;

    public Output<String> provisioningState() {
        return this.provisioningState == null ? Codegen.empty() : this.provisioningState;
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The tags of the resource.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    /**
     * The unique immutable identifier of a resource (Guid).
     * 
     */
    @Import(name="uniqueIdentifier")
      private final @Nullable Output<String> uniqueIdentifier;

    public Output<String> uniqueIdentifier() {
        return this.uniqueIdentifier == null ? Codegen.empty() : this.uniqueIdentifier;
    }

    public GalleryImageArgs(
        @Nullable Output<String> galleryImageName,
        @Nullable Output<Boolean> isEnabled,
        @Nullable Output<Boolean> isOverride,
        @Nullable Output<Boolean> isPlanAuthorized,
        Output<String> labAccountName,
        @Nullable Output<String> location,
        @Nullable Output<String> provisioningState,
        Output<String> resourceGroupName,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<String> uniqueIdentifier) {
        this.galleryImageName = galleryImageName;
        this.isEnabled = isEnabled;
        this.isOverride = isOverride;
        this.isPlanAuthorized = isPlanAuthorized;
        this.labAccountName = Objects.requireNonNull(labAccountName, "expected parameter 'labAccountName' to be non-null");
        this.location = location;
        this.provisioningState = provisioningState;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.tags = tags;
        this.uniqueIdentifier = uniqueIdentifier;
    }

    private GalleryImageArgs() {
        this.galleryImageName = Codegen.empty();
        this.isEnabled = Codegen.empty();
        this.isOverride = Codegen.empty();
        this.isPlanAuthorized = Codegen.empty();
        this.labAccountName = Codegen.empty();
        this.location = Codegen.empty();
        this.provisioningState = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.tags = Codegen.empty();
        this.uniqueIdentifier = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GalleryImageArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> galleryImageName;
        private @Nullable Output<Boolean> isEnabled;
        private @Nullable Output<Boolean> isOverride;
        private @Nullable Output<Boolean> isPlanAuthorized;
        private Output<String> labAccountName;
        private @Nullable Output<String> location;
        private @Nullable Output<String> provisioningState;
        private Output<String> resourceGroupName;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<String> uniqueIdentifier;

        public Builder() {
    	      // Empty
        }

        public Builder(GalleryImageArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.galleryImageName = defaults.galleryImageName;
    	      this.isEnabled = defaults.isEnabled;
    	      this.isOverride = defaults.isOverride;
    	      this.isPlanAuthorized = defaults.isPlanAuthorized;
    	      this.labAccountName = defaults.labAccountName;
    	      this.location = defaults.location;
    	      this.provisioningState = defaults.provisioningState;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.tags = defaults.tags;
    	      this.uniqueIdentifier = defaults.uniqueIdentifier;
        }

        public Builder galleryImageName(@Nullable Output<String> galleryImageName) {
            this.galleryImageName = galleryImageName;
            return this;
        }
        public Builder galleryImageName(@Nullable String galleryImageName) {
            this.galleryImageName = Codegen.ofNullable(galleryImageName);
            return this;
        }
        public Builder isEnabled(@Nullable Output<Boolean> isEnabled) {
            this.isEnabled = isEnabled;
            return this;
        }
        public Builder isEnabled(@Nullable Boolean isEnabled) {
            this.isEnabled = Codegen.ofNullable(isEnabled);
            return this;
        }
        public Builder isOverride(@Nullable Output<Boolean> isOverride) {
            this.isOverride = isOverride;
            return this;
        }
        public Builder isOverride(@Nullable Boolean isOverride) {
            this.isOverride = Codegen.ofNullable(isOverride);
            return this;
        }
        public Builder isPlanAuthorized(@Nullable Output<Boolean> isPlanAuthorized) {
            this.isPlanAuthorized = isPlanAuthorized;
            return this;
        }
        public Builder isPlanAuthorized(@Nullable Boolean isPlanAuthorized) {
            this.isPlanAuthorized = Codegen.ofNullable(isPlanAuthorized);
            return this;
        }
        public Builder labAccountName(Output<String> labAccountName) {
            this.labAccountName = Objects.requireNonNull(labAccountName);
            return this;
        }
        public Builder labAccountName(String labAccountName) {
            this.labAccountName = Output.of(Objects.requireNonNull(labAccountName));
            return this;
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Codegen.ofNullable(location);
            return this;
        }
        public Builder provisioningState(@Nullable Output<String> provisioningState) {
            this.provisioningState = provisioningState;
            return this;
        }
        public Builder provisioningState(@Nullable String provisioningState) {
            this.provisioningState = Codegen.ofNullable(provisioningState);
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder uniqueIdentifier(@Nullable Output<String> uniqueIdentifier) {
            this.uniqueIdentifier = uniqueIdentifier;
            return this;
        }
        public Builder uniqueIdentifier(@Nullable String uniqueIdentifier) {
            this.uniqueIdentifier = Codegen.ofNullable(uniqueIdentifier);
            return this;
        }        public GalleryImageArgs build() {
            return new GalleryImageArgs(galleryImageName, isEnabled, isOverride, isPlanAuthorized, labAccountName, location, provisioningState, resourceGroupName, tags, uniqueIdentifier);
        }
    }
}
