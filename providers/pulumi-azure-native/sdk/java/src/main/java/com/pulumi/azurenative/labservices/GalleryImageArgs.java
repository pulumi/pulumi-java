// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.labservices;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GalleryImageArgs extends com.pulumi.resources.ResourceArgs {

    public static final GalleryImageArgs Empty = new GalleryImageArgs();

    /**
     * The name of the gallery Image.
     * 
     */
    @Import(name="galleryImageName")
    private @Nullable Output<String> galleryImageName;

    public Optional<Output<String>> galleryImageName() {
        return Optional.ofNullable(this.galleryImageName);
    }

    /**
     * Indicates whether this gallery image is enabled.
     * 
     */
    @Import(name="isEnabled")
    private @Nullable Output<Boolean> isEnabled;

    public Optional<Output<Boolean>> isEnabled() {
        return Optional.ofNullable(this.isEnabled);
    }

    /**
     * Indicates whether this gallery has been overridden for this lab account
     * 
     */
    @Import(name="isOverride")
    private @Nullable Output<Boolean> isOverride;

    public Optional<Output<Boolean>> isOverride() {
        return Optional.ofNullable(this.isOverride);
    }

    /**
     * Indicates if the plan has been authorized for programmatic deployment.
     * 
     */
    @Import(name="isPlanAuthorized")
    private @Nullable Output<Boolean> isPlanAuthorized;

    public Optional<Output<Boolean>> isPlanAuthorized() {
        return Optional.ofNullable(this.isPlanAuthorized);
    }

    /**
     * The name of the lab Account.
     * 
     */
    @Import(name="labAccountName", required=true)
    private Output<String> labAccountName;

    public Output<String> labAccountName() {
        return this.labAccountName;
    }

    /**
     * The location of the resource.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The provisioning status of the resource.
     * 
     */
    @Import(name="provisioningState")
    private @Nullable Output<String> provisioningState;

    public Optional<Output<String>> provisioningState() {
        return Optional.ofNullable(this.provisioningState);
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The tags of the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The unique immutable identifier of a resource (Guid).
     * 
     */
    @Import(name="uniqueIdentifier")
    private @Nullable Output<String> uniqueIdentifier;

    public Optional<Output<String>> uniqueIdentifier() {
        return Optional.ofNullable(this.uniqueIdentifier);
    }

    private GalleryImageArgs() {}

    private GalleryImageArgs(GalleryImageArgs $) {
        this.galleryImageName = $.galleryImageName;
        this.isEnabled = $.isEnabled;
        this.isOverride = $.isOverride;
        this.isPlanAuthorized = $.isPlanAuthorized;
        this.labAccountName = $.labAccountName;
        this.location = $.location;
        this.provisioningState = $.provisioningState;
        this.resourceGroupName = $.resourceGroupName;
        this.tags = $.tags;
        this.uniqueIdentifier = $.uniqueIdentifier;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GalleryImageArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GalleryImageArgs $;

        public Builder() {
            $ = new GalleryImageArgs();
        }

        public Builder(GalleryImageArgs defaults) {
            $ = new GalleryImageArgs(Objects.requireNonNull(defaults));
        }

        public Builder galleryImageName(@Nullable Output<String> galleryImageName) {
            $.galleryImageName = galleryImageName;
            return this;
        }

        public Builder galleryImageName(String galleryImageName) {
            return galleryImageName(Output.of(galleryImageName));
        }

        public Builder isEnabled(@Nullable Output<Boolean> isEnabled) {
            $.isEnabled = isEnabled;
            return this;
        }

        public Builder isEnabled(Boolean isEnabled) {
            return isEnabled(Output.of(isEnabled));
        }

        public Builder isOverride(@Nullable Output<Boolean> isOverride) {
            $.isOverride = isOverride;
            return this;
        }

        public Builder isOverride(Boolean isOverride) {
            return isOverride(Output.of(isOverride));
        }

        public Builder isPlanAuthorized(@Nullable Output<Boolean> isPlanAuthorized) {
            $.isPlanAuthorized = isPlanAuthorized;
            return this;
        }

        public Builder isPlanAuthorized(Boolean isPlanAuthorized) {
            return isPlanAuthorized(Output.of(isPlanAuthorized));
        }

        public Builder labAccountName(Output<String> labAccountName) {
            $.labAccountName = labAccountName;
            return this;
        }

        public Builder labAccountName(String labAccountName) {
            return labAccountName(Output.of(labAccountName));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder provisioningState(@Nullable Output<String> provisioningState) {
            $.provisioningState = provisioningState;
            return this;
        }

        public Builder provisioningState(String provisioningState) {
            return provisioningState(Output.of(provisioningState));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder uniqueIdentifier(@Nullable Output<String> uniqueIdentifier) {
            $.uniqueIdentifier = uniqueIdentifier;
            return this;
        }

        public Builder uniqueIdentifier(String uniqueIdentifier) {
            return uniqueIdentifier(Output.of(uniqueIdentifier));
        }

        public GalleryImageArgs build() {
            $.labAccountName = Objects.requireNonNull($.labAccountName, "expected parameter 'labAccountName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
