// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.azurenative.network.inputs.ConnectionMonitorEndpointFilterResponse;
import com.pulumi.azurenative.network.inputs.ConnectionMonitorEndpointScopeResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Describes the connection monitor endpoint.
 * 
 */
public final class ConnectionMonitorEndpointResponse extends com.pulumi.resources.InvokeArgs {

    public static final ConnectionMonitorEndpointResponse Empty = new ConnectionMonitorEndpointResponse();

    /**
     * Address of the connection monitor endpoint (IP or domain name).
     * 
     */
    @Import(name="address")
    private @Nullable String address;

    /**
     * @return Address of the connection monitor endpoint (IP or domain name).
     * 
     */
    public Optional<String> address() {
        return Optional.ofNullable(this.address);
    }

    /**
     * Test coverage for the endpoint.
     * 
     */
    @Import(name="coverageLevel")
    private @Nullable String coverageLevel;

    /**
     * @return Test coverage for the endpoint.
     * 
     */
    public Optional<String> coverageLevel() {
        return Optional.ofNullable(this.coverageLevel);
    }

    /**
     * Filter for sub-items within the endpoint.
     * 
     */
    @Import(name="filter")
    private @Nullable ConnectionMonitorEndpointFilterResponse filter;

    /**
     * @return Filter for sub-items within the endpoint.
     * 
     */
    public Optional<ConnectionMonitorEndpointFilterResponse> filter() {
        return Optional.ofNullable(this.filter);
    }

    /**
     * The name of the connection monitor endpoint.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return The name of the connection monitor endpoint.
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * Resource ID of the connection monitor endpoint.
     * 
     */
    @Import(name="resourceId")
    private @Nullable String resourceId;

    /**
     * @return Resource ID of the connection monitor endpoint.
     * 
     */
    public Optional<String> resourceId() {
        return Optional.ofNullable(this.resourceId);
    }

    /**
     * Endpoint scope.
     * 
     */
    @Import(name="scope")
    private @Nullable ConnectionMonitorEndpointScopeResponse scope;

    /**
     * @return Endpoint scope.
     * 
     */
    public Optional<ConnectionMonitorEndpointScopeResponse> scope() {
        return Optional.ofNullable(this.scope);
    }

    /**
     * The endpoint type.
     * 
     */
    @Import(name="type")
    private @Nullable String type;

    /**
     * @return The endpoint type.
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    private ConnectionMonitorEndpointResponse() {}

    private ConnectionMonitorEndpointResponse(ConnectionMonitorEndpointResponse $) {
        this.address = $.address;
        this.coverageLevel = $.coverageLevel;
        this.filter = $.filter;
        this.name = $.name;
        this.resourceId = $.resourceId;
        this.scope = $.scope;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectionMonitorEndpointResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectionMonitorEndpointResponse $;

        public Builder() {
            $ = new ConnectionMonitorEndpointResponse();
        }

        public Builder(ConnectionMonitorEndpointResponse defaults) {
            $ = new ConnectionMonitorEndpointResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param address Address of the connection monitor endpoint (IP or domain name).
         * 
         * @return builder
         * 
         */
        public Builder address(@Nullable String address) {
            $.address = address;
            return this;
        }

        /**
         * @param coverageLevel Test coverage for the endpoint.
         * 
         * @return builder
         * 
         */
        public Builder coverageLevel(@Nullable String coverageLevel) {
            $.coverageLevel = coverageLevel;
            return this;
        }

        /**
         * @param filter Filter for sub-items within the endpoint.
         * 
         * @return builder
         * 
         */
        public Builder filter(@Nullable ConnectionMonitorEndpointFilterResponse filter) {
            $.filter = filter;
            return this;
        }

        /**
         * @param name The name of the connection monitor endpoint.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param resourceId Resource ID of the connection monitor endpoint.
         * 
         * @return builder
         * 
         */
        public Builder resourceId(@Nullable String resourceId) {
            $.resourceId = resourceId;
            return this;
        }

        /**
         * @param scope Endpoint scope.
         * 
         * @return builder
         * 
         */
        public Builder scope(@Nullable ConnectionMonitorEndpointScopeResponse scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param type The endpoint type.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable String type) {
            $.type = type;
            return this;
        }

        public ConnectionMonitorEndpointResponse build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            return $;
        }
    }

}
