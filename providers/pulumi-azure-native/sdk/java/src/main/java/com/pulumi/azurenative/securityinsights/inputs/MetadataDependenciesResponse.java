// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.securityinsights.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Dependencies for the content item, what other content items it requires to work.  Can describe more complex dependencies using a recursive/nested structure. For a single dependency an id/kind/version can be supplied or operator/criteria for complex dependencies.
 * 
 */
public final class MetadataDependenciesResponse extends com.pulumi.resources.InvokeArgs {

    public static final MetadataDependenciesResponse Empty = new MetadataDependenciesResponse();

    /**
     * Id of the content item we depend on
     * 
     */
    @Import(name="contentId")
    private @Nullable String contentId;

    public Optional<String> contentId() {
        return Optional.ofNullable(this.contentId);
    }

    /**
     * This is the list of dependencies we must fulfill, according to the AND/OR operator
     * 
     */
    @Import(name="criteria")
    private @Nullable List<MetadataDependenciesResponse> criteria;

    public Optional<List<MetadataDependenciesResponse>> criteria() {
        return Optional.ofNullable(this.criteria);
    }

    /**
     * Type of the content item we depend on
     * 
     */
    @Import(name="kind")
    private @Nullable String kind;

    public Optional<String> kind() {
        return Optional.ofNullable(this.kind);
    }

    /**
     * Name of the content item
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Operator used for list of dependencies in criteria array.
     * 
     */
    @Import(name="operator")
    private @Nullable String operator;

    public Optional<String> operator() {
        return Optional.ofNullable(this.operator);
    }

    /**
     * Version of the the content item we depend on.  Can be blank, * or missing to indicate any version fulfills the dependency.  If version does not match our defined numeric format then an exact match is required.
     * 
     */
    @Import(name="version")
    private @Nullable String version;

    public Optional<String> version() {
        return Optional.ofNullable(this.version);
    }

    private MetadataDependenciesResponse() {}

    private MetadataDependenciesResponse(MetadataDependenciesResponse $) {
        this.contentId = $.contentId;
        this.criteria = $.criteria;
        this.kind = $.kind;
        this.name = $.name;
        this.operator = $.operator;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MetadataDependenciesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MetadataDependenciesResponse $;

        public Builder() {
            $ = new MetadataDependenciesResponse();
        }

        public Builder(MetadataDependenciesResponse defaults) {
            $ = new MetadataDependenciesResponse(Objects.requireNonNull(defaults));
        }

        public Builder contentId(@Nullable String contentId) {
            $.contentId = contentId;
            return this;
        }

        public Builder criteria(@Nullable List<MetadataDependenciesResponse> criteria) {
            $.criteria = criteria;
            return this;
        }

        public Builder criteria(MetadataDependenciesResponse... criteria) {
            return criteria(List.of(criteria));
        }

        public Builder kind(@Nullable String kind) {
            $.kind = kind;
            return this;
        }

        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        public Builder operator(@Nullable String operator) {
            $.operator = operator;
            return this;
        }

        public Builder version(@Nullable String version) {
            $.version = version;
            return this;
        }

        public MetadataDependenciesResponse build() {
            return $;
        }
    }

}
