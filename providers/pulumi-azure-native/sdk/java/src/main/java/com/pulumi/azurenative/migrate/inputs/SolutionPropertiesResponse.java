// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.migrate.inputs;

import com.pulumi.azurenative.migrate.inputs.DatabasesSolutionSummaryResponse;
import com.pulumi.azurenative.migrate.inputs.ServersSolutionSummaryResponse;
import com.pulumi.azurenative.migrate.inputs.SolutionDetailsResponse;
import com.pulumi.core.Either;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Class for solution properties.
 * 
 */
public final class SolutionPropertiesResponse extends com.pulumi.resources.InvokeArgs {

    public static final SolutionPropertiesResponse Empty = new SolutionPropertiesResponse();

    /**
     * Gets or sets the cleanup state of the solution.
     * 
     */
    @Import(name="cleanupState")
    private @Nullable String cleanupState;

    public Optional<String> cleanupState() {
        return Optional.ofNullable(this.cleanupState);
    }

    /**
     * Gets or sets the details of the solution.
     * 
     */
    @Import(name="details")
    private @Nullable SolutionDetailsResponse details;

    public Optional<SolutionDetailsResponse> details() {
        return Optional.ofNullable(this.details);
    }

    /**
     * Gets or sets the goal of the solution.
     * 
     */
    @Import(name="goal")
    private @Nullable String goal;

    public Optional<String> goal() {
        return Optional.ofNullable(this.goal);
    }

    /**
     * Gets or sets the purpose of the solution.
     * 
     */
    @Import(name="purpose")
    private @Nullable String purpose;

    public Optional<String> purpose() {
        return Optional.ofNullable(this.purpose);
    }

    /**
     * Gets or sets the current status of the solution.
     * 
     */
    @Import(name="status")
    private @Nullable String status;

    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Gets or sets the summary of the solution.
     * 
     */
    @Import(name="summary")
    private @Nullable Either<DatabasesSolutionSummaryResponse,ServersSolutionSummaryResponse> summary;

    public Optional<Either<DatabasesSolutionSummaryResponse,ServersSolutionSummaryResponse>> summary() {
        return Optional.ofNullable(this.summary);
    }

    /**
     * Gets or sets the tool being used in the solution.
     * 
     */
    @Import(name="tool")
    private @Nullable String tool;

    public Optional<String> tool() {
        return Optional.ofNullable(this.tool);
    }

    private SolutionPropertiesResponse() {}

    private SolutionPropertiesResponse(SolutionPropertiesResponse $) {
        this.cleanupState = $.cleanupState;
        this.details = $.details;
        this.goal = $.goal;
        this.purpose = $.purpose;
        this.status = $.status;
        this.summary = $.summary;
        this.tool = $.tool;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SolutionPropertiesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SolutionPropertiesResponse $;

        public Builder() {
            $ = new SolutionPropertiesResponse();
        }

        public Builder(SolutionPropertiesResponse defaults) {
            $ = new SolutionPropertiesResponse(Objects.requireNonNull(defaults));
        }

        public Builder cleanupState(@Nullable String cleanupState) {
            $.cleanupState = cleanupState;
            return this;
        }

        public Builder details(@Nullable SolutionDetailsResponse details) {
            $.details = details;
            return this;
        }

        public Builder goal(@Nullable String goal) {
            $.goal = goal;
            return this;
        }

        public Builder purpose(@Nullable String purpose) {
            $.purpose = purpose;
            return this;
        }

        public Builder status(@Nullable String status) {
            $.status = status;
            return this;
        }

        public Builder summary(@Nullable Either<DatabasesSolutionSummaryResponse,ServersSolutionSummaryResponse> summary) {
            $.summary = summary;
            return this;
        }

        public Builder summary(DatabasesSolutionSummaryResponse summary) {
            return summary(Either.ofLeft(summary));
        }

        public Builder summary(ServersSolutionSummaryResponse summary) {
            return summary(Either.ofRight(summary));
        }

        public Builder tool(@Nullable String tool) {
            $.tool = tool;
            return this;
        }

        public SolutionPropertiesResponse build() {
            return $;
        }
    }

}
