// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.azurenative.network.inputs.ApplicationGatewayConnectionDrainingResponse;
import com.pulumi.azurenative.network.inputs.SubResourceResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Backend address pool settings of an application gateway.
 * 
 */
public final class ApplicationGatewayBackendHttpSettingsResponse extends com.pulumi.resources.InvokeArgs {

    public static final ApplicationGatewayBackendHttpSettingsResponse Empty = new ApplicationGatewayBackendHttpSettingsResponse();

    /**
     * Cookie name to use for the affinity cookie.
     * 
     */
    @Import(name="affinityCookieName")
    private @Nullable String affinityCookieName;

    /**
     * @return Cookie name to use for the affinity cookie.
     * 
     */
    public Optional<String> affinityCookieName() {
        return Optional.ofNullable(this.affinityCookieName);
    }

    /**
     * Array of references to application gateway authentication certificates.
     * 
     */
    @Import(name="authenticationCertificates")
    private @Nullable List<SubResourceResponse> authenticationCertificates;

    /**
     * @return Array of references to application gateway authentication certificates.
     * 
     */
    public Optional<List<SubResourceResponse>> authenticationCertificates() {
        return Optional.ofNullable(this.authenticationCertificates);
    }

    /**
     * Connection draining of the backend http settings resource.
     * 
     */
    @Import(name="connectionDraining")
    private @Nullable ApplicationGatewayConnectionDrainingResponse connectionDraining;

    /**
     * @return Connection draining of the backend http settings resource.
     * 
     */
    public Optional<ApplicationGatewayConnectionDrainingResponse> connectionDraining() {
        return Optional.ofNullable(this.connectionDraining);
    }

    /**
     * Cookie based affinity.
     * 
     */
    @Import(name="cookieBasedAffinity")
    private @Nullable String cookieBasedAffinity;

    /**
     * @return Cookie based affinity.
     * 
     */
    public Optional<String> cookieBasedAffinity() {
        return Optional.ofNullable(this.cookieBasedAffinity);
    }

    /**
     * A unique read-only string that changes whenever the resource is updated.
     * 
     */
    @Import(name="etag", required=true)
    private String etag;

    /**
     * @return A unique read-only string that changes whenever the resource is updated.
     * 
     */
    public String etag() {
        return this.etag;
    }

    /**
     * Host header to be sent to the backend servers.
     * 
     */
    @Import(name="hostName")
    private @Nullable String hostName;

    /**
     * @return Host header to be sent to the backend servers.
     * 
     */
    public Optional<String> hostName() {
        return Optional.ofNullable(this.hostName);
    }

    /**
     * Resource ID.
     * 
     */
    @Import(name="id")
    private @Nullable String id;

    /**
     * @return Resource ID.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Name of the backend http settings that is unique within an Application Gateway.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return Name of the backend http settings that is unique within an Application Gateway.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Path which should be used as a prefix for all HTTP requests. Null means no path will be prefixed. Default value is null.
     * 
     */
    @Import(name="path")
    private @Nullable String path;

    /**
     * @return Path which should be used as a prefix for all HTTP requests. Null means no path will be prefixed. Default value is null.
     * 
     */
    public Optional<String> path() {
        return Optional.ofNullable(this.path);
    }

    /**
     * Whether to pick host header should be picked from the host name of the backend server. Default value is false.
     * 
     */
    @Import(name="pickHostNameFromBackendAddress")
    private @Nullable Boolean pickHostNameFromBackendAddress;

    /**
     * @return Whether to pick host header should be picked from the host name of the backend server. Default value is false.
     * 
     */
    public Optional<Boolean> pickHostNameFromBackendAddress() {
        return Optional.ofNullable(this.pickHostNameFromBackendAddress);
    }

    /**
     * The destination port on the backend.
     * 
     */
    @Import(name="port")
    private @Nullable Integer port;

    /**
     * @return The destination port on the backend.
     * 
     */
    public Optional<Integer> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * Probe resource of an application gateway.
     * 
     */
    @Import(name="probe")
    private @Nullable SubResourceResponse probe;

    /**
     * @return Probe resource of an application gateway.
     * 
     */
    public Optional<SubResourceResponse> probe() {
        return Optional.ofNullable(this.probe);
    }

    /**
     * Whether the probe is enabled. Default value is false.
     * 
     */
    @Import(name="probeEnabled")
    private @Nullable Boolean probeEnabled;

    /**
     * @return Whether the probe is enabled. Default value is false.
     * 
     */
    public Optional<Boolean> probeEnabled() {
        return Optional.ofNullable(this.probeEnabled);
    }

    /**
     * The protocol used to communicate with the backend.
     * 
     */
    @Import(name="protocol")
    private @Nullable String protocol;

    /**
     * @return The protocol used to communicate with the backend.
     * 
     */
    public Optional<String> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    /**
     * The provisioning state of the backend HTTP settings resource.
     * 
     */
    @Import(name="provisioningState", required=true)
    private String provisioningState;

    /**
     * @return The provisioning state of the backend HTTP settings resource.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Request timeout in seconds. Application Gateway will fail the request if response is not received within RequestTimeout. Acceptable values are from 1 second to 86400 seconds.
     * 
     */
    @Import(name="requestTimeout")
    private @Nullable Integer requestTimeout;

    /**
     * @return Request timeout in seconds. Application Gateway will fail the request if response is not received within RequestTimeout. Acceptable values are from 1 second to 86400 seconds.
     * 
     */
    public Optional<Integer> requestTimeout() {
        return Optional.ofNullable(this.requestTimeout);
    }

    /**
     * Array of references to application gateway trusted root certificates.
     * 
     */
    @Import(name="trustedRootCertificates")
    private @Nullable List<SubResourceResponse> trustedRootCertificates;

    /**
     * @return Array of references to application gateway trusted root certificates.
     * 
     */
    public Optional<List<SubResourceResponse>> trustedRootCertificates() {
        return Optional.ofNullable(this.trustedRootCertificates);
    }

    /**
     * Type of the resource.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    /**
     * @return Type of the resource.
     * 
     */
    public String type() {
        return this.type;
    }

    private ApplicationGatewayBackendHttpSettingsResponse() {}

    private ApplicationGatewayBackendHttpSettingsResponse(ApplicationGatewayBackendHttpSettingsResponse $) {
        this.affinityCookieName = $.affinityCookieName;
        this.authenticationCertificates = $.authenticationCertificates;
        this.connectionDraining = $.connectionDraining;
        this.cookieBasedAffinity = $.cookieBasedAffinity;
        this.etag = $.etag;
        this.hostName = $.hostName;
        this.id = $.id;
        this.name = $.name;
        this.path = $.path;
        this.pickHostNameFromBackendAddress = $.pickHostNameFromBackendAddress;
        this.port = $.port;
        this.probe = $.probe;
        this.probeEnabled = $.probeEnabled;
        this.protocol = $.protocol;
        this.provisioningState = $.provisioningState;
        this.requestTimeout = $.requestTimeout;
        this.trustedRootCertificates = $.trustedRootCertificates;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplicationGatewayBackendHttpSettingsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplicationGatewayBackendHttpSettingsResponse $;

        public Builder() {
            $ = new ApplicationGatewayBackendHttpSettingsResponse();
        }

        public Builder(ApplicationGatewayBackendHttpSettingsResponse defaults) {
            $ = new ApplicationGatewayBackendHttpSettingsResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param affinityCookieName Cookie name to use for the affinity cookie.
         * 
         * @return builder
         * 
         */
        public Builder affinityCookieName(@Nullable String affinityCookieName) {
            $.affinityCookieName = affinityCookieName;
            return this;
        }

        /**
         * @param authenticationCertificates Array of references to application gateway authentication certificates.
         * 
         * @return builder
         * 
         */
        public Builder authenticationCertificates(@Nullable List<SubResourceResponse> authenticationCertificates) {
            $.authenticationCertificates = authenticationCertificates;
            return this;
        }

        /**
         * @param authenticationCertificates Array of references to application gateway authentication certificates.
         * 
         * @return builder
         * 
         */
        public Builder authenticationCertificates(SubResourceResponse... authenticationCertificates) {
            return authenticationCertificates(List.of(authenticationCertificates));
        }

        /**
         * @param connectionDraining Connection draining of the backend http settings resource.
         * 
         * @return builder
         * 
         */
        public Builder connectionDraining(@Nullable ApplicationGatewayConnectionDrainingResponse connectionDraining) {
            $.connectionDraining = connectionDraining;
            return this;
        }

        /**
         * @param cookieBasedAffinity Cookie based affinity.
         * 
         * @return builder
         * 
         */
        public Builder cookieBasedAffinity(@Nullable String cookieBasedAffinity) {
            $.cookieBasedAffinity = cookieBasedAffinity;
            return this;
        }

        /**
         * @param etag A unique read-only string that changes whenever the resource is updated.
         * 
         * @return builder
         * 
         */
        public Builder etag(String etag) {
            $.etag = etag;
            return this;
        }

        /**
         * @param hostName Host header to be sent to the backend servers.
         * 
         * @return builder
         * 
         */
        public Builder hostName(@Nullable String hostName) {
            $.hostName = hostName;
            return this;
        }

        /**
         * @param id Resource ID.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable String id) {
            $.id = id;
            return this;
        }

        /**
         * @param name Name of the backend http settings that is unique within an Application Gateway.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param path Path which should be used as a prefix for all HTTP requests. Null means no path will be prefixed. Default value is null.
         * 
         * @return builder
         * 
         */
        public Builder path(@Nullable String path) {
            $.path = path;
            return this;
        }

        /**
         * @param pickHostNameFromBackendAddress Whether to pick host header should be picked from the host name of the backend server. Default value is false.
         * 
         * @return builder
         * 
         */
        public Builder pickHostNameFromBackendAddress(@Nullable Boolean pickHostNameFromBackendAddress) {
            $.pickHostNameFromBackendAddress = pickHostNameFromBackendAddress;
            return this;
        }

        /**
         * @param port The destination port on the backend.
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Integer port) {
            $.port = port;
            return this;
        }

        /**
         * @param probe Probe resource of an application gateway.
         * 
         * @return builder
         * 
         */
        public Builder probe(@Nullable SubResourceResponse probe) {
            $.probe = probe;
            return this;
        }

        /**
         * @param probeEnabled Whether the probe is enabled. Default value is false.
         * 
         * @return builder
         * 
         */
        public Builder probeEnabled(@Nullable Boolean probeEnabled) {
            $.probeEnabled = probeEnabled;
            return this;
        }

        /**
         * @param protocol The protocol used to communicate with the backend.
         * 
         * @return builder
         * 
         */
        public Builder protocol(@Nullable String protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param provisioningState The provisioning state of the backend HTTP settings resource.
         * 
         * @return builder
         * 
         */
        public Builder provisioningState(String provisioningState) {
            $.provisioningState = provisioningState;
            return this;
        }

        /**
         * @param requestTimeout Request timeout in seconds. Application Gateway will fail the request if response is not received within RequestTimeout. Acceptable values are from 1 second to 86400 seconds.
         * 
         * @return builder
         * 
         */
        public Builder requestTimeout(@Nullable Integer requestTimeout) {
            $.requestTimeout = requestTimeout;
            return this;
        }

        /**
         * @param trustedRootCertificates Array of references to application gateway trusted root certificates.
         * 
         * @return builder
         * 
         */
        public Builder trustedRootCertificates(@Nullable List<SubResourceResponse> trustedRootCertificates) {
            $.trustedRootCertificates = trustedRootCertificates;
            return this;
        }

        /**
         * @param trustedRootCertificates Array of references to application gateway trusted root certificates.
         * 
         * @return builder
         * 
         */
        public Builder trustedRootCertificates(SubResourceResponse... trustedRootCertificates) {
            return trustedRootCertificates(List.of(trustedRootCertificates));
        }

        /**
         * @param type Type of the resource.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public ApplicationGatewayBackendHttpSettingsResponse build() {
            $.etag = Objects.requireNonNull($.etag, "expected parameter 'etag' to be non-null");
            $.provisioningState = Objects.requireNonNull($.provisioningState, "expected parameter 'provisioningState' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
