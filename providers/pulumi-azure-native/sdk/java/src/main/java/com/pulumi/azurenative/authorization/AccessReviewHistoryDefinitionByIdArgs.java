// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.authorization;

import com.pulumi.azurenative.authorization.enums.AccessReviewRecurrenceRangeType;
import com.pulumi.azurenative.authorization.enums.AccessReviewResult;
import com.pulumi.azurenative.authorization.inputs.AccessReviewHistoryInstanceArgs;
import com.pulumi.azurenative.authorization.inputs.AccessReviewScopeArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AccessReviewHistoryDefinitionByIdArgs extends com.pulumi.resources.ResourceArgs {

    public static final AccessReviewHistoryDefinitionByIdArgs Empty = new AccessReviewHistoryDefinitionByIdArgs();

    /**
     * Collection of review decisions which the history data should be filtered on. For example if Approve and Deny are supplied the data will only contain review results in which the decision maker approved or denied a review request.
     * 
     */
    @Import(name="decisions")
    private @Nullable Output<List<Either<String,AccessReviewResult>>> decisions;

    public Optional<Output<List<Either<String,AccessReviewResult>>>> decisions() {
        return Optional.ofNullable(this.decisions);
    }

    /**
     * The display name for the history definition.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * The DateTime when the review is scheduled to end. Required if type is endDate
     * 
     */
    @Import(name="endDate")
    private @Nullable Output<String> endDate;

    public Optional<Output<String>> endDate() {
        return Optional.ofNullable(this.endDate);
    }

    /**
     * The id of the access review history definition.
     * 
     */
    @Import(name="historyDefinitionId")
    private @Nullable Output<String> historyDefinitionId;

    public Optional<Output<String>> historyDefinitionId() {
        return Optional.ofNullable(this.historyDefinitionId);
    }

    /**
     * Set of access review history instances for this history definition.
     * 
     */
    @Import(name="instances")
    private @Nullable Output<List<AccessReviewHistoryInstanceArgs>> instances;

    public Optional<Output<List<AccessReviewHistoryInstanceArgs>>> instances() {
        return Optional.ofNullable(this.instances);
    }

    /**
     * The interval for recurrence. For a quarterly review, the interval is 3 for type : absoluteMonthly.
     * 
     */
    @Import(name="interval")
    private @Nullable Output<Integer> interval;

    public Optional<Output<Integer>> interval() {
        return Optional.ofNullable(this.interval);
    }

    /**
     * The number of times to repeat the access review. Required and must be positive if type is numbered.
     * 
     */
    @Import(name="numberOfOccurrences")
    private @Nullable Output<Integer> numberOfOccurrences;

    public Optional<Output<Integer>> numberOfOccurrences() {
        return Optional.ofNullable(this.numberOfOccurrences);
    }

    /**
     * A collection of scopes used when selecting review history data
     * 
     */
    @Import(name="scopes")
    private @Nullable Output<List<AccessReviewScopeArgs>> scopes;

    public Optional<Output<List<AccessReviewScopeArgs>>> scopes() {
        return Optional.ofNullable(this.scopes);
    }

    /**
     * The DateTime when the review is scheduled to be start. This could be a date in the future. Required on create.
     * 
     */
    @Import(name="startDate")
    private @Nullable Output<String> startDate;

    public Optional<Output<String>> startDate() {
        return Optional.ofNullable(this.startDate);
    }

    /**
     * The recurrence range type. The possible values are: endDate, noEnd, numbered.
     * 
     */
    @Import(name="type")
    private @Nullable Output<Either<String,AccessReviewRecurrenceRangeType>> type;

    public Optional<Output<Either<String,AccessReviewRecurrenceRangeType>>> type() {
        return Optional.ofNullable(this.type);
    }

    private AccessReviewHistoryDefinitionByIdArgs() {}

    private AccessReviewHistoryDefinitionByIdArgs(AccessReviewHistoryDefinitionByIdArgs $) {
        this.decisions = $.decisions;
        this.displayName = $.displayName;
        this.endDate = $.endDate;
        this.historyDefinitionId = $.historyDefinitionId;
        this.instances = $.instances;
        this.interval = $.interval;
        this.numberOfOccurrences = $.numberOfOccurrences;
        this.scopes = $.scopes;
        this.startDate = $.startDate;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AccessReviewHistoryDefinitionByIdArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AccessReviewHistoryDefinitionByIdArgs $;

        public Builder() {
            $ = new AccessReviewHistoryDefinitionByIdArgs();
        }

        public Builder(AccessReviewHistoryDefinitionByIdArgs defaults) {
            $ = new AccessReviewHistoryDefinitionByIdArgs(Objects.requireNonNull(defaults));
        }

        public Builder decisions(@Nullable Output<List<Either<String,AccessReviewResult>>> decisions) {
            $.decisions = decisions;
            return this;
        }

        public Builder decisions(List<Either<String,AccessReviewResult>> decisions) {
            return decisions(Output.of(decisions));
        }

        public Builder decisions(Either<String,AccessReviewResult>... decisions) {
            return decisions(List.of(decisions));
        }

        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder endDate(@Nullable Output<String> endDate) {
            $.endDate = endDate;
            return this;
        }

        public Builder endDate(String endDate) {
            return endDate(Output.of(endDate));
        }

        public Builder historyDefinitionId(@Nullable Output<String> historyDefinitionId) {
            $.historyDefinitionId = historyDefinitionId;
            return this;
        }

        public Builder historyDefinitionId(String historyDefinitionId) {
            return historyDefinitionId(Output.of(historyDefinitionId));
        }

        public Builder instances(@Nullable Output<List<AccessReviewHistoryInstanceArgs>> instances) {
            $.instances = instances;
            return this;
        }

        public Builder instances(List<AccessReviewHistoryInstanceArgs> instances) {
            return instances(Output.of(instances));
        }

        public Builder instances(AccessReviewHistoryInstanceArgs... instances) {
            return instances(List.of(instances));
        }

        public Builder interval(@Nullable Output<Integer> interval) {
            $.interval = interval;
            return this;
        }

        public Builder interval(Integer interval) {
            return interval(Output.of(interval));
        }

        public Builder numberOfOccurrences(@Nullable Output<Integer> numberOfOccurrences) {
            $.numberOfOccurrences = numberOfOccurrences;
            return this;
        }

        public Builder numberOfOccurrences(Integer numberOfOccurrences) {
            return numberOfOccurrences(Output.of(numberOfOccurrences));
        }

        public Builder scopes(@Nullable Output<List<AccessReviewScopeArgs>> scopes) {
            $.scopes = scopes;
            return this;
        }

        public Builder scopes(List<AccessReviewScopeArgs> scopes) {
            return scopes(Output.of(scopes));
        }

        public Builder scopes(AccessReviewScopeArgs... scopes) {
            return scopes(List.of(scopes));
        }

        public Builder startDate(@Nullable Output<String> startDate) {
            $.startDate = startDate;
            return this;
        }

        public Builder startDate(String startDate) {
            return startDate(Output.of(startDate));
        }

        public Builder type(@Nullable Output<Either<String,AccessReviewRecurrenceRangeType>> type) {
            $.type = type;
            return this;
        }

        public Builder type(Either<String,AccessReviewRecurrenceRangeType> type) {
            return type(Output.of(type));
        }

        public Builder type(String type) {
            return type(Either.ofLeft(type));
        }

        public Builder type(AccessReviewRecurrenceRangeType type) {
            return type(Either.ofRight(type));
        }

        public AccessReviewHistoryDefinitionByIdArgs build() {
            return $;
        }
    }

}
