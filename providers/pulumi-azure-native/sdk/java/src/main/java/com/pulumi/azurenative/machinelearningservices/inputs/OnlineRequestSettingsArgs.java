// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.machinelearningservices.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Online deployment scoring requests configuration.
 * 
 */
public final class OnlineRequestSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final OnlineRequestSettingsArgs Empty = new OnlineRequestSettingsArgs();

    /**
     * The number of requests allowed to queue at once for this deployment.
     * 
     */
    @Import(name="maxConcurrentRequestsPerInstance")
    private @Nullable Output<Integer> maxConcurrentRequestsPerInstance;

    /**
     * @return The number of requests allowed to queue at once for this deployment.
     * 
     */
    public Optional<Output<Integer>> maxConcurrentRequestsPerInstance() {
        return Optional.ofNullable(this.maxConcurrentRequestsPerInstance);
    }

    /**
     * The maximum queue wait time in ISO 8601 format. Supports millisecond precision.
     * 
     */
    @Import(name="maxQueueWait")
    private @Nullable Output<String> maxQueueWait;

    /**
     * @return The maximum queue wait time in ISO 8601 format. Supports millisecond precision.
     * 
     */
    public Optional<Output<String>> maxQueueWait() {
        return Optional.ofNullable(this.maxQueueWait);
    }

    /**
     * The request timeout in ISO 8601 format. Supports millisecond precision.
     * 
     */
    @Import(name="requestTimeout")
    private @Nullable Output<String> requestTimeout;

    /**
     * @return The request timeout in ISO 8601 format. Supports millisecond precision.
     * 
     */
    public Optional<Output<String>> requestTimeout() {
        return Optional.ofNullable(this.requestTimeout);
    }

    private OnlineRequestSettingsArgs() {}

    private OnlineRequestSettingsArgs(OnlineRequestSettingsArgs $) {
        this.maxConcurrentRequestsPerInstance = $.maxConcurrentRequestsPerInstance;
        this.maxQueueWait = $.maxQueueWait;
        this.requestTimeout = $.requestTimeout;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OnlineRequestSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OnlineRequestSettingsArgs $;

        public Builder() {
            $ = new OnlineRequestSettingsArgs();
        }

        public Builder(OnlineRequestSettingsArgs defaults) {
            $ = new OnlineRequestSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param maxConcurrentRequestsPerInstance The number of requests allowed to queue at once for this deployment.
         * 
         * @return builder
         * 
         */
        public Builder maxConcurrentRequestsPerInstance(@Nullable Output<Integer> maxConcurrentRequestsPerInstance) {
            $.maxConcurrentRequestsPerInstance = maxConcurrentRequestsPerInstance;
            return this;
        }

        /**
         * @param maxConcurrentRequestsPerInstance The number of requests allowed to queue at once for this deployment.
         * 
         * @return builder
         * 
         */
        public Builder maxConcurrentRequestsPerInstance(Integer maxConcurrentRequestsPerInstance) {
            return maxConcurrentRequestsPerInstance(Output.of(maxConcurrentRequestsPerInstance));
        }

        /**
         * @param maxQueueWait The maximum queue wait time in ISO 8601 format. Supports millisecond precision.
         * 
         * @return builder
         * 
         */
        public Builder maxQueueWait(@Nullable Output<String> maxQueueWait) {
            $.maxQueueWait = maxQueueWait;
            return this;
        }

        /**
         * @param maxQueueWait The maximum queue wait time in ISO 8601 format. Supports millisecond precision.
         * 
         * @return builder
         * 
         */
        public Builder maxQueueWait(String maxQueueWait) {
            return maxQueueWait(Output.of(maxQueueWait));
        }

        /**
         * @param requestTimeout The request timeout in ISO 8601 format. Supports millisecond precision.
         * 
         * @return builder
         * 
         */
        public Builder requestTimeout(@Nullable Output<String> requestTimeout) {
            $.requestTimeout = requestTimeout;
            return this;
        }

        /**
         * @param requestTimeout The request timeout in ISO 8601 format. Supports millisecond precision.
         * 
         * @return builder
         * 
         */
        public Builder requestTimeout(String requestTimeout) {
            return requestTimeout(Output.of(requestTimeout));
        }

        public OnlineRequestSettingsArgs build() {
            return $;
        }
    }

}
