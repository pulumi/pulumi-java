// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.azurenative.network.inputs.P2SConnectionConfigurationResponse;
import com.pulumi.azurenative.network.inputs.SubResourceResponse;
import com.pulumi.azurenative.network.inputs.VpnClientConnectionHealthResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * P2SVpnGateway Resource.
 * 
 */
public final class P2SVpnGatewayResponse extends com.pulumi.resources.InvokeArgs {

    public static final P2SVpnGatewayResponse Empty = new P2SVpnGatewayResponse();

    /**
     * List of all customer specified DNS servers IP addresses.
     * 
     */
    @Import(name="customDnsServers")
      private final @Nullable List<String> customDnsServers;

    public List<String> customDnsServers() {
        return this.customDnsServers == null ? List.of() : this.customDnsServers;
    }

    /**
     * A unique read-only string that changes whenever the resource is updated.
     * 
     */
    @Import(name="etag", required=true)
      private final String etag;

    public String etag() {
        return this.etag;
    }

    /**
     * Resource ID.
     * 
     */
    @Import(name="id")
      private final @Nullable String id;

    public Optional<String> id() {
        return this.id == null ? Optional.empty() : Optional.ofNullable(this.id);
    }

    /**
     * Enable Routing Preference property for the Public IP Interface of the P2SVpnGateway.
     * 
     */
    @Import(name="isRoutingPreferenceInternet")
      private final @Nullable Boolean isRoutingPreferenceInternet;

    public Optional<Boolean> isRoutingPreferenceInternet() {
        return this.isRoutingPreferenceInternet == null ? Optional.empty() : Optional.ofNullable(this.isRoutingPreferenceInternet);
    }

    /**
     * Resource location.
     * 
     */
    @Import(name="location", required=true)
      private final String location;

    public String location() {
        return this.location;
    }

    /**
     * Resource name.
     * 
     */
    @Import(name="name", required=true)
      private final String name;

    public String name() {
        return this.name;
    }

    /**
     * List of all p2s connection configurations of the gateway.
     * 
     */
    @Import(name="p2SConnectionConfigurations")
      private final @Nullable List<P2SConnectionConfigurationResponse> p2SConnectionConfigurations;

    public List<P2SConnectionConfigurationResponse> p2SConnectionConfigurations() {
        return this.p2SConnectionConfigurations == null ? List.of() : this.p2SConnectionConfigurations;
    }

    /**
     * The provisioning state of the P2S VPN gateway resource.
     * 
     */
    @Import(name="provisioningState", required=true)
      private final String provisioningState;

    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
      private final @Nullable Map<String,String> tags;

    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }

    /**
     * Resource type.
     * 
     */
    @Import(name="type", required=true)
      private final String type;

    public String type() {
        return this.type;
    }

    /**
     * The VirtualHub to which the gateway belongs.
     * 
     */
    @Import(name="virtualHub")
      private final @Nullable SubResourceResponse virtualHub;

    public Optional<SubResourceResponse> virtualHub() {
        return this.virtualHub == null ? Optional.empty() : Optional.ofNullable(this.virtualHub);
    }

    /**
     * All P2S VPN clients' connection health status.
     * 
     */
    @Import(name="vpnClientConnectionHealth", required=true)
      private final VpnClientConnectionHealthResponse vpnClientConnectionHealth;

    public VpnClientConnectionHealthResponse vpnClientConnectionHealth() {
        return this.vpnClientConnectionHealth;
    }

    /**
     * The scale unit for this p2s vpn gateway.
     * 
     */
    @Import(name="vpnGatewayScaleUnit")
      private final @Nullable Integer vpnGatewayScaleUnit;

    public Optional<Integer> vpnGatewayScaleUnit() {
        return this.vpnGatewayScaleUnit == null ? Optional.empty() : Optional.ofNullable(this.vpnGatewayScaleUnit);
    }

    /**
     * The VpnServerConfiguration to which the p2sVpnGateway is attached to.
     * 
     */
    @Import(name="vpnServerConfiguration")
      private final @Nullable SubResourceResponse vpnServerConfiguration;

    public Optional<SubResourceResponse> vpnServerConfiguration() {
        return this.vpnServerConfiguration == null ? Optional.empty() : Optional.ofNullable(this.vpnServerConfiguration);
    }

    public P2SVpnGatewayResponse(
        @Nullable List<String> customDnsServers,
        String etag,
        @Nullable String id,
        @Nullable Boolean isRoutingPreferenceInternet,
        String location,
        String name,
        @Nullable List<P2SConnectionConfigurationResponse> p2SConnectionConfigurations,
        String provisioningState,
        @Nullable Map<String,String> tags,
        String type,
        @Nullable SubResourceResponse virtualHub,
        VpnClientConnectionHealthResponse vpnClientConnectionHealth,
        @Nullable Integer vpnGatewayScaleUnit,
        @Nullable SubResourceResponse vpnServerConfiguration) {
        this.customDnsServers = customDnsServers;
        this.etag = Objects.requireNonNull(etag, "expected parameter 'etag' to be non-null");
        this.id = id;
        this.isRoutingPreferenceInternet = isRoutingPreferenceInternet;
        this.location = Objects.requireNonNull(location, "expected parameter 'location' to be non-null");
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.p2SConnectionConfigurations = p2SConnectionConfigurations;
        this.provisioningState = Objects.requireNonNull(provisioningState, "expected parameter 'provisioningState' to be non-null");
        this.tags = tags;
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
        this.virtualHub = virtualHub;
        this.vpnClientConnectionHealth = Objects.requireNonNull(vpnClientConnectionHealth, "expected parameter 'vpnClientConnectionHealth' to be non-null");
        this.vpnGatewayScaleUnit = vpnGatewayScaleUnit;
        this.vpnServerConfiguration = vpnServerConfiguration;
    }

    private P2SVpnGatewayResponse() {
        this.customDnsServers = List.of();
        this.etag = null;
        this.id = null;
        this.isRoutingPreferenceInternet = null;
        this.location = null;
        this.name = null;
        this.p2SConnectionConfigurations = List.of();
        this.provisioningState = null;
        this.tags = Map.of();
        this.type = null;
        this.virtualHub = null;
        this.vpnClientConnectionHealth = null;
        this.vpnGatewayScaleUnit = null;
        this.vpnServerConfiguration = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(P2SVpnGatewayResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<String> customDnsServers;
        private String etag;
        private @Nullable String id;
        private @Nullable Boolean isRoutingPreferenceInternet;
        private String location;
        private String name;
        private @Nullable List<P2SConnectionConfigurationResponse> p2SConnectionConfigurations;
        private String provisioningState;
        private @Nullable Map<String,String> tags;
        private String type;
        private @Nullable SubResourceResponse virtualHub;
        private VpnClientConnectionHealthResponse vpnClientConnectionHealth;
        private @Nullable Integer vpnGatewayScaleUnit;
        private @Nullable SubResourceResponse vpnServerConfiguration;

        public Builder() {
    	      // Empty
        }

        public Builder(P2SVpnGatewayResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.customDnsServers = defaults.customDnsServers;
    	      this.etag = defaults.etag;
    	      this.id = defaults.id;
    	      this.isRoutingPreferenceInternet = defaults.isRoutingPreferenceInternet;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.p2SConnectionConfigurations = defaults.p2SConnectionConfigurations;
    	      this.provisioningState = defaults.provisioningState;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
    	      this.virtualHub = defaults.virtualHub;
    	      this.vpnClientConnectionHealth = defaults.vpnClientConnectionHealth;
    	      this.vpnGatewayScaleUnit = defaults.vpnGatewayScaleUnit;
    	      this.vpnServerConfiguration = defaults.vpnServerConfiguration;
        }

        public Builder customDnsServers(@Nullable List<String> customDnsServers) {
            this.customDnsServers = customDnsServers;
            return this;
        }
        public Builder customDnsServers(String... customDnsServers) {
            return customDnsServers(List.of(customDnsServers));
        }
        public Builder etag(String etag) {
            this.etag = Objects.requireNonNull(etag);
            return this;
        }
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        public Builder isRoutingPreferenceInternet(@Nullable Boolean isRoutingPreferenceInternet) {
            this.isRoutingPreferenceInternet = isRoutingPreferenceInternet;
            return this;
        }
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder p2SConnectionConfigurations(@Nullable List<P2SConnectionConfigurationResponse> p2SConnectionConfigurations) {
            this.p2SConnectionConfigurations = p2SConnectionConfigurations;
            return this;
        }
        public Builder p2SConnectionConfigurations(P2SConnectionConfigurationResponse... p2SConnectionConfigurations) {
            return p2SConnectionConfigurations(List.of(p2SConnectionConfigurations));
        }
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder virtualHub(@Nullable SubResourceResponse virtualHub) {
            this.virtualHub = virtualHub;
            return this;
        }
        public Builder vpnClientConnectionHealth(VpnClientConnectionHealthResponse vpnClientConnectionHealth) {
            this.vpnClientConnectionHealth = Objects.requireNonNull(vpnClientConnectionHealth);
            return this;
        }
        public Builder vpnGatewayScaleUnit(@Nullable Integer vpnGatewayScaleUnit) {
            this.vpnGatewayScaleUnit = vpnGatewayScaleUnit;
            return this;
        }
        public Builder vpnServerConfiguration(@Nullable SubResourceResponse vpnServerConfiguration) {
            this.vpnServerConfiguration = vpnServerConfiguration;
            return this;
        }        public P2SVpnGatewayResponse build() {
            return new P2SVpnGatewayResponse(customDnsServers, etag, id, isRoutingPreferenceInternet, location, name, p2SConnectionConfigurations, provisioningState, tags, type, virtualHub, vpnClientConnectionHealth, vpnGatewayScaleUnit, vpnServerConfiguration);
        }
    }
}
