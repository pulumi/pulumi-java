// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.azurenative.network.inputs.P2SConnectionConfigurationResponse;
import com.pulumi.azurenative.network.inputs.SubResourceResponse;
import com.pulumi.azurenative.network.inputs.VpnClientConnectionHealthResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * P2SVpnGateway Resource.
 * 
 */
public final class P2SVpnGatewayResponse extends com.pulumi.resources.InvokeArgs {

    public static final P2SVpnGatewayResponse Empty = new P2SVpnGatewayResponse();

    /**
     * List of all customer specified DNS servers IP addresses.
     * 
     */
    @Import(name="customDnsServers")
    private @Nullable List<String> customDnsServers;

    /**
     * @return List of all customer specified DNS servers IP addresses.
     * 
     */
    public Optional<List<String>> customDnsServers() {
        return Optional.ofNullable(this.customDnsServers);
    }

    /**
     * A unique read-only string that changes whenever the resource is updated.
     * 
     */
    @Import(name="etag", required=true)
    private String etag;

    /**
     * @return A unique read-only string that changes whenever the resource is updated.
     * 
     */
    public String etag() {
        return this.etag;
    }

    /**
     * Resource ID.
     * 
     */
    @Import(name="id")
    private @Nullable String id;

    /**
     * @return Resource ID.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Enable Routing Preference property for the Public IP Interface of the P2SVpnGateway.
     * 
     */
    @Import(name="isRoutingPreferenceInternet")
    private @Nullable Boolean isRoutingPreferenceInternet;

    /**
     * @return Enable Routing Preference property for the Public IP Interface of the P2SVpnGateway.
     * 
     */
    public Optional<Boolean> isRoutingPreferenceInternet() {
        return Optional.ofNullable(this.isRoutingPreferenceInternet);
    }

    /**
     * Resource location.
     * 
     */
    @Import(name="location", required=true)
    private String location;

    /**
     * @return Resource location.
     * 
     */
    public String location() {
        return this.location;
    }

    /**
     * Resource name.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return Resource name.
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * List of all p2s connection configurations of the gateway.
     * 
     */
    @Import(name="p2SConnectionConfigurations")
    private @Nullable List<P2SConnectionConfigurationResponse> p2SConnectionConfigurations;

    /**
     * @return List of all p2s connection configurations of the gateway.
     * 
     */
    public Optional<List<P2SConnectionConfigurationResponse>> p2SConnectionConfigurations() {
        return Optional.ofNullable(this.p2SConnectionConfigurations);
    }

    /**
     * The provisioning state of the P2S VPN gateway resource.
     * 
     */
    @Import(name="provisioningState", required=true)
    private String provisioningState;

    /**
     * @return The provisioning state of the P2S VPN gateway resource.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
    private @Nullable Map<String,String> tags;

    /**
     * @return Resource tags.
     * 
     */
    public Optional<Map<String,String>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Resource type.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    /**
     * @return Resource type.
     * 
     */
    public String type() {
        return this.type;
    }

    /**
     * The VirtualHub to which the gateway belongs.
     * 
     */
    @Import(name="virtualHub")
    private @Nullable SubResourceResponse virtualHub;

    /**
     * @return The VirtualHub to which the gateway belongs.
     * 
     */
    public Optional<SubResourceResponse> virtualHub() {
        return Optional.ofNullable(this.virtualHub);
    }

    /**
     * All P2S VPN clients&#39; connection health status.
     * 
     */
    @Import(name="vpnClientConnectionHealth", required=true)
    private VpnClientConnectionHealthResponse vpnClientConnectionHealth;

    /**
     * @return All P2S VPN clients&#39; connection health status.
     * 
     */
    public VpnClientConnectionHealthResponse vpnClientConnectionHealth() {
        return this.vpnClientConnectionHealth;
    }

    /**
     * The scale unit for this p2s vpn gateway.
     * 
     */
    @Import(name="vpnGatewayScaleUnit")
    private @Nullable Integer vpnGatewayScaleUnit;

    /**
     * @return The scale unit for this p2s vpn gateway.
     * 
     */
    public Optional<Integer> vpnGatewayScaleUnit() {
        return Optional.ofNullable(this.vpnGatewayScaleUnit);
    }

    /**
     * The VpnServerConfiguration to which the p2sVpnGateway is attached to.
     * 
     */
    @Import(name="vpnServerConfiguration")
    private @Nullable SubResourceResponse vpnServerConfiguration;

    /**
     * @return The VpnServerConfiguration to which the p2sVpnGateway is attached to.
     * 
     */
    public Optional<SubResourceResponse> vpnServerConfiguration() {
        return Optional.ofNullable(this.vpnServerConfiguration);
    }

    private P2SVpnGatewayResponse() {}

    private P2SVpnGatewayResponse(P2SVpnGatewayResponse $) {
        this.customDnsServers = $.customDnsServers;
        this.etag = $.etag;
        this.id = $.id;
        this.isRoutingPreferenceInternet = $.isRoutingPreferenceInternet;
        this.location = $.location;
        this.name = $.name;
        this.p2SConnectionConfigurations = $.p2SConnectionConfigurations;
        this.provisioningState = $.provisioningState;
        this.tags = $.tags;
        this.type = $.type;
        this.virtualHub = $.virtualHub;
        this.vpnClientConnectionHealth = $.vpnClientConnectionHealth;
        this.vpnGatewayScaleUnit = $.vpnGatewayScaleUnit;
        this.vpnServerConfiguration = $.vpnServerConfiguration;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(P2SVpnGatewayResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private P2SVpnGatewayResponse $;

        public Builder() {
            $ = new P2SVpnGatewayResponse();
        }

        public Builder(P2SVpnGatewayResponse defaults) {
            $ = new P2SVpnGatewayResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param customDnsServers List of all customer specified DNS servers IP addresses.
         * 
         * @return builder
         * 
         */
        public Builder customDnsServers(@Nullable List<String> customDnsServers) {
            $.customDnsServers = customDnsServers;
            return this;
        }

        /**
         * @param customDnsServers List of all customer specified DNS servers IP addresses.
         * 
         * @return builder
         * 
         */
        public Builder customDnsServers(String... customDnsServers) {
            return customDnsServers(List.of(customDnsServers));
        }

        /**
         * @param etag A unique read-only string that changes whenever the resource is updated.
         * 
         * @return builder
         * 
         */
        public Builder etag(String etag) {
            $.etag = etag;
            return this;
        }

        /**
         * @param id Resource ID.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable String id) {
            $.id = id;
            return this;
        }

        /**
         * @param isRoutingPreferenceInternet Enable Routing Preference property for the Public IP Interface of the P2SVpnGateway.
         * 
         * @return builder
         * 
         */
        public Builder isRoutingPreferenceInternet(@Nullable Boolean isRoutingPreferenceInternet) {
            $.isRoutingPreferenceInternet = isRoutingPreferenceInternet;
            return this;
        }

        /**
         * @param location Resource location.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            $.location = location;
            return this;
        }

        /**
         * @param name Resource name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param p2SConnectionConfigurations List of all p2s connection configurations of the gateway.
         * 
         * @return builder
         * 
         */
        public Builder p2SConnectionConfigurations(@Nullable List<P2SConnectionConfigurationResponse> p2SConnectionConfigurations) {
            $.p2SConnectionConfigurations = p2SConnectionConfigurations;
            return this;
        }

        /**
         * @param p2SConnectionConfigurations List of all p2s connection configurations of the gateway.
         * 
         * @return builder
         * 
         */
        public Builder p2SConnectionConfigurations(P2SConnectionConfigurationResponse... p2SConnectionConfigurations) {
            return p2SConnectionConfigurations(List.of(p2SConnectionConfigurations));
        }

        /**
         * @param provisioningState The provisioning state of the P2S VPN gateway resource.
         * 
         * @return builder
         * 
         */
        public Builder provisioningState(String provisioningState) {
            $.provisioningState = provisioningState;
            return this;
        }

        /**
         * @param tags Resource tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Map<String,String> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param type Resource type.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            $.type = type;
            return this;
        }

        /**
         * @param virtualHub The VirtualHub to which the gateway belongs.
         * 
         * @return builder
         * 
         */
        public Builder virtualHub(@Nullable SubResourceResponse virtualHub) {
            $.virtualHub = virtualHub;
            return this;
        }

        /**
         * @param vpnClientConnectionHealth All P2S VPN clients&#39; connection health status.
         * 
         * @return builder
         * 
         */
        public Builder vpnClientConnectionHealth(VpnClientConnectionHealthResponse vpnClientConnectionHealth) {
            $.vpnClientConnectionHealth = vpnClientConnectionHealth;
            return this;
        }

        /**
         * @param vpnGatewayScaleUnit The scale unit for this p2s vpn gateway.
         * 
         * @return builder
         * 
         */
        public Builder vpnGatewayScaleUnit(@Nullable Integer vpnGatewayScaleUnit) {
            $.vpnGatewayScaleUnit = vpnGatewayScaleUnit;
            return this;
        }

        /**
         * @param vpnServerConfiguration The VpnServerConfiguration to which the p2sVpnGateway is attached to.
         * 
         * @return builder
         * 
         */
        public Builder vpnServerConfiguration(@Nullable SubResourceResponse vpnServerConfiguration) {
            $.vpnServerConfiguration = vpnServerConfiguration;
            return this;
        }

        public P2SVpnGatewayResponse build() {
            $.etag = Objects.requireNonNull($.etag, "expected parameter 'etag' to be non-null");
            $.location = Objects.requireNonNull($.location, "expected parameter 'location' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.provisioningState = Objects.requireNonNull($.provisioningState, "expected parameter 'provisioningState' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            $.vpnClientConnectionHealth = Objects.requireNonNull($.vpnClientConnectionHealth, "expected parameter 'vpnClientConnectionHealth' to be non-null");
            return $;
        }
    }

}
