// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Define a match condition.
 * 
 */
public final class FrontDoorMatchConditionResponse extends com.pulumi.resources.InvokeArgs {

    public static final FrontDoorMatchConditionResponse Empty = new FrontDoorMatchConditionResponse();

    /**
     * List of possible match values.
     * 
     */
    @Import(name="matchValue", required=true)
    private List<String> matchValue;

    public List<String> matchValue() {
        return this.matchValue;
    }

    /**
     * Request variable to compare with.
     * 
     */
    @Import(name="matchVariable", required=true)
    private String matchVariable;

    public String matchVariable() {
        return this.matchVariable;
    }

    /**
     * Describes if the result of this condition should be negated.
     * 
     */
    @Import(name="negateCondition")
    private @Nullable Boolean negateCondition;

    public Optional<Boolean> negateCondition() {
        return Optional.ofNullable(this.negateCondition);
    }

    /**
     * Comparison type to use for matching with the variable value.
     * 
     */
    @Import(name="operator", required=true)
    private String operator;

    public String operator() {
        return this.operator;
    }

    /**
     * Match against a specific key from the QueryString, PostArgs, RequestHeader or Cookies variables. Default is null.
     * 
     */
    @Import(name="selector")
    private @Nullable String selector;

    public Optional<String> selector() {
        return Optional.ofNullable(this.selector);
    }

    /**
     * List of transforms.
     * 
     */
    @Import(name="transforms")
    private @Nullable List<String> transforms;

    public Optional<List<String>> transforms() {
        return Optional.ofNullable(this.transforms);
    }

    private FrontDoorMatchConditionResponse() {}

    private FrontDoorMatchConditionResponse(FrontDoorMatchConditionResponse $) {
        this.matchValue = $.matchValue;
        this.matchVariable = $.matchVariable;
        this.negateCondition = $.negateCondition;
        this.operator = $.operator;
        this.selector = $.selector;
        this.transforms = $.transforms;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FrontDoorMatchConditionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FrontDoorMatchConditionResponse $;

        public Builder() {
            $ = new FrontDoorMatchConditionResponse();
        }

        public Builder(FrontDoorMatchConditionResponse defaults) {
            $ = new FrontDoorMatchConditionResponse(Objects.requireNonNull(defaults));
        }

        public Builder matchValue(List<String> matchValue) {
            $.matchValue = matchValue;
            return this;
        }

        public Builder matchValue(String... matchValue) {
            return matchValue(List.of(matchValue));
        }

        public Builder matchVariable(String matchVariable) {
            $.matchVariable = matchVariable;
            return this;
        }

        public Builder negateCondition(@Nullable Boolean negateCondition) {
            $.negateCondition = negateCondition;
            return this;
        }

        public Builder operator(String operator) {
            $.operator = operator;
            return this;
        }

        public Builder selector(@Nullable String selector) {
            $.selector = selector;
            return this;
        }

        public Builder transforms(@Nullable List<String> transforms) {
            $.transforms = transforms;
            return this;
        }

        public Builder transforms(String... transforms) {
            return transforms(List.of(transforms));
        }

        public FrontDoorMatchConditionResponse build() {
            $.matchValue = Objects.requireNonNull($.matchValue, "expected parameter 'matchValue' to be non-null");
            $.matchVariable = Objects.requireNonNull($.matchVariable, "expected parameter 'matchVariable' to be non-null");
            $.operator = Objects.requireNonNull($.operator, "expected parameter 'operator' to be non-null");
            return $;
        }
    }

}
