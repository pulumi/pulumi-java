// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.insights.inputs;

import com.pulumi.azurenative.insights.inputs.DataSourceConfigurationResponse;
import com.pulumi.azurenative.insights.inputs.SinkConfigurationResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Data source object contains configuration to collect telemetry and one or more sinks to send that telemetry data to
 * 
 */
public final class DataSourceResponse extends com.pulumi.resources.InvokeArgs {

    public static final DataSourceResponse Empty = new DataSourceResponse();

    @Import(name="configuration", required=true)
    private DataSourceConfigurationResponse configuration;

    public DataSourceConfigurationResponse configuration() {
        return this.configuration;
    }

    /**
     * Datasource kind
     * 
     */
    @Import(name="kind", required=true)
    private String kind;

    /**
     * @return Datasource kind
     * 
     */
    public String kind() {
        return this.kind;
    }

    @Import(name="sinks", required=true)
    private List<SinkConfigurationResponse> sinks;

    public List<SinkConfigurationResponse> sinks() {
        return this.sinks;
    }

    private DataSourceResponse() {}

    private DataSourceResponse(DataSourceResponse $) {
        this.configuration = $.configuration;
        this.kind = $.kind;
        this.sinks = $.sinks;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataSourceResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataSourceResponse $;

        public Builder() {
            $ = new DataSourceResponse();
        }

        public Builder(DataSourceResponse defaults) {
            $ = new DataSourceResponse(Objects.requireNonNull(defaults));
        }

        public Builder configuration(DataSourceConfigurationResponse configuration) {
            $.configuration = configuration;
            return this;
        }

        /**
         * @param kind Datasource kind
         * 
         * @return builder
         * 
         */
        public Builder kind(String kind) {
            $.kind = kind;
            return this;
        }

        public Builder sinks(List<SinkConfigurationResponse> sinks) {
            $.sinks = sinks;
            return this;
        }

        public Builder sinks(SinkConfigurationResponse... sinks) {
            return sinks(List.of(sinks));
        }

        public DataSourceResponse build() {
            $.configuration = Objects.requireNonNull($.configuration, "expected parameter 'configuration' to be non-null");
            $.kind = Objects.requireNonNull($.kind, "expected parameter 'kind' to be non-null");
            $.sinks = Objects.requireNonNull($.sinks, "expected parameter 'sinks' to be non-null");
            return $;
        }
    }

}
