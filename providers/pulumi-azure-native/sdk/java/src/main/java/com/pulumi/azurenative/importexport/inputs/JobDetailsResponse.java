// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.importexport.inputs;

import com.pulumi.azurenative.importexport.inputs.DeliveryPackageInformationResponse;
import com.pulumi.azurenative.importexport.inputs.DriveStatusResponse;
import com.pulumi.azurenative.importexport.inputs.EncryptionKeyDetailsResponse;
import com.pulumi.azurenative.importexport.inputs.ExportResponse;
import com.pulumi.azurenative.importexport.inputs.PackageInformationResponse;
import com.pulumi.azurenative.importexport.inputs.ReturnAddressResponse;
import com.pulumi.azurenative.importexport.inputs.ReturnShippingResponse;
import com.pulumi.azurenative.importexport.inputs.ShippingInformationResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Specifies the job properties
 * 
 */
public final class JobDetailsResponse extends com.pulumi.resources.InvokeArgs {

    public static final JobDetailsResponse Empty = new JobDetailsResponse();

    /**
     * Default value is false. Indicates whether the manifest files on the drives should be copied to block blobs.
     * 
     */
    @Import(name="backupDriveManifest")
    private @Nullable Boolean backupDriveManifest;

    public Optional<Boolean> backupDriveManifest() {
        return Optional.ofNullable(this.backupDriveManifest);
    }

    /**
     * Indicates whether a request has been submitted to cancel the job.
     * 
     */
    @Import(name="cancelRequested")
    private @Nullable Boolean cancelRequested;

    public Optional<Boolean> cancelRequested() {
        return Optional.ofNullable(this.cancelRequested);
    }

    /**
     * Contains information about the package being shipped by the customer to the Microsoft data center.
     * 
     */
    @Import(name="deliveryPackage")
    private @Nullable DeliveryPackageInformationResponse deliveryPackage;

    public Optional<DeliveryPackageInformationResponse> deliveryPackage() {
        return Optional.ofNullable(this.deliveryPackage);
    }

    /**
     * The virtual blob directory to which the copy logs and backups of drive manifest files (if enabled) will be stored.
     * 
     */
    @Import(name="diagnosticsPath")
    private @Nullable String diagnosticsPath;

    public Optional<String> diagnosticsPath() {
        return Optional.ofNullable(this.diagnosticsPath);
    }

    /**
     * List of up to ten drives that comprise the job. The drive list is a required element for an import job; it is not specified for export jobs.
     * 
     */
    @Import(name="driveList")
    private @Nullable List<DriveStatusResponse> driveList;

    public Optional<List<DriveStatusResponse>> driveList() {
        return Optional.ofNullable(this.driveList);
    }

    /**
     * Contains information about the encryption key.
     * 
     */
    @Import(name="encryptionKey")
    private @Nullable EncryptionKeyDetailsResponse encryptionKey;

    public Optional<EncryptionKeyDetailsResponse> encryptionKey() {
        return Optional.ofNullable(this.encryptionKey);
    }

    /**
     * A property containing information about the blobs to be exported for an export job. This property is included for export jobs only.
     * 
     */
    @Import(name="export")
    private @Nullable ExportResponse export;

    public Optional<ExportResponse> export() {
        return Optional.ofNullable(this.export);
    }

    /**
     * A blob path that points to a block blob containing a list of blob names that were not exported due to insufficient drive space. If all blobs were exported successfully, then this element is not included in the response.
     * 
     */
    @Import(name="incompleteBlobListUri")
    private @Nullable String incompleteBlobListUri;

    public Optional<String> incompleteBlobListUri() {
        return Optional.ofNullable(this.incompleteBlobListUri);
    }

    /**
     * The type of job
     * 
     */
    @Import(name="jobType")
    private @Nullable String jobType;

    public Optional<String> jobType() {
        return Optional.ofNullable(this.jobType);
    }

    /**
     * Default value is Error. Indicates whether error logging or verbose logging will be enabled.
     * 
     */
    @Import(name="logLevel")
    private @Nullable String logLevel;

    public Optional<String> logLevel() {
        return Optional.ofNullable(this.logLevel);
    }

    /**
     * Overall percentage completed for the job.
     * 
     */
    @Import(name="percentComplete")
    private @Nullable Integer percentComplete;

    public Optional<Integer> percentComplete() {
        return Optional.ofNullable(this.percentComplete);
    }

    /**
     * Specifies the provisioning state of the job.
     * 
     */
    @Import(name="provisioningState")
    private @Nullable String provisioningState;

    public Optional<String> provisioningState() {
        return Optional.ofNullable(this.provisioningState);
    }

    /**
     * Specifies the return address information for the job.
     * 
     */
    @Import(name="returnAddress")
    private @Nullable ReturnAddressResponse returnAddress;

    public Optional<ReturnAddressResponse> returnAddress() {
        return Optional.ofNullable(this.returnAddress);
    }

    /**
     * Contains information about the package being shipped from the Microsoft data center to the customer to return the drives. The format is the same as the deliveryPackage property above. This property is not included if the drives have not yet been returned.
     * 
     */
    @Import(name="returnPackage")
    private @Nullable PackageInformationResponse returnPackage;

    public Optional<PackageInformationResponse> returnPackage() {
        return Optional.ofNullable(this.returnPackage);
    }

    /**
     * Specifies the return carrier and customer&#39;s account with the carrier.
     * 
     */
    @Import(name="returnShipping")
    private @Nullable ReturnShippingResponse returnShipping;

    public Optional<ReturnShippingResponse> returnShipping() {
        return Optional.ofNullable(this.returnShipping);
    }

    /**
     * Contains information about the Microsoft datacenter to which the drives should be shipped.
     * 
     */
    @Import(name="shippingInformation")
    private @Nullable ShippingInformationResponse shippingInformation;

    public Optional<ShippingInformationResponse> shippingInformation() {
        return Optional.ofNullable(this.shippingInformation);
    }

    /**
     * Current state of the job.
     * 
     */
    @Import(name="state")
    private @Nullable String state;

    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The resource identifier of the storage account where data will be imported to or exported from.
     * 
     */
    @Import(name="storageAccountId")
    private @Nullable String storageAccountId;

    public Optional<String> storageAccountId() {
        return Optional.ofNullable(this.storageAccountId);
    }

    private JobDetailsResponse() {}

    private JobDetailsResponse(JobDetailsResponse $) {
        this.backupDriveManifest = $.backupDriveManifest;
        this.cancelRequested = $.cancelRequested;
        this.deliveryPackage = $.deliveryPackage;
        this.diagnosticsPath = $.diagnosticsPath;
        this.driveList = $.driveList;
        this.encryptionKey = $.encryptionKey;
        this.export = $.export;
        this.incompleteBlobListUri = $.incompleteBlobListUri;
        this.jobType = $.jobType;
        this.logLevel = $.logLevel;
        this.percentComplete = $.percentComplete;
        this.provisioningState = $.provisioningState;
        this.returnAddress = $.returnAddress;
        this.returnPackage = $.returnPackage;
        this.returnShipping = $.returnShipping;
        this.shippingInformation = $.shippingInformation;
        this.state = $.state;
        this.storageAccountId = $.storageAccountId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(JobDetailsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private JobDetailsResponse $;

        public Builder() {
            $ = new JobDetailsResponse();
        }

        public Builder(JobDetailsResponse defaults) {
            $ = new JobDetailsResponse(Objects.requireNonNull(defaults));
        }

        public Builder backupDriveManifest(@Nullable Boolean backupDriveManifest) {
            $.backupDriveManifest = backupDriveManifest;
            return this;
        }

        public Builder cancelRequested(@Nullable Boolean cancelRequested) {
            $.cancelRequested = cancelRequested;
            return this;
        }

        public Builder deliveryPackage(@Nullable DeliveryPackageInformationResponse deliveryPackage) {
            $.deliveryPackage = deliveryPackage;
            return this;
        }

        public Builder diagnosticsPath(@Nullable String diagnosticsPath) {
            $.diagnosticsPath = diagnosticsPath;
            return this;
        }

        public Builder driveList(@Nullable List<DriveStatusResponse> driveList) {
            $.driveList = driveList;
            return this;
        }

        public Builder driveList(DriveStatusResponse... driveList) {
            return driveList(List.of(driveList));
        }

        public Builder encryptionKey(@Nullable EncryptionKeyDetailsResponse encryptionKey) {
            $.encryptionKey = encryptionKey;
            return this;
        }

        public Builder export(@Nullable ExportResponse export) {
            $.export = export;
            return this;
        }

        public Builder incompleteBlobListUri(@Nullable String incompleteBlobListUri) {
            $.incompleteBlobListUri = incompleteBlobListUri;
            return this;
        }

        public Builder jobType(@Nullable String jobType) {
            $.jobType = jobType;
            return this;
        }

        public Builder logLevel(@Nullable String logLevel) {
            $.logLevel = logLevel;
            return this;
        }

        public Builder percentComplete(@Nullable Integer percentComplete) {
            $.percentComplete = percentComplete;
            return this;
        }

        public Builder provisioningState(@Nullable String provisioningState) {
            $.provisioningState = provisioningState;
            return this;
        }

        public Builder returnAddress(@Nullable ReturnAddressResponse returnAddress) {
            $.returnAddress = returnAddress;
            return this;
        }

        public Builder returnPackage(@Nullable PackageInformationResponse returnPackage) {
            $.returnPackage = returnPackage;
            return this;
        }

        public Builder returnShipping(@Nullable ReturnShippingResponse returnShipping) {
            $.returnShipping = returnShipping;
            return this;
        }

        public Builder shippingInformation(@Nullable ShippingInformationResponse shippingInformation) {
            $.shippingInformation = shippingInformation;
            return this;
        }

        public Builder state(@Nullable String state) {
            $.state = state;
            return this;
        }

        public Builder storageAccountId(@Nullable String storageAccountId) {
            $.storageAccountId = storageAccountId;
            return this;
        }

        public JobDetailsResponse build() {
            $.backupDriveManifest = Codegen.booleanProp("backupDriveManifest").arg($.backupDriveManifest).def(false).getNullable();
            $.cancelRequested = Codegen.booleanProp("cancelRequested").arg($.cancelRequested).def(false).getNullable();
            $.state = Codegen.stringProp("state").arg($.state).def("Creating").getNullable();
            return $;
        }
    }

}
