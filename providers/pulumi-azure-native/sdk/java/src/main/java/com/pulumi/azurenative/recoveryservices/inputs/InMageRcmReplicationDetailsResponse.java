// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.recoveryservices.inputs;

import com.pulumi.azurenative.recoveryservices.inputs.InMageRcmAgentUpgradeBlockingErrorDetailsResponse;
import com.pulumi.azurenative.recoveryservices.inputs.InMageRcmLastAgentUpgradeErrorDetailsResponse;
import com.pulumi.azurenative.recoveryservices.inputs.InMageRcmMobilityAgentDetailsResponse;
import com.pulumi.azurenative.recoveryservices.inputs.InMageRcmNicDetailsResponse;
import com.pulumi.azurenative.recoveryservices.inputs.InMageRcmProtectedDiskDetailsResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * InMageRcm provider specific details.
 * 
 */
public final class InMageRcmReplicationDetailsResponse extends com.pulumi.resources.InvokeArgs {

    public static final InMageRcmReplicationDetailsResponse Empty = new InMageRcmReplicationDetailsResponse();

    /**
     * The agent upgrade blocking error information.
     * 
     */
    @Import(name="agentUpgradeBlockingErrorDetails", required=true)
    private List<InMageRcmAgentUpgradeBlockingErrorDetailsResponse> agentUpgradeBlockingErrorDetails;

    /**
     * @return The agent upgrade blocking error information.
     * 
     */
    public List<InMageRcmAgentUpgradeBlockingErrorDetailsResponse> agentUpgradeBlockingErrorDetails() {
        return this.agentUpgradeBlockingErrorDetails;
    }

    /**
     * The agent auto upgrade state.
     * 
     */
    @Import(name="agentUpgradeState", required=true)
    private String agentUpgradeState;

    /**
     * @return The agent auto upgrade state.
     * 
     */
    public String agentUpgradeState() {
        return this.agentUpgradeState;
    }

    /**
     * The allocated memory in MB.
     * 
     */
    @Import(name="allocatedMemoryInMB", required=true)
    private Double allocatedMemoryInMB;

    /**
     * @return The allocated memory in MB.
     * 
     */
    public Double allocatedMemoryInMB() {
        return this.allocatedMemoryInMB;
    }

    /**
     * The type of the discovered VM.
     * 
     */
    @Import(name="discoveryType", required=true)
    private String discoveryType;

    /**
     * @return The type of the discovered VM.
     * 
     */
    public String discoveryType() {
        return this.discoveryType;
    }

    /**
     * The ARM Id of the discovered VM.
     * 
     */
    @Import(name="fabricDiscoveryMachineId", required=true)
    private String fabricDiscoveryMachineId;

    /**
     * @return The ARM Id of the discovered VM.
     * 
     */
    public String fabricDiscoveryMachineId() {
        return this.fabricDiscoveryMachineId;
    }

    /**
     * The recovery point Id to which the VM was failed over.
     * 
     */
    @Import(name="failoverRecoveryPointId", required=true)
    private String failoverRecoveryPointId;

    /**
     * @return The recovery point Id to which the VM was failed over.
     * 
     */
    public String failoverRecoveryPointId() {
        return this.failoverRecoveryPointId;
    }

    /**
     * The firmware type.
     * 
     */
    @Import(name="firmwareType", required=true)
    private String firmwareType;

    /**
     * @return The firmware type.
     * 
     */
    public String firmwareType() {
        return this.firmwareType;
    }

    /**
     * The initial replication processed bytes. This includes sum of total bytes transferred and matched bytes on all selected disks in source VM.
     * 
     */
    @Import(name="initialReplicationProcessedBytes", required=true)
    private Double initialReplicationProcessedBytes;

    /**
     * @return The initial replication processed bytes. This includes sum of total bytes transferred and matched bytes on all selected disks in source VM.
     * 
     */
    public Double initialReplicationProcessedBytes() {
        return this.initialReplicationProcessedBytes;
    }

    /**
     * The initial replication progress percentage. This is calculated based on total bytes processed for all disks in the source VM.
     * 
     */
    @Import(name="initialReplicationProgressPercentage", required=true)
    private Integer initialReplicationProgressPercentage;

    /**
     * @return The initial replication progress percentage. This is calculated based on total bytes processed for all disks in the source VM.
     * 
     */
    public Integer initialReplicationProgressPercentage() {
        return this.initialReplicationProgressPercentage;
    }

    /**
     * The initial replication transferred bytes from source VM to azure for all selected disks on source VM.
     * 
     */
    @Import(name="initialReplicationTransferredBytes", required=true)
    private Double initialReplicationTransferredBytes;

    /**
     * @return The initial replication transferred bytes from source VM to azure for all selected disks on source VM.
     * 
     */
    public Double initialReplicationTransferredBytes() {
        return this.initialReplicationTransferredBytes;
    }

    /**
     * Gets the Instance type.
     * Expected value is &#39;InMageRcm&#39;.
     * 
     */
    @Import(name="instanceType", required=true)
    private String instanceType;

    /**
     * @return Gets the Instance type.
     * Expected value is &#39;InMageRcm&#39;.
     * 
     */
    public String instanceType() {
        return this.instanceType;
    }

    /**
     * The virtual machine internal identifier.
     * 
     */
    @Import(name="internalIdentifier", required=true)
    private String internalIdentifier;

    /**
     * @return The virtual machine internal identifier.
     * 
     */
    public String internalIdentifier() {
        return this.internalIdentifier;
    }

    /**
     * A value indicating whether last agent upgrade was successful or not.
     * 
     */
    @Import(name="isLastUpgradeSuccessful", required=true)
    private String isLastUpgradeSuccessful;

    /**
     * @return A value indicating whether last agent upgrade was successful or not.
     * 
     */
    public String isLastUpgradeSuccessful() {
        return this.isLastUpgradeSuccessful;
    }

    /**
     * The last agent upgrade error information.
     * 
     */
    @Import(name="lastAgentUpgradeErrorDetails", required=true)
    private List<InMageRcmLastAgentUpgradeErrorDetailsResponse> lastAgentUpgradeErrorDetails;

    /**
     * @return The last agent upgrade error information.
     * 
     */
    public List<InMageRcmLastAgentUpgradeErrorDetailsResponse> lastAgentUpgradeErrorDetails() {
        return this.lastAgentUpgradeErrorDetails;
    }

    /**
     * The last agent upgrade failed or cancelled job Id.
     * 
     */
    @Import(name="lastAgentUpgradeFailedJobId", required=true)
    private String lastAgentUpgradeFailedJobId;

    /**
     * @return The last agent upgrade failed or cancelled job Id.
     * 
     */
    public String lastAgentUpgradeFailedJobId() {
        return this.lastAgentUpgradeFailedJobId;
    }

    /**
     * The last agent upgrade type.
     * 
     */
    @Import(name="lastAgentUpgradeType", required=true)
    private String lastAgentUpgradeType;

    /**
     * @return The last agent upgrade type.
     * 
     */
    public String lastAgentUpgradeType() {
        return this.lastAgentUpgradeType;
    }

    /**
     * The last recovery point Id.
     * 
     */
    @Import(name="lastRecoveryPointId", required=true)
    private String lastRecoveryPointId;

    /**
     * @return The last recovery point Id.
     * 
     */
    public String lastRecoveryPointId() {
        return this.lastRecoveryPointId;
    }

    /**
     * The last recovery point received time.
     * 
     */
    @Import(name="lastRecoveryPointReceived", required=true)
    private String lastRecoveryPointReceived;

    /**
     * @return The last recovery point received time.
     * 
     */
    public String lastRecoveryPointReceived() {
        return this.lastRecoveryPointReceived;
    }

    /**
     * The last recovery point objective calculated time.
     * 
     */
    @Import(name="lastRpoCalculatedTime", required=true)
    private String lastRpoCalculatedTime;

    /**
     * @return The last recovery point objective calculated time.
     * 
     */
    public String lastRpoCalculatedTime() {
        return this.lastRpoCalculatedTime;
    }

    /**
     * The last recovery point objective value.
     * 
     */
    @Import(name="lastRpoInSeconds", required=true)
    private Double lastRpoInSeconds;

    /**
     * @return The last recovery point objective value.
     * 
     */
    public Double lastRpoInSeconds() {
        return this.lastRpoInSeconds;
    }

    /**
     * License Type of the VM to be used.
     * 
     */
    @Import(name="licenseType", required=true)
    private String licenseType;

    /**
     * @return License Type of the VM to be used.
     * 
     */
    public String licenseType() {
        return this.licenseType;
    }

    /**
     * The mobility agent information.
     * 
     */
    @Import(name="mobilityAgentDetails", required=true)
    private InMageRcmMobilityAgentDetailsResponse mobilityAgentDetails;

    /**
     * @return The mobility agent information.
     * 
     */
    public InMageRcmMobilityAgentDetailsResponse mobilityAgentDetails() {
        return this.mobilityAgentDetails;
    }

    /**
     * The multi VM group name.
     * 
     */
    @Import(name="multiVmGroupName", required=true)
    private String multiVmGroupName;

    /**
     * @return The multi VM group name.
     * 
     */
    public String multiVmGroupName() {
        return this.multiVmGroupName;
    }

    /**
     * The type of the OS on the VM.
     * 
     */
    @Import(name="osType", required=true)
    private String osType;

    /**
     * @return The type of the OS on the VM.
     * 
     */
    public String osType() {
        return this.osType;
    }

    /**
     * The process server Id.
     * 
     */
    @Import(name="processServerId", required=true)
    private String processServerId;

    /**
     * @return The process server Id.
     * 
     */
    public String processServerId() {
        return this.processServerId;
    }

    /**
     * The process server name.
     * 
     */
    @Import(name="processServerName", required=true)
    private String processServerName;

    /**
     * @return The process server name.
     * 
     */
    public String processServerName() {
        return this.processServerName;
    }

    /**
     * The processor core count.
     * 
     */
    @Import(name="processorCoreCount", required=true)
    private Integer processorCoreCount;

    /**
     * @return The processor core count.
     * 
     */
    public Integer processorCoreCount() {
        return this.processorCoreCount;
    }

    /**
     * The list of protected disks.
     * 
     */
    @Import(name="protectedDisks", required=true)
    private List<InMageRcmProtectedDiskDetailsResponse> protectedDisks;

    /**
     * @return The list of protected disks.
     * 
     */
    public List<InMageRcmProtectedDiskDetailsResponse> protectedDisks() {
        return this.protectedDisks;
    }

    /**
     * The resync processed bytes. This includes sum of total bytes transferred and matched bytes on all selected disks in source VM.
     * 
     */
    @Import(name="resyncProcessedBytes", required=true)
    private Double resyncProcessedBytes;

    /**
     * @return The resync processed bytes. This includes sum of total bytes transferred and matched bytes on all selected disks in source VM.
     * 
     */
    public Double resyncProcessedBytes() {
        return this.resyncProcessedBytes;
    }

    /**
     * The resync progress percentage. This is calculated based on total bytes processed for all disks in the source VM.
     * 
     */
    @Import(name="resyncProgressPercentage", required=true)
    private Integer resyncProgressPercentage;

    /**
     * @return The resync progress percentage. This is calculated based on total bytes processed for all disks in the source VM.
     * 
     */
    public Integer resyncProgressPercentage() {
        return this.resyncProgressPercentage;
    }

    /**
     * A value indicating whether resync is required.
     * 
     */
    @Import(name="resyncRequired", required=true)
    private String resyncRequired;

    /**
     * @return A value indicating whether resync is required.
     * 
     */
    public String resyncRequired() {
        return this.resyncRequired;
    }

    /**
     * The resync state.
     * 
     */
    @Import(name="resyncState", required=true)
    private String resyncState;

    /**
     * @return The resync state.
     * 
     */
    public String resyncState() {
        return this.resyncState;
    }

    /**
     * The resync transferred bytes from source VM to azure for all selected disks on source VM.
     * 
     */
    @Import(name="resyncTransferredBytes", required=true)
    private Double resyncTransferredBytes;

    /**
     * @return The resync transferred bytes from source VM to azure for all selected disks on source VM.
     * 
     */
    public Double resyncTransferredBytes() {
        return this.resyncTransferredBytes;
    }

    /**
     * The run-as account Id.
     * 
     */
    @Import(name="runAsAccountId", required=true)
    private String runAsAccountId;

    /**
     * @return The run-as account Id.
     * 
     */
    public String runAsAccountId() {
        return this.runAsAccountId;
    }

    /**
     * The target availability set Id.
     * 
     */
    @Import(name="targetAvailabilitySetId", required=true)
    private String targetAvailabilitySetId;

    /**
     * @return The target availability set Id.
     * 
     */
    public String targetAvailabilitySetId() {
        return this.targetAvailabilitySetId;
    }

    /**
     * The target availability zone.
     * 
     */
    @Import(name="targetAvailabilityZone", required=true)
    private String targetAvailabilityZone;

    /**
     * @return The target availability zone.
     * 
     */
    public String targetAvailabilityZone() {
        return this.targetAvailabilityZone;
    }

    /**
     * The target boot diagnostics storage account ARM Id.
     * 
     */
    @Import(name="targetBootDiagnosticsStorageAccountId", required=true)
    private String targetBootDiagnosticsStorageAccountId;

    /**
     * @return The target boot diagnostics storage account ARM Id.
     * 
     */
    public String targetBootDiagnosticsStorageAccountId() {
        return this.targetBootDiagnosticsStorageAccountId;
    }

    /**
     * The target generation.
     * 
     */
    @Import(name="targetGeneration", required=true)
    private String targetGeneration;

    /**
     * @return The target generation.
     * 
     */
    public String targetGeneration() {
        return this.targetGeneration;
    }

    /**
     * The target network Id.
     * 
     */
    @Import(name="targetNetworkId", required=true)
    private String targetNetworkId;

    /**
     * @return The target network Id.
     * 
     */
    public String targetNetworkId() {
        return this.targetNetworkId;
    }

    /**
     * The target proximity placement group Id.
     * 
     */
    @Import(name="targetProximityPlacementGroupId", required=true)
    private String targetProximityPlacementGroupId;

    /**
     * @return The target proximity placement group Id.
     * 
     */
    public String targetProximityPlacementGroupId() {
        return this.targetProximityPlacementGroupId;
    }

    /**
     * The target resource group Id.
     * 
     */
    @Import(name="targetResourceGroupId", required=true)
    private String targetResourceGroupId;

    /**
     * @return The target resource group Id.
     * 
     */
    public String targetResourceGroupId() {
        return this.targetResourceGroupId;
    }

    /**
     * Target VM name.
     * 
     */
    @Import(name="targetVmName", required=true)
    private String targetVmName;

    /**
     * @return Target VM name.
     * 
     */
    public String targetVmName() {
        return this.targetVmName;
    }

    /**
     * The target VM size.
     * 
     */
    @Import(name="targetVmSize", required=true)
    private String targetVmSize;

    /**
     * @return The target VM size.
     * 
     */
    public String targetVmSize() {
        return this.targetVmSize;
    }

    /**
     * The test network Id.
     * 
     */
    @Import(name="testNetworkId", required=true)
    private String testNetworkId;

    /**
     * @return The test network Id.
     * 
     */
    public String testNetworkId() {
        return this.testNetworkId;
    }

    /**
     * The network details.
     * 
     */
    @Import(name="vmNics", required=true)
    private List<InMageRcmNicDetailsResponse> vmNics;

    /**
     * @return The network details.
     * 
     */
    public List<InMageRcmNicDetailsResponse> vmNics() {
        return this.vmNics;
    }

    private InMageRcmReplicationDetailsResponse() {}

    private InMageRcmReplicationDetailsResponse(InMageRcmReplicationDetailsResponse $) {
        this.agentUpgradeBlockingErrorDetails = $.agentUpgradeBlockingErrorDetails;
        this.agentUpgradeState = $.agentUpgradeState;
        this.allocatedMemoryInMB = $.allocatedMemoryInMB;
        this.discoveryType = $.discoveryType;
        this.fabricDiscoveryMachineId = $.fabricDiscoveryMachineId;
        this.failoverRecoveryPointId = $.failoverRecoveryPointId;
        this.firmwareType = $.firmwareType;
        this.initialReplicationProcessedBytes = $.initialReplicationProcessedBytes;
        this.initialReplicationProgressPercentage = $.initialReplicationProgressPercentage;
        this.initialReplicationTransferredBytes = $.initialReplicationTransferredBytes;
        this.instanceType = $.instanceType;
        this.internalIdentifier = $.internalIdentifier;
        this.isLastUpgradeSuccessful = $.isLastUpgradeSuccessful;
        this.lastAgentUpgradeErrorDetails = $.lastAgentUpgradeErrorDetails;
        this.lastAgentUpgradeFailedJobId = $.lastAgentUpgradeFailedJobId;
        this.lastAgentUpgradeType = $.lastAgentUpgradeType;
        this.lastRecoveryPointId = $.lastRecoveryPointId;
        this.lastRecoveryPointReceived = $.lastRecoveryPointReceived;
        this.lastRpoCalculatedTime = $.lastRpoCalculatedTime;
        this.lastRpoInSeconds = $.lastRpoInSeconds;
        this.licenseType = $.licenseType;
        this.mobilityAgentDetails = $.mobilityAgentDetails;
        this.multiVmGroupName = $.multiVmGroupName;
        this.osType = $.osType;
        this.processServerId = $.processServerId;
        this.processServerName = $.processServerName;
        this.processorCoreCount = $.processorCoreCount;
        this.protectedDisks = $.protectedDisks;
        this.resyncProcessedBytes = $.resyncProcessedBytes;
        this.resyncProgressPercentage = $.resyncProgressPercentage;
        this.resyncRequired = $.resyncRequired;
        this.resyncState = $.resyncState;
        this.resyncTransferredBytes = $.resyncTransferredBytes;
        this.runAsAccountId = $.runAsAccountId;
        this.targetAvailabilitySetId = $.targetAvailabilitySetId;
        this.targetAvailabilityZone = $.targetAvailabilityZone;
        this.targetBootDiagnosticsStorageAccountId = $.targetBootDiagnosticsStorageAccountId;
        this.targetGeneration = $.targetGeneration;
        this.targetNetworkId = $.targetNetworkId;
        this.targetProximityPlacementGroupId = $.targetProximityPlacementGroupId;
        this.targetResourceGroupId = $.targetResourceGroupId;
        this.targetVmName = $.targetVmName;
        this.targetVmSize = $.targetVmSize;
        this.testNetworkId = $.testNetworkId;
        this.vmNics = $.vmNics;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InMageRcmReplicationDetailsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InMageRcmReplicationDetailsResponse $;

        public Builder() {
            $ = new InMageRcmReplicationDetailsResponse();
        }

        public Builder(InMageRcmReplicationDetailsResponse defaults) {
            $ = new InMageRcmReplicationDetailsResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param agentUpgradeBlockingErrorDetails The agent upgrade blocking error information.
         * 
         * @return builder
         * 
         */
        public Builder agentUpgradeBlockingErrorDetails(List<InMageRcmAgentUpgradeBlockingErrorDetailsResponse> agentUpgradeBlockingErrorDetails) {
            $.agentUpgradeBlockingErrorDetails = agentUpgradeBlockingErrorDetails;
            return this;
        }

        /**
         * @param agentUpgradeBlockingErrorDetails The agent upgrade blocking error information.
         * 
         * @return builder
         * 
         */
        public Builder agentUpgradeBlockingErrorDetails(InMageRcmAgentUpgradeBlockingErrorDetailsResponse... agentUpgradeBlockingErrorDetails) {
            return agentUpgradeBlockingErrorDetails(List.of(agentUpgradeBlockingErrorDetails));
        }

        /**
         * @param agentUpgradeState The agent auto upgrade state.
         * 
         * @return builder
         * 
         */
        public Builder agentUpgradeState(String agentUpgradeState) {
            $.agentUpgradeState = agentUpgradeState;
            return this;
        }

        /**
         * @param allocatedMemoryInMB The allocated memory in MB.
         * 
         * @return builder
         * 
         */
        public Builder allocatedMemoryInMB(Double allocatedMemoryInMB) {
            $.allocatedMemoryInMB = allocatedMemoryInMB;
            return this;
        }

        /**
         * @param discoveryType The type of the discovered VM.
         * 
         * @return builder
         * 
         */
        public Builder discoveryType(String discoveryType) {
            $.discoveryType = discoveryType;
            return this;
        }

        /**
         * @param fabricDiscoveryMachineId The ARM Id of the discovered VM.
         * 
         * @return builder
         * 
         */
        public Builder fabricDiscoveryMachineId(String fabricDiscoveryMachineId) {
            $.fabricDiscoveryMachineId = fabricDiscoveryMachineId;
            return this;
        }

        /**
         * @param failoverRecoveryPointId The recovery point Id to which the VM was failed over.
         * 
         * @return builder
         * 
         */
        public Builder failoverRecoveryPointId(String failoverRecoveryPointId) {
            $.failoverRecoveryPointId = failoverRecoveryPointId;
            return this;
        }

        /**
         * @param firmwareType The firmware type.
         * 
         * @return builder
         * 
         */
        public Builder firmwareType(String firmwareType) {
            $.firmwareType = firmwareType;
            return this;
        }

        /**
         * @param initialReplicationProcessedBytes The initial replication processed bytes. This includes sum of total bytes transferred and matched bytes on all selected disks in source VM.
         * 
         * @return builder
         * 
         */
        public Builder initialReplicationProcessedBytes(Double initialReplicationProcessedBytes) {
            $.initialReplicationProcessedBytes = initialReplicationProcessedBytes;
            return this;
        }

        /**
         * @param initialReplicationProgressPercentage The initial replication progress percentage. This is calculated based on total bytes processed for all disks in the source VM.
         * 
         * @return builder
         * 
         */
        public Builder initialReplicationProgressPercentage(Integer initialReplicationProgressPercentage) {
            $.initialReplicationProgressPercentage = initialReplicationProgressPercentage;
            return this;
        }

        /**
         * @param initialReplicationTransferredBytes The initial replication transferred bytes from source VM to azure for all selected disks on source VM.
         * 
         * @return builder
         * 
         */
        public Builder initialReplicationTransferredBytes(Double initialReplicationTransferredBytes) {
            $.initialReplicationTransferredBytes = initialReplicationTransferredBytes;
            return this;
        }

        /**
         * @param instanceType Gets the Instance type.
         * Expected value is &#39;InMageRcm&#39;.
         * 
         * @return builder
         * 
         */
        public Builder instanceType(String instanceType) {
            $.instanceType = instanceType;
            return this;
        }

        /**
         * @param internalIdentifier The virtual machine internal identifier.
         * 
         * @return builder
         * 
         */
        public Builder internalIdentifier(String internalIdentifier) {
            $.internalIdentifier = internalIdentifier;
            return this;
        }

        /**
         * @param isLastUpgradeSuccessful A value indicating whether last agent upgrade was successful or not.
         * 
         * @return builder
         * 
         */
        public Builder isLastUpgradeSuccessful(String isLastUpgradeSuccessful) {
            $.isLastUpgradeSuccessful = isLastUpgradeSuccessful;
            return this;
        }

        /**
         * @param lastAgentUpgradeErrorDetails The last agent upgrade error information.
         * 
         * @return builder
         * 
         */
        public Builder lastAgentUpgradeErrorDetails(List<InMageRcmLastAgentUpgradeErrorDetailsResponse> lastAgentUpgradeErrorDetails) {
            $.lastAgentUpgradeErrorDetails = lastAgentUpgradeErrorDetails;
            return this;
        }

        /**
         * @param lastAgentUpgradeErrorDetails The last agent upgrade error information.
         * 
         * @return builder
         * 
         */
        public Builder lastAgentUpgradeErrorDetails(InMageRcmLastAgentUpgradeErrorDetailsResponse... lastAgentUpgradeErrorDetails) {
            return lastAgentUpgradeErrorDetails(List.of(lastAgentUpgradeErrorDetails));
        }

        /**
         * @param lastAgentUpgradeFailedJobId The last agent upgrade failed or cancelled job Id.
         * 
         * @return builder
         * 
         */
        public Builder lastAgentUpgradeFailedJobId(String lastAgentUpgradeFailedJobId) {
            $.lastAgentUpgradeFailedJobId = lastAgentUpgradeFailedJobId;
            return this;
        }

        /**
         * @param lastAgentUpgradeType The last agent upgrade type.
         * 
         * @return builder
         * 
         */
        public Builder lastAgentUpgradeType(String lastAgentUpgradeType) {
            $.lastAgentUpgradeType = lastAgentUpgradeType;
            return this;
        }

        /**
         * @param lastRecoveryPointId The last recovery point Id.
         * 
         * @return builder
         * 
         */
        public Builder lastRecoveryPointId(String lastRecoveryPointId) {
            $.lastRecoveryPointId = lastRecoveryPointId;
            return this;
        }

        /**
         * @param lastRecoveryPointReceived The last recovery point received time.
         * 
         * @return builder
         * 
         */
        public Builder lastRecoveryPointReceived(String lastRecoveryPointReceived) {
            $.lastRecoveryPointReceived = lastRecoveryPointReceived;
            return this;
        }

        /**
         * @param lastRpoCalculatedTime The last recovery point objective calculated time.
         * 
         * @return builder
         * 
         */
        public Builder lastRpoCalculatedTime(String lastRpoCalculatedTime) {
            $.lastRpoCalculatedTime = lastRpoCalculatedTime;
            return this;
        }

        /**
         * @param lastRpoInSeconds The last recovery point objective value.
         * 
         * @return builder
         * 
         */
        public Builder lastRpoInSeconds(Double lastRpoInSeconds) {
            $.lastRpoInSeconds = lastRpoInSeconds;
            return this;
        }

        /**
         * @param licenseType License Type of the VM to be used.
         * 
         * @return builder
         * 
         */
        public Builder licenseType(String licenseType) {
            $.licenseType = licenseType;
            return this;
        }

        /**
         * @param mobilityAgentDetails The mobility agent information.
         * 
         * @return builder
         * 
         */
        public Builder mobilityAgentDetails(InMageRcmMobilityAgentDetailsResponse mobilityAgentDetails) {
            $.mobilityAgentDetails = mobilityAgentDetails;
            return this;
        }

        /**
         * @param multiVmGroupName The multi VM group name.
         * 
         * @return builder
         * 
         */
        public Builder multiVmGroupName(String multiVmGroupName) {
            $.multiVmGroupName = multiVmGroupName;
            return this;
        }

        /**
         * @param osType The type of the OS on the VM.
         * 
         * @return builder
         * 
         */
        public Builder osType(String osType) {
            $.osType = osType;
            return this;
        }

        /**
         * @param processServerId The process server Id.
         * 
         * @return builder
         * 
         */
        public Builder processServerId(String processServerId) {
            $.processServerId = processServerId;
            return this;
        }

        /**
         * @param processServerName The process server name.
         * 
         * @return builder
         * 
         */
        public Builder processServerName(String processServerName) {
            $.processServerName = processServerName;
            return this;
        }

        /**
         * @param processorCoreCount The processor core count.
         * 
         * @return builder
         * 
         */
        public Builder processorCoreCount(Integer processorCoreCount) {
            $.processorCoreCount = processorCoreCount;
            return this;
        }

        /**
         * @param protectedDisks The list of protected disks.
         * 
         * @return builder
         * 
         */
        public Builder protectedDisks(List<InMageRcmProtectedDiskDetailsResponse> protectedDisks) {
            $.protectedDisks = protectedDisks;
            return this;
        }

        /**
         * @param protectedDisks The list of protected disks.
         * 
         * @return builder
         * 
         */
        public Builder protectedDisks(InMageRcmProtectedDiskDetailsResponse... protectedDisks) {
            return protectedDisks(List.of(protectedDisks));
        }

        /**
         * @param resyncProcessedBytes The resync processed bytes. This includes sum of total bytes transferred and matched bytes on all selected disks in source VM.
         * 
         * @return builder
         * 
         */
        public Builder resyncProcessedBytes(Double resyncProcessedBytes) {
            $.resyncProcessedBytes = resyncProcessedBytes;
            return this;
        }

        /**
         * @param resyncProgressPercentage The resync progress percentage. This is calculated based on total bytes processed for all disks in the source VM.
         * 
         * @return builder
         * 
         */
        public Builder resyncProgressPercentage(Integer resyncProgressPercentage) {
            $.resyncProgressPercentage = resyncProgressPercentage;
            return this;
        }

        /**
         * @param resyncRequired A value indicating whether resync is required.
         * 
         * @return builder
         * 
         */
        public Builder resyncRequired(String resyncRequired) {
            $.resyncRequired = resyncRequired;
            return this;
        }

        /**
         * @param resyncState The resync state.
         * 
         * @return builder
         * 
         */
        public Builder resyncState(String resyncState) {
            $.resyncState = resyncState;
            return this;
        }

        /**
         * @param resyncTransferredBytes The resync transferred bytes from source VM to azure for all selected disks on source VM.
         * 
         * @return builder
         * 
         */
        public Builder resyncTransferredBytes(Double resyncTransferredBytes) {
            $.resyncTransferredBytes = resyncTransferredBytes;
            return this;
        }

        /**
         * @param runAsAccountId The run-as account Id.
         * 
         * @return builder
         * 
         */
        public Builder runAsAccountId(String runAsAccountId) {
            $.runAsAccountId = runAsAccountId;
            return this;
        }

        /**
         * @param targetAvailabilitySetId The target availability set Id.
         * 
         * @return builder
         * 
         */
        public Builder targetAvailabilitySetId(String targetAvailabilitySetId) {
            $.targetAvailabilitySetId = targetAvailabilitySetId;
            return this;
        }

        /**
         * @param targetAvailabilityZone The target availability zone.
         * 
         * @return builder
         * 
         */
        public Builder targetAvailabilityZone(String targetAvailabilityZone) {
            $.targetAvailabilityZone = targetAvailabilityZone;
            return this;
        }

        /**
         * @param targetBootDiagnosticsStorageAccountId The target boot diagnostics storage account ARM Id.
         * 
         * @return builder
         * 
         */
        public Builder targetBootDiagnosticsStorageAccountId(String targetBootDiagnosticsStorageAccountId) {
            $.targetBootDiagnosticsStorageAccountId = targetBootDiagnosticsStorageAccountId;
            return this;
        }

        /**
         * @param targetGeneration The target generation.
         * 
         * @return builder
         * 
         */
        public Builder targetGeneration(String targetGeneration) {
            $.targetGeneration = targetGeneration;
            return this;
        }

        /**
         * @param targetNetworkId The target network Id.
         * 
         * @return builder
         * 
         */
        public Builder targetNetworkId(String targetNetworkId) {
            $.targetNetworkId = targetNetworkId;
            return this;
        }

        /**
         * @param targetProximityPlacementGroupId The target proximity placement group Id.
         * 
         * @return builder
         * 
         */
        public Builder targetProximityPlacementGroupId(String targetProximityPlacementGroupId) {
            $.targetProximityPlacementGroupId = targetProximityPlacementGroupId;
            return this;
        }

        /**
         * @param targetResourceGroupId The target resource group Id.
         * 
         * @return builder
         * 
         */
        public Builder targetResourceGroupId(String targetResourceGroupId) {
            $.targetResourceGroupId = targetResourceGroupId;
            return this;
        }

        /**
         * @param targetVmName Target VM name.
         * 
         * @return builder
         * 
         */
        public Builder targetVmName(String targetVmName) {
            $.targetVmName = targetVmName;
            return this;
        }

        /**
         * @param targetVmSize The target VM size.
         * 
         * @return builder
         * 
         */
        public Builder targetVmSize(String targetVmSize) {
            $.targetVmSize = targetVmSize;
            return this;
        }

        /**
         * @param testNetworkId The test network Id.
         * 
         * @return builder
         * 
         */
        public Builder testNetworkId(String testNetworkId) {
            $.testNetworkId = testNetworkId;
            return this;
        }

        /**
         * @param vmNics The network details.
         * 
         * @return builder
         * 
         */
        public Builder vmNics(List<InMageRcmNicDetailsResponse> vmNics) {
            $.vmNics = vmNics;
            return this;
        }

        /**
         * @param vmNics The network details.
         * 
         * @return builder
         * 
         */
        public Builder vmNics(InMageRcmNicDetailsResponse... vmNics) {
            return vmNics(List.of(vmNics));
        }

        public InMageRcmReplicationDetailsResponse build() {
            $.agentUpgradeBlockingErrorDetails = Objects.requireNonNull($.agentUpgradeBlockingErrorDetails, "expected parameter 'agentUpgradeBlockingErrorDetails' to be non-null");
            $.agentUpgradeState = Objects.requireNonNull($.agentUpgradeState, "expected parameter 'agentUpgradeState' to be non-null");
            $.allocatedMemoryInMB = Objects.requireNonNull($.allocatedMemoryInMB, "expected parameter 'allocatedMemoryInMB' to be non-null");
            $.discoveryType = Objects.requireNonNull($.discoveryType, "expected parameter 'discoveryType' to be non-null");
            $.fabricDiscoveryMachineId = Objects.requireNonNull($.fabricDiscoveryMachineId, "expected parameter 'fabricDiscoveryMachineId' to be non-null");
            $.failoverRecoveryPointId = Objects.requireNonNull($.failoverRecoveryPointId, "expected parameter 'failoverRecoveryPointId' to be non-null");
            $.firmwareType = Objects.requireNonNull($.firmwareType, "expected parameter 'firmwareType' to be non-null");
            $.initialReplicationProcessedBytes = Objects.requireNonNull($.initialReplicationProcessedBytes, "expected parameter 'initialReplicationProcessedBytes' to be non-null");
            $.initialReplicationProgressPercentage = Objects.requireNonNull($.initialReplicationProgressPercentage, "expected parameter 'initialReplicationProgressPercentage' to be non-null");
            $.initialReplicationTransferredBytes = Objects.requireNonNull($.initialReplicationTransferredBytes, "expected parameter 'initialReplicationTransferredBytes' to be non-null");
            $.instanceType = Codegen.stringProp("instanceType").arg($.instanceType).require();
            $.internalIdentifier = Objects.requireNonNull($.internalIdentifier, "expected parameter 'internalIdentifier' to be non-null");
            $.isLastUpgradeSuccessful = Objects.requireNonNull($.isLastUpgradeSuccessful, "expected parameter 'isLastUpgradeSuccessful' to be non-null");
            $.lastAgentUpgradeErrorDetails = Objects.requireNonNull($.lastAgentUpgradeErrorDetails, "expected parameter 'lastAgentUpgradeErrorDetails' to be non-null");
            $.lastAgentUpgradeFailedJobId = Objects.requireNonNull($.lastAgentUpgradeFailedJobId, "expected parameter 'lastAgentUpgradeFailedJobId' to be non-null");
            $.lastAgentUpgradeType = Objects.requireNonNull($.lastAgentUpgradeType, "expected parameter 'lastAgentUpgradeType' to be non-null");
            $.lastRecoveryPointId = Objects.requireNonNull($.lastRecoveryPointId, "expected parameter 'lastRecoveryPointId' to be non-null");
            $.lastRecoveryPointReceived = Objects.requireNonNull($.lastRecoveryPointReceived, "expected parameter 'lastRecoveryPointReceived' to be non-null");
            $.lastRpoCalculatedTime = Objects.requireNonNull($.lastRpoCalculatedTime, "expected parameter 'lastRpoCalculatedTime' to be non-null");
            $.lastRpoInSeconds = Objects.requireNonNull($.lastRpoInSeconds, "expected parameter 'lastRpoInSeconds' to be non-null");
            $.licenseType = Objects.requireNonNull($.licenseType, "expected parameter 'licenseType' to be non-null");
            $.mobilityAgentDetails = Objects.requireNonNull($.mobilityAgentDetails, "expected parameter 'mobilityAgentDetails' to be non-null");
            $.multiVmGroupName = Objects.requireNonNull($.multiVmGroupName, "expected parameter 'multiVmGroupName' to be non-null");
            $.osType = Objects.requireNonNull($.osType, "expected parameter 'osType' to be non-null");
            $.processServerId = Objects.requireNonNull($.processServerId, "expected parameter 'processServerId' to be non-null");
            $.processServerName = Objects.requireNonNull($.processServerName, "expected parameter 'processServerName' to be non-null");
            $.processorCoreCount = Objects.requireNonNull($.processorCoreCount, "expected parameter 'processorCoreCount' to be non-null");
            $.protectedDisks = Objects.requireNonNull($.protectedDisks, "expected parameter 'protectedDisks' to be non-null");
            $.resyncProcessedBytes = Objects.requireNonNull($.resyncProcessedBytes, "expected parameter 'resyncProcessedBytes' to be non-null");
            $.resyncProgressPercentage = Objects.requireNonNull($.resyncProgressPercentage, "expected parameter 'resyncProgressPercentage' to be non-null");
            $.resyncRequired = Objects.requireNonNull($.resyncRequired, "expected parameter 'resyncRequired' to be non-null");
            $.resyncState = Objects.requireNonNull($.resyncState, "expected parameter 'resyncState' to be non-null");
            $.resyncTransferredBytes = Objects.requireNonNull($.resyncTransferredBytes, "expected parameter 'resyncTransferredBytes' to be non-null");
            $.runAsAccountId = Objects.requireNonNull($.runAsAccountId, "expected parameter 'runAsAccountId' to be non-null");
            $.targetAvailabilitySetId = Objects.requireNonNull($.targetAvailabilitySetId, "expected parameter 'targetAvailabilitySetId' to be non-null");
            $.targetAvailabilityZone = Objects.requireNonNull($.targetAvailabilityZone, "expected parameter 'targetAvailabilityZone' to be non-null");
            $.targetBootDiagnosticsStorageAccountId = Objects.requireNonNull($.targetBootDiagnosticsStorageAccountId, "expected parameter 'targetBootDiagnosticsStorageAccountId' to be non-null");
            $.targetGeneration = Objects.requireNonNull($.targetGeneration, "expected parameter 'targetGeneration' to be non-null");
            $.targetNetworkId = Objects.requireNonNull($.targetNetworkId, "expected parameter 'targetNetworkId' to be non-null");
            $.targetProximityPlacementGroupId = Objects.requireNonNull($.targetProximityPlacementGroupId, "expected parameter 'targetProximityPlacementGroupId' to be non-null");
            $.targetResourceGroupId = Objects.requireNonNull($.targetResourceGroupId, "expected parameter 'targetResourceGroupId' to be non-null");
            $.targetVmName = Objects.requireNonNull($.targetVmName, "expected parameter 'targetVmName' to be non-null");
            $.targetVmSize = Objects.requireNonNull($.targetVmSize, "expected parameter 'targetVmSize' to be non-null");
            $.testNetworkId = Objects.requireNonNull($.testNetworkId, "expected parameter 'testNetworkId' to be non-null");
            $.vmNics = Objects.requireNonNull($.vmNics, "expected parameter 'vmNics' to be non-null");
            return $;
        }
    }

}
