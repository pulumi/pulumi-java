// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.batch.inputs;

import com.pulumi.azurenative.batch.enums.InboundEndpointProtocol;
import com.pulumi.azurenative.batch.inputs.NetworkSecurityGroupRuleArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InboundNatPoolArgs extends com.pulumi.resources.ResourceArgs {

    public static final InboundNatPoolArgs Empty = new InboundNatPoolArgs();

    /**
     * This must be unique within a Batch pool. Acceptable values are between 1 and 65535 except for 22, 3389, 29876 and 29877 as these are reserved. If any reserved values are provided the request fails with HTTP status code 400.
     * 
     */
    @Import(name="backendPort", required=true)
    private Output<Integer> backendPort;

    /**
     * @return This must be unique within a Batch pool. Acceptable values are between 1 and 65535 except for 22, 3389, 29876 and 29877 as these are reserved. If any reserved values are provided the request fails with HTTP status code 400.
     * 
     */
    public Output<Integer> backendPort() {
        return this.backendPort;
    }

    /**
     * Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved by the Batch service. All ranges within a pool must be distinct and cannot overlap. If any reserved or overlapping values are provided the request fails with HTTP status code 400.
     * 
     */
    @Import(name="frontendPortRangeEnd", required=true)
    private Output<Integer> frontendPortRangeEnd;

    /**
     * @return Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved by the Batch service. All ranges within a pool must be distinct and cannot overlap. If any reserved or overlapping values are provided the request fails with HTTP status code 400.
     * 
     */
    public Output<Integer> frontendPortRangeEnd() {
        return this.frontendPortRangeEnd;
    }

    /**
     * Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved. All ranges within a pool must be distinct and cannot overlap. If any reserved or overlapping values are provided the request fails with HTTP status code 400.
     * 
     */
    @Import(name="frontendPortRangeStart", required=true)
    private Output<Integer> frontendPortRangeStart;

    /**
     * @return Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved. All ranges within a pool must be distinct and cannot overlap. If any reserved or overlapping values are provided the request fails with HTTP status code 400.
     * 
     */
    public Output<Integer> frontendPortRangeStart() {
        return this.frontendPortRangeStart;
    }

    /**
     * The name must be unique within a Batch pool, can contain letters, numbers, underscores, periods, and hyphens. Names must start with a letter or number, must end with a letter, number, or underscore, and cannot exceed 77 characters.  If any invalid values are provided the request fails with HTTP status code 400.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name must be unique within a Batch pool, can contain letters, numbers, underscores, periods, and hyphens. Names must start with a letter or number, must end with a letter, number, or underscore, and cannot exceed 77 characters.  If any invalid values are provided the request fails with HTTP status code 400.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The maximum number of rules that can be specified across all the endpoints on a Batch pool is 25. If no network security group rules are specified, a default rule will be created to allow inbound access to the specified backendPort. If the maximum number of network security group rules is exceeded the request fails with HTTP status code 400.
     * 
     */
    @Import(name="networkSecurityGroupRules")
    private @Nullable Output<List<NetworkSecurityGroupRuleArgs>> networkSecurityGroupRules;

    /**
     * @return The maximum number of rules that can be specified across all the endpoints on a Batch pool is 25. If no network security group rules are specified, a default rule will be created to allow inbound access to the specified backendPort. If the maximum number of network security group rules is exceeded the request fails with HTTP status code 400.
     * 
     */
    public Optional<Output<List<NetworkSecurityGroupRuleArgs>>> networkSecurityGroupRules() {
        return Optional.ofNullable(this.networkSecurityGroupRules);
    }

    @Import(name="protocol", required=true)
    private Output<InboundEndpointProtocol> protocol;

    public Output<InboundEndpointProtocol> protocol() {
        return this.protocol;
    }

    private InboundNatPoolArgs() {}

    private InboundNatPoolArgs(InboundNatPoolArgs $) {
        this.backendPort = $.backendPort;
        this.frontendPortRangeEnd = $.frontendPortRangeEnd;
        this.frontendPortRangeStart = $.frontendPortRangeStart;
        this.name = $.name;
        this.networkSecurityGroupRules = $.networkSecurityGroupRules;
        this.protocol = $.protocol;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InboundNatPoolArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InboundNatPoolArgs $;

        public Builder() {
            $ = new InboundNatPoolArgs();
        }

        public Builder(InboundNatPoolArgs defaults) {
            $ = new InboundNatPoolArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param backendPort This must be unique within a Batch pool. Acceptable values are between 1 and 65535 except for 22, 3389, 29876 and 29877 as these are reserved. If any reserved values are provided the request fails with HTTP status code 400.
         * 
         * @return builder
         * 
         */
        public Builder backendPort(Output<Integer> backendPort) {
            $.backendPort = backendPort;
            return this;
        }

        /**
         * @param backendPort This must be unique within a Batch pool. Acceptable values are between 1 and 65535 except for 22, 3389, 29876 and 29877 as these are reserved. If any reserved values are provided the request fails with HTTP status code 400.
         * 
         * @return builder
         * 
         */
        public Builder backendPort(Integer backendPort) {
            return backendPort(Output.of(backendPort));
        }

        /**
         * @param frontendPortRangeEnd Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved by the Batch service. All ranges within a pool must be distinct and cannot overlap. If any reserved or overlapping values are provided the request fails with HTTP status code 400.
         * 
         * @return builder
         * 
         */
        public Builder frontendPortRangeEnd(Output<Integer> frontendPortRangeEnd) {
            $.frontendPortRangeEnd = frontendPortRangeEnd;
            return this;
        }

        /**
         * @param frontendPortRangeEnd Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved by the Batch service. All ranges within a pool must be distinct and cannot overlap. If any reserved or overlapping values are provided the request fails with HTTP status code 400.
         * 
         * @return builder
         * 
         */
        public Builder frontendPortRangeEnd(Integer frontendPortRangeEnd) {
            return frontendPortRangeEnd(Output.of(frontendPortRangeEnd));
        }

        /**
         * @param frontendPortRangeStart Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved. All ranges within a pool must be distinct and cannot overlap. If any reserved or overlapping values are provided the request fails with HTTP status code 400.
         * 
         * @return builder
         * 
         */
        public Builder frontendPortRangeStart(Output<Integer> frontendPortRangeStart) {
            $.frontendPortRangeStart = frontendPortRangeStart;
            return this;
        }

        /**
         * @param frontendPortRangeStart Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved. All ranges within a pool must be distinct and cannot overlap. If any reserved or overlapping values are provided the request fails with HTTP status code 400.
         * 
         * @return builder
         * 
         */
        public Builder frontendPortRangeStart(Integer frontendPortRangeStart) {
            return frontendPortRangeStart(Output.of(frontendPortRangeStart));
        }

        /**
         * @param name The name must be unique within a Batch pool, can contain letters, numbers, underscores, periods, and hyphens. Names must start with a letter or number, must end with a letter, number, or underscore, and cannot exceed 77 characters.  If any invalid values are provided the request fails with HTTP status code 400.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name must be unique within a Batch pool, can contain letters, numbers, underscores, periods, and hyphens. Names must start with a letter or number, must end with a letter, number, or underscore, and cannot exceed 77 characters.  If any invalid values are provided the request fails with HTTP status code 400.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networkSecurityGroupRules The maximum number of rules that can be specified across all the endpoints on a Batch pool is 25. If no network security group rules are specified, a default rule will be created to allow inbound access to the specified backendPort. If the maximum number of network security group rules is exceeded the request fails with HTTP status code 400.
         * 
         * @return builder
         * 
         */
        public Builder networkSecurityGroupRules(@Nullable Output<List<NetworkSecurityGroupRuleArgs>> networkSecurityGroupRules) {
            $.networkSecurityGroupRules = networkSecurityGroupRules;
            return this;
        }

        /**
         * @param networkSecurityGroupRules The maximum number of rules that can be specified across all the endpoints on a Batch pool is 25. If no network security group rules are specified, a default rule will be created to allow inbound access to the specified backendPort. If the maximum number of network security group rules is exceeded the request fails with HTTP status code 400.
         * 
         * @return builder
         * 
         */
        public Builder networkSecurityGroupRules(List<NetworkSecurityGroupRuleArgs> networkSecurityGroupRules) {
            return networkSecurityGroupRules(Output.of(networkSecurityGroupRules));
        }

        /**
         * @param networkSecurityGroupRules The maximum number of rules that can be specified across all the endpoints on a Batch pool is 25. If no network security group rules are specified, a default rule will be created to allow inbound access to the specified backendPort. If the maximum number of network security group rules is exceeded the request fails with HTTP status code 400.
         * 
         * @return builder
         * 
         */
        public Builder networkSecurityGroupRules(NetworkSecurityGroupRuleArgs... networkSecurityGroupRules) {
            return networkSecurityGroupRules(List.of(networkSecurityGroupRules));
        }

        public Builder protocol(Output<InboundEndpointProtocol> protocol) {
            $.protocol = protocol;
            return this;
        }

        public Builder protocol(InboundEndpointProtocol protocol) {
            return protocol(Output.of(protocol));
        }

        public InboundNatPoolArgs build() {
            $.backendPort = Objects.requireNonNull($.backendPort, "expected parameter 'backendPort' to be non-null");
            $.frontendPortRangeEnd = Objects.requireNonNull($.frontendPortRangeEnd, "expected parameter 'frontendPortRangeEnd' to be non-null");
            $.frontendPortRangeStart = Objects.requireNonNull($.frontendPortRangeStart, "expected parameter 'frontendPortRangeStart' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.protocol = Objects.requireNonNull($.protocol, "expected parameter 'protocol' to be non-null");
            return $;
        }
    }

}
