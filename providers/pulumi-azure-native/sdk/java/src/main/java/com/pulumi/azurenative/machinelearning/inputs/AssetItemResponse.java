// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.machinelearning.inputs;

import com.pulumi.azurenative.machinelearning.inputs.BlobLocationResponse;
import com.pulumi.azurenative.machinelearning.inputs.InputPortResponse;
import com.pulumi.azurenative.machinelearning.inputs.ModuleAssetParameterResponse;
import com.pulumi.azurenative.machinelearning.inputs.OutputPortResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Information about an asset associated with the web service.
 * 
 */
public final class AssetItemResponse extends com.pulumi.resources.InvokeArgs {

    public static final AssetItemResponse Empty = new AssetItemResponse();

    /**
     * Asset&#39;s Id.
     * 
     */
    @Import(name="id")
    private @Nullable String id;

    /**
     * @return Asset&#39;s Id.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Information about the asset&#39;s input ports.
     * 
     */
    @Import(name="inputPorts")
    private @Nullable Map<String,InputPortResponse> inputPorts;

    /**
     * @return Information about the asset&#39;s input ports.
     * 
     */
    public Optional<Map<String,InputPortResponse>> inputPorts() {
        return Optional.ofNullable(this.inputPorts);
    }

    /**
     * Access information for the asset.
     * 
     */
    @Import(name="locationInfo", required=true)
    private BlobLocationResponse locationInfo;

    /**
     * @return Access information for the asset.
     * 
     */
    public BlobLocationResponse locationInfo() {
        return this.locationInfo;
    }

    /**
     * If the asset is a custom module, this holds the module&#39;s metadata.
     * 
     */
    @Import(name="metadata")
    private @Nullable Map<String,String> metadata;

    /**
     * @return If the asset is a custom module, this holds the module&#39;s metadata.
     * 
     */
    public Optional<Map<String,String>> metadata() {
        return Optional.ofNullable(this.metadata);
    }

    /**
     * Asset&#39;s friendly name.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return Asset&#39;s friendly name.
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * Information about the asset&#39;s output ports.
     * 
     */
    @Import(name="outputPorts")
    private @Nullable Map<String,OutputPortResponse> outputPorts;

    /**
     * @return Information about the asset&#39;s output ports.
     * 
     */
    public Optional<Map<String,OutputPortResponse>> outputPorts() {
        return Optional.ofNullable(this.outputPorts);
    }

    /**
     * If the asset is a custom module, this holds the module&#39;s parameters.
     * 
     */
    @Import(name="parameters")
    private @Nullable List<ModuleAssetParameterResponse> parameters;

    /**
     * @return If the asset is a custom module, this holds the module&#39;s parameters.
     * 
     */
    public Optional<List<ModuleAssetParameterResponse>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    /**
     * Asset&#39;s type.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    /**
     * @return Asset&#39;s type.
     * 
     */
    public String type() {
        return this.type;
    }

    private AssetItemResponse() {}

    private AssetItemResponse(AssetItemResponse $) {
        this.id = $.id;
        this.inputPorts = $.inputPorts;
        this.locationInfo = $.locationInfo;
        this.metadata = $.metadata;
        this.name = $.name;
        this.outputPorts = $.outputPorts;
        this.parameters = $.parameters;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AssetItemResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AssetItemResponse $;

        public Builder() {
            $ = new AssetItemResponse();
        }

        public Builder(AssetItemResponse defaults) {
            $ = new AssetItemResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param id Asset&#39;s Id.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable String id) {
            $.id = id;
            return this;
        }

        /**
         * @param inputPorts Information about the asset&#39;s input ports.
         * 
         * @return builder
         * 
         */
        public Builder inputPorts(@Nullable Map<String,InputPortResponse> inputPorts) {
            $.inputPorts = inputPorts;
            return this;
        }

        /**
         * @param locationInfo Access information for the asset.
         * 
         * @return builder
         * 
         */
        public Builder locationInfo(BlobLocationResponse locationInfo) {
            $.locationInfo = locationInfo;
            return this;
        }

        /**
         * @param metadata If the asset is a custom module, this holds the module&#39;s metadata.
         * 
         * @return builder
         * 
         */
        public Builder metadata(@Nullable Map<String,String> metadata) {
            $.metadata = metadata;
            return this;
        }

        /**
         * @param name Asset&#39;s friendly name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param outputPorts Information about the asset&#39;s output ports.
         * 
         * @return builder
         * 
         */
        public Builder outputPorts(@Nullable Map<String,OutputPortResponse> outputPorts) {
            $.outputPorts = outputPorts;
            return this;
        }

        /**
         * @param parameters If the asset is a custom module, this holds the module&#39;s parameters.
         * 
         * @return builder
         * 
         */
        public Builder parameters(@Nullable List<ModuleAssetParameterResponse> parameters) {
            $.parameters = parameters;
            return this;
        }

        /**
         * @param parameters If the asset is a custom module, this holds the module&#39;s parameters.
         * 
         * @return builder
         * 
         */
        public Builder parameters(ModuleAssetParameterResponse... parameters) {
            return parameters(List.of(parameters));
        }

        /**
         * @param type Asset&#39;s type.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public AssetItemResponse build() {
            $.locationInfo = Objects.requireNonNull($.locationInfo, "expected parameter 'locationInfo' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
