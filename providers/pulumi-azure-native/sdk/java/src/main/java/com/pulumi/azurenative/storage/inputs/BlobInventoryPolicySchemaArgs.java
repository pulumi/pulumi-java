// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.storage.inputs;

import com.pulumi.azurenative.storage.enums.InventoryRuleType;
import com.pulumi.azurenative.storage.inputs.BlobInventoryPolicyRuleArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * The storage account blob inventory policy rules.
 * 
 */
public final class BlobInventoryPolicySchemaArgs extends com.pulumi.resources.ResourceArgs {

    public static final BlobInventoryPolicySchemaArgs Empty = new BlobInventoryPolicySchemaArgs();

    /**
     * Container name where blob inventory files are stored. Must be pre-created.
     * 
     */
    @Import(name="destination", required=true)
    private Output<String> destination;

    /**
     * @return Container name where blob inventory files are stored. Must be pre-created.
     * 
     */
    public Output<String> destination() {
        return this.destination;
    }

    /**
     * Policy is enabled if set to true.
     * 
     */
    @Import(name="enabled", required=true)
    private Output<Boolean> enabled;

    /**
     * @return Policy is enabled if set to true.
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }

    /**
     * The storage account blob inventory policy rules. The rule is applied when it is enabled.
     * 
     */
    @Import(name="rules", required=true)
    private Output<List<BlobInventoryPolicyRuleArgs>> rules;

    /**
     * @return The storage account blob inventory policy rules. The rule is applied when it is enabled.
     * 
     */
    public Output<List<BlobInventoryPolicyRuleArgs>> rules() {
        return this.rules;
    }

    /**
     * The valid value is Inventory
     * 
     */
    @Import(name="type", required=true)
    private Output<Either<String,InventoryRuleType>> type;

    /**
     * @return The valid value is Inventory
     * 
     */
    public Output<Either<String,InventoryRuleType>> type() {
        return this.type;
    }

    private BlobInventoryPolicySchemaArgs() {}

    private BlobInventoryPolicySchemaArgs(BlobInventoryPolicySchemaArgs $) {
        this.destination = $.destination;
        this.enabled = $.enabled;
        this.rules = $.rules;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BlobInventoryPolicySchemaArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BlobInventoryPolicySchemaArgs $;

        public Builder() {
            $ = new BlobInventoryPolicySchemaArgs();
        }

        public Builder(BlobInventoryPolicySchemaArgs defaults) {
            $ = new BlobInventoryPolicySchemaArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param destination Container name where blob inventory files are stored. Must be pre-created.
         * 
         * @return builder
         * 
         */
        public Builder destination(Output<String> destination) {
            $.destination = destination;
            return this;
        }

        /**
         * @param destination Container name where blob inventory files are stored. Must be pre-created.
         * 
         * @return builder
         * 
         */
        public Builder destination(String destination) {
            return destination(Output.of(destination));
        }

        /**
         * @param enabled Policy is enabled if set to true.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Policy is enabled if set to true.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param rules The storage account blob inventory policy rules. The rule is applied when it is enabled.
         * 
         * @return builder
         * 
         */
        public Builder rules(Output<List<BlobInventoryPolicyRuleArgs>> rules) {
            $.rules = rules;
            return this;
        }

        /**
         * @param rules The storage account blob inventory policy rules. The rule is applied when it is enabled.
         * 
         * @return builder
         * 
         */
        public Builder rules(List<BlobInventoryPolicyRuleArgs> rules) {
            return rules(Output.of(rules));
        }

        /**
         * @param rules The storage account blob inventory policy rules. The rule is applied when it is enabled.
         * 
         * @return builder
         * 
         */
        public Builder rules(BlobInventoryPolicyRuleArgs... rules) {
            return rules(List.of(rules));
        }

        /**
         * @param type The valid value is Inventory
         * 
         * @return builder
         * 
         */
        public Builder type(Output<Either<String,InventoryRuleType>> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The valid value is Inventory
         * 
         * @return builder
         * 
         */
        public Builder type(Either<String,InventoryRuleType> type) {
            return type(Output.of(type));
        }

        /**
         * @param type The valid value is Inventory
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Either.ofLeft(type));
        }

        /**
         * @param type The valid value is Inventory
         * 
         * @return builder
         * 
         */
        public Builder type(InventoryRuleType type) {
            return type(Either.ofRight(type));
        }

        public BlobInventoryPolicySchemaArgs build() {
            $.destination = Objects.requireNonNull($.destination, "expected parameter 'destination' to be non-null");
            $.enabled = Objects.requireNonNull($.enabled, "expected parameter 'enabled' to be non-null");
            $.rules = Objects.requireNonNull($.rules, "expected parameter 'rules' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
