// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network;

import com.pulumi.azurenative.network.enums.VpnAuthenticationType;
import com.pulumi.azurenative.network.enums.VpnGatewayTunnelingProtocol;
import com.pulumi.azurenative.network.inputs.AadAuthenticationParametersArgs;
import com.pulumi.azurenative.network.inputs.IpsecPolicyArgs;
import com.pulumi.azurenative.network.inputs.RadiusServerArgs;
import com.pulumi.azurenative.network.inputs.VpnServerConfigRadiusClientRootCertificateArgs;
import com.pulumi.azurenative.network.inputs.VpnServerConfigRadiusServerRootCertificateArgs;
import com.pulumi.azurenative.network.inputs.VpnServerConfigVpnClientRevokedCertificateArgs;
import com.pulumi.azurenative.network.inputs.VpnServerConfigVpnClientRootCertificateArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VpnServerConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final VpnServerConfigurationArgs Empty = new VpnServerConfigurationArgs();

    /**
     * The set of aad vpn authentication parameters.
     * 
     */
    @Import(name="aadAuthenticationParameters")
    private @Nullable Output<AadAuthenticationParametersArgs> aadAuthenticationParameters;

    /**
     * @return The set of aad vpn authentication parameters.
     * 
     */
    public Optional<Output<AadAuthenticationParametersArgs>> aadAuthenticationParameters() {
        return Optional.ofNullable(this.aadAuthenticationParameters);
    }

    /**
     * Resource ID.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return Resource ID.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Resource location.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Resource location.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name of the VpnServerConfiguration that is unique within a resource group.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the VpnServerConfiguration that is unique within a resource group.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Radius client root certificate of VpnServerConfiguration.
     * 
     */
    @Import(name="radiusClientRootCertificates")
    private @Nullable Output<List<VpnServerConfigRadiusClientRootCertificateArgs>> radiusClientRootCertificates;

    /**
     * @return Radius client root certificate of VpnServerConfiguration.
     * 
     */
    public Optional<Output<List<VpnServerConfigRadiusClientRootCertificateArgs>>> radiusClientRootCertificates() {
        return Optional.ofNullable(this.radiusClientRootCertificates);
    }

    /**
     * The radius server address property of the VpnServerConfiguration resource for point to site client connection.
     * 
     */
    @Import(name="radiusServerAddress")
    private @Nullable Output<String> radiusServerAddress;

    /**
     * @return The radius server address property of the VpnServerConfiguration resource for point to site client connection.
     * 
     */
    public Optional<Output<String>> radiusServerAddress() {
        return Optional.ofNullable(this.radiusServerAddress);
    }

    /**
     * Radius Server root certificate of VpnServerConfiguration.
     * 
     */
    @Import(name="radiusServerRootCertificates")
    private @Nullable Output<List<VpnServerConfigRadiusServerRootCertificateArgs>> radiusServerRootCertificates;

    /**
     * @return Radius Server root certificate of VpnServerConfiguration.
     * 
     */
    public Optional<Output<List<VpnServerConfigRadiusServerRootCertificateArgs>>> radiusServerRootCertificates() {
        return Optional.ofNullable(this.radiusServerRootCertificates);
    }

    /**
     * The radius secret property of the VpnServerConfiguration resource for point to site client connection.
     * 
     */
    @Import(name="radiusServerSecret")
    private @Nullable Output<String> radiusServerSecret;

    /**
     * @return The radius secret property of the VpnServerConfiguration resource for point to site client connection.
     * 
     */
    public Optional<Output<String>> radiusServerSecret() {
        return Optional.ofNullable(this.radiusServerSecret);
    }

    /**
     * Multiple Radius Server configuration for VpnServerConfiguration.
     * 
     */
    @Import(name="radiusServers")
    private @Nullable Output<List<RadiusServerArgs>> radiusServers;

    /**
     * @return Multiple Radius Server configuration for VpnServerConfiguration.
     * 
     */
    public Optional<Output<List<RadiusServerArgs>>> radiusServers() {
        return Optional.ofNullable(this.radiusServers);
    }

    /**
     * The resource group name of the VpnServerConfiguration.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The resource group name of the VpnServerConfiguration.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Resource tags.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * VPN authentication types for the VpnServerConfiguration.
     * 
     */
    @Import(name="vpnAuthenticationTypes")
    private @Nullable Output<List<Either<String,VpnAuthenticationType>>> vpnAuthenticationTypes;

    /**
     * @return VPN authentication types for the VpnServerConfiguration.
     * 
     */
    public Optional<Output<List<Either<String,VpnAuthenticationType>>>> vpnAuthenticationTypes() {
        return Optional.ofNullable(this.vpnAuthenticationTypes);
    }

    /**
     * VpnClientIpsecPolicies for VpnServerConfiguration.
     * 
     */
    @Import(name="vpnClientIpsecPolicies")
    private @Nullable Output<List<IpsecPolicyArgs>> vpnClientIpsecPolicies;

    /**
     * @return VpnClientIpsecPolicies for VpnServerConfiguration.
     * 
     */
    public Optional<Output<List<IpsecPolicyArgs>>> vpnClientIpsecPolicies() {
        return Optional.ofNullable(this.vpnClientIpsecPolicies);
    }

    /**
     * VPN client revoked certificate of VpnServerConfiguration.
     * 
     */
    @Import(name="vpnClientRevokedCertificates")
    private @Nullable Output<List<VpnServerConfigVpnClientRevokedCertificateArgs>> vpnClientRevokedCertificates;

    /**
     * @return VPN client revoked certificate of VpnServerConfiguration.
     * 
     */
    public Optional<Output<List<VpnServerConfigVpnClientRevokedCertificateArgs>>> vpnClientRevokedCertificates() {
        return Optional.ofNullable(this.vpnClientRevokedCertificates);
    }

    /**
     * VPN client root certificate of VpnServerConfiguration.
     * 
     */
    @Import(name="vpnClientRootCertificates")
    private @Nullable Output<List<VpnServerConfigVpnClientRootCertificateArgs>> vpnClientRootCertificates;

    /**
     * @return VPN client root certificate of VpnServerConfiguration.
     * 
     */
    public Optional<Output<List<VpnServerConfigVpnClientRootCertificateArgs>>> vpnClientRootCertificates() {
        return Optional.ofNullable(this.vpnClientRootCertificates);
    }

    /**
     * VPN protocols for the VpnServerConfiguration.
     * 
     */
    @Import(name="vpnProtocols")
    private @Nullable Output<List<Either<String,VpnGatewayTunnelingProtocol>>> vpnProtocols;

    /**
     * @return VPN protocols for the VpnServerConfiguration.
     * 
     */
    public Optional<Output<List<Either<String,VpnGatewayTunnelingProtocol>>>> vpnProtocols() {
        return Optional.ofNullable(this.vpnProtocols);
    }

    /**
     * The name of the VpnServerConfiguration being created or updated.
     * 
     */
    @Import(name="vpnServerConfigurationName")
    private @Nullable Output<String> vpnServerConfigurationName;

    /**
     * @return The name of the VpnServerConfiguration being created or updated.
     * 
     */
    public Optional<Output<String>> vpnServerConfigurationName() {
        return Optional.ofNullable(this.vpnServerConfigurationName);
    }

    private VpnServerConfigurationArgs() {}

    private VpnServerConfigurationArgs(VpnServerConfigurationArgs $) {
        this.aadAuthenticationParameters = $.aadAuthenticationParameters;
        this.id = $.id;
        this.location = $.location;
        this.name = $.name;
        this.radiusClientRootCertificates = $.radiusClientRootCertificates;
        this.radiusServerAddress = $.radiusServerAddress;
        this.radiusServerRootCertificates = $.radiusServerRootCertificates;
        this.radiusServerSecret = $.radiusServerSecret;
        this.radiusServers = $.radiusServers;
        this.resourceGroupName = $.resourceGroupName;
        this.tags = $.tags;
        this.vpnAuthenticationTypes = $.vpnAuthenticationTypes;
        this.vpnClientIpsecPolicies = $.vpnClientIpsecPolicies;
        this.vpnClientRevokedCertificates = $.vpnClientRevokedCertificates;
        this.vpnClientRootCertificates = $.vpnClientRootCertificates;
        this.vpnProtocols = $.vpnProtocols;
        this.vpnServerConfigurationName = $.vpnServerConfigurationName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VpnServerConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VpnServerConfigurationArgs $;

        public Builder() {
            $ = new VpnServerConfigurationArgs();
        }

        public Builder(VpnServerConfigurationArgs defaults) {
            $ = new VpnServerConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param aadAuthenticationParameters The set of aad vpn authentication parameters.
         * 
         * @return builder
         * 
         */
        public Builder aadAuthenticationParameters(@Nullable Output<AadAuthenticationParametersArgs> aadAuthenticationParameters) {
            $.aadAuthenticationParameters = aadAuthenticationParameters;
            return this;
        }

        /**
         * @param aadAuthenticationParameters The set of aad vpn authentication parameters.
         * 
         * @return builder
         * 
         */
        public Builder aadAuthenticationParameters(AadAuthenticationParametersArgs aadAuthenticationParameters) {
            return aadAuthenticationParameters(Output.of(aadAuthenticationParameters));
        }

        /**
         * @param id Resource ID.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id Resource ID.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param location Resource location.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Resource location.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name The name of the VpnServerConfiguration that is unique within a resource group.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the VpnServerConfiguration that is unique within a resource group.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param radiusClientRootCertificates Radius client root certificate of VpnServerConfiguration.
         * 
         * @return builder
         * 
         */
        public Builder radiusClientRootCertificates(@Nullable Output<List<VpnServerConfigRadiusClientRootCertificateArgs>> radiusClientRootCertificates) {
            $.radiusClientRootCertificates = radiusClientRootCertificates;
            return this;
        }

        /**
         * @param radiusClientRootCertificates Radius client root certificate of VpnServerConfiguration.
         * 
         * @return builder
         * 
         */
        public Builder radiusClientRootCertificates(List<VpnServerConfigRadiusClientRootCertificateArgs> radiusClientRootCertificates) {
            return radiusClientRootCertificates(Output.of(radiusClientRootCertificates));
        }

        /**
         * @param radiusClientRootCertificates Radius client root certificate of VpnServerConfiguration.
         * 
         * @return builder
         * 
         */
        public Builder radiusClientRootCertificates(VpnServerConfigRadiusClientRootCertificateArgs... radiusClientRootCertificates) {
            return radiusClientRootCertificates(List.of(radiusClientRootCertificates));
        }

        /**
         * @param radiusServerAddress The radius server address property of the VpnServerConfiguration resource for point to site client connection.
         * 
         * @return builder
         * 
         */
        public Builder radiusServerAddress(@Nullable Output<String> radiusServerAddress) {
            $.radiusServerAddress = radiusServerAddress;
            return this;
        }

        /**
         * @param radiusServerAddress The radius server address property of the VpnServerConfiguration resource for point to site client connection.
         * 
         * @return builder
         * 
         */
        public Builder radiusServerAddress(String radiusServerAddress) {
            return radiusServerAddress(Output.of(radiusServerAddress));
        }

        /**
         * @param radiusServerRootCertificates Radius Server root certificate of VpnServerConfiguration.
         * 
         * @return builder
         * 
         */
        public Builder radiusServerRootCertificates(@Nullable Output<List<VpnServerConfigRadiusServerRootCertificateArgs>> radiusServerRootCertificates) {
            $.radiusServerRootCertificates = radiusServerRootCertificates;
            return this;
        }

        /**
         * @param radiusServerRootCertificates Radius Server root certificate of VpnServerConfiguration.
         * 
         * @return builder
         * 
         */
        public Builder radiusServerRootCertificates(List<VpnServerConfigRadiusServerRootCertificateArgs> radiusServerRootCertificates) {
            return radiusServerRootCertificates(Output.of(radiusServerRootCertificates));
        }

        /**
         * @param radiusServerRootCertificates Radius Server root certificate of VpnServerConfiguration.
         * 
         * @return builder
         * 
         */
        public Builder radiusServerRootCertificates(VpnServerConfigRadiusServerRootCertificateArgs... radiusServerRootCertificates) {
            return radiusServerRootCertificates(List.of(radiusServerRootCertificates));
        }

        /**
         * @param radiusServerSecret The radius secret property of the VpnServerConfiguration resource for point to site client connection.
         * 
         * @return builder
         * 
         */
        public Builder radiusServerSecret(@Nullable Output<String> radiusServerSecret) {
            $.radiusServerSecret = radiusServerSecret;
            return this;
        }

        /**
         * @param radiusServerSecret The radius secret property of the VpnServerConfiguration resource for point to site client connection.
         * 
         * @return builder
         * 
         */
        public Builder radiusServerSecret(String radiusServerSecret) {
            return radiusServerSecret(Output.of(radiusServerSecret));
        }

        /**
         * @param radiusServers Multiple Radius Server configuration for VpnServerConfiguration.
         * 
         * @return builder
         * 
         */
        public Builder radiusServers(@Nullable Output<List<RadiusServerArgs>> radiusServers) {
            $.radiusServers = radiusServers;
            return this;
        }

        /**
         * @param radiusServers Multiple Radius Server configuration for VpnServerConfiguration.
         * 
         * @return builder
         * 
         */
        public Builder radiusServers(List<RadiusServerArgs> radiusServers) {
            return radiusServers(Output.of(radiusServers));
        }

        /**
         * @param radiusServers Multiple Radius Server configuration for VpnServerConfiguration.
         * 
         * @return builder
         * 
         */
        public Builder radiusServers(RadiusServerArgs... radiusServers) {
            return radiusServers(List.of(radiusServers));
        }

        /**
         * @param resourceGroupName The resource group name of the VpnServerConfiguration.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The resource group name of the VpnServerConfiguration.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param tags Resource tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Resource tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param vpnAuthenticationTypes VPN authentication types for the VpnServerConfiguration.
         * 
         * @return builder
         * 
         */
        public Builder vpnAuthenticationTypes(@Nullable Output<List<Either<String,VpnAuthenticationType>>> vpnAuthenticationTypes) {
            $.vpnAuthenticationTypes = vpnAuthenticationTypes;
            return this;
        }

        /**
         * @param vpnAuthenticationTypes VPN authentication types for the VpnServerConfiguration.
         * 
         * @return builder
         * 
         */
        public Builder vpnAuthenticationTypes(List<Either<String,VpnAuthenticationType>> vpnAuthenticationTypes) {
            return vpnAuthenticationTypes(Output.of(vpnAuthenticationTypes));
        }

        /**
         * @param vpnAuthenticationTypes VPN authentication types for the VpnServerConfiguration.
         * 
         * @return builder
         * 
         */
        public Builder vpnAuthenticationTypes(Either<String,VpnAuthenticationType>... vpnAuthenticationTypes) {
            return vpnAuthenticationTypes(List.of(vpnAuthenticationTypes));
        }

        /**
         * @param vpnClientIpsecPolicies VpnClientIpsecPolicies for VpnServerConfiguration.
         * 
         * @return builder
         * 
         */
        public Builder vpnClientIpsecPolicies(@Nullable Output<List<IpsecPolicyArgs>> vpnClientIpsecPolicies) {
            $.vpnClientIpsecPolicies = vpnClientIpsecPolicies;
            return this;
        }

        /**
         * @param vpnClientIpsecPolicies VpnClientIpsecPolicies for VpnServerConfiguration.
         * 
         * @return builder
         * 
         */
        public Builder vpnClientIpsecPolicies(List<IpsecPolicyArgs> vpnClientIpsecPolicies) {
            return vpnClientIpsecPolicies(Output.of(vpnClientIpsecPolicies));
        }

        /**
         * @param vpnClientIpsecPolicies VpnClientIpsecPolicies for VpnServerConfiguration.
         * 
         * @return builder
         * 
         */
        public Builder vpnClientIpsecPolicies(IpsecPolicyArgs... vpnClientIpsecPolicies) {
            return vpnClientIpsecPolicies(List.of(vpnClientIpsecPolicies));
        }

        /**
         * @param vpnClientRevokedCertificates VPN client revoked certificate of VpnServerConfiguration.
         * 
         * @return builder
         * 
         */
        public Builder vpnClientRevokedCertificates(@Nullable Output<List<VpnServerConfigVpnClientRevokedCertificateArgs>> vpnClientRevokedCertificates) {
            $.vpnClientRevokedCertificates = vpnClientRevokedCertificates;
            return this;
        }

        /**
         * @param vpnClientRevokedCertificates VPN client revoked certificate of VpnServerConfiguration.
         * 
         * @return builder
         * 
         */
        public Builder vpnClientRevokedCertificates(List<VpnServerConfigVpnClientRevokedCertificateArgs> vpnClientRevokedCertificates) {
            return vpnClientRevokedCertificates(Output.of(vpnClientRevokedCertificates));
        }

        /**
         * @param vpnClientRevokedCertificates VPN client revoked certificate of VpnServerConfiguration.
         * 
         * @return builder
         * 
         */
        public Builder vpnClientRevokedCertificates(VpnServerConfigVpnClientRevokedCertificateArgs... vpnClientRevokedCertificates) {
            return vpnClientRevokedCertificates(List.of(vpnClientRevokedCertificates));
        }

        /**
         * @param vpnClientRootCertificates VPN client root certificate of VpnServerConfiguration.
         * 
         * @return builder
         * 
         */
        public Builder vpnClientRootCertificates(@Nullable Output<List<VpnServerConfigVpnClientRootCertificateArgs>> vpnClientRootCertificates) {
            $.vpnClientRootCertificates = vpnClientRootCertificates;
            return this;
        }

        /**
         * @param vpnClientRootCertificates VPN client root certificate of VpnServerConfiguration.
         * 
         * @return builder
         * 
         */
        public Builder vpnClientRootCertificates(List<VpnServerConfigVpnClientRootCertificateArgs> vpnClientRootCertificates) {
            return vpnClientRootCertificates(Output.of(vpnClientRootCertificates));
        }

        /**
         * @param vpnClientRootCertificates VPN client root certificate of VpnServerConfiguration.
         * 
         * @return builder
         * 
         */
        public Builder vpnClientRootCertificates(VpnServerConfigVpnClientRootCertificateArgs... vpnClientRootCertificates) {
            return vpnClientRootCertificates(List.of(vpnClientRootCertificates));
        }

        /**
         * @param vpnProtocols VPN protocols for the VpnServerConfiguration.
         * 
         * @return builder
         * 
         */
        public Builder vpnProtocols(@Nullable Output<List<Either<String,VpnGatewayTunnelingProtocol>>> vpnProtocols) {
            $.vpnProtocols = vpnProtocols;
            return this;
        }

        /**
         * @param vpnProtocols VPN protocols for the VpnServerConfiguration.
         * 
         * @return builder
         * 
         */
        public Builder vpnProtocols(List<Either<String,VpnGatewayTunnelingProtocol>> vpnProtocols) {
            return vpnProtocols(Output.of(vpnProtocols));
        }

        /**
         * @param vpnProtocols VPN protocols for the VpnServerConfiguration.
         * 
         * @return builder
         * 
         */
        public Builder vpnProtocols(Either<String,VpnGatewayTunnelingProtocol>... vpnProtocols) {
            return vpnProtocols(List.of(vpnProtocols));
        }

        /**
         * @param vpnServerConfigurationName The name of the VpnServerConfiguration being created or updated.
         * 
         * @return builder
         * 
         */
        public Builder vpnServerConfigurationName(@Nullable Output<String> vpnServerConfigurationName) {
            $.vpnServerConfigurationName = vpnServerConfigurationName;
            return this;
        }

        /**
         * @param vpnServerConfigurationName The name of the VpnServerConfiguration being created or updated.
         * 
         * @return builder
         * 
         */
        public Builder vpnServerConfigurationName(String vpnServerConfigurationName) {
            return vpnServerConfigurationName(Output.of(vpnServerConfigurationName));
        }

        public VpnServerConfigurationArgs build() {
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
