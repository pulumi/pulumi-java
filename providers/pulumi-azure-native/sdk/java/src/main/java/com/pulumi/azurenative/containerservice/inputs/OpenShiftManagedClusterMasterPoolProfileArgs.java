// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.containerservice.inputs;

import com.pulumi.azurenative.containerservice.enums.OSType;
import com.pulumi.azurenative.containerservice.enums.OpenShiftContainerServiceVMSize;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * OpenShiftManagedClusterMaterPoolProfile contains configuration for OpenShift master VMs.
 * 
 */
public final class OpenShiftManagedClusterMasterPoolProfileArgs extends com.pulumi.resources.ResourceArgs {

    public static final OpenShiftManagedClusterMasterPoolProfileArgs Empty = new OpenShiftManagedClusterMasterPoolProfileArgs();

    /**
     * Number of masters (VMs) to host docker containers. The default value is 3.
     * 
     */
    @Import(name="count", required=true)
      private final Output<Integer> count;

    public Output<Integer> count() {
        return this.count;
    }

    /**
     * Unique name of the master pool profile in the context of the subscription and resource group.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux.
     * 
     */
    @Import(name="osType")
      private final @Nullable Output<Either<String,OSType>> osType;

    public Output<Either<String,OSType>> osType() {
        return this.osType == null ? Codegen.empty() : this.osType;
    }

    /**
     * Subnet CIDR for the peering.
     * 
     */
    @Import(name="subnetCidr")
      private final @Nullable Output<String> subnetCidr;

    public Output<String> subnetCidr() {
        return this.subnetCidr == null ? Codegen.empty() : this.subnetCidr;
    }

    /**
     * Size of agent VMs.
     * 
     */
    @Import(name="vmSize", required=true)
      private final Output<Either<String,OpenShiftContainerServiceVMSize>> vmSize;

    public Output<Either<String,OpenShiftContainerServiceVMSize>> vmSize() {
        return this.vmSize;
    }

    public OpenShiftManagedClusterMasterPoolProfileArgs(
        Output<Integer> count,
        @Nullable Output<String> name,
        @Nullable Output<Either<String,OSType>> osType,
        @Nullable Output<String> subnetCidr,
        Output<Either<String,OpenShiftContainerServiceVMSize>> vmSize) {
        this.count = Objects.requireNonNull(count, "expected parameter 'count' to be non-null");
        this.name = name;
        this.osType = osType;
        this.subnetCidr = subnetCidr;
        this.vmSize = Objects.requireNonNull(vmSize, "expected parameter 'vmSize' to be non-null");
    }

    private OpenShiftManagedClusterMasterPoolProfileArgs() {
        this.count = Codegen.empty();
        this.name = Codegen.empty();
        this.osType = Codegen.empty();
        this.subnetCidr = Codegen.empty();
        this.vmSize = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(OpenShiftManagedClusterMasterPoolProfileArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<Integer> count;
        private @Nullable Output<String> name;
        private @Nullable Output<Either<String,OSType>> osType;
        private @Nullable Output<String> subnetCidr;
        private Output<Either<String,OpenShiftContainerServiceVMSize>> vmSize;

        public Builder() {
    	      // Empty
        }

        public Builder(OpenShiftManagedClusterMasterPoolProfileArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.count = defaults.count;
    	      this.name = defaults.name;
    	      this.osType = defaults.osType;
    	      this.subnetCidr = defaults.subnetCidr;
    	      this.vmSize = defaults.vmSize;
        }

        public Builder count(Output<Integer> count) {
            this.count = Objects.requireNonNull(count);
            return this;
        }
        public Builder count(Integer count) {
            this.count = Output.of(Objects.requireNonNull(count));
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder osType(@Nullable Output<Either<String,OSType>> osType) {
            this.osType = osType;
            return this;
        }
        public Builder osType(@Nullable Either<String,OSType> osType) {
            this.osType = Codegen.ofNullable(osType);
            return this;
        }
        public Builder subnetCidr(@Nullable Output<String> subnetCidr) {
            this.subnetCidr = subnetCidr;
            return this;
        }
        public Builder subnetCidr(@Nullable String subnetCidr) {
            this.subnetCidr = Codegen.ofNullable(subnetCidr);
            return this;
        }
        public Builder vmSize(Output<Either<String,OpenShiftContainerServiceVMSize>> vmSize) {
            this.vmSize = Objects.requireNonNull(vmSize);
            return this;
        }
        public Builder vmSize(Either<String,OpenShiftContainerServiceVMSize> vmSize) {
            this.vmSize = Output.of(Objects.requireNonNull(vmSize));
            return this;
        }        public OpenShiftManagedClusterMasterPoolProfileArgs build() {
            return new OpenShiftManagedClusterMasterPoolProfileArgs(count, name, osType, subnetCidr, vmSize);
        }
    }
}
