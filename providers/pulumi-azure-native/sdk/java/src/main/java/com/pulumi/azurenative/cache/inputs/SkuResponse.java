// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.cache.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


/**
 * SKU parameters supplied to the create Redis operation.
 * 
 */
public final class SkuResponse extends com.pulumi.resources.InvokeArgs {

    public static final SkuResponse Empty = new SkuResponse();

    /**
     * The size of the Redis cache to deploy. Valid values: for C (Basic/Standard) family (0, 1, 2, 3, 4, 5, 6), for P (Premium) family (1, 2, 3, 4).
     * 
     */
    @Import(name="capacity", required=true)
    private Integer capacity;

    public Integer capacity() {
        return this.capacity;
    }

    /**
     * The SKU family to use. Valid values: (C, P). (C = Basic/Standard, P = Premium).
     * 
     */
    @Import(name="family", required=true)
    private String family;

    public String family() {
        return this.family;
    }

    /**
     * The type of Redis cache to deploy. Valid values: (Basic, Standard, Premium)
     * 
     */
    @Import(name="name", required=true)
    private String name;

    public String name() {
        return this.name;
    }

    private SkuResponse() {}

    private SkuResponse(SkuResponse $) {
        this.capacity = $.capacity;
        this.family = $.family;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SkuResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SkuResponse $;

        public Builder() {
            $ = new SkuResponse();
        }

        public Builder(SkuResponse defaults) {
            $ = new SkuResponse(Objects.requireNonNull(defaults));
        }

        public Builder capacity(Integer capacity) {
            $.capacity = capacity;
            return this;
        }

        public Builder family(String family) {
            $.family = family;
            return this;
        }

        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public SkuResponse build() {
            $.capacity = Objects.requireNonNull($.capacity, "expected parameter 'capacity' to be non-null");
            $.family = Objects.requireNonNull($.family, "expected parameter 'family' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            return $;
        }
    }

}
