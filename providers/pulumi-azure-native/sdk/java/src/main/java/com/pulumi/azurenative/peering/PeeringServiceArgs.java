// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.peering;

import com.pulumi.azurenative.peering.inputs.PeeringServiceSkuArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PeeringServiceArgs extends com.pulumi.resources.ResourceArgs {

    public static final PeeringServiceArgs Empty = new PeeringServiceArgs();

    /**
     * The location of the resource.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The location (state/province) of the customer.
     * 
     */
    @Import(name="peeringServiceLocation")
    private @Nullable Output<String> peeringServiceLocation;

    public Optional<Output<String>> peeringServiceLocation() {
        return Optional.ofNullable(this.peeringServiceLocation);
    }

    /**
     * The name of the peering service.
     * 
     */
    @Import(name="peeringServiceName")
    private @Nullable Output<String> peeringServiceName;

    public Optional<Output<String>> peeringServiceName() {
        return Optional.ofNullable(this.peeringServiceName);
    }

    /**
     * The name of the service provider.
     * 
     */
    @Import(name="peeringServiceProvider")
    private @Nullable Output<String> peeringServiceProvider;

    public Optional<Output<String>> peeringServiceProvider() {
        return Optional.ofNullable(this.peeringServiceProvider);
    }

    /**
     * The backup peering (Microsoft/service provider) location to be used for customer traffic.
     * 
     */
    @Import(name="providerBackupPeeringLocation")
    private @Nullable Output<String> providerBackupPeeringLocation;

    public Optional<Output<String>> providerBackupPeeringLocation() {
        return Optional.ofNullable(this.providerBackupPeeringLocation);
    }

    /**
     * The primary peering (Microsoft/service provider) location to be used for customer traffic.
     * 
     */
    @Import(name="providerPrimaryPeeringLocation")
    private @Nullable Output<String> providerPrimaryPeeringLocation;

    public Optional<Output<String>> providerPrimaryPeeringLocation() {
        return Optional.ofNullable(this.providerPrimaryPeeringLocation);
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The SKU that defines the type of the peering service.
     * 
     */
    @Import(name="sku")
    private @Nullable Output<PeeringServiceSkuArgs> sku;

    public Optional<Output<PeeringServiceSkuArgs>> sku() {
        return Optional.ofNullable(this.sku);
    }

    /**
     * The resource tags.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private PeeringServiceArgs() {}

    private PeeringServiceArgs(PeeringServiceArgs $) {
        this.location = $.location;
        this.peeringServiceLocation = $.peeringServiceLocation;
        this.peeringServiceName = $.peeringServiceName;
        this.peeringServiceProvider = $.peeringServiceProvider;
        this.providerBackupPeeringLocation = $.providerBackupPeeringLocation;
        this.providerPrimaryPeeringLocation = $.providerPrimaryPeeringLocation;
        this.resourceGroupName = $.resourceGroupName;
        this.sku = $.sku;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PeeringServiceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PeeringServiceArgs $;

        public Builder() {
            $ = new PeeringServiceArgs();
        }

        public Builder(PeeringServiceArgs defaults) {
            $ = new PeeringServiceArgs(Objects.requireNonNull(defaults));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder peeringServiceLocation(@Nullable Output<String> peeringServiceLocation) {
            $.peeringServiceLocation = peeringServiceLocation;
            return this;
        }

        public Builder peeringServiceLocation(String peeringServiceLocation) {
            return peeringServiceLocation(Output.of(peeringServiceLocation));
        }

        public Builder peeringServiceName(@Nullable Output<String> peeringServiceName) {
            $.peeringServiceName = peeringServiceName;
            return this;
        }

        public Builder peeringServiceName(String peeringServiceName) {
            return peeringServiceName(Output.of(peeringServiceName));
        }

        public Builder peeringServiceProvider(@Nullable Output<String> peeringServiceProvider) {
            $.peeringServiceProvider = peeringServiceProvider;
            return this;
        }

        public Builder peeringServiceProvider(String peeringServiceProvider) {
            return peeringServiceProvider(Output.of(peeringServiceProvider));
        }

        public Builder providerBackupPeeringLocation(@Nullable Output<String> providerBackupPeeringLocation) {
            $.providerBackupPeeringLocation = providerBackupPeeringLocation;
            return this;
        }

        public Builder providerBackupPeeringLocation(String providerBackupPeeringLocation) {
            return providerBackupPeeringLocation(Output.of(providerBackupPeeringLocation));
        }

        public Builder providerPrimaryPeeringLocation(@Nullable Output<String> providerPrimaryPeeringLocation) {
            $.providerPrimaryPeeringLocation = providerPrimaryPeeringLocation;
            return this;
        }

        public Builder providerPrimaryPeeringLocation(String providerPrimaryPeeringLocation) {
            return providerPrimaryPeeringLocation(Output.of(providerPrimaryPeeringLocation));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder sku(@Nullable Output<PeeringServiceSkuArgs> sku) {
            $.sku = sku;
            return this;
        }

        public Builder sku(PeeringServiceSkuArgs sku) {
            return sku(Output.of(sku));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public PeeringServiceArgs build() {
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
