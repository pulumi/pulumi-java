// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.videoanalyzer.inputs;

import com.pulumi.azurenative.videoanalyzer.inputs.PemCertificateListArgs;
import com.pulumi.azurenative.videoanalyzer.inputs.SecureIotDeviceRemoteTunnelArgs;
import com.pulumi.azurenative.videoanalyzer.inputs.TlsValidationOptionsArgs;
import com.pulumi.azurenative.videoanalyzer.inputs.UsernamePasswordCredentialsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * TLS endpoint describes an endpoint that the pipeline can connect to over TLS transport (data is encrypted in transit).
 * 
 */
public final class TlsEndpointArgs extends com.pulumi.resources.ResourceArgs {

    public static final TlsEndpointArgs Empty = new TlsEndpointArgs();

    /**
     * Credentials to be presented to the endpoint.
     * 
     */
    @Import(name="credentials", required=true)
      private final Output<UsernamePasswordCredentialsArgs> credentials;

    public Output<UsernamePasswordCredentialsArgs> credentials() {
        return this.credentials;
    }

    /**
     * List of trusted certificate authorities when authenticating a TLS connection. A null list designates that Azure Video Analyzer's list of trusted authorities should be used.
     * 
     */
    @Import(name="trustedCertificates")
      private final @Nullable Output<PemCertificateListArgs> trustedCertificates;

    public Output<PemCertificateListArgs> trustedCertificates() {
        return this.trustedCertificates == null ? Codegen.empty() : this.trustedCertificates;
    }

    /**
     * Describes the tunnel through which Video Analyzer can connect to the endpoint URL. This is an optional property, typically used when the endpoint is behind a firewall.
     * 
     */
    @Import(name="tunnel")
      private final @Nullable Output<SecureIotDeviceRemoteTunnelArgs> tunnel;

    public Output<SecureIotDeviceRemoteTunnelArgs> tunnel() {
        return this.tunnel == null ? Codegen.empty() : this.tunnel;
    }

    /**
     * The discriminator for derived types.
     * Expected value is '#Microsoft.VideoAnalyzer.TlsEndpoint'.
     * 
     */
    @Import(name="type", required=true)
      private final Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    /**
     * The endpoint URL for Video Analyzer to connect to.
     * 
     */
    @Import(name="url", required=true)
      private final Output<String> url;

    public Output<String> url() {
        return this.url;
    }

    /**
     * Validation options to use when authenticating a TLS connection. By default, strict validation is used.
     * 
     */
    @Import(name="validationOptions")
      private final @Nullable Output<TlsValidationOptionsArgs> validationOptions;

    public Output<TlsValidationOptionsArgs> validationOptions() {
        return this.validationOptions == null ? Codegen.empty() : this.validationOptions;
    }

    public TlsEndpointArgs(
        Output<UsernamePasswordCredentialsArgs> credentials,
        @Nullable Output<PemCertificateListArgs> trustedCertificates,
        @Nullable Output<SecureIotDeviceRemoteTunnelArgs> tunnel,
        Output<String> type,
        Output<String> url,
        @Nullable Output<TlsValidationOptionsArgs> validationOptions) {
        this.credentials = Objects.requireNonNull(credentials, "expected parameter 'credentials' to be non-null");
        this.trustedCertificates = trustedCertificates;
        this.tunnel = tunnel;
        this.type = Codegen.stringProp("type").output().arg(type).require();
        this.url = Objects.requireNonNull(url, "expected parameter 'url' to be non-null");
        this.validationOptions = validationOptions;
    }

    private TlsEndpointArgs() {
        this.credentials = Codegen.empty();
        this.trustedCertificates = Codegen.empty();
        this.tunnel = Codegen.empty();
        this.type = Codegen.empty();
        this.url = Codegen.empty();
        this.validationOptions = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TlsEndpointArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<UsernamePasswordCredentialsArgs> credentials;
        private @Nullable Output<PemCertificateListArgs> trustedCertificates;
        private @Nullable Output<SecureIotDeviceRemoteTunnelArgs> tunnel;
        private Output<String> type;
        private Output<String> url;
        private @Nullable Output<TlsValidationOptionsArgs> validationOptions;

        public Builder() {
    	      // Empty
        }

        public Builder(TlsEndpointArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.credentials = defaults.credentials;
    	      this.trustedCertificates = defaults.trustedCertificates;
    	      this.tunnel = defaults.tunnel;
    	      this.type = defaults.type;
    	      this.url = defaults.url;
    	      this.validationOptions = defaults.validationOptions;
        }

        public Builder credentials(Output<UsernamePasswordCredentialsArgs> credentials) {
            this.credentials = Objects.requireNonNull(credentials);
            return this;
        }
        public Builder credentials(UsernamePasswordCredentialsArgs credentials) {
            this.credentials = Output.of(Objects.requireNonNull(credentials));
            return this;
        }
        public Builder trustedCertificates(@Nullable Output<PemCertificateListArgs> trustedCertificates) {
            this.trustedCertificates = trustedCertificates;
            return this;
        }
        public Builder trustedCertificates(@Nullable PemCertificateListArgs trustedCertificates) {
            this.trustedCertificates = Codegen.ofNullable(trustedCertificates);
            return this;
        }
        public Builder tunnel(@Nullable Output<SecureIotDeviceRemoteTunnelArgs> tunnel) {
            this.tunnel = tunnel;
            return this;
        }
        public Builder tunnel(@Nullable SecureIotDeviceRemoteTunnelArgs tunnel) {
            this.tunnel = Codegen.ofNullable(tunnel);
            return this;
        }
        public Builder type(Output<String> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder type(String type) {
            this.type = Output.of(Objects.requireNonNull(type));
            return this;
        }
        public Builder url(Output<String> url) {
            this.url = Objects.requireNonNull(url);
            return this;
        }
        public Builder url(String url) {
            this.url = Output.of(Objects.requireNonNull(url));
            return this;
        }
        public Builder validationOptions(@Nullable Output<TlsValidationOptionsArgs> validationOptions) {
            this.validationOptions = validationOptions;
            return this;
        }
        public Builder validationOptions(@Nullable TlsValidationOptionsArgs validationOptions) {
            this.validationOptions = Codegen.ofNullable(validationOptions);
            return this;
        }        public TlsEndpointArgs build() {
            return new TlsEndpointArgs(credentials, trustedCertificates, tunnel, type, url, validationOptions);
        }
    }
}
