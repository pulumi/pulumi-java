// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.storsimple;

import com.pulumi.azurenative.storsimple.inputs.ManagerIntrinsicSettingsArgs;
import com.pulumi.azurenative.storsimple.inputs.ManagerSkuArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ManagerArgs extends com.pulumi.resources.ResourceArgs {

    public static final ManagerArgs Empty = new ManagerArgs();

    /**
     * Represents the type of StorSimple Manager.
     * 
     */
    @Import(name="cisIntrinsicSettings")
    private @Nullable Output<ManagerIntrinsicSettingsArgs> cisIntrinsicSettings;

    /**
     * @return Represents the type of StorSimple Manager.
     * 
     */
    public Optional<Output<ManagerIntrinsicSettingsArgs>> cisIntrinsicSettings() {
        return Optional.ofNullable(this.cisIntrinsicSettings);
    }

    /**
     * The geo location of the resource.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The geo location of the resource.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The manager name
     * 
     */
    @Import(name="managerName")
    private @Nullable Output<String> managerName;

    /**
     * @return The manager name
     * 
     */
    public Optional<Output<String>> managerName() {
        return Optional.ofNullable(this.managerName);
    }

    /**
     * Specifies the state of the resource as it is getting provisioned. Value of &#34;Succeeded&#34; means the Manager was successfully created.
     * 
     */
    @Import(name="provisioningState")
    private @Nullable Output<String> provisioningState;

    /**
     * @return Specifies the state of the resource as it is getting provisioned. Value of &#34;Succeeded&#34; means the Manager was successfully created.
     * 
     */
    public Optional<Output<String>> provisioningState() {
        return Optional.ofNullable(this.provisioningState);
    }

    /**
     * The resource group name
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The resource group name
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Specifies the Sku.
     * 
     */
    @Import(name="sku")
    private @Nullable Output<ManagerSkuArgs> sku;

    /**
     * @return Specifies the Sku.
     * 
     */
    public Optional<Output<ManagerSkuArgs>> sku() {
        return Optional.ofNullable(this.sku);
    }

    /**
     * The tags attached to the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return The tags attached to the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private ManagerArgs() {}

    private ManagerArgs(ManagerArgs $) {
        this.cisIntrinsicSettings = $.cisIntrinsicSettings;
        this.location = $.location;
        this.managerName = $.managerName;
        this.provisioningState = $.provisioningState;
        this.resourceGroupName = $.resourceGroupName;
        this.sku = $.sku;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagerArgs $;

        public Builder() {
            $ = new ManagerArgs();
        }

        public Builder(ManagerArgs defaults) {
            $ = new ManagerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cisIntrinsicSettings Represents the type of StorSimple Manager.
         * 
         * @return builder
         * 
         */
        public Builder cisIntrinsicSettings(@Nullable Output<ManagerIntrinsicSettingsArgs> cisIntrinsicSettings) {
            $.cisIntrinsicSettings = cisIntrinsicSettings;
            return this;
        }

        /**
         * @param cisIntrinsicSettings Represents the type of StorSimple Manager.
         * 
         * @return builder
         * 
         */
        public Builder cisIntrinsicSettings(ManagerIntrinsicSettingsArgs cisIntrinsicSettings) {
            return cisIntrinsicSettings(Output.of(cisIntrinsicSettings));
        }

        /**
         * @param location The geo location of the resource.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The geo location of the resource.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param managerName The manager name
         * 
         * @return builder
         * 
         */
        public Builder managerName(@Nullable Output<String> managerName) {
            $.managerName = managerName;
            return this;
        }

        /**
         * @param managerName The manager name
         * 
         * @return builder
         * 
         */
        public Builder managerName(String managerName) {
            return managerName(Output.of(managerName));
        }

        /**
         * @param provisioningState Specifies the state of the resource as it is getting provisioned. Value of &#34;Succeeded&#34; means the Manager was successfully created.
         * 
         * @return builder
         * 
         */
        public Builder provisioningState(@Nullable Output<String> provisioningState) {
            $.provisioningState = provisioningState;
            return this;
        }

        /**
         * @param provisioningState Specifies the state of the resource as it is getting provisioned. Value of &#34;Succeeded&#34; means the Manager was successfully created.
         * 
         * @return builder
         * 
         */
        public Builder provisioningState(String provisioningState) {
            return provisioningState(Output.of(provisioningState));
        }

        /**
         * @param resourceGroupName The resource group name
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The resource group name
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param sku Specifies the Sku.
         * 
         * @return builder
         * 
         */
        public Builder sku(@Nullable Output<ManagerSkuArgs> sku) {
            $.sku = sku;
            return this;
        }

        /**
         * @param sku Specifies the Sku.
         * 
         * @return builder
         * 
         */
        public Builder sku(ManagerSkuArgs sku) {
            return sku(Output.of(sku));
        }

        /**
         * @param tags The tags attached to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The tags attached to the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public ManagerArgs build() {
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
