// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.media.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Class to specify configurations of FairPlay in Streaming Policy
 * 
 */
public final class StreamingPolicyFairPlayConfigurationResponse extends com.pulumi.resources.InvokeArgs {

    public static final StreamingPolicyFairPlayConfigurationResponse Empty = new StreamingPolicyFairPlayConfigurationResponse();

    /**
     * All license to be persistent or not
     * 
     */
    @Import(name="allowPersistentLicense", required=true)
    private Boolean allowPersistentLicense;

    /**
     * @return All license to be persistent or not
     * 
     */
    public Boolean allowPersistentLicense() {
        return this.allowPersistentLicense;
    }

    /**
     * Template for the URL of the custom service delivering licenses to end user players.  Not required when using Azure Media Services for issuing licenses.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
     * 
     */
    @Import(name="customLicenseAcquisitionUrlTemplate")
    private @Nullable String customLicenseAcquisitionUrlTemplate;

    /**
     * @return Template for the URL of the custom service delivering licenses to end user players.  Not required when using Azure Media Services for issuing licenses.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
     * 
     */
    public Optional<String> customLicenseAcquisitionUrlTemplate() {
        return Optional.ofNullable(this.customLicenseAcquisitionUrlTemplate);
    }

    private StreamingPolicyFairPlayConfigurationResponse() {}

    private StreamingPolicyFairPlayConfigurationResponse(StreamingPolicyFairPlayConfigurationResponse $) {
        this.allowPersistentLicense = $.allowPersistentLicense;
        this.customLicenseAcquisitionUrlTemplate = $.customLicenseAcquisitionUrlTemplate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StreamingPolicyFairPlayConfigurationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StreamingPolicyFairPlayConfigurationResponse $;

        public Builder() {
            $ = new StreamingPolicyFairPlayConfigurationResponse();
        }

        public Builder(StreamingPolicyFairPlayConfigurationResponse defaults) {
            $ = new StreamingPolicyFairPlayConfigurationResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowPersistentLicense All license to be persistent or not
         * 
         * @return builder
         * 
         */
        public Builder allowPersistentLicense(Boolean allowPersistentLicense) {
            $.allowPersistentLicense = allowPersistentLicense;
            return this;
        }

        /**
         * @param customLicenseAcquisitionUrlTemplate Template for the URL of the custom service delivering licenses to end user players.  Not required when using Azure Media Services for issuing licenses.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
         * 
         * @return builder
         * 
         */
        public Builder customLicenseAcquisitionUrlTemplate(@Nullable String customLicenseAcquisitionUrlTemplate) {
            $.customLicenseAcquisitionUrlTemplate = customLicenseAcquisitionUrlTemplate;
            return this;
        }

        public StreamingPolicyFairPlayConfigurationResponse build() {
            $.allowPersistentLicense = Objects.requireNonNull($.allowPersistentLicense, "expected parameter 'allowPersistentLicense' to be non-null");
            return $;
        }
    }

}
