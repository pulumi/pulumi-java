// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.devtestlab;

import com.pulumi.azurenative.devtestlab.inputs.SubnetArgs;
import com.pulumi.azurenative.devtestlab.inputs.SubnetOverrideArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VirtualNetworkArgs extends com.pulumi.resources.ResourceArgs {

    public static final VirtualNetworkArgs Empty = new VirtualNetworkArgs();

    /**
     * The allowed subnets of the virtual network.
     * 
     */
    @Import(name="allowedSubnets")
    private @Nullable Output<List<SubnetArgs>> allowedSubnets;

    public Optional<Output<List<SubnetArgs>>> allowedSubnets() {
        return Optional.ofNullable(this.allowedSubnets);
    }

    /**
     * The description of the virtual network.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The Microsoft.Network resource identifier of the virtual network.
     * 
     */
    @Import(name="externalProviderResourceId")
    private @Nullable Output<String> externalProviderResourceId;

    public Optional<Output<String>> externalProviderResourceId() {
        return Optional.ofNullable(this.externalProviderResourceId);
    }

    /**
     * The name of the lab.
     * 
     */
    @Import(name="labName", required=true)
    private Output<String> labName;

    public Output<String> labName() {
        return this.labName;
    }

    /**
     * The location of the resource.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name of the virtual network.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The subnet overrides of the virtual network.
     * 
     */
    @Import(name="subnetOverrides")
    private @Nullable Output<List<SubnetOverrideArgs>> subnetOverrides;

    public Optional<Output<List<SubnetOverrideArgs>>> subnetOverrides() {
        return Optional.ofNullable(this.subnetOverrides);
    }

    /**
     * The tags of the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private VirtualNetworkArgs() {}

    private VirtualNetworkArgs(VirtualNetworkArgs $) {
        this.allowedSubnets = $.allowedSubnets;
        this.description = $.description;
        this.externalProviderResourceId = $.externalProviderResourceId;
        this.labName = $.labName;
        this.location = $.location;
        this.name = $.name;
        this.resourceGroupName = $.resourceGroupName;
        this.subnetOverrides = $.subnetOverrides;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VirtualNetworkArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VirtualNetworkArgs $;

        public Builder() {
            $ = new VirtualNetworkArgs();
        }

        public Builder(VirtualNetworkArgs defaults) {
            $ = new VirtualNetworkArgs(Objects.requireNonNull(defaults));
        }

        public Builder allowedSubnets(@Nullable Output<List<SubnetArgs>> allowedSubnets) {
            $.allowedSubnets = allowedSubnets;
            return this;
        }

        public Builder allowedSubnets(List<SubnetArgs> allowedSubnets) {
            return allowedSubnets(Output.of(allowedSubnets));
        }

        public Builder allowedSubnets(SubnetArgs... allowedSubnets) {
            return allowedSubnets(List.of(allowedSubnets));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder externalProviderResourceId(@Nullable Output<String> externalProviderResourceId) {
            $.externalProviderResourceId = externalProviderResourceId;
            return this;
        }

        public Builder externalProviderResourceId(String externalProviderResourceId) {
            return externalProviderResourceId(Output.of(externalProviderResourceId));
        }

        public Builder labName(Output<String> labName) {
            $.labName = labName;
            return this;
        }

        public Builder labName(String labName) {
            return labName(Output.of(labName));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder subnetOverrides(@Nullable Output<List<SubnetOverrideArgs>> subnetOverrides) {
            $.subnetOverrides = subnetOverrides;
            return this;
        }

        public Builder subnetOverrides(List<SubnetOverrideArgs> subnetOverrides) {
            return subnetOverrides(Output.of(subnetOverrides));
        }

        public Builder subnetOverrides(SubnetOverrideArgs... subnetOverrides) {
            return subnetOverrides(List.of(subnetOverrides));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public VirtualNetworkArgs build() {
            $.labName = Objects.requireNonNull($.labName, "expected parameter 'labName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
