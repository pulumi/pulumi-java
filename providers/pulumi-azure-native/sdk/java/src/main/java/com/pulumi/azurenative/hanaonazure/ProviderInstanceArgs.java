// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.hanaonazure;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ProviderInstanceArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProviderInstanceArgs Empty = new ProviderInstanceArgs();

    /**
     * A JSON string containing metadata of the provider instance.
     * 
     */
    @Import(name="metadata")
      private final @Nullable Output<String> metadata;

    public Output<String> metadata() {
        return this.metadata == null ? Codegen.empty() : this.metadata;
    }

    /**
     * A JSON string containing the properties of the provider instance.
     * 
     */
    @Import(name="properties")
      private final @Nullable Output<String> properties;

    public Output<String> properties() {
        return this.properties == null ? Codegen.empty() : this.properties;
    }

    /**
     * Name of the provider instance.
     * 
     */
    @Import(name="providerInstanceName")
      private final @Nullable Output<String> providerInstanceName;

    public Output<String> providerInstanceName() {
        return this.providerInstanceName == null ? Codegen.empty() : this.providerInstanceName;
    }

    /**
     * Name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Name of the SAP monitor resource.
     * 
     */
    @Import(name="sapMonitorName", required=true)
      private final Output<String> sapMonitorName;

    public Output<String> sapMonitorName() {
        return this.sapMonitorName;
    }

    /**
     * The type of provider instance.
     * 
     */
    @Import(name="type")
      private final @Nullable Output<String> type;

    public Output<String> type() {
        return this.type == null ? Codegen.empty() : this.type;
    }

    public ProviderInstanceArgs(
        @Nullable Output<String> metadata,
        @Nullable Output<String> properties,
        @Nullable Output<String> providerInstanceName,
        Output<String> resourceGroupName,
        Output<String> sapMonitorName,
        @Nullable Output<String> type) {
        this.metadata = metadata;
        this.properties = properties;
        this.providerInstanceName = providerInstanceName;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.sapMonitorName = Objects.requireNonNull(sapMonitorName, "expected parameter 'sapMonitorName' to be non-null");
        this.type = type;
    }

    private ProviderInstanceArgs() {
        this.metadata = Codegen.empty();
        this.properties = Codegen.empty();
        this.providerInstanceName = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.sapMonitorName = Codegen.empty();
        this.type = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ProviderInstanceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> metadata;
        private @Nullable Output<String> properties;
        private @Nullable Output<String> providerInstanceName;
        private Output<String> resourceGroupName;
        private Output<String> sapMonitorName;
        private @Nullable Output<String> type;

        public Builder() {
    	      // Empty
        }

        public Builder(ProviderInstanceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.metadata = defaults.metadata;
    	      this.properties = defaults.properties;
    	      this.providerInstanceName = defaults.providerInstanceName;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.sapMonitorName = defaults.sapMonitorName;
    	      this.type = defaults.type;
        }

        public Builder metadata(@Nullable Output<String> metadata) {
            this.metadata = metadata;
            return this;
        }
        public Builder metadata(@Nullable String metadata) {
            this.metadata = Codegen.ofNullable(metadata);
            return this;
        }
        public Builder properties(@Nullable Output<String> properties) {
            this.properties = properties;
            return this;
        }
        public Builder properties(@Nullable String properties) {
            this.properties = Codegen.ofNullable(properties);
            return this;
        }
        public Builder providerInstanceName(@Nullable Output<String> providerInstanceName) {
            this.providerInstanceName = providerInstanceName;
            return this;
        }
        public Builder providerInstanceName(@Nullable String providerInstanceName) {
            this.providerInstanceName = Codegen.ofNullable(providerInstanceName);
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder sapMonitorName(Output<String> sapMonitorName) {
            this.sapMonitorName = Objects.requireNonNull(sapMonitorName);
            return this;
        }
        public Builder sapMonitorName(String sapMonitorName) {
            this.sapMonitorName = Output.of(Objects.requireNonNull(sapMonitorName));
            return this;
        }
        public Builder type(@Nullable Output<String> type) {
            this.type = type;
            return this;
        }
        public Builder type(@Nullable String type) {
            this.type = Codegen.ofNullable(type);
            return this;
        }        public ProviderInstanceArgs build() {
            return new ProviderInstanceArgs(metadata, properties, providerInstanceName, resourceGroupName, sapMonitorName, type);
        }
    }
}
