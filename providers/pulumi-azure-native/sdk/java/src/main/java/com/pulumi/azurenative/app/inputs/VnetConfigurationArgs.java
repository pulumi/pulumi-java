// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.app.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Configuration properties for apps environment to join a Virtual Network
 * 
 */
public final class VnetConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final VnetConfigurationArgs Empty = new VnetConfigurationArgs();

    /**
     * CIDR notation IP range assigned to the Docker bridge, network. Must not overlap with any other provided IP ranges.
     * 
     */
    @Import(name="dockerBridgeCidr")
    private @Nullable Output<String> dockerBridgeCidr;

    /**
     * @return CIDR notation IP range assigned to the Docker bridge, network. Must not overlap with any other provided IP ranges.
     * 
     */
    public Optional<Output<String>> dockerBridgeCidr() {
        return Optional.ofNullable(this.dockerBridgeCidr);
    }

    /**
     * Resource ID of a subnet for infrastructure components. This subnet must be in the same VNET as the subnet defined in runtimeSubnetId. Must not overlap with any other provided IP ranges.
     * 
     */
    @Import(name="infrastructureSubnetId")
    private @Nullable Output<String> infrastructureSubnetId;

    /**
     * @return Resource ID of a subnet for infrastructure components. This subnet must be in the same VNET as the subnet defined in runtimeSubnetId. Must not overlap with any other provided IP ranges.
     * 
     */
    public Optional<Output<String>> infrastructureSubnetId() {
        return Optional.ofNullable(this.infrastructureSubnetId);
    }

    /**
     * Boolean indicating the environment only has an internal load balancer. These environments do not have a public static IP resource, must provide ControlPlaneSubnetResourceId and AppSubnetResourceId if enabling this property
     * 
     */
    @Import(name="internal")
    private @Nullable Output<Boolean> internal;

    /**
     * @return Boolean indicating the environment only has an internal load balancer. These environments do not have a public static IP resource, must provide ControlPlaneSubnetResourceId and AppSubnetResourceId if enabling this property
     * 
     */
    public Optional<Output<Boolean>> internal() {
        return Optional.ofNullable(this.internal);
    }

    /**
     * IP range in CIDR notation that can be reserved for environment infrastructure IP addresses. Must not overlap with any other provided IP ranges.
     * 
     */
    @Import(name="platformReservedCidr")
    private @Nullable Output<String> platformReservedCidr;

    /**
     * @return IP range in CIDR notation that can be reserved for environment infrastructure IP addresses. Must not overlap with any other provided IP ranges.
     * 
     */
    public Optional<Output<String>> platformReservedCidr() {
        return Optional.ofNullable(this.platformReservedCidr);
    }

    /**
     *  An IP address from the IP range defined by platformReservedCidr that will be reserved for the internal DNS server.
     * 
     */
    @Import(name="platformReservedDnsIP")
    private @Nullable Output<String> platformReservedDnsIP;

    /**
     * @return  An IP address from the IP range defined by platformReservedCidr that will be reserved for the internal DNS server.
     * 
     */
    public Optional<Output<String>> platformReservedDnsIP() {
        return Optional.ofNullable(this.platformReservedDnsIP);
    }

    /**
     * Resource ID of a subnet that Container App containers are injected into. This subnet must be in the same VNET as the subnet defined in infrastructureSubnetId. Must not overlap with any other provided IP ranges.
     * 
     */
    @Import(name="runtimeSubnetId")
    private @Nullable Output<String> runtimeSubnetId;

    /**
     * @return Resource ID of a subnet that Container App containers are injected into. This subnet must be in the same VNET as the subnet defined in infrastructureSubnetId. Must not overlap with any other provided IP ranges.
     * 
     */
    public Optional<Output<String>> runtimeSubnetId() {
        return Optional.ofNullable(this.runtimeSubnetId);
    }

    private VnetConfigurationArgs() {}

    private VnetConfigurationArgs(VnetConfigurationArgs $) {
        this.dockerBridgeCidr = $.dockerBridgeCidr;
        this.infrastructureSubnetId = $.infrastructureSubnetId;
        this.internal = $.internal;
        this.platformReservedCidr = $.platformReservedCidr;
        this.platformReservedDnsIP = $.platformReservedDnsIP;
        this.runtimeSubnetId = $.runtimeSubnetId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VnetConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VnetConfigurationArgs $;

        public Builder() {
            $ = new VnetConfigurationArgs();
        }

        public Builder(VnetConfigurationArgs defaults) {
            $ = new VnetConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dockerBridgeCidr CIDR notation IP range assigned to the Docker bridge, network. Must not overlap with any other provided IP ranges.
         * 
         * @return builder
         * 
         */
        public Builder dockerBridgeCidr(@Nullable Output<String> dockerBridgeCidr) {
            $.dockerBridgeCidr = dockerBridgeCidr;
            return this;
        }

        /**
         * @param dockerBridgeCidr CIDR notation IP range assigned to the Docker bridge, network. Must not overlap with any other provided IP ranges.
         * 
         * @return builder
         * 
         */
        public Builder dockerBridgeCidr(String dockerBridgeCidr) {
            return dockerBridgeCidr(Output.of(dockerBridgeCidr));
        }

        /**
         * @param infrastructureSubnetId Resource ID of a subnet for infrastructure components. This subnet must be in the same VNET as the subnet defined in runtimeSubnetId. Must not overlap with any other provided IP ranges.
         * 
         * @return builder
         * 
         */
        public Builder infrastructureSubnetId(@Nullable Output<String> infrastructureSubnetId) {
            $.infrastructureSubnetId = infrastructureSubnetId;
            return this;
        }

        /**
         * @param infrastructureSubnetId Resource ID of a subnet for infrastructure components. This subnet must be in the same VNET as the subnet defined in runtimeSubnetId. Must not overlap with any other provided IP ranges.
         * 
         * @return builder
         * 
         */
        public Builder infrastructureSubnetId(String infrastructureSubnetId) {
            return infrastructureSubnetId(Output.of(infrastructureSubnetId));
        }

        /**
         * @param internal Boolean indicating the environment only has an internal load balancer. These environments do not have a public static IP resource, must provide ControlPlaneSubnetResourceId and AppSubnetResourceId if enabling this property
         * 
         * @return builder
         * 
         */
        public Builder internal(@Nullable Output<Boolean> internal) {
            $.internal = internal;
            return this;
        }

        /**
         * @param internal Boolean indicating the environment only has an internal load balancer. These environments do not have a public static IP resource, must provide ControlPlaneSubnetResourceId and AppSubnetResourceId if enabling this property
         * 
         * @return builder
         * 
         */
        public Builder internal(Boolean internal) {
            return internal(Output.of(internal));
        }

        /**
         * @param platformReservedCidr IP range in CIDR notation that can be reserved for environment infrastructure IP addresses. Must not overlap with any other provided IP ranges.
         * 
         * @return builder
         * 
         */
        public Builder platformReservedCidr(@Nullable Output<String> platformReservedCidr) {
            $.platformReservedCidr = platformReservedCidr;
            return this;
        }

        /**
         * @param platformReservedCidr IP range in CIDR notation that can be reserved for environment infrastructure IP addresses. Must not overlap with any other provided IP ranges.
         * 
         * @return builder
         * 
         */
        public Builder platformReservedCidr(String platformReservedCidr) {
            return platformReservedCidr(Output.of(platformReservedCidr));
        }

        /**
         * @param platformReservedDnsIP  An IP address from the IP range defined by platformReservedCidr that will be reserved for the internal DNS server.
         * 
         * @return builder
         * 
         */
        public Builder platformReservedDnsIP(@Nullable Output<String> platformReservedDnsIP) {
            $.platformReservedDnsIP = platformReservedDnsIP;
            return this;
        }

        /**
         * @param platformReservedDnsIP  An IP address from the IP range defined by platformReservedCidr that will be reserved for the internal DNS server.
         * 
         * @return builder
         * 
         */
        public Builder platformReservedDnsIP(String platformReservedDnsIP) {
            return platformReservedDnsIP(Output.of(platformReservedDnsIP));
        }

        /**
         * @param runtimeSubnetId Resource ID of a subnet that Container App containers are injected into. This subnet must be in the same VNET as the subnet defined in infrastructureSubnetId. Must not overlap with any other provided IP ranges.
         * 
         * @return builder
         * 
         */
        public Builder runtimeSubnetId(@Nullable Output<String> runtimeSubnetId) {
            $.runtimeSubnetId = runtimeSubnetId;
            return this;
        }

        /**
         * @param runtimeSubnetId Resource ID of a subnet that Container App containers are injected into. This subnet must be in the same VNET as the subnet defined in infrastructureSubnetId. Must not overlap with any other provided IP ranges.
         * 
         * @return builder
         * 
         */
        public Builder runtimeSubnetId(String runtimeSubnetId) {
            return runtimeSubnetId(Output.of(runtimeSubnetId));
        }

        public VnetConfigurationArgs build() {
            return $;
        }
    }

}
