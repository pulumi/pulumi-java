// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network;

import com.pulumi.azurenative.network.enums.ConnectivityTopology;
import com.pulumi.azurenative.network.enums.DeleteExistingPeering;
import com.pulumi.azurenative.network.enums.IsGlobal;
import com.pulumi.azurenative.network.inputs.ConnectivityGroupItemArgs;
import com.pulumi.azurenative.network.inputs.HubArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectivityConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectivityConfigurationArgs Empty = new ConnectivityConfigurationArgs();

    /**
     * Groups for configuration
     * 
     */
    @Import(name="appliesToGroups")
    private @Nullable Output<List<ConnectivityGroupItemArgs>> appliesToGroups;

    public Optional<Output<List<ConnectivityGroupItemArgs>>> appliesToGroups() {
        return Optional.ofNullable(this.appliesToGroups);
    }

    /**
     * The name of the network manager connectivity configuration.
     * 
     */
    @Import(name="configurationName")
    private @Nullable Output<String> configurationName;

    public Optional<Output<String>> configurationName() {
        return Optional.ofNullable(this.configurationName);
    }

    /**
     * Connectivity topology type.
     * 
     */
    @Import(name="connectivityTopology", required=true)
    private Output<Either<String,ConnectivityTopology>> connectivityTopology;

    public Output<Either<String,ConnectivityTopology>> connectivityTopology() {
        return this.connectivityTopology;
    }

    /**
     * Flag if need to remove current existing peerings.
     * 
     */
    @Import(name="deleteExistingPeering")
    private @Nullable Output<Either<String,DeleteExistingPeering>> deleteExistingPeering;

    public Optional<Output<Either<String,DeleteExistingPeering>>> deleteExistingPeering() {
        return Optional.ofNullable(this.deleteExistingPeering);
    }

    /**
     * A description of the connectivity configuration.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * A friendly name for the resource.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * List of hubItems
     * 
     */
    @Import(name="hubs")
    private @Nullable Output<List<HubArgs>> hubs;

    public Optional<Output<List<HubArgs>>> hubs() {
        return Optional.ofNullable(this.hubs);
    }

    /**
     * Flag if global mesh is supported.
     * 
     */
    @Import(name="isGlobal")
    private @Nullable Output<Either<String,IsGlobal>> isGlobal;

    public Optional<Output<Either<String,IsGlobal>>> isGlobal() {
        return Optional.ofNullable(this.isGlobal);
    }

    /**
     * The name of the network manager.
     * 
     */
    @Import(name="networkManagerName", required=true)
    private Output<String> networkManagerName;

    public Output<String> networkManagerName() {
        return this.networkManagerName;
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    private ConnectivityConfigurationArgs() {}

    private ConnectivityConfigurationArgs(ConnectivityConfigurationArgs $) {
        this.appliesToGroups = $.appliesToGroups;
        this.configurationName = $.configurationName;
        this.connectivityTopology = $.connectivityTopology;
        this.deleteExistingPeering = $.deleteExistingPeering;
        this.description = $.description;
        this.displayName = $.displayName;
        this.hubs = $.hubs;
        this.isGlobal = $.isGlobal;
        this.networkManagerName = $.networkManagerName;
        this.resourceGroupName = $.resourceGroupName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectivityConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectivityConfigurationArgs $;

        public Builder() {
            $ = new ConnectivityConfigurationArgs();
        }

        public Builder(ConnectivityConfigurationArgs defaults) {
            $ = new ConnectivityConfigurationArgs(Objects.requireNonNull(defaults));
        }

        public Builder appliesToGroups(@Nullable Output<List<ConnectivityGroupItemArgs>> appliesToGroups) {
            $.appliesToGroups = appliesToGroups;
            return this;
        }

        public Builder appliesToGroups(List<ConnectivityGroupItemArgs> appliesToGroups) {
            return appliesToGroups(Output.of(appliesToGroups));
        }

        public Builder appliesToGroups(ConnectivityGroupItemArgs... appliesToGroups) {
            return appliesToGroups(List.of(appliesToGroups));
        }

        public Builder configurationName(@Nullable Output<String> configurationName) {
            $.configurationName = configurationName;
            return this;
        }

        public Builder configurationName(String configurationName) {
            return configurationName(Output.of(configurationName));
        }

        public Builder connectivityTopology(Output<Either<String,ConnectivityTopology>> connectivityTopology) {
            $.connectivityTopology = connectivityTopology;
            return this;
        }

        public Builder connectivityTopology(Either<String,ConnectivityTopology> connectivityTopology) {
            return connectivityTopology(Output.of(connectivityTopology));
        }

        public Builder connectivityTopology(String connectivityTopology) {
            return connectivityTopology(Either.ofLeft(connectivityTopology));
        }

        public Builder connectivityTopology(ConnectivityTopology connectivityTopology) {
            return connectivityTopology(Either.ofRight(connectivityTopology));
        }

        public Builder deleteExistingPeering(@Nullable Output<Either<String,DeleteExistingPeering>> deleteExistingPeering) {
            $.deleteExistingPeering = deleteExistingPeering;
            return this;
        }

        public Builder deleteExistingPeering(Either<String,DeleteExistingPeering> deleteExistingPeering) {
            return deleteExistingPeering(Output.of(deleteExistingPeering));
        }

        public Builder deleteExistingPeering(String deleteExistingPeering) {
            return deleteExistingPeering(Either.ofLeft(deleteExistingPeering));
        }

        public Builder deleteExistingPeering(DeleteExistingPeering deleteExistingPeering) {
            return deleteExistingPeering(Either.ofRight(deleteExistingPeering));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder hubs(@Nullable Output<List<HubArgs>> hubs) {
            $.hubs = hubs;
            return this;
        }

        public Builder hubs(List<HubArgs> hubs) {
            return hubs(Output.of(hubs));
        }

        public Builder hubs(HubArgs... hubs) {
            return hubs(List.of(hubs));
        }

        public Builder isGlobal(@Nullable Output<Either<String,IsGlobal>> isGlobal) {
            $.isGlobal = isGlobal;
            return this;
        }

        public Builder isGlobal(Either<String,IsGlobal> isGlobal) {
            return isGlobal(Output.of(isGlobal));
        }

        public Builder isGlobal(String isGlobal) {
            return isGlobal(Either.ofLeft(isGlobal));
        }

        public Builder isGlobal(IsGlobal isGlobal) {
            return isGlobal(Either.ofRight(isGlobal));
        }

        public Builder networkManagerName(Output<String> networkManagerName) {
            $.networkManagerName = networkManagerName;
            return this;
        }

        public Builder networkManagerName(String networkManagerName) {
            return networkManagerName(Output.of(networkManagerName));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public ConnectivityConfigurationArgs build() {
            $.connectivityTopology = Objects.requireNonNull($.connectivityTopology, "expected parameter 'connectivityTopology' to be non-null");
            $.networkManagerName = Objects.requireNonNull($.networkManagerName, "expected parameter 'networkManagerName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
