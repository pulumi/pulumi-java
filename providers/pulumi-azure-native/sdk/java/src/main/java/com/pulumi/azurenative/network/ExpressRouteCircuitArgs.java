// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network;

import com.pulumi.azurenative.network.enums.ServiceProviderProvisioningState;
import com.pulumi.azurenative.network.inputs.ExpressRouteCircuitAuthorizationArgs;
import com.pulumi.azurenative.network.inputs.ExpressRouteCircuitPeeringArgs;
import com.pulumi.azurenative.network.inputs.ExpressRouteCircuitServiceProviderPropertiesArgs;
import com.pulumi.azurenative.network.inputs.ExpressRouteCircuitSkuArgs;
import com.pulumi.azurenative.network.inputs.SubResourceArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ExpressRouteCircuitArgs extends com.pulumi.resources.ResourceArgs {

    public static final ExpressRouteCircuitArgs Empty = new ExpressRouteCircuitArgs();

    /**
     * Allow classic operations.
     * 
     */
    @Import(name="allowClassicOperations")
    private @Nullable Output<Boolean> allowClassicOperations;

    public Optional<Output<Boolean>> allowClassicOperations() {
        return Optional.ofNullable(this.allowClassicOperations);
    }

    /**
     * The list of authorizations.
     * 
     */
    @Import(name="authorizations")
    private @Nullable Output<List<ExpressRouteCircuitAuthorizationArgs>> authorizations;

    public Optional<Output<List<ExpressRouteCircuitAuthorizationArgs>>> authorizations() {
        return Optional.ofNullable(this.authorizations);
    }

    /**
     * The bandwidth of the circuit when the circuit is provisioned on an ExpressRoutePort resource.
     * 
     */
    @Import(name="bandwidthInGbps")
    private @Nullable Output<Double> bandwidthInGbps;

    public Optional<Output<Double>> bandwidthInGbps() {
        return Optional.ofNullable(this.bandwidthInGbps);
    }

    /**
     * The name of the circuit.
     * 
     */
    @Import(name="circuitName")
    private @Nullable Output<String> circuitName;

    public Optional<Output<String>> circuitName() {
        return Optional.ofNullable(this.circuitName);
    }

    /**
     * The CircuitProvisioningState state of the resource.
     * 
     */
    @Import(name="circuitProvisioningState")
    private @Nullable Output<String> circuitProvisioningState;

    public Optional<Output<String>> circuitProvisioningState() {
        return Optional.ofNullable(this.circuitProvisioningState);
    }

    /**
     * The reference to the ExpressRoutePort resource when the circuit is provisioned on an ExpressRoutePort resource.
     * 
     */
    @Import(name="expressRoutePort")
    private @Nullable Output<SubResourceArgs> expressRoutePort;

    public Optional<Output<SubResourceArgs>> expressRoutePort() {
        return Optional.ofNullable(this.expressRoutePort);
    }

    /**
     * The GatewayManager Etag.
     * 
     */
    @Import(name="gatewayManagerEtag")
    private @Nullable Output<String> gatewayManagerEtag;

    public Optional<Output<String>> gatewayManagerEtag() {
        return Optional.ofNullable(this.gatewayManagerEtag);
    }

    /**
     * Flag denoting global reach status.
     * 
     */
    @Import(name="globalReachEnabled")
    private @Nullable Output<Boolean> globalReachEnabled;

    public Optional<Output<Boolean>> globalReachEnabled() {
        return Optional.ofNullable(this.globalReachEnabled);
    }

    /**
     * Resource ID.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Resource location.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The list of peerings.
     * 
     */
    @Import(name="peerings")
    private @Nullable Output<List<ExpressRouteCircuitPeeringArgs>> peerings;

    public Optional<Output<List<ExpressRouteCircuitPeeringArgs>>> peerings() {
        return Optional.ofNullable(this.peerings);
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The ServiceKey.
     * 
     */
    @Import(name="serviceKey")
    private @Nullable Output<String> serviceKey;

    public Optional<Output<String>> serviceKey() {
        return Optional.ofNullable(this.serviceKey);
    }

    /**
     * The ServiceProviderNotes.
     * 
     */
    @Import(name="serviceProviderNotes")
    private @Nullable Output<String> serviceProviderNotes;

    public Optional<Output<String>> serviceProviderNotes() {
        return Optional.ofNullable(this.serviceProviderNotes);
    }

    /**
     * The ServiceProviderProperties.
     * 
     */
    @Import(name="serviceProviderProperties")
    private @Nullable Output<ExpressRouteCircuitServiceProviderPropertiesArgs> serviceProviderProperties;

    public Optional<Output<ExpressRouteCircuitServiceProviderPropertiesArgs>> serviceProviderProperties() {
        return Optional.ofNullable(this.serviceProviderProperties);
    }

    /**
     * The ServiceProviderProvisioningState state of the resource.
     * 
     */
    @Import(name="serviceProviderProvisioningState")
    private @Nullable Output<Either<String,ServiceProviderProvisioningState>> serviceProviderProvisioningState;

    public Optional<Output<Either<String,ServiceProviderProvisioningState>>> serviceProviderProvisioningState() {
        return Optional.ofNullable(this.serviceProviderProvisioningState);
    }

    /**
     * The SKU.
     * 
     */
    @Import(name="sku")
    private @Nullable Output<ExpressRouteCircuitSkuArgs> sku;

    public Optional<Output<ExpressRouteCircuitSkuArgs>> sku() {
        return Optional.ofNullable(this.sku);
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private ExpressRouteCircuitArgs() {}

    private ExpressRouteCircuitArgs(ExpressRouteCircuitArgs $) {
        this.allowClassicOperations = $.allowClassicOperations;
        this.authorizations = $.authorizations;
        this.bandwidthInGbps = $.bandwidthInGbps;
        this.circuitName = $.circuitName;
        this.circuitProvisioningState = $.circuitProvisioningState;
        this.expressRoutePort = $.expressRoutePort;
        this.gatewayManagerEtag = $.gatewayManagerEtag;
        this.globalReachEnabled = $.globalReachEnabled;
        this.id = $.id;
        this.location = $.location;
        this.peerings = $.peerings;
        this.resourceGroupName = $.resourceGroupName;
        this.serviceKey = $.serviceKey;
        this.serviceProviderNotes = $.serviceProviderNotes;
        this.serviceProviderProperties = $.serviceProviderProperties;
        this.serviceProviderProvisioningState = $.serviceProviderProvisioningState;
        this.sku = $.sku;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExpressRouteCircuitArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExpressRouteCircuitArgs $;

        public Builder() {
            $ = new ExpressRouteCircuitArgs();
        }

        public Builder(ExpressRouteCircuitArgs defaults) {
            $ = new ExpressRouteCircuitArgs(Objects.requireNonNull(defaults));
        }

        public Builder allowClassicOperations(@Nullable Output<Boolean> allowClassicOperations) {
            $.allowClassicOperations = allowClassicOperations;
            return this;
        }

        public Builder allowClassicOperations(Boolean allowClassicOperations) {
            return allowClassicOperations(Output.of(allowClassicOperations));
        }

        public Builder authorizations(@Nullable Output<List<ExpressRouteCircuitAuthorizationArgs>> authorizations) {
            $.authorizations = authorizations;
            return this;
        }

        public Builder authorizations(List<ExpressRouteCircuitAuthorizationArgs> authorizations) {
            return authorizations(Output.of(authorizations));
        }

        public Builder authorizations(ExpressRouteCircuitAuthorizationArgs... authorizations) {
            return authorizations(List.of(authorizations));
        }

        public Builder bandwidthInGbps(@Nullable Output<Double> bandwidthInGbps) {
            $.bandwidthInGbps = bandwidthInGbps;
            return this;
        }

        public Builder bandwidthInGbps(Double bandwidthInGbps) {
            return bandwidthInGbps(Output.of(bandwidthInGbps));
        }

        public Builder circuitName(@Nullable Output<String> circuitName) {
            $.circuitName = circuitName;
            return this;
        }

        public Builder circuitName(String circuitName) {
            return circuitName(Output.of(circuitName));
        }

        public Builder circuitProvisioningState(@Nullable Output<String> circuitProvisioningState) {
            $.circuitProvisioningState = circuitProvisioningState;
            return this;
        }

        public Builder circuitProvisioningState(String circuitProvisioningState) {
            return circuitProvisioningState(Output.of(circuitProvisioningState));
        }

        public Builder expressRoutePort(@Nullable Output<SubResourceArgs> expressRoutePort) {
            $.expressRoutePort = expressRoutePort;
            return this;
        }

        public Builder expressRoutePort(SubResourceArgs expressRoutePort) {
            return expressRoutePort(Output.of(expressRoutePort));
        }

        public Builder gatewayManagerEtag(@Nullable Output<String> gatewayManagerEtag) {
            $.gatewayManagerEtag = gatewayManagerEtag;
            return this;
        }

        public Builder gatewayManagerEtag(String gatewayManagerEtag) {
            return gatewayManagerEtag(Output.of(gatewayManagerEtag));
        }

        public Builder globalReachEnabled(@Nullable Output<Boolean> globalReachEnabled) {
            $.globalReachEnabled = globalReachEnabled;
            return this;
        }

        public Builder globalReachEnabled(Boolean globalReachEnabled) {
            return globalReachEnabled(Output.of(globalReachEnabled));
        }

        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        public Builder id(String id) {
            return id(Output.of(id));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder peerings(@Nullable Output<List<ExpressRouteCircuitPeeringArgs>> peerings) {
            $.peerings = peerings;
            return this;
        }

        public Builder peerings(List<ExpressRouteCircuitPeeringArgs> peerings) {
            return peerings(Output.of(peerings));
        }

        public Builder peerings(ExpressRouteCircuitPeeringArgs... peerings) {
            return peerings(List.of(peerings));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder serviceKey(@Nullable Output<String> serviceKey) {
            $.serviceKey = serviceKey;
            return this;
        }

        public Builder serviceKey(String serviceKey) {
            return serviceKey(Output.of(serviceKey));
        }

        public Builder serviceProviderNotes(@Nullable Output<String> serviceProviderNotes) {
            $.serviceProviderNotes = serviceProviderNotes;
            return this;
        }

        public Builder serviceProviderNotes(String serviceProviderNotes) {
            return serviceProviderNotes(Output.of(serviceProviderNotes));
        }

        public Builder serviceProviderProperties(@Nullable Output<ExpressRouteCircuitServiceProviderPropertiesArgs> serviceProviderProperties) {
            $.serviceProviderProperties = serviceProviderProperties;
            return this;
        }

        public Builder serviceProviderProperties(ExpressRouteCircuitServiceProviderPropertiesArgs serviceProviderProperties) {
            return serviceProviderProperties(Output.of(serviceProviderProperties));
        }

        public Builder serviceProviderProvisioningState(@Nullable Output<Either<String,ServiceProviderProvisioningState>> serviceProviderProvisioningState) {
            $.serviceProviderProvisioningState = serviceProviderProvisioningState;
            return this;
        }

        public Builder serviceProviderProvisioningState(Either<String,ServiceProviderProvisioningState> serviceProviderProvisioningState) {
            return serviceProviderProvisioningState(Output.of(serviceProviderProvisioningState));
        }

        public Builder serviceProviderProvisioningState(String serviceProviderProvisioningState) {
            return serviceProviderProvisioningState(Either.ofLeft(serviceProviderProvisioningState));
        }

        public Builder serviceProviderProvisioningState(ServiceProviderProvisioningState serviceProviderProvisioningState) {
            return serviceProviderProvisioningState(Either.ofRight(serviceProviderProvisioningState));
        }

        public Builder sku(@Nullable Output<ExpressRouteCircuitSkuArgs> sku) {
            $.sku = sku;
            return this;
        }

        public Builder sku(ExpressRouteCircuitSkuArgs sku) {
            return sku(Output.of(sku));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public ExpressRouteCircuitArgs build() {
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
