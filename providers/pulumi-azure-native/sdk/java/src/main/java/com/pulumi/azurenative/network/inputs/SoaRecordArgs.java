// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * An SOA record.
 * 
 */
public final class SoaRecordArgs extends com.pulumi.resources.ResourceArgs {

    public static final SoaRecordArgs Empty = new SoaRecordArgs();

    /**
     * The email contact for this SOA record.
     * 
     */
    @Import(name="email")
    private @Nullable Output<String> email;

    /**
     * @return The email contact for this SOA record.
     * 
     */
    public Optional<Output<String>> email() {
        return Optional.ofNullable(this.email);
    }

    /**
     * The expire time for this SOA record.
     * 
     */
    @Import(name="expireTime")
    private @Nullable Output<Double> expireTime;

    /**
     * @return The expire time for this SOA record.
     * 
     */
    public Optional<Output<Double>> expireTime() {
        return Optional.ofNullable(this.expireTime);
    }

    /**
     * The domain name of the authoritative name server for this SOA record.
     * 
     */
    @Import(name="host")
    private @Nullable Output<String> host;

    /**
     * @return The domain name of the authoritative name server for this SOA record.
     * 
     */
    public Optional<Output<String>> host() {
        return Optional.ofNullable(this.host);
    }

    /**
     * The minimum value for this SOA record. By convention this is used to determine the negative caching duration.
     * 
     */
    @Import(name="minimumTtl")
    private @Nullable Output<Double> minimumTtl;

    /**
     * @return The minimum value for this SOA record. By convention this is used to determine the negative caching duration.
     * 
     */
    public Optional<Output<Double>> minimumTtl() {
        return Optional.ofNullable(this.minimumTtl);
    }

    /**
     * The refresh value for this SOA record.
     * 
     */
    @Import(name="refreshTime")
    private @Nullable Output<Double> refreshTime;

    /**
     * @return The refresh value for this SOA record.
     * 
     */
    public Optional<Output<Double>> refreshTime() {
        return Optional.ofNullable(this.refreshTime);
    }

    /**
     * The retry time for this SOA record.
     * 
     */
    @Import(name="retryTime")
    private @Nullable Output<Double> retryTime;

    /**
     * @return The retry time for this SOA record.
     * 
     */
    public Optional<Output<Double>> retryTime() {
        return Optional.ofNullable(this.retryTime);
    }

    /**
     * The serial number for this SOA record.
     * 
     */
    @Import(name="serialNumber")
    private @Nullable Output<Double> serialNumber;

    /**
     * @return The serial number for this SOA record.
     * 
     */
    public Optional<Output<Double>> serialNumber() {
        return Optional.ofNullable(this.serialNumber);
    }

    private SoaRecordArgs() {}

    private SoaRecordArgs(SoaRecordArgs $) {
        this.email = $.email;
        this.expireTime = $.expireTime;
        this.host = $.host;
        this.minimumTtl = $.minimumTtl;
        this.refreshTime = $.refreshTime;
        this.retryTime = $.retryTime;
        this.serialNumber = $.serialNumber;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SoaRecordArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SoaRecordArgs $;

        public Builder() {
            $ = new SoaRecordArgs();
        }

        public Builder(SoaRecordArgs defaults) {
            $ = new SoaRecordArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param email The email contact for this SOA record.
         * 
         * @return builder
         * 
         */
        public Builder email(@Nullable Output<String> email) {
            $.email = email;
            return this;
        }

        /**
         * @param email The email contact for this SOA record.
         * 
         * @return builder
         * 
         */
        public Builder email(String email) {
            return email(Output.of(email));
        }

        /**
         * @param expireTime The expire time for this SOA record.
         * 
         * @return builder
         * 
         */
        public Builder expireTime(@Nullable Output<Double> expireTime) {
            $.expireTime = expireTime;
            return this;
        }

        /**
         * @param expireTime The expire time for this SOA record.
         * 
         * @return builder
         * 
         */
        public Builder expireTime(Double expireTime) {
            return expireTime(Output.of(expireTime));
        }

        /**
         * @param host The domain name of the authoritative name server for this SOA record.
         * 
         * @return builder
         * 
         */
        public Builder host(@Nullable Output<String> host) {
            $.host = host;
            return this;
        }

        /**
         * @param host The domain name of the authoritative name server for this SOA record.
         * 
         * @return builder
         * 
         */
        public Builder host(String host) {
            return host(Output.of(host));
        }

        /**
         * @param minimumTtl The minimum value for this SOA record. By convention this is used to determine the negative caching duration.
         * 
         * @return builder
         * 
         */
        public Builder minimumTtl(@Nullable Output<Double> minimumTtl) {
            $.minimumTtl = minimumTtl;
            return this;
        }

        /**
         * @param minimumTtl The minimum value for this SOA record. By convention this is used to determine the negative caching duration.
         * 
         * @return builder
         * 
         */
        public Builder minimumTtl(Double minimumTtl) {
            return minimumTtl(Output.of(minimumTtl));
        }

        /**
         * @param refreshTime The refresh value for this SOA record.
         * 
         * @return builder
         * 
         */
        public Builder refreshTime(@Nullable Output<Double> refreshTime) {
            $.refreshTime = refreshTime;
            return this;
        }

        /**
         * @param refreshTime The refresh value for this SOA record.
         * 
         * @return builder
         * 
         */
        public Builder refreshTime(Double refreshTime) {
            return refreshTime(Output.of(refreshTime));
        }

        /**
         * @param retryTime The retry time for this SOA record.
         * 
         * @return builder
         * 
         */
        public Builder retryTime(@Nullable Output<Double> retryTime) {
            $.retryTime = retryTime;
            return this;
        }

        /**
         * @param retryTime The retry time for this SOA record.
         * 
         * @return builder
         * 
         */
        public Builder retryTime(Double retryTime) {
            return retryTime(Output.of(retryTime));
        }

        /**
         * @param serialNumber The serial number for this SOA record.
         * 
         * @return builder
         * 
         */
        public Builder serialNumber(@Nullable Output<Double> serialNumber) {
            $.serialNumber = serialNumber;
            return this;
        }

        /**
         * @param serialNumber The serial number for this SOA record.
         * 
         * @return builder
         * 
         */
        public Builder serialNumber(Double serialNumber) {
            return serialNumber(Output.of(serialNumber));
        }

        public SoaRecordArgs build() {
            return $;
        }
    }

}
