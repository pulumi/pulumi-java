// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.machinelearningservices.inputs;

import com.pulumi.azurenative.machinelearningservices.inputs.DatasetResponseLatest;
import com.pulumi.azurenative.machinelearningservices.inputs.DatasetStateResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Machine Learning dataset object.
 * 
 */
public final class DatasetResponse extends com.pulumi.resources.InvokeArgs {

    public static final DatasetResponse Empty = new DatasetResponse();

    /**
     * The dataset creation time (UTC).
     * 
     */
    @Import(name="createdTime", required=true)
    private String createdTime;

    public String createdTime() {
        return this.createdTime;
    }

    /**
     * Unique Dataset identifier.
     * 
     */
    @Import(name="datasetId", required=true)
    private String datasetId;

    public String datasetId() {
        return this.datasetId;
    }

    /**
     * Dataset state
     * 
     */
    @Import(name="datasetState")
    private @Nullable DatasetStateResponse datasetState;

    public Optional<DatasetStateResponse> datasetState() {
        return Optional.ofNullable(this.datasetState);
    }

    /**
     * Dataset Type.
     * 
     */
    @Import(name="datasetType", required=true)
    private String datasetType;

    public String datasetType() {
        return this.datasetType;
    }

    /**
     * Name of the default compute to be used for any Dataset actions (such as Profile, Write).
     * 
     */
    @Import(name="defaultCompute", required=true)
    private String defaultCompute;

    public String defaultCompute() {
        return this.defaultCompute;
    }

    /**
     * Description about this dataset version.
     * 
     */
    @Import(name="description", required=true)
    private String description;

    public String description() {
        return this.description;
    }

    /**
     * eTag description
     * 
     */
    @Import(name="etag", required=true)
    private String etag;

    public String etag() {
        return this.etag;
    }

    /**
     * Flag to hide Dataset in UI
     * 
     */
    @Import(name="isVisible", required=true)
    private Boolean isVisible;

    public Boolean isVisible() {
        return this.isVisible;
    }

    /**
     * Last created Dataset definition.
     * 
     */
    @Import(name="latest")
    private @Nullable DatasetResponseLatest latest;

    public Optional<DatasetResponseLatest> latest() {
        return Optional.ofNullable(this.latest);
    }

    /**
     * The dataset last modified time (UTC).
     * 
     */
    @Import(name="modifiedTime", required=true)
    private String modifiedTime;

    public String modifiedTime() {
        return this.modifiedTime;
    }

    /**
     * Unique dataset name
     * 
     */
    @Import(name="name", required=true)
    private String name;

    public String name() {
        return this.name;
    }

    /**
     * Tags for this dataset version.
     * 
     */
    @Import(name="tags", required=true)
    private Map<String,String> tags;

    public Map<String,String> tags() {
        return this.tags;
    }

    private DatasetResponse() {}

    private DatasetResponse(DatasetResponse $) {
        this.createdTime = $.createdTime;
        this.datasetId = $.datasetId;
        this.datasetState = $.datasetState;
        this.datasetType = $.datasetType;
        this.defaultCompute = $.defaultCompute;
        this.description = $.description;
        this.etag = $.etag;
        this.isVisible = $.isVisible;
        this.latest = $.latest;
        this.modifiedTime = $.modifiedTime;
        this.name = $.name;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatasetResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatasetResponse $;

        public Builder() {
            $ = new DatasetResponse();
        }

        public Builder(DatasetResponse defaults) {
            $ = new DatasetResponse(Objects.requireNonNull(defaults));
        }

        public Builder createdTime(String createdTime) {
            $.createdTime = createdTime;
            return this;
        }

        public Builder datasetId(String datasetId) {
            $.datasetId = datasetId;
            return this;
        }

        public Builder datasetState(@Nullable DatasetStateResponse datasetState) {
            $.datasetState = datasetState;
            return this;
        }

        public Builder datasetType(String datasetType) {
            $.datasetType = datasetType;
            return this;
        }

        public Builder defaultCompute(String defaultCompute) {
            $.defaultCompute = defaultCompute;
            return this;
        }

        public Builder description(String description) {
            $.description = description;
            return this;
        }

        public Builder etag(String etag) {
            $.etag = etag;
            return this;
        }

        public Builder isVisible(Boolean isVisible) {
            $.isVisible = isVisible;
            return this;
        }

        public Builder latest(@Nullable DatasetResponseLatest latest) {
            $.latest = latest;
            return this;
        }

        public Builder modifiedTime(String modifiedTime) {
            $.modifiedTime = modifiedTime;
            return this;
        }

        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            $.tags = tags;
            return this;
        }

        public DatasetResponse build() {
            $.createdTime = Objects.requireNonNull($.createdTime, "expected parameter 'createdTime' to be non-null");
            $.datasetId = Objects.requireNonNull($.datasetId, "expected parameter 'datasetId' to be non-null");
            $.datasetType = Objects.requireNonNull($.datasetType, "expected parameter 'datasetType' to be non-null");
            $.defaultCompute = Objects.requireNonNull($.defaultCompute, "expected parameter 'defaultCompute' to be non-null");
            $.description = Objects.requireNonNull($.description, "expected parameter 'description' to be non-null");
            $.etag = Objects.requireNonNull($.etag, "expected parameter 'etag' to be non-null");
            $.isVisible = Objects.requireNonNull($.isVisible, "expected parameter 'isVisible' to be non-null");
            $.modifiedTime = Objects.requireNonNull($.modifiedTime, "expected parameter 'modifiedTime' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.tags = Objects.requireNonNull($.tags, "expected parameter 'tags' to be non-null");
            return $;
        }
    }

}
