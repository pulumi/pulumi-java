// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.recoveryservices.inputs;

import com.pulumi.azurenative.recoveryservices.inputs.AzureVmDiskDetailsResponse;
import com.pulumi.azurenative.recoveryservices.inputs.HealthErrorResponse;
import com.pulumi.azurenative.recoveryservices.inputs.InMageAzureV2ManagedDiskDetailsResponse;
import com.pulumi.azurenative.recoveryservices.inputs.InMageAzureV2ProtectedDiskDetailsResponse;
import com.pulumi.azurenative.recoveryservices.inputs.VMNicDetailsResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * InMageAzureV2 provider specific settings
 * 
 */
public final class InMageAzureV2ReplicationDetailsResponse extends com.pulumi.resources.InvokeArgs {

    public static final InMageAzureV2ReplicationDetailsResponse Empty = new InMageAzureV2ReplicationDetailsResponse();

    /**
     * Agent expiry date.
     * 
     */
    @Import(name="agentExpiryDate")
    private @Nullable String agentExpiryDate;

    public Optional<String> agentExpiryDate() {
        return Optional.ofNullable(this.agentExpiryDate);
    }

    /**
     * The agent version.
     * 
     */
    @Import(name="agentVersion")
    private @Nullable String agentVersion;

    public Optional<String> agentVersion() {
        return Optional.ofNullable(this.agentVersion);
    }

    /**
     * Azure VM Disk details.
     * 
     */
    @Import(name="azureVMDiskDetails")
    private @Nullable List<AzureVmDiskDetailsResponse> azureVMDiskDetails;

    public Optional<List<AzureVmDiskDetailsResponse>> azureVMDiskDetails() {
        return Optional.ofNullable(this.azureVMDiskDetails);
    }

    /**
     * The compressed data change rate in MB.
     * 
     */
    @Import(name="compressedDataRateInMB")
    private @Nullable Double compressedDataRateInMB;

    public Optional<Double> compressedDataRateInMB() {
        return Optional.ofNullable(this.compressedDataRateInMB);
    }

    /**
     * The data stores of the on-premise machine. Value can be list of strings that contain data store names.
     * 
     */
    @Import(name="datastores")
    private @Nullable List<String> datastores;

    public Optional<List<String>> datastores() {
        return Optional.ofNullable(this.datastores);
    }

    /**
     * A value indicating the discovery type of the machine. Value can be vCenter or physical.
     * 
     */
    @Import(name="discoveryType")
    private @Nullable String discoveryType;

    public Optional<String> discoveryType() {
        return Optional.ofNullable(this.discoveryType);
    }

    /**
     * A value indicating whether any disk is resized for this VM.
     * 
     */
    @Import(name="diskResized")
    private @Nullable String diskResized;

    public Optional<String> diskResized() {
        return Optional.ofNullable(this.diskResized);
    }

    /**
     * The selected option to enable RDP\SSH on target vm after failover. String value of {SrsDataContract.EnableRDPOnTargetOption} enum.
     * 
     */
    @Import(name="enableRdpOnTargetOption")
    private @Nullable String enableRdpOnTargetOption;

    public Optional<String> enableRdpOnTargetOption() {
        return Optional.ofNullable(this.enableRdpOnTargetOption);
    }

    /**
     * The infrastructure VM Id.
     * 
     */
    @Import(name="infrastructureVmId")
    private @Nullable String infrastructureVmId;

    public Optional<String> infrastructureVmId() {
        return Optional.ofNullable(this.infrastructureVmId);
    }

    /**
     * Gets the Instance type.
     * Expected value is &#39;InMageAzureV2&#39;.
     * 
     */
    @Import(name="instanceType", required=true)
    private String instanceType;

    public String instanceType() {
        return this.instanceType;
    }

    /**
     * The source IP address.
     * 
     */
    @Import(name="ipAddress")
    private @Nullable String ipAddress;

    public Optional<String> ipAddress() {
        return Optional.ofNullable(this.ipAddress);
    }

    /**
     * A value indicating whether installed agent needs to be updated.
     * 
     */
    @Import(name="isAgentUpdateRequired")
    private @Nullable String isAgentUpdateRequired;

    public Optional<String> isAgentUpdateRequired() {
        return Optional.ofNullable(this.isAgentUpdateRequired);
    }

    /**
     * A value indicating whether the source server requires a restart after update.
     * 
     */
    @Import(name="isRebootAfterUpdateRequired")
    private @Nullable String isRebootAfterUpdateRequired;

    public Optional<String> isRebootAfterUpdateRequired() {
        return Optional.ofNullable(this.isRebootAfterUpdateRequired);
    }

    /**
     * The last heartbeat received from the source server.
     * 
     */
    @Import(name="lastHeartbeat")
    private @Nullable String lastHeartbeat;

    public Optional<String> lastHeartbeat() {
        return Optional.ofNullable(this.lastHeartbeat);
    }

    /**
     * The last RPO calculated time.
     * 
     */
    @Import(name="lastRpoCalculatedTime")
    private @Nullable String lastRpoCalculatedTime;

    public Optional<String> lastRpoCalculatedTime() {
        return Optional.ofNullable(this.lastRpoCalculatedTime);
    }

    /**
     * The last update time received from on-prem components.
     * 
     */
    @Import(name="lastUpdateReceivedTime")
    private @Nullable String lastUpdateReceivedTime;

    public Optional<String> lastUpdateReceivedTime() {
        return Optional.ofNullable(this.lastUpdateReceivedTime);
    }

    /**
     * License Type of the VM to be used.
     * 
     */
    @Import(name="licenseType")
    private @Nullable String licenseType;

    public Optional<String> licenseType() {
        return Optional.ofNullable(this.licenseType);
    }

    /**
     * The master target Id.
     * 
     */
    @Import(name="masterTargetId")
    private @Nullable String masterTargetId;

    public Optional<String> masterTargetId() {
        return Optional.ofNullable(this.masterTargetId);
    }

    /**
     * The multi vm group Id.
     * 
     */
    @Import(name="multiVmGroupId")
    private @Nullable String multiVmGroupId;

    public Optional<String> multiVmGroupId() {
        return Optional.ofNullable(this.multiVmGroupId);
    }

    /**
     * The multi vm group name.
     * 
     */
    @Import(name="multiVmGroupName")
    private @Nullable String multiVmGroupName;

    public Optional<String> multiVmGroupName() {
        return Optional.ofNullable(this.multiVmGroupName);
    }

    /**
     * A value indicating whether multi vm sync is enabled or disabled.
     * 
     */
    @Import(name="multiVmSyncStatus")
    private @Nullable String multiVmSyncStatus;

    public Optional<String> multiVmSyncStatus() {
        return Optional.ofNullable(this.multiVmSyncStatus);
    }

    /**
     * The id of the disk containing the OS.
     * 
     */
    @Import(name="osDiskId")
    private @Nullable String osDiskId;

    public Optional<String> osDiskId() {
        return Optional.ofNullable(this.osDiskId);
    }

    /**
     * The type of the OS on the VM.
     * 
     */
    @Import(name="osType")
    private @Nullable String osType;

    public Optional<String> osType() {
        return Optional.ofNullable(this.osType);
    }

    /**
     * The OS Version of the protected item.
     * 
     */
    @Import(name="osVersion")
    private @Nullable String osVersion;

    public Optional<String> osVersion() {
        return Optional.ofNullable(this.osVersion);
    }

    /**
     * The process server Id.
     * 
     */
    @Import(name="processServerId")
    private @Nullable String processServerId;

    public Optional<String> processServerId() {
        return Optional.ofNullable(this.processServerId);
    }

    /**
     * The process server name.
     * 
     */
    @Import(name="processServerName", required=true)
    private String processServerName;

    public String processServerName() {
        return this.processServerName;
    }

    /**
     * The list of protected disks.
     * 
     */
    @Import(name="protectedDisks")
    private @Nullable List<InMageAzureV2ProtectedDiskDetailsResponse> protectedDisks;

    public Optional<List<InMageAzureV2ProtectedDiskDetailsResponse>> protectedDisks() {
        return Optional.ofNullable(this.protectedDisks);
    }

    /**
     * The list of protected managed disks.
     * 
     */
    @Import(name="protectedManagedDisks")
    private @Nullable List<InMageAzureV2ManagedDiskDetailsResponse> protectedManagedDisks;

    public Optional<List<InMageAzureV2ManagedDiskDetailsResponse>> protectedManagedDisks() {
        return Optional.ofNullable(this.protectedManagedDisks);
    }

    /**
     * The protection stage.
     * 
     */
    @Import(name="protectionStage")
    private @Nullable String protectionStage;

    public Optional<String> protectionStage() {
        return Optional.ofNullable(this.protectionStage);
    }

    /**
     * The recovery availability set Id.
     * 
     */
    @Import(name="recoveryAvailabilitySetId")
    private @Nullable String recoveryAvailabilitySetId;

    public Optional<String> recoveryAvailabilitySetId() {
        return Optional.ofNullable(this.recoveryAvailabilitySetId);
    }

    /**
     * The ARM id of the log storage account used for replication. This will be set to null if no log storage account was provided during enable protection.
     * 
     */
    @Import(name="recoveryAzureLogStorageAccountId")
    private @Nullable String recoveryAzureLogStorageAccountId;

    public Optional<String> recoveryAzureLogStorageAccountId() {
        return Optional.ofNullable(this.recoveryAzureLogStorageAccountId);
    }

    /**
     * The target resource group Id.
     * 
     */
    @Import(name="recoveryAzureResourceGroupId")
    private @Nullable String recoveryAzureResourceGroupId;

    public Optional<String> recoveryAzureResourceGroupId() {
        return Optional.ofNullable(this.recoveryAzureResourceGroupId);
    }

    /**
     * The recovery Azure storage account.
     * 
     */
    @Import(name="recoveryAzureStorageAccount")
    private @Nullable String recoveryAzureStorageAccount;

    public Optional<String> recoveryAzureStorageAccount() {
        return Optional.ofNullable(this.recoveryAzureStorageAccount);
    }

    /**
     * Recovery Azure given name.
     * 
     */
    @Import(name="recoveryAzureVMName")
    private @Nullable String recoveryAzureVMName;

    public Optional<String> recoveryAzureVMName() {
        return Optional.ofNullable(this.recoveryAzureVMName);
    }

    /**
     * The Recovery Azure VM size.
     * 
     */
    @Import(name="recoveryAzureVMSize")
    private @Nullable String recoveryAzureVMSize;

    public Optional<String> recoveryAzureVMSize() {
        return Optional.ofNullable(this.recoveryAzureVMSize);
    }

    /**
     * The replica id of the protected item.
     * 
     */
    @Import(name="replicaId")
    private @Nullable String replicaId;

    public Optional<String> replicaId() {
        return Optional.ofNullable(this.replicaId);
    }

    /**
     * The resync progress percentage.
     * 
     */
    @Import(name="resyncProgressPercentage")
    private @Nullable Integer resyncProgressPercentage;

    public Optional<Integer> resyncProgressPercentage() {
        return Optional.ofNullable(this.resyncProgressPercentage);
    }

    /**
     * The RPO in seconds.
     * 
     */
    @Import(name="rpoInSeconds")
    private @Nullable Double rpoInSeconds;

    public Optional<Double> rpoInSeconds() {
        return Optional.ofNullable(this.rpoInSeconds);
    }

    /**
     * The selected recovery azure network Id.
     * 
     */
    @Import(name="selectedRecoveryAzureNetworkId")
    private @Nullable String selectedRecoveryAzureNetworkId;

    public Optional<String> selectedRecoveryAzureNetworkId() {
        return Optional.ofNullable(this.selectedRecoveryAzureNetworkId);
    }

    /**
     * The selected source nic Id which will be used as the primary nic during failover.
     * 
     */
    @Import(name="selectedSourceNicId")
    private @Nullable String selectedSourceNicId;

    public Optional<String> selectedSourceNicId() {
        return Optional.ofNullable(this.selectedSourceNicId);
    }

    /**
     * The test failover virtual network.
     * 
     */
    @Import(name="selectedTfoAzureNetworkId")
    private @Nullable String selectedTfoAzureNetworkId;

    public Optional<String> selectedTfoAzureNetworkId() {
        return Optional.ofNullable(this.selectedTfoAzureNetworkId);
    }

    /**
     * The CPU count of the VM on the primary side.
     * 
     */
    @Import(name="sourceVmCpuCount")
    private @Nullable Integer sourceVmCpuCount;

    public Optional<Integer> sourceVmCpuCount() {
        return Optional.ofNullable(this.sourceVmCpuCount);
    }

    /**
     * The RAM size of the VM on the primary side.
     * 
     */
    @Import(name="sourceVmRamSizeInMB")
    private @Nullable Integer sourceVmRamSizeInMB;

    public Optional<Integer> sourceVmRamSizeInMB() {
        return Optional.ofNullable(this.sourceVmRamSizeInMB);
    }

    /**
     * The target availability zone.
     * 
     */
    @Import(name="targetAvailabilityZone")
    private @Nullable String targetAvailabilityZone;

    public Optional<String> targetAvailabilityZone() {
        return Optional.ofNullable(this.targetAvailabilityZone);
    }

    /**
     * The target proximity placement group Id.
     * 
     */
    @Import(name="targetProximityPlacementGroupId")
    private @Nullable String targetProximityPlacementGroupId;

    public Optional<String> targetProximityPlacementGroupId() {
        return Optional.ofNullable(this.targetProximityPlacementGroupId);
    }

    /**
     * The ARM Id of the target Azure VM. This value will be null until the VM is failed over. Only after failure it will be populated with the ARM Id of the Azure VM.
     * 
     */
    @Import(name="targetVmId")
    private @Nullable String targetVmId;

    public Optional<String> targetVmId() {
        return Optional.ofNullable(this.targetVmId);
    }

    /**
     * The uncompressed data change rate in MB.
     * 
     */
    @Import(name="uncompressedDataRateInMB")
    private @Nullable Double uncompressedDataRateInMB;

    public Optional<Double> uncompressedDataRateInMB() {
        return Optional.ofNullable(this.uncompressedDataRateInMB);
    }

    /**
     * A value indicating whether managed disks should be used during failover.
     * 
     */
    @Import(name="useManagedDisks")
    private @Nullable String useManagedDisks;

    public Optional<String> useManagedDisks() {
        return Optional.ofNullable(this.useManagedDisks);
    }

    /**
     * The vCenter infrastructure Id.
     * 
     */
    @Import(name="vCenterInfrastructureId")
    private @Nullable String vCenterInfrastructureId;

    public Optional<String> vCenterInfrastructureId() {
        return Optional.ofNullable(this.vCenterInfrastructureId);
    }

    /**
     * The validation errors of the on-premise machine Value can be list of validation errors.
     * 
     */
    @Import(name="validationErrors")
    private @Nullable List<HealthErrorResponse> validationErrors;

    public Optional<List<HealthErrorResponse>> validationErrors() {
        return Optional.ofNullable(this.validationErrors);
    }

    /**
     * The OS disk VHD name.
     * 
     */
    @Import(name="vhdName")
    private @Nullable String vhdName;

    public Optional<String> vhdName() {
        return Optional.ofNullable(this.vhdName);
    }

    /**
     * The virtual machine Id.
     * 
     */
    @Import(name="vmId")
    private @Nullable String vmId;

    public Optional<String> vmId() {
        return Optional.ofNullable(this.vmId);
    }

    /**
     * The PE Network details.
     * 
     */
    @Import(name="vmNics")
    private @Nullable List<VMNicDetailsResponse> vmNics;

    public Optional<List<VMNicDetailsResponse>> vmNics() {
        return Optional.ofNullable(this.vmNics);
    }

    /**
     * The protection state for the vm.
     * 
     */
    @Import(name="vmProtectionState")
    private @Nullable String vmProtectionState;

    public Optional<String> vmProtectionState() {
        return Optional.ofNullable(this.vmProtectionState);
    }

    /**
     * The protection state description for the vm.
     * 
     */
    @Import(name="vmProtectionStateDescription")
    private @Nullable String vmProtectionStateDescription;

    public Optional<String> vmProtectionStateDescription() {
        return Optional.ofNullable(this.vmProtectionStateDescription);
    }

    private InMageAzureV2ReplicationDetailsResponse() {}

    private InMageAzureV2ReplicationDetailsResponse(InMageAzureV2ReplicationDetailsResponse $) {
        this.agentExpiryDate = $.agentExpiryDate;
        this.agentVersion = $.agentVersion;
        this.azureVMDiskDetails = $.azureVMDiskDetails;
        this.compressedDataRateInMB = $.compressedDataRateInMB;
        this.datastores = $.datastores;
        this.discoveryType = $.discoveryType;
        this.diskResized = $.diskResized;
        this.enableRdpOnTargetOption = $.enableRdpOnTargetOption;
        this.infrastructureVmId = $.infrastructureVmId;
        this.instanceType = $.instanceType;
        this.ipAddress = $.ipAddress;
        this.isAgentUpdateRequired = $.isAgentUpdateRequired;
        this.isRebootAfterUpdateRequired = $.isRebootAfterUpdateRequired;
        this.lastHeartbeat = $.lastHeartbeat;
        this.lastRpoCalculatedTime = $.lastRpoCalculatedTime;
        this.lastUpdateReceivedTime = $.lastUpdateReceivedTime;
        this.licenseType = $.licenseType;
        this.masterTargetId = $.masterTargetId;
        this.multiVmGroupId = $.multiVmGroupId;
        this.multiVmGroupName = $.multiVmGroupName;
        this.multiVmSyncStatus = $.multiVmSyncStatus;
        this.osDiskId = $.osDiskId;
        this.osType = $.osType;
        this.osVersion = $.osVersion;
        this.processServerId = $.processServerId;
        this.processServerName = $.processServerName;
        this.protectedDisks = $.protectedDisks;
        this.protectedManagedDisks = $.protectedManagedDisks;
        this.protectionStage = $.protectionStage;
        this.recoveryAvailabilitySetId = $.recoveryAvailabilitySetId;
        this.recoveryAzureLogStorageAccountId = $.recoveryAzureLogStorageAccountId;
        this.recoveryAzureResourceGroupId = $.recoveryAzureResourceGroupId;
        this.recoveryAzureStorageAccount = $.recoveryAzureStorageAccount;
        this.recoveryAzureVMName = $.recoveryAzureVMName;
        this.recoveryAzureVMSize = $.recoveryAzureVMSize;
        this.replicaId = $.replicaId;
        this.resyncProgressPercentage = $.resyncProgressPercentage;
        this.rpoInSeconds = $.rpoInSeconds;
        this.selectedRecoveryAzureNetworkId = $.selectedRecoveryAzureNetworkId;
        this.selectedSourceNicId = $.selectedSourceNicId;
        this.selectedTfoAzureNetworkId = $.selectedTfoAzureNetworkId;
        this.sourceVmCpuCount = $.sourceVmCpuCount;
        this.sourceVmRamSizeInMB = $.sourceVmRamSizeInMB;
        this.targetAvailabilityZone = $.targetAvailabilityZone;
        this.targetProximityPlacementGroupId = $.targetProximityPlacementGroupId;
        this.targetVmId = $.targetVmId;
        this.uncompressedDataRateInMB = $.uncompressedDataRateInMB;
        this.useManagedDisks = $.useManagedDisks;
        this.vCenterInfrastructureId = $.vCenterInfrastructureId;
        this.validationErrors = $.validationErrors;
        this.vhdName = $.vhdName;
        this.vmId = $.vmId;
        this.vmNics = $.vmNics;
        this.vmProtectionState = $.vmProtectionState;
        this.vmProtectionStateDescription = $.vmProtectionStateDescription;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InMageAzureV2ReplicationDetailsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InMageAzureV2ReplicationDetailsResponse $;

        public Builder() {
            $ = new InMageAzureV2ReplicationDetailsResponse();
        }

        public Builder(InMageAzureV2ReplicationDetailsResponse defaults) {
            $ = new InMageAzureV2ReplicationDetailsResponse(Objects.requireNonNull(defaults));
        }

        public Builder agentExpiryDate(@Nullable String agentExpiryDate) {
            $.agentExpiryDate = agentExpiryDate;
            return this;
        }

        public Builder agentVersion(@Nullable String agentVersion) {
            $.agentVersion = agentVersion;
            return this;
        }

        public Builder azureVMDiskDetails(@Nullable List<AzureVmDiskDetailsResponse> azureVMDiskDetails) {
            $.azureVMDiskDetails = azureVMDiskDetails;
            return this;
        }

        public Builder azureVMDiskDetails(AzureVmDiskDetailsResponse... azureVMDiskDetails) {
            return azureVMDiskDetails(List.of(azureVMDiskDetails));
        }

        public Builder compressedDataRateInMB(@Nullable Double compressedDataRateInMB) {
            $.compressedDataRateInMB = compressedDataRateInMB;
            return this;
        }

        public Builder datastores(@Nullable List<String> datastores) {
            $.datastores = datastores;
            return this;
        }

        public Builder datastores(String... datastores) {
            return datastores(List.of(datastores));
        }

        public Builder discoveryType(@Nullable String discoveryType) {
            $.discoveryType = discoveryType;
            return this;
        }

        public Builder diskResized(@Nullable String diskResized) {
            $.diskResized = diskResized;
            return this;
        }

        public Builder enableRdpOnTargetOption(@Nullable String enableRdpOnTargetOption) {
            $.enableRdpOnTargetOption = enableRdpOnTargetOption;
            return this;
        }

        public Builder infrastructureVmId(@Nullable String infrastructureVmId) {
            $.infrastructureVmId = infrastructureVmId;
            return this;
        }

        public Builder instanceType(String instanceType) {
            $.instanceType = instanceType;
            return this;
        }

        public Builder ipAddress(@Nullable String ipAddress) {
            $.ipAddress = ipAddress;
            return this;
        }

        public Builder isAgentUpdateRequired(@Nullable String isAgentUpdateRequired) {
            $.isAgentUpdateRequired = isAgentUpdateRequired;
            return this;
        }

        public Builder isRebootAfterUpdateRequired(@Nullable String isRebootAfterUpdateRequired) {
            $.isRebootAfterUpdateRequired = isRebootAfterUpdateRequired;
            return this;
        }

        public Builder lastHeartbeat(@Nullable String lastHeartbeat) {
            $.lastHeartbeat = lastHeartbeat;
            return this;
        }

        public Builder lastRpoCalculatedTime(@Nullable String lastRpoCalculatedTime) {
            $.lastRpoCalculatedTime = lastRpoCalculatedTime;
            return this;
        }

        public Builder lastUpdateReceivedTime(@Nullable String lastUpdateReceivedTime) {
            $.lastUpdateReceivedTime = lastUpdateReceivedTime;
            return this;
        }

        public Builder licenseType(@Nullable String licenseType) {
            $.licenseType = licenseType;
            return this;
        }

        public Builder masterTargetId(@Nullable String masterTargetId) {
            $.masterTargetId = masterTargetId;
            return this;
        }

        public Builder multiVmGroupId(@Nullable String multiVmGroupId) {
            $.multiVmGroupId = multiVmGroupId;
            return this;
        }

        public Builder multiVmGroupName(@Nullable String multiVmGroupName) {
            $.multiVmGroupName = multiVmGroupName;
            return this;
        }

        public Builder multiVmSyncStatus(@Nullable String multiVmSyncStatus) {
            $.multiVmSyncStatus = multiVmSyncStatus;
            return this;
        }

        public Builder osDiskId(@Nullable String osDiskId) {
            $.osDiskId = osDiskId;
            return this;
        }

        public Builder osType(@Nullable String osType) {
            $.osType = osType;
            return this;
        }

        public Builder osVersion(@Nullable String osVersion) {
            $.osVersion = osVersion;
            return this;
        }

        public Builder processServerId(@Nullable String processServerId) {
            $.processServerId = processServerId;
            return this;
        }

        public Builder processServerName(String processServerName) {
            $.processServerName = processServerName;
            return this;
        }

        public Builder protectedDisks(@Nullable List<InMageAzureV2ProtectedDiskDetailsResponse> protectedDisks) {
            $.protectedDisks = protectedDisks;
            return this;
        }

        public Builder protectedDisks(InMageAzureV2ProtectedDiskDetailsResponse... protectedDisks) {
            return protectedDisks(List.of(protectedDisks));
        }

        public Builder protectedManagedDisks(@Nullable List<InMageAzureV2ManagedDiskDetailsResponse> protectedManagedDisks) {
            $.protectedManagedDisks = protectedManagedDisks;
            return this;
        }

        public Builder protectedManagedDisks(InMageAzureV2ManagedDiskDetailsResponse... protectedManagedDisks) {
            return protectedManagedDisks(List.of(protectedManagedDisks));
        }

        public Builder protectionStage(@Nullable String protectionStage) {
            $.protectionStage = protectionStage;
            return this;
        }

        public Builder recoveryAvailabilitySetId(@Nullable String recoveryAvailabilitySetId) {
            $.recoveryAvailabilitySetId = recoveryAvailabilitySetId;
            return this;
        }

        public Builder recoveryAzureLogStorageAccountId(@Nullable String recoveryAzureLogStorageAccountId) {
            $.recoveryAzureLogStorageAccountId = recoveryAzureLogStorageAccountId;
            return this;
        }

        public Builder recoveryAzureResourceGroupId(@Nullable String recoveryAzureResourceGroupId) {
            $.recoveryAzureResourceGroupId = recoveryAzureResourceGroupId;
            return this;
        }

        public Builder recoveryAzureStorageAccount(@Nullable String recoveryAzureStorageAccount) {
            $.recoveryAzureStorageAccount = recoveryAzureStorageAccount;
            return this;
        }

        public Builder recoveryAzureVMName(@Nullable String recoveryAzureVMName) {
            $.recoveryAzureVMName = recoveryAzureVMName;
            return this;
        }

        public Builder recoveryAzureVMSize(@Nullable String recoveryAzureVMSize) {
            $.recoveryAzureVMSize = recoveryAzureVMSize;
            return this;
        }

        public Builder replicaId(@Nullable String replicaId) {
            $.replicaId = replicaId;
            return this;
        }

        public Builder resyncProgressPercentage(@Nullable Integer resyncProgressPercentage) {
            $.resyncProgressPercentage = resyncProgressPercentage;
            return this;
        }

        public Builder rpoInSeconds(@Nullable Double rpoInSeconds) {
            $.rpoInSeconds = rpoInSeconds;
            return this;
        }

        public Builder selectedRecoveryAzureNetworkId(@Nullable String selectedRecoveryAzureNetworkId) {
            $.selectedRecoveryAzureNetworkId = selectedRecoveryAzureNetworkId;
            return this;
        }

        public Builder selectedSourceNicId(@Nullable String selectedSourceNicId) {
            $.selectedSourceNicId = selectedSourceNicId;
            return this;
        }

        public Builder selectedTfoAzureNetworkId(@Nullable String selectedTfoAzureNetworkId) {
            $.selectedTfoAzureNetworkId = selectedTfoAzureNetworkId;
            return this;
        }

        public Builder sourceVmCpuCount(@Nullable Integer sourceVmCpuCount) {
            $.sourceVmCpuCount = sourceVmCpuCount;
            return this;
        }

        public Builder sourceVmRamSizeInMB(@Nullable Integer sourceVmRamSizeInMB) {
            $.sourceVmRamSizeInMB = sourceVmRamSizeInMB;
            return this;
        }

        public Builder targetAvailabilityZone(@Nullable String targetAvailabilityZone) {
            $.targetAvailabilityZone = targetAvailabilityZone;
            return this;
        }

        public Builder targetProximityPlacementGroupId(@Nullable String targetProximityPlacementGroupId) {
            $.targetProximityPlacementGroupId = targetProximityPlacementGroupId;
            return this;
        }

        public Builder targetVmId(@Nullable String targetVmId) {
            $.targetVmId = targetVmId;
            return this;
        }

        public Builder uncompressedDataRateInMB(@Nullable Double uncompressedDataRateInMB) {
            $.uncompressedDataRateInMB = uncompressedDataRateInMB;
            return this;
        }

        public Builder useManagedDisks(@Nullable String useManagedDisks) {
            $.useManagedDisks = useManagedDisks;
            return this;
        }

        public Builder vCenterInfrastructureId(@Nullable String vCenterInfrastructureId) {
            $.vCenterInfrastructureId = vCenterInfrastructureId;
            return this;
        }

        public Builder validationErrors(@Nullable List<HealthErrorResponse> validationErrors) {
            $.validationErrors = validationErrors;
            return this;
        }

        public Builder validationErrors(HealthErrorResponse... validationErrors) {
            return validationErrors(List.of(validationErrors));
        }

        public Builder vhdName(@Nullable String vhdName) {
            $.vhdName = vhdName;
            return this;
        }

        public Builder vmId(@Nullable String vmId) {
            $.vmId = vmId;
            return this;
        }

        public Builder vmNics(@Nullable List<VMNicDetailsResponse> vmNics) {
            $.vmNics = vmNics;
            return this;
        }

        public Builder vmNics(VMNicDetailsResponse... vmNics) {
            return vmNics(List.of(vmNics));
        }

        public Builder vmProtectionState(@Nullable String vmProtectionState) {
            $.vmProtectionState = vmProtectionState;
            return this;
        }

        public Builder vmProtectionStateDescription(@Nullable String vmProtectionStateDescription) {
            $.vmProtectionStateDescription = vmProtectionStateDescription;
            return this;
        }

        public InMageAzureV2ReplicationDetailsResponse build() {
            $.instanceType = Codegen.stringProp("instanceType").arg($.instanceType).require();
            $.processServerName = Objects.requireNonNull($.processServerName, "expected parameter 'processServerName' to be non-null");
            return $;
        }
    }

}
