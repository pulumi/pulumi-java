// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.machinelearningservices.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;


/**
 * Progress metrics for a labeling job.
 * 
 */
public final class ProgressMetricsResponse extends com.pulumi.resources.InvokeArgs {

    public static final ProgressMetricsResponse Empty = new ProgressMetricsResponse();

    /**
     * The completed datapoint count.
     * 
     */
    @Import(name="completedDatapointCount", required=true)
    private Double completedDatapointCount;

    /**
     * @return The completed datapoint count.
     * 
     */
    public Double completedDatapointCount() {
        return this.completedDatapointCount;
    }

    /**
     * The time of last successful incremental dataset refresh in UTC.
     * 
     */
    @Import(name="incrementalDatasetLastRefreshTime", required=true)
    private String incrementalDatasetLastRefreshTime;

    /**
     * @return The time of last successful incremental dataset refresh in UTC.
     * 
     */
    public String incrementalDatasetLastRefreshTime() {
        return this.incrementalDatasetLastRefreshTime;
    }

    /**
     * The skipped datapoint count.
     * 
     */
    @Import(name="skippedDatapointCount", required=true)
    private Double skippedDatapointCount;

    /**
     * @return The skipped datapoint count.
     * 
     */
    public Double skippedDatapointCount() {
        return this.skippedDatapointCount;
    }

    /**
     * The total datapoint count.
     * 
     */
    @Import(name="totalDatapointCount", required=true)
    private Double totalDatapointCount;

    /**
     * @return The total datapoint count.
     * 
     */
    public Double totalDatapointCount() {
        return this.totalDatapointCount;
    }

    private ProgressMetricsResponse() {}

    private ProgressMetricsResponse(ProgressMetricsResponse $) {
        this.completedDatapointCount = $.completedDatapointCount;
        this.incrementalDatasetLastRefreshTime = $.incrementalDatasetLastRefreshTime;
        this.skippedDatapointCount = $.skippedDatapointCount;
        this.totalDatapointCount = $.totalDatapointCount;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProgressMetricsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProgressMetricsResponse $;

        public Builder() {
            $ = new ProgressMetricsResponse();
        }

        public Builder(ProgressMetricsResponse defaults) {
            $ = new ProgressMetricsResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param completedDatapointCount The completed datapoint count.
         * 
         * @return builder
         * 
         */
        public Builder completedDatapointCount(Double completedDatapointCount) {
            $.completedDatapointCount = completedDatapointCount;
            return this;
        }

        /**
         * @param incrementalDatasetLastRefreshTime The time of last successful incremental dataset refresh in UTC.
         * 
         * @return builder
         * 
         */
        public Builder incrementalDatasetLastRefreshTime(String incrementalDatasetLastRefreshTime) {
            $.incrementalDatasetLastRefreshTime = incrementalDatasetLastRefreshTime;
            return this;
        }

        /**
         * @param skippedDatapointCount The skipped datapoint count.
         * 
         * @return builder
         * 
         */
        public Builder skippedDatapointCount(Double skippedDatapointCount) {
            $.skippedDatapointCount = skippedDatapointCount;
            return this;
        }

        /**
         * @param totalDatapointCount The total datapoint count.
         * 
         * @return builder
         * 
         */
        public Builder totalDatapointCount(Double totalDatapointCount) {
            $.totalDatapointCount = totalDatapointCount;
            return this;
        }

        public ProgressMetricsResponse build() {
            $.completedDatapointCount = Objects.requireNonNull($.completedDatapointCount, "expected parameter 'completedDatapointCount' to be non-null");
            $.incrementalDatasetLastRefreshTime = Objects.requireNonNull($.incrementalDatasetLastRefreshTime, "expected parameter 'incrementalDatasetLastRefreshTime' to be non-null");
            $.skippedDatapointCount = Objects.requireNonNull($.skippedDatapointCount, "expected parameter 'skippedDatapointCount' to be non-null");
            $.totalDatapointCount = Objects.requireNonNull($.totalDatapointCount, "expected parameter 'totalDatapointCount' to be non-null");
            return $;
        }
    }

}
