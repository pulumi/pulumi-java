// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.containerregistry;

import com.pulumi.azurenative.containerregistry.enums.WebhookAction;
import com.pulumi.azurenative.containerregistry.enums.WebhookStatus;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WebhookArgs extends com.pulumi.resources.ResourceArgs {

    public static final WebhookArgs Empty = new WebhookArgs();

    /**
     * The list of actions that trigger the webhook to post notifications.
     * 
     */
    @Import(name="actions", required=true)
    private Output<List<Either<String,WebhookAction>>> actions;

    public Output<List<Either<String,WebhookAction>>> actions() {
        return this.actions;
    }

    /**
     * Custom headers that will be added to the webhook notifications.
     * 
     */
    @Import(name="customHeaders")
    private @Nullable Output<Map<String,String>> customHeaders;

    public Optional<Output<Map<String,String>>> customHeaders() {
        return Optional.ofNullable(this.customHeaders);
    }

    /**
     * The location of the webhook. This cannot be changed after the resource is created.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name of the container registry.
     * 
     */
    @Import(name="registryName", required=true)
    private Output<String> registryName;

    public Output<String> registryName() {
        return this.registryName;
    }

    /**
     * The name of the resource group to which the container registry belongs.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The scope of repositories where the event can be triggered. For example, &#39;foo:*&#39; means events for all tags under repository &#39;foo&#39;. &#39;foo:bar&#39; means events for &#39;foo:bar&#39; only. &#39;foo&#39; is equivalent to &#39;foo:latest&#39;. Empty means all events.
     * 
     */
    @Import(name="scope")
    private @Nullable Output<String> scope;

    public Optional<Output<String>> scope() {
        return Optional.ofNullable(this.scope);
    }

    /**
     * The service URI for the webhook to post notifications.
     * 
     */
    @Import(name="serviceUri", required=true)
    private Output<String> serviceUri;

    public Output<String> serviceUri() {
        return this.serviceUri;
    }

    /**
     * The status of the webhook at the time the operation was called.
     * 
     */
    @Import(name="status")
    private @Nullable Output<Either<String,WebhookStatus>> status;

    public Optional<Output<Either<String,WebhookStatus>>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The tags for the webhook.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The name of the webhook.
     * 
     */
    @Import(name="webhookName")
    private @Nullable Output<String> webhookName;

    public Optional<Output<String>> webhookName() {
        return Optional.ofNullable(this.webhookName);
    }

    private WebhookArgs() {}

    private WebhookArgs(WebhookArgs $) {
        this.actions = $.actions;
        this.customHeaders = $.customHeaders;
        this.location = $.location;
        this.registryName = $.registryName;
        this.resourceGroupName = $.resourceGroupName;
        this.scope = $.scope;
        this.serviceUri = $.serviceUri;
        this.status = $.status;
        this.tags = $.tags;
        this.webhookName = $.webhookName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WebhookArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WebhookArgs $;

        public Builder() {
            $ = new WebhookArgs();
        }

        public Builder(WebhookArgs defaults) {
            $ = new WebhookArgs(Objects.requireNonNull(defaults));
        }

        public Builder actions(Output<List<Either<String,WebhookAction>>> actions) {
            $.actions = actions;
            return this;
        }

        public Builder actions(List<Either<String,WebhookAction>> actions) {
            return actions(Output.of(actions));
        }

        public Builder actions(Either<String,WebhookAction>... actions) {
            return actions(List.of(actions));
        }

        public Builder customHeaders(@Nullable Output<Map<String,String>> customHeaders) {
            $.customHeaders = customHeaders;
            return this;
        }

        public Builder customHeaders(Map<String,String> customHeaders) {
            return customHeaders(Output.of(customHeaders));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder registryName(Output<String> registryName) {
            $.registryName = registryName;
            return this;
        }

        public Builder registryName(String registryName) {
            return registryName(Output.of(registryName));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder scope(@Nullable Output<String> scope) {
            $.scope = scope;
            return this;
        }

        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        public Builder serviceUri(Output<String> serviceUri) {
            $.serviceUri = serviceUri;
            return this;
        }

        public Builder serviceUri(String serviceUri) {
            return serviceUri(Output.of(serviceUri));
        }

        public Builder status(@Nullable Output<Either<String,WebhookStatus>> status) {
            $.status = status;
            return this;
        }

        public Builder status(Either<String,WebhookStatus> status) {
            return status(Output.of(status));
        }

        public Builder status(String status) {
            return status(Either.ofLeft(status));
        }

        public Builder status(WebhookStatus status) {
            return status(Either.ofRight(status));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder webhookName(@Nullable Output<String> webhookName) {
            $.webhookName = webhookName;
            return this;
        }

        public Builder webhookName(String webhookName) {
            return webhookName(Output.of(webhookName));
        }

        public WebhookArgs build() {
            $.actions = Objects.requireNonNull($.actions, "expected parameter 'actions' to be non-null");
            $.registryName = Objects.requireNonNull($.registryName, "expected parameter 'registryName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.serviceUri = Objects.requireNonNull($.serviceUri, "expected parameter 'serviceUri' to be non-null");
            return $;
        }
    }

}
