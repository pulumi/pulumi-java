// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.batch.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class LinuxUserConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final LinuxUserConfigurationArgs Empty = new LinuxUserConfigurationArgs();

    /**
     * The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the gid.
     * 
     */
    @Import(name="gid")
      private final @Nullable Output<Integer> gid;

    public Output<Integer> gid() {
        return this.gid == null ? Codegen.empty() : this.gid;
    }

    /**
     * The private key must not be password protected. The private key is used to automatically configure asymmetric-key based authentication for SSH between nodes in a Linux pool when the pool&#39;s enableInterNodeCommunication property is true (it is ignored if enableInterNodeCommunication is false). It does this by placing the key pair into the user&#39;s .ssh directory. If not specified, password-less SSH is not configured between nodes (no modification of the user&#39;s .ssh directory is done).
     * 
     */
    @Import(name="sshPrivateKey")
      private final @Nullable Output<String> sshPrivateKey;

    public Output<String> sshPrivateKey() {
        return this.sshPrivateKey == null ? Codegen.empty() : this.sshPrivateKey;
    }

    /**
     * The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the uid.
     * 
     */
    @Import(name="uid")
      private final @Nullable Output<Integer> uid;

    public Output<Integer> uid() {
        return this.uid == null ? Codegen.empty() : this.uid;
    }

    public LinuxUserConfigurationArgs(
        @Nullable Output<Integer> gid,
        @Nullable Output<String> sshPrivateKey,
        @Nullable Output<Integer> uid) {
        this.gid = gid;
        this.sshPrivateKey = sshPrivateKey;
        this.uid = uid;
    }

    private LinuxUserConfigurationArgs() {
        this.gid = Codegen.empty();
        this.sshPrivateKey = Codegen.empty();
        this.uid = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LinuxUserConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Integer> gid;
        private @Nullable Output<String> sshPrivateKey;
        private @Nullable Output<Integer> uid;

        public Builder() {
    	      // Empty
        }

        public Builder(LinuxUserConfigurationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.gid = defaults.gid;
    	      this.sshPrivateKey = defaults.sshPrivateKey;
    	      this.uid = defaults.uid;
        }

        public Builder gid(@Nullable Output<Integer> gid) {
            this.gid = gid;
            return this;
        }
        public Builder gid(@Nullable Integer gid) {
            this.gid = Codegen.ofNullable(gid);
            return this;
        }
        public Builder sshPrivateKey(@Nullable Output<String> sshPrivateKey) {
            this.sshPrivateKey = sshPrivateKey;
            return this;
        }
        public Builder sshPrivateKey(@Nullable String sshPrivateKey) {
            this.sshPrivateKey = Codegen.ofNullable(sshPrivateKey);
            return this;
        }
        public Builder uid(@Nullable Output<Integer> uid) {
            this.uid = uid;
            return this;
        }
        public Builder uid(@Nullable Integer uid) {
            this.uid = Codegen.ofNullable(uid);
            return this;
        }        public LinuxUserConfigurationArgs build() {
            return new LinuxUserConfigurationArgs(gid, sshPrivateKey, uid);
        }
    }
}
