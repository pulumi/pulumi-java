// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.elasticsan;

import com.pulumi.azurenative.elasticsan.inputs.SourceCreationDataArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VolumeArgs extends com.pulumi.resources.ResourceArgs {

    public static final VolumeArgs Empty = new VolumeArgs();

    /**
     * State of the operation on the resource.
     * 
     */
    @Import(name="creationData")
    private @Nullable Output<SourceCreationDataArgs> creationData;

    /**
     * @return State of the operation on the resource.
     * 
     */
    public Optional<Output<SourceCreationDataArgs>> creationData() {
        return Optional.ofNullable(this.creationData);
    }

    /**
     * The name of the ElasticSan.
     * 
     */
    @Import(name="elasticSanName", required=true)
    private Output<String> elasticSanName;

    /**
     * @return The name of the ElasticSan.
     * 
     */
    public Output<String> elasticSanName() {
        return this.elasticSanName;
    }

    /**
     * The geo-location where the resource lives.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The geo-location where the resource lives.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group. The name is case insensitive.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Volume size.
     * 
     */
    @Import(name="sizeGiB")
    private @Nullable Output<Double> sizeGiB;

    /**
     * @return Volume size.
     * 
     */
    public Optional<Output<Double>> sizeGiB() {
        return Optional.ofNullable(this.sizeGiB);
    }

    /**
     * Azure resource tags.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Azure resource tags.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The name of the VolumeGroup.
     * 
     */
    @Import(name="volumeGroupName", required=true)
    private Output<String> volumeGroupName;

    /**
     * @return The name of the VolumeGroup.
     * 
     */
    public Output<String> volumeGroupName() {
        return this.volumeGroupName;
    }

    /**
     * The name of the Volume.
     * 
     */
    @Import(name="volumeName")
    private @Nullable Output<String> volumeName;

    /**
     * @return The name of the Volume.
     * 
     */
    public Optional<Output<String>> volumeName() {
        return Optional.ofNullable(this.volumeName);
    }

    private VolumeArgs() {}

    private VolumeArgs(VolumeArgs $) {
        this.creationData = $.creationData;
        this.elasticSanName = $.elasticSanName;
        this.location = $.location;
        this.resourceGroupName = $.resourceGroupName;
        this.sizeGiB = $.sizeGiB;
        this.tags = $.tags;
        this.volumeGroupName = $.volumeGroupName;
        this.volumeName = $.volumeName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VolumeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VolumeArgs $;

        public Builder() {
            $ = new VolumeArgs();
        }

        public Builder(VolumeArgs defaults) {
            $ = new VolumeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param creationData State of the operation on the resource.
         * 
         * @return builder
         * 
         */
        public Builder creationData(@Nullable Output<SourceCreationDataArgs> creationData) {
            $.creationData = creationData;
            return this;
        }

        /**
         * @param creationData State of the operation on the resource.
         * 
         * @return builder
         * 
         */
        public Builder creationData(SourceCreationDataArgs creationData) {
            return creationData(Output.of(creationData));
        }

        /**
         * @param elasticSanName The name of the ElasticSan.
         * 
         * @return builder
         * 
         */
        public Builder elasticSanName(Output<String> elasticSanName) {
            $.elasticSanName = elasticSanName;
            return this;
        }

        /**
         * @param elasticSanName The name of the ElasticSan.
         * 
         * @return builder
         * 
         */
        public Builder elasticSanName(String elasticSanName) {
            return elasticSanName(Output.of(elasticSanName));
        }

        /**
         * @param location The geo-location where the resource lives.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The geo-location where the resource lives.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param sizeGiB Volume size.
         * 
         * @return builder
         * 
         */
        public Builder sizeGiB(@Nullable Output<Double> sizeGiB) {
            $.sizeGiB = sizeGiB;
            return this;
        }

        /**
         * @param sizeGiB Volume size.
         * 
         * @return builder
         * 
         */
        public Builder sizeGiB(Double sizeGiB) {
            return sizeGiB(Output.of(sizeGiB));
        }

        /**
         * @param tags Azure resource tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Azure resource tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param volumeGroupName The name of the VolumeGroup.
         * 
         * @return builder
         * 
         */
        public Builder volumeGroupName(Output<String> volumeGroupName) {
            $.volumeGroupName = volumeGroupName;
            return this;
        }

        /**
         * @param volumeGroupName The name of the VolumeGroup.
         * 
         * @return builder
         * 
         */
        public Builder volumeGroupName(String volumeGroupName) {
            return volumeGroupName(Output.of(volumeGroupName));
        }

        /**
         * @param volumeName The name of the Volume.
         * 
         * @return builder
         * 
         */
        public Builder volumeName(@Nullable Output<String> volumeName) {
            $.volumeName = volumeName;
            return this;
        }

        /**
         * @param volumeName The name of the Volume.
         * 
         * @return builder
         * 
         */
        public Builder volumeName(String volumeName) {
            return volumeName(Output.of(volumeName));
        }

        public VolumeArgs build() {
            $.elasticSanName = Objects.requireNonNull($.elasticSanName, "expected parameter 'elasticSanName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.volumeGroupName = Objects.requireNonNull($.volumeGroupName, "expected parameter 'volumeGroupName' to be non-null");
            return $;
        }
    }

}
