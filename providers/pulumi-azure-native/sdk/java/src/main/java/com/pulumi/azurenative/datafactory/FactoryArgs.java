// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory;

import com.pulumi.azurenative.datafactory.enums.PublicNetworkAccess;
import com.pulumi.azurenative.datafactory.inputs.EncryptionConfigurationArgs;
import com.pulumi.azurenative.datafactory.inputs.FactoryGitHubConfigurationArgs;
import com.pulumi.azurenative.datafactory.inputs.FactoryIdentityArgs;
import com.pulumi.azurenative.datafactory.inputs.FactoryVSTSConfigurationArgs;
import com.pulumi.azurenative.datafactory.inputs.GlobalParameterSpecificationArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FactoryArgs extends com.pulumi.resources.ResourceArgs {

    public static final FactoryArgs Empty = new FactoryArgs();

    /**
     * Properties to enable Customer Managed Key for the factory.
     * 
     */
    @Import(name="encryption")
    private @Nullable Output<EncryptionConfigurationArgs> encryption;

    public Optional<Output<EncryptionConfigurationArgs>> encryption() {
        return Optional.ofNullable(this.encryption);
    }

    /**
     * The factory name.
     * 
     */
    @Import(name="factoryName")
    private @Nullable Output<String> factoryName;

    public Optional<Output<String>> factoryName() {
        return Optional.ofNullable(this.factoryName);
    }

    /**
     * List of parameters for factory.
     * 
     */
    @Import(name="globalParameters")
    private @Nullable Output<Map<String,GlobalParameterSpecificationArgs>> globalParameters;

    public Optional<Output<Map<String,GlobalParameterSpecificationArgs>>> globalParameters() {
        return Optional.ofNullable(this.globalParameters);
    }

    /**
     * Managed service identity of the factory.
     * 
     */
    @Import(name="identity")
    private @Nullable Output<FactoryIdentityArgs> identity;

    public Optional<Output<FactoryIdentityArgs>> identity() {
        return Optional.ofNullable(this.identity);
    }

    /**
     * The resource location.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Whether or not public network access is allowed for the data factory.
     * 
     */
    @Import(name="publicNetworkAccess")
    private @Nullable Output<Either<String,PublicNetworkAccess>> publicNetworkAccess;

    public Optional<Output<Either<String,PublicNetworkAccess>>> publicNetworkAccess() {
        return Optional.ofNullable(this.publicNetworkAccess);
    }

    /**
     * Git repo information of the factory.
     * 
     */
    @Import(name="repoConfiguration")
    private @Nullable Output<Either<FactoryGitHubConfigurationArgs,FactoryVSTSConfigurationArgs>> repoConfiguration;

    public Optional<Output<Either<FactoryGitHubConfigurationArgs,FactoryVSTSConfigurationArgs>>> repoConfiguration() {
        return Optional.ofNullable(this.repoConfiguration);
    }

    /**
     * The resource group name.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The resource tags.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private FactoryArgs() {}

    private FactoryArgs(FactoryArgs $) {
        this.encryption = $.encryption;
        this.factoryName = $.factoryName;
        this.globalParameters = $.globalParameters;
        this.identity = $.identity;
        this.location = $.location;
        this.publicNetworkAccess = $.publicNetworkAccess;
        this.repoConfiguration = $.repoConfiguration;
        this.resourceGroupName = $.resourceGroupName;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FactoryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FactoryArgs $;

        public Builder() {
            $ = new FactoryArgs();
        }

        public Builder(FactoryArgs defaults) {
            $ = new FactoryArgs(Objects.requireNonNull(defaults));
        }

        public Builder encryption(@Nullable Output<EncryptionConfigurationArgs> encryption) {
            $.encryption = encryption;
            return this;
        }

        public Builder encryption(EncryptionConfigurationArgs encryption) {
            return encryption(Output.of(encryption));
        }

        public Builder factoryName(@Nullable Output<String> factoryName) {
            $.factoryName = factoryName;
            return this;
        }

        public Builder factoryName(String factoryName) {
            return factoryName(Output.of(factoryName));
        }

        public Builder globalParameters(@Nullable Output<Map<String,GlobalParameterSpecificationArgs>> globalParameters) {
            $.globalParameters = globalParameters;
            return this;
        }

        public Builder globalParameters(Map<String,GlobalParameterSpecificationArgs> globalParameters) {
            return globalParameters(Output.of(globalParameters));
        }

        public Builder identity(@Nullable Output<FactoryIdentityArgs> identity) {
            $.identity = identity;
            return this;
        }

        public Builder identity(FactoryIdentityArgs identity) {
            return identity(Output.of(identity));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder publicNetworkAccess(@Nullable Output<Either<String,PublicNetworkAccess>> publicNetworkAccess) {
            $.publicNetworkAccess = publicNetworkAccess;
            return this;
        }

        public Builder publicNetworkAccess(Either<String,PublicNetworkAccess> publicNetworkAccess) {
            return publicNetworkAccess(Output.of(publicNetworkAccess));
        }

        public Builder repoConfiguration(@Nullable Output<Either<FactoryGitHubConfigurationArgs,FactoryVSTSConfigurationArgs>> repoConfiguration) {
            $.repoConfiguration = repoConfiguration;
            return this;
        }

        public Builder repoConfiguration(Either<FactoryGitHubConfigurationArgs,FactoryVSTSConfigurationArgs> repoConfiguration) {
            return repoConfiguration(Output.of(repoConfiguration));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public FactoryArgs build() {
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
