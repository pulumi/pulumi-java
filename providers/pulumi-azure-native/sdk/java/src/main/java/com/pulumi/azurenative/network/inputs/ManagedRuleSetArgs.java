// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.azurenative.network.inputs.ManagedRuleGroupOverrideArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Defines a managed rule set.
 * 
 */
public final class ManagedRuleSetArgs extends com.pulumi.resources.ResourceArgs {

    public static final ManagedRuleSetArgs Empty = new ManagedRuleSetArgs();

    /**
     * Defines the rule group overrides to apply to the rule set.
     * 
     */
    @Import(name="ruleGroupOverrides")
    private @Nullable Output<List<ManagedRuleGroupOverrideArgs>> ruleGroupOverrides;

    /**
     * @return Defines the rule group overrides to apply to the rule set.
     * 
     */
    public Optional<Output<List<ManagedRuleGroupOverrideArgs>>> ruleGroupOverrides() {
        return Optional.ofNullable(this.ruleGroupOverrides);
    }

    /**
     * Defines the rule set type to use.
     * 
     */
    @Import(name="ruleSetType", required=true)
    private Output<String> ruleSetType;

    /**
     * @return Defines the rule set type to use.
     * 
     */
    public Output<String> ruleSetType() {
        return this.ruleSetType;
    }

    /**
     * Defines the version of the rule set to use.
     * 
     */
    @Import(name="ruleSetVersion", required=true)
    private Output<String> ruleSetVersion;

    /**
     * @return Defines the version of the rule set to use.
     * 
     */
    public Output<String> ruleSetVersion() {
        return this.ruleSetVersion;
    }

    private ManagedRuleSetArgs() {}

    private ManagedRuleSetArgs(ManagedRuleSetArgs $) {
        this.ruleGroupOverrides = $.ruleGroupOverrides;
        this.ruleSetType = $.ruleSetType;
        this.ruleSetVersion = $.ruleSetVersion;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagedRuleSetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagedRuleSetArgs $;

        public Builder() {
            $ = new ManagedRuleSetArgs();
        }

        public Builder(ManagedRuleSetArgs defaults) {
            $ = new ManagedRuleSetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param ruleGroupOverrides Defines the rule group overrides to apply to the rule set.
         * 
         * @return builder
         * 
         */
        public Builder ruleGroupOverrides(@Nullable Output<List<ManagedRuleGroupOverrideArgs>> ruleGroupOverrides) {
            $.ruleGroupOverrides = ruleGroupOverrides;
            return this;
        }

        /**
         * @param ruleGroupOverrides Defines the rule group overrides to apply to the rule set.
         * 
         * @return builder
         * 
         */
        public Builder ruleGroupOverrides(List<ManagedRuleGroupOverrideArgs> ruleGroupOverrides) {
            return ruleGroupOverrides(Output.of(ruleGroupOverrides));
        }

        /**
         * @param ruleGroupOverrides Defines the rule group overrides to apply to the rule set.
         * 
         * @return builder
         * 
         */
        public Builder ruleGroupOverrides(ManagedRuleGroupOverrideArgs... ruleGroupOverrides) {
            return ruleGroupOverrides(List.of(ruleGroupOverrides));
        }

        /**
         * @param ruleSetType Defines the rule set type to use.
         * 
         * @return builder
         * 
         */
        public Builder ruleSetType(Output<String> ruleSetType) {
            $.ruleSetType = ruleSetType;
            return this;
        }

        /**
         * @param ruleSetType Defines the rule set type to use.
         * 
         * @return builder
         * 
         */
        public Builder ruleSetType(String ruleSetType) {
            return ruleSetType(Output.of(ruleSetType));
        }

        /**
         * @param ruleSetVersion Defines the version of the rule set to use.
         * 
         * @return builder
         * 
         */
        public Builder ruleSetVersion(Output<String> ruleSetVersion) {
            $.ruleSetVersion = ruleSetVersion;
            return this;
        }

        /**
         * @param ruleSetVersion Defines the version of the rule set to use.
         * 
         * @return builder
         * 
         */
        public Builder ruleSetVersion(String ruleSetVersion) {
            return ruleSetVersion(Output.of(ruleSetVersion));
        }

        public ManagedRuleSetArgs build() {
            $.ruleSetType = Objects.requireNonNull($.ruleSetType, "expected parameter 'ruleSetType' to be non-null");
            $.ruleSetVersion = Objects.requireNonNull($.ruleSetVersion, "expected parameter 'ruleSetVersion' to be non-null");
            return $;
        }
    }

}
