// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.authorization;

import com.pulumi.azurenative.authorization.enums.LockLevel;
import com.pulumi.azurenative.authorization.inputs.ManagementLockOwnerArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ManagementLockByScopeArgs extends com.pulumi.resources.ResourceArgs {

    public static final ManagementLockByScopeArgs Empty = new ManagementLockByScopeArgs();

    /**
     * The level of the lock. Possible values are: NotSpecified, CanNotDelete, ReadOnly. CanNotDelete means authorized users are able to read and modify the resources, but not delete. ReadOnly means authorized users can only read from a resource, but they can&#39;t modify or delete it.
     * 
     */
    @Import(name="level", required=true)
    private Output<Either<String,LockLevel>> level;

    /**
     * @return The level of the lock. Possible values are: NotSpecified, CanNotDelete, ReadOnly. CanNotDelete means authorized users are able to read and modify the resources, but not delete. ReadOnly means authorized users can only read from a resource, but they can&#39;t modify or delete it.
     * 
     */
    public Output<Either<String,LockLevel>> level() {
        return this.level;
    }

    /**
     * The name of lock.
     * 
     */
    @Import(name="lockName")
    private @Nullable Output<String> lockName;

    /**
     * @return The name of lock.
     * 
     */
    public Optional<Output<String>> lockName() {
        return Optional.ofNullable(this.lockName);
    }

    /**
     * Notes about the lock. Maximum of 512 characters.
     * 
     */
    @Import(name="notes")
    private @Nullable Output<String> notes;

    /**
     * @return Notes about the lock. Maximum of 512 characters.
     * 
     */
    public Optional<Output<String>> notes() {
        return Optional.ofNullable(this.notes);
    }

    /**
     * The owners of the lock.
     * 
     */
    @Import(name="owners")
    private @Nullable Output<List<ManagementLockOwnerArgs>> owners;

    /**
     * @return The owners of the lock.
     * 
     */
    public Optional<Output<List<ManagementLockOwnerArgs>>> owners() {
        return Optional.ofNullable(this.owners);
    }

    /**
     * The scope for the lock. When providing a scope for the assignment, use &#39;/subscriptions/{subscriptionId}&#39; for subscriptions, &#39;/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}&#39; for resource groups, and &#39;/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePathIfPresent}/{resourceType}/{resourceName}&#39; for resources.
     * 
     */
    @Import(name="scope", required=true)
    private Output<String> scope;

    /**
     * @return The scope for the lock. When providing a scope for the assignment, use &#39;/subscriptions/{subscriptionId}&#39; for subscriptions, &#39;/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}&#39; for resource groups, and &#39;/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePathIfPresent}/{resourceType}/{resourceName}&#39; for resources.
     * 
     */
    public Output<String> scope() {
        return this.scope;
    }

    private ManagementLockByScopeArgs() {}

    private ManagementLockByScopeArgs(ManagementLockByScopeArgs $) {
        this.level = $.level;
        this.lockName = $.lockName;
        this.notes = $.notes;
        this.owners = $.owners;
        this.scope = $.scope;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagementLockByScopeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagementLockByScopeArgs $;

        public Builder() {
            $ = new ManagementLockByScopeArgs();
        }

        public Builder(ManagementLockByScopeArgs defaults) {
            $ = new ManagementLockByScopeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param level The level of the lock. Possible values are: NotSpecified, CanNotDelete, ReadOnly. CanNotDelete means authorized users are able to read and modify the resources, but not delete. ReadOnly means authorized users can only read from a resource, but they can&#39;t modify or delete it.
         * 
         * @return builder
         * 
         */
        public Builder level(Output<Either<String,LockLevel>> level) {
            $.level = level;
            return this;
        }

        /**
         * @param level The level of the lock. Possible values are: NotSpecified, CanNotDelete, ReadOnly. CanNotDelete means authorized users are able to read and modify the resources, but not delete. ReadOnly means authorized users can only read from a resource, but they can&#39;t modify or delete it.
         * 
         * @return builder
         * 
         */
        public Builder level(Either<String,LockLevel> level) {
            return level(Output.of(level));
        }

        /**
         * @param level The level of the lock. Possible values are: NotSpecified, CanNotDelete, ReadOnly. CanNotDelete means authorized users are able to read and modify the resources, but not delete. ReadOnly means authorized users can only read from a resource, but they can&#39;t modify or delete it.
         * 
         * @return builder
         * 
         */
        public Builder level(String level) {
            return level(Either.ofLeft(level));
        }

        /**
         * @param level The level of the lock. Possible values are: NotSpecified, CanNotDelete, ReadOnly. CanNotDelete means authorized users are able to read and modify the resources, but not delete. ReadOnly means authorized users can only read from a resource, but they can&#39;t modify or delete it.
         * 
         * @return builder
         * 
         */
        public Builder level(LockLevel level) {
            return level(Either.ofRight(level));
        }

        /**
         * @param lockName The name of lock.
         * 
         * @return builder
         * 
         */
        public Builder lockName(@Nullable Output<String> lockName) {
            $.lockName = lockName;
            return this;
        }

        /**
         * @param lockName The name of lock.
         * 
         * @return builder
         * 
         */
        public Builder lockName(String lockName) {
            return lockName(Output.of(lockName));
        }

        /**
         * @param notes Notes about the lock. Maximum of 512 characters.
         * 
         * @return builder
         * 
         */
        public Builder notes(@Nullable Output<String> notes) {
            $.notes = notes;
            return this;
        }

        /**
         * @param notes Notes about the lock. Maximum of 512 characters.
         * 
         * @return builder
         * 
         */
        public Builder notes(String notes) {
            return notes(Output.of(notes));
        }

        /**
         * @param owners The owners of the lock.
         * 
         * @return builder
         * 
         */
        public Builder owners(@Nullable Output<List<ManagementLockOwnerArgs>> owners) {
            $.owners = owners;
            return this;
        }

        /**
         * @param owners The owners of the lock.
         * 
         * @return builder
         * 
         */
        public Builder owners(List<ManagementLockOwnerArgs> owners) {
            return owners(Output.of(owners));
        }

        /**
         * @param owners The owners of the lock.
         * 
         * @return builder
         * 
         */
        public Builder owners(ManagementLockOwnerArgs... owners) {
            return owners(List.of(owners));
        }

        /**
         * @param scope The scope for the lock. When providing a scope for the assignment, use &#39;/subscriptions/{subscriptionId}&#39; for subscriptions, &#39;/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}&#39; for resource groups, and &#39;/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePathIfPresent}/{resourceType}/{resourceName}&#39; for resources.
         * 
         * @return builder
         * 
         */
        public Builder scope(Output<String> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope The scope for the lock. When providing a scope for the assignment, use &#39;/subscriptions/{subscriptionId}&#39; for subscriptions, &#39;/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}&#39; for resource groups, and &#39;/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePathIfPresent}/{resourceType}/{resourceName}&#39; for resources.
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        public ManagementLockByScopeArgs build() {
            $.level = Objects.requireNonNull($.level, "expected parameter 'level' to be non-null");
            $.scope = Objects.requireNonNull($.scope, "expected parameter 'scope' to be non-null");
            return $;
        }
    }

}
