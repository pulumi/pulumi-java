// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datamigration;

import com.pulumi.azurenative.datamigration.enums.ProjectSourcePlatform;
import com.pulumi.azurenative.datamigration.enums.ProjectTargetPlatform;
import com.pulumi.azurenative.datamigration.inputs.DatabaseInfoArgs;
import com.pulumi.azurenative.datamigration.inputs.MiSqlConnectionInfoArgs;
import com.pulumi.azurenative.datamigration.inputs.MySqlConnectionInfoArgs;
import com.pulumi.azurenative.datamigration.inputs.PostgreSqlConnectionInfoArgs;
import com.pulumi.azurenative.datamigration.inputs.SqlConnectionInfoArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProjectArgs Empty = new ProjectArgs();

    /**
     * List of DatabaseInfo
     * 
     */
    @Import(name="databasesInfo")
    private @Nullable Output<List<DatabaseInfoArgs>> databasesInfo;

    public Optional<Output<List<DatabaseInfoArgs>>> databasesInfo() {
        return Optional.ofNullable(this.databasesInfo);
    }

    /**
     * Name of the resource group
     * 
     */
    @Import(name="groupName", required=true)
    private Output<String> groupName;

    public Output<String> groupName() {
        return this.groupName;
    }

    /**
     * Resource location.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Name of the project
     * 
     */
    @Import(name="projectName")
    private @Nullable Output<String> projectName;

    public Optional<Output<String>> projectName() {
        return Optional.ofNullable(this.projectName);
    }

    /**
     * Name of the service
     * 
     */
    @Import(name="serviceName", required=true)
    private Output<String> serviceName;

    public Output<String> serviceName() {
        return this.serviceName;
    }

    /**
     * Information for connecting to source
     * 
     */
    @Import(name="sourceConnectionInfo")
    private @Nullable Output<Object> sourceConnectionInfo;

    public Optional<Output<Object>> sourceConnectionInfo() {
        return Optional.ofNullable(this.sourceConnectionInfo);
    }

    /**
     * Source platform for the project
     * 
     */
    @Import(name="sourcePlatform", required=true)
    private Output<Either<String,ProjectSourcePlatform>> sourcePlatform;

    public Output<Either<String,ProjectSourcePlatform>> sourcePlatform() {
        return this.sourcePlatform;
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Information for connecting to target
     * 
     */
    @Import(name="targetConnectionInfo")
    private @Nullable Output<Object> targetConnectionInfo;

    public Optional<Output<Object>> targetConnectionInfo() {
        return Optional.ofNullable(this.targetConnectionInfo);
    }

    /**
     * Target platform for the project
     * 
     */
    @Import(name="targetPlatform", required=true)
    private Output<Either<String,ProjectTargetPlatform>> targetPlatform;

    public Output<Either<String,ProjectTargetPlatform>> targetPlatform() {
        return this.targetPlatform;
    }

    private ProjectArgs() {}

    private ProjectArgs(ProjectArgs $) {
        this.databasesInfo = $.databasesInfo;
        this.groupName = $.groupName;
        this.location = $.location;
        this.projectName = $.projectName;
        this.serviceName = $.serviceName;
        this.sourceConnectionInfo = $.sourceConnectionInfo;
        this.sourcePlatform = $.sourcePlatform;
        this.tags = $.tags;
        this.targetConnectionInfo = $.targetConnectionInfo;
        this.targetPlatform = $.targetPlatform;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectArgs $;

        public Builder() {
            $ = new ProjectArgs();
        }

        public Builder(ProjectArgs defaults) {
            $ = new ProjectArgs(Objects.requireNonNull(defaults));
        }

        public Builder databasesInfo(@Nullable Output<List<DatabaseInfoArgs>> databasesInfo) {
            $.databasesInfo = databasesInfo;
            return this;
        }

        public Builder databasesInfo(List<DatabaseInfoArgs> databasesInfo) {
            return databasesInfo(Output.of(databasesInfo));
        }

        public Builder databasesInfo(DatabaseInfoArgs... databasesInfo) {
            return databasesInfo(List.of(databasesInfo));
        }

        public Builder groupName(Output<String> groupName) {
            $.groupName = groupName;
            return this;
        }

        public Builder groupName(String groupName) {
            return groupName(Output.of(groupName));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder projectName(@Nullable Output<String> projectName) {
            $.projectName = projectName;
            return this;
        }

        public Builder projectName(String projectName) {
            return projectName(Output.of(projectName));
        }

        public Builder serviceName(Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        public Builder sourceConnectionInfo(@Nullable Output<Object> sourceConnectionInfo) {
            $.sourceConnectionInfo = sourceConnectionInfo;
            return this;
        }

        public Builder sourceConnectionInfo(Object sourceConnectionInfo) {
            return sourceConnectionInfo(Output.of(sourceConnectionInfo));
        }

        public Builder sourcePlatform(Output<Either<String,ProjectSourcePlatform>> sourcePlatform) {
            $.sourcePlatform = sourcePlatform;
            return this;
        }

        public Builder sourcePlatform(Either<String,ProjectSourcePlatform> sourcePlatform) {
            return sourcePlatform(Output.of(sourcePlatform));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder targetConnectionInfo(@Nullable Output<Object> targetConnectionInfo) {
            $.targetConnectionInfo = targetConnectionInfo;
            return this;
        }

        public Builder targetConnectionInfo(Object targetConnectionInfo) {
            return targetConnectionInfo(Output.of(targetConnectionInfo));
        }

        public Builder targetPlatform(Output<Either<String,ProjectTargetPlatform>> targetPlatform) {
            $.targetPlatform = targetPlatform;
            return this;
        }

        public Builder targetPlatform(Either<String,ProjectTargetPlatform> targetPlatform) {
            return targetPlatform(Output.of(targetPlatform));
        }

        public ProjectArgs build() {
            $.groupName = Objects.requireNonNull($.groupName, "expected parameter 'groupName' to be non-null");
            $.serviceName = Objects.requireNonNull($.serviceName, "expected parameter 'serviceName' to be non-null");
            $.sourcePlatform = Objects.requireNonNull($.sourcePlatform, "expected parameter 'sourcePlatform' to be non-null");
            $.targetPlatform = Objects.requireNonNull($.targetPlatform, "expected parameter 'targetPlatform' to be non-null");
            return $;
        }
    }

}
