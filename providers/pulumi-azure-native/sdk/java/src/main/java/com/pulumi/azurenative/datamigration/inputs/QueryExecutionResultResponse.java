// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datamigration.inputs;

import com.pulumi.azurenative.datamigration.inputs.ExecutionStatisticsResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;


/**
 * Describes query analysis results for execution in source and target
 * 
 */
public final class QueryExecutionResultResponse extends com.pulumi.resources.InvokeArgs {

    public static final QueryExecutionResultResponse Empty = new QueryExecutionResultResponse();

    /**
     * Query text retrieved from the source server
     * 
     */
    @Import(name="queryText", required=true)
    private String queryText;

    /**
     * @return Query text retrieved from the source server
     * 
     */
    public String queryText() {
        return this.queryText;
    }

    /**
     * Query analysis result from the source
     * 
     */
    @Import(name="sourceResult", required=true)
    private ExecutionStatisticsResponse sourceResult;

    /**
     * @return Query analysis result from the source
     * 
     */
    public ExecutionStatisticsResponse sourceResult() {
        return this.sourceResult;
    }

    /**
     * Total no. of statements in the batch
     * 
     */
    @Import(name="statementsInBatch", required=true)
    private Double statementsInBatch;

    /**
     * @return Total no. of statements in the batch
     * 
     */
    public Double statementsInBatch() {
        return this.statementsInBatch;
    }

    /**
     * Query analysis result from the target
     * 
     */
    @Import(name="targetResult", required=true)
    private ExecutionStatisticsResponse targetResult;

    /**
     * @return Query analysis result from the target
     * 
     */
    public ExecutionStatisticsResponse targetResult() {
        return this.targetResult;
    }

    private QueryExecutionResultResponse() {}

    private QueryExecutionResultResponse(QueryExecutionResultResponse $) {
        this.queryText = $.queryText;
        this.sourceResult = $.sourceResult;
        this.statementsInBatch = $.statementsInBatch;
        this.targetResult = $.targetResult;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(QueryExecutionResultResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private QueryExecutionResultResponse $;

        public Builder() {
            $ = new QueryExecutionResultResponse();
        }

        public Builder(QueryExecutionResultResponse defaults) {
            $ = new QueryExecutionResultResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param queryText Query text retrieved from the source server
         * 
         * @return builder
         * 
         */
        public Builder queryText(String queryText) {
            $.queryText = queryText;
            return this;
        }

        /**
         * @param sourceResult Query analysis result from the source
         * 
         * @return builder
         * 
         */
        public Builder sourceResult(ExecutionStatisticsResponse sourceResult) {
            $.sourceResult = sourceResult;
            return this;
        }

        /**
         * @param statementsInBatch Total no. of statements in the batch
         * 
         * @return builder
         * 
         */
        public Builder statementsInBatch(Double statementsInBatch) {
            $.statementsInBatch = statementsInBatch;
            return this;
        }

        /**
         * @param targetResult Query analysis result from the target
         * 
         * @return builder
         * 
         */
        public Builder targetResult(ExecutionStatisticsResponse targetResult) {
            $.targetResult = targetResult;
            return this;
        }

        public QueryExecutionResultResponse build() {
            $.queryText = Objects.requireNonNull($.queryText, "expected parameter 'queryText' to be non-null");
            $.sourceResult = Objects.requireNonNull($.sourceResult, "expected parameter 'sourceResult' to be non-null");
            $.statementsInBatch = Objects.requireNonNull($.statementsInBatch, "expected parameter 'statementsInBatch' to be non-null");
            $.targetResult = Objects.requireNonNull($.targetResult, "expected parameter 'targetResult' to be non-null");
            return $;
        }
    }

}
