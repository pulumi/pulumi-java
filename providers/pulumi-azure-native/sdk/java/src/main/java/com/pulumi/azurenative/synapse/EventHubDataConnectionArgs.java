// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.synapse;

import com.pulumi.azurenative.synapse.enums.Compression;
import com.pulumi.azurenative.synapse.enums.EventHubDataFormat;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EventHubDataConnectionArgs extends com.pulumi.resources.ResourceArgs {

    public static final EventHubDataConnectionArgs Empty = new EventHubDataConnectionArgs();

    /**
     * The event hub messages compression type
     * 
     */
    @Import(name="compression")
    private @Nullable Output<Either<String,Compression>> compression;

    public Optional<Output<Either<String,Compression>>> compression() {
        return Optional.ofNullable(this.compression);
    }

    /**
     * The event hub consumer group.
     * 
     */
    @Import(name="consumerGroup", required=true)
    private Output<String> consumerGroup;

    public Output<String> consumerGroup() {
        return this.consumerGroup;
    }

    /**
     * The name of the data connection.
     * 
     */
    @Import(name="dataConnectionName")
    private @Nullable Output<String> dataConnectionName;

    public Optional<Output<String>> dataConnectionName() {
        return Optional.ofNullable(this.dataConnectionName);
    }

    /**
     * The data format of the message. Optionally the data format can be added to each message.
     * 
     */
    @Import(name="dataFormat")
    private @Nullable Output<Either<String,EventHubDataFormat>> dataFormat;

    public Optional<Output<Either<String,EventHubDataFormat>>> dataFormat() {
        return Optional.ofNullable(this.dataFormat);
    }

    /**
     * The name of the database in the Kusto pool.
     * 
     */
    @Import(name="databaseName", required=true)
    private Output<String> databaseName;

    public Output<String> databaseName() {
        return this.databaseName;
    }

    /**
     * The resource ID of the event hub to be used to create a data connection.
     * 
     */
    @Import(name="eventHubResourceId", required=true)
    private Output<String> eventHubResourceId;

    public Output<String> eventHubResourceId() {
        return this.eventHubResourceId;
    }

    /**
     * System properties of the event hub
     * 
     */
    @Import(name="eventSystemProperties")
    private @Nullable Output<List<String>> eventSystemProperties;

    public Optional<Output<List<String>>> eventSystemProperties() {
        return Optional.ofNullable(this.eventSystemProperties);
    }

    /**
     * Kind of the endpoint for the data connection
     * Expected value is &#39;EventHub&#39;.
     * 
     */
    @Import(name="kind", required=true)
    private Output<String> kind;

    public Output<String> kind() {
        return this.kind;
    }

    /**
     * The name of the Kusto pool.
     * 
     */
    @Import(name="kustoPoolName", required=true)
    private Output<String> kustoPoolName;

    public Output<String> kustoPoolName() {
        return this.kustoPoolName;
    }

    /**
     * Resource location.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The mapping rule to be used to ingest the data. Optionally the mapping information can be added to each message.
     * 
     */
    @Import(name="mappingRuleName")
    private @Nullable Output<String> mappingRuleName;

    public Optional<Output<String>> mappingRuleName() {
        return Optional.ofNullable(this.mappingRuleName);
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The table where the data should be ingested. Optionally the table information can be added to each message.
     * 
     */
    @Import(name="tableName")
    private @Nullable Output<String> tableName;

    public Optional<Output<String>> tableName() {
        return Optional.ofNullable(this.tableName);
    }

    /**
     * The name of the workspace
     * 
     */
    @Import(name="workspaceName", required=true)
    private Output<String> workspaceName;

    public Output<String> workspaceName() {
        return this.workspaceName;
    }

    private EventHubDataConnectionArgs() {}

    private EventHubDataConnectionArgs(EventHubDataConnectionArgs $) {
        this.compression = $.compression;
        this.consumerGroup = $.consumerGroup;
        this.dataConnectionName = $.dataConnectionName;
        this.dataFormat = $.dataFormat;
        this.databaseName = $.databaseName;
        this.eventHubResourceId = $.eventHubResourceId;
        this.eventSystemProperties = $.eventSystemProperties;
        this.kind = $.kind;
        this.kustoPoolName = $.kustoPoolName;
        this.location = $.location;
        this.mappingRuleName = $.mappingRuleName;
        this.resourceGroupName = $.resourceGroupName;
        this.tableName = $.tableName;
        this.workspaceName = $.workspaceName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EventHubDataConnectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EventHubDataConnectionArgs $;

        public Builder() {
            $ = new EventHubDataConnectionArgs();
        }

        public Builder(EventHubDataConnectionArgs defaults) {
            $ = new EventHubDataConnectionArgs(Objects.requireNonNull(defaults));
        }

        public Builder compression(@Nullable Output<Either<String,Compression>> compression) {
            $.compression = compression;
            return this;
        }

        public Builder compression(Either<String,Compression> compression) {
            return compression(Output.of(compression));
        }

        public Builder consumerGroup(Output<String> consumerGroup) {
            $.consumerGroup = consumerGroup;
            return this;
        }

        public Builder consumerGroup(String consumerGroup) {
            return consumerGroup(Output.of(consumerGroup));
        }

        public Builder dataConnectionName(@Nullable Output<String> dataConnectionName) {
            $.dataConnectionName = dataConnectionName;
            return this;
        }

        public Builder dataConnectionName(String dataConnectionName) {
            return dataConnectionName(Output.of(dataConnectionName));
        }

        public Builder dataFormat(@Nullable Output<Either<String,EventHubDataFormat>> dataFormat) {
            $.dataFormat = dataFormat;
            return this;
        }

        public Builder dataFormat(Either<String,EventHubDataFormat> dataFormat) {
            return dataFormat(Output.of(dataFormat));
        }

        public Builder databaseName(Output<String> databaseName) {
            $.databaseName = databaseName;
            return this;
        }

        public Builder databaseName(String databaseName) {
            return databaseName(Output.of(databaseName));
        }

        public Builder eventHubResourceId(Output<String> eventHubResourceId) {
            $.eventHubResourceId = eventHubResourceId;
            return this;
        }

        public Builder eventHubResourceId(String eventHubResourceId) {
            return eventHubResourceId(Output.of(eventHubResourceId));
        }

        public Builder eventSystemProperties(@Nullable Output<List<String>> eventSystemProperties) {
            $.eventSystemProperties = eventSystemProperties;
            return this;
        }

        public Builder eventSystemProperties(List<String> eventSystemProperties) {
            return eventSystemProperties(Output.of(eventSystemProperties));
        }

        public Builder eventSystemProperties(String... eventSystemProperties) {
            return eventSystemProperties(List.of(eventSystemProperties));
        }

        public Builder kind(Output<String> kind) {
            $.kind = kind;
            return this;
        }

        public Builder kind(String kind) {
            return kind(Output.of(kind));
        }

        public Builder kustoPoolName(Output<String> kustoPoolName) {
            $.kustoPoolName = kustoPoolName;
            return this;
        }

        public Builder kustoPoolName(String kustoPoolName) {
            return kustoPoolName(Output.of(kustoPoolName));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder mappingRuleName(@Nullable Output<String> mappingRuleName) {
            $.mappingRuleName = mappingRuleName;
            return this;
        }

        public Builder mappingRuleName(String mappingRuleName) {
            return mappingRuleName(Output.of(mappingRuleName));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder tableName(@Nullable Output<String> tableName) {
            $.tableName = tableName;
            return this;
        }

        public Builder tableName(String tableName) {
            return tableName(Output.of(tableName));
        }

        public Builder workspaceName(Output<String> workspaceName) {
            $.workspaceName = workspaceName;
            return this;
        }

        public Builder workspaceName(String workspaceName) {
            return workspaceName(Output.of(workspaceName));
        }

        public EventHubDataConnectionArgs build() {
            $.consumerGroup = Objects.requireNonNull($.consumerGroup, "expected parameter 'consumerGroup' to be non-null");
            $.databaseName = Objects.requireNonNull($.databaseName, "expected parameter 'databaseName' to be non-null");
            $.eventHubResourceId = Objects.requireNonNull($.eventHubResourceId, "expected parameter 'eventHubResourceId' to be non-null");
            $.kind = Codegen.stringProp("kind").output().arg($.kind).require();
            $.kustoPoolName = Objects.requireNonNull($.kustoPoolName, "expected parameter 'kustoPoolName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.workspaceName = Objects.requireNonNull($.workspaceName, "expected parameter 'workspaceName' to be non-null");
            return $;
        }
    }

}
