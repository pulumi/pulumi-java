// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.recoveryservices.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A2A protected disk details.
 * 
 */
public final class A2AProtectedDiskDetailsResponse extends com.pulumi.resources.InvokeArgs {

    public static final A2AProtectedDiskDetailsResponse Empty = new A2AProtectedDiskDetailsResponse();

    /**
     * The disk level operations list.
     * 
     */
    @Import(name="allowedDiskLevelOperation")
    private @Nullable List<String> allowedDiskLevelOperation;

    /**
     * @return The disk level operations list.
     * 
     */
    public Optional<List<String>> allowedDiskLevelOperation() {
        return Optional.ofNullable(this.allowedDiskLevelOperation);
    }

    /**
     * The data pending at source virtual machine in MB.
     * 
     */
    @Import(name="dataPendingAtSourceAgentInMB")
    private @Nullable Double dataPendingAtSourceAgentInMB;

    /**
     * @return The data pending at source virtual machine in MB.
     * 
     */
    public Optional<Double> dataPendingAtSourceAgentInMB() {
        return Optional.ofNullable(this.dataPendingAtSourceAgentInMB);
    }

    /**
     * The data pending for replication in MB at staging account.
     * 
     */
    @Import(name="dataPendingInStagingStorageAccountInMB")
    private @Nullable Double dataPendingInStagingStorageAccountInMB;

    /**
     * @return The data pending for replication in MB at staging account.
     * 
     */
    public Optional<Double> dataPendingInStagingStorageAccountInMB() {
        return Optional.ofNullable(this.dataPendingInStagingStorageAccountInMB);
    }

    /**
     * The KeyVault resource id for secret (BEK).
     * 
     */
    @Import(name="dekKeyVaultArmId")
    private @Nullable String dekKeyVaultArmId;

    /**
     * @return The KeyVault resource id for secret (BEK).
     * 
     */
    public Optional<String> dekKeyVaultArmId() {
        return Optional.ofNullable(this.dekKeyVaultArmId);
    }

    /**
     * The disk capacity in bytes.
     * 
     */
    @Import(name="diskCapacityInBytes")
    private @Nullable Double diskCapacityInBytes;

    /**
     * @return The disk capacity in bytes.
     * 
     */
    public Optional<Double> diskCapacityInBytes() {
        return Optional.ofNullable(this.diskCapacityInBytes);
    }

    /**
     * The disk name.
     * 
     */
    @Import(name="diskName")
    private @Nullable String diskName;

    /**
     * @return The disk name.
     * 
     */
    public Optional<String> diskName() {
        return Optional.ofNullable(this.diskName);
    }

    /**
     * The disk state.
     * 
     */
    @Import(name="diskState")
    private @Nullable String diskState;

    /**
     * @return The disk state.
     * 
     */
    public Optional<String> diskState() {
        return Optional.ofNullable(this.diskState);
    }

    /**
     * The type of disk.
     * 
     */
    @Import(name="diskType")
    private @Nullable String diskType;

    /**
     * @return The type of disk.
     * 
     */
    public Optional<String> diskType() {
        return Optional.ofNullable(this.diskType);
    }

    /**
     * The disk uri.
     * 
     */
    @Import(name="diskUri")
    private @Nullable String diskUri;

    /**
     * @return The disk uri.
     * 
     */
    public Optional<String> diskUri() {
        return Optional.ofNullable(this.diskUri);
    }

    /**
     * A value indicating whether vm has encrypted os disk or not.
     * 
     */
    @Import(name="isDiskEncrypted")
    private @Nullable Boolean isDiskEncrypted;

    /**
     * @return A value indicating whether vm has encrypted os disk or not.
     * 
     */
    public Optional<Boolean> isDiskEncrypted() {
        return Optional.ofNullable(this.isDiskEncrypted);
    }

    /**
     * A value indicating whether disk key got encrypted or not.
     * 
     */
    @Import(name="isDiskKeyEncrypted")
    private @Nullable Boolean isDiskKeyEncrypted;

    /**
     * @return A value indicating whether disk key got encrypted or not.
     * 
     */
    public Optional<Boolean> isDiskKeyEncrypted() {
        return Optional.ofNullable(this.isDiskKeyEncrypted);
    }

    /**
     * The KeyVault resource id for key (KEK).
     * 
     */
    @Import(name="kekKeyVaultArmId")
    private @Nullable String kekKeyVaultArmId;

    /**
     * @return The KeyVault resource id for key (KEK).
     * 
     */
    public Optional<String> kekKeyVaultArmId() {
        return Optional.ofNullable(this.kekKeyVaultArmId);
    }

    /**
     * The key URL / identifier (KEK).
     * 
     */
    @Import(name="keyIdentifier")
    private @Nullable String keyIdentifier;

    /**
     * @return The key URL / identifier (KEK).
     * 
     */
    public Optional<String> keyIdentifier() {
        return Optional.ofNullable(this.keyIdentifier);
    }

    /**
     * The type of the monitoring job. The progress is contained in MonitoringPercentageCompletion property.
     * 
     */
    @Import(name="monitoringJobType")
    private @Nullable String monitoringJobType;

    /**
     * @return The type of the monitoring job. The progress is contained in MonitoringPercentageCompletion property.
     * 
     */
    public Optional<String> monitoringJobType() {
        return Optional.ofNullable(this.monitoringJobType);
    }

    /**
     * The percentage of the monitoring job. The type of the monitoring job is defined by MonitoringJobType property.
     * 
     */
    @Import(name="monitoringPercentageCompletion")
    private @Nullable Integer monitoringPercentageCompletion;

    /**
     * @return The percentage of the monitoring job. The type of the monitoring job is defined by MonitoringJobType property.
     * 
     */
    public Optional<Integer> monitoringPercentageCompletion() {
        return Optional.ofNullable(this.monitoringPercentageCompletion);
    }

    /**
     * The primary disk storage account.
     * 
     */
    @Import(name="primaryDiskAzureStorageAccountId")
    private @Nullable String primaryDiskAzureStorageAccountId;

    /**
     * @return The primary disk storage account.
     * 
     */
    public Optional<String> primaryDiskAzureStorageAccountId() {
        return Optional.ofNullable(this.primaryDiskAzureStorageAccountId);
    }

    /**
     * The primary staging storage account.
     * 
     */
    @Import(name="primaryStagingAzureStorageAccountId")
    private @Nullable String primaryStagingAzureStorageAccountId;

    /**
     * @return The primary staging storage account.
     * 
     */
    public Optional<String> primaryStagingAzureStorageAccountId() {
        return Optional.ofNullable(this.primaryStagingAzureStorageAccountId);
    }

    /**
     * The recovery disk storage account.
     * 
     */
    @Import(name="recoveryAzureStorageAccountId")
    private @Nullable String recoveryAzureStorageAccountId;

    /**
     * @return The recovery disk storage account.
     * 
     */
    public Optional<String> recoveryAzureStorageAccountId() {
        return Optional.ofNullable(this.recoveryAzureStorageAccountId);
    }

    /**
     * Recovery disk uri.
     * 
     */
    @Import(name="recoveryDiskUri")
    private @Nullable String recoveryDiskUri;

    /**
     * @return Recovery disk uri.
     * 
     */
    public Optional<String> recoveryDiskUri() {
        return Optional.ofNullable(this.recoveryDiskUri);
    }

    /**
     * A value indicating whether resync is required for this disk.
     * 
     */
    @Import(name="resyncRequired")
    private @Nullable Boolean resyncRequired;

    /**
     * @return A value indicating whether resync is required for this disk.
     * 
     */
    public Optional<Boolean> resyncRequired() {
        return Optional.ofNullable(this.resyncRequired);
    }

    /**
     * The secret URL / identifier (BEK).
     * 
     */
    @Import(name="secretIdentifier")
    private @Nullable String secretIdentifier;

    /**
     * @return The secret URL / identifier (BEK).
     * 
     */
    public Optional<String> secretIdentifier() {
        return Optional.ofNullable(this.secretIdentifier);
    }

    private A2AProtectedDiskDetailsResponse() {}

    private A2AProtectedDiskDetailsResponse(A2AProtectedDiskDetailsResponse $) {
        this.allowedDiskLevelOperation = $.allowedDiskLevelOperation;
        this.dataPendingAtSourceAgentInMB = $.dataPendingAtSourceAgentInMB;
        this.dataPendingInStagingStorageAccountInMB = $.dataPendingInStagingStorageAccountInMB;
        this.dekKeyVaultArmId = $.dekKeyVaultArmId;
        this.diskCapacityInBytes = $.diskCapacityInBytes;
        this.diskName = $.diskName;
        this.diskState = $.diskState;
        this.diskType = $.diskType;
        this.diskUri = $.diskUri;
        this.isDiskEncrypted = $.isDiskEncrypted;
        this.isDiskKeyEncrypted = $.isDiskKeyEncrypted;
        this.kekKeyVaultArmId = $.kekKeyVaultArmId;
        this.keyIdentifier = $.keyIdentifier;
        this.monitoringJobType = $.monitoringJobType;
        this.monitoringPercentageCompletion = $.monitoringPercentageCompletion;
        this.primaryDiskAzureStorageAccountId = $.primaryDiskAzureStorageAccountId;
        this.primaryStagingAzureStorageAccountId = $.primaryStagingAzureStorageAccountId;
        this.recoveryAzureStorageAccountId = $.recoveryAzureStorageAccountId;
        this.recoveryDiskUri = $.recoveryDiskUri;
        this.resyncRequired = $.resyncRequired;
        this.secretIdentifier = $.secretIdentifier;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(A2AProtectedDiskDetailsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private A2AProtectedDiskDetailsResponse $;

        public Builder() {
            $ = new A2AProtectedDiskDetailsResponse();
        }

        public Builder(A2AProtectedDiskDetailsResponse defaults) {
            $ = new A2AProtectedDiskDetailsResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowedDiskLevelOperation The disk level operations list.
         * 
         * @return builder
         * 
         */
        public Builder allowedDiskLevelOperation(@Nullable List<String> allowedDiskLevelOperation) {
            $.allowedDiskLevelOperation = allowedDiskLevelOperation;
            return this;
        }

        /**
         * @param allowedDiskLevelOperation The disk level operations list.
         * 
         * @return builder
         * 
         */
        public Builder allowedDiskLevelOperation(String... allowedDiskLevelOperation) {
            return allowedDiskLevelOperation(List.of(allowedDiskLevelOperation));
        }

        /**
         * @param dataPendingAtSourceAgentInMB The data pending at source virtual machine in MB.
         * 
         * @return builder
         * 
         */
        public Builder dataPendingAtSourceAgentInMB(@Nullable Double dataPendingAtSourceAgentInMB) {
            $.dataPendingAtSourceAgentInMB = dataPendingAtSourceAgentInMB;
            return this;
        }

        /**
         * @param dataPendingInStagingStorageAccountInMB The data pending for replication in MB at staging account.
         * 
         * @return builder
         * 
         */
        public Builder dataPendingInStagingStorageAccountInMB(@Nullable Double dataPendingInStagingStorageAccountInMB) {
            $.dataPendingInStagingStorageAccountInMB = dataPendingInStagingStorageAccountInMB;
            return this;
        }

        /**
         * @param dekKeyVaultArmId The KeyVault resource id for secret (BEK).
         * 
         * @return builder
         * 
         */
        public Builder dekKeyVaultArmId(@Nullable String dekKeyVaultArmId) {
            $.dekKeyVaultArmId = dekKeyVaultArmId;
            return this;
        }

        /**
         * @param diskCapacityInBytes The disk capacity in bytes.
         * 
         * @return builder
         * 
         */
        public Builder diskCapacityInBytes(@Nullable Double diskCapacityInBytes) {
            $.diskCapacityInBytes = diskCapacityInBytes;
            return this;
        }

        /**
         * @param diskName The disk name.
         * 
         * @return builder
         * 
         */
        public Builder diskName(@Nullable String diskName) {
            $.diskName = diskName;
            return this;
        }

        /**
         * @param diskState The disk state.
         * 
         * @return builder
         * 
         */
        public Builder diskState(@Nullable String diskState) {
            $.diskState = diskState;
            return this;
        }

        /**
         * @param diskType The type of disk.
         * 
         * @return builder
         * 
         */
        public Builder diskType(@Nullable String diskType) {
            $.diskType = diskType;
            return this;
        }

        /**
         * @param diskUri The disk uri.
         * 
         * @return builder
         * 
         */
        public Builder diskUri(@Nullable String diskUri) {
            $.diskUri = diskUri;
            return this;
        }

        /**
         * @param isDiskEncrypted A value indicating whether vm has encrypted os disk or not.
         * 
         * @return builder
         * 
         */
        public Builder isDiskEncrypted(@Nullable Boolean isDiskEncrypted) {
            $.isDiskEncrypted = isDiskEncrypted;
            return this;
        }

        /**
         * @param isDiskKeyEncrypted A value indicating whether disk key got encrypted or not.
         * 
         * @return builder
         * 
         */
        public Builder isDiskKeyEncrypted(@Nullable Boolean isDiskKeyEncrypted) {
            $.isDiskKeyEncrypted = isDiskKeyEncrypted;
            return this;
        }

        /**
         * @param kekKeyVaultArmId The KeyVault resource id for key (KEK).
         * 
         * @return builder
         * 
         */
        public Builder kekKeyVaultArmId(@Nullable String kekKeyVaultArmId) {
            $.kekKeyVaultArmId = kekKeyVaultArmId;
            return this;
        }

        /**
         * @param keyIdentifier The key URL / identifier (KEK).
         * 
         * @return builder
         * 
         */
        public Builder keyIdentifier(@Nullable String keyIdentifier) {
            $.keyIdentifier = keyIdentifier;
            return this;
        }

        /**
         * @param monitoringJobType The type of the monitoring job. The progress is contained in MonitoringPercentageCompletion property.
         * 
         * @return builder
         * 
         */
        public Builder monitoringJobType(@Nullable String monitoringJobType) {
            $.monitoringJobType = monitoringJobType;
            return this;
        }

        /**
         * @param monitoringPercentageCompletion The percentage of the monitoring job. The type of the monitoring job is defined by MonitoringJobType property.
         * 
         * @return builder
         * 
         */
        public Builder monitoringPercentageCompletion(@Nullable Integer monitoringPercentageCompletion) {
            $.monitoringPercentageCompletion = monitoringPercentageCompletion;
            return this;
        }

        /**
         * @param primaryDiskAzureStorageAccountId The primary disk storage account.
         * 
         * @return builder
         * 
         */
        public Builder primaryDiskAzureStorageAccountId(@Nullable String primaryDiskAzureStorageAccountId) {
            $.primaryDiskAzureStorageAccountId = primaryDiskAzureStorageAccountId;
            return this;
        }

        /**
         * @param primaryStagingAzureStorageAccountId The primary staging storage account.
         * 
         * @return builder
         * 
         */
        public Builder primaryStagingAzureStorageAccountId(@Nullable String primaryStagingAzureStorageAccountId) {
            $.primaryStagingAzureStorageAccountId = primaryStagingAzureStorageAccountId;
            return this;
        }

        /**
         * @param recoveryAzureStorageAccountId The recovery disk storage account.
         * 
         * @return builder
         * 
         */
        public Builder recoveryAzureStorageAccountId(@Nullable String recoveryAzureStorageAccountId) {
            $.recoveryAzureStorageAccountId = recoveryAzureStorageAccountId;
            return this;
        }

        /**
         * @param recoveryDiskUri Recovery disk uri.
         * 
         * @return builder
         * 
         */
        public Builder recoveryDiskUri(@Nullable String recoveryDiskUri) {
            $.recoveryDiskUri = recoveryDiskUri;
            return this;
        }

        /**
         * @param resyncRequired A value indicating whether resync is required for this disk.
         * 
         * @return builder
         * 
         */
        public Builder resyncRequired(@Nullable Boolean resyncRequired) {
            $.resyncRequired = resyncRequired;
            return this;
        }

        /**
         * @param secretIdentifier The secret URL / identifier (BEK).
         * 
         * @return builder
         * 
         */
        public Builder secretIdentifier(@Nullable String secretIdentifier) {
            $.secretIdentifier = secretIdentifier;
            return this;
        }

        public A2AProtectedDiskDetailsResponse build() {
            return $;
        }
    }

}
