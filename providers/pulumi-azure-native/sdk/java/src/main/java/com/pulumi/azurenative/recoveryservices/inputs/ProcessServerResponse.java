// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.recoveryservices.inputs;

import com.pulumi.azurenative.recoveryservices.inputs.HealthErrorResponse;
import com.pulumi.azurenative.recoveryservices.inputs.MobilityServiceUpdateResponse;
import com.pulumi.azurenative.recoveryservices.inputs.VersionDetailsResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Details of the Process Server.
 * 
 */
public final class ProcessServerResponse extends com.pulumi.resources.InvokeArgs {

    public static final ProcessServerResponse Empty = new ProcessServerResponse();

    /**
     * Agent expiry date.
     * 
     */
    @Import(name="agentExpiryDate")
    private @Nullable String agentExpiryDate;

    public Optional<String> agentExpiryDate() {
        return Optional.ofNullable(this.agentExpiryDate);
    }

    /**
     * The version of the scout component on the server.
     * 
     */
    @Import(name="agentVersion")
    private @Nullable String agentVersion;

    public Optional<String> agentVersion() {
        return Optional.ofNullable(this.agentVersion);
    }

    /**
     * The agent version details.
     * 
     */
    @Import(name="agentVersionDetails")
    private @Nullable VersionDetailsResponse agentVersionDetails;

    public Optional<VersionDetailsResponse> agentVersionDetails() {
        return Optional.ofNullable(this.agentVersionDetails);
    }

    /**
     * The available memory.
     * 
     */
    @Import(name="availableMemoryInBytes")
    private @Nullable Double availableMemoryInBytes;

    public Optional<Double> availableMemoryInBytes() {
        return Optional.ofNullable(this.availableMemoryInBytes);
    }

    /**
     * The available space.
     * 
     */
    @Import(name="availableSpaceInBytes")
    private @Nullable Double availableSpaceInBytes;

    public Optional<Double> availableSpaceInBytes() {
        return Optional.ofNullable(this.availableSpaceInBytes);
    }

    /**
     * The percentage of the CPU load.
     * 
     */
    @Import(name="cpuLoad")
    private @Nullable String cpuLoad;

    public Optional<String> cpuLoad() {
        return Optional.ofNullable(this.cpuLoad);
    }

    /**
     * The CPU load status.
     * 
     */
    @Import(name="cpuLoadStatus")
    private @Nullable String cpuLoadStatus;

    public Optional<String> cpuLoadStatus() {
        return Optional.ofNullable(this.cpuLoadStatus);
    }

    /**
     * The Process Server&#39;s friendly name.
     * 
     */
    @Import(name="friendlyName")
    private @Nullable String friendlyName;

    public Optional<String> friendlyName() {
        return Optional.ofNullable(this.friendlyName);
    }

    /**
     * The health of Process Server.
     * 
     */
    @Import(name="health", required=true)
    private String health;

    public String health() {
        return this.health;
    }

    /**
     * Health errors.
     * 
     */
    @Import(name="healthErrors")
    private @Nullable List<HealthErrorResponse> healthErrors;

    public Optional<List<HealthErrorResponse>> healthErrors() {
        return Optional.ofNullable(this.healthErrors);
    }

    /**
     * The agent generated Id.
     * 
     */
    @Import(name="hostId")
    private @Nullable String hostId;

    public Optional<String> hostId() {
        return Optional.ofNullable(this.hostId);
    }

    /**
     * The Process Server Id.
     * 
     */
    @Import(name="id")
    private @Nullable String id;

    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The IP address of the server.
     * 
     */
    @Import(name="ipAddress")
    private @Nullable String ipAddress;

    public Optional<String> ipAddress() {
        return Optional.ofNullable(this.ipAddress);
    }

    /**
     * The last heartbeat received from the server.
     * 
     */
    @Import(name="lastHeartbeat")
    private @Nullable String lastHeartbeat;

    public Optional<String> lastHeartbeat() {
        return Optional.ofNullable(this.lastHeartbeat);
    }

    /**
     * The servers configured with this PS.
     * 
     */
    @Import(name="machineCount")
    private @Nullable String machineCount;

    public Optional<String> machineCount() {
        return Optional.ofNullable(this.machineCount);
    }

    /**
     * The MARS communication status.
     * 
     */
    @Import(name="marsCommunicationStatus", required=true)
    private String marsCommunicationStatus;

    public String marsCommunicationStatus() {
        return this.marsCommunicationStatus;
    }

    /**
     * The MARS registration status.
     * 
     */
    @Import(name="marsRegistrationStatus", required=true)
    private String marsRegistrationStatus;

    public String marsRegistrationStatus() {
        return this.marsRegistrationStatus;
    }

    /**
     * The memory usage status.
     * 
     */
    @Import(name="memoryUsageStatus")
    private @Nullable String memoryUsageStatus;

    public Optional<String> memoryUsageStatus() {
        return Optional.ofNullable(this.memoryUsageStatus);
    }

    /**
     * The list of the mobility service updates available on the Process Server.
     * 
     */
    @Import(name="mobilityServiceUpdates")
    private @Nullable List<MobilityServiceUpdateResponse> mobilityServiceUpdates;

    public Optional<List<MobilityServiceUpdateResponse>> mobilityServiceUpdates() {
        return Optional.ofNullable(this.mobilityServiceUpdates);
    }

    /**
     * The OS type of the server.
     * 
     */
    @Import(name="osType")
    private @Nullable String osType;

    public Optional<String> osType() {
        return Optional.ofNullable(this.osType);
    }

    /**
     * OS Version of the process server. Note: This will get populated if user has CS version greater than 9.12.0.0.
     * 
     */
    @Import(name="osVersion")
    private @Nullable String osVersion;

    public Optional<String> osVersion() {
        return Optional.ofNullable(this.osVersion);
    }

    /**
     * The PS service status.
     * 
     */
    @Import(name="psServiceStatus")
    private @Nullable String psServiceStatus;

    public Optional<String> psServiceStatus() {
        return Optional.ofNullable(this.psServiceStatus);
    }

    /**
     * The process server stats refresh time.
     * 
     */
    @Import(name="psStatsRefreshTime", required=true)
    private String psStatsRefreshTime;

    public String psStatsRefreshTime() {
        return this.psStatsRefreshTime;
    }

    /**
     * The number of replication pairs configured in this PS.
     * 
     */
    @Import(name="replicationPairCount")
    private @Nullable String replicationPairCount;

    public Optional<String> replicationPairCount() {
        return Optional.ofNullable(this.replicationPairCount);
    }

    /**
     * The space usage status.
     * 
     */
    @Import(name="spaceUsageStatus")
    private @Nullable String spaceUsageStatus;

    public Optional<String> spaceUsageStatus() {
        return Optional.ofNullable(this.spaceUsageStatus);
    }

    /**
     * The PS SSL cert expiry date.
     * 
     */
    @Import(name="sslCertExpiryDate")
    private @Nullable String sslCertExpiryDate;

    public Optional<String> sslCertExpiryDate() {
        return Optional.ofNullable(this.sslCertExpiryDate);
    }

    /**
     * CS SSL cert expiry date.
     * 
     */
    @Import(name="sslCertExpiryRemainingDays")
    private @Nullable Integer sslCertExpiryRemainingDays;

    public Optional<Integer> sslCertExpiryRemainingDays() {
        return Optional.ofNullable(this.sslCertExpiryRemainingDays);
    }

    /**
     * The percentage of the system load.
     * 
     */
    @Import(name="systemLoad")
    private @Nullable String systemLoad;

    public Optional<String> systemLoad() {
        return Optional.ofNullable(this.systemLoad);
    }

    /**
     * The system load status.
     * 
     */
    @Import(name="systemLoadStatus")
    private @Nullable String systemLoadStatus;

    public Optional<String> systemLoadStatus() {
        return Optional.ofNullable(this.systemLoadStatus);
    }

    /**
     * The throughput in bytes.
     * 
     */
    @Import(name="throughputInBytes", required=true)
    private Double throughputInBytes;

    public Double throughputInBytes() {
        return this.throughputInBytes;
    }

    /**
     * The throughput in MBps.
     * 
     */
    @Import(name="throughputInMBps", required=true)
    private Double throughputInMBps;

    public Double throughputInMBps() {
        return this.throughputInMBps;
    }

    /**
     * The throughput status.
     * 
     */
    @Import(name="throughputStatus", required=true)
    private String throughputStatus;

    public String throughputStatus() {
        return this.throughputStatus;
    }

    /**
     * The uploading pending data in bytes.
     * 
     */
    @Import(name="throughputUploadPendingDataInBytes", required=true)
    private Double throughputUploadPendingDataInBytes;

    public Double throughputUploadPendingDataInBytes() {
        return this.throughputUploadPendingDataInBytes;
    }

    /**
     * The total memory.
     * 
     */
    @Import(name="totalMemoryInBytes")
    private @Nullable Double totalMemoryInBytes;

    public Optional<Double> totalMemoryInBytes() {
        return Optional.ofNullable(this.totalMemoryInBytes);
    }

    /**
     * The total space.
     * 
     */
    @Import(name="totalSpaceInBytes")
    private @Nullable Double totalSpaceInBytes;

    public Optional<Double> totalSpaceInBytes() {
        return Optional.ofNullable(this.totalSpaceInBytes);
    }

    /**
     * Version status
     * 
     */
    @Import(name="versionStatus")
    private @Nullable String versionStatus;

    public Optional<String> versionStatus() {
        return Optional.ofNullable(this.versionStatus);
    }

    private ProcessServerResponse() {}

    private ProcessServerResponse(ProcessServerResponse $) {
        this.agentExpiryDate = $.agentExpiryDate;
        this.agentVersion = $.agentVersion;
        this.agentVersionDetails = $.agentVersionDetails;
        this.availableMemoryInBytes = $.availableMemoryInBytes;
        this.availableSpaceInBytes = $.availableSpaceInBytes;
        this.cpuLoad = $.cpuLoad;
        this.cpuLoadStatus = $.cpuLoadStatus;
        this.friendlyName = $.friendlyName;
        this.health = $.health;
        this.healthErrors = $.healthErrors;
        this.hostId = $.hostId;
        this.id = $.id;
        this.ipAddress = $.ipAddress;
        this.lastHeartbeat = $.lastHeartbeat;
        this.machineCount = $.machineCount;
        this.marsCommunicationStatus = $.marsCommunicationStatus;
        this.marsRegistrationStatus = $.marsRegistrationStatus;
        this.memoryUsageStatus = $.memoryUsageStatus;
        this.mobilityServiceUpdates = $.mobilityServiceUpdates;
        this.osType = $.osType;
        this.osVersion = $.osVersion;
        this.psServiceStatus = $.psServiceStatus;
        this.psStatsRefreshTime = $.psStatsRefreshTime;
        this.replicationPairCount = $.replicationPairCount;
        this.spaceUsageStatus = $.spaceUsageStatus;
        this.sslCertExpiryDate = $.sslCertExpiryDate;
        this.sslCertExpiryRemainingDays = $.sslCertExpiryRemainingDays;
        this.systemLoad = $.systemLoad;
        this.systemLoadStatus = $.systemLoadStatus;
        this.throughputInBytes = $.throughputInBytes;
        this.throughputInMBps = $.throughputInMBps;
        this.throughputStatus = $.throughputStatus;
        this.throughputUploadPendingDataInBytes = $.throughputUploadPendingDataInBytes;
        this.totalMemoryInBytes = $.totalMemoryInBytes;
        this.totalSpaceInBytes = $.totalSpaceInBytes;
        this.versionStatus = $.versionStatus;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProcessServerResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProcessServerResponse $;

        public Builder() {
            $ = new ProcessServerResponse();
        }

        public Builder(ProcessServerResponse defaults) {
            $ = new ProcessServerResponse(Objects.requireNonNull(defaults));
        }

        public Builder agentExpiryDate(@Nullable String agentExpiryDate) {
            $.agentExpiryDate = agentExpiryDate;
            return this;
        }

        public Builder agentVersion(@Nullable String agentVersion) {
            $.agentVersion = agentVersion;
            return this;
        }

        public Builder agentVersionDetails(@Nullable VersionDetailsResponse agentVersionDetails) {
            $.agentVersionDetails = agentVersionDetails;
            return this;
        }

        public Builder availableMemoryInBytes(@Nullable Double availableMemoryInBytes) {
            $.availableMemoryInBytes = availableMemoryInBytes;
            return this;
        }

        public Builder availableSpaceInBytes(@Nullable Double availableSpaceInBytes) {
            $.availableSpaceInBytes = availableSpaceInBytes;
            return this;
        }

        public Builder cpuLoad(@Nullable String cpuLoad) {
            $.cpuLoad = cpuLoad;
            return this;
        }

        public Builder cpuLoadStatus(@Nullable String cpuLoadStatus) {
            $.cpuLoadStatus = cpuLoadStatus;
            return this;
        }

        public Builder friendlyName(@Nullable String friendlyName) {
            $.friendlyName = friendlyName;
            return this;
        }

        public Builder health(String health) {
            $.health = health;
            return this;
        }

        public Builder healthErrors(@Nullable List<HealthErrorResponse> healthErrors) {
            $.healthErrors = healthErrors;
            return this;
        }

        public Builder healthErrors(HealthErrorResponse... healthErrors) {
            return healthErrors(List.of(healthErrors));
        }

        public Builder hostId(@Nullable String hostId) {
            $.hostId = hostId;
            return this;
        }

        public Builder id(@Nullable String id) {
            $.id = id;
            return this;
        }

        public Builder ipAddress(@Nullable String ipAddress) {
            $.ipAddress = ipAddress;
            return this;
        }

        public Builder lastHeartbeat(@Nullable String lastHeartbeat) {
            $.lastHeartbeat = lastHeartbeat;
            return this;
        }

        public Builder machineCount(@Nullable String machineCount) {
            $.machineCount = machineCount;
            return this;
        }

        public Builder marsCommunicationStatus(String marsCommunicationStatus) {
            $.marsCommunicationStatus = marsCommunicationStatus;
            return this;
        }

        public Builder marsRegistrationStatus(String marsRegistrationStatus) {
            $.marsRegistrationStatus = marsRegistrationStatus;
            return this;
        }

        public Builder memoryUsageStatus(@Nullable String memoryUsageStatus) {
            $.memoryUsageStatus = memoryUsageStatus;
            return this;
        }

        public Builder mobilityServiceUpdates(@Nullable List<MobilityServiceUpdateResponse> mobilityServiceUpdates) {
            $.mobilityServiceUpdates = mobilityServiceUpdates;
            return this;
        }

        public Builder mobilityServiceUpdates(MobilityServiceUpdateResponse... mobilityServiceUpdates) {
            return mobilityServiceUpdates(List.of(mobilityServiceUpdates));
        }

        public Builder osType(@Nullable String osType) {
            $.osType = osType;
            return this;
        }

        public Builder osVersion(@Nullable String osVersion) {
            $.osVersion = osVersion;
            return this;
        }

        public Builder psServiceStatus(@Nullable String psServiceStatus) {
            $.psServiceStatus = psServiceStatus;
            return this;
        }

        public Builder psStatsRefreshTime(String psStatsRefreshTime) {
            $.psStatsRefreshTime = psStatsRefreshTime;
            return this;
        }

        public Builder replicationPairCount(@Nullable String replicationPairCount) {
            $.replicationPairCount = replicationPairCount;
            return this;
        }

        public Builder spaceUsageStatus(@Nullable String spaceUsageStatus) {
            $.spaceUsageStatus = spaceUsageStatus;
            return this;
        }

        public Builder sslCertExpiryDate(@Nullable String sslCertExpiryDate) {
            $.sslCertExpiryDate = sslCertExpiryDate;
            return this;
        }

        public Builder sslCertExpiryRemainingDays(@Nullable Integer sslCertExpiryRemainingDays) {
            $.sslCertExpiryRemainingDays = sslCertExpiryRemainingDays;
            return this;
        }

        public Builder systemLoad(@Nullable String systemLoad) {
            $.systemLoad = systemLoad;
            return this;
        }

        public Builder systemLoadStatus(@Nullable String systemLoadStatus) {
            $.systemLoadStatus = systemLoadStatus;
            return this;
        }

        public Builder throughputInBytes(Double throughputInBytes) {
            $.throughputInBytes = throughputInBytes;
            return this;
        }

        public Builder throughputInMBps(Double throughputInMBps) {
            $.throughputInMBps = throughputInMBps;
            return this;
        }

        public Builder throughputStatus(String throughputStatus) {
            $.throughputStatus = throughputStatus;
            return this;
        }

        public Builder throughputUploadPendingDataInBytes(Double throughputUploadPendingDataInBytes) {
            $.throughputUploadPendingDataInBytes = throughputUploadPendingDataInBytes;
            return this;
        }

        public Builder totalMemoryInBytes(@Nullable Double totalMemoryInBytes) {
            $.totalMemoryInBytes = totalMemoryInBytes;
            return this;
        }

        public Builder totalSpaceInBytes(@Nullable Double totalSpaceInBytes) {
            $.totalSpaceInBytes = totalSpaceInBytes;
            return this;
        }

        public Builder versionStatus(@Nullable String versionStatus) {
            $.versionStatus = versionStatus;
            return this;
        }

        public ProcessServerResponse build() {
            $.health = Objects.requireNonNull($.health, "expected parameter 'health' to be non-null");
            $.marsCommunicationStatus = Objects.requireNonNull($.marsCommunicationStatus, "expected parameter 'marsCommunicationStatus' to be non-null");
            $.marsRegistrationStatus = Objects.requireNonNull($.marsRegistrationStatus, "expected parameter 'marsRegistrationStatus' to be non-null");
            $.psStatsRefreshTime = Objects.requireNonNull($.psStatsRefreshTime, "expected parameter 'psStatsRefreshTime' to be non-null");
            $.throughputInBytes = Objects.requireNonNull($.throughputInBytes, "expected parameter 'throughputInBytes' to be non-null");
            $.throughputInMBps = Objects.requireNonNull($.throughputInMBps, "expected parameter 'throughputInMBps' to be non-null");
            $.throughputStatus = Objects.requireNonNull($.throughputStatus, "expected parameter 'throughputStatus' to be non-null");
            $.throughputUploadPendingDataInBytes = Objects.requireNonNull($.throughputUploadPendingDataInBytes, "expected parameter 'throughputUploadPendingDataInBytes' to be non-null");
            return $;
        }
    }

}
