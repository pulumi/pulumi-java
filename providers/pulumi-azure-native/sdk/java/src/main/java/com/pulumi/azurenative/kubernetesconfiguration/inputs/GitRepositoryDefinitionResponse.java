// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.kubernetesconfiguration.inputs;

import com.pulumi.azurenative.kubernetesconfiguration.inputs.RepositoryRefDefinitionResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Parameters to reconcile to the GitRepository source kind type.
 * 
 */
public final class GitRepositoryDefinitionResponse extends com.pulumi.resources.InvokeArgs {

    public static final GitRepositoryDefinitionResponse Empty = new GitRepositoryDefinitionResponse();

    /**
     * Base64-encoded HTTPS certificate authority contents used to access git private git repositories over HTTPS
     * 
     */
    @Import(name="httpsCAFile")
    private @Nullable String httpsCAFile;

    public Optional<String> httpsCAFile() {
        return Optional.ofNullable(this.httpsCAFile);
    }

    /**
     * Base64-encoded HTTPS username used to access private git repositories over HTTPS
     * 
     */
    @Import(name="httpsUser")
    private @Nullable String httpsUser;

    public Optional<String> httpsUser() {
        return Optional.ofNullable(this.httpsUser);
    }

    /**
     * Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided configuration secrets.
     * 
     */
    @Import(name="localAuthRef")
    private @Nullable String localAuthRef;

    public Optional<String> localAuthRef() {
        return Optional.ofNullable(this.localAuthRef);
    }

    /**
     * The source reference for the GitRepository object.
     * 
     */
    @Import(name="repositoryRef")
    private @Nullable RepositoryRefDefinitionResponse repositoryRef;

    public Optional<RepositoryRefDefinitionResponse> repositoryRef() {
        return Optional.ofNullable(this.repositoryRef);
    }

    /**
     * Base64-encoded known_hosts value containing public SSH keys required to access private git repositories over SSH
     * 
     */
    @Import(name="sshKnownHosts")
    private @Nullable String sshKnownHosts;

    public Optional<String> sshKnownHosts() {
        return Optional.ofNullable(this.sshKnownHosts);
    }

    /**
     * The interval at which to re-reconcile the cluster git repository source with the remote.
     * 
     */
    @Import(name="syncIntervalInSeconds")
    private @Nullable Double syncIntervalInSeconds;

    public Optional<Double> syncIntervalInSeconds() {
        return Optional.ofNullable(this.syncIntervalInSeconds);
    }

    /**
     * The maximum time to attempt to reconcile the cluster git repository source with the remote.
     * 
     */
    @Import(name="timeoutInSeconds")
    private @Nullable Double timeoutInSeconds;

    public Optional<Double> timeoutInSeconds() {
        return Optional.ofNullable(this.timeoutInSeconds);
    }

    /**
     * The URL to sync for the flux configuration git repository.
     * 
     */
    @Import(name="url")
    private @Nullable String url;

    public Optional<String> url() {
        return Optional.ofNullable(this.url);
    }

    private GitRepositoryDefinitionResponse() {}

    private GitRepositoryDefinitionResponse(GitRepositoryDefinitionResponse $) {
        this.httpsCAFile = $.httpsCAFile;
        this.httpsUser = $.httpsUser;
        this.localAuthRef = $.localAuthRef;
        this.repositoryRef = $.repositoryRef;
        this.sshKnownHosts = $.sshKnownHosts;
        this.syncIntervalInSeconds = $.syncIntervalInSeconds;
        this.timeoutInSeconds = $.timeoutInSeconds;
        this.url = $.url;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GitRepositoryDefinitionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GitRepositoryDefinitionResponse $;

        public Builder() {
            $ = new GitRepositoryDefinitionResponse();
        }

        public Builder(GitRepositoryDefinitionResponse defaults) {
            $ = new GitRepositoryDefinitionResponse(Objects.requireNonNull(defaults));
        }

        public Builder httpsCAFile(@Nullable String httpsCAFile) {
            $.httpsCAFile = httpsCAFile;
            return this;
        }

        public Builder httpsUser(@Nullable String httpsUser) {
            $.httpsUser = httpsUser;
            return this;
        }

        public Builder localAuthRef(@Nullable String localAuthRef) {
            $.localAuthRef = localAuthRef;
            return this;
        }

        public Builder repositoryRef(@Nullable RepositoryRefDefinitionResponse repositoryRef) {
            $.repositoryRef = repositoryRef;
            return this;
        }

        public Builder sshKnownHosts(@Nullable String sshKnownHosts) {
            $.sshKnownHosts = sshKnownHosts;
            return this;
        }

        public Builder syncIntervalInSeconds(@Nullable Double syncIntervalInSeconds) {
            $.syncIntervalInSeconds = syncIntervalInSeconds;
            return this;
        }

        public Builder timeoutInSeconds(@Nullable Double timeoutInSeconds) {
            $.timeoutInSeconds = timeoutInSeconds;
            return this;
        }

        public Builder url(@Nullable String url) {
            $.url = url;
            return this;
        }

        public GitRepositoryDefinitionResponse build() {
            $.syncIntervalInSeconds = Codegen.doubleProp("syncIntervalInSeconds").arg($.syncIntervalInSeconds).def(6e+02).getNullable();
            $.timeoutInSeconds = Codegen.doubleProp("timeoutInSeconds").arg($.timeoutInSeconds).def(6e+02).getNullable();
            return $;
        }
    }

}
