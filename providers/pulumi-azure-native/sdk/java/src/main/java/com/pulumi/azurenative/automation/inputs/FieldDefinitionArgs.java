// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.automation.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Definition of the connection fields.
 * 
 */
public final class FieldDefinitionArgs extends com.pulumi.resources.ResourceArgs {

    public static final FieldDefinitionArgs Empty = new FieldDefinitionArgs();

    /**
     * Gets or sets the isEncrypted flag of the connection field definition.
     * 
     */
    @Import(name="isEncrypted")
    private @Nullable Output<Boolean> isEncrypted;

    /**
     * @return Gets or sets the isEncrypted flag of the connection field definition.
     * 
     */
    public Optional<Output<Boolean>> isEncrypted() {
        return Optional.ofNullable(this.isEncrypted);
    }

    /**
     * Gets or sets the isOptional flag of the connection field definition.
     * 
     */
    @Import(name="isOptional")
    private @Nullable Output<Boolean> isOptional;

    /**
     * @return Gets or sets the isOptional flag of the connection field definition.
     * 
     */
    public Optional<Output<Boolean>> isOptional() {
        return Optional.ofNullable(this.isOptional);
    }

    /**
     * Gets or sets the type of the connection field definition.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Gets or sets the type of the connection field definition.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private FieldDefinitionArgs() {}

    private FieldDefinitionArgs(FieldDefinitionArgs $) {
        this.isEncrypted = $.isEncrypted;
        this.isOptional = $.isOptional;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FieldDefinitionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FieldDefinitionArgs $;

        public Builder() {
            $ = new FieldDefinitionArgs();
        }

        public Builder(FieldDefinitionArgs defaults) {
            $ = new FieldDefinitionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param isEncrypted Gets or sets the isEncrypted flag of the connection field definition.
         * 
         * @return builder
         * 
         */
        public Builder isEncrypted(@Nullable Output<Boolean> isEncrypted) {
            $.isEncrypted = isEncrypted;
            return this;
        }

        /**
         * @param isEncrypted Gets or sets the isEncrypted flag of the connection field definition.
         * 
         * @return builder
         * 
         */
        public Builder isEncrypted(Boolean isEncrypted) {
            return isEncrypted(Output.of(isEncrypted));
        }

        /**
         * @param isOptional Gets or sets the isOptional flag of the connection field definition.
         * 
         * @return builder
         * 
         */
        public Builder isOptional(@Nullable Output<Boolean> isOptional) {
            $.isOptional = isOptional;
            return this;
        }

        /**
         * @param isOptional Gets or sets the isOptional flag of the connection field definition.
         * 
         * @return builder
         * 
         */
        public Builder isOptional(Boolean isOptional) {
            return isOptional(Output.of(isOptional));
        }

        /**
         * @param type Gets or sets the type of the connection field definition.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Gets or sets the type of the connection field definition.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public FieldDefinitionArgs build() {
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
