// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.azurenative.network.inputs.ManagedRuleExclusionResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Defines a managed rule group override setting.
 * 
 */
public final class FrontDoorManagedRuleOverrideResponse extends com.pulumi.resources.InvokeArgs {

    public static final FrontDoorManagedRuleOverrideResponse Empty = new FrontDoorManagedRuleOverrideResponse();

    /**
     * Describes the override action to be applied when rule matches.
     * 
     */
    @Import(name="action")
    private @Nullable String action;

    /**
     * @return Describes the override action to be applied when rule matches.
     * 
     */
    public Optional<String> action() {
        return Optional.ofNullable(this.action);
    }

    /**
     * Describes if the managed rule is in enabled or disabled state. Defaults to Disabled if not specified.
     * 
     */
    @Import(name="enabledState")
    private @Nullable String enabledState;

    /**
     * @return Describes if the managed rule is in enabled or disabled state. Defaults to Disabled if not specified.
     * 
     */
    public Optional<String> enabledState() {
        return Optional.ofNullable(this.enabledState);
    }

    /**
     * Describes the exclusions that are applied to this specific rule.
     * 
     */
    @Import(name="exclusions")
    private @Nullable List<ManagedRuleExclusionResponse> exclusions;

    /**
     * @return Describes the exclusions that are applied to this specific rule.
     * 
     */
    public Optional<List<ManagedRuleExclusionResponse>> exclusions() {
        return Optional.ofNullable(this.exclusions);
    }

    /**
     * Identifier for the managed rule.
     * 
     */
    @Import(name="ruleId", required=true)
    private String ruleId;

    /**
     * @return Identifier for the managed rule.
     * 
     */
    public String ruleId() {
        return this.ruleId;
    }

    private FrontDoorManagedRuleOverrideResponse() {}

    private FrontDoorManagedRuleOverrideResponse(FrontDoorManagedRuleOverrideResponse $) {
        this.action = $.action;
        this.enabledState = $.enabledState;
        this.exclusions = $.exclusions;
        this.ruleId = $.ruleId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FrontDoorManagedRuleOverrideResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FrontDoorManagedRuleOverrideResponse $;

        public Builder() {
            $ = new FrontDoorManagedRuleOverrideResponse();
        }

        public Builder(FrontDoorManagedRuleOverrideResponse defaults) {
            $ = new FrontDoorManagedRuleOverrideResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param action Describes the override action to be applied when rule matches.
         * 
         * @return builder
         * 
         */
        public Builder action(@Nullable String action) {
            $.action = action;
            return this;
        }

        /**
         * @param enabledState Describes if the managed rule is in enabled or disabled state. Defaults to Disabled if not specified.
         * 
         * @return builder
         * 
         */
        public Builder enabledState(@Nullable String enabledState) {
            $.enabledState = enabledState;
            return this;
        }

        /**
         * @param exclusions Describes the exclusions that are applied to this specific rule.
         * 
         * @return builder
         * 
         */
        public Builder exclusions(@Nullable List<ManagedRuleExclusionResponse> exclusions) {
            $.exclusions = exclusions;
            return this;
        }

        /**
         * @param exclusions Describes the exclusions that are applied to this specific rule.
         * 
         * @return builder
         * 
         */
        public Builder exclusions(ManagedRuleExclusionResponse... exclusions) {
            return exclusions(List.of(exclusions));
        }

        /**
         * @param ruleId Identifier for the managed rule.
         * 
         * @return builder
         * 
         */
        public Builder ruleId(String ruleId) {
            $.ruleId = ruleId;
            return this;
        }

        public FrontDoorManagedRuleOverrideResponse build() {
            $.ruleId = Objects.requireNonNull($.ruleId, "expected parameter 'ruleId' to be non-null");
            return $;
        }
    }

}
