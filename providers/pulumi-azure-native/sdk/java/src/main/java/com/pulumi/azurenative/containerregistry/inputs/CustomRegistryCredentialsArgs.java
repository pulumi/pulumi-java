// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.containerregistry.inputs;

import com.pulumi.azurenative.containerregistry.inputs.SecretObjectArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Describes the credentials that will be used to access a custom registry during a run.
 * 
 */
public final class CustomRegistryCredentialsArgs extends com.pulumi.resources.ResourceArgs {

    public static final CustomRegistryCredentialsArgs Empty = new CustomRegistryCredentialsArgs();

    /**
     * Indicates the managed identity assigned to the custom credential. If a user-assigned identity
     * this value is the Client ID. If a system-assigned identity, the value will be `system`. In
     * the case of a system-assigned identity, the Client ID will be determined by the runner. This
     * identity may be used to authenticate to key vault to retrieve credentials or it may be the only
     * source of authentication used for accessing the registry.
     * 
     */
    @Import(name="identity")
    private @Nullable Output<String> identity;

    /**
     * @return Indicates the managed identity assigned to the custom credential. If a user-assigned identity
     * this value is the Client ID. If a system-assigned identity, the value will be `system`. In
     * the case of a system-assigned identity, the Client ID will be determined by the runner. This
     * identity may be used to authenticate to key vault to retrieve credentials or it may be the only
     * source of authentication used for accessing the registry.
     * 
     */
    public Optional<Output<String>> identity() {
        return Optional.ofNullable(this.identity);
    }

    /**
     * The password for logging into the custom registry. The password is a secret
     * object that allows multiple ways of providing the value for it.
     * 
     */
    @Import(name="password")
    private @Nullable Output<SecretObjectArgs> password;

    /**
     * @return The password for logging into the custom registry. The password is a secret
     * object that allows multiple ways of providing the value for it.
     * 
     */
    public Optional<Output<SecretObjectArgs>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * The username for logging into the custom registry.
     * 
     */
    @Import(name="userName")
    private @Nullable Output<SecretObjectArgs> userName;

    /**
     * @return The username for logging into the custom registry.
     * 
     */
    public Optional<Output<SecretObjectArgs>> userName() {
        return Optional.ofNullable(this.userName);
    }

    private CustomRegistryCredentialsArgs() {}

    private CustomRegistryCredentialsArgs(CustomRegistryCredentialsArgs $) {
        this.identity = $.identity;
        this.password = $.password;
        this.userName = $.userName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CustomRegistryCredentialsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CustomRegistryCredentialsArgs $;

        public Builder() {
            $ = new CustomRegistryCredentialsArgs();
        }

        public Builder(CustomRegistryCredentialsArgs defaults) {
            $ = new CustomRegistryCredentialsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param identity Indicates the managed identity assigned to the custom credential. If a user-assigned identity
         * this value is the Client ID. If a system-assigned identity, the value will be `system`. In
         * the case of a system-assigned identity, the Client ID will be determined by the runner. This
         * identity may be used to authenticate to key vault to retrieve credentials or it may be the only
         * source of authentication used for accessing the registry.
         * 
         * @return builder
         * 
         */
        public Builder identity(@Nullable Output<String> identity) {
            $.identity = identity;
            return this;
        }

        /**
         * @param identity Indicates the managed identity assigned to the custom credential. If a user-assigned identity
         * this value is the Client ID. If a system-assigned identity, the value will be `system`. In
         * the case of a system-assigned identity, the Client ID will be determined by the runner. This
         * identity may be used to authenticate to key vault to retrieve credentials or it may be the only
         * source of authentication used for accessing the registry.
         * 
         * @return builder
         * 
         */
        public Builder identity(String identity) {
            return identity(Output.of(identity));
        }

        /**
         * @param password The password for logging into the custom registry. The password is a secret
         * object that allows multiple ways of providing the value for it.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<SecretObjectArgs> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password The password for logging into the custom registry. The password is a secret
         * object that allows multiple ways of providing the value for it.
         * 
         * @return builder
         * 
         */
        public Builder password(SecretObjectArgs password) {
            return password(Output.of(password));
        }

        /**
         * @param userName The username for logging into the custom registry.
         * 
         * @return builder
         * 
         */
        public Builder userName(@Nullable Output<SecretObjectArgs> userName) {
            $.userName = userName;
            return this;
        }

        /**
         * @param userName The username for logging into the custom registry.
         * 
         * @return builder
         * 
         */
        public Builder userName(SecretObjectArgs userName) {
            return userName(Output.of(userName));
        }

        public CustomRegistryCredentialsArgs build() {
            return $;
        }
    }

}
