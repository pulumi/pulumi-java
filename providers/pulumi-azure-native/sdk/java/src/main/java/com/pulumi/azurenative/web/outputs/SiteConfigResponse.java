// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.web.outputs;

import com.pulumi.azurenative.web.outputs.ApiDefinitionInfoResponse;
import com.pulumi.azurenative.web.outputs.ApiManagementConfigResponse;
import com.pulumi.azurenative.web.outputs.AutoHealRulesResponse;
import com.pulumi.azurenative.web.outputs.AzureStorageInfoValueResponse;
import com.pulumi.azurenative.web.outputs.ConnStringInfoResponse;
import com.pulumi.azurenative.web.outputs.CorsSettingsResponse;
import com.pulumi.azurenative.web.outputs.ExperimentsResponse;
import com.pulumi.azurenative.web.outputs.HandlerMappingResponse;
import com.pulumi.azurenative.web.outputs.IpSecurityRestrictionResponse;
import com.pulumi.azurenative.web.outputs.NameValuePairResponse;
import com.pulumi.azurenative.web.outputs.PushSettingsResponse;
import com.pulumi.azurenative.web.outputs.SiteLimitsResponse;
import com.pulumi.azurenative.web.outputs.SiteMachineKeyResponse;
import com.pulumi.azurenative.web.outputs.VirtualApplicationResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SiteConfigResponse {
    /**
     * @return Flag to use Managed Identity Creds for ACR pull
     * 
     */
    private final @Nullable Boolean acrUseManagedIdentityCreds;
    /**
     * @return If using user managed identity, the user managed identity ClientId
     * 
     */
    private final @Nullable String acrUserManagedIdentityID;
    /**
     * @return &lt;code&gt;true&lt;/code&gt; if Always On is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    private final @Nullable Boolean alwaysOn;
    /**
     * @return Information about the formal API definition for the app.
     * 
     */
    private final @Nullable ApiDefinitionInfoResponse apiDefinition;
    /**
     * @return Azure API management settings linked to the app.
     * 
     */
    private final @Nullable ApiManagementConfigResponse apiManagementConfig;
    /**
     * @return App command line to launch.
     * 
     */
    private final @Nullable String appCommandLine;
    /**
     * @return Application settings.
     * 
     */
    private final @Nullable List<NameValuePairResponse> appSettings;
    /**
     * @return &lt;code&gt;true&lt;/code&gt; if Auto Heal is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    private final @Nullable Boolean autoHealEnabled;
    /**
     * @return Auto Heal rules.
     * 
     */
    private final @Nullable AutoHealRulesResponse autoHealRules;
    /**
     * @return Auto-swap slot name.
     * 
     */
    private final @Nullable String autoSwapSlotName;
    /**
     * @return List of Azure Storage Accounts.
     * 
     */
    private final @Nullable Map<String,AzureStorageInfoValueResponse> azureStorageAccounts;
    /**
     * @return Connection strings.
     * 
     */
    private final @Nullable List<ConnStringInfoResponse> connectionStrings;
    /**
     * @return Cross-Origin Resource Sharing (CORS) settings.
     * 
     */
    private final @Nullable CorsSettingsResponse cors;
    /**
     * @return Default documents.
     * 
     */
    private final @Nullable List<String> defaultDocuments;
    /**
     * @return &lt;code&gt;true&lt;/code&gt; if detailed error logging is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    private final @Nullable Boolean detailedErrorLoggingEnabled;
    /**
     * @return Document root.
     * 
     */
    private final @Nullable String documentRoot;
    /**
     * @return This is work around for polymorphic types.
     * 
     */
    private final @Nullable ExperimentsResponse experiments;
    /**
     * @return State of FTP / FTPS service
     * 
     */
    private final @Nullable String ftpsState;
    /**
     * @return Maximum number of workers that a site can scale out to.
     * This setting only applies to the Consumption and Elastic Premium Plans
     * 
     */
    private final @Nullable Integer functionAppScaleLimit;
    /**
     * @return Gets or sets a value indicating whether functions runtime scale monitoring is enabled. When enabled,
     * the ScaleController will not monitor event sources directly, but will instead call to the
     * runtime to get scale status.
     * 
     */
    private final @Nullable Boolean functionsRuntimeScaleMonitoringEnabled;
    /**
     * @return Handler mappings.
     * 
     */
    private final @Nullable List<HandlerMappingResponse> handlerMappings;
    /**
     * @return Health check path
     * 
     */
    private final @Nullable String healthCheckPath;
    /**
     * @return Http20Enabled: configures a web site to allow clients to connect over http2.0
     * 
     */
    private final @Nullable Boolean http20Enabled;
    /**
     * @return &lt;code&gt;true&lt;/code&gt; if HTTP logging is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    private final @Nullable Boolean httpLoggingEnabled;
    /**
     * @return IP security restrictions for main.
     * 
     */
    private final @Nullable List<IpSecurityRestrictionResponse> ipSecurityRestrictions;
    /**
     * @return Java container.
     * 
     */
    private final @Nullable String javaContainer;
    /**
     * @return Java container version.
     * 
     */
    private final @Nullable String javaContainerVersion;
    /**
     * @return Java version.
     * 
     */
    private final @Nullable String javaVersion;
    /**
     * @return Identity to use for Key Vault Reference authentication.
     * 
     */
    private final @Nullable String keyVaultReferenceIdentity;
    /**
     * @return Site limits.
     * 
     */
    private final @Nullable SiteLimitsResponse limits;
    /**
     * @return Linux App Framework and version
     * 
     */
    private final @Nullable String linuxFxVersion;
    /**
     * @return Site load balancing.
     * 
     */
    private final @Nullable String loadBalancing;
    /**
     * @return &lt;code&gt;true&lt;/code&gt; to enable local MySQL; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    private final @Nullable Boolean localMySqlEnabled;
    /**
     * @return HTTP logs directory size limit.
     * 
     */
    private final @Nullable Integer logsDirectorySizeLimit;
    /**
     * @return Site MachineKey.
     * 
     */
    private final SiteMachineKeyResponse machineKey;
    /**
     * @return Managed pipeline mode.
     * 
     */
    private final @Nullable String managedPipelineMode;
    /**
     * @return Managed Service Identity Id
     * 
     */
    private final @Nullable Integer managedServiceIdentityId;
    /**
     * @return MinTlsVersion: configures the minimum version of TLS required for SSL requests
     * 
     */
    private final @Nullable String minTlsVersion;
    /**
     * @return Number of minimum instance count for a site
     * This setting only applies to the Elastic Plans
     * 
     */
    private final @Nullable Integer minimumElasticInstanceCount;
    /**
     * @return .NET Framework version.
     * 
     */
    private final @Nullable String netFrameworkVersion;
    /**
     * @return Version of Node.js.
     * 
     */
    private final @Nullable String nodeVersion;
    /**
     * @return Number of workers.
     * 
     */
    private final @Nullable Integer numberOfWorkers;
    /**
     * @return Version of PHP.
     * 
     */
    private final @Nullable String phpVersion;
    /**
     * @return Version of PowerShell.
     * 
     */
    private final @Nullable String powerShellVersion;
    /**
     * @return Number of preWarmed instances.
     * This setting only applies to the Consumption and Elastic Plans
     * 
     */
    private final @Nullable Integer preWarmedInstanceCount;
    /**
     * @return Property to allow or block all public traffic.
     * 
     */
    private final @Nullable String publicNetworkAccess;
    /**
     * @return Publishing user name.
     * 
     */
    private final @Nullable String publishingUsername;
    /**
     * @return Push endpoint settings.
     * 
     */
    private final @Nullable PushSettingsResponse push;
    /**
     * @return Version of Python.
     * 
     */
    private final @Nullable String pythonVersion;
    /**
     * @return &lt;code&gt;true&lt;/code&gt; if remote debugging is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    private final @Nullable Boolean remoteDebuggingEnabled;
    /**
     * @return Remote debugging version.
     * 
     */
    private final @Nullable String remoteDebuggingVersion;
    /**
     * @return &lt;code&gt;true&lt;/code&gt; if request tracing is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    private final @Nullable Boolean requestTracingEnabled;
    /**
     * @return Request tracing expiration time.
     * 
     */
    private final @Nullable String requestTracingExpirationTime;
    /**
     * @return IP security restrictions for scm.
     * 
     */
    private final @Nullable List<IpSecurityRestrictionResponse> scmIpSecurityRestrictions;
    /**
     * @return IP security restrictions for scm to use main.
     * 
     */
    private final @Nullable Boolean scmIpSecurityRestrictionsUseMain;
    /**
     * @return ScmMinTlsVersion: configures the minimum version of TLS required for SSL requests for SCM site
     * 
     */
    private final @Nullable String scmMinTlsVersion;
    /**
     * @return SCM type.
     * 
     */
    private final @Nullable String scmType;
    /**
     * @return Tracing options.
     * 
     */
    private final @Nullable String tracingOptions;
    /**
     * @return &lt;code&gt;true&lt;/code&gt; to use 32-bit worker process; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    private final @Nullable Boolean use32BitWorkerProcess;
    /**
     * @return Virtual applications.
     * 
     */
    private final @Nullable List<VirtualApplicationResponse> virtualApplications;
    /**
     * @return Virtual Network name.
     * 
     */
    private final @Nullable String vnetName;
    /**
     * @return The number of private ports assigned to this app. These will be assigned dynamically on runtime.
     * 
     */
    private final @Nullable Integer vnetPrivatePortsCount;
    /**
     * @return Virtual Network Route All enabled. This causes all outbound traffic to have Virtual Network Security Groups and User Defined Routes applied.
     * 
     */
    private final @Nullable Boolean vnetRouteAllEnabled;
    /**
     * @return &lt;code&gt;true&lt;/code&gt; if WebSocket is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    private final @Nullable Boolean webSocketsEnabled;
    /**
     * @return Sets the time zone a site uses for generating timestamps. Compatible with Linux and Windows App Service. Setting the WEBSITE_TIME_ZONE app setting takes precedence over this config. For Linux, expects tz database values https://www.iana.org/time-zones (for a quick reference see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones). For Windows, expects one of the time zones listed under HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Time Zones
     * 
     */
    private final @Nullable String websiteTimeZone;
    /**
     * @return Xenon App Framework and version
     * 
     */
    private final @Nullable String windowsFxVersion;
    /**
     * @return Explicit Managed Service Identity Id
     * 
     */
    private final @Nullable Integer xManagedServiceIdentityId;

    @CustomType.Constructor
    private SiteConfigResponse(
        @CustomType.Parameter("acrUseManagedIdentityCreds") @Nullable Boolean acrUseManagedIdentityCreds,
        @CustomType.Parameter("acrUserManagedIdentityID") @Nullable String acrUserManagedIdentityID,
        @CustomType.Parameter("alwaysOn") @Nullable Boolean alwaysOn,
        @CustomType.Parameter("apiDefinition") @Nullable ApiDefinitionInfoResponse apiDefinition,
        @CustomType.Parameter("apiManagementConfig") @Nullable ApiManagementConfigResponse apiManagementConfig,
        @CustomType.Parameter("appCommandLine") @Nullable String appCommandLine,
        @CustomType.Parameter("appSettings") @Nullable List<NameValuePairResponse> appSettings,
        @CustomType.Parameter("autoHealEnabled") @Nullable Boolean autoHealEnabled,
        @CustomType.Parameter("autoHealRules") @Nullable AutoHealRulesResponse autoHealRules,
        @CustomType.Parameter("autoSwapSlotName") @Nullable String autoSwapSlotName,
        @CustomType.Parameter("azureStorageAccounts") @Nullable Map<String,AzureStorageInfoValueResponse> azureStorageAccounts,
        @CustomType.Parameter("connectionStrings") @Nullable List<ConnStringInfoResponse> connectionStrings,
        @CustomType.Parameter("cors") @Nullable CorsSettingsResponse cors,
        @CustomType.Parameter("defaultDocuments") @Nullable List<String> defaultDocuments,
        @CustomType.Parameter("detailedErrorLoggingEnabled") @Nullable Boolean detailedErrorLoggingEnabled,
        @CustomType.Parameter("documentRoot") @Nullable String documentRoot,
        @CustomType.Parameter("experiments") @Nullable ExperimentsResponse experiments,
        @CustomType.Parameter("ftpsState") @Nullable String ftpsState,
        @CustomType.Parameter("functionAppScaleLimit") @Nullable Integer functionAppScaleLimit,
        @CustomType.Parameter("functionsRuntimeScaleMonitoringEnabled") @Nullable Boolean functionsRuntimeScaleMonitoringEnabled,
        @CustomType.Parameter("handlerMappings") @Nullable List<HandlerMappingResponse> handlerMappings,
        @CustomType.Parameter("healthCheckPath") @Nullable String healthCheckPath,
        @CustomType.Parameter("http20Enabled") @Nullable Boolean http20Enabled,
        @CustomType.Parameter("httpLoggingEnabled") @Nullable Boolean httpLoggingEnabled,
        @CustomType.Parameter("ipSecurityRestrictions") @Nullable List<IpSecurityRestrictionResponse> ipSecurityRestrictions,
        @CustomType.Parameter("javaContainer") @Nullable String javaContainer,
        @CustomType.Parameter("javaContainerVersion") @Nullable String javaContainerVersion,
        @CustomType.Parameter("javaVersion") @Nullable String javaVersion,
        @CustomType.Parameter("keyVaultReferenceIdentity") @Nullable String keyVaultReferenceIdentity,
        @CustomType.Parameter("limits") @Nullable SiteLimitsResponse limits,
        @CustomType.Parameter("linuxFxVersion") @Nullable String linuxFxVersion,
        @CustomType.Parameter("loadBalancing") @Nullable String loadBalancing,
        @CustomType.Parameter("localMySqlEnabled") @Nullable Boolean localMySqlEnabled,
        @CustomType.Parameter("logsDirectorySizeLimit") @Nullable Integer logsDirectorySizeLimit,
        @CustomType.Parameter("machineKey") SiteMachineKeyResponse machineKey,
        @CustomType.Parameter("managedPipelineMode") @Nullable String managedPipelineMode,
        @CustomType.Parameter("managedServiceIdentityId") @Nullable Integer managedServiceIdentityId,
        @CustomType.Parameter("minTlsVersion") @Nullable String minTlsVersion,
        @CustomType.Parameter("minimumElasticInstanceCount") @Nullable Integer minimumElasticInstanceCount,
        @CustomType.Parameter("netFrameworkVersion") @Nullable String netFrameworkVersion,
        @CustomType.Parameter("nodeVersion") @Nullable String nodeVersion,
        @CustomType.Parameter("numberOfWorkers") @Nullable Integer numberOfWorkers,
        @CustomType.Parameter("phpVersion") @Nullable String phpVersion,
        @CustomType.Parameter("powerShellVersion") @Nullable String powerShellVersion,
        @CustomType.Parameter("preWarmedInstanceCount") @Nullable Integer preWarmedInstanceCount,
        @CustomType.Parameter("publicNetworkAccess") @Nullable String publicNetworkAccess,
        @CustomType.Parameter("publishingUsername") @Nullable String publishingUsername,
        @CustomType.Parameter("push") @Nullable PushSettingsResponse push,
        @CustomType.Parameter("pythonVersion") @Nullable String pythonVersion,
        @CustomType.Parameter("remoteDebuggingEnabled") @Nullable Boolean remoteDebuggingEnabled,
        @CustomType.Parameter("remoteDebuggingVersion") @Nullable String remoteDebuggingVersion,
        @CustomType.Parameter("requestTracingEnabled") @Nullable Boolean requestTracingEnabled,
        @CustomType.Parameter("requestTracingExpirationTime") @Nullable String requestTracingExpirationTime,
        @CustomType.Parameter("scmIpSecurityRestrictions") @Nullable List<IpSecurityRestrictionResponse> scmIpSecurityRestrictions,
        @CustomType.Parameter("scmIpSecurityRestrictionsUseMain") @Nullable Boolean scmIpSecurityRestrictionsUseMain,
        @CustomType.Parameter("scmMinTlsVersion") @Nullable String scmMinTlsVersion,
        @CustomType.Parameter("scmType") @Nullable String scmType,
        @CustomType.Parameter("tracingOptions") @Nullable String tracingOptions,
        @CustomType.Parameter("use32BitWorkerProcess") @Nullable Boolean use32BitWorkerProcess,
        @CustomType.Parameter("virtualApplications") @Nullable List<VirtualApplicationResponse> virtualApplications,
        @CustomType.Parameter("vnetName") @Nullable String vnetName,
        @CustomType.Parameter("vnetPrivatePortsCount") @Nullable Integer vnetPrivatePortsCount,
        @CustomType.Parameter("vnetRouteAllEnabled") @Nullable Boolean vnetRouteAllEnabled,
        @CustomType.Parameter("webSocketsEnabled") @Nullable Boolean webSocketsEnabled,
        @CustomType.Parameter("websiteTimeZone") @Nullable String websiteTimeZone,
        @CustomType.Parameter("windowsFxVersion") @Nullable String windowsFxVersion,
        @CustomType.Parameter("xManagedServiceIdentityId") @Nullable Integer xManagedServiceIdentityId) {
        this.acrUseManagedIdentityCreds = acrUseManagedIdentityCreds;
        this.acrUserManagedIdentityID = acrUserManagedIdentityID;
        this.alwaysOn = alwaysOn;
        this.apiDefinition = apiDefinition;
        this.apiManagementConfig = apiManagementConfig;
        this.appCommandLine = appCommandLine;
        this.appSettings = appSettings;
        this.autoHealEnabled = autoHealEnabled;
        this.autoHealRules = autoHealRules;
        this.autoSwapSlotName = autoSwapSlotName;
        this.azureStorageAccounts = azureStorageAccounts;
        this.connectionStrings = connectionStrings;
        this.cors = cors;
        this.defaultDocuments = defaultDocuments;
        this.detailedErrorLoggingEnabled = detailedErrorLoggingEnabled;
        this.documentRoot = documentRoot;
        this.experiments = experiments;
        this.ftpsState = ftpsState;
        this.functionAppScaleLimit = functionAppScaleLimit;
        this.functionsRuntimeScaleMonitoringEnabled = functionsRuntimeScaleMonitoringEnabled;
        this.handlerMappings = handlerMappings;
        this.healthCheckPath = healthCheckPath;
        this.http20Enabled = http20Enabled;
        this.httpLoggingEnabled = httpLoggingEnabled;
        this.ipSecurityRestrictions = ipSecurityRestrictions;
        this.javaContainer = javaContainer;
        this.javaContainerVersion = javaContainerVersion;
        this.javaVersion = javaVersion;
        this.keyVaultReferenceIdentity = keyVaultReferenceIdentity;
        this.limits = limits;
        this.linuxFxVersion = linuxFxVersion;
        this.loadBalancing = loadBalancing;
        this.localMySqlEnabled = localMySqlEnabled;
        this.logsDirectorySizeLimit = logsDirectorySizeLimit;
        this.machineKey = machineKey;
        this.managedPipelineMode = managedPipelineMode;
        this.managedServiceIdentityId = managedServiceIdentityId;
        this.minTlsVersion = minTlsVersion;
        this.minimumElasticInstanceCount = minimumElasticInstanceCount;
        this.netFrameworkVersion = netFrameworkVersion;
        this.nodeVersion = nodeVersion;
        this.numberOfWorkers = numberOfWorkers;
        this.phpVersion = phpVersion;
        this.powerShellVersion = powerShellVersion;
        this.preWarmedInstanceCount = preWarmedInstanceCount;
        this.publicNetworkAccess = publicNetworkAccess;
        this.publishingUsername = publishingUsername;
        this.push = push;
        this.pythonVersion = pythonVersion;
        this.remoteDebuggingEnabled = remoteDebuggingEnabled;
        this.remoteDebuggingVersion = remoteDebuggingVersion;
        this.requestTracingEnabled = requestTracingEnabled;
        this.requestTracingExpirationTime = requestTracingExpirationTime;
        this.scmIpSecurityRestrictions = scmIpSecurityRestrictions;
        this.scmIpSecurityRestrictionsUseMain = scmIpSecurityRestrictionsUseMain;
        this.scmMinTlsVersion = scmMinTlsVersion;
        this.scmType = scmType;
        this.tracingOptions = tracingOptions;
        this.use32BitWorkerProcess = use32BitWorkerProcess;
        this.virtualApplications = virtualApplications;
        this.vnetName = vnetName;
        this.vnetPrivatePortsCount = vnetPrivatePortsCount;
        this.vnetRouteAllEnabled = vnetRouteAllEnabled;
        this.webSocketsEnabled = webSocketsEnabled;
        this.websiteTimeZone = websiteTimeZone;
        this.windowsFxVersion = windowsFxVersion;
        this.xManagedServiceIdentityId = xManagedServiceIdentityId;
    }

    /**
     * @return Flag to use Managed Identity Creds for ACR pull
     * 
     */
    public Optional<Boolean> acrUseManagedIdentityCreds() {
        return Optional.ofNullable(this.acrUseManagedIdentityCreds);
    }
    /**
     * @return If using user managed identity, the user managed identity ClientId
     * 
     */
    public Optional<String> acrUserManagedIdentityID() {
        return Optional.ofNullable(this.acrUserManagedIdentityID);
    }
    /**
     * @return &lt;code&gt;true&lt;/code&gt; if Always On is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    public Optional<Boolean> alwaysOn() {
        return Optional.ofNullable(this.alwaysOn);
    }
    /**
     * @return Information about the formal API definition for the app.
     * 
     */
    public Optional<ApiDefinitionInfoResponse> apiDefinition() {
        return Optional.ofNullable(this.apiDefinition);
    }
    /**
     * @return Azure API management settings linked to the app.
     * 
     */
    public Optional<ApiManagementConfigResponse> apiManagementConfig() {
        return Optional.ofNullable(this.apiManagementConfig);
    }
    /**
     * @return App command line to launch.
     * 
     */
    public Optional<String> appCommandLine() {
        return Optional.ofNullable(this.appCommandLine);
    }
    /**
     * @return Application settings.
     * 
     */
    public List<NameValuePairResponse> appSettings() {
        return this.appSettings == null ? List.of() : this.appSettings;
    }
    /**
     * @return &lt;code&gt;true&lt;/code&gt; if Auto Heal is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    public Optional<Boolean> autoHealEnabled() {
        return Optional.ofNullable(this.autoHealEnabled);
    }
    /**
     * @return Auto Heal rules.
     * 
     */
    public Optional<AutoHealRulesResponse> autoHealRules() {
        return Optional.ofNullable(this.autoHealRules);
    }
    /**
     * @return Auto-swap slot name.
     * 
     */
    public Optional<String> autoSwapSlotName() {
        return Optional.ofNullable(this.autoSwapSlotName);
    }
    /**
     * @return List of Azure Storage Accounts.
     * 
     */
    public Map<String,AzureStorageInfoValueResponse> azureStorageAccounts() {
        return this.azureStorageAccounts == null ? Map.of() : this.azureStorageAccounts;
    }
    /**
     * @return Connection strings.
     * 
     */
    public List<ConnStringInfoResponse> connectionStrings() {
        return this.connectionStrings == null ? List.of() : this.connectionStrings;
    }
    /**
     * @return Cross-Origin Resource Sharing (CORS) settings.
     * 
     */
    public Optional<CorsSettingsResponse> cors() {
        return Optional.ofNullable(this.cors);
    }
    /**
     * @return Default documents.
     * 
     */
    public List<String> defaultDocuments() {
        return this.defaultDocuments == null ? List.of() : this.defaultDocuments;
    }
    /**
     * @return &lt;code&gt;true&lt;/code&gt; if detailed error logging is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    public Optional<Boolean> detailedErrorLoggingEnabled() {
        return Optional.ofNullable(this.detailedErrorLoggingEnabled);
    }
    /**
     * @return Document root.
     * 
     */
    public Optional<String> documentRoot() {
        return Optional.ofNullable(this.documentRoot);
    }
    /**
     * @return This is work around for polymorphic types.
     * 
     */
    public Optional<ExperimentsResponse> experiments() {
        return Optional.ofNullable(this.experiments);
    }
    /**
     * @return State of FTP / FTPS service
     * 
     */
    public Optional<String> ftpsState() {
        return Optional.ofNullable(this.ftpsState);
    }
    /**
     * @return Maximum number of workers that a site can scale out to.
     * This setting only applies to the Consumption and Elastic Premium Plans
     * 
     */
    public Optional<Integer> functionAppScaleLimit() {
        return Optional.ofNullable(this.functionAppScaleLimit);
    }
    /**
     * @return Gets or sets a value indicating whether functions runtime scale monitoring is enabled. When enabled,
     * the ScaleController will not monitor event sources directly, but will instead call to the
     * runtime to get scale status.
     * 
     */
    public Optional<Boolean> functionsRuntimeScaleMonitoringEnabled() {
        return Optional.ofNullable(this.functionsRuntimeScaleMonitoringEnabled);
    }
    /**
     * @return Handler mappings.
     * 
     */
    public List<HandlerMappingResponse> handlerMappings() {
        return this.handlerMappings == null ? List.of() : this.handlerMappings;
    }
    /**
     * @return Health check path
     * 
     */
    public Optional<String> healthCheckPath() {
        return Optional.ofNullable(this.healthCheckPath);
    }
    /**
     * @return Http20Enabled: configures a web site to allow clients to connect over http2.0
     * 
     */
    public Optional<Boolean> http20Enabled() {
        return Optional.ofNullable(this.http20Enabled);
    }
    /**
     * @return &lt;code&gt;true&lt;/code&gt; if HTTP logging is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    public Optional<Boolean> httpLoggingEnabled() {
        return Optional.ofNullable(this.httpLoggingEnabled);
    }
    /**
     * @return IP security restrictions for main.
     * 
     */
    public List<IpSecurityRestrictionResponse> ipSecurityRestrictions() {
        return this.ipSecurityRestrictions == null ? List.of() : this.ipSecurityRestrictions;
    }
    /**
     * @return Java container.
     * 
     */
    public Optional<String> javaContainer() {
        return Optional.ofNullable(this.javaContainer);
    }
    /**
     * @return Java container version.
     * 
     */
    public Optional<String> javaContainerVersion() {
        return Optional.ofNullable(this.javaContainerVersion);
    }
    /**
     * @return Java version.
     * 
     */
    public Optional<String> javaVersion() {
        return Optional.ofNullable(this.javaVersion);
    }
    /**
     * @return Identity to use for Key Vault Reference authentication.
     * 
     */
    public Optional<String> keyVaultReferenceIdentity() {
        return Optional.ofNullable(this.keyVaultReferenceIdentity);
    }
    /**
     * @return Site limits.
     * 
     */
    public Optional<SiteLimitsResponse> limits() {
        return Optional.ofNullable(this.limits);
    }
    /**
     * @return Linux App Framework and version
     * 
     */
    public Optional<String> linuxFxVersion() {
        return Optional.ofNullable(this.linuxFxVersion);
    }
    /**
     * @return Site load balancing.
     * 
     */
    public Optional<String> loadBalancing() {
        return Optional.ofNullable(this.loadBalancing);
    }
    /**
     * @return &lt;code&gt;true&lt;/code&gt; to enable local MySQL; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    public Optional<Boolean> localMySqlEnabled() {
        return Optional.ofNullable(this.localMySqlEnabled);
    }
    /**
     * @return HTTP logs directory size limit.
     * 
     */
    public Optional<Integer> logsDirectorySizeLimit() {
        return Optional.ofNullable(this.logsDirectorySizeLimit);
    }
    /**
     * @return Site MachineKey.
     * 
     */
    public SiteMachineKeyResponse machineKey() {
        return this.machineKey;
    }
    /**
     * @return Managed pipeline mode.
     * 
     */
    public Optional<String> managedPipelineMode() {
        return Optional.ofNullable(this.managedPipelineMode);
    }
    /**
     * @return Managed Service Identity Id
     * 
     */
    public Optional<Integer> managedServiceIdentityId() {
        return Optional.ofNullable(this.managedServiceIdentityId);
    }
    /**
     * @return MinTlsVersion: configures the minimum version of TLS required for SSL requests
     * 
     */
    public Optional<String> minTlsVersion() {
        return Optional.ofNullable(this.minTlsVersion);
    }
    /**
     * @return Number of minimum instance count for a site
     * This setting only applies to the Elastic Plans
     * 
     */
    public Optional<Integer> minimumElasticInstanceCount() {
        return Optional.ofNullable(this.minimumElasticInstanceCount);
    }
    /**
     * @return .NET Framework version.
     * 
     */
    public Optional<String> netFrameworkVersion() {
        return Optional.ofNullable(this.netFrameworkVersion);
    }
    /**
     * @return Version of Node.js.
     * 
     */
    public Optional<String> nodeVersion() {
        return Optional.ofNullable(this.nodeVersion);
    }
    /**
     * @return Number of workers.
     * 
     */
    public Optional<Integer> numberOfWorkers() {
        return Optional.ofNullable(this.numberOfWorkers);
    }
    /**
     * @return Version of PHP.
     * 
     */
    public Optional<String> phpVersion() {
        return Optional.ofNullable(this.phpVersion);
    }
    /**
     * @return Version of PowerShell.
     * 
     */
    public Optional<String> powerShellVersion() {
        return Optional.ofNullable(this.powerShellVersion);
    }
    /**
     * @return Number of preWarmed instances.
     * This setting only applies to the Consumption and Elastic Plans
     * 
     */
    public Optional<Integer> preWarmedInstanceCount() {
        return Optional.ofNullable(this.preWarmedInstanceCount);
    }
    /**
     * @return Property to allow or block all public traffic.
     * 
     */
    public Optional<String> publicNetworkAccess() {
        return Optional.ofNullable(this.publicNetworkAccess);
    }
    /**
     * @return Publishing user name.
     * 
     */
    public Optional<String> publishingUsername() {
        return Optional.ofNullable(this.publishingUsername);
    }
    /**
     * @return Push endpoint settings.
     * 
     */
    public Optional<PushSettingsResponse> push() {
        return Optional.ofNullable(this.push);
    }
    /**
     * @return Version of Python.
     * 
     */
    public Optional<String> pythonVersion() {
        return Optional.ofNullable(this.pythonVersion);
    }
    /**
     * @return &lt;code&gt;true&lt;/code&gt; if remote debugging is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    public Optional<Boolean> remoteDebuggingEnabled() {
        return Optional.ofNullable(this.remoteDebuggingEnabled);
    }
    /**
     * @return Remote debugging version.
     * 
     */
    public Optional<String> remoteDebuggingVersion() {
        return Optional.ofNullable(this.remoteDebuggingVersion);
    }
    /**
     * @return &lt;code&gt;true&lt;/code&gt; if request tracing is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    public Optional<Boolean> requestTracingEnabled() {
        return Optional.ofNullable(this.requestTracingEnabled);
    }
    /**
     * @return Request tracing expiration time.
     * 
     */
    public Optional<String> requestTracingExpirationTime() {
        return Optional.ofNullable(this.requestTracingExpirationTime);
    }
    /**
     * @return IP security restrictions for scm.
     * 
     */
    public List<IpSecurityRestrictionResponse> scmIpSecurityRestrictions() {
        return this.scmIpSecurityRestrictions == null ? List.of() : this.scmIpSecurityRestrictions;
    }
    /**
     * @return IP security restrictions for scm to use main.
     * 
     */
    public Optional<Boolean> scmIpSecurityRestrictionsUseMain() {
        return Optional.ofNullable(this.scmIpSecurityRestrictionsUseMain);
    }
    /**
     * @return ScmMinTlsVersion: configures the minimum version of TLS required for SSL requests for SCM site
     * 
     */
    public Optional<String> scmMinTlsVersion() {
        return Optional.ofNullable(this.scmMinTlsVersion);
    }
    /**
     * @return SCM type.
     * 
     */
    public Optional<String> scmType() {
        return Optional.ofNullable(this.scmType);
    }
    /**
     * @return Tracing options.
     * 
     */
    public Optional<String> tracingOptions() {
        return Optional.ofNullable(this.tracingOptions);
    }
    /**
     * @return &lt;code&gt;true&lt;/code&gt; to use 32-bit worker process; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    public Optional<Boolean> use32BitWorkerProcess() {
        return Optional.ofNullable(this.use32BitWorkerProcess);
    }
    /**
     * @return Virtual applications.
     * 
     */
    public List<VirtualApplicationResponse> virtualApplications() {
        return this.virtualApplications == null ? List.of() : this.virtualApplications;
    }
    /**
     * @return Virtual Network name.
     * 
     */
    public Optional<String> vnetName() {
        return Optional.ofNullable(this.vnetName);
    }
    /**
     * @return The number of private ports assigned to this app. These will be assigned dynamically on runtime.
     * 
     */
    public Optional<Integer> vnetPrivatePortsCount() {
        return Optional.ofNullable(this.vnetPrivatePortsCount);
    }
    /**
     * @return Virtual Network Route All enabled. This causes all outbound traffic to have Virtual Network Security Groups and User Defined Routes applied.
     * 
     */
    public Optional<Boolean> vnetRouteAllEnabled() {
        return Optional.ofNullable(this.vnetRouteAllEnabled);
    }
    /**
     * @return &lt;code&gt;true&lt;/code&gt; if WebSocket is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    public Optional<Boolean> webSocketsEnabled() {
        return Optional.ofNullable(this.webSocketsEnabled);
    }
    /**
     * @return Sets the time zone a site uses for generating timestamps. Compatible with Linux and Windows App Service. Setting the WEBSITE_TIME_ZONE app setting takes precedence over this config. For Linux, expects tz database values https://www.iana.org/time-zones (for a quick reference see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones). For Windows, expects one of the time zones listed under HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Time Zones
     * 
     */
    public Optional<String> websiteTimeZone() {
        return Optional.ofNullable(this.websiteTimeZone);
    }
    /**
     * @return Xenon App Framework and version
     * 
     */
    public Optional<String> windowsFxVersion() {
        return Optional.ofNullable(this.windowsFxVersion);
    }
    /**
     * @return Explicit Managed Service Identity Id
     * 
     */
    public Optional<Integer> xManagedServiceIdentityId() {
        return Optional.ofNullable(this.xManagedServiceIdentityId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SiteConfigResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Boolean acrUseManagedIdentityCreds;
        private @Nullable String acrUserManagedIdentityID;
        private @Nullable Boolean alwaysOn;
        private @Nullable ApiDefinitionInfoResponse apiDefinition;
        private @Nullable ApiManagementConfigResponse apiManagementConfig;
        private @Nullable String appCommandLine;
        private @Nullable List<NameValuePairResponse> appSettings;
        private @Nullable Boolean autoHealEnabled;
        private @Nullable AutoHealRulesResponse autoHealRules;
        private @Nullable String autoSwapSlotName;
        private @Nullable Map<String,AzureStorageInfoValueResponse> azureStorageAccounts;
        private @Nullable List<ConnStringInfoResponse> connectionStrings;
        private @Nullable CorsSettingsResponse cors;
        private @Nullable List<String> defaultDocuments;
        private @Nullable Boolean detailedErrorLoggingEnabled;
        private @Nullable String documentRoot;
        private @Nullable ExperimentsResponse experiments;
        private @Nullable String ftpsState;
        private @Nullable Integer functionAppScaleLimit;
        private @Nullable Boolean functionsRuntimeScaleMonitoringEnabled;
        private @Nullable List<HandlerMappingResponse> handlerMappings;
        private @Nullable String healthCheckPath;
        private @Nullable Boolean http20Enabled;
        private @Nullable Boolean httpLoggingEnabled;
        private @Nullable List<IpSecurityRestrictionResponse> ipSecurityRestrictions;
        private @Nullable String javaContainer;
        private @Nullable String javaContainerVersion;
        private @Nullable String javaVersion;
        private @Nullable String keyVaultReferenceIdentity;
        private @Nullable SiteLimitsResponse limits;
        private @Nullable String linuxFxVersion;
        private @Nullable String loadBalancing;
        private @Nullable Boolean localMySqlEnabled;
        private @Nullable Integer logsDirectorySizeLimit;
        private SiteMachineKeyResponse machineKey;
        private @Nullable String managedPipelineMode;
        private @Nullable Integer managedServiceIdentityId;
        private @Nullable String minTlsVersion;
        private @Nullable Integer minimumElasticInstanceCount;
        private @Nullable String netFrameworkVersion;
        private @Nullable String nodeVersion;
        private @Nullable Integer numberOfWorkers;
        private @Nullable String phpVersion;
        private @Nullable String powerShellVersion;
        private @Nullable Integer preWarmedInstanceCount;
        private @Nullable String publicNetworkAccess;
        private @Nullable String publishingUsername;
        private @Nullable PushSettingsResponse push;
        private @Nullable String pythonVersion;
        private @Nullable Boolean remoteDebuggingEnabled;
        private @Nullable String remoteDebuggingVersion;
        private @Nullable Boolean requestTracingEnabled;
        private @Nullable String requestTracingExpirationTime;
        private @Nullable List<IpSecurityRestrictionResponse> scmIpSecurityRestrictions;
        private @Nullable Boolean scmIpSecurityRestrictionsUseMain;
        private @Nullable String scmMinTlsVersion;
        private @Nullable String scmType;
        private @Nullable String tracingOptions;
        private @Nullable Boolean use32BitWorkerProcess;
        private @Nullable List<VirtualApplicationResponse> virtualApplications;
        private @Nullable String vnetName;
        private @Nullable Integer vnetPrivatePortsCount;
        private @Nullable Boolean vnetRouteAllEnabled;
        private @Nullable Boolean webSocketsEnabled;
        private @Nullable String websiteTimeZone;
        private @Nullable String windowsFxVersion;
        private @Nullable Integer xManagedServiceIdentityId;

        public Builder() {
    	      // Empty
        }

        public Builder(SiteConfigResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.acrUseManagedIdentityCreds = defaults.acrUseManagedIdentityCreds;
    	      this.acrUserManagedIdentityID = defaults.acrUserManagedIdentityID;
    	      this.alwaysOn = defaults.alwaysOn;
    	      this.apiDefinition = defaults.apiDefinition;
    	      this.apiManagementConfig = defaults.apiManagementConfig;
    	      this.appCommandLine = defaults.appCommandLine;
    	      this.appSettings = defaults.appSettings;
    	      this.autoHealEnabled = defaults.autoHealEnabled;
    	      this.autoHealRules = defaults.autoHealRules;
    	      this.autoSwapSlotName = defaults.autoSwapSlotName;
    	      this.azureStorageAccounts = defaults.azureStorageAccounts;
    	      this.connectionStrings = defaults.connectionStrings;
    	      this.cors = defaults.cors;
    	      this.defaultDocuments = defaults.defaultDocuments;
    	      this.detailedErrorLoggingEnabled = defaults.detailedErrorLoggingEnabled;
    	      this.documentRoot = defaults.documentRoot;
    	      this.experiments = defaults.experiments;
    	      this.ftpsState = defaults.ftpsState;
    	      this.functionAppScaleLimit = defaults.functionAppScaleLimit;
    	      this.functionsRuntimeScaleMonitoringEnabled = defaults.functionsRuntimeScaleMonitoringEnabled;
    	      this.handlerMappings = defaults.handlerMappings;
    	      this.healthCheckPath = defaults.healthCheckPath;
    	      this.http20Enabled = defaults.http20Enabled;
    	      this.httpLoggingEnabled = defaults.httpLoggingEnabled;
    	      this.ipSecurityRestrictions = defaults.ipSecurityRestrictions;
    	      this.javaContainer = defaults.javaContainer;
    	      this.javaContainerVersion = defaults.javaContainerVersion;
    	      this.javaVersion = defaults.javaVersion;
    	      this.keyVaultReferenceIdentity = defaults.keyVaultReferenceIdentity;
    	      this.limits = defaults.limits;
    	      this.linuxFxVersion = defaults.linuxFxVersion;
    	      this.loadBalancing = defaults.loadBalancing;
    	      this.localMySqlEnabled = defaults.localMySqlEnabled;
    	      this.logsDirectorySizeLimit = defaults.logsDirectorySizeLimit;
    	      this.machineKey = defaults.machineKey;
    	      this.managedPipelineMode = defaults.managedPipelineMode;
    	      this.managedServiceIdentityId = defaults.managedServiceIdentityId;
    	      this.minTlsVersion = defaults.minTlsVersion;
    	      this.minimumElasticInstanceCount = defaults.minimumElasticInstanceCount;
    	      this.netFrameworkVersion = defaults.netFrameworkVersion;
    	      this.nodeVersion = defaults.nodeVersion;
    	      this.numberOfWorkers = defaults.numberOfWorkers;
    	      this.phpVersion = defaults.phpVersion;
    	      this.powerShellVersion = defaults.powerShellVersion;
    	      this.preWarmedInstanceCount = defaults.preWarmedInstanceCount;
    	      this.publicNetworkAccess = defaults.publicNetworkAccess;
    	      this.publishingUsername = defaults.publishingUsername;
    	      this.push = defaults.push;
    	      this.pythonVersion = defaults.pythonVersion;
    	      this.remoteDebuggingEnabled = defaults.remoteDebuggingEnabled;
    	      this.remoteDebuggingVersion = defaults.remoteDebuggingVersion;
    	      this.requestTracingEnabled = defaults.requestTracingEnabled;
    	      this.requestTracingExpirationTime = defaults.requestTracingExpirationTime;
    	      this.scmIpSecurityRestrictions = defaults.scmIpSecurityRestrictions;
    	      this.scmIpSecurityRestrictionsUseMain = defaults.scmIpSecurityRestrictionsUseMain;
    	      this.scmMinTlsVersion = defaults.scmMinTlsVersion;
    	      this.scmType = defaults.scmType;
    	      this.tracingOptions = defaults.tracingOptions;
    	      this.use32BitWorkerProcess = defaults.use32BitWorkerProcess;
    	      this.virtualApplications = defaults.virtualApplications;
    	      this.vnetName = defaults.vnetName;
    	      this.vnetPrivatePortsCount = defaults.vnetPrivatePortsCount;
    	      this.vnetRouteAllEnabled = defaults.vnetRouteAllEnabled;
    	      this.webSocketsEnabled = defaults.webSocketsEnabled;
    	      this.websiteTimeZone = defaults.websiteTimeZone;
    	      this.windowsFxVersion = defaults.windowsFxVersion;
    	      this.xManagedServiceIdentityId = defaults.xManagedServiceIdentityId;
        }

        public Builder acrUseManagedIdentityCreds(@Nullable Boolean acrUseManagedIdentityCreds) {
            this.acrUseManagedIdentityCreds = acrUseManagedIdentityCreds;
            return this;
        }
        public Builder acrUserManagedIdentityID(@Nullable String acrUserManagedIdentityID) {
            this.acrUserManagedIdentityID = acrUserManagedIdentityID;
            return this;
        }
        public Builder alwaysOn(@Nullable Boolean alwaysOn) {
            this.alwaysOn = alwaysOn;
            return this;
        }
        public Builder apiDefinition(@Nullable ApiDefinitionInfoResponse apiDefinition) {
            this.apiDefinition = apiDefinition;
            return this;
        }
        public Builder apiManagementConfig(@Nullable ApiManagementConfigResponse apiManagementConfig) {
            this.apiManagementConfig = apiManagementConfig;
            return this;
        }
        public Builder appCommandLine(@Nullable String appCommandLine) {
            this.appCommandLine = appCommandLine;
            return this;
        }
        public Builder appSettings(@Nullable List<NameValuePairResponse> appSettings) {
            this.appSettings = appSettings;
            return this;
        }
        public Builder appSettings(NameValuePairResponse... appSettings) {
            return appSettings(List.of(appSettings));
        }
        public Builder autoHealEnabled(@Nullable Boolean autoHealEnabled) {
            this.autoHealEnabled = autoHealEnabled;
            return this;
        }
        public Builder autoHealRules(@Nullable AutoHealRulesResponse autoHealRules) {
            this.autoHealRules = autoHealRules;
            return this;
        }
        public Builder autoSwapSlotName(@Nullable String autoSwapSlotName) {
            this.autoSwapSlotName = autoSwapSlotName;
            return this;
        }
        public Builder azureStorageAccounts(@Nullable Map<String,AzureStorageInfoValueResponse> azureStorageAccounts) {
            this.azureStorageAccounts = azureStorageAccounts;
            return this;
        }
        public Builder connectionStrings(@Nullable List<ConnStringInfoResponse> connectionStrings) {
            this.connectionStrings = connectionStrings;
            return this;
        }
        public Builder connectionStrings(ConnStringInfoResponse... connectionStrings) {
            return connectionStrings(List.of(connectionStrings));
        }
        public Builder cors(@Nullable CorsSettingsResponse cors) {
            this.cors = cors;
            return this;
        }
        public Builder defaultDocuments(@Nullable List<String> defaultDocuments) {
            this.defaultDocuments = defaultDocuments;
            return this;
        }
        public Builder defaultDocuments(String... defaultDocuments) {
            return defaultDocuments(List.of(defaultDocuments));
        }
        public Builder detailedErrorLoggingEnabled(@Nullable Boolean detailedErrorLoggingEnabled) {
            this.detailedErrorLoggingEnabled = detailedErrorLoggingEnabled;
            return this;
        }
        public Builder documentRoot(@Nullable String documentRoot) {
            this.documentRoot = documentRoot;
            return this;
        }
        public Builder experiments(@Nullable ExperimentsResponse experiments) {
            this.experiments = experiments;
            return this;
        }
        public Builder ftpsState(@Nullable String ftpsState) {
            this.ftpsState = ftpsState;
            return this;
        }
        public Builder functionAppScaleLimit(@Nullable Integer functionAppScaleLimit) {
            this.functionAppScaleLimit = functionAppScaleLimit;
            return this;
        }
        public Builder functionsRuntimeScaleMonitoringEnabled(@Nullable Boolean functionsRuntimeScaleMonitoringEnabled) {
            this.functionsRuntimeScaleMonitoringEnabled = functionsRuntimeScaleMonitoringEnabled;
            return this;
        }
        public Builder handlerMappings(@Nullable List<HandlerMappingResponse> handlerMappings) {
            this.handlerMappings = handlerMappings;
            return this;
        }
        public Builder handlerMappings(HandlerMappingResponse... handlerMappings) {
            return handlerMappings(List.of(handlerMappings));
        }
        public Builder healthCheckPath(@Nullable String healthCheckPath) {
            this.healthCheckPath = healthCheckPath;
            return this;
        }
        public Builder http20Enabled(@Nullable Boolean http20Enabled) {
            this.http20Enabled = http20Enabled;
            return this;
        }
        public Builder httpLoggingEnabled(@Nullable Boolean httpLoggingEnabled) {
            this.httpLoggingEnabled = httpLoggingEnabled;
            return this;
        }
        public Builder ipSecurityRestrictions(@Nullable List<IpSecurityRestrictionResponse> ipSecurityRestrictions) {
            this.ipSecurityRestrictions = ipSecurityRestrictions;
            return this;
        }
        public Builder ipSecurityRestrictions(IpSecurityRestrictionResponse... ipSecurityRestrictions) {
            return ipSecurityRestrictions(List.of(ipSecurityRestrictions));
        }
        public Builder javaContainer(@Nullable String javaContainer) {
            this.javaContainer = javaContainer;
            return this;
        }
        public Builder javaContainerVersion(@Nullable String javaContainerVersion) {
            this.javaContainerVersion = javaContainerVersion;
            return this;
        }
        public Builder javaVersion(@Nullable String javaVersion) {
            this.javaVersion = javaVersion;
            return this;
        }
        public Builder keyVaultReferenceIdentity(@Nullable String keyVaultReferenceIdentity) {
            this.keyVaultReferenceIdentity = keyVaultReferenceIdentity;
            return this;
        }
        public Builder limits(@Nullable SiteLimitsResponse limits) {
            this.limits = limits;
            return this;
        }
        public Builder linuxFxVersion(@Nullable String linuxFxVersion) {
            this.linuxFxVersion = linuxFxVersion;
            return this;
        }
        public Builder loadBalancing(@Nullable String loadBalancing) {
            this.loadBalancing = loadBalancing;
            return this;
        }
        public Builder localMySqlEnabled(@Nullable Boolean localMySqlEnabled) {
            this.localMySqlEnabled = localMySqlEnabled;
            return this;
        }
        public Builder logsDirectorySizeLimit(@Nullable Integer logsDirectorySizeLimit) {
            this.logsDirectorySizeLimit = logsDirectorySizeLimit;
            return this;
        }
        public Builder machineKey(SiteMachineKeyResponse machineKey) {
            this.machineKey = Objects.requireNonNull(machineKey);
            return this;
        }
        public Builder managedPipelineMode(@Nullable String managedPipelineMode) {
            this.managedPipelineMode = managedPipelineMode;
            return this;
        }
        public Builder managedServiceIdentityId(@Nullable Integer managedServiceIdentityId) {
            this.managedServiceIdentityId = managedServiceIdentityId;
            return this;
        }
        public Builder minTlsVersion(@Nullable String minTlsVersion) {
            this.minTlsVersion = minTlsVersion;
            return this;
        }
        public Builder minimumElasticInstanceCount(@Nullable Integer minimumElasticInstanceCount) {
            this.minimumElasticInstanceCount = minimumElasticInstanceCount;
            return this;
        }
        public Builder netFrameworkVersion(@Nullable String netFrameworkVersion) {
            this.netFrameworkVersion = netFrameworkVersion;
            return this;
        }
        public Builder nodeVersion(@Nullable String nodeVersion) {
            this.nodeVersion = nodeVersion;
            return this;
        }
        public Builder numberOfWorkers(@Nullable Integer numberOfWorkers) {
            this.numberOfWorkers = numberOfWorkers;
            return this;
        }
        public Builder phpVersion(@Nullable String phpVersion) {
            this.phpVersion = phpVersion;
            return this;
        }
        public Builder powerShellVersion(@Nullable String powerShellVersion) {
            this.powerShellVersion = powerShellVersion;
            return this;
        }
        public Builder preWarmedInstanceCount(@Nullable Integer preWarmedInstanceCount) {
            this.preWarmedInstanceCount = preWarmedInstanceCount;
            return this;
        }
        public Builder publicNetworkAccess(@Nullable String publicNetworkAccess) {
            this.publicNetworkAccess = publicNetworkAccess;
            return this;
        }
        public Builder publishingUsername(@Nullable String publishingUsername) {
            this.publishingUsername = publishingUsername;
            return this;
        }
        public Builder push(@Nullable PushSettingsResponse push) {
            this.push = push;
            return this;
        }
        public Builder pythonVersion(@Nullable String pythonVersion) {
            this.pythonVersion = pythonVersion;
            return this;
        }
        public Builder remoteDebuggingEnabled(@Nullable Boolean remoteDebuggingEnabled) {
            this.remoteDebuggingEnabled = remoteDebuggingEnabled;
            return this;
        }
        public Builder remoteDebuggingVersion(@Nullable String remoteDebuggingVersion) {
            this.remoteDebuggingVersion = remoteDebuggingVersion;
            return this;
        }
        public Builder requestTracingEnabled(@Nullable Boolean requestTracingEnabled) {
            this.requestTracingEnabled = requestTracingEnabled;
            return this;
        }
        public Builder requestTracingExpirationTime(@Nullable String requestTracingExpirationTime) {
            this.requestTracingExpirationTime = requestTracingExpirationTime;
            return this;
        }
        public Builder scmIpSecurityRestrictions(@Nullable List<IpSecurityRestrictionResponse> scmIpSecurityRestrictions) {
            this.scmIpSecurityRestrictions = scmIpSecurityRestrictions;
            return this;
        }
        public Builder scmIpSecurityRestrictions(IpSecurityRestrictionResponse... scmIpSecurityRestrictions) {
            return scmIpSecurityRestrictions(List.of(scmIpSecurityRestrictions));
        }
        public Builder scmIpSecurityRestrictionsUseMain(@Nullable Boolean scmIpSecurityRestrictionsUseMain) {
            this.scmIpSecurityRestrictionsUseMain = scmIpSecurityRestrictionsUseMain;
            return this;
        }
        public Builder scmMinTlsVersion(@Nullable String scmMinTlsVersion) {
            this.scmMinTlsVersion = scmMinTlsVersion;
            return this;
        }
        public Builder scmType(@Nullable String scmType) {
            this.scmType = scmType;
            return this;
        }
        public Builder tracingOptions(@Nullable String tracingOptions) {
            this.tracingOptions = tracingOptions;
            return this;
        }
        public Builder use32BitWorkerProcess(@Nullable Boolean use32BitWorkerProcess) {
            this.use32BitWorkerProcess = use32BitWorkerProcess;
            return this;
        }
        public Builder virtualApplications(@Nullable List<VirtualApplicationResponse> virtualApplications) {
            this.virtualApplications = virtualApplications;
            return this;
        }
        public Builder virtualApplications(VirtualApplicationResponse... virtualApplications) {
            return virtualApplications(List.of(virtualApplications));
        }
        public Builder vnetName(@Nullable String vnetName) {
            this.vnetName = vnetName;
            return this;
        }
        public Builder vnetPrivatePortsCount(@Nullable Integer vnetPrivatePortsCount) {
            this.vnetPrivatePortsCount = vnetPrivatePortsCount;
            return this;
        }
        public Builder vnetRouteAllEnabled(@Nullable Boolean vnetRouteAllEnabled) {
            this.vnetRouteAllEnabled = vnetRouteAllEnabled;
            return this;
        }
        public Builder webSocketsEnabled(@Nullable Boolean webSocketsEnabled) {
            this.webSocketsEnabled = webSocketsEnabled;
            return this;
        }
        public Builder websiteTimeZone(@Nullable String websiteTimeZone) {
            this.websiteTimeZone = websiteTimeZone;
            return this;
        }
        public Builder windowsFxVersion(@Nullable String windowsFxVersion) {
            this.windowsFxVersion = windowsFxVersion;
            return this;
        }
        public Builder xManagedServiceIdentityId(@Nullable Integer xManagedServiceIdentityId) {
            this.xManagedServiceIdentityId = xManagedServiceIdentityId;
            return this;
        }        public SiteConfigResponse build() {
            return new SiteConfigResponse(acrUseManagedIdentityCreds, acrUserManagedIdentityID, alwaysOn, apiDefinition, apiManagementConfig, appCommandLine, appSettings, autoHealEnabled, autoHealRules, autoSwapSlotName, azureStorageAccounts, connectionStrings, cors, defaultDocuments, detailedErrorLoggingEnabled, documentRoot, experiments, ftpsState, functionAppScaleLimit, functionsRuntimeScaleMonitoringEnabled, handlerMappings, healthCheckPath, http20Enabled, httpLoggingEnabled, ipSecurityRestrictions, javaContainer, javaContainerVersion, javaVersion, keyVaultReferenceIdentity, limits, linuxFxVersion, loadBalancing, localMySqlEnabled, logsDirectorySizeLimit, machineKey, managedPipelineMode, managedServiceIdentityId, minTlsVersion, minimumElasticInstanceCount, netFrameworkVersion, nodeVersion, numberOfWorkers, phpVersion, powerShellVersion, preWarmedInstanceCount, publicNetworkAccess, publishingUsername, push, pythonVersion, remoteDebuggingEnabled, remoteDebuggingVersion, requestTracingEnabled, requestTracingExpirationTime, scmIpSecurityRestrictions, scmIpSecurityRestrictionsUseMain, scmMinTlsVersion, scmType, tracingOptions, use32BitWorkerProcess, virtualApplications, vnetName, vnetPrivatePortsCount, vnetRouteAllEnabled, webSocketsEnabled, websiteTimeZone, windowsFxVersion, xManagedServiceIdentityId);
        }
    }
}
