// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.devtestlab.inputs;

import com.pulumi.azurenative.devtestlab.enums.StorageType;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Properties to attach new disk to the Virtual Machine.
 * 
 */
public final class AttachNewDataDiskOptionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final AttachNewDataDiskOptionsArgs Empty = new AttachNewDataDiskOptionsArgs();

    /**
     * The name of the disk to be attached.
     * 
     */
    @Import(name="diskName")
    private @Nullable Output<String> diskName;

    /**
     * @return The name of the disk to be attached.
     * 
     */
    public Optional<Output<String>> diskName() {
        return Optional.ofNullable(this.diskName);
    }

    /**
     * Size of the disk to be attached in Gibibytes.
     * 
     */
    @Import(name="diskSizeGiB")
    private @Nullable Output<Integer> diskSizeGiB;

    /**
     * @return Size of the disk to be attached in Gibibytes.
     * 
     */
    public Optional<Output<Integer>> diskSizeGiB() {
        return Optional.ofNullable(this.diskSizeGiB);
    }

    /**
     * The storage type for the disk (i.e. Standard, Premium).
     * 
     */
    @Import(name="diskType")
    private @Nullable Output<Either<String,StorageType>> diskType;

    /**
     * @return The storage type for the disk (i.e. Standard, Premium).
     * 
     */
    public Optional<Output<Either<String,StorageType>>> diskType() {
        return Optional.ofNullable(this.diskType);
    }

    private AttachNewDataDiskOptionsArgs() {}

    private AttachNewDataDiskOptionsArgs(AttachNewDataDiskOptionsArgs $) {
        this.diskName = $.diskName;
        this.diskSizeGiB = $.diskSizeGiB;
        this.diskType = $.diskType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AttachNewDataDiskOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AttachNewDataDiskOptionsArgs $;

        public Builder() {
            $ = new AttachNewDataDiskOptionsArgs();
        }

        public Builder(AttachNewDataDiskOptionsArgs defaults) {
            $ = new AttachNewDataDiskOptionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param diskName The name of the disk to be attached.
         * 
         * @return builder
         * 
         */
        public Builder diskName(@Nullable Output<String> diskName) {
            $.diskName = diskName;
            return this;
        }

        /**
         * @param diskName The name of the disk to be attached.
         * 
         * @return builder
         * 
         */
        public Builder diskName(String diskName) {
            return diskName(Output.of(diskName));
        }

        /**
         * @param diskSizeGiB Size of the disk to be attached in Gibibytes.
         * 
         * @return builder
         * 
         */
        public Builder diskSizeGiB(@Nullable Output<Integer> diskSizeGiB) {
            $.diskSizeGiB = diskSizeGiB;
            return this;
        }

        /**
         * @param diskSizeGiB Size of the disk to be attached in Gibibytes.
         * 
         * @return builder
         * 
         */
        public Builder diskSizeGiB(Integer diskSizeGiB) {
            return diskSizeGiB(Output.of(diskSizeGiB));
        }

        /**
         * @param diskType The storage type for the disk (i.e. Standard, Premium).
         * 
         * @return builder
         * 
         */
        public Builder diskType(@Nullable Output<Either<String,StorageType>> diskType) {
            $.diskType = diskType;
            return this;
        }

        /**
         * @param diskType The storage type for the disk (i.e. Standard, Premium).
         * 
         * @return builder
         * 
         */
        public Builder diskType(Either<String,StorageType> diskType) {
            return diskType(Output.of(diskType));
        }

        /**
         * @param diskType The storage type for the disk (i.e. Standard, Premium).
         * 
         * @return builder
         * 
         */
        public Builder diskType(String diskType) {
            return diskType(Either.ofLeft(diskType));
        }

        /**
         * @param diskType The storage type for the disk (i.e. Standard, Premium).
         * 
         * @return builder
         * 
         */
        public Builder diskType(StorageType diskType) {
            return diskType(Either.ofRight(diskType));
        }

        public AttachNewDataDiskOptionsArgs build() {
            return $;
        }
    }

}
