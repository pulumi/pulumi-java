// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Load balancing settings for a backend pool
 * 
 */
public final class HealthProbeSettingsModelResponse extends com.pulumi.resources.InvokeArgs {

    public static final HealthProbeSettingsModelResponse Empty = new HealthProbeSettingsModelResponse();

    /**
     * Whether to enable health probes to be made against backends defined under backendPools. Health probes can only be disabled if there is a single enabled backend in single enabled backend pool.
     * 
     */
    @Import(name="enabledState")
    private @Nullable String enabledState;

    /**
     * @return Whether to enable health probes to be made against backends defined under backendPools. Health probes can only be disabled if there is a single enabled backend in single enabled backend pool.
     * 
     */
    public Optional<String> enabledState() {
        return Optional.ofNullable(this.enabledState);
    }

    /**
     * Configures which HTTP method to use to probe the backends defined under backendPools.
     * 
     */
    @Import(name="healthProbeMethod")
    private @Nullable String healthProbeMethod;

    /**
     * @return Configures which HTTP method to use to probe the backends defined under backendPools.
     * 
     */
    public Optional<String> healthProbeMethod() {
        return Optional.ofNullable(this.healthProbeMethod);
    }

    /**
     * Resource ID.
     * 
     */
    @Import(name="id")
    private @Nullable String id;

    /**
     * @return Resource ID.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The number of seconds between health probes.
     * 
     */
    @Import(name="intervalInSeconds")
    private @Nullable Integer intervalInSeconds;

    /**
     * @return The number of seconds between health probes.
     * 
     */
    public Optional<Integer> intervalInSeconds() {
        return Optional.ofNullable(this.intervalInSeconds);
    }

    /**
     * Resource name.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return Resource name.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The path to use for the health probe. Default is /
     * 
     */
    @Import(name="path")
    private @Nullable String path;

    /**
     * @return The path to use for the health probe. Default is /
     * 
     */
    public Optional<String> path() {
        return Optional.ofNullable(this.path);
    }

    /**
     * Protocol scheme to use for this probe
     * 
     */
    @Import(name="protocol")
    private @Nullable String protocol;

    /**
     * @return Protocol scheme to use for this probe
     * 
     */
    public Optional<String> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    /**
     * Resource status.
     * 
     */
    @Import(name="resourceState", required=true)
    private String resourceState;

    /**
     * @return Resource status.
     * 
     */
    public String resourceState() {
        return this.resourceState;
    }

    /**
     * Resource type.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    /**
     * @return Resource type.
     * 
     */
    public String type() {
        return this.type;
    }

    private HealthProbeSettingsModelResponse() {}

    private HealthProbeSettingsModelResponse(HealthProbeSettingsModelResponse $) {
        this.enabledState = $.enabledState;
        this.healthProbeMethod = $.healthProbeMethod;
        this.id = $.id;
        this.intervalInSeconds = $.intervalInSeconds;
        this.name = $.name;
        this.path = $.path;
        this.protocol = $.protocol;
        this.resourceState = $.resourceState;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HealthProbeSettingsModelResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HealthProbeSettingsModelResponse $;

        public Builder() {
            $ = new HealthProbeSettingsModelResponse();
        }

        public Builder(HealthProbeSettingsModelResponse defaults) {
            $ = new HealthProbeSettingsModelResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param enabledState Whether to enable health probes to be made against backends defined under backendPools. Health probes can only be disabled if there is a single enabled backend in single enabled backend pool.
         * 
         * @return builder
         * 
         */
        public Builder enabledState(@Nullable String enabledState) {
            $.enabledState = enabledState;
            return this;
        }

        /**
         * @param healthProbeMethod Configures which HTTP method to use to probe the backends defined under backendPools.
         * 
         * @return builder
         * 
         */
        public Builder healthProbeMethod(@Nullable String healthProbeMethod) {
            $.healthProbeMethod = healthProbeMethod;
            return this;
        }

        /**
         * @param id Resource ID.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable String id) {
            $.id = id;
            return this;
        }

        /**
         * @param intervalInSeconds The number of seconds between health probes.
         * 
         * @return builder
         * 
         */
        public Builder intervalInSeconds(@Nullable Integer intervalInSeconds) {
            $.intervalInSeconds = intervalInSeconds;
            return this;
        }

        /**
         * @param name Resource name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param path The path to use for the health probe. Default is /
         * 
         * @return builder
         * 
         */
        public Builder path(@Nullable String path) {
            $.path = path;
            return this;
        }

        /**
         * @param protocol Protocol scheme to use for this probe
         * 
         * @return builder
         * 
         */
        public Builder protocol(@Nullable String protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param resourceState Resource status.
         * 
         * @return builder
         * 
         */
        public Builder resourceState(String resourceState) {
            $.resourceState = resourceState;
            return this;
        }

        /**
         * @param type Resource type.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public HealthProbeSettingsModelResponse build() {
            $.healthProbeMethod = Codegen.stringProp("healthProbeMethod").arg($.healthProbeMethod).def("HEAD").getNullable();
            $.resourceState = Objects.requireNonNull($.resourceState, "expected parameter 'resourceState' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
