// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.storage.inputs;

import com.pulumi.azurenative.storage.inputs.ManagementPolicyDefinitionResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * An object that wraps the Lifecycle rule. Each rule is uniquely defined by name.
 * 
 */
public final class ManagementPolicyRuleResponse extends com.pulumi.resources.InvokeArgs {

    public static final ManagementPolicyRuleResponse Empty = new ManagementPolicyRuleResponse();

    /**
     * An object that defines the Lifecycle rule.
     * 
     */
    @Import(name="definition", required=true)
    private ManagementPolicyDefinitionResponse definition;

    public ManagementPolicyDefinitionResponse definition() {
        return this.definition;
    }

    /**
     * Rule is enabled if set to true.
     * 
     */
    @Import(name="enabled")
    private @Nullable Boolean enabled;

    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * A rule name can contain any combination of alpha numeric characters. Rule name is case-sensitive. It must be unique within a policy.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    public String name() {
        return this.name;
    }

    /**
     * The valid value is Lifecycle
     * 
     */
    @Import(name="type", required=true)
    private String type;

    public String type() {
        return this.type;
    }

    private ManagementPolicyRuleResponse() {}

    private ManagementPolicyRuleResponse(ManagementPolicyRuleResponse $) {
        this.definition = $.definition;
        this.enabled = $.enabled;
        this.name = $.name;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagementPolicyRuleResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagementPolicyRuleResponse $;

        public Builder() {
            $ = new ManagementPolicyRuleResponse();
        }

        public Builder(ManagementPolicyRuleResponse defaults) {
            $ = new ManagementPolicyRuleResponse(Objects.requireNonNull(defaults));
        }

        public Builder definition(ManagementPolicyDefinitionResponse definition) {
            $.definition = definition;
            return this;
        }

        public Builder enabled(@Nullable Boolean enabled) {
            $.enabled = enabled;
            return this;
        }

        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public ManagementPolicyRuleResponse build() {
            $.definition = Objects.requireNonNull($.definition, "expected parameter 'definition' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
