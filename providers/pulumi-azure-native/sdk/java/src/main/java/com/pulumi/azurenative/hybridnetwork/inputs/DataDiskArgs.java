// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.hybridnetwork.inputs;

import com.pulumi.azurenative.hybridnetwork.enums.DiskCreateOptionTypes;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Specifies information about the operating system disk used by the virtual machine. <br><br> For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json).
 * 
 */
public final class DataDiskArgs extends com.pulumi.resources.ResourceArgs {

    public static final DataDiskArgs Empty = new DataDiskArgs();

    /**
     * Specifies how the virtual machine should be created.
     * 
     */
    @Import(name="createOption")
      private final @Nullable Output<Either<String,DiskCreateOptionTypes>> createOption;

    public Output<Either<String,DiskCreateOptionTypes>> createOption() {
        return this.createOption == null ? Codegen.empty() : this.createOption;
    }

    /**
     * Specifies the size of an empty disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image.
     * 
     */
    @Import(name="diskSizeGB")
      private final @Nullable Output<Integer> diskSizeGB;

    public Output<Integer> diskSizeGB() {
        return this.diskSizeGB == null ? Codegen.empty() : this.diskSizeGB;
    }

    /**
     * The name of data disk.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    public DataDiskArgs(
        @Nullable Output<Either<String,DiskCreateOptionTypes>> createOption,
        @Nullable Output<Integer> diskSizeGB,
        @Nullable Output<String> name) {
        this.createOption = createOption;
        this.diskSizeGB = diskSizeGB;
        this.name = name;
    }

    private DataDiskArgs() {
        this.createOption = Codegen.empty();
        this.diskSizeGB = Codegen.empty();
        this.name = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DataDiskArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Either<String,DiskCreateOptionTypes>> createOption;
        private @Nullable Output<Integer> diskSizeGB;
        private @Nullable Output<String> name;

        public Builder() {
    	      // Empty
        }

        public Builder(DataDiskArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createOption = defaults.createOption;
    	      this.diskSizeGB = defaults.diskSizeGB;
    	      this.name = defaults.name;
        }

        public Builder createOption(@Nullable Output<Either<String,DiskCreateOptionTypes>> createOption) {
            this.createOption = createOption;
            return this;
        }
        public Builder createOption(@Nullable Either<String,DiskCreateOptionTypes> createOption) {
            this.createOption = Codegen.ofNullable(createOption);
            return this;
        }
        public Builder diskSizeGB(@Nullable Output<Integer> diskSizeGB) {
            this.diskSizeGB = diskSizeGB;
            return this;
        }
        public Builder diskSizeGB(@Nullable Integer diskSizeGB) {
            this.diskSizeGB = Codegen.ofNullable(diskSizeGB);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }        public DataDiskArgs build() {
            return new DataDiskArgs(createOption, diskSizeGB, name);
        }
    }
}
