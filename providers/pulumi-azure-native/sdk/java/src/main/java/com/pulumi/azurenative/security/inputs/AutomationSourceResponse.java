// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.security.inputs;

import com.pulumi.azurenative.security.inputs.AutomationRuleSetResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The source event types which evaluate the security automation set of rules. For example - security alerts and security assessments. To learn more about the supported security events data models schemas - please visit https://aka.ms/ASCAutomationSchemas.
 * 
 */
public final class AutomationSourceResponse extends com.pulumi.resources.InvokeArgs {

    public static final AutomationSourceResponse Empty = new AutomationSourceResponse();

    /**
     * A valid event source type.
     * 
     */
    @Import(name="eventSource")
    private @Nullable String eventSource;

    /**
     * @return A valid event source type.
     * 
     */
    public Optional<String> eventSource() {
        return Optional.ofNullable(this.eventSource);
    }

    /**
     * A set of rules which evaluate upon event interception. A logical disjunction is applied between defined rule sets (logical &#39;or&#39;).
     * 
     */
    @Import(name="ruleSets")
    private @Nullable List<AutomationRuleSetResponse> ruleSets;

    /**
     * @return A set of rules which evaluate upon event interception. A logical disjunction is applied between defined rule sets (logical &#39;or&#39;).
     * 
     */
    public Optional<List<AutomationRuleSetResponse>> ruleSets() {
        return Optional.ofNullable(this.ruleSets);
    }

    private AutomationSourceResponse() {}

    private AutomationSourceResponse(AutomationSourceResponse $) {
        this.eventSource = $.eventSource;
        this.ruleSets = $.ruleSets;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AutomationSourceResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AutomationSourceResponse $;

        public Builder() {
            $ = new AutomationSourceResponse();
        }

        public Builder(AutomationSourceResponse defaults) {
            $ = new AutomationSourceResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param eventSource A valid event source type.
         * 
         * @return builder
         * 
         */
        public Builder eventSource(@Nullable String eventSource) {
            $.eventSource = eventSource;
            return this;
        }

        /**
         * @param ruleSets A set of rules which evaluate upon event interception. A logical disjunction is applied between defined rule sets (logical &#39;or&#39;).
         * 
         * @return builder
         * 
         */
        public Builder ruleSets(@Nullable List<AutomationRuleSetResponse> ruleSets) {
            $.ruleSets = ruleSets;
            return this;
        }

        /**
         * @param ruleSets A set of rules which evaluate upon event interception. A logical disjunction is applied between defined rule sets (logical &#39;or&#39;).
         * 
         * @return builder
         * 
         */
        public Builder ruleSets(AutomationRuleSetResponse... ruleSets) {
            return ruleSets(List.of(ruleSets));
        }

        public AutomationSourceResponse build() {
            return $;
        }
    }

}
