// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.databoxedge.inputs;

import com.pulumi.azurenative.databoxedge.enums.ShareAccessType;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * The mapping between a particular user and the access type on the SMB share.
 * 
 */
public final class UserAccessRightArgs extends com.pulumi.resources.ResourceArgs {

    public static final UserAccessRightArgs Empty = new UserAccessRightArgs();

    /**
     * Type of access to be allowed for the user.
     * 
     */
    @Import(name="accessType", required=true)
    private Output<Either<String,ShareAccessType>> accessType;

    /**
     * @return Type of access to be allowed for the user.
     * 
     */
    public Output<Either<String,ShareAccessType>> accessType() {
        return this.accessType;
    }

    /**
     * User ID (already existing in the device).
     * 
     */
    @Import(name="userId", required=true)
    private Output<String> userId;

    /**
     * @return User ID (already existing in the device).
     * 
     */
    public Output<String> userId() {
        return this.userId;
    }

    private UserAccessRightArgs() {}

    private UserAccessRightArgs(UserAccessRightArgs $) {
        this.accessType = $.accessType;
        this.userId = $.userId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserAccessRightArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserAccessRightArgs $;

        public Builder() {
            $ = new UserAccessRightArgs();
        }

        public Builder(UserAccessRightArgs defaults) {
            $ = new UserAccessRightArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessType Type of access to be allowed for the user.
         * 
         * @return builder
         * 
         */
        public Builder accessType(Output<Either<String,ShareAccessType>> accessType) {
            $.accessType = accessType;
            return this;
        }

        /**
         * @param accessType Type of access to be allowed for the user.
         * 
         * @return builder
         * 
         */
        public Builder accessType(Either<String,ShareAccessType> accessType) {
            return accessType(Output.of(accessType));
        }

        /**
         * @param accessType Type of access to be allowed for the user.
         * 
         * @return builder
         * 
         */
        public Builder accessType(String accessType) {
            return accessType(Either.ofLeft(accessType));
        }

        /**
         * @param accessType Type of access to be allowed for the user.
         * 
         * @return builder
         * 
         */
        public Builder accessType(ShareAccessType accessType) {
            return accessType(Either.ofRight(accessType));
        }

        /**
         * @param userId User ID (already existing in the device).
         * 
         * @return builder
         * 
         */
        public Builder userId(Output<String> userId) {
            $.userId = userId;
            return this;
        }

        /**
         * @param userId User ID (already existing in the device).
         * 
         * @return builder
         * 
         */
        public Builder userId(String userId) {
            return userId(Output.of(userId));
        }

        public UserAccessRightArgs build() {
            $.accessType = Objects.requireNonNull($.accessType, "expected parameter 'accessType' to be non-null");
            $.userId = Objects.requireNonNull($.userId, "expected parameter 'userId' to be non-null");
            return $;
        }
    }

}
