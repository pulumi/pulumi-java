// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.web.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Database backup settings.
 * 
 */
public final class DatabaseBackupSettingResponse extends com.pulumi.resources.InvokeArgs {

    public static final DatabaseBackupSettingResponse Empty = new DatabaseBackupSettingResponse();

    /**
     * Contains a connection string to a database which is being backed up or restored. If the restore should happen to a new database, the database name inside is the new one.
     * 
     */
    @Import(name="connectionString")
    private @Nullable String connectionString;

    public Optional<String> connectionString() {
        return Optional.ofNullable(this.connectionString);
    }

    /**
     * Contains a connection string name that is linked to the SiteConfig.ConnectionStrings.
     * This is used during restore with overwrite connection strings options.
     * 
     */
    @Import(name="connectionStringName")
    private @Nullable String connectionStringName;

    public Optional<String> connectionStringName() {
        return Optional.ofNullable(this.connectionStringName);
    }

    /**
     * Database type (e.g. SqlAzure / MySql).
     * 
     */
    @Import(name="databaseType", required=true)
    private String databaseType;

    public String databaseType() {
        return this.databaseType;
    }

    @Import(name="name")
    private @Nullable String name;

    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    private DatabaseBackupSettingResponse() {}

    private DatabaseBackupSettingResponse(DatabaseBackupSettingResponse $) {
        this.connectionString = $.connectionString;
        this.connectionStringName = $.connectionStringName;
        this.databaseType = $.databaseType;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatabaseBackupSettingResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatabaseBackupSettingResponse $;

        public Builder() {
            $ = new DatabaseBackupSettingResponse();
        }

        public Builder(DatabaseBackupSettingResponse defaults) {
            $ = new DatabaseBackupSettingResponse(Objects.requireNonNull(defaults));
        }

        public Builder connectionString(@Nullable String connectionString) {
            $.connectionString = connectionString;
            return this;
        }

        public Builder connectionStringName(@Nullable String connectionStringName) {
            $.connectionStringName = connectionStringName;
            return this;
        }

        public Builder databaseType(String databaseType) {
            $.databaseType = databaseType;
            return this;
        }

        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        public DatabaseBackupSettingResponse build() {
            $.databaseType = Objects.requireNonNull($.databaseType, "expected parameter 'databaseType' to be non-null");
            return $;
        }
    }

}
