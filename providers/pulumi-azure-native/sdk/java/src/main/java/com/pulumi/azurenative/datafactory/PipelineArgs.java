// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory;

import com.pulumi.azurenative.datafactory.inputs.AppendVariableActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.AzureDataExplorerCommandActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.AzureFunctionActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.AzureMLBatchExecutionActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.AzureMLExecutePipelineActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.AzureMLUpdateResourceActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.ControlActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.CopyActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.CustomActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.DataLakeAnalyticsUSQLActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.DatabricksNotebookActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.DatabricksSparkJarActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.DatabricksSparkPythonActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.DeleteActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.ExecuteDataFlowActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.ExecutePipelineActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.ExecuteSSISPackageActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.ExecuteWranglingDataflowActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.ExecutionActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.FailActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.FilterActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.ForEachActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.GetMetadataActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.HDInsightHiveActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.HDInsightMapReduceActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.HDInsightPigActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.HDInsightSparkActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.HDInsightStreamingActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.IfConditionActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.LookupActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.ParameterSpecificationArgs;
import com.pulumi.azurenative.datafactory.inputs.PipelineFolderArgs;
import com.pulumi.azurenative.datafactory.inputs.PipelinePolicyArgs;
import com.pulumi.azurenative.datafactory.inputs.ScriptActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.SetVariableActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.SqlServerStoredProcedureActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.SwitchActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.UntilActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.ValidationActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.VariableSpecificationArgs;
import com.pulumi.azurenative.datafactory.inputs.WaitActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.WebActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.WebHookActivityArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PipelineArgs extends com.pulumi.resources.ResourceArgs {

    public static final PipelineArgs Empty = new PipelineArgs();

    /**
     * List of activities in pipeline.
     * 
     */
    @Import(name="activities")
    private @Nullable Output<List<Object>> activities;

    /**
     * @return List of activities in pipeline.
     * 
     */
    public Optional<Output<List<Object>>> activities() {
        return Optional.ofNullable(this.activities);
    }

    /**
     * List of tags that can be used for describing the Pipeline.
     * 
     */
    @Import(name="annotations")
    private @Nullable Output<List<Object>> annotations;

    /**
     * @return List of tags that can be used for describing the Pipeline.
     * 
     */
    public Optional<Output<List<Object>>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    /**
     * The max number of concurrent runs for the pipeline.
     * 
     */
    @Import(name="concurrency")
    private @Nullable Output<Integer> concurrency;

    /**
     * @return The max number of concurrent runs for the pipeline.
     * 
     */
    public Optional<Output<Integer>> concurrency() {
        return Optional.ofNullable(this.concurrency);
    }

    /**
     * The description of the pipeline.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the pipeline.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The factory name.
     * 
     */
    @Import(name="factoryName", required=true)
    private Output<String> factoryName;

    /**
     * @return The factory name.
     * 
     */
    public Output<String> factoryName() {
        return this.factoryName;
    }

    /**
     * The folder that this Pipeline is in. If not specified, Pipeline will appear at the root level.
     * 
     */
    @Import(name="folder")
    private @Nullable Output<PipelineFolderArgs> folder;

    /**
     * @return The folder that this Pipeline is in. If not specified, Pipeline will appear at the root level.
     * 
     */
    public Optional<Output<PipelineFolderArgs>> folder() {
        return Optional.ofNullable(this.folder);
    }

    /**
     * List of parameters for pipeline.
     * 
     */
    @Import(name="parameters")
    private @Nullable Output<Map<String,ParameterSpecificationArgs>> parameters;

    /**
     * @return List of parameters for pipeline.
     * 
     */
    public Optional<Output<Map<String,ParameterSpecificationArgs>>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    /**
     * The pipeline name.
     * 
     */
    @Import(name="pipelineName")
    private @Nullable Output<String> pipelineName;

    /**
     * @return The pipeline name.
     * 
     */
    public Optional<Output<String>> pipelineName() {
        return Optional.ofNullable(this.pipelineName);
    }

    /**
     * Pipeline Policy.
     * 
     */
    @Import(name="policy")
    private @Nullable Output<PipelinePolicyArgs> policy;

    /**
     * @return Pipeline Policy.
     * 
     */
    public Optional<Output<PipelinePolicyArgs>> policy() {
        return Optional.ofNullable(this.policy);
    }

    /**
     * The resource group name.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The resource group name.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Dimensions emitted by Pipeline.
     * 
     */
    @Import(name="runDimensions")
    private @Nullable Output<Map<String,Object>> runDimensions;

    /**
     * @return Dimensions emitted by Pipeline.
     * 
     */
    public Optional<Output<Map<String,Object>>> runDimensions() {
        return Optional.ofNullable(this.runDimensions);
    }

    /**
     * List of variables for pipeline.
     * 
     */
    @Import(name="variables")
    private @Nullable Output<Map<String,VariableSpecificationArgs>> variables;

    /**
     * @return List of variables for pipeline.
     * 
     */
    public Optional<Output<Map<String,VariableSpecificationArgs>>> variables() {
        return Optional.ofNullable(this.variables);
    }

    private PipelineArgs() {}

    private PipelineArgs(PipelineArgs $) {
        this.activities = $.activities;
        this.annotations = $.annotations;
        this.concurrency = $.concurrency;
        this.description = $.description;
        this.factoryName = $.factoryName;
        this.folder = $.folder;
        this.parameters = $.parameters;
        this.pipelineName = $.pipelineName;
        this.policy = $.policy;
        this.resourceGroupName = $.resourceGroupName;
        this.runDimensions = $.runDimensions;
        this.variables = $.variables;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PipelineArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PipelineArgs $;

        public Builder() {
            $ = new PipelineArgs();
        }

        public Builder(PipelineArgs defaults) {
            $ = new PipelineArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param activities List of activities in pipeline.
         * 
         * @return builder
         * 
         */
        public Builder activities(@Nullable Output<List<Object>> activities) {
            $.activities = activities;
            return this;
        }

        /**
         * @param activities List of activities in pipeline.
         * 
         * @return builder
         * 
         */
        public Builder activities(List<Object> activities) {
            return activities(Output.of(activities));
        }

        /**
         * @param activities List of activities in pipeline.
         * 
         * @return builder
         * 
         */
        public Builder activities(Object... activities) {
            return activities(List.of(activities));
        }

        /**
         * @param annotations List of tags that can be used for describing the Pipeline.
         * 
         * @return builder
         * 
         */
        public Builder annotations(@Nullable Output<List<Object>> annotations) {
            $.annotations = annotations;
            return this;
        }

        /**
         * @param annotations List of tags that can be used for describing the Pipeline.
         * 
         * @return builder
         * 
         */
        public Builder annotations(List<Object> annotations) {
            return annotations(Output.of(annotations));
        }

        /**
         * @param annotations List of tags that can be used for describing the Pipeline.
         * 
         * @return builder
         * 
         */
        public Builder annotations(Object... annotations) {
            return annotations(List.of(annotations));
        }

        /**
         * @param concurrency The max number of concurrent runs for the pipeline.
         * 
         * @return builder
         * 
         */
        public Builder concurrency(@Nullable Output<Integer> concurrency) {
            $.concurrency = concurrency;
            return this;
        }

        /**
         * @param concurrency The max number of concurrent runs for the pipeline.
         * 
         * @return builder
         * 
         */
        public Builder concurrency(Integer concurrency) {
            return concurrency(Output.of(concurrency));
        }

        /**
         * @param description The description of the pipeline.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the pipeline.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param factoryName The factory name.
         * 
         * @return builder
         * 
         */
        public Builder factoryName(Output<String> factoryName) {
            $.factoryName = factoryName;
            return this;
        }

        /**
         * @param factoryName The factory name.
         * 
         * @return builder
         * 
         */
        public Builder factoryName(String factoryName) {
            return factoryName(Output.of(factoryName));
        }

        /**
         * @param folder The folder that this Pipeline is in. If not specified, Pipeline will appear at the root level.
         * 
         * @return builder
         * 
         */
        public Builder folder(@Nullable Output<PipelineFolderArgs> folder) {
            $.folder = folder;
            return this;
        }

        /**
         * @param folder The folder that this Pipeline is in. If not specified, Pipeline will appear at the root level.
         * 
         * @return builder
         * 
         */
        public Builder folder(PipelineFolderArgs folder) {
            return folder(Output.of(folder));
        }

        /**
         * @param parameters List of parameters for pipeline.
         * 
         * @return builder
         * 
         */
        public Builder parameters(@Nullable Output<Map<String,ParameterSpecificationArgs>> parameters) {
            $.parameters = parameters;
            return this;
        }

        /**
         * @param parameters List of parameters for pipeline.
         * 
         * @return builder
         * 
         */
        public Builder parameters(Map<String,ParameterSpecificationArgs> parameters) {
            return parameters(Output.of(parameters));
        }

        /**
         * @param pipelineName The pipeline name.
         * 
         * @return builder
         * 
         */
        public Builder pipelineName(@Nullable Output<String> pipelineName) {
            $.pipelineName = pipelineName;
            return this;
        }

        /**
         * @param pipelineName The pipeline name.
         * 
         * @return builder
         * 
         */
        public Builder pipelineName(String pipelineName) {
            return pipelineName(Output.of(pipelineName));
        }

        /**
         * @param policy Pipeline Policy.
         * 
         * @return builder
         * 
         */
        public Builder policy(@Nullable Output<PipelinePolicyArgs> policy) {
            $.policy = policy;
            return this;
        }

        /**
         * @param policy Pipeline Policy.
         * 
         * @return builder
         * 
         */
        public Builder policy(PipelinePolicyArgs policy) {
            return policy(Output.of(policy));
        }

        /**
         * @param resourceGroupName The resource group name.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The resource group name.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param runDimensions Dimensions emitted by Pipeline.
         * 
         * @return builder
         * 
         */
        public Builder runDimensions(@Nullable Output<Map<String,Object>> runDimensions) {
            $.runDimensions = runDimensions;
            return this;
        }

        /**
         * @param runDimensions Dimensions emitted by Pipeline.
         * 
         * @return builder
         * 
         */
        public Builder runDimensions(Map<String,Object> runDimensions) {
            return runDimensions(Output.of(runDimensions));
        }

        /**
         * @param variables List of variables for pipeline.
         * 
         * @return builder
         * 
         */
        public Builder variables(@Nullable Output<Map<String,VariableSpecificationArgs>> variables) {
            $.variables = variables;
            return this;
        }

        /**
         * @param variables List of variables for pipeline.
         * 
         * @return builder
         * 
         */
        public Builder variables(Map<String,VariableSpecificationArgs> variables) {
            return variables(Output.of(variables));
        }

        public PipelineArgs build() {
            $.factoryName = Objects.requireNonNull($.factoryName, "expected parameter 'factoryName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
