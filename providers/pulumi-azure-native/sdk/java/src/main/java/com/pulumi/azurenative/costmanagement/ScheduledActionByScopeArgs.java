// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.costmanagement;

import com.pulumi.azurenative.costmanagement.enums.ScheduledActionKind;
import com.pulumi.azurenative.costmanagement.enums.ScheduledActionStatus;
import com.pulumi.azurenative.costmanagement.inputs.FileDestinationArgs;
import com.pulumi.azurenative.costmanagement.inputs.NotificationPropertiesArgs;
import com.pulumi.azurenative.costmanagement.inputs.SchedulePropertiesArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ScheduledActionByScopeArgs extends com.pulumi.resources.ResourceArgs {

    public static final ScheduledActionByScopeArgs Empty = new ScheduledActionByScopeArgs();

    /**
     * Scheduled action name.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return Scheduled action name.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * Destination format of the view data.
     * 
     */
    @Import(name="fileDestination")
    private @Nullable Output<FileDestinationArgs> fileDestination;

    /**
     * @return Destination format of the view data.
     * 
     */
    public Optional<Output<FileDestinationArgs>> fileDestination() {
        return Optional.ofNullable(this.fileDestination);
    }

    /**
     * Kind of the scheduled action.
     * 
     */
    @Import(name="kind")
    private @Nullable Output<Either<String,ScheduledActionKind>> kind;

    /**
     * @return Kind of the scheduled action.
     * 
     */
    public Optional<Output<Either<String,ScheduledActionKind>>> kind() {
        return Optional.ofNullable(this.kind);
    }

    /**
     * Scheduled action name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Scheduled action name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Notification properties based on scheduled action kind.
     * 
     */
    @Import(name="notification", required=true)
    private Output<NotificationPropertiesArgs> notification;

    /**
     * @return Notification properties based on scheduled action kind.
     * 
     */
    public Output<NotificationPropertiesArgs> notification() {
        return this.notification;
    }

    /**
     * Schedule of the scheduled action.
     * 
     */
    @Import(name="schedule", required=true)
    private Output<SchedulePropertiesArgs> schedule;

    /**
     * @return Schedule of the scheduled action.
     * 
     */
    public Output<SchedulePropertiesArgs> schedule() {
        return this.schedule;
    }

    /**
     * Cost Management scope like &#39;subscriptions/{subscriptionId}&#39; for subscription scope, &#39;subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&#39; for resourceGroup scope, &#39;providers/Microsoft.Billing/billingAccounts/{billingAccountId}&#39; for Billing Account scope, &#39;providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}&#39; for Department scope, &#39;providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}&#39; for EnrollmentAccount scope, &#39;providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}&#39; for BillingProfile scope, &#39;providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}&#39; for InvoiceSection scope, &#39;/providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}&#39; for ExternalBillingAccount scope, and &#39;/providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}&#39; for ExternalSubscription scope.
     * 
     */
    @Import(name="scope", required=true)
    private Output<String> scope;

    /**
     * @return Cost Management scope like &#39;subscriptions/{subscriptionId}&#39; for subscription scope, &#39;subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&#39; for resourceGroup scope, &#39;providers/Microsoft.Billing/billingAccounts/{billingAccountId}&#39; for Billing Account scope, &#39;providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}&#39; for Department scope, &#39;providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}&#39; for EnrollmentAccount scope, &#39;providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}&#39; for BillingProfile scope, &#39;providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}&#39; for InvoiceSection scope, &#39;/providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}&#39; for ExternalBillingAccount scope, and &#39;/providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}&#39; for ExternalSubscription scope.
     * 
     */
    public Output<String> scope() {
        return this.scope;
    }

    /**
     * Status of the scheduled action.
     * 
     */
    @Import(name="status", required=true)
    private Output<Either<String,ScheduledActionStatus>> status;

    /**
     * @return Status of the scheduled action.
     * 
     */
    public Output<Either<String,ScheduledActionStatus>> status() {
        return this.status;
    }

    /**
     * Cost analysis viewId used for scheduled action. For example, &#39;/providers/Microsoft.CostManagement/views/swaggerExample&#39;
     * 
     */
    @Import(name="viewId", required=true)
    private Output<String> viewId;

    /**
     * @return Cost analysis viewId used for scheduled action. For example, &#39;/providers/Microsoft.CostManagement/views/swaggerExample&#39;
     * 
     */
    public Output<String> viewId() {
        return this.viewId;
    }

    private ScheduledActionByScopeArgs() {}

    private ScheduledActionByScopeArgs(ScheduledActionByScopeArgs $) {
        this.displayName = $.displayName;
        this.fileDestination = $.fileDestination;
        this.kind = $.kind;
        this.name = $.name;
        this.notification = $.notification;
        this.schedule = $.schedule;
        this.scope = $.scope;
        this.status = $.status;
        this.viewId = $.viewId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ScheduledActionByScopeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ScheduledActionByScopeArgs $;

        public Builder() {
            $ = new ScheduledActionByScopeArgs();
        }

        public Builder(ScheduledActionByScopeArgs defaults) {
            $ = new ScheduledActionByScopeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param displayName Scheduled action name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Scheduled action name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param fileDestination Destination format of the view data.
         * 
         * @return builder
         * 
         */
        public Builder fileDestination(@Nullable Output<FileDestinationArgs> fileDestination) {
            $.fileDestination = fileDestination;
            return this;
        }

        /**
         * @param fileDestination Destination format of the view data.
         * 
         * @return builder
         * 
         */
        public Builder fileDestination(FileDestinationArgs fileDestination) {
            return fileDestination(Output.of(fileDestination));
        }

        /**
         * @param kind Kind of the scheduled action.
         * 
         * @return builder
         * 
         */
        public Builder kind(@Nullable Output<Either<String,ScheduledActionKind>> kind) {
            $.kind = kind;
            return this;
        }

        /**
         * @param kind Kind of the scheduled action.
         * 
         * @return builder
         * 
         */
        public Builder kind(Either<String,ScheduledActionKind> kind) {
            return kind(Output.of(kind));
        }

        /**
         * @param kind Kind of the scheduled action.
         * 
         * @return builder
         * 
         */
        public Builder kind(String kind) {
            return kind(Either.ofLeft(kind));
        }

        /**
         * @param kind Kind of the scheduled action.
         * 
         * @return builder
         * 
         */
        public Builder kind(ScheduledActionKind kind) {
            return kind(Either.ofRight(kind));
        }

        /**
         * @param name Scheduled action name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Scheduled action name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param notification Notification properties based on scheduled action kind.
         * 
         * @return builder
         * 
         */
        public Builder notification(Output<NotificationPropertiesArgs> notification) {
            $.notification = notification;
            return this;
        }

        /**
         * @param notification Notification properties based on scheduled action kind.
         * 
         * @return builder
         * 
         */
        public Builder notification(NotificationPropertiesArgs notification) {
            return notification(Output.of(notification));
        }

        /**
         * @param schedule Schedule of the scheduled action.
         * 
         * @return builder
         * 
         */
        public Builder schedule(Output<SchedulePropertiesArgs> schedule) {
            $.schedule = schedule;
            return this;
        }

        /**
         * @param schedule Schedule of the scheduled action.
         * 
         * @return builder
         * 
         */
        public Builder schedule(SchedulePropertiesArgs schedule) {
            return schedule(Output.of(schedule));
        }

        /**
         * @param scope Cost Management scope like &#39;subscriptions/{subscriptionId}&#39; for subscription scope, &#39;subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&#39; for resourceGroup scope, &#39;providers/Microsoft.Billing/billingAccounts/{billingAccountId}&#39; for Billing Account scope, &#39;providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}&#39; for Department scope, &#39;providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}&#39; for EnrollmentAccount scope, &#39;providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}&#39; for BillingProfile scope, &#39;providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}&#39; for InvoiceSection scope, &#39;/providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}&#39; for ExternalBillingAccount scope, and &#39;/providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}&#39; for ExternalSubscription scope.
         * 
         * @return builder
         * 
         */
        public Builder scope(Output<String> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope Cost Management scope like &#39;subscriptions/{subscriptionId}&#39; for subscription scope, &#39;subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&#39; for resourceGroup scope, &#39;providers/Microsoft.Billing/billingAccounts/{billingAccountId}&#39; for Billing Account scope, &#39;providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}&#39; for Department scope, &#39;providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}&#39; for EnrollmentAccount scope, &#39;providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}&#39; for BillingProfile scope, &#39;providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}&#39; for InvoiceSection scope, &#39;/providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}&#39; for ExternalBillingAccount scope, and &#39;/providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}&#39; for ExternalSubscription scope.
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        /**
         * @param status Status of the scheduled action.
         * 
         * @return builder
         * 
         */
        public Builder status(Output<Either<String,ScheduledActionStatus>> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Status of the scheduled action.
         * 
         * @return builder
         * 
         */
        public Builder status(Either<String,ScheduledActionStatus> status) {
            return status(Output.of(status));
        }

        /**
         * @param status Status of the scheduled action.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Either.ofLeft(status));
        }

        /**
         * @param status Status of the scheduled action.
         * 
         * @return builder
         * 
         */
        public Builder status(ScheduledActionStatus status) {
            return status(Either.ofRight(status));
        }

        /**
         * @param viewId Cost analysis viewId used for scheduled action. For example, &#39;/providers/Microsoft.CostManagement/views/swaggerExample&#39;
         * 
         * @return builder
         * 
         */
        public Builder viewId(Output<String> viewId) {
            $.viewId = viewId;
            return this;
        }

        /**
         * @param viewId Cost analysis viewId used for scheduled action. For example, &#39;/providers/Microsoft.CostManagement/views/swaggerExample&#39;
         * 
         * @return builder
         * 
         */
        public Builder viewId(String viewId) {
            return viewId(Output.of(viewId));
        }

        public ScheduledActionByScopeArgs build() {
            $.displayName = Objects.requireNonNull($.displayName, "expected parameter 'displayName' to be non-null");
            $.notification = Objects.requireNonNull($.notification, "expected parameter 'notification' to be non-null");
            $.schedule = Objects.requireNonNull($.schedule, "expected parameter 'schedule' to be non-null");
            $.scope = Objects.requireNonNull($.scope, "expected parameter 'scope' to be non-null");
            $.status = Objects.requireNonNull($.status, "expected parameter 'status' to be non-null");
            $.viewId = Objects.requireNonNull($.viewId, "expected parameter 'viewId' to be non-null");
            return $;
        }
    }

}
