// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Route Filter Rule Resource.
 * 
 */
public final class RouteFilterRuleResponse extends com.pulumi.resources.InvokeArgs {

    public static final RouteFilterRuleResponse Empty = new RouteFilterRuleResponse();

    /**
     * The access type of the rule.
     * 
     */
    @Import(name="access", required=true)
    private String access;

    /**
     * @return The access type of the rule.
     * 
     */
    public String access() {
        return this.access;
    }

    /**
     * The collection for bgp community values to filter on. e.g. [&#39;12076:5010&#39;,&#39;12076:5020&#39;].
     * 
     */
    @Import(name="communities", required=true)
    private List<String> communities;

    /**
     * @return The collection for bgp community values to filter on. e.g. [&#39;12076:5010&#39;,&#39;12076:5020&#39;].
     * 
     */
    public List<String> communities() {
        return this.communities;
    }

    /**
     * A unique read-only string that changes whenever the resource is updated.
     * 
     */
    @Import(name="etag", required=true)
    private String etag;

    /**
     * @return A unique read-only string that changes whenever the resource is updated.
     * 
     */
    public String etag() {
        return this.etag;
    }

    /**
     * Resource ID.
     * 
     */
    @Import(name="id")
    private @Nullable String id;

    /**
     * @return Resource ID.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Resource location.
     * 
     */
    @Import(name="location")
    private @Nullable String location;

    /**
     * @return Resource location.
     * 
     */
    public Optional<String> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name of the resource that is unique within a resource group. This name can be used to access the resource.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return The name of the resource that is unique within a resource group. This name can be used to access the resource.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The provisioning state of the route filter rule resource.
     * 
     */
    @Import(name="provisioningState", required=true)
    private String provisioningState;

    /**
     * @return The provisioning state of the route filter rule resource.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * The rule type of the rule.
     * 
     */
    @Import(name="routeFilterRuleType", required=true)
    private String routeFilterRuleType;

    /**
     * @return The rule type of the rule.
     * 
     */
    public String routeFilterRuleType() {
        return this.routeFilterRuleType;
    }

    private RouteFilterRuleResponse() {}

    private RouteFilterRuleResponse(RouteFilterRuleResponse $) {
        this.access = $.access;
        this.communities = $.communities;
        this.etag = $.etag;
        this.id = $.id;
        this.location = $.location;
        this.name = $.name;
        this.provisioningState = $.provisioningState;
        this.routeFilterRuleType = $.routeFilterRuleType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RouteFilterRuleResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RouteFilterRuleResponse $;

        public Builder() {
            $ = new RouteFilterRuleResponse();
        }

        public Builder(RouteFilterRuleResponse defaults) {
            $ = new RouteFilterRuleResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param access The access type of the rule.
         * 
         * @return builder
         * 
         */
        public Builder access(String access) {
            $.access = access;
            return this;
        }

        /**
         * @param communities The collection for bgp community values to filter on. e.g. [&#39;12076:5010&#39;,&#39;12076:5020&#39;].
         * 
         * @return builder
         * 
         */
        public Builder communities(List<String> communities) {
            $.communities = communities;
            return this;
        }

        /**
         * @param communities The collection for bgp community values to filter on. e.g. [&#39;12076:5010&#39;,&#39;12076:5020&#39;].
         * 
         * @return builder
         * 
         */
        public Builder communities(String... communities) {
            return communities(List.of(communities));
        }

        /**
         * @param etag A unique read-only string that changes whenever the resource is updated.
         * 
         * @return builder
         * 
         */
        public Builder etag(String etag) {
            $.etag = etag;
            return this;
        }

        /**
         * @param id Resource ID.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable String id) {
            $.id = id;
            return this;
        }

        /**
         * @param location Resource location.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable String location) {
            $.location = location;
            return this;
        }

        /**
         * @param name The name of the resource that is unique within a resource group. This name can be used to access the resource.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param provisioningState The provisioning state of the route filter rule resource.
         * 
         * @return builder
         * 
         */
        public Builder provisioningState(String provisioningState) {
            $.provisioningState = provisioningState;
            return this;
        }

        /**
         * @param routeFilterRuleType The rule type of the rule.
         * 
         * @return builder
         * 
         */
        public Builder routeFilterRuleType(String routeFilterRuleType) {
            $.routeFilterRuleType = routeFilterRuleType;
            return this;
        }

        public RouteFilterRuleResponse build() {
            $.access = Objects.requireNonNull($.access, "expected parameter 'access' to be non-null");
            $.communities = Objects.requireNonNull($.communities, "expected parameter 'communities' to be non-null");
            $.etag = Objects.requireNonNull($.etag, "expected parameter 'etag' to be non-null");
            $.provisioningState = Objects.requireNonNull($.provisioningState, "expected parameter 'provisioningState' to be non-null");
            $.routeFilterRuleType = Objects.requireNonNull($.routeFilterRuleType, "expected parameter 'routeFilterRuleType' to be non-null");
            return $;
        }
    }

}
