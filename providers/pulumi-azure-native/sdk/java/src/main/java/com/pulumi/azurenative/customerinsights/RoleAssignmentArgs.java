// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.customerinsights;

import com.pulumi.azurenative.customerinsights.enums.RoleTypes;
import com.pulumi.azurenative.customerinsights.inputs.AssignmentPrincipalArgs;
import com.pulumi.azurenative.customerinsights.inputs.ResourceSetDescriptionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class RoleAssignmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final RoleAssignmentArgs Empty = new RoleAssignmentArgs();

    /**
     * The assignment name
     * 
     */
    @Import(name="assignmentName")
      private final @Nullable Output<String> assignmentName;

    public Output<String> assignmentName() {
        return this.assignmentName == null ? Codegen.empty() : this.assignmentName;
    }

    /**
     * Widget types set for the assignment.
     * 
     */
    @Import(name="conflationPolicies")
      private final @Nullable Output<ResourceSetDescriptionArgs> conflationPolicies;

    public Output<ResourceSetDescriptionArgs> conflationPolicies() {
        return this.conflationPolicies == null ? Codegen.empty() : this.conflationPolicies;
    }

    /**
     * Connectors set for the assignment.
     * 
     */
    @Import(name="connectors")
      private final @Nullable Output<ResourceSetDescriptionArgs> connectors;

    public Output<ResourceSetDescriptionArgs> connectors() {
        return this.connectors == null ? Codegen.empty() : this.connectors;
    }

    /**
     * Localized description for the metadata.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<Map<String,String>> description;

    public Output<Map<String,String>> description() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * Localized display names for the metadata.
     * 
     */
    @Import(name="displayName")
      private final @Nullable Output<Map<String,String>> displayName;

    public Output<Map<String,String>> displayName() {
        return this.displayName == null ? Codegen.empty() : this.displayName;
    }

    /**
     * The name of the hub.
     * 
     */
    @Import(name="hubName", required=true)
      private final Output<String> hubName;

    public Output<String> hubName() {
        return this.hubName;
    }

    /**
     * Interactions set for the assignment.
     * 
     */
    @Import(name="interactions")
      private final @Nullable Output<ResourceSetDescriptionArgs> interactions;

    public Output<ResourceSetDescriptionArgs> interactions() {
        return this.interactions == null ? Codegen.empty() : this.interactions;
    }

    /**
     * Kpis set for the assignment.
     * 
     */
    @Import(name="kpis")
      private final @Nullable Output<ResourceSetDescriptionArgs> kpis;

    public Output<ResourceSetDescriptionArgs> kpis() {
        return this.kpis == null ? Codegen.empty() : this.kpis;
    }

    /**
     * Links set for the assignment.
     * 
     */
    @Import(name="links")
      private final @Nullable Output<ResourceSetDescriptionArgs> links;

    public Output<ResourceSetDescriptionArgs> links() {
        return this.links == null ? Codegen.empty() : this.links;
    }

    /**
     * The principals being assigned to.
     * 
     */
    @Import(name="principals", required=true)
      private final Output<List<AssignmentPrincipalArgs>> principals;

    public Output<List<AssignmentPrincipalArgs>> principals() {
        return this.principals;
    }

    /**
     * Profiles set for the assignment.
     * 
     */
    @Import(name="profiles")
      private final @Nullable Output<ResourceSetDescriptionArgs> profiles;

    public Output<ResourceSetDescriptionArgs> profiles() {
        return this.profiles == null ? Codegen.empty() : this.profiles;
    }

    /**
     * The Role assignments set for the relationship links.
     * 
     */
    @Import(name="relationshipLinks")
      private final @Nullable Output<ResourceSetDescriptionArgs> relationshipLinks;

    public Output<ResourceSetDescriptionArgs> relationshipLinks() {
        return this.relationshipLinks == null ? Codegen.empty() : this.relationshipLinks;
    }

    /**
     * The Role assignments set for the relationships.
     * 
     */
    @Import(name="relationships")
      private final @Nullable Output<ResourceSetDescriptionArgs> relationships;

    public Output<ResourceSetDescriptionArgs> relationships() {
        return this.relationships == null ? Codegen.empty() : this.relationships;
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Type of roles.
     * 
     */
    @Import(name="role", required=true)
      private final Output<RoleTypes> role;

    public Output<RoleTypes> role() {
        return this.role;
    }

    /**
     * The Role assignments set for the assignment.
     * 
     */
    @Import(name="roleAssignments")
      private final @Nullable Output<ResourceSetDescriptionArgs> roleAssignments;

    public Output<ResourceSetDescriptionArgs> roleAssignments() {
        return this.roleAssignments == null ? Codegen.empty() : this.roleAssignments;
    }

    /**
     * Sas Policies set for the assignment.
     * 
     */
    @Import(name="sasPolicies")
      private final @Nullable Output<ResourceSetDescriptionArgs> sasPolicies;

    public Output<ResourceSetDescriptionArgs> sasPolicies() {
        return this.sasPolicies == null ? Codegen.empty() : this.sasPolicies;
    }

    /**
     * The Role assignments set for the assignment.
     * 
     */
    @Import(name="segments")
      private final @Nullable Output<ResourceSetDescriptionArgs> segments;

    public Output<ResourceSetDescriptionArgs> segments() {
        return this.segments == null ? Codegen.empty() : this.segments;
    }

    /**
     * Views set for the assignment.
     * 
     */
    @Import(name="views")
      private final @Nullable Output<ResourceSetDescriptionArgs> views;

    public Output<ResourceSetDescriptionArgs> views() {
        return this.views == null ? Codegen.empty() : this.views;
    }

    /**
     * Widget types set for the assignment.
     * 
     */
    @Import(name="widgetTypes")
      private final @Nullable Output<ResourceSetDescriptionArgs> widgetTypes;

    public Output<ResourceSetDescriptionArgs> widgetTypes() {
        return this.widgetTypes == null ? Codegen.empty() : this.widgetTypes;
    }

    public RoleAssignmentArgs(
        @Nullable Output<String> assignmentName,
        @Nullable Output<ResourceSetDescriptionArgs> conflationPolicies,
        @Nullable Output<ResourceSetDescriptionArgs> connectors,
        @Nullable Output<Map<String,String>> description,
        @Nullable Output<Map<String,String>> displayName,
        Output<String> hubName,
        @Nullable Output<ResourceSetDescriptionArgs> interactions,
        @Nullable Output<ResourceSetDescriptionArgs> kpis,
        @Nullable Output<ResourceSetDescriptionArgs> links,
        Output<List<AssignmentPrincipalArgs>> principals,
        @Nullable Output<ResourceSetDescriptionArgs> profiles,
        @Nullable Output<ResourceSetDescriptionArgs> relationshipLinks,
        @Nullable Output<ResourceSetDescriptionArgs> relationships,
        Output<String> resourceGroupName,
        Output<RoleTypes> role,
        @Nullable Output<ResourceSetDescriptionArgs> roleAssignments,
        @Nullable Output<ResourceSetDescriptionArgs> sasPolicies,
        @Nullable Output<ResourceSetDescriptionArgs> segments,
        @Nullable Output<ResourceSetDescriptionArgs> views,
        @Nullable Output<ResourceSetDescriptionArgs> widgetTypes) {
        this.assignmentName = assignmentName;
        this.conflationPolicies = conflationPolicies;
        this.connectors = connectors;
        this.description = description;
        this.displayName = displayName;
        this.hubName = Objects.requireNonNull(hubName, "expected parameter 'hubName' to be non-null");
        this.interactions = interactions;
        this.kpis = kpis;
        this.links = links;
        this.principals = Objects.requireNonNull(principals, "expected parameter 'principals' to be non-null");
        this.profiles = profiles;
        this.relationshipLinks = relationshipLinks;
        this.relationships = relationships;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.role = Objects.requireNonNull(role, "expected parameter 'role' to be non-null");
        this.roleAssignments = roleAssignments;
        this.sasPolicies = sasPolicies;
        this.segments = segments;
        this.views = views;
        this.widgetTypes = widgetTypes;
    }

    private RoleAssignmentArgs() {
        this.assignmentName = Codegen.empty();
        this.conflationPolicies = Codegen.empty();
        this.connectors = Codegen.empty();
        this.description = Codegen.empty();
        this.displayName = Codegen.empty();
        this.hubName = Codegen.empty();
        this.interactions = Codegen.empty();
        this.kpis = Codegen.empty();
        this.links = Codegen.empty();
        this.principals = Codegen.empty();
        this.profiles = Codegen.empty();
        this.relationshipLinks = Codegen.empty();
        this.relationships = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.role = Codegen.empty();
        this.roleAssignments = Codegen.empty();
        this.sasPolicies = Codegen.empty();
        this.segments = Codegen.empty();
        this.views = Codegen.empty();
        this.widgetTypes = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RoleAssignmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> assignmentName;
        private @Nullable Output<ResourceSetDescriptionArgs> conflationPolicies;
        private @Nullable Output<ResourceSetDescriptionArgs> connectors;
        private @Nullable Output<Map<String,String>> description;
        private @Nullable Output<Map<String,String>> displayName;
        private Output<String> hubName;
        private @Nullable Output<ResourceSetDescriptionArgs> interactions;
        private @Nullable Output<ResourceSetDescriptionArgs> kpis;
        private @Nullable Output<ResourceSetDescriptionArgs> links;
        private Output<List<AssignmentPrincipalArgs>> principals;
        private @Nullable Output<ResourceSetDescriptionArgs> profiles;
        private @Nullable Output<ResourceSetDescriptionArgs> relationshipLinks;
        private @Nullable Output<ResourceSetDescriptionArgs> relationships;
        private Output<String> resourceGroupName;
        private Output<RoleTypes> role;
        private @Nullable Output<ResourceSetDescriptionArgs> roleAssignments;
        private @Nullable Output<ResourceSetDescriptionArgs> sasPolicies;
        private @Nullable Output<ResourceSetDescriptionArgs> segments;
        private @Nullable Output<ResourceSetDescriptionArgs> views;
        private @Nullable Output<ResourceSetDescriptionArgs> widgetTypes;

        public Builder() {
    	      // Empty
        }

        public Builder(RoleAssignmentArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.assignmentName = defaults.assignmentName;
    	      this.conflationPolicies = defaults.conflationPolicies;
    	      this.connectors = defaults.connectors;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.hubName = defaults.hubName;
    	      this.interactions = defaults.interactions;
    	      this.kpis = defaults.kpis;
    	      this.links = defaults.links;
    	      this.principals = defaults.principals;
    	      this.profiles = defaults.profiles;
    	      this.relationshipLinks = defaults.relationshipLinks;
    	      this.relationships = defaults.relationships;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.role = defaults.role;
    	      this.roleAssignments = defaults.roleAssignments;
    	      this.sasPolicies = defaults.sasPolicies;
    	      this.segments = defaults.segments;
    	      this.views = defaults.views;
    	      this.widgetTypes = defaults.widgetTypes;
        }

        public Builder assignmentName(@Nullable Output<String> assignmentName) {
            this.assignmentName = assignmentName;
            return this;
        }
        public Builder assignmentName(@Nullable String assignmentName) {
            this.assignmentName = Codegen.ofNullable(assignmentName);
            return this;
        }
        public Builder conflationPolicies(@Nullable Output<ResourceSetDescriptionArgs> conflationPolicies) {
            this.conflationPolicies = conflationPolicies;
            return this;
        }
        public Builder conflationPolicies(@Nullable ResourceSetDescriptionArgs conflationPolicies) {
            this.conflationPolicies = Codegen.ofNullable(conflationPolicies);
            return this;
        }
        public Builder connectors(@Nullable Output<ResourceSetDescriptionArgs> connectors) {
            this.connectors = connectors;
            return this;
        }
        public Builder connectors(@Nullable ResourceSetDescriptionArgs connectors) {
            this.connectors = Codegen.ofNullable(connectors);
            return this;
        }
        public Builder description(@Nullable Output<Map<String,String>> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable Map<String,String> description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder displayName(@Nullable Output<Map<String,String>> displayName) {
            this.displayName = displayName;
            return this;
        }
        public Builder displayName(@Nullable Map<String,String> displayName) {
            this.displayName = Codegen.ofNullable(displayName);
            return this;
        }
        public Builder hubName(Output<String> hubName) {
            this.hubName = Objects.requireNonNull(hubName);
            return this;
        }
        public Builder hubName(String hubName) {
            this.hubName = Output.of(Objects.requireNonNull(hubName));
            return this;
        }
        public Builder interactions(@Nullable Output<ResourceSetDescriptionArgs> interactions) {
            this.interactions = interactions;
            return this;
        }
        public Builder interactions(@Nullable ResourceSetDescriptionArgs interactions) {
            this.interactions = Codegen.ofNullable(interactions);
            return this;
        }
        public Builder kpis(@Nullable Output<ResourceSetDescriptionArgs> kpis) {
            this.kpis = kpis;
            return this;
        }
        public Builder kpis(@Nullable ResourceSetDescriptionArgs kpis) {
            this.kpis = Codegen.ofNullable(kpis);
            return this;
        }
        public Builder links(@Nullable Output<ResourceSetDescriptionArgs> links) {
            this.links = links;
            return this;
        }
        public Builder links(@Nullable ResourceSetDescriptionArgs links) {
            this.links = Codegen.ofNullable(links);
            return this;
        }
        public Builder principals(Output<List<AssignmentPrincipalArgs>> principals) {
            this.principals = Objects.requireNonNull(principals);
            return this;
        }
        public Builder principals(List<AssignmentPrincipalArgs> principals) {
            this.principals = Output.of(Objects.requireNonNull(principals));
            return this;
        }
        public Builder principals(AssignmentPrincipalArgs... principals) {
            return principals(List.of(principals));
        }
        public Builder profiles(@Nullable Output<ResourceSetDescriptionArgs> profiles) {
            this.profiles = profiles;
            return this;
        }
        public Builder profiles(@Nullable ResourceSetDescriptionArgs profiles) {
            this.profiles = Codegen.ofNullable(profiles);
            return this;
        }
        public Builder relationshipLinks(@Nullable Output<ResourceSetDescriptionArgs> relationshipLinks) {
            this.relationshipLinks = relationshipLinks;
            return this;
        }
        public Builder relationshipLinks(@Nullable ResourceSetDescriptionArgs relationshipLinks) {
            this.relationshipLinks = Codegen.ofNullable(relationshipLinks);
            return this;
        }
        public Builder relationships(@Nullable Output<ResourceSetDescriptionArgs> relationships) {
            this.relationships = relationships;
            return this;
        }
        public Builder relationships(@Nullable ResourceSetDescriptionArgs relationships) {
            this.relationships = Codegen.ofNullable(relationships);
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder role(Output<RoleTypes> role) {
            this.role = Objects.requireNonNull(role);
            return this;
        }
        public Builder role(RoleTypes role) {
            this.role = Output.of(Objects.requireNonNull(role));
            return this;
        }
        public Builder roleAssignments(@Nullable Output<ResourceSetDescriptionArgs> roleAssignments) {
            this.roleAssignments = roleAssignments;
            return this;
        }
        public Builder roleAssignments(@Nullable ResourceSetDescriptionArgs roleAssignments) {
            this.roleAssignments = Codegen.ofNullable(roleAssignments);
            return this;
        }
        public Builder sasPolicies(@Nullable Output<ResourceSetDescriptionArgs> sasPolicies) {
            this.sasPolicies = sasPolicies;
            return this;
        }
        public Builder sasPolicies(@Nullable ResourceSetDescriptionArgs sasPolicies) {
            this.sasPolicies = Codegen.ofNullable(sasPolicies);
            return this;
        }
        public Builder segments(@Nullable Output<ResourceSetDescriptionArgs> segments) {
            this.segments = segments;
            return this;
        }
        public Builder segments(@Nullable ResourceSetDescriptionArgs segments) {
            this.segments = Codegen.ofNullable(segments);
            return this;
        }
        public Builder views(@Nullable Output<ResourceSetDescriptionArgs> views) {
            this.views = views;
            return this;
        }
        public Builder views(@Nullable ResourceSetDescriptionArgs views) {
            this.views = Codegen.ofNullable(views);
            return this;
        }
        public Builder widgetTypes(@Nullable Output<ResourceSetDescriptionArgs> widgetTypes) {
            this.widgetTypes = widgetTypes;
            return this;
        }
        public Builder widgetTypes(@Nullable ResourceSetDescriptionArgs widgetTypes) {
            this.widgetTypes = Codegen.ofNullable(widgetTypes);
            return this;
        }        public RoleAssignmentArgs build() {
            return new RoleAssignmentArgs(assignmentName, conflationPolicies, connectors, description, displayName, hubName, interactions, kpis, links, principals, profiles, relationshipLinks, relationships, resourceGroupName, role, roleAssignments, sasPolicies, segments, views, widgetTypes);
        }
    }
}
