// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.sql.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;


/**
 * Contains time series of various impacted metrics for an Azure SQL Database, Server or Elastic Pool Recommended Action.
 * 
 */
public final class RecommendedActionMetricInfoResponse extends com.pulumi.resources.InvokeArgs {

    public static final RecommendedActionMetricInfoResponse Empty = new RecommendedActionMetricInfoResponse();

    /**
     * Gets the name of the metric. e.g., CPU, Number of Queries.
     * 
     */
    @Import(name="metricName", required=true)
    private String metricName;

    /**
     * @return Gets the name of the metric. e.g., CPU, Number of Queries.
     * 
     */
    public String metricName() {
        return this.metricName;
    }

    /**
     * Gets the start time of time interval given by this MetricInfo.
     * 
     */
    @Import(name="startTime", required=true)
    private String startTime;

    /**
     * @return Gets the start time of time interval given by this MetricInfo.
     * 
     */
    public String startTime() {
        return this.startTime;
    }

    /**
     * Gets the duration of time interval for the value given by this MetricInfo. e.g., PT1H (1 hour)
     * 
     */
    @Import(name="timeGrain", required=true)
    private String timeGrain;

    /**
     * @return Gets the duration of time interval for the value given by this MetricInfo. e.g., PT1H (1 hour)
     * 
     */
    public String timeGrain() {
        return this.timeGrain;
    }

    /**
     * Gets the unit in which metric is measured. e.g., DTU, Frequency
     * 
     */
    @Import(name="unit", required=true)
    private String unit;

    /**
     * @return Gets the unit in which metric is measured. e.g., DTU, Frequency
     * 
     */
    public String unit() {
        return this.unit;
    }

    /**
     * Gets the value of the metric in the time interval given by this MetricInfo.
     * 
     */
    @Import(name="value", required=true)
    private Double value;

    /**
     * @return Gets the value of the metric in the time interval given by this MetricInfo.
     * 
     */
    public Double value() {
        return this.value;
    }

    private RecommendedActionMetricInfoResponse() {}

    private RecommendedActionMetricInfoResponse(RecommendedActionMetricInfoResponse $) {
        this.metricName = $.metricName;
        this.startTime = $.startTime;
        this.timeGrain = $.timeGrain;
        this.unit = $.unit;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RecommendedActionMetricInfoResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RecommendedActionMetricInfoResponse $;

        public Builder() {
            $ = new RecommendedActionMetricInfoResponse();
        }

        public Builder(RecommendedActionMetricInfoResponse defaults) {
            $ = new RecommendedActionMetricInfoResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param metricName Gets the name of the metric. e.g., CPU, Number of Queries.
         * 
         * @return builder
         * 
         */
        public Builder metricName(String metricName) {
            $.metricName = metricName;
            return this;
        }

        /**
         * @param startTime Gets the start time of time interval given by this MetricInfo.
         * 
         * @return builder
         * 
         */
        public Builder startTime(String startTime) {
            $.startTime = startTime;
            return this;
        }

        /**
         * @param timeGrain Gets the duration of time interval for the value given by this MetricInfo. e.g., PT1H (1 hour)
         * 
         * @return builder
         * 
         */
        public Builder timeGrain(String timeGrain) {
            $.timeGrain = timeGrain;
            return this;
        }

        /**
         * @param unit Gets the unit in which metric is measured. e.g., DTU, Frequency
         * 
         * @return builder
         * 
         */
        public Builder unit(String unit) {
            $.unit = unit;
            return this;
        }

        /**
         * @param value Gets the value of the metric in the time interval given by this MetricInfo.
         * 
         * @return builder
         * 
         */
        public Builder value(Double value) {
            $.value = value;
            return this;
        }

        public RecommendedActionMetricInfoResponse build() {
            $.metricName = Objects.requireNonNull($.metricName, "expected parameter 'metricName' to be non-null");
            $.startTime = Objects.requireNonNull($.startTime, "expected parameter 'startTime' to be non-null");
            $.timeGrain = Objects.requireNonNull($.timeGrain, "expected parameter 'timeGrain' to be non-null");
            $.unit = Objects.requireNonNull($.unit, "expected parameter 'unit' to be non-null");
            $.value = Objects.requireNonNull($.value, "expected parameter 'value' to be non-null");
            return $;
        }
    }

}
