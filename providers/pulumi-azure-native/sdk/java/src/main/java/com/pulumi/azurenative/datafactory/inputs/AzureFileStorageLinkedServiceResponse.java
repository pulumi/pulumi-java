// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.azurenative.datafactory.inputs.AzureKeyVaultSecretReferenceResponse;
import com.pulumi.azurenative.datafactory.inputs.IntegrationRuntimeReferenceResponse;
import com.pulumi.azurenative.datafactory.inputs.ParameterSpecificationResponse;
import com.pulumi.azurenative.datafactory.inputs.SecureStringResponse;
import com.pulumi.core.Either;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Azure File Storage linked service.
 * 
 */
public final class AzureFileStorageLinkedServiceResponse extends com.pulumi.resources.InvokeArgs {

    public static final AzureFileStorageLinkedServiceResponse Empty = new AzureFileStorageLinkedServiceResponse();

    /**
     * The Azure key vault secret reference of accountKey in connection string.
     * 
     */
    @Import(name="accountKey")
    private @Nullable AzureKeyVaultSecretReferenceResponse accountKey;

    public Optional<AzureKeyVaultSecretReferenceResponse> accountKey() {
        return Optional.ofNullable(this.accountKey);
    }

    /**
     * List of tags that can be used for describing the linked service.
     * 
     */
    @Import(name="annotations")
    private @Nullable List<Object> annotations;

    public Optional<List<Object>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    /**
     * The integration runtime reference.
     * 
     */
    @Import(name="connectVia")
    private @Nullable IntegrationRuntimeReferenceResponse connectVia;

    public Optional<IntegrationRuntimeReferenceResponse> connectVia() {
        return Optional.ofNullable(this.connectVia);
    }

    /**
     * The connection string. It is mutually exclusive with sasUri property. Type: string, SecureString or AzureKeyVaultSecretReference.
     * 
     */
    @Import(name="connectionString")
    private @Nullable Object connectionString;

    public Optional<Object> connectionString() {
        return Optional.ofNullable(this.connectionString);
    }

    /**
     * Linked service description.
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="encryptedCredential")
    private @Nullable Object encryptedCredential;

    public Optional<Object> encryptedCredential() {
        return Optional.ofNullable(this.encryptedCredential);
    }

    /**
     * The azure file share name. It is required when auth with accountKey/sasToken. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="fileShare")
    private @Nullable Object fileShare;

    public Optional<Object> fileShare() {
        return Optional.ofNullable(this.fileShare);
    }

    /**
     * Host name of the server. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="host")
    private @Nullable Object host;

    public Optional<Object> host() {
        return Optional.ofNullable(this.host);
    }

    /**
     * Parameters for linked service.
     * 
     */
    @Import(name="parameters")
    private @Nullable Map<String,ParameterSpecificationResponse> parameters;

    public Optional<Map<String,ParameterSpecificationResponse>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    /**
     * Password to logon the server.
     * 
     */
    @Import(name="password")
    private @Nullable Either<AzureKeyVaultSecretReferenceResponse,SecureStringResponse> password;

    public Optional<Either<AzureKeyVaultSecretReferenceResponse,SecureStringResponse>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * The Azure key vault secret reference of sasToken in sas uri.
     * 
     */
    @Import(name="sasToken")
    private @Nullable AzureKeyVaultSecretReferenceResponse sasToken;

    public Optional<AzureKeyVaultSecretReferenceResponse> sasToken() {
        return Optional.ofNullable(this.sasToken);
    }

    /**
     * SAS URI of the Azure File resource. It is mutually exclusive with connectionString property. Type: string, SecureString or AzureKeyVaultSecretReference.
     * 
     */
    @Import(name="sasUri")
    private @Nullable Object sasUri;

    public Optional<Object> sasUri() {
        return Optional.ofNullable(this.sasUri);
    }

    /**
     * The azure file share snapshot version. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="snapshot")
    private @Nullable Object snapshot;

    public Optional<Object> snapshot() {
        return Optional.ofNullable(this.snapshot);
    }

    /**
     * Type of linked service.
     * Expected value is &#39;AzureFileStorage&#39;.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    public String type() {
        return this.type;
    }

    /**
     * User ID to logon the server. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="userId")
    private @Nullable Object userId;

    public Optional<Object> userId() {
        return Optional.ofNullable(this.userId);
    }

    private AzureFileStorageLinkedServiceResponse() {}

    private AzureFileStorageLinkedServiceResponse(AzureFileStorageLinkedServiceResponse $) {
        this.accountKey = $.accountKey;
        this.annotations = $.annotations;
        this.connectVia = $.connectVia;
        this.connectionString = $.connectionString;
        this.description = $.description;
        this.encryptedCredential = $.encryptedCredential;
        this.fileShare = $.fileShare;
        this.host = $.host;
        this.parameters = $.parameters;
        this.password = $.password;
        this.sasToken = $.sasToken;
        this.sasUri = $.sasUri;
        this.snapshot = $.snapshot;
        this.type = $.type;
        this.userId = $.userId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AzureFileStorageLinkedServiceResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AzureFileStorageLinkedServiceResponse $;

        public Builder() {
            $ = new AzureFileStorageLinkedServiceResponse();
        }

        public Builder(AzureFileStorageLinkedServiceResponse defaults) {
            $ = new AzureFileStorageLinkedServiceResponse(Objects.requireNonNull(defaults));
        }

        public Builder accountKey(@Nullable AzureKeyVaultSecretReferenceResponse accountKey) {
            $.accountKey = accountKey;
            return this;
        }

        public Builder annotations(@Nullable List<Object> annotations) {
            $.annotations = annotations;
            return this;
        }

        public Builder annotations(Object... annotations) {
            return annotations(List.of(annotations));
        }

        public Builder connectVia(@Nullable IntegrationRuntimeReferenceResponse connectVia) {
            $.connectVia = connectVia;
            return this;
        }

        public Builder connectionString(@Nullable Object connectionString) {
            $.connectionString = connectionString;
            return this;
        }

        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        public Builder encryptedCredential(@Nullable Object encryptedCredential) {
            $.encryptedCredential = encryptedCredential;
            return this;
        }

        public Builder fileShare(@Nullable Object fileShare) {
            $.fileShare = fileShare;
            return this;
        }

        public Builder host(@Nullable Object host) {
            $.host = host;
            return this;
        }

        public Builder parameters(@Nullable Map<String,ParameterSpecificationResponse> parameters) {
            $.parameters = parameters;
            return this;
        }

        public Builder password(@Nullable Either<AzureKeyVaultSecretReferenceResponse,SecureStringResponse> password) {
            $.password = password;
            return this;
        }

        public Builder sasToken(@Nullable AzureKeyVaultSecretReferenceResponse sasToken) {
            $.sasToken = sasToken;
            return this;
        }

        public Builder sasUri(@Nullable Object sasUri) {
            $.sasUri = sasUri;
            return this;
        }

        public Builder snapshot(@Nullable Object snapshot) {
            $.snapshot = snapshot;
            return this;
        }

        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public Builder userId(@Nullable Object userId) {
            $.userId = userId;
            return this;
        }

        public AzureFileStorageLinkedServiceResponse build() {
            $.type = Codegen.stringProp("type").arg($.type).require();
            return $;
        }
    }

}
