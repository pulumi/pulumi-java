// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.storsimple;

import com.pulumi.azurenative.storsimple.enums.Kind;
import com.pulumi.azurenative.storsimple.enums.SslStatus;
import com.pulumi.azurenative.storsimple.inputs.AsymmetricEncryptedSecretArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StorageAccountCredentialArgs extends com.pulumi.resources.ResourceArgs {

    public static final StorageAccountCredentialArgs Empty = new StorageAccountCredentialArgs();

    /**
     * The details of the storage account password.
     * 
     */
    @Import(name="accessKey")
    private @Nullable Output<AsymmetricEncryptedSecretArgs> accessKey;

    /**
     * @return The details of the storage account password.
     * 
     */
    public Optional<Output<AsymmetricEncryptedSecretArgs>> accessKey() {
        return Optional.ofNullable(this.accessKey);
    }

    /**
     * The storage endpoint
     * 
     */
    @Import(name="endPoint", required=true)
    private Output<String> endPoint;

    /**
     * @return The storage endpoint
     * 
     */
    public Output<String> endPoint() {
        return this.endPoint;
    }

    /**
     * The Kind of the object. Currently only Series8000 is supported
     * 
     */
    @Import(name="kind")
    private @Nullable Output<Kind> kind;

    /**
     * @return The Kind of the object. Currently only Series8000 is supported
     * 
     */
    public Optional<Output<Kind>> kind() {
        return Optional.ofNullable(this.kind);
    }

    /**
     * The manager name
     * 
     */
    @Import(name="managerName", required=true)
    private Output<String> managerName;

    /**
     * @return The manager name
     * 
     */
    public Output<String> managerName() {
        return this.managerName;
    }

    /**
     * The resource group name
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The resource group name
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Signifies whether SSL needs to be enabled or not.
     * 
     */
    @Import(name="sslStatus", required=true)
    private Output<SslStatus> sslStatus;

    /**
     * @return Signifies whether SSL needs to be enabled or not.
     * 
     */
    public Output<SslStatus> sslStatus() {
        return this.sslStatus;
    }

    /**
     * The storage account credential name.
     * 
     */
    @Import(name="storageAccountCredentialName")
    private @Nullable Output<String> storageAccountCredentialName;

    /**
     * @return The storage account credential name.
     * 
     */
    public Optional<Output<String>> storageAccountCredentialName() {
        return Optional.ofNullable(this.storageAccountCredentialName);
    }

    private StorageAccountCredentialArgs() {}

    private StorageAccountCredentialArgs(StorageAccountCredentialArgs $) {
        this.accessKey = $.accessKey;
        this.endPoint = $.endPoint;
        this.kind = $.kind;
        this.managerName = $.managerName;
        this.resourceGroupName = $.resourceGroupName;
        this.sslStatus = $.sslStatus;
        this.storageAccountCredentialName = $.storageAccountCredentialName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StorageAccountCredentialArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StorageAccountCredentialArgs $;

        public Builder() {
            $ = new StorageAccountCredentialArgs();
        }

        public Builder(StorageAccountCredentialArgs defaults) {
            $ = new StorageAccountCredentialArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessKey The details of the storage account password.
         * 
         * @return builder
         * 
         */
        public Builder accessKey(@Nullable Output<AsymmetricEncryptedSecretArgs> accessKey) {
            $.accessKey = accessKey;
            return this;
        }

        /**
         * @param accessKey The details of the storage account password.
         * 
         * @return builder
         * 
         */
        public Builder accessKey(AsymmetricEncryptedSecretArgs accessKey) {
            return accessKey(Output.of(accessKey));
        }

        /**
         * @param endPoint The storage endpoint
         * 
         * @return builder
         * 
         */
        public Builder endPoint(Output<String> endPoint) {
            $.endPoint = endPoint;
            return this;
        }

        /**
         * @param endPoint The storage endpoint
         * 
         * @return builder
         * 
         */
        public Builder endPoint(String endPoint) {
            return endPoint(Output.of(endPoint));
        }

        /**
         * @param kind The Kind of the object. Currently only Series8000 is supported
         * 
         * @return builder
         * 
         */
        public Builder kind(@Nullable Output<Kind> kind) {
            $.kind = kind;
            return this;
        }

        /**
         * @param kind The Kind of the object. Currently only Series8000 is supported
         * 
         * @return builder
         * 
         */
        public Builder kind(Kind kind) {
            return kind(Output.of(kind));
        }

        /**
         * @param managerName The manager name
         * 
         * @return builder
         * 
         */
        public Builder managerName(Output<String> managerName) {
            $.managerName = managerName;
            return this;
        }

        /**
         * @param managerName The manager name
         * 
         * @return builder
         * 
         */
        public Builder managerName(String managerName) {
            return managerName(Output.of(managerName));
        }

        /**
         * @param resourceGroupName The resource group name
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The resource group name
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param sslStatus Signifies whether SSL needs to be enabled or not.
         * 
         * @return builder
         * 
         */
        public Builder sslStatus(Output<SslStatus> sslStatus) {
            $.sslStatus = sslStatus;
            return this;
        }

        /**
         * @param sslStatus Signifies whether SSL needs to be enabled or not.
         * 
         * @return builder
         * 
         */
        public Builder sslStatus(SslStatus sslStatus) {
            return sslStatus(Output.of(sslStatus));
        }

        /**
         * @param storageAccountCredentialName The storage account credential name.
         * 
         * @return builder
         * 
         */
        public Builder storageAccountCredentialName(@Nullable Output<String> storageAccountCredentialName) {
            $.storageAccountCredentialName = storageAccountCredentialName;
            return this;
        }

        /**
         * @param storageAccountCredentialName The storage account credential name.
         * 
         * @return builder
         * 
         */
        public Builder storageAccountCredentialName(String storageAccountCredentialName) {
            return storageAccountCredentialName(Output.of(storageAccountCredentialName));
        }

        public StorageAccountCredentialArgs build() {
            $.endPoint = Objects.requireNonNull($.endPoint, "expected parameter 'endPoint' to be non-null");
            $.managerName = Objects.requireNonNull($.managerName, "expected parameter 'managerName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.sslStatus = Objects.requireNonNull($.sslStatus, "expected parameter 'sslStatus' to be non-null");
            return $;
        }
    }

}
