// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.logic.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The Edifact delimiter override settings.
 * 
 */
public final class EdifactDelimiterOverrideResponse extends com.pulumi.resources.InvokeArgs {

    public static final EdifactDelimiterOverrideResponse Empty = new EdifactDelimiterOverrideResponse();

    /**
     * The component separator.
     * 
     */
    @Import(name="componentSeparator", required=true)
    private Integer componentSeparator;

    public Integer componentSeparator() {
        return this.componentSeparator;
    }

    /**
     * The data element separator.
     * 
     */
    @Import(name="dataElementSeparator", required=true)
    private Integer dataElementSeparator;

    public Integer dataElementSeparator() {
        return this.dataElementSeparator;
    }

    /**
     * The decimal point indicator.
     * 
     */
    @Import(name="decimalPointIndicator", required=true)
    private String decimalPointIndicator;

    public String decimalPointIndicator() {
        return this.decimalPointIndicator;
    }

    /**
     * The message association assigned code.
     * 
     */
    @Import(name="messageAssociationAssignedCode")
    private @Nullable String messageAssociationAssignedCode;

    public Optional<String> messageAssociationAssignedCode() {
        return Optional.ofNullable(this.messageAssociationAssignedCode);
    }

    /**
     * The message id.
     * 
     */
    @Import(name="messageId")
    private @Nullable String messageId;

    public Optional<String> messageId() {
        return Optional.ofNullable(this.messageId);
    }

    /**
     * The message release.
     * 
     */
    @Import(name="messageRelease")
    private @Nullable String messageRelease;

    public Optional<String> messageRelease() {
        return Optional.ofNullable(this.messageRelease);
    }

    /**
     * The message version.
     * 
     */
    @Import(name="messageVersion")
    private @Nullable String messageVersion;

    public Optional<String> messageVersion() {
        return Optional.ofNullable(this.messageVersion);
    }

    /**
     * The release indicator.
     * 
     */
    @Import(name="releaseIndicator", required=true)
    private Integer releaseIndicator;

    public Integer releaseIndicator() {
        return this.releaseIndicator;
    }

    /**
     * The repetition separator.
     * 
     */
    @Import(name="repetitionSeparator", required=true)
    private Integer repetitionSeparator;

    public Integer repetitionSeparator() {
        return this.repetitionSeparator;
    }

    /**
     * The segment terminator.
     * 
     */
    @Import(name="segmentTerminator", required=true)
    private Integer segmentTerminator;

    public Integer segmentTerminator() {
        return this.segmentTerminator;
    }

    /**
     * The segment terminator suffix.
     * 
     */
    @Import(name="segmentTerminatorSuffix", required=true)
    private String segmentTerminatorSuffix;

    public String segmentTerminatorSuffix() {
        return this.segmentTerminatorSuffix;
    }

    /**
     * The target namespace on which this delimiter settings has to be applied.
     * 
     */
    @Import(name="targetNamespace")
    private @Nullable String targetNamespace;

    public Optional<String> targetNamespace() {
        return Optional.ofNullable(this.targetNamespace);
    }

    private EdifactDelimiterOverrideResponse() {}

    private EdifactDelimiterOverrideResponse(EdifactDelimiterOverrideResponse $) {
        this.componentSeparator = $.componentSeparator;
        this.dataElementSeparator = $.dataElementSeparator;
        this.decimalPointIndicator = $.decimalPointIndicator;
        this.messageAssociationAssignedCode = $.messageAssociationAssignedCode;
        this.messageId = $.messageId;
        this.messageRelease = $.messageRelease;
        this.messageVersion = $.messageVersion;
        this.releaseIndicator = $.releaseIndicator;
        this.repetitionSeparator = $.repetitionSeparator;
        this.segmentTerminator = $.segmentTerminator;
        this.segmentTerminatorSuffix = $.segmentTerminatorSuffix;
        this.targetNamespace = $.targetNamespace;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EdifactDelimiterOverrideResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EdifactDelimiterOverrideResponse $;

        public Builder() {
            $ = new EdifactDelimiterOverrideResponse();
        }

        public Builder(EdifactDelimiterOverrideResponse defaults) {
            $ = new EdifactDelimiterOverrideResponse(Objects.requireNonNull(defaults));
        }

        public Builder componentSeparator(Integer componentSeparator) {
            $.componentSeparator = componentSeparator;
            return this;
        }

        public Builder dataElementSeparator(Integer dataElementSeparator) {
            $.dataElementSeparator = dataElementSeparator;
            return this;
        }

        public Builder decimalPointIndicator(String decimalPointIndicator) {
            $.decimalPointIndicator = decimalPointIndicator;
            return this;
        }

        public Builder messageAssociationAssignedCode(@Nullable String messageAssociationAssignedCode) {
            $.messageAssociationAssignedCode = messageAssociationAssignedCode;
            return this;
        }

        public Builder messageId(@Nullable String messageId) {
            $.messageId = messageId;
            return this;
        }

        public Builder messageRelease(@Nullable String messageRelease) {
            $.messageRelease = messageRelease;
            return this;
        }

        public Builder messageVersion(@Nullable String messageVersion) {
            $.messageVersion = messageVersion;
            return this;
        }

        public Builder releaseIndicator(Integer releaseIndicator) {
            $.releaseIndicator = releaseIndicator;
            return this;
        }

        public Builder repetitionSeparator(Integer repetitionSeparator) {
            $.repetitionSeparator = repetitionSeparator;
            return this;
        }

        public Builder segmentTerminator(Integer segmentTerminator) {
            $.segmentTerminator = segmentTerminator;
            return this;
        }

        public Builder segmentTerminatorSuffix(String segmentTerminatorSuffix) {
            $.segmentTerminatorSuffix = segmentTerminatorSuffix;
            return this;
        }

        public Builder targetNamespace(@Nullable String targetNamespace) {
            $.targetNamespace = targetNamespace;
            return this;
        }

        public EdifactDelimiterOverrideResponse build() {
            $.componentSeparator = Objects.requireNonNull($.componentSeparator, "expected parameter 'componentSeparator' to be non-null");
            $.dataElementSeparator = Objects.requireNonNull($.dataElementSeparator, "expected parameter 'dataElementSeparator' to be non-null");
            $.decimalPointIndicator = Objects.requireNonNull($.decimalPointIndicator, "expected parameter 'decimalPointIndicator' to be non-null");
            $.releaseIndicator = Objects.requireNonNull($.releaseIndicator, "expected parameter 'releaseIndicator' to be non-null");
            $.repetitionSeparator = Objects.requireNonNull($.repetitionSeparator, "expected parameter 'repetitionSeparator' to be non-null");
            $.segmentTerminator = Objects.requireNonNull($.segmentTerminator, "expected parameter 'segmentTerminator' to be non-null");
            $.segmentTerminatorSuffix = Objects.requireNonNull($.segmentTerminatorSuffix, "expected parameter 'segmentTerminatorSuffix' to be non-null");
            return $;
        }
    }

}
