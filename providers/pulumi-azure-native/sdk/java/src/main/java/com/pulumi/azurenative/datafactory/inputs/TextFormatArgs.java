// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The data stored in text format.
 * 
 */
public final class TextFormatArgs extends com.pulumi.resources.ResourceArgs {

    public static final TextFormatArgs Empty = new TextFormatArgs();

    /**
     * The column delimiter. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="columnDelimiter")
      private final @Nullable Output<Object> columnDelimiter;

    public Output<Object> columnDelimiter() {
        return this.columnDelimiter == null ? Codegen.empty() : this.columnDelimiter;
    }

    /**
     * Deserializer. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="deserializer")
      private final @Nullable Output<Object> deserializer;

    public Output<Object> deserializer() {
        return this.deserializer == null ? Codegen.empty() : this.deserializer;
    }

    /**
     * The code page name of the preferred encoding. If miss, the default value is ΓÇ£utf-8ΓÇ¥, unless BOM denotes another Unicode encoding. Refer to the ΓÇ£NameΓÇ¥ column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="encodingName")
      private final @Nullable Output<Object> encodingName;

    public Output<Object> encodingName() {
        return this.encodingName == null ? Codegen.empty() : this.encodingName;
    }

    /**
     * The escape character. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="escapeChar")
      private final @Nullable Output<Object> escapeChar;

    public Output<Object> escapeChar() {
        return this.escapeChar == null ? Codegen.empty() : this.escapeChar;
    }

    /**
     * When used as input, treat the first row of data as headers. When used as output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or Expression with resultType boolean).
     * 
     */
    @Import(name="firstRowAsHeader")
      private final @Nullable Output<Object> firstRowAsHeader;

    public Output<Object> firstRowAsHeader() {
        return this.firstRowAsHeader == null ? Codegen.empty() : this.firstRowAsHeader;
    }

    /**
     * The null value string. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="nullValue")
      private final @Nullable Output<Object> nullValue;

    public Output<Object> nullValue() {
        return this.nullValue == null ? Codegen.empty() : this.nullValue;
    }

    /**
     * The quote character. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="quoteChar")
      private final @Nullable Output<Object> quoteChar;

    public Output<Object> quoteChar() {
        return this.quoteChar == null ? Codegen.empty() : this.quoteChar;
    }

    /**
     * The row delimiter. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="rowDelimiter")
      private final @Nullable Output<Object> rowDelimiter;

    public Output<Object> rowDelimiter() {
        return this.rowDelimiter == null ? Codegen.empty() : this.rowDelimiter;
    }

    /**
     * Serializer. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="serializer")
      private final @Nullable Output<Object> serializer;

    public Output<Object> serializer() {
        return this.serializer == null ? Codegen.empty() : this.serializer;
    }

    /**
     * The number of lines/rows to be skipped when parsing text files. The default value is 0. Type: integer (or Expression with resultType integer).
     * 
     */
    @Import(name="skipLineCount")
      private final @Nullable Output<Object> skipLineCount;

    public Output<Object> skipLineCount() {
        return this.skipLineCount == null ? Codegen.empty() : this.skipLineCount;
    }

    /**
     * Treat empty column values in the text file as null. The default value is true. Type: boolean (or Expression with resultType boolean).
     * 
     */
    @Import(name="treatEmptyAsNull")
      private final @Nullable Output<Object> treatEmptyAsNull;

    public Output<Object> treatEmptyAsNull() {
        return this.treatEmptyAsNull == null ? Codegen.empty() : this.treatEmptyAsNull;
    }

    /**
     * Type of dataset storage format.
     * Expected value is &#39;TextFormat&#39;.
     * 
     */
    @Import(name="type", required=true)
      private final Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    public TextFormatArgs(
        @Nullable Output<Object> columnDelimiter,
        @Nullable Output<Object> deserializer,
        @Nullable Output<Object> encodingName,
        @Nullable Output<Object> escapeChar,
        @Nullable Output<Object> firstRowAsHeader,
        @Nullable Output<Object> nullValue,
        @Nullable Output<Object> quoteChar,
        @Nullable Output<Object> rowDelimiter,
        @Nullable Output<Object> serializer,
        @Nullable Output<Object> skipLineCount,
        @Nullable Output<Object> treatEmptyAsNull,
        Output<String> type) {
        this.columnDelimiter = columnDelimiter;
        this.deserializer = deserializer;
        this.encodingName = encodingName;
        this.escapeChar = escapeChar;
        this.firstRowAsHeader = firstRowAsHeader;
        this.nullValue = nullValue;
        this.quoteChar = quoteChar;
        this.rowDelimiter = rowDelimiter;
        this.serializer = serializer;
        this.skipLineCount = skipLineCount;
        this.treatEmptyAsNull = treatEmptyAsNull;
        this.type = Codegen.stringProp("type").output().arg(type).require();
    }

    private TextFormatArgs() {
        this.columnDelimiter = Codegen.empty();
        this.deserializer = Codegen.empty();
        this.encodingName = Codegen.empty();
        this.escapeChar = Codegen.empty();
        this.firstRowAsHeader = Codegen.empty();
        this.nullValue = Codegen.empty();
        this.quoteChar = Codegen.empty();
        this.rowDelimiter = Codegen.empty();
        this.serializer = Codegen.empty();
        this.skipLineCount = Codegen.empty();
        this.treatEmptyAsNull = Codegen.empty();
        this.type = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TextFormatArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Object> columnDelimiter;
        private @Nullable Output<Object> deserializer;
        private @Nullable Output<Object> encodingName;
        private @Nullable Output<Object> escapeChar;
        private @Nullable Output<Object> firstRowAsHeader;
        private @Nullable Output<Object> nullValue;
        private @Nullable Output<Object> quoteChar;
        private @Nullable Output<Object> rowDelimiter;
        private @Nullable Output<Object> serializer;
        private @Nullable Output<Object> skipLineCount;
        private @Nullable Output<Object> treatEmptyAsNull;
        private Output<String> type;

        public Builder() {
    	      // Empty
        }

        public Builder(TextFormatArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.columnDelimiter = defaults.columnDelimiter;
    	      this.deserializer = defaults.deserializer;
    	      this.encodingName = defaults.encodingName;
    	      this.escapeChar = defaults.escapeChar;
    	      this.firstRowAsHeader = defaults.firstRowAsHeader;
    	      this.nullValue = defaults.nullValue;
    	      this.quoteChar = defaults.quoteChar;
    	      this.rowDelimiter = defaults.rowDelimiter;
    	      this.serializer = defaults.serializer;
    	      this.skipLineCount = defaults.skipLineCount;
    	      this.treatEmptyAsNull = defaults.treatEmptyAsNull;
    	      this.type = defaults.type;
        }

        public Builder columnDelimiter(@Nullable Output<Object> columnDelimiter) {
            this.columnDelimiter = columnDelimiter;
            return this;
        }
        public Builder columnDelimiter(@Nullable Object columnDelimiter) {
            this.columnDelimiter = Codegen.ofNullable(columnDelimiter);
            return this;
        }
        public Builder deserializer(@Nullable Output<Object> deserializer) {
            this.deserializer = deserializer;
            return this;
        }
        public Builder deserializer(@Nullable Object deserializer) {
            this.deserializer = Codegen.ofNullable(deserializer);
            return this;
        }
        public Builder encodingName(@Nullable Output<Object> encodingName) {
            this.encodingName = encodingName;
            return this;
        }
        public Builder encodingName(@Nullable Object encodingName) {
            this.encodingName = Codegen.ofNullable(encodingName);
            return this;
        }
        public Builder escapeChar(@Nullable Output<Object> escapeChar) {
            this.escapeChar = escapeChar;
            return this;
        }
        public Builder escapeChar(@Nullable Object escapeChar) {
            this.escapeChar = Codegen.ofNullable(escapeChar);
            return this;
        }
        public Builder firstRowAsHeader(@Nullable Output<Object> firstRowAsHeader) {
            this.firstRowAsHeader = firstRowAsHeader;
            return this;
        }
        public Builder firstRowAsHeader(@Nullable Object firstRowAsHeader) {
            this.firstRowAsHeader = Codegen.ofNullable(firstRowAsHeader);
            return this;
        }
        public Builder nullValue(@Nullable Output<Object> nullValue) {
            this.nullValue = nullValue;
            return this;
        }
        public Builder nullValue(@Nullable Object nullValue) {
            this.nullValue = Codegen.ofNullable(nullValue);
            return this;
        }
        public Builder quoteChar(@Nullable Output<Object> quoteChar) {
            this.quoteChar = quoteChar;
            return this;
        }
        public Builder quoteChar(@Nullable Object quoteChar) {
            this.quoteChar = Codegen.ofNullable(quoteChar);
            return this;
        }
        public Builder rowDelimiter(@Nullable Output<Object> rowDelimiter) {
            this.rowDelimiter = rowDelimiter;
            return this;
        }
        public Builder rowDelimiter(@Nullable Object rowDelimiter) {
            this.rowDelimiter = Codegen.ofNullable(rowDelimiter);
            return this;
        }
        public Builder serializer(@Nullable Output<Object> serializer) {
            this.serializer = serializer;
            return this;
        }
        public Builder serializer(@Nullable Object serializer) {
            this.serializer = Codegen.ofNullable(serializer);
            return this;
        }
        public Builder skipLineCount(@Nullable Output<Object> skipLineCount) {
            this.skipLineCount = skipLineCount;
            return this;
        }
        public Builder skipLineCount(@Nullable Object skipLineCount) {
            this.skipLineCount = Codegen.ofNullable(skipLineCount);
            return this;
        }
        public Builder treatEmptyAsNull(@Nullable Output<Object> treatEmptyAsNull) {
            this.treatEmptyAsNull = treatEmptyAsNull;
            return this;
        }
        public Builder treatEmptyAsNull(@Nullable Object treatEmptyAsNull) {
            this.treatEmptyAsNull = Codegen.ofNullable(treatEmptyAsNull);
            return this;
        }
        public Builder type(Output<String> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder type(String type) {
            this.type = Output.of(Objects.requireNonNull(type));
            return this;
        }        public TextFormatArgs build() {
            return new TextFormatArgs(columnDelimiter, deserializer, encodingName, escapeChar, firstRowAsHeader, nullValue, quoteChar, rowDelimiter, serializer, skipLineCount, treatEmptyAsNull, type);
        }
    }
}
