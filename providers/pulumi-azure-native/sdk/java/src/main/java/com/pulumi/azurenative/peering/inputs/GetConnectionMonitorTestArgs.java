// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.peering.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class GetConnectionMonitorTestArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetConnectionMonitorTestArgs Empty = new GetConnectionMonitorTestArgs();

    /**
     * The name of the connection monitor test
     * 
     */
    @Import(name="connectionMonitorTestName", required=true)
    private Output<String> connectionMonitorTestName;

    /**
     * @return The name of the connection monitor test
     * 
     */
    public Output<String> connectionMonitorTestName() {
        return this.connectionMonitorTestName;
    }

    /**
     * The name of the peering service.
     * 
     */
    @Import(name="peeringServiceName", required=true)
    private Output<String> peeringServiceName;

    /**
     * @return The name of the peering service.
     * 
     */
    public Output<String> peeringServiceName() {
        return this.peeringServiceName;
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    private GetConnectionMonitorTestArgs() {}

    private GetConnectionMonitorTestArgs(GetConnectionMonitorTestArgs $) {
        this.connectionMonitorTestName = $.connectionMonitorTestName;
        this.peeringServiceName = $.peeringServiceName;
        this.resourceGroupName = $.resourceGroupName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetConnectionMonitorTestArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetConnectionMonitorTestArgs $;

        public Builder() {
            $ = new GetConnectionMonitorTestArgs();
        }

        public Builder(GetConnectionMonitorTestArgs defaults) {
            $ = new GetConnectionMonitorTestArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param connectionMonitorTestName The name of the connection monitor test
         * 
         * @return builder
         * 
         */
        public Builder connectionMonitorTestName(Output<String> connectionMonitorTestName) {
            $.connectionMonitorTestName = connectionMonitorTestName;
            return this;
        }

        /**
         * @param connectionMonitorTestName The name of the connection monitor test
         * 
         * @return builder
         * 
         */
        public Builder connectionMonitorTestName(String connectionMonitorTestName) {
            return connectionMonitorTestName(Output.of(connectionMonitorTestName));
        }

        /**
         * @param peeringServiceName The name of the peering service.
         * 
         * @return builder
         * 
         */
        public Builder peeringServiceName(Output<String> peeringServiceName) {
            $.peeringServiceName = peeringServiceName;
            return this;
        }

        /**
         * @param peeringServiceName The name of the peering service.
         * 
         * @return builder
         * 
         */
        public Builder peeringServiceName(String peeringServiceName) {
            return peeringServiceName(Output.of(peeringServiceName));
        }

        /**
         * @param resourceGroupName The name of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public GetConnectionMonitorTestArgs build() {
            $.connectionMonitorTestName = Objects.requireNonNull($.connectionMonitorTestName, "expected parameter 'connectionMonitorTestName' to be non-null");
            $.peeringServiceName = Objects.requireNonNull($.peeringServiceName, "expected parameter 'peeringServiceName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
