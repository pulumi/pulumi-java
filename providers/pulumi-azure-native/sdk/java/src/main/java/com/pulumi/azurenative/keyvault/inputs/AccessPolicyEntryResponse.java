// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.keyvault.inputs;

import com.pulumi.azurenative.keyvault.inputs.PermissionsResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * An identity that have access to the key vault. All identities in the array must use the same tenant ID as the key vault&#39;s tenant ID.
 * 
 */
public final class AccessPolicyEntryResponse extends com.pulumi.resources.InvokeArgs {

    public static final AccessPolicyEntryResponse Empty = new AccessPolicyEntryResponse();

    /**
     *  Application ID of the client making request on behalf of a principal
     * 
     */
    @Import(name="applicationId")
    private @Nullable String applicationId;

    /**
     * @return  Application ID of the client making request on behalf of a principal
     * 
     */
    public Optional<String> applicationId() {
        return Optional.ofNullable(this.applicationId);
    }

    /**
     * The object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault. The object ID must be unique for the list of access policies.
     * 
     */
    @Import(name="objectId", required=true)
    private String objectId;

    /**
     * @return The object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault. The object ID must be unique for the list of access policies.
     * 
     */
    public String objectId() {
        return this.objectId;
    }

    /**
     * Permissions the identity has for keys, secrets and certificates.
     * 
     */
    @Import(name="permissions", required=true)
    private PermissionsResponse permissions;

    /**
     * @return Permissions the identity has for keys, secrets and certificates.
     * 
     */
    public PermissionsResponse permissions() {
        return this.permissions;
    }

    /**
     * The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
     * 
     */
    @Import(name="tenantId", required=true)
    private String tenantId;

    /**
     * @return The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
     * 
     */
    public String tenantId() {
        return this.tenantId;
    }

    private AccessPolicyEntryResponse() {}

    private AccessPolicyEntryResponse(AccessPolicyEntryResponse $) {
        this.applicationId = $.applicationId;
        this.objectId = $.objectId;
        this.permissions = $.permissions;
        this.tenantId = $.tenantId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AccessPolicyEntryResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AccessPolicyEntryResponse $;

        public Builder() {
            $ = new AccessPolicyEntryResponse();
        }

        public Builder(AccessPolicyEntryResponse defaults) {
            $ = new AccessPolicyEntryResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param applicationId  Application ID of the client making request on behalf of a principal
         * 
         * @return builder
         * 
         */
        public Builder applicationId(@Nullable String applicationId) {
            $.applicationId = applicationId;
            return this;
        }

        /**
         * @param objectId The object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault. The object ID must be unique for the list of access policies.
         * 
         * @return builder
         * 
         */
        public Builder objectId(String objectId) {
            $.objectId = objectId;
            return this;
        }

        /**
         * @param permissions Permissions the identity has for keys, secrets and certificates.
         * 
         * @return builder
         * 
         */
        public Builder permissions(PermissionsResponse permissions) {
            $.permissions = permissions;
            return this;
        }

        /**
         * @param tenantId The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(String tenantId) {
            $.tenantId = tenantId;
            return this;
        }

        public AccessPolicyEntryResponse build() {
            $.objectId = Objects.requireNonNull($.objectId, "expected parameter 'objectId' to be non-null");
            $.permissions = Objects.requireNonNull($.permissions, "expected parameter 'permissions' to be non-null");
            $.tenantId = Objects.requireNonNull($.tenantId, "expected parameter 'tenantId' to be non-null");
            return $;
        }
    }

}
