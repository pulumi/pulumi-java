// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.compute.inputs;

import com.pulumi.azurenative.compute.inputs.DedicatedHostAvailableCapacityResponse;
import com.pulumi.azurenative.compute.inputs.InstanceViewStatusResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The instance view of a dedicated host that includes the name of the dedicated host. It is used for the response to the instance view of a dedicated host group.
 * 
 */
public final class DedicatedHostInstanceViewWithNameResponse extends com.pulumi.resources.InvokeArgs {

    public static final DedicatedHostInstanceViewWithNameResponse Empty = new DedicatedHostInstanceViewWithNameResponse();

    /**
     * Specifies the unique id of the dedicated physical machine on which the dedicated host resides.
     * 
     */
    @Import(name="assetId", required=true)
    private String assetId;

    /**
     * @return Specifies the unique id of the dedicated physical machine on which the dedicated host resides.
     * 
     */
    public String assetId() {
        return this.assetId;
    }

    /**
     * Unutilized capacity of the dedicated host.
     * 
     */
    @Import(name="availableCapacity")
    private @Nullable DedicatedHostAvailableCapacityResponse availableCapacity;

    /**
     * @return Unutilized capacity of the dedicated host.
     * 
     */
    public Optional<DedicatedHostAvailableCapacityResponse> availableCapacity() {
        return Optional.ofNullable(this.availableCapacity);
    }

    /**
     * The name of the dedicated host.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return The name of the dedicated host.
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * The resource status information.
     * 
     */
    @Import(name="statuses")
    private @Nullable List<InstanceViewStatusResponse> statuses;

    /**
     * @return The resource status information.
     * 
     */
    public Optional<List<InstanceViewStatusResponse>> statuses() {
        return Optional.ofNullable(this.statuses);
    }

    private DedicatedHostInstanceViewWithNameResponse() {}

    private DedicatedHostInstanceViewWithNameResponse(DedicatedHostInstanceViewWithNameResponse $) {
        this.assetId = $.assetId;
        this.availableCapacity = $.availableCapacity;
        this.name = $.name;
        this.statuses = $.statuses;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DedicatedHostInstanceViewWithNameResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DedicatedHostInstanceViewWithNameResponse $;

        public Builder() {
            $ = new DedicatedHostInstanceViewWithNameResponse();
        }

        public Builder(DedicatedHostInstanceViewWithNameResponse defaults) {
            $ = new DedicatedHostInstanceViewWithNameResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param assetId Specifies the unique id of the dedicated physical machine on which the dedicated host resides.
         * 
         * @return builder
         * 
         */
        public Builder assetId(String assetId) {
            $.assetId = assetId;
            return this;
        }

        /**
         * @param availableCapacity Unutilized capacity of the dedicated host.
         * 
         * @return builder
         * 
         */
        public Builder availableCapacity(@Nullable DedicatedHostAvailableCapacityResponse availableCapacity) {
            $.availableCapacity = availableCapacity;
            return this;
        }

        /**
         * @param name The name of the dedicated host.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param statuses The resource status information.
         * 
         * @return builder
         * 
         */
        public Builder statuses(@Nullable List<InstanceViewStatusResponse> statuses) {
            $.statuses = statuses;
            return this;
        }

        /**
         * @param statuses The resource status information.
         * 
         * @return builder
         * 
         */
        public Builder statuses(InstanceViewStatusResponse... statuses) {
            return statuses(List.of(statuses));
        }

        public DedicatedHostInstanceViewWithNameResponse build() {
            $.assetId = Objects.requireNonNull($.assetId, "expected parameter 'assetId' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            return $;
        }
    }

}
