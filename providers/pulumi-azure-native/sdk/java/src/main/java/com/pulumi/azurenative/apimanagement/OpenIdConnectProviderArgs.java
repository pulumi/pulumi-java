// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.apimanagement;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OpenIdConnectProviderArgs extends com.pulumi.resources.ResourceArgs {

    public static final OpenIdConnectProviderArgs Empty = new OpenIdConnectProviderArgs();

    /**
     * Client ID of developer console which is the client application.
     * 
     */
    @Import(name="clientId", required=true)
    private Output<String> clientId;

    /**
     * @return Client ID of developer console which is the client application.
     * 
     */
    public Output<String> clientId() {
        return this.clientId;
    }

    /**
     * Client Secret of developer console which is the client application.
     * 
     */
    @Import(name="clientSecret")
    private @Nullable Output<String> clientSecret;

    /**
     * @return Client Secret of developer console which is the client application.
     * 
     */
    public Optional<Output<String>> clientSecret() {
        return Optional.ofNullable(this.clientSecret);
    }

    /**
     * User-friendly description of OpenID Connect Provider.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return User-friendly description of OpenID Connect Provider.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * User-friendly OpenID Connect Provider name.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return User-friendly OpenID Connect Provider name.
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * Metadata endpoint URI.
     * 
     */
    @Import(name="metadataEndpoint", required=true)
    private Output<String> metadataEndpoint;

    /**
     * @return Metadata endpoint URI.
     * 
     */
    public Output<String> metadataEndpoint() {
        return this.metadataEndpoint;
    }

    /**
     * Identifier of the OpenID Connect Provider.
     * 
     */
    @Import(name="opid")
    private @Nullable Output<String> opid;

    /**
     * @return Identifier of the OpenID Connect Provider.
     * 
     */
    public Optional<Output<String>> opid() {
        return Optional.ofNullable(this.opid);
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The name of the API Management service.
     * 
     */
    @Import(name="serviceName", required=true)
    private Output<String> serviceName;

    /**
     * @return The name of the API Management service.
     * 
     */
    public Output<String> serviceName() {
        return this.serviceName;
    }

    private OpenIdConnectProviderArgs() {}

    private OpenIdConnectProviderArgs(OpenIdConnectProviderArgs $) {
        this.clientId = $.clientId;
        this.clientSecret = $.clientSecret;
        this.description = $.description;
        this.displayName = $.displayName;
        this.metadataEndpoint = $.metadataEndpoint;
        this.opid = $.opid;
        this.resourceGroupName = $.resourceGroupName;
        this.serviceName = $.serviceName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OpenIdConnectProviderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OpenIdConnectProviderArgs $;

        public Builder() {
            $ = new OpenIdConnectProviderArgs();
        }

        public Builder(OpenIdConnectProviderArgs defaults) {
            $ = new OpenIdConnectProviderArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clientId Client ID of developer console which is the client application.
         * 
         * @return builder
         * 
         */
        public Builder clientId(Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        /**
         * @param clientId Client ID of developer console which is the client application.
         * 
         * @return builder
         * 
         */
        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        /**
         * @param clientSecret Client Secret of developer console which is the client application.
         * 
         * @return builder
         * 
         */
        public Builder clientSecret(@Nullable Output<String> clientSecret) {
            $.clientSecret = clientSecret;
            return this;
        }

        /**
         * @param clientSecret Client Secret of developer console which is the client application.
         * 
         * @return builder
         * 
         */
        public Builder clientSecret(String clientSecret) {
            return clientSecret(Output.of(clientSecret));
        }

        /**
         * @param description User-friendly description of OpenID Connect Provider.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description User-friendly description of OpenID Connect Provider.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName User-friendly OpenID Connect Provider name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName User-friendly OpenID Connect Provider name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param metadataEndpoint Metadata endpoint URI.
         * 
         * @return builder
         * 
         */
        public Builder metadataEndpoint(Output<String> metadataEndpoint) {
            $.metadataEndpoint = metadataEndpoint;
            return this;
        }

        /**
         * @param metadataEndpoint Metadata endpoint URI.
         * 
         * @return builder
         * 
         */
        public Builder metadataEndpoint(String metadataEndpoint) {
            return metadataEndpoint(Output.of(metadataEndpoint));
        }

        /**
         * @param opid Identifier of the OpenID Connect Provider.
         * 
         * @return builder
         * 
         */
        public Builder opid(@Nullable Output<String> opid) {
            $.opid = opid;
            return this;
        }

        /**
         * @param opid Identifier of the OpenID Connect Provider.
         * 
         * @return builder
         * 
         */
        public Builder opid(String opid) {
            return opid(Output.of(opid));
        }

        /**
         * @param resourceGroupName The name of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param serviceName The name of the API Management service.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        /**
         * @param serviceName The name of the API Management service.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        public OpenIdConnectProviderArgs build() {
            $.clientId = Objects.requireNonNull($.clientId, "expected parameter 'clientId' to be non-null");
            $.displayName = Objects.requireNonNull($.displayName, "expected parameter 'displayName' to be non-null");
            $.metadataEndpoint = Objects.requireNonNull($.metadataEndpoint, "expected parameter 'metadataEndpoint' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.serviceName = Objects.requireNonNull($.serviceName, "expected parameter 'serviceName' to be non-null");
            return $;
        }
    }

}
