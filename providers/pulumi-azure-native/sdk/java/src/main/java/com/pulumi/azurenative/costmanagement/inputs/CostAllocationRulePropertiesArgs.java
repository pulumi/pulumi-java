// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.costmanagement.inputs;

import com.pulumi.azurenative.costmanagement.enums.RuleStatus;
import com.pulumi.azurenative.costmanagement.inputs.CostAllocationRuleDetailsArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The properties of a cost allocation rule
 * 
 */
public final class CostAllocationRulePropertiesArgs extends com.pulumi.resources.ResourceArgs {

    public static final CostAllocationRulePropertiesArgs Empty = new CostAllocationRulePropertiesArgs();

    /**
     * Description of a cost allocation rule.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of a cost allocation rule.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Resource information for the cost allocation rule
     * 
     */
    @Import(name="details", required=true)
    private Output<CostAllocationRuleDetailsArgs> details;

    /**
     * @return Resource information for the cost allocation rule
     * 
     */
    public Output<CostAllocationRuleDetailsArgs> details() {
        return this.details;
    }

    /**
     * Status of the rule
     * 
     */
    @Import(name="status", required=true)
    private Output<Either<String,RuleStatus>> status;

    /**
     * @return Status of the rule
     * 
     */
    public Output<Either<String,RuleStatus>> status() {
        return this.status;
    }

    private CostAllocationRulePropertiesArgs() {}

    private CostAllocationRulePropertiesArgs(CostAllocationRulePropertiesArgs $) {
        this.description = $.description;
        this.details = $.details;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CostAllocationRulePropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CostAllocationRulePropertiesArgs $;

        public Builder() {
            $ = new CostAllocationRulePropertiesArgs();
        }

        public Builder(CostAllocationRulePropertiesArgs defaults) {
            $ = new CostAllocationRulePropertiesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Description of a cost allocation rule.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of a cost allocation rule.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param details Resource information for the cost allocation rule
         * 
         * @return builder
         * 
         */
        public Builder details(Output<CostAllocationRuleDetailsArgs> details) {
            $.details = details;
            return this;
        }

        /**
         * @param details Resource information for the cost allocation rule
         * 
         * @return builder
         * 
         */
        public Builder details(CostAllocationRuleDetailsArgs details) {
            return details(Output.of(details));
        }

        /**
         * @param status Status of the rule
         * 
         * @return builder
         * 
         */
        public Builder status(Output<Either<String,RuleStatus>> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Status of the rule
         * 
         * @return builder
         * 
         */
        public Builder status(Either<String,RuleStatus> status) {
            return status(Output.of(status));
        }

        /**
         * @param status Status of the rule
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Either.ofLeft(status));
        }

        /**
         * @param status Status of the rule
         * 
         * @return builder
         * 
         */
        public Builder status(RuleStatus status) {
            return status(Either.ofRight(status));
        }

        public CostAllocationRulePropertiesArgs build() {
            $.details = Objects.requireNonNull($.details, "expected parameter 'details' to be non-null");
            $.status = Objects.requireNonNull($.status, "expected parameter 'status' to be non-null");
            return $;
        }
    }

}
