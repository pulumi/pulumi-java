// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.util.Objects;


/**
 * Connection draining allows open connections to a backend server to be active for a specified time after the backend server got removed from the configuration.
 * 
 */
public final class ApplicationGatewayConnectionDrainingArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApplicationGatewayConnectionDrainingArgs Empty = new ApplicationGatewayConnectionDrainingArgs();

    /**
     * The number of seconds connection draining is active. Acceptable values are from 1 second to 3600 seconds.
     * 
     */
    @Import(name="drainTimeoutInSec", required=true)
    private Output<Integer> drainTimeoutInSec;

    /**
     * @return The number of seconds connection draining is active. Acceptable values are from 1 second to 3600 seconds.
     * 
     */
    public Output<Integer> drainTimeoutInSec() {
        return this.drainTimeoutInSec;
    }

    /**
     * Whether connection draining is enabled or not.
     * 
     */
    @Import(name="enabled", required=true)
    private Output<Boolean> enabled;

    /**
     * @return Whether connection draining is enabled or not.
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }

    private ApplicationGatewayConnectionDrainingArgs() {}

    private ApplicationGatewayConnectionDrainingArgs(ApplicationGatewayConnectionDrainingArgs $) {
        this.drainTimeoutInSec = $.drainTimeoutInSec;
        this.enabled = $.enabled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplicationGatewayConnectionDrainingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplicationGatewayConnectionDrainingArgs $;

        public Builder() {
            $ = new ApplicationGatewayConnectionDrainingArgs();
        }

        public Builder(ApplicationGatewayConnectionDrainingArgs defaults) {
            $ = new ApplicationGatewayConnectionDrainingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param drainTimeoutInSec The number of seconds connection draining is active. Acceptable values are from 1 second to 3600 seconds.
         * 
         * @return builder
         * 
         */
        public Builder drainTimeoutInSec(Output<Integer> drainTimeoutInSec) {
            $.drainTimeoutInSec = drainTimeoutInSec;
            return this;
        }

        /**
         * @param drainTimeoutInSec The number of seconds connection draining is active. Acceptable values are from 1 second to 3600 seconds.
         * 
         * @return builder
         * 
         */
        public Builder drainTimeoutInSec(Integer drainTimeoutInSec) {
            return drainTimeoutInSec(Output.of(drainTimeoutInSec));
        }

        /**
         * @param enabled Whether connection draining is enabled or not.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether connection draining is enabled or not.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        public ApplicationGatewayConnectionDrainingArgs build() {
            $.drainTimeoutInSec = Objects.requireNonNull($.drainTimeoutInSec, "expected parameter 'drainTimeoutInSec' to be non-null");
            $.enabled = Objects.requireNonNull($.enabled, "expected parameter 'enabled' to be non-null");
            return $;
        }
    }

}
