// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.operationsmanagement;

import com.pulumi.azurenative.operationsmanagement.inputs.SolutionPlanArgs;
import com.pulumi.azurenative.operationsmanagement.inputs.SolutionPropertiesArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SolutionArgs extends com.pulumi.resources.ResourceArgs {

    public static final SolutionArgs Empty = new SolutionArgs();

    /**
     * Resource location
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Plan for solution object supported by the OperationsManagement resource provider.
     * 
     */
    @Import(name="plan")
    private @Nullable Output<SolutionPlanArgs> plan;

    public Optional<Output<SolutionPlanArgs>> plan() {
        return Optional.ofNullable(this.plan);
    }

    /**
     * Properties for solution object supported by the OperationsManagement resource provider.
     * 
     */
    @Import(name="properties")
    private @Nullable Output<SolutionPropertiesArgs> properties;

    public Optional<Output<SolutionPropertiesArgs>> properties() {
        return Optional.ofNullable(this.properties);
    }

    /**
     * The name of the resource group to get. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * User Solution Name.
     * 
     */
    @Import(name="solutionName")
    private @Nullable Output<String> solutionName;

    public Optional<Output<String>> solutionName() {
        return Optional.ofNullable(this.solutionName);
    }

    /**
     * Resource tags
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private SolutionArgs() {}

    private SolutionArgs(SolutionArgs $) {
        this.location = $.location;
        this.plan = $.plan;
        this.properties = $.properties;
        this.resourceGroupName = $.resourceGroupName;
        this.solutionName = $.solutionName;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SolutionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SolutionArgs $;

        public Builder() {
            $ = new SolutionArgs();
        }

        public Builder(SolutionArgs defaults) {
            $ = new SolutionArgs(Objects.requireNonNull(defaults));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder plan(@Nullable Output<SolutionPlanArgs> plan) {
            $.plan = plan;
            return this;
        }

        public Builder plan(SolutionPlanArgs plan) {
            return plan(Output.of(plan));
        }

        public Builder properties(@Nullable Output<SolutionPropertiesArgs> properties) {
            $.properties = properties;
            return this;
        }

        public Builder properties(SolutionPropertiesArgs properties) {
            return properties(Output.of(properties));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder solutionName(@Nullable Output<String> solutionName) {
            $.solutionName = solutionName;
            return this;
        }

        public Builder solutionName(String solutionName) {
            return solutionName(Output.of(solutionName));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public SolutionArgs build() {
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
