// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.sql;

import com.pulumi.azurenative.sql.enums.TransparentDataEncryptionStatus;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class TransparentDataEncryptionArgs extends com.pulumi.resources.ResourceArgs {

    public static final TransparentDataEncryptionArgs Empty = new TransparentDataEncryptionArgs();

    /**
     * The name of the database for which setting the transparent data encryption applies.
     * 
     */
    @Import(name="databaseName", required=true)
      private final Output<String> databaseName;

    public Output<String> databaseName() {
        return this.databaseName;
    }

    /**
     * The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The name of the server.
     * 
     */
    @Import(name="serverName", required=true)
      private final Output<String> serverName;

    public Output<String> serverName() {
        return this.serverName;
    }

    /**
     * The status of the database transparent data encryption.
     * 
     */
    @Import(name="status")
      private final @Nullable Output<Either<String,TransparentDataEncryptionStatus>> status;

    public Output<Either<String,TransparentDataEncryptionStatus>> status() {
        return this.status == null ? Codegen.empty() : this.status;
    }

    /**
     * The name of the transparent data encryption configuration.
     * 
     */
    @Import(name="transparentDataEncryptionName")
      private final @Nullable Output<String> transparentDataEncryptionName;

    public Output<String> transparentDataEncryptionName() {
        return this.transparentDataEncryptionName == null ? Codegen.empty() : this.transparentDataEncryptionName;
    }

    public TransparentDataEncryptionArgs(
        Output<String> databaseName,
        Output<String> resourceGroupName,
        Output<String> serverName,
        @Nullable Output<Either<String,TransparentDataEncryptionStatus>> status,
        @Nullable Output<String> transparentDataEncryptionName) {
        this.databaseName = Objects.requireNonNull(databaseName, "expected parameter 'databaseName' to be non-null");
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.serverName = Objects.requireNonNull(serverName, "expected parameter 'serverName' to be non-null");
        this.status = status;
        this.transparentDataEncryptionName = transparentDataEncryptionName;
    }

    private TransparentDataEncryptionArgs() {
        this.databaseName = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.serverName = Codegen.empty();
        this.status = Codegen.empty();
        this.transparentDataEncryptionName = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TransparentDataEncryptionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> databaseName;
        private Output<String> resourceGroupName;
        private Output<String> serverName;
        private @Nullable Output<Either<String,TransparentDataEncryptionStatus>> status;
        private @Nullable Output<String> transparentDataEncryptionName;

        public Builder() {
    	      // Empty
        }

        public Builder(TransparentDataEncryptionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.databaseName = defaults.databaseName;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.serverName = defaults.serverName;
    	      this.status = defaults.status;
    	      this.transparentDataEncryptionName = defaults.transparentDataEncryptionName;
        }

        public Builder databaseName(Output<String> databaseName) {
            this.databaseName = Objects.requireNonNull(databaseName);
            return this;
        }
        public Builder databaseName(String databaseName) {
            this.databaseName = Output.of(Objects.requireNonNull(databaseName));
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder serverName(Output<String> serverName) {
            this.serverName = Objects.requireNonNull(serverName);
            return this;
        }
        public Builder serverName(String serverName) {
            this.serverName = Output.of(Objects.requireNonNull(serverName));
            return this;
        }
        public Builder status(@Nullable Output<Either<String,TransparentDataEncryptionStatus>> status) {
            this.status = status;
            return this;
        }
        public Builder status(@Nullable Either<String,TransparentDataEncryptionStatus> status) {
            this.status = Codegen.ofNullable(status);
            return this;
        }
        public Builder transparentDataEncryptionName(@Nullable Output<String> transparentDataEncryptionName) {
            this.transparentDataEncryptionName = transparentDataEncryptionName;
            return this;
        }
        public Builder transparentDataEncryptionName(@Nullable String transparentDataEncryptionName) {
            this.transparentDataEncryptionName = Codegen.ofNullable(transparentDataEncryptionName);
            return this;
        }        public TransparentDataEncryptionArgs build() {
            return new TransparentDataEncryptionArgs(databaseName, resourceGroupName, serverName, status, transparentDataEncryptionName);
        }
    }
}
