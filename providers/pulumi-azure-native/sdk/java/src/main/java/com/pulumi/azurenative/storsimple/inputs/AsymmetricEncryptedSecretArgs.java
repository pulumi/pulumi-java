// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.storsimple.inputs;

import com.pulumi.azurenative.storsimple.enums.EncryptionAlgorithm;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Represent the secrets intended for encryption with asymmetric key pair.
 * 
 */
public final class AsymmetricEncryptedSecretArgs extends com.pulumi.resources.ResourceArgs {

    public static final AsymmetricEncryptedSecretArgs Empty = new AsymmetricEncryptedSecretArgs();

    /**
     * The algorithm used to encrypt &#34;Value&#34;.
     * 
     */
    @Import(name="encryptionAlgorithm", required=true)
    private Output<EncryptionAlgorithm> encryptionAlgorithm;

    /**
     * @return The algorithm used to encrypt &#34;Value&#34;.
     * 
     */
    public Output<EncryptionAlgorithm> encryptionAlgorithm() {
        return this.encryptionAlgorithm;
    }

    /**
     * Thumbprint certificate that was used to encrypt &#34;Value&#34;. If the value in unencrypted, it will be null.
     * 
     */
    @Import(name="encryptionCertThumbprint")
    private @Nullable Output<String> encryptionCertThumbprint;

    /**
     * @return Thumbprint certificate that was used to encrypt &#34;Value&#34;. If the value in unencrypted, it will be null.
     * 
     */
    public Optional<Output<String>> encryptionCertThumbprint() {
        return Optional.ofNullable(this.encryptionCertThumbprint);
    }

    /**
     * The value of the secret.
     * 
     */
    @Import(name="value", required=true)
    private Output<String> value;

    /**
     * @return The value of the secret.
     * 
     */
    public Output<String> value() {
        return this.value;
    }

    private AsymmetricEncryptedSecretArgs() {}

    private AsymmetricEncryptedSecretArgs(AsymmetricEncryptedSecretArgs $) {
        this.encryptionAlgorithm = $.encryptionAlgorithm;
        this.encryptionCertThumbprint = $.encryptionCertThumbprint;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AsymmetricEncryptedSecretArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AsymmetricEncryptedSecretArgs $;

        public Builder() {
            $ = new AsymmetricEncryptedSecretArgs();
        }

        public Builder(AsymmetricEncryptedSecretArgs defaults) {
            $ = new AsymmetricEncryptedSecretArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param encryptionAlgorithm The algorithm used to encrypt &#34;Value&#34;.
         * 
         * @return builder
         * 
         */
        public Builder encryptionAlgorithm(Output<EncryptionAlgorithm> encryptionAlgorithm) {
            $.encryptionAlgorithm = encryptionAlgorithm;
            return this;
        }

        /**
         * @param encryptionAlgorithm The algorithm used to encrypt &#34;Value&#34;.
         * 
         * @return builder
         * 
         */
        public Builder encryptionAlgorithm(EncryptionAlgorithm encryptionAlgorithm) {
            return encryptionAlgorithm(Output.of(encryptionAlgorithm));
        }

        /**
         * @param encryptionCertThumbprint Thumbprint certificate that was used to encrypt &#34;Value&#34;. If the value in unencrypted, it will be null.
         * 
         * @return builder
         * 
         */
        public Builder encryptionCertThumbprint(@Nullable Output<String> encryptionCertThumbprint) {
            $.encryptionCertThumbprint = encryptionCertThumbprint;
            return this;
        }

        /**
         * @param encryptionCertThumbprint Thumbprint certificate that was used to encrypt &#34;Value&#34;. If the value in unencrypted, it will be null.
         * 
         * @return builder
         * 
         */
        public Builder encryptionCertThumbprint(String encryptionCertThumbprint) {
            return encryptionCertThumbprint(Output.of(encryptionCertThumbprint));
        }

        /**
         * @param value The value of the secret.
         * 
         * @return builder
         * 
         */
        public Builder value(Output<String> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value The value of the secret.
         * 
         * @return builder
         * 
         */
        public Builder value(String value) {
            return value(Output.of(value));
        }

        public AsymmetricEncryptedSecretArgs build() {
            $.encryptionAlgorithm = Objects.requireNonNull($.encryptionAlgorithm, "expected parameter 'encryptionAlgorithm' to be non-null");
            $.value = Objects.requireNonNull($.value, "expected parameter 'value' to be non-null");
            return $;
        }
    }

}
