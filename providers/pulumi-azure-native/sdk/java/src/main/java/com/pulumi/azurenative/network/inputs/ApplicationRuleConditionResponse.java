// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.azurenative.network.inputs.FirewallPolicyRuleConditionApplicationProtocolResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Rule condition of type application.
 * 
 */
public final class ApplicationRuleConditionResponse extends com.pulumi.resources.InvokeArgs {

    public static final ApplicationRuleConditionResponse Empty = new ApplicationRuleConditionResponse();

    /**
     * Description of the rule condition.
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    /**
     * @return Description of the rule condition.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * List of destination IP addresses or Service Tags.
     * 
     */
    @Import(name="destinationAddresses")
    private @Nullable List<String> destinationAddresses;

    /**
     * @return List of destination IP addresses or Service Tags.
     * 
     */
    public Optional<List<String>> destinationAddresses() {
        return Optional.ofNullable(this.destinationAddresses);
    }

    /**
     * List of FQDN Tags for this rule condition.
     * 
     */
    @Import(name="fqdnTags")
    private @Nullable List<String> fqdnTags;

    /**
     * @return List of FQDN Tags for this rule condition.
     * 
     */
    public Optional<List<String>> fqdnTags() {
        return Optional.ofNullable(this.fqdnTags);
    }

    /**
     * Name of the rule condition.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return Name of the rule condition.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Array of Application Protocols.
     * 
     */
    @Import(name="protocols")
    private @Nullable List<FirewallPolicyRuleConditionApplicationProtocolResponse> protocols;

    /**
     * @return Array of Application Protocols.
     * 
     */
    public Optional<List<FirewallPolicyRuleConditionApplicationProtocolResponse>> protocols() {
        return Optional.ofNullable(this.protocols);
    }

    /**
     * Rule Condition Type.
     * Expected value is &#39;ApplicationRuleCondition&#39;.
     * 
     */
    @Import(name="ruleConditionType", required=true)
    private String ruleConditionType;

    /**
     * @return Rule Condition Type.
     * Expected value is &#39;ApplicationRuleCondition&#39;.
     * 
     */
    public String ruleConditionType() {
        return this.ruleConditionType;
    }

    /**
     * List of source IP addresses for this rule.
     * 
     */
    @Import(name="sourceAddresses")
    private @Nullable List<String> sourceAddresses;

    /**
     * @return List of source IP addresses for this rule.
     * 
     */
    public Optional<List<String>> sourceAddresses() {
        return Optional.ofNullable(this.sourceAddresses);
    }

    /**
     * List of source IpGroups for this rule.
     * 
     */
    @Import(name="sourceIpGroups")
    private @Nullable List<String> sourceIpGroups;

    /**
     * @return List of source IpGroups for this rule.
     * 
     */
    public Optional<List<String>> sourceIpGroups() {
        return Optional.ofNullable(this.sourceIpGroups);
    }

    /**
     * List of FQDNs for this rule condition.
     * 
     */
    @Import(name="targetFqdns")
    private @Nullable List<String> targetFqdns;

    /**
     * @return List of FQDNs for this rule condition.
     * 
     */
    public Optional<List<String>> targetFqdns() {
        return Optional.ofNullable(this.targetFqdns);
    }

    private ApplicationRuleConditionResponse() {}

    private ApplicationRuleConditionResponse(ApplicationRuleConditionResponse $) {
        this.description = $.description;
        this.destinationAddresses = $.destinationAddresses;
        this.fqdnTags = $.fqdnTags;
        this.name = $.name;
        this.protocols = $.protocols;
        this.ruleConditionType = $.ruleConditionType;
        this.sourceAddresses = $.sourceAddresses;
        this.sourceIpGroups = $.sourceIpGroups;
        this.targetFqdns = $.targetFqdns;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplicationRuleConditionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplicationRuleConditionResponse $;

        public Builder() {
            $ = new ApplicationRuleConditionResponse();
        }

        public Builder(ApplicationRuleConditionResponse defaults) {
            $ = new ApplicationRuleConditionResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Description of the rule condition.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        /**
         * @param destinationAddresses List of destination IP addresses or Service Tags.
         * 
         * @return builder
         * 
         */
        public Builder destinationAddresses(@Nullable List<String> destinationAddresses) {
            $.destinationAddresses = destinationAddresses;
            return this;
        }

        /**
         * @param destinationAddresses List of destination IP addresses or Service Tags.
         * 
         * @return builder
         * 
         */
        public Builder destinationAddresses(String... destinationAddresses) {
            return destinationAddresses(List.of(destinationAddresses));
        }

        /**
         * @param fqdnTags List of FQDN Tags for this rule condition.
         * 
         * @return builder
         * 
         */
        public Builder fqdnTags(@Nullable List<String> fqdnTags) {
            $.fqdnTags = fqdnTags;
            return this;
        }

        /**
         * @param fqdnTags List of FQDN Tags for this rule condition.
         * 
         * @return builder
         * 
         */
        public Builder fqdnTags(String... fqdnTags) {
            return fqdnTags(List.of(fqdnTags));
        }

        /**
         * @param name Name of the rule condition.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param protocols Array of Application Protocols.
         * 
         * @return builder
         * 
         */
        public Builder protocols(@Nullable List<FirewallPolicyRuleConditionApplicationProtocolResponse> protocols) {
            $.protocols = protocols;
            return this;
        }

        /**
         * @param protocols Array of Application Protocols.
         * 
         * @return builder
         * 
         */
        public Builder protocols(FirewallPolicyRuleConditionApplicationProtocolResponse... protocols) {
            return protocols(List.of(protocols));
        }

        /**
         * @param ruleConditionType Rule Condition Type.
         * Expected value is &#39;ApplicationRuleCondition&#39;.
         * 
         * @return builder
         * 
         */
        public Builder ruleConditionType(String ruleConditionType) {
            $.ruleConditionType = ruleConditionType;
            return this;
        }

        /**
         * @param sourceAddresses List of source IP addresses for this rule.
         * 
         * @return builder
         * 
         */
        public Builder sourceAddresses(@Nullable List<String> sourceAddresses) {
            $.sourceAddresses = sourceAddresses;
            return this;
        }

        /**
         * @param sourceAddresses List of source IP addresses for this rule.
         * 
         * @return builder
         * 
         */
        public Builder sourceAddresses(String... sourceAddresses) {
            return sourceAddresses(List.of(sourceAddresses));
        }

        /**
         * @param sourceIpGroups List of source IpGroups for this rule.
         * 
         * @return builder
         * 
         */
        public Builder sourceIpGroups(@Nullable List<String> sourceIpGroups) {
            $.sourceIpGroups = sourceIpGroups;
            return this;
        }

        /**
         * @param sourceIpGroups List of source IpGroups for this rule.
         * 
         * @return builder
         * 
         */
        public Builder sourceIpGroups(String... sourceIpGroups) {
            return sourceIpGroups(List.of(sourceIpGroups));
        }

        /**
         * @param targetFqdns List of FQDNs for this rule condition.
         * 
         * @return builder
         * 
         */
        public Builder targetFqdns(@Nullable List<String> targetFqdns) {
            $.targetFqdns = targetFqdns;
            return this;
        }

        /**
         * @param targetFqdns List of FQDNs for this rule condition.
         * 
         * @return builder
         * 
         */
        public Builder targetFqdns(String... targetFqdns) {
            return targetFqdns(List.of(targetFqdns));
        }

        public ApplicationRuleConditionResponse build() {
            $.ruleConditionType = Codegen.stringProp("ruleConditionType").arg($.ruleConditionType).require();
            return $;
        }
    }

}
