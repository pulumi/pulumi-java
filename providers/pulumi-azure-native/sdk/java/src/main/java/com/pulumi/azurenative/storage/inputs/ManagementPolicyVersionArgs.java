// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.storage.inputs;

import com.pulumi.azurenative.storage.inputs.DateAfterCreationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Management policy action for blob version.
 * 
 */
public final class ManagementPolicyVersionArgs extends com.pulumi.resources.ResourceArgs {

    public static final ManagementPolicyVersionArgs Empty = new ManagementPolicyVersionArgs();

    /**
     * The function to delete the blob version
     * 
     */
    @Import(name="delete")
    private @Nullable Output<DateAfterCreationArgs> delete;

    public Optional<Output<DateAfterCreationArgs>> delete() {
        return Optional.ofNullable(this.delete);
    }

    /**
     * The function to tier blob version to archive storage. Support blob version currently at Hot or Cool tier
     * 
     */
    @Import(name="tierToArchive")
    private @Nullable Output<DateAfterCreationArgs> tierToArchive;

    public Optional<Output<DateAfterCreationArgs>> tierToArchive() {
        return Optional.ofNullable(this.tierToArchive);
    }

    /**
     * The function to tier blob version to cool storage. Support blob version currently at Hot tier
     * 
     */
    @Import(name="tierToCool")
    private @Nullable Output<DateAfterCreationArgs> tierToCool;

    public Optional<Output<DateAfterCreationArgs>> tierToCool() {
        return Optional.ofNullable(this.tierToCool);
    }

    private ManagementPolicyVersionArgs() {}

    private ManagementPolicyVersionArgs(ManagementPolicyVersionArgs $) {
        this.delete = $.delete;
        this.tierToArchive = $.tierToArchive;
        this.tierToCool = $.tierToCool;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagementPolicyVersionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagementPolicyVersionArgs $;

        public Builder() {
            $ = new ManagementPolicyVersionArgs();
        }

        public Builder(ManagementPolicyVersionArgs defaults) {
            $ = new ManagementPolicyVersionArgs(Objects.requireNonNull(defaults));
        }

        public Builder delete(@Nullable Output<DateAfterCreationArgs> delete) {
            $.delete = delete;
            return this;
        }

        public Builder delete(DateAfterCreationArgs delete) {
            return delete(Output.of(delete));
        }

        public Builder tierToArchive(@Nullable Output<DateAfterCreationArgs> tierToArchive) {
            $.tierToArchive = tierToArchive;
            return this;
        }

        public Builder tierToArchive(DateAfterCreationArgs tierToArchive) {
            return tierToArchive(Output.of(tierToArchive));
        }

        public Builder tierToCool(@Nullable Output<DateAfterCreationArgs> tierToCool) {
            $.tierToCool = tierToCool;
            return this;
        }

        public Builder tierToCool(DateAfterCreationArgs tierToCool) {
            return tierToCool(Output.of(tierToCool));
        }

        public ManagementPolicyVersionArgs build() {
            return $;
        }
    }

}
