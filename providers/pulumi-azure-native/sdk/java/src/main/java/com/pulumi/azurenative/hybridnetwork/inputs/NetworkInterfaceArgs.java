// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.hybridnetwork.inputs;

import com.pulumi.azurenative.hybridnetwork.enums.VMSwitchType;
import com.pulumi.azurenative.hybridnetwork.inputs.NetworkInterfaceIPConfigurationArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Network interface properties.
 * 
 */
public final class NetworkInterfaceArgs extends com.pulumi.resources.ResourceArgs {

    public static final NetworkInterfaceArgs Empty = new NetworkInterfaceArgs();

    /**
     * A list of IP configurations of the network interface.
     * 
     */
    @Import(name="ipConfigurations")
    private @Nullable Output<List<NetworkInterfaceIPConfigurationArgs>> ipConfigurations;

    /**
     * @return A list of IP configurations of the network interface.
     * 
     */
    public Optional<Output<List<NetworkInterfaceIPConfigurationArgs>>> ipConfigurations() {
        return Optional.ofNullable(this.ipConfigurations);
    }

    /**
     * The MAC address of the network interface.
     * 
     */
    @Import(name="macAddress")
    private @Nullable Output<String> macAddress;

    /**
     * @return The MAC address of the network interface.
     * 
     */
    public Optional<Output<String>> macAddress() {
        return Optional.ofNullable(this.macAddress);
    }

    /**
     * The name of the network interface.
     * 
     */
    @Import(name="networkInterfaceName")
    private @Nullable Output<String> networkInterfaceName;

    /**
     * @return The name of the network interface.
     * 
     */
    public Optional<Output<String>> networkInterfaceName() {
        return Optional.ofNullable(this.networkInterfaceName);
    }

    /**
     * The type of the VM switch.
     * 
     */
    @Import(name="vmSwitchType")
    private @Nullable Output<Either<String,VMSwitchType>> vmSwitchType;

    /**
     * @return The type of the VM switch.
     * 
     */
    public Optional<Output<Either<String,VMSwitchType>>> vmSwitchType() {
        return Optional.ofNullable(this.vmSwitchType);
    }

    private NetworkInterfaceArgs() {}

    private NetworkInterfaceArgs(NetworkInterfaceArgs $) {
        this.ipConfigurations = $.ipConfigurations;
        this.macAddress = $.macAddress;
        this.networkInterfaceName = $.networkInterfaceName;
        this.vmSwitchType = $.vmSwitchType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkInterfaceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkInterfaceArgs $;

        public Builder() {
            $ = new NetworkInterfaceArgs();
        }

        public Builder(NetworkInterfaceArgs defaults) {
            $ = new NetworkInterfaceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param ipConfigurations A list of IP configurations of the network interface.
         * 
         * @return builder
         * 
         */
        public Builder ipConfigurations(@Nullable Output<List<NetworkInterfaceIPConfigurationArgs>> ipConfigurations) {
            $.ipConfigurations = ipConfigurations;
            return this;
        }

        /**
         * @param ipConfigurations A list of IP configurations of the network interface.
         * 
         * @return builder
         * 
         */
        public Builder ipConfigurations(List<NetworkInterfaceIPConfigurationArgs> ipConfigurations) {
            return ipConfigurations(Output.of(ipConfigurations));
        }

        /**
         * @param ipConfigurations A list of IP configurations of the network interface.
         * 
         * @return builder
         * 
         */
        public Builder ipConfigurations(NetworkInterfaceIPConfigurationArgs... ipConfigurations) {
            return ipConfigurations(List.of(ipConfigurations));
        }

        /**
         * @param macAddress The MAC address of the network interface.
         * 
         * @return builder
         * 
         */
        public Builder macAddress(@Nullable Output<String> macAddress) {
            $.macAddress = macAddress;
            return this;
        }

        /**
         * @param macAddress The MAC address of the network interface.
         * 
         * @return builder
         * 
         */
        public Builder macAddress(String macAddress) {
            return macAddress(Output.of(macAddress));
        }

        /**
         * @param networkInterfaceName The name of the network interface.
         * 
         * @return builder
         * 
         */
        public Builder networkInterfaceName(@Nullable Output<String> networkInterfaceName) {
            $.networkInterfaceName = networkInterfaceName;
            return this;
        }

        /**
         * @param networkInterfaceName The name of the network interface.
         * 
         * @return builder
         * 
         */
        public Builder networkInterfaceName(String networkInterfaceName) {
            return networkInterfaceName(Output.of(networkInterfaceName));
        }

        /**
         * @param vmSwitchType The type of the VM switch.
         * 
         * @return builder
         * 
         */
        public Builder vmSwitchType(@Nullable Output<Either<String,VMSwitchType>> vmSwitchType) {
            $.vmSwitchType = vmSwitchType;
            return this;
        }

        /**
         * @param vmSwitchType The type of the VM switch.
         * 
         * @return builder
         * 
         */
        public Builder vmSwitchType(Either<String,VMSwitchType> vmSwitchType) {
            return vmSwitchType(Output.of(vmSwitchType));
        }

        /**
         * @param vmSwitchType The type of the VM switch.
         * 
         * @return builder
         * 
         */
        public Builder vmSwitchType(String vmSwitchType) {
            return vmSwitchType(Either.ofLeft(vmSwitchType));
        }

        /**
         * @param vmSwitchType The type of the VM switch.
         * 
         * @return builder
         * 
         */
        public Builder vmSwitchType(VMSwitchType vmSwitchType) {
            return vmSwitchType(Either.ofRight(vmSwitchType));
        }

        public NetworkInterfaceArgs build() {
            return $;
        }
    }

}
