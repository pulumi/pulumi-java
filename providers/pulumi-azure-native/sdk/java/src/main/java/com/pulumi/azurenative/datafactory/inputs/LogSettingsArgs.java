// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.azurenative.datafactory.inputs.CopyActivityLogSettingsArgs;
import com.pulumi.azurenative.datafactory.inputs.LogLocationSettingsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Log settings.
 * 
 */
public final class LogSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final LogSettingsArgs Empty = new LogSettingsArgs();

    /**
     * Specifies settings for copy activity log.
     * 
     */
    @Import(name="copyActivityLogSettings")
    private @Nullable Output<CopyActivityLogSettingsArgs> copyActivityLogSettings;

    /**
     * @return Specifies settings for copy activity log.
     * 
     */
    public Optional<Output<CopyActivityLogSettingsArgs>> copyActivityLogSettings() {
        return Optional.ofNullable(this.copyActivityLogSettings);
    }

    /**
     * Specifies whether to enable copy activity log. Type: boolean (or Expression with resultType boolean).
     * 
     */
    @Import(name="enableCopyActivityLog")
    private @Nullable Output<Object> enableCopyActivityLog;

    /**
     * @return Specifies whether to enable copy activity log. Type: boolean (or Expression with resultType boolean).
     * 
     */
    public Optional<Output<Object>> enableCopyActivityLog() {
        return Optional.ofNullable(this.enableCopyActivityLog);
    }

    /**
     * Log location settings customer needs to provide when enabling log.
     * 
     */
    @Import(name="logLocationSettings", required=true)
    private Output<LogLocationSettingsArgs> logLocationSettings;

    /**
     * @return Log location settings customer needs to provide when enabling log.
     * 
     */
    public Output<LogLocationSettingsArgs> logLocationSettings() {
        return this.logLocationSettings;
    }

    private LogSettingsArgs() {}

    private LogSettingsArgs(LogSettingsArgs $) {
        this.copyActivityLogSettings = $.copyActivityLogSettings;
        this.enableCopyActivityLog = $.enableCopyActivityLog;
        this.logLocationSettings = $.logLocationSettings;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LogSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LogSettingsArgs $;

        public Builder() {
            $ = new LogSettingsArgs();
        }

        public Builder(LogSettingsArgs defaults) {
            $ = new LogSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param copyActivityLogSettings Specifies settings for copy activity log.
         * 
         * @return builder
         * 
         */
        public Builder copyActivityLogSettings(@Nullable Output<CopyActivityLogSettingsArgs> copyActivityLogSettings) {
            $.copyActivityLogSettings = copyActivityLogSettings;
            return this;
        }

        /**
         * @param copyActivityLogSettings Specifies settings for copy activity log.
         * 
         * @return builder
         * 
         */
        public Builder copyActivityLogSettings(CopyActivityLogSettingsArgs copyActivityLogSettings) {
            return copyActivityLogSettings(Output.of(copyActivityLogSettings));
        }

        /**
         * @param enableCopyActivityLog Specifies whether to enable copy activity log. Type: boolean (or Expression with resultType boolean).
         * 
         * @return builder
         * 
         */
        public Builder enableCopyActivityLog(@Nullable Output<Object> enableCopyActivityLog) {
            $.enableCopyActivityLog = enableCopyActivityLog;
            return this;
        }

        /**
         * @param enableCopyActivityLog Specifies whether to enable copy activity log. Type: boolean (or Expression with resultType boolean).
         * 
         * @return builder
         * 
         */
        public Builder enableCopyActivityLog(Object enableCopyActivityLog) {
            return enableCopyActivityLog(Output.of(enableCopyActivityLog));
        }

        /**
         * @param logLocationSettings Log location settings customer needs to provide when enabling log.
         * 
         * @return builder
         * 
         */
        public Builder logLocationSettings(Output<LogLocationSettingsArgs> logLocationSettings) {
            $.logLocationSettings = logLocationSettings;
            return this;
        }

        /**
         * @param logLocationSettings Log location settings customer needs to provide when enabling log.
         * 
         * @return builder
         * 
         */
        public Builder logLocationSettings(LogLocationSettingsArgs logLocationSettings) {
            return logLocationSettings(Output.of(logLocationSettings));
        }

        public LogSettingsArgs build() {
            $.logLocationSettings = Objects.requireNonNull($.logLocationSettings, "expected parameter 'logLocationSettings' to be non-null");
            return $;
        }
    }

}
