// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.web.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The configuration settings of the storage of the tokens if a file system is used.
 * 
 */
public final class FileSystemTokenStoreArgs extends com.pulumi.resources.ResourceArgs {

    public static final FileSystemTokenStoreArgs Empty = new FileSystemTokenStoreArgs();

    /**
     * The directory in which the tokens will be stored.
     * 
     */
    @Import(name="directory")
    private @Nullable Output<String> directory;

    /**
     * @return The directory in which the tokens will be stored.
     * 
     */
    public Optional<Output<String>> directory() {
        return Optional.ofNullable(this.directory);
    }

    private FileSystemTokenStoreArgs() {}

    private FileSystemTokenStoreArgs(FileSystemTokenStoreArgs $) {
        this.directory = $.directory;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FileSystemTokenStoreArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FileSystemTokenStoreArgs $;

        public Builder() {
            $ = new FileSystemTokenStoreArgs();
        }

        public Builder(FileSystemTokenStoreArgs defaults) {
            $ = new FileSystemTokenStoreArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param directory The directory in which the tokens will be stored.
         * 
         * @return builder
         * 
         */
        public Builder directory(@Nullable Output<String> directory) {
            $.directory = directory;
            return this;
        }

        /**
         * @param directory The directory in which the tokens will be stored.
         * 
         * @return builder
         * 
         */
        public Builder directory(String directory) {
            return directory(Output.of(directory));
        }

        public FileSystemTokenStoreArgs build() {
            return $;
        }
    }

}
