// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.app.inputs;

import com.pulumi.azurenative.app.inputs.AzureCredentialsArgs;
import com.pulumi.azurenative.app.inputs.RegistryInfoArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Configuration properties that define the mutable settings of a Container App SourceControl
 * 
 */
public final class GithubActionConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final GithubActionConfigurationArgs Empty = new GithubActionConfigurationArgs();

    /**
     * AzureCredentials configurations.
     * 
     */
    @Import(name="azureCredentials")
    private @Nullable Output<AzureCredentialsArgs> azureCredentials;

    /**
     * @return AzureCredentials configurations.
     * 
     */
    public Optional<Output<AzureCredentialsArgs>> azureCredentials() {
        return Optional.ofNullable(this.azureCredentials);
    }

    /**
     * Context path
     * 
     */
    @Import(name="contextPath")
    private @Nullable Output<String> contextPath;

    /**
     * @return Context path
     * 
     */
    public Optional<Output<String>> contextPath() {
        return Optional.ofNullable(this.contextPath);
    }

    /**
     * Image name
     * 
     */
    @Import(name="image")
    private @Nullable Output<String> image;

    /**
     * @return Image name
     * 
     */
    public Optional<Output<String>> image() {
        return Optional.ofNullable(this.image);
    }

    /**
     * Operation system
     * 
     */
    @Import(name="os")
    private @Nullable Output<String> os;

    /**
     * @return Operation system
     * 
     */
    public Optional<Output<String>> os() {
        return Optional.ofNullable(this.os);
    }

    /**
     * Code or Image
     * 
     */
    @Import(name="publishType")
    private @Nullable Output<String> publishType;

    /**
     * @return Code or Image
     * 
     */
    public Optional<Output<String>> publishType() {
        return Optional.ofNullable(this.publishType);
    }

    /**
     * Registry configurations.
     * 
     */
    @Import(name="registryInfo")
    private @Nullable Output<RegistryInfoArgs> registryInfo;

    /**
     * @return Registry configurations.
     * 
     */
    public Optional<Output<RegistryInfoArgs>> registryInfo() {
        return Optional.ofNullable(this.registryInfo);
    }

    /**
     * Runtime stack
     * 
     */
    @Import(name="runtimeStack")
    private @Nullable Output<String> runtimeStack;

    /**
     * @return Runtime stack
     * 
     */
    public Optional<Output<String>> runtimeStack() {
        return Optional.ofNullable(this.runtimeStack);
    }

    /**
     * Runtime version
     * 
     */
    @Import(name="runtimeVersion")
    private @Nullable Output<String> runtimeVersion;

    /**
     * @return Runtime version
     * 
     */
    public Optional<Output<String>> runtimeVersion() {
        return Optional.ofNullable(this.runtimeVersion);
    }

    private GithubActionConfigurationArgs() {}

    private GithubActionConfigurationArgs(GithubActionConfigurationArgs $) {
        this.azureCredentials = $.azureCredentials;
        this.contextPath = $.contextPath;
        this.image = $.image;
        this.os = $.os;
        this.publishType = $.publishType;
        this.registryInfo = $.registryInfo;
        this.runtimeStack = $.runtimeStack;
        this.runtimeVersion = $.runtimeVersion;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GithubActionConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GithubActionConfigurationArgs $;

        public Builder() {
            $ = new GithubActionConfigurationArgs();
        }

        public Builder(GithubActionConfigurationArgs defaults) {
            $ = new GithubActionConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param azureCredentials AzureCredentials configurations.
         * 
         * @return builder
         * 
         */
        public Builder azureCredentials(@Nullable Output<AzureCredentialsArgs> azureCredentials) {
            $.azureCredentials = azureCredentials;
            return this;
        }

        /**
         * @param azureCredentials AzureCredentials configurations.
         * 
         * @return builder
         * 
         */
        public Builder azureCredentials(AzureCredentialsArgs azureCredentials) {
            return azureCredentials(Output.of(azureCredentials));
        }

        /**
         * @param contextPath Context path
         * 
         * @return builder
         * 
         */
        public Builder contextPath(@Nullable Output<String> contextPath) {
            $.contextPath = contextPath;
            return this;
        }

        /**
         * @param contextPath Context path
         * 
         * @return builder
         * 
         */
        public Builder contextPath(String contextPath) {
            return contextPath(Output.of(contextPath));
        }

        /**
         * @param image Image name
         * 
         * @return builder
         * 
         */
        public Builder image(@Nullable Output<String> image) {
            $.image = image;
            return this;
        }

        /**
         * @param image Image name
         * 
         * @return builder
         * 
         */
        public Builder image(String image) {
            return image(Output.of(image));
        }

        /**
         * @param os Operation system
         * 
         * @return builder
         * 
         */
        public Builder os(@Nullable Output<String> os) {
            $.os = os;
            return this;
        }

        /**
         * @param os Operation system
         * 
         * @return builder
         * 
         */
        public Builder os(String os) {
            return os(Output.of(os));
        }

        /**
         * @param publishType Code or Image
         * 
         * @return builder
         * 
         */
        public Builder publishType(@Nullable Output<String> publishType) {
            $.publishType = publishType;
            return this;
        }

        /**
         * @param publishType Code or Image
         * 
         * @return builder
         * 
         */
        public Builder publishType(String publishType) {
            return publishType(Output.of(publishType));
        }

        /**
         * @param registryInfo Registry configurations.
         * 
         * @return builder
         * 
         */
        public Builder registryInfo(@Nullable Output<RegistryInfoArgs> registryInfo) {
            $.registryInfo = registryInfo;
            return this;
        }

        /**
         * @param registryInfo Registry configurations.
         * 
         * @return builder
         * 
         */
        public Builder registryInfo(RegistryInfoArgs registryInfo) {
            return registryInfo(Output.of(registryInfo));
        }

        /**
         * @param runtimeStack Runtime stack
         * 
         * @return builder
         * 
         */
        public Builder runtimeStack(@Nullable Output<String> runtimeStack) {
            $.runtimeStack = runtimeStack;
            return this;
        }

        /**
         * @param runtimeStack Runtime stack
         * 
         * @return builder
         * 
         */
        public Builder runtimeStack(String runtimeStack) {
            return runtimeStack(Output.of(runtimeStack));
        }

        /**
         * @param runtimeVersion Runtime version
         * 
         * @return builder
         * 
         */
        public Builder runtimeVersion(@Nullable Output<String> runtimeVersion) {
            $.runtimeVersion = runtimeVersion;
            return this;
        }

        /**
         * @param runtimeVersion Runtime version
         * 
         * @return builder
         * 
         */
        public Builder runtimeVersion(String runtimeVersion) {
            return runtimeVersion(Output.of(runtimeVersion));
        }

        public GithubActionConfigurationArgs build() {
            return $;
        }
    }

}
