// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.documentdb.inputs;

import com.pulumi.azurenative.documentdb.enums.AuthenticationMethod;
import com.pulumi.azurenative.documentdb.enums.ManagedCassandraProvisioningState;
import com.pulumi.azurenative.documentdb.inputs.CertificateArgs;
import com.pulumi.azurenative.documentdb.inputs.SeedNodeArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Properties of a managed Cassandra cluster.
 * 
 */
public final class ClusterResourcePropertiesArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClusterResourcePropertiesArgs Empty = new ClusterResourcePropertiesArgs();

    /**
     * Which authentication method Cassandra should use to authenticate clients. &#39;None&#39; turns off authentication, so should not be used except in emergencies. &#39;Cassandra&#39; is the default password based authentication. The default is &#39;Cassandra&#39;.
     * 
     */
    @Import(name="authenticationMethod")
      private final @Nullable Output<Either<String,AuthenticationMethod>> authenticationMethod;

    public Output<Either<String,AuthenticationMethod>> authenticationMethod() {
        return this.authenticationMethod == null ? Codegen.empty() : this.authenticationMethod;
    }

    /**
     * Which version of Cassandra should this cluster converge to running (e.g., 3.11). When updated, the cluster may take some time to migrate to the new version.
     * 
     */
    @Import(name="cassandraVersion")
      private final @Nullable Output<String> cassandraVersion;

    public Output<String> cassandraVersion() {
        return this.cassandraVersion == null ? Codegen.empty() : this.cassandraVersion;
    }

    /**
     * List of TLS certificates used to authorize clients connecting to the cluster. All connections are TLS encrypted whether clientCertificates is set or not, but if clientCertificates is set, the managed Cassandra cluster will reject all connections not bearing a TLS client certificate that can be validated from one or more of the public certificates in this property.
     * 
     */
    @Import(name="clientCertificates")
      private final @Nullable Output<List<CertificateArgs>> clientCertificates;

    public Output<List<CertificateArgs>> clientCertificates() {
        return this.clientCertificates == null ? Codegen.empty() : this.clientCertificates;
    }

    /**
     * If you need to set the clusterName property in cassandra.yaml to something besides the resource name of the cluster, set the value to use on this property.
     * 
     */
    @Import(name="clusterNameOverride")
      private final @Nullable Output<String> clusterNameOverride;

    public Output<String> clusterNameOverride() {
        return this.clusterNameOverride == null ? Codegen.empty() : this.clusterNameOverride;
    }

    /**
     * Resource id of a subnet that this cluster&#39;s management service should have its network interface attached to. The subnet must be routable to all subnets that will be delegated to data centers. The resource id must be of the form &#39;/subscriptions/&lt;subscription id&gt;/resourceGroups/&lt;resource group&gt;/providers/Microsoft.Network/virtualNetworks/&lt;virtual network&gt;/subnets/&lt;subnet&gt;&#39;
     * 
     */
    @Import(name="delegatedManagementSubnetId")
      private final @Nullable Output<String> delegatedManagementSubnetId;

    public Output<String> delegatedManagementSubnetId() {
        return this.delegatedManagementSubnetId == null ? Codegen.empty() : this.delegatedManagementSubnetId;
    }

    /**
     * List of TLS certificates used to authorize gossip from unmanaged data centers. The TLS certificates of all nodes in unmanaged data centers must be verifiable using one of the certificates provided in this property.
     * 
     */
    @Import(name="externalGossipCertificates")
      private final @Nullable Output<List<CertificateArgs>> externalGossipCertificates;

    public Output<List<CertificateArgs>> externalGossipCertificates() {
        return this.externalGossipCertificates == null ? Codegen.empty() : this.externalGossipCertificates;
    }

    /**
     * List of IP addresses of seed nodes in unmanaged data centers. These will be added to the seed node lists of all managed nodes.
     * 
     */
    @Import(name="externalSeedNodes")
      private final @Nullable Output<List<SeedNodeArgs>> externalSeedNodes;

    public Output<List<SeedNodeArgs>> externalSeedNodes() {
        return this.externalSeedNodes == null ? Codegen.empty() : this.externalSeedNodes;
    }

    /**
     * Number of hours to wait between taking a backup of the cluster. To disable backups, set this property to 0.
     * 
     */
    @Import(name="hoursBetweenBackups")
      private final @Nullable Output<Integer> hoursBetweenBackups;

    public Output<Integer> hoursBetweenBackups() {
        return this.hoursBetweenBackups == null ? Codegen.empty() : this.hoursBetweenBackups;
    }

    /**
     * Initial password for clients connecting as admin to the cluster. Should be changed after cluster creation. Returns null on GET. This field only applies when the authenticationMethod field is &#39;Cassandra&#39;.
     * 
     */
    @Import(name="initialCassandraAdminPassword")
      private final @Nullable Output<String> initialCassandraAdminPassword;

    public Output<String> initialCassandraAdminPassword() {
        return this.initialCassandraAdminPassword == null ? Codegen.empty() : this.initialCassandraAdminPassword;
    }

    /**
     * Hostname or IP address where the Prometheus endpoint containing data about the managed Cassandra nodes can be reached.
     * 
     */
    @Import(name="prometheusEndpoint")
      private final @Nullable Output<SeedNodeArgs> prometheusEndpoint;

    public Output<SeedNodeArgs> prometheusEndpoint() {
        return this.prometheusEndpoint == null ? Codegen.empty() : this.prometheusEndpoint;
    }

    /**
     * The status of the resource at the time the operation was called.
     * 
     */
    @Import(name="provisioningState")
      private final @Nullable Output<Either<String,ManagedCassandraProvisioningState>> provisioningState;

    public Output<Either<String,ManagedCassandraProvisioningState>> provisioningState() {
        return this.provisioningState == null ? Codegen.empty() : this.provisioningState;
    }

    /**
     * Should automatic repairs run on this cluster? If omitted, this is true, and should stay true unless you are running a hybrid cluster where you are already doing your own repairs.
     * 
     */
    @Import(name="repairEnabled")
      private final @Nullable Output<Boolean> repairEnabled;

    public Output<Boolean> repairEnabled() {
        return this.repairEnabled == null ? Codegen.empty() : this.repairEnabled;
    }

    /**
     * To create an empty cluster, omit this field or set it to null. To restore a backup into a new cluster, set this field to the resource id of the backup.
     * 
     */
    @Import(name="restoreFromBackupId")
      private final @Nullable Output<String> restoreFromBackupId;

    public Output<String> restoreFromBackupId() {
        return this.restoreFromBackupId == null ? Codegen.empty() : this.restoreFromBackupId;
    }

    public ClusterResourcePropertiesArgs(
        @Nullable Output<Either<String,AuthenticationMethod>> authenticationMethod,
        @Nullable Output<String> cassandraVersion,
        @Nullable Output<List<CertificateArgs>> clientCertificates,
        @Nullable Output<String> clusterNameOverride,
        @Nullable Output<String> delegatedManagementSubnetId,
        @Nullable Output<List<CertificateArgs>> externalGossipCertificates,
        @Nullable Output<List<SeedNodeArgs>> externalSeedNodes,
        @Nullable Output<Integer> hoursBetweenBackups,
        @Nullable Output<String> initialCassandraAdminPassword,
        @Nullable Output<SeedNodeArgs> prometheusEndpoint,
        @Nullable Output<Either<String,ManagedCassandraProvisioningState>> provisioningState,
        @Nullable Output<Boolean> repairEnabled,
        @Nullable Output<String> restoreFromBackupId) {
        this.authenticationMethod = authenticationMethod;
        this.cassandraVersion = cassandraVersion;
        this.clientCertificates = clientCertificates;
        this.clusterNameOverride = clusterNameOverride;
        this.delegatedManagementSubnetId = delegatedManagementSubnetId;
        this.externalGossipCertificates = externalGossipCertificates;
        this.externalSeedNodes = externalSeedNodes;
        this.hoursBetweenBackups = hoursBetweenBackups;
        this.initialCassandraAdminPassword = initialCassandraAdminPassword;
        this.prometheusEndpoint = prometheusEndpoint;
        this.provisioningState = provisioningState;
        this.repairEnabled = repairEnabled;
        this.restoreFromBackupId = restoreFromBackupId;
    }

    private ClusterResourcePropertiesArgs() {
        this.authenticationMethod = Codegen.empty();
        this.cassandraVersion = Codegen.empty();
        this.clientCertificates = Codegen.empty();
        this.clusterNameOverride = Codegen.empty();
        this.delegatedManagementSubnetId = Codegen.empty();
        this.externalGossipCertificates = Codegen.empty();
        this.externalSeedNodes = Codegen.empty();
        this.hoursBetweenBackups = Codegen.empty();
        this.initialCassandraAdminPassword = Codegen.empty();
        this.prometheusEndpoint = Codegen.empty();
        this.provisioningState = Codegen.empty();
        this.repairEnabled = Codegen.empty();
        this.restoreFromBackupId = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ClusterResourcePropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Either<String,AuthenticationMethod>> authenticationMethod;
        private @Nullable Output<String> cassandraVersion;
        private @Nullable Output<List<CertificateArgs>> clientCertificates;
        private @Nullable Output<String> clusterNameOverride;
        private @Nullable Output<String> delegatedManagementSubnetId;
        private @Nullable Output<List<CertificateArgs>> externalGossipCertificates;
        private @Nullable Output<List<SeedNodeArgs>> externalSeedNodes;
        private @Nullable Output<Integer> hoursBetweenBackups;
        private @Nullable Output<String> initialCassandraAdminPassword;
        private @Nullable Output<SeedNodeArgs> prometheusEndpoint;
        private @Nullable Output<Either<String,ManagedCassandraProvisioningState>> provisioningState;
        private @Nullable Output<Boolean> repairEnabled;
        private @Nullable Output<String> restoreFromBackupId;

        public Builder() {
    	      // Empty
        }

        public Builder(ClusterResourcePropertiesArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authenticationMethod = defaults.authenticationMethod;
    	      this.cassandraVersion = defaults.cassandraVersion;
    	      this.clientCertificates = defaults.clientCertificates;
    	      this.clusterNameOverride = defaults.clusterNameOverride;
    	      this.delegatedManagementSubnetId = defaults.delegatedManagementSubnetId;
    	      this.externalGossipCertificates = defaults.externalGossipCertificates;
    	      this.externalSeedNodes = defaults.externalSeedNodes;
    	      this.hoursBetweenBackups = defaults.hoursBetweenBackups;
    	      this.initialCassandraAdminPassword = defaults.initialCassandraAdminPassword;
    	      this.prometheusEndpoint = defaults.prometheusEndpoint;
    	      this.provisioningState = defaults.provisioningState;
    	      this.repairEnabled = defaults.repairEnabled;
    	      this.restoreFromBackupId = defaults.restoreFromBackupId;
        }

        public Builder authenticationMethod(@Nullable Output<Either<String,AuthenticationMethod>> authenticationMethod) {
            this.authenticationMethod = authenticationMethod;
            return this;
        }
        public Builder authenticationMethod(@Nullable Either<String,AuthenticationMethod> authenticationMethod) {
            this.authenticationMethod = Codegen.ofNullable(authenticationMethod);
            return this;
        }
        public Builder cassandraVersion(@Nullable Output<String> cassandraVersion) {
            this.cassandraVersion = cassandraVersion;
            return this;
        }
        public Builder cassandraVersion(@Nullable String cassandraVersion) {
            this.cassandraVersion = Codegen.ofNullable(cassandraVersion);
            return this;
        }
        public Builder clientCertificates(@Nullable Output<List<CertificateArgs>> clientCertificates) {
            this.clientCertificates = clientCertificates;
            return this;
        }
        public Builder clientCertificates(@Nullable List<CertificateArgs> clientCertificates) {
            this.clientCertificates = Codegen.ofNullable(clientCertificates);
            return this;
        }
        public Builder clientCertificates(CertificateArgs... clientCertificates) {
            return clientCertificates(List.of(clientCertificates));
        }
        public Builder clusterNameOverride(@Nullable Output<String> clusterNameOverride) {
            this.clusterNameOverride = clusterNameOverride;
            return this;
        }
        public Builder clusterNameOverride(@Nullable String clusterNameOverride) {
            this.clusterNameOverride = Codegen.ofNullable(clusterNameOverride);
            return this;
        }
        public Builder delegatedManagementSubnetId(@Nullable Output<String> delegatedManagementSubnetId) {
            this.delegatedManagementSubnetId = delegatedManagementSubnetId;
            return this;
        }
        public Builder delegatedManagementSubnetId(@Nullable String delegatedManagementSubnetId) {
            this.delegatedManagementSubnetId = Codegen.ofNullable(delegatedManagementSubnetId);
            return this;
        }
        public Builder externalGossipCertificates(@Nullable Output<List<CertificateArgs>> externalGossipCertificates) {
            this.externalGossipCertificates = externalGossipCertificates;
            return this;
        }
        public Builder externalGossipCertificates(@Nullable List<CertificateArgs> externalGossipCertificates) {
            this.externalGossipCertificates = Codegen.ofNullable(externalGossipCertificates);
            return this;
        }
        public Builder externalGossipCertificates(CertificateArgs... externalGossipCertificates) {
            return externalGossipCertificates(List.of(externalGossipCertificates));
        }
        public Builder externalSeedNodes(@Nullable Output<List<SeedNodeArgs>> externalSeedNodes) {
            this.externalSeedNodes = externalSeedNodes;
            return this;
        }
        public Builder externalSeedNodes(@Nullable List<SeedNodeArgs> externalSeedNodes) {
            this.externalSeedNodes = Codegen.ofNullable(externalSeedNodes);
            return this;
        }
        public Builder externalSeedNodes(SeedNodeArgs... externalSeedNodes) {
            return externalSeedNodes(List.of(externalSeedNodes));
        }
        public Builder hoursBetweenBackups(@Nullable Output<Integer> hoursBetweenBackups) {
            this.hoursBetweenBackups = hoursBetweenBackups;
            return this;
        }
        public Builder hoursBetweenBackups(@Nullable Integer hoursBetweenBackups) {
            this.hoursBetweenBackups = Codegen.ofNullable(hoursBetweenBackups);
            return this;
        }
        public Builder initialCassandraAdminPassword(@Nullable Output<String> initialCassandraAdminPassword) {
            this.initialCassandraAdminPassword = initialCassandraAdminPassword;
            return this;
        }
        public Builder initialCassandraAdminPassword(@Nullable String initialCassandraAdminPassword) {
            this.initialCassandraAdminPassword = Codegen.ofNullable(initialCassandraAdminPassword);
            return this;
        }
        public Builder prometheusEndpoint(@Nullable Output<SeedNodeArgs> prometheusEndpoint) {
            this.prometheusEndpoint = prometheusEndpoint;
            return this;
        }
        public Builder prometheusEndpoint(@Nullable SeedNodeArgs prometheusEndpoint) {
            this.prometheusEndpoint = Codegen.ofNullable(prometheusEndpoint);
            return this;
        }
        public Builder provisioningState(@Nullable Output<Either<String,ManagedCassandraProvisioningState>> provisioningState) {
            this.provisioningState = provisioningState;
            return this;
        }
        public Builder provisioningState(@Nullable Either<String,ManagedCassandraProvisioningState> provisioningState) {
            this.provisioningState = Codegen.ofNullable(provisioningState);
            return this;
        }
        public Builder repairEnabled(@Nullable Output<Boolean> repairEnabled) {
            this.repairEnabled = repairEnabled;
            return this;
        }
        public Builder repairEnabled(@Nullable Boolean repairEnabled) {
            this.repairEnabled = Codegen.ofNullable(repairEnabled);
            return this;
        }
        public Builder restoreFromBackupId(@Nullable Output<String> restoreFromBackupId) {
            this.restoreFromBackupId = restoreFromBackupId;
            return this;
        }
        public Builder restoreFromBackupId(@Nullable String restoreFromBackupId) {
            this.restoreFromBackupId = Codegen.ofNullable(restoreFromBackupId);
            return this;
        }        public ClusterResourcePropertiesArgs build() {
            return new ClusterResourcePropertiesArgs(authenticationMethod, cassandraVersion, clientCertificates, clusterNameOverride, delegatedManagementSubnetId, externalGossipCertificates, externalSeedNodes, hoursBetweenBackups, initialCassandraAdminPassword, prometheusEndpoint, provisioningState, repairEnabled, restoreFromBackupId);
        }
    }
}
