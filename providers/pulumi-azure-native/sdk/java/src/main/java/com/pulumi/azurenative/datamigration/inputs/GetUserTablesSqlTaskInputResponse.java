// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datamigration.inputs;

import com.pulumi.azurenative.datamigration.inputs.SqlConnectionInfoResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Input for the task that collects user tables for the given list of databases
 * 
 */
public final class GetUserTablesSqlTaskInputResponse extends com.pulumi.resources.InvokeArgs {

    public static final GetUserTablesSqlTaskInputResponse Empty = new GetUserTablesSqlTaskInputResponse();

    /**
     * Connection information for SQL Server
     * 
     */
    @Import(name="connectionInfo", required=true)
    private SqlConnectionInfoResponse connectionInfo;

    public SqlConnectionInfoResponse connectionInfo() {
        return this.connectionInfo;
    }

    /**
     * List of database names to collect tables for
     * 
     */
    @Import(name="selectedDatabases", required=true)
    private List<String> selectedDatabases;

    public List<String> selectedDatabases() {
        return this.selectedDatabases;
    }

    private GetUserTablesSqlTaskInputResponse() {}

    private GetUserTablesSqlTaskInputResponse(GetUserTablesSqlTaskInputResponse $) {
        this.connectionInfo = $.connectionInfo;
        this.selectedDatabases = $.selectedDatabases;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetUserTablesSqlTaskInputResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetUserTablesSqlTaskInputResponse $;

        public Builder() {
            $ = new GetUserTablesSqlTaskInputResponse();
        }

        public Builder(GetUserTablesSqlTaskInputResponse defaults) {
            $ = new GetUserTablesSqlTaskInputResponse(Objects.requireNonNull(defaults));
        }

        public Builder connectionInfo(SqlConnectionInfoResponse connectionInfo) {
            $.connectionInfo = connectionInfo;
            return this;
        }

        public Builder selectedDatabases(List<String> selectedDatabases) {
            $.selectedDatabases = selectedDatabases;
            return this;
        }

        public Builder selectedDatabases(String... selectedDatabases) {
            return selectedDatabases(List.of(selectedDatabases));
        }

        public GetUserTablesSqlTaskInputResponse build() {
            $.connectionInfo = Objects.requireNonNull($.connectionInfo, "expected parameter 'connectionInfo' to be non-null");
            $.selectedDatabases = Objects.requireNonNull($.selectedDatabases, "expected parameter 'selectedDatabases' to be non-null");
            return $;
        }
    }

}
