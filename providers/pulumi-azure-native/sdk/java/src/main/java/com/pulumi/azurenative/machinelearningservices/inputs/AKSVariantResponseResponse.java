// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.machinelearningservices.inputs;

import com.pulumi.azurenative.machinelearningservices.inputs.ServiceResponseBaseResponseError;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The response for an AKS variant.
 * 
 */
public final class AKSVariantResponseResponse extends com.pulumi.resources.InvokeArgs {

    public static final AKSVariantResponseResponse Empty = new AKSVariantResponseResponse();

    /**
     * The compute environment type for the service.
     * Expected value is &#39;Custom&#39;.
     * 
     */
    @Import(name="computeType", required=true)
    private String computeType;

    /**
     * @return The compute environment type for the service.
     * Expected value is &#39;Custom&#39;.
     * 
     */
    public String computeType() {
        return this.computeType;
    }

    /**
     * The deployment type for the service.
     * 
     */
    @Import(name="deploymentType")
    private @Nullable String deploymentType;

    /**
     * @return The deployment type for the service.
     * 
     */
    public Optional<String> deploymentType() {
        return Optional.ofNullable(this.deploymentType);
    }

    /**
     * The service description.
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    /**
     * @return The service description.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The error details.
     * 
     */
    @Import(name="error", required=true)
    private ServiceResponseBaseResponseError error;

    /**
     * @return The error details.
     * 
     */
    public ServiceResponseBaseResponseError error() {
        return this.error;
    }

    /**
     * Is this the default variant.
     * 
     */
    @Import(name="isDefault")
    private @Nullable Boolean isDefault;

    /**
     * @return Is this the default variant.
     * 
     */
    public Optional<Boolean> isDefault() {
        return Optional.ofNullable(this.isDefault);
    }

    /**
     * The service tag dictionary. Tags are mutable.
     * 
     */
    @Import(name="kvTags")
    private @Nullable Map<String,String> kvTags;

    /**
     * @return The service tag dictionary. Tags are mutable.
     * 
     */
    public Optional<Map<String,String>> kvTags() {
        return Optional.ofNullable(this.kvTags);
    }

    /**
     * The service property dictionary. Properties are immutable.
     * 
     */
    @Import(name="properties")
    private @Nullable Map<String,String> properties;

    /**
     * @return The service property dictionary. Properties are immutable.
     * 
     */
    public Optional<Map<String,String>> properties() {
        return Optional.ofNullable(this.properties);
    }

    /**
     * The current state of the service.
     * 
     */
    @Import(name="state", required=true)
    private String state;

    /**
     * @return The current state of the service.
     * 
     */
    public String state() {
        return this.state;
    }

    /**
     * The amount of traffic variant receives.
     * 
     */
    @Import(name="trafficPercentile")
    private @Nullable Double trafficPercentile;

    /**
     * @return The amount of traffic variant receives.
     * 
     */
    public Optional<Double> trafficPercentile() {
        return Optional.ofNullable(this.trafficPercentile);
    }

    /**
     * The type of the variant.
     * 
     */
    @Import(name="type")
    private @Nullable String type;

    /**
     * @return The type of the variant.
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    private AKSVariantResponseResponse() {}

    private AKSVariantResponseResponse(AKSVariantResponseResponse $) {
        this.computeType = $.computeType;
        this.deploymentType = $.deploymentType;
        this.description = $.description;
        this.error = $.error;
        this.isDefault = $.isDefault;
        this.kvTags = $.kvTags;
        this.properties = $.properties;
        this.state = $.state;
        this.trafficPercentile = $.trafficPercentile;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AKSVariantResponseResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AKSVariantResponseResponse $;

        public Builder() {
            $ = new AKSVariantResponseResponse();
        }

        public Builder(AKSVariantResponseResponse defaults) {
            $ = new AKSVariantResponseResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param computeType The compute environment type for the service.
         * Expected value is &#39;Custom&#39;.
         * 
         * @return builder
         * 
         */
        public Builder computeType(String computeType) {
            $.computeType = computeType;
            return this;
        }

        /**
         * @param deploymentType The deployment type for the service.
         * 
         * @return builder
         * 
         */
        public Builder deploymentType(@Nullable String deploymentType) {
            $.deploymentType = deploymentType;
            return this;
        }

        /**
         * @param description The service description.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        /**
         * @param error The error details.
         * 
         * @return builder
         * 
         */
        public Builder error(ServiceResponseBaseResponseError error) {
            $.error = error;
            return this;
        }

        /**
         * @param isDefault Is this the default variant.
         * 
         * @return builder
         * 
         */
        public Builder isDefault(@Nullable Boolean isDefault) {
            $.isDefault = isDefault;
            return this;
        }

        /**
         * @param kvTags The service tag dictionary. Tags are mutable.
         * 
         * @return builder
         * 
         */
        public Builder kvTags(@Nullable Map<String,String> kvTags) {
            $.kvTags = kvTags;
            return this;
        }

        /**
         * @param properties The service property dictionary. Properties are immutable.
         * 
         * @return builder
         * 
         */
        public Builder properties(@Nullable Map<String,String> properties) {
            $.properties = properties;
            return this;
        }

        /**
         * @param state The current state of the service.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            $.state = state;
            return this;
        }

        /**
         * @param trafficPercentile The amount of traffic variant receives.
         * 
         * @return builder
         * 
         */
        public Builder trafficPercentile(@Nullable Double trafficPercentile) {
            $.trafficPercentile = trafficPercentile;
            return this;
        }

        /**
         * @param type The type of the variant.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable String type) {
            $.type = type;
            return this;
        }

        public AKSVariantResponseResponse build() {
            $.computeType = Codegen.stringProp("computeType").arg($.computeType).require();
            $.error = Objects.requireNonNull($.error, "expected parameter 'error' to be non-null");
            $.state = Objects.requireNonNull($.state, "expected parameter 'state' to be non-null");
            return $;
        }
    }

}
