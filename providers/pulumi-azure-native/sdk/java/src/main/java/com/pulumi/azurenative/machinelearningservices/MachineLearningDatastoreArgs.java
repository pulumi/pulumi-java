// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.machinelearningservices;

import com.pulumi.azurenative.machinelearningservices.enums.DatastoreTypeArm;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MachineLearningDatastoreArgs extends com.pulumi.resources.ResourceArgs {

    public static final MachineLearningDatastoreArgs Empty = new MachineLearningDatastoreArgs();

    /**
     * Account Key of storage account.
     * 
     */
    @Import(name="accountKey")
    private @Nullable Output<String> accountKey;

    public Optional<Output<String>> accountKey() {
        return Optional.ofNullable(this.accountKey);
    }

    /**
     * The name of the storage account.
     * 
     */
    @Import(name="accountName")
    private @Nullable Output<String> accountName;

    public Optional<Output<String>> accountName() {
        return Optional.ofNullable(this.accountName);
    }

    /**
     * The resource group the ADLS store belongs to. Defaults to selected resource group.
     * 
     */
    @Import(name="adlsResourceGroup")
    private @Nullable Output<String> adlsResourceGroup;

    public Optional<Output<String>> adlsResourceGroup() {
        return Optional.ofNullable(this.adlsResourceGroup);
    }

    /**
     * The ID of the subscription the ADLS store belongs to. Defaults to selected subscription.
     * 
     */
    @Import(name="adlsSubscriptionId")
    private @Nullable Output<String> adlsSubscriptionId;

    public Optional<Output<String>> adlsSubscriptionId() {
        return Optional.ofNullable(this.adlsSubscriptionId);
    }

    /**
     * Authority url used to authenticate the user.
     * 
     */
    @Import(name="authorityUrl")
    private @Nullable Output<String> authorityUrl;

    public Optional<Output<String>> authorityUrl() {
        return Optional.ofNullable(this.authorityUrl);
    }

    /**
     * The service principal&#39;s client/application ID.
     * 
     */
    @Import(name="clientId")
    private @Nullable Output<String> clientId;

    public Optional<Output<String>> clientId() {
        return Optional.ofNullable(this.clientId);
    }

    /**
     * The service principal&#39;s secret.
     * 
     */
    @Import(name="clientSecret")
    private @Nullable Output<String> clientSecret;

    public Optional<Output<String>> clientSecret() {
        return Optional.ofNullable(this.clientSecret);
    }

    /**
     * The name of the azure blob container.
     * 
     */
    @Import(name="containerName")
    private @Nullable Output<String> containerName;

    public Optional<Output<String>> containerName() {
        return Optional.ofNullable(this.containerName);
    }

    /**
     * Specifies datastore type.
     * 
     */
    @Import(name="dataStoreType", required=true)
    private Output<Either<String,DatastoreTypeArm>> dataStoreType;

    public Output<Either<String,DatastoreTypeArm>> dataStoreType() {
        return this.dataStoreType;
    }

    /**
     * The database name.
     * 
     */
    @Import(name="databaseName")
    private @Nullable Output<String> databaseName;

    public Optional<Output<String>> databaseName() {
        return Optional.ofNullable(this.databaseName);
    }

    /**
     * The Datastore name.
     * 
     */
    @Import(name="datastoreName")
    private @Nullable Output<String> datastoreName;

    public Optional<Output<String>> datastoreName() {
        return Optional.ofNullable(this.datastoreName);
    }

    /**
     * The description of the datastore.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The endpoint of the server.
     * 
     */
    @Import(name="endpoint")
    private @Nullable Output<String> endpoint;

    public Optional<Output<String>> endpoint() {
        return Optional.ofNullable(this.endpoint);
    }

    /**
     * This sets the ssl value of the server. Defaults to true if not set.
     * 
     */
    @Import(name="enforceSSL")
    private @Nullable Output<Boolean> enforceSSL;

    public Optional<Output<Boolean>> enforceSSL() {
        return Optional.ofNullable(this.enforceSSL);
    }

    /**
     * The file system name of the ADLS Gen2.
     * 
     */
    @Import(name="fileSystem")
    private @Nullable Output<String> fileSystem;

    public Optional<Output<String>> fileSystem() {
        return Optional.ofNullable(this.fileSystem);
    }

    /**
     * Include datastore secret in response.
     * 
     */
    @Import(name="includeSecret")
    private @Nullable Output<Boolean> includeSecret;

    public Optional<Output<Boolean>> includeSecret() {
        return Optional.ofNullable(this.includeSecret);
    }

    /**
     * The name of the datastore.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The password.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * The port number.
     * 
     */
    @Import(name="port")
    private @Nullable Output<String> port;

    public Optional<Output<String>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * The protocol to be used
     * 
     */
    @Import(name="protocol")
    private @Nullable Output<String> protocol;

    public Optional<Output<String>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    /**
     * Name of the resource group in which workspace is located.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Determines what operations will be performed.
     * 
     */
    @Import(name="resourceUrl")
    private @Nullable Output<String> resourceUrl;

    public Optional<Output<String>> resourceUrl() {
        return Optional.ofNullable(this.resourceUrl);
    }

    /**
     * Sas Token of storage account.
     * 
     */
    @Import(name="sasToken")
    private @Nullable Output<String> sasToken;

    public Optional<Output<String>> sasToken() {
        return Optional.ofNullable(this.sasToken);
    }

    /**
     * The SQL/MySQL/PostgreSQL server name
     * 
     */
    @Import(name="serverName")
    private @Nullable Output<String> serverName;

    public Optional<Output<String>> serverName() {
        return Optional.ofNullable(this.serverName);
    }

    /**
     * The name of the file share.
     * 
     */
    @Import(name="shareName")
    private @Nullable Output<String> shareName;

    public Optional<Output<String>> shareName() {
        return Optional.ofNullable(this.shareName);
    }

    /**
     * Skip validation that ensures data can be loaded from the dataset before registration.
     * 
     */
    @Import(name="skipValidation")
    private @Nullable Output<Boolean> skipValidation;

    public Optional<Output<Boolean>> skipValidation() {
        return Optional.ofNullable(this.skipValidation);
    }

    /**
     * The resource group of the storage account. Defaults to selected resource group
     * 
     */
    @Import(name="storageAccountResourceGroup")
    private @Nullable Output<String> storageAccountResourceGroup;

    public Optional<Output<String>> storageAccountResourceGroup() {
        return Optional.ofNullable(this.storageAccountResourceGroup);
    }

    /**
     * The subscription ID of the storage account. Defaults to selected subscription
     * 
     */
    @Import(name="storageAccountSubscriptionId")
    private @Nullable Output<String> storageAccountSubscriptionId;

    public Optional<Output<String>> storageAccountSubscriptionId() {
        return Optional.ofNullable(this.storageAccountSubscriptionId);
    }

    /**
     * The ADLS store name.
     * 
     */
    @Import(name="storeName")
    private @Nullable Output<String> storeName;

    public Optional<Output<String>> storeName() {
        return Optional.ofNullable(this.storeName);
    }

    /**
     * The service principal Tenant ID.
     * 
     */
    @Import(name="tenantId")
    private @Nullable Output<String> tenantId;

    public Optional<Output<String>> tenantId() {
        return Optional.ofNullable(this.tenantId);
    }

    /**
     * The user ID.
     * 
     */
    @Import(name="userId")
    private @Nullable Output<String> userId;

    public Optional<Output<String>> userId() {
        return Optional.ofNullable(this.userId);
    }

    /**
     * The username of the database user.
     * 
     */
    @Import(name="userName")
    private @Nullable Output<String> userName;

    public Optional<Output<String>> userName() {
        return Optional.ofNullable(this.userName);
    }

    /**
     * Name of Azure Machine Learning workspace.
     * 
     */
    @Import(name="workspaceName", required=true)
    private Output<String> workspaceName;

    public Output<String> workspaceName() {
        return this.workspaceName;
    }

    /**
     * If set to true, datastore support data access authenticated with Workspace MSI.
     * 
     */
    @Import(name="workspaceSystemAssignedIdentity")
    private @Nullable Output<Boolean> workspaceSystemAssignedIdentity;

    public Optional<Output<Boolean>> workspaceSystemAssignedIdentity() {
        return Optional.ofNullable(this.workspaceSystemAssignedIdentity);
    }

    private MachineLearningDatastoreArgs() {}

    private MachineLearningDatastoreArgs(MachineLearningDatastoreArgs $) {
        this.accountKey = $.accountKey;
        this.accountName = $.accountName;
        this.adlsResourceGroup = $.adlsResourceGroup;
        this.adlsSubscriptionId = $.adlsSubscriptionId;
        this.authorityUrl = $.authorityUrl;
        this.clientId = $.clientId;
        this.clientSecret = $.clientSecret;
        this.containerName = $.containerName;
        this.dataStoreType = $.dataStoreType;
        this.databaseName = $.databaseName;
        this.datastoreName = $.datastoreName;
        this.description = $.description;
        this.endpoint = $.endpoint;
        this.enforceSSL = $.enforceSSL;
        this.fileSystem = $.fileSystem;
        this.includeSecret = $.includeSecret;
        this.name = $.name;
        this.password = $.password;
        this.port = $.port;
        this.protocol = $.protocol;
        this.resourceGroupName = $.resourceGroupName;
        this.resourceUrl = $.resourceUrl;
        this.sasToken = $.sasToken;
        this.serverName = $.serverName;
        this.shareName = $.shareName;
        this.skipValidation = $.skipValidation;
        this.storageAccountResourceGroup = $.storageAccountResourceGroup;
        this.storageAccountSubscriptionId = $.storageAccountSubscriptionId;
        this.storeName = $.storeName;
        this.tenantId = $.tenantId;
        this.userId = $.userId;
        this.userName = $.userName;
        this.workspaceName = $.workspaceName;
        this.workspaceSystemAssignedIdentity = $.workspaceSystemAssignedIdentity;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MachineLearningDatastoreArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MachineLearningDatastoreArgs $;

        public Builder() {
            $ = new MachineLearningDatastoreArgs();
        }

        public Builder(MachineLearningDatastoreArgs defaults) {
            $ = new MachineLearningDatastoreArgs(Objects.requireNonNull(defaults));
        }

        public Builder accountKey(@Nullable Output<String> accountKey) {
            $.accountKey = accountKey;
            return this;
        }

        public Builder accountKey(String accountKey) {
            return accountKey(Output.of(accountKey));
        }

        public Builder accountName(@Nullable Output<String> accountName) {
            $.accountName = accountName;
            return this;
        }

        public Builder accountName(String accountName) {
            return accountName(Output.of(accountName));
        }

        public Builder adlsResourceGroup(@Nullable Output<String> adlsResourceGroup) {
            $.adlsResourceGroup = adlsResourceGroup;
            return this;
        }

        public Builder adlsResourceGroup(String adlsResourceGroup) {
            return adlsResourceGroup(Output.of(adlsResourceGroup));
        }

        public Builder adlsSubscriptionId(@Nullable Output<String> adlsSubscriptionId) {
            $.adlsSubscriptionId = adlsSubscriptionId;
            return this;
        }

        public Builder adlsSubscriptionId(String adlsSubscriptionId) {
            return adlsSubscriptionId(Output.of(adlsSubscriptionId));
        }

        public Builder authorityUrl(@Nullable Output<String> authorityUrl) {
            $.authorityUrl = authorityUrl;
            return this;
        }

        public Builder authorityUrl(String authorityUrl) {
            return authorityUrl(Output.of(authorityUrl));
        }

        public Builder clientId(@Nullable Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        public Builder clientSecret(@Nullable Output<String> clientSecret) {
            $.clientSecret = clientSecret;
            return this;
        }

        public Builder clientSecret(String clientSecret) {
            return clientSecret(Output.of(clientSecret));
        }

        public Builder containerName(@Nullable Output<String> containerName) {
            $.containerName = containerName;
            return this;
        }

        public Builder containerName(String containerName) {
            return containerName(Output.of(containerName));
        }

        public Builder dataStoreType(Output<Either<String,DatastoreTypeArm>> dataStoreType) {
            $.dataStoreType = dataStoreType;
            return this;
        }

        public Builder dataStoreType(Either<String,DatastoreTypeArm> dataStoreType) {
            return dataStoreType(Output.of(dataStoreType));
        }

        public Builder dataStoreType(String dataStoreType) {
            return dataStoreType(Either.ofLeft(dataStoreType));
        }

        public Builder dataStoreType(DatastoreTypeArm dataStoreType) {
            return dataStoreType(Either.ofRight(dataStoreType));
        }

        public Builder databaseName(@Nullable Output<String> databaseName) {
            $.databaseName = databaseName;
            return this;
        }

        public Builder databaseName(String databaseName) {
            return databaseName(Output.of(databaseName));
        }

        public Builder datastoreName(@Nullable Output<String> datastoreName) {
            $.datastoreName = datastoreName;
            return this;
        }

        public Builder datastoreName(String datastoreName) {
            return datastoreName(Output.of(datastoreName));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder endpoint(@Nullable Output<String> endpoint) {
            $.endpoint = endpoint;
            return this;
        }

        public Builder endpoint(String endpoint) {
            return endpoint(Output.of(endpoint));
        }

        public Builder enforceSSL(@Nullable Output<Boolean> enforceSSL) {
            $.enforceSSL = enforceSSL;
            return this;
        }

        public Builder enforceSSL(Boolean enforceSSL) {
            return enforceSSL(Output.of(enforceSSL));
        }

        public Builder fileSystem(@Nullable Output<String> fileSystem) {
            $.fileSystem = fileSystem;
            return this;
        }

        public Builder fileSystem(String fileSystem) {
            return fileSystem(Output.of(fileSystem));
        }

        public Builder includeSecret(@Nullable Output<Boolean> includeSecret) {
            $.includeSecret = includeSecret;
            return this;
        }

        public Builder includeSecret(Boolean includeSecret) {
            return includeSecret(Output.of(includeSecret));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        public Builder password(String password) {
            return password(Output.of(password));
        }

        public Builder port(@Nullable Output<String> port) {
            $.port = port;
            return this;
        }

        public Builder port(String port) {
            return port(Output.of(port));
        }

        public Builder protocol(@Nullable Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder resourceUrl(@Nullable Output<String> resourceUrl) {
            $.resourceUrl = resourceUrl;
            return this;
        }

        public Builder resourceUrl(String resourceUrl) {
            return resourceUrl(Output.of(resourceUrl));
        }

        public Builder sasToken(@Nullable Output<String> sasToken) {
            $.sasToken = sasToken;
            return this;
        }

        public Builder sasToken(String sasToken) {
            return sasToken(Output.of(sasToken));
        }

        public Builder serverName(@Nullable Output<String> serverName) {
            $.serverName = serverName;
            return this;
        }

        public Builder serverName(String serverName) {
            return serverName(Output.of(serverName));
        }

        public Builder shareName(@Nullable Output<String> shareName) {
            $.shareName = shareName;
            return this;
        }

        public Builder shareName(String shareName) {
            return shareName(Output.of(shareName));
        }

        public Builder skipValidation(@Nullable Output<Boolean> skipValidation) {
            $.skipValidation = skipValidation;
            return this;
        }

        public Builder skipValidation(Boolean skipValidation) {
            return skipValidation(Output.of(skipValidation));
        }

        public Builder storageAccountResourceGroup(@Nullable Output<String> storageAccountResourceGroup) {
            $.storageAccountResourceGroup = storageAccountResourceGroup;
            return this;
        }

        public Builder storageAccountResourceGroup(String storageAccountResourceGroup) {
            return storageAccountResourceGroup(Output.of(storageAccountResourceGroup));
        }

        public Builder storageAccountSubscriptionId(@Nullable Output<String> storageAccountSubscriptionId) {
            $.storageAccountSubscriptionId = storageAccountSubscriptionId;
            return this;
        }

        public Builder storageAccountSubscriptionId(String storageAccountSubscriptionId) {
            return storageAccountSubscriptionId(Output.of(storageAccountSubscriptionId));
        }

        public Builder storeName(@Nullable Output<String> storeName) {
            $.storeName = storeName;
            return this;
        }

        public Builder storeName(String storeName) {
            return storeName(Output.of(storeName));
        }

        public Builder tenantId(@Nullable Output<String> tenantId) {
            $.tenantId = tenantId;
            return this;
        }

        public Builder tenantId(String tenantId) {
            return tenantId(Output.of(tenantId));
        }

        public Builder userId(@Nullable Output<String> userId) {
            $.userId = userId;
            return this;
        }

        public Builder userId(String userId) {
            return userId(Output.of(userId));
        }

        public Builder userName(@Nullable Output<String> userName) {
            $.userName = userName;
            return this;
        }

        public Builder userName(String userName) {
            return userName(Output.of(userName));
        }

        public Builder workspaceName(Output<String> workspaceName) {
            $.workspaceName = workspaceName;
            return this;
        }

        public Builder workspaceName(String workspaceName) {
            return workspaceName(Output.of(workspaceName));
        }

        public Builder workspaceSystemAssignedIdentity(@Nullable Output<Boolean> workspaceSystemAssignedIdentity) {
            $.workspaceSystemAssignedIdentity = workspaceSystemAssignedIdentity;
            return this;
        }

        public Builder workspaceSystemAssignedIdentity(Boolean workspaceSystemAssignedIdentity) {
            return workspaceSystemAssignedIdentity(Output.of(workspaceSystemAssignedIdentity));
        }

        public MachineLearningDatastoreArgs build() {
            $.dataStoreType = Objects.requireNonNull($.dataStoreType, "expected parameter 'dataStoreType' to be non-null");
            $.enforceSSL = Codegen.booleanProp("enforceSSL").output().arg($.enforceSSL).def(true).getNullable();
            $.includeSecret = Codegen.booleanProp("includeSecret").output().arg($.includeSecret).def(true).getNullable();
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.workspaceName = Objects.requireNonNull($.workspaceName, "expected parameter 'workspaceName' to be non-null");
            return $;
        }
    }

}
