// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.azurenative.network.enums.EnforceCertificateNameCheckEnabledState;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Settings that apply to all backend pools.
 * 
 */
public final class BackendPoolsSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final BackendPoolsSettingsArgs Empty = new BackendPoolsSettingsArgs();

    /**
     * Whether to enforce certificate name check on HTTPS requests to all backend pools. No effect on non-HTTPS requests.
     * 
     */
    @Import(name="enforceCertificateNameCheck")
    private @Nullable Output<Either<String,EnforceCertificateNameCheckEnabledState>> enforceCertificateNameCheck;

    /**
     * @return Whether to enforce certificate name check on HTTPS requests to all backend pools. No effect on non-HTTPS requests.
     * 
     */
    public Optional<Output<Either<String,EnforceCertificateNameCheckEnabledState>>> enforceCertificateNameCheck() {
        return Optional.ofNullable(this.enforceCertificateNameCheck);
    }

    /**
     * Send and receive timeout on forwarding request to the backend. When timeout is reached, the request fails and returns.
     * 
     */
    @Import(name="sendRecvTimeoutSeconds")
    private @Nullable Output<Integer> sendRecvTimeoutSeconds;

    /**
     * @return Send and receive timeout on forwarding request to the backend. When timeout is reached, the request fails and returns.
     * 
     */
    public Optional<Output<Integer>> sendRecvTimeoutSeconds() {
        return Optional.ofNullable(this.sendRecvTimeoutSeconds);
    }

    private BackendPoolsSettingsArgs() {}

    private BackendPoolsSettingsArgs(BackendPoolsSettingsArgs $) {
        this.enforceCertificateNameCheck = $.enforceCertificateNameCheck;
        this.sendRecvTimeoutSeconds = $.sendRecvTimeoutSeconds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BackendPoolsSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BackendPoolsSettingsArgs $;

        public Builder() {
            $ = new BackendPoolsSettingsArgs();
        }

        public Builder(BackendPoolsSettingsArgs defaults) {
            $ = new BackendPoolsSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enforceCertificateNameCheck Whether to enforce certificate name check on HTTPS requests to all backend pools. No effect on non-HTTPS requests.
         * 
         * @return builder
         * 
         */
        public Builder enforceCertificateNameCheck(@Nullable Output<Either<String,EnforceCertificateNameCheckEnabledState>> enforceCertificateNameCheck) {
            $.enforceCertificateNameCheck = enforceCertificateNameCheck;
            return this;
        }

        /**
         * @param enforceCertificateNameCheck Whether to enforce certificate name check on HTTPS requests to all backend pools. No effect on non-HTTPS requests.
         * 
         * @return builder
         * 
         */
        public Builder enforceCertificateNameCheck(Either<String,EnforceCertificateNameCheckEnabledState> enforceCertificateNameCheck) {
            return enforceCertificateNameCheck(Output.of(enforceCertificateNameCheck));
        }

        /**
         * @param enforceCertificateNameCheck Whether to enforce certificate name check on HTTPS requests to all backend pools. No effect on non-HTTPS requests.
         * 
         * @return builder
         * 
         */
        public Builder enforceCertificateNameCheck(String enforceCertificateNameCheck) {
            return enforceCertificateNameCheck(Either.ofLeft(enforceCertificateNameCheck));
        }

        /**
         * @param enforceCertificateNameCheck Whether to enforce certificate name check on HTTPS requests to all backend pools. No effect on non-HTTPS requests.
         * 
         * @return builder
         * 
         */
        public Builder enforceCertificateNameCheck(EnforceCertificateNameCheckEnabledState enforceCertificateNameCheck) {
            return enforceCertificateNameCheck(Either.ofRight(enforceCertificateNameCheck));
        }

        /**
         * @param sendRecvTimeoutSeconds Send and receive timeout on forwarding request to the backend. When timeout is reached, the request fails and returns.
         * 
         * @return builder
         * 
         */
        public Builder sendRecvTimeoutSeconds(@Nullable Output<Integer> sendRecvTimeoutSeconds) {
            $.sendRecvTimeoutSeconds = sendRecvTimeoutSeconds;
            return this;
        }

        /**
         * @param sendRecvTimeoutSeconds Send and receive timeout on forwarding request to the backend. When timeout is reached, the request fails and returns.
         * 
         * @return builder
         * 
         */
        public Builder sendRecvTimeoutSeconds(Integer sendRecvTimeoutSeconds) {
            return sendRecvTimeoutSeconds(Output.of(sendRecvTimeoutSeconds));
        }

        public BackendPoolsSettingsArgs build() {
            $.enforceCertificateNameCheck = Codegen.stringProp("enforceCertificateNameCheck").left(EnforceCertificateNameCheckEnabledState.class).output().arg($.enforceCertificateNameCheck).def("Enabled").getNullable();
            return $;
        }
    }

}
