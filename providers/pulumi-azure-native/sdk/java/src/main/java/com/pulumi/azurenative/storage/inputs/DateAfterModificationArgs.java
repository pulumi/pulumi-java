// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.storage.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Object to define the number of days after object last modification Or last access. Properties daysAfterModificationGreaterThan and daysAfterLastAccessTimeGreaterThan are mutually exclusive.
 * 
 */
public final class DateAfterModificationArgs extends com.pulumi.resources.ResourceArgs {

    public static final DateAfterModificationArgs Empty = new DateAfterModificationArgs();

    /**
     * Value indicating the age in days after last blob access. This property can only be used in conjunction with last access time tracking policy
     * 
     */
    @Import(name="daysAfterLastAccessTimeGreaterThan")
    private @Nullable Output<Double> daysAfterLastAccessTimeGreaterThan;

    public Optional<Output<Double>> daysAfterLastAccessTimeGreaterThan() {
        return Optional.ofNullable(this.daysAfterLastAccessTimeGreaterThan);
    }

    /**
     * Value indicating the age in days after last modification
     * 
     */
    @Import(name="daysAfterModificationGreaterThan")
    private @Nullable Output<Double> daysAfterModificationGreaterThan;

    public Optional<Output<Double>> daysAfterModificationGreaterThan() {
        return Optional.ofNullable(this.daysAfterModificationGreaterThan);
    }

    private DateAfterModificationArgs() {}

    private DateAfterModificationArgs(DateAfterModificationArgs $) {
        this.daysAfterLastAccessTimeGreaterThan = $.daysAfterLastAccessTimeGreaterThan;
        this.daysAfterModificationGreaterThan = $.daysAfterModificationGreaterThan;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DateAfterModificationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DateAfterModificationArgs $;

        public Builder() {
            $ = new DateAfterModificationArgs();
        }

        public Builder(DateAfterModificationArgs defaults) {
            $ = new DateAfterModificationArgs(Objects.requireNonNull(defaults));
        }

        public Builder daysAfterLastAccessTimeGreaterThan(@Nullable Output<Double> daysAfterLastAccessTimeGreaterThan) {
            $.daysAfterLastAccessTimeGreaterThan = daysAfterLastAccessTimeGreaterThan;
            return this;
        }

        public Builder daysAfterLastAccessTimeGreaterThan(Double daysAfterLastAccessTimeGreaterThan) {
            return daysAfterLastAccessTimeGreaterThan(Output.of(daysAfterLastAccessTimeGreaterThan));
        }

        public Builder daysAfterModificationGreaterThan(@Nullable Output<Double> daysAfterModificationGreaterThan) {
            $.daysAfterModificationGreaterThan = daysAfterModificationGreaterThan;
            return this;
        }

        public Builder daysAfterModificationGreaterThan(Double daysAfterModificationGreaterThan) {
            return daysAfterModificationGreaterThan(Output.of(daysAfterModificationGreaterThan));
        }

        public DateAfterModificationArgs build() {
            return $;
        }
    }

}
