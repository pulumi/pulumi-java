// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network;

import com.pulumi.azurenative.network.enums.AccessRuleDirection;
import com.pulumi.azurenative.network.inputs.PerimeterBasedAccessRuleArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NspAccessRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final NspAccessRuleArgs Empty = new NspAccessRuleArgs();

    /**
     * The name of the NSP access rule.
     * 
     */
    @Import(name="accessRuleName")
    private @Nullable Output<String> accessRuleName;

    /**
     * @return The name of the NSP access rule.
     * 
     */
    public Optional<Output<String>> accessRuleName() {
        return Optional.ofNullable(this.accessRuleName);
    }

    /**
     * Inbound address prefixes (IPv4/IPv6)
     * 
     */
    @Import(name="addressPrefixes")
    private @Nullable Output<List<String>> addressPrefixes;

    /**
     * @return Inbound address prefixes (IPv4/IPv6)
     * 
     */
    public Optional<Output<List<String>>> addressPrefixes() {
        return Optional.ofNullable(this.addressPrefixes);
    }

    /**
     * Direction that specifies whether the access rules is inbound/outbound.
     * 
     */
    @Import(name="direction")
    private @Nullable Output<Either<String,AccessRuleDirection>> direction;

    /**
     * @return Direction that specifies whether the access rules is inbound/outbound.
     * 
     */
    public Optional<Output<Either<String,AccessRuleDirection>>> direction() {
        return Optional.ofNullable(this.direction);
    }

    /**
     * Outbound rules fully qualified domain name format.
     * 
     */
    @Import(name="fullyQualifiedDomainNames")
    private @Nullable Output<List<String>> fullyQualifiedDomainNames;

    /**
     * @return Outbound rules fully qualified domain name format.
     * 
     */
    public Optional<Output<List<String>>> fullyQualifiedDomainNames() {
        return Optional.ofNullable(this.fullyQualifiedDomainNames);
    }

    /**
     * Resource ID.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return Resource ID.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Resource location.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Resource location.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name of the access rule that is unique within a profile. This name can be used to access the resource.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the access rule that is unique within a profile. This name can be used to access the resource.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The name of the network security perimeter.
     * 
     */
    @Import(name="networkSecurityPerimeterName", required=true)
    private Output<String> networkSecurityPerimeterName;

    /**
     * @return The name of the network security perimeter.
     * 
     */
    public Output<String> networkSecurityPerimeterName() {
        return this.networkSecurityPerimeterName;
    }

    /**
     * Inbound rule specified by the perimeter id.
     * 
     */
    @Import(name="networkSecurityPerimeters")
    private @Nullable Output<List<PerimeterBasedAccessRuleArgs>> networkSecurityPerimeters;

    /**
     * @return Inbound rule specified by the perimeter id.
     * 
     */
    public Optional<Output<List<PerimeterBasedAccessRuleArgs>>> networkSecurityPerimeters() {
        return Optional.ofNullable(this.networkSecurityPerimeters);
    }

    /**
     * The name of the NSP profile.
     * 
     */
    @Import(name="profileName", required=true)
    private Output<String> profileName;

    /**
     * @return The name of the NSP profile.
     * 
     */
    public Output<String> profileName() {
        return this.profileName;
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Subscription id in the ARM id format.
     * 
     */
    @Import(name="subscriptions")
    private @Nullable Output<List<String>> subscriptions;

    /**
     * @return Subscription id in the ARM id format.
     * 
     */
    public Optional<Output<List<String>>> subscriptions() {
        return Optional.ofNullable(this.subscriptions);
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Resource tags.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private NspAccessRuleArgs() {}

    private NspAccessRuleArgs(NspAccessRuleArgs $) {
        this.accessRuleName = $.accessRuleName;
        this.addressPrefixes = $.addressPrefixes;
        this.direction = $.direction;
        this.fullyQualifiedDomainNames = $.fullyQualifiedDomainNames;
        this.id = $.id;
        this.location = $.location;
        this.name = $.name;
        this.networkSecurityPerimeterName = $.networkSecurityPerimeterName;
        this.networkSecurityPerimeters = $.networkSecurityPerimeters;
        this.profileName = $.profileName;
        this.resourceGroupName = $.resourceGroupName;
        this.subscriptions = $.subscriptions;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NspAccessRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NspAccessRuleArgs $;

        public Builder() {
            $ = new NspAccessRuleArgs();
        }

        public Builder(NspAccessRuleArgs defaults) {
            $ = new NspAccessRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessRuleName The name of the NSP access rule.
         * 
         * @return builder
         * 
         */
        public Builder accessRuleName(@Nullable Output<String> accessRuleName) {
            $.accessRuleName = accessRuleName;
            return this;
        }

        /**
         * @param accessRuleName The name of the NSP access rule.
         * 
         * @return builder
         * 
         */
        public Builder accessRuleName(String accessRuleName) {
            return accessRuleName(Output.of(accessRuleName));
        }

        /**
         * @param addressPrefixes Inbound address prefixes (IPv4/IPv6)
         * 
         * @return builder
         * 
         */
        public Builder addressPrefixes(@Nullable Output<List<String>> addressPrefixes) {
            $.addressPrefixes = addressPrefixes;
            return this;
        }

        /**
         * @param addressPrefixes Inbound address prefixes (IPv4/IPv6)
         * 
         * @return builder
         * 
         */
        public Builder addressPrefixes(List<String> addressPrefixes) {
            return addressPrefixes(Output.of(addressPrefixes));
        }

        /**
         * @param addressPrefixes Inbound address prefixes (IPv4/IPv6)
         * 
         * @return builder
         * 
         */
        public Builder addressPrefixes(String... addressPrefixes) {
            return addressPrefixes(List.of(addressPrefixes));
        }

        /**
         * @param direction Direction that specifies whether the access rules is inbound/outbound.
         * 
         * @return builder
         * 
         */
        public Builder direction(@Nullable Output<Either<String,AccessRuleDirection>> direction) {
            $.direction = direction;
            return this;
        }

        /**
         * @param direction Direction that specifies whether the access rules is inbound/outbound.
         * 
         * @return builder
         * 
         */
        public Builder direction(Either<String,AccessRuleDirection> direction) {
            return direction(Output.of(direction));
        }

        /**
         * @param direction Direction that specifies whether the access rules is inbound/outbound.
         * 
         * @return builder
         * 
         */
        public Builder direction(String direction) {
            return direction(Either.ofLeft(direction));
        }

        /**
         * @param direction Direction that specifies whether the access rules is inbound/outbound.
         * 
         * @return builder
         * 
         */
        public Builder direction(AccessRuleDirection direction) {
            return direction(Either.ofRight(direction));
        }

        /**
         * @param fullyQualifiedDomainNames Outbound rules fully qualified domain name format.
         * 
         * @return builder
         * 
         */
        public Builder fullyQualifiedDomainNames(@Nullable Output<List<String>> fullyQualifiedDomainNames) {
            $.fullyQualifiedDomainNames = fullyQualifiedDomainNames;
            return this;
        }

        /**
         * @param fullyQualifiedDomainNames Outbound rules fully qualified domain name format.
         * 
         * @return builder
         * 
         */
        public Builder fullyQualifiedDomainNames(List<String> fullyQualifiedDomainNames) {
            return fullyQualifiedDomainNames(Output.of(fullyQualifiedDomainNames));
        }

        /**
         * @param fullyQualifiedDomainNames Outbound rules fully qualified domain name format.
         * 
         * @return builder
         * 
         */
        public Builder fullyQualifiedDomainNames(String... fullyQualifiedDomainNames) {
            return fullyQualifiedDomainNames(List.of(fullyQualifiedDomainNames));
        }

        /**
         * @param id Resource ID.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id Resource ID.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param location Resource location.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Resource location.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name The name of the access rule that is unique within a profile. This name can be used to access the resource.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the access rule that is unique within a profile. This name can be used to access the resource.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networkSecurityPerimeterName The name of the network security perimeter.
         * 
         * @return builder
         * 
         */
        public Builder networkSecurityPerimeterName(Output<String> networkSecurityPerimeterName) {
            $.networkSecurityPerimeterName = networkSecurityPerimeterName;
            return this;
        }

        /**
         * @param networkSecurityPerimeterName The name of the network security perimeter.
         * 
         * @return builder
         * 
         */
        public Builder networkSecurityPerimeterName(String networkSecurityPerimeterName) {
            return networkSecurityPerimeterName(Output.of(networkSecurityPerimeterName));
        }

        /**
         * @param networkSecurityPerimeters Inbound rule specified by the perimeter id.
         * 
         * @return builder
         * 
         */
        public Builder networkSecurityPerimeters(@Nullable Output<List<PerimeterBasedAccessRuleArgs>> networkSecurityPerimeters) {
            $.networkSecurityPerimeters = networkSecurityPerimeters;
            return this;
        }

        /**
         * @param networkSecurityPerimeters Inbound rule specified by the perimeter id.
         * 
         * @return builder
         * 
         */
        public Builder networkSecurityPerimeters(List<PerimeterBasedAccessRuleArgs> networkSecurityPerimeters) {
            return networkSecurityPerimeters(Output.of(networkSecurityPerimeters));
        }

        /**
         * @param networkSecurityPerimeters Inbound rule specified by the perimeter id.
         * 
         * @return builder
         * 
         */
        public Builder networkSecurityPerimeters(PerimeterBasedAccessRuleArgs... networkSecurityPerimeters) {
            return networkSecurityPerimeters(List.of(networkSecurityPerimeters));
        }

        /**
         * @param profileName The name of the NSP profile.
         * 
         * @return builder
         * 
         */
        public Builder profileName(Output<String> profileName) {
            $.profileName = profileName;
            return this;
        }

        /**
         * @param profileName The name of the NSP profile.
         * 
         * @return builder
         * 
         */
        public Builder profileName(String profileName) {
            return profileName(Output.of(profileName));
        }

        /**
         * @param resourceGroupName The name of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param subscriptions Subscription id in the ARM id format.
         * 
         * @return builder
         * 
         */
        public Builder subscriptions(@Nullable Output<List<String>> subscriptions) {
            $.subscriptions = subscriptions;
            return this;
        }

        /**
         * @param subscriptions Subscription id in the ARM id format.
         * 
         * @return builder
         * 
         */
        public Builder subscriptions(List<String> subscriptions) {
            return subscriptions(Output.of(subscriptions));
        }

        /**
         * @param subscriptions Subscription id in the ARM id format.
         * 
         * @return builder
         * 
         */
        public Builder subscriptions(String... subscriptions) {
            return subscriptions(List.of(subscriptions));
        }

        /**
         * @param tags Resource tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Resource tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public NspAccessRuleArgs build() {
            $.networkSecurityPerimeterName = Objects.requireNonNull($.networkSecurityPerimeterName, "expected parameter 'networkSecurityPerimeterName' to be non-null");
            $.profileName = Objects.requireNonNull($.profileName, "expected parameter 'profileName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
