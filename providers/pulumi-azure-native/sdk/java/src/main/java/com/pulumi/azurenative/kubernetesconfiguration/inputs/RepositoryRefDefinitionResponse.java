// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.kubernetesconfiguration.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The source reference for the GitRepository object.
 * 
 */
public final class RepositoryRefDefinitionResponse extends com.pulumi.resources.InvokeArgs {

    public static final RepositoryRefDefinitionResponse Empty = new RepositoryRefDefinitionResponse();

    /**
     * The git repository branch name to checkout.
     * 
     */
    @Import(name="branch")
    private @Nullable String branch;

    /**
     * @return The git repository branch name to checkout.
     * 
     */
    public Optional<String> branch() {
        return Optional.ofNullable(this.branch);
    }

    /**
     * The commit SHA to checkout. This value must be combined with the branch name to be valid. This takes precedence over semver.
     * 
     */
    @Import(name="commit")
    private @Nullable String commit;

    /**
     * @return The commit SHA to checkout. This value must be combined with the branch name to be valid. This takes precedence over semver.
     * 
     */
    public Optional<String> commit() {
        return Optional.ofNullable(this.commit);
    }

    /**
     * The semver range used to match against git repository tags. This takes precedence over tag.
     * 
     */
    @Import(name="semver")
    private @Nullable String semver;

    /**
     * @return The semver range used to match against git repository tags. This takes precedence over tag.
     * 
     */
    public Optional<String> semver() {
        return Optional.ofNullable(this.semver);
    }

    /**
     * The git repository tag name to checkout. This takes precedence over branch.
     * 
     */
    @Import(name="tag")
    private @Nullable String tag;

    /**
     * @return The git repository tag name to checkout. This takes precedence over branch.
     * 
     */
    public Optional<String> tag() {
        return Optional.ofNullable(this.tag);
    }

    private RepositoryRefDefinitionResponse() {}

    private RepositoryRefDefinitionResponse(RepositoryRefDefinitionResponse $) {
        this.branch = $.branch;
        this.commit = $.commit;
        this.semver = $.semver;
        this.tag = $.tag;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RepositoryRefDefinitionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RepositoryRefDefinitionResponse $;

        public Builder() {
            $ = new RepositoryRefDefinitionResponse();
        }

        public Builder(RepositoryRefDefinitionResponse defaults) {
            $ = new RepositoryRefDefinitionResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param branch The git repository branch name to checkout.
         * 
         * @return builder
         * 
         */
        public Builder branch(@Nullable String branch) {
            $.branch = branch;
            return this;
        }

        /**
         * @param commit The commit SHA to checkout. This value must be combined with the branch name to be valid. This takes precedence over semver.
         * 
         * @return builder
         * 
         */
        public Builder commit(@Nullable String commit) {
            $.commit = commit;
            return this;
        }

        /**
         * @param semver The semver range used to match against git repository tags. This takes precedence over tag.
         * 
         * @return builder
         * 
         */
        public Builder semver(@Nullable String semver) {
            $.semver = semver;
            return this;
        }

        /**
         * @param tag The git repository tag name to checkout. This takes precedence over branch.
         * 
         * @return builder
         * 
         */
        public Builder tag(@Nullable String tag) {
            $.tag = tag;
            return this;
        }

        public RepositoryRefDefinitionResponse build() {
            return $;
        }
    }

}
