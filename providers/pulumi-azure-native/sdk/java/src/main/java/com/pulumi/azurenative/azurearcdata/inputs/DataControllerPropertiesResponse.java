// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.azurearcdata.inputs;

import com.pulumi.azurenative.azurearcdata.inputs.BasicLoginInformationResponse;
import com.pulumi.azurenative.azurearcdata.inputs.LogAnalyticsWorkspaceConfigResponse;
import com.pulumi.azurenative.azurearcdata.inputs.OnPremisePropertyResponse;
import com.pulumi.azurenative.azurearcdata.inputs.UploadServicePrincipalResponse;
import com.pulumi.azurenative.azurearcdata.inputs.UploadWatermarkResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The data controller properties.
 * 
 */
public final class DataControllerPropertiesResponse extends com.pulumi.resources.InvokeArgs {

    public static final DataControllerPropertiesResponse Empty = new DataControllerPropertiesResponse();

    /**
     * Username and password for basic login authentication.
     * 
     */
    @Import(name="basicLoginInformation")
    private @Nullable BasicLoginInformationResponse basicLoginInformation;

    public Optional<BasicLoginInformationResponse> basicLoginInformation() {
        return Optional.ofNullable(this.basicLoginInformation);
    }

    /**
     * The raw kubernetes information
     * 
     */
    @Import(name="k8sRaw")
    private @Nullable Object k8sRaw;

    public Optional<Object> k8sRaw() {
        return Optional.ofNullable(this.k8sRaw);
    }

    /**
     * Last uploaded date from Kubernetes cluster. Defaults to current date time
     * 
     */
    @Import(name="lastUploadedDate")
    private @Nullable String lastUploadedDate;

    public Optional<String> lastUploadedDate() {
        return Optional.ofNullable(this.lastUploadedDate);
    }

    /**
     * Log analytics workspace id and primary key
     * 
     */
    @Import(name="logAnalyticsWorkspaceConfig")
    private @Nullable LogAnalyticsWorkspaceConfigResponse logAnalyticsWorkspaceConfig;

    public Optional<LogAnalyticsWorkspaceConfigResponse> logAnalyticsWorkspaceConfig() {
        return Optional.ofNullable(this.logAnalyticsWorkspaceConfig);
    }

    /**
     * Properties from the Kubernetes data controller
     * 
     */
    @Import(name="onPremiseProperty")
    private @Nullable OnPremisePropertyResponse onPremiseProperty;

    public Optional<OnPremisePropertyResponse> onPremiseProperty() {
        return Optional.ofNullable(this.onPremiseProperty);
    }

    @Import(name="provisioningState", required=true)
    private String provisioningState;

    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Service principal for uploading billing, metrics and logs.
     * 
     */
    @Import(name="uploadServicePrincipal")
    private @Nullable UploadServicePrincipalResponse uploadServicePrincipal;

    public Optional<UploadServicePrincipalResponse> uploadServicePrincipal() {
        return Optional.ofNullable(this.uploadServicePrincipal);
    }

    /**
     * Properties on upload watermark.  Mostly timestamp for each upload data type
     * 
     */
    @Import(name="uploadWatermark")
    private @Nullable UploadWatermarkResponse uploadWatermark;

    public Optional<UploadWatermarkResponse> uploadWatermark() {
        return Optional.ofNullable(this.uploadWatermark);
    }

    private DataControllerPropertiesResponse() {}

    private DataControllerPropertiesResponse(DataControllerPropertiesResponse $) {
        this.basicLoginInformation = $.basicLoginInformation;
        this.k8sRaw = $.k8sRaw;
        this.lastUploadedDate = $.lastUploadedDate;
        this.logAnalyticsWorkspaceConfig = $.logAnalyticsWorkspaceConfig;
        this.onPremiseProperty = $.onPremiseProperty;
        this.provisioningState = $.provisioningState;
        this.uploadServicePrincipal = $.uploadServicePrincipal;
        this.uploadWatermark = $.uploadWatermark;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataControllerPropertiesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataControllerPropertiesResponse $;

        public Builder() {
            $ = new DataControllerPropertiesResponse();
        }

        public Builder(DataControllerPropertiesResponse defaults) {
            $ = new DataControllerPropertiesResponse(Objects.requireNonNull(defaults));
        }

        public Builder basicLoginInformation(@Nullable BasicLoginInformationResponse basicLoginInformation) {
            $.basicLoginInformation = basicLoginInformation;
            return this;
        }

        public Builder k8sRaw(@Nullable Object k8sRaw) {
            $.k8sRaw = k8sRaw;
            return this;
        }

        public Builder lastUploadedDate(@Nullable String lastUploadedDate) {
            $.lastUploadedDate = lastUploadedDate;
            return this;
        }

        public Builder logAnalyticsWorkspaceConfig(@Nullable LogAnalyticsWorkspaceConfigResponse logAnalyticsWorkspaceConfig) {
            $.logAnalyticsWorkspaceConfig = logAnalyticsWorkspaceConfig;
            return this;
        }

        public Builder onPremiseProperty(@Nullable OnPremisePropertyResponse onPremiseProperty) {
            $.onPremiseProperty = onPremiseProperty;
            return this;
        }

        public Builder provisioningState(String provisioningState) {
            $.provisioningState = provisioningState;
            return this;
        }

        public Builder uploadServicePrincipal(@Nullable UploadServicePrincipalResponse uploadServicePrincipal) {
            $.uploadServicePrincipal = uploadServicePrincipal;
            return this;
        }

        public Builder uploadWatermark(@Nullable UploadWatermarkResponse uploadWatermark) {
            $.uploadWatermark = uploadWatermark;
            return this;
        }

        public DataControllerPropertiesResponse build() {
            $.provisioningState = Objects.requireNonNull($.provisioningState, "expected parameter 'provisioningState' to be non-null");
            return $;
        }
    }

}
