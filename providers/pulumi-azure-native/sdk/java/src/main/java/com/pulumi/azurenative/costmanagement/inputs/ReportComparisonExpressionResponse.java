// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.costmanagement.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * The comparison expression to be used in the report.
 * 
 */
public final class ReportComparisonExpressionResponse extends com.pulumi.resources.InvokeArgs {

    public static final ReportComparisonExpressionResponse Empty = new ReportComparisonExpressionResponse();

    /**
     * The name of the column to use in comparison.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    public String name() {
        return this.name;
    }

    /**
     * The operator to use for comparison.
     * 
     */
    @Import(name="operator", required=true)
    private String operator;

    public String operator() {
        return this.operator;
    }

    /**
     * Array of values to use for comparison
     * 
     */
    @Import(name="values", required=true)
    private List<String> values;

    public List<String> values() {
        return this.values;
    }

    private ReportComparisonExpressionResponse() {}

    private ReportComparisonExpressionResponse(ReportComparisonExpressionResponse $) {
        this.name = $.name;
        this.operator = $.operator;
        this.values = $.values;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ReportComparisonExpressionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ReportComparisonExpressionResponse $;

        public Builder() {
            $ = new ReportComparisonExpressionResponse();
        }

        public Builder(ReportComparisonExpressionResponse defaults) {
            $ = new ReportComparisonExpressionResponse(Objects.requireNonNull(defaults));
        }

        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public Builder operator(String operator) {
            $.operator = operator;
            return this;
        }

        public Builder values(List<String> values) {
            $.values = values;
            return this;
        }

        public Builder values(String... values) {
            return values(List.of(values));
        }

        public ReportComparisonExpressionResponse build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.operator = Objects.requireNonNull($.operator, "expected parameter 'operator' to be non-null");
            $.values = Objects.requireNonNull($.values, "expected parameter 'values' to be non-null");
            return $;
        }
    }

}
