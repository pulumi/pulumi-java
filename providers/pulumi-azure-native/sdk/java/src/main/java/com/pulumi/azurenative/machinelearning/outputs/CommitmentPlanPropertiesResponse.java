// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.machinelearning.outputs;

import com.pulumi.azurenative.machinelearning.outputs.PlanQuantityResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class CommitmentPlanPropertiesResponse {
    /**
     * Indicates whether usage beyond the commitment plan&#39;s included quantities will be charged.
     * 
     */
    private final Boolean chargeForOverage;
    /**
     * Indicates whether the commitment plan will incur a charge.
     * 
     */
    private final Boolean chargeForPlan;
    /**
     * The date at which this commitment plan was created, in ISO 8601 format.
     * 
     */
    private final String creationDate;
    /**
     * The included resource quantities this plan gives you.
     * 
     */
    private final Map<String,PlanQuantityResponse> includedQuantities;
    /**
     * The maximum number of commitment associations that can be children of this commitment plan.
     * 
     */
    private final Integer maxAssociationLimit;
    /**
     * The maximum scale-out capacity for this commitment plan.
     * 
     */
    private final Integer maxCapacityLimit;
    /**
     * The minimum scale-out capacity for this commitment plan.
     * 
     */
    private final Integer minCapacityLimit;
    /**
     * The Azure meter which will be used to charge for this commitment plan.
     * 
     */
    private final String planMeter;
    /**
     * The frequency at which this commitment plan&#39;s included quantities are refilled.
     * 
     */
    private final Integer refillFrequencyInDays;
    /**
     * Indicates whether this commitment plan will be moved into a suspended state if usage goes beyond the commitment plan&#39;s included quantities.
     * 
     */
    private final Boolean suspendPlanOnOverage;

    @CustomType.Constructor
    private CommitmentPlanPropertiesResponse(
        @CustomType.Parameter("chargeForOverage") Boolean chargeForOverage,
        @CustomType.Parameter("chargeForPlan") Boolean chargeForPlan,
        @CustomType.Parameter("creationDate") String creationDate,
        @CustomType.Parameter("includedQuantities") Map<String,PlanQuantityResponse> includedQuantities,
        @CustomType.Parameter("maxAssociationLimit") Integer maxAssociationLimit,
        @CustomType.Parameter("maxCapacityLimit") Integer maxCapacityLimit,
        @CustomType.Parameter("minCapacityLimit") Integer minCapacityLimit,
        @CustomType.Parameter("planMeter") String planMeter,
        @CustomType.Parameter("refillFrequencyInDays") Integer refillFrequencyInDays,
        @CustomType.Parameter("suspendPlanOnOverage") Boolean suspendPlanOnOverage) {
        this.chargeForOverage = chargeForOverage;
        this.chargeForPlan = chargeForPlan;
        this.creationDate = creationDate;
        this.includedQuantities = includedQuantities;
        this.maxAssociationLimit = maxAssociationLimit;
        this.maxCapacityLimit = maxCapacityLimit;
        this.minCapacityLimit = minCapacityLimit;
        this.planMeter = planMeter;
        this.refillFrequencyInDays = refillFrequencyInDays;
        this.suspendPlanOnOverage = suspendPlanOnOverage;
    }

    /**
     * Indicates whether usage beyond the commitment plan&#39;s included quantities will be charged.
     * 
    */
    public Boolean chargeForOverage() {
        return this.chargeForOverage;
    }
    /**
     * Indicates whether the commitment plan will incur a charge.
     * 
    */
    public Boolean chargeForPlan() {
        return this.chargeForPlan;
    }
    /**
     * The date at which this commitment plan was created, in ISO 8601 format.
     * 
    */
    public String creationDate() {
        return this.creationDate;
    }
    /**
     * The included resource quantities this plan gives you.
     * 
    */
    public Map<String,PlanQuantityResponse> includedQuantities() {
        return this.includedQuantities;
    }
    /**
     * The maximum number of commitment associations that can be children of this commitment plan.
     * 
    */
    public Integer maxAssociationLimit() {
        return this.maxAssociationLimit;
    }
    /**
     * The maximum scale-out capacity for this commitment plan.
     * 
    */
    public Integer maxCapacityLimit() {
        return this.maxCapacityLimit;
    }
    /**
     * The minimum scale-out capacity for this commitment plan.
     * 
    */
    public Integer minCapacityLimit() {
        return this.minCapacityLimit;
    }
    /**
     * The Azure meter which will be used to charge for this commitment plan.
     * 
    */
    public String planMeter() {
        return this.planMeter;
    }
    /**
     * The frequency at which this commitment plan&#39;s included quantities are refilled.
     * 
    */
    public Integer refillFrequencyInDays() {
        return this.refillFrequencyInDays;
    }
    /**
     * Indicates whether this commitment plan will be moved into a suspended state if usage goes beyond the commitment plan&#39;s included quantities.
     * 
    */
    public Boolean suspendPlanOnOverage() {
        return this.suspendPlanOnOverage;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CommitmentPlanPropertiesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Boolean chargeForOverage;
        private Boolean chargeForPlan;
        private String creationDate;
        private Map<String,PlanQuantityResponse> includedQuantities;
        private Integer maxAssociationLimit;
        private Integer maxCapacityLimit;
        private Integer minCapacityLimit;
        private String planMeter;
        private Integer refillFrequencyInDays;
        private Boolean suspendPlanOnOverage;

        public Builder() {
    	      // Empty
        }

        public Builder(CommitmentPlanPropertiesResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.chargeForOverage = defaults.chargeForOverage;
    	      this.chargeForPlan = defaults.chargeForPlan;
    	      this.creationDate = defaults.creationDate;
    	      this.includedQuantities = defaults.includedQuantities;
    	      this.maxAssociationLimit = defaults.maxAssociationLimit;
    	      this.maxCapacityLimit = defaults.maxCapacityLimit;
    	      this.minCapacityLimit = defaults.minCapacityLimit;
    	      this.planMeter = defaults.planMeter;
    	      this.refillFrequencyInDays = defaults.refillFrequencyInDays;
    	      this.suspendPlanOnOverage = defaults.suspendPlanOnOverage;
        }

        public Builder chargeForOverage(Boolean chargeForOverage) {
            this.chargeForOverage = Objects.requireNonNull(chargeForOverage);
            return this;
        }
        public Builder chargeForPlan(Boolean chargeForPlan) {
            this.chargeForPlan = Objects.requireNonNull(chargeForPlan);
            return this;
        }
        public Builder creationDate(String creationDate) {
            this.creationDate = Objects.requireNonNull(creationDate);
            return this;
        }
        public Builder includedQuantities(Map<String,PlanQuantityResponse> includedQuantities) {
            this.includedQuantities = Objects.requireNonNull(includedQuantities);
            return this;
        }
        public Builder maxAssociationLimit(Integer maxAssociationLimit) {
            this.maxAssociationLimit = Objects.requireNonNull(maxAssociationLimit);
            return this;
        }
        public Builder maxCapacityLimit(Integer maxCapacityLimit) {
            this.maxCapacityLimit = Objects.requireNonNull(maxCapacityLimit);
            return this;
        }
        public Builder minCapacityLimit(Integer minCapacityLimit) {
            this.minCapacityLimit = Objects.requireNonNull(minCapacityLimit);
            return this;
        }
        public Builder planMeter(String planMeter) {
            this.planMeter = Objects.requireNonNull(planMeter);
            return this;
        }
        public Builder refillFrequencyInDays(Integer refillFrequencyInDays) {
            this.refillFrequencyInDays = Objects.requireNonNull(refillFrequencyInDays);
            return this;
        }
        public Builder suspendPlanOnOverage(Boolean suspendPlanOnOverage) {
            this.suspendPlanOnOverage = Objects.requireNonNull(suspendPlanOnOverage);
            return this;
        }        public CommitmentPlanPropertiesResponse build() {
            return new CommitmentPlanPropertiesResponse(chargeForOverage, chargeForPlan, creationDate, includedQuantities, maxAssociationLimit, maxCapacityLimit, minCapacityLimit, planMeter, refillFrequencyInDays, suspendPlanOnOverage);
        }
    }
}
