// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.containerregistry;

import com.pulumi.azurenative.containerregistry.inputs.PipelineRunRequestArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PipelineRunArgs extends com.pulumi.resources.ResourceArgs {

    public static final PipelineRunArgs Empty = new PipelineRunArgs();

    /**
     * How the pipeline run should be forced to recreate even if the pipeline run configuration has not changed.
     * 
     */
    @Import(name="forceUpdateTag")
    private @Nullable Output<String> forceUpdateTag;

    /**
     * @return How the pipeline run should be forced to recreate even if the pipeline run configuration has not changed.
     * 
     */
    public Optional<Output<String>> forceUpdateTag() {
        return Optional.ofNullable(this.forceUpdateTag);
    }

    /**
     * The name of the pipeline run.
     * 
     */
    @Import(name="pipelineRunName")
    private @Nullable Output<String> pipelineRunName;

    /**
     * @return The name of the pipeline run.
     * 
     */
    public Optional<Output<String>> pipelineRunName() {
        return Optional.ofNullable(this.pipelineRunName);
    }

    /**
     * The name of the container registry.
     * 
     */
    @Import(name="registryName", required=true)
    private Output<String> registryName;

    /**
     * @return The name of the container registry.
     * 
     */
    public Output<String> registryName() {
        return this.registryName;
    }

    /**
     * The request parameters for a pipeline run.
     * 
     */
    @Import(name="request")
    private @Nullable Output<PipelineRunRequestArgs> request;

    /**
     * @return The request parameters for a pipeline run.
     * 
     */
    public Optional<Output<PipelineRunRequestArgs>> request() {
        return Optional.ofNullable(this.request);
    }

    /**
     * The name of the resource group to which the container registry belongs.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group to which the container registry belongs.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    private PipelineRunArgs() {}

    private PipelineRunArgs(PipelineRunArgs $) {
        this.forceUpdateTag = $.forceUpdateTag;
        this.pipelineRunName = $.pipelineRunName;
        this.registryName = $.registryName;
        this.request = $.request;
        this.resourceGroupName = $.resourceGroupName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PipelineRunArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PipelineRunArgs $;

        public Builder() {
            $ = new PipelineRunArgs();
        }

        public Builder(PipelineRunArgs defaults) {
            $ = new PipelineRunArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param forceUpdateTag How the pipeline run should be forced to recreate even if the pipeline run configuration has not changed.
         * 
         * @return builder
         * 
         */
        public Builder forceUpdateTag(@Nullable Output<String> forceUpdateTag) {
            $.forceUpdateTag = forceUpdateTag;
            return this;
        }

        /**
         * @param forceUpdateTag How the pipeline run should be forced to recreate even if the pipeline run configuration has not changed.
         * 
         * @return builder
         * 
         */
        public Builder forceUpdateTag(String forceUpdateTag) {
            return forceUpdateTag(Output.of(forceUpdateTag));
        }

        /**
         * @param pipelineRunName The name of the pipeline run.
         * 
         * @return builder
         * 
         */
        public Builder pipelineRunName(@Nullable Output<String> pipelineRunName) {
            $.pipelineRunName = pipelineRunName;
            return this;
        }

        /**
         * @param pipelineRunName The name of the pipeline run.
         * 
         * @return builder
         * 
         */
        public Builder pipelineRunName(String pipelineRunName) {
            return pipelineRunName(Output.of(pipelineRunName));
        }

        /**
         * @param registryName The name of the container registry.
         * 
         * @return builder
         * 
         */
        public Builder registryName(Output<String> registryName) {
            $.registryName = registryName;
            return this;
        }

        /**
         * @param registryName The name of the container registry.
         * 
         * @return builder
         * 
         */
        public Builder registryName(String registryName) {
            return registryName(Output.of(registryName));
        }

        /**
         * @param request The request parameters for a pipeline run.
         * 
         * @return builder
         * 
         */
        public Builder request(@Nullable Output<PipelineRunRequestArgs> request) {
            $.request = request;
            return this;
        }

        /**
         * @param request The request parameters for a pipeline run.
         * 
         * @return builder
         * 
         */
        public Builder request(PipelineRunRequestArgs request) {
            return request(Output.of(request));
        }

        /**
         * @param resourceGroupName The name of the resource group to which the container registry belongs.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group to which the container registry belongs.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public PipelineRunArgs build() {
            $.registryName = Objects.requireNonNull($.registryName, "expected parameter 'registryName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
