// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datamigration.inputs;

import com.pulumi.azurenative.datamigration.inputs.SqlConnectionInfoArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Input for the task that collects user tables for the given list of databases
 * 
 */
public final class GetUserTablesSqlSyncTaskInputArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetUserTablesSqlSyncTaskInputArgs Empty = new GetUserTablesSqlSyncTaskInputArgs();

    /**
     * List of source database names to collect tables for
     * 
     */
    @Import(name="selectedSourceDatabases", required=true)
      private final Output<List<String>> selectedSourceDatabases;

    public Output<List<String>> selectedSourceDatabases() {
        return this.selectedSourceDatabases;
    }

    /**
     * List of target database names to collect tables for
     * 
     */
    @Import(name="selectedTargetDatabases", required=true)
      private final Output<List<String>> selectedTargetDatabases;

    public Output<List<String>> selectedTargetDatabases() {
        return this.selectedTargetDatabases;
    }

    /**
     * Connection information for SQL Server
     * 
     */
    @Import(name="sourceConnectionInfo", required=true)
      private final Output<SqlConnectionInfoArgs> sourceConnectionInfo;

    public Output<SqlConnectionInfoArgs> sourceConnectionInfo() {
        return this.sourceConnectionInfo;
    }

    /**
     * Connection information for SQL DB
     * 
     */
    @Import(name="targetConnectionInfo", required=true)
      private final Output<SqlConnectionInfoArgs> targetConnectionInfo;

    public Output<SqlConnectionInfoArgs> targetConnectionInfo() {
        return this.targetConnectionInfo;
    }

    public GetUserTablesSqlSyncTaskInputArgs(
        Output<List<String>> selectedSourceDatabases,
        Output<List<String>> selectedTargetDatabases,
        Output<SqlConnectionInfoArgs> sourceConnectionInfo,
        Output<SqlConnectionInfoArgs> targetConnectionInfo) {
        this.selectedSourceDatabases = Objects.requireNonNull(selectedSourceDatabases, "expected parameter 'selectedSourceDatabases' to be non-null");
        this.selectedTargetDatabases = Objects.requireNonNull(selectedTargetDatabases, "expected parameter 'selectedTargetDatabases' to be non-null");
        this.sourceConnectionInfo = Objects.requireNonNull(sourceConnectionInfo, "expected parameter 'sourceConnectionInfo' to be non-null");
        this.targetConnectionInfo = Objects.requireNonNull(targetConnectionInfo, "expected parameter 'targetConnectionInfo' to be non-null");
    }

    private GetUserTablesSqlSyncTaskInputArgs() {
        this.selectedSourceDatabases = Codegen.empty();
        this.selectedTargetDatabases = Codegen.empty();
        this.sourceConnectionInfo = Codegen.empty();
        this.targetConnectionInfo = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetUserTablesSqlSyncTaskInputArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<List<String>> selectedSourceDatabases;
        private Output<List<String>> selectedTargetDatabases;
        private Output<SqlConnectionInfoArgs> sourceConnectionInfo;
        private Output<SqlConnectionInfoArgs> targetConnectionInfo;

        public Builder() {
    	      // Empty
        }

        public Builder(GetUserTablesSqlSyncTaskInputArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.selectedSourceDatabases = defaults.selectedSourceDatabases;
    	      this.selectedTargetDatabases = defaults.selectedTargetDatabases;
    	      this.sourceConnectionInfo = defaults.sourceConnectionInfo;
    	      this.targetConnectionInfo = defaults.targetConnectionInfo;
        }

        public Builder selectedSourceDatabases(Output<List<String>> selectedSourceDatabases) {
            this.selectedSourceDatabases = Objects.requireNonNull(selectedSourceDatabases);
            return this;
        }
        public Builder selectedSourceDatabases(List<String> selectedSourceDatabases) {
            this.selectedSourceDatabases = Output.of(Objects.requireNonNull(selectedSourceDatabases));
            return this;
        }
        public Builder selectedSourceDatabases(String... selectedSourceDatabases) {
            return selectedSourceDatabases(List.of(selectedSourceDatabases));
        }
        public Builder selectedTargetDatabases(Output<List<String>> selectedTargetDatabases) {
            this.selectedTargetDatabases = Objects.requireNonNull(selectedTargetDatabases);
            return this;
        }
        public Builder selectedTargetDatabases(List<String> selectedTargetDatabases) {
            this.selectedTargetDatabases = Output.of(Objects.requireNonNull(selectedTargetDatabases));
            return this;
        }
        public Builder selectedTargetDatabases(String... selectedTargetDatabases) {
            return selectedTargetDatabases(List.of(selectedTargetDatabases));
        }
        public Builder sourceConnectionInfo(Output<SqlConnectionInfoArgs> sourceConnectionInfo) {
            this.sourceConnectionInfo = Objects.requireNonNull(sourceConnectionInfo);
            return this;
        }
        public Builder sourceConnectionInfo(SqlConnectionInfoArgs sourceConnectionInfo) {
            this.sourceConnectionInfo = Output.of(Objects.requireNonNull(sourceConnectionInfo));
            return this;
        }
        public Builder targetConnectionInfo(Output<SqlConnectionInfoArgs> targetConnectionInfo) {
            this.targetConnectionInfo = Objects.requireNonNull(targetConnectionInfo);
            return this;
        }
        public Builder targetConnectionInfo(SqlConnectionInfoArgs targetConnectionInfo) {
            this.targetConnectionInfo = Output.of(Objects.requireNonNull(targetConnectionInfo));
            return this;
        }        public GetUserTablesSqlSyncTaskInputArgs build() {
            return new GetUserTablesSqlSyncTaskInputArgs(selectedSourceDatabases, selectedTargetDatabases, sourceConnectionInfo, targetConnectionInfo);
        }
    }
}
