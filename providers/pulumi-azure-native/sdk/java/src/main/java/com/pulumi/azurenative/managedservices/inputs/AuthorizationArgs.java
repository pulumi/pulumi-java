// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.managedservices.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Authorization tuple containing principal Id (of user/service principal/security group) and role definition id.
 * 
 */
public final class AuthorizationArgs extends com.pulumi.resources.ResourceArgs {

    public static final AuthorizationArgs Empty = new AuthorizationArgs();

    /**
     * The delegatedRoleDefinitionIds field is required when the roleDefinitionId refers to the User Access Administrator Role. It is the list of role definition ids which define all the permissions that the user in the authorization can assign to other security groups/service principals/users.
     * 
     */
    @Import(name="delegatedRoleDefinitionIds")
    private @Nullable Output<List<String>> delegatedRoleDefinitionIds;

    /**
     * @return The delegatedRoleDefinitionIds field is required when the roleDefinitionId refers to the User Access Administrator Role. It is the list of role definition ids which define all the permissions that the user in the authorization can assign to other security groups/service principals/users.
     * 
     */
    public Optional<Output<List<String>>> delegatedRoleDefinitionIds() {
        return Optional.ofNullable(this.delegatedRoleDefinitionIds);
    }

    /**
     * Principal Id of the security group/service principal/user that would be assigned permissions to the projected subscription
     * 
     */
    @Import(name="principalId", required=true)
    private Output<String> principalId;

    /**
     * @return Principal Id of the security group/service principal/user that would be assigned permissions to the projected subscription
     * 
     */
    public Output<String> principalId() {
        return this.principalId;
    }

    /**
     * Display name of the principal Id.
     * 
     */
    @Import(name="principalIdDisplayName")
    private @Nullable Output<String> principalIdDisplayName;

    /**
     * @return Display name of the principal Id.
     * 
     */
    public Optional<Output<String>> principalIdDisplayName() {
        return Optional.ofNullable(this.principalIdDisplayName);
    }

    /**
     * The role definition identifier. This role will define all the permissions that the security group/service principal/user must have on the projected subscription. This role cannot be an owner role.
     * 
     */
    @Import(name="roleDefinitionId", required=true)
    private Output<String> roleDefinitionId;

    /**
     * @return The role definition identifier. This role will define all the permissions that the security group/service principal/user must have on the projected subscription. This role cannot be an owner role.
     * 
     */
    public Output<String> roleDefinitionId() {
        return this.roleDefinitionId;
    }

    private AuthorizationArgs() {}

    private AuthorizationArgs(AuthorizationArgs $) {
        this.delegatedRoleDefinitionIds = $.delegatedRoleDefinitionIds;
        this.principalId = $.principalId;
        this.principalIdDisplayName = $.principalIdDisplayName;
        this.roleDefinitionId = $.roleDefinitionId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AuthorizationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AuthorizationArgs $;

        public Builder() {
            $ = new AuthorizationArgs();
        }

        public Builder(AuthorizationArgs defaults) {
            $ = new AuthorizationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param delegatedRoleDefinitionIds The delegatedRoleDefinitionIds field is required when the roleDefinitionId refers to the User Access Administrator Role. It is the list of role definition ids which define all the permissions that the user in the authorization can assign to other security groups/service principals/users.
         * 
         * @return builder
         * 
         */
        public Builder delegatedRoleDefinitionIds(@Nullable Output<List<String>> delegatedRoleDefinitionIds) {
            $.delegatedRoleDefinitionIds = delegatedRoleDefinitionIds;
            return this;
        }

        /**
         * @param delegatedRoleDefinitionIds The delegatedRoleDefinitionIds field is required when the roleDefinitionId refers to the User Access Administrator Role. It is the list of role definition ids which define all the permissions that the user in the authorization can assign to other security groups/service principals/users.
         * 
         * @return builder
         * 
         */
        public Builder delegatedRoleDefinitionIds(List<String> delegatedRoleDefinitionIds) {
            return delegatedRoleDefinitionIds(Output.of(delegatedRoleDefinitionIds));
        }

        /**
         * @param delegatedRoleDefinitionIds The delegatedRoleDefinitionIds field is required when the roleDefinitionId refers to the User Access Administrator Role. It is the list of role definition ids which define all the permissions that the user in the authorization can assign to other security groups/service principals/users.
         * 
         * @return builder
         * 
         */
        public Builder delegatedRoleDefinitionIds(String... delegatedRoleDefinitionIds) {
            return delegatedRoleDefinitionIds(List.of(delegatedRoleDefinitionIds));
        }

        /**
         * @param principalId Principal Id of the security group/service principal/user that would be assigned permissions to the projected subscription
         * 
         * @return builder
         * 
         */
        public Builder principalId(Output<String> principalId) {
            $.principalId = principalId;
            return this;
        }

        /**
         * @param principalId Principal Id of the security group/service principal/user that would be assigned permissions to the projected subscription
         * 
         * @return builder
         * 
         */
        public Builder principalId(String principalId) {
            return principalId(Output.of(principalId));
        }

        /**
         * @param principalIdDisplayName Display name of the principal Id.
         * 
         * @return builder
         * 
         */
        public Builder principalIdDisplayName(@Nullable Output<String> principalIdDisplayName) {
            $.principalIdDisplayName = principalIdDisplayName;
            return this;
        }

        /**
         * @param principalIdDisplayName Display name of the principal Id.
         * 
         * @return builder
         * 
         */
        public Builder principalIdDisplayName(String principalIdDisplayName) {
            return principalIdDisplayName(Output.of(principalIdDisplayName));
        }

        /**
         * @param roleDefinitionId The role definition identifier. This role will define all the permissions that the security group/service principal/user must have on the projected subscription. This role cannot be an owner role.
         * 
         * @return builder
         * 
         */
        public Builder roleDefinitionId(Output<String> roleDefinitionId) {
            $.roleDefinitionId = roleDefinitionId;
            return this;
        }

        /**
         * @param roleDefinitionId The role definition identifier. This role will define all the permissions that the security group/service principal/user must have on the projected subscription. This role cannot be an owner role.
         * 
         * @return builder
         * 
         */
        public Builder roleDefinitionId(String roleDefinitionId) {
            return roleDefinitionId(Output.of(roleDefinitionId));
        }

        public AuthorizationArgs build() {
            $.principalId = Objects.requireNonNull($.principalId, "expected parameter 'principalId' to be non-null");
            $.roleDefinitionId = Objects.requireNonNull($.roleDefinitionId, "expected parameter 'roleDefinitionId' to be non-null");
            return $;
        }
    }

}
