// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.costmanagement.outputs;

import com.pulumi.azurenative.costmanagement.outputs.ReportRecurrencePeriodResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ReportScheduleResponse {
    /**
     * @return The schedule recurrence.
     * 
     */
    private final String recurrence;
    /**
     * @return Has start and end date of the recurrence. The start date must be in future. If present, the end date must be greater than start date.
     * 
     */
    private final @Nullable ReportRecurrencePeriodResponse recurrencePeriod;
    /**
     * @return The status of the schedule. Whether active or not. If inactive, the report&#39;s scheduled execution is paused.
     * 
     */
    private final @Nullable String status;

    @CustomType.Constructor
    private ReportScheduleResponse(
        @CustomType.Parameter("recurrence") String recurrence,
        @CustomType.Parameter("recurrencePeriod") @Nullable ReportRecurrencePeriodResponse recurrencePeriod,
        @CustomType.Parameter("status") @Nullable String status) {
        this.recurrence = recurrence;
        this.recurrencePeriod = recurrencePeriod;
        this.status = status;
    }

    /**
     * @return The schedule recurrence.
     * 
     */
    public String recurrence() {
        return this.recurrence;
    }
    /**
     * @return Has start and end date of the recurrence. The start date must be in future. If present, the end date must be greater than start date.
     * 
     */
    public Optional<ReportRecurrencePeriodResponse> recurrencePeriod() {
        return Optional.ofNullable(this.recurrencePeriod);
    }
    /**
     * @return The status of the schedule. Whether active or not. If inactive, the report&#39;s scheduled execution is paused.
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ReportScheduleResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String recurrence;
        private @Nullable ReportRecurrencePeriodResponse recurrencePeriod;
        private @Nullable String status;

        public Builder() {
    	      // Empty
        }

        public Builder(ReportScheduleResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.recurrence = defaults.recurrence;
    	      this.recurrencePeriod = defaults.recurrencePeriod;
    	      this.status = defaults.status;
        }

        public Builder recurrence(String recurrence) {
            this.recurrence = Objects.requireNonNull(recurrence);
            return this;
        }
        public Builder recurrencePeriod(@Nullable ReportRecurrencePeriodResponse recurrencePeriod) {
            this.recurrencePeriod = recurrencePeriod;
            return this;
        }
        public Builder status(@Nullable String status) {
            this.status = status;
            return this;
        }        public ReportScheduleResponse build() {
            return new ReportScheduleResponse(recurrence, recurrencePeriod, status);
        }
    }
}
