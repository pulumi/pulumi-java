// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.securityinsights;

import com.pulumi.azurenative.securityinsights.inputs.IncidentInfoArgs;
import com.pulumi.azurenative.securityinsights.inputs.UserInfoArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BookmarkArgs extends com.pulumi.resources.ResourceArgs {

    public static final BookmarkArgs Empty = new BookmarkArgs();

    /**
     * Bookmark ID
     * 
     */
    @Import(name="bookmarkId")
    private @Nullable Output<String> bookmarkId;

    /**
     * @return Bookmark ID
     * 
     */
    public Optional<Output<String>> bookmarkId() {
        return Optional.ofNullable(this.bookmarkId);
    }

    /**
     * The time the bookmark was created
     * 
     */
    @Import(name="created")
    private @Nullable Output<String> created;

    /**
     * @return The time the bookmark was created
     * 
     */
    public Optional<Output<String>> created() {
        return Optional.ofNullable(this.created);
    }

    /**
     * Describes a user that created the bookmark
     * 
     */
    @Import(name="createdBy")
    private @Nullable Output<UserInfoArgs> createdBy;

    /**
     * @return Describes a user that created the bookmark
     * 
     */
    public Optional<Output<UserInfoArgs>> createdBy() {
        return Optional.ofNullable(this.createdBy);
    }

    /**
     * The display name of the bookmark
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return The display name of the bookmark
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * The bookmark event time
     * 
     */
    @Import(name="eventTime")
    private @Nullable Output<String> eventTime;

    /**
     * @return The bookmark event time
     * 
     */
    public Optional<Output<String>> eventTime() {
        return Optional.ofNullable(this.eventTime);
    }

    /**
     * Describes an incident that relates to bookmark
     * 
     */
    @Import(name="incidentInfo")
    private @Nullable Output<IncidentInfoArgs> incidentInfo;

    /**
     * @return Describes an incident that relates to bookmark
     * 
     */
    public Optional<Output<IncidentInfoArgs>> incidentInfo() {
        return Optional.ofNullable(this.incidentInfo);
    }

    /**
     * List of labels relevant to this bookmark
     * 
     */
    @Import(name="labels")
    private @Nullable Output<List<String>> labels;

    /**
     * @return List of labels relevant to this bookmark
     * 
     */
    public Optional<Output<List<String>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The notes of the bookmark
     * 
     */
    @Import(name="notes")
    private @Nullable Output<String> notes;

    /**
     * @return The notes of the bookmark
     * 
     */
    public Optional<Output<String>> notes() {
        return Optional.ofNullable(this.notes);
    }

    /**
     * The query of the bookmark.
     * 
     */
    @Import(name="query", required=true)
    private Output<String> query;

    /**
     * @return The query of the bookmark.
     * 
     */
    public Output<String> query() {
        return this.query;
    }

    /**
     * The end time for the query
     * 
     */
    @Import(name="queryEndTime")
    private @Nullable Output<String> queryEndTime;

    /**
     * @return The end time for the query
     * 
     */
    public Optional<Output<String>> queryEndTime() {
        return Optional.ofNullable(this.queryEndTime);
    }

    /**
     * The query result of the bookmark.
     * 
     */
    @Import(name="queryResult")
    private @Nullable Output<String> queryResult;

    /**
     * @return The query result of the bookmark.
     * 
     */
    public Optional<Output<String>> queryResult() {
        return Optional.ofNullable(this.queryResult);
    }

    /**
     * The start time for the query
     * 
     */
    @Import(name="queryStartTime")
    private @Nullable Output<String> queryStartTime;

    /**
     * @return The start time for the query
     * 
     */
    public Optional<Output<String>> queryStartTime() {
        return Optional.ofNullable(this.queryStartTime);
    }

    /**
     * The name of the resource group within the user&#39;s subscription. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group within the user&#39;s subscription. The name is case insensitive.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The last time the bookmark was updated
     * 
     */
    @Import(name="updated")
    private @Nullable Output<String> updated;

    /**
     * @return The last time the bookmark was updated
     * 
     */
    public Optional<Output<String>> updated() {
        return Optional.ofNullable(this.updated);
    }

    /**
     * Describes a user that updated the bookmark
     * 
     */
    @Import(name="updatedBy")
    private @Nullable Output<UserInfoArgs> updatedBy;

    /**
     * @return Describes a user that updated the bookmark
     * 
     */
    public Optional<Output<UserInfoArgs>> updatedBy() {
        return Optional.ofNullable(this.updatedBy);
    }

    /**
     * The name of the workspace.
     * 
     */
    @Import(name="workspaceName", required=true)
    private Output<String> workspaceName;

    /**
     * @return The name of the workspace.
     * 
     */
    public Output<String> workspaceName() {
        return this.workspaceName;
    }

    private BookmarkArgs() {}

    private BookmarkArgs(BookmarkArgs $) {
        this.bookmarkId = $.bookmarkId;
        this.created = $.created;
        this.createdBy = $.createdBy;
        this.displayName = $.displayName;
        this.eventTime = $.eventTime;
        this.incidentInfo = $.incidentInfo;
        this.labels = $.labels;
        this.notes = $.notes;
        this.query = $.query;
        this.queryEndTime = $.queryEndTime;
        this.queryResult = $.queryResult;
        this.queryStartTime = $.queryStartTime;
        this.resourceGroupName = $.resourceGroupName;
        this.updated = $.updated;
        this.updatedBy = $.updatedBy;
        this.workspaceName = $.workspaceName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BookmarkArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BookmarkArgs $;

        public Builder() {
            $ = new BookmarkArgs();
        }

        public Builder(BookmarkArgs defaults) {
            $ = new BookmarkArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bookmarkId Bookmark ID
         * 
         * @return builder
         * 
         */
        public Builder bookmarkId(@Nullable Output<String> bookmarkId) {
            $.bookmarkId = bookmarkId;
            return this;
        }

        /**
         * @param bookmarkId Bookmark ID
         * 
         * @return builder
         * 
         */
        public Builder bookmarkId(String bookmarkId) {
            return bookmarkId(Output.of(bookmarkId));
        }

        /**
         * @param created The time the bookmark was created
         * 
         * @return builder
         * 
         */
        public Builder created(@Nullable Output<String> created) {
            $.created = created;
            return this;
        }

        /**
         * @param created The time the bookmark was created
         * 
         * @return builder
         * 
         */
        public Builder created(String created) {
            return created(Output.of(created));
        }

        /**
         * @param createdBy Describes a user that created the bookmark
         * 
         * @return builder
         * 
         */
        public Builder createdBy(@Nullable Output<UserInfoArgs> createdBy) {
            $.createdBy = createdBy;
            return this;
        }

        /**
         * @param createdBy Describes a user that created the bookmark
         * 
         * @return builder
         * 
         */
        public Builder createdBy(UserInfoArgs createdBy) {
            return createdBy(Output.of(createdBy));
        }

        /**
         * @param displayName The display name of the bookmark
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The display name of the bookmark
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param eventTime The bookmark event time
         * 
         * @return builder
         * 
         */
        public Builder eventTime(@Nullable Output<String> eventTime) {
            $.eventTime = eventTime;
            return this;
        }

        /**
         * @param eventTime The bookmark event time
         * 
         * @return builder
         * 
         */
        public Builder eventTime(String eventTime) {
            return eventTime(Output.of(eventTime));
        }

        /**
         * @param incidentInfo Describes an incident that relates to bookmark
         * 
         * @return builder
         * 
         */
        public Builder incidentInfo(@Nullable Output<IncidentInfoArgs> incidentInfo) {
            $.incidentInfo = incidentInfo;
            return this;
        }

        /**
         * @param incidentInfo Describes an incident that relates to bookmark
         * 
         * @return builder
         * 
         */
        public Builder incidentInfo(IncidentInfoArgs incidentInfo) {
            return incidentInfo(Output.of(incidentInfo));
        }

        /**
         * @param labels List of labels relevant to this bookmark
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<List<String>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels List of labels relevant to this bookmark
         * 
         * @return builder
         * 
         */
        public Builder labels(List<String> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param labels List of labels relevant to this bookmark
         * 
         * @return builder
         * 
         */
        public Builder labels(String... labels) {
            return labels(List.of(labels));
        }

        /**
         * @param notes The notes of the bookmark
         * 
         * @return builder
         * 
         */
        public Builder notes(@Nullable Output<String> notes) {
            $.notes = notes;
            return this;
        }

        /**
         * @param notes The notes of the bookmark
         * 
         * @return builder
         * 
         */
        public Builder notes(String notes) {
            return notes(Output.of(notes));
        }

        /**
         * @param query The query of the bookmark.
         * 
         * @return builder
         * 
         */
        public Builder query(Output<String> query) {
            $.query = query;
            return this;
        }

        /**
         * @param query The query of the bookmark.
         * 
         * @return builder
         * 
         */
        public Builder query(String query) {
            return query(Output.of(query));
        }

        /**
         * @param queryEndTime The end time for the query
         * 
         * @return builder
         * 
         */
        public Builder queryEndTime(@Nullable Output<String> queryEndTime) {
            $.queryEndTime = queryEndTime;
            return this;
        }

        /**
         * @param queryEndTime The end time for the query
         * 
         * @return builder
         * 
         */
        public Builder queryEndTime(String queryEndTime) {
            return queryEndTime(Output.of(queryEndTime));
        }

        /**
         * @param queryResult The query result of the bookmark.
         * 
         * @return builder
         * 
         */
        public Builder queryResult(@Nullable Output<String> queryResult) {
            $.queryResult = queryResult;
            return this;
        }

        /**
         * @param queryResult The query result of the bookmark.
         * 
         * @return builder
         * 
         */
        public Builder queryResult(String queryResult) {
            return queryResult(Output.of(queryResult));
        }

        /**
         * @param queryStartTime The start time for the query
         * 
         * @return builder
         * 
         */
        public Builder queryStartTime(@Nullable Output<String> queryStartTime) {
            $.queryStartTime = queryStartTime;
            return this;
        }

        /**
         * @param queryStartTime The start time for the query
         * 
         * @return builder
         * 
         */
        public Builder queryStartTime(String queryStartTime) {
            return queryStartTime(Output.of(queryStartTime));
        }

        /**
         * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param updated The last time the bookmark was updated
         * 
         * @return builder
         * 
         */
        public Builder updated(@Nullable Output<String> updated) {
            $.updated = updated;
            return this;
        }

        /**
         * @param updated The last time the bookmark was updated
         * 
         * @return builder
         * 
         */
        public Builder updated(String updated) {
            return updated(Output.of(updated));
        }

        /**
         * @param updatedBy Describes a user that updated the bookmark
         * 
         * @return builder
         * 
         */
        public Builder updatedBy(@Nullable Output<UserInfoArgs> updatedBy) {
            $.updatedBy = updatedBy;
            return this;
        }

        /**
         * @param updatedBy Describes a user that updated the bookmark
         * 
         * @return builder
         * 
         */
        public Builder updatedBy(UserInfoArgs updatedBy) {
            return updatedBy(Output.of(updatedBy));
        }

        /**
         * @param workspaceName The name of the workspace.
         * 
         * @return builder
         * 
         */
        public Builder workspaceName(Output<String> workspaceName) {
            $.workspaceName = workspaceName;
            return this;
        }

        /**
         * @param workspaceName The name of the workspace.
         * 
         * @return builder
         * 
         */
        public Builder workspaceName(String workspaceName) {
            return workspaceName(Output.of(workspaceName));
        }

        public BookmarkArgs build() {
            $.displayName = Objects.requireNonNull($.displayName, "expected parameter 'displayName' to be non-null");
            $.query = Objects.requireNonNull($.query, "expected parameter 'query' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.workspaceName = Objects.requireNonNull($.workspaceName, "expected parameter 'workspaceName' to be non-null");
            return $;
        }
    }

}
