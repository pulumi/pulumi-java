// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.securityinsights;

import com.pulumi.azurenative.securityinsights.inputs.IncidentInfoArgs;
import com.pulumi.azurenative.securityinsights.inputs.UserInfoArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class BookmarkArgs extends com.pulumi.resources.ResourceArgs {

    public static final BookmarkArgs Empty = new BookmarkArgs();

    /**
     * Bookmark ID
     * 
     */
    @Import(name="bookmarkId")
      private final @Nullable Output<String> bookmarkId;

    public Output<String> bookmarkId() {
        return this.bookmarkId == null ? Codegen.empty() : this.bookmarkId;
    }

    /**
     * The time the bookmark was created
     * 
     */
    @Import(name="created")
      private final @Nullable Output<String> created;

    public Output<String> created() {
        return this.created == null ? Codegen.empty() : this.created;
    }

    /**
     * Describes a user that created the bookmark
     * 
     */
    @Import(name="createdBy")
      private final @Nullable Output<UserInfoArgs> createdBy;

    public Output<UserInfoArgs> createdBy() {
        return this.createdBy == null ? Codegen.empty() : this.createdBy;
    }

    /**
     * The display name of the bookmark
     * 
     */
    @Import(name="displayName", required=true)
      private final Output<String> displayName;

    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * The bookmark event time
     * 
     */
    @Import(name="eventTime")
      private final @Nullable Output<String> eventTime;

    public Output<String> eventTime() {
        return this.eventTime == null ? Codegen.empty() : this.eventTime;
    }

    /**
     * Describes an incident that relates to bookmark
     * 
     */
    @Import(name="incidentInfo")
      private final @Nullable Output<IncidentInfoArgs> incidentInfo;

    public Output<IncidentInfoArgs> incidentInfo() {
        return this.incidentInfo == null ? Codegen.empty() : this.incidentInfo;
    }

    /**
     * List of labels relevant to this bookmark
     * 
     */
    @Import(name="labels")
      private final @Nullable Output<List<String>> labels;

    public Output<List<String>> labels() {
        return this.labels == null ? Codegen.empty() : this.labels;
    }

    /**
     * The notes of the bookmark
     * 
     */
    @Import(name="notes")
      private final @Nullable Output<String> notes;

    public Output<String> notes() {
        return this.notes == null ? Codegen.empty() : this.notes;
    }

    /**
     * The query of the bookmark.
     * 
     */
    @Import(name="query", required=true)
      private final Output<String> query;

    public Output<String> query() {
        return this.query;
    }

    /**
     * The end time for the query
     * 
     */
    @Import(name="queryEndTime")
      private final @Nullable Output<String> queryEndTime;

    public Output<String> queryEndTime() {
        return this.queryEndTime == null ? Codegen.empty() : this.queryEndTime;
    }

    /**
     * The query result of the bookmark.
     * 
     */
    @Import(name="queryResult")
      private final @Nullable Output<String> queryResult;

    public Output<String> queryResult() {
        return this.queryResult == null ? Codegen.empty() : this.queryResult;
    }

    /**
     * The start time for the query
     * 
     */
    @Import(name="queryStartTime")
      private final @Nullable Output<String> queryStartTime;

    public Output<String> queryStartTime() {
        return this.queryStartTime == null ? Codegen.empty() : this.queryStartTime;
    }

    /**
     * The name of the resource group within the user&#39;s subscription. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The last time the bookmark was updated
     * 
     */
    @Import(name="updated")
      private final @Nullable Output<String> updated;

    public Output<String> updated() {
        return this.updated == null ? Codegen.empty() : this.updated;
    }

    /**
     * Describes a user that updated the bookmark
     * 
     */
    @Import(name="updatedBy")
      private final @Nullable Output<UserInfoArgs> updatedBy;

    public Output<UserInfoArgs> updatedBy() {
        return this.updatedBy == null ? Codegen.empty() : this.updatedBy;
    }

    /**
     * The name of the workspace.
     * 
     */
    @Import(name="workspaceName", required=true)
      private final Output<String> workspaceName;

    public Output<String> workspaceName() {
        return this.workspaceName;
    }

    public BookmarkArgs(
        @Nullable Output<String> bookmarkId,
        @Nullable Output<String> created,
        @Nullable Output<UserInfoArgs> createdBy,
        Output<String> displayName,
        @Nullable Output<String> eventTime,
        @Nullable Output<IncidentInfoArgs> incidentInfo,
        @Nullable Output<List<String>> labels,
        @Nullable Output<String> notes,
        Output<String> query,
        @Nullable Output<String> queryEndTime,
        @Nullable Output<String> queryResult,
        @Nullable Output<String> queryStartTime,
        Output<String> resourceGroupName,
        @Nullable Output<String> updated,
        @Nullable Output<UserInfoArgs> updatedBy,
        Output<String> workspaceName) {
        this.bookmarkId = bookmarkId;
        this.created = created;
        this.createdBy = createdBy;
        this.displayName = Objects.requireNonNull(displayName, "expected parameter 'displayName' to be non-null");
        this.eventTime = eventTime;
        this.incidentInfo = incidentInfo;
        this.labels = labels;
        this.notes = notes;
        this.query = Objects.requireNonNull(query, "expected parameter 'query' to be non-null");
        this.queryEndTime = queryEndTime;
        this.queryResult = queryResult;
        this.queryStartTime = queryStartTime;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.updated = updated;
        this.updatedBy = updatedBy;
        this.workspaceName = Objects.requireNonNull(workspaceName, "expected parameter 'workspaceName' to be non-null");
    }

    private BookmarkArgs() {
        this.bookmarkId = Codegen.empty();
        this.created = Codegen.empty();
        this.createdBy = Codegen.empty();
        this.displayName = Codegen.empty();
        this.eventTime = Codegen.empty();
        this.incidentInfo = Codegen.empty();
        this.labels = Codegen.empty();
        this.notes = Codegen.empty();
        this.query = Codegen.empty();
        this.queryEndTime = Codegen.empty();
        this.queryResult = Codegen.empty();
        this.queryStartTime = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.updated = Codegen.empty();
        this.updatedBy = Codegen.empty();
        this.workspaceName = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BookmarkArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> bookmarkId;
        private @Nullable Output<String> created;
        private @Nullable Output<UserInfoArgs> createdBy;
        private Output<String> displayName;
        private @Nullable Output<String> eventTime;
        private @Nullable Output<IncidentInfoArgs> incidentInfo;
        private @Nullable Output<List<String>> labels;
        private @Nullable Output<String> notes;
        private Output<String> query;
        private @Nullable Output<String> queryEndTime;
        private @Nullable Output<String> queryResult;
        private @Nullable Output<String> queryStartTime;
        private Output<String> resourceGroupName;
        private @Nullable Output<String> updated;
        private @Nullable Output<UserInfoArgs> updatedBy;
        private Output<String> workspaceName;

        public Builder() {
    	      // Empty
        }

        public Builder(BookmarkArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bookmarkId = defaults.bookmarkId;
    	      this.created = defaults.created;
    	      this.createdBy = defaults.createdBy;
    	      this.displayName = defaults.displayName;
    	      this.eventTime = defaults.eventTime;
    	      this.incidentInfo = defaults.incidentInfo;
    	      this.labels = defaults.labels;
    	      this.notes = defaults.notes;
    	      this.query = defaults.query;
    	      this.queryEndTime = defaults.queryEndTime;
    	      this.queryResult = defaults.queryResult;
    	      this.queryStartTime = defaults.queryStartTime;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.updated = defaults.updated;
    	      this.updatedBy = defaults.updatedBy;
    	      this.workspaceName = defaults.workspaceName;
        }

        public Builder bookmarkId(@Nullable Output<String> bookmarkId) {
            this.bookmarkId = bookmarkId;
            return this;
        }
        public Builder bookmarkId(@Nullable String bookmarkId) {
            this.bookmarkId = Codegen.ofNullable(bookmarkId);
            return this;
        }
        public Builder created(@Nullable Output<String> created) {
            this.created = created;
            return this;
        }
        public Builder created(@Nullable String created) {
            this.created = Codegen.ofNullable(created);
            return this;
        }
        public Builder createdBy(@Nullable Output<UserInfoArgs> createdBy) {
            this.createdBy = createdBy;
            return this;
        }
        public Builder createdBy(@Nullable UserInfoArgs createdBy) {
            this.createdBy = Codegen.ofNullable(createdBy);
            return this;
        }
        public Builder displayName(Output<String> displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        public Builder displayName(String displayName) {
            this.displayName = Output.of(Objects.requireNonNull(displayName));
            return this;
        }
        public Builder eventTime(@Nullable Output<String> eventTime) {
            this.eventTime = eventTime;
            return this;
        }
        public Builder eventTime(@Nullable String eventTime) {
            this.eventTime = Codegen.ofNullable(eventTime);
            return this;
        }
        public Builder incidentInfo(@Nullable Output<IncidentInfoArgs> incidentInfo) {
            this.incidentInfo = incidentInfo;
            return this;
        }
        public Builder incidentInfo(@Nullable IncidentInfoArgs incidentInfo) {
            this.incidentInfo = Codegen.ofNullable(incidentInfo);
            return this;
        }
        public Builder labels(@Nullable Output<List<String>> labels) {
            this.labels = labels;
            return this;
        }
        public Builder labels(@Nullable List<String> labels) {
            this.labels = Codegen.ofNullable(labels);
            return this;
        }
        public Builder labels(String... labels) {
            return labels(List.of(labels));
        }
        public Builder notes(@Nullable Output<String> notes) {
            this.notes = notes;
            return this;
        }
        public Builder notes(@Nullable String notes) {
            this.notes = Codegen.ofNullable(notes);
            return this;
        }
        public Builder query(Output<String> query) {
            this.query = Objects.requireNonNull(query);
            return this;
        }
        public Builder query(String query) {
            this.query = Output.of(Objects.requireNonNull(query));
            return this;
        }
        public Builder queryEndTime(@Nullable Output<String> queryEndTime) {
            this.queryEndTime = queryEndTime;
            return this;
        }
        public Builder queryEndTime(@Nullable String queryEndTime) {
            this.queryEndTime = Codegen.ofNullable(queryEndTime);
            return this;
        }
        public Builder queryResult(@Nullable Output<String> queryResult) {
            this.queryResult = queryResult;
            return this;
        }
        public Builder queryResult(@Nullable String queryResult) {
            this.queryResult = Codegen.ofNullable(queryResult);
            return this;
        }
        public Builder queryStartTime(@Nullable Output<String> queryStartTime) {
            this.queryStartTime = queryStartTime;
            return this;
        }
        public Builder queryStartTime(@Nullable String queryStartTime) {
            this.queryStartTime = Codegen.ofNullable(queryStartTime);
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder updated(@Nullable Output<String> updated) {
            this.updated = updated;
            return this;
        }
        public Builder updated(@Nullable String updated) {
            this.updated = Codegen.ofNullable(updated);
            return this;
        }
        public Builder updatedBy(@Nullable Output<UserInfoArgs> updatedBy) {
            this.updatedBy = updatedBy;
            return this;
        }
        public Builder updatedBy(@Nullable UserInfoArgs updatedBy) {
            this.updatedBy = Codegen.ofNullable(updatedBy);
            return this;
        }
        public Builder workspaceName(Output<String> workspaceName) {
            this.workspaceName = Objects.requireNonNull(workspaceName);
            return this;
        }
        public Builder workspaceName(String workspaceName) {
            this.workspaceName = Output.of(Objects.requireNonNull(workspaceName));
            return this;
        }        public BookmarkArgs build() {
            return new BookmarkArgs(bookmarkId, created, createdBy, displayName, eventTime, incidentInfo, labels, notes, query, queryEndTime, queryResult, queryStartTime, resourceGroupName, updated, updatedBy, workspaceName);
        }
    }
}
