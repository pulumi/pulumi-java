// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.compute.inputs;

import com.pulumi.azurenative.compute.inputs.ApiErrorResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


/**
 * Describes the properties of an virtual machine instance view for available patch summary.
 * 
 */
public final class AvailablePatchSummaryResponse extends com.pulumi.resources.InvokeArgs {

    public static final AvailablePatchSummaryResponse Empty = new AvailablePatchSummaryResponse();

    /**
     * The activity ID of the operation that produced this result. It is used to correlate across CRP and extension logs.
     * 
     */
    @Import(name="assessmentActivityId", required=true)
    private String assessmentActivityId;

    /**
     * @return The activity ID of the operation that produced this result. It is used to correlate across CRP and extension logs.
     * 
     */
    public String assessmentActivityId() {
        return this.assessmentActivityId;
    }

    /**
     * The number of critical or security patches that have been detected as available and not yet installed.
     * 
     */
    @Import(name="criticalAndSecurityPatchCount", required=true)
    private Integer criticalAndSecurityPatchCount;

    /**
     * @return The number of critical or security patches that have been detected as available and not yet installed.
     * 
     */
    public Integer criticalAndSecurityPatchCount() {
        return this.criticalAndSecurityPatchCount;
    }

    /**
     * The errors that were encountered during execution of the operation. The details array contains the list of them.
     * 
     */
    @Import(name="error", required=true)
    private ApiErrorResponse error;

    /**
     * @return The errors that were encountered during execution of the operation. The details array contains the list of them.
     * 
     */
    public ApiErrorResponse error() {
        return this.error;
    }

    /**
     * The UTC timestamp when the operation began.
     * 
     */
    @Import(name="lastModifiedTime", required=true)
    private String lastModifiedTime;

    /**
     * @return The UTC timestamp when the operation began.
     * 
     */
    public String lastModifiedTime() {
        return this.lastModifiedTime;
    }

    /**
     * The number of all available patches excluding critical and security.
     * 
     */
    @Import(name="otherPatchCount", required=true)
    private Integer otherPatchCount;

    /**
     * @return The number of all available patches excluding critical and security.
     * 
     */
    public Integer otherPatchCount() {
        return this.otherPatchCount;
    }

    /**
     * The overall reboot status of the VM. It will be true when partially installed patches require a reboot to complete installation but the reboot has not yet occurred.
     * 
     */
    @Import(name="rebootPending", required=true)
    private Boolean rebootPending;

    /**
     * @return The overall reboot status of the VM. It will be true when partially installed patches require a reboot to complete installation but the reboot has not yet occurred.
     * 
     */
    public Boolean rebootPending() {
        return this.rebootPending;
    }

    /**
     * The UTC timestamp when the operation began.
     * 
     */
    @Import(name="startTime", required=true)
    private String startTime;

    /**
     * @return The UTC timestamp when the operation began.
     * 
     */
    public String startTime() {
        return this.startTime;
    }

    /**
     * The overall success or failure status of the operation. It remains &#34;InProgress&#34; until the operation completes. At that point it will become &#34;Unknown&#34;, &#34;Failed&#34;, &#34;Succeeded&#34;, or &#34;CompletedWithWarnings.&#34;
     * 
     */
    @Import(name="status", required=true)
    private String status;

    /**
     * @return The overall success or failure status of the operation. It remains &#34;InProgress&#34; until the operation completes. At that point it will become &#34;Unknown&#34;, &#34;Failed&#34;, &#34;Succeeded&#34;, or &#34;CompletedWithWarnings.&#34;
     * 
     */
    public String status() {
        return this.status;
    }

    private AvailablePatchSummaryResponse() {}

    private AvailablePatchSummaryResponse(AvailablePatchSummaryResponse $) {
        this.assessmentActivityId = $.assessmentActivityId;
        this.criticalAndSecurityPatchCount = $.criticalAndSecurityPatchCount;
        this.error = $.error;
        this.lastModifiedTime = $.lastModifiedTime;
        this.otherPatchCount = $.otherPatchCount;
        this.rebootPending = $.rebootPending;
        this.startTime = $.startTime;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AvailablePatchSummaryResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AvailablePatchSummaryResponse $;

        public Builder() {
            $ = new AvailablePatchSummaryResponse();
        }

        public Builder(AvailablePatchSummaryResponse defaults) {
            $ = new AvailablePatchSummaryResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param assessmentActivityId The activity ID of the operation that produced this result. It is used to correlate across CRP and extension logs.
         * 
         * @return builder
         * 
         */
        public Builder assessmentActivityId(String assessmentActivityId) {
            $.assessmentActivityId = assessmentActivityId;
            return this;
        }

        /**
         * @param criticalAndSecurityPatchCount The number of critical or security patches that have been detected as available and not yet installed.
         * 
         * @return builder
         * 
         */
        public Builder criticalAndSecurityPatchCount(Integer criticalAndSecurityPatchCount) {
            $.criticalAndSecurityPatchCount = criticalAndSecurityPatchCount;
            return this;
        }

        /**
         * @param error The errors that were encountered during execution of the operation. The details array contains the list of them.
         * 
         * @return builder
         * 
         */
        public Builder error(ApiErrorResponse error) {
            $.error = error;
            return this;
        }

        /**
         * @param lastModifiedTime The UTC timestamp when the operation began.
         * 
         * @return builder
         * 
         */
        public Builder lastModifiedTime(String lastModifiedTime) {
            $.lastModifiedTime = lastModifiedTime;
            return this;
        }

        /**
         * @param otherPatchCount The number of all available patches excluding critical and security.
         * 
         * @return builder
         * 
         */
        public Builder otherPatchCount(Integer otherPatchCount) {
            $.otherPatchCount = otherPatchCount;
            return this;
        }

        /**
         * @param rebootPending The overall reboot status of the VM. It will be true when partially installed patches require a reboot to complete installation but the reboot has not yet occurred.
         * 
         * @return builder
         * 
         */
        public Builder rebootPending(Boolean rebootPending) {
            $.rebootPending = rebootPending;
            return this;
        }

        /**
         * @param startTime The UTC timestamp when the operation began.
         * 
         * @return builder
         * 
         */
        public Builder startTime(String startTime) {
            $.startTime = startTime;
            return this;
        }

        /**
         * @param status The overall success or failure status of the operation. It remains &#34;InProgress&#34; until the operation completes. At that point it will become &#34;Unknown&#34;, &#34;Failed&#34;, &#34;Succeeded&#34;, or &#34;CompletedWithWarnings.&#34;
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            $.status = status;
            return this;
        }

        public AvailablePatchSummaryResponse build() {
            $.assessmentActivityId = Objects.requireNonNull($.assessmentActivityId, "expected parameter 'assessmentActivityId' to be non-null");
            $.criticalAndSecurityPatchCount = Objects.requireNonNull($.criticalAndSecurityPatchCount, "expected parameter 'criticalAndSecurityPatchCount' to be non-null");
            $.error = Objects.requireNonNull($.error, "expected parameter 'error' to be non-null");
            $.lastModifiedTime = Objects.requireNonNull($.lastModifiedTime, "expected parameter 'lastModifiedTime' to be non-null");
            $.otherPatchCount = Objects.requireNonNull($.otherPatchCount, "expected parameter 'otherPatchCount' to be non-null");
            $.rebootPending = Objects.requireNonNull($.rebootPending, "expected parameter 'rebootPending' to be non-null");
            $.startTime = Objects.requireNonNull($.startTime, "expected parameter 'startTime' to be non-null");
            $.status = Objects.requireNonNull($.status, "expected parameter 'status' to be non-null");
            return $;
        }
    }

}
