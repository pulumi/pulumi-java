// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.virtualmachineimages.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Distribute as a Managed Disk Image.
 * 
 */
public final class ImageTemplateManagedImageDistributorArgs extends com.pulumi.resources.ResourceArgs {

    public static final ImageTemplateManagedImageDistributorArgs Empty = new ImageTemplateManagedImageDistributorArgs();

    /**
     * Tags that will be applied to the artifact once it has been created/updated by the distributor.
     * 
     */
    @Import(name="artifactTags")
      private final @Nullable Output<Map<String,String>> artifactTags;

    public Output<Map<String,String>> artifactTags() {
        return this.artifactTags == null ? Codegen.empty() : this.artifactTags;
    }

    /**
     * Resource Id of the Managed Disk Image
     * 
     */
    @Import(name="imageId", required=true)
      private final Output<String> imageId;

    public Output<String> imageId() {
        return this.imageId;
    }

    /**
     * Azure location for the image, should match if image already exists
     * 
     */
    @Import(name="location", required=true)
      private final Output<String> location;

    public Output<String> location() {
        return this.location;
    }

    /**
     * The name to be used for the associated RunOutput.
     * 
     */
    @Import(name="runOutputName", required=true)
      private final Output<String> runOutputName;

    public Output<String> runOutputName() {
        return this.runOutputName;
    }

    /**
     * Type of distribution.
     * Expected value is 'ManagedImage'.
     * 
     */
    @Import(name="type", required=true)
      private final Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    public ImageTemplateManagedImageDistributorArgs(
        @Nullable Output<Map<String,String>> artifactTags,
        Output<String> imageId,
        Output<String> location,
        Output<String> runOutputName,
        Output<String> type) {
        this.artifactTags = artifactTags;
        this.imageId = Objects.requireNonNull(imageId, "expected parameter 'imageId' to be non-null");
        this.location = Objects.requireNonNull(location, "expected parameter 'location' to be non-null");
        this.runOutputName = Objects.requireNonNull(runOutputName, "expected parameter 'runOutputName' to be non-null");
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private ImageTemplateManagedImageDistributorArgs() {
        this.artifactTags = Codegen.empty();
        this.imageId = Codegen.empty();
        this.location = Codegen.empty();
        this.runOutputName = Codegen.empty();
        this.type = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ImageTemplateManagedImageDistributorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Map<String,String>> artifactTags;
        private Output<String> imageId;
        private Output<String> location;
        private Output<String> runOutputName;
        private Output<String> type;

        public Builder() {
    	      // Empty
        }

        public Builder(ImageTemplateManagedImageDistributorArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.artifactTags = defaults.artifactTags;
    	      this.imageId = defaults.imageId;
    	      this.location = defaults.location;
    	      this.runOutputName = defaults.runOutputName;
    	      this.type = defaults.type;
        }

        public Builder artifactTags(@Nullable Output<Map<String,String>> artifactTags) {
            this.artifactTags = artifactTags;
            return this;
        }
        public Builder artifactTags(@Nullable Map<String,String> artifactTags) {
            this.artifactTags = Codegen.ofNullable(artifactTags);
            return this;
        }
        public Builder imageId(Output<String> imageId) {
            this.imageId = Objects.requireNonNull(imageId);
            return this;
        }
        public Builder imageId(String imageId) {
            this.imageId = Output.of(Objects.requireNonNull(imageId));
            return this;
        }
        public Builder location(Output<String> location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        public Builder location(String location) {
            this.location = Output.of(Objects.requireNonNull(location));
            return this;
        }
        public Builder runOutputName(Output<String> runOutputName) {
            this.runOutputName = Objects.requireNonNull(runOutputName);
            return this;
        }
        public Builder runOutputName(String runOutputName) {
            this.runOutputName = Output.of(Objects.requireNonNull(runOutputName));
            return this;
        }
        public Builder type(Output<String> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder type(String type) {
            this.type = Output.of(Objects.requireNonNull(type));
            return this;
        }        public ImageTemplateManagedImageDistributorArgs build() {
            return new ImageTemplateManagedImageDistributorArgs(artifactTags, imageId, location, runOutputName, type);
        }
    }
}
