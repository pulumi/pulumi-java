// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.azurenative.datafactory.inputs.AmazonS3CompatibleLocationResponse;
import com.pulumi.azurenative.datafactory.inputs.AmazonS3LocationResponse;
import com.pulumi.azurenative.datafactory.inputs.AzureBlobFSLocationResponse;
import com.pulumi.azurenative.datafactory.inputs.AzureBlobStorageLocationResponse;
import com.pulumi.azurenative.datafactory.inputs.AzureDataLakeStoreLocationResponse;
import com.pulumi.azurenative.datafactory.inputs.AzureFileStorageLocationResponse;
import com.pulumi.azurenative.datafactory.inputs.DatasetCompressionResponse;
import com.pulumi.azurenative.datafactory.inputs.DatasetResponseFolder;
import com.pulumi.azurenative.datafactory.inputs.FileServerLocationResponse;
import com.pulumi.azurenative.datafactory.inputs.FtpServerLocationResponse;
import com.pulumi.azurenative.datafactory.inputs.GoogleCloudStorageLocationResponse;
import com.pulumi.azurenative.datafactory.inputs.HdfsLocationResponse;
import com.pulumi.azurenative.datafactory.inputs.HttpServerLocationResponse;
import com.pulumi.azurenative.datafactory.inputs.LinkedServiceReferenceResponse;
import com.pulumi.azurenative.datafactory.inputs.OracleCloudStorageLocationResponse;
import com.pulumi.azurenative.datafactory.inputs.ParameterSpecificationResponse;
import com.pulumi.azurenative.datafactory.inputs.SftpLocationResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Excel dataset.
 * 
 */
public final class ExcelDatasetResponse extends com.pulumi.resources.InvokeArgs {

    public static final ExcelDatasetResponse Empty = new ExcelDatasetResponse();

    /**
     * List of tags that can be used for describing the Dataset.
     * 
     */
    @Import(name="annotations")
    private @Nullable List<Object> annotations;

    /**
     * @return List of tags that can be used for describing the Dataset.
     * 
     */
    public Optional<List<Object>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    /**
     * The data compression method used for the json dataset.
     * 
     */
    @Import(name="compression")
    private @Nullable DatasetCompressionResponse compression;

    /**
     * @return The data compression method used for the json dataset.
     * 
     */
    public Optional<DatasetCompressionResponse> compression() {
        return Optional.ofNullable(this.compression);
    }

    /**
     * Dataset description.
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    /**
     * @return Dataset description.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * When used as input, treat the first row of data as headers. When used as output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or Expression with resultType boolean).
     * 
     */
    @Import(name="firstRowAsHeader")
    private @Nullable Object firstRowAsHeader;

    /**
     * @return When used as input, treat the first row of data as headers. When used as output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or Expression with resultType boolean).
     * 
     */
    public Optional<Object> firstRowAsHeader() {
        return Optional.ofNullable(this.firstRowAsHeader);
    }

    /**
     * The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
     * 
     */
    @Import(name="folder")
    private @Nullable DatasetResponseFolder folder;

    /**
     * @return The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
     * 
     */
    public Optional<DatasetResponseFolder> folder() {
        return Optional.ofNullable(this.folder);
    }

    /**
     * Linked service reference.
     * 
     */
    @Import(name="linkedServiceName", required=true)
    private LinkedServiceReferenceResponse linkedServiceName;

    /**
     * @return Linked service reference.
     * 
     */
    public LinkedServiceReferenceResponse linkedServiceName() {
        return this.linkedServiceName;
    }

    /**
     * The location of the excel storage.
     * 
     */
    @Import(name="location", required=true)
    private Object location;

    /**
     * @return The location of the excel storage.
     * 
     */
    public Object location() {
        return this.location;
    }

    /**
     * The null value string. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="nullValue")
    private @Nullable Object nullValue;

    /**
     * @return The null value string. Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Object> nullValue() {
        return Optional.ofNullable(this.nullValue);
    }

    /**
     * Parameters for dataset.
     * 
     */
    @Import(name="parameters")
    private @Nullable Map<String,ParameterSpecificationResponse> parameters;

    /**
     * @return Parameters for dataset.
     * 
     */
    public Optional<Map<String,ParameterSpecificationResponse>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    /**
     * The partial data of one sheet. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="range")
    private @Nullable Object range;

    /**
     * @return The partial data of one sheet. Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Object> range() {
        return Optional.ofNullable(this.range);
    }

    /**
     * Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
     * 
     */
    @Import(name="schema")
    private @Nullable Object schema;

    /**
     * @return Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
     * 
     */
    public Optional<Object> schema() {
        return Optional.ofNullable(this.schema);
    }

    /**
     * The sheet index of excel file and default value is 0. Type: integer (or Expression with resultType integer)
     * 
     */
    @Import(name="sheetIndex")
    private @Nullable Object sheetIndex;

    /**
     * @return The sheet index of excel file and default value is 0. Type: integer (or Expression with resultType integer)
     * 
     */
    public Optional<Object> sheetIndex() {
        return Optional.ofNullable(this.sheetIndex);
    }

    /**
     * The sheet name of excel file. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="sheetName")
    private @Nullable Object sheetName;

    /**
     * @return The sheet name of excel file. Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Object> sheetName() {
        return Optional.ofNullable(this.sheetName);
    }

    /**
     * Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
     * 
     */
    @Import(name="structure")
    private @Nullable Object structure;

    /**
     * @return Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
     * 
     */
    public Optional<Object> structure() {
        return Optional.ofNullable(this.structure);
    }

    /**
     * Type of dataset.
     * Expected value is &#39;Excel&#39;.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    /**
     * @return Type of dataset.
     * Expected value is &#39;Excel&#39;.
     * 
     */
    public String type() {
        return this.type;
    }

    private ExcelDatasetResponse() {}

    private ExcelDatasetResponse(ExcelDatasetResponse $) {
        this.annotations = $.annotations;
        this.compression = $.compression;
        this.description = $.description;
        this.firstRowAsHeader = $.firstRowAsHeader;
        this.folder = $.folder;
        this.linkedServiceName = $.linkedServiceName;
        this.location = $.location;
        this.nullValue = $.nullValue;
        this.parameters = $.parameters;
        this.range = $.range;
        this.schema = $.schema;
        this.sheetIndex = $.sheetIndex;
        this.sheetName = $.sheetName;
        this.structure = $.structure;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExcelDatasetResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExcelDatasetResponse $;

        public Builder() {
            $ = new ExcelDatasetResponse();
        }

        public Builder(ExcelDatasetResponse defaults) {
            $ = new ExcelDatasetResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param annotations List of tags that can be used for describing the Dataset.
         * 
         * @return builder
         * 
         */
        public Builder annotations(@Nullable List<Object> annotations) {
            $.annotations = annotations;
            return this;
        }

        /**
         * @param annotations List of tags that can be used for describing the Dataset.
         * 
         * @return builder
         * 
         */
        public Builder annotations(Object... annotations) {
            return annotations(List.of(annotations));
        }

        /**
         * @param compression The data compression method used for the json dataset.
         * 
         * @return builder
         * 
         */
        public Builder compression(@Nullable DatasetCompressionResponse compression) {
            $.compression = compression;
            return this;
        }

        /**
         * @param description Dataset description.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        /**
         * @param firstRowAsHeader When used as input, treat the first row of data as headers. When used as output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or Expression with resultType boolean).
         * 
         * @return builder
         * 
         */
        public Builder firstRowAsHeader(@Nullable Object firstRowAsHeader) {
            $.firstRowAsHeader = firstRowAsHeader;
            return this;
        }

        /**
         * @param folder The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
         * 
         * @return builder
         * 
         */
        public Builder folder(@Nullable DatasetResponseFolder folder) {
            $.folder = folder;
            return this;
        }

        /**
         * @param linkedServiceName Linked service reference.
         * 
         * @return builder
         * 
         */
        public Builder linkedServiceName(LinkedServiceReferenceResponse linkedServiceName) {
            $.linkedServiceName = linkedServiceName;
            return this;
        }

        /**
         * @param location The location of the excel storage.
         * 
         * @return builder
         * 
         */
        public Builder location(Object location) {
            $.location = location;
            return this;
        }

        /**
         * @param nullValue The null value string. Type: string (or Expression with resultType string).
         * 
         * @return builder
         * 
         */
        public Builder nullValue(@Nullable Object nullValue) {
            $.nullValue = nullValue;
            return this;
        }

        /**
         * @param parameters Parameters for dataset.
         * 
         * @return builder
         * 
         */
        public Builder parameters(@Nullable Map<String,ParameterSpecificationResponse> parameters) {
            $.parameters = parameters;
            return this;
        }

        /**
         * @param range The partial data of one sheet. Type: string (or Expression with resultType string).
         * 
         * @return builder
         * 
         */
        public Builder range(@Nullable Object range) {
            $.range = range;
            return this;
        }

        /**
         * @param schema Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
         * 
         * @return builder
         * 
         */
        public Builder schema(@Nullable Object schema) {
            $.schema = schema;
            return this;
        }

        /**
         * @param sheetIndex The sheet index of excel file and default value is 0. Type: integer (or Expression with resultType integer)
         * 
         * @return builder
         * 
         */
        public Builder sheetIndex(@Nullable Object sheetIndex) {
            $.sheetIndex = sheetIndex;
            return this;
        }

        /**
         * @param sheetName The sheet name of excel file. Type: string (or Expression with resultType string).
         * 
         * @return builder
         * 
         */
        public Builder sheetName(@Nullable Object sheetName) {
            $.sheetName = sheetName;
            return this;
        }

        /**
         * @param structure Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
         * 
         * @return builder
         * 
         */
        public Builder structure(@Nullable Object structure) {
            $.structure = structure;
            return this;
        }

        /**
         * @param type Type of dataset.
         * Expected value is &#39;Excel&#39;.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public ExcelDatasetResponse build() {
            $.linkedServiceName = Objects.requireNonNull($.linkedServiceName, "expected parameter 'linkedServiceName' to be non-null");
            $.location = Objects.requireNonNull($.location, "expected parameter 'location' to be non-null");
            $.type = Codegen.stringProp("type").arg($.type).require();
            return $;
        }
    }

}
