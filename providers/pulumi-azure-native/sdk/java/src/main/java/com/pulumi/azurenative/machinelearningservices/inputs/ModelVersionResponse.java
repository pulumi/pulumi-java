// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.machinelearningservices.inputs;

import com.pulumi.azurenative.machinelearningservices.inputs.FlavorDataResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Model asset version details.
 * 
 */
public final class ModelVersionResponse extends com.pulumi.resources.InvokeArgs {

    public static final ModelVersionResponse Empty = new ModelVersionResponse();

    /**
     * ARM resource ID of the datastore where the asset is located.
     * 
     */
    @Import(name="datastoreId")
    private @Nullable String datastoreId;

    /**
     * @return ARM resource ID of the datastore where the asset is located.
     * 
     */
    public Optional<String> datastoreId() {
        return Optional.ofNullable(this.datastoreId);
    }

    /**
     * The asset description text.
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    /**
     * @return The asset description text.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Mapping of model flavors to their properties.
     * 
     */
    @Import(name="flavors")
    private @Nullable Map<String,FlavorDataResponse> flavors;

    /**
     * @return Mapping of model flavors to their properties.
     * 
     */
    public Optional<Map<String,FlavorDataResponse>> flavors() {
        return Optional.ofNullable(this.flavors);
    }

    /**
     * If the name version are system generated (anonymous registration).
     * 
     */
    @Import(name="isAnonymous")
    private @Nullable Boolean isAnonymous;

    /**
     * @return If the name version are system generated (anonymous registration).
     * 
     */
    public Optional<Boolean> isAnonymous() {
        return Optional.ofNullable(this.isAnonymous);
    }

    /**
     * The path of the file/directory in the datastore.
     * 
     */
    @Import(name="path", required=true)
    private String path;

    /**
     * @return The path of the file/directory in the datastore.
     * 
     */
    public String path() {
        return this.path;
    }

    /**
     * The asset property dictionary.
     * 
     */
    @Import(name="properties")
    private @Nullable Map<String,String> properties;

    /**
     * @return The asset property dictionary.
     * 
     */
    public Optional<Map<String,String>> properties() {
        return Optional.ofNullable(this.properties);
    }

    /**
     * Tag dictionary. Tags can be added, removed, and updated.
     * 
     */
    @Import(name="tags")
    private @Nullable Map<String,String> tags;

    /**
     * @return Tag dictionary. Tags can be added, removed, and updated.
     * 
     */
    public Optional<Map<String,String>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private ModelVersionResponse() {}

    private ModelVersionResponse(ModelVersionResponse $) {
        this.datastoreId = $.datastoreId;
        this.description = $.description;
        this.flavors = $.flavors;
        this.isAnonymous = $.isAnonymous;
        this.path = $.path;
        this.properties = $.properties;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ModelVersionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ModelVersionResponse $;

        public Builder() {
            $ = new ModelVersionResponse();
        }

        public Builder(ModelVersionResponse defaults) {
            $ = new ModelVersionResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param datastoreId ARM resource ID of the datastore where the asset is located.
         * 
         * @return builder
         * 
         */
        public Builder datastoreId(@Nullable String datastoreId) {
            $.datastoreId = datastoreId;
            return this;
        }

        /**
         * @param description The asset description text.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        /**
         * @param flavors Mapping of model flavors to their properties.
         * 
         * @return builder
         * 
         */
        public Builder flavors(@Nullable Map<String,FlavorDataResponse> flavors) {
            $.flavors = flavors;
            return this;
        }

        /**
         * @param isAnonymous If the name version are system generated (anonymous registration).
         * 
         * @return builder
         * 
         */
        public Builder isAnonymous(@Nullable Boolean isAnonymous) {
            $.isAnonymous = isAnonymous;
            return this;
        }

        /**
         * @param path The path of the file/directory in the datastore.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            $.path = path;
            return this;
        }

        /**
         * @param properties The asset property dictionary.
         * 
         * @return builder
         * 
         */
        public Builder properties(@Nullable Map<String,String> properties) {
            $.properties = properties;
            return this;
        }

        /**
         * @param tags Tag dictionary. Tags can be added, removed, and updated.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Map<String,String> tags) {
            $.tags = tags;
            return this;
        }

        public ModelVersionResponse build() {
            $.path = Objects.requireNonNull($.path, "expected parameter 'path' to be non-null");
            return $;
        }
    }

}
