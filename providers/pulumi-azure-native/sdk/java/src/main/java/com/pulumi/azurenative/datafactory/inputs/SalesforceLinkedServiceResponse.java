// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.azurenative.datafactory.inputs.AzureKeyVaultSecretReferenceResponse;
import com.pulumi.azurenative.datafactory.inputs.IntegrationRuntimeReferenceResponse;
import com.pulumi.azurenative.datafactory.inputs.ParameterSpecificationResponse;
import com.pulumi.azurenative.datafactory.inputs.SecureStringResponse;
import com.pulumi.core.Either;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Linked service for Salesforce.
 * 
 */
public final class SalesforceLinkedServiceResponse extends com.pulumi.resources.InvokeArgs {

    public static final SalesforceLinkedServiceResponse Empty = new SalesforceLinkedServiceResponse();

    /**
     * List of tags that can be used for describing the linked service.
     * 
     */
    @Import(name="annotations")
    private @Nullable List<Object> annotations;

    /**
     * @return List of tags that can be used for describing the linked service.
     * 
     */
    public Optional<List<Object>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    /**
     * The Salesforce API version used in ADF. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="apiVersion")
    private @Nullable Object apiVersion;

    /**
     * @return The Salesforce API version used in ADF. Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Object> apiVersion() {
        return Optional.ofNullable(this.apiVersion);
    }

    /**
     * The integration runtime reference.
     * 
     */
    @Import(name="connectVia")
    private @Nullable IntegrationRuntimeReferenceResponse connectVia;

    /**
     * @return The integration runtime reference.
     * 
     */
    public Optional<IntegrationRuntimeReferenceResponse> connectVia() {
        return Optional.ofNullable(this.connectVia);
    }

    /**
     * Linked service description.
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    /**
     * @return Linked service description.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="encryptedCredential")
    private @Nullable Object encryptedCredential;

    /**
     * @return The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Object> encryptedCredential() {
        return Optional.ofNullable(this.encryptedCredential);
    }

    /**
     * The URL of Salesforce instance. Default is &#39;https://login.salesforce.com&#39;. To copy data from sandbox, specify &#39;https://test.salesforce.com&#39;. To copy data from custom domain, specify, for example, &#39;https://[domain].my.salesforce.com&#39;. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="environmentUrl")
    private @Nullable Object environmentUrl;

    /**
     * @return The URL of Salesforce instance. Default is &#39;https://login.salesforce.com&#39;. To copy data from sandbox, specify &#39;https://test.salesforce.com&#39;. To copy data from custom domain, specify, for example, &#39;https://[domain].my.salesforce.com&#39;. Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Object> environmentUrl() {
        return Optional.ofNullable(this.environmentUrl);
    }

    /**
     * Parameters for linked service.
     * 
     */
    @Import(name="parameters")
    private @Nullable Map<String,ParameterSpecificationResponse> parameters;

    /**
     * @return Parameters for linked service.
     * 
     */
    public Optional<Map<String,ParameterSpecificationResponse>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    /**
     * The password for Basic authentication of the Salesforce instance.
     * 
     */
    @Import(name="password")
    private @Nullable Either<AzureKeyVaultSecretReferenceResponse,SecureStringResponse> password;

    /**
     * @return The password for Basic authentication of the Salesforce instance.
     * 
     */
    public Optional<Either<AzureKeyVaultSecretReferenceResponse,SecureStringResponse>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * The security token is optional to remotely access Salesforce instance.
     * 
     */
    @Import(name="securityToken")
    private @Nullable Either<AzureKeyVaultSecretReferenceResponse,SecureStringResponse> securityToken;

    /**
     * @return The security token is optional to remotely access Salesforce instance.
     * 
     */
    public Optional<Either<AzureKeyVaultSecretReferenceResponse,SecureStringResponse>> securityToken() {
        return Optional.ofNullable(this.securityToken);
    }

    /**
     * Type of linked service.
     * Expected value is &#39;Salesforce&#39;.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    /**
     * @return Type of linked service.
     * Expected value is &#39;Salesforce&#39;.
     * 
     */
    public String type() {
        return this.type;
    }

    /**
     * The username for Basic authentication of the Salesforce instance. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="username")
    private @Nullable Object username;

    /**
     * @return The username for Basic authentication of the Salesforce instance. Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Object> username() {
        return Optional.ofNullable(this.username);
    }

    private SalesforceLinkedServiceResponse() {}

    private SalesforceLinkedServiceResponse(SalesforceLinkedServiceResponse $) {
        this.annotations = $.annotations;
        this.apiVersion = $.apiVersion;
        this.connectVia = $.connectVia;
        this.description = $.description;
        this.encryptedCredential = $.encryptedCredential;
        this.environmentUrl = $.environmentUrl;
        this.parameters = $.parameters;
        this.password = $.password;
        this.securityToken = $.securityToken;
        this.type = $.type;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SalesforceLinkedServiceResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SalesforceLinkedServiceResponse $;

        public Builder() {
            $ = new SalesforceLinkedServiceResponse();
        }

        public Builder(SalesforceLinkedServiceResponse defaults) {
            $ = new SalesforceLinkedServiceResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param annotations List of tags that can be used for describing the linked service.
         * 
         * @return builder
         * 
         */
        public Builder annotations(@Nullable List<Object> annotations) {
            $.annotations = annotations;
            return this;
        }

        /**
         * @param annotations List of tags that can be used for describing the linked service.
         * 
         * @return builder
         * 
         */
        public Builder annotations(Object... annotations) {
            return annotations(List.of(annotations));
        }

        /**
         * @param apiVersion The Salesforce API version used in ADF. Type: string (or Expression with resultType string).
         * 
         * @return builder
         * 
         */
        public Builder apiVersion(@Nullable Object apiVersion) {
            $.apiVersion = apiVersion;
            return this;
        }

        /**
         * @param connectVia The integration runtime reference.
         * 
         * @return builder
         * 
         */
        public Builder connectVia(@Nullable IntegrationRuntimeReferenceResponse connectVia) {
            $.connectVia = connectVia;
            return this;
        }

        /**
         * @param description Linked service description.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        /**
         * @param encryptedCredential The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
         * 
         * @return builder
         * 
         */
        public Builder encryptedCredential(@Nullable Object encryptedCredential) {
            $.encryptedCredential = encryptedCredential;
            return this;
        }

        /**
         * @param environmentUrl The URL of Salesforce instance. Default is &#39;https://login.salesforce.com&#39;. To copy data from sandbox, specify &#39;https://test.salesforce.com&#39;. To copy data from custom domain, specify, for example, &#39;https://[domain].my.salesforce.com&#39;. Type: string (or Expression with resultType string).
         * 
         * @return builder
         * 
         */
        public Builder environmentUrl(@Nullable Object environmentUrl) {
            $.environmentUrl = environmentUrl;
            return this;
        }

        /**
         * @param parameters Parameters for linked service.
         * 
         * @return builder
         * 
         */
        public Builder parameters(@Nullable Map<String,ParameterSpecificationResponse> parameters) {
            $.parameters = parameters;
            return this;
        }

        /**
         * @param password The password for Basic authentication of the Salesforce instance.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Either<AzureKeyVaultSecretReferenceResponse,SecureStringResponse> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password The password for Basic authentication of the Salesforce instance.
         * 
         * @return builder
         * 
         */
        public Builder password(AzureKeyVaultSecretReferenceResponse password) {
            return password(Either.ofLeft(password));
        }

        /**
         * @param password The password for Basic authentication of the Salesforce instance.
         * 
         * @return builder
         * 
         */
        public Builder password(SecureStringResponse password) {
            return password(Either.ofRight(password));
        }

        /**
         * @param securityToken The security token is optional to remotely access Salesforce instance.
         * 
         * @return builder
         * 
         */
        public Builder securityToken(@Nullable Either<AzureKeyVaultSecretReferenceResponse,SecureStringResponse> securityToken) {
            $.securityToken = securityToken;
            return this;
        }

        /**
         * @param securityToken The security token is optional to remotely access Salesforce instance.
         * 
         * @return builder
         * 
         */
        public Builder securityToken(AzureKeyVaultSecretReferenceResponse securityToken) {
            return securityToken(Either.ofLeft(securityToken));
        }

        /**
         * @param securityToken The security token is optional to remotely access Salesforce instance.
         * 
         * @return builder
         * 
         */
        public Builder securityToken(SecureStringResponse securityToken) {
            return securityToken(Either.ofRight(securityToken));
        }

        /**
         * @param type Type of linked service.
         * Expected value is &#39;Salesforce&#39;.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            $.type = type;
            return this;
        }

        /**
         * @param username The username for Basic authentication of the Salesforce instance. Type: string (or Expression with resultType string).
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Object username) {
            $.username = username;
            return this;
        }

        public SalesforceLinkedServiceResponse build() {
            $.type = Codegen.stringProp("type").arg($.type).require();
            return $;
        }
    }

}
