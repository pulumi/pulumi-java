// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.customerinsights;

import com.pulumi.azurenative.customerinsights.inputs.PredictionGradesArgs;
import com.pulumi.azurenative.customerinsights.inputs.PredictionMappingsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PredictionArgs extends com.pulumi.resources.ResourceArgs {

    public static final PredictionArgs Empty = new PredictionArgs();

    /**
     * Whether do auto analyze.
     * 
     */
    @Import(name="autoAnalyze", required=true)
    private Output<Boolean> autoAnalyze;

    public Output<Boolean> autoAnalyze() {
        return this.autoAnalyze;
    }

    /**
     * Description of the prediction.
     * 
     */
    @Import(name="description")
    private @Nullable Output<Map<String,String>> description;

    public Optional<Output<Map<String,String>>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Display name of the prediction.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<Map<String,String>> displayName;

    public Optional<Output<Map<String,String>>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * The prediction grades.
     * 
     */
    @Import(name="grades")
    private @Nullable Output<List<PredictionGradesArgs>> grades;

    public Optional<Output<List<PredictionGradesArgs>>> grades() {
        return Optional.ofNullable(this.grades);
    }

    /**
     * The name of the hub.
     * 
     */
    @Import(name="hubName", required=true)
    private Output<String> hubName;

    public Output<String> hubName() {
        return this.hubName;
    }

    /**
     * Interaction types involved in the prediction.
     * 
     */
    @Import(name="involvedInteractionTypes")
    private @Nullable Output<List<String>> involvedInteractionTypes;

    public Optional<Output<List<String>>> involvedInteractionTypes() {
        return Optional.ofNullable(this.involvedInteractionTypes);
    }

    /**
     * KPI types involved in the prediction.
     * 
     */
    @Import(name="involvedKpiTypes")
    private @Nullable Output<List<String>> involvedKpiTypes;

    public Optional<Output<List<String>>> involvedKpiTypes() {
        return Optional.ofNullable(this.involvedKpiTypes);
    }

    /**
     * Relationships involved in the prediction.
     * 
     */
    @Import(name="involvedRelationships")
    private @Nullable Output<List<String>> involvedRelationships;

    public Optional<Output<List<String>>> involvedRelationships() {
        return Optional.ofNullable(this.involvedRelationships);
    }

    /**
     * Definition of the link mapping of prediction.
     * 
     */
    @Import(name="mappings", required=true)
    private Output<PredictionMappingsArgs> mappings;

    public Output<PredictionMappingsArgs> mappings() {
        return this.mappings;
    }

    /**
     * Negative outcome expression.
     * 
     */
    @Import(name="negativeOutcomeExpression", required=true)
    private Output<String> negativeOutcomeExpression;

    public Output<String> negativeOutcomeExpression() {
        return this.negativeOutcomeExpression;
    }

    /**
     * Positive outcome expression.
     * 
     */
    @Import(name="positiveOutcomeExpression", required=true)
    private Output<String> positiveOutcomeExpression;

    public Output<String> positiveOutcomeExpression() {
        return this.positiveOutcomeExpression;
    }

    /**
     * Name of the prediction.
     * 
     */
    @Import(name="predictionName")
    private @Nullable Output<String> predictionName;

    public Optional<Output<String>> predictionName() {
        return Optional.ofNullable(this.predictionName);
    }

    /**
     * Primary profile type.
     * 
     */
    @Import(name="primaryProfileType", required=true)
    private Output<String> primaryProfileType;

    public Output<String> primaryProfileType() {
        return this.primaryProfileType;
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Scope expression.
     * 
     */
    @Import(name="scopeExpression", required=true)
    private Output<String> scopeExpression;

    public Output<String> scopeExpression() {
        return this.scopeExpression;
    }

    /**
     * Score label.
     * 
     */
    @Import(name="scoreLabel", required=true)
    private Output<String> scoreLabel;

    public Output<String> scoreLabel() {
        return this.scoreLabel;
    }

    private PredictionArgs() {}

    private PredictionArgs(PredictionArgs $) {
        this.autoAnalyze = $.autoAnalyze;
        this.description = $.description;
        this.displayName = $.displayName;
        this.grades = $.grades;
        this.hubName = $.hubName;
        this.involvedInteractionTypes = $.involvedInteractionTypes;
        this.involvedKpiTypes = $.involvedKpiTypes;
        this.involvedRelationships = $.involvedRelationships;
        this.mappings = $.mappings;
        this.negativeOutcomeExpression = $.negativeOutcomeExpression;
        this.positiveOutcomeExpression = $.positiveOutcomeExpression;
        this.predictionName = $.predictionName;
        this.primaryProfileType = $.primaryProfileType;
        this.resourceGroupName = $.resourceGroupName;
        this.scopeExpression = $.scopeExpression;
        this.scoreLabel = $.scoreLabel;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PredictionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PredictionArgs $;

        public Builder() {
            $ = new PredictionArgs();
        }

        public Builder(PredictionArgs defaults) {
            $ = new PredictionArgs(Objects.requireNonNull(defaults));
        }

        public Builder autoAnalyze(Output<Boolean> autoAnalyze) {
            $.autoAnalyze = autoAnalyze;
            return this;
        }

        public Builder autoAnalyze(Boolean autoAnalyze) {
            return autoAnalyze(Output.of(autoAnalyze));
        }

        public Builder description(@Nullable Output<Map<String,String>> description) {
            $.description = description;
            return this;
        }

        public Builder description(Map<String,String> description) {
            return description(Output.of(description));
        }

        public Builder displayName(@Nullable Output<Map<String,String>> displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder displayName(Map<String,String> displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder grades(@Nullable Output<List<PredictionGradesArgs>> grades) {
            $.grades = grades;
            return this;
        }

        public Builder grades(List<PredictionGradesArgs> grades) {
            return grades(Output.of(grades));
        }

        public Builder grades(PredictionGradesArgs... grades) {
            return grades(List.of(grades));
        }

        public Builder hubName(Output<String> hubName) {
            $.hubName = hubName;
            return this;
        }

        public Builder hubName(String hubName) {
            return hubName(Output.of(hubName));
        }

        public Builder involvedInteractionTypes(@Nullable Output<List<String>> involvedInteractionTypes) {
            $.involvedInteractionTypes = involvedInteractionTypes;
            return this;
        }

        public Builder involvedInteractionTypes(List<String> involvedInteractionTypes) {
            return involvedInteractionTypes(Output.of(involvedInteractionTypes));
        }

        public Builder involvedInteractionTypes(String... involvedInteractionTypes) {
            return involvedInteractionTypes(List.of(involvedInteractionTypes));
        }

        public Builder involvedKpiTypes(@Nullable Output<List<String>> involvedKpiTypes) {
            $.involvedKpiTypes = involvedKpiTypes;
            return this;
        }

        public Builder involvedKpiTypes(List<String> involvedKpiTypes) {
            return involvedKpiTypes(Output.of(involvedKpiTypes));
        }

        public Builder involvedKpiTypes(String... involvedKpiTypes) {
            return involvedKpiTypes(List.of(involvedKpiTypes));
        }

        public Builder involvedRelationships(@Nullable Output<List<String>> involvedRelationships) {
            $.involvedRelationships = involvedRelationships;
            return this;
        }

        public Builder involvedRelationships(List<String> involvedRelationships) {
            return involvedRelationships(Output.of(involvedRelationships));
        }

        public Builder involvedRelationships(String... involvedRelationships) {
            return involvedRelationships(List.of(involvedRelationships));
        }

        public Builder mappings(Output<PredictionMappingsArgs> mappings) {
            $.mappings = mappings;
            return this;
        }

        public Builder mappings(PredictionMappingsArgs mappings) {
            return mappings(Output.of(mappings));
        }

        public Builder negativeOutcomeExpression(Output<String> negativeOutcomeExpression) {
            $.negativeOutcomeExpression = negativeOutcomeExpression;
            return this;
        }

        public Builder negativeOutcomeExpression(String negativeOutcomeExpression) {
            return negativeOutcomeExpression(Output.of(negativeOutcomeExpression));
        }

        public Builder positiveOutcomeExpression(Output<String> positiveOutcomeExpression) {
            $.positiveOutcomeExpression = positiveOutcomeExpression;
            return this;
        }

        public Builder positiveOutcomeExpression(String positiveOutcomeExpression) {
            return positiveOutcomeExpression(Output.of(positiveOutcomeExpression));
        }

        public Builder predictionName(@Nullable Output<String> predictionName) {
            $.predictionName = predictionName;
            return this;
        }

        public Builder predictionName(String predictionName) {
            return predictionName(Output.of(predictionName));
        }

        public Builder primaryProfileType(Output<String> primaryProfileType) {
            $.primaryProfileType = primaryProfileType;
            return this;
        }

        public Builder primaryProfileType(String primaryProfileType) {
            return primaryProfileType(Output.of(primaryProfileType));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder scopeExpression(Output<String> scopeExpression) {
            $.scopeExpression = scopeExpression;
            return this;
        }

        public Builder scopeExpression(String scopeExpression) {
            return scopeExpression(Output.of(scopeExpression));
        }

        public Builder scoreLabel(Output<String> scoreLabel) {
            $.scoreLabel = scoreLabel;
            return this;
        }

        public Builder scoreLabel(String scoreLabel) {
            return scoreLabel(Output.of(scoreLabel));
        }

        public PredictionArgs build() {
            $.autoAnalyze = Objects.requireNonNull($.autoAnalyze, "expected parameter 'autoAnalyze' to be non-null");
            $.hubName = Objects.requireNonNull($.hubName, "expected parameter 'hubName' to be non-null");
            $.mappings = Objects.requireNonNull($.mappings, "expected parameter 'mappings' to be non-null");
            $.negativeOutcomeExpression = Objects.requireNonNull($.negativeOutcomeExpression, "expected parameter 'negativeOutcomeExpression' to be non-null");
            $.positiveOutcomeExpression = Objects.requireNonNull($.positiveOutcomeExpression, "expected parameter 'positiveOutcomeExpression' to be non-null");
            $.primaryProfileType = Objects.requireNonNull($.primaryProfileType, "expected parameter 'primaryProfileType' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.scopeExpression = Objects.requireNonNull($.scopeExpression, "expected parameter 'scopeExpression' to be non-null");
            $.scoreLabel = Objects.requireNonNull($.scoreLabel, "expected parameter 'scoreLabel' to be non-null");
            return $;
        }
    }

}
