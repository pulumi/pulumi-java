// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.azurenative.datafactory.inputs.DataFlowReferenceResponse;
import com.pulumi.azurenative.datafactory.inputs.DatasetReferenceResponse;
import com.pulumi.azurenative.datafactory.inputs.LinkedServiceReferenceResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Power query sink.
 * 
 */
public final class PowerQuerySinkResponse extends com.pulumi.resources.InvokeArgs {

    public static final PowerQuerySinkResponse Empty = new PowerQuerySinkResponse();

    /**
     * Dataset reference.
     * 
     */
    @Import(name="dataset")
    private @Nullable DatasetReferenceResponse dataset;

    /**
     * @return Dataset reference.
     * 
     */
    public Optional<DatasetReferenceResponse> dataset() {
        return Optional.ofNullable(this.dataset);
    }

    /**
     * Transformation description.
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    /**
     * @return Transformation description.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Flowlet Reference
     * 
     */
    @Import(name="flowlet")
    private @Nullable DataFlowReferenceResponse flowlet;

    /**
     * @return Flowlet Reference
     * 
     */
    public Optional<DataFlowReferenceResponse> flowlet() {
        return Optional.ofNullable(this.flowlet);
    }

    /**
     * Linked service reference.
     * 
     */
    @Import(name="linkedService")
    private @Nullable LinkedServiceReferenceResponse linkedService;

    /**
     * @return Linked service reference.
     * 
     */
    public Optional<LinkedServiceReferenceResponse> linkedService() {
        return Optional.ofNullable(this.linkedService);
    }

    /**
     * Transformation name.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return Transformation name.
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * Schema linked service reference.
     * 
     */
    @Import(name="schemaLinkedService")
    private @Nullable LinkedServiceReferenceResponse schemaLinkedService;

    /**
     * @return Schema linked service reference.
     * 
     */
    public Optional<LinkedServiceReferenceResponse> schemaLinkedService() {
        return Optional.ofNullable(this.schemaLinkedService);
    }

    /**
     * sink script.
     * 
     */
    @Import(name="script")
    private @Nullable String script;

    /**
     * @return sink script.
     * 
     */
    public Optional<String> script() {
        return Optional.ofNullable(this.script);
    }

    private PowerQuerySinkResponse() {}

    private PowerQuerySinkResponse(PowerQuerySinkResponse $) {
        this.dataset = $.dataset;
        this.description = $.description;
        this.flowlet = $.flowlet;
        this.linkedService = $.linkedService;
        this.name = $.name;
        this.schemaLinkedService = $.schemaLinkedService;
        this.script = $.script;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PowerQuerySinkResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PowerQuerySinkResponse $;

        public Builder() {
            $ = new PowerQuerySinkResponse();
        }

        public Builder(PowerQuerySinkResponse defaults) {
            $ = new PowerQuerySinkResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param dataset Dataset reference.
         * 
         * @return builder
         * 
         */
        public Builder dataset(@Nullable DatasetReferenceResponse dataset) {
            $.dataset = dataset;
            return this;
        }

        /**
         * @param description Transformation description.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        /**
         * @param flowlet Flowlet Reference
         * 
         * @return builder
         * 
         */
        public Builder flowlet(@Nullable DataFlowReferenceResponse flowlet) {
            $.flowlet = flowlet;
            return this;
        }

        /**
         * @param linkedService Linked service reference.
         * 
         * @return builder
         * 
         */
        public Builder linkedService(@Nullable LinkedServiceReferenceResponse linkedService) {
            $.linkedService = linkedService;
            return this;
        }

        /**
         * @param name Transformation name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param schemaLinkedService Schema linked service reference.
         * 
         * @return builder
         * 
         */
        public Builder schemaLinkedService(@Nullable LinkedServiceReferenceResponse schemaLinkedService) {
            $.schemaLinkedService = schemaLinkedService;
            return this;
        }

        /**
         * @param script sink script.
         * 
         * @return builder
         * 
         */
        public Builder script(@Nullable String script) {
            $.script = script;
            return this;
        }

        public PowerQuerySinkResponse build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            return $;
        }
    }

}
