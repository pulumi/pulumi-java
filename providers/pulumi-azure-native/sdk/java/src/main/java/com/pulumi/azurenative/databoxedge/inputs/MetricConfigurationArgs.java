// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.databoxedge.inputs;

import com.pulumi.azurenative.databoxedge.inputs.MetricCounterSetArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Metric configuration.
 * 
 */
public final class MetricConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final MetricConfigurationArgs Empty = new MetricConfigurationArgs();

    /**
     * Host name for the IoT hub associated to the device.
     * 
     */
    @Import(name="counterSets", required=true)
    private Output<List<MetricCounterSetArgs>> counterSets;

    /**
     * @return Host name for the IoT hub associated to the device.
     * 
     */
    public Output<List<MetricCounterSetArgs>> counterSets() {
        return this.counterSets;
    }

    /**
     * The MDM account to which the counters should be pushed.
     * 
     */
    @Import(name="mdmAccount")
    private @Nullable Output<String> mdmAccount;

    /**
     * @return The MDM account to which the counters should be pushed.
     * 
     */
    public Optional<Output<String>> mdmAccount() {
        return Optional.ofNullable(this.mdmAccount);
    }

    /**
     * The MDM namespace to which the counters should be pushed. This is required if MDMAccount is specified
     * 
     */
    @Import(name="metricNameSpace")
    private @Nullable Output<String> metricNameSpace;

    /**
     * @return The MDM namespace to which the counters should be pushed. This is required if MDMAccount is specified
     * 
     */
    public Optional<Output<String>> metricNameSpace() {
        return Optional.ofNullable(this.metricNameSpace);
    }

    /**
     * The Resource ID on which the metrics should be pushed.
     * 
     */
    @Import(name="resourceId", required=true)
    private Output<String> resourceId;

    /**
     * @return The Resource ID on which the metrics should be pushed.
     * 
     */
    public Output<String> resourceId() {
        return this.resourceId;
    }

    private MetricConfigurationArgs() {}

    private MetricConfigurationArgs(MetricConfigurationArgs $) {
        this.counterSets = $.counterSets;
        this.mdmAccount = $.mdmAccount;
        this.metricNameSpace = $.metricNameSpace;
        this.resourceId = $.resourceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MetricConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MetricConfigurationArgs $;

        public Builder() {
            $ = new MetricConfigurationArgs();
        }

        public Builder(MetricConfigurationArgs defaults) {
            $ = new MetricConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param counterSets Host name for the IoT hub associated to the device.
         * 
         * @return builder
         * 
         */
        public Builder counterSets(Output<List<MetricCounterSetArgs>> counterSets) {
            $.counterSets = counterSets;
            return this;
        }

        /**
         * @param counterSets Host name for the IoT hub associated to the device.
         * 
         * @return builder
         * 
         */
        public Builder counterSets(List<MetricCounterSetArgs> counterSets) {
            return counterSets(Output.of(counterSets));
        }

        /**
         * @param counterSets Host name for the IoT hub associated to the device.
         * 
         * @return builder
         * 
         */
        public Builder counterSets(MetricCounterSetArgs... counterSets) {
            return counterSets(List.of(counterSets));
        }

        /**
         * @param mdmAccount The MDM account to which the counters should be pushed.
         * 
         * @return builder
         * 
         */
        public Builder mdmAccount(@Nullable Output<String> mdmAccount) {
            $.mdmAccount = mdmAccount;
            return this;
        }

        /**
         * @param mdmAccount The MDM account to which the counters should be pushed.
         * 
         * @return builder
         * 
         */
        public Builder mdmAccount(String mdmAccount) {
            return mdmAccount(Output.of(mdmAccount));
        }

        /**
         * @param metricNameSpace The MDM namespace to which the counters should be pushed. This is required if MDMAccount is specified
         * 
         * @return builder
         * 
         */
        public Builder metricNameSpace(@Nullable Output<String> metricNameSpace) {
            $.metricNameSpace = metricNameSpace;
            return this;
        }

        /**
         * @param metricNameSpace The MDM namespace to which the counters should be pushed. This is required if MDMAccount is specified
         * 
         * @return builder
         * 
         */
        public Builder metricNameSpace(String metricNameSpace) {
            return metricNameSpace(Output.of(metricNameSpace));
        }

        /**
         * @param resourceId The Resource ID on which the metrics should be pushed.
         * 
         * @return builder
         * 
         */
        public Builder resourceId(Output<String> resourceId) {
            $.resourceId = resourceId;
            return this;
        }

        /**
         * @param resourceId The Resource ID on which the metrics should be pushed.
         * 
         * @return builder
         * 
         */
        public Builder resourceId(String resourceId) {
            return resourceId(Output.of(resourceId));
        }

        public MetricConfigurationArgs build() {
            $.counterSets = Objects.requireNonNull($.counterSets, "expected parameter 'counterSets' to be non-null");
            $.resourceId = Objects.requireNonNull($.resourceId, "expected parameter 'resourceId' to be non-null");
            return $;
        }
    }

}
