// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.netapp.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Monthly Schedule properties
 * 
 */
public final class MonthlyScheduleArgs extends com.pulumi.resources.ResourceArgs {

    public static final MonthlyScheduleArgs Empty = new MonthlyScheduleArgs();

    /**
     * Indicates which days of the month snapshot should be taken. A comma delimited string.
     * 
     */
    @Import(name="daysOfMonth")
    private @Nullable Output<String> daysOfMonth;

    /**
     * @return Indicates which days of the month snapshot should be taken. A comma delimited string.
     * 
     */
    public Optional<Output<String>> daysOfMonth() {
        return Optional.ofNullable(this.daysOfMonth);
    }

    /**
     * Indicates which hour in UTC timezone a snapshot should be taken
     * 
     */
    @Import(name="hour")
    private @Nullable Output<Integer> hour;

    /**
     * @return Indicates which hour in UTC timezone a snapshot should be taken
     * 
     */
    public Optional<Output<Integer>> hour() {
        return Optional.ofNullable(this.hour);
    }

    /**
     * Indicates which minute snapshot should be taken
     * 
     */
    @Import(name="minute")
    private @Nullable Output<Integer> minute;

    /**
     * @return Indicates which minute snapshot should be taken
     * 
     */
    public Optional<Output<Integer>> minute() {
        return Optional.ofNullable(this.minute);
    }

    /**
     * Monthly snapshot count to keep
     * 
     */
    @Import(name="snapshotsToKeep")
    private @Nullable Output<Integer> snapshotsToKeep;

    /**
     * @return Monthly snapshot count to keep
     * 
     */
    public Optional<Output<Integer>> snapshotsToKeep() {
        return Optional.ofNullable(this.snapshotsToKeep);
    }

    /**
     * Resource size in bytes, current storage usage for the volume in bytes
     * 
     */
    @Import(name="usedBytes")
    private @Nullable Output<Double> usedBytes;

    /**
     * @return Resource size in bytes, current storage usage for the volume in bytes
     * 
     */
    public Optional<Output<Double>> usedBytes() {
        return Optional.ofNullable(this.usedBytes);
    }

    private MonthlyScheduleArgs() {}

    private MonthlyScheduleArgs(MonthlyScheduleArgs $) {
        this.daysOfMonth = $.daysOfMonth;
        this.hour = $.hour;
        this.minute = $.minute;
        this.snapshotsToKeep = $.snapshotsToKeep;
        this.usedBytes = $.usedBytes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MonthlyScheduleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MonthlyScheduleArgs $;

        public Builder() {
            $ = new MonthlyScheduleArgs();
        }

        public Builder(MonthlyScheduleArgs defaults) {
            $ = new MonthlyScheduleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param daysOfMonth Indicates which days of the month snapshot should be taken. A comma delimited string.
         * 
         * @return builder
         * 
         */
        public Builder daysOfMonth(@Nullable Output<String> daysOfMonth) {
            $.daysOfMonth = daysOfMonth;
            return this;
        }

        /**
         * @param daysOfMonth Indicates which days of the month snapshot should be taken. A comma delimited string.
         * 
         * @return builder
         * 
         */
        public Builder daysOfMonth(String daysOfMonth) {
            return daysOfMonth(Output.of(daysOfMonth));
        }

        /**
         * @param hour Indicates which hour in UTC timezone a snapshot should be taken
         * 
         * @return builder
         * 
         */
        public Builder hour(@Nullable Output<Integer> hour) {
            $.hour = hour;
            return this;
        }

        /**
         * @param hour Indicates which hour in UTC timezone a snapshot should be taken
         * 
         * @return builder
         * 
         */
        public Builder hour(Integer hour) {
            return hour(Output.of(hour));
        }

        /**
         * @param minute Indicates which minute snapshot should be taken
         * 
         * @return builder
         * 
         */
        public Builder minute(@Nullable Output<Integer> minute) {
            $.minute = minute;
            return this;
        }

        /**
         * @param minute Indicates which minute snapshot should be taken
         * 
         * @return builder
         * 
         */
        public Builder minute(Integer minute) {
            return minute(Output.of(minute));
        }

        /**
         * @param snapshotsToKeep Monthly snapshot count to keep
         * 
         * @return builder
         * 
         */
        public Builder snapshotsToKeep(@Nullable Output<Integer> snapshotsToKeep) {
            $.snapshotsToKeep = snapshotsToKeep;
            return this;
        }

        /**
         * @param snapshotsToKeep Monthly snapshot count to keep
         * 
         * @return builder
         * 
         */
        public Builder snapshotsToKeep(Integer snapshotsToKeep) {
            return snapshotsToKeep(Output.of(snapshotsToKeep));
        }

        /**
         * @param usedBytes Resource size in bytes, current storage usage for the volume in bytes
         * 
         * @return builder
         * 
         */
        public Builder usedBytes(@Nullable Output<Double> usedBytes) {
            $.usedBytes = usedBytes;
            return this;
        }

        /**
         * @param usedBytes Resource size in bytes, current storage usage for the volume in bytes
         * 
         * @return builder
         * 
         */
        public Builder usedBytes(Double usedBytes) {
            return usedBytes(Output.of(usedBytes));
        }

        public MonthlyScheduleArgs build() {
            return $;
        }
    }

}
