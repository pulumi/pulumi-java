// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network;

import com.pulumi.azurenative.network.inputs.SubResourceArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DnsResolverArgs extends com.pulumi.resources.ResourceArgs {

    public static final DnsResolverArgs Empty = new DnsResolverArgs();

    /**
     * The name of the DNS resolver.
     * 
     */
    @Import(name="dnsResolverName")
    private @Nullable Output<String> dnsResolverName;

    /**
     * @return The name of the DNS resolver.
     * 
     */
    public Optional<Output<String>> dnsResolverName() {
        return Optional.ofNullable(this.dnsResolverName);
    }

    /**
     * The geo-location where the resource lives
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The geo-location where the resource lives
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group. The name is case insensitive.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Resource tags.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The reference to the virtual network. This cannot be changed after creation.
     * 
     */
    @Import(name="virtualNetwork", required=true)
    private Output<SubResourceArgs> virtualNetwork;

    /**
     * @return The reference to the virtual network. This cannot be changed after creation.
     * 
     */
    public Output<SubResourceArgs> virtualNetwork() {
        return this.virtualNetwork;
    }

    private DnsResolverArgs() {}

    private DnsResolverArgs(DnsResolverArgs $) {
        this.dnsResolverName = $.dnsResolverName;
        this.location = $.location;
        this.resourceGroupName = $.resourceGroupName;
        this.tags = $.tags;
        this.virtualNetwork = $.virtualNetwork;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DnsResolverArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DnsResolverArgs $;

        public Builder() {
            $ = new DnsResolverArgs();
        }

        public Builder(DnsResolverArgs defaults) {
            $ = new DnsResolverArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dnsResolverName The name of the DNS resolver.
         * 
         * @return builder
         * 
         */
        public Builder dnsResolverName(@Nullable Output<String> dnsResolverName) {
            $.dnsResolverName = dnsResolverName;
            return this;
        }

        /**
         * @param dnsResolverName The name of the DNS resolver.
         * 
         * @return builder
         * 
         */
        public Builder dnsResolverName(String dnsResolverName) {
            return dnsResolverName(Output.of(dnsResolverName));
        }

        /**
         * @param location The geo-location where the resource lives
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The geo-location where the resource lives
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param tags Resource tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Resource tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param virtualNetwork The reference to the virtual network. This cannot be changed after creation.
         * 
         * @return builder
         * 
         */
        public Builder virtualNetwork(Output<SubResourceArgs> virtualNetwork) {
            $.virtualNetwork = virtualNetwork;
            return this;
        }

        /**
         * @param virtualNetwork The reference to the virtual network. This cannot be changed after creation.
         * 
         * @return builder
         * 
         */
        public Builder virtualNetwork(SubResourceArgs virtualNetwork) {
            return virtualNetwork(Output.of(virtualNetwork));
        }

        public DnsResolverArgs build() {
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.virtualNetwork = Objects.requireNonNull($.virtualNetwork, "expected parameter 'virtualNetwork' to be non-null");
            return $;
        }
    }

}
