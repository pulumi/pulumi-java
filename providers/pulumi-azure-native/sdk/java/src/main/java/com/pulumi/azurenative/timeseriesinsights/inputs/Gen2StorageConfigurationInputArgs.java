// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.timeseriesinsights.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * The storage configuration provides the connection details that allows the Time Series Insights service to connect to the customer storage account that is used to store the environment&#39;s data.
 * 
 */
public final class Gen2StorageConfigurationInputArgs extends com.pulumi.resources.ResourceArgs {

    public static final Gen2StorageConfigurationInputArgs Empty = new Gen2StorageConfigurationInputArgs();

    /**
     * The name of the storage account that will hold the environment&#39;s Gen2 data.
     * 
     */
    @Import(name="accountName", required=true)
    private Output<String> accountName;

    /**
     * @return The name of the storage account that will hold the environment&#39;s Gen2 data.
     * 
     */
    public Output<String> accountName() {
        return this.accountName;
    }

    /**
     * The value of the management key that grants the Time Series Insights service write access to the storage account. This property is not shown in environment responses.
     * 
     */
    @Import(name="managementKey", required=true)
    private Output<String> managementKey;

    /**
     * @return The value of the management key that grants the Time Series Insights service write access to the storage account. This property is not shown in environment responses.
     * 
     */
    public Output<String> managementKey() {
        return this.managementKey;
    }

    private Gen2StorageConfigurationInputArgs() {}

    private Gen2StorageConfigurationInputArgs(Gen2StorageConfigurationInputArgs $) {
        this.accountName = $.accountName;
        this.managementKey = $.managementKey;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(Gen2StorageConfigurationInputArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Gen2StorageConfigurationInputArgs $;

        public Builder() {
            $ = new Gen2StorageConfigurationInputArgs();
        }

        public Builder(Gen2StorageConfigurationInputArgs defaults) {
            $ = new Gen2StorageConfigurationInputArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountName The name of the storage account that will hold the environment&#39;s Gen2 data.
         * 
         * @return builder
         * 
         */
        public Builder accountName(Output<String> accountName) {
            $.accountName = accountName;
            return this;
        }

        /**
         * @param accountName The name of the storage account that will hold the environment&#39;s Gen2 data.
         * 
         * @return builder
         * 
         */
        public Builder accountName(String accountName) {
            return accountName(Output.of(accountName));
        }

        /**
         * @param managementKey The value of the management key that grants the Time Series Insights service write access to the storage account. This property is not shown in environment responses.
         * 
         * @return builder
         * 
         */
        public Builder managementKey(Output<String> managementKey) {
            $.managementKey = managementKey;
            return this;
        }

        /**
         * @param managementKey The value of the management key that grants the Time Series Insights service write access to the storage account. This property is not shown in environment responses.
         * 
         * @return builder
         * 
         */
        public Builder managementKey(String managementKey) {
            return managementKey(Output.of(managementKey));
        }

        public Gen2StorageConfigurationInputArgs build() {
            $.accountName = Objects.requireNonNull($.accountName, "expected parameter 'accountName' to be non-null");
            $.managementKey = Objects.requireNonNull($.managementKey, "expected parameter 'managementKey' to be non-null");
            return $;
        }
    }

}
