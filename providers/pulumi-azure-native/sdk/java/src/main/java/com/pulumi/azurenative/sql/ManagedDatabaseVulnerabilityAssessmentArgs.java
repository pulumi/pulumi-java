// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.sql;

import com.pulumi.azurenative.sql.inputs.VulnerabilityAssessmentRecurringScansPropertiesArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ManagedDatabaseVulnerabilityAssessmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final ManagedDatabaseVulnerabilityAssessmentArgs Empty = new ManagedDatabaseVulnerabilityAssessmentArgs();

    /**
     * The name of the database for which the vulnerability assessment is defined.
     * 
     */
    @Import(name="databaseName", required=true)
    private Output<String> databaseName;

    /**
     * @return The name of the database for which the vulnerability assessment is defined.
     * 
     */
    public Output<String> databaseName() {
        return this.databaseName;
    }

    /**
     * The name of the managed instance.
     * 
     */
    @Import(name="managedInstanceName", required=true)
    private Output<String> managedInstanceName;

    /**
     * @return The name of the managed instance.
     * 
     */
    public Output<String> managedInstanceName() {
        return this.managedInstanceName;
    }

    /**
     * The recurring scans settings
     * 
     */
    @Import(name="recurringScans")
    private @Nullable Output<VulnerabilityAssessmentRecurringScansPropertiesArgs> recurringScans;

    /**
     * @return The recurring scans settings
     * 
     */
    public Optional<Output<VulnerabilityAssessmentRecurringScansPropertiesArgs>> recurringScans() {
        return Optional.ofNullable(this.recurringScans);
    }

    /**
     * The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Specifies the identifier key of the storage account for vulnerability assessment scan results. If &#39;StorageContainerSasKey&#39; isn&#39;t specified, storageAccountAccessKey is required.
     * 
     */
    @Import(name="storageAccountAccessKey")
    private @Nullable Output<String> storageAccountAccessKey;

    /**
     * @return Specifies the identifier key of the storage account for vulnerability assessment scan results. If &#39;StorageContainerSasKey&#39; isn&#39;t specified, storageAccountAccessKey is required.
     * 
     */
    public Optional<Output<String>> storageAccountAccessKey() {
        return Optional.ofNullable(this.storageAccountAccessKey);
    }

    /**
     * A blob storage container path to hold the scan results (e.g. https://myStorage.blob.core.windows.net/VaScans/).  It is required if server level vulnerability assessment policy doesn&#39;t set
     * 
     */
    @Import(name="storageContainerPath")
    private @Nullable Output<String> storageContainerPath;

    /**
     * @return A blob storage container path to hold the scan results (e.g. https://myStorage.blob.core.windows.net/VaScans/).  It is required if server level vulnerability assessment policy doesn&#39;t set
     * 
     */
    public Optional<Output<String>> storageContainerPath() {
        return Optional.ofNullable(this.storageContainerPath);
    }

    /**
     * A shared access signature (SAS Key) that has write access to the blob container specified in &#39;storageContainerPath&#39; parameter. If &#39;storageAccountAccessKey&#39; isn&#39;t specified, StorageContainerSasKey is required.
     * 
     */
    @Import(name="storageContainerSasKey")
    private @Nullable Output<String> storageContainerSasKey;

    /**
     * @return A shared access signature (SAS Key) that has write access to the blob container specified in &#39;storageContainerPath&#39; parameter. If &#39;storageAccountAccessKey&#39; isn&#39;t specified, StorageContainerSasKey is required.
     * 
     */
    public Optional<Output<String>> storageContainerSasKey() {
        return Optional.ofNullable(this.storageContainerSasKey);
    }

    /**
     * The name of the vulnerability assessment.
     * 
     */
    @Import(name="vulnerabilityAssessmentName")
    private @Nullable Output<String> vulnerabilityAssessmentName;

    /**
     * @return The name of the vulnerability assessment.
     * 
     */
    public Optional<Output<String>> vulnerabilityAssessmentName() {
        return Optional.ofNullable(this.vulnerabilityAssessmentName);
    }

    private ManagedDatabaseVulnerabilityAssessmentArgs() {}

    private ManagedDatabaseVulnerabilityAssessmentArgs(ManagedDatabaseVulnerabilityAssessmentArgs $) {
        this.databaseName = $.databaseName;
        this.managedInstanceName = $.managedInstanceName;
        this.recurringScans = $.recurringScans;
        this.resourceGroupName = $.resourceGroupName;
        this.storageAccountAccessKey = $.storageAccountAccessKey;
        this.storageContainerPath = $.storageContainerPath;
        this.storageContainerSasKey = $.storageContainerSasKey;
        this.vulnerabilityAssessmentName = $.vulnerabilityAssessmentName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagedDatabaseVulnerabilityAssessmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagedDatabaseVulnerabilityAssessmentArgs $;

        public Builder() {
            $ = new ManagedDatabaseVulnerabilityAssessmentArgs();
        }

        public Builder(ManagedDatabaseVulnerabilityAssessmentArgs defaults) {
            $ = new ManagedDatabaseVulnerabilityAssessmentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param databaseName The name of the database for which the vulnerability assessment is defined.
         * 
         * @return builder
         * 
         */
        public Builder databaseName(Output<String> databaseName) {
            $.databaseName = databaseName;
            return this;
        }

        /**
         * @param databaseName The name of the database for which the vulnerability assessment is defined.
         * 
         * @return builder
         * 
         */
        public Builder databaseName(String databaseName) {
            return databaseName(Output.of(databaseName));
        }

        /**
         * @param managedInstanceName The name of the managed instance.
         * 
         * @return builder
         * 
         */
        public Builder managedInstanceName(Output<String> managedInstanceName) {
            $.managedInstanceName = managedInstanceName;
            return this;
        }

        /**
         * @param managedInstanceName The name of the managed instance.
         * 
         * @return builder
         * 
         */
        public Builder managedInstanceName(String managedInstanceName) {
            return managedInstanceName(Output.of(managedInstanceName));
        }

        /**
         * @param recurringScans The recurring scans settings
         * 
         * @return builder
         * 
         */
        public Builder recurringScans(@Nullable Output<VulnerabilityAssessmentRecurringScansPropertiesArgs> recurringScans) {
            $.recurringScans = recurringScans;
            return this;
        }

        /**
         * @param recurringScans The recurring scans settings
         * 
         * @return builder
         * 
         */
        public Builder recurringScans(VulnerabilityAssessmentRecurringScansPropertiesArgs recurringScans) {
            return recurringScans(Output.of(recurringScans));
        }

        /**
         * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param storageAccountAccessKey Specifies the identifier key of the storage account for vulnerability assessment scan results. If &#39;StorageContainerSasKey&#39; isn&#39;t specified, storageAccountAccessKey is required.
         * 
         * @return builder
         * 
         */
        public Builder storageAccountAccessKey(@Nullable Output<String> storageAccountAccessKey) {
            $.storageAccountAccessKey = storageAccountAccessKey;
            return this;
        }

        /**
         * @param storageAccountAccessKey Specifies the identifier key of the storage account for vulnerability assessment scan results. If &#39;StorageContainerSasKey&#39; isn&#39;t specified, storageAccountAccessKey is required.
         * 
         * @return builder
         * 
         */
        public Builder storageAccountAccessKey(String storageAccountAccessKey) {
            return storageAccountAccessKey(Output.of(storageAccountAccessKey));
        }

        /**
         * @param storageContainerPath A blob storage container path to hold the scan results (e.g. https://myStorage.blob.core.windows.net/VaScans/).  It is required if server level vulnerability assessment policy doesn&#39;t set
         * 
         * @return builder
         * 
         */
        public Builder storageContainerPath(@Nullable Output<String> storageContainerPath) {
            $.storageContainerPath = storageContainerPath;
            return this;
        }

        /**
         * @param storageContainerPath A blob storage container path to hold the scan results (e.g. https://myStorage.blob.core.windows.net/VaScans/).  It is required if server level vulnerability assessment policy doesn&#39;t set
         * 
         * @return builder
         * 
         */
        public Builder storageContainerPath(String storageContainerPath) {
            return storageContainerPath(Output.of(storageContainerPath));
        }

        /**
         * @param storageContainerSasKey A shared access signature (SAS Key) that has write access to the blob container specified in &#39;storageContainerPath&#39; parameter. If &#39;storageAccountAccessKey&#39; isn&#39;t specified, StorageContainerSasKey is required.
         * 
         * @return builder
         * 
         */
        public Builder storageContainerSasKey(@Nullable Output<String> storageContainerSasKey) {
            $.storageContainerSasKey = storageContainerSasKey;
            return this;
        }

        /**
         * @param storageContainerSasKey A shared access signature (SAS Key) that has write access to the blob container specified in &#39;storageContainerPath&#39; parameter. If &#39;storageAccountAccessKey&#39; isn&#39;t specified, StorageContainerSasKey is required.
         * 
         * @return builder
         * 
         */
        public Builder storageContainerSasKey(String storageContainerSasKey) {
            return storageContainerSasKey(Output.of(storageContainerSasKey));
        }

        /**
         * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
         * 
         * @return builder
         * 
         */
        public Builder vulnerabilityAssessmentName(@Nullable Output<String> vulnerabilityAssessmentName) {
            $.vulnerabilityAssessmentName = vulnerabilityAssessmentName;
            return this;
        }

        /**
         * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
         * 
         * @return builder
         * 
         */
        public Builder vulnerabilityAssessmentName(String vulnerabilityAssessmentName) {
            return vulnerabilityAssessmentName(Output.of(vulnerabilityAssessmentName));
        }

        public ManagedDatabaseVulnerabilityAssessmentArgs build() {
            $.databaseName = Objects.requireNonNull($.databaseName, "expected parameter 'databaseName' to be non-null");
            $.managedInstanceName = Objects.requireNonNull($.managedInstanceName, "expected parameter 'managedInstanceName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
