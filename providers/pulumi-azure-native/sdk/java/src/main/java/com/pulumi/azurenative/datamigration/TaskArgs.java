// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datamigration;

import com.pulumi.azurenative.datamigration.inputs.ConnectToSourcePostgreSqlSyncTaskPropertiesArgs;
import com.pulumi.azurenative.datamigration.inputs.ConnectToSourceSqlServerSyncTaskPropertiesArgs;
import com.pulumi.azurenative.datamigration.inputs.ConnectToSourceSqlServerTaskPropertiesArgs;
import com.pulumi.azurenative.datamigration.inputs.ConnectToTargetAzureDbForMySqlTaskPropertiesArgs;
import com.pulumi.azurenative.datamigration.inputs.ConnectToTargetAzureDbForPostgreSqlSyncTaskPropertiesArgs;
import com.pulumi.azurenative.datamigration.inputs.ConnectToTargetSqlDbTaskPropertiesArgs;
import com.pulumi.azurenative.datamigration.inputs.ConnectToTargetSqlMISyncTaskPropertiesArgs;
import com.pulumi.azurenative.datamigration.inputs.ConnectToTargetSqlMITaskPropertiesArgs;
import com.pulumi.azurenative.datamigration.inputs.ConnectToTargetSqlSqlDbSyncTaskPropertiesArgs;
import com.pulumi.azurenative.datamigration.inputs.GetTdeCertificatesSqlTaskPropertiesArgs;
import com.pulumi.azurenative.datamigration.inputs.GetUserTablesSqlSyncTaskPropertiesArgs;
import com.pulumi.azurenative.datamigration.inputs.GetUserTablesSqlTaskPropertiesArgs;
import com.pulumi.azurenative.datamigration.inputs.MigrateMySqlAzureDbForMySqlSyncTaskPropertiesArgs;
import com.pulumi.azurenative.datamigration.inputs.MigratePostgreSqlAzureDbForPostgreSqlSyncTaskPropertiesArgs;
import com.pulumi.azurenative.datamigration.inputs.MigrateSqlServerSqlDbSyncTaskPropertiesArgs;
import com.pulumi.azurenative.datamigration.inputs.MigrateSqlServerSqlDbTaskPropertiesArgs;
import com.pulumi.azurenative.datamigration.inputs.MigrateSqlServerSqlMISyncTaskPropertiesArgs;
import com.pulumi.azurenative.datamigration.inputs.MigrateSqlServerSqlMITaskPropertiesArgs;
import com.pulumi.azurenative.datamigration.inputs.ValidateMigrationInputSqlServerSqlDbSyncTaskPropertiesArgs;
import com.pulumi.azurenative.datamigration.inputs.ValidateMigrationInputSqlServerSqlMISyncTaskPropertiesArgs;
import com.pulumi.azurenative.datamigration.inputs.ValidateMigrationInputSqlServerSqlMITaskPropertiesArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TaskArgs extends com.pulumi.resources.ResourceArgs {

    public static final TaskArgs Empty = new TaskArgs();

    /**
     * Name of the resource group
     * 
     */
    @Import(name="groupName", required=true)
    private Output<String> groupName;

    public Output<String> groupName() {
        return this.groupName;
    }

    /**
     * Name of the project
     * 
     */
    @Import(name="projectName", required=true)
    private Output<String> projectName;

    public Output<String> projectName() {
        return this.projectName;
    }

    /**
     * Custom task properties
     * 
     */
    @Import(name="properties")
    private @Nullable Output<Object> properties;

    public Optional<Output<Object>> properties() {
        return Optional.ofNullable(this.properties);
    }

    /**
     * Name of the service
     * 
     */
    @Import(name="serviceName", required=true)
    private Output<String> serviceName;

    public Output<String> serviceName() {
        return this.serviceName;
    }

    /**
     * Name of the Task
     * 
     */
    @Import(name="taskName")
    private @Nullable Output<String> taskName;

    public Optional<Output<String>> taskName() {
        return Optional.ofNullable(this.taskName);
    }

    private TaskArgs() {}

    private TaskArgs(TaskArgs $) {
        this.groupName = $.groupName;
        this.projectName = $.projectName;
        this.properties = $.properties;
        this.serviceName = $.serviceName;
        this.taskName = $.taskName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TaskArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TaskArgs $;

        public Builder() {
            $ = new TaskArgs();
        }

        public Builder(TaskArgs defaults) {
            $ = new TaskArgs(Objects.requireNonNull(defaults));
        }

        public Builder groupName(Output<String> groupName) {
            $.groupName = groupName;
            return this;
        }

        public Builder groupName(String groupName) {
            return groupName(Output.of(groupName));
        }

        public Builder projectName(Output<String> projectName) {
            $.projectName = projectName;
            return this;
        }

        public Builder projectName(String projectName) {
            return projectName(Output.of(projectName));
        }

        public Builder properties(@Nullable Output<Object> properties) {
            $.properties = properties;
            return this;
        }

        public Builder properties(Object properties) {
            return properties(Output.of(properties));
        }

        public Builder serviceName(Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        public Builder taskName(@Nullable Output<String> taskName) {
            $.taskName = taskName;
            return this;
        }

        public Builder taskName(String taskName) {
            return taskName(Output.of(taskName));
        }

        public TaskArgs build() {
            $.groupName = Objects.requireNonNull($.groupName, "expected parameter 'groupName' to be non-null");
            $.projectName = Objects.requireNonNull($.projectName, "expected parameter 'projectName' to be non-null");
            $.serviceName = Objects.requireNonNull($.serviceName, "expected parameter 'serviceName' to be non-null");
            return $;
        }
    }

}
