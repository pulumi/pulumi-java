// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.streamanalytics;

import com.pulumi.azurenative.streamanalytics.enums.CompatibilityLevel;
import com.pulumi.azurenative.streamanalytics.enums.EventsOutOfOrderPolicy;
import com.pulumi.azurenative.streamanalytics.enums.OutputErrorPolicy;
import com.pulumi.azurenative.streamanalytics.enums.OutputStartMode;
import com.pulumi.azurenative.streamanalytics.inputs.FunctionArgs;
import com.pulumi.azurenative.streamanalytics.inputs.InputArgs;
import com.pulumi.azurenative.streamanalytics.inputs.OutputArgs;
import com.pulumi.azurenative.streamanalytics.inputs.SkuArgs;
import com.pulumi.azurenative.streamanalytics.inputs.TransformationArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StreamingJobArgs extends com.pulumi.resources.ResourceArgs {

    public static final StreamingJobArgs Empty = new StreamingJobArgs();

    /**
     * Controls certain runtime behaviors of the streaming job.
     * 
     */
    @Import(name="compatibilityLevel")
    private @Nullable Output<Either<String,CompatibilityLevel>> compatibilityLevel;

    public Optional<Output<Either<String,CompatibilityLevel>>> compatibilityLevel() {
        return Optional.ofNullable(this.compatibilityLevel);
    }

    /**
     * The data locale of the stream analytics job. Value should be the name of a supported .NET Culture from the set https://msdn.microsoft.com/en-us/library/system.globalization.culturetypes(v=vs.110).aspx. Defaults to &#39;en-US&#39; if none specified.
     * 
     */
    @Import(name="dataLocale")
    private @Nullable Output<String> dataLocale;

    public Optional<Output<String>> dataLocale() {
        return Optional.ofNullable(this.dataLocale);
    }

    /**
     * The maximum tolerable delay in seconds where events arriving late could be included.  Supported range is -1 to 1814399 (20.23:59:59 days) and -1 is used to specify wait indefinitely. If the property is absent, it is interpreted to have a value of -1.
     * 
     */
    @Import(name="eventsLateArrivalMaxDelayInSeconds")
    private @Nullable Output<Integer> eventsLateArrivalMaxDelayInSeconds;

    public Optional<Output<Integer>> eventsLateArrivalMaxDelayInSeconds() {
        return Optional.ofNullable(this.eventsLateArrivalMaxDelayInSeconds);
    }

    /**
     * The maximum tolerable delay in seconds where out-of-order events can be adjusted to be back in order.
     * 
     */
    @Import(name="eventsOutOfOrderMaxDelayInSeconds")
    private @Nullable Output<Integer> eventsOutOfOrderMaxDelayInSeconds;

    public Optional<Output<Integer>> eventsOutOfOrderMaxDelayInSeconds() {
        return Optional.ofNullable(this.eventsOutOfOrderMaxDelayInSeconds);
    }

    /**
     * Indicates the policy to apply to events that arrive out of order in the input event stream.
     * 
     */
    @Import(name="eventsOutOfOrderPolicy")
    private @Nullable Output<Either<String,EventsOutOfOrderPolicy>> eventsOutOfOrderPolicy;

    public Optional<Output<Either<String,EventsOutOfOrderPolicy>>> eventsOutOfOrderPolicy() {
        return Optional.ofNullable(this.eventsOutOfOrderPolicy);
    }

    /**
     * A list of one or more functions for the streaming job. The name property for each function is required when specifying this property in a PUT request. This property cannot be modify via a PATCH operation. You must use the PATCH API available for the individual transformation.
     * 
     */
    @Import(name="functions")
    private @Nullable Output<List<FunctionArgs>> functions;

    public Optional<Output<List<FunctionArgs>>> functions() {
        return Optional.ofNullable(this.functions);
    }

    /**
     * A list of one or more inputs to the streaming job. The name property for each input is required when specifying this property in a PUT request. This property cannot be modify via a PATCH operation. You must use the PATCH API available for the individual input.
     * 
     */
    @Import(name="inputs")
    private @Nullable Output<List<InputArgs>> inputs;

    public Optional<Output<List<InputArgs>>> inputs() {
        return Optional.ofNullable(this.inputs);
    }

    /**
     * The name of the streaming job.
     * 
     */
    @Import(name="jobName")
    private @Nullable Output<String> jobName;

    public Optional<Output<String>> jobName() {
        return Optional.ofNullable(this.jobName);
    }

    /**
     * The geo-location where the resource lives
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Indicates the policy to apply to events that arrive at the output and cannot be written to the external storage due to being malformed (missing column values, column values of wrong type or size).
     * 
     */
    @Import(name="outputErrorPolicy")
    private @Nullable Output<Either<String,OutputErrorPolicy>> outputErrorPolicy;

    public Optional<Output<Either<String,OutputErrorPolicy>>> outputErrorPolicy() {
        return Optional.ofNullable(this.outputErrorPolicy);
    }

    /**
     * This property should only be utilized when it is desired that the job be started immediately upon creation. Value may be JobStartTime, CustomTime, or LastOutputEventTime to indicate whether the starting point of the output event stream should start whenever the job is started, start at a custom user time stamp specified via the outputStartTime property, or start from the last event output time.
     * 
     */
    @Import(name="outputStartMode")
    private @Nullable Output<Either<String,OutputStartMode>> outputStartMode;

    public Optional<Output<Either<String,OutputStartMode>>> outputStartMode() {
        return Optional.ofNullable(this.outputStartMode);
    }

    /**
     * Value is either an ISO-8601 formatted time stamp that indicates the starting point of the output event stream, or null to indicate that the output event stream will start whenever the streaming job is started. This property must have a value if outputStartMode is set to CustomTime.
     * 
     */
    @Import(name="outputStartTime")
    private @Nullable Output<String> outputStartTime;

    public Optional<Output<String>> outputStartTime() {
        return Optional.ofNullable(this.outputStartTime);
    }

    /**
     * A list of one or more outputs for the streaming job. The name property for each output is required when specifying this property in a PUT request. This property cannot be modify via a PATCH operation. You must use the PATCH API available for the individual output.
     * 
     */
    @Import(name="outputs")
    private @Nullable Output<List<OutputArgs>> outputs;

    public Optional<Output<List<OutputArgs>>> outputs() {
        return Optional.ofNullable(this.outputs);
    }

    /**
     * The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Describes the SKU of the streaming job. Required on PUT (CreateOrReplace) requests.
     * 
     */
    @Import(name="sku")
    private @Nullable Output<SkuArgs> sku;

    public Optional<Output<SkuArgs>> sku() {
        return Optional.ofNullable(this.sku);
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Indicates the query and the number of streaming units to use for the streaming job. The name property of the transformation is required when specifying this property in a PUT request. This property cannot be modify via a PATCH operation. You must use the PATCH API available for the individual transformation.
     * 
     */
    @Import(name="transformation")
    private @Nullable Output<TransformationArgs> transformation;

    public Optional<Output<TransformationArgs>> transformation() {
        return Optional.ofNullable(this.transformation);
    }

    private StreamingJobArgs() {}

    private StreamingJobArgs(StreamingJobArgs $) {
        this.compatibilityLevel = $.compatibilityLevel;
        this.dataLocale = $.dataLocale;
        this.eventsLateArrivalMaxDelayInSeconds = $.eventsLateArrivalMaxDelayInSeconds;
        this.eventsOutOfOrderMaxDelayInSeconds = $.eventsOutOfOrderMaxDelayInSeconds;
        this.eventsOutOfOrderPolicy = $.eventsOutOfOrderPolicy;
        this.functions = $.functions;
        this.inputs = $.inputs;
        this.jobName = $.jobName;
        this.location = $.location;
        this.outputErrorPolicy = $.outputErrorPolicy;
        this.outputStartMode = $.outputStartMode;
        this.outputStartTime = $.outputStartTime;
        this.outputs = $.outputs;
        this.resourceGroupName = $.resourceGroupName;
        this.sku = $.sku;
        this.tags = $.tags;
        this.transformation = $.transformation;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StreamingJobArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StreamingJobArgs $;

        public Builder() {
            $ = new StreamingJobArgs();
        }

        public Builder(StreamingJobArgs defaults) {
            $ = new StreamingJobArgs(Objects.requireNonNull(defaults));
        }

        public Builder compatibilityLevel(@Nullable Output<Either<String,CompatibilityLevel>> compatibilityLevel) {
            $.compatibilityLevel = compatibilityLevel;
            return this;
        }

        public Builder compatibilityLevel(Either<String,CompatibilityLevel> compatibilityLevel) {
            return compatibilityLevel(Output.of(compatibilityLevel));
        }

        public Builder dataLocale(@Nullable Output<String> dataLocale) {
            $.dataLocale = dataLocale;
            return this;
        }

        public Builder dataLocale(String dataLocale) {
            return dataLocale(Output.of(dataLocale));
        }

        public Builder eventsLateArrivalMaxDelayInSeconds(@Nullable Output<Integer> eventsLateArrivalMaxDelayInSeconds) {
            $.eventsLateArrivalMaxDelayInSeconds = eventsLateArrivalMaxDelayInSeconds;
            return this;
        }

        public Builder eventsLateArrivalMaxDelayInSeconds(Integer eventsLateArrivalMaxDelayInSeconds) {
            return eventsLateArrivalMaxDelayInSeconds(Output.of(eventsLateArrivalMaxDelayInSeconds));
        }

        public Builder eventsOutOfOrderMaxDelayInSeconds(@Nullable Output<Integer> eventsOutOfOrderMaxDelayInSeconds) {
            $.eventsOutOfOrderMaxDelayInSeconds = eventsOutOfOrderMaxDelayInSeconds;
            return this;
        }

        public Builder eventsOutOfOrderMaxDelayInSeconds(Integer eventsOutOfOrderMaxDelayInSeconds) {
            return eventsOutOfOrderMaxDelayInSeconds(Output.of(eventsOutOfOrderMaxDelayInSeconds));
        }

        public Builder eventsOutOfOrderPolicy(@Nullable Output<Either<String,EventsOutOfOrderPolicy>> eventsOutOfOrderPolicy) {
            $.eventsOutOfOrderPolicy = eventsOutOfOrderPolicy;
            return this;
        }

        public Builder eventsOutOfOrderPolicy(Either<String,EventsOutOfOrderPolicy> eventsOutOfOrderPolicy) {
            return eventsOutOfOrderPolicy(Output.of(eventsOutOfOrderPolicy));
        }

        public Builder functions(@Nullable Output<List<FunctionArgs>> functions) {
            $.functions = functions;
            return this;
        }

        public Builder functions(List<FunctionArgs> functions) {
            return functions(Output.of(functions));
        }

        public Builder functions(FunctionArgs... functions) {
            return functions(List.of(functions));
        }

        public Builder inputs(@Nullable Output<List<InputArgs>> inputs) {
            $.inputs = inputs;
            return this;
        }

        public Builder inputs(List<InputArgs> inputs) {
            return inputs(Output.of(inputs));
        }

        public Builder inputs(InputArgs... inputs) {
            return inputs(List.of(inputs));
        }

        public Builder jobName(@Nullable Output<String> jobName) {
            $.jobName = jobName;
            return this;
        }

        public Builder jobName(String jobName) {
            return jobName(Output.of(jobName));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder outputErrorPolicy(@Nullable Output<Either<String,OutputErrorPolicy>> outputErrorPolicy) {
            $.outputErrorPolicy = outputErrorPolicy;
            return this;
        }

        public Builder outputErrorPolicy(Either<String,OutputErrorPolicy> outputErrorPolicy) {
            return outputErrorPolicy(Output.of(outputErrorPolicy));
        }

        public Builder outputStartMode(@Nullable Output<Either<String,OutputStartMode>> outputStartMode) {
            $.outputStartMode = outputStartMode;
            return this;
        }

        public Builder outputStartMode(Either<String,OutputStartMode> outputStartMode) {
            return outputStartMode(Output.of(outputStartMode));
        }

        public Builder outputStartTime(@Nullable Output<String> outputStartTime) {
            $.outputStartTime = outputStartTime;
            return this;
        }

        public Builder outputStartTime(String outputStartTime) {
            return outputStartTime(Output.of(outputStartTime));
        }

        public Builder outputs(@Nullable Output<List<OutputArgs>> outputs) {
            $.outputs = outputs;
            return this;
        }

        public Builder outputs(List<OutputArgs> outputs) {
            return outputs(Output.of(outputs));
        }

        public Builder outputs(OutputArgs... outputs) {
            return outputs(List.of(outputs));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder sku(@Nullable Output<SkuArgs> sku) {
            $.sku = sku;
            return this;
        }

        public Builder sku(SkuArgs sku) {
            return sku(Output.of(sku));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder transformation(@Nullable Output<TransformationArgs> transformation) {
            $.transformation = transformation;
            return this;
        }

        public Builder transformation(TransformationArgs transformation) {
            return transformation(Output.of(transformation));
        }

        public StreamingJobArgs build() {
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
