// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datamigration.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Source SQL Connection
 * 
 */
public final class SqlConnectionInformationArgs extends com.pulumi.resources.ResourceArgs {

    public static final SqlConnectionInformationArgs Empty = new SqlConnectionInformationArgs();

    /**
     * Authentication type.
     * 
     */
    @Import(name="authentication")
    private @Nullable Output<String> authentication;

    /**
     * @return Authentication type.
     * 
     */
    public Optional<Output<String>> authentication() {
        return Optional.ofNullable(this.authentication);
    }

    /**
     * Data source.
     * 
     */
    @Import(name="dataSource")
    private @Nullable Output<String> dataSource;

    /**
     * @return Data source.
     * 
     */
    public Optional<Output<String>> dataSource() {
        return Optional.ofNullable(this.dataSource);
    }

    /**
     * Whether to encrypt connection or not.
     * 
     */
    @Import(name="encryptConnection")
    private @Nullable Output<Boolean> encryptConnection;

    /**
     * @return Whether to encrypt connection or not.
     * 
     */
    public Optional<Output<Boolean>> encryptConnection() {
        return Optional.ofNullable(this.encryptConnection);
    }

    /**
     * Password to connect to source SQL.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return Password to connect to source SQL.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * Whether to trust server certificate or not.
     * 
     */
    @Import(name="trustServerCertificate")
    private @Nullable Output<Boolean> trustServerCertificate;

    /**
     * @return Whether to trust server certificate or not.
     * 
     */
    public Optional<Output<Boolean>> trustServerCertificate() {
        return Optional.ofNullable(this.trustServerCertificate);
    }

    /**
     * User name to connect to source SQL.
     * 
     */
    @Import(name="userName")
    private @Nullable Output<String> userName;

    /**
     * @return User name to connect to source SQL.
     * 
     */
    public Optional<Output<String>> userName() {
        return Optional.ofNullable(this.userName);
    }

    private SqlConnectionInformationArgs() {}

    private SqlConnectionInformationArgs(SqlConnectionInformationArgs $) {
        this.authentication = $.authentication;
        this.dataSource = $.dataSource;
        this.encryptConnection = $.encryptConnection;
        this.password = $.password;
        this.trustServerCertificate = $.trustServerCertificate;
        this.userName = $.userName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SqlConnectionInformationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SqlConnectionInformationArgs $;

        public Builder() {
            $ = new SqlConnectionInformationArgs();
        }

        public Builder(SqlConnectionInformationArgs defaults) {
            $ = new SqlConnectionInformationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authentication Authentication type.
         * 
         * @return builder
         * 
         */
        public Builder authentication(@Nullable Output<String> authentication) {
            $.authentication = authentication;
            return this;
        }

        /**
         * @param authentication Authentication type.
         * 
         * @return builder
         * 
         */
        public Builder authentication(String authentication) {
            return authentication(Output.of(authentication));
        }

        /**
         * @param dataSource Data source.
         * 
         * @return builder
         * 
         */
        public Builder dataSource(@Nullable Output<String> dataSource) {
            $.dataSource = dataSource;
            return this;
        }

        /**
         * @param dataSource Data source.
         * 
         * @return builder
         * 
         */
        public Builder dataSource(String dataSource) {
            return dataSource(Output.of(dataSource));
        }

        /**
         * @param encryptConnection Whether to encrypt connection or not.
         * 
         * @return builder
         * 
         */
        public Builder encryptConnection(@Nullable Output<Boolean> encryptConnection) {
            $.encryptConnection = encryptConnection;
            return this;
        }

        /**
         * @param encryptConnection Whether to encrypt connection or not.
         * 
         * @return builder
         * 
         */
        public Builder encryptConnection(Boolean encryptConnection) {
            return encryptConnection(Output.of(encryptConnection));
        }

        /**
         * @param password Password to connect to source SQL.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password Password to connect to source SQL.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param trustServerCertificate Whether to trust server certificate or not.
         * 
         * @return builder
         * 
         */
        public Builder trustServerCertificate(@Nullable Output<Boolean> trustServerCertificate) {
            $.trustServerCertificate = trustServerCertificate;
            return this;
        }

        /**
         * @param trustServerCertificate Whether to trust server certificate or not.
         * 
         * @return builder
         * 
         */
        public Builder trustServerCertificate(Boolean trustServerCertificate) {
            return trustServerCertificate(Output.of(trustServerCertificate));
        }

        /**
         * @param userName User name to connect to source SQL.
         * 
         * @return builder
         * 
         */
        public Builder userName(@Nullable Output<String> userName) {
            $.userName = userName;
            return this;
        }

        /**
         * @param userName User name to connect to source SQL.
         * 
         * @return builder
         * 
         */
        public Builder userName(String userName) {
            return userName(Output.of(userName));
        }

        public SqlConnectionInformationArgs build() {
            return $;
        }
    }

}
