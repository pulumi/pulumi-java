// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Sftp read settings.
 * 
 */
public final class SftpReadSettingsResponse extends com.pulumi.resources.InvokeArgs {

    public static final SftpReadSettingsResponse Empty = new SftpReadSettingsResponse();

    /**
     * Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression with resultType boolean).
     * 
     */
    @Import(name="deleteFilesAfterCompletion")
    private @Nullable Object deleteFilesAfterCompletion;

    public Optional<Object> deleteFilesAfterCompletion() {
        return Optional.ofNullable(this.deleteFilesAfterCompletion);
    }

    /**
     * If true, disable parallel reading within each file. Default is false. Type: boolean (or Expression with resultType boolean).
     * 
     */
    @Import(name="disableChunking")
    private @Nullable Object disableChunking;

    public Optional<Object> disableChunking() {
        return Optional.ofNullable(this.disableChunking);
    }

    /**
     * If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
     * 
     */
    @Import(name="disableMetricsCollection")
    private @Nullable Object disableMetricsCollection;

    public Optional<Object> disableMetricsCollection() {
        return Optional.ofNullable(this.disableMetricsCollection);
    }

    /**
     * Indicates whether to enable partition discovery.
     * 
     */
    @Import(name="enablePartitionDiscovery")
    private @Nullable Boolean enablePartitionDiscovery;

    public Optional<Boolean> enablePartitionDiscovery() {
        return Optional.ofNullable(this.enablePartitionDiscovery);
    }

    /**
     * Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="fileListPath")
    private @Nullable Object fileListPath;

    public Optional<Object> fileListPath() {
        return Optional.ofNullable(this.fileListPath);
    }

    /**
     * The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
     * 
     */
    @Import(name="maxConcurrentConnections")
    private @Nullable Object maxConcurrentConnections;

    public Optional<Object> maxConcurrentConnections() {
        return Optional.ofNullable(this.maxConcurrentConnections);
    }

    /**
     * The end of file&#39;s modified datetime. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="modifiedDatetimeEnd")
    private @Nullable Object modifiedDatetimeEnd;

    public Optional<Object> modifiedDatetimeEnd() {
        return Optional.ofNullable(this.modifiedDatetimeEnd);
    }

    /**
     * The start of file&#39;s modified datetime. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="modifiedDatetimeStart")
    private @Nullable Object modifiedDatetimeStart;

    public Optional<Object> modifiedDatetimeStart() {
        return Optional.ofNullable(this.modifiedDatetimeStart);
    }

    /**
     * Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="partitionRootPath")
    private @Nullable Object partitionRootPath;

    public Optional<Object> partitionRootPath() {
        return Optional.ofNullable(this.partitionRootPath);
    }

    /**
     * If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType boolean).
     * 
     */
    @Import(name="recursive")
    private @Nullable Object recursive;

    public Optional<Object> recursive() {
        return Optional.ofNullable(this.recursive);
    }

    /**
     * The read setting type.
     * Expected value is &#39;SftpReadSettings&#39;.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    public String type() {
        return this.type;
    }

    /**
     * Sftp wildcardFileName. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="wildcardFileName")
    private @Nullable Object wildcardFileName;

    public Optional<Object> wildcardFileName() {
        return Optional.ofNullable(this.wildcardFileName);
    }

    /**
     * Sftp wildcardFolderPath. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="wildcardFolderPath")
    private @Nullable Object wildcardFolderPath;

    public Optional<Object> wildcardFolderPath() {
        return Optional.ofNullable(this.wildcardFolderPath);
    }

    private SftpReadSettingsResponse() {}

    private SftpReadSettingsResponse(SftpReadSettingsResponse $) {
        this.deleteFilesAfterCompletion = $.deleteFilesAfterCompletion;
        this.disableChunking = $.disableChunking;
        this.disableMetricsCollection = $.disableMetricsCollection;
        this.enablePartitionDiscovery = $.enablePartitionDiscovery;
        this.fileListPath = $.fileListPath;
        this.maxConcurrentConnections = $.maxConcurrentConnections;
        this.modifiedDatetimeEnd = $.modifiedDatetimeEnd;
        this.modifiedDatetimeStart = $.modifiedDatetimeStart;
        this.partitionRootPath = $.partitionRootPath;
        this.recursive = $.recursive;
        this.type = $.type;
        this.wildcardFileName = $.wildcardFileName;
        this.wildcardFolderPath = $.wildcardFolderPath;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SftpReadSettingsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SftpReadSettingsResponse $;

        public Builder() {
            $ = new SftpReadSettingsResponse();
        }

        public Builder(SftpReadSettingsResponse defaults) {
            $ = new SftpReadSettingsResponse(Objects.requireNonNull(defaults));
        }

        public Builder deleteFilesAfterCompletion(@Nullable Object deleteFilesAfterCompletion) {
            $.deleteFilesAfterCompletion = deleteFilesAfterCompletion;
            return this;
        }

        public Builder disableChunking(@Nullable Object disableChunking) {
            $.disableChunking = disableChunking;
            return this;
        }

        public Builder disableMetricsCollection(@Nullable Object disableMetricsCollection) {
            $.disableMetricsCollection = disableMetricsCollection;
            return this;
        }

        public Builder enablePartitionDiscovery(@Nullable Boolean enablePartitionDiscovery) {
            $.enablePartitionDiscovery = enablePartitionDiscovery;
            return this;
        }

        public Builder fileListPath(@Nullable Object fileListPath) {
            $.fileListPath = fileListPath;
            return this;
        }

        public Builder maxConcurrentConnections(@Nullable Object maxConcurrentConnections) {
            $.maxConcurrentConnections = maxConcurrentConnections;
            return this;
        }

        public Builder modifiedDatetimeEnd(@Nullable Object modifiedDatetimeEnd) {
            $.modifiedDatetimeEnd = modifiedDatetimeEnd;
            return this;
        }

        public Builder modifiedDatetimeStart(@Nullable Object modifiedDatetimeStart) {
            $.modifiedDatetimeStart = modifiedDatetimeStart;
            return this;
        }

        public Builder partitionRootPath(@Nullable Object partitionRootPath) {
            $.partitionRootPath = partitionRootPath;
            return this;
        }

        public Builder recursive(@Nullable Object recursive) {
            $.recursive = recursive;
            return this;
        }

        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public Builder wildcardFileName(@Nullable Object wildcardFileName) {
            $.wildcardFileName = wildcardFileName;
            return this;
        }

        public Builder wildcardFolderPath(@Nullable Object wildcardFolderPath) {
            $.wildcardFolderPath = wildcardFolderPath;
            return this;
        }

        public SftpReadSettingsResponse build() {
            $.type = Codegen.stringProp("type").arg($.type).require();
            return $;
        }
    }

}
