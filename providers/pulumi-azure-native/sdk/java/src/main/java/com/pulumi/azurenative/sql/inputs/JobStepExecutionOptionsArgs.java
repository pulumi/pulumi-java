// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.sql.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Double;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The execution options of a job step.
 * 
 */
public final class JobStepExecutionOptionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final JobStepExecutionOptionsArgs Empty = new JobStepExecutionOptionsArgs();

    /**
     * Initial delay between retries for job step execution.
     * 
     */
    @Import(name="initialRetryIntervalSeconds")
    private @Nullable Output<Integer> initialRetryIntervalSeconds;

    /**
     * @return Initial delay between retries for job step execution.
     * 
     */
    public Optional<Output<Integer>> initialRetryIntervalSeconds() {
        return Optional.ofNullable(this.initialRetryIntervalSeconds);
    }

    /**
     * The maximum amount of time to wait between retries for job step execution.
     * 
     */
    @Import(name="maximumRetryIntervalSeconds")
    private @Nullable Output<Integer> maximumRetryIntervalSeconds;

    /**
     * @return The maximum amount of time to wait between retries for job step execution.
     * 
     */
    public Optional<Output<Integer>> maximumRetryIntervalSeconds() {
        return Optional.ofNullable(this.maximumRetryIntervalSeconds);
    }

    /**
     * Maximum number of times the job step will be reattempted if the first attempt fails.
     * 
     */
    @Import(name="retryAttempts")
    private @Nullable Output<Integer> retryAttempts;

    /**
     * @return Maximum number of times the job step will be reattempted if the first attempt fails.
     * 
     */
    public Optional<Output<Integer>> retryAttempts() {
        return Optional.ofNullable(this.retryAttempts);
    }

    /**
     * The backoff multiplier for the time between retries.
     * 
     */
    @Import(name="retryIntervalBackoffMultiplier")
    private @Nullable Output<Double> retryIntervalBackoffMultiplier;

    /**
     * @return The backoff multiplier for the time between retries.
     * 
     */
    public Optional<Output<Double>> retryIntervalBackoffMultiplier() {
        return Optional.ofNullable(this.retryIntervalBackoffMultiplier);
    }

    /**
     * Execution timeout for the job step.
     * 
     */
    @Import(name="timeoutSeconds")
    private @Nullable Output<Integer> timeoutSeconds;

    /**
     * @return Execution timeout for the job step.
     * 
     */
    public Optional<Output<Integer>> timeoutSeconds() {
        return Optional.ofNullable(this.timeoutSeconds);
    }

    private JobStepExecutionOptionsArgs() {}

    private JobStepExecutionOptionsArgs(JobStepExecutionOptionsArgs $) {
        this.initialRetryIntervalSeconds = $.initialRetryIntervalSeconds;
        this.maximumRetryIntervalSeconds = $.maximumRetryIntervalSeconds;
        this.retryAttempts = $.retryAttempts;
        this.retryIntervalBackoffMultiplier = $.retryIntervalBackoffMultiplier;
        this.timeoutSeconds = $.timeoutSeconds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(JobStepExecutionOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private JobStepExecutionOptionsArgs $;

        public Builder() {
            $ = new JobStepExecutionOptionsArgs();
        }

        public Builder(JobStepExecutionOptionsArgs defaults) {
            $ = new JobStepExecutionOptionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param initialRetryIntervalSeconds Initial delay between retries for job step execution.
         * 
         * @return builder
         * 
         */
        public Builder initialRetryIntervalSeconds(@Nullable Output<Integer> initialRetryIntervalSeconds) {
            $.initialRetryIntervalSeconds = initialRetryIntervalSeconds;
            return this;
        }

        /**
         * @param initialRetryIntervalSeconds Initial delay between retries for job step execution.
         * 
         * @return builder
         * 
         */
        public Builder initialRetryIntervalSeconds(Integer initialRetryIntervalSeconds) {
            return initialRetryIntervalSeconds(Output.of(initialRetryIntervalSeconds));
        }

        /**
         * @param maximumRetryIntervalSeconds The maximum amount of time to wait between retries for job step execution.
         * 
         * @return builder
         * 
         */
        public Builder maximumRetryIntervalSeconds(@Nullable Output<Integer> maximumRetryIntervalSeconds) {
            $.maximumRetryIntervalSeconds = maximumRetryIntervalSeconds;
            return this;
        }

        /**
         * @param maximumRetryIntervalSeconds The maximum amount of time to wait between retries for job step execution.
         * 
         * @return builder
         * 
         */
        public Builder maximumRetryIntervalSeconds(Integer maximumRetryIntervalSeconds) {
            return maximumRetryIntervalSeconds(Output.of(maximumRetryIntervalSeconds));
        }

        /**
         * @param retryAttempts Maximum number of times the job step will be reattempted if the first attempt fails.
         * 
         * @return builder
         * 
         */
        public Builder retryAttempts(@Nullable Output<Integer> retryAttempts) {
            $.retryAttempts = retryAttempts;
            return this;
        }

        /**
         * @param retryAttempts Maximum number of times the job step will be reattempted if the first attempt fails.
         * 
         * @return builder
         * 
         */
        public Builder retryAttempts(Integer retryAttempts) {
            return retryAttempts(Output.of(retryAttempts));
        }

        /**
         * @param retryIntervalBackoffMultiplier The backoff multiplier for the time between retries.
         * 
         * @return builder
         * 
         */
        public Builder retryIntervalBackoffMultiplier(@Nullable Output<Double> retryIntervalBackoffMultiplier) {
            $.retryIntervalBackoffMultiplier = retryIntervalBackoffMultiplier;
            return this;
        }

        /**
         * @param retryIntervalBackoffMultiplier The backoff multiplier for the time between retries.
         * 
         * @return builder
         * 
         */
        public Builder retryIntervalBackoffMultiplier(Double retryIntervalBackoffMultiplier) {
            return retryIntervalBackoffMultiplier(Output.of(retryIntervalBackoffMultiplier));
        }

        /**
         * @param timeoutSeconds Execution timeout for the job step.
         * 
         * @return builder
         * 
         */
        public Builder timeoutSeconds(@Nullable Output<Integer> timeoutSeconds) {
            $.timeoutSeconds = timeoutSeconds;
            return this;
        }

        /**
         * @param timeoutSeconds Execution timeout for the job step.
         * 
         * @return builder
         * 
         */
        public Builder timeoutSeconds(Integer timeoutSeconds) {
            return timeoutSeconds(Output.of(timeoutSeconds));
        }

        public JobStepExecutionOptionsArgs build() {
            $.initialRetryIntervalSeconds = Codegen.integerProp("initialRetryIntervalSeconds").output().arg($.initialRetryIntervalSeconds).def(1).getNullable();
            $.maximumRetryIntervalSeconds = Codegen.integerProp("maximumRetryIntervalSeconds").output().arg($.maximumRetryIntervalSeconds).def(120).getNullable();
            $.retryAttempts = Codegen.integerProp("retryAttempts").output().arg($.retryAttempts).def(10).getNullable();
            $.retryIntervalBackoffMultiplier = Codegen.doubleProp("retryIntervalBackoffMultiplier").output().arg($.retryIntervalBackoffMultiplier).def(2e+00).getNullable();
            $.timeoutSeconds = Codegen.integerProp("timeoutSeconds").output().arg($.timeoutSeconds).def(43200).getNullable();
            return $;
        }
    }

}
