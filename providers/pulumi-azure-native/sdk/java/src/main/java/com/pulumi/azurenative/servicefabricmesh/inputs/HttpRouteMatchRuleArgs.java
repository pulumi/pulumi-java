// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.servicefabricmesh.inputs;

import com.pulumi.azurenative.servicefabricmesh.inputs.HttpRouteMatchHeaderArgs;
import com.pulumi.azurenative.servicefabricmesh.inputs.HttpRouteMatchPathArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Describes a rule for http route matching.
 * 
 */
public final class HttpRouteMatchRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final HttpRouteMatchRuleArgs Empty = new HttpRouteMatchRuleArgs();

    /**
     * headers and their values to match in request.
     * 
     */
    @Import(name="headers")
    private @Nullable Output<List<HttpRouteMatchHeaderArgs>> headers;

    public Optional<Output<List<HttpRouteMatchHeaderArgs>>> headers() {
        return Optional.ofNullable(this.headers);
    }

    /**
     * Path to match for routing.
     * 
     */
    @Import(name="path", required=true)
    private Output<HttpRouteMatchPathArgs> path;

    public Output<HttpRouteMatchPathArgs> path() {
        return this.path;
    }

    private HttpRouteMatchRuleArgs() {}

    private HttpRouteMatchRuleArgs(HttpRouteMatchRuleArgs $) {
        this.headers = $.headers;
        this.path = $.path;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HttpRouteMatchRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HttpRouteMatchRuleArgs $;

        public Builder() {
            $ = new HttpRouteMatchRuleArgs();
        }

        public Builder(HttpRouteMatchRuleArgs defaults) {
            $ = new HttpRouteMatchRuleArgs(Objects.requireNonNull(defaults));
        }

        public Builder headers(@Nullable Output<List<HttpRouteMatchHeaderArgs>> headers) {
            $.headers = headers;
            return this;
        }

        public Builder headers(List<HttpRouteMatchHeaderArgs> headers) {
            return headers(Output.of(headers));
        }

        public Builder headers(HttpRouteMatchHeaderArgs... headers) {
            return headers(List.of(headers));
        }

        public Builder path(Output<HttpRouteMatchPathArgs> path) {
            $.path = path;
            return this;
        }

        public Builder path(HttpRouteMatchPathArgs path) {
            return path(Output.of(path));
        }

        public HttpRouteMatchRuleArgs build() {
            $.path = Objects.requireNonNull($.path, "expected parameter 'path' to be non-null");
            return $;
        }
    }

}
