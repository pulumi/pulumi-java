// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.virtualmachineimages.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;


/**
 * Describes an image source that is a managed image in customer subscription.
 * 
 */
public final class ImageTemplateManagedImageSourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final ImageTemplateManagedImageSourceArgs Empty = new ImageTemplateManagedImageSourceArgs();

    /**
     * ARM resource id of the managed image in customer subscription
     * 
     */
    @Import(name="imageId", required=true)
    private Output<String> imageId;

    /**
     * @return ARM resource id of the managed image in customer subscription
     * 
     */
    public Output<String> imageId() {
        return this.imageId;
    }

    /**
     * Specifies the type of source image you want to start with.
     * Expected value is &#39;ManagedImage&#39;.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Specifies the type of source image you want to start with.
     * Expected value is &#39;ManagedImage&#39;.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private ImageTemplateManagedImageSourceArgs() {}

    private ImageTemplateManagedImageSourceArgs(ImageTemplateManagedImageSourceArgs $) {
        this.imageId = $.imageId;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ImageTemplateManagedImageSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ImageTemplateManagedImageSourceArgs $;

        public Builder() {
            $ = new ImageTemplateManagedImageSourceArgs();
        }

        public Builder(ImageTemplateManagedImageSourceArgs defaults) {
            $ = new ImageTemplateManagedImageSourceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param imageId ARM resource id of the managed image in customer subscription
         * 
         * @return builder
         * 
         */
        public Builder imageId(Output<String> imageId) {
            $.imageId = imageId;
            return this;
        }

        /**
         * @param imageId ARM resource id of the managed image in customer subscription
         * 
         * @return builder
         * 
         */
        public Builder imageId(String imageId) {
            return imageId(Output.of(imageId));
        }

        /**
         * @param type Specifies the type of source image you want to start with.
         * Expected value is &#39;ManagedImage&#39;.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Specifies the type of source image you want to start with.
         * Expected value is &#39;ManagedImage&#39;.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public ImageTemplateManagedImageSourceArgs build() {
            $.imageId = Objects.requireNonNull($.imageId, "expected parameter 'imageId' to be non-null");
            $.type = Codegen.stringProp("type").output().arg($.type).require();
            return $;
        }
    }

}
