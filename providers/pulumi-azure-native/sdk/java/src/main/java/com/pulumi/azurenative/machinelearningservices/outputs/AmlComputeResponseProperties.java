// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.machinelearningservices.outputs;

import com.pulumi.azurenative.machinelearningservices.outputs.MachineLearningServiceErrorResponse;
import com.pulumi.azurenative.machinelearningservices.outputs.NodeStateCountsResponse;
import com.pulumi.azurenative.machinelearningservices.outputs.ResourceIdResponse;
import com.pulumi.azurenative.machinelearningservices.outputs.ScaleSettingsResponse;
import com.pulumi.azurenative.machinelearningservices.outputs.UserAccountCredentialsResponse;
import com.pulumi.azurenative.machinelearningservices.outputs.VirtualMachineImageResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AmlComputeResponseProperties {
    /**
     * @return Allocation state of the compute. Possible values are: steady - Indicates that the compute is not resizing. There are no changes to the number of compute nodes in the compute in progress. A compute enters this state when it is created and when no operations are being performed on the compute to change the number of compute nodes. resizing - Indicates that the compute is resizing; that is, compute nodes are being added to or removed from the compute.
     * 
     */
    private final String allocationState;
    /**
     * @return The time at which the compute entered its current allocation state.
     * 
     */
    private final String allocationStateTransitionTime;
    /**
     * @return The number of compute nodes currently assigned to the compute.
     * 
     */
    private final Integer currentNodeCount;
    /**
     * @return Enable or disable node public IP address provisioning. Possible values are: Possible values are: true - Indicates that the compute nodes will have public IPs provisioned. false - Indicates that the compute nodes will have a private endpoint and no public IPs.
     * 
     */
    private final @Nullable Boolean enableNodePublicIp;
    /**
     * @return Collection of errors encountered by various compute nodes during node setup.
     * 
     */
    private final List<MachineLearningServiceErrorResponse> errors;
    /**
     * @return Network is isolated or not
     * 
     */
    private final @Nullable Boolean isolatedNetwork;
    /**
     * @return Counts of various node states on the compute.
     * 
     */
    private final NodeStateCountsResponse nodeStateCounts;
    /**
     * @return Compute OS Type
     * 
     */
    private final @Nullable String osType;
    /**
     * @return State of the public SSH port. Possible values are: Disabled - Indicates that the public ssh port is closed on all nodes of the cluster. Enabled - Indicates that the public ssh port is open on all nodes of the cluster. NotSpecified - Indicates that the public ssh port is closed on all nodes of the cluster if VNet is defined, else is open all public nodes. It can be default only during cluster creation time, after creation it will be either enabled or disabled.
     * 
     */
    private final @Nullable String remoteLoginPortPublicAccess;
    /**
     * @return Scale settings for AML Compute
     * 
     */
    private final @Nullable ScaleSettingsResponse scaleSettings;
    /**
     * @return Virtual network subnet resource ID the compute nodes belong to.
     * 
     */
    private final @Nullable ResourceIdResponse subnet;
    /**
     * @return The target number of compute nodes for the compute. If the allocationState is resizing, this property denotes the target node count for the ongoing resize operation. If the allocationState is steady, this property denotes the target node count for the previous resize operation.
     * 
     */
    private final Integer targetNodeCount;
    /**
     * @return Credentials for an administrator user account that will be created on each compute node.
     * 
     */
    private final @Nullable UserAccountCredentialsResponse userAccountCredentials;
    /**
     * @return Virtual Machine image for AML Compute - windows only
     * 
     */
    private final @Nullable VirtualMachineImageResponse virtualMachineImage;
    /**
     * @return Virtual Machine priority
     * 
     */
    private final @Nullable String vmPriority;
    /**
     * @return Virtual Machine Size
     * 
     */
    private final @Nullable String vmSize;

    @CustomType.Constructor
    private AmlComputeResponseProperties(
        @CustomType.Parameter("allocationState") String allocationState,
        @CustomType.Parameter("allocationStateTransitionTime") String allocationStateTransitionTime,
        @CustomType.Parameter("currentNodeCount") Integer currentNodeCount,
        @CustomType.Parameter("enableNodePublicIp") @Nullable Boolean enableNodePublicIp,
        @CustomType.Parameter("errors") List<MachineLearningServiceErrorResponse> errors,
        @CustomType.Parameter("isolatedNetwork") @Nullable Boolean isolatedNetwork,
        @CustomType.Parameter("nodeStateCounts") NodeStateCountsResponse nodeStateCounts,
        @CustomType.Parameter("osType") @Nullable String osType,
        @CustomType.Parameter("remoteLoginPortPublicAccess") @Nullable String remoteLoginPortPublicAccess,
        @CustomType.Parameter("scaleSettings") @Nullable ScaleSettingsResponse scaleSettings,
        @CustomType.Parameter("subnet") @Nullable ResourceIdResponse subnet,
        @CustomType.Parameter("targetNodeCount") Integer targetNodeCount,
        @CustomType.Parameter("userAccountCredentials") @Nullable UserAccountCredentialsResponse userAccountCredentials,
        @CustomType.Parameter("virtualMachineImage") @Nullable VirtualMachineImageResponse virtualMachineImage,
        @CustomType.Parameter("vmPriority") @Nullable String vmPriority,
        @CustomType.Parameter("vmSize") @Nullable String vmSize) {
        this.allocationState = allocationState;
        this.allocationStateTransitionTime = allocationStateTransitionTime;
        this.currentNodeCount = currentNodeCount;
        this.enableNodePublicIp = enableNodePublicIp;
        this.errors = errors;
        this.isolatedNetwork = isolatedNetwork;
        this.nodeStateCounts = nodeStateCounts;
        this.osType = osType;
        this.remoteLoginPortPublicAccess = remoteLoginPortPublicAccess;
        this.scaleSettings = scaleSettings;
        this.subnet = subnet;
        this.targetNodeCount = targetNodeCount;
        this.userAccountCredentials = userAccountCredentials;
        this.virtualMachineImage = virtualMachineImage;
        this.vmPriority = vmPriority;
        this.vmSize = vmSize;
    }

    /**
     * @return Allocation state of the compute. Possible values are: steady - Indicates that the compute is not resizing. There are no changes to the number of compute nodes in the compute in progress. A compute enters this state when it is created and when no operations are being performed on the compute to change the number of compute nodes. resizing - Indicates that the compute is resizing; that is, compute nodes are being added to or removed from the compute.
     * 
     */
    public String allocationState() {
        return this.allocationState;
    }
    /**
     * @return The time at which the compute entered its current allocation state.
     * 
     */
    public String allocationStateTransitionTime() {
        return this.allocationStateTransitionTime;
    }
    /**
     * @return The number of compute nodes currently assigned to the compute.
     * 
     */
    public Integer currentNodeCount() {
        return this.currentNodeCount;
    }
    /**
     * @return Enable or disable node public IP address provisioning. Possible values are: Possible values are: true - Indicates that the compute nodes will have public IPs provisioned. false - Indicates that the compute nodes will have a private endpoint and no public IPs.
     * 
     */
    public Optional<Boolean> enableNodePublicIp() {
        return Optional.ofNullable(this.enableNodePublicIp);
    }
    /**
     * @return Collection of errors encountered by various compute nodes during node setup.
     * 
     */
    public List<MachineLearningServiceErrorResponse> errors() {
        return this.errors;
    }
    /**
     * @return Network is isolated or not
     * 
     */
    public Optional<Boolean> isolatedNetwork() {
        return Optional.ofNullable(this.isolatedNetwork);
    }
    /**
     * @return Counts of various node states on the compute.
     * 
     */
    public NodeStateCountsResponse nodeStateCounts() {
        return this.nodeStateCounts;
    }
    /**
     * @return Compute OS Type
     * 
     */
    public Optional<String> osType() {
        return Optional.ofNullable(this.osType);
    }
    /**
     * @return State of the public SSH port. Possible values are: Disabled - Indicates that the public ssh port is closed on all nodes of the cluster. Enabled - Indicates that the public ssh port is open on all nodes of the cluster. NotSpecified - Indicates that the public ssh port is closed on all nodes of the cluster if VNet is defined, else is open all public nodes. It can be default only during cluster creation time, after creation it will be either enabled or disabled.
     * 
     */
    public Optional<String> remoteLoginPortPublicAccess() {
        return Optional.ofNullable(this.remoteLoginPortPublicAccess);
    }
    /**
     * @return Scale settings for AML Compute
     * 
     */
    public Optional<ScaleSettingsResponse> scaleSettings() {
        return Optional.ofNullable(this.scaleSettings);
    }
    /**
     * @return Virtual network subnet resource ID the compute nodes belong to.
     * 
     */
    public Optional<ResourceIdResponse> subnet() {
        return Optional.ofNullable(this.subnet);
    }
    /**
     * @return The target number of compute nodes for the compute. If the allocationState is resizing, this property denotes the target node count for the ongoing resize operation. If the allocationState is steady, this property denotes the target node count for the previous resize operation.
     * 
     */
    public Integer targetNodeCount() {
        return this.targetNodeCount;
    }
    /**
     * @return Credentials for an administrator user account that will be created on each compute node.
     * 
     */
    public Optional<UserAccountCredentialsResponse> userAccountCredentials() {
        return Optional.ofNullable(this.userAccountCredentials);
    }
    /**
     * @return Virtual Machine image for AML Compute - windows only
     * 
     */
    public Optional<VirtualMachineImageResponse> virtualMachineImage() {
        return Optional.ofNullable(this.virtualMachineImage);
    }
    /**
     * @return Virtual Machine priority
     * 
     */
    public Optional<String> vmPriority() {
        return Optional.ofNullable(this.vmPriority);
    }
    /**
     * @return Virtual Machine Size
     * 
     */
    public Optional<String> vmSize() {
        return Optional.ofNullable(this.vmSize);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AmlComputeResponseProperties defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String allocationState;
        private String allocationStateTransitionTime;
        private Integer currentNodeCount;
        private @Nullable Boolean enableNodePublicIp;
        private List<MachineLearningServiceErrorResponse> errors;
        private @Nullable Boolean isolatedNetwork;
        private NodeStateCountsResponse nodeStateCounts;
        private @Nullable String osType;
        private @Nullable String remoteLoginPortPublicAccess;
        private @Nullable ScaleSettingsResponse scaleSettings;
        private @Nullable ResourceIdResponse subnet;
        private Integer targetNodeCount;
        private @Nullable UserAccountCredentialsResponse userAccountCredentials;
        private @Nullable VirtualMachineImageResponse virtualMachineImage;
        private @Nullable String vmPriority;
        private @Nullable String vmSize;

        public Builder() {
    	      // Empty
        }

        public Builder(AmlComputeResponseProperties defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allocationState = defaults.allocationState;
    	      this.allocationStateTransitionTime = defaults.allocationStateTransitionTime;
    	      this.currentNodeCount = defaults.currentNodeCount;
    	      this.enableNodePublicIp = defaults.enableNodePublicIp;
    	      this.errors = defaults.errors;
    	      this.isolatedNetwork = defaults.isolatedNetwork;
    	      this.nodeStateCounts = defaults.nodeStateCounts;
    	      this.osType = defaults.osType;
    	      this.remoteLoginPortPublicAccess = defaults.remoteLoginPortPublicAccess;
    	      this.scaleSettings = defaults.scaleSettings;
    	      this.subnet = defaults.subnet;
    	      this.targetNodeCount = defaults.targetNodeCount;
    	      this.userAccountCredentials = defaults.userAccountCredentials;
    	      this.virtualMachineImage = defaults.virtualMachineImage;
    	      this.vmPriority = defaults.vmPriority;
    	      this.vmSize = defaults.vmSize;
        }

        public Builder allocationState(String allocationState) {
            this.allocationState = Objects.requireNonNull(allocationState);
            return this;
        }
        public Builder allocationStateTransitionTime(String allocationStateTransitionTime) {
            this.allocationStateTransitionTime = Objects.requireNonNull(allocationStateTransitionTime);
            return this;
        }
        public Builder currentNodeCount(Integer currentNodeCount) {
            this.currentNodeCount = Objects.requireNonNull(currentNodeCount);
            return this;
        }
        public Builder enableNodePublicIp(@Nullable Boolean enableNodePublicIp) {
            this.enableNodePublicIp = enableNodePublicIp;
            return this;
        }
        public Builder errors(List<MachineLearningServiceErrorResponse> errors) {
            this.errors = Objects.requireNonNull(errors);
            return this;
        }
        public Builder errors(MachineLearningServiceErrorResponse... errors) {
            return errors(List.of(errors));
        }
        public Builder isolatedNetwork(@Nullable Boolean isolatedNetwork) {
            this.isolatedNetwork = isolatedNetwork;
            return this;
        }
        public Builder nodeStateCounts(NodeStateCountsResponse nodeStateCounts) {
            this.nodeStateCounts = Objects.requireNonNull(nodeStateCounts);
            return this;
        }
        public Builder osType(@Nullable String osType) {
            this.osType = osType;
            return this;
        }
        public Builder remoteLoginPortPublicAccess(@Nullable String remoteLoginPortPublicAccess) {
            this.remoteLoginPortPublicAccess = remoteLoginPortPublicAccess;
            return this;
        }
        public Builder scaleSettings(@Nullable ScaleSettingsResponse scaleSettings) {
            this.scaleSettings = scaleSettings;
            return this;
        }
        public Builder subnet(@Nullable ResourceIdResponse subnet) {
            this.subnet = subnet;
            return this;
        }
        public Builder targetNodeCount(Integer targetNodeCount) {
            this.targetNodeCount = Objects.requireNonNull(targetNodeCount);
            return this;
        }
        public Builder userAccountCredentials(@Nullable UserAccountCredentialsResponse userAccountCredentials) {
            this.userAccountCredentials = userAccountCredentials;
            return this;
        }
        public Builder virtualMachineImage(@Nullable VirtualMachineImageResponse virtualMachineImage) {
            this.virtualMachineImage = virtualMachineImage;
            return this;
        }
        public Builder vmPriority(@Nullable String vmPriority) {
            this.vmPriority = vmPriority;
            return this;
        }
        public Builder vmSize(@Nullable String vmSize) {
            this.vmSize = vmSize;
            return this;
        }        public AmlComputeResponseProperties build() {
            return new AmlComputeResponseProperties(allocationState, allocationStateTransitionTime, currentNodeCount, enableNodePublicIp, errors, isolatedNetwork, nodeStateCounts, osType, remoteLoginPortPublicAccess, scaleSettings, subnet, targetNodeCount, userAccountCredentials, virtualMachineImage, vmPriority, vmSize);
        }
    }
}
