// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


/**
 * Gateway routing details.
 * 
 */
public final class GatewayRouteResponse extends com.pulumi.resources.InvokeArgs {

    public static final GatewayRouteResponse Empty = new GatewayRouteResponse();

    /**
     * The route&#39;s AS path sequence.
     * 
     */
    @Import(name="asPath", required=true)
    private String asPath;

    public String asPath() {
        return this.asPath;
    }

    /**
     * The gateway&#39;s local address.
     * 
     */
    @Import(name="localAddress", required=true)
    private String localAddress;

    public String localAddress() {
        return this.localAddress;
    }

    /**
     * The route&#39;s network prefix.
     * 
     */
    @Import(name="network", required=true)
    private String network;

    public String network() {
        return this.network;
    }

    /**
     * The route&#39;s next hop.
     * 
     */
    @Import(name="nextHop", required=true)
    private String nextHop;

    public String nextHop() {
        return this.nextHop;
    }

    /**
     * The source this route was learned from.
     * 
     */
    @Import(name="origin", required=true)
    private String origin;

    public String origin() {
        return this.origin;
    }

    /**
     * The peer this route was learned from.
     * 
     */
    @Import(name="sourcePeer", required=true)
    private String sourcePeer;

    public String sourcePeer() {
        return this.sourcePeer;
    }

    /**
     * The route&#39;s weight.
     * 
     */
    @Import(name="weight", required=true)
    private Integer weight;

    public Integer weight() {
        return this.weight;
    }

    private GatewayRouteResponse() {}

    private GatewayRouteResponse(GatewayRouteResponse $) {
        this.asPath = $.asPath;
        this.localAddress = $.localAddress;
        this.network = $.network;
        this.nextHop = $.nextHop;
        this.origin = $.origin;
        this.sourcePeer = $.sourcePeer;
        this.weight = $.weight;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GatewayRouteResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GatewayRouteResponse $;

        public Builder() {
            $ = new GatewayRouteResponse();
        }

        public Builder(GatewayRouteResponse defaults) {
            $ = new GatewayRouteResponse(Objects.requireNonNull(defaults));
        }

        public Builder asPath(String asPath) {
            $.asPath = asPath;
            return this;
        }

        public Builder localAddress(String localAddress) {
            $.localAddress = localAddress;
            return this;
        }

        public Builder network(String network) {
            $.network = network;
            return this;
        }

        public Builder nextHop(String nextHop) {
            $.nextHop = nextHop;
            return this;
        }

        public Builder origin(String origin) {
            $.origin = origin;
            return this;
        }

        public Builder sourcePeer(String sourcePeer) {
            $.sourcePeer = sourcePeer;
            return this;
        }

        public Builder weight(Integer weight) {
            $.weight = weight;
            return this;
        }

        public GatewayRouteResponse build() {
            $.asPath = Objects.requireNonNull($.asPath, "expected parameter 'asPath' to be non-null");
            $.localAddress = Objects.requireNonNull($.localAddress, "expected parameter 'localAddress' to be non-null");
            $.network = Objects.requireNonNull($.network, "expected parameter 'network' to be non-null");
            $.nextHop = Objects.requireNonNull($.nextHop, "expected parameter 'nextHop' to be non-null");
            $.origin = Objects.requireNonNull($.origin, "expected parameter 'origin' to be non-null");
            $.sourcePeer = Objects.requireNonNull($.sourcePeer, "expected parameter 'sourcePeer' to be non-null");
            $.weight = Objects.requireNonNull($.weight, "expected parameter 'weight' to be non-null");
            return $;
        }
    }

}
