// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.containerregistry;

import com.pulumi.azurenative.containerregistry.enums.ConnectedRegistryMode;
import com.pulumi.azurenative.containerregistry.inputs.LoggingPropertiesArgs;
import com.pulumi.azurenative.containerregistry.inputs.ParentPropertiesArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectedRegistryArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectedRegistryArgs Empty = new ConnectedRegistryArgs();

    /**
     * The list of the ACR token resource IDs used to authenticate clients to the connected registry.
     * 
     */
    @Import(name="clientTokenIds")
    private @Nullable Output<List<String>> clientTokenIds;

    public Optional<Output<List<String>>> clientTokenIds() {
        return Optional.ofNullable(this.clientTokenIds);
    }

    /**
     * The name of the connected registry.
     * 
     */
    @Import(name="connectedRegistryName")
    private @Nullable Output<String> connectedRegistryName;

    public Optional<Output<String>> connectedRegistryName() {
        return Optional.ofNullable(this.connectedRegistryName);
    }

    /**
     * The logging properties of the connected registry.
     * 
     */
    @Import(name="logging")
    private @Nullable Output<LoggingPropertiesArgs> logging;

    public Optional<Output<LoggingPropertiesArgs>> logging() {
        return Optional.ofNullable(this.logging);
    }

    /**
     * The mode of the connected registry resource that indicates the permissions of the registry.
     * 
     */
    @Import(name="mode", required=true)
    private Output<Either<String,ConnectedRegistryMode>> mode;

    public Output<Either<String,ConnectedRegistryMode>> mode() {
        return this.mode;
    }

    /**
     * The parent of the connected registry.
     * 
     */
    @Import(name="parent", required=true)
    private Output<ParentPropertiesArgs> parent;

    public Output<ParentPropertiesArgs> parent() {
        return this.parent;
    }

    /**
     * The name of the container registry.
     * 
     */
    @Import(name="registryName", required=true)
    private Output<String> registryName;

    public Output<String> registryName() {
        return this.registryName;
    }

    /**
     * The name of the resource group to which the container registry belongs.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    private ConnectedRegistryArgs() {}

    private ConnectedRegistryArgs(ConnectedRegistryArgs $) {
        this.clientTokenIds = $.clientTokenIds;
        this.connectedRegistryName = $.connectedRegistryName;
        this.logging = $.logging;
        this.mode = $.mode;
        this.parent = $.parent;
        this.registryName = $.registryName;
        this.resourceGroupName = $.resourceGroupName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectedRegistryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectedRegistryArgs $;

        public Builder() {
            $ = new ConnectedRegistryArgs();
        }

        public Builder(ConnectedRegistryArgs defaults) {
            $ = new ConnectedRegistryArgs(Objects.requireNonNull(defaults));
        }

        public Builder clientTokenIds(@Nullable Output<List<String>> clientTokenIds) {
            $.clientTokenIds = clientTokenIds;
            return this;
        }

        public Builder clientTokenIds(List<String> clientTokenIds) {
            return clientTokenIds(Output.of(clientTokenIds));
        }

        public Builder clientTokenIds(String... clientTokenIds) {
            return clientTokenIds(List.of(clientTokenIds));
        }

        public Builder connectedRegistryName(@Nullable Output<String> connectedRegistryName) {
            $.connectedRegistryName = connectedRegistryName;
            return this;
        }

        public Builder connectedRegistryName(String connectedRegistryName) {
            return connectedRegistryName(Output.of(connectedRegistryName));
        }

        public Builder logging(@Nullable Output<LoggingPropertiesArgs> logging) {
            $.logging = logging;
            return this;
        }

        public Builder logging(LoggingPropertiesArgs logging) {
            return logging(Output.of(logging));
        }

        public Builder mode(Output<Either<String,ConnectedRegistryMode>> mode) {
            $.mode = mode;
            return this;
        }

        public Builder mode(Either<String,ConnectedRegistryMode> mode) {
            return mode(Output.of(mode));
        }

        public Builder mode(String mode) {
            return mode(Either.ofLeft(mode));
        }

        public Builder mode(ConnectedRegistryMode mode) {
            return mode(Either.ofRight(mode));
        }

        public Builder parent(Output<ParentPropertiesArgs> parent) {
            $.parent = parent;
            return this;
        }

        public Builder parent(ParentPropertiesArgs parent) {
            return parent(Output.of(parent));
        }

        public Builder registryName(Output<String> registryName) {
            $.registryName = registryName;
            return this;
        }

        public Builder registryName(String registryName) {
            return registryName(Output.of(registryName));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public ConnectedRegistryArgs build() {
            $.mode = Objects.requireNonNull($.mode, "expected parameter 'mode' to be non-null");
            $.parent = Objects.requireNonNull($.parent, "expected parameter 'parent' to be non-null");
            $.registryName = Objects.requireNonNull($.registryName, "expected parameter 'registryName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
