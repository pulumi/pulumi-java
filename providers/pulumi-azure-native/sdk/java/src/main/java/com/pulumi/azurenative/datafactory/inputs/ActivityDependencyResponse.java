// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Activity dependency information.
 * 
 */
public final class ActivityDependencyResponse extends com.pulumi.resources.InvokeArgs {

    public static final ActivityDependencyResponse Empty = new ActivityDependencyResponse();

    /**
     * Activity name.
     * 
     */
    @Import(name="activity", required=true)
    private String activity;

    public String activity() {
        return this.activity;
    }

    /**
     * Match-Condition for the dependency.
     * 
     */
    @Import(name="dependencyConditions", required=true)
    private List<String> dependencyConditions;

    public List<String> dependencyConditions() {
        return this.dependencyConditions;
    }

    private ActivityDependencyResponse() {}

    private ActivityDependencyResponse(ActivityDependencyResponse $) {
        this.activity = $.activity;
        this.dependencyConditions = $.dependencyConditions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ActivityDependencyResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ActivityDependencyResponse $;

        public Builder() {
            $ = new ActivityDependencyResponse();
        }

        public Builder(ActivityDependencyResponse defaults) {
            $ = new ActivityDependencyResponse(Objects.requireNonNull(defaults));
        }

        public Builder activity(String activity) {
            $.activity = activity;
            return this;
        }

        public Builder dependencyConditions(List<String> dependencyConditions) {
            $.dependencyConditions = dependencyConditions;
            return this;
        }

        public Builder dependencyConditions(String... dependencyConditions) {
            return dependencyConditions(List.of(dependencyConditions));
        }

        public ActivityDependencyResponse build() {
            $.activity = Objects.requireNonNull($.activity, "expected parameter 'activity' to be non-null");
            $.dependencyConditions = Objects.requireNonNull($.dependencyConditions, "expected parameter 'dependencyConditions' to be non-null");
            return $;
        }
    }

}
