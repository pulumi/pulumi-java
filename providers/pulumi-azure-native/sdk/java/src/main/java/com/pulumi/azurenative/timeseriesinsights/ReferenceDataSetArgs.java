// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.timeseriesinsights;

import com.pulumi.azurenative.timeseriesinsights.enums.DataStringComparisonBehavior;
import com.pulumi.azurenative.timeseriesinsights.inputs.ReferenceDataSetKeyPropertyArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ReferenceDataSetArgs extends com.pulumi.resources.ResourceArgs {

    public static final ReferenceDataSetArgs Empty = new ReferenceDataSetArgs();

    /**
     * The reference data set key comparison behavior can be set using this property. By default, the value is &#39;Ordinal&#39; - which means case sensitive key comparison will be performed while joining reference data with events or while adding new reference data. When &#39;OrdinalIgnoreCase&#39; is set, case insensitive comparison will be used.
     * 
     */
    @Import(name="dataStringComparisonBehavior")
    private @Nullable Output<Either<String,DataStringComparisonBehavior>> dataStringComparisonBehavior;

    public Optional<Output<Either<String,DataStringComparisonBehavior>>> dataStringComparisonBehavior() {
        return Optional.ofNullable(this.dataStringComparisonBehavior);
    }

    /**
     * The name of the Time Series Insights environment associated with the specified resource group.
     * 
     */
    @Import(name="environmentName", required=true)
    private Output<String> environmentName;

    public Output<String> environmentName() {
        return this.environmentName;
    }

    /**
     * The list of key properties for the reference data set.
     * 
     */
    @Import(name="keyProperties", required=true)
    private Output<List<ReferenceDataSetKeyPropertyArgs>> keyProperties;

    public Output<List<ReferenceDataSetKeyPropertyArgs>> keyProperties() {
        return this.keyProperties;
    }

    /**
     * The location of the resource.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Name of the reference data set.
     * 
     */
    @Import(name="referenceDataSetName")
    private @Nullable Output<String> referenceDataSetName;

    public Optional<Output<String>> referenceDataSetName() {
        return Optional.ofNullable(this.referenceDataSetName);
    }

    /**
     * Name of an Azure Resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Key-value pairs of additional properties for the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private ReferenceDataSetArgs() {}

    private ReferenceDataSetArgs(ReferenceDataSetArgs $) {
        this.dataStringComparisonBehavior = $.dataStringComparisonBehavior;
        this.environmentName = $.environmentName;
        this.keyProperties = $.keyProperties;
        this.location = $.location;
        this.referenceDataSetName = $.referenceDataSetName;
        this.resourceGroupName = $.resourceGroupName;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ReferenceDataSetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ReferenceDataSetArgs $;

        public Builder() {
            $ = new ReferenceDataSetArgs();
        }

        public Builder(ReferenceDataSetArgs defaults) {
            $ = new ReferenceDataSetArgs(Objects.requireNonNull(defaults));
        }

        public Builder dataStringComparisonBehavior(@Nullable Output<Either<String,DataStringComparisonBehavior>> dataStringComparisonBehavior) {
            $.dataStringComparisonBehavior = dataStringComparisonBehavior;
            return this;
        }

        public Builder dataStringComparisonBehavior(Either<String,DataStringComparisonBehavior> dataStringComparisonBehavior) {
            return dataStringComparisonBehavior(Output.of(dataStringComparisonBehavior));
        }

        public Builder environmentName(Output<String> environmentName) {
            $.environmentName = environmentName;
            return this;
        }

        public Builder environmentName(String environmentName) {
            return environmentName(Output.of(environmentName));
        }

        public Builder keyProperties(Output<List<ReferenceDataSetKeyPropertyArgs>> keyProperties) {
            $.keyProperties = keyProperties;
            return this;
        }

        public Builder keyProperties(List<ReferenceDataSetKeyPropertyArgs> keyProperties) {
            return keyProperties(Output.of(keyProperties));
        }

        public Builder keyProperties(ReferenceDataSetKeyPropertyArgs... keyProperties) {
            return keyProperties(List.of(keyProperties));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder referenceDataSetName(@Nullable Output<String> referenceDataSetName) {
            $.referenceDataSetName = referenceDataSetName;
            return this;
        }

        public Builder referenceDataSetName(String referenceDataSetName) {
            return referenceDataSetName(Output.of(referenceDataSetName));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public ReferenceDataSetArgs build() {
            $.environmentName = Objects.requireNonNull($.environmentName, "expected parameter 'environmentName' to be non-null");
            $.keyProperties = Objects.requireNonNull($.keyProperties, "expected parameter 'keyProperties' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
