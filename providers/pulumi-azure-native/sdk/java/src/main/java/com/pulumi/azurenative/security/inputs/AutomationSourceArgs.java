// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.security.inputs;

import com.pulumi.azurenative.security.enums.EventSource;
import com.pulumi.azurenative.security.inputs.AutomationRuleSetArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The source event types which evaluate the security automation set of rules. For example - security alerts and security assessments. To learn more about the supported security events data models schemas - please visit https://aka.ms/ASCAutomationSchemas.
 * 
 */
public final class AutomationSourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final AutomationSourceArgs Empty = new AutomationSourceArgs();

    /**
     * A valid event source type.
     * 
     */
    @Import(name="eventSource")
    private @Nullable Output<Either<String,EventSource>> eventSource;

    public Optional<Output<Either<String,EventSource>>> eventSource() {
        return Optional.ofNullable(this.eventSource);
    }

    /**
     * A set of rules which evaluate upon event interception. A logical disjunction is applied between defined rule sets (logical &#39;or&#39;).
     * 
     */
    @Import(name="ruleSets")
    private @Nullable Output<List<AutomationRuleSetArgs>> ruleSets;

    public Optional<Output<List<AutomationRuleSetArgs>>> ruleSets() {
        return Optional.ofNullable(this.ruleSets);
    }

    private AutomationSourceArgs() {}

    private AutomationSourceArgs(AutomationSourceArgs $) {
        this.eventSource = $.eventSource;
        this.ruleSets = $.ruleSets;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AutomationSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AutomationSourceArgs $;

        public Builder() {
            $ = new AutomationSourceArgs();
        }

        public Builder(AutomationSourceArgs defaults) {
            $ = new AutomationSourceArgs(Objects.requireNonNull(defaults));
        }

        public Builder eventSource(@Nullable Output<Either<String,EventSource>> eventSource) {
            $.eventSource = eventSource;
            return this;
        }

        public Builder eventSource(Either<String,EventSource> eventSource) {
            return eventSource(Output.of(eventSource));
        }

        public Builder ruleSets(@Nullable Output<List<AutomationRuleSetArgs>> ruleSets) {
            $.ruleSets = ruleSets;
            return this;
        }

        public Builder ruleSets(List<AutomationRuleSetArgs> ruleSets) {
            return ruleSets(Output.of(ruleSets));
        }

        public Builder ruleSets(AutomationRuleSetArgs... ruleSets) {
            return ruleSets(List.of(ruleSets));
        }

        public AutomationSourceArgs build() {
            return $;
        }
    }

}
