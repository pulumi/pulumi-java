// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.botservice.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The parameters to provide for the Slack channel.
 * 
 */
public final class SlackChannelPropertiesResponse extends com.pulumi.resources.InvokeArgs {

    public static final SlackChannelPropertiesResponse Empty = new SlackChannelPropertiesResponse();

    /**
     * The Slack client id
     * 
     */
    @Import(name="clientId")
    private @Nullable String clientId;

    public Optional<String> clientId() {
        return Optional.ofNullable(this.clientId);
    }

    /**
     * The Slack client secret. Value only returned through POST to the action Channel List API, otherwise empty.
     * 
     */
    @Import(name="clientSecret")
    private @Nullable String clientSecret;

    public Optional<String> clientSecret() {
        return Optional.ofNullable(this.clientSecret);
    }

    /**
     * Whether this channel is enabled for the bot
     * 
     */
    @Import(name="isEnabled", required=true)
    private Boolean isEnabled;

    public Boolean isEnabled() {
        return this.isEnabled;
    }

    /**
     * Whether this channel is validated for the bot
     * 
     */
    @Import(name="isValidated", required=true)
    private Boolean isValidated;

    public Boolean isValidated() {
        return this.isValidated;
    }

    /**
     * The Slack landing page Url
     * 
     */
    @Import(name="landingPageUrl")
    private @Nullable String landingPageUrl;

    public Optional<String> landingPageUrl() {
        return Optional.ofNullable(this.landingPageUrl);
    }

    /**
     * The Sms auth token
     * 
     */
    @Import(name="lastSubmissionId", required=true)
    private String lastSubmissionId;

    public String lastSubmissionId() {
        return this.lastSubmissionId;
    }

    /**
     * The Slack redirect action
     * 
     */
    @Import(name="redirectAction", required=true)
    private String redirectAction;

    public String redirectAction() {
        return this.redirectAction;
    }

    /**
     * Whether to register the settings before OAuth validation is performed. Recommended to True.
     * 
     */
    @Import(name="registerBeforeOAuthFlow", required=true)
    private Boolean registerBeforeOAuthFlow;

    public Boolean registerBeforeOAuthFlow() {
        return this.registerBeforeOAuthFlow;
    }

    /**
     * The Slack signing secret.
     * 
     */
    @Import(name="signingSecret")
    private @Nullable String signingSecret;

    public Optional<String> signingSecret() {
        return Optional.ofNullable(this.signingSecret);
    }

    /**
     * The Slack verification token. Value only returned through POST to the action Channel List API, otherwise empty.
     * 
     */
    @Import(name="verificationToken")
    private @Nullable String verificationToken;

    public Optional<String> verificationToken() {
        return Optional.ofNullable(this.verificationToken);
    }

    private SlackChannelPropertiesResponse() {}

    private SlackChannelPropertiesResponse(SlackChannelPropertiesResponse $) {
        this.clientId = $.clientId;
        this.clientSecret = $.clientSecret;
        this.isEnabled = $.isEnabled;
        this.isValidated = $.isValidated;
        this.landingPageUrl = $.landingPageUrl;
        this.lastSubmissionId = $.lastSubmissionId;
        this.redirectAction = $.redirectAction;
        this.registerBeforeOAuthFlow = $.registerBeforeOAuthFlow;
        this.signingSecret = $.signingSecret;
        this.verificationToken = $.verificationToken;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SlackChannelPropertiesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SlackChannelPropertiesResponse $;

        public Builder() {
            $ = new SlackChannelPropertiesResponse();
        }

        public Builder(SlackChannelPropertiesResponse defaults) {
            $ = new SlackChannelPropertiesResponse(Objects.requireNonNull(defaults));
        }

        public Builder clientId(@Nullable String clientId) {
            $.clientId = clientId;
            return this;
        }

        public Builder clientSecret(@Nullable String clientSecret) {
            $.clientSecret = clientSecret;
            return this;
        }

        public Builder isEnabled(Boolean isEnabled) {
            $.isEnabled = isEnabled;
            return this;
        }

        public Builder isValidated(Boolean isValidated) {
            $.isValidated = isValidated;
            return this;
        }

        public Builder landingPageUrl(@Nullable String landingPageUrl) {
            $.landingPageUrl = landingPageUrl;
            return this;
        }

        public Builder lastSubmissionId(String lastSubmissionId) {
            $.lastSubmissionId = lastSubmissionId;
            return this;
        }

        public Builder redirectAction(String redirectAction) {
            $.redirectAction = redirectAction;
            return this;
        }

        public Builder registerBeforeOAuthFlow(Boolean registerBeforeOAuthFlow) {
            $.registerBeforeOAuthFlow = registerBeforeOAuthFlow;
            return this;
        }

        public Builder signingSecret(@Nullable String signingSecret) {
            $.signingSecret = signingSecret;
            return this;
        }

        public Builder verificationToken(@Nullable String verificationToken) {
            $.verificationToken = verificationToken;
            return this;
        }

        public SlackChannelPropertiesResponse build() {
            $.isEnabled = Objects.requireNonNull($.isEnabled, "expected parameter 'isEnabled' to be non-null");
            $.isValidated = Objects.requireNonNull($.isValidated, "expected parameter 'isValidated' to be non-null");
            $.lastSubmissionId = Objects.requireNonNull($.lastSubmissionId, "expected parameter 'lastSubmissionId' to be non-null");
            $.redirectAction = Objects.requireNonNull($.redirectAction, "expected parameter 'redirectAction' to be non-null");
            $.registerBeforeOAuthFlow = Objects.requireNonNull($.registerBeforeOAuthFlow, "expected parameter 'registerBeforeOAuthFlow' to be non-null");
            return $;
        }
    }

}
