// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.providerhub.inputs;

import com.pulumi.azurenative.providerhub.inputs.SkuCapabilityArgs;
import com.pulumi.azurenative.providerhub.inputs.SkuCostArgs;
import com.pulumi.azurenative.providerhub.inputs.SkuLocationInfoArgs;
import com.pulumi.azurenative.providerhub.inputs.SkuSettingCapacityArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SkuSettingArgs extends com.pulumi.resources.ResourceArgs {

    public static final SkuSettingArgs Empty = new SkuSettingArgs();

    @Import(name="capabilities")
    private @Nullable Output<List<SkuCapabilityArgs>> capabilities;

    public Optional<Output<List<SkuCapabilityArgs>>> capabilities() {
        return Optional.ofNullable(this.capabilities);
    }

    @Import(name="capacity")
    private @Nullable Output<SkuSettingCapacityArgs> capacity;

    public Optional<Output<SkuSettingCapacityArgs>> capacity() {
        return Optional.ofNullable(this.capacity);
    }

    @Import(name="costs")
    private @Nullable Output<List<SkuCostArgs>> costs;

    public Optional<Output<List<SkuCostArgs>>> costs() {
        return Optional.ofNullable(this.costs);
    }

    @Import(name="family")
    private @Nullable Output<String> family;

    public Optional<Output<String>> family() {
        return Optional.ofNullable(this.family);
    }

    @Import(name="kind")
    private @Nullable Output<String> kind;

    public Optional<Output<String>> kind() {
        return Optional.ofNullable(this.kind);
    }

    @Import(name="locationInfo")
    private @Nullable Output<List<SkuLocationInfoArgs>> locationInfo;

    public Optional<Output<List<SkuLocationInfoArgs>>> locationInfo() {
        return Optional.ofNullable(this.locationInfo);
    }

    @Import(name="locations")
    private @Nullable Output<List<String>> locations;

    public Optional<Output<List<String>>> locations() {
        return Optional.ofNullable(this.locations);
    }

    @Import(name="name", required=true)
    private Output<String> name;

    public Output<String> name() {
        return this.name;
    }

    @Import(name="requiredFeatures")
    private @Nullable Output<List<String>> requiredFeatures;

    public Optional<Output<List<String>>> requiredFeatures() {
        return Optional.ofNullable(this.requiredFeatures);
    }

    @Import(name="requiredQuotaIds")
    private @Nullable Output<List<String>> requiredQuotaIds;

    public Optional<Output<List<String>>> requiredQuotaIds() {
        return Optional.ofNullable(this.requiredQuotaIds);
    }

    @Import(name="size")
    private @Nullable Output<String> size;

    public Optional<Output<String>> size() {
        return Optional.ofNullable(this.size);
    }

    @Import(name="tier")
    private @Nullable Output<String> tier;

    public Optional<Output<String>> tier() {
        return Optional.ofNullable(this.tier);
    }

    private SkuSettingArgs() {}

    private SkuSettingArgs(SkuSettingArgs $) {
        this.capabilities = $.capabilities;
        this.capacity = $.capacity;
        this.costs = $.costs;
        this.family = $.family;
        this.kind = $.kind;
        this.locationInfo = $.locationInfo;
        this.locations = $.locations;
        this.name = $.name;
        this.requiredFeatures = $.requiredFeatures;
        this.requiredQuotaIds = $.requiredQuotaIds;
        this.size = $.size;
        this.tier = $.tier;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SkuSettingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SkuSettingArgs $;

        public Builder() {
            $ = new SkuSettingArgs();
        }

        public Builder(SkuSettingArgs defaults) {
            $ = new SkuSettingArgs(Objects.requireNonNull(defaults));
        }

        public Builder capabilities(@Nullable Output<List<SkuCapabilityArgs>> capabilities) {
            $.capabilities = capabilities;
            return this;
        }

        public Builder capabilities(List<SkuCapabilityArgs> capabilities) {
            return capabilities(Output.of(capabilities));
        }

        public Builder capabilities(SkuCapabilityArgs... capabilities) {
            return capabilities(List.of(capabilities));
        }

        public Builder capacity(@Nullable Output<SkuSettingCapacityArgs> capacity) {
            $.capacity = capacity;
            return this;
        }

        public Builder capacity(SkuSettingCapacityArgs capacity) {
            return capacity(Output.of(capacity));
        }

        public Builder costs(@Nullable Output<List<SkuCostArgs>> costs) {
            $.costs = costs;
            return this;
        }

        public Builder costs(List<SkuCostArgs> costs) {
            return costs(Output.of(costs));
        }

        public Builder costs(SkuCostArgs... costs) {
            return costs(List.of(costs));
        }

        public Builder family(@Nullable Output<String> family) {
            $.family = family;
            return this;
        }

        public Builder family(String family) {
            return family(Output.of(family));
        }

        public Builder kind(@Nullable Output<String> kind) {
            $.kind = kind;
            return this;
        }

        public Builder kind(String kind) {
            return kind(Output.of(kind));
        }

        public Builder locationInfo(@Nullable Output<List<SkuLocationInfoArgs>> locationInfo) {
            $.locationInfo = locationInfo;
            return this;
        }

        public Builder locationInfo(List<SkuLocationInfoArgs> locationInfo) {
            return locationInfo(Output.of(locationInfo));
        }

        public Builder locationInfo(SkuLocationInfoArgs... locationInfo) {
            return locationInfo(List.of(locationInfo));
        }

        public Builder locations(@Nullable Output<List<String>> locations) {
            $.locations = locations;
            return this;
        }

        public Builder locations(List<String> locations) {
            return locations(Output.of(locations));
        }

        public Builder locations(String... locations) {
            return locations(List.of(locations));
        }

        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder requiredFeatures(@Nullable Output<List<String>> requiredFeatures) {
            $.requiredFeatures = requiredFeatures;
            return this;
        }

        public Builder requiredFeatures(List<String> requiredFeatures) {
            return requiredFeatures(Output.of(requiredFeatures));
        }

        public Builder requiredFeatures(String... requiredFeatures) {
            return requiredFeatures(List.of(requiredFeatures));
        }

        public Builder requiredQuotaIds(@Nullable Output<List<String>> requiredQuotaIds) {
            $.requiredQuotaIds = requiredQuotaIds;
            return this;
        }

        public Builder requiredQuotaIds(List<String> requiredQuotaIds) {
            return requiredQuotaIds(Output.of(requiredQuotaIds));
        }

        public Builder requiredQuotaIds(String... requiredQuotaIds) {
            return requiredQuotaIds(List.of(requiredQuotaIds));
        }

        public Builder size(@Nullable Output<String> size) {
            $.size = size;
            return this;
        }

        public Builder size(String size) {
            return size(Output.of(size));
        }

        public Builder tier(@Nullable Output<String> tier) {
            $.tier = tier;
            return this;
        }

        public Builder tier(String tier) {
            return tier(Output.of(tier));
        }

        public SkuSettingArgs build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            return $;
        }
    }

}
