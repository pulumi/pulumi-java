// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.documentdb.inputs;

import com.pulumi.azurenative.documentdb.inputs.CassandraSchemaArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Cosmos DB Cassandra table resource object
 * 
 */
public final class CassandraTableResourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final CassandraTableResourceArgs Empty = new CassandraTableResourceArgs();

    /**
     * Analytical TTL.
     * 
     */
    @Import(name="analyticalStorageTtl")
    private @Nullable Output<Integer> analyticalStorageTtl;

    /**
     * @return Analytical TTL.
     * 
     */
    public Optional<Output<Integer>> analyticalStorageTtl() {
        return Optional.ofNullable(this.analyticalStorageTtl);
    }

    /**
     * Time to live of the Cosmos DB Cassandra table
     * 
     */
    @Import(name="defaultTtl")
    private @Nullable Output<Integer> defaultTtl;

    /**
     * @return Time to live of the Cosmos DB Cassandra table
     * 
     */
    public Optional<Output<Integer>> defaultTtl() {
        return Optional.ofNullable(this.defaultTtl);
    }

    /**
     * Name of the Cosmos DB Cassandra table
     * 
     */
    @Import(name="id", required=true)
    private Output<String> id;

    /**
     * @return Name of the Cosmos DB Cassandra table
     * 
     */
    public Output<String> id() {
        return this.id;
    }

    /**
     * Schema of the Cosmos DB Cassandra table
     * 
     */
    @Import(name="schema")
    private @Nullable Output<CassandraSchemaArgs> schema;

    /**
     * @return Schema of the Cosmos DB Cassandra table
     * 
     */
    public Optional<Output<CassandraSchemaArgs>> schema() {
        return Optional.ofNullable(this.schema);
    }

    private CassandraTableResourceArgs() {}

    private CassandraTableResourceArgs(CassandraTableResourceArgs $) {
        this.analyticalStorageTtl = $.analyticalStorageTtl;
        this.defaultTtl = $.defaultTtl;
        this.id = $.id;
        this.schema = $.schema;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CassandraTableResourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CassandraTableResourceArgs $;

        public Builder() {
            $ = new CassandraTableResourceArgs();
        }

        public Builder(CassandraTableResourceArgs defaults) {
            $ = new CassandraTableResourceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param analyticalStorageTtl Analytical TTL.
         * 
         * @return builder
         * 
         */
        public Builder analyticalStorageTtl(@Nullable Output<Integer> analyticalStorageTtl) {
            $.analyticalStorageTtl = analyticalStorageTtl;
            return this;
        }

        /**
         * @param analyticalStorageTtl Analytical TTL.
         * 
         * @return builder
         * 
         */
        public Builder analyticalStorageTtl(Integer analyticalStorageTtl) {
            return analyticalStorageTtl(Output.of(analyticalStorageTtl));
        }

        /**
         * @param defaultTtl Time to live of the Cosmos DB Cassandra table
         * 
         * @return builder
         * 
         */
        public Builder defaultTtl(@Nullable Output<Integer> defaultTtl) {
            $.defaultTtl = defaultTtl;
            return this;
        }

        /**
         * @param defaultTtl Time to live of the Cosmos DB Cassandra table
         * 
         * @return builder
         * 
         */
        public Builder defaultTtl(Integer defaultTtl) {
            return defaultTtl(Output.of(defaultTtl));
        }

        /**
         * @param id Name of the Cosmos DB Cassandra table
         * 
         * @return builder
         * 
         */
        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id Name of the Cosmos DB Cassandra table
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param schema Schema of the Cosmos DB Cassandra table
         * 
         * @return builder
         * 
         */
        public Builder schema(@Nullable Output<CassandraSchemaArgs> schema) {
            $.schema = schema;
            return this;
        }

        /**
         * @param schema Schema of the Cosmos DB Cassandra table
         * 
         * @return builder
         * 
         */
        public Builder schema(CassandraSchemaArgs schema) {
            return schema(Output.of(schema));
        }

        public CassandraTableResourceArgs build() {
            $.id = Objects.requireNonNull($.id, "expected parameter 'id' to be non-null");
            return $;
        }
    }

}
