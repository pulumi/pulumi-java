// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Sftp write settings.
 * 
 */
public final class SftpWriteSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final SftpWriteSettingsArgs Empty = new SftpWriteSettingsArgs();

    /**
     * The type of copy behavior for copy sink.
     * 
     */
    @Import(name="copyBehavior")
    private @Nullable Output<Object> copyBehavior;

    /**
     * @return The type of copy behavior for copy sink.
     * 
     */
    public Optional<Output<Object>> copyBehavior() {
        return Optional.ofNullable(this.copyBehavior);
    }

    /**
     * If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
     * 
     */
    @Import(name="disableMetricsCollection")
    private @Nullable Output<Object> disableMetricsCollection;

    /**
     * @return If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
     * 
     */
    public Optional<Output<Object>> disableMetricsCollection() {
        return Optional.ofNullable(this.disableMetricsCollection);
    }

    /**
     * The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
     * 
     */
    @Import(name="maxConcurrentConnections")
    private @Nullable Output<Object> maxConcurrentConnections;

    /**
     * @return The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
     * 
     */
    public Optional<Output<Object>> maxConcurrentConnections() {
        return Optional.ofNullable(this.maxConcurrentConnections);
    }

    /**
     * Specifies the timeout for writing each chunk to SFTP server. Default value: 01:00:00 (one hour). Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="operationTimeout")
    private @Nullable Output<Object> operationTimeout;

    /**
     * @return Specifies the timeout for writing each chunk to SFTP server. Default value: 01:00:00 (one hour). Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Output<Object>> operationTimeout() {
        return Optional.ofNullable(this.operationTimeout);
    }

    /**
     * The write setting type.
     * Expected value is &#39;SftpWriteSettings&#39;.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The write setting type.
     * Expected value is &#39;SftpWriteSettings&#39;.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * Upload to temporary file(s) and rename. Disable this option if your SFTP server doesn&#39;t support rename operation. Type: boolean (or Expression with resultType boolean).
     * 
     */
    @Import(name="useTempFileRename")
    private @Nullable Output<Object> useTempFileRename;

    /**
     * @return Upload to temporary file(s) and rename. Disable this option if your SFTP server doesn&#39;t support rename operation. Type: boolean (or Expression with resultType boolean).
     * 
     */
    public Optional<Output<Object>> useTempFileRename() {
        return Optional.ofNullable(this.useTempFileRename);
    }

    private SftpWriteSettingsArgs() {}

    private SftpWriteSettingsArgs(SftpWriteSettingsArgs $) {
        this.copyBehavior = $.copyBehavior;
        this.disableMetricsCollection = $.disableMetricsCollection;
        this.maxConcurrentConnections = $.maxConcurrentConnections;
        this.operationTimeout = $.operationTimeout;
        this.type = $.type;
        this.useTempFileRename = $.useTempFileRename;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SftpWriteSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SftpWriteSettingsArgs $;

        public Builder() {
            $ = new SftpWriteSettingsArgs();
        }

        public Builder(SftpWriteSettingsArgs defaults) {
            $ = new SftpWriteSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param copyBehavior The type of copy behavior for copy sink.
         * 
         * @return builder
         * 
         */
        public Builder copyBehavior(@Nullable Output<Object> copyBehavior) {
            $.copyBehavior = copyBehavior;
            return this;
        }

        /**
         * @param copyBehavior The type of copy behavior for copy sink.
         * 
         * @return builder
         * 
         */
        public Builder copyBehavior(Object copyBehavior) {
            return copyBehavior(Output.of(copyBehavior));
        }

        /**
         * @param disableMetricsCollection If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
         * 
         * @return builder
         * 
         */
        public Builder disableMetricsCollection(@Nullable Output<Object> disableMetricsCollection) {
            $.disableMetricsCollection = disableMetricsCollection;
            return this;
        }

        /**
         * @param disableMetricsCollection If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
         * 
         * @return builder
         * 
         */
        public Builder disableMetricsCollection(Object disableMetricsCollection) {
            return disableMetricsCollection(Output.of(disableMetricsCollection));
        }

        /**
         * @param maxConcurrentConnections The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
         * 
         * @return builder
         * 
         */
        public Builder maxConcurrentConnections(@Nullable Output<Object> maxConcurrentConnections) {
            $.maxConcurrentConnections = maxConcurrentConnections;
            return this;
        }

        /**
         * @param maxConcurrentConnections The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
         * 
         * @return builder
         * 
         */
        public Builder maxConcurrentConnections(Object maxConcurrentConnections) {
            return maxConcurrentConnections(Output.of(maxConcurrentConnections));
        }

        /**
         * @param operationTimeout Specifies the timeout for writing each chunk to SFTP server. Default value: 01:00:00 (one hour). Type: string (or Expression with resultType string).
         * 
         * @return builder
         * 
         */
        public Builder operationTimeout(@Nullable Output<Object> operationTimeout) {
            $.operationTimeout = operationTimeout;
            return this;
        }

        /**
         * @param operationTimeout Specifies the timeout for writing each chunk to SFTP server. Default value: 01:00:00 (one hour). Type: string (or Expression with resultType string).
         * 
         * @return builder
         * 
         */
        public Builder operationTimeout(Object operationTimeout) {
            return operationTimeout(Output.of(operationTimeout));
        }

        /**
         * @param type The write setting type.
         * Expected value is &#39;SftpWriteSettings&#39;.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The write setting type.
         * Expected value is &#39;SftpWriteSettings&#39;.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param useTempFileRename Upload to temporary file(s) and rename. Disable this option if your SFTP server doesn&#39;t support rename operation. Type: boolean (or Expression with resultType boolean).
         * 
         * @return builder
         * 
         */
        public Builder useTempFileRename(@Nullable Output<Object> useTempFileRename) {
            $.useTempFileRename = useTempFileRename;
            return this;
        }

        /**
         * @param useTempFileRename Upload to temporary file(s) and rename. Disable this option if your SFTP server doesn&#39;t support rename operation. Type: boolean (or Expression with resultType boolean).
         * 
         * @return builder
         * 
         */
        public Builder useTempFileRename(Object useTempFileRename) {
            return useTempFileRename(Output.of(useTempFileRename));
        }

        public SftpWriteSettingsArgs build() {
            $.type = Codegen.stringProp("type").output().arg($.type).require();
            return $;
        }
    }

}
