// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datamigration.inputs;

import com.pulumi.azurenative.datamigration.enums.BackupMode;
import com.pulumi.azurenative.datamigration.inputs.BlobShareArgs;
import com.pulumi.azurenative.datamigration.inputs.FileShareArgs;
import com.pulumi.azurenative.datamigration.inputs.MigrateSqlServerSqlMIDatabaseInputArgs;
import com.pulumi.azurenative.datamigration.inputs.SqlConnectionInfoArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Input for task that validates migration input for SQL to Azure SQL Managed Instance
 * 
 */
public final class ValidateMigrationInputSqlServerSqlMITaskInputArgs extends com.pulumi.resources.ResourceArgs {

    public static final ValidateMigrationInputSqlServerSqlMITaskInputArgs Empty = new ValidateMigrationInputSqlServerSqlMITaskInputArgs();

    /**
     * SAS URI of Azure Storage Account Container to be used for storing backup files.
     * 
     */
    @Import(name="backupBlobShare", required=true)
    private Output<BlobShareArgs> backupBlobShare;

    public Output<BlobShareArgs> backupBlobShare() {
        return this.backupBlobShare;
    }

    /**
     * Backup file share information for all selected databases.
     * 
     */
    @Import(name="backupFileShare")
    private @Nullable Output<FileShareArgs> backupFileShare;

    public Optional<Output<FileShareArgs>> backupFileShare() {
        return Optional.ofNullable(this.backupFileShare);
    }

    /**
     * Backup Mode to specify whether to use existing backup or create new backup.
     * 
     */
    @Import(name="backupMode")
    private @Nullable Output<Either<String,BackupMode>> backupMode;

    public Optional<Output<Either<String,BackupMode>>> backupMode() {
        return Optional.ofNullable(this.backupMode);
    }

    /**
     * Databases to migrate
     * 
     */
    @Import(name="selectedDatabases", required=true)
    private Output<List<MigrateSqlServerSqlMIDatabaseInputArgs>> selectedDatabases;

    public Output<List<MigrateSqlServerSqlMIDatabaseInputArgs>> selectedDatabases() {
        return this.selectedDatabases;
    }

    /**
     * Logins to migrate
     * 
     */
    @Import(name="selectedLogins")
    private @Nullable Output<List<String>> selectedLogins;

    public Optional<Output<List<String>>> selectedLogins() {
        return Optional.ofNullable(this.selectedLogins);
    }

    /**
     * Information for connecting to source
     * 
     */
    @Import(name="sourceConnectionInfo", required=true)
    private Output<SqlConnectionInfoArgs> sourceConnectionInfo;

    public Output<SqlConnectionInfoArgs> sourceConnectionInfo() {
        return this.sourceConnectionInfo;
    }

    /**
     * Information for connecting to target
     * 
     */
    @Import(name="targetConnectionInfo", required=true)
    private Output<SqlConnectionInfoArgs> targetConnectionInfo;

    public Output<SqlConnectionInfoArgs> targetConnectionInfo() {
        return this.targetConnectionInfo;
    }

    private ValidateMigrationInputSqlServerSqlMITaskInputArgs() {}

    private ValidateMigrationInputSqlServerSqlMITaskInputArgs(ValidateMigrationInputSqlServerSqlMITaskInputArgs $) {
        this.backupBlobShare = $.backupBlobShare;
        this.backupFileShare = $.backupFileShare;
        this.backupMode = $.backupMode;
        this.selectedDatabases = $.selectedDatabases;
        this.selectedLogins = $.selectedLogins;
        this.sourceConnectionInfo = $.sourceConnectionInfo;
        this.targetConnectionInfo = $.targetConnectionInfo;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ValidateMigrationInputSqlServerSqlMITaskInputArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ValidateMigrationInputSqlServerSqlMITaskInputArgs $;

        public Builder() {
            $ = new ValidateMigrationInputSqlServerSqlMITaskInputArgs();
        }

        public Builder(ValidateMigrationInputSqlServerSqlMITaskInputArgs defaults) {
            $ = new ValidateMigrationInputSqlServerSqlMITaskInputArgs(Objects.requireNonNull(defaults));
        }

        public Builder backupBlobShare(Output<BlobShareArgs> backupBlobShare) {
            $.backupBlobShare = backupBlobShare;
            return this;
        }

        public Builder backupBlobShare(BlobShareArgs backupBlobShare) {
            return backupBlobShare(Output.of(backupBlobShare));
        }

        public Builder backupFileShare(@Nullable Output<FileShareArgs> backupFileShare) {
            $.backupFileShare = backupFileShare;
            return this;
        }

        public Builder backupFileShare(FileShareArgs backupFileShare) {
            return backupFileShare(Output.of(backupFileShare));
        }

        public Builder backupMode(@Nullable Output<Either<String,BackupMode>> backupMode) {
            $.backupMode = backupMode;
            return this;
        }

        public Builder backupMode(Either<String,BackupMode> backupMode) {
            return backupMode(Output.of(backupMode));
        }

        public Builder backupMode(String backupMode) {
            return backupMode(Either.ofLeft(backupMode));
        }

        public Builder backupMode(BackupMode backupMode) {
            return backupMode(Either.ofRight(backupMode));
        }

        public Builder selectedDatabases(Output<List<MigrateSqlServerSqlMIDatabaseInputArgs>> selectedDatabases) {
            $.selectedDatabases = selectedDatabases;
            return this;
        }

        public Builder selectedDatabases(List<MigrateSqlServerSqlMIDatabaseInputArgs> selectedDatabases) {
            return selectedDatabases(Output.of(selectedDatabases));
        }

        public Builder selectedDatabases(MigrateSqlServerSqlMIDatabaseInputArgs... selectedDatabases) {
            return selectedDatabases(List.of(selectedDatabases));
        }

        public Builder selectedLogins(@Nullable Output<List<String>> selectedLogins) {
            $.selectedLogins = selectedLogins;
            return this;
        }

        public Builder selectedLogins(List<String> selectedLogins) {
            return selectedLogins(Output.of(selectedLogins));
        }

        public Builder selectedLogins(String... selectedLogins) {
            return selectedLogins(List.of(selectedLogins));
        }

        public Builder sourceConnectionInfo(Output<SqlConnectionInfoArgs> sourceConnectionInfo) {
            $.sourceConnectionInfo = sourceConnectionInfo;
            return this;
        }

        public Builder sourceConnectionInfo(SqlConnectionInfoArgs sourceConnectionInfo) {
            return sourceConnectionInfo(Output.of(sourceConnectionInfo));
        }

        public Builder targetConnectionInfo(Output<SqlConnectionInfoArgs> targetConnectionInfo) {
            $.targetConnectionInfo = targetConnectionInfo;
            return this;
        }

        public Builder targetConnectionInfo(SqlConnectionInfoArgs targetConnectionInfo) {
            return targetConnectionInfo(Output.of(targetConnectionInfo));
        }

        public ValidateMigrationInputSqlServerSqlMITaskInputArgs build() {
            $.backupBlobShare = Objects.requireNonNull($.backupBlobShare, "expected parameter 'backupBlobShare' to be non-null");
            $.selectedDatabases = Objects.requireNonNull($.selectedDatabases, "expected parameter 'selectedDatabases' to be non-null");
            $.sourceConnectionInfo = Objects.requireNonNull($.sourceConnectionInfo, "expected parameter 'sourceConnectionInfo' to be non-null");
            $.targetConnectionInfo = Objects.requireNonNull($.targetConnectionInfo, "expected parameter 'targetConnectionInfo' to be non-null");
            return $;
        }
    }

}
