// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.managedservices.inputs;

import com.pulumi.azurenative.managedservices.inputs.RegistrationAssignmentPropertiesResponseRegistrationDefinition;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * Properties of a registration assignment.
 * 
 */
public final class RegistrationAssignmentPropertiesResponse extends com.pulumi.resources.InvokeArgs {

    public static final RegistrationAssignmentPropertiesResponse Empty = new RegistrationAssignmentPropertiesResponse();

    /**
     * Current state of the registration assignment.
     * 
     */
    @Import(name="provisioningState", required=true)
    private String provisioningState;

    /**
     * @return Current state of the registration assignment.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Registration definition inside registration assignment.
     * 
     */
    @Import(name="registrationDefinition", required=true)
    private RegistrationAssignmentPropertiesResponseRegistrationDefinition registrationDefinition;

    /**
     * @return Registration definition inside registration assignment.
     * 
     */
    public RegistrationAssignmentPropertiesResponseRegistrationDefinition registrationDefinition() {
        return this.registrationDefinition;
    }

    /**
     * Fully qualified path of the registration definition.
     * 
     */
    @Import(name="registrationDefinitionId", required=true)
    private String registrationDefinitionId;

    /**
     * @return Fully qualified path of the registration definition.
     * 
     */
    public String registrationDefinitionId() {
        return this.registrationDefinitionId;
    }

    private RegistrationAssignmentPropertiesResponse() {}

    private RegistrationAssignmentPropertiesResponse(RegistrationAssignmentPropertiesResponse $) {
        this.provisioningState = $.provisioningState;
        this.registrationDefinition = $.registrationDefinition;
        this.registrationDefinitionId = $.registrationDefinitionId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RegistrationAssignmentPropertiesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RegistrationAssignmentPropertiesResponse $;

        public Builder() {
            $ = new RegistrationAssignmentPropertiesResponse();
        }

        public Builder(RegistrationAssignmentPropertiesResponse defaults) {
            $ = new RegistrationAssignmentPropertiesResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param provisioningState Current state of the registration assignment.
         * 
         * @return builder
         * 
         */
        public Builder provisioningState(String provisioningState) {
            $.provisioningState = provisioningState;
            return this;
        }

        /**
         * @param registrationDefinition Registration definition inside registration assignment.
         * 
         * @return builder
         * 
         */
        public Builder registrationDefinition(RegistrationAssignmentPropertiesResponseRegistrationDefinition registrationDefinition) {
            $.registrationDefinition = registrationDefinition;
            return this;
        }

        /**
         * @param registrationDefinitionId Fully qualified path of the registration definition.
         * 
         * @return builder
         * 
         */
        public Builder registrationDefinitionId(String registrationDefinitionId) {
            $.registrationDefinitionId = registrationDefinitionId;
            return this;
        }

        public RegistrationAssignmentPropertiesResponse build() {
            $.provisioningState = Objects.requireNonNull($.provisioningState, "expected parameter 'provisioningState' to be non-null");
            $.registrationDefinition = Objects.requireNonNull($.registrationDefinition, "expected parameter 'registrationDefinition' to be non-null");
            $.registrationDefinitionId = Objects.requireNonNull($.registrationDefinitionId, "expected parameter 'registrationDefinitionId' to be non-null");
            return $;
        }
    }

}
