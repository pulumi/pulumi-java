// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.documentdb;

import com.pulumi.azurenative.documentdb.enums.ServiceSize;
import com.pulumi.azurenative.documentdb.enums.ServiceType;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceArgs Empty = new ServiceArgs();

    /**
     * Cosmos DB database account name.
     * 
     */
    @Import(name="accountName", required=true)
    private Output<String> accountName;

    public Output<String> accountName() {
        return this.accountName;
    }

    /**
     * Instance count for the service.
     * 
     */
    @Import(name="instanceCount")
    private @Nullable Output<Integer> instanceCount;

    public Optional<Output<Integer>> instanceCount() {
        return Optional.ofNullable(this.instanceCount);
    }

    /**
     * Instance type for the service.
     * 
     */
    @Import(name="instanceSize")
    private @Nullable Output<Either<String,ServiceSize>> instanceSize;

    public Optional<Output<Either<String,ServiceSize>>> instanceSize() {
        return Optional.ofNullable(this.instanceSize);
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Cosmos DB service name.
     * 
     */
    @Import(name="serviceName")
    private @Nullable Output<String> serviceName;

    public Optional<Output<String>> serviceName() {
        return Optional.ofNullable(this.serviceName);
    }

    /**
     * ServiceType for the service.
     * 
     */
    @Import(name="serviceType")
    private @Nullable Output<Either<String,ServiceType>> serviceType;

    public Optional<Output<Either<String,ServiceType>>> serviceType() {
        return Optional.ofNullable(this.serviceType);
    }

    private ServiceArgs() {}

    private ServiceArgs(ServiceArgs $) {
        this.accountName = $.accountName;
        this.instanceCount = $.instanceCount;
        this.instanceSize = $.instanceSize;
        this.resourceGroupName = $.resourceGroupName;
        this.serviceName = $.serviceName;
        this.serviceType = $.serviceType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceArgs $;

        public Builder() {
            $ = new ServiceArgs();
        }

        public Builder(ServiceArgs defaults) {
            $ = new ServiceArgs(Objects.requireNonNull(defaults));
        }

        public Builder accountName(Output<String> accountName) {
            $.accountName = accountName;
            return this;
        }

        public Builder accountName(String accountName) {
            return accountName(Output.of(accountName));
        }

        public Builder instanceCount(@Nullable Output<Integer> instanceCount) {
            $.instanceCount = instanceCount;
            return this;
        }

        public Builder instanceCount(Integer instanceCount) {
            return instanceCount(Output.of(instanceCount));
        }

        public Builder instanceSize(@Nullable Output<Either<String,ServiceSize>> instanceSize) {
            $.instanceSize = instanceSize;
            return this;
        }

        public Builder instanceSize(Either<String,ServiceSize> instanceSize) {
            return instanceSize(Output.of(instanceSize));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder serviceName(@Nullable Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        public Builder serviceType(@Nullable Output<Either<String,ServiceType>> serviceType) {
            $.serviceType = serviceType;
            return this;
        }

        public Builder serviceType(Either<String,ServiceType> serviceType) {
            return serviceType(Output.of(serviceType));
        }

        public ServiceArgs build() {
            $.accountName = Objects.requireNonNull($.accountName, "expected parameter 'accountName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
