// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * Azure Data Factory expression definition.
 * 
 */
public final class ExpressionResponse extends com.pulumi.resources.InvokeArgs {

    public static final ExpressionResponse Empty = new ExpressionResponse();

    /**
     * Expression type.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    /**
     * @return Expression type.
     * 
     */
    public String type() {
        return this.type;
    }

    /**
     * Expression value.
     * 
     */
    @Import(name="value", required=true)
    private String value;

    /**
     * @return Expression value.
     * 
     */
    public String value() {
        return this.value;
    }

    private ExpressionResponse() {}

    private ExpressionResponse(ExpressionResponse $) {
        this.type = $.type;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExpressionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExpressionResponse $;

        public Builder() {
            $ = new ExpressionResponse();
        }

        public Builder(ExpressionResponse defaults) {
            $ = new ExpressionResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param type Expression type.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            $.type = type;
            return this;
        }

        /**
         * @param value Expression value.
         * 
         * @return builder
         * 
         */
        public Builder value(String value) {
            $.value = value;
            return this;
        }

        public ExpressionResponse build() {
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            $.value = Objects.requireNonNull($.value, "expected parameter 'value' to be non-null");
            return $;
        }
    }

}
