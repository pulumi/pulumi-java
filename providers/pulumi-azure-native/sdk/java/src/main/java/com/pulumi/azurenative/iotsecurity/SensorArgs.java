// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.iotsecurity;

import com.pulumi.azurenative.iotsecurity.enums.SensorType;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SensorArgs extends com.pulumi.resources.ResourceArgs {

    public static final SensorArgs Empty = new SensorArgs();

    /**
     * Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub)
     * 
     */
    @Import(name="scope", required=true)
    private Output<String> scope;

    /**
     * @return Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub)
     * 
     */
    public Output<String> scope() {
        return this.scope;
    }

    /**
     * Name of the IoT sensor
     * 
     */
    @Import(name="sensorName")
    private @Nullable Output<String> sensorName;

    /**
     * @return Name of the IoT sensor
     * 
     */
    public Optional<Output<String>> sensorName() {
        return Optional.ofNullable(this.sensorName);
    }

    /**
     * Type of sensor
     * 
     */
    @Import(name="sensorType")
    private @Nullable Output<Either<String,SensorType>> sensorType;

    /**
     * @return Type of sensor
     * 
     */
    public Optional<Output<Either<String,SensorType>>> sensorType() {
        return Optional.ofNullable(this.sensorType);
    }

    /**
     * TI Automatic mode status of the IoT sensor
     * 
     */
    @Import(name="tiAutomaticUpdates")
    private @Nullable Output<Boolean> tiAutomaticUpdates;

    /**
     * @return TI Automatic mode status of the IoT sensor
     * 
     */
    public Optional<Output<Boolean>> tiAutomaticUpdates() {
        return Optional.ofNullable(this.tiAutomaticUpdates);
    }

    /**
     * Zone of the IoT sensor
     * 
     */
    @Import(name="zone")
    private @Nullable Output<String> zone;

    /**
     * @return Zone of the IoT sensor
     * 
     */
    public Optional<Output<String>> zone() {
        return Optional.ofNullable(this.zone);
    }

    private SensorArgs() {}

    private SensorArgs(SensorArgs $) {
        this.scope = $.scope;
        this.sensorName = $.sensorName;
        this.sensorType = $.sensorType;
        this.tiAutomaticUpdates = $.tiAutomaticUpdates;
        this.zone = $.zone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SensorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SensorArgs $;

        public Builder() {
            $ = new SensorArgs();
        }

        public Builder(SensorArgs defaults) {
            $ = new SensorArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub)
         * 
         * @return builder
         * 
         */
        public Builder scope(Output<String> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope Scope of the query (IoT Hub, /providers/Microsoft.Devices/iotHubs/myHub)
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        /**
         * @param sensorName Name of the IoT sensor
         * 
         * @return builder
         * 
         */
        public Builder sensorName(@Nullable Output<String> sensorName) {
            $.sensorName = sensorName;
            return this;
        }

        /**
         * @param sensorName Name of the IoT sensor
         * 
         * @return builder
         * 
         */
        public Builder sensorName(String sensorName) {
            return sensorName(Output.of(sensorName));
        }

        /**
         * @param sensorType Type of sensor
         * 
         * @return builder
         * 
         */
        public Builder sensorType(@Nullable Output<Either<String,SensorType>> sensorType) {
            $.sensorType = sensorType;
            return this;
        }

        /**
         * @param sensorType Type of sensor
         * 
         * @return builder
         * 
         */
        public Builder sensorType(Either<String,SensorType> sensorType) {
            return sensorType(Output.of(sensorType));
        }

        /**
         * @param sensorType Type of sensor
         * 
         * @return builder
         * 
         */
        public Builder sensorType(String sensorType) {
            return sensorType(Either.ofLeft(sensorType));
        }

        /**
         * @param sensorType Type of sensor
         * 
         * @return builder
         * 
         */
        public Builder sensorType(SensorType sensorType) {
            return sensorType(Either.ofRight(sensorType));
        }

        /**
         * @param tiAutomaticUpdates TI Automatic mode status of the IoT sensor
         * 
         * @return builder
         * 
         */
        public Builder tiAutomaticUpdates(@Nullable Output<Boolean> tiAutomaticUpdates) {
            $.tiAutomaticUpdates = tiAutomaticUpdates;
            return this;
        }

        /**
         * @param tiAutomaticUpdates TI Automatic mode status of the IoT sensor
         * 
         * @return builder
         * 
         */
        public Builder tiAutomaticUpdates(Boolean tiAutomaticUpdates) {
            return tiAutomaticUpdates(Output.of(tiAutomaticUpdates));
        }

        /**
         * @param zone Zone of the IoT sensor
         * 
         * @return builder
         * 
         */
        public Builder zone(@Nullable Output<String> zone) {
            $.zone = zone;
            return this;
        }

        /**
         * @param zone Zone of the IoT sensor
         * 
         * @return builder
         * 
         */
        public Builder zone(String zone) {
            return zone(Output.of(zone));
        }

        public SensorArgs build() {
            $.scope = Objects.requireNonNull($.scope, "expected parameter 'scope' to be non-null");
            return $;
        }
    }

}
