// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.containerregistry.inputs;

import com.pulumi.azurenative.containerregistry.inputs.ArgumentArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The Docker build step.
 * 
 */
public final class DockerBuildStepArgs extends com.pulumi.resources.ResourceArgs {

    public static final DockerBuildStepArgs Empty = new DockerBuildStepArgs();

    /**
     * The collection of override arguments to be used when executing this build step.
     * 
     */
    @Import(name="arguments")
    private @Nullable Output<List<ArgumentArgs>> arguments;

    public Optional<Output<List<ArgumentArgs>>> arguments() {
        return Optional.ofNullable(this.arguments);
    }

    /**
     * The token (git PAT or SAS token of storage account blob) associated with the context for a step.
     * 
     */
    @Import(name="contextAccessToken")
    private @Nullable Output<String> contextAccessToken;

    public Optional<Output<String>> contextAccessToken() {
        return Optional.ofNullable(this.contextAccessToken);
    }

    /**
     * The URL(absolute or relative) of the source context for the task step.
     * 
     */
    @Import(name="contextPath")
    private @Nullable Output<String> contextPath;

    public Optional<Output<String>> contextPath() {
        return Optional.ofNullable(this.contextPath);
    }

    /**
     * The Docker file path relative to the source context.
     * 
     */
    @Import(name="dockerFilePath", required=true)
    private Output<String> dockerFilePath;

    public Output<String> dockerFilePath() {
        return this.dockerFilePath;
    }

    /**
     * The fully qualified image names including the repository and tag.
     * 
     */
    @Import(name="imageNames")
    private @Nullable Output<List<String>> imageNames;

    public Optional<Output<List<String>>> imageNames() {
        return Optional.ofNullable(this.imageNames);
    }

    /**
     * The value of this property indicates whether the image built should be pushed to the registry or not.
     * 
     */
    @Import(name="isPushEnabled")
    private @Nullable Output<Boolean> isPushEnabled;

    public Optional<Output<Boolean>> isPushEnabled() {
        return Optional.ofNullable(this.isPushEnabled);
    }

    /**
     * The value of this property indicates whether the image cache is enabled or not.
     * 
     */
    @Import(name="noCache")
    private @Nullable Output<Boolean> noCache;

    public Optional<Output<Boolean>> noCache() {
        return Optional.ofNullable(this.noCache);
    }

    /**
     * The name of the target build stage for the docker build.
     * 
     */
    @Import(name="target")
    private @Nullable Output<String> target;

    public Optional<Output<String>> target() {
        return Optional.ofNullable(this.target);
    }

    /**
     * The type of the step.
     * Expected value is &#39;Docker&#39;.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    private DockerBuildStepArgs() {}

    private DockerBuildStepArgs(DockerBuildStepArgs $) {
        this.arguments = $.arguments;
        this.contextAccessToken = $.contextAccessToken;
        this.contextPath = $.contextPath;
        this.dockerFilePath = $.dockerFilePath;
        this.imageNames = $.imageNames;
        this.isPushEnabled = $.isPushEnabled;
        this.noCache = $.noCache;
        this.target = $.target;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DockerBuildStepArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DockerBuildStepArgs $;

        public Builder() {
            $ = new DockerBuildStepArgs();
        }

        public Builder(DockerBuildStepArgs defaults) {
            $ = new DockerBuildStepArgs(Objects.requireNonNull(defaults));
        }

        public Builder arguments(@Nullable Output<List<ArgumentArgs>> arguments) {
            $.arguments = arguments;
            return this;
        }

        public Builder arguments(List<ArgumentArgs> arguments) {
            return arguments(Output.of(arguments));
        }

        public Builder arguments(ArgumentArgs... arguments) {
            return arguments(List.of(arguments));
        }

        public Builder contextAccessToken(@Nullable Output<String> contextAccessToken) {
            $.contextAccessToken = contextAccessToken;
            return this;
        }

        public Builder contextAccessToken(String contextAccessToken) {
            return contextAccessToken(Output.of(contextAccessToken));
        }

        public Builder contextPath(@Nullable Output<String> contextPath) {
            $.contextPath = contextPath;
            return this;
        }

        public Builder contextPath(String contextPath) {
            return contextPath(Output.of(contextPath));
        }

        public Builder dockerFilePath(Output<String> dockerFilePath) {
            $.dockerFilePath = dockerFilePath;
            return this;
        }

        public Builder dockerFilePath(String dockerFilePath) {
            return dockerFilePath(Output.of(dockerFilePath));
        }

        public Builder imageNames(@Nullable Output<List<String>> imageNames) {
            $.imageNames = imageNames;
            return this;
        }

        public Builder imageNames(List<String> imageNames) {
            return imageNames(Output.of(imageNames));
        }

        public Builder imageNames(String... imageNames) {
            return imageNames(List.of(imageNames));
        }

        public Builder isPushEnabled(@Nullable Output<Boolean> isPushEnabled) {
            $.isPushEnabled = isPushEnabled;
            return this;
        }

        public Builder isPushEnabled(Boolean isPushEnabled) {
            return isPushEnabled(Output.of(isPushEnabled));
        }

        public Builder noCache(@Nullable Output<Boolean> noCache) {
            $.noCache = noCache;
            return this;
        }

        public Builder noCache(Boolean noCache) {
            return noCache(Output.of(noCache));
        }

        public Builder target(@Nullable Output<String> target) {
            $.target = target;
            return this;
        }

        public Builder target(String target) {
            return target(Output.of(target));
        }

        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public DockerBuildStepArgs build() {
            $.dockerFilePath = Objects.requireNonNull($.dockerFilePath, "expected parameter 'dockerFilePath' to be non-null");
            $.isPushEnabled = Codegen.booleanProp("isPushEnabled").output().arg($.isPushEnabled).def(true).getNullable();
            $.noCache = Codegen.booleanProp("noCache").output().arg($.noCache).def(false).getNullable();
            $.type = Codegen.stringProp("type").output().arg($.type).require();
            return $;
        }
    }

}
