// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.containerregistry.inputs;

import com.pulumi.azurenative.containerregistry.inputs.ArgumentArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The Docker build step.
 * 
 */
public final class DockerBuildStepArgs extends com.pulumi.resources.ResourceArgs {

    public static final DockerBuildStepArgs Empty = new DockerBuildStepArgs();

    /**
     * The collection of override arguments to be used when executing this build step.
     * 
     */
    @Import(name="arguments")
      private final @Nullable Output<List<ArgumentArgs>> arguments;

    public Output<List<ArgumentArgs>> arguments() {
        return this.arguments == null ? Codegen.empty() : this.arguments;
    }

    /**
     * The token (git PAT or SAS token of storage account blob) associated with the context for a step.
     * 
     */
    @Import(name="contextAccessToken")
      private final @Nullable Output<String> contextAccessToken;

    public Output<String> contextAccessToken() {
        return this.contextAccessToken == null ? Codegen.empty() : this.contextAccessToken;
    }

    /**
     * The URL(absolute or relative) of the source context for the task step.
     * 
     */
    @Import(name="contextPath")
      private final @Nullable Output<String> contextPath;

    public Output<String> contextPath() {
        return this.contextPath == null ? Codegen.empty() : this.contextPath;
    }

    /**
     * The Docker file path relative to the source context.
     * 
     */
    @Import(name="dockerFilePath", required=true)
      private final Output<String> dockerFilePath;

    public Output<String> dockerFilePath() {
        return this.dockerFilePath;
    }

    /**
     * The fully qualified image names including the repository and tag.
     * 
     */
    @Import(name="imageNames")
      private final @Nullable Output<List<String>> imageNames;

    public Output<List<String>> imageNames() {
        return this.imageNames == null ? Codegen.empty() : this.imageNames;
    }

    /**
     * The value of this property indicates whether the image built should be pushed to the registry or not.
     * 
     */
    @Import(name="isPushEnabled")
      private final @Nullable Output<Boolean> isPushEnabled;

    public Output<Boolean> isPushEnabled() {
        return this.isPushEnabled == null ? Codegen.empty() : this.isPushEnabled;
    }

    /**
     * The value of this property indicates whether the image cache is enabled or not.
     * 
     */
    @Import(name="noCache")
      private final @Nullable Output<Boolean> noCache;

    public Output<Boolean> noCache() {
        return this.noCache == null ? Codegen.empty() : this.noCache;
    }

    /**
     * The name of the target build stage for the docker build.
     * 
     */
    @Import(name="target")
      private final @Nullable Output<String> target;

    public Output<String> target() {
        return this.target == null ? Codegen.empty() : this.target;
    }

    /**
     * The type of the step.
     * Expected value is 'Docker'.
     * 
     */
    @Import(name="type", required=true)
      private final Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    public DockerBuildStepArgs(
        @Nullable Output<List<ArgumentArgs>> arguments,
        @Nullable Output<String> contextAccessToken,
        @Nullable Output<String> contextPath,
        Output<String> dockerFilePath,
        @Nullable Output<List<String>> imageNames,
        @Nullable Output<Boolean> isPushEnabled,
        @Nullable Output<Boolean> noCache,
        @Nullable Output<String> target,
        Output<String> type) {
        this.arguments = arguments;
        this.contextAccessToken = contextAccessToken;
        this.contextPath = contextPath;
        this.dockerFilePath = Objects.requireNonNull(dockerFilePath, "expected parameter 'dockerFilePath' to be non-null");
        this.imageNames = imageNames;
        this.isPushEnabled = isPushEnabled == null ? Codegen.ofNullable(true) : isPushEnabled;
        this.noCache = noCache == null ? Codegen.ofNullable(false) : noCache;
        this.target = target;
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private DockerBuildStepArgs() {
        this.arguments = Codegen.empty();
        this.contextAccessToken = Codegen.empty();
        this.contextPath = Codegen.empty();
        this.dockerFilePath = Codegen.empty();
        this.imageNames = Codegen.empty();
        this.isPushEnabled = Codegen.empty();
        this.noCache = Codegen.empty();
        this.target = Codegen.empty();
        this.type = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DockerBuildStepArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<ArgumentArgs>> arguments;
        private @Nullable Output<String> contextAccessToken;
        private @Nullable Output<String> contextPath;
        private Output<String> dockerFilePath;
        private @Nullable Output<List<String>> imageNames;
        private @Nullable Output<Boolean> isPushEnabled;
        private @Nullable Output<Boolean> noCache;
        private @Nullable Output<String> target;
        private Output<String> type;

        public Builder() {
    	      // Empty
        }

        public Builder(DockerBuildStepArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arguments = defaults.arguments;
    	      this.contextAccessToken = defaults.contextAccessToken;
    	      this.contextPath = defaults.contextPath;
    	      this.dockerFilePath = defaults.dockerFilePath;
    	      this.imageNames = defaults.imageNames;
    	      this.isPushEnabled = defaults.isPushEnabled;
    	      this.noCache = defaults.noCache;
    	      this.target = defaults.target;
    	      this.type = defaults.type;
        }

        public Builder arguments(@Nullable Output<List<ArgumentArgs>> arguments) {
            this.arguments = arguments;
            return this;
        }
        public Builder arguments(@Nullable List<ArgumentArgs> arguments) {
            this.arguments = Codegen.ofNullable(arguments);
            return this;
        }
        public Builder arguments(ArgumentArgs... arguments) {
            return arguments(List.of(arguments));
        }
        public Builder contextAccessToken(@Nullable Output<String> contextAccessToken) {
            this.contextAccessToken = contextAccessToken;
            return this;
        }
        public Builder contextAccessToken(@Nullable String contextAccessToken) {
            this.contextAccessToken = Codegen.ofNullable(contextAccessToken);
            return this;
        }
        public Builder contextPath(@Nullable Output<String> contextPath) {
            this.contextPath = contextPath;
            return this;
        }
        public Builder contextPath(@Nullable String contextPath) {
            this.contextPath = Codegen.ofNullable(contextPath);
            return this;
        }
        public Builder dockerFilePath(Output<String> dockerFilePath) {
            this.dockerFilePath = Objects.requireNonNull(dockerFilePath);
            return this;
        }
        public Builder dockerFilePath(String dockerFilePath) {
            this.dockerFilePath = Output.of(Objects.requireNonNull(dockerFilePath));
            return this;
        }
        public Builder imageNames(@Nullable Output<List<String>> imageNames) {
            this.imageNames = imageNames;
            return this;
        }
        public Builder imageNames(@Nullable List<String> imageNames) {
            this.imageNames = Codegen.ofNullable(imageNames);
            return this;
        }
        public Builder imageNames(String... imageNames) {
            return imageNames(List.of(imageNames));
        }
        public Builder isPushEnabled(@Nullable Output<Boolean> isPushEnabled) {
            this.isPushEnabled = isPushEnabled;
            return this;
        }
        public Builder isPushEnabled(@Nullable Boolean isPushEnabled) {
            this.isPushEnabled = Codegen.ofNullable(isPushEnabled);
            return this;
        }
        public Builder noCache(@Nullable Output<Boolean> noCache) {
            this.noCache = noCache;
            return this;
        }
        public Builder noCache(@Nullable Boolean noCache) {
            this.noCache = Codegen.ofNullable(noCache);
            return this;
        }
        public Builder target(@Nullable Output<String> target) {
            this.target = target;
            return this;
        }
        public Builder target(@Nullable String target) {
            this.target = Codegen.ofNullable(target);
            return this;
        }
        public Builder type(Output<String> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder type(String type) {
            this.type = Output.of(Objects.requireNonNull(type));
            return this;
        }        public DockerBuildStepArgs build() {
            return new DockerBuildStepArgs(arguments, contextAccessToken, contextPath, dockerFilePath, imageNames, isPushEnabled, noCache, target, type);
        }
    }
}
