// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.compute.inputs;

import com.pulumi.azurenative.compute.inputs.KeyVaultKeyReferenceResponse;
import com.pulumi.azurenative.compute.inputs.KeyVaultSecretReferenceResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Describes a Encryption Settings for a Disk
 * 
 */
public final class DiskEncryptionSettingsResponse extends com.pulumi.resources.InvokeArgs {

    public static final DiskEncryptionSettingsResponse Empty = new DiskEncryptionSettingsResponse();

    /**
     * Specifies the location of the disk encryption key, which is a Key Vault Secret.
     * 
     */
    @Import(name="diskEncryptionKey")
    private @Nullable KeyVaultSecretReferenceResponse diskEncryptionKey;

    /**
     * @return Specifies the location of the disk encryption key, which is a Key Vault Secret.
     * 
     */
    public Optional<KeyVaultSecretReferenceResponse> diskEncryptionKey() {
        return Optional.ofNullable(this.diskEncryptionKey);
    }

    /**
     * Specifies whether disk encryption should be enabled on the virtual machine.
     * 
     */
    @Import(name="enabled")
    private @Nullable Boolean enabled;

    /**
     * @return Specifies whether disk encryption should be enabled on the virtual machine.
     * 
     */
    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Specifies the location of the key encryption key in Key Vault.
     * 
     */
    @Import(name="keyEncryptionKey")
    private @Nullable KeyVaultKeyReferenceResponse keyEncryptionKey;

    /**
     * @return Specifies the location of the key encryption key in Key Vault.
     * 
     */
    public Optional<KeyVaultKeyReferenceResponse> keyEncryptionKey() {
        return Optional.ofNullable(this.keyEncryptionKey);
    }

    private DiskEncryptionSettingsResponse() {}

    private DiskEncryptionSettingsResponse(DiskEncryptionSettingsResponse $) {
        this.diskEncryptionKey = $.diskEncryptionKey;
        this.enabled = $.enabled;
        this.keyEncryptionKey = $.keyEncryptionKey;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DiskEncryptionSettingsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DiskEncryptionSettingsResponse $;

        public Builder() {
            $ = new DiskEncryptionSettingsResponse();
        }

        public Builder(DiskEncryptionSettingsResponse defaults) {
            $ = new DiskEncryptionSettingsResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param diskEncryptionKey Specifies the location of the disk encryption key, which is a Key Vault Secret.
         * 
         * @return builder
         * 
         */
        public Builder diskEncryptionKey(@Nullable KeyVaultSecretReferenceResponse diskEncryptionKey) {
            $.diskEncryptionKey = diskEncryptionKey;
            return this;
        }

        /**
         * @param enabled Specifies whether disk encryption should be enabled on the virtual machine.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Boolean enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param keyEncryptionKey Specifies the location of the key encryption key in Key Vault.
         * 
         * @return builder
         * 
         */
        public Builder keyEncryptionKey(@Nullable KeyVaultKeyReferenceResponse keyEncryptionKey) {
            $.keyEncryptionKey = keyEncryptionKey;
            return this;
        }

        public DiskEncryptionSettingsResponse build() {
            return $;
        }
    }

}
