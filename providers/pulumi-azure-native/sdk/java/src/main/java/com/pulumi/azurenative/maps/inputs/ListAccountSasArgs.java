// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.maps.inputs;

import com.pulumi.azurenative.maps.enums.SigningKey;
import com.pulumi.core.Either;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ListAccountSasArgs extends com.pulumi.resources.InvokeArgs {

    public static final ListAccountSasArgs Empty = new ListAccountSasArgs();

    /**
     * The name of the Maps Account.
     * 
     */
    @Import(name="accountName", required=true)
      private final String accountName;

    public String accountName() {
        return this.accountName;
    }

    /**
     * The date time offset of when the token validity expires. For example &#34;2017-05-24T10:42:03.1567373Z&#34;
     * 
     */
    @Import(name="expiry", required=true)
      private final String expiry;

    public String expiry() {
        return this.expiry;
    }

    /**
     * Required parameter which represents the desired maximum request per second to allowed for the given SAS token. This does not guarantee perfect accuracy in measurements but provides application safe guards of abuse with eventual enforcement.
     * 
     */
    @Import(name="maxRatePerSecond", required=true)
      private final Integer maxRatePerSecond;

    public Integer maxRatePerSecond() {
        return this.maxRatePerSecond;
    }

    /**
     * The principal Id also known as the object Id of a User Assigned Managed Identity currently assigned to the Map Account. To assign a Managed Identity of the account, use operation Create or Update an assign a User Assigned Identity resource Id.
     * 
     */
    @Import(name="principalId", required=true)
      private final String principalId;

    public String principalId() {
        return this.principalId;
    }

    /**
     * Optional, allows control of which region locations are permitted access to Azure Maps REST APIs with the SAS token. Example: &#34;eastus&#34;, &#34;westus2&#34;. Omitting this parameter will allow all region locations to be accessible.
     * 
     */
    @Import(name="regions")
      private final @Nullable List<String> regions;

    public List<String> regions() {
        return this.regions == null ? List.of() : this.regions;
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final String resourceGroupName;

    public String resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The Map account key to use for signing.
     * 
     */
    @Import(name="signingKey", required=true)
      private final Either<String,SigningKey> signingKey;

    public Either<String,SigningKey> signingKey() {
        return this.signingKey;
    }

    /**
     * The date time offset of when the token validity begins. For example &#34;2017-05-24T10:42:03.1567373Z&#34;.
     * 
     */
    @Import(name="start", required=true)
      private final String start;

    public String start() {
        return this.start;
    }

    public ListAccountSasArgs(
        String accountName,
        String expiry,
        Integer maxRatePerSecond,
        String principalId,
        @Nullable List<String> regions,
        String resourceGroupName,
        Either<String,SigningKey> signingKey,
        String start) {
        this.accountName = Objects.requireNonNull(accountName, "expected parameter 'accountName' to be non-null");
        this.expiry = Objects.requireNonNull(expiry, "expected parameter 'expiry' to be non-null");
        this.maxRatePerSecond = Codegen.integerProp("maxRatePerSecond").arg(maxRatePerSecond).def(500).require();
        this.principalId = Objects.requireNonNull(principalId, "expected parameter 'principalId' to be non-null");
        this.regions = regions;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.signingKey = Objects.requireNonNull(signingKey, "expected parameter 'signingKey' to be non-null");
        this.start = Objects.requireNonNull(start, "expected parameter 'start' to be non-null");
    }

    private ListAccountSasArgs() {
        this.accountName = null;
        this.expiry = null;
        this.maxRatePerSecond = null;
        this.principalId = null;
        this.regions = List.of();
        this.resourceGroupName = null;
        this.signingKey = null;
        this.start = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ListAccountSasArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String accountName;
        private String expiry;
        private Integer maxRatePerSecond;
        private String principalId;
        private @Nullable List<String> regions;
        private String resourceGroupName;
        private Either<String,SigningKey> signingKey;
        private String start;

        public Builder() {
    	      // Empty
        }

        public Builder(ListAccountSasArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountName = defaults.accountName;
    	      this.expiry = defaults.expiry;
    	      this.maxRatePerSecond = defaults.maxRatePerSecond;
    	      this.principalId = defaults.principalId;
    	      this.regions = defaults.regions;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.signingKey = defaults.signingKey;
    	      this.start = defaults.start;
        }

        public Builder accountName(String accountName) {
            this.accountName = Objects.requireNonNull(accountName);
            return this;
        }
        public Builder expiry(String expiry) {
            this.expiry = Objects.requireNonNull(expiry);
            return this;
        }
        public Builder maxRatePerSecond(Integer maxRatePerSecond) {
            this.maxRatePerSecond = Objects.requireNonNull(maxRatePerSecond);
            return this;
        }
        public Builder principalId(String principalId) {
            this.principalId = Objects.requireNonNull(principalId);
            return this;
        }
        public Builder regions(@Nullable List<String> regions) {
            this.regions = regions;
            return this;
        }
        public Builder regions(String... regions) {
            return regions(List.of(regions));
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder signingKey(Either<String,SigningKey> signingKey) {
            this.signingKey = Objects.requireNonNull(signingKey);
            return this;
        }
        public Builder start(String start) {
            this.start = Objects.requireNonNull(start);
            return this;
        }        public ListAccountSasArgs build() {
            return new ListAccountSasArgs(accountName, expiry, maxRatePerSecond, principalId, regions, resourceGroupName, signingKey, start);
        }
    }
}
