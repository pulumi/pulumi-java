// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.cdn.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DeepCreatedOriginResponse {
    /**
     * Origin is enabled for load balancing or not. By default, origin is always enabled.
     * 
     */
    private final @Nullable Boolean enabled;
    /**
     * The address of the origin. It can be a domain name, IPv4 address, or IPv6 address. This should be unique across all origins in an endpoint.
     * 
     */
    private final String hostName;
    /**
     * The value of the HTTP port. Must be between 1 and 65535.
     * 
     */
    private final @Nullable Integer httpPort;
    /**
     * The value of the HTTPS port. Must be between 1 and 65535.
     * 
     */
    private final @Nullable Integer httpsPort;
    /**
     * Origin name which must be unique within the endpoint.
     * 
     */
    private final String name;
    /**
     * The host header value sent to the origin with each request. If you leave this blank, the request hostname determines this value. Azure CDN origins, such as Web Apps, Blob Storage, and Cloud Services require this host header value to match the origin hostname by default.
     * 
     */
    private final @Nullable String originHostHeader;
    /**
     * Priority of origin in given origin group for load balancing. Higher priorities will not be used for load balancing if any lower priority origin is healthy.Must be between 1 and 5.
     * 
     */
    private final @Nullable Integer priority;
    /**
     * The Alias of the Private Link resource. Populating this optional field indicates that this origin is 'Private'
     * 
     */
    private final @Nullable String privateLinkAlias;
    /**
     * A custom message to be included in the approval request to connect to the Private Link.
     * 
     */
    private final @Nullable String privateLinkApprovalMessage;
    /**
     * The location of the Private Link resource. Required only if 'privateLinkResourceId' is populated
     * 
     */
    private final @Nullable String privateLinkLocation;
    /**
     * The Resource Id of the Private Link resource. Populating this optional field indicates that this backend is 'Private'
     * 
     */
    private final @Nullable String privateLinkResourceId;
    /**
     * Weight of the origin in given origin group for load balancing. Must be between 1 and 1000
     * 
     */
    private final @Nullable Integer weight;

    @CustomType.Constructor
    private DeepCreatedOriginResponse(
        @CustomType.Parameter("enabled") @Nullable Boolean enabled,
        @CustomType.Parameter("hostName") String hostName,
        @CustomType.Parameter("httpPort") @Nullable Integer httpPort,
        @CustomType.Parameter("httpsPort") @Nullable Integer httpsPort,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("originHostHeader") @Nullable String originHostHeader,
        @CustomType.Parameter("priority") @Nullable Integer priority,
        @CustomType.Parameter("privateLinkAlias") @Nullable String privateLinkAlias,
        @CustomType.Parameter("privateLinkApprovalMessage") @Nullable String privateLinkApprovalMessage,
        @CustomType.Parameter("privateLinkLocation") @Nullable String privateLinkLocation,
        @CustomType.Parameter("privateLinkResourceId") @Nullable String privateLinkResourceId,
        @CustomType.Parameter("weight") @Nullable Integer weight) {
        this.enabled = enabled;
        this.hostName = hostName;
        this.httpPort = httpPort;
        this.httpsPort = httpsPort;
        this.name = name;
        this.originHostHeader = originHostHeader;
        this.priority = priority;
        this.privateLinkAlias = privateLinkAlias;
        this.privateLinkApprovalMessage = privateLinkApprovalMessage;
        this.privateLinkLocation = privateLinkLocation;
        this.privateLinkResourceId = privateLinkResourceId;
        this.weight = weight;
    }

    /**
     * Origin is enabled for load balancing or not. By default, origin is always enabled.
     * 
    */
    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }
    /**
     * The address of the origin. It can be a domain name, IPv4 address, or IPv6 address. This should be unique across all origins in an endpoint.
     * 
    */
    public String hostName() {
        return this.hostName;
    }
    /**
     * The value of the HTTP port. Must be between 1 and 65535.
     * 
    */
    public Optional<Integer> httpPort() {
        return Optional.ofNullable(this.httpPort);
    }
    /**
     * The value of the HTTPS port. Must be between 1 and 65535.
     * 
    */
    public Optional<Integer> httpsPort() {
        return Optional.ofNullable(this.httpsPort);
    }
    /**
     * Origin name which must be unique within the endpoint.
     * 
    */
    public String name() {
        return this.name;
    }
    /**
     * The host header value sent to the origin with each request. If you leave this blank, the request hostname determines this value. Azure CDN origins, such as Web Apps, Blob Storage, and Cloud Services require this host header value to match the origin hostname by default.
     * 
    */
    public Optional<String> originHostHeader() {
        return Optional.ofNullable(this.originHostHeader);
    }
    /**
     * Priority of origin in given origin group for load balancing. Higher priorities will not be used for load balancing if any lower priority origin is healthy.Must be between 1 and 5.
     * 
    */
    public Optional<Integer> priority() {
        return Optional.ofNullable(this.priority);
    }
    /**
     * The Alias of the Private Link resource. Populating this optional field indicates that this origin is 'Private'
     * 
    */
    public Optional<String> privateLinkAlias() {
        return Optional.ofNullable(this.privateLinkAlias);
    }
    /**
     * A custom message to be included in the approval request to connect to the Private Link.
     * 
    */
    public Optional<String> privateLinkApprovalMessage() {
        return Optional.ofNullable(this.privateLinkApprovalMessage);
    }
    /**
     * The location of the Private Link resource. Required only if 'privateLinkResourceId' is populated
     * 
    */
    public Optional<String> privateLinkLocation() {
        return Optional.ofNullable(this.privateLinkLocation);
    }
    /**
     * The Resource Id of the Private Link resource. Populating this optional field indicates that this backend is 'Private'
     * 
    */
    public Optional<String> privateLinkResourceId() {
        return Optional.ofNullable(this.privateLinkResourceId);
    }
    /**
     * Weight of the origin in given origin group for load balancing. Must be between 1 and 1000
     * 
    */
    public Optional<Integer> weight() {
        return Optional.ofNullable(this.weight);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DeepCreatedOriginResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Boolean enabled;
        private String hostName;
        private @Nullable Integer httpPort;
        private @Nullable Integer httpsPort;
        private String name;
        private @Nullable String originHostHeader;
        private @Nullable Integer priority;
        private @Nullable String privateLinkAlias;
        private @Nullable String privateLinkApprovalMessage;
        private @Nullable String privateLinkLocation;
        private @Nullable String privateLinkResourceId;
        private @Nullable Integer weight;

        public Builder() {
    	      // Empty
        }

        public Builder(DeepCreatedOriginResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enabled = defaults.enabled;
    	      this.hostName = defaults.hostName;
    	      this.httpPort = defaults.httpPort;
    	      this.httpsPort = defaults.httpsPort;
    	      this.name = defaults.name;
    	      this.originHostHeader = defaults.originHostHeader;
    	      this.priority = defaults.priority;
    	      this.privateLinkAlias = defaults.privateLinkAlias;
    	      this.privateLinkApprovalMessage = defaults.privateLinkApprovalMessage;
    	      this.privateLinkLocation = defaults.privateLinkLocation;
    	      this.privateLinkResourceId = defaults.privateLinkResourceId;
    	      this.weight = defaults.weight;
        }

        public Builder enabled(@Nullable Boolean enabled) {
            this.enabled = enabled;
            return this;
        }
        public Builder hostName(String hostName) {
            this.hostName = Objects.requireNonNull(hostName);
            return this;
        }
        public Builder httpPort(@Nullable Integer httpPort) {
            this.httpPort = httpPort;
            return this;
        }
        public Builder httpsPort(@Nullable Integer httpsPort) {
            this.httpsPort = httpsPort;
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder originHostHeader(@Nullable String originHostHeader) {
            this.originHostHeader = originHostHeader;
            return this;
        }
        public Builder priority(@Nullable Integer priority) {
            this.priority = priority;
            return this;
        }
        public Builder privateLinkAlias(@Nullable String privateLinkAlias) {
            this.privateLinkAlias = privateLinkAlias;
            return this;
        }
        public Builder privateLinkApprovalMessage(@Nullable String privateLinkApprovalMessage) {
            this.privateLinkApprovalMessage = privateLinkApprovalMessage;
            return this;
        }
        public Builder privateLinkLocation(@Nullable String privateLinkLocation) {
            this.privateLinkLocation = privateLinkLocation;
            return this;
        }
        public Builder privateLinkResourceId(@Nullable String privateLinkResourceId) {
            this.privateLinkResourceId = privateLinkResourceId;
            return this;
        }
        public Builder weight(@Nullable Integer weight) {
            this.weight = weight;
            return this;
        }        public DeepCreatedOriginResponse build() {
            return new DeepCreatedOriginResponse(enabled, hostName, httpPort, httpsPort, name, originHostHeader, priority, privateLinkAlias, privateLinkApprovalMessage, privateLinkLocation, privateLinkResourceId, weight);
        }
    }
}
