// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.storagesync;

import com.pulumi.azurenative.storagesync.enums.FeatureStatus;
import com.pulumi.azurenative.storagesync.enums.InitialDownloadPolicy;
import com.pulumi.azurenative.storagesync.enums.LocalCacheMode;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServerEndpointArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServerEndpointArgs Empty = new ServerEndpointArgs();

    /**
     * Cloud Tiering.
     * 
     */
    @Import(name="cloudTiering")
    private @Nullable Output<Either<String,FeatureStatus>> cloudTiering;

    /**
     * @return Cloud Tiering.
     * 
     */
    public Optional<Output<Either<String,FeatureStatus>>> cloudTiering() {
        return Optional.ofNullable(this.cloudTiering);
    }

    /**
     * Friendly Name
     * 
     */
    @Import(name="friendlyName")
    private @Nullable Output<String> friendlyName;

    /**
     * @return Friendly Name
     * 
     */
    public Optional<Output<String>> friendlyName() {
        return Optional.ofNullable(this.friendlyName);
    }

    /**
     * Policy for how namespace and files are recalled during FastDr.
     * 
     */
    @Import(name="initialDownloadPolicy")
    private @Nullable Output<Either<String,InitialDownloadPolicy>> initialDownloadPolicy;

    /**
     * @return Policy for how namespace and files are recalled during FastDr.
     * 
     */
    public Optional<Output<Either<String,InitialDownloadPolicy>>> initialDownloadPolicy() {
        return Optional.ofNullable(this.initialDownloadPolicy);
    }

    /**
     * Policy for enabling follow-the-sun business models: link local cache to cloud behavior to pre-populate before local access.
     * 
     */
    @Import(name="localCacheMode")
    private @Nullable Output<Either<String,LocalCacheMode>> localCacheMode;

    /**
     * @return Policy for enabling follow-the-sun business models: link local cache to cloud behavior to pre-populate before local access.
     * 
     */
    public Optional<Output<Either<String,LocalCacheMode>>> localCacheMode() {
        return Optional.ofNullable(this.localCacheMode);
    }

    /**
     * Offline data transfer
     * 
     */
    @Import(name="offlineDataTransfer")
    private @Nullable Output<Either<String,FeatureStatus>> offlineDataTransfer;

    /**
     * @return Offline data transfer
     * 
     */
    public Optional<Output<Either<String,FeatureStatus>>> offlineDataTransfer() {
        return Optional.ofNullable(this.offlineDataTransfer);
    }

    /**
     * Offline data transfer share name
     * 
     */
    @Import(name="offlineDataTransferShareName")
    private @Nullable Output<String> offlineDataTransferShareName;

    /**
     * @return Offline data transfer share name
     * 
     */
    public Optional<Output<String>> offlineDataTransferShareName() {
        return Optional.ofNullable(this.offlineDataTransferShareName);
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group. The name is case insensitive.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Name of Server Endpoint object.
     * 
     */
    @Import(name="serverEndpointName")
    private @Nullable Output<String> serverEndpointName;

    /**
     * @return Name of Server Endpoint object.
     * 
     */
    public Optional<Output<String>> serverEndpointName() {
        return Optional.ofNullable(this.serverEndpointName);
    }

    /**
     * Server Local path.
     * 
     */
    @Import(name="serverLocalPath")
    private @Nullable Output<String> serverLocalPath;

    /**
     * @return Server Local path.
     * 
     */
    public Optional<Output<String>> serverLocalPath() {
        return Optional.ofNullable(this.serverLocalPath);
    }

    /**
     * Server Resource Id.
     * 
     */
    @Import(name="serverResourceId")
    private @Nullable Output<String> serverResourceId;

    /**
     * @return Server Resource Id.
     * 
     */
    public Optional<Output<String>> serverResourceId() {
        return Optional.ofNullable(this.serverResourceId);
    }

    /**
     * Name of Storage Sync Service resource.
     * 
     */
    @Import(name="storageSyncServiceName", required=true)
    private Output<String> storageSyncServiceName;

    /**
     * @return Name of Storage Sync Service resource.
     * 
     */
    public Output<String> storageSyncServiceName() {
        return this.storageSyncServiceName;
    }

    /**
     * Name of Sync Group resource.
     * 
     */
    @Import(name="syncGroupName", required=true)
    private Output<String> syncGroupName;

    /**
     * @return Name of Sync Group resource.
     * 
     */
    public Output<String> syncGroupName() {
        return this.syncGroupName;
    }

    /**
     * Tier files older than days.
     * 
     */
    @Import(name="tierFilesOlderThanDays")
    private @Nullable Output<Integer> tierFilesOlderThanDays;

    /**
     * @return Tier files older than days.
     * 
     */
    public Optional<Output<Integer>> tierFilesOlderThanDays() {
        return Optional.ofNullable(this.tierFilesOlderThanDays);
    }

    /**
     * Level of free space to be maintained by Cloud Tiering if it is enabled.
     * 
     */
    @Import(name="volumeFreeSpacePercent")
    private @Nullable Output<Integer> volumeFreeSpacePercent;

    /**
     * @return Level of free space to be maintained by Cloud Tiering if it is enabled.
     * 
     */
    public Optional<Output<Integer>> volumeFreeSpacePercent() {
        return Optional.ofNullable(this.volumeFreeSpacePercent);
    }

    private ServerEndpointArgs() {}

    private ServerEndpointArgs(ServerEndpointArgs $) {
        this.cloudTiering = $.cloudTiering;
        this.friendlyName = $.friendlyName;
        this.initialDownloadPolicy = $.initialDownloadPolicy;
        this.localCacheMode = $.localCacheMode;
        this.offlineDataTransfer = $.offlineDataTransfer;
        this.offlineDataTransferShareName = $.offlineDataTransferShareName;
        this.resourceGroupName = $.resourceGroupName;
        this.serverEndpointName = $.serverEndpointName;
        this.serverLocalPath = $.serverLocalPath;
        this.serverResourceId = $.serverResourceId;
        this.storageSyncServiceName = $.storageSyncServiceName;
        this.syncGroupName = $.syncGroupName;
        this.tierFilesOlderThanDays = $.tierFilesOlderThanDays;
        this.volumeFreeSpacePercent = $.volumeFreeSpacePercent;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServerEndpointArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServerEndpointArgs $;

        public Builder() {
            $ = new ServerEndpointArgs();
        }

        public Builder(ServerEndpointArgs defaults) {
            $ = new ServerEndpointArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cloudTiering Cloud Tiering.
         * 
         * @return builder
         * 
         */
        public Builder cloudTiering(@Nullable Output<Either<String,FeatureStatus>> cloudTiering) {
            $.cloudTiering = cloudTiering;
            return this;
        }

        /**
         * @param cloudTiering Cloud Tiering.
         * 
         * @return builder
         * 
         */
        public Builder cloudTiering(Either<String,FeatureStatus> cloudTiering) {
            return cloudTiering(Output.of(cloudTiering));
        }

        /**
         * @param cloudTiering Cloud Tiering.
         * 
         * @return builder
         * 
         */
        public Builder cloudTiering(String cloudTiering) {
            return cloudTiering(Either.ofLeft(cloudTiering));
        }

        /**
         * @param cloudTiering Cloud Tiering.
         * 
         * @return builder
         * 
         */
        public Builder cloudTiering(FeatureStatus cloudTiering) {
            return cloudTiering(Either.ofRight(cloudTiering));
        }

        /**
         * @param friendlyName Friendly Name
         * 
         * @return builder
         * 
         */
        public Builder friendlyName(@Nullable Output<String> friendlyName) {
            $.friendlyName = friendlyName;
            return this;
        }

        /**
         * @param friendlyName Friendly Name
         * 
         * @return builder
         * 
         */
        public Builder friendlyName(String friendlyName) {
            return friendlyName(Output.of(friendlyName));
        }

        /**
         * @param initialDownloadPolicy Policy for how namespace and files are recalled during FastDr.
         * 
         * @return builder
         * 
         */
        public Builder initialDownloadPolicy(@Nullable Output<Either<String,InitialDownloadPolicy>> initialDownloadPolicy) {
            $.initialDownloadPolicy = initialDownloadPolicy;
            return this;
        }

        /**
         * @param initialDownloadPolicy Policy for how namespace and files are recalled during FastDr.
         * 
         * @return builder
         * 
         */
        public Builder initialDownloadPolicy(Either<String,InitialDownloadPolicy> initialDownloadPolicy) {
            return initialDownloadPolicy(Output.of(initialDownloadPolicy));
        }

        /**
         * @param initialDownloadPolicy Policy for how namespace and files are recalled during FastDr.
         * 
         * @return builder
         * 
         */
        public Builder initialDownloadPolicy(String initialDownloadPolicy) {
            return initialDownloadPolicy(Either.ofLeft(initialDownloadPolicy));
        }

        /**
         * @param initialDownloadPolicy Policy for how namespace and files are recalled during FastDr.
         * 
         * @return builder
         * 
         */
        public Builder initialDownloadPolicy(InitialDownloadPolicy initialDownloadPolicy) {
            return initialDownloadPolicy(Either.ofRight(initialDownloadPolicy));
        }

        /**
         * @param localCacheMode Policy for enabling follow-the-sun business models: link local cache to cloud behavior to pre-populate before local access.
         * 
         * @return builder
         * 
         */
        public Builder localCacheMode(@Nullable Output<Either<String,LocalCacheMode>> localCacheMode) {
            $.localCacheMode = localCacheMode;
            return this;
        }

        /**
         * @param localCacheMode Policy for enabling follow-the-sun business models: link local cache to cloud behavior to pre-populate before local access.
         * 
         * @return builder
         * 
         */
        public Builder localCacheMode(Either<String,LocalCacheMode> localCacheMode) {
            return localCacheMode(Output.of(localCacheMode));
        }

        /**
         * @param localCacheMode Policy for enabling follow-the-sun business models: link local cache to cloud behavior to pre-populate before local access.
         * 
         * @return builder
         * 
         */
        public Builder localCacheMode(String localCacheMode) {
            return localCacheMode(Either.ofLeft(localCacheMode));
        }

        /**
         * @param localCacheMode Policy for enabling follow-the-sun business models: link local cache to cloud behavior to pre-populate before local access.
         * 
         * @return builder
         * 
         */
        public Builder localCacheMode(LocalCacheMode localCacheMode) {
            return localCacheMode(Either.ofRight(localCacheMode));
        }

        /**
         * @param offlineDataTransfer Offline data transfer
         * 
         * @return builder
         * 
         */
        public Builder offlineDataTransfer(@Nullable Output<Either<String,FeatureStatus>> offlineDataTransfer) {
            $.offlineDataTransfer = offlineDataTransfer;
            return this;
        }

        /**
         * @param offlineDataTransfer Offline data transfer
         * 
         * @return builder
         * 
         */
        public Builder offlineDataTransfer(Either<String,FeatureStatus> offlineDataTransfer) {
            return offlineDataTransfer(Output.of(offlineDataTransfer));
        }

        /**
         * @param offlineDataTransfer Offline data transfer
         * 
         * @return builder
         * 
         */
        public Builder offlineDataTransfer(String offlineDataTransfer) {
            return offlineDataTransfer(Either.ofLeft(offlineDataTransfer));
        }

        /**
         * @param offlineDataTransfer Offline data transfer
         * 
         * @return builder
         * 
         */
        public Builder offlineDataTransfer(FeatureStatus offlineDataTransfer) {
            return offlineDataTransfer(Either.ofRight(offlineDataTransfer));
        }

        /**
         * @param offlineDataTransferShareName Offline data transfer share name
         * 
         * @return builder
         * 
         */
        public Builder offlineDataTransferShareName(@Nullable Output<String> offlineDataTransferShareName) {
            $.offlineDataTransferShareName = offlineDataTransferShareName;
            return this;
        }

        /**
         * @param offlineDataTransferShareName Offline data transfer share name
         * 
         * @return builder
         * 
         */
        public Builder offlineDataTransferShareName(String offlineDataTransferShareName) {
            return offlineDataTransferShareName(Output.of(offlineDataTransferShareName));
        }

        /**
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param serverEndpointName Name of Server Endpoint object.
         * 
         * @return builder
         * 
         */
        public Builder serverEndpointName(@Nullable Output<String> serverEndpointName) {
            $.serverEndpointName = serverEndpointName;
            return this;
        }

        /**
         * @param serverEndpointName Name of Server Endpoint object.
         * 
         * @return builder
         * 
         */
        public Builder serverEndpointName(String serverEndpointName) {
            return serverEndpointName(Output.of(serverEndpointName));
        }

        /**
         * @param serverLocalPath Server Local path.
         * 
         * @return builder
         * 
         */
        public Builder serverLocalPath(@Nullable Output<String> serverLocalPath) {
            $.serverLocalPath = serverLocalPath;
            return this;
        }

        /**
         * @param serverLocalPath Server Local path.
         * 
         * @return builder
         * 
         */
        public Builder serverLocalPath(String serverLocalPath) {
            return serverLocalPath(Output.of(serverLocalPath));
        }

        /**
         * @param serverResourceId Server Resource Id.
         * 
         * @return builder
         * 
         */
        public Builder serverResourceId(@Nullable Output<String> serverResourceId) {
            $.serverResourceId = serverResourceId;
            return this;
        }

        /**
         * @param serverResourceId Server Resource Id.
         * 
         * @return builder
         * 
         */
        public Builder serverResourceId(String serverResourceId) {
            return serverResourceId(Output.of(serverResourceId));
        }

        /**
         * @param storageSyncServiceName Name of Storage Sync Service resource.
         * 
         * @return builder
         * 
         */
        public Builder storageSyncServiceName(Output<String> storageSyncServiceName) {
            $.storageSyncServiceName = storageSyncServiceName;
            return this;
        }

        /**
         * @param storageSyncServiceName Name of Storage Sync Service resource.
         * 
         * @return builder
         * 
         */
        public Builder storageSyncServiceName(String storageSyncServiceName) {
            return storageSyncServiceName(Output.of(storageSyncServiceName));
        }

        /**
         * @param syncGroupName Name of Sync Group resource.
         * 
         * @return builder
         * 
         */
        public Builder syncGroupName(Output<String> syncGroupName) {
            $.syncGroupName = syncGroupName;
            return this;
        }

        /**
         * @param syncGroupName Name of Sync Group resource.
         * 
         * @return builder
         * 
         */
        public Builder syncGroupName(String syncGroupName) {
            return syncGroupName(Output.of(syncGroupName));
        }

        /**
         * @param tierFilesOlderThanDays Tier files older than days.
         * 
         * @return builder
         * 
         */
        public Builder tierFilesOlderThanDays(@Nullable Output<Integer> tierFilesOlderThanDays) {
            $.tierFilesOlderThanDays = tierFilesOlderThanDays;
            return this;
        }

        /**
         * @param tierFilesOlderThanDays Tier files older than days.
         * 
         * @return builder
         * 
         */
        public Builder tierFilesOlderThanDays(Integer tierFilesOlderThanDays) {
            return tierFilesOlderThanDays(Output.of(tierFilesOlderThanDays));
        }

        /**
         * @param volumeFreeSpacePercent Level of free space to be maintained by Cloud Tiering if it is enabled.
         * 
         * @return builder
         * 
         */
        public Builder volumeFreeSpacePercent(@Nullable Output<Integer> volumeFreeSpacePercent) {
            $.volumeFreeSpacePercent = volumeFreeSpacePercent;
            return this;
        }

        /**
         * @param volumeFreeSpacePercent Level of free space to be maintained by Cloud Tiering if it is enabled.
         * 
         * @return builder
         * 
         */
        public Builder volumeFreeSpacePercent(Integer volumeFreeSpacePercent) {
            return volumeFreeSpacePercent(Output.of(volumeFreeSpacePercent));
        }

        public ServerEndpointArgs build() {
            $.initialDownloadPolicy = Codegen.stringProp("initialDownloadPolicy").left(InitialDownloadPolicy.class).output().arg($.initialDownloadPolicy).def("NamespaceThenModifiedFiles").getNullable();
            $.localCacheMode = Codegen.stringProp("localCacheMode").left(LocalCacheMode.class).output().arg($.localCacheMode).def("UpdateLocallyCachedFiles").getNullable();
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.storageSyncServiceName = Objects.requireNonNull($.storageSyncServiceName, "expected parameter 'storageSyncServiceName' to be non-null");
            $.syncGroupName = Objects.requireNonNull($.syncGroupName, "expected parameter 'syncGroupName' to be non-null");
            $.tierFilesOlderThanDays = Codegen.integerProp("tierFilesOlderThanDays").output().arg($.tierFilesOlderThanDays).def(0).getNullable();
            $.volumeFreeSpacePercent = Codegen.integerProp("volumeFreeSpacePercent").output().arg($.volumeFreeSpacePercent).def(20).getNullable();
            return $;
        }
    }

}
