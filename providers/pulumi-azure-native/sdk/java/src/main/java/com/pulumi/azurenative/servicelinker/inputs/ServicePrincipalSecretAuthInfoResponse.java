// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.servicelinker.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;


/**
 * The authentication info when authType is servicePrincipal secret
 * 
 */
public final class ServicePrincipalSecretAuthInfoResponse extends com.pulumi.resources.InvokeArgs {

    public static final ServicePrincipalSecretAuthInfoResponse Empty = new ServicePrincipalSecretAuthInfoResponse();

    /**
     * The authentication type.
     * Expected value is &#39;servicePrincipalSecret&#39;.
     * 
     */
    @Import(name="authType", required=true)
    private String authType;

    /**
     * @return The authentication type.
     * Expected value is &#39;servicePrincipalSecret&#39;.
     * 
     */
    public String authType() {
        return this.authType;
    }

    /**
     * ServicePrincipal application clientId for servicePrincipal auth.
     * 
     */
    @Import(name="clientId", required=true)
    private String clientId;

    /**
     * @return ServicePrincipal application clientId for servicePrincipal auth.
     * 
     */
    public String clientId() {
        return this.clientId;
    }

    /**
     * Principal Id for servicePrincipal auth.
     * 
     */
    @Import(name="principalId", required=true)
    private String principalId;

    /**
     * @return Principal Id for servicePrincipal auth.
     * 
     */
    public String principalId() {
        return this.principalId;
    }

    /**
     * Secret for servicePrincipal auth.
     * 
     */
    @Import(name="secret", required=true)
    private String secret;

    /**
     * @return Secret for servicePrincipal auth.
     * 
     */
    public String secret() {
        return this.secret;
    }

    private ServicePrincipalSecretAuthInfoResponse() {}

    private ServicePrincipalSecretAuthInfoResponse(ServicePrincipalSecretAuthInfoResponse $) {
        this.authType = $.authType;
        this.clientId = $.clientId;
        this.principalId = $.principalId;
        this.secret = $.secret;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServicePrincipalSecretAuthInfoResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServicePrincipalSecretAuthInfoResponse $;

        public Builder() {
            $ = new ServicePrincipalSecretAuthInfoResponse();
        }

        public Builder(ServicePrincipalSecretAuthInfoResponse defaults) {
            $ = new ServicePrincipalSecretAuthInfoResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param authType The authentication type.
         * Expected value is &#39;servicePrincipalSecret&#39;.
         * 
         * @return builder
         * 
         */
        public Builder authType(String authType) {
            $.authType = authType;
            return this;
        }

        /**
         * @param clientId ServicePrincipal application clientId for servicePrincipal auth.
         * 
         * @return builder
         * 
         */
        public Builder clientId(String clientId) {
            $.clientId = clientId;
            return this;
        }

        /**
         * @param principalId Principal Id for servicePrincipal auth.
         * 
         * @return builder
         * 
         */
        public Builder principalId(String principalId) {
            $.principalId = principalId;
            return this;
        }

        /**
         * @param secret Secret for servicePrincipal auth.
         * 
         * @return builder
         * 
         */
        public Builder secret(String secret) {
            $.secret = secret;
            return this;
        }

        public ServicePrincipalSecretAuthInfoResponse build() {
            $.authType = Codegen.stringProp("authType").arg($.authType).require();
            $.clientId = Objects.requireNonNull($.clientId, "expected parameter 'clientId' to be non-null");
            $.principalId = Objects.requireNonNull($.principalId, "expected parameter 'principalId' to be non-null");
            $.secret = Objects.requireNonNull($.secret, "expected parameter 'secret' to be non-null");
            return $;
        }
    }

}
