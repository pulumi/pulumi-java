// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.resources.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Entity representing the reference to the template.
 * 
 */
public final class TemplateLinkArgs extends com.pulumi.resources.ResourceArgs {

    public static final TemplateLinkArgs Empty = new TemplateLinkArgs();

    /**
     * If included, must match the ContentVersion in the template.
     * 
     */
    @Import(name="contentVersion")
    private @Nullable Output<String> contentVersion;

    public Optional<Output<String>> contentVersion() {
        return Optional.ofNullable(this.contentVersion);
    }

    /**
     * The resource id of a Template Spec. Use either the id or uri property, but not both.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The query string (for example, a SAS token) to be used with the templateLink URI.
     * 
     */
    @Import(name="queryString")
    private @Nullable Output<String> queryString;

    public Optional<Output<String>> queryString() {
        return Optional.ofNullable(this.queryString);
    }

    /**
     * The relativePath property can be used to deploy a linked template at a location relative to the parent. If the parent template was linked with a TemplateSpec, this will reference an artifact in the TemplateSpec.  If the parent was linked with a URI, the child deployment will be a combination of the parent and relativePath URIs
     * 
     */
    @Import(name="relativePath")
    private @Nullable Output<String> relativePath;

    public Optional<Output<String>> relativePath() {
        return Optional.ofNullable(this.relativePath);
    }

    /**
     * The URI of the template to deploy. Use either the uri or id property, but not both.
     * 
     */
    @Import(name="uri")
    private @Nullable Output<String> uri;

    public Optional<Output<String>> uri() {
        return Optional.ofNullable(this.uri);
    }

    private TemplateLinkArgs() {}

    private TemplateLinkArgs(TemplateLinkArgs $) {
        this.contentVersion = $.contentVersion;
        this.id = $.id;
        this.queryString = $.queryString;
        this.relativePath = $.relativePath;
        this.uri = $.uri;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TemplateLinkArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TemplateLinkArgs $;

        public Builder() {
            $ = new TemplateLinkArgs();
        }

        public Builder(TemplateLinkArgs defaults) {
            $ = new TemplateLinkArgs(Objects.requireNonNull(defaults));
        }

        public Builder contentVersion(@Nullable Output<String> contentVersion) {
            $.contentVersion = contentVersion;
            return this;
        }

        public Builder contentVersion(String contentVersion) {
            return contentVersion(Output.of(contentVersion));
        }

        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        public Builder id(String id) {
            return id(Output.of(id));
        }

        public Builder queryString(@Nullable Output<String> queryString) {
            $.queryString = queryString;
            return this;
        }

        public Builder queryString(String queryString) {
            return queryString(Output.of(queryString));
        }

        public Builder relativePath(@Nullable Output<String> relativePath) {
            $.relativePath = relativePath;
            return this;
        }

        public Builder relativePath(String relativePath) {
            return relativePath(Output.of(relativePath));
        }

        public Builder uri(@Nullable Output<String> uri) {
            $.uri = uri;
            return this;
        }

        public Builder uri(String uri) {
            return uri(Output.of(uri));
        }

        public TemplateLinkArgs build() {
            return $;
        }
    }

}
