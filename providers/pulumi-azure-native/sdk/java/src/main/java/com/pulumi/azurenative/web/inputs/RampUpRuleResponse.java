// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.web.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Routing rules for ramp up testing. This rule allows to redirect static traffic % to a slot or to gradually change routing % based on performance.
 * 
 */
public final class RampUpRuleResponse extends com.pulumi.resources.InvokeArgs {

    public static final RampUpRuleResponse Empty = new RampUpRuleResponse();

    /**
     * Hostname of a slot to which the traffic will be redirected if decided to. E.g. myapp-stage.azurewebsites.net.
     * 
     */
    @Import(name="actionHostName")
    private @Nullable String actionHostName;

    public Optional<String> actionHostName() {
        return Optional.ofNullable(this.actionHostName);
    }

    /**
     * Custom decision algorithm can be provided in TiPCallback site extension which URL can be specified. See TiPCallback site extension for the scaffold and contracts.
     * https://www.siteextensions.net/packages/TiPCallback/
     * 
     */
    @Import(name="changeDecisionCallbackUrl")
    private @Nullable String changeDecisionCallbackUrl;

    public Optional<String> changeDecisionCallbackUrl() {
        return Optional.ofNullable(this.changeDecisionCallbackUrl);
    }

    /**
     * Specifies interval in minutes to reevaluate ReroutePercentage.
     * 
     */
    @Import(name="changeIntervalInMinutes")
    private @Nullable Integer changeIntervalInMinutes;

    public Optional<Integer> changeIntervalInMinutes() {
        return Optional.ofNullable(this.changeIntervalInMinutes);
    }

    /**
     * In auto ramp up scenario this is the step to add/remove from &lt;code&gt;ReroutePercentage&lt;/code&gt; until it reaches \n&lt;code&gt;MinReroutePercentage&lt;/code&gt; or
     * &lt;code&gt;MaxReroutePercentage&lt;/code&gt;. Site metrics are checked every N minutes specified in &lt;code&gt;ChangeIntervalInMinutes&lt;/code&gt;.\nCustom decision algorithm
     * can be provided in TiPCallback site extension which URL can be specified in &lt;code&gt;ChangeDecisionCallbackUrl&lt;/code&gt;.
     * 
     */
    @Import(name="changeStep")
    private @Nullable Double changeStep;

    public Optional<Double> changeStep() {
        return Optional.ofNullable(this.changeStep);
    }

    /**
     * Specifies upper boundary below which ReroutePercentage will stay.
     * 
     */
    @Import(name="maxReroutePercentage")
    private @Nullable Double maxReroutePercentage;

    public Optional<Double> maxReroutePercentage() {
        return Optional.ofNullable(this.maxReroutePercentage);
    }

    /**
     * Specifies lower boundary above which ReroutePercentage will stay.
     * 
     */
    @Import(name="minReroutePercentage")
    private @Nullable Double minReroutePercentage;

    public Optional<Double> minReroutePercentage() {
        return Optional.ofNullable(this.minReroutePercentage);
    }

    /**
     * Name of the routing rule. The recommended name would be to point to the slot which will receive the traffic in the experiment.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Percentage of the traffic which will be redirected to &lt;code&gt;ActionHostName&lt;/code&gt;.
     * 
     */
    @Import(name="reroutePercentage")
    private @Nullable Double reroutePercentage;

    public Optional<Double> reroutePercentage() {
        return Optional.ofNullable(this.reroutePercentage);
    }

    private RampUpRuleResponse() {}

    private RampUpRuleResponse(RampUpRuleResponse $) {
        this.actionHostName = $.actionHostName;
        this.changeDecisionCallbackUrl = $.changeDecisionCallbackUrl;
        this.changeIntervalInMinutes = $.changeIntervalInMinutes;
        this.changeStep = $.changeStep;
        this.maxReroutePercentage = $.maxReroutePercentage;
        this.minReroutePercentage = $.minReroutePercentage;
        this.name = $.name;
        this.reroutePercentage = $.reroutePercentage;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RampUpRuleResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RampUpRuleResponse $;

        public Builder() {
            $ = new RampUpRuleResponse();
        }

        public Builder(RampUpRuleResponse defaults) {
            $ = new RampUpRuleResponse(Objects.requireNonNull(defaults));
        }

        public Builder actionHostName(@Nullable String actionHostName) {
            $.actionHostName = actionHostName;
            return this;
        }

        public Builder changeDecisionCallbackUrl(@Nullable String changeDecisionCallbackUrl) {
            $.changeDecisionCallbackUrl = changeDecisionCallbackUrl;
            return this;
        }

        public Builder changeIntervalInMinutes(@Nullable Integer changeIntervalInMinutes) {
            $.changeIntervalInMinutes = changeIntervalInMinutes;
            return this;
        }

        public Builder changeStep(@Nullable Double changeStep) {
            $.changeStep = changeStep;
            return this;
        }

        public Builder maxReroutePercentage(@Nullable Double maxReroutePercentage) {
            $.maxReroutePercentage = maxReroutePercentage;
            return this;
        }

        public Builder minReroutePercentage(@Nullable Double minReroutePercentage) {
            $.minReroutePercentage = minReroutePercentage;
            return this;
        }

        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        public Builder reroutePercentage(@Nullable Double reroutePercentage) {
            $.reroutePercentage = reroutePercentage;
            return this;
        }

        public RampUpRuleResponse build() {
            return $;
        }
    }

}
