// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.virtualmachineimages.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Runs the specified PowerShell on the VM (Windows). Corresponds to Packer powershell provisioner. Exactly one of &#39;scriptUri&#39; or &#39;inline&#39; can be specified.
 * 
 */
public final class ImageTemplatePowerShellCustomizerResponse extends com.pulumi.resources.InvokeArgs {

    public static final ImageTemplatePowerShellCustomizerResponse Empty = new ImageTemplatePowerShellCustomizerResponse();

    /**
     * Array of PowerShell commands to execute
     * 
     */
    @Import(name="inline")
    private @Nullable List<String> inline;

    public Optional<List<String>> inline() {
        return Optional.ofNullable(this.inline);
    }

    /**
     * Friendly Name to provide context on what this customization step does
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * If specified, the PowerShell script will be run with elevated privileges using the Local System user. Can only be true when the runElevated field above is set to true.
     * 
     */
    @Import(name="runAsSystem")
    private @Nullable Boolean runAsSystem;

    public Optional<Boolean> runAsSystem() {
        return Optional.ofNullable(this.runAsSystem);
    }

    /**
     * If specified, the PowerShell script will be run with elevated privileges
     * 
     */
    @Import(name="runElevated")
    private @Nullable Boolean runElevated;

    public Optional<Boolean> runElevated() {
        return Optional.ofNullable(this.runElevated);
    }

    /**
     * URI of the PowerShell script to be run for customizing. It can be a github link, SAS URI for Azure Storage, etc
     * 
     */
    @Import(name="scriptUri")
    private @Nullable String scriptUri;

    public Optional<String> scriptUri() {
        return Optional.ofNullable(this.scriptUri);
    }

    /**
     * SHA256 checksum of the power shell script provided in the scriptUri field above
     * 
     */
    @Import(name="sha256Checksum")
    private @Nullable String sha256Checksum;

    public Optional<String> sha256Checksum() {
        return Optional.ofNullable(this.sha256Checksum);
    }

    /**
     * The type of customization tool you want to use on the Image. For example, &#34;Shell&#34; can be shell customizer
     * Expected value is &#39;PowerShell&#39;.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    public String type() {
        return this.type;
    }

    /**
     * Valid exit codes for the PowerShell script. [Default: 0]
     * 
     */
    @Import(name="validExitCodes")
    private @Nullable List<Integer> validExitCodes;

    public Optional<List<Integer>> validExitCodes() {
        return Optional.ofNullable(this.validExitCodes);
    }

    private ImageTemplatePowerShellCustomizerResponse() {}

    private ImageTemplatePowerShellCustomizerResponse(ImageTemplatePowerShellCustomizerResponse $) {
        this.inline = $.inline;
        this.name = $.name;
        this.runAsSystem = $.runAsSystem;
        this.runElevated = $.runElevated;
        this.scriptUri = $.scriptUri;
        this.sha256Checksum = $.sha256Checksum;
        this.type = $.type;
        this.validExitCodes = $.validExitCodes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ImageTemplatePowerShellCustomizerResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ImageTemplatePowerShellCustomizerResponse $;

        public Builder() {
            $ = new ImageTemplatePowerShellCustomizerResponse();
        }

        public Builder(ImageTemplatePowerShellCustomizerResponse defaults) {
            $ = new ImageTemplatePowerShellCustomizerResponse(Objects.requireNonNull(defaults));
        }

        public Builder inline(@Nullable List<String> inline) {
            $.inline = inline;
            return this;
        }

        public Builder inline(String... inline) {
            return inline(List.of(inline));
        }

        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        public Builder runAsSystem(@Nullable Boolean runAsSystem) {
            $.runAsSystem = runAsSystem;
            return this;
        }

        public Builder runElevated(@Nullable Boolean runElevated) {
            $.runElevated = runElevated;
            return this;
        }

        public Builder scriptUri(@Nullable String scriptUri) {
            $.scriptUri = scriptUri;
            return this;
        }

        public Builder sha256Checksum(@Nullable String sha256Checksum) {
            $.sha256Checksum = sha256Checksum;
            return this;
        }

        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public Builder validExitCodes(@Nullable List<Integer> validExitCodes) {
            $.validExitCodes = validExitCodes;
            return this;
        }

        public Builder validExitCodes(Integer... validExitCodes) {
            return validExitCodes(List.of(validExitCodes));
        }

        public ImageTemplatePowerShellCustomizerResponse build() {
            $.runAsSystem = Codegen.booleanProp("runAsSystem").arg($.runAsSystem).def(false).getNullable();
            $.runElevated = Codegen.booleanProp("runElevated").arg($.runElevated).def(false).getNullable();
            $.sha256Checksum = Codegen.stringProp("sha256Checksum").arg($.sha256Checksum).def("").getNullable();
            $.type = Codegen.stringProp("type").arg($.type).require();
            return $;
        }
    }

}
