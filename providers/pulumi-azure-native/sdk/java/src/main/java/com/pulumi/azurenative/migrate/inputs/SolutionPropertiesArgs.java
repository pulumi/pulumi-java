// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.migrate.inputs;

import com.pulumi.azurenative.migrate.inputs.SolutionDetailsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Class for solution properties.
 * 
 */
public final class SolutionPropertiesArgs extends com.pulumi.resources.ResourceArgs {

    public static final SolutionPropertiesArgs Empty = new SolutionPropertiesArgs();

    /**
     * Gets or sets the cleanup state of the solution.
     * 
     */
    @Import(name="cleanupState")
    private @Nullable Output<String> cleanupState;

    public Optional<Output<String>> cleanupState() {
        return Optional.ofNullable(this.cleanupState);
    }

    /**
     * Gets or sets the details of the solution.
     * 
     */
    @Import(name="details")
    private @Nullable Output<SolutionDetailsArgs> details;

    public Optional<Output<SolutionDetailsArgs>> details() {
        return Optional.ofNullable(this.details);
    }

    /**
     * Gets or sets the goal of the solution.
     * 
     */
    @Import(name="goal")
    private @Nullable Output<String> goal;

    public Optional<Output<String>> goal() {
        return Optional.ofNullable(this.goal);
    }

    /**
     * Gets or sets the purpose of the solution.
     * 
     */
    @Import(name="purpose")
    private @Nullable Output<String> purpose;

    public Optional<Output<String>> purpose() {
        return Optional.ofNullable(this.purpose);
    }

    /**
     * Gets or sets the current status of the solution.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Gets or sets the tool being used in the solution.
     * 
     */
    @Import(name="tool")
    private @Nullable Output<String> tool;

    public Optional<Output<String>> tool() {
        return Optional.ofNullable(this.tool);
    }

    private SolutionPropertiesArgs() {}

    private SolutionPropertiesArgs(SolutionPropertiesArgs $) {
        this.cleanupState = $.cleanupState;
        this.details = $.details;
        this.goal = $.goal;
        this.purpose = $.purpose;
        this.status = $.status;
        this.tool = $.tool;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SolutionPropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SolutionPropertiesArgs $;

        public Builder() {
            $ = new SolutionPropertiesArgs();
        }

        public Builder(SolutionPropertiesArgs defaults) {
            $ = new SolutionPropertiesArgs(Objects.requireNonNull(defaults));
        }

        public Builder cleanupState(@Nullable Output<String> cleanupState) {
            $.cleanupState = cleanupState;
            return this;
        }

        public Builder cleanupState(String cleanupState) {
            return cleanupState(Output.of(cleanupState));
        }

        public Builder details(@Nullable Output<SolutionDetailsArgs> details) {
            $.details = details;
            return this;
        }

        public Builder details(SolutionDetailsArgs details) {
            return details(Output.of(details));
        }

        public Builder goal(@Nullable Output<String> goal) {
            $.goal = goal;
            return this;
        }

        public Builder goal(String goal) {
            return goal(Output.of(goal));
        }

        public Builder purpose(@Nullable Output<String> purpose) {
            $.purpose = purpose;
            return this;
        }

        public Builder purpose(String purpose) {
            return purpose(Output.of(purpose));
        }

        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        public Builder status(String status) {
            return status(Output.of(status));
        }

        public Builder tool(@Nullable Output<String> tool) {
            $.tool = tool;
            return this;
        }

        public Builder tool(String tool) {
            return tool(Output.of(tool));
        }

        public SolutionPropertiesArgs build() {
            return $;
        }
    }

}
