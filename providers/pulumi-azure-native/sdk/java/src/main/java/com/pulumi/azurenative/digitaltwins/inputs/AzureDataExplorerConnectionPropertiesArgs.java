// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.digitaltwins.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Properties of a time series database connection to Azure Data Explorer with data being sent via an EventHub.
 * 
 */
public final class AzureDataExplorerConnectionPropertiesArgs extends com.pulumi.resources.ResourceArgs {

    public static final AzureDataExplorerConnectionPropertiesArgs Empty = new AzureDataExplorerConnectionPropertiesArgs();

    /**
     * The name of the Azure Data Explorer database.
     * 
     */
    @Import(name="adxDatabaseName", required=true)
    private Output<String> adxDatabaseName;

    public Output<String> adxDatabaseName() {
        return this.adxDatabaseName;
    }

    /**
     * The URI of the Azure Data Explorer endpoint.
     * 
     */
    @Import(name="adxEndpointUri", required=true)
    private Output<String> adxEndpointUri;

    public Output<String> adxEndpointUri() {
        return this.adxEndpointUri;
    }

    /**
     * The resource ID of the Azure Data Explorer cluster.
     * 
     */
    @Import(name="adxResourceId", required=true)
    private Output<String> adxResourceId;

    public Output<String> adxResourceId() {
        return this.adxResourceId;
    }

    /**
     * The name of the Azure Data Explorer table.
     * 
     */
    @Import(name="adxTableName")
    private @Nullable Output<String> adxTableName;

    public Optional<Output<String>> adxTableName() {
        return Optional.ofNullable(this.adxTableName);
    }

    /**
     * The type of time series connection resource.
     * Expected value is &#39;AzureDataExplorer&#39;.
     * 
     */
    @Import(name="connectionType", required=true)
    private Output<String> connectionType;

    public Output<String> connectionType() {
        return this.connectionType;
    }

    /**
     * The EventHub consumer group to use when ADX reads from EventHub. Defaults to $Default.
     * 
     */
    @Import(name="eventHubConsumerGroup")
    private @Nullable Output<String> eventHubConsumerGroup;

    public Optional<Output<String>> eventHubConsumerGroup() {
        return Optional.ofNullable(this.eventHubConsumerGroup);
    }

    /**
     * The URL of the EventHub namespace for identity-based authentication. It must include the protocol sb://
     * 
     */
    @Import(name="eventHubEndpointUri", required=true)
    private Output<String> eventHubEndpointUri;

    public Output<String> eventHubEndpointUri() {
        return this.eventHubEndpointUri;
    }

    /**
     * The EventHub name in the EventHub namespace for identity-based authentication.
     * 
     */
    @Import(name="eventHubEntityPath", required=true)
    private Output<String> eventHubEntityPath;

    public Output<String> eventHubEntityPath() {
        return this.eventHubEntityPath;
    }

    /**
     * The resource ID of the EventHub namespace.
     * 
     */
    @Import(name="eventHubNamespaceResourceId", required=true)
    private Output<String> eventHubNamespaceResourceId;

    public Output<String> eventHubNamespaceResourceId() {
        return this.eventHubNamespaceResourceId;
    }

    private AzureDataExplorerConnectionPropertiesArgs() {}

    private AzureDataExplorerConnectionPropertiesArgs(AzureDataExplorerConnectionPropertiesArgs $) {
        this.adxDatabaseName = $.adxDatabaseName;
        this.adxEndpointUri = $.adxEndpointUri;
        this.adxResourceId = $.adxResourceId;
        this.adxTableName = $.adxTableName;
        this.connectionType = $.connectionType;
        this.eventHubConsumerGroup = $.eventHubConsumerGroup;
        this.eventHubEndpointUri = $.eventHubEndpointUri;
        this.eventHubEntityPath = $.eventHubEntityPath;
        this.eventHubNamespaceResourceId = $.eventHubNamespaceResourceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AzureDataExplorerConnectionPropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AzureDataExplorerConnectionPropertiesArgs $;

        public Builder() {
            $ = new AzureDataExplorerConnectionPropertiesArgs();
        }

        public Builder(AzureDataExplorerConnectionPropertiesArgs defaults) {
            $ = new AzureDataExplorerConnectionPropertiesArgs(Objects.requireNonNull(defaults));
        }

        public Builder adxDatabaseName(Output<String> adxDatabaseName) {
            $.adxDatabaseName = adxDatabaseName;
            return this;
        }

        public Builder adxDatabaseName(String adxDatabaseName) {
            return adxDatabaseName(Output.of(adxDatabaseName));
        }

        public Builder adxEndpointUri(Output<String> adxEndpointUri) {
            $.adxEndpointUri = adxEndpointUri;
            return this;
        }

        public Builder adxEndpointUri(String adxEndpointUri) {
            return adxEndpointUri(Output.of(adxEndpointUri));
        }

        public Builder adxResourceId(Output<String> adxResourceId) {
            $.adxResourceId = adxResourceId;
            return this;
        }

        public Builder adxResourceId(String adxResourceId) {
            return adxResourceId(Output.of(adxResourceId));
        }

        public Builder adxTableName(@Nullable Output<String> adxTableName) {
            $.adxTableName = adxTableName;
            return this;
        }

        public Builder adxTableName(String adxTableName) {
            return adxTableName(Output.of(adxTableName));
        }

        public Builder connectionType(Output<String> connectionType) {
            $.connectionType = connectionType;
            return this;
        }

        public Builder connectionType(String connectionType) {
            return connectionType(Output.of(connectionType));
        }

        public Builder eventHubConsumerGroup(@Nullable Output<String> eventHubConsumerGroup) {
            $.eventHubConsumerGroup = eventHubConsumerGroup;
            return this;
        }

        public Builder eventHubConsumerGroup(String eventHubConsumerGroup) {
            return eventHubConsumerGroup(Output.of(eventHubConsumerGroup));
        }

        public Builder eventHubEndpointUri(Output<String> eventHubEndpointUri) {
            $.eventHubEndpointUri = eventHubEndpointUri;
            return this;
        }

        public Builder eventHubEndpointUri(String eventHubEndpointUri) {
            return eventHubEndpointUri(Output.of(eventHubEndpointUri));
        }

        public Builder eventHubEntityPath(Output<String> eventHubEntityPath) {
            $.eventHubEntityPath = eventHubEntityPath;
            return this;
        }

        public Builder eventHubEntityPath(String eventHubEntityPath) {
            return eventHubEntityPath(Output.of(eventHubEntityPath));
        }

        public Builder eventHubNamespaceResourceId(Output<String> eventHubNamespaceResourceId) {
            $.eventHubNamespaceResourceId = eventHubNamespaceResourceId;
            return this;
        }

        public Builder eventHubNamespaceResourceId(String eventHubNamespaceResourceId) {
            return eventHubNamespaceResourceId(Output.of(eventHubNamespaceResourceId));
        }

        public AzureDataExplorerConnectionPropertiesArgs build() {
            $.adxDatabaseName = Objects.requireNonNull($.adxDatabaseName, "expected parameter 'adxDatabaseName' to be non-null");
            $.adxEndpointUri = Objects.requireNonNull($.adxEndpointUri, "expected parameter 'adxEndpointUri' to be non-null");
            $.adxResourceId = Objects.requireNonNull($.adxResourceId, "expected parameter 'adxResourceId' to be non-null");
            $.connectionType = Codegen.stringProp("connectionType").output().arg($.connectionType).require();
            $.eventHubEndpointUri = Objects.requireNonNull($.eventHubEndpointUri, "expected parameter 'eventHubEndpointUri' to be non-null");
            $.eventHubEntityPath = Objects.requireNonNull($.eventHubEntityPath, "expected parameter 'eventHubEntityPath' to be non-null");
            $.eventHubNamespaceResourceId = Objects.requireNonNull($.eventHubNamespaceResourceId, "expected parameter 'eventHubNamespaceResourceId' to be non-null");
            return $;
        }
    }

}
