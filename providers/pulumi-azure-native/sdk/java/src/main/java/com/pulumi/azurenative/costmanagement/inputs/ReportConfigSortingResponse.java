// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.costmanagement.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The order by expression to be used in the report.
 * 
 */
public final class ReportConfigSortingResponse extends com.pulumi.resources.InvokeArgs {

    public static final ReportConfigSortingResponse Empty = new ReportConfigSortingResponse();

    /**
     * Direction of sort.
     * 
     */
    @Import(name="direction")
    private @Nullable String direction;

    public Optional<String> direction() {
        return Optional.ofNullable(this.direction);
    }

    /**
     * The name of the column to sort.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    public String name() {
        return this.name;
    }

    private ReportConfigSortingResponse() {}

    private ReportConfigSortingResponse(ReportConfigSortingResponse $) {
        this.direction = $.direction;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ReportConfigSortingResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ReportConfigSortingResponse $;

        public Builder() {
            $ = new ReportConfigSortingResponse();
        }

        public Builder(ReportConfigSortingResponse defaults) {
            $ = new ReportConfigSortingResponse(Objects.requireNonNull(defaults));
        }

        public Builder direction(@Nullable String direction) {
            $.direction = direction;
            return this;
        }

        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public ReportConfigSortingResponse build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            return $;
        }
    }

}
