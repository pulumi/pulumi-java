// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.containerservice.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Configurations for provisioning the cluster with HTTP proxy servers.
 * 
 */
public final class ManagedClusterHTTPProxyConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ManagedClusterHTTPProxyConfigArgs Empty = new ManagedClusterHTTPProxyConfigArgs();

    /**
     * HTTP proxy server endpoint to use.
     * 
     */
    @Import(name="httpProxy")
    private @Nullable Output<String> httpProxy;

    /**
     * @return HTTP proxy server endpoint to use.
     * 
     */
    public Optional<Output<String>> httpProxy() {
        return Optional.ofNullable(this.httpProxy);
    }

    /**
     * HTTPS proxy server endpoint to use.
     * 
     */
    @Import(name="httpsProxy")
    private @Nullable Output<String> httpsProxy;

    /**
     * @return HTTPS proxy server endpoint to use.
     * 
     */
    public Optional<Output<String>> httpsProxy() {
        return Optional.ofNullable(this.httpsProxy);
    }

    /**
     * Endpoints that should not go through proxy.
     * 
     */
    @Import(name="noProxy")
    private @Nullable Output<List<String>> noProxy;

    /**
     * @return Endpoints that should not go through proxy.
     * 
     */
    public Optional<Output<List<String>>> noProxy() {
        return Optional.ofNullable(this.noProxy);
    }

    /**
     * Alternative CA cert to use for connecting to proxy servers.
     * 
     */
    @Import(name="trustedCa")
    private @Nullable Output<String> trustedCa;

    /**
     * @return Alternative CA cert to use for connecting to proxy servers.
     * 
     */
    public Optional<Output<String>> trustedCa() {
        return Optional.ofNullable(this.trustedCa);
    }

    private ManagedClusterHTTPProxyConfigArgs() {}

    private ManagedClusterHTTPProxyConfigArgs(ManagedClusterHTTPProxyConfigArgs $) {
        this.httpProxy = $.httpProxy;
        this.httpsProxy = $.httpsProxy;
        this.noProxy = $.noProxy;
        this.trustedCa = $.trustedCa;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagedClusterHTTPProxyConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagedClusterHTTPProxyConfigArgs $;

        public Builder() {
            $ = new ManagedClusterHTTPProxyConfigArgs();
        }

        public Builder(ManagedClusterHTTPProxyConfigArgs defaults) {
            $ = new ManagedClusterHTTPProxyConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param httpProxy HTTP proxy server endpoint to use.
         * 
         * @return builder
         * 
         */
        public Builder httpProxy(@Nullable Output<String> httpProxy) {
            $.httpProxy = httpProxy;
            return this;
        }

        /**
         * @param httpProxy HTTP proxy server endpoint to use.
         * 
         * @return builder
         * 
         */
        public Builder httpProxy(String httpProxy) {
            return httpProxy(Output.of(httpProxy));
        }

        /**
         * @param httpsProxy HTTPS proxy server endpoint to use.
         * 
         * @return builder
         * 
         */
        public Builder httpsProxy(@Nullable Output<String> httpsProxy) {
            $.httpsProxy = httpsProxy;
            return this;
        }

        /**
         * @param httpsProxy HTTPS proxy server endpoint to use.
         * 
         * @return builder
         * 
         */
        public Builder httpsProxy(String httpsProxy) {
            return httpsProxy(Output.of(httpsProxy));
        }

        /**
         * @param noProxy Endpoints that should not go through proxy.
         * 
         * @return builder
         * 
         */
        public Builder noProxy(@Nullable Output<List<String>> noProxy) {
            $.noProxy = noProxy;
            return this;
        }

        /**
         * @param noProxy Endpoints that should not go through proxy.
         * 
         * @return builder
         * 
         */
        public Builder noProxy(List<String> noProxy) {
            return noProxy(Output.of(noProxy));
        }

        /**
         * @param noProxy Endpoints that should not go through proxy.
         * 
         * @return builder
         * 
         */
        public Builder noProxy(String... noProxy) {
            return noProxy(List.of(noProxy));
        }

        /**
         * @param trustedCa Alternative CA cert to use for connecting to proxy servers.
         * 
         * @return builder
         * 
         */
        public Builder trustedCa(@Nullable Output<String> trustedCa) {
            $.trustedCa = trustedCa;
            return this;
        }

        /**
         * @param trustedCa Alternative CA cert to use for connecting to proxy servers.
         * 
         * @return builder
         * 
         */
        public Builder trustedCa(String trustedCa) {
            return trustedCa(Output.of(trustedCa));
        }

        public ManagedClusterHTTPProxyConfigArgs build() {
            return $;
        }
    }

}
