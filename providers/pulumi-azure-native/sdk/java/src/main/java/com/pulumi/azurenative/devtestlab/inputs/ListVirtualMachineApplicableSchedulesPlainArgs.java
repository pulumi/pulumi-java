// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.devtestlab.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class ListVirtualMachineApplicableSchedulesPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final ListVirtualMachineApplicableSchedulesPlainArgs Empty = new ListVirtualMachineApplicableSchedulesPlainArgs();

    /**
     * The name of the lab.
     * 
     */
    @Import(name="labName", required=true)
    private String labName;

    /**
     * @return The name of the lab.
     * 
     */
    public String labName() {
        return this.labName;
    }

    /**
     * The name of the virtual machine.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return The name of the virtual machine.
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private String resourceGroupName;

    /**
     * @return The name of the resource group.
     * 
     */
    public String resourceGroupName() {
        return this.resourceGroupName;
    }

    private ListVirtualMachineApplicableSchedulesPlainArgs() {}

    private ListVirtualMachineApplicableSchedulesPlainArgs(ListVirtualMachineApplicableSchedulesPlainArgs $) {
        this.labName = $.labName;
        this.name = $.name;
        this.resourceGroupName = $.resourceGroupName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ListVirtualMachineApplicableSchedulesPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ListVirtualMachineApplicableSchedulesPlainArgs $;

        public Builder() {
            $ = new ListVirtualMachineApplicableSchedulesPlainArgs();
        }

        public Builder(ListVirtualMachineApplicableSchedulesPlainArgs defaults) {
            $ = new ListVirtualMachineApplicableSchedulesPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param labName The name of the lab.
         * 
         * @return builder
         * 
         */
        public Builder labName(String labName) {
            $.labName = labName;
            return this;
        }

        /**
         * @param name The name of the virtual machine.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public ListVirtualMachineApplicableSchedulesPlainArgs build() {
            $.labName = Objects.requireNonNull($.labName, "expected parameter 'labName' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
