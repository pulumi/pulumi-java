// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.migrate.inputs;

import com.pulumi.azurenative.migrate.inputs.AvailabilitySetResourceSettingsResponse;
import com.pulumi.azurenative.migrate.inputs.DiskEncryptionSetResourceSettingsResponse;
import com.pulumi.azurenative.migrate.inputs.KeyVaultResourceSettingsResponse;
import com.pulumi.azurenative.migrate.inputs.LoadBalancerResourceSettingsResponse;
import com.pulumi.azurenative.migrate.inputs.MoveResourceDependencyOverrideResponse;
import com.pulumi.azurenative.migrate.inputs.MoveResourceDependencyResponse;
import com.pulumi.azurenative.migrate.inputs.MoveResourcePropertiesResponseErrors;
import com.pulumi.azurenative.migrate.inputs.MoveResourcePropertiesResponseMoveStatus;
import com.pulumi.azurenative.migrate.inputs.NetworkInterfaceResourceSettingsResponse;
import com.pulumi.azurenative.migrate.inputs.NetworkSecurityGroupResourceSettingsResponse;
import com.pulumi.azurenative.migrate.inputs.PublicIPAddressResourceSettingsResponse;
import com.pulumi.azurenative.migrate.inputs.ResourceGroupResourceSettingsResponse;
import com.pulumi.azurenative.migrate.inputs.SqlDatabaseResourceSettingsResponse;
import com.pulumi.azurenative.migrate.inputs.SqlElasticPoolResourceSettingsResponse;
import com.pulumi.azurenative.migrate.inputs.SqlServerResourceSettingsResponse;
import com.pulumi.azurenative.migrate.inputs.VirtualMachineResourceSettingsResponse;
import com.pulumi.azurenative.migrate.inputs.VirtualNetworkResourceSettingsResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Defines the move resource properties.
 * 
 */
public final class MoveResourcePropertiesResponse extends com.pulumi.resources.InvokeArgs {

    public static final MoveResourcePropertiesResponse Empty = new MoveResourcePropertiesResponse();

    /**
     * Gets or sets the move resource dependencies.
     * 
     */
    @Import(name="dependsOn", required=true)
    private List<MoveResourceDependencyResponse> dependsOn;

    /**
     * @return Gets or sets the move resource dependencies.
     * 
     */
    public List<MoveResourceDependencyResponse> dependsOn() {
        return this.dependsOn;
    }

    /**
     * Gets or sets the move resource dependencies overrides.
     * 
     */
    @Import(name="dependsOnOverrides")
    private @Nullable List<MoveResourceDependencyOverrideResponse> dependsOnOverrides;

    /**
     * @return Gets or sets the move resource dependencies overrides.
     * 
     */
    public Optional<List<MoveResourceDependencyOverrideResponse>> dependsOnOverrides() {
        return Optional.ofNullable(this.dependsOnOverrides);
    }

    /**
     * Defines the move resource errors.
     * 
     */
    @Import(name="errors", required=true)
    private MoveResourcePropertiesResponseErrors errors;

    /**
     * @return Defines the move resource errors.
     * 
     */
    public MoveResourcePropertiesResponseErrors errors() {
        return this.errors;
    }

    /**
     * Gets or sets the existing target ARM Id of the resource.
     * 
     */
    @Import(name="existingTargetId")
    private @Nullable String existingTargetId;

    /**
     * @return Gets or sets the existing target ARM Id of the resource.
     * 
     */
    public Optional<String> existingTargetId() {
        return Optional.ofNullable(this.existingTargetId);
    }

    /**
     * Gets a value indicating whether the resolve action is required over the move collection.
     * 
     */
    @Import(name="isResolveRequired", required=true)
    private Boolean isResolveRequired;

    /**
     * @return Gets a value indicating whether the resolve action is required over the move collection.
     * 
     */
    public Boolean isResolveRequired() {
        return this.isResolveRequired;
    }

    /**
     * Defines the move resource status.
     * 
     */
    @Import(name="moveStatus", required=true)
    private MoveResourcePropertiesResponseMoveStatus moveStatus;

    /**
     * @return Defines the move resource status.
     * 
     */
    public MoveResourcePropertiesResponseMoveStatus moveStatus() {
        return this.moveStatus;
    }

    /**
     * Defines the provisioning states.
     * 
     */
    @Import(name="provisioningState", required=true)
    private String provisioningState;

    /**
     * @return Defines the provisioning states.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Gets or sets the resource settings.
     * 
     */
    @Import(name="resourceSettings")
    private @Nullable Object resourceSettings;

    /**
     * @return Gets or sets the resource settings.
     * 
     */
    public Optional<Object> resourceSettings() {
        return Optional.ofNullable(this.resourceSettings);
    }

    /**
     * Gets or sets the Source ARM Id of the resource.
     * 
     */
    @Import(name="sourceId", required=true)
    private String sourceId;

    /**
     * @return Gets or sets the Source ARM Id of the resource.
     * 
     */
    public String sourceId() {
        return this.sourceId;
    }

    /**
     * Gets or sets the source resource settings.
     * 
     */
    @Import(name="sourceResourceSettings", required=true)
    private Object sourceResourceSettings;

    /**
     * @return Gets or sets the source resource settings.
     * 
     */
    public Object sourceResourceSettings() {
        return this.sourceResourceSettings;
    }

    /**
     * Gets or sets the Target ARM Id of the resource.
     * 
     */
    @Import(name="targetId", required=true)
    private String targetId;

    /**
     * @return Gets or sets the Target ARM Id of the resource.
     * 
     */
    public String targetId() {
        return this.targetId;
    }

    private MoveResourcePropertiesResponse() {}

    private MoveResourcePropertiesResponse(MoveResourcePropertiesResponse $) {
        this.dependsOn = $.dependsOn;
        this.dependsOnOverrides = $.dependsOnOverrides;
        this.errors = $.errors;
        this.existingTargetId = $.existingTargetId;
        this.isResolveRequired = $.isResolveRequired;
        this.moveStatus = $.moveStatus;
        this.provisioningState = $.provisioningState;
        this.resourceSettings = $.resourceSettings;
        this.sourceId = $.sourceId;
        this.sourceResourceSettings = $.sourceResourceSettings;
        this.targetId = $.targetId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MoveResourcePropertiesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MoveResourcePropertiesResponse $;

        public Builder() {
            $ = new MoveResourcePropertiesResponse();
        }

        public Builder(MoveResourcePropertiesResponse defaults) {
            $ = new MoveResourcePropertiesResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param dependsOn Gets or sets the move resource dependencies.
         * 
         * @return builder
         * 
         */
        public Builder dependsOn(List<MoveResourceDependencyResponse> dependsOn) {
            $.dependsOn = dependsOn;
            return this;
        }

        /**
         * @param dependsOn Gets or sets the move resource dependencies.
         * 
         * @return builder
         * 
         */
        public Builder dependsOn(MoveResourceDependencyResponse... dependsOn) {
            return dependsOn(List.of(dependsOn));
        }

        /**
         * @param dependsOnOverrides Gets or sets the move resource dependencies overrides.
         * 
         * @return builder
         * 
         */
        public Builder dependsOnOverrides(@Nullable List<MoveResourceDependencyOverrideResponse> dependsOnOverrides) {
            $.dependsOnOverrides = dependsOnOverrides;
            return this;
        }

        /**
         * @param dependsOnOverrides Gets or sets the move resource dependencies overrides.
         * 
         * @return builder
         * 
         */
        public Builder dependsOnOverrides(MoveResourceDependencyOverrideResponse... dependsOnOverrides) {
            return dependsOnOverrides(List.of(dependsOnOverrides));
        }

        /**
         * @param errors Defines the move resource errors.
         * 
         * @return builder
         * 
         */
        public Builder errors(MoveResourcePropertiesResponseErrors errors) {
            $.errors = errors;
            return this;
        }

        /**
         * @param existingTargetId Gets or sets the existing target ARM Id of the resource.
         * 
         * @return builder
         * 
         */
        public Builder existingTargetId(@Nullable String existingTargetId) {
            $.existingTargetId = existingTargetId;
            return this;
        }

        /**
         * @param isResolveRequired Gets a value indicating whether the resolve action is required over the move collection.
         * 
         * @return builder
         * 
         */
        public Builder isResolveRequired(Boolean isResolveRequired) {
            $.isResolveRequired = isResolveRequired;
            return this;
        }

        /**
         * @param moveStatus Defines the move resource status.
         * 
         * @return builder
         * 
         */
        public Builder moveStatus(MoveResourcePropertiesResponseMoveStatus moveStatus) {
            $.moveStatus = moveStatus;
            return this;
        }

        /**
         * @param provisioningState Defines the provisioning states.
         * 
         * @return builder
         * 
         */
        public Builder provisioningState(String provisioningState) {
            $.provisioningState = provisioningState;
            return this;
        }

        /**
         * @param resourceSettings Gets or sets the resource settings.
         * 
         * @return builder
         * 
         */
        public Builder resourceSettings(@Nullable Object resourceSettings) {
            $.resourceSettings = resourceSettings;
            return this;
        }

        /**
         * @param sourceId Gets or sets the Source ARM Id of the resource.
         * 
         * @return builder
         * 
         */
        public Builder sourceId(String sourceId) {
            $.sourceId = sourceId;
            return this;
        }

        /**
         * @param sourceResourceSettings Gets or sets the source resource settings.
         * 
         * @return builder
         * 
         */
        public Builder sourceResourceSettings(Object sourceResourceSettings) {
            $.sourceResourceSettings = sourceResourceSettings;
            return this;
        }

        /**
         * @param targetId Gets or sets the Target ARM Id of the resource.
         * 
         * @return builder
         * 
         */
        public Builder targetId(String targetId) {
            $.targetId = targetId;
            return this;
        }

        public MoveResourcePropertiesResponse build() {
            $.dependsOn = Objects.requireNonNull($.dependsOn, "expected parameter 'dependsOn' to be non-null");
            $.errors = Objects.requireNonNull($.errors, "expected parameter 'errors' to be non-null");
            $.isResolveRequired = Objects.requireNonNull($.isResolveRequired, "expected parameter 'isResolveRequired' to be non-null");
            $.moveStatus = Objects.requireNonNull($.moveStatus, "expected parameter 'moveStatus' to be non-null");
            $.provisioningState = Objects.requireNonNull($.provisioningState, "expected parameter 'provisioningState' to be non-null");
            $.sourceId = Objects.requireNonNull($.sourceId, "expected parameter 'sourceId' to be non-null");
            $.sourceResourceSettings = Objects.requireNonNull($.sourceResourceSettings, "expected parameter 'sourceResourceSettings' to be non-null");
            $.targetId = Objects.requireNonNull($.targetId, "expected parameter 'targetId' to be non-null");
            return $;
        }
    }

}
