// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.azurenative.datafactory.inputs.TriggerPipelineReferenceResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Base class for all triggers that support one to many model for trigger to pipeline.
 * 
 */
public final class MultiplePipelineTriggerResponse extends com.pulumi.resources.InvokeArgs {

    public static final MultiplePipelineTriggerResponse Empty = new MultiplePipelineTriggerResponse();

    /**
     * List of tags that can be used for describing the trigger.
     * 
     */
    @Import(name="annotations")
    private @Nullable List<Object> annotations;

    public Optional<List<Object>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    /**
     * Trigger description.
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Pipelines that need to be started.
     * 
     */
    @Import(name="pipelines")
    private @Nullable List<TriggerPipelineReferenceResponse> pipelines;

    public Optional<List<TriggerPipelineReferenceResponse>> pipelines() {
        return Optional.ofNullable(this.pipelines);
    }

    /**
     * Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
     * 
     */
    @Import(name="runtimeState", required=true)
    private String runtimeState;

    public String runtimeState() {
        return this.runtimeState;
    }

    /**
     * Trigger type.
     * Expected value is &#39;MultiplePipelineTrigger&#39;.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    public String type() {
        return this.type;
    }

    private MultiplePipelineTriggerResponse() {}

    private MultiplePipelineTriggerResponse(MultiplePipelineTriggerResponse $) {
        this.annotations = $.annotations;
        this.description = $.description;
        this.pipelines = $.pipelines;
        this.runtimeState = $.runtimeState;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MultiplePipelineTriggerResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MultiplePipelineTriggerResponse $;

        public Builder() {
            $ = new MultiplePipelineTriggerResponse();
        }

        public Builder(MultiplePipelineTriggerResponse defaults) {
            $ = new MultiplePipelineTriggerResponse(Objects.requireNonNull(defaults));
        }

        public Builder annotations(@Nullable List<Object> annotations) {
            $.annotations = annotations;
            return this;
        }

        public Builder annotations(Object... annotations) {
            return annotations(List.of(annotations));
        }

        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        public Builder pipelines(@Nullable List<TriggerPipelineReferenceResponse> pipelines) {
            $.pipelines = pipelines;
            return this;
        }

        public Builder pipelines(TriggerPipelineReferenceResponse... pipelines) {
            return pipelines(List.of(pipelines));
        }

        public Builder runtimeState(String runtimeState) {
            $.runtimeState = runtimeState;
            return this;
        }

        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public MultiplePipelineTriggerResponse build() {
            $.runtimeState = Objects.requireNonNull($.runtimeState, "expected parameter 'runtimeState' to be non-null");
            $.type = Codegen.stringProp("type").arg($.type).require();
            return $;
        }
    }

}
