// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.devtestlab;

import com.pulumi.azurenative.devtestlab.enums.PolicyEvaluatorType;
import com.pulumi.azurenative.devtestlab.enums.PolicyFactName;
import com.pulumi.azurenative.devtestlab.enums.PolicyStatus;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final PolicyArgs Empty = new PolicyArgs();

    /**
     * The description of the policy.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The evaluator type of the policy (i.e. AllowedValuesPolicy, MaxValuePolicy).
     * 
     */
    @Import(name="evaluatorType")
    private @Nullable Output<Either<String,PolicyEvaluatorType>> evaluatorType;

    public Optional<Output<Either<String,PolicyEvaluatorType>>> evaluatorType() {
        return Optional.ofNullable(this.evaluatorType);
    }

    /**
     * The fact data of the policy.
     * 
     */
    @Import(name="factData")
    private @Nullable Output<String> factData;

    public Optional<Output<String>> factData() {
        return Optional.ofNullable(this.factData);
    }

    /**
     * The fact name of the policy (e.g. LabVmCount, LabVmSize, MaxVmsAllowedPerLab, etc.
     * 
     */
    @Import(name="factName")
    private @Nullable Output<Either<String,PolicyFactName>> factName;

    public Optional<Output<Either<String,PolicyFactName>>> factName() {
        return Optional.ofNullable(this.factName);
    }

    /**
     * The name of the lab.
     * 
     */
    @Import(name="labName", required=true)
    private Output<String> labName;

    public Output<String> labName() {
        return this.labName;
    }

    /**
     * The location of the resource.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name of the policy.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The name of the policy set.
     * 
     */
    @Import(name="policySetName", required=true)
    private Output<String> policySetName;

    public Output<String> policySetName() {
        return this.policySetName;
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The status of the policy.
     * 
     */
    @Import(name="status")
    private @Nullable Output<Either<String,PolicyStatus>> status;

    public Optional<Output<Either<String,PolicyStatus>>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The tags of the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The threshold of the policy (i.e. a number for MaxValuePolicy, and a JSON array of values for AllowedValuesPolicy).
     * 
     */
    @Import(name="threshold")
    private @Nullable Output<String> threshold;

    public Optional<Output<String>> threshold() {
        return Optional.ofNullable(this.threshold);
    }

    private PolicyArgs() {}

    private PolicyArgs(PolicyArgs $) {
        this.description = $.description;
        this.evaluatorType = $.evaluatorType;
        this.factData = $.factData;
        this.factName = $.factName;
        this.labName = $.labName;
        this.location = $.location;
        this.name = $.name;
        this.policySetName = $.policySetName;
        this.resourceGroupName = $.resourceGroupName;
        this.status = $.status;
        this.tags = $.tags;
        this.threshold = $.threshold;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PolicyArgs $;

        public Builder() {
            $ = new PolicyArgs();
        }

        public Builder(PolicyArgs defaults) {
            $ = new PolicyArgs(Objects.requireNonNull(defaults));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder evaluatorType(@Nullable Output<Either<String,PolicyEvaluatorType>> evaluatorType) {
            $.evaluatorType = evaluatorType;
            return this;
        }

        public Builder evaluatorType(Either<String,PolicyEvaluatorType> evaluatorType) {
            return evaluatorType(Output.of(evaluatorType));
        }

        public Builder factData(@Nullable Output<String> factData) {
            $.factData = factData;
            return this;
        }

        public Builder factData(String factData) {
            return factData(Output.of(factData));
        }

        public Builder factName(@Nullable Output<Either<String,PolicyFactName>> factName) {
            $.factName = factName;
            return this;
        }

        public Builder factName(Either<String,PolicyFactName> factName) {
            return factName(Output.of(factName));
        }

        public Builder labName(Output<String> labName) {
            $.labName = labName;
            return this;
        }

        public Builder labName(String labName) {
            return labName(Output.of(labName));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder policySetName(Output<String> policySetName) {
            $.policySetName = policySetName;
            return this;
        }

        public Builder policySetName(String policySetName) {
            return policySetName(Output.of(policySetName));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder status(@Nullable Output<Either<String,PolicyStatus>> status) {
            $.status = status;
            return this;
        }

        public Builder status(Either<String,PolicyStatus> status) {
            return status(Output.of(status));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder threshold(@Nullable Output<String> threshold) {
            $.threshold = threshold;
            return this;
        }

        public Builder threshold(String threshold) {
            return threshold(Output.of(threshold));
        }

        public PolicyArgs build() {
            $.labName = Objects.requireNonNull($.labName, "expected parameter 'labName' to be non-null");
            $.policySetName = Objects.requireNonNull($.policySetName, "expected parameter 'policySetName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
