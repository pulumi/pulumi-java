// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.compute.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Contains encryption settings for a data disk image.
 * 
 */
public final class DataDiskImageEncryptionResponse extends com.pulumi.resources.InvokeArgs {

    public static final DataDiskImageEncryptionResponse Empty = new DataDiskImageEncryptionResponse();

    /**
     * A relative URI containing the resource ID of the disk encryption set.
     * 
     */
    @Import(name="diskEncryptionSetId")
    private @Nullable String diskEncryptionSetId;

    /**
     * @return A relative URI containing the resource ID of the disk encryption set.
     * 
     */
    public Optional<String> diskEncryptionSetId() {
        return Optional.ofNullable(this.diskEncryptionSetId);
    }

    /**
     * This property specifies the logical unit number of the data disk. This value is used to identify data disks within the Virtual Machine and therefore must be unique for each data disk attached to the Virtual Machine.
     * 
     */
    @Import(name="lun", required=true)
    private Integer lun;

    /**
     * @return This property specifies the logical unit number of the data disk. This value is used to identify data disks within the Virtual Machine and therefore must be unique for each data disk attached to the Virtual Machine.
     * 
     */
    public Integer lun() {
        return this.lun;
    }

    private DataDiskImageEncryptionResponse() {}

    private DataDiskImageEncryptionResponse(DataDiskImageEncryptionResponse $) {
        this.diskEncryptionSetId = $.diskEncryptionSetId;
        this.lun = $.lun;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataDiskImageEncryptionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataDiskImageEncryptionResponse $;

        public Builder() {
            $ = new DataDiskImageEncryptionResponse();
        }

        public Builder(DataDiskImageEncryptionResponse defaults) {
            $ = new DataDiskImageEncryptionResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param diskEncryptionSetId A relative URI containing the resource ID of the disk encryption set.
         * 
         * @return builder
         * 
         */
        public Builder diskEncryptionSetId(@Nullable String diskEncryptionSetId) {
            $.diskEncryptionSetId = diskEncryptionSetId;
            return this;
        }

        /**
         * @param lun This property specifies the logical unit number of the data disk. This value is used to identify data disks within the Virtual Machine and therefore must be unique for each data disk attached to the Virtual Machine.
         * 
         * @return builder
         * 
         */
        public Builder lun(Integer lun) {
            $.lun = lun;
            return this;
        }

        public DataDiskImageEncryptionResponse build() {
            $.lun = Objects.requireNonNull($.lun, "expected parameter 'lun' to be non-null");
            return $;
        }
    }

}
