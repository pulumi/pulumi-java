// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.cache;

import com.pulumi.azurenative.Utilities;
import com.pulumi.azurenative.cache.DatabaseArgs;
import com.pulumi.azurenative.cache.outputs.ModuleResponse;
import com.pulumi.azurenative.cache.outputs.PersistenceResponse;
import com.pulumi.core.Alias;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Describes a database on the RedisEnterprise cluster
 * API Version: 2021-03-01.
 * 
 * ## Example Usage
 * 
 * ## Import
 * 
 * An existing resource can be imported using its type token, name, and identifier, e.g.
 * 
 * ```sh
 * $ pulumi import azure-native:cache:Database cache1/db1 /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Cache/redisEnterprise/cache1/databases/db1 
 * ```
 * 
 */
@ResourceType(type="azure-native:cache:Database")
public class Database extends com.pulumi.resources.CustomResource {
    /**
     * Specifies whether redis clients can connect using TLS-encrypted or plaintext redis protocols. Default is TLS-encrypted.
     * 
     */
    @Export(name="clientProtocol", type=String.class, parameters={})
    private Output</* @Nullable */ String> clientProtocol;

    /**
     * @return Specifies whether redis clients can connect using TLS-encrypted or plaintext redis protocols. Default is TLS-encrypted.
     * 
     */
    public Output<Optional<String>> clientProtocol() {
        return Codegen.optional(this.clientProtocol);
    }
    /**
     * Clustering policy - default is OSSCluster. Specified at create time.
     * 
     */
    @Export(name="clusteringPolicy", type=String.class, parameters={})
    private Output</* @Nullable */ String> clusteringPolicy;

    /**
     * @return Clustering policy - default is OSSCluster. Specified at create time.
     * 
     */
    public Output<Optional<String>> clusteringPolicy() {
        return Codegen.optional(this.clusteringPolicy);
    }
    /**
     * Redis eviction policy - default is VolatileLRU
     * 
     */
    @Export(name="evictionPolicy", type=String.class, parameters={})
    private Output</* @Nullable */ String> evictionPolicy;

    /**
     * @return Redis eviction policy - default is VolatileLRU
     * 
     */
    public Output<Optional<String>> evictionPolicy() {
        return Codegen.optional(this.evictionPolicy);
    }
    /**
     * Optional set of redis modules to enable in this database - modules can only be added at creation time.
     * 
     */
    @Export(name="modules", type=List.class, parameters={ModuleResponse.class})
    private Output</* @Nullable */ List<ModuleResponse>> modules;

    /**
     * @return Optional set of redis modules to enable in this database - modules can only be added at creation time.
     * 
     */
    public Output<Optional<List<ModuleResponse>>> modules() {
        return Codegen.optional(this.modules);
    }
    /**
     * The name of the resource
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the resource
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Persistence settings
     * 
     */
    @Export(name="persistence", type=PersistenceResponse.class, parameters={})
    private Output</* @Nullable */ PersistenceResponse> persistence;

    /**
     * @return Persistence settings
     * 
     */
    public Output<Optional<PersistenceResponse>> persistence() {
        return Codegen.optional(this.persistence);
    }
    /**
     * TCP port of the database endpoint. Specified at create time. Defaults to an available port.
     * 
     */
    @Export(name="port", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> port;

    /**
     * @return TCP port of the database endpoint. Specified at create time. Defaults to an available port.
     * 
     */
    public Output<Optional<Integer>> port() {
        return Codegen.optional(this.port);
    }
    /**
     * Current provisioning status of the database
     * 
     */
    @Export(name="provisioningState", type=String.class, parameters={})
    private Output<String> provisioningState;

    /**
     * @return Current provisioning status of the database
     * 
     */
    public Output<String> provisioningState() {
        return this.provisioningState;
    }
    /**
     * Current resource status of the database
     * 
     */
    @Export(name="resourceState", type=String.class, parameters={})
    private Output<String> resourceState;

    /**
     * @return Current resource status of the database
     * 
     */
    public Output<String> resourceState() {
        return this.resourceState;
    }
    /**
     * The type of the resource. E.g. &#34;Microsoft.Compute/virtualMachines&#34; or &#34;Microsoft.Storage/storageAccounts&#34;
     * 
     */
    @Export(name="type", type=String.class, parameters={})
    private Output<String> type;

    /**
     * @return The type of the resource. E.g. &#34;Microsoft.Compute/virtualMachines&#34; or &#34;Microsoft.Storage/storageAccounts&#34;
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Database(String name) {
        this(name, DatabaseArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Database(String name, DatabaseArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Database(String name, DatabaseArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:cache:Database", name, args == null ? DatabaseArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Database(String name, Output<String> id, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:cache:Database", name, null, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .aliases(List.of(
                Output.of(Alias.builder().type("azure-native:cache/v20201001preview:Database").build()),
                Output.of(Alias.builder().type("azure-native:cache/v20210201preview:Database").build()),
                Output.of(Alias.builder().type("azure-native:cache/v20210301:Database").build()),
                Output.of(Alias.builder().type("azure-native:cache/v20210801:Database").build()),
                Output.of(Alias.builder().type("azure-native:cache/v20220101:Database").build())
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Database get(String name, Output<String> id, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Database(name, id, options);
    }
}
