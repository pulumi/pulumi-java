// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.machinelearningservices.inputs;

import com.pulumi.azurenative.machinelearningservices.inputs.MachineLearningServiceErrorResponse;
import com.pulumi.azurenative.machinelearningservices.inputs.NodeStateCountsResponse;
import com.pulumi.azurenative.machinelearningservices.inputs.ResourceIdResponse;
import com.pulumi.azurenative.machinelearningservices.inputs.ScaleSettingsResponse;
import com.pulumi.azurenative.machinelearningservices.inputs.UserAccountCredentialsResponse;
import com.pulumi.azurenative.machinelearningservices.inputs.VirtualMachineImageResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * AML Compute properties
 * 
 */
public final class AmlComputeResponseProperties extends com.pulumi.resources.InvokeArgs {

    public static final AmlComputeResponseProperties Empty = new AmlComputeResponseProperties();

    /**
     * Allocation state of the compute. Possible values are: steady - Indicates that the compute is not resizing. There are no changes to the number of compute nodes in the compute in progress. A compute enters this state when it is created and when no operations are being performed on the compute to change the number of compute nodes. resizing - Indicates that the compute is resizing; that is, compute nodes are being added to or removed from the compute.
     * 
     */
    @Import(name="allocationState", required=true)
    private String allocationState;

    public String allocationState() {
        return this.allocationState;
    }

    /**
     * The time at which the compute entered its current allocation state.
     * 
     */
    @Import(name="allocationStateTransitionTime", required=true)
    private String allocationStateTransitionTime;

    public String allocationStateTransitionTime() {
        return this.allocationStateTransitionTime;
    }

    /**
     * The number of compute nodes currently assigned to the compute.
     * 
     */
    @Import(name="currentNodeCount", required=true)
    private Integer currentNodeCount;

    public Integer currentNodeCount() {
        return this.currentNodeCount;
    }

    /**
     * Enable or disable node public IP address provisioning. Possible values are: Possible values are: true - Indicates that the compute nodes will have public IPs provisioned. false - Indicates that the compute nodes will have a private endpoint and no public IPs.
     * 
     */
    @Import(name="enableNodePublicIp")
    private @Nullable Boolean enableNodePublicIp;

    public Optional<Boolean> enableNodePublicIp() {
        return Optional.ofNullable(this.enableNodePublicIp);
    }

    /**
     * Collection of errors encountered by various compute nodes during node setup.
     * 
     */
    @Import(name="errors", required=true)
    private List<MachineLearningServiceErrorResponse> errors;

    public List<MachineLearningServiceErrorResponse> errors() {
        return this.errors;
    }

    /**
     * Network is isolated or not
     * 
     */
    @Import(name="isolatedNetwork")
    private @Nullable Boolean isolatedNetwork;

    public Optional<Boolean> isolatedNetwork() {
        return Optional.ofNullable(this.isolatedNetwork);
    }

    /**
     * Counts of various node states on the compute.
     * 
     */
    @Import(name="nodeStateCounts", required=true)
    private NodeStateCountsResponse nodeStateCounts;

    public NodeStateCountsResponse nodeStateCounts() {
        return this.nodeStateCounts;
    }

    /**
     * Compute OS Type
     * 
     */
    @Import(name="osType")
    private @Nullable String osType;

    public Optional<String> osType() {
        return Optional.ofNullable(this.osType);
    }

    /**
     * State of the public SSH port. Possible values are: Disabled - Indicates that the public ssh port is closed on all nodes of the cluster. Enabled - Indicates that the public ssh port is open on all nodes of the cluster. NotSpecified - Indicates that the public ssh port is closed on all nodes of the cluster if VNet is defined, else is open all public nodes. It can be default only during cluster creation time, after creation it will be either enabled or disabled.
     * 
     */
    @Import(name="remoteLoginPortPublicAccess")
    private @Nullable String remoteLoginPortPublicAccess;

    public Optional<String> remoteLoginPortPublicAccess() {
        return Optional.ofNullable(this.remoteLoginPortPublicAccess);
    }

    /**
     * Scale settings for AML Compute
     * 
     */
    @Import(name="scaleSettings")
    private @Nullable ScaleSettingsResponse scaleSettings;

    public Optional<ScaleSettingsResponse> scaleSettings() {
        return Optional.ofNullable(this.scaleSettings);
    }

    /**
     * Virtual network subnet resource ID the compute nodes belong to.
     * 
     */
    @Import(name="subnet")
    private @Nullable ResourceIdResponse subnet;

    public Optional<ResourceIdResponse> subnet() {
        return Optional.ofNullable(this.subnet);
    }

    /**
     * The target number of compute nodes for the compute. If the allocationState is resizing, this property denotes the target node count for the ongoing resize operation. If the allocationState is steady, this property denotes the target node count for the previous resize operation.
     * 
     */
    @Import(name="targetNodeCount", required=true)
    private Integer targetNodeCount;

    public Integer targetNodeCount() {
        return this.targetNodeCount;
    }

    /**
     * Credentials for an administrator user account that will be created on each compute node.
     * 
     */
    @Import(name="userAccountCredentials")
    private @Nullable UserAccountCredentialsResponse userAccountCredentials;

    public Optional<UserAccountCredentialsResponse> userAccountCredentials() {
        return Optional.ofNullable(this.userAccountCredentials);
    }

    /**
     * Virtual Machine image for AML Compute - windows only
     * 
     */
    @Import(name="virtualMachineImage")
    private @Nullable VirtualMachineImageResponse virtualMachineImage;

    public Optional<VirtualMachineImageResponse> virtualMachineImage() {
        return Optional.ofNullable(this.virtualMachineImage);
    }

    /**
     * Virtual Machine priority
     * 
     */
    @Import(name="vmPriority")
    private @Nullable String vmPriority;

    public Optional<String> vmPriority() {
        return Optional.ofNullable(this.vmPriority);
    }

    /**
     * Virtual Machine Size
     * 
     */
    @Import(name="vmSize")
    private @Nullable String vmSize;

    public Optional<String> vmSize() {
        return Optional.ofNullable(this.vmSize);
    }

    private AmlComputeResponseProperties() {}

    private AmlComputeResponseProperties(AmlComputeResponseProperties $) {
        this.allocationState = $.allocationState;
        this.allocationStateTransitionTime = $.allocationStateTransitionTime;
        this.currentNodeCount = $.currentNodeCount;
        this.enableNodePublicIp = $.enableNodePublicIp;
        this.errors = $.errors;
        this.isolatedNetwork = $.isolatedNetwork;
        this.nodeStateCounts = $.nodeStateCounts;
        this.osType = $.osType;
        this.remoteLoginPortPublicAccess = $.remoteLoginPortPublicAccess;
        this.scaleSettings = $.scaleSettings;
        this.subnet = $.subnet;
        this.targetNodeCount = $.targetNodeCount;
        this.userAccountCredentials = $.userAccountCredentials;
        this.virtualMachineImage = $.virtualMachineImage;
        this.vmPriority = $.vmPriority;
        this.vmSize = $.vmSize;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AmlComputeResponseProperties defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AmlComputeResponseProperties $;

        public Builder() {
            $ = new AmlComputeResponseProperties();
        }

        public Builder(AmlComputeResponseProperties defaults) {
            $ = new AmlComputeResponseProperties(Objects.requireNonNull(defaults));
        }

        public Builder allocationState(String allocationState) {
            $.allocationState = allocationState;
            return this;
        }

        public Builder allocationStateTransitionTime(String allocationStateTransitionTime) {
            $.allocationStateTransitionTime = allocationStateTransitionTime;
            return this;
        }

        public Builder currentNodeCount(Integer currentNodeCount) {
            $.currentNodeCount = currentNodeCount;
            return this;
        }

        public Builder enableNodePublicIp(@Nullable Boolean enableNodePublicIp) {
            $.enableNodePublicIp = enableNodePublicIp;
            return this;
        }

        public Builder errors(List<MachineLearningServiceErrorResponse> errors) {
            $.errors = errors;
            return this;
        }

        public Builder errors(MachineLearningServiceErrorResponse... errors) {
            return errors(List.of(errors));
        }

        public Builder isolatedNetwork(@Nullable Boolean isolatedNetwork) {
            $.isolatedNetwork = isolatedNetwork;
            return this;
        }

        public Builder nodeStateCounts(NodeStateCountsResponse nodeStateCounts) {
            $.nodeStateCounts = nodeStateCounts;
            return this;
        }

        public Builder osType(@Nullable String osType) {
            $.osType = osType;
            return this;
        }

        public Builder remoteLoginPortPublicAccess(@Nullable String remoteLoginPortPublicAccess) {
            $.remoteLoginPortPublicAccess = remoteLoginPortPublicAccess;
            return this;
        }

        public Builder scaleSettings(@Nullable ScaleSettingsResponse scaleSettings) {
            $.scaleSettings = scaleSettings;
            return this;
        }

        public Builder subnet(@Nullable ResourceIdResponse subnet) {
            $.subnet = subnet;
            return this;
        }

        public Builder targetNodeCount(Integer targetNodeCount) {
            $.targetNodeCount = targetNodeCount;
            return this;
        }

        public Builder userAccountCredentials(@Nullable UserAccountCredentialsResponse userAccountCredentials) {
            $.userAccountCredentials = userAccountCredentials;
            return this;
        }

        public Builder virtualMachineImage(@Nullable VirtualMachineImageResponse virtualMachineImage) {
            $.virtualMachineImage = virtualMachineImage;
            return this;
        }

        public Builder vmPriority(@Nullable String vmPriority) {
            $.vmPriority = vmPriority;
            return this;
        }

        public Builder vmSize(@Nullable String vmSize) {
            $.vmSize = vmSize;
            return this;
        }

        public AmlComputeResponseProperties build() {
            $.allocationState = Objects.requireNonNull($.allocationState, "expected parameter 'allocationState' to be non-null");
            $.allocationStateTransitionTime = Objects.requireNonNull($.allocationStateTransitionTime, "expected parameter 'allocationStateTransitionTime' to be non-null");
            $.currentNodeCount = Objects.requireNonNull($.currentNodeCount, "expected parameter 'currentNodeCount' to be non-null");
            $.enableNodePublicIp = Codegen.booleanProp("enableNodePublicIp").arg($.enableNodePublicIp).def(true).getNullable();
            $.errors = Objects.requireNonNull($.errors, "expected parameter 'errors' to be non-null");
            $.nodeStateCounts = Objects.requireNonNull($.nodeStateCounts, "expected parameter 'nodeStateCounts' to be non-null");
            $.osType = Codegen.stringProp("osType").arg($.osType).def("Linux").getNullable();
            $.remoteLoginPortPublicAccess = Codegen.stringProp("remoteLoginPortPublicAccess").arg($.remoteLoginPortPublicAccess).def("NotSpecified").getNullable();
            $.targetNodeCount = Objects.requireNonNull($.targetNodeCount, "expected parameter 'targetNodeCount' to be non-null");
            return $;
        }
    }

}
