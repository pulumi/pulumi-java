// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.recoveryservices.inputs;

import com.pulumi.azurenative.recoveryservices.inputs.AzureSqlProtectedItemExtendedInfoResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Azure SQL workload-specific backup item.
 * 
 */
public final class AzureSqlProtectedItemResponse extends com.pulumi.resources.InvokeArgs {

    public static final AzureSqlProtectedItemResponse Empty = new AzureSqlProtectedItemResponse();

    /**
     * Type of backup management for the backed up item.
     * 
     */
    @Import(name="backupManagementType")
    private @Nullable String backupManagementType;

    /**
     * @return Type of backup management for the backed up item.
     * 
     */
    public Optional<String> backupManagementType() {
        return Optional.ofNullable(this.backupManagementType);
    }

    /**
     * Name of the backup set the backup item belongs to
     * 
     */
    @Import(name="backupSetName")
    private @Nullable String backupSetName;

    /**
     * @return Name of the backup set the backup item belongs to
     * 
     */
    public Optional<String> backupSetName() {
        return Optional.ofNullable(this.backupSetName);
    }

    /**
     * Unique name of container
     * 
     */
    @Import(name="containerName")
    private @Nullable String containerName;

    /**
     * @return Unique name of container
     * 
     */
    public Optional<String> containerName() {
        return Optional.ofNullable(this.containerName);
    }

    /**
     * Create mode to indicate recovery of existing soft deleted data source or creation of new data source.
     * 
     */
    @Import(name="createMode")
    private @Nullable String createMode;

    /**
     * @return Create mode to indicate recovery of existing soft deleted data source or creation of new data source.
     * 
     */
    public Optional<String> createMode() {
        return Optional.ofNullable(this.createMode);
    }

    /**
     * Time for deferred deletion in UTC
     * 
     */
    @Import(name="deferredDeleteTimeInUTC")
    private @Nullable String deferredDeleteTimeInUTC;

    /**
     * @return Time for deferred deletion in UTC
     * 
     */
    public Optional<String> deferredDeleteTimeInUTC() {
        return Optional.ofNullable(this.deferredDeleteTimeInUTC);
    }

    /**
     * Time remaining before the DS marked for deferred delete is permanently deleted
     * 
     */
    @Import(name="deferredDeleteTimeRemaining")
    private @Nullable String deferredDeleteTimeRemaining;

    /**
     * @return Time remaining before the DS marked for deferred delete is permanently deleted
     * 
     */
    public Optional<String> deferredDeleteTimeRemaining() {
        return Optional.ofNullable(this.deferredDeleteTimeRemaining);
    }

    /**
     * Additional information for this backup item.
     * 
     */
    @Import(name="extendedInfo")
    private @Nullable AzureSqlProtectedItemExtendedInfoResponse extendedInfo;

    /**
     * @return Additional information for this backup item.
     * 
     */
    public Optional<AzureSqlProtectedItemExtendedInfoResponse> extendedInfo() {
        return Optional.ofNullable(this.extendedInfo);
    }

    /**
     * Flag to identify whether the deferred deleted DS is to be purged soon
     * 
     */
    @Import(name="isDeferredDeleteScheduleUpcoming")
    private @Nullable Boolean isDeferredDeleteScheduleUpcoming;

    /**
     * @return Flag to identify whether the deferred deleted DS is to be purged soon
     * 
     */
    public Optional<Boolean> isDeferredDeleteScheduleUpcoming() {
        return Optional.ofNullable(this.isDeferredDeleteScheduleUpcoming);
    }

    /**
     * Flag to identify that deferred deleted DS is to be moved into Pause state
     * 
     */
    @Import(name="isRehydrate")
    private @Nullable Boolean isRehydrate;

    /**
     * @return Flag to identify that deferred deleted DS is to be moved into Pause state
     * 
     */
    public Optional<Boolean> isRehydrate() {
        return Optional.ofNullable(this.isRehydrate);
    }

    /**
     * Flag to identify whether the DS is scheduled for deferred delete
     * 
     */
    @Import(name="isScheduledForDeferredDelete")
    private @Nullable Boolean isScheduledForDeferredDelete;

    /**
     * @return Flag to identify whether the DS is scheduled for deferred delete
     * 
     */
    public Optional<Boolean> isScheduledForDeferredDelete() {
        return Optional.ofNullable(this.isScheduledForDeferredDelete);
    }

    /**
     * Timestamp when the last (latest) backup copy was created for this backup item.
     * 
     */
    @Import(name="lastRecoveryPoint")
    private @Nullable String lastRecoveryPoint;

    /**
     * @return Timestamp when the last (latest) backup copy was created for this backup item.
     * 
     */
    public Optional<String> lastRecoveryPoint() {
        return Optional.ofNullable(this.lastRecoveryPoint);
    }

    /**
     * ID of the backup policy with which this item is backed up.
     * 
     */
    @Import(name="policyId")
    private @Nullable String policyId;

    /**
     * @return ID of the backup policy with which this item is backed up.
     * 
     */
    public Optional<String> policyId() {
        return Optional.ofNullable(this.policyId);
    }

    /**
     * Internal ID of a backup item. Used by Azure SQL Backup engine to contact Recovery Services.
     * 
     */
    @Import(name="protectedItemDataId")
    private @Nullable String protectedItemDataId;

    /**
     * @return Internal ID of a backup item. Used by Azure SQL Backup engine to contact Recovery Services.
     * 
     */
    public Optional<String> protectedItemDataId() {
        return Optional.ofNullable(this.protectedItemDataId);
    }

    /**
     * backup item type.
     * Expected value is &#39;Microsoft.Sql/servers/databases&#39;.
     * 
     */
    @Import(name="protectedItemType", required=true)
    private String protectedItemType;

    /**
     * @return backup item type.
     * Expected value is &#39;Microsoft.Sql/servers/databases&#39;.
     * 
     */
    public String protectedItemType() {
        return this.protectedItemType;
    }

    /**
     * Backup state of the backed up item.
     * 
     */
    @Import(name="protectionState")
    private @Nullable String protectionState;

    /**
     * @return Backup state of the backed up item.
     * 
     */
    public Optional<String> protectionState() {
        return Optional.ofNullable(this.protectionState);
    }

    /**
     * ARM ID of the resource to be backed up.
     * 
     */
    @Import(name="sourceResourceId")
    private @Nullable String sourceResourceId;

    /**
     * @return ARM ID of the resource to be backed up.
     * 
     */
    public Optional<String> sourceResourceId() {
        return Optional.ofNullable(this.sourceResourceId);
    }

    /**
     * Type of workload this item represents.
     * 
     */
    @Import(name="workloadType")
    private @Nullable String workloadType;

    /**
     * @return Type of workload this item represents.
     * 
     */
    public Optional<String> workloadType() {
        return Optional.ofNullable(this.workloadType);
    }

    private AzureSqlProtectedItemResponse() {}

    private AzureSqlProtectedItemResponse(AzureSqlProtectedItemResponse $) {
        this.backupManagementType = $.backupManagementType;
        this.backupSetName = $.backupSetName;
        this.containerName = $.containerName;
        this.createMode = $.createMode;
        this.deferredDeleteTimeInUTC = $.deferredDeleteTimeInUTC;
        this.deferredDeleteTimeRemaining = $.deferredDeleteTimeRemaining;
        this.extendedInfo = $.extendedInfo;
        this.isDeferredDeleteScheduleUpcoming = $.isDeferredDeleteScheduleUpcoming;
        this.isRehydrate = $.isRehydrate;
        this.isScheduledForDeferredDelete = $.isScheduledForDeferredDelete;
        this.lastRecoveryPoint = $.lastRecoveryPoint;
        this.policyId = $.policyId;
        this.protectedItemDataId = $.protectedItemDataId;
        this.protectedItemType = $.protectedItemType;
        this.protectionState = $.protectionState;
        this.sourceResourceId = $.sourceResourceId;
        this.workloadType = $.workloadType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AzureSqlProtectedItemResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AzureSqlProtectedItemResponse $;

        public Builder() {
            $ = new AzureSqlProtectedItemResponse();
        }

        public Builder(AzureSqlProtectedItemResponse defaults) {
            $ = new AzureSqlProtectedItemResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param backupManagementType Type of backup management for the backed up item.
         * 
         * @return builder
         * 
         */
        public Builder backupManagementType(@Nullable String backupManagementType) {
            $.backupManagementType = backupManagementType;
            return this;
        }

        /**
         * @param backupSetName Name of the backup set the backup item belongs to
         * 
         * @return builder
         * 
         */
        public Builder backupSetName(@Nullable String backupSetName) {
            $.backupSetName = backupSetName;
            return this;
        }

        /**
         * @param containerName Unique name of container
         * 
         * @return builder
         * 
         */
        public Builder containerName(@Nullable String containerName) {
            $.containerName = containerName;
            return this;
        }

        /**
         * @param createMode Create mode to indicate recovery of existing soft deleted data source or creation of new data source.
         * 
         * @return builder
         * 
         */
        public Builder createMode(@Nullable String createMode) {
            $.createMode = createMode;
            return this;
        }

        /**
         * @param deferredDeleteTimeInUTC Time for deferred deletion in UTC
         * 
         * @return builder
         * 
         */
        public Builder deferredDeleteTimeInUTC(@Nullable String deferredDeleteTimeInUTC) {
            $.deferredDeleteTimeInUTC = deferredDeleteTimeInUTC;
            return this;
        }

        /**
         * @param deferredDeleteTimeRemaining Time remaining before the DS marked for deferred delete is permanently deleted
         * 
         * @return builder
         * 
         */
        public Builder deferredDeleteTimeRemaining(@Nullable String deferredDeleteTimeRemaining) {
            $.deferredDeleteTimeRemaining = deferredDeleteTimeRemaining;
            return this;
        }

        /**
         * @param extendedInfo Additional information for this backup item.
         * 
         * @return builder
         * 
         */
        public Builder extendedInfo(@Nullable AzureSqlProtectedItemExtendedInfoResponse extendedInfo) {
            $.extendedInfo = extendedInfo;
            return this;
        }

        /**
         * @param isDeferredDeleteScheduleUpcoming Flag to identify whether the deferred deleted DS is to be purged soon
         * 
         * @return builder
         * 
         */
        public Builder isDeferredDeleteScheduleUpcoming(@Nullable Boolean isDeferredDeleteScheduleUpcoming) {
            $.isDeferredDeleteScheduleUpcoming = isDeferredDeleteScheduleUpcoming;
            return this;
        }

        /**
         * @param isRehydrate Flag to identify that deferred deleted DS is to be moved into Pause state
         * 
         * @return builder
         * 
         */
        public Builder isRehydrate(@Nullable Boolean isRehydrate) {
            $.isRehydrate = isRehydrate;
            return this;
        }

        /**
         * @param isScheduledForDeferredDelete Flag to identify whether the DS is scheduled for deferred delete
         * 
         * @return builder
         * 
         */
        public Builder isScheduledForDeferredDelete(@Nullable Boolean isScheduledForDeferredDelete) {
            $.isScheduledForDeferredDelete = isScheduledForDeferredDelete;
            return this;
        }

        /**
         * @param lastRecoveryPoint Timestamp when the last (latest) backup copy was created for this backup item.
         * 
         * @return builder
         * 
         */
        public Builder lastRecoveryPoint(@Nullable String lastRecoveryPoint) {
            $.lastRecoveryPoint = lastRecoveryPoint;
            return this;
        }

        /**
         * @param policyId ID of the backup policy with which this item is backed up.
         * 
         * @return builder
         * 
         */
        public Builder policyId(@Nullable String policyId) {
            $.policyId = policyId;
            return this;
        }

        /**
         * @param protectedItemDataId Internal ID of a backup item. Used by Azure SQL Backup engine to contact Recovery Services.
         * 
         * @return builder
         * 
         */
        public Builder protectedItemDataId(@Nullable String protectedItemDataId) {
            $.protectedItemDataId = protectedItemDataId;
            return this;
        }

        /**
         * @param protectedItemType backup item type.
         * Expected value is &#39;Microsoft.Sql/servers/databases&#39;.
         * 
         * @return builder
         * 
         */
        public Builder protectedItemType(String protectedItemType) {
            $.protectedItemType = protectedItemType;
            return this;
        }

        /**
         * @param protectionState Backup state of the backed up item.
         * 
         * @return builder
         * 
         */
        public Builder protectionState(@Nullable String protectionState) {
            $.protectionState = protectionState;
            return this;
        }

        /**
         * @param sourceResourceId ARM ID of the resource to be backed up.
         * 
         * @return builder
         * 
         */
        public Builder sourceResourceId(@Nullable String sourceResourceId) {
            $.sourceResourceId = sourceResourceId;
            return this;
        }

        /**
         * @param workloadType Type of workload this item represents.
         * 
         * @return builder
         * 
         */
        public Builder workloadType(@Nullable String workloadType) {
            $.workloadType = workloadType;
            return this;
        }

        public AzureSqlProtectedItemResponse build() {
            $.protectedItemType = Codegen.stringProp("protectedItemType").arg($.protectedItemType).require();
            return $;
        }
    }

}
