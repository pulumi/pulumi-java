// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datamigration.inputs;

import com.pulumi.azurenative.datamigration.inputs.MigrateSyncCompleteCommandInputResponse;
import com.pulumi.azurenative.datamigration.inputs.MigrateSyncCompleteCommandOutputResponse;
import com.pulumi.azurenative.datamigration.inputs.ODataErrorResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Properties for the command that completes sync migration for a database.
 * 
 */
public final class MigrateSyncCompleteCommandPropertiesResponse extends com.pulumi.resources.InvokeArgs {

    public static final MigrateSyncCompleteCommandPropertiesResponse Empty = new MigrateSyncCompleteCommandPropertiesResponse();

    /**
     * Command type.
     * Expected value is &#39;Migrate.Sync.Complete.Database&#39;.
     * 
     */
    @Import(name="commandType", required=true)
    private String commandType;

    public String commandType() {
        return this.commandType;
    }

    /**
     * Array of errors. This is ignored if submitted.
     * 
     */
    @Import(name="errors", required=true)
    private List<ODataErrorResponse> errors;

    public List<ODataErrorResponse> errors() {
        return this.errors;
    }

    /**
     * Command input
     * 
     */
    @Import(name="input")
    private @Nullable MigrateSyncCompleteCommandInputResponse input;

    public Optional<MigrateSyncCompleteCommandInputResponse> input() {
        return Optional.ofNullable(this.input);
    }

    /**
     * Command output. This is ignored if submitted.
     * 
     */
    @Import(name="output", required=true)
    private MigrateSyncCompleteCommandOutputResponse output;

    public MigrateSyncCompleteCommandOutputResponse output() {
        return this.output;
    }

    /**
     * The state of the command. This is ignored if submitted.
     * 
     */
    @Import(name="state", required=true)
    private String state;

    public String state() {
        return this.state;
    }

    private MigrateSyncCompleteCommandPropertiesResponse() {}

    private MigrateSyncCompleteCommandPropertiesResponse(MigrateSyncCompleteCommandPropertiesResponse $) {
        this.commandType = $.commandType;
        this.errors = $.errors;
        this.input = $.input;
        this.output = $.output;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MigrateSyncCompleteCommandPropertiesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MigrateSyncCompleteCommandPropertiesResponse $;

        public Builder() {
            $ = new MigrateSyncCompleteCommandPropertiesResponse();
        }

        public Builder(MigrateSyncCompleteCommandPropertiesResponse defaults) {
            $ = new MigrateSyncCompleteCommandPropertiesResponse(Objects.requireNonNull(defaults));
        }

        public Builder commandType(String commandType) {
            $.commandType = commandType;
            return this;
        }

        public Builder errors(List<ODataErrorResponse> errors) {
            $.errors = errors;
            return this;
        }

        public Builder errors(ODataErrorResponse... errors) {
            return errors(List.of(errors));
        }

        public Builder input(@Nullable MigrateSyncCompleteCommandInputResponse input) {
            $.input = input;
            return this;
        }

        public Builder output(MigrateSyncCompleteCommandOutputResponse output) {
            $.output = output;
            return this;
        }

        public Builder state(String state) {
            $.state = state;
            return this;
        }

        public MigrateSyncCompleteCommandPropertiesResponse build() {
            $.commandType = Codegen.stringProp("commandType").arg($.commandType).require();
            $.errors = Objects.requireNonNull($.errors, "expected parameter 'errors' to be non-null");
            $.output = Objects.requireNonNull($.output, "expected parameter 'output' to be non-null");
            $.state = Objects.requireNonNull($.state, "expected parameter 'state' to be non-null");
            return $;
        }
    }

}
