// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.customerinsights.inputs;

import com.pulumi.azurenative.customerinsights.inputs.ConnectorMappingAvailabilityResponse;
import com.pulumi.azurenative.customerinsights.inputs.ConnectorMappingCompleteOperationResponse;
import com.pulumi.azurenative.customerinsights.inputs.ConnectorMappingErrorManagementResponse;
import com.pulumi.azurenative.customerinsights.inputs.ConnectorMappingFormatResponse;
import com.pulumi.azurenative.customerinsights.inputs.ConnectorMappingStructureResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The connector mapping properties.
 * 
 */
public final class ConnectorMappingPropertiesResponse extends com.pulumi.resources.InvokeArgs {

    public static final ConnectorMappingPropertiesResponse Empty = new ConnectorMappingPropertiesResponse();

    /**
     * The availability of mapping property.
     * 
     */
    @Import(name="availability", required=true)
    private ConnectorMappingAvailabilityResponse availability;

    public ConnectorMappingAvailabilityResponse availability() {
        return this.availability;
    }

    /**
     * The operation after import is done.
     * 
     */
    @Import(name="completeOperation", required=true)
    private ConnectorMappingCompleteOperationResponse completeOperation;

    public ConnectorMappingCompleteOperationResponse completeOperation() {
        return this.completeOperation;
    }

    /**
     * The error management setting for the mapping.
     * 
     */
    @Import(name="errorManagement", required=true)
    private ConnectorMappingErrorManagementResponse errorManagement;

    public ConnectorMappingErrorManagementResponse errorManagement() {
        return this.errorManagement;
    }

    /**
     * The file filter for the mapping.
     * 
     */
    @Import(name="fileFilter")
    private @Nullable String fileFilter;

    public Optional<String> fileFilter() {
        return Optional.ofNullable(this.fileFilter);
    }

    /**
     * The folder path for the mapping.
     * 
     */
    @Import(name="folderPath")
    private @Nullable String folderPath;

    public Optional<String> folderPath() {
        return Optional.ofNullable(this.folderPath);
    }

    /**
     * The format of mapping property.
     * 
     */
    @Import(name="format", required=true)
    private ConnectorMappingFormatResponse format;

    public ConnectorMappingFormatResponse format() {
        return this.format;
    }

    /**
     * If the file contains a header or not.
     * 
     */
    @Import(name="hasHeader")
    private @Nullable Boolean hasHeader;

    public Optional<Boolean> hasHeader() {
        return Optional.ofNullable(this.hasHeader);
    }

    /**
     * Ingestion mapping information at property level.
     * 
     */
    @Import(name="structure", required=true)
    private List<ConnectorMappingStructureResponse> structure;

    public List<ConnectorMappingStructureResponse> structure() {
        return this.structure;
    }

    private ConnectorMappingPropertiesResponse() {}

    private ConnectorMappingPropertiesResponse(ConnectorMappingPropertiesResponse $) {
        this.availability = $.availability;
        this.completeOperation = $.completeOperation;
        this.errorManagement = $.errorManagement;
        this.fileFilter = $.fileFilter;
        this.folderPath = $.folderPath;
        this.format = $.format;
        this.hasHeader = $.hasHeader;
        this.structure = $.structure;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectorMappingPropertiesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectorMappingPropertiesResponse $;

        public Builder() {
            $ = new ConnectorMappingPropertiesResponse();
        }

        public Builder(ConnectorMappingPropertiesResponse defaults) {
            $ = new ConnectorMappingPropertiesResponse(Objects.requireNonNull(defaults));
        }

        public Builder availability(ConnectorMappingAvailabilityResponse availability) {
            $.availability = availability;
            return this;
        }

        public Builder completeOperation(ConnectorMappingCompleteOperationResponse completeOperation) {
            $.completeOperation = completeOperation;
            return this;
        }

        public Builder errorManagement(ConnectorMappingErrorManagementResponse errorManagement) {
            $.errorManagement = errorManagement;
            return this;
        }

        public Builder fileFilter(@Nullable String fileFilter) {
            $.fileFilter = fileFilter;
            return this;
        }

        public Builder folderPath(@Nullable String folderPath) {
            $.folderPath = folderPath;
            return this;
        }

        public Builder format(ConnectorMappingFormatResponse format) {
            $.format = format;
            return this;
        }

        public Builder hasHeader(@Nullable Boolean hasHeader) {
            $.hasHeader = hasHeader;
            return this;
        }

        public Builder structure(List<ConnectorMappingStructureResponse> structure) {
            $.structure = structure;
            return this;
        }

        public Builder structure(ConnectorMappingStructureResponse... structure) {
            return structure(List.of(structure));
        }

        public ConnectorMappingPropertiesResponse build() {
            $.availability = Objects.requireNonNull($.availability, "expected parameter 'availability' to be non-null");
            $.completeOperation = Objects.requireNonNull($.completeOperation, "expected parameter 'completeOperation' to be non-null");
            $.errorManagement = Objects.requireNonNull($.errorManagement, "expected parameter 'errorManagement' to be non-null");
            $.format = Objects.requireNonNull($.format, "expected parameter 'format' to be non-null");
            $.structure = Objects.requireNonNull($.structure, "expected parameter 'structure' to be non-null");
            return $;
        }
    }

}
