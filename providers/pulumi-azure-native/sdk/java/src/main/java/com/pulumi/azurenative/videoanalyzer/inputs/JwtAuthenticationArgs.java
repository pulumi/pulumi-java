// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.videoanalyzer.inputs;

import com.pulumi.azurenative.videoanalyzer.inputs.EccTokenKeyArgs;
import com.pulumi.azurenative.videoanalyzer.inputs.RsaTokenKeyArgs;
import com.pulumi.azurenative.videoanalyzer.inputs.TokenClaimArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Properties for access validation based on JSON Web Tokens (JWT).
 * 
 */
public final class JwtAuthenticationArgs extends com.pulumi.resources.ResourceArgs {

    public static final JwtAuthenticationArgs Empty = new JwtAuthenticationArgs();

    /**
     * List of expected token audiences. Token audience is valid if it matches at least one of the given values.
     * 
     */
    @Import(name="audiences")
      private final @Nullable Output<List<String>> audiences;

    public Output<List<String>> audiences() {
        return this.audiences == null ? Codegen.empty() : this.audiences;
    }

    /**
     * List of additional token claims to be validated. Token must contains all claims and respective values for it to be valid.
     * 
     */
    @Import(name="claims")
      private final @Nullable Output<List<TokenClaimArgs>> claims;

    public Output<List<TokenClaimArgs>> claims() {
        return this.claims == null ? Codegen.empty() : this.claims;
    }

    /**
     * List of expected token issuers. Token issuer is valid if it matches at least one of the given values.
     * 
     */
    @Import(name="issuers")
      private final @Nullable Output<List<String>> issuers;

    public Output<List<String>> issuers() {
        return this.issuers == null ? Codegen.empty() : this.issuers;
    }

    /**
     * List of keys which can be used to validate access tokens. Having multiple keys allow for seamless key rotation of the token signing key. Token signature must match exactly one key.
     * 
     */
    @Import(name="keys")
      private final @Nullable Output<List<Either<EccTokenKeyArgs,RsaTokenKeyArgs>>> keys;

    public Output<List<Either<EccTokenKeyArgs,RsaTokenKeyArgs>>> keys() {
        return this.keys == null ? Codegen.empty() : this.keys;
    }

    /**
     * The discriminator for derived types.
     * Expected value is '#Microsoft.VideoAnalyzer.JwtAuthentication'.
     * 
     */
    @Import(name="type", required=true)
      private final Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    public JwtAuthenticationArgs(
        @Nullable Output<List<String>> audiences,
        @Nullable Output<List<TokenClaimArgs>> claims,
        @Nullable Output<List<String>> issuers,
        @Nullable Output<List<Either<EccTokenKeyArgs,RsaTokenKeyArgs>>> keys,
        Output<String> type) {
        this.audiences = audiences;
        this.claims = claims;
        this.issuers = issuers;
        this.keys = keys;
        this.type = Codegen.stringProp("type").output().arg(type).require();
    }

    private JwtAuthenticationArgs() {
        this.audiences = Codegen.empty();
        this.claims = Codegen.empty();
        this.issuers = Codegen.empty();
        this.keys = Codegen.empty();
        this.type = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(JwtAuthenticationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<String>> audiences;
        private @Nullable Output<List<TokenClaimArgs>> claims;
        private @Nullable Output<List<String>> issuers;
        private @Nullable Output<List<Either<EccTokenKeyArgs,RsaTokenKeyArgs>>> keys;
        private Output<String> type;

        public Builder() {
    	      // Empty
        }

        public Builder(JwtAuthenticationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.audiences = defaults.audiences;
    	      this.claims = defaults.claims;
    	      this.issuers = defaults.issuers;
    	      this.keys = defaults.keys;
    	      this.type = defaults.type;
        }

        public Builder audiences(@Nullable Output<List<String>> audiences) {
            this.audiences = audiences;
            return this;
        }
        public Builder audiences(@Nullable List<String> audiences) {
            this.audiences = Codegen.ofNullable(audiences);
            return this;
        }
        public Builder audiences(String... audiences) {
            return audiences(List.of(audiences));
        }
        public Builder claims(@Nullable Output<List<TokenClaimArgs>> claims) {
            this.claims = claims;
            return this;
        }
        public Builder claims(@Nullable List<TokenClaimArgs> claims) {
            this.claims = Codegen.ofNullable(claims);
            return this;
        }
        public Builder claims(TokenClaimArgs... claims) {
            return claims(List.of(claims));
        }
        public Builder issuers(@Nullable Output<List<String>> issuers) {
            this.issuers = issuers;
            return this;
        }
        public Builder issuers(@Nullable List<String> issuers) {
            this.issuers = Codegen.ofNullable(issuers);
            return this;
        }
        public Builder issuers(String... issuers) {
            return issuers(List.of(issuers));
        }
        public Builder keys(@Nullable Output<List<Either<EccTokenKeyArgs,RsaTokenKeyArgs>>> keys) {
            this.keys = keys;
            return this;
        }
        public Builder keys(@Nullable List<Either<EccTokenKeyArgs,RsaTokenKeyArgs>> keys) {
            this.keys = Codegen.ofNullable(keys);
            return this;
        }
        public Builder keys(Either<EccTokenKeyArgs,RsaTokenKeyArgs>... keys) {
            return keys(List.of(keys));
        }
        public Builder type(Output<String> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder type(String type) {
            this.type = Output.of(Objects.requireNonNull(type));
            return this;
        }        public JwtAuthenticationArgs build() {
            return new JwtAuthenticationArgs(audiences, claims, issuers, keys, type);
        }
    }
}
