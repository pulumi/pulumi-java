// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.compute.inputs;

import com.pulumi.azurenative.compute.inputs.ImageDiskReferenceResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Data used when creating a disk.
 * 
 */
public final class CreationDataResponse extends com.pulumi.resources.InvokeArgs {

    public static final CreationDataResponse Empty = new CreationDataResponse();

    /**
     * This enumerates the possible sources of a disk&#39;s creation.
     * 
     */
    @Import(name="createOption", required=true)
    private String createOption;

    /**
     * @return This enumerates the possible sources of a disk&#39;s creation.
     * 
     */
    public String createOption() {
        return this.createOption;
    }

    /**
     * Required if creating from a Gallery Image. The id of the ImageDiskReference will be the ARM id of the shared galley image version from which to create a disk.
     * 
     */
    @Import(name="galleryImageReference")
    private @Nullable ImageDiskReferenceResponse galleryImageReference;

    /**
     * @return Required if creating from a Gallery Image. The id of the ImageDiskReference will be the ARM id of the shared galley image version from which to create a disk.
     * 
     */
    public Optional<ImageDiskReferenceResponse> galleryImageReference() {
        return Optional.ofNullable(this.galleryImageReference);
    }

    /**
     * Disk source information.
     * 
     */
    @Import(name="imageReference")
    private @Nullable ImageDiskReferenceResponse imageReference;

    /**
     * @return Disk source information.
     * 
     */
    public Optional<ImageDiskReferenceResponse> imageReference() {
        return Optional.ofNullable(this.imageReference);
    }

    /**
     * Logical sector size in bytes for Ultra disks. Supported values are 512 ad 4096. 4096 is the default.
     * 
     */
    @Import(name="logicalSectorSize")
    private @Nullable Integer logicalSectorSize;

    /**
     * @return Logical sector size in bytes for Ultra disks. Supported values are 512 ad 4096. 4096 is the default.
     * 
     */
    public Optional<Integer> logicalSectorSize() {
        return Optional.ofNullable(this.logicalSectorSize);
    }

    /**
     * If createOption is Copy, this is the ARM id of the source snapshot or disk.
     * 
     */
    @Import(name="sourceResourceId")
    private @Nullable String sourceResourceId;

    /**
     * @return If createOption is Copy, this is the ARM id of the source snapshot or disk.
     * 
     */
    public Optional<String> sourceResourceId() {
        return Optional.ofNullable(this.sourceResourceId);
    }

    /**
     * If this field is set, this is the unique id identifying the source of this resource.
     * 
     */
    @Import(name="sourceUniqueId", required=true)
    private String sourceUniqueId;

    /**
     * @return If this field is set, this is the unique id identifying the source of this resource.
     * 
     */
    public String sourceUniqueId() {
        return this.sourceUniqueId;
    }

    /**
     * If createOption is Import, this is the URI of a blob to be imported into a managed disk.
     * 
     */
    @Import(name="sourceUri")
    private @Nullable String sourceUri;

    /**
     * @return If createOption is Import, this is the URI of a blob to be imported into a managed disk.
     * 
     */
    public Optional<String> sourceUri() {
        return Optional.ofNullable(this.sourceUri);
    }

    /**
     * Required if createOption is Import. The Azure Resource Manager identifier of the storage account containing the blob to import as a disk.
     * 
     */
    @Import(name="storageAccountId")
    private @Nullable String storageAccountId;

    /**
     * @return Required if createOption is Import. The Azure Resource Manager identifier of the storage account containing the blob to import as a disk.
     * 
     */
    public Optional<String> storageAccountId() {
        return Optional.ofNullable(this.storageAccountId);
    }

    /**
     * If createOption is Upload, this is the size of the contents of the upload including the VHD footer. This value should be between 20972032 (20 MiB + 512 bytes for the VHD footer) and 35183298347520 bytes (32 TiB + 512 bytes for the VHD footer).
     * 
     */
    @Import(name="uploadSizeBytes")
    private @Nullable Double uploadSizeBytes;

    /**
     * @return If createOption is Upload, this is the size of the contents of the upload including the VHD footer. This value should be between 20972032 (20 MiB + 512 bytes for the VHD footer) and 35183298347520 bytes (32 TiB + 512 bytes for the VHD footer).
     * 
     */
    public Optional<Double> uploadSizeBytes() {
        return Optional.ofNullable(this.uploadSizeBytes);
    }

    private CreationDataResponse() {}

    private CreationDataResponse(CreationDataResponse $) {
        this.createOption = $.createOption;
        this.galleryImageReference = $.galleryImageReference;
        this.imageReference = $.imageReference;
        this.logicalSectorSize = $.logicalSectorSize;
        this.sourceResourceId = $.sourceResourceId;
        this.sourceUniqueId = $.sourceUniqueId;
        this.sourceUri = $.sourceUri;
        this.storageAccountId = $.storageAccountId;
        this.uploadSizeBytes = $.uploadSizeBytes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CreationDataResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CreationDataResponse $;

        public Builder() {
            $ = new CreationDataResponse();
        }

        public Builder(CreationDataResponse defaults) {
            $ = new CreationDataResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param createOption This enumerates the possible sources of a disk&#39;s creation.
         * 
         * @return builder
         * 
         */
        public Builder createOption(String createOption) {
            $.createOption = createOption;
            return this;
        }

        /**
         * @param galleryImageReference Required if creating from a Gallery Image. The id of the ImageDiskReference will be the ARM id of the shared galley image version from which to create a disk.
         * 
         * @return builder
         * 
         */
        public Builder galleryImageReference(@Nullable ImageDiskReferenceResponse galleryImageReference) {
            $.galleryImageReference = galleryImageReference;
            return this;
        }

        /**
         * @param imageReference Disk source information.
         * 
         * @return builder
         * 
         */
        public Builder imageReference(@Nullable ImageDiskReferenceResponse imageReference) {
            $.imageReference = imageReference;
            return this;
        }

        /**
         * @param logicalSectorSize Logical sector size in bytes for Ultra disks. Supported values are 512 ad 4096. 4096 is the default.
         * 
         * @return builder
         * 
         */
        public Builder logicalSectorSize(@Nullable Integer logicalSectorSize) {
            $.logicalSectorSize = logicalSectorSize;
            return this;
        }

        /**
         * @param sourceResourceId If createOption is Copy, this is the ARM id of the source snapshot or disk.
         * 
         * @return builder
         * 
         */
        public Builder sourceResourceId(@Nullable String sourceResourceId) {
            $.sourceResourceId = sourceResourceId;
            return this;
        }

        /**
         * @param sourceUniqueId If this field is set, this is the unique id identifying the source of this resource.
         * 
         * @return builder
         * 
         */
        public Builder sourceUniqueId(String sourceUniqueId) {
            $.sourceUniqueId = sourceUniqueId;
            return this;
        }

        /**
         * @param sourceUri If createOption is Import, this is the URI of a blob to be imported into a managed disk.
         * 
         * @return builder
         * 
         */
        public Builder sourceUri(@Nullable String sourceUri) {
            $.sourceUri = sourceUri;
            return this;
        }

        /**
         * @param storageAccountId Required if createOption is Import. The Azure Resource Manager identifier of the storage account containing the blob to import as a disk.
         * 
         * @return builder
         * 
         */
        public Builder storageAccountId(@Nullable String storageAccountId) {
            $.storageAccountId = storageAccountId;
            return this;
        }

        /**
         * @param uploadSizeBytes If createOption is Upload, this is the size of the contents of the upload including the VHD footer. This value should be between 20972032 (20 MiB + 512 bytes for the VHD footer) and 35183298347520 bytes (32 TiB + 512 bytes for the VHD footer).
         * 
         * @return builder
         * 
         */
        public Builder uploadSizeBytes(@Nullable Double uploadSizeBytes) {
            $.uploadSizeBytes = uploadSizeBytes;
            return this;
        }

        public CreationDataResponse build() {
            $.createOption = Objects.requireNonNull($.createOption, "expected parameter 'createOption' to be non-null");
            $.sourceUniqueId = Objects.requireNonNull($.sourceUniqueId, "expected parameter 'sourceUniqueId' to be non-null");
            return $;
        }
    }

}
