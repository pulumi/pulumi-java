// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.azurenative.network.inputs.FrontDoorMatchConditionResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Defines contents of a web application rule
 * 
 */
public final class CustomRuleResponse extends com.pulumi.resources.InvokeArgs {

    public static final CustomRuleResponse Empty = new CustomRuleResponse();

    /**
     * Describes what action to be applied when rule matches.
     * 
     */
    @Import(name="action", required=true)
    private String action;

    /**
     * @return Describes what action to be applied when rule matches.
     * 
     */
    public String action() {
        return this.action;
    }

    /**
     * Describes if the custom rule is in enabled or disabled state. Defaults to Enabled if not specified.
     * 
     */
    @Import(name="enabledState")
    private @Nullable String enabledState;

    /**
     * @return Describes if the custom rule is in enabled or disabled state. Defaults to Enabled if not specified.
     * 
     */
    public Optional<String> enabledState() {
        return Optional.ofNullable(this.enabledState);
    }

    /**
     * List of match conditions.
     * 
     */
    @Import(name="matchConditions", required=true)
    private List<FrontDoorMatchConditionResponse> matchConditions;

    /**
     * @return List of match conditions.
     * 
     */
    public List<FrontDoorMatchConditionResponse> matchConditions() {
        return this.matchConditions;
    }

    /**
     * Describes the name of the rule.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return Describes the name of the rule.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Describes priority of the rule. Rules with a lower value will be evaluated before rules with a higher value.
     * 
     */
    @Import(name="priority", required=true)
    private Integer priority;

    /**
     * @return Describes priority of the rule. Rules with a lower value will be evaluated before rules with a higher value.
     * 
     */
    public Integer priority() {
        return this.priority;
    }

    /**
     * Time window for resetting the rate limit count. Default is 1 minute.
     * 
     */
    @Import(name="rateLimitDurationInMinutes")
    private @Nullable Integer rateLimitDurationInMinutes;

    /**
     * @return Time window for resetting the rate limit count. Default is 1 minute.
     * 
     */
    public Optional<Integer> rateLimitDurationInMinutes() {
        return Optional.ofNullable(this.rateLimitDurationInMinutes);
    }

    /**
     * Number of allowed requests per client within the time window.
     * 
     */
    @Import(name="rateLimitThreshold")
    private @Nullable Integer rateLimitThreshold;

    /**
     * @return Number of allowed requests per client within the time window.
     * 
     */
    public Optional<Integer> rateLimitThreshold() {
        return Optional.ofNullable(this.rateLimitThreshold);
    }

    /**
     * Describes type of rule.
     * 
     */
    @Import(name="ruleType", required=true)
    private String ruleType;

    /**
     * @return Describes type of rule.
     * 
     */
    public String ruleType() {
        return this.ruleType;
    }

    private CustomRuleResponse() {}

    private CustomRuleResponse(CustomRuleResponse $) {
        this.action = $.action;
        this.enabledState = $.enabledState;
        this.matchConditions = $.matchConditions;
        this.name = $.name;
        this.priority = $.priority;
        this.rateLimitDurationInMinutes = $.rateLimitDurationInMinutes;
        this.rateLimitThreshold = $.rateLimitThreshold;
        this.ruleType = $.ruleType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CustomRuleResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CustomRuleResponse $;

        public Builder() {
            $ = new CustomRuleResponse();
        }

        public Builder(CustomRuleResponse defaults) {
            $ = new CustomRuleResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param action Describes what action to be applied when rule matches.
         * 
         * @return builder
         * 
         */
        public Builder action(String action) {
            $.action = action;
            return this;
        }

        /**
         * @param enabledState Describes if the custom rule is in enabled or disabled state. Defaults to Enabled if not specified.
         * 
         * @return builder
         * 
         */
        public Builder enabledState(@Nullable String enabledState) {
            $.enabledState = enabledState;
            return this;
        }

        /**
         * @param matchConditions List of match conditions.
         * 
         * @return builder
         * 
         */
        public Builder matchConditions(List<FrontDoorMatchConditionResponse> matchConditions) {
            $.matchConditions = matchConditions;
            return this;
        }

        /**
         * @param matchConditions List of match conditions.
         * 
         * @return builder
         * 
         */
        public Builder matchConditions(FrontDoorMatchConditionResponse... matchConditions) {
            return matchConditions(List.of(matchConditions));
        }

        /**
         * @param name Describes the name of the rule.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param priority Describes priority of the rule. Rules with a lower value will be evaluated before rules with a higher value.
         * 
         * @return builder
         * 
         */
        public Builder priority(Integer priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param rateLimitDurationInMinutes Time window for resetting the rate limit count. Default is 1 minute.
         * 
         * @return builder
         * 
         */
        public Builder rateLimitDurationInMinutes(@Nullable Integer rateLimitDurationInMinutes) {
            $.rateLimitDurationInMinutes = rateLimitDurationInMinutes;
            return this;
        }

        /**
         * @param rateLimitThreshold Number of allowed requests per client within the time window.
         * 
         * @return builder
         * 
         */
        public Builder rateLimitThreshold(@Nullable Integer rateLimitThreshold) {
            $.rateLimitThreshold = rateLimitThreshold;
            return this;
        }

        /**
         * @param ruleType Describes type of rule.
         * 
         * @return builder
         * 
         */
        public Builder ruleType(String ruleType) {
            $.ruleType = ruleType;
            return this;
        }

        public CustomRuleResponse build() {
            $.action = Objects.requireNonNull($.action, "expected parameter 'action' to be non-null");
            $.matchConditions = Objects.requireNonNull($.matchConditions, "expected parameter 'matchConditions' to be non-null");
            $.priority = Objects.requireNonNull($.priority, "expected parameter 'priority' to be non-null");
            $.ruleType = Objects.requireNonNull($.ruleType, "expected parameter 'ruleType' to be non-null");
            return $;
        }
    }

}
