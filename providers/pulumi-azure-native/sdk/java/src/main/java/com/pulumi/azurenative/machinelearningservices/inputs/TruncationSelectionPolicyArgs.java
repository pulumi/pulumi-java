// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.machinelearningservices.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Defines an early termination policy that cancels a given percentage of runs at each evaluation interval.
 * 
 */
public final class TruncationSelectionPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final TruncationSelectionPolicyArgs Empty = new TruncationSelectionPolicyArgs();

    /**
     * Number of intervals by which to delay the first evaluation.
     * 
     */
    @Import(name="delayEvaluation")
    private @Nullable Output<Integer> delayEvaluation;

    /**
     * @return Number of intervals by which to delay the first evaluation.
     * 
     */
    public Optional<Output<Integer>> delayEvaluation() {
        return Optional.ofNullable(this.delayEvaluation);
    }

    /**
     * Interval (number of runs) between policy evaluations.
     * 
     */
    @Import(name="evaluationInterval")
    private @Nullable Output<Integer> evaluationInterval;

    /**
     * @return Interval (number of runs) between policy evaluations.
     * 
     */
    public Optional<Output<Integer>> evaluationInterval() {
        return Optional.ofNullable(this.evaluationInterval);
    }

    /**
     * Expected value is &#39;TruncationSelection&#39;.
     * 
     */
    @Import(name="policyType", required=true)
    private Output<String> policyType;

    /**
     * @return
     * Expected value is &#39;TruncationSelection&#39;.
     * 
     */
    public Output<String> policyType() {
        return this.policyType;
    }

    /**
     * The percentage of runs to cancel at each evaluation interval.
     * 
     */
    @Import(name="truncationPercentage")
    private @Nullable Output<Integer> truncationPercentage;

    /**
     * @return The percentage of runs to cancel at each evaluation interval.
     * 
     */
    public Optional<Output<Integer>> truncationPercentage() {
        return Optional.ofNullable(this.truncationPercentage);
    }

    private TruncationSelectionPolicyArgs() {}

    private TruncationSelectionPolicyArgs(TruncationSelectionPolicyArgs $) {
        this.delayEvaluation = $.delayEvaluation;
        this.evaluationInterval = $.evaluationInterval;
        this.policyType = $.policyType;
        this.truncationPercentage = $.truncationPercentage;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TruncationSelectionPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TruncationSelectionPolicyArgs $;

        public Builder() {
            $ = new TruncationSelectionPolicyArgs();
        }

        public Builder(TruncationSelectionPolicyArgs defaults) {
            $ = new TruncationSelectionPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param delayEvaluation Number of intervals by which to delay the first evaluation.
         * 
         * @return builder
         * 
         */
        public Builder delayEvaluation(@Nullable Output<Integer> delayEvaluation) {
            $.delayEvaluation = delayEvaluation;
            return this;
        }

        /**
         * @param delayEvaluation Number of intervals by which to delay the first evaluation.
         * 
         * @return builder
         * 
         */
        public Builder delayEvaluation(Integer delayEvaluation) {
            return delayEvaluation(Output.of(delayEvaluation));
        }

        /**
         * @param evaluationInterval Interval (number of runs) between policy evaluations.
         * 
         * @return builder
         * 
         */
        public Builder evaluationInterval(@Nullable Output<Integer> evaluationInterval) {
            $.evaluationInterval = evaluationInterval;
            return this;
        }

        /**
         * @param evaluationInterval Interval (number of runs) between policy evaluations.
         * 
         * @return builder
         * 
         */
        public Builder evaluationInterval(Integer evaluationInterval) {
            return evaluationInterval(Output.of(evaluationInterval));
        }

        /**
         * @param policyType
         * Expected value is &#39;TruncationSelection&#39;.
         * 
         * @return builder
         * 
         */
        public Builder policyType(Output<String> policyType) {
            $.policyType = policyType;
            return this;
        }

        /**
         * @param policyType
         * Expected value is &#39;TruncationSelection&#39;.
         * 
         * @return builder
         * 
         */
        public Builder policyType(String policyType) {
            return policyType(Output.of(policyType));
        }

        /**
         * @param truncationPercentage The percentage of runs to cancel at each evaluation interval.
         * 
         * @return builder
         * 
         */
        public Builder truncationPercentage(@Nullable Output<Integer> truncationPercentage) {
            $.truncationPercentage = truncationPercentage;
            return this;
        }

        /**
         * @param truncationPercentage The percentage of runs to cancel at each evaluation interval.
         * 
         * @return builder
         * 
         */
        public Builder truncationPercentage(Integer truncationPercentage) {
            return truncationPercentage(Output.of(truncationPercentage));
        }

        public TruncationSelectionPolicyArgs build() {
            $.policyType = Codegen.stringProp("policyType").output().arg($.policyType).require();
            return $;
        }
    }

}
