// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.managedservices.inputs;

import com.pulumi.azurenative.managedservices.inputs.AuthorizationResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Properties of a registration definition.
 * 
 */
public final class RegistrationDefinitionPropertiesResponse extends com.pulumi.resources.InvokeArgs {

    public static final RegistrationDefinitionPropertiesResponse Empty = new RegistrationDefinitionPropertiesResponse();

    /**
     * Authorization tuple containing principal id of the user/security group or service principal and id of the build-in role.
     * 
     */
    @Import(name="authorizations", required=true)
    private List<AuthorizationResponse> authorizations;

    public List<AuthorizationResponse> authorizations() {
        return this.authorizations;
    }

    /**
     * Description of the registration definition.
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Id of the managedBy tenant.
     * 
     */
    @Import(name="managedByTenantId", required=true)
    private String managedByTenantId;

    public String managedByTenantId() {
        return this.managedByTenantId;
    }

    /**
     * Name of the managedBy tenant.
     * 
     */
    @Import(name="managedByTenantName", required=true)
    private String managedByTenantName;

    public String managedByTenantName() {
        return this.managedByTenantName;
    }

    /**
     * Current state of the registration definition.
     * 
     */
    @Import(name="provisioningState", required=true)
    private String provisioningState;

    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Name of the registration definition.
     * 
     */
    @Import(name="registrationDefinitionName")
    private @Nullable String registrationDefinitionName;

    public Optional<String> registrationDefinitionName() {
        return Optional.ofNullable(this.registrationDefinitionName);
    }

    private RegistrationDefinitionPropertiesResponse() {}

    private RegistrationDefinitionPropertiesResponse(RegistrationDefinitionPropertiesResponse $) {
        this.authorizations = $.authorizations;
        this.description = $.description;
        this.managedByTenantId = $.managedByTenantId;
        this.managedByTenantName = $.managedByTenantName;
        this.provisioningState = $.provisioningState;
        this.registrationDefinitionName = $.registrationDefinitionName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RegistrationDefinitionPropertiesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RegistrationDefinitionPropertiesResponse $;

        public Builder() {
            $ = new RegistrationDefinitionPropertiesResponse();
        }

        public Builder(RegistrationDefinitionPropertiesResponse defaults) {
            $ = new RegistrationDefinitionPropertiesResponse(Objects.requireNonNull(defaults));
        }

        public Builder authorizations(List<AuthorizationResponse> authorizations) {
            $.authorizations = authorizations;
            return this;
        }

        public Builder authorizations(AuthorizationResponse... authorizations) {
            return authorizations(List.of(authorizations));
        }

        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        public Builder managedByTenantId(String managedByTenantId) {
            $.managedByTenantId = managedByTenantId;
            return this;
        }

        public Builder managedByTenantName(String managedByTenantName) {
            $.managedByTenantName = managedByTenantName;
            return this;
        }

        public Builder provisioningState(String provisioningState) {
            $.provisioningState = provisioningState;
            return this;
        }

        public Builder registrationDefinitionName(@Nullable String registrationDefinitionName) {
            $.registrationDefinitionName = registrationDefinitionName;
            return this;
        }

        public RegistrationDefinitionPropertiesResponse build() {
            $.authorizations = Objects.requireNonNull($.authorizations, "expected parameter 'authorizations' to be non-null");
            $.managedByTenantId = Objects.requireNonNull($.managedByTenantId, "expected parameter 'managedByTenantId' to be non-null");
            $.managedByTenantName = Objects.requireNonNull($.managedByTenantName, "expected parameter 'managedByTenantName' to be non-null");
            $.provisioningState = Objects.requireNonNull($.provisioningState, "expected parameter 'provisioningState' to be non-null");
            return $;
        }
    }

}
