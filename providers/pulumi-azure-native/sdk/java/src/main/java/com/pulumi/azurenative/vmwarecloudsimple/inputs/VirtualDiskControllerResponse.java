// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.vmwarecloudsimple.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * Virtual disk controller model
 * 
 */
public final class VirtualDiskControllerResponse extends com.pulumi.resources.InvokeArgs {

    public static final VirtualDiskControllerResponse Empty = new VirtualDiskControllerResponse();

    /**
     * Controller&#39;s id
     * 
     */
    @Import(name="id", required=true)
    private String id;

    public String id() {
        return this.id;
    }

    /**
     * The display name of Controller
     * 
     */
    @Import(name="name", required=true)
    private String name;

    public String name() {
        return this.name;
    }

    /**
     * dik controller subtype (VMWARE_PARAVIRTUAL, BUS_PARALLEL, LSI_PARALLEL, LSI_SAS)
     * 
     */
    @Import(name="subType", required=true)
    private String subType;

    public String subType() {
        return this.subType;
    }

    /**
     * disk controller type (SCSI)
     * 
     */
    @Import(name="type", required=true)
    private String type;

    public String type() {
        return this.type;
    }

    private VirtualDiskControllerResponse() {}

    private VirtualDiskControllerResponse(VirtualDiskControllerResponse $) {
        this.id = $.id;
        this.name = $.name;
        this.subType = $.subType;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VirtualDiskControllerResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VirtualDiskControllerResponse $;

        public Builder() {
            $ = new VirtualDiskControllerResponse();
        }

        public Builder(VirtualDiskControllerResponse defaults) {
            $ = new VirtualDiskControllerResponse(Objects.requireNonNull(defaults));
        }

        public Builder id(String id) {
            $.id = id;
            return this;
        }

        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public Builder subType(String subType) {
            $.subType = subType;
            return this;
        }

        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public VirtualDiskControllerResponse build() {
            $.id = Objects.requireNonNull($.id, "expected parameter 'id' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.subType = Objects.requireNonNull($.subType, "expected parameter 'subType' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
