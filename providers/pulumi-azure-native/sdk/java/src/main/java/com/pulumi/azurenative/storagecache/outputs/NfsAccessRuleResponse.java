// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.storagecache.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class NfsAccessRuleResponse {
    /**
     * @return Access allowed by this rule.
     * 
     */
    private final String access;
    /**
     * @return GID value that replaces 0 when rootSquash is true. This will use the value of anonymousUID if not provided.
     * 
     */
    private final @Nullable String anonymousGID;
    /**
     * @return UID value that replaces 0 when rootSquash is true. 65534 will be used if not provided.
     * 
     */
    private final @Nullable String anonymousUID;
    /**
     * @return Filter applied to the scope for this rule. The filter&#39;s format depends on its scope. &#39;default&#39; scope matches all clients and has no filter value. &#39;network&#39; scope takes a filter in CIDR format (for example, 10.99.1.0/24). &#39;host&#39; takes an IP address or fully qualified domain name as filter. If a client does not match any filter rule and there is no default rule, access is denied.
     * 
     */
    private final @Nullable String filter;
    /**
     * @return Map root accesses to anonymousUID and anonymousGID.
     * 
     */
    private final @Nullable Boolean rootSquash;
    /**
     * @return Scope for this rule. The scope and filter determine which clients match the rule.
     * 
     */
    private final String scope;
    /**
     * @return For the default policy, allow access to subdirectories under the root export. If this is set to no, clients can only mount the path &#39;/&#39;. If set to yes, clients can mount a deeper path, like &#39;/a/b&#39;.
     * 
     */
    private final @Nullable Boolean submountAccess;
    /**
     * @return Allow SUID semantics.
     * 
     */
    private final @Nullable Boolean suid;

    @CustomType.Constructor
    private NfsAccessRuleResponse(
        @CustomType.Parameter("access") String access,
        @CustomType.Parameter("anonymousGID") @Nullable String anonymousGID,
        @CustomType.Parameter("anonymousUID") @Nullable String anonymousUID,
        @CustomType.Parameter("filter") @Nullable String filter,
        @CustomType.Parameter("rootSquash") @Nullable Boolean rootSquash,
        @CustomType.Parameter("scope") String scope,
        @CustomType.Parameter("submountAccess") @Nullable Boolean submountAccess,
        @CustomType.Parameter("suid") @Nullable Boolean suid) {
        this.access = access;
        this.anonymousGID = anonymousGID;
        this.anonymousUID = anonymousUID;
        this.filter = filter;
        this.rootSquash = rootSquash;
        this.scope = scope;
        this.submountAccess = submountAccess;
        this.suid = suid;
    }

    /**
     * @return Access allowed by this rule.
     * 
     */
    public String access() {
        return this.access;
    }
    /**
     * @return GID value that replaces 0 when rootSquash is true. This will use the value of anonymousUID if not provided.
     * 
     */
    public Optional<String> anonymousGID() {
        return Optional.ofNullable(this.anonymousGID);
    }
    /**
     * @return UID value that replaces 0 when rootSquash is true. 65534 will be used if not provided.
     * 
     */
    public Optional<String> anonymousUID() {
        return Optional.ofNullable(this.anonymousUID);
    }
    /**
     * @return Filter applied to the scope for this rule. The filter&#39;s format depends on its scope. &#39;default&#39; scope matches all clients and has no filter value. &#39;network&#39; scope takes a filter in CIDR format (for example, 10.99.1.0/24). &#39;host&#39; takes an IP address or fully qualified domain name as filter. If a client does not match any filter rule and there is no default rule, access is denied.
     * 
     */
    public Optional<String> filter() {
        return Optional.ofNullable(this.filter);
    }
    /**
     * @return Map root accesses to anonymousUID and anonymousGID.
     * 
     */
    public Optional<Boolean> rootSquash() {
        return Optional.ofNullable(this.rootSquash);
    }
    /**
     * @return Scope for this rule. The scope and filter determine which clients match the rule.
     * 
     */
    public String scope() {
        return this.scope;
    }
    /**
     * @return For the default policy, allow access to subdirectories under the root export. If this is set to no, clients can only mount the path &#39;/&#39;. If set to yes, clients can mount a deeper path, like &#39;/a/b&#39;.
     * 
     */
    public Optional<Boolean> submountAccess() {
        return Optional.ofNullable(this.submountAccess);
    }
    /**
     * @return Allow SUID semantics.
     * 
     */
    public Optional<Boolean> suid() {
        return Optional.ofNullable(this.suid);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NfsAccessRuleResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String access;
        private @Nullable String anonymousGID;
        private @Nullable String anonymousUID;
        private @Nullable String filter;
        private @Nullable Boolean rootSquash;
        private String scope;
        private @Nullable Boolean submountAccess;
        private @Nullable Boolean suid;

        public Builder() {
    	      // Empty
        }

        public Builder(NfsAccessRuleResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.access = defaults.access;
    	      this.anonymousGID = defaults.anonymousGID;
    	      this.anonymousUID = defaults.anonymousUID;
    	      this.filter = defaults.filter;
    	      this.rootSquash = defaults.rootSquash;
    	      this.scope = defaults.scope;
    	      this.submountAccess = defaults.submountAccess;
    	      this.suid = defaults.suid;
        }

        public Builder access(String access) {
            this.access = Objects.requireNonNull(access);
            return this;
        }
        public Builder anonymousGID(@Nullable String anonymousGID) {
            this.anonymousGID = anonymousGID;
            return this;
        }
        public Builder anonymousUID(@Nullable String anonymousUID) {
            this.anonymousUID = anonymousUID;
            return this;
        }
        public Builder filter(@Nullable String filter) {
            this.filter = filter;
            return this;
        }
        public Builder rootSquash(@Nullable Boolean rootSquash) {
            this.rootSquash = rootSquash;
            return this;
        }
        public Builder scope(String scope) {
            this.scope = Objects.requireNonNull(scope);
            return this;
        }
        public Builder submountAccess(@Nullable Boolean submountAccess) {
            this.submountAccess = submountAccess;
            return this;
        }
        public Builder suid(@Nullable Boolean suid) {
            this.suid = suid;
            return this;
        }        public NfsAccessRuleResponse build() {
            return new NfsAccessRuleResponse(access, anonymousGID, anonymousUID, filter, rootSquash, scope, submountAccess, suid);
        }
    }
}
