// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.machinelearningservices.inputs;

import com.pulumi.azurenative.machinelearningservices.inputs.AmlTokenResponse;
import com.pulumi.azurenative.machinelearningservices.inputs.BanditPolicyResponse;
import com.pulumi.azurenative.machinelearningservices.inputs.ComputeConfigurationResponse;
import com.pulumi.azurenative.machinelearningservices.inputs.JobEndpointResponse;
import com.pulumi.azurenative.machinelearningservices.inputs.JobOutputResponse;
import com.pulumi.azurenative.machinelearningservices.inputs.ManagedIdentityResponse;
import com.pulumi.azurenative.machinelearningservices.inputs.MedianStoppingPolicyResponse;
import com.pulumi.azurenative.machinelearningservices.inputs.ObjectiveResponse;
import com.pulumi.azurenative.machinelearningservices.inputs.TrialComponentResponse;
import com.pulumi.azurenative.machinelearningservices.inputs.TruncationSelectionPolicyResponse;
import com.pulumi.core.Either;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Sweep job definition.
 * 
 */
public final class SweepJobResponse extends com.pulumi.resources.InvokeArgs {

    public static final SweepJobResponse Empty = new SweepJobResponse();

    /**
     * Type of the hyperparameter sampling algorithms
     * 
     */
    @Import(name="algorithm", required=true)
    private String algorithm;

    public String algorithm() {
        return this.algorithm;
    }

    /**
     * Compute binding for the job.
     * 
     */
    @Import(name="compute", required=true)
    private ComputeConfigurationResponse compute;

    public ComputeConfigurationResponse compute() {
        return this.compute;
    }

    /**
     * The asset description text.
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Early termination policies enable canceling poor-performing runs before they complete.
     * 
     */
    @Import(name="earlyTermination")
    private @Nullable Object earlyTermination;

    public Optional<Object> earlyTermination() {
        return Optional.ofNullable(this.earlyTermination);
    }

    /**
     * The name of the experiment the job belongs to. If not set, the job is placed in the &#34;Default&#34; experiment.
     * 
     */
    @Import(name="experimentName")
    private @Nullable String experimentName;

    public Optional<String> experimentName() {
        return Optional.ofNullable(this.experimentName);
    }

    /**
     * Identity configuration. If set, this should be one of AmlToken, ManagedIdentity or null.
     * Defaults to AmlToken if null.
     * 
     */
    @Import(name="identity")
    private @Nullable Either<AmlTokenResponse,ManagedIdentityResponse> identity;

    public Optional<Either<AmlTokenResponse,ManagedIdentityResponse>> identity() {
        return Optional.ofNullable(this.identity);
    }

    /**
     * List of JobEndpoints.
     * For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
     * 
     */
    @Import(name="interactionEndpoints", required=true)
    private Map<String,JobEndpointResponse> interactionEndpoints;

    public Map<String,JobEndpointResponse> interactionEndpoints() {
        return this.interactionEndpoints;
    }

    /**
     * Enum to determine the type of job.
     * Expected value is &#39;Sweep&#39;.
     * 
     */
    @Import(name="jobType", required=true)
    private String jobType;

    public String jobType() {
        return this.jobType;
    }

    /**
     * An upper bound on the number of trials performed in parallel.
     * 
     */
    @Import(name="maxConcurrentTrials")
    private @Nullable Integer maxConcurrentTrials;

    public Optional<Integer> maxConcurrentTrials() {
        return Optional.ofNullable(this.maxConcurrentTrials);
    }

    /**
     * An upper bound on the number of trials to perform.
     * 
     */
    @Import(name="maxTotalTrials")
    private @Nullable Integer maxTotalTrials;

    public Optional<Integer> maxTotalTrials() {
        return Optional.ofNullable(this.maxTotalTrials);
    }

    /**
     * Optimization objective.
     * 
     */
    @Import(name="objective", required=true)
    private ObjectiveResponse objective;

    public ObjectiveResponse objective() {
        return this.objective;
    }

    /**
     * Location of the job output logs and artifacts.
     * 
     */
    @Import(name="output", required=true)
    private JobOutputResponse output;

    public JobOutputResponse output() {
        return this.output;
    }

    /**
     * Job priority for scheduling policy. Only applies to AMLCompute.
     * Private preview feature and only available to users on the allow list.
     * 
     */
    @Import(name="priority")
    private @Nullable Integer priority;

    public Optional<Integer> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * The asset property dictionary.
     * 
     */
    @Import(name="properties")
    private @Nullable Map<String,String> properties;

    public Optional<Map<String,String>> properties() {
        return Optional.ofNullable(this.properties);
    }

    /**
     * Specifies the job provisioning state.
     * 
     */
    @Import(name="provisioningState", required=true)
    private String provisioningState;

    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * A dictionary containing each parameter and its distribution. The dictionary key is the name of the parameter
     * 
     */
    @Import(name="searchSpace", required=true)
    private Map<String,Object> searchSpace;

    public Map<String,Object> searchSpace() {
        return this.searchSpace;
    }

    /**
     * The status of a job.
     * 
     */
    @Import(name="status", required=true)
    private String status;

    public String status() {
        return this.status;
    }

    /**
     * Tag dictionary. Tags can be added, removed, and updated.
     * 
     */
    @Import(name="tags")
    private @Nullable Map<String,String> tags;

    public Optional<Map<String,String>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The total timeout in ISO 8601 format. Only supports duration with precision as low as Minutes.
     * 
     */
    @Import(name="timeout")
    private @Nullable String timeout;

    public Optional<String> timeout() {
        return Optional.ofNullable(this.timeout);
    }

    /**
     * Trial component definition.
     * 
     */
    @Import(name="trial")
    private @Nullable TrialComponentResponse trial;

    public Optional<TrialComponentResponse> trial() {
        return Optional.ofNullable(this.trial);
    }

    private SweepJobResponse() {}

    private SweepJobResponse(SweepJobResponse $) {
        this.algorithm = $.algorithm;
        this.compute = $.compute;
        this.description = $.description;
        this.earlyTermination = $.earlyTermination;
        this.experimentName = $.experimentName;
        this.identity = $.identity;
        this.interactionEndpoints = $.interactionEndpoints;
        this.jobType = $.jobType;
        this.maxConcurrentTrials = $.maxConcurrentTrials;
        this.maxTotalTrials = $.maxTotalTrials;
        this.objective = $.objective;
        this.output = $.output;
        this.priority = $.priority;
        this.properties = $.properties;
        this.provisioningState = $.provisioningState;
        this.searchSpace = $.searchSpace;
        this.status = $.status;
        this.tags = $.tags;
        this.timeout = $.timeout;
        this.trial = $.trial;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SweepJobResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SweepJobResponse $;

        public Builder() {
            $ = new SweepJobResponse();
        }

        public Builder(SweepJobResponse defaults) {
            $ = new SweepJobResponse(Objects.requireNonNull(defaults));
        }

        public Builder algorithm(String algorithm) {
            $.algorithm = algorithm;
            return this;
        }

        public Builder compute(ComputeConfigurationResponse compute) {
            $.compute = compute;
            return this;
        }

        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        public Builder earlyTermination(@Nullable Object earlyTermination) {
            $.earlyTermination = earlyTermination;
            return this;
        }

        public Builder experimentName(@Nullable String experimentName) {
            $.experimentName = experimentName;
            return this;
        }

        public Builder identity(@Nullable Either<AmlTokenResponse,ManagedIdentityResponse> identity) {
            $.identity = identity;
            return this;
        }

        public Builder identity(AmlTokenResponse identity) {
            return identity(Either.ofLeft(identity));
        }

        public Builder identity(ManagedIdentityResponse identity) {
            return identity(Either.ofRight(identity));
        }

        public Builder interactionEndpoints(Map<String,JobEndpointResponse> interactionEndpoints) {
            $.interactionEndpoints = interactionEndpoints;
            return this;
        }

        public Builder jobType(String jobType) {
            $.jobType = jobType;
            return this;
        }

        public Builder maxConcurrentTrials(@Nullable Integer maxConcurrentTrials) {
            $.maxConcurrentTrials = maxConcurrentTrials;
            return this;
        }

        public Builder maxTotalTrials(@Nullable Integer maxTotalTrials) {
            $.maxTotalTrials = maxTotalTrials;
            return this;
        }

        public Builder objective(ObjectiveResponse objective) {
            $.objective = objective;
            return this;
        }

        public Builder output(JobOutputResponse output) {
            $.output = output;
            return this;
        }

        public Builder priority(@Nullable Integer priority) {
            $.priority = priority;
            return this;
        }

        public Builder properties(@Nullable Map<String,String> properties) {
            $.properties = properties;
            return this;
        }

        public Builder provisioningState(String provisioningState) {
            $.provisioningState = provisioningState;
            return this;
        }

        public Builder searchSpace(Map<String,Object> searchSpace) {
            $.searchSpace = searchSpace;
            return this;
        }

        public Builder status(String status) {
            $.status = status;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            $.tags = tags;
            return this;
        }

        public Builder timeout(@Nullable String timeout) {
            $.timeout = timeout;
            return this;
        }

        public Builder trial(@Nullable TrialComponentResponse trial) {
            $.trial = trial;
            return this;
        }

        public SweepJobResponse build() {
            $.algorithm = Objects.requireNonNull($.algorithm, "expected parameter 'algorithm' to be non-null");
            $.compute = Objects.requireNonNull($.compute, "expected parameter 'compute' to be non-null");
            $.interactionEndpoints = Objects.requireNonNull($.interactionEndpoints, "expected parameter 'interactionEndpoints' to be non-null");
            $.jobType = Codegen.stringProp("jobType").arg($.jobType).require();
            $.objective = Objects.requireNonNull($.objective, "expected parameter 'objective' to be non-null");
            $.output = Objects.requireNonNull($.output, "expected parameter 'output' to be non-null");
            $.provisioningState = Objects.requireNonNull($.provisioningState, "expected parameter 'provisioningState' to be non-null");
            $.searchSpace = Objects.requireNonNull($.searchSpace, "expected parameter 'searchSpace' to be non-null");
            $.status = Objects.requireNonNull($.status, "expected parameter 'status' to be non-null");
            return $;
        }
    }

}
