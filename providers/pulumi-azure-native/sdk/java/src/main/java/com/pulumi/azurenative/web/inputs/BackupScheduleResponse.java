// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.web.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Description of a backup schedule. Describes how often should be the backup performed and what should be the retention policy.
 * 
 */
public final class BackupScheduleResponse extends com.pulumi.resources.InvokeArgs {

    public static final BackupScheduleResponse Empty = new BackupScheduleResponse();

    /**
     * How often the backup should be executed (e.g. for weekly backup, this should be set to 7 and FrequencyUnit should be set to Day)
     * 
     */
    @Import(name="frequencyInterval", required=true)
    private Integer frequencyInterval;

    public Integer frequencyInterval() {
        return this.frequencyInterval;
    }

    /**
     * The unit of time for how often the backup should be executed (e.g. for weekly backup, this should be set to Day and FrequencyInterval should be set to 7)
     * 
     */
    @Import(name="frequencyUnit", required=true)
    private String frequencyUnit;

    public String frequencyUnit() {
        return this.frequencyUnit;
    }

    /**
     * True if the retention policy should always keep at least one backup in the storage account, regardless how old it is; false otherwise.
     * 
     */
    @Import(name="keepAtLeastOneBackup", required=true)
    private Boolean keepAtLeastOneBackup;

    public Boolean keepAtLeastOneBackup() {
        return this.keepAtLeastOneBackup;
    }

    /**
     * Last time when this schedule was triggered.
     * 
     */
    @Import(name="lastExecutionTime", required=true)
    private String lastExecutionTime;

    public String lastExecutionTime() {
        return this.lastExecutionTime;
    }

    /**
     * After how many days backups should be deleted.
     * 
     */
    @Import(name="retentionPeriodInDays", required=true)
    private Integer retentionPeriodInDays;

    public Integer retentionPeriodInDays() {
        return this.retentionPeriodInDays;
    }

    /**
     * When the schedule should start working.
     * 
     */
    @Import(name="startTime")
    private @Nullable String startTime;

    public Optional<String> startTime() {
        return Optional.ofNullable(this.startTime);
    }

    private BackupScheduleResponse() {}

    private BackupScheduleResponse(BackupScheduleResponse $) {
        this.frequencyInterval = $.frequencyInterval;
        this.frequencyUnit = $.frequencyUnit;
        this.keepAtLeastOneBackup = $.keepAtLeastOneBackup;
        this.lastExecutionTime = $.lastExecutionTime;
        this.retentionPeriodInDays = $.retentionPeriodInDays;
        this.startTime = $.startTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BackupScheduleResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BackupScheduleResponse $;

        public Builder() {
            $ = new BackupScheduleResponse();
        }

        public Builder(BackupScheduleResponse defaults) {
            $ = new BackupScheduleResponse(Objects.requireNonNull(defaults));
        }

        public Builder frequencyInterval(Integer frequencyInterval) {
            $.frequencyInterval = frequencyInterval;
            return this;
        }

        public Builder frequencyUnit(String frequencyUnit) {
            $.frequencyUnit = frequencyUnit;
            return this;
        }

        public Builder keepAtLeastOneBackup(Boolean keepAtLeastOneBackup) {
            $.keepAtLeastOneBackup = keepAtLeastOneBackup;
            return this;
        }

        public Builder lastExecutionTime(String lastExecutionTime) {
            $.lastExecutionTime = lastExecutionTime;
            return this;
        }

        public Builder retentionPeriodInDays(Integer retentionPeriodInDays) {
            $.retentionPeriodInDays = retentionPeriodInDays;
            return this;
        }

        public Builder startTime(@Nullable String startTime) {
            $.startTime = startTime;
            return this;
        }

        public BackupScheduleResponse build() {
            $.frequencyInterval = Codegen.integerProp("frequencyInterval").arg($.frequencyInterval).def(7).require();
            $.frequencyUnit = Codegen.stringProp("frequencyUnit").arg($.frequencyUnit).def("Day").require();
            $.keepAtLeastOneBackup = Codegen.booleanProp("keepAtLeastOneBackup").arg($.keepAtLeastOneBackup).def(true).require();
            $.lastExecutionTime = Objects.requireNonNull($.lastExecutionTime, "expected parameter 'lastExecutionTime' to be non-null");
            $.retentionPeriodInDays = Codegen.integerProp("retentionPeriodInDays").arg($.retentionPeriodInDays).def(30).require();
            return $;
        }
    }

}
