// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.domainregistration.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ListTopLevelDomainAgreementsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final ListTopLevelDomainAgreementsPlainArgs Empty = new ListTopLevelDomainAgreementsPlainArgs();

    /**
     * If &lt;code&gt;true&lt;/code&gt;, then the list of agreements will include agreements for domain transfer as well; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    @Import(name="forTransfer")
    private @Nullable Boolean forTransfer;

    /**
     * @return If &lt;code&gt;true&lt;/code&gt;, then the list of agreements will include agreements for domain transfer as well; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    public Optional<Boolean> forTransfer() {
        return Optional.ofNullable(this.forTransfer);
    }

    /**
     * If &lt;code&gt;true&lt;/code&gt;, then the list of agreements will include agreements for domain privacy as well; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    @Import(name="includePrivacy")
    private @Nullable Boolean includePrivacy;

    /**
     * @return If &lt;code&gt;true&lt;/code&gt;, then the list of agreements will include agreements for domain privacy as well; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    public Optional<Boolean> includePrivacy() {
        return Optional.ofNullable(this.includePrivacy);
    }

    /**
     * Name of the top-level domain.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return Name of the top-level domain.
     * 
     */
    public String name() {
        return this.name;
    }

    private ListTopLevelDomainAgreementsPlainArgs() {}

    private ListTopLevelDomainAgreementsPlainArgs(ListTopLevelDomainAgreementsPlainArgs $) {
        this.forTransfer = $.forTransfer;
        this.includePrivacy = $.includePrivacy;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ListTopLevelDomainAgreementsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ListTopLevelDomainAgreementsPlainArgs $;

        public Builder() {
            $ = new ListTopLevelDomainAgreementsPlainArgs();
        }

        public Builder(ListTopLevelDomainAgreementsPlainArgs defaults) {
            $ = new ListTopLevelDomainAgreementsPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param forTransfer If &lt;code&gt;true&lt;/code&gt;, then the list of agreements will include agreements for domain transfer as well; otherwise, &lt;code&gt;false&lt;/code&gt;.
         * 
         * @return builder
         * 
         */
        public Builder forTransfer(@Nullable Boolean forTransfer) {
            $.forTransfer = forTransfer;
            return this;
        }

        /**
         * @param includePrivacy If &lt;code&gt;true&lt;/code&gt;, then the list of agreements will include agreements for domain privacy as well; otherwise, &lt;code&gt;false&lt;/code&gt;.
         * 
         * @return builder
         * 
         */
        public Builder includePrivacy(@Nullable Boolean includePrivacy) {
            $.includePrivacy = includePrivacy;
            return this;
        }

        /**
         * @param name Name of the top-level domain.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public ListTopLevelDomainAgreementsPlainArgs build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            return $;
        }
    }

}
