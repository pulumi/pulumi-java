// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.mobilenetwork.outputs;

import com.pulumi.azurenative.mobilenetwork.outputs.AttachedDataNetworkResourceIdResponse;
import com.pulumi.azurenative.mobilenetwork.outputs.SimStaticIpPropertiesResponseStaticIp;
import com.pulumi.azurenative.mobilenetwork.outputs.SliceResourceIdResponse;
import com.pulumi.core.annotations.CustomType;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SimStaticIpPropertiesResponse {
    /**
     * @return The attached data network on which the static IP address will be used. The combination of attachedDataNetwork and slice defines the network scope of the IP address.
     * 
     */
    private final @Nullable AttachedDataNetworkResourceIdResponse attachedDataNetwork;
    /**
     * @return The network slice on which the static IP address will be used. The combination of attachedDataNetwork and slice defines the network scope of the IP address.
     * 
     */
    private final @Nullable SliceResourceIdResponse slice;
    /**
     * @return The static IP configuration for the sim to use at the defined network scope.
     * 
     */
    private final @Nullable SimStaticIpPropertiesResponseStaticIp staticIp;

    @CustomType.Constructor
    private SimStaticIpPropertiesResponse(
        @CustomType.Parameter("attachedDataNetwork") @Nullable AttachedDataNetworkResourceIdResponse attachedDataNetwork,
        @CustomType.Parameter("slice") @Nullable SliceResourceIdResponse slice,
        @CustomType.Parameter("staticIp") @Nullable SimStaticIpPropertiesResponseStaticIp staticIp) {
        this.attachedDataNetwork = attachedDataNetwork;
        this.slice = slice;
        this.staticIp = staticIp;
    }

    /**
     * @return The attached data network on which the static IP address will be used. The combination of attachedDataNetwork and slice defines the network scope of the IP address.
     * 
     */
    public Optional<AttachedDataNetworkResourceIdResponse> attachedDataNetwork() {
        return Optional.ofNullable(this.attachedDataNetwork);
    }
    /**
     * @return The network slice on which the static IP address will be used. The combination of attachedDataNetwork and slice defines the network scope of the IP address.
     * 
     */
    public Optional<SliceResourceIdResponse> slice() {
        return Optional.ofNullable(this.slice);
    }
    /**
     * @return The static IP configuration for the sim to use at the defined network scope.
     * 
     */
    public Optional<SimStaticIpPropertiesResponseStaticIp> staticIp() {
        return Optional.ofNullable(this.staticIp);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SimStaticIpPropertiesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable AttachedDataNetworkResourceIdResponse attachedDataNetwork;
        private @Nullable SliceResourceIdResponse slice;
        private @Nullable SimStaticIpPropertiesResponseStaticIp staticIp;

        public Builder() {
    	      // Empty
        }

        public Builder(SimStaticIpPropertiesResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.attachedDataNetwork = defaults.attachedDataNetwork;
    	      this.slice = defaults.slice;
    	      this.staticIp = defaults.staticIp;
        }

        public Builder attachedDataNetwork(@Nullable AttachedDataNetworkResourceIdResponse attachedDataNetwork) {
            this.attachedDataNetwork = attachedDataNetwork;
            return this;
        }
        public Builder slice(@Nullable SliceResourceIdResponse slice) {
            this.slice = slice;
            return this;
        }
        public Builder staticIp(@Nullable SimStaticIpPropertiesResponseStaticIp staticIp) {
            this.staticIp = staticIp;
            return this;
        }        public SimStaticIpPropertiesResponse build() {
            return new SimStaticIpPropertiesResponse(attachedDataNetwork, slice, staticIp);
        }
    }
}
