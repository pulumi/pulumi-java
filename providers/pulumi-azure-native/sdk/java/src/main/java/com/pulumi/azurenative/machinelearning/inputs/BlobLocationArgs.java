// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.machinelearning.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Describes the access location for a blob.
 * 
 */
public final class BlobLocationArgs extends com.pulumi.resources.ResourceArgs {

    public static final BlobLocationArgs Empty = new BlobLocationArgs();

    /**
     * Access credentials for the blob, if applicable (e.g. blob specified by storage account connection string + blob URI)
     * 
     */
    @Import(name="credentials")
    private @Nullable Output<String> credentials;

    /**
     * @return Access credentials for the blob, if applicable (e.g. blob specified by storage account connection string + blob URI)
     * 
     */
    public Optional<Output<String>> credentials() {
        return Optional.ofNullable(this.credentials);
    }

    /**
     * The URI from which the blob is accessible from. For example, aml://abc for system assets or https://xyz for user assets or payload.
     * 
     */
    @Import(name="uri", required=true)
    private Output<String> uri;

    /**
     * @return The URI from which the blob is accessible from. For example, aml://abc for system assets or https://xyz for user assets or payload.
     * 
     */
    public Output<String> uri() {
        return this.uri;
    }

    private BlobLocationArgs() {}

    private BlobLocationArgs(BlobLocationArgs $) {
        this.credentials = $.credentials;
        this.uri = $.uri;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BlobLocationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BlobLocationArgs $;

        public Builder() {
            $ = new BlobLocationArgs();
        }

        public Builder(BlobLocationArgs defaults) {
            $ = new BlobLocationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param credentials Access credentials for the blob, if applicable (e.g. blob specified by storage account connection string + blob URI)
         * 
         * @return builder
         * 
         */
        public Builder credentials(@Nullable Output<String> credentials) {
            $.credentials = credentials;
            return this;
        }

        /**
         * @param credentials Access credentials for the blob, if applicable (e.g. blob specified by storage account connection string + blob URI)
         * 
         * @return builder
         * 
         */
        public Builder credentials(String credentials) {
            return credentials(Output.of(credentials));
        }

        /**
         * @param uri The URI from which the blob is accessible from. For example, aml://abc for system assets or https://xyz for user assets or payload.
         * 
         * @return builder
         * 
         */
        public Builder uri(Output<String> uri) {
            $.uri = uri;
            return this;
        }

        /**
         * @param uri The URI from which the blob is accessible from. For example, aml://abc for system assets or https://xyz for user assets or payload.
         * 
         * @return builder
         * 
         */
        public Builder uri(String uri) {
            return uri(Output.of(uri));
        }

        public BlobLocationArgs build() {
            $.uri = Objects.requireNonNull($.uri, "expected parameter 'uri' to be non-null");
            return $;
        }
    }

}
