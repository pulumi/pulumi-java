// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;


/**
 * VPN client connection health detail.
 * 
 */
public final class VpnClientConnectionHealthDetailResponse extends com.pulumi.resources.InvokeArgs {

    public static final VpnClientConnectionHealthDetailResponse Empty = new VpnClientConnectionHealthDetailResponse();

    /**
     * The egress bytes per second.
     * 
     */
    @Import(name="egressBytesTransferred", required=true)
    private Double egressBytesTransferred;

    public Double egressBytesTransferred() {
        return this.egressBytesTransferred;
    }

    /**
     * The egress packets per second.
     * 
     */
    @Import(name="egressPacketsTransferred", required=true)
    private Double egressPacketsTransferred;

    public Double egressPacketsTransferred() {
        return this.egressPacketsTransferred;
    }

    /**
     * The ingress bytes per second.
     * 
     */
    @Import(name="ingressBytesTransferred", required=true)
    private Double ingressBytesTransferred;

    public Double ingressBytesTransferred() {
        return this.ingressBytesTransferred;
    }

    /**
     * The ingress packets per second.
     * 
     */
    @Import(name="ingressPacketsTransferred", required=true)
    private Double ingressPacketsTransferred;

    public Double ingressPacketsTransferred() {
        return this.ingressPacketsTransferred;
    }

    /**
     * The max band width.
     * 
     */
    @Import(name="maxBandwidth", required=true)
    private Double maxBandwidth;

    public Double maxBandwidth() {
        return this.maxBandwidth;
    }

    /**
     * The max packets transferred per second.
     * 
     */
    @Import(name="maxPacketsPerSecond", required=true)
    private Double maxPacketsPerSecond;

    public Double maxPacketsPerSecond() {
        return this.maxPacketsPerSecond;
    }

    /**
     * The assigned private Ip of a connected vpn client.
     * 
     */
    @Import(name="privateIpAddress", required=true)
    private String privateIpAddress;

    public String privateIpAddress() {
        return this.privateIpAddress;
    }

    /**
     * The public Ip of a connected vpn client.
     * 
     */
    @Import(name="publicIpAddress", required=true)
    private String publicIpAddress;

    public String publicIpAddress() {
        return this.publicIpAddress;
    }

    /**
     * The duration time of a connected vpn client.
     * 
     */
    @Import(name="vpnConnectionDuration", required=true)
    private Double vpnConnectionDuration;

    public Double vpnConnectionDuration() {
        return this.vpnConnectionDuration;
    }

    /**
     * The vpn client Id.
     * 
     */
    @Import(name="vpnConnectionId", required=true)
    private String vpnConnectionId;

    public String vpnConnectionId() {
        return this.vpnConnectionId;
    }

    /**
     * The start time of a connected vpn client.
     * 
     */
    @Import(name="vpnConnectionTime", required=true)
    private String vpnConnectionTime;

    public String vpnConnectionTime() {
        return this.vpnConnectionTime;
    }

    /**
     * The user name of a connected vpn client.
     * 
     */
    @Import(name="vpnUserName", required=true)
    private String vpnUserName;

    public String vpnUserName() {
        return this.vpnUserName;
    }

    private VpnClientConnectionHealthDetailResponse() {}

    private VpnClientConnectionHealthDetailResponse(VpnClientConnectionHealthDetailResponse $) {
        this.egressBytesTransferred = $.egressBytesTransferred;
        this.egressPacketsTransferred = $.egressPacketsTransferred;
        this.ingressBytesTransferred = $.ingressBytesTransferred;
        this.ingressPacketsTransferred = $.ingressPacketsTransferred;
        this.maxBandwidth = $.maxBandwidth;
        this.maxPacketsPerSecond = $.maxPacketsPerSecond;
        this.privateIpAddress = $.privateIpAddress;
        this.publicIpAddress = $.publicIpAddress;
        this.vpnConnectionDuration = $.vpnConnectionDuration;
        this.vpnConnectionId = $.vpnConnectionId;
        this.vpnConnectionTime = $.vpnConnectionTime;
        this.vpnUserName = $.vpnUserName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VpnClientConnectionHealthDetailResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VpnClientConnectionHealthDetailResponse $;

        public Builder() {
            $ = new VpnClientConnectionHealthDetailResponse();
        }

        public Builder(VpnClientConnectionHealthDetailResponse defaults) {
            $ = new VpnClientConnectionHealthDetailResponse(Objects.requireNonNull(defaults));
        }

        public Builder egressBytesTransferred(Double egressBytesTransferred) {
            $.egressBytesTransferred = egressBytesTransferred;
            return this;
        }

        public Builder egressPacketsTransferred(Double egressPacketsTransferred) {
            $.egressPacketsTransferred = egressPacketsTransferred;
            return this;
        }

        public Builder ingressBytesTransferred(Double ingressBytesTransferred) {
            $.ingressBytesTransferred = ingressBytesTransferred;
            return this;
        }

        public Builder ingressPacketsTransferred(Double ingressPacketsTransferred) {
            $.ingressPacketsTransferred = ingressPacketsTransferred;
            return this;
        }

        public Builder maxBandwidth(Double maxBandwidth) {
            $.maxBandwidth = maxBandwidth;
            return this;
        }

        public Builder maxPacketsPerSecond(Double maxPacketsPerSecond) {
            $.maxPacketsPerSecond = maxPacketsPerSecond;
            return this;
        }

        public Builder privateIpAddress(String privateIpAddress) {
            $.privateIpAddress = privateIpAddress;
            return this;
        }

        public Builder publicIpAddress(String publicIpAddress) {
            $.publicIpAddress = publicIpAddress;
            return this;
        }

        public Builder vpnConnectionDuration(Double vpnConnectionDuration) {
            $.vpnConnectionDuration = vpnConnectionDuration;
            return this;
        }

        public Builder vpnConnectionId(String vpnConnectionId) {
            $.vpnConnectionId = vpnConnectionId;
            return this;
        }

        public Builder vpnConnectionTime(String vpnConnectionTime) {
            $.vpnConnectionTime = vpnConnectionTime;
            return this;
        }

        public Builder vpnUserName(String vpnUserName) {
            $.vpnUserName = vpnUserName;
            return this;
        }

        public VpnClientConnectionHealthDetailResponse build() {
            $.egressBytesTransferred = Objects.requireNonNull($.egressBytesTransferred, "expected parameter 'egressBytesTransferred' to be non-null");
            $.egressPacketsTransferred = Objects.requireNonNull($.egressPacketsTransferred, "expected parameter 'egressPacketsTransferred' to be non-null");
            $.ingressBytesTransferred = Objects.requireNonNull($.ingressBytesTransferred, "expected parameter 'ingressBytesTransferred' to be non-null");
            $.ingressPacketsTransferred = Objects.requireNonNull($.ingressPacketsTransferred, "expected parameter 'ingressPacketsTransferred' to be non-null");
            $.maxBandwidth = Objects.requireNonNull($.maxBandwidth, "expected parameter 'maxBandwidth' to be non-null");
            $.maxPacketsPerSecond = Objects.requireNonNull($.maxPacketsPerSecond, "expected parameter 'maxPacketsPerSecond' to be non-null");
            $.privateIpAddress = Objects.requireNonNull($.privateIpAddress, "expected parameter 'privateIpAddress' to be non-null");
            $.publicIpAddress = Objects.requireNonNull($.publicIpAddress, "expected parameter 'publicIpAddress' to be non-null");
            $.vpnConnectionDuration = Objects.requireNonNull($.vpnConnectionDuration, "expected parameter 'vpnConnectionDuration' to be non-null");
            $.vpnConnectionId = Objects.requireNonNull($.vpnConnectionId, "expected parameter 'vpnConnectionId' to be non-null");
            $.vpnConnectionTime = Objects.requireNonNull($.vpnConnectionTime, "expected parameter 'vpnConnectionTime' to be non-null");
            $.vpnUserName = Objects.requireNonNull($.vpnUserName, "expected parameter 'vpnUserName' to be non-null");
            return $;
        }
    }

}
