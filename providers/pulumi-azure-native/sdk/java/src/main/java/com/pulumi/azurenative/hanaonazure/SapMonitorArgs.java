// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.hanaonazure;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SapMonitorArgs extends com.pulumi.resources.ResourceArgs {

    public static final SapMonitorArgs Empty = new SapMonitorArgs();

    /**
     * The value indicating whether to send analytics to Microsoft
     * 
     */
    @Import(name="enableCustomerAnalytics")
    private @Nullable Output<Boolean> enableCustomerAnalytics;

    /**
     * @return The value indicating whether to send analytics to Microsoft
     * 
     */
    public Optional<Output<Boolean>> enableCustomerAnalytics() {
        return Optional.ofNullable(this.enableCustomerAnalytics);
    }

    /**
     * The geo-location where the resource lives
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The geo-location where the resource lives
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The ARM ID of the Log Analytics Workspace that is used for monitoring
     * 
     */
    @Import(name="logAnalyticsWorkspaceArmId")
    private @Nullable Output<String> logAnalyticsWorkspaceArmId;

    /**
     * @return The ARM ID of the Log Analytics Workspace that is used for monitoring
     * 
     */
    public Optional<Output<String>> logAnalyticsWorkspaceArmId() {
        return Optional.ofNullable(this.logAnalyticsWorkspaceArmId);
    }

    /**
     * The workspace ID of the log analytics workspace to be used for monitoring
     * 
     */
    @Import(name="logAnalyticsWorkspaceId")
    private @Nullable Output<String> logAnalyticsWorkspaceId;

    /**
     * @return The workspace ID of the log analytics workspace to be used for monitoring
     * 
     */
    public Optional<Output<String>> logAnalyticsWorkspaceId() {
        return Optional.ofNullable(this.logAnalyticsWorkspaceId);
    }

    /**
     * The shared key of the log analytics workspace that is used for monitoring
     * 
     */
    @Import(name="logAnalyticsWorkspaceSharedKey")
    private @Nullable Output<String> logAnalyticsWorkspaceSharedKey;

    /**
     * @return The shared key of the log analytics workspace that is used for monitoring
     * 
     */
    public Optional<Output<String>> logAnalyticsWorkspaceSharedKey() {
        return Optional.ofNullable(this.logAnalyticsWorkspaceSharedKey);
    }

    /**
     * The subnet which the SAP monitor will be deployed in
     * 
     */
    @Import(name="monitorSubnet")
    private @Nullable Output<String> monitorSubnet;

    /**
     * @return The subnet which the SAP monitor will be deployed in
     * 
     */
    public Optional<Output<String>> monitorSubnet() {
        return Optional.ofNullable(this.monitorSubnet);
    }

    /**
     * Name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return Name of the resource group.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Name of the SAP monitor resource.
     * 
     */
    @Import(name="sapMonitorName")
    private @Nullable Output<String> sapMonitorName;

    /**
     * @return Name of the SAP monitor resource.
     * 
     */
    public Optional<Output<String>> sapMonitorName() {
        return Optional.ofNullable(this.sapMonitorName);
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Resource tags.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private SapMonitorArgs() {}

    private SapMonitorArgs(SapMonitorArgs $) {
        this.enableCustomerAnalytics = $.enableCustomerAnalytics;
        this.location = $.location;
        this.logAnalyticsWorkspaceArmId = $.logAnalyticsWorkspaceArmId;
        this.logAnalyticsWorkspaceId = $.logAnalyticsWorkspaceId;
        this.logAnalyticsWorkspaceSharedKey = $.logAnalyticsWorkspaceSharedKey;
        this.monitorSubnet = $.monitorSubnet;
        this.resourceGroupName = $.resourceGroupName;
        this.sapMonitorName = $.sapMonitorName;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SapMonitorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SapMonitorArgs $;

        public Builder() {
            $ = new SapMonitorArgs();
        }

        public Builder(SapMonitorArgs defaults) {
            $ = new SapMonitorArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enableCustomerAnalytics The value indicating whether to send analytics to Microsoft
         * 
         * @return builder
         * 
         */
        public Builder enableCustomerAnalytics(@Nullable Output<Boolean> enableCustomerAnalytics) {
            $.enableCustomerAnalytics = enableCustomerAnalytics;
            return this;
        }

        /**
         * @param enableCustomerAnalytics The value indicating whether to send analytics to Microsoft
         * 
         * @return builder
         * 
         */
        public Builder enableCustomerAnalytics(Boolean enableCustomerAnalytics) {
            return enableCustomerAnalytics(Output.of(enableCustomerAnalytics));
        }

        /**
         * @param location The geo-location where the resource lives
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The geo-location where the resource lives
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param logAnalyticsWorkspaceArmId The ARM ID of the Log Analytics Workspace that is used for monitoring
         * 
         * @return builder
         * 
         */
        public Builder logAnalyticsWorkspaceArmId(@Nullable Output<String> logAnalyticsWorkspaceArmId) {
            $.logAnalyticsWorkspaceArmId = logAnalyticsWorkspaceArmId;
            return this;
        }

        /**
         * @param logAnalyticsWorkspaceArmId The ARM ID of the Log Analytics Workspace that is used for monitoring
         * 
         * @return builder
         * 
         */
        public Builder logAnalyticsWorkspaceArmId(String logAnalyticsWorkspaceArmId) {
            return logAnalyticsWorkspaceArmId(Output.of(logAnalyticsWorkspaceArmId));
        }

        /**
         * @param logAnalyticsWorkspaceId The workspace ID of the log analytics workspace to be used for monitoring
         * 
         * @return builder
         * 
         */
        public Builder logAnalyticsWorkspaceId(@Nullable Output<String> logAnalyticsWorkspaceId) {
            $.logAnalyticsWorkspaceId = logAnalyticsWorkspaceId;
            return this;
        }

        /**
         * @param logAnalyticsWorkspaceId The workspace ID of the log analytics workspace to be used for monitoring
         * 
         * @return builder
         * 
         */
        public Builder logAnalyticsWorkspaceId(String logAnalyticsWorkspaceId) {
            return logAnalyticsWorkspaceId(Output.of(logAnalyticsWorkspaceId));
        }

        /**
         * @param logAnalyticsWorkspaceSharedKey The shared key of the log analytics workspace that is used for monitoring
         * 
         * @return builder
         * 
         */
        public Builder logAnalyticsWorkspaceSharedKey(@Nullable Output<String> logAnalyticsWorkspaceSharedKey) {
            $.logAnalyticsWorkspaceSharedKey = logAnalyticsWorkspaceSharedKey;
            return this;
        }

        /**
         * @param logAnalyticsWorkspaceSharedKey The shared key of the log analytics workspace that is used for monitoring
         * 
         * @return builder
         * 
         */
        public Builder logAnalyticsWorkspaceSharedKey(String logAnalyticsWorkspaceSharedKey) {
            return logAnalyticsWorkspaceSharedKey(Output.of(logAnalyticsWorkspaceSharedKey));
        }

        /**
         * @param monitorSubnet The subnet which the SAP monitor will be deployed in
         * 
         * @return builder
         * 
         */
        public Builder monitorSubnet(@Nullable Output<String> monitorSubnet) {
            $.monitorSubnet = monitorSubnet;
            return this;
        }

        /**
         * @param monitorSubnet The subnet which the SAP monitor will be deployed in
         * 
         * @return builder
         * 
         */
        public Builder monitorSubnet(String monitorSubnet) {
            return monitorSubnet(Output.of(monitorSubnet));
        }

        /**
         * @param resourceGroupName Name of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName Name of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param sapMonitorName Name of the SAP monitor resource.
         * 
         * @return builder
         * 
         */
        public Builder sapMonitorName(@Nullable Output<String> sapMonitorName) {
            $.sapMonitorName = sapMonitorName;
            return this;
        }

        /**
         * @param sapMonitorName Name of the SAP monitor resource.
         * 
         * @return builder
         * 
         */
        public Builder sapMonitorName(String sapMonitorName) {
            return sapMonitorName(Output.of(sapMonitorName));
        }

        /**
         * @param tags Resource tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Resource tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public SapMonitorArgs build() {
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
