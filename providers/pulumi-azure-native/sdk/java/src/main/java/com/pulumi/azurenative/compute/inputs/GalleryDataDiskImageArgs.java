// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.compute.inputs;

import com.pulumi.azurenative.compute.enums.HostCaching;
import com.pulumi.azurenative.compute.inputs.GalleryArtifactVersionSourceArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * This is the data disk image.
 * 
 */
public final class GalleryDataDiskImageArgs extends com.pulumi.resources.ResourceArgs {

    public static final GalleryDataDiskImageArgs Empty = new GalleryDataDiskImageArgs();

    /**
     * The host caching of the disk. Valid values are &#39;None&#39;, &#39;ReadOnly&#39;, and &#39;ReadWrite&#39;
     * 
     */
    @Import(name="hostCaching")
      private final @Nullable Output<HostCaching> hostCaching;

    public Output<HostCaching> hostCaching() {
        return this.hostCaching == null ? Codegen.empty() : this.hostCaching;
    }

    /**
     * This property specifies the logical unit number of the data disk. This value is used to identify data disks within the Virtual Machine and therefore must be unique for each data disk attached to the Virtual Machine.
     * 
     */
    @Import(name="lun", required=true)
      private final Output<Integer> lun;

    public Output<Integer> lun() {
        return this.lun;
    }

    /**
     * The gallery artifact version source.
     * 
     */
    @Import(name="source")
      private final @Nullable Output<GalleryArtifactVersionSourceArgs> source;

    public Output<GalleryArtifactVersionSourceArgs> source() {
        return this.source == null ? Codegen.empty() : this.source;
    }

    public GalleryDataDiskImageArgs(
        @Nullable Output<HostCaching> hostCaching,
        Output<Integer> lun,
        @Nullable Output<GalleryArtifactVersionSourceArgs> source) {
        this.hostCaching = hostCaching;
        this.lun = Objects.requireNonNull(lun, "expected parameter 'lun' to be non-null");
        this.source = source;
    }

    private GalleryDataDiskImageArgs() {
        this.hostCaching = Codegen.empty();
        this.lun = Codegen.empty();
        this.source = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GalleryDataDiskImageArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<HostCaching> hostCaching;
        private Output<Integer> lun;
        private @Nullable Output<GalleryArtifactVersionSourceArgs> source;

        public Builder() {
    	      // Empty
        }

        public Builder(GalleryDataDiskImageArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.hostCaching = defaults.hostCaching;
    	      this.lun = defaults.lun;
    	      this.source = defaults.source;
        }

        public Builder hostCaching(@Nullable Output<HostCaching> hostCaching) {
            this.hostCaching = hostCaching;
            return this;
        }
        public Builder hostCaching(@Nullable HostCaching hostCaching) {
            this.hostCaching = Codegen.ofNullable(hostCaching);
            return this;
        }
        public Builder lun(Output<Integer> lun) {
            this.lun = Objects.requireNonNull(lun);
            return this;
        }
        public Builder lun(Integer lun) {
            this.lun = Output.of(Objects.requireNonNull(lun));
            return this;
        }
        public Builder source(@Nullable Output<GalleryArtifactVersionSourceArgs> source) {
            this.source = source;
            return this;
        }
        public Builder source(@Nullable GalleryArtifactVersionSourceArgs source) {
            this.source = Codegen.ofNullable(source);
            return this;
        }        public GalleryDataDiskImageArgs build() {
            return new GalleryDataDiskImageArgs(hostCaching, lun, source);
        }
    }
}
