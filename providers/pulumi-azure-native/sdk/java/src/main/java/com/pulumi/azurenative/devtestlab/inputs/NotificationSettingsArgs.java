// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.devtestlab.inputs;

import com.pulumi.azurenative.devtestlab.enums.EnableStatus;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Notification settings for a schedule.
 * 
 */
public final class NotificationSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final NotificationSettingsArgs Empty = new NotificationSettingsArgs();

    /**
     * The email recipient to send notifications to (can be a list of semi-colon separated email addresses).
     * 
     */
    @Import(name="emailRecipient")
      private final @Nullable Output<String> emailRecipient;

    public Output<String> emailRecipient() {
        return this.emailRecipient == null ? Codegen.empty() : this.emailRecipient;
    }

    /**
     * The locale to use when sending a notification (fallback for unsupported languages is EN).
     * 
     */
    @Import(name="notificationLocale")
      private final @Nullable Output<String> notificationLocale;

    public Output<String> notificationLocale() {
        return this.notificationLocale == null ? Codegen.empty() : this.notificationLocale;
    }

    /**
     * If notifications are enabled for this schedule (i.e. Enabled, Disabled).
     * 
     */
    @Import(name="status")
      private final @Nullable Output<Either<String,EnableStatus>> status;

    public Output<Either<String,EnableStatus>> status() {
        return this.status == null ? Codegen.empty() : this.status;
    }

    /**
     * Time in minutes before event at which notification will be sent.
     * 
     */
    @Import(name="timeInMinutes")
      private final @Nullable Output<Integer> timeInMinutes;

    public Output<Integer> timeInMinutes() {
        return this.timeInMinutes == null ? Codegen.empty() : this.timeInMinutes;
    }

    /**
     * The webhook URL to which the notification will be sent.
     * 
     */
    @Import(name="webhookUrl")
      private final @Nullable Output<String> webhookUrl;

    public Output<String> webhookUrl() {
        return this.webhookUrl == null ? Codegen.empty() : this.webhookUrl;
    }

    public NotificationSettingsArgs(
        @Nullable Output<String> emailRecipient,
        @Nullable Output<String> notificationLocale,
        @Nullable Output<Either<String,EnableStatus>> status,
        @Nullable Output<Integer> timeInMinutes,
        @Nullable Output<String> webhookUrl) {
        this.emailRecipient = emailRecipient;
        this.notificationLocale = notificationLocale;
        this.status = Codegen.stringProp("status").left(EnableStatus.class).output().arg(status).def("Disabled").getNullable();
        this.timeInMinutes = timeInMinutes;
        this.webhookUrl = webhookUrl;
    }

    private NotificationSettingsArgs() {
        this.emailRecipient = Codegen.empty();
        this.notificationLocale = Codegen.empty();
        this.status = Codegen.empty();
        this.timeInMinutes = Codegen.empty();
        this.webhookUrl = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NotificationSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> emailRecipient;
        private @Nullable Output<String> notificationLocale;
        private @Nullable Output<Either<String,EnableStatus>> status;
        private @Nullable Output<Integer> timeInMinutes;
        private @Nullable Output<String> webhookUrl;

        public Builder() {
    	      // Empty
        }

        public Builder(NotificationSettingsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.emailRecipient = defaults.emailRecipient;
    	      this.notificationLocale = defaults.notificationLocale;
    	      this.status = defaults.status;
    	      this.timeInMinutes = defaults.timeInMinutes;
    	      this.webhookUrl = defaults.webhookUrl;
        }

        public Builder emailRecipient(@Nullable Output<String> emailRecipient) {
            this.emailRecipient = emailRecipient;
            return this;
        }
        public Builder emailRecipient(@Nullable String emailRecipient) {
            this.emailRecipient = Codegen.ofNullable(emailRecipient);
            return this;
        }
        public Builder notificationLocale(@Nullable Output<String> notificationLocale) {
            this.notificationLocale = notificationLocale;
            return this;
        }
        public Builder notificationLocale(@Nullable String notificationLocale) {
            this.notificationLocale = Codegen.ofNullable(notificationLocale);
            return this;
        }
        public Builder status(@Nullable Output<Either<String,EnableStatus>> status) {
            this.status = status;
            return this;
        }
        public Builder status(@Nullable Either<String,EnableStatus> status) {
            this.status = Codegen.ofNullable(status);
            return this;
        }
        public Builder timeInMinutes(@Nullable Output<Integer> timeInMinutes) {
            this.timeInMinutes = timeInMinutes;
            return this;
        }
        public Builder timeInMinutes(@Nullable Integer timeInMinutes) {
            this.timeInMinutes = Codegen.ofNullable(timeInMinutes);
            return this;
        }
        public Builder webhookUrl(@Nullable Output<String> webhookUrl) {
            this.webhookUrl = webhookUrl;
            return this;
        }
        public Builder webhookUrl(@Nullable String webhookUrl) {
            this.webhookUrl = Codegen.ofNullable(webhookUrl);
            return this;
        }        public NotificationSettingsArgs build() {
            return new NotificationSettingsArgs(emailRecipient, notificationLocale, status, timeInMinutes, webhookUrl);
        }
    }
}
