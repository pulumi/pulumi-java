// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.operationalinsights;

import com.pulumi.azurenative.operationalinsights.enums.BillingType;
import com.pulumi.azurenative.operationalinsights.inputs.ClusterSkuArgs;
import com.pulumi.azurenative.operationalinsights.inputs.IdentityArgs;
import com.pulumi.azurenative.operationalinsights.inputs.KeyVaultPropertiesArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClusterArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClusterArgs Empty = new ClusterArgs();

    /**
     * The cluster&#39;s billing type.
     * 
     */
    @Import(name="billingType")
    private @Nullable Output<Either<String,BillingType>> billingType;

    public Optional<Output<Either<String,BillingType>>> billingType() {
        return Optional.ofNullable(this.billingType);
    }

    /**
     * The name of the Log Analytics cluster.
     * 
     */
    @Import(name="clusterName")
    private @Nullable Output<String> clusterName;

    public Optional<Output<String>> clusterName() {
        return Optional.ofNullable(this.clusterName);
    }

    /**
     * The identity of the resource.
     * 
     */
    @Import(name="identity")
    private @Nullable Output<IdentityArgs> identity;

    public Optional<Output<IdentityArgs>> identity() {
        return Optional.ofNullable(this.identity);
    }

    /**
     * Sets whether the cluster will support availability zones. This can be set as true only in regions where Azure Data Explorer support Availability Zones. This Property can not be modified after cluster creation. Default value is &#39;true&#39; if region supports Availability Zones.
     * 
     */
    @Import(name="isAvailabilityZonesEnabled")
    private @Nullable Output<Boolean> isAvailabilityZonesEnabled;

    public Optional<Output<Boolean>> isAvailabilityZonesEnabled() {
        return Optional.ofNullable(this.isAvailabilityZonesEnabled);
    }

    /**
     * Configures whether cluster will use double encryption. This Property can not be modified after cluster creation. Default value is &#39;true&#39;
     * 
     */
    @Import(name="isDoubleEncryptionEnabled")
    private @Nullable Output<Boolean> isDoubleEncryptionEnabled;

    public Optional<Output<Boolean>> isDoubleEncryptionEnabled() {
        return Optional.ofNullable(this.isDoubleEncryptionEnabled);
    }

    /**
     * The associated key properties.
     * 
     */
    @Import(name="keyVaultProperties")
    private @Nullable Output<KeyVaultPropertiesArgs> keyVaultProperties;

    public Optional<Output<KeyVaultPropertiesArgs>> keyVaultProperties() {
        return Optional.ofNullable(this.keyVaultProperties);
    }

    /**
     * The geo-location where the resource lives
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The sku properties.
     * 
     */
    @Import(name="sku")
    private @Nullable Output<ClusterSkuArgs> sku;

    public Optional<Output<ClusterSkuArgs>> sku() {
        return Optional.ofNullable(this.sku);
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private ClusterArgs() {}

    private ClusterArgs(ClusterArgs $) {
        this.billingType = $.billingType;
        this.clusterName = $.clusterName;
        this.identity = $.identity;
        this.isAvailabilityZonesEnabled = $.isAvailabilityZonesEnabled;
        this.isDoubleEncryptionEnabled = $.isDoubleEncryptionEnabled;
        this.keyVaultProperties = $.keyVaultProperties;
        this.location = $.location;
        this.resourceGroupName = $.resourceGroupName;
        this.sku = $.sku;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClusterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterArgs $;

        public Builder() {
            $ = new ClusterArgs();
        }

        public Builder(ClusterArgs defaults) {
            $ = new ClusterArgs(Objects.requireNonNull(defaults));
        }

        public Builder billingType(@Nullable Output<Either<String,BillingType>> billingType) {
            $.billingType = billingType;
            return this;
        }

        public Builder billingType(Either<String,BillingType> billingType) {
            return billingType(Output.of(billingType));
        }

        public Builder billingType(String billingType) {
            return billingType(Either.ofLeft(billingType));
        }

        public Builder billingType(BillingType billingType) {
            return billingType(Either.ofRight(billingType));
        }

        public Builder clusterName(@Nullable Output<String> clusterName) {
            $.clusterName = clusterName;
            return this;
        }

        public Builder clusterName(String clusterName) {
            return clusterName(Output.of(clusterName));
        }

        public Builder identity(@Nullable Output<IdentityArgs> identity) {
            $.identity = identity;
            return this;
        }

        public Builder identity(IdentityArgs identity) {
            return identity(Output.of(identity));
        }

        public Builder isAvailabilityZonesEnabled(@Nullable Output<Boolean> isAvailabilityZonesEnabled) {
            $.isAvailabilityZonesEnabled = isAvailabilityZonesEnabled;
            return this;
        }

        public Builder isAvailabilityZonesEnabled(Boolean isAvailabilityZonesEnabled) {
            return isAvailabilityZonesEnabled(Output.of(isAvailabilityZonesEnabled));
        }

        public Builder isDoubleEncryptionEnabled(@Nullable Output<Boolean> isDoubleEncryptionEnabled) {
            $.isDoubleEncryptionEnabled = isDoubleEncryptionEnabled;
            return this;
        }

        public Builder isDoubleEncryptionEnabled(Boolean isDoubleEncryptionEnabled) {
            return isDoubleEncryptionEnabled(Output.of(isDoubleEncryptionEnabled));
        }

        public Builder keyVaultProperties(@Nullable Output<KeyVaultPropertiesArgs> keyVaultProperties) {
            $.keyVaultProperties = keyVaultProperties;
            return this;
        }

        public Builder keyVaultProperties(KeyVaultPropertiesArgs keyVaultProperties) {
            return keyVaultProperties(Output.of(keyVaultProperties));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder sku(@Nullable Output<ClusterSkuArgs> sku) {
            $.sku = sku;
            return this;
        }

        public Builder sku(ClusterSkuArgs sku) {
            return sku(Output.of(sku));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public ClusterArgs build() {
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
