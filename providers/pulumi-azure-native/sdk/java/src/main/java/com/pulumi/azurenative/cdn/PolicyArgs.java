// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.cdn;

import com.pulumi.azurenative.cdn.inputs.CustomRuleListArgs;
import com.pulumi.azurenative.cdn.inputs.ManagedRuleSetListArgs;
import com.pulumi.azurenative.cdn.inputs.PolicySettingsArgs;
import com.pulumi.azurenative.cdn.inputs.RateLimitRuleListArgs;
import com.pulumi.azurenative.cdn.inputs.SkuArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final PolicyArgs Empty = new PolicyArgs();

    /**
     * Describes custom rules inside the policy.
     * 
     */
    @Import(name="customRules")
    private @Nullable Output<CustomRuleListArgs> customRules;

    public Optional<Output<CustomRuleListArgs>> customRules() {
        return Optional.ofNullable(this.customRules);
    }

    /**
     * Resource location.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Describes managed rules inside the policy.
     * 
     */
    @Import(name="managedRules")
    private @Nullable Output<ManagedRuleSetListArgs> managedRules;

    public Optional<Output<ManagedRuleSetListArgs>> managedRules() {
        return Optional.ofNullable(this.managedRules);
    }

    /**
     * The name of the CdnWebApplicationFirewallPolicy.
     * 
     */
    @Import(name="policyName")
    private @Nullable Output<String> policyName;

    public Optional<Output<String>> policyName() {
        return Optional.ofNullable(this.policyName);
    }

    /**
     * Describes  policySettings for policy
     * 
     */
    @Import(name="policySettings")
    private @Nullable Output<PolicySettingsArgs> policySettings;

    public Optional<Output<PolicySettingsArgs>> policySettings() {
        return Optional.ofNullable(this.policySettings);
    }

    /**
     * Describes rate limit rules inside the policy.
     * 
     */
    @Import(name="rateLimitRules")
    private @Nullable Output<RateLimitRuleListArgs> rateLimitRules;

    public Optional<Output<RateLimitRuleListArgs>> rateLimitRules() {
        return Optional.ofNullable(this.rateLimitRules);
    }

    /**
     * Name of the Resource group within the Azure subscription.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The pricing tier (defines a CDN provider, feature list and rate) of the CdnWebApplicationFirewallPolicy.
     * 
     */
    @Import(name="sku", required=true)
    private Output<SkuArgs> sku;

    public Output<SkuArgs> sku() {
        return this.sku;
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private PolicyArgs() {}

    private PolicyArgs(PolicyArgs $) {
        this.customRules = $.customRules;
        this.location = $.location;
        this.managedRules = $.managedRules;
        this.policyName = $.policyName;
        this.policySettings = $.policySettings;
        this.rateLimitRules = $.rateLimitRules;
        this.resourceGroupName = $.resourceGroupName;
        this.sku = $.sku;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PolicyArgs $;

        public Builder() {
            $ = new PolicyArgs();
        }

        public Builder(PolicyArgs defaults) {
            $ = new PolicyArgs(Objects.requireNonNull(defaults));
        }

        public Builder customRules(@Nullable Output<CustomRuleListArgs> customRules) {
            $.customRules = customRules;
            return this;
        }

        public Builder customRules(CustomRuleListArgs customRules) {
            return customRules(Output.of(customRules));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder managedRules(@Nullable Output<ManagedRuleSetListArgs> managedRules) {
            $.managedRules = managedRules;
            return this;
        }

        public Builder managedRules(ManagedRuleSetListArgs managedRules) {
            return managedRules(Output.of(managedRules));
        }

        public Builder policyName(@Nullable Output<String> policyName) {
            $.policyName = policyName;
            return this;
        }

        public Builder policyName(String policyName) {
            return policyName(Output.of(policyName));
        }

        public Builder policySettings(@Nullable Output<PolicySettingsArgs> policySettings) {
            $.policySettings = policySettings;
            return this;
        }

        public Builder policySettings(PolicySettingsArgs policySettings) {
            return policySettings(Output.of(policySettings));
        }

        public Builder rateLimitRules(@Nullable Output<RateLimitRuleListArgs> rateLimitRules) {
            $.rateLimitRules = rateLimitRules;
            return this;
        }

        public Builder rateLimitRules(RateLimitRuleListArgs rateLimitRules) {
            return rateLimitRules(Output.of(rateLimitRules));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder sku(Output<SkuArgs> sku) {
            $.sku = sku;
            return this;
        }

        public Builder sku(SkuArgs sku) {
            return sku(Output.of(sku));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public PolicyArgs build() {
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.sku = Objects.requireNonNull($.sku, "expected parameter 'sku' to be non-null");
            return $;
        }
    }

}
