// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.machinelearningservices.inputs;

import com.pulumi.azurenative.machinelearningservices.enums.BatchLoggingLevel;
import com.pulumi.azurenative.machinelearningservices.inputs.BatchOutputConfigurationArgs;
import com.pulumi.azurenative.machinelearningservices.inputs.BatchRetrySettingsArgs;
import com.pulumi.azurenative.machinelearningservices.inputs.CodeConfigurationArgs;
import com.pulumi.azurenative.machinelearningservices.inputs.ComputeConfigurationArgs;
import com.pulumi.azurenative.machinelearningservices.inputs.DataPathAssetReferenceArgs;
import com.pulumi.azurenative.machinelearningservices.inputs.IdAssetReferenceArgs;
import com.pulumi.azurenative.machinelearningservices.inputs.OutputPathAssetReferenceArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Batch inference settings per deployment.
 * 
 */
public final class BatchDeploymentArgs extends com.pulumi.resources.ResourceArgs {

    public static final BatchDeploymentArgs Empty = new BatchDeploymentArgs();

    /**
     * Code configuration for the endpoint deployment.
     * 
     */
    @Import(name="codeConfiguration")
    private @Nullable Output<CodeConfigurationArgs> codeConfiguration;

    /**
     * @return Code configuration for the endpoint deployment.
     * 
     */
    public Optional<Output<CodeConfigurationArgs>> codeConfiguration() {
        return Optional.ofNullable(this.codeConfiguration);
    }

    /**
     * Configuration for compute binding.
     * 
     */
    @Import(name="compute")
    private @Nullable Output<ComputeConfigurationArgs> compute;

    /**
     * @return Configuration for compute binding.
     * 
     */
    public Optional<Output<ComputeConfigurationArgs>> compute() {
        return Optional.ofNullable(this.compute);
    }

    /**
     * Description of the endpoint deployment.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the endpoint deployment.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * ARM resource ID of the environment specification for the endpoint deployment.
     * 
     */
    @Import(name="environmentId")
    private @Nullable Output<String> environmentId;

    /**
     * @return ARM resource ID of the environment specification for the endpoint deployment.
     * 
     */
    public Optional<Output<String>> environmentId() {
        return Optional.ofNullable(this.environmentId);
    }

    /**
     * Environment variables configuration for the deployment.
     * 
     */
    @Import(name="environmentVariables")
    private @Nullable Output<Map<String,String>> environmentVariables;

    /**
     * @return Environment variables configuration for the deployment.
     * 
     */
    public Optional<Output<Map<String,String>>> environmentVariables() {
        return Optional.ofNullable(this.environmentVariables);
    }

    /**
     * Error threshold, if the error count for the entire input goes above this value,
     * the batch inference will be aborted. Range is [-1, int.MaxValue].
     * For FileDataset, this value is the count of file failures.
     * For TabularDataset, this value is the count of record failures.
     * If set to -1 (the lower bound), all failures during batch inference will be ignored.
     * 
     */
    @Import(name="errorThreshold")
    private @Nullable Output<Integer> errorThreshold;

    /**
     * @return Error threshold, if the error count for the entire input goes above this value,
     * the batch inference will be aborted. Range is [-1, int.MaxValue].
     * For FileDataset, this value is the count of file failures.
     * For TabularDataset, this value is the count of record failures.
     * If set to -1 (the lower bound), all failures during batch inference will be ignored.
     * 
     */
    public Optional<Output<Integer>> errorThreshold() {
        return Optional.ofNullable(this.errorThreshold);
    }

    /**
     * Logging level for batch inference operation.
     * 
     */
    @Import(name="loggingLevel")
    private @Nullable Output<Either<String,BatchLoggingLevel>> loggingLevel;

    /**
     * @return Logging level for batch inference operation.
     * 
     */
    public Optional<Output<Either<String,BatchLoggingLevel>>> loggingLevel() {
        return Optional.ofNullable(this.loggingLevel);
    }

    /**
     * Size of the mini-batch passed to each batch invocation.
     * For FileDataset, this is the number of files per mini-batch.
     * For TabularDataset, this is the size of the records in bytes, per mini-batch.
     * 
     */
    @Import(name="miniBatchSize")
    private @Nullable Output<Double> miniBatchSize;

    /**
     * @return Size of the mini-batch passed to each batch invocation.
     * For FileDataset, this is the number of files per mini-batch.
     * For TabularDataset, this is the size of the records in bytes, per mini-batch.
     * 
     */
    public Optional<Output<Double>> miniBatchSize() {
        return Optional.ofNullable(this.miniBatchSize);
    }

    /**
     * Reference to the model asset for the endpoint deployment.
     * 
     */
    @Import(name="model")
    private @Nullable Output<Object> model;

    /**
     * @return Reference to the model asset for the endpoint deployment.
     * 
     */
    public Optional<Output<Object>> model() {
        return Optional.ofNullable(this.model);
    }

    /**
     * Output configuration for the batch inference operation.
     * 
     */
    @Import(name="outputConfiguration")
    private @Nullable Output<BatchOutputConfigurationArgs> outputConfiguration;

    /**
     * @return Output configuration for the batch inference operation.
     * 
     */
    public Optional<Output<BatchOutputConfigurationArgs>> outputConfiguration() {
        return Optional.ofNullable(this.outputConfiguration);
    }

    /**
     * Partition keys list used for Named partitioning.
     * 
     */
    @Import(name="partitionKeys")
    private @Nullable Output<List<String>> partitionKeys;

    /**
     * @return Partition keys list used for Named partitioning.
     * 
     */
    public Optional<Output<List<String>>> partitionKeys() {
        return Optional.ofNullable(this.partitionKeys);
    }

    /**
     * Property dictionary. Properties can be added, but not removed or altered.
     * 
     */
    @Import(name="properties")
    private @Nullable Output<Map<String,String>> properties;

    /**
     * @return Property dictionary. Properties can be added, but not removed or altered.
     * 
     */
    public Optional<Output<Map<String,String>>> properties() {
        return Optional.ofNullable(this.properties);
    }

    /**
     * Retry Settings for the batch inference operation.
     * 
     */
    @Import(name="retrySettings")
    private @Nullable Output<BatchRetrySettingsArgs> retrySettings;

    /**
     * @return Retry Settings for the batch inference operation.
     * 
     */
    public Optional<Output<BatchRetrySettingsArgs>> retrySettings() {
        return Optional.ofNullable(this.retrySettings);
    }

    private BatchDeploymentArgs() {}

    private BatchDeploymentArgs(BatchDeploymentArgs $) {
        this.codeConfiguration = $.codeConfiguration;
        this.compute = $.compute;
        this.description = $.description;
        this.environmentId = $.environmentId;
        this.environmentVariables = $.environmentVariables;
        this.errorThreshold = $.errorThreshold;
        this.loggingLevel = $.loggingLevel;
        this.miniBatchSize = $.miniBatchSize;
        this.model = $.model;
        this.outputConfiguration = $.outputConfiguration;
        this.partitionKeys = $.partitionKeys;
        this.properties = $.properties;
        this.retrySettings = $.retrySettings;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BatchDeploymentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BatchDeploymentArgs $;

        public Builder() {
            $ = new BatchDeploymentArgs();
        }

        public Builder(BatchDeploymentArgs defaults) {
            $ = new BatchDeploymentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param codeConfiguration Code configuration for the endpoint deployment.
         * 
         * @return builder
         * 
         */
        public Builder codeConfiguration(@Nullable Output<CodeConfigurationArgs> codeConfiguration) {
            $.codeConfiguration = codeConfiguration;
            return this;
        }

        /**
         * @param codeConfiguration Code configuration for the endpoint deployment.
         * 
         * @return builder
         * 
         */
        public Builder codeConfiguration(CodeConfigurationArgs codeConfiguration) {
            return codeConfiguration(Output.of(codeConfiguration));
        }

        /**
         * @param compute Configuration for compute binding.
         * 
         * @return builder
         * 
         */
        public Builder compute(@Nullable Output<ComputeConfigurationArgs> compute) {
            $.compute = compute;
            return this;
        }

        /**
         * @param compute Configuration for compute binding.
         * 
         * @return builder
         * 
         */
        public Builder compute(ComputeConfigurationArgs compute) {
            return compute(Output.of(compute));
        }

        /**
         * @param description Description of the endpoint deployment.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the endpoint deployment.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param environmentId ARM resource ID of the environment specification for the endpoint deployment.
         * 
         * @return builder
         * 
         */
        public Builder environmentId(@Nullable Output<String> environmentId) {
            $.environmentId = environmentId;
            return this;
        }

        /**
         * @param environmentId ARM resource ID of the environment specification for the endpoint deployment.
         * 
         * @return builder
         * 
         */
        public Builder environmentId(String environmentId) {
            return environmentId(Output.of(environmentId));
        }

        /**
         * @param environmentVariables Environment variables configuration for the deployment.
         * 
         * @return builder
         * 
         */
        public Builder environmentVariables(@Nullable Output<Map<String,String>> environmentVariables) {
            $.environmentVariables = environmentVariables;
            return this;
        }

        /**
         * @param environmentVariables Environment variables configuration for the deployment.
         * 
         * @return builder
         * 
         */
        public Builder environmentVariables(Map<String,String> environmentVariables) {
            return environmentVariables(Output.of(environmentVariables));
        }

        /**
         * @param errorThreshold Error threshold, if the error count for the entire input goes above this value,
         * the batch inference will be aborted. Range is [-1, int.MaxValue].
         * For FileDataset, this value is the count of file failures.
         * For TabularDataset, this value is the count of record failures.
         * If set to -1 (the lower bound), all failures during batch inference will be ignored.
         * 
         * @return builder
         * 
         */
        public Builder errorThreshold(@Nullable Output<Integer> errorThreshold) {
            $.errorThreshold = errorThreshold;
            return this;
        }

        /**
         * @param errorThreshold Error threshold, if the error count for the entire input goes above this value,
         * the batch inference will be aborted. Range is [-1, int.MaxValue].
         * For FileDataset, this value is the count of file failures.
         * For TabularDataset, this value is the count of record failures.
         * If set to -1 (the lower bound), all failures during batch inference will be ignored.
         * 
         * @return builder
         * 
         */
        public Builder errorThreshold(Integer errorThreshold) {
            return errorThreshold(Output.of(errorThreshold));
        }

        /**
         * @param loggingLevel Logging level for batch inference operation.
         * 
         * @return builder
         * 
         */
        public Builder loggingLevel(@Nullable Output<Either<String,BatchLoggingLevel>> loggingLevel) {
            $.loggingLevel = loggingLevel;
            return this;
        }

        /**
         * @param loggingLevel Logging level for batch inference operation.
         * 
         * @return builder
         * 
         */
        public Builder loggingLevel(Either<String,BatchLoggingLevel> loggingLevel) {
            return loggingLevel(Output.of(loggingLevel));
        }

        /**
         * @param loggingLevel Logging level for batch inference operation.
         * 
         * @return builder
         * 
         */
        public Builder loggingLevel(String loggingLevel) {
            return loggingLevel(Either.ofLeft(loggingLevel));
        }

        /**
         * @param loggingLevel Logging level for batch inference operation.
         * 
         * @return builder
         * 
         */
        public Builder loggingLevel(BatchLoggingLevel loggingLevel) {
            return loggingLevel(Either.ofRight(loggingLevel));
        }

        /**
         * @param miniBatchSize Size of the mini-batch passed to each batch invocation.
         * For FileDataset, this is the number of files per mini-batch.
         * For TabularDataset, this is the size of the records in bytes, per mini-batch.
         * 
         * @return builder
         * 
         */
        public Builder miniBatchSize(@Nullable Output<Double> miniBatchSize) {
            $.miniBatchSize = miniBatchSize;
            return this;
        }

        /**
         * @param miniBatchSize Size of the mini-batch passed to each batch invocation.
         * For FileDataset, this is the number of files per mini-batch.
         * For TabularDataset, this is the size of the records in bytes, per mini-batch.
         * 
         * @return builder
         * 
         */
        public Builder miniBatchSize(Double miniBatchSize) {
            return miniBatchSize(Output.of(miniBatchSize));
        }

        /**
         * @param model Reference to the model asset for the endpoint deployment.
         * 
         * @return builder
         * 
         */
        public Builder model(@Nullable Output<Object> model) {
            $.model = model;
            return this;
        }

        /**
         * @param model Reference to the model asset for the endpoint deployment.
         * 
         * @return builder
         * 
         */
        public Builder model(Object model) {
            return model(Output.of(model));
        }

        /**
         * @param outputConfiguration Output configuration for the batch inference operation.
         * 
         * @return builder
         * 
         */
        public Builder outputConfiguration(@Nullable Output<BatchOutputConfigurationArgs> outputConfiguration) {
            $.outputConfiguration = outputConfiguration;
            return this;
        }

        /**
         * @param outputConfiguration Output configuration for the batch inference operation.
         * 
         * @return builder
         * 
         */
        public Builder outputConfiguration(BatchOutputConfigurationArgs outputConfiguration) {
            return outputConfiguration(Output.of(outputConfiguration));
        }

        /**
         * @param partitionKeys Partition keys list used for Named partitioning.
         * 
         * @return builder
         * 
         */
        public Builder partitionKeys(@Nullable Output<List<String>> partitionKeys) {
            $.partitionKeys = partitionKeys;
            return this;
        }

        /**
         * @param partitionKeys Partition keys list used for Named partitioning.
         * 
         * @return builder
         * 
         */
        public Builder partitionKeys(List<String> partitionKeys) {
            return partitionKeys(Output.of(partitionKeys));
        }

        /**
         * @param partitionKeys Partition keys list used for Named partitioning.
         * 
         * @return builder
         * 
         */
        public Builder partitionKeys(String... partitionKeys) {
            return partitionKeys(List.of(partitionKeys));
        }

        /**
         * @param properties Property dictionary. Properties can be added, but not removed or altered.
         * 
         * @return builder
         * 
         */
        public Builder properties(@Nullable Output<Map<String,String>> properties) {
            $.properties = properties;
            return this;
        }

        /**
         * @param properties Property dictionary. Properties can be added, but not removed or altered.
         * 
         * @return builder
         * 
         */
        public Builder properties(Map<String,String> properties) {
            return properties(Output.of(properties));
        }

        /**
         * @param retrySettings Retry Settings for the batch inference operation.
         * 
         * @return builder
         * 
         */
        public Builder retrySettings(@Nullable Output<BatchRetrySettingsArgs> retrySettings) {
            $.retrySettings = retrySettings;
            return this;
        }

        /**
         * @param retrySettings Retry Settings for the batch inference operation.
         * 
         * @return builder
         * 
         */
        public Builder retrySettings(BatchRetrySettingsArgs retrySettings) {
            return retrySettings(Output.of(retrySettings));
        }

        public BatchDeploymentArgs build() {
            return $;
        }
    }

}
