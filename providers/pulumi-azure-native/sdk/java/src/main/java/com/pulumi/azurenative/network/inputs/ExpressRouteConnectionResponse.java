// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.azurenative.network.inputs.ExpressRouteCircuitPeeringIdResponse;
import com.pulumi.azurenative.network.inputs.RoutingConfigurationResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * ExpressRouteConnection resource.
 * 
 */
public final class ExpressRouteConnectionResponse extends com.pulumi.resources.InvokeArgs {

    public static final ExpressRouteConnectionResponse Empty = new ExpressRouteConnectionResponse();

    /**
     * Authorization key to establish the connection.
     * 
     */
    @Import(name="authorizationKey")
    private @Nullable String authorizationKey;

    /**
     * @return Authorization key to establish the connection.
     * 
     */
    public Optional<String> authorizationKey() {
        return Optional.ofNullable(this.authorizationKey);
    }

    /**
     * Enable internet security.
     * 
     */
    @Import(name="enableInternetSecurity")
    private @Nullable Boolean enableInternetSecurity;

    /**
     * @return Enable internet security.
     * 
     */
    public Optional<Boolean> enableInternetSecurity() {
        return Optional.ofNullable(this.enableInternetSecurity);
    }

    /**
     * The ExpressRoute circuit peering.
     * 
     */
    @Import(name="expressRouteCircuitPeering", required=true)
    private ExpressRouteCircuitPeeringIdResponse expressRouteCircuitPeering;

    /**
     * @return The ExpressRoute circuit peering.
     * 
     */
    public ExpressRouteCircuitPeeringIdResponse expressRouteCircuitPeering() {
        return this.expressRouteCircuitPeering;
    }

    /**
     * Enable FastPath to vWan Firewall hub.
     * 
     */
    @Import(name="expressRouteGatewayBypass")
    private @Nullable Boolean expressRouteGatewayBypass;

    /**
     * @return Enable FastPath to vWan Firewall hub.
     * 
     */
    public Optional<Boolean> expressRouteGatewayBypass() {
        return Optional.ofNullable(this.expressRouteGatewayBypass);
    }

    /**
     * Resource ID.
     * 
     */
    @Import(name="id")
    private @Nullable String id;

    /**
     * @return Resource ID.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The name of the resource.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return The name of the resource.
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * The provisioning state of the express route connection resource.
     * 
     */
    @Import(name="provisioningState", required=true)
    private String provisioningState;

    /**
     * @return The provisioning state of the express route connection resource.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * The Routing Configuration indicating the associated and propagated route tables on this connection.
     * 
     */
    @Import(name="routingConfiguration")
    private @Nullable RoutingConfigurationResponse routingConfiguration;

    /**
     * @return The Routing Configuration indicating the associated and propagated route tables on this connection.
     * 
     */
    public Optional<RoutingConfigurationResponse> routingConfiguration() {
        return Optional.ofNullable(this.routingConfiguration);
    }

    /**
     * The routing weight associated to the connection.
     * 
     */
    @Import(name="routingWeight")
    private @Nullable Integer routingWeight;

    /**
     * @return The routing weight associated to the connection.
     * 
     */
    public Optional<Integer> routingWeight() {
        return Optional.ofNullable(this.routingWeight);
    }

    private ExpressRouteConnectionResponse() {}

    private ExpressRouteConnectionResponse(ExpressRouteConnectionResponse $) {
        this.authorizationKey = $.authorizationKey;
        this.enableInternetSecurity = $.enableInternetSecurity;
        this.expressRouteCircuitPeering = $.expressRouteCircuitPeering;
        this.expressRouteGatewayBypass = $.expressRouteGatewayBypass;
        this.id = $.id;
        this.name = $.name;
        this.provisioningState = $.provisioningState;
        this.routingConfiguration = $.routingConfiguration;
        this.routingWeight = $.routingWeight;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExpressRouteConnectionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExpressRouteConnectionResponse $;

        public Builder() {
            $ = new ExpressRouteConnectionResponse();
        }

        public Builder(ExpressRouteConnectionResponse defaults) {
            $ = new ExpressRouteConnectionResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param authorizationKey Authorization key to establish the connection.
         * 
         * @return builder
         * 
         */
        public Builder authorizationKey(@Nullable String authorizationKey) {
            $.authorizationKey = authorizationKey;
            return this;
        }

        /**
         * @param enableInternetSecurity Enable internet security.
         * 
         * @return builder
         * 
         */
        public Builder enableInternetSecurity(@Nullable Boolean enableInternetSecurity) {
            $.enableInternetSecurity = enableInternetSecurity;
            return this;
        }

        /**
         * @param expressRouteCircuitPeering The ExpressRoute circuit peering.
         * 
         * @return builder
         * 
         */
        public Builder expressRouteCircuitPeering(ExpressRouteCircuitPeeringIdResponse expressRouteCircuitPeering) {
            $.expressRouteCircuitPeering = expressRouteCircuitPeering;
            return this;
        }

        /**
         * @param expressRouteGatewayBypass Enable FastPath to vWan Firewall hub.
         * 
         * @return builder
         * 
         */
        public Builder expressRouteGatewayBypass(@Nullable Boolean expressRouteGatewayBypass) {
            $.expressRouteGatewayBypass = expressRouteGatewayBypass;
            return this;
        }

        /**
         * @param id Resource ID.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable String id) {
            $.id = id;
            return this;
        }

        /**
         * @param name The name of the resource.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param provisioningState The provisioning state of the express route connection resource.
         * 
         * @return builder
         * 
         */
        public Builder provisioningState(String provisioningState) {
            $.provisioningState = provisioningState;
            return this;
        }

        /**
         * @param routingConfiguration The Routing Configuration indicating the associated and propagated route tables on this connection.
         * 
         * @return builder
         * 
         */
        public Builder routingConfiguration(@Nullable RoutingConfigurationResponse routingConfiguration) {
            $.routingConfiguration = routingConfiguration;
            return this;
        }

        /**
         * @param routingWeight The routing weight associated to the connection.
         * 
         * @return builder
         * 
         */
        public Builder routingWeight(@Nullable Integer routingWeight) {
            $.routingWeight = routingWeight;
            return this;
        }

        public ExpressRouteConnectionResponse build() {
            $.expressRouteCircuitPeering = Objects.requireNonNull($.expressRouteCircuitPeering, "expected parameter 'expressRouteCircuitPeering' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.provisioningState = Objects.requireNonNull($.provisioningState, "expected parameter 'provisioningState' to be non-null");
            return $;
        }
    }

}
