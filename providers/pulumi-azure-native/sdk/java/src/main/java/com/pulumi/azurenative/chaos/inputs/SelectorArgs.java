// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.chaos.inputs;

import com.pulumi.azurenative.chaos.enums.SelectorType;
import com.pulumi.azurenative.chaos.inputs.TargetReferenceArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Model that represents a selector in the Experiment resource.
 * 
 */
public final class SelectorArgs extends com.pulumi.resources.ResourceArgs {

    public static final SelectorArgs Empty = new SelectorArgs();

    /**
     * String of the selector ID.
     * 
     */
    @Import(name="id", required=true)
    private Output<String> id;

    /**
     * @return String of the selector ID.
     * 
     */
    public Output<String> id() {
        return this.id;
    }

    /**
     * List of Target references.
     * 
     */
    @Import(name="targets", required=true)
    private Output<List<TargetReferenceArgs>> targets;

    /**
     * @return List of Target references.
     * 
     */
    public Output<List<TargetReferenceArgs>> targets() {
        return this.targets;
    }

    /**
     * Enum of the selector type.
     * 
     */
    @Import(name="type", required=true)
    private Output<SelectorType> type;

    /**
     * @return Enum of the selector type.
     * 
     */
    public Output<SelectorType> type() {
        return this.type;
    }

    private SelectorArgs() {}

    private SelectorArgs(SelectorArgs $) {
        this.id = $.id;
        this.targets = $.targets;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SelectorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SelectorArgs $;

        public Builder() {
            $ = new SelectorArgs();
        }

        public Builder(SelectorArgs defaults) {
            $ = new SelectorArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param id String of the selector ID.
         * 
         * @return builder
         * 
         */
        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id String of the selector ID.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param targets List of Target references.
         * 
         * @return builder
         * 
         */
        public Builder targets(Output<List<TargetReferenceArgs>> targets) {
            $.targets = targets;
            return this;
        }

        /**
         * @param targets List of Target references.
         * 
         * @return builder
         * 
         */
        public Builder targets(List<TargetReferenceArgs> targets) {
            return targets(Output.of(targets));
        }

        /**
         * @param targets List of Target references.
         * 
         * @return builder
         * 
         */
        public Builder targets(TargetReferenceArgs... targets) {
            return targets(List.of(targets));
        }

        /**
         * @param type Enum of the selector type.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<SelectorType> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Enum of the selector type.
         * 
         * @return builder
         * 
         */
        public Builder type(SelectorType type) {
            return type(Output.of(type));
        }

        public SelectorArgs build() {
            $.id = Objects.requireNonNull($.id, "expected parameter 'id' to be non-null");
            $.targets = Objects.requireNonNull($.targets, "expected parameter 'targets' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
