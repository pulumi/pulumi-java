// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.apimanagement;

import com.pulumi.azurenative.apimanagement.enums.SubscriptionState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SubscriptionArgs extends com.pulumi.resources.ResourceArgs {

    public static final SubscriptionArgs Empty = new SubscriptionArgs();

    /**
     * Determines whether tracing can be enabled
     * 
     */
    @Import(name="allowTracing")
    private @Nullable Output<Boolean> allowTracing;

    public Optional<Output<Boolean>> allowTracing() {
        return Optional.ofNullable(this.allowTracing);
    }

    /**
     * Determines the type of application which send the create user request. Default is legacy publisher portal.
     * 
     */
    @Import(name="appType")
    private @Nullable Output<String> appType;

    public Optional<Output<String>> appType() {
        return Optional.ofNullable(this.appType);
    }

    /**
     * Subscription name.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * Notify change in Subscription State.
     *  - If false, do not send any email notification for change of state of subscription
     *  - If true, send email notification of change of state of subscription
     * 
     */
    @Import(name="notify")
    private @Nullable Output<Boolean> notify;

    public Optional<Output<Boolean>> notify_() {
        return Optional.ofNullable(this.notify);
    }

    /**
     * User (user id path) for whom subscription is being created in form /users/{userId}
     * 
     */
    @Import(name="ownerId")
    private @Nullable Output<String> ownerId;

    public Optional<Output<String>> ownerId() {
        return Optional.ofNullable(this.ownerId);
    }

    /**
     * Primary subscription key. If not specified during request key will be generated automatically.
     * 
     */
    @Import(name="primaryKey")
    private @Nullable Output<String> primaryKey;

    public Optional<Output<String>> primaryKey() {
        return Optional.ofNullable(this.primaryKey);
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Scope like /products/{productId} or /apis or /apis/{apiId}.
     * 
     */
    @Import(name="scope", required=true)
    private Output<String> scope;

    public Output<String> scope() {
        return this.scope;
    }

    /**
     * Secondary subscription key. If not specified during request key will be generated automatically.
     * 
     */
    @Import(name="secondaryKey")
    private @Nullable Output<String> secondaryKey;

    public Optional<Output<String>> secondaryKey() {
        return Optional.ofNullable(this.secondaryKey);
    }

    /**
     * The name of the API Management service.
     * 
     */
    @Import(name="serviceName", required=true)
    private Output<String> serviceName;

    public Output<String> serviceName() {
        return this.serviceName;
    }

    /**
     * Subscription entity Identifier. The entity represents the association between a user and a product in API Management.
     * 
     */
    @Import(name="sid")
    private @Nullable Output<String> sid;

    public Optional<Output<String>> sid() {
        return Optional.ofNullable(this.sid);
    }

    /**
     * Initial subscription state. If no value is specified, subscription is created with Submitted state. Possible states are * active – the subscription is active, * suspended – the subscription is blocked, and the subscriber cannot call any APIs of the product, * submitted – the subscription request has been made by the developer, but has not yet been approved or rejected, * rejected – the subscription request has been denied by an administrator, * cancelled – the subscription has been cancelled by the developer or administrator, * expired – the subscription reached its expiration date and was deactivated.
     * 
     */
    @Import(name="state")
    private @Nullable Output<SubscriptionState> state;

    public Optional<Output<SubscriptionState>> state() {
        return Optional.ofNullable(this.state);
    }

    private SubscriptionArgs() {}

    private SubscriptionArgs(SubscriptionArgs $) {
        this.allowTracing = $.allowTracing;
        this.appType = $.appType;
        this.displayName = $.displayName;
        this.notify = $.notify;
        this.ownerId = $.ownerId;
        this.primaryKey = $.primaryKey;
        this.resourceGroupName = $.resourceGroupName;
        this.scope = $.scope;
        this.secondaryKey = $.secondaryKey;
        this.serviceName = $.serviceName;
        this.sid = $.sid;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SubscriptionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SubscriptionArgs $;

        public Builder() {
            $ = new SubscriptionArgs();
        }

        public Builder(SubscriptionArgs defaults) {
            $ = new SubscriptionArgs(Objects.requireNonNull(defaults));
        }

        public Builder allowTracing(@Nullable Output<Boolean> allowTracing) {
            $.allowTracing = allowTracing;
            return this;
        }

        public Builder allowTracing(Boolean allowTracing) {
            return allowTracing(Output.of(allowTracing));
        }

        public Builder appType(@Nullable Output<String> appType) {
            $.appType = appType;
            return this;
        }

        public Builder appType(String appType) {
            return appType(Output.of(appType));
        }

        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder notify_(@Nullable Output<Boolean> notify) {
            $.notify = notify;
            return this;
        }

        public Builder notify_(Boolean notify) {
            return notify_(Output.of(notify));
        }

        public Builder ownerId(@Nullable Output<String> ownerId) {
            $.ownerId = ownerId;
            return this;
        }

        public Builder ownerId(String ownerId) {
            return ownerId(Output.of(ownerId));
        }

        public Builder primaryKey(@Nullable Output<String> primaryKey) {
            $.primaryKey = primaryKey;
            return this;
        }

        public Builder primaryKey(String primaryKey) {
            return primaryKey(Output.of(primaryKey));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder scope(Output<String> scope) {
            $.scope = scope;
            return this;
        }

        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        public Builder secondaryKey(@Nullable Output<String> secondaryKey) {
            $.secondaryKey = secondaryKey;
            return this;
        }

        public Builder secondaryKey(String secondaryKey) {
            return secondaryKey(Output.of(secondaryKey));
        }

        public Builder serviceName(Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        public Builder sid(@Nullable Output<String> sid) {
            $.sid = sid;
            return this;
        }

        public Builder sid(String sid) {
            return sid(Output.of(sid));
        }

        public Builder state(@Nullable Output<SubscriptionState> state) {
            $.state = state;
            return this;
        }

        public Builder state(SubscriptionState state) {
            return state(Output.of(state));
        }

        public SubscriptionArgs build() {
            $.displayName = Objects.requireNonNull($.displayName, "expected parameter 'displayName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.scope = Objects.requireNonNull($.scope, "expected parameter 'scope' to be non-null");
            $.serviceName = Objects.requireNonNull($.serviceName, "expected parameter 'serviceName' to be non-null");
            return $;
        }
    }

}
