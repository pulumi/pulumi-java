// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.logic.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The AS2 agreement validation settings.
 * 
 */
public final class AS2ValidationSettingsResponse extends com.pulumi.resources.InvokeArgs {

    public static final AS2ValidationSettingsResponse Empty = new AS2ValidationSettingsResponse();

    /**
     * The value indicating whether to check for certificate revocation list on receive.
     * 
     */
    @Import(name="checkCertificateRevocationListOnReceive", required=true)
    private Boolean checkCertificateRevocationListOnReceive;

    /**
     * @return The value indicating whether to check for certificate revocation list on receive.
     * 
     */
    public Boolean checkCertificateRevocationListOnReceive() {
        return this.checkCertificateRevocationListOnReceive;
    }

    /**
     * The value indicating whether to check for certificate revocation list on send.
     * 
     */
    @Import(name="checkCertificateRevocationListOnSend", required=true)
    private Boolean checkCertificateRevocationListOnSend;

    /**
     * @return The value indicating whether to check for certificate revocation list on send.
     * 
     */
    public Boolean checkCertificateRevocationListOnSend() {
        return this.checkCertificateRevocationListOnSend;
    }

    /**
     * The value indicating whether to check for duplicate message.
     * 
     */
    @Import(name="checkDuplicateMessage", required=true)
    private Boolean checkDuplicateMessage;

    /**
     * @return The value indicating whether to check for duplicate message.
     * 
     */
    public Boolean checkDuplicateMessage() {
        return this.checkDuplicateMessage;
    }

    /**
     * The value indicating whether the message has to be compressed.
     * 
     */
    @Import(name="compressMessage", required=true)
    private Boolean compressMessage;

    /**
     * @return The value indicating whether the message has to be compressed.
     * 
     */
    public Boolean compressMessage() {
        return this.compressMessage;
    }

    /**
     * The value indicating whether the message has to be encrypted.
     * 
     */
    @Import(name="encryptMessage", required=true)
    private Boolean encryptMessage;

    /**
     * @return The value indicating whether the message has to be encrypted.
     * 
     */
    public Boolean encryptMessage() {
        return this.encryptMessage;
    }

    /**
     * The encryption algorithm.
     * 
     */
    @Import(name="encryptionAlgorithm", required=true)
    private String encryptionAlgorithm;

    /**
     * @return The encryption algorithm.
     * 
     */
    public String encryptionAlgorithm() {
        return this.encryptionAlgorithm;
    }

    /**
     * The number of days to look back for duplicate interchange.
     * 
     */
    @Import(name="interchangeDuplicatesValidityDays", required=true)
    private Integer interchangeDuplicatesValidityDays;

    /**
     * @return The number of days to look back for duplicate interchange.
     * 
     */
    public Integer interchangeDuplicatesValidityDays() {
        return this.interchangeDuplicatesValidityDays;
    }

    /**
     * The value indicating whether to override incoming message properties with those in agreement.
     * 
     */
    @Import(name="overrideMessageProperties", required=true)
    private Boolean overrideMessageProperties;

    /**
     * @return The value indicating whether to override incoming message properties with those in agreement.
     * 
     */
    public Boolean overrideMessageProperties() {
        return this.overrideMessageProperties;
    }

    /**
     * The value indicating whether the message has to be signed.
     * 
     */
    @Import(name="signMessage", required=true)
    private Boolean signMessage;

    /**
     * @return The value indicating whether the message has to be signed.
     * 
     */
    public Boolean signMessage() {
        return this.signMessage;
    }

    /**
     * The signing algorithm.
     * 
     */
    @Import(name="signingAlgorithm")
    private @Nullable String signingAlgorithm;

    /**
     * @return The signing algorithm.
     * 
     */
    public Optional<String> signingAlgorithm() {
        return Optional.ofNullable(this.signingAlgorithm);
    }

    private AS2ValidationSettingsResponse() {}

    private AS2ValidationSettingsResponse(AS2ValidationSettingsResponse $) {
        this.checkCertificateRevocationListOnReceive = $.checkCertificateRevocationListOnReceive;
        this.checkCertificateRevocationListOnSend = $.checkCertificateRevocationListOnSend;
        this.checkDuplicateMessage = $.checkDuplicateMessage;
        this.compressMessage = $.compressMessage;
        this.encryptMessage = $.encryptMessage;
        this.encryptionAlgorithm = $.encryptionAlgorithm;
        this.interchangeDuplicatesValidityDays = $.interchangeDuplicatesValidityDays;
        this.overrideMessageProperties = $.overrideMessageProperties;
        this.signMessage = $.signMessage;
        this.signingAlgorithm = $.signingAlgorithm;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AS2ValidationSettingsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AS2ValidationSettingsResponse $;

        public Builder() {
            $ = new AS2ValidationSettingsResponse();
        }

        public Builder(AS2ValidationSettingsResponse defaults) {
            $ = new AS2ValidationSettingsResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param checkCertificateRevocationListOnReceive The value indicating whether to check for certificate revocation list on receive.
         * 
         * @return builder
         * 
         */
        public Builder checkCertificateRevocationListOnReceive(Boolean checkCertificateRevocationListOnReceive) {
            $.checkCertificateRevocationListOnReceive = checkCertificateRevocationListOnReceive;
            return this;
        }

        /**
         * @param checkCertificateRevocationListOnSend The value indicating whether to check for certificate revocation list on send.
         * 
         * @return builder
         * 
         */
        public Builder checkCertificateRevocationListOnSend(Boolean checkCertificateRevocationListOnSend) {
            $.checkCertificateRevocationListOnSend = checkCertificateRevocationListOnSend;
            return this;
        }

        /**
         * @param checkDuplicateMessage The value indicating whether to check for duplicate message.
         * 
         * @return builder
         * 
         */
        public Builder checkDuplicateMessage(Boolean checkDuplicateMessage) {
            $.checkDuplicateMessage = checkDuplicateMessage;
            return this;
        }

        /**
         * @param compressMessage The value indicating whether the message has to be compressed.
         * 
         * @return builder
         * 
         */
        public Builder compressMessage(Boolean compressMessage) {
            $.compressMessage = compressMessage;
            return this;
        }

        /**
         * @param encryptMessage The value indicating whether the message has to be encrypted.
         * 
         * @return builder
         * 
         */
        public Builder encryptMessage(Boolean encryptMessage) {
            $.encryptMessage = encryptMessage;
            return this;
        }

        /**
         * @param encryptionAlgorithm The encryption algorithm.
         * 
         * @return builder
         * 
         */
        public Builder encryptionAlgorithm(String encryptionAlgorithm) {
            $.encryptionAlgorithm = encryptionAlgorithm;
            return this;
        }

        /**
         * @param interchangeDuplicatesValidityDays The number of days to look back for duplicate interchange.
         * 
         * @return builder
         * 
         */
        public Builder interchangeDuplicatesValidityDays(Integer interchangeDuplicatesValidityDays) {
            $.interchangeDuplicatesValidityDays = interchangeDuplicatesValidityDays;
            return this;
        }

        /**
         * @param overrideMessageProperties The value indicating whether to override incoming message properties with those in agreement.
         * 
         * @return builder
         * 
         */
        public Builder overrideMessageProperties(Boolean overrideMessageProperties) {
            $.overrideMessageProperties = overrideMessageProperties;
            return this;
        }

        /**
         * @param signMessage The value indicating whether the message has to be signed.
         * 
         * @return builder
         * 
         */
        public Builder signMessage(Boolean signMessage) {
            $.signMessage = signMessage;
            return this;
        }

        /**
         * @param signingAlgorithm The signing algorithm.
         * 
         * @return builder
         * 
         */
        public Builder signingAlgorithm(@Nullable String signingAlgorithm) {
            $.signingAlgorithm = signingAlgorithm;
            return this;
        }

        public AS2ValidationSettingsResponse build() {
            $.checkCertificateRevocationListOnReceive = Objects.requireNonNull($.checkCertificateRevocationListOnReceive, "expected parameter 'checkCertificateRevocationListOnReceive' to be non-null");
            $.checkCertificateRevocationListOnSend = Objects.requireNonNull($.checkCertificateRevocationListOnSend, "expected parameter 'checkCertificateRevocationListOnSend' to be non-null");
            $.checkDuplicateMessage = Objects.requireNonNull($.checkDuplicateMessage, "expected parameter 'checkDuplicateMessage' to be non-null");
            $.compressMessage = Objects.requireNonNull($.compressMessage, "expected parameter 'compressMessage' to be non-null");
            $.encryptMessage = Objects.requireNonNull($.encryptMessage, "expected parameter 'encryptMessage' to be non-null");
            $.encryptionAlgorithm = Objects.requireNonNull($.encryptionAlgorithm, "expected parameter 'encryptionAlgorithm' to be non-null");
            $.interchangeDuplicatesValidityDays = Objects.requireNonNull($.interchangeDuplicatesValidityDays, "expected parameter 'interchangeDuplicatesValidityDays' to be non-null");
            $.overrideMessageProperties = Objects.requireNonNull($.overrideMessageProperties, "expected parameter 'overrideMessageProperties' to be non-null");
            $.signMessage = Objects.requireNonNull($.signMessage, "expected parameter 'signMessage' to be non-null");
            return $;
        }
    }

}
