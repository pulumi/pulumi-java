// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.eventhub;

import com.pulumi.azurenative.eventhub.enums.AccessRights;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EventHubAuthorizationRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final EventHubAuthorizationRuleArgs Empty = new EventHubAuthorizationRuleArgs();

    /**
     * The authorization rule name.
     * 
     */
    @Import(name="authorizationRuleName")
    private @Nullable Output<String> authorizationRuleName;

    /**
     * @return The authorization rule name.
     * 
     */
    public Optional<Output<String>> authorizationRuleName() {
        return Optional.ofNullable(this.authorizationRuleName);
    }

    /**
     * The Event Hub name
     * 
     */
    @Import(name="eventHubName", required=true)
    private Output<String> eventHubName;

    /**
     * @return The Event Hub name
     * 
     */
    public Output<String> eventHubName() {
        return this.eventHubName;
    }

    /**
     * The Namespace name
     * 
     */
    @Import(name="namespaceName", required=true)
    private Output<String> namespaceName;

    /**
     * @return The Namespace name
     * 
     */
    public Output<String> namespaceName() {
        return this.namespaceName;
    }

    /**
     * Name of the resource group within the azure subscription.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return Name of the resource group within the azure subscription.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The rights associated with the rule.
     * 
     */
    @Import(name="rights", required=true)
    private Output<List<Either<String,AccessRights>>> rights;

    /**
     * @return The rights associated with the rule.
     * 
     */
    public Output<List<Either<String,AccessRights>>> rights() {
        return this.rights;
    }

    private EventHubAuthorizationRuleArgs() {}

    private EventHubAuthorizationRuleArgs(EventHubAuthorizationRuleArgs $) {
        this.authorizationRuleName = $.authorizationRuleName;
        this.eventHubName = $.eventHubName;
        this.namespaceName = $.namespaceName;
        this.resourceGroupName = $.resourceGroupName;
        this.rights = $.rights;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EventHubAuthorizationRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EventHubAuthorizationRuleArgs $;

        public Builder() {
            $ = new EventHubAuthorizationRuleArgs();
        }

        public Builder(EventHubAuthorizationRuleArgs defaults) {
            $ = new EventHubAuthorizationRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authorizationRuleName The authorization rule name.
         * 
         * @return builder
         * 
         */
        public Builder authorizationRuleName(@Nullable Output<String> authorizationRuleName) {
            $.authorizationRuleName = authorizationRuleName;
            return this;
        }

        /**
         * @param authorizationRuleName The authorization rule name.
         * 
         * @return builder
         * 
         */
        public Builder authorizationRuleName(String authorizationRuleName) {
            return authorizationRuleName(Output.of(authorizationRuleName));
        }

        /**
         * @param eventHubName The Event Hub name
         * 
         * @return builder
         * 
         */
        public Builder eventHubName(Output<String> eventHubName) {
            $.eventHubName = eventHubName;
            return this;
        }

        /**
         * @param eventHubName The Event Hub name
         * 
         * @return builder
         * 
         */
        public Builder eventHubName(String eventHubName) {
            return eventHubName(Output.of(eventHubName));
        }

        /**
         * @param namespaceName The Namespace name
         * 
         * @return builder
         * 
         */
        public Builder namespaceName(Output<String> namespaceName) {
            $.namespaceName = namespaceName;
            return this;
        }

        /**
         * @param namespaceName The Namespace name
         * 
         * @return builder
         * 
         */
        public Builder namespaceName(String namespaceName) {
            return namespaceName(Output.of(namespaceName));
        }

        /**
         * @param resourceGroupName Name of the resource group within the azure subscription.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName Name of the resource group within the azure subscription.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param rights The rights associated with the rule.
         * 
         * @return builder
         * 
         */
        public Builder rights(Output<List<Either<String,AccessRights>>> rights) {
            $.rights = rights;
            return this;
        }

        /**
         * @param rights The rights associated with the rule.
         * 
         * @return builder
         * 
         */
        public Builder rights(List<Either<String,AccessRights>> rights) {
            return rights(Output.of(rights));
        }

        /**
         * @param rights The rights associated with the rule.
         * 
         * @return builder
         * 
         */
        public Builder rights(Either<String,AccessRights>... rights) {
            return rights(List.of(rights));
        }

        public EventHubAuthorizationRuleArgs build() {
            $.eventHubName = Objects.requireNonNull($.eventHubName, "expected parameter 'eventHubName' to be non-null");
            $.namespaceName = Objects.requireNonNull($.namespaceName, "expected parameter 'namespaceName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.rights = Objects.requireNonNull($.rights, "expected parameter 'rights' to be non-null");
            return $;
        }
    }

}
