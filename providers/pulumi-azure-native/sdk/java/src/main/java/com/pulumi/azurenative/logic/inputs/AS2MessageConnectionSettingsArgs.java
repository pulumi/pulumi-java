// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.logic.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.util.Objects;


/**
 * The AS2 agreement message connection settings.
 * 
 */
public final class AS2MessageConnectionSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final AS2MessageConnectionSettingsArgs Empty = new AS2MessageConnectionSettingsArgs();

    /**
     * The value indicating whether to ignore mismatch in certificate name.
     * 
     */
    @Import(name="ignoreCertificateNameMismatch", required=true)
      private final Output<Boolean> ignoreCertificateNameMismatch;

    public Output<Boolean> ignoreCertificateNameMismatch() {
        return this.ignoreCertificateNameMismatch;
    }

    /**
     * The value indicating whether to keep the connection alive.
     * 
     */
    @Import(name="keepHttpConnectionAlive", required=true)
      private final Output<Boolean> keepHttpConnectionAlive;

    public Output<Boolean> keepHttpConnectionAlive() {
        return this.keepHttpConnectionAlive;
    }

    /**
     * The value indicating whether to support HTTP status code &#39;CONTINUE&#39;.
     * 
     */
    @Import(name="supportHttpStatusCodeContinue", required=true)
      private final Output<Boolean> supportHttpStatusCodeContinue;

    public Output<Boolean> supportHttpStatusCodeContinue() {
        return this.supportHttpStatusCodeContinue;
    }

    /**
     * The value indicating whether to unfold the HTTP headers.
     * 
     */
    @Import(name="unfoldHttpHeaders", required=true)
      private final Output<Boolean> unfoldHttpHeaders;

    public Output<Boolean> unfoldHttpHeaders() {
        return this.unfoldHttpHeaders;
    }

    public AS2MessageConnectionSettingsArgs(
        Output<Boolean> ignoreCertificateNameMismatch,
        Output<Boolean> keepHttpConnectionAlive,
        Output<Boolean> supportHttpStatusCodeContinue,
        Output<Boolean> unfoldHttpHeaders) {
        this.ignoreCertificateNameMismatch = Objects.requireNonNull(ignoreCertificateNameMismatch, "expected parameter 'ignoreCertificateNameMismatch' to be non-null");
        this.keepHttpConnectionAlive = Objects.requireNonNull(keepHttpConnectionAlive, "expected parameter 'keepHttpConnectionAlive' to be non-null");
        this.supportHttpStatusCodeContinue = Objects.requireNonNull(supportHttpStatusCodeContinue, "expected parameter 'supportHttpStatusCodeContinue' to be non-null");
        this.unfoldHttpHeaders = Objects.requireNonNull(unfoldHttpHeaders, "expected parameter 'unfoldHttpHeaders' to be non-null");
    }

    private AS2MessageConnectionSettingsArgs() {
        this.ignoreCertificateNameMismatch = Codegen.empty();
        this.keepHttpConnectionAlive = Codegen.empty();
        this.supportHttpStatusCodeContinue = Codegen.empty();
        this.unfoldHttpHeaders = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AS2MessageConnectionSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<Boolean> ignoreCertificateNameMismatch;
        private Output<Boolean> keepHttpConnectionAlive;
        private Output<Boolean> supportHttpStatusCodeContinue;
        private Output<Boolean> unfoldHttpHeaders;

        public Builder() {
    	      // Empty
        }

        public Builder(AS2MessageConnectionSettingsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ignoreCertificateNameMismatch = defaults.ignoreCertificateNameMismatch;
    	      this.keepHttpConnectionAlive = defaults.keepHttpConnectionAlive;
    	      this.supportHttpStatusCodeContinue = defaults.supportHttpStatusCodeContinue;
    	      this.unfoldHttpHeaders = defaults.unfoldHttpHeaders;
        }

        public Builder ignoreCertificateNameMismatch(Output<Boolean> ignoreCertificateNameMismatch) {
            this.ignoreCertificateNameMismatch = Objects.requireNonNull(ignoreCertificateNameMismatch);
            return this;
        }
        public Builder ignoreCertificateNameMismatch(Boolean ignoreCertificateNameMismatch) {
            this.ignoreCertificateNameMismatch = Output.of(Objects.requireNonNull(ignoreCertificateNameMismatch));
            return this;
        }
        public Builder keepHttpConnectionAlive(Output<Boolean> keepHttpConnectionAlive) {
            this.keepHttpConnectionAlive = Objects.requireNonNull(keepHttpConnectionAlive);
            return this;
        }
        public Builder keepHttpConnectionAlive(Boolean keepHttpConnectionAlive) {
            this.keepHttpConnectionAlive = Output.of(Objects.requireNonNull(keepHttpConnectionAlive));
            return this;
        }
        public Builder supportHttpStatusCodeContinue(Output<Boolean> supportHttpStatusCodeContinue) {
            this.supportHttpStatusCodeContinue = Objects.requireNonNull(supportHttpStatusCodeContinue);
            return this;
        }
        public Builder supportHttpStatusCodeContinue(Boolean supportHttpStatusCodeContinue) {
            this.supportHttpStatusCodeContinue = Output.of(Objects.requireNonNull(supportHttpStatusCodeContinue));
            return this;
        }
        public Builder unfoldHttpHeaders(Output<Boolean> unfoldHttpHeaders) {
            this.unfoldHttpHeaders = Objects.requireNonNull(unfoldHttpHeaders);
            return this;
        }
        public Builder unfoldHttpHeaders(Boolean unfoldHttpHeaders) {
            this.unfoldHttpHeaders = Output.of(Objects.requireNonNull(unfoldHttpHeaders));
            return this;
        }        public AS2MessageConnectionSettingsArgs build() {
            return new AS2MessageConnectionSettingsArgs(ignoreCertificateNameMismatch, keepHttpConnectionAlive, supportHttpStatusCodeContinue, unfoldHttpHeaders);
        }
    }
}
