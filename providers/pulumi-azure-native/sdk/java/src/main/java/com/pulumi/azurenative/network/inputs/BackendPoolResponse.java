// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.azurenative.network.inputs.BackendResponse;
import com.pulumi.azurenative.network.inputs.SubResourceResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A backend pool is a collection of backends that can be routed to.
 * 
 */
public final class BackendPoolResponse extends com.pulumi.resources.InvokeArgs {

    public static final BackendPoolResponse Empty = new BackendPoolResponse();

    /**
     * The set of backends for this pool
     * 
     */
    @Import(name="backends")
    private @Nullable List<BackendResponse> backends;

    /**
     * @return The set of backends for this pool
     * 
     */
    public Optional<List<BackendResponse>> backends() {
        return Optional.ofNullable(this.backends);
    }

    /**
     * L7 health probe settings for a backend pool
     * 
     */
    @Import(name="healthProbeSettings")
    private @Nullable SubResourceResponse healthProbeSettings;

    /**
     * @return L7 health probe settings for a backend pool
     * 
     */
    public Optional<SubResourceResponse> healthProbeSettings() {
        return Optional.ofNullable(this.healthProbeSettings);
    }

    /**
     * Resource ID.
     * 
     */
    @Import(name="id")
    private @Nullable String id;

    /**
     * @return Resource ID.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Load balancing settings for a backend pool
     * 
     */
    @Import(name="loadBalancingSettings")
    private @Nullable SubResourceResponse loadBalancingSettings;

    /**
     * @return Load balancing settings for a backend pool
     * 
     */
    public Optional<SubResourceResponse> loadBalancingSettings() {
        return Optional.ofNullable(this.loadBalancingSettings);
    }

    /**
     * Resource name.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return Resource name.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Resource status.
     * 
     */
    @Import(name="resourceState", required=true)
    private String resourceState;

    /**
     * @return Resource status.
     * 
     */
    public String resourceState() {
        return this.resourceState;
    }

    /**
     * Resource type.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    /**
     * @return Resource type.
     * 
     */
    public String type() {
        return this.type;
    }

    private BackendPoolResponse() {}

    private BackendPoolResponse(BackendPoolResponse $) {
        this.backends = $.backends;
        this.healthProbeSettings = $.healthProbeSettings;
        this.id = $.id;
        this.loadBalancingSettings = $.loadBalancingSettings;
        this.name = $.name;
        this.resourceState = $.resourceState;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BackendPoolResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BackendPoolResponse $;

        public Builder() {
            $ = new BackendPoolResponse();
        }

        public Builder(BackendPoolResponse defaults) {
            $ = new BackendPoolResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param backends The set of backends for this pool
         * 
         * @return builder
         * 
         */
        public Builder backends(@Nullable List<BackendResponse> backends) {
            $.backends = backends;
            return this;
        }

        /**
         * @param backends The set of backends for this pool
         * 
         * @return builder
         * 
         */
        public Builder backends(BackendResponse... backends) {
            return backends(List.of(backends));
        }

        /**
         * @param healthProbeSettings L7 health probe settings for a backend pool
         * 
         * @return builder
         * 
         */
        public Builder healthProbeSettings(@Nullable SubResourceResponse healthProbeSettings) {
            $.healthProbeSettings = healthProbeSettings;
            return this;
        }

        /**
         * @param id Resource ID.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable String id) {
            $.id = id;
            return this;
        }

        /**
         * @param loadBalancingSettings Load balancing settings for a backend pool
         * 
         * @return builder
         * 
         */
        public Builder loadBalancingSettings(@Nullable SubResourceResponse loadBalancingSettings) {
            $.loadBalancingSettings = loadBalancingSettings;
            return this;
        }

        /**
         * @param name Resource name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param resourceState Resource status.
         * 
         * @return builder
         * 
         */
        public Builder resourceState(String resourceState) {
            $.resourceState = resourceState;
            return this;
        }

        /**
         * @param type Resource type.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public BackendPoolResponse build() {
            $.resourceState = Objects.requireNonNull($.resourceState, "expected parameter 'resourceState' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
