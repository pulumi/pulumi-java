// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.compute.inputs;

import com.pulumi.azurenative.compute.inputs.DiskEncryptionSetParametersResponse;
import com.pulumi.azurenative.compute.inputs.SubResourceResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Describes a data disk.
 * 
 */
public final class ImageDataDiskResponse extends com.pulumi.resources.InvokeArgs {

    public static final ImageDataDiskResponse Empty = new ImageDataDiskResponse();

    /**
     * The Virtual Hard Disk.
     * 
     */
    @Import(name="blobUri")
    private @Nullable String blobUri;

    public Optional<String> blobUri() {
        return Optional.ofNullable(this.blobUri);
    }

    /**
     * Specifies the caching requirements. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt; **None** &lt;br&gt;&lt;br&gt; **ReadOnly** &lt;br&gt;&lt;br&gt; **ReadWrite** &lt;br&gt;&lt;br&gt; Default: **None for Standard storage. ReadOnly for Premium storage**
     * 
     */
    @Import(name="caching")
    private @Nullable String caching;

    public Optional<String> caching() {
        return Optional.ofNullable(this.caching);
    }

    /**
     * Specifies the customer managed disk encryption set resource id for the managed image disk.
     * 
     */
    @Import(name="diskEncryptionSet")
    private @Nullable DiskEncryptionSetParametersResponse diskEncryptionSet;

    public Optional<DiskEncryptionSetParametersResponse> diskEncryptionSet() {
        return Optional.ofNullable(this.diskEncryptionSet);
    }

    /**
     * Specifies the size of empty data disks in gigabytes. This element can be used to overwrite the name of the disk in a virtual machine image. &lt;br&gt;&lt;br&gt; This value cannot be larger than 1023 GB
     * 
     */
    @Import(name="diskSizeGB")
    private @Nullable Integer diskSizeGB;

    public Optional<Integer> diskSizeGB() {
        return Optional.ofNullable(this.diskSizeGB);
    }

    /**
     * Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data disk attached to a VM.
     * 
     */
    @Import(name="lun", required=true)
    private Integer lun;

    public Integer lun() {
        return this.lun;
    }

    /**
     * The managedDisk.
     * 
     */
    @Import(name="managedDisk")
    private @Nullable SubResourceResponse managedDisk;

    public Optional<SubResourceResponse> managedDisk() {
        return Optional.ofNullable(this.managedDisk);
    }

    /**
     * The snapshot.
     * 
     */
    @Import(name="snapshot")
    private @Nullable SubResourceResponse snapshot;

    public Optional<SubResourceResponse> snapshot() {
        return Optional.ofNullable(this.snapshot);
    }

    /**
     * Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk.
     * 
     */
    @Import(name="storageAccountType")
    private @Nullable String storageAccountType;

    public Optional<String> storageAccountType() {
        return Optional.ofNullable(this.storageAccountType);
    }

    private ImageDataDiskResponse() {}

    private ImageDataDiskResponse(ImageDataDiskResponse $) {
        this.blobUri = $.blobUri;
        this.caching = $.caching;
        this.diskEncryptionSet = $.diskEncryptionSet;
        this.diskSizeGB = $.diskSizeGB;
        this.lun = $.lun;
        this.managedDisk = $.managedDisk;
        this.snapshot = $.snapshot;
        this.storageAccountType = $.storageAccountType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ImageDataDiskResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ImageDataDiskResponse $;

        public Builder() {
            $ = new ImageDataDiskResponse();
        }

        public Builder(ImageDataDiskResponse defaults) {
            $ = new ImageDataDiskResponse(Objects.requireNonNull(defaults));
        }

        public Builder blobUri(@Nullable String blobUri) {
            $.blobUri = blobUri;
            return this;
        }

        public Builder caching(@Nullable String caching) {
            $.caching = caching;
            return this;
        }

        public Builder diskEncryptionSet(@Nullable DiskEncryptionSetParametersResponse diskEncryptionSet) {
            $.diskEncryptionSet = diskEncryptionSet;
            return this;
        }

        public Builder diskSizeGB(@Nullable Integer diskSizeGB) {
            $.diskSizeGB = diskSizeGB;
            return this;
        }

        public Builder lun(Integer lun) {
            $.lun = lun;
            return this;
        }

        public Builder managedDisk(@Nullable SubResourceResponse managedDisk) {
            $.managedDisk = managedDisk;
            return this;
        }

        public Builder snapshot(@Nullable SubResourceResponse snapshot) {
            $.snapshot = snapshot;
            return this;
        }

        public Builder storageAccountType(@Nullable String storageAccountType) {
            $.storageAccountType = storageAccountType;
            return this;
        }

        public ImageDataDiskResponse build() {
            $.lun = Objects.requireNonNull($.lun, "expected parameter 'lun' to be non-null");
            return $;
        }
    }

}
