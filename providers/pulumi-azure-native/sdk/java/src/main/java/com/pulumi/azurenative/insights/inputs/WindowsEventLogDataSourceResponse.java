// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.insights.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Definition of which Windows Event Log events will be collected and how they will be collected.
 * Only collected from Windows machines.
 * 
 */
public final class WindowsEventLogDataSourceResponse extends com.pulumi.resources.InvokeArgs {

    public static final WindowsEventLogDataSourceResponse Empty = new WindowsEventLogDataSourceResponse();

    /**
     * A friendly name for the data source.
     * This name should be unique across all data sources (regardless of type) within the data collection rule.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * List of streams that this data source will be sent to.
     * A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
     * 
     */
    @Import(name="streams")
    private @Nullable List<String> streams;

    public Optional<List<String>> streams() {
        return Optional.ofNullable(this.streams);
    }

    /**
     * A list of Windows Event Log queries in XPATH format.
     * 
     */
    @Import(name="xPathQueries")
    private @Nullable List<String> xPathQueries;

    public Optional<List<String>> xPathQueries() {
        return Optional.ofNullable(this.xPathQueries);
    }

    private WindowsEventLogDataSourceResponse() {}

    private WindowsEventLogDataSourceResponse(WindowsEventLogDataSourceResponse $) {
        this.name = $.name;
        this.streams = $.streams;
        this.xPathQueries = $.xPathQueries;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WindowsEventLogDataSourceResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WindowsEventLogDataSourceResponse $;

        public Builder() {
            $ = new WindowsEventLogDataSourceResponse();
        }

        public Builder(WindowsEventLogDataSourceResponse defaults) {
            $ = new WindowsEventLogDataSourceResponse(Objects.requireNonNull(defaults));
        }

        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        public Builder streams(@Nullable List<String> streams) {
            $.streams = streams;
            return this;
        }

        public Builder streams(String... streams) {
            return streams(List.of(streams));
        }

        public Builder xPathQueries(@Nullable List<String> xPathQueries) {
            $.xPathQueries = xPathQueries;
            return this;
        }

        public Builder xPathQueries(String... xPathQueries) {
            return xPathQueries(List.of(xPathQueries));
        }

        public WindowsEventLogDataSourceResponse build() {
            return $;
        }
    }

}
