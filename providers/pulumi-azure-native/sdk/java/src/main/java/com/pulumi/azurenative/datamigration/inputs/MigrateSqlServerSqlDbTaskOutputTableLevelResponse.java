// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datamigration.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;


/**
 * Table level result for Sql Server to Azure Sql DB migration.
 * 
 */
public final class MigrateSqlServerSqlDbTaskOutputTableLevelResponse extends com.pulumi.resources.InvokeArgs {

    public static final MigrateSqlServerSqlDbTaskOutputTableLevelResponse Empty = new MigrateSqlServerSqlDbTaskOutputTableLevelResponse();

    /**
     * Migration end time
     * 
     */
    @Import(name="endedOn", required=true)
    private String endedOn;

    /**
     * @return Migration end time
     * 
     */
    public String endedOn() {
        return this.endedOn;
    }

    /**
     * Wildcard string prefix to use for querying all errors of the item
     * 
     */
    @Import(name="errorPrefix", required=true)
    private String errorPrefix;

    /**
     * @return Wildcard string prefix to use for querying all errors of the item
     * 
     */
    public String errorPrefix() {
        return this.errorPrefix;
    }

    /**
     * Result identifier
     * 
     */
    @Import(name="id", required=true)
    private String id;

    /**
     * @return Result identifier
     * 
     */
    public String id() {
        return this.id;
    }

    /**
     * Number of successfully completed items
     * 
     */
    @Import(name="itemsCompletedCount", required=true)
    private Double itemsCompletedCount;

    /**
     * @return Number of successfully completed items
     * 
     */
    public Double itemsCompletedCount() {
        return this.itemsCompletedCount;
    }

    /**
     * Number of items
     * 
     */
    @Import(name="itemsCount", required=true)
    private Double itemsCount;

    /**
     * @return Number of items
     * 
     */
    public Double itemsCount() {
        return this.itemsCount;
    }

    /**
     * Name of the item
     * 
     */
    @Import(name="objectName", required=true)
    private String objectName;

    /**
     * @return Name of the item
     * 
     */
    public String objectName() {
        return this.objectName;
    }

    /**
     * Wildcard string prefix to use for querying all sub-tem results of the item
     * 
     */
    @Import(name="resultPrefix", required=true)
    private String resultPrefix;

    /**
     * @return Wildcard string prefix to use for querying all sub-tem results of the item
     * 
     */
    public String resultPrefix() {
        return this.resultPrefix;
    }

    /**
     * Result type
     * Expected value is &#39;TableLevelOutput&#39;.
     * 
     */
    @Import(name="resultType", required=true)
    private String resultType;

    /**
     * @return Result type
     * Expected value is &#39;TableLevelOutput&#39;.
     * 
     */
    public String resultType() {
        return this.resultType;
    }

    /**
     * Migration start time
     * 
     */
    @Import(name="startedOn", required=true)
    private String startedOn;

    /**
     * @return Migration start time
     * 
     */
    public String startedOn() {
        return this.startedOn;
    }

    /**
     * Current state of migration
     * 
     */
    @Import(name="state", required=true)
    private String state;

    /**
     * @return Current state of migration
     * 
     */
    public String state() {
        return this.state;
    }

    /**
     * Status message
     * 
     */
    @Import(name="statusMessage", required=true)
    private String statusMessage;

    /**
     * @return Status message
     * 
     */
    public String statusMessage() {
        return this.statusMessage;
    }

    private MigrateSqlServerSqlDbTaskOutputTableLevelResponse() {}

    private MigrateSqlServerSqlDbTaskOutputTableLevelResponse(MigrateSqlServerSqlDbTaskOutputTableLevelResponse $) {
        this.endedOn = $.endedOn;
        this.errorPrefix = $.errorPrefix;
        this.id = $.id;
        this.itemsCompletedCount = $.itemsCompletedCount;
        this.itemsCount = $.itemsCount;
        this.objectName = $.objectName;
        this.resultPrefix = $.resultPrefix;
        this.resultType = $.resultType;
        this.startedOn = $.startedOn;
        this.state = $.state;
        this.statusMessage = $.statusMessage;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MigrateSqlServerSqlDbTaskOutputTableLevelResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MigrateSqlServerSqlDbTaskOutputTableLevelResponse $;

        public Builder() {
            $ = new MigrateSqlServerSqlDbTaskOutputTableLevelResponse();
        }

        public Builder(MigrateSqlServerSqlDbTaskOutputTableLevelResponse defaults) {
            $ = new MigrateSqlServerSqlDbTaskOutputTableLevelResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param endedOn Migration end time
         * 
         * @return builder
         * 
         */
        public Builder endedOn(String endedOn) {
            $.endedOn = endedOn;
            return this;
        }

        /**
         * @param errorPrefix Wildcard string prefix to use for querying all errors of the item
         * 
         * @return builder
         * 
         */
        public Builder errorPrefix(String errorPrefix) {
            $.errorPrefix = errorPrefix;
            return this;
        }

        /**
         * @param id Result identifier
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            $.id = id;
            return this;
        }

        /**
         * @param itemsCompletedCount Number of successfully completed items
         * 
         * @return builder
         * 
         */
        public Builder itemsCompletedCount(Double itemsCompletedCount) {
            $.itemsCompletedCount = itemsCompletedCount;
            return this;
        }

        /**
         * @param itemsCount Number of items
         * 
         * @return builder
         * 
         */
        public Builder itemsCount(Double itemsCount) {
            $.itemsCount = itemsCount;
            return this;
        }

        /**
         * @param objectName Name of the item
         * 
         * @return builder
         * 
         */
        public Builder objectName(String objectName) {
            $.objectName = objectName;
            return this;
        }

        /**
         * @param resultPrefix Wildcard string prefix to use for querying all sub-tem results of the item
         * 
         * @return builder
         * 
         */
        public Builder resultPrefix(String resultPrefix) {
            $.resultPrefix = resultPrefix;
            return this;
        }

        /**
         * @param resultType Result type
         * Expected value is &#39;TableLevelOutput&#39;.
         * 
         * @return builder
         * 
         */
        public Builder resultType(String resultType) {
            $.resultType = resultType;
            return this;
        }

        /**
         * @param startedOn Migration start time
         * 
         * @return builder
         * 
         */
        public Builder startedOn(String startedOn) {
            $.startedOn = startedOn;
            return this;
        }

        /**
         * @param state Current state of migration
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            $.state = state;
            return this;
        }

        /**
         * @param statusMessage Status message
         * 
         * @return builder
         * 
         */
        public Builder statusMessage(String statusMessage) {
            $.statusMessage = statusMessage;
            return this;
        }

        public MigrateSqlServerSqlDbTaskOutputTableLevelResponse build() {
            $.endedOn = Objects.requireNonNull($.endedOn, "expected parameter 'endedOn' to be non-null");
            $.errorPrefix = Objects.requireNonNull($.errorPrefix, "expected parameter 'errorPrefix' to be non-null");
            $.id = Objects.requireNonNull($.id, "expected parameter 'id' to be non-null");
            $.itemsCompletedCount = Objects.requireNonNull($.itemsCompletedCount, "expected parameter 'itemsCompletedCount' to be non-null");
            $.itemsCount = Objects.requireNonNull($.itemsCount, "expected parameter 'itemsCount' to be non-null");
            $.objectName = Objects.requireNonNull($.objectName, "expected parameter 'objectName' to be non-null");
            $.resultPrefix = Objects.requireNonNull($.resultPrefix, "expected parameter 'resultPrefix' to be non-null");
            $.resultType = Codegen.stringProp("resultType").arg($.resultType).require();
            $.startedOn = Objects.requireNonNull($.startedOn, "expected parameter 'startedOn' to be non-null");
            $.state = Objects.requireNonNull($.state, "expected parameter 'state' to be non-null");
            $.statusMessage = Objects.requireNonNull($.statusMessage, "expected parameter 'statusMessage' to be non-null");
            return $;
        }
    }

}
