// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.search;

import com.pulumi.azurenative.Utilities;
import com.pulumi.azurenative.search.ServiceArgs;
import com.pulumi.azurenative.search.outputs.IdentityResponse;
import com.pulumi.azurenative.search.outputs.NetworkRuleSetResponse;
import com.pulumi.azurenative.search.outputs.PrivateEndpointConnectionResponse;
import com.pulumi.azurenative.search.outputs.SharedPrivateLinkResourceResponse;
import com.pulumi.azurenative.search.outputs.SkuResponse;
import com.pulumi.core.Alias;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * Describes an Azure Cognitive Search service and its current state.
 * API Version: 2020-08-01.
 * 
 * ## Example Usage
 * 
 * ## Import
 * 
 * An existing resource can be imported using its type token, name, and identifier, e.g.
 * 
 * ```sh
 * $ pulumi import azure-native:search:Service mysearchservice /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Search/searchServices/mysearchservice 
 * ```
 * 
 */
@ResourceType(type="azure-native:search:Service")
public class Service extends com.pulumi.resources.CustomResource {
    /**
     * Applicable only for the standard3 SKU. You can set this property to enable up to 3 high density partitions that allow up to 1000 indexes, which is much higher than the maximum indexes allowed for any other SKU. For the standard3 SKU, the value is either &#39;default&#39; or &#39;highDensity&#39;. For all other SKUs, this value must be &#39;default&#39;.
     * 
     */
    @Export(name="hostingMode", type=String.class, parameters={})
    private Output</* @Nullable */ String> hostingMode;

    /**
     * @return Applicable only for the standard3 SKU. You can set this property to enable up to 3 high density partitions that allow up to 1000 indexes, which is much higher than the maximum indexes allowed for any other SKU. For the standard3 SKU, the value is either &#39;default&#39; or &#39;highDensity&#39;. For all other SKUs, this value must be &#39;default&#39;.
     * 
     */
    public Output</* @Nullable */ String> hostingMode() {
        return this.hostingMode;
    }
    /**
     * The identity of the resource.
     * 
     */
    @Export(name="identity", type=IdentityResponse.class, parameters={})
    private Output</* @Nullable */ IdentityResponse> identity;

    /**
     * @return The identity of the resource.
     * 
     */
    public Output</* @Nullable */ IdentityResponse> identity() {
        return this.identity;
    }
    /**
     * The geo-location where the resource lives
     * 
     */
    @Export(name="location", type=String.class, parameters={})
    private Output<String> location;

    /**
     * @return The geo-location where the resource lives
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * The name of the resource
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the resource
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Network specific rules that determine how the Azure Cognitive Search service may be reached.
     * 
     */
    @Export(name="networkRuleSet", type=NetworkRuleSetResponse.class, parameters={})
    private Output</* @Nullable */ NetworkRuleSetResponse> networkRuleSet;

    /**
     * @return Network specific rules that determine how the Azure Cognitive Search service may be reached.
     * 
     */
    public Output</* @Nullable */ NetworkRuleSetResponse> networkRuleSet() {
        return this.networkRuleSet;
    }
    /**
     * The number of partitions in the search service; if specified, it can be 1, 2, 3, 4, 6, or 12. Values greater than 1 are only valid for standard SKUs. For &#39;standard3&#39; services with hostingMode set to &#39;highDensity&#39;, the allowed values are between 1 and 3.
     * 
     */
    @Export(name="partitionCount", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> partitionCount;

    /**
     * @return The number of partitions in the search service; if specified, it can be 1, 2, 3, 4, 6, or 12. Values greater than 1 are only valid for standard SKUs. For &#39;standard3&#39; services with hostingMode set to &#39;highDensity&#39;, the allowed values are between 1 and 3.
     * 
     */
    public Output</* @Nullable */ Integer> partitionCount() {
        return this.partitionCount;
    }
    /**
     * The list of private endpoint connections to the Azure Cognitive Search service.
     * 
     */
    @Export(name="privateEndpointConnections", type=List.class, parameters={PrivateEndpointConnectionResponse.class})
    private Output<List<PrivateEndpointConnectionResponse>> privateEndpointConnections;

    /**
     * @return The list of private endpoint connections to the Azure Cognitive Search service.
     * 
     */
    public Output<List<PrivateEndpointConnectionResponse>> privateEndpointConnections() {
        return this.privateEndpointConnections;
    }
    /**
     * The state of the last provisioning operation performed on the search service. Provisioning is an intermediate state that occurs while service capacity is being established. After capacity is set up, provisioningState changes to either &#39;succeeded&#39; or &#39;failed&#39;. Client applications can poll provisioning status (the recommended polling interval is from 30 seconds to one minute) by using the Get Search Service operation to see when an operation is completed. If you are using the free service, this value tends to come back as &#39;succeeded&#39; directly in the call to Create search service. This is because the free service uses capacity that is already set up.
     * 
     */
    @Export(name="provisioningState", type=String.class, parameters={})
    private Output<String> provisioningState;

    /**
     * @return The state of the last provisioning operation performed on the search service. Provisioning is an intermediate state that occurs while service capacity is being established. After capacity is set up, provisioningState changes to either &#39;succeeded&#39; or &#39;failed&#39;. Client applications can poll provisioning status (the recommended polling interval is from 30 seconds to one minute) by using the Get Search Service operation to see when an operation is completed. If you are using the free service, this value tends to come back as &#39;succeeded&#39; directly in the call to Create search service. This is because the free service uses capacity that is already set up.
     * 
     */
    public Output<String> provisioningState() {
        return this.provisioningState;
    }
    /**
     * This value can be set to &#39;enabled&#39; to avoid breaking changes on existing customer resources and templates. If set to &#39;disabled&#39;, traffic over public interface is not allowed, and private endpoint connections would be the exclusive access method.
     * 
     */
    @Export(name="publicNetworkAccess", type=String.class, parameters={})
    private Output</* @Nullable */ String> publicNetworkAccess;

    /**
     * @return This value can be set to &#39;enabled&#39; to avoid breaking changes on existing customer resources and templates. If set to &#39;disabled&#39;, traffic over public interface is not allowed, and private endpoint connections would be the exclusive access method.
     * 
     */
    public Output</* @Nullable */ String> publicNetworkAccess() {
        return this.publicNetworkAccess;
    }
    /**
     * The number of replicas in the search service. If specified, it must be a value between 1 and 12 inclusive for standard SKUs or between 1 and 3 inclusive for basic SKU.
     * 
     */
    @Export(name="replicaCount", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> replicaCount;

    /**
     * @return The number of replicas in the search service. If specified, it must be a value between 1 and 12 inclusive for standard SKUs or between 1 and 3 inclusive for basic SKU.
     * 
     */
    public Output</* @Nullable */ Integer> replicaCount() {
        return this.replicaCount;
    }
    /**
     * The list of shared private link resources managed by the Azure Cognitive Search service.
     * 
     */
    @Export(name="sharedPrivateLinkResources", type=List.class, parameters={SharedPrivateLinkResourceResponse.class})
    private Output<List<SharedPrivateLinkResourceResponse>> sharedPrivateLinkResources;

    /**
     * @return The list of shared private link resources managed by the Azure Cognitive Search service.
     * 
     */
    public Output<List<SharedPrivateLinkResourceResponse>> sharedPrivateLinkResources() {
        return this.sharedPrivateLinkResources;
    }
    /**
     * The SKU of the Search Service, which determines price tier and capacity limits. This property is required when creating a new Search Service.
     * 
     */
    @Export(name="sku", type=SkuResponse.class, parameters={})
    private Output</* @Nullable */ SkuResponse> sku;

    /**
     * @return The SKU of the Search Service, which determines price tier and capacity limits. This property is required when creating a new Search Service.
     * 
     */
    public Output</* @Nullable */ SkuResponse> sku() {
        return this.sku;
    }
    /**
     * The status of the search service. Possible values include: &#39;running&#39;: The search service is running and no provisioning operations are underway. &#39;provisioning&#39;: The search service is being provisioned or scaled up or down. &#39;deleting&#39;: The search service is being deleted. &#39;degraded&#39;: The search service is degraded. This can occur when the underlying search units are not healthy. The search service is most likely operational, but performance might be slow and some requests might be dropped. &#39;disabled&#39;: The search service is disabled. In this state, the service will reject all API requests. &#39;error&#39;: The search service is in an error state. If your service is in the degraded, disabled, or error states, it means the Azure Cognitive Search team is actively investigating the underlying issue. Dedicated services in these states are still chargeable based on the number of search units provisioned.
     * 
     */
    @Export(name="status", type=String.class, parameters={})
    private Output<String> status;

    /**
     * @return The status of the search service. Possible values include: &#39;running&#39;: The search service is running and no provisioning operations are underway. &#39;provisioning&#39;: The search service is being provisioned or scaled up or down. &#39;deleting&#39;: The search service is being deleted. &#39;degraded&#39;: The search service is degraded. This can occur when the underlying search units are not healthy. The search service is most likely operational, but performance might be slow and some requests might be dropped. &#39;disabled&#39;: The search service is disabled. In this state, the service will reject all API requests. &#39;error&#39;: The search service is in an error state. If your service is in the degraded, disabled, or error states, it means the Azure Cognitive Search team is actively investigating the underlying issue. Dedicated services in these states are still chargeable based on the number of search units provisioned.
     * 
     */
    public Output<String> status() {
        return this.status;
    }
    /**
     * The details of the search service status.
     * 
     */
    @Export(name="statusDetails", type=String.class, parameters={})
    private Output<String> statusDetails;

    /**
     * @return The details of the search service status.
     * 
     */
    public Output<String> statusDetails() {
        return this.statusDetails;
    }
    /**
     * Resource tags.
     * 
     */
    @Export(name="tags", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return Resource tags.
     * 
     */
    public Output</* @Nullable */ Map<String,String>> tags() {
        return this.tags;
    }
    /**
     * The type of the resource. E.g. &#34;Microsoft.Compute/virtualMachines&#34; or &#34;Microsoft.Storage/storageAccounts&#34;
     * 
     */
    @Export(name="type", type=String.class, parameters={})
    private Output<String> type;

    /**
     * @return The type of the resource. E.g. &#34;Microsoft.Compute/virtualMachines&#34; or &#34;Microsoft.Storage/storageAccounts&#34;
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Service(String name) {
        this(name, ServiceArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Service(String name, ServiceArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Service(String name, ServiceArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:search:Service", name, args == null ? ServiceArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Service(String name, Output<String> id, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:search:Service", name, null, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .aliases(List.of(
                Output.of(Alias.builder().type("azure-native:search/v20150819:Service").build()),
                Output.of(Alias.builder().type("azure-native:search/v20191001preview:Service").build()),
                Output.of(Alias.builder().type("azure-native:search/v20200313:Service").build()),
                Output.of(Alias.builder().type("azure-native:search/v20200801:Service").build()),
                Output.of(Alias.builder().type("azure-native:search/v20200801preview:Service").build()),
                Output.of(Alias.builder().type("azure-native:search/v20210401preview:Service").build())
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Service get(String name, Output<String> id, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Service(name, id, options);
    }
}
