// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.compute.inputs;

import com.pulumi.azurenative.compute.inputs.SourceVaultResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Key Vault Key Url to be used for server side encryption of Managed Disks and Snapshots
 * 
 */
public final class KeyForDiskEncryptionSetResponse extends com.pulumi.resources.InvokeArgs {

    public static final KeyForDiskEncryptionSetResponse Empty = new KeyForDiskEncryptionSetResponse();

    /**
     * Fully versioned Key Url pointing to a key in KeyVault. Version segment of the Url is required regardless of rotationToLatestKeyVersionEnabled value.
     * 
     */
    @Import(name="keyUrl", required=true)
    private String keyUrl;

    /**
     * @return Fully versioned Key Url pointing to a key in KeyVault. Version segment of the Url is required regardless of rotationToLatestKeyVersionEnabled value.
     * 
     */
    public String keyUrl() {
        return this.keyUrl;
    }

    /**
     * Resource id of the KeyVault containing the key or secret. This property is optional and cannot be used if the KeyVault subscription is not the same as the Disk Encryption Set subscription.
     * 
     */
    @Import(name="sourceVault")
    private @Nullable SourceVaultResponse sourceVault;

    /**
     * @return Resource id of the KeyVault containing the key or secret. This property is optional and cannot be used if the KeyVault subscription is not the same as the Disk Encryption Set subscription.
     * 
     */
    public Optional<SourceVaultResponse> sourceVault() {
        return Optional.ofNullable(this.sourceVault);
    }

    private KeyForDiskEncryptionSetResponse() {}

    private KeyForDiskEncryptionSetResponse(KeyForDiskEncryptionSetResponse $) {
        this.keyUrl = $.keyUrl;
        this.sourceVault = $.sourceVault;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KeyForDiskEncryptionSetResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KeyForDiskEncryptionSetResponse $;

        public Builder() {
            $ = new KeyForDiskEncryptionSetResponse();
        }

        public Builder(KeyForDiskEncryptionSetResponse defaults) {
            $ = new KeyForDiskEncryptionSetResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param keyUrl Fully versioned Key Url pointing to a key in KeyVault. Version segment of the Url is required regardless of rotationToLatestKeyVersionEnabled value.
         * 
         * @return builder
         * 
         */
        public Builder keyUrl(String keyUrl) {
            $.keyUrl = keyUrl;
            return this;
        }

        /**
         * @param sourceVault Resource id of the KeyVault containing the key or secret. This property is optional and cannot be used if the KeyVault subscription is not the same as the Disk Encryption Set subscription.
         * 
         * @return builder
         * 
         */
        public Builder sourceVault(@Nullable SourceVaultResponse sourceVault) {
            $.sourceVault = sourceVault;
            return this;
        }

        public KeyForDiskEncryptionSetResponse build() {
            $.keyUrl = Objects.requireNonNull($.keyUrl, "expected parameter 'keyUrl' to be non-null");
            return $;
        }
    }

}
