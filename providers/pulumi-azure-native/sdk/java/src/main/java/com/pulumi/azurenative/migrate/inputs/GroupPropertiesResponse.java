// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.migrate.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Properties of group resource.
 * 
 */
public final class GroupPropertiesResponse extends com.pulumi.resources.InvokeArgs {

    public static final GroupPropertiesResponse Empty = new GroupPropertiesResponse();

    /**
     * If the assessments are in running state.
     * 
     */
    @Import(name="areAssessmentsRunning", required=true)
    private Boolean areAssessmentsRunning;

    public Boolean areAssessmentsRunning() {
        return this.areAssessmentsRunning;
    }

    /**
     * List of References to Assessments created on this group.
     * 
     */
    @Import(name="assessments", required=true)
    private List<String> assessments;

    public List<String> assessments() {
        return this.assessments;
    }

    /**
     * Time when this group was created. Date-Time represented in ISO-8601 format.
     * 
     */
    @Import(name="createdTimestamp", required=true)
    private String createdTimestamp;

    public String createdTimestamp() {
        return this.createdTimestamp;
    }

    /**
     * Whether the group has been created and is valid.
     * 
     */
    @Import(name="groupStatus", required=true)
    private String groupStatus;

    public String groupStatus() {
        return this.groupStatus;
    }

    /**
     * The type of group.
     * 
     */
    @Import(name="groupType")
    private @Nullable String groupType;

    public Optional<String> groupType() {
        return Optional.ofNullable(this.groupType);
    }

    /**
     * Number of machines part of this group.
     * 
     */
    @Import(name="machineCount", required=true)
    private Integer machineCount;

    public Integer machineCount() {
        return this.machineCount;
    }

    /**
     * Time when this group was last updated. Date-Time represented in ISO-8601 format.
     * 
     */
    @Import(name="updatedTimestamp", required=true)
    private String updatedTimestamp;

    public String updatedTimestamp() {
        return this.updatedTimestamp;
    }

    private GroupPropertiesResponse() {}

    private GroupPropertiesResponse(GroupPropertiesResponse $) {
        this.areAssessmentsRunning = $.areAssessmentsRunning;
        this.assessments = $.assessments;
        this.createdTimestamp = $.createdTimestamp;
        this.groupStatus = $.groupStatus;
        this.groupType = $.groupType;
        this.machineCount = $.machineCount;
        this.updatedTimestamp = $.updatedTimestamp;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GroupPropertiesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GroupPropertiesResponse $;

        public Builder() {
            $ = new GroupPropertiesResponse();
        }

        public Builder(GroupPropertiesResponse defaults) {
            $ = new GroupPropertiesResponse(Objects.requireNonNull(defaults));
        }

        public Builder areAssessmentsRunning(Boolean areAssessmentsRunning) {
            $.areAssessmentsRunning = areAssessmentsRunning;
            return this;
        }

        public Builder assessments(List<String> assessments) {
            $.assessments = assessments;
            return this;
        }

        public Builder assessments(String... assessments) {
            return assessments(List.of(assessments));
        }

        public Builder createdTimestamp(String createdTimestamp) {
            $.createdTimestamp = createdTimestamp;
            return this;
        }

        public Builder groupStatus(String groupStatus) {
            $.groupStatus = groupStatus;
            return this;
        }

        public Builder groupType(@Nullable String groupType) {
            $.groupType = groupType;
            return this;
        }

        public Builder machineCount(Integer machineCount) {
            $.machineCount = machineCount;
            return this;
        }

        public Builder updatedTimestamp(String updatedTimestamp) {
            $.updatedTimestamp = updatedTimestamp;
            return this;
        }

        public GroupPropertiesResponse build() {
            $.areAssessmentsRunning = Objects.requireNonNull($.areAssessmentsRunning, "expected parameter 'areAssessmentsRunning' to be non-null");
            $.assessments = Objects.requireNonNull($.assessments, "expected parameter 'assessments' to be non-null");
            $.createdTimestamp = Objects.requireNonNull($.createdTimestamp, "expected parameter 'createdTimestamp' to be non-null");
            $.groupStatus = Objects.requireNonNull($.groupStatus, "expected parameter 'groupStatus' to be non-null");
            $.machineCount = Objects.requireNonNull($.machineCount, "expected parameter 'machineCount' to be non-null");
            $.updatedTimestamp = Objects.requireNonNull($.updatedTimestamp, "expected parameter 'updatedTimestamp' to be non-null");
            return $;
        }
    }

}
