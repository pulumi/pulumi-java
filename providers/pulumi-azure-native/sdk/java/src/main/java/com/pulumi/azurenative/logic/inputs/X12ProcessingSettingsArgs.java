// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.logic.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.util.Objects;


/**
 * The X12 processing settings.
 * 
 */
public final class X12ProcessingSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final X12ProcessingSettingsArgs Empty = new X12ProcessingSettingsArgs();

    /**
     * The value indicating whether to convert numerical type to implied decimal.
     * 
     */
    @Import(name="convertImpliedDecimal", required=true)
    private Output<Boolean> convertImpliedDecimal;

    public Output<Boolean> convertImpliedDecimal() {
        return this.convertImpliedDecimal;
    }

    /**
     * The value indicating whether to create empty xml tags for trailing separators.
     * 
     */
    @Import(name="createEmptyXmlTagsForTrailingSeparators", required=true)
    private Output<Boolean> createEmptyXmlTagsForTrailingSeparators;

    public Output<Boolean> createEmptyXmlTagsForTrailingSeparators() {
        return this.createEmptyXmlTagsForTrailingSeparators;
    }

    /**
     * The value indicating whether to mask security information.
     * 
     */
    @Import(name="maskSecurityInfo", required=true)
    private Output<Boolean> maskSecurityInfo;

    public Output<Boolean> maskSecurityInfo() {
        return this.maskSecurityInfo;
    }

    /**
     * The value indicating whether to preserve interchange.
     * 
     */
    @Import(name="preserveInterchange", required=true)
    private Output<Boolean> preserveInterchange;

    public Output<Boolean> preserveInterchange() {
        return this.preserveInterchange;
    }

    /**
     * The value indicating whether to suspend interchange on error.
     * 
     */
    @Import(name="suspendInterchangeOnError", required=true)
    private Output<Boolean> suspendInterchangeOnError;

    public Output<Boolean> suspendInterchangeOnError() {
        return this.suspendInterchangeOnError;
    }

    /**
     * The value indicating whether to use dot as decimal separator.
     * 
     */
    @Import(name="useDotAsDecimalSeparator", required=true)
    private Output<Boolean> useDotAsDecimalSeparator;

    public Output<Boolean> useDotAsDecimalSeparator() {
        return this.useDotAsDecimalSeparator;
    }

    private X12ProcessingSettingsArgs() {}

    private X12ProcessingSettingsArgs(X12ProcessingSettingsArgs $) {
        this.convertImpliedDecimal = $.convertImpliedDecimal;
        this.createEmptyXmlTagsForTrailingSeparators = $.createEmptyXmlTagsForTrailingSeparators;
        this.maskSecurityInfo = $.maskSecurityInfo;
        this.preserveInterchange = $.preserveInterchange;
        this.suspendInterchangeOnError = $.suspendInterchangeOnError;
        this.useDotAsDecimalSeparator = $.useDotAsDecimalSeparator;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(X12ProcessingSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private X12ProcessingSettingsArgs $;

        public Builder() {
            $ = new X12ProcessingSettingsArgs();
        }

        public Builder(X12ProcessingSettingsArgs defaults) {
            $ = new X12ProcessingSettingsArgs(Objects.requireNonNull(defaults));
        }

        public Builder convertImpliedDecimal(Output<Boolean> convertImpliedDecimal) {
            $.convertImpliedDecimal = convertImpliedDecimal;
            return this;
        }

        public Builder convertImpliedDecimal(Boolean convertImpliedDecimal) {
            return convertImpliedDecimal(Output.of(convertImpliedDecimal));
        }

        public Builder createEmptyXmlTagsForTrailingSeparators(Output<Boolean> createEmptyXmlTagsForTrailingSeparators) {
            $.createEmptyXmlTagsForTrailingSeparators = createEmptyXmlTagsForTrailingSeparators;
            return this;
        }

        public Builder createEmptyXmlTagsForTrailingSeparators(Boolean createEmptyXmlTagsForTrailingSeparators) {
            return createEmptyXmlTagsForTrailingSeparators(Output.of(createEmptyXmlTagsForTrailingSeparators));
        }

        public Builder maskSecurityInfo(Output<Boolean> maskSecurityInfo) {
            $.maskSecurityInfo = maskSecurityInfo;
            return this;
        }

        public Builder maskSecurityInfo(Boolean maskSecurityInfo) {
            return maskSecurityInfo(Output.of(maskSecurityInfo));
        }

        public Builder preserveInterchange(Output<Boolean> preserveInterchange) {
            $.preserveInterchange = preserveInterchange;
            return this;
        }

        public Builder preserveInterchange(Boolean preserveInterchange) {
            return preserveInterchange(Output.of(preserveInterchange));
        }

        public Builder suspendInterchangeOnError(Output<Boolean> suspendInterchangeOnError) {
            $.suspendInterchangeOnError = suspendInterchangeOnError;
            return this;
        }

        public Builder suspendInterchangeOnError(Boolean suspendInterchangeOnError) {
            return suspendInterchangeOnError(Output.of(suspendInterchangeOnError));
        }

        public Builder useDotAsDecimalSeparator(Output<Boolean> useDotAsDecimalSeparator) {
            $.useDotAsDecimalSeparator = useDotAsDecimalSeparator;
            return this;
        }

        public Builder useDotAsDecimalSeparator(Boolean useDotAsDecimalSeparator) {
            return useDotAsDecimalSeparator(Output.of(useDotAsDecimalSeparator));
        }

        public X12ProcessingSettingsArgs build() {
            $.convertImpliedDecimal = Objects.requireNonNull($.convertImpliedDecimal, "expected parameter 'convertImpliedDecimal' to be non-null");
            $.createEmptyXmlTagsForTrailingSeparators = Objects.requireNonNull($.createEmptyXmlTagsForTrailingSeparators, "expected parameter 'createEmptyXmlTagsForTrailingSeparators' to be non-null");
            $.maskSecurityInfo = Objects.requireNonNull($.maskSecurityInfo, "expected parameter 'maskSecurityInfo' to be non-null");
            $.preserveInterchange = Objects.requireNonNull($.preserveInterchange, "expected parameter 'preserveInterchange' to be non-null");
            $.suspendInterchangeOnError = Objects.requireNonNull($.suspendInterchangeOnError, "expected parameter 'suspendInterchangeOnError' to be non-null");
            $.useDotAsDecimalSeparator = Objects.requireNonNull($.useDotAsDecimalSeparator, "expected parameter 'useDotAsDecimalSeparator' to be non-null");
            return $;
        }
    }

}
