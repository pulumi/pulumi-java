// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.containerinstance.inputs;

import com.pulumi.azurenative.containerinstance.enums.Scheme;
import com.pulumi.azurenative.containerinstance.inputs.HttpHeadersArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The container Http Get settings, for liveness or readiness probe
 * 
 */
public final class ContainerHttpGetArgs extends com.pulumi.resources.ResourceArgs {

    public static final ContainerHttpGetArgs Empty = new ContainerHttpGetArgs();

    /**
     * The HTTP headers.
     * 
     */
    @Import(name="httpHeaders")
      private final @Nullable Output<HttpHeadersArgs> httpHeaders;

    public Output<HttpHeadersArgs> httpHeaders() {
        return this.httpHeaders == null ? Codegen.empty() : this.httpHeaders;
    }

    /**
     * The path to probe.
     * 
     */
    @Import(name="path")
      private final @Nullable Output<String> path;

    public Output<String> path() {
        return this.path == null ? Codegen.empty() : this.path;
    }

    /**
     * The port number to probe.
     * 
     */
    @Import(name="port", required=true)
      private final Output<Integer> port;

    public Output<Integer> port() {
        return this.port;
    }

    /**
     * The scheme.
     * 
     */
    @Import(name="scheme")
      private final @Nullable Output<Either<String,Scheme>> scheme;

    public Output<Either<String,Scheme>> scheme() {
        return this.scheme == null ? Codegen.empty() : this.scheme;
    }

    public ContainerHttpGetArgs(
        @Nullable Output<HttpHeadersArgs> httpHeaders,
        @Nullable Output<String> path,
        Output<Integer> port,
        @Nullable Output<Either<String,Scheme>> scheme) {
        this.httpHeaders = httpHeaders;
        this.path = path;
        this.port = Objects.requireNonNull(port, "expected parameter 'port' to be non-null");
        this.scheme = scheme;
    }

    private ContainerHttpGetArgs() {
        this.httpHeaders = Codegen.empty();
        this.path = Codegen.empty();
        this.port = Codegen.empty();
        this.scheme = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ContainerHttpGetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<HttpHeadersArgs> httpHeaders;
        private @Nullable Output<String> path;
        private Output<Integer> port;
        private @Nullable Output<Either<String,Scheme>> scheme;

        public Builder() {
    	      // Empty
        }

        public Builder(ContainerHttpGetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.httpHeaders = defaults.httpHeaders;
    	      this.path = defaults.path;
    	      this.port = defaults.port;
    	      this.scheme = defaults.scheme;
        }

        public Builder httpHeaders(@Nullable Output<HttpHeadersArgs> httpHeaders) {
            this.httpHeaders = httpHeaders;
            return this;
        }
        public Builder httpHeaders(@Nullable HttpHeadersArgs httpHeaders) {
            this.httpHeaders = Codegen.ofNullable(httpHeaders);
            return this;
        }
        public Builder path(@Nullable Output<String> path) {
            this.path = path;
            return this;
        }
        public Builder path(@Nullable String path) {
            this.path = Codegen.ofNullable(path);
            return this;
        }
        public Builder port(Output<Integer> port) {
            this.port = Objects.requireNonNull(port);
            return this;
        }
        public Builder port(Integer port) {
            this.port = Output.of(Objects.requireNonNull(port));
            return this;
        }
        public Builder scheme(@Nullable Output<Either<String,Scheme>> scheme) {
            this.scheme = scheme;
            return this;
        }
        public Builder scheme(@Nullable Either<String,Scheme> scheme) {
            this.scheme = Codegen.ofNullable(scheme);
            return this;
        }        public ContainerHttpGetArgs build() {
            return new ContainerHttpGetArgs(httpHeaders, path, port, scheme);
        }
    }
}
