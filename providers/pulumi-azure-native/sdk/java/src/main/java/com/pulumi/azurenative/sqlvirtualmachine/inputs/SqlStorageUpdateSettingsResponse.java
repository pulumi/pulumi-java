// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.sqlvirtualmachine.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Set disk storage settings for SQL Server.
 * 
 */
public final class SqlStorageUpdateSettingsResponse extends com.pulumi.resources.InvokeArgs {

    public static final SqlStorageUpdateSettingsResponse Empty = new SqlStorageUpdateSettingsResponse();

    /**
     * Disk configuration to apply to SQL Server.
     * 
     */
    @Import(name="diskConfigurationType")
    private @Nullable String diskConfigurationType;

    /**
     * @return Disk configuration to apply to SQL Server.
     * 
     */
    public Optional<String> diskConfigurationType() {
        return Optional.ofNullable(this.diskConfigurationType);
    }

    /**
     * Virtual machine disk count.
     * 
     */
    @Import(name="diskCount")
    private @Nullable Integer diskCount;

    /**
     * @return Virtual machine disk count.
     * 
     */
    public Optional<Integer> diskCount() {
        return Optional.ofNullable(this.diskCount);
    }

    /**
     * Device id of the first disk to be updated.
     * 
     */
    @Import(name="startingDeviceId")
    private @Nullable Integer startingDeviceId;

    /**
     * @return Device id of the first disk to be updated.
     * 
     */
    public Optional<Integer> startingDeviceId() {
        return Optional.ofNullable(this.startingDeviceId);
    }

    private SqlStorageUpdateSettingsResponse() {}

    private SqlStorageUpdateSettingsResponse(SqlStorageUpdateSettingsResponse $) {
        this.diskConfigurationType = $.diskConfigurationType;
        this.diskCount = $.diskCount;
        this.startingDeviceId = $.startingDeviceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SqlStorageUpdateSettingsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SqlStorageUpdateSettingsResponse $;

        public Builder() {
            $ = new SqlStorageUpdateSettingsResponse();
        }

        public Builder(SqlStorageUpdateSettingsResponse defaults) {
            $ = new SqlStorageUpdateSettingsResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param diskConfigurationType Disk configuration to apply to SQL Server.
         * 
         * @return builder
         * 
         */
        public Builder diskConfigurationType(@Nullable String diskConfigurationType) {
            $.diskConfigurationType = diskConfigurationType;
            return this;
        }

        /**
         * @param diskCount Virtual machine disk count.
         * 
         * @return builder
         * 
         */
        public Builder diskCount(@Nullable Integer diskCount) {
            $.diskCount = diskCount;
            return this;
        }

        /**
         * @param startingDeviceId Device id of the first disk to be updated.
         * 
         * @return builder
         * 
         */
        public Builder startingDeviceId(@Nullable Integer startingDeviceId) {
            $.startingDeviceId = startingDeviceId;
            return this;
        }

        public SqlStorageUpdateSettingsResponse build() {
            return $;
        }
    }

}
