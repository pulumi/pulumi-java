// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.azurenative.datafactory.inputs.ActivityDependencyResponse;
import com.pulumi.azurenative.datafactory.inputs.ActivityPolicyResponse;
import com.pulumi.azurenative.datafactory.inputs.DataFlowReferenceResponse;
import com.pulumi.azurenative.datafactory.inputs.DataFlowStagingInfoResponse;
import com.pulumi.azurenative.datafactory.inputs.ExecuteDataFlowActivityTypePropertiesResponseCompute;
import com.pulumi.azurenative.datafactory.inputs.IntegrationRuntimeReferenceResponse;
import com.pulumi.azurenative.datafactory.inputs.LinkedServiceReferenceResponse;
import com.pulumi.azurenative.datafactory.inputs.UserPropertyResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Execute data flow activity.
 * 
 */
public final class ExecuteDataFlowActivityResponse extends com.pulumi.resources.InvokeArgs {

    public static final ExecuteDataFlowActivityResponse Empty = new ExecuteDataFlowActivityResponse();

    /**
     * Compute properties for data flow activity.
     * 
     */
    @Import(name="compute")
    private @Nullable ExecuteDataFlowActivityTypePropertiesResponseCompute compute;

    public Optional<ExecuteDataFlowActivityTypePropertiesResponseCompute> compute() {
        return Optional.ofNullable(this.compute);
    }

    /**
     * Continue on error setting used for data flow execution. Enables processing to continue if a sink fails. Type: boolean (or Expression with resultType boolean)
     * 
     */
    @Import(name="continueOnError")
    private @Nullable Object continueOnError;

    public Optional<Object> continueOnError() {
        return Optional.ofNullable(this.continueOnError);
    }

    /**
     * Data flow reference.
     * 
     */
    @Import(name="dataFlow", required=true)
    private DataFlowReferenceResponse dataFlow;

    public DataFlowReferenceResponse dataFlow() {
        return this.dataFlow;
    }

    /**
     * Activity depends on condition.
     * 
     */
    @Import(name="dependsOn")
    private @Nullable List<ActivityDependencyResponse> dependsOn;

    public Optional<List<ActivityDependencyResponse>> dependsOn() {
        return Optional.ofNullable(this.dependsOn);
    }

    /**
     * Activity description.
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The integration runtime reference.
     * 
     */
    @Import(name="integrationRuntime")
    private @Nullable IntegrationRuntimeReferenceResponse integrationRuntime;

    public Optional<IntegrationRuntimeReferenceResponse> integrationRuntime() {
        return Optional.ofNullable(this.integrationRuntime);
    }

    /**
     * Linked service reference.
     * 
     */
    @Import(name="linkedServiceName")
    private @Nullable LinkedServiceReferenceResponse linkedServiceName;

    public Optional<LinkedServiceReferenceResponse> linkedServiceName() {
        return Optional.ofNullable(this.linkedServiceName);
    }

    /**
     * Activity name.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    public String name() {
        return this.name;
    }

    /**
     * Activity policy.
     * 
     */
    @Import(name="policy")
    private @Nullable ActivityPolicyResponse policy;

    public Optional<ActivityPolicyResponse> policy() {
        return Optional.ofNullable(this.policy);
    }

    /**
     * Concurrent run setting used for data flow execution. Allows sinks with the same save order to be processed concurrently. Type: boolean (or Expression with resultType boolean)
     * 
     */
    @Import(name="runConcurrently")
    private @Nullable Object runConcurrently;

    public Optional<Object> runConcurrently() {
        return Optional.ofNullable(this.runConcurrently);
    }

    /**
     * Staging info for execute data flow activity.
     * 
     */
    @Import(name="staging")
    private @Nullable DataFlowStagingInfoResponse staging;

    public Optional<DataFlowStagingInfoResponse> staging() {
        return Optional.ofNullable(this.staging);
    }

    /**
     * Trace level setting used for data flow monitoring output. Supported values are: &#39;coarse&#39;, &#39;fine&#39;, and &#39;none&#39;. Type: string (or Expression with resultType string)
     * 
     */
    @Import(name="traceLevel")
    private @Nullable Object traceLevel;

    public Optional<Object> traceLevel() {
        return Optional.ofNullable(this.traceLevel);
    }

    /**
     * Type of activity.
     * Expected value is &#39;ExecuteDataFlow&#39;.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    public String type() {
        return this.type;
    }

    /**
     * Activity user properties.
     * 
     */
    @Import(name="userProperties")
    private @Nullable List<UserPropertyResponse> userProperties;

    public Optional<List<UserPropertyResponse>> userProperties() {
        return Optional.ofNullable(this.userProperties);
    }

    private ExecuteDataFlowActivityResponse() {}

    private ExecuteDataFlowActivityResponse(ExecuteDataFlowActivityResponse $) {
        this.compute = $.compute;
        this.continueOnError = $.continueOnError;
        this.dataFlow = $.dataFlow;
        this.dependsOn = $.dependsOn;
        this.description = $.description;
        this.integrationRuntime = $.integrationRuntime;
        this.linkedServiceName = $.linkedServiceName;
        this.name = $.name;
        this.policy = $.policy;
        this.runConcurrently = $.runConcurrently;
        this.staging = $.staging;
        this.traceLevel = $.traceLevel;
        this.type = $.type;
        this.userProperties = $.userProperties;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExecuteDataFlowActivityResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExecuteDataFlowActivityResponse $;

        public Builder() {
            $ = new ExecuteDataFlowActivityResponse();
        }

        public Builder(ExecuteDataFlowActivityResponse defaults) {
            $ = new ExecuteDataFlowActivityResponse(Objects.requireNonNull(defaults));
        }

        public Builder compute(@Nullable ExecuteDataFlowActivityTypePropertiesResponseCompute compute) {
            $.compute = compute;
            return this;
        }

        public Builder continueOnError(@Nullable Object continueOnError) {
            $.continueOnError = continueOnError;
            return this;
        }

        public Builder dataFlow(DataFlowReferenceResponse dataFlow) {
            $.dataFlow = dataFlow;
            return this;
        }

        public Builder dependsOn(@Nullable List<ActivityDependencyResponse> dependsOn) {
            $.dependsOn = dependsOn;
            return this;
        }

        public Builder dependsOn(ActivityDependencyResponse... dependsOn) {
            return dependsOn(List.of(dependsOn));
        }

        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        public Builder integrationRuntime(@Nullable IntegrationRuntimeReferenceResponse integrationRuntime) {
            $.integrationRuntime = integrationRuntime;
            return this;
        }

        public Builder linkedServiceName(@Nullable LinkedServiceReferenceResponse linkedServiceName) {
            $.linkedServiceName = linkedServiceName;
            return this;
        }

        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public Builder policy(@Nullable ActivityPolicyResponse policy) {
            $.policy = policy;
            return this;
        }

        public Builder runConcurrently(@Nullable Object runConcurrently) {
            $.runConcurrently = runConcurrently;
            return this;
        }

        public Builder staging(@Nullable DataFlowStagingInfoResponse staging) {
            $.staging = staging;
            return this;
        }

        public Builder traceLevel(@Nullable Object traceLevel) {
            $.traceLevel = traceLevel;
            return this;
        }

        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public Builder userProperties(@Nullable List<UserPropertyResponse> userProperties) {
            $.userProperties = userProperties;
            return this;
        }

        public Builder userProperties(UserPropertyResponse... userProperties) {
            return userProperties(List.of(userProperties));
        }

        public ExecuteDataFlowActivityResponse build() {
            $.dataFlow = Objects.requireNonNull($.dataFlow, "expected parameter 'dataFlow' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.type = Codegen.stringProp("type").arg($.type).require();
            return $;
        }
    }

}
