// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.devtestlab.inputs;

import com.pulumi.azurenative.devtestlab.enums.HostCachingOptions;
import com.pulumi.azurenative.devtestlab.inputs.AttachNewDataDiskOptionsArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Request body for adding a new or existing data disk to a virtual machine.
 * 
 */
public final class DataDiskPropertiesArgs extends com.pulumi.resources.ResourceArgs {

    public static final DataDiskPropertiesArgs Empty = new DataDiskPropertiesArgs();

    /**
     * Specifies options to attach a new disk to the virtual machine.
     * 
     */
    @Import(name="attachNewDataDiskOptions")
    private @Nullable Output<AttachNewDataDiskOptionsArgs> attachNewDataDiskOptions;

    /**
     * @return Specifies options to attach a new disk to the virtual machine.
     * 
     */
    public Optional<Output<AttachNewDataDiskOptionsArgs>> attachNewDataDiskOptions() {
        return Optional.ofNullable(this.attachNewDataDiskOptions);
    }

    /**
     * Specifies the existing lab disk id to attach to virtual machine.
     * 
     */
    @Import(name="existingLabDiskId")
    private @Nullable Output<String> existingLabDiskId;

    /**
     * @return Specifies the existing lab disk id to attach to virtual machine.
     * 
     */
    public Optional<Output<String>> existingLabDiskId() {
        return Optional.ofNullable(this.existingLabDiskId);
    }

    /**
     * Caching option for a data disk (i.e. None, ReadOnly, ReadWrite).
     * 
     */
    @Import(name="hostCaching")
    private @Nullable Output<Either<String,HostCachingOptions>> hostCaching;

    /**
     * @return Caching option for a data disk (i.e. None, ReadOnly, ReadWrite).
     * 
     */
    public Optional<Output<Either<String,HostCachingOptions>>> hostCaching() {
        return Optional.ofNullable(this.hostCaching);
    }

    private DataDiskPropertiesArgs() {}

    private DataDiskPropertiesArgs(DataDiskPropertiesArgs $) {
        this.attachNewDataDiskOptions = $.attachNewDataDiskOptions;
        this.existingLabDiskId = $.existingLabDiskId;
        this.hostCaching = $.hostCaching;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataDiskPropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataDiskPropertiesArgs $;

        public Builder() {
            $ = new DataDiskPropertiesArgs();
        }

        public Builder(DataDiskPropertiesArgs defaults) {
            $ = new DataDiskPropertiesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param attachNewDataDiskOptions Specifies options to attach a new disk to the virtual machine.
         * 
         * @return builder
         * 
         */
        public Builder attachNewDataDiskOptions(@Nullable Output<AttachNewDataDiskOptionsArgs> attachNewDataDiskOptions) {
            $.attachNewDataDiskOptions = attachNewDataDiskOptions;
            return this;
        }

        /**
         * @param attachNewDataDiskOptions Specifies options to attach a new disk to the virtual machine.
         * 
         * @return builder
         * 
         */
        public Builder attachNewDataDiskOptions(AttachNewDataDiskOptionsArgs attachNewDataDiskOptions) {
            return attachNewDataDiskOptions(Output.of(attachNewDataDiskOptions));
        }

        /**
         * @param existingLabDiskId Specifies the existing lab disk id to attach to virtual machine.
         * 
         * @return builder
         * 
         */
        public Builder existingLabDiskId(@Nullable Output<String> existingLabDiskId) {
            $.existingLabDiskId = existingLabDiskId;
            return this;
        }

        /**
         * @param existingLabDiskId Specifies the existing lab disk id to attach to virtual machine.
         * 
         * @return builder
         * 
         */
        public Builder existingLabDiskId(String existingLabDiskId) {
            return existingLabDiskId(Output.of(existingLabDiskId));
        }

        /**
         * @param hostCaching Caching option for a data disk (i.e. None, ReadOnly, ReadWrite).
         * 
         * @return builder
         * 
         */
        public Builder hostCaching(@Nullable Output<Either<String,HostCachingOptions>> hostCaching) {
            $.hostCaching = hostCaching;
            return this;
        }

        /**
         * @param hostCaching Caching option for a data disk (i.e. None, ReadOnly, ReadWrite).
         * 
         * @return builder
         * 
         */
        public Builder hostCaching(Either<String,HostCachingOptions> hostCaching) {
            return hostCaching(Output.of(hostCaching));
        }

        /**
         * @param hostCaching Caching option for a data disk (i.e. None, ReadOnly, ReadWrite).
         * 
         * @return builder
         * 
         */
        public Builder hostCaching(String hostCaching) {
            return hostCaching(Either.ofLeft(hostCaching));
        }

        /**
         * @param hostCaching Caching option for a data disk (i.e. None, ReadOnly, ReadWrite).
         * 
         * @return builder
         * 
         */
        public Builder hostCaching(HostCachingOptions hostCaching) {
            return hostCaching(Either.ofRight(hostCaching));
        }

        public DataDiskPropertiesArgs build() {
            return $;
        }
    }

}
