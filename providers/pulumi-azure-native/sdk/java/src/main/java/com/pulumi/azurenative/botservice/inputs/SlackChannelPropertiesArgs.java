// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.botservice.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The parameters to provide for the Slack channel.
 * 
 */
public final class SlackChannelPropertiesArgs extends com.pulumi.resources.ResourceArgs {

    public static final SlackChannelPropertiesArgs Empty = new SlackChannelPropertiesArgs();

    /**
     * The Slack client id
     * 
     */
    @Import(name="clientId")
    private @Nullable Output<String> clientId;

    /**
     * @return The Slack client id
     * 
     */
    public Optional<Output<String>> clientId() {
        return Optional.ofNullable(this.clientId);
    }

    /**
     * The Slack client secret. Value only returned through POST to the action Channel List API, otherwise empty.
     * 
     */
    @Import(name="clientSecret")
    private @Nullable Output<String> clientSecret;

    /**
     * @return The Slack client secret. Value only returned through POST to the action Channel List API, otherwise empty.
     * 
     */
    public Optional<Output<String>> clientSecret() {
        return Optional.ofNullable(this.clientSecret);
    }

    /**
     * Whether this channel is enabled for the bot
     * 
     */
    @Import(name="isEnabled", required=true)
    private Output<Boolean> isEnabled;

    /**
     * @return Whether this channel is enabled for the bot
     * 
     */
    public Output<Boolean> isEnabled() {
        return this.isEnabled;
    }

    /**
     * The Slack landing page Url
     * 
     */
    @Import(name="landingPageUrl")
    private @Nullable Output<String> landingPageUrl;

    /**
     * @return The Slack landing page Url
     * 
     */
    public Optional<Output<String>> landingPageUrl() {
        return Optional.ofNullable(this.landingPageUrl);
    }

    /**
     * The Slack signing secret.
     * 
     */
    @Import(name="signingSecret")
    private @Nullable Output<String> signingSecret;

    /**
     * @return The Slack signing secret.
     * 
     */
    public Optional<Output<String>> signingSecret() {
        return Optional.ofNullable(this.signingSecret);
    }

    /**
     * The Slack verification token. Value only returned through POST to the action Channel List API, otherwise empty.
     * 
     */
    @Import(name="verificationToken")
    private @Nullable Output<String> verificationToken;

    /**
     * @return The Slack verification token. Value only returned through POST to the action Channel List API, otherwise empty.
     * 
     */
    public Optional<Output<String>> verificationToken() {
        return Optional.ofNullable(this.verificationToken);
    }

    private SlackChannelPropertiesArgs() {}

    private SlackChannelPropertiesArgs(SlackChannelPropertiesArgs $) {
        this.clientId = $.clientId;
        this.clientSecret = $.clientSecret;
        this.isEnabled = $.isEnabled;
        this.landingPageUrl = $.landingPageUrl;
        this.signingSecret = $.signingSecret;
        this.verificationToken = $.verificationToken;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SlackChannelPropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SlackChannelPropertiesArgs $;

        public Builder() {
            $ = new SlackChannelPropertiesArgs();
        }

        public Builder(SlackChannelPropertiesArgs defaults) {
            $ = new SlackChannelPropertiesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clientId The Slack client id
         * 
         * @return builder
         * 
         */
        public Builder clientId(@Nullable Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        /**
         * @param clientId The Slack client id
         * 
         * @return builder
         * 
         */
        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        /**
         * @param clientSecret The Slack client secret. Value only returned through POST to the action Channel List API, otherwise empty.
         * 
         * @return builder
         * 
         */
        public Builder clientSecret(@Nullable Output<String> clientSecret) {
            $.clientSecret = clientSecret;
            return this;
        }

        /**
         * @param clientSecret The Slack client secret. Value only returned through POST to the action Channel List API, otherwise empty.
         * 
         * @return builder
         * 
         */
        public Builder clientSecret(String clientSecret) {
            return clientSecret(Output.of(clientSecret));
        }

        /**
         * @param isEnabled Whether this channel is enabled for the bot
         * 
         * @return builder
         * 
         */
        public Builder isEnabled(Output<Boolean> isEnabled) {
            $.isEnabled = isEnabled;
            return this;
        }

        /**
         * @param isEnabled Whether this channel is enabled for the bot
         * 
         * @return builder
         * 
         */
        public Builder isEnabled(Boolean isEnabled) {
            return isEnabled(Output.of(isEnabled));
        }

        /**
         * @param landingPageUrl The Slack landing page Url
         * 
         * @return builder
         * 
         */
        public Builder landingPageUrl(@Nullable Output<String> landingPageUrl) {
            $.landingPageUrl = landingPageUrl;
            return this;
        }

        /**
         * @param landingPageUrl The Slack landing page Url
         * 
         * @return builder
         * 
         */
        public Builder landingPageUrl(String landingPageUrl) {
            return landingPageUrl(Output.of(landingPageUrl));
        }

        /**
         * @param signingSecret The Slack signing secret.
         * 
         * @return builder
         * 
         */
        public Builder signingSecret(@Nullable Output<String> signingSecret) {
            $.signingSecret = signingSecret;
            return this;
        }

        /**
         * @param signingSecret The Slack signing secret.
         * 
         * @return builder
         * 
         */
        public Builder signingSecret(String signingSecret) {
            return signingSecret(Output.of(signingSecret));
        }

        /**
         * @param verificationToken The Slack verification token. Value only returned through POST to the action Channel List API, otherwise empty.
         * 
         * @return builder
         * 
         */
        public Builder verificationToken(@Nullable Output<String> verificationToken) {
            $.verificationToken = verificationToken;
            return this;
        }

        /**
         * @param verificationToken The Slack verification token. Value only returned through POST to the action Channel List API, otherwise empty.
         * 
         * @return builder
         * 
         */
        public Builder verificationToken(String verificationToken) {
            return verificationToken(Output.of(verificationToken));
        }

        public SlackChannelPropertiesArgs build() {
            $.isEnabled = Objects.requireNonNull($.isEnabled, "expected parameter 'isEnabled' to be non-null");
            return $;
        }
    }

}
