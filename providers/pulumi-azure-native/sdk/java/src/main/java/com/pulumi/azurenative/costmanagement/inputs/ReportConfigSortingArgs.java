// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.costmanagement.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The order by expression to be used in the report.
 * 
 */
public final class ReportConfigSortingArgs extends com.pulumi.resources.ResourceArgs {

    public static final ReportConfigSortingArgs Empty = new ReportConfigSortingArgs();

    /**
     * Direction of sort.
     * 
     */
    @Import(name="direction")
    private @Nullable Output<String> direction;

    /**
     * @return Direction of sort.
     * 
     */
    public Optional<Output<String>> direction() {
        return Optional.ofNullable(this.direction);
    }

    /**
     * The name of the column to sort.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the column to sort.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    private ReportConfigSortingArgs() {}

    private ReportConfigSortingArgs(ReportConfigSortingArgs $) {
        this.direction = $.direction;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ReportConfigSortingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ReportConfigSortingArgs $;

        public Builder() {
            $ = new ReportConfigSortingArgs();
        }

        public Builder(ReportConfigSortingArgs defaults) {
            $ = new ReportConfigSortingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param direction Direction of sort.
         * 
         * @return builder
         * 
         */
        public Builder direction(@Nullable Output<String> direction) {
            $.direction = direction;
            return this;
        }

        /**
         * @param direction Direction of sort.
         * 
         * @return builder
         * 
         */
        public Builder direction(String direction) {
            return direction(Output.of(direction));
        }

        /**
         * @param name The name of the column to sort.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the column to sort.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public ReportConfigSortingArgs build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            return $;
        }
    }

}
