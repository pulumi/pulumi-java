// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.storage.inputs;

import com.pulumi.azurenative.storage.enums.RuleType;
import com.pulumi.azurenative.storage.inputs.ManagementPolicyDefinitionArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * An object that wraps the Lifecycle rule. Each rule is uniquely defined by name.
 * 
 */
public final class ManagementPolicyRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final ManagementPolicyRuleArgs Empty = new ManagementPolicyRuleArgs();

    /**
     * An object that defines the Lifecycle rule.
     * 
     */
    @Import(name="definition", required=true)
    private Output<ManagementPolicyDefinitionArgs> definition;

    /**
     * @return An object that defines the Lifecycle rule.
     * 
     */
    public Output<ManagementPolicyDefinitionArgs> definition() {
        return this.definition;
    }

    /**
     * Rule is enabled if set to true.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Rule is enabled if set to true.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * A rule name can contain any combination of alpha numeric characters. Rule name is case-sensitive. It must be unique within a policy.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return A rule name can contain any combination of alpha numeric characters. Rule name is case-sensitive. It must be unique within a policy.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The valid value is Lifecycle
     * 
     */
    @Import(name="type", required=true)
    private Output<Either<String,RuleType>> type;

    /**
     * @return The valid value is Lifecycle
     * 
     */
    public Output<Either<String,RuleType>> type() {
        return this.type;
    }

    private ManagementPolicyRuleArgs() {}

    private ManagementPolicyRuleArgs(ManagementPolicyRuleArgs $) {
        this.definition = $.definition;
        this.enabled = $.enabled;
        this.name = $.name;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagementPolicyRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagementPolicyRuleArgs $;

        public Builder() {
            $ = new ManagementPolicyRuleArgs();
        }

        public Builder(ManagementPolicyRuleArgs defaults) {
            $ = new ManagementPolicyRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param definition An object that defines the Lifecycle rule.
         * 
         * @return builder
         * 
         */
        public Builder definition(Output<ManagementPolicyDefinitionArgs> definition) {
            $.definition = definition;
            return this;
        }

        /**
         * @param definition An object that defines the Lifecycle rule.
         * 
         * @return builder
         * 
         */
        public Builder definition(ManagementPolicyDefinitionArgs definition) {
            return definition(Output.of(definition));
        }

        /**
         * @param enabled Rule is enabled if set to true.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Rule is enabled if set to true.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param name A rule name can contain any combination of alpha numeric characters. Rule name is case-sensitive. It must be unique within a policy.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A rule name can contain any combination of alpha numeric characters. Rule name is case-sensitive. It must be unique within a policy.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param type The valid value is Lifecycle
         * 
         * @return builder
         * 
         */
        public Builder type(Output<Either<String,RuleType>> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The valid value is Lifecycle
         * 
         * @return builder
         * 
         */
        public Builder type(Either<String,RuleType> type) {
            return type(Output.of(type));
        }

        /**
         * @param type The valid value is Lifecycle
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Either.ofLeft(type));
        }

        /**
         * @param type The valid value is Lifecycle
         * 
         * @return builder
         * 
         */
        public Builder type(RuleType type) {
            return type(Either.ofRight(type));
        }

        public ManagementPolicyRuleArgs build() {
            $.definition = Objects.requireNonNull($.definition, "expected parameter 'definition' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
