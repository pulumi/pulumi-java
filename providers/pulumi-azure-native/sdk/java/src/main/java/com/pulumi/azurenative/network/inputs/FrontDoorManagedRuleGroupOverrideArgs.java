// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.azurenative.network.inputs.FrontDoorManagedRuleOverrideArgs;
import com.pulumi.azurenative.network.inputs.ManagedRuleExclusionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Defines a managed rule group override setting.
 * 
 */
public final class FrontDoorManagedRuleGroupOverrideArgs extends com.pulumi.resources.ResourceArgs {

    public static final FrontDoorManagedRuleGroupOverrideArgs Empty = new FrontDoorManagedRuleGroupOverrideArgs();

    /**
     * Describes the exclusions that are applied to all rules in the group.
     * 
     */
    @Import(name="exclusions")
    private @Nullable Output<List<ManagedRuleExclusionArgs>> exclusions;

    /**
     * @return Describes the exclusions that are applied to all rules in the group.
     * 
     */
    public Optional<Output<List<ManagedRuleExclusionArgs>>> exclusions() {
        return Optional.ofNullable(this.exclusions);
    }

    /**
     * Describes the managed rule group to override.
     * 
     */
    @Import(name="ruleGroupName", required=true)
    private Output<String> ruleGroupName;

    /**
     * @return Describes the managed rule group to override.
     * 
     */
    public Output<String> ruleGroupName() {
        return this.ruleGroupName;
    }

    /**
     * List of rules that will be disabled. If none specified, all rules in the group will be disabled.
     * 
     */
    @Import(name="rules")
    private @Nullable Output<List<FrontDoorManagedRuleOverrideArgs>> rules;

    /**
     * @return List of rules that will be disabled. If none specified, all rules in the group will be disabled.
     * 
     */
    public Optional<Output<List<FrontDoorManagedRuleOverrideArgs>>> rules() {
        return Optional.ofNullable(this.rules);
    }

    private FrontDoorManagedRuleGroupOverrideArgs() {}

    private FrontDoorManagedRuleGroupOverrideArgs(FrontDoorManagedRuleGroupOverrideArgs $) {
        this.exclusions = $.exclusions;
        this.ruleGroupName = $.ruleGroupName;
        this.rules = $.rules;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FrontDoorManagedRuleGroupOverrideArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FrontDoorManagedRuleGroupOverrideArgs $;

        public Builder() {
            $ = new FrontDoorManagedRuleGroupOverrideArgs();
        }

        public Builder(FrontDoorManagedRuleGroupOverrideArgs defaults) {
            $ = new FrontDoorManagedRuleGroupOverrideArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param exclusions Describes the exclusions that are applied to all rules in the group.
         * 
         * @return builder
         * 
         */
        public Builder exclusions(@Nullable Output<List<ManagedRuleExclusionArgs>> exclusions) {
            $.exclusions = exclusions;
            return this;
        }

        /**
         * @param exclusions Describes the exclusions that are applied to all rules in the group.
         * 
         * @return builder
         * 
         */
        public Builder exclusions(List<ManagedRuleExclusionArgs> exclusions) {
            return exclusions(Output.of(exclusions));
        }

        /**
         * @param exclusions Describes the exclusions that are applied to all rules in the group.
         * 
         * @return builder
         * 
         */
        public Builder exclusions(ManagedRuleExclusionArgs... exclusions) {
            return exclusions(List.of(exclusions));
        }

        /**
         * @param ruleGroupName Describes the managed rule group to override.
         * 
         * @return builder
         * 
         */
        public Builder ruleGroupName(Output<String> ruleGroupName) {
            $.ruleGroupName = ruleGroupName;
            return this;
        }

        /**
         * @param ruleGroupName Describes the managed rule group to override.
         * 
         * @return builder
         * 
         */
        public Builder ruleGroupName(String ruleGroupName) {
            return ruleGroupName(Output.of(ruleGroupName));
        }

        /**
         * @param rules List of rules that will be disabled. If none specified, all rules in the group will be disabled.
         * 
         * @return builder
         * 
         */
        public Builder rules(@Nullable Output<List<FrontDoorManagedRuleOverrideArgs>> rules) {
            $.rules = rules;
            return this;
        }

        /**
         * @param rules List of rules that will be disabled. If none specified, all rules in the group will be disabled.
         * 
         * @return builder
         * 
         */
        public Builder rules(List<FrontDoorManagedRuleOverrideArgs> rules) {
            return rules(Output.of(rules));
        }

        /**
         * @param rules List of rules that will be disabled. If none specified, all rules in the group will be disabled.
         * 
         * @return builder
         * 
         */
        public Builder rules(FrontDoorManagedRuleOverrideArgs... rules) {
            return rules(List.of(rules));
        }

        public FrontDoorManagedRuleGroupOverrideArgs build() {
            $.ruleGroupName = Objects.requireNonNull($.ruleGroupName, "expected parameter 'ruleGroupName' to be non-null");
            return $;
        }
    }

}
