// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.documentdb.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A region in which the Azure Cosmos DB database account is deployed.
 * 
 */
public final class LocationResponse extends com.pulumi.resources.InvokeArgs {

    public static final LocationResponse Empty = new LocationResponse();

    /**
     * The connection endpoint for the specific region. Example: https://&amp;lt;accountName&amp;gt;-&amp;lt;locationName&amp;gt;.documents.azure.com:443/
     * 
     */
    @Import(name="documentEndpoint", required=true)
    private String documentEndpoint;

    /**
     * @return The connection endpoint for the specific region. Example: https://&amp;lt;accountName&amp;gt;-&amp;lt;locationName&amp;gt;.documents.azure.com:443/
     * 
     */
    public String documentEndpoint() {
        return this.documentEndpoint;
    }

    /**
     * The failover priority of the region. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists.
     * 
     */
    @Import(name="failoverPriority")
    private @Nullable Integer failoverPriority;

    /**
     * @return The failover priority of the region. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists.
     * 
     */
    public Optional<Integer> failoverPriority() {
        return Optional.ofNullable(this.failoverPriority);
    }

    /**
     * The unique identifier of the region within the database account. Example: &amp;lt;accountName&amp;gt;-&amp;lt;locationName&amp;gt;.
     * 
     */
    @Import(name="id", required=true)
    private String id;

    /**
     * @return The unique identifier of the region within the database account. Example: &amp;lt;accountName&amp;gt;-&amp;lt;locationName&amp;gt;.
     * 
     */
    public String id() {
        return this.id;
    }

    /**
     * Flag to indicate whether or not this region is an AvailabilityZone region
     * 
     */
    @Import(name="isZoneRedundant")
    private @Nullable Boolean isZoneRedundant;

    /**
     * @return Flag to indicate whether or not this region is an AvailabilityZone region
     * 
     */
    public Optional<Boolean> isZoneRedundant() {
        return Optional.ofNullable(this.isZoneRedundant);
    }

    /**
     * The name of the region.
     * 
     */
    @Import(name="locationName")
    private @Nullable String locationName;

    /**
     * @return The name of the region.
     * 
     */
    public Optional<String> locationName() {
        return Optional.ofNullable(this.locationName);
    }

    /**
     * The status of the Cosmos DB account at the time the operation was called. The status can be one of following. &#39;Creating&#39; – the Cosmos DB account is being created. When an account is in Creating state, only properties that are specified as input for the Create Cosmos DB account operation are returned. &#39;Succeeded&#39; – the Cosmos DB account is active for use. &#39;Updating&#39; – the Cosmos DB account is being updated. &#39;Deleting&#39; – the Cosmos DB account is being deleted. &#39;Failed&#39; – the Cosmos DB account failed creation. &#39;DeletionFailed&#39; – the Cosmos DB account deletion failed.
     * 
     */
    @Import(name="provisioningState", required=true)
    private String provisioningState;

    /**
     * @return The status of the Cosmos DB account at the time the operation was called. The status can be one of following. &#39;Creating&#39; – the Cosmos DB account is being created. When an account is in Creating state, only properties that are specified as input for the Create Cosmos DB account operation are returned. &#39;Succeeded&#39; – the Cosmos DB account is active for use. &#39;Updating&#39; – the Cosmos DB account is being updated. &#39;Deleting&#39; – the Cosmos DB account is being deleted. &#39;Failed&#39; – the Cosmos DB account failed creation. &#39;DeletionFailed&#39; – the Cosmos DB account deletion failed.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    private LocationResponse() {}

    private LocationResponse(LocationResponse $) {
        this.documentEndpoint = $.documentEndpoint;
        this.failoverPriority = $.failoverPriority;
        this.id = $.id;
        this.isZoneRedundant = $.isZoneRedundant;
        this.locationName = $.locationName;
        this.provisioningState = $.provisioningState;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LocationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LocationResponse $;

        public Builder() {
            $ = new LocationResponse();
        }

        public Builder(LocationResponse defaults) {
            $ = new LocationResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param documentEndpoint The connection endpoint for the specific region. Example: https://&amp;lt;accountName&amp;gt;-&amp;lt;locationName&amp;gt;.documents.azure.com:443/
         * 
         * @return builder
         * 
         */
        public Builder documentEndpoint(String documentEndpoint) {
            $.documentEndpoint = documentEndpoint;
            return this;
        }

        /**
         * @param failoverPriority The failover priority of the region. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists.
         * 
         * @return builder
         * 
         */
        public Builder failoverPriority(@Nullable Integer failoverPriority) {
            $.failoverPriority = failoverPriority;
            return this;
        }

        /**
         * @param id The unique identifier of the region within the database account. Example: &amp;lt;accountName&amp;gt;-&amp;lt;locationName&amp;gt;.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            $.id = id;
            return this;
        }

        /**
         * @param isZoneRedundant Flag to indicate whether or not this region is an AvailabilityZone region
         * 
         * @return builder
         * 
         */
        public Builder isZoneRedundant(@Nullable Boolean isZoneRedundant) {
            $.isZoneRedundant = isZoneRedundant;
            return this;
        }

        /**
         * @param locationName The name of the region.
         * 
         * @return builder
         * 
         */
        public Builder locationName(@Nullable String locationName) {
            $.locationName = locationName;
            return this;
        }

        /**
         * @param provisioningState The status of the Cosmos DB account at the time the operation was called. The status can be one of following. &#39;Creating&#39; – the Cosmos DB account is being created. When an account is in Creating state, only properties that are specified as input for the Create Cosmos DB account operation are returned. &#39;Succeeded&#39; – the Cosmos DB account is active for use. &#39;Updating&#39; – the Cosmos DB account is being updated. &#39;Deleting&#39; – the Cosmos DB account is being deleted. &#39;Failed&#39; – the Cosmos DB account failed creation. &#39;DeletionFailed&#39; – the Cosmos DB account deletion failed.
         * 
         * @return builder
         * 
         */
        public Builder provisioningState(String provisioningState) {
            $.provisioningState = provisioningState;
            return this;
        }

        public LocationResponse build() {
            $.documentEndpoint = Objects.requireNonNull($.documentEndpoint, "expected parameter 'documentEndpoint' to be non-null");
            $.id = Objects.requireNonNull($.id, "expected parameter 'id' to be non-null");
            $.provisioningState = Objects.requireNonNull($.provisioningState, "expected parameter 'provisioningState' to be non-null");
            return $;
        }
    }

}
