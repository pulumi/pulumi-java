// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.web.inputs;

import com.pulumi.azurenative.web.enums.ConnectionStringType;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;


/**
 * Database connection string value to type pair.
 * 
 */
public final class ConnStringValueTypePairArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnStringValueTypePairArgs Empty = new ConnStringValueTypePairArgs();

    /**
     * Type of database.
     * 
     */
    @Import(name="type", required=true)
      private final Output<ConnectionStringType> type;

    public Output<ConnectionStringType> type() {
        return this.type;
    }

    /**
     * Value of pair.
     * 
     */
    @Import(name="value", required=true)
      private final Output<String> value;

    public Output<String> value() {
        return this.value;
    }

    public ConnStringValueTypePairArgs(
        Output<ConnectionStringType> type,
        Output<String> value) {
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
        this.value = Objects.requireNonNull(value, "expected parameter 'value' to be non-null");
    }

    private ConnStringValueTypePairArgs() {
        this.type = Codegen.empty();
        this.value = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConnStringValueTypePairArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<ConnectionStringType> type;
        private Output<String> value;

        public Builder() {
    	      // Empty
        }

        public Builder(ConnStringValueTypePairArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.type = defaults.type;
    	      this.value = defaults.value;
        }

        public Builder type(Output<ConnectionStringType> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder type(ConnectionStringType type) {
            this.type = Output.of(Objects.requireNonNull(type));
            return this;
        }
        public Builder value(Output<String> value) {
            this.value = Objects.requireNonNull(value);
            return this;
        }
        public Builder value(String value) {
            this.value = Output.of(Objects.requireNonNull(value));
            return this;
        }        public ConnStringValueTypePairArgs build() {
            return new ConnStringValueTypePairArgs(type, value);
        }
    }
}
