// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.authorization.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class GetRoleManagementPolicyAssignmentArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetRoleManagementPolicyAssignmentArgs Empty = new GetRoleManagementPolicyAssignmentArgs();

    /**
     * The name of format {guid_guid} the role management policy assignment to get.
     * 
     */
    @Import(name="roleManagementPolicyAssignmentName", required=true)
    private Output<String> roleManagementPolicyAssignmentName;

    /**
     * @return The name of format {guid_guid} the role management policy assignment to get.
     * 
     */
    public Output<String> roleManagementPolicyAssignmentName() {
        return this.roleManagementPolicyAssignmentName;
    }

    /**
     * The scope of the role management policy.
     * 
     */
    @Import(name="scope", required=true)
    private Output<String> scope;

    /**
     * @return The scope of the role management policy.
     * 
     */
    public Output<String> scope() {
        return this.scope;
    }

    private GetRoleManagementPolicyAssignmentArgs() {}

    private GetRoleManagementPolicyAssignmentArgs(GetRoleManagementPolicyAssignmentArgs $) {
        this.roleManagementPolicyAssignmentName = $.roleManagementPolicyAssignmentName;
        this.scope = $.scope;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetRoleManagementPolicyAssignmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetRoleManagementPolicyAssignmentArgs $;

        public Builder() {
            $ = new GetRoleManagementPolicyAssignmentArgs();
        }

        public Builder(GetRoleManagementPolicyAssignmentArgs defaults) {
            $ = new GetRoleManagementPolicyAssignmentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param roleManagementPolicyAssignmentName The name of format {guid_guid} the role management policy assignment to get.
         * 
         * @return builder
         * 
         */
        public Builder roleManagementPolicyAssignmentName(Output<String> roleManagementPolicyAssignmentName) {
            $.roleManagementPolicyAssignmentName = roleManagementPolicyAssignmentName;
            return this;
        }

        /**
         * @param roleManagementPolicyAssignmentName The name of format {guid_guid} the role management policy assignment to get.
         * 
         * @return builder
         * 
         */
        public Builder roleManagementPolicyAssignmentName(String roleManagementPolicyAssignmentName) {
            return roleManagementPolicyAssignmentName(Output.of(roleManagementPolicyAssignmentName));
        }

        /**
         * @param scope The scope of the role management policy.
         * 
         * @return builder
         * 
         */
        public Builder scope(Output<String> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope The scope of the role management policy.
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        public GetRoleManagementPolicyAssignmentArgs build() {
            $.roleManagementPolicyAssignmentName = Objects.requireNonNull($.roleManagementPolicyAssignmentName, "expected parameter 'roleManagementPolicyAssignmentName' to be non-null");
            $.scope = Objects.requireNonNull($.scope, "expected parameter 'scope' to be non-null");
            return $;
        }
    }

}
