// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.logic.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The X12 agreement envelope settings.
 * 
 */
public final class X12EnvelopeSettingsResponse extends com.pulumi.resources.InvokeArgs {

    public static final X12EnvelopeSettingsResponse Empty = new X12EnvelopeSettingsResponse();

    /**
     * The controls standards id.
     * 
     */
    @Import(name="controlStandardsId", required=true)
    private Integer controlStandardsId;

    /**
     * @return The controls standards id.
     * 
     */
    public Integer controlStandardsId() {
        return this.controlStandardsId;
    }

    /**
     * The control version number.
     * 
     */
    @Import(name="controlVersionNumber", required=true)
    private String controlVersionNumber;

    /**
     * @return The control version number.
     * 
     */
    public String controlVersionNumber() {
        return this.controlVersionNumber;
    }

    /**
     * The value indicating whether to enable default group headers.
     * 
     */
    @Import(name="enableDefaultGroupHeaders", required=true)
    private Boolean enableDefaultGroupHeaders;

    /**
     * @return The value indicating whether to enable default group headers.
     * 
     */
    public Boolean enableDefaultGroupHeaders() {
        return this.enableDefaultGroupHeaders;
    }

    /**
     * The functional group id.
     * 
     */
    @Import(name="functionalGroupId")
    private @Nullable String functionalGroupId;

    /**
     * @return The functional group id.
     * 
     */
    public Optional<String> functionalGroupId() {
        return Optional.ofNullable(this.functionalGroupId);
    }

    /**
     * The group control number lower bound.
     * 
     */
    @Import(name="groupControlNumberLowerBound", required=true)
    private Integer groupControlNumberLowerBound;

    /**
     * @return The group control number lower bound.
     * 
     */
    public Integer groupControlNumberLowerBound() {
        return this.groupControlNumberLowerBound;
    }

    /**
     * The group control number upper bound.
     * 
     */
    @Import(name="groupControlNumberUpperBound", required=true)
    private Integer groupControlNumberUpperBound;

    /**
     * @return The group control number upper bound.
     * 
     */
    public Integer groupControlNumberUpperBound() {
        return this.groupControlNumberUpperBound;
    }

    /**
     * The group header agency code.
     * 
     */
    @Import(name="groupHeaderAgencyCode", required=true)
    private String groupHeaderAgencyCode;

    /**
     * @return The group header agency code.
     * 
     */
    public String groupHeaderAgencyCode() {
        return this.groupHeaderAgencyCode;
    }

    /**
     * The group header date format.
     * 
     */
    @Import(name="groupHeaderDateFormat", required=true)
    private String groupHeaderDateFormat;

    /**
     * @return The group header date format.
     * 
     */
    public String groupHeaderDateFormat() {
        return this.groupHeaderDateFormat;
    }

    /**
     * The group header time format.
     * 
     */
    @Import(name="groupHeaderTimeFormat", required=true)
    private String groupHeaderTimeFormat;

    /**
     * @return The group header time format.
     * 
     */
    public String groupHeaderTimeFormat() {
        return this.groupHeaderTimeFormat;
    }

    /**
     * The group header version.
     * 
     */
    @Import(name="groupHeaderVersion", required=true)
    private String groupHeaderVersion;

    /**
     * @return The group header version.
     * 
     */
    public String groupHeaderVersion() {
        return this.groupHeaderVersion;
    }

    /**
     * The interchange  control number lower bound.
     * 
     */
    @Import(name="interchangeControlNumberLowerBound", required=true)
    private Integer interchangeControlNumberLowerBound;

    /**
     * @return The interchange  control number lower bound.
     * 
     */
    public Integer interchangeControlNumberLowerBound() {
        return this.interchangeControlNumberLowerBound;
    }

    /**
     * The interchange  control number upper bound.
     * 
     */
    @Import(name="interchangeControlNumberUpperBound", required=true)
    private Integer interchangeControlNumberUpperBound;

    /**
     * @return The interchange  control number upper bound.
     * 
     */
    public Integer interchangeControlNumberUpperBound() {
        return this.interchangeControlNumberUpperBound;
    }

    /**
     * The value indicating whether to overwrite existing transaction set control number.
     * 
     */
    @Import(name="overwriteExistingTransactionSetControlNumber", required=true)
    private Boolean overwriteExistingTransactionSetControlNumber;

    /**
     * @return The value indicating whether to overwrite existing transaction set control number.
     * 
     */
    public Boolean overwriteExistingTransactionSetControlNumber() {
        return this.overwriteExistingTransactionSetControlNumber;
    }

    /**
     * The receiver application id.
     * 
     */
    @Import(name="receiverApplicationId", required=true)
    private String receiverApplicationId;

    /**
     * @return The receiver application id.
     * 
     */
    public String receiverApplicationId() {
        return this.receiverApplicationId;
    }

    /**
     * The value indicating whether to rollover group control number.
     * 
     */
    @Import(name="rolloverGroupControlNumber", required=true)
    private Boolean rolloverGroupControlNumber;

    /**
     * @return The value indicating whether to rollover group control number.
     * 
     */
    public Boolean rolloverGroupControlNumber() {
        return this.rolloverGroupControlNumber;
    }

    /**
     * The value indicating whether to rollover interchange control number.
     * 
     */
    @Import(name="rolloverInterchangeControlNumber", required=true)
    private Boolean rolloverInterchangeControlNumber;

    /**
     * @return The value indicating whether to rollover interchange control number.
     * 
     */
    public Boolean rolloverInterchangeControlNumber() {
        return this.rolloverInterchangeControlNumber;
    }

    /**
     * The value indicating whether to rollover transaction set control number.
     * 
     */
    @Import(name="rolloverTransactionSetControlNumber", required=true)
    private Boolean rolloverTransactionSetControlNumber;

    /**
     * @return The value indicating whether to rollover transaction set control number.
     * 
     */
    public Boolean rolloverTransactionSetControlNumber() {
        return this.rolloverTransactionSetControlNumber;
    }

    /**
     * The sender application id.
     * 
     */
    @Import(name="senderApplicationId", required=true)
    private String senderApplicationId;

    /**
     * @return The sender application id.
     * 
     */
    public String senderApplicationId() {
        return this.senderApplicationId;
    }

    /**
     * The transaction set control number lower bound.
     * 
     */
    @Import(name="transactionSetControlNumberLowerBound", required=true)
    private Integer transactionSetControlNumberLowerBound;

    /**
     * @return The transaction set control number lower bound.
     * 
     */
    public Integer transactionSetControlNumberLowerBound() {
        return this.transactionSetControlNumberLowerBound;
    }

    /**
     * The transaction set control number prefix.
     * 
     */
    @Import(name="transactionSetControlNumberPrefix")
    private @Nullable String transactionSetControlNumberPrefix;

    /**
     * @return The transaction set control number prefix.
     * 
     */
    public Optional<String> transactionSetControlNumberPrefix() {
        return Optional.ofNullable(this.transactionSetControlNumberPrefix);
    }

    /**
     * The transaction set control number suffix.
     * 
     */
    @Import(name="transactionSetControlNumberSuffix")
    private @Nullable String transactionSetControlNumberSuffix;

    /**
     * @return The transaction set control number suffix.
     * 
     */
    public Optional<String> transactionSetControlNumberSuffix() {
        return Optional.ofNullable(this.transactionSetControlNumberSuffix);
    }

    /**
     * The transaction set control number upper bound.
     * 
     */
    @Import(name="transactionSetControlNumberUpperBound", required=true)
    private Integer transactionSetControlNumberUpperBound;

    /**
     * @return The transaction set control number upper bound.
     * 
     */
    public Integer transactionSetControlNumberUpperBound() {
        return this.transactionSetControlNumberUpperBound;
    }

    /**
     * The usage indicator.
     * 
     */
    @Import(name="usageIndicator", required=true)
    private String usageIndicator;

    /**
     * @return The usage indicator.
     * 
     */
    public String usageIndicator() {
        return this.usageIndicator;
    }

    /**
     * The value indicating whether to use control standards id as repetition character.
     * 
     */
    @Import(name="useControlStandardsIdAsRepetitionCharacter", required=true)
    private Boolean useControlStandardsIdAsRepetitionCharacter;

    /**
     * @return The value indicating whether to use control standards id as repetition character.
     * 
     */
    public Boolean useControlStandardsIdAsRepetitionCharacter() {
        return this.useControlStandardsIdAsRepetitionCharacter;
    }

    private X12EnvelopeSettingsResponse() {}

    private X12EnvelopeSettingsResponse(X12EnvelopeSettingsResponse $) {
        this.controlStandardsId = $.controlStandardsId;
        this.controlVersionNumber = $.controlVersionNumber;
        this.enableDefaultGroupHeaders = $.enableDefaultGroupHeaders;
        this.functionalGroupId = $.functionalGroupId;
        this.groupControlNumberLowerBound = $.groupControlNumberLowerBound;
        this.groupControlNumberUpperBound = $.groupControlNumberUpperBound;
        this.groupHeaderAgencyCode = $.groupHeaderAgencyCode;
        this.groupHeaderDateFormat = $.groupHeaderDateFormat;
        this.groupHeaderTimeFormat = $.groupHeaderTimeFormat;
        this.groupHeaderVersion = $.groupHeaderVersion;
        this.interchangeControlNumberLowerBound = $.interchangeControlNumberLowerBound;
        this.interchangeControlNumberUpperBound = $.interchangeControlNumberUpperBound;
        this.overwriteExistingTransactionSetControlNumber = $.overwriteExistingTransactionSetControlNumber;
        this.receiverApplicationId = $.receiverApplicationId;
        this.rolloverGroupControlNumber = $.rolloverGroupControlNumber;
        this.rolloverInterchangeControlNumber = $.rolloverInterchangeControlNumber;
        this.rolloverTransactionSetControlNumber = $.rolloverTransactionSetControlNumber;
        this.senderApplicationId = $.senderApplicationId;
        this.transactionSetControlNumberLowerBound = $.transactionSetControlNumberLowerBound;
        this.transactionSetControlNumberPrefix = $.transactionSetControlNumberPrefix;
        this.transactionSetControlNumberSuffix = $.transactionSetControlNumberSuffix;
        this.transactionSetControlNumberUpperBound = $.transactionSetControlNumberUpperBound;
        this.usageIndicator = $.usageIndicator;
        this.useControlStandardsIdAsRepetitionCharacter = $.useControlStandardsIdAsRepetitionCharacter;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(X12EnvelopeSettingsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private X12EnvelopeSettingsResponse $;

        public Builder() {
            $ = new X12EnvelopeSettingsResponse();
        }

        public Builder(X12EnvelopeSettingsResponse defaults) {
            $ = new X12EnvelopeSettingsResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param controlStandardsId The controls standards id.
         * 
         * @return builder
         * 
         */
        public Builder controlStandardsId(Integer controlStandardsId) {
            $.controlStandardsId = controlStandardsId;
            return this;
        }

        /**
         * @param controlVersionNumber The control version number.
         * 
         * @return builder
         * 
         */
        public Builder controlVersionNumber(String controlVersionNumber) {
            $.controlVersionNumber = controlVersionNumber;
            return this;
        }

        /**
         * @param enableDefaultGroupHeaders The value indicating whether to enable default group headers.
         * 
         * @return builder
         * 
         */
        public Builder enableDefaultGroupHeaders(Boolean enableDefaultGroupHeaders) {
            $.enableDefaultGroupHeaders = enableDefaultGroupHeaders;
            return this;
        }

        /**
         * @param functionalGroupId The functional group id.
         * 
         * @return builder
         * 
         */
        public Builder functionalGroupId(@Nullable String functionalGroupId) {
            $.functionalGroupId = functionalGroupId;
            return this;
        }

        /**
         * @param groupControlNumberLowerBound The group control number lower bound.
         * 
         * @return builder
         * 
         */
        public Builder groupControlNumberLowerBound(Integer groupControlNumberLowerBound) {
            $.groupControlNumberLowerBound = groupControlNumberLowerBound;
            return this;
        }

        /**
         * @param groupControlNumberUpperBound The group control number upper bound.
         * 
         * @return builder
         * 
         */
        public Builder groupControlNumberUpperBound(Integer groupControlNumberUpperBound) {
            $.groupControlNumberUpperBound = groupControlNumberUpperBound;
            return this;
        }

        /**
         * @param groupHeaderAgencyCode The group header agency code.
         * 
         * @return builder
         * 
         */
        public Builder groupHeaderAgencyCode(String groupHeaderAgencyCode) {
            $.groupHeaderAgencyCode = groupHeaderAgencyCode;
            return this;
        }

        /**
         * @param groupHeaderDateFormat The group header date format.
         * 
         * @return builder
         * 
         */
        public Builder groupHeaderDateFormat(String groupHeaderDateFormat) {
            $.groupHeaderDateFormat = groupHeaderDateFormat;
            return this;
        }

        /**
         * @param groupHeaderTimeFormat The group header time format.
         * 
         * @return builder
         * 
         */
        public Builder groupHeaderTimeFormat(String groupHeaderTimeFormat) {
            $.groupHeaderTimeFormat = groupHeaderTimeFormat;
            return this;
        }

        /**
         * @param groupHeaderVersion The group header version.
         * 
         * @return builder
         * 
         */
        public Builder groupHeaderVersion(String groupHeaderVersion) {
            $.groupHeaderVersion = groupHeaderVersion;
            return this;
        }

        /**
         * @param interchangeControlNumberLowerBound The interchange  control number lower bound.
         * 
         * @return builder
         * 
         */
        public Builder interchangeControlNumberLowerBound(Integer interchangeControlNumberLowerBound) {
            $.interchangeControlNumberLowerBound = interchangeControlNumberLowerBound;
            return this;
        }

        /**
         * @param interchangeControlNumberUpperBound The interchange  control number upper bound.
         * 
         * @return builder
         * 
         */
        public Builder interchangeControlNumberUpperBound(Integer interchangeControlNumberUpperBound) {
            $.interchangeControlNumberUpperBound = interchangeControlNumberUpperBound;
            return this;
        }

        /**
         * @param overwriteExistingTransactionSetControlNumber The value indicating whether to overwrite existing transaction set control number.
         * 
         * @return builder
         * 
         */
        public Builder overwriteExistingTransactionSetControlNumber(Boolean overwriteExistingTransactionSetControlNumber) {
            $.overwriteExistingTransactionSetControlNumber = overwriteExistingTransactionSetControlNumber;
            return this;
        }

        /**
         * @param receiverApplicationId The receiver application id.
         * 
         * @return builder
         * 
         */
        public Builder receiverApplicationId(String receiverApplicationId) {
            $.receiverApplicationId = receiverApplicationId;
            return this;
        }

        /**
         * @param rolloverGroupControlNumber The value indicating whether to rollover group control number.
         * 
         * @return builder
         * 
         */
        public Builder rolloverGroupControlNumber(Boolean rolloverGroupControlNumber) {
            $.rolloverGroupControlNumber = rolloverGroupControlNumber;
            return this;
        }

        /**
         * @param rolloverInterchangeControlNumber The value indicating whether to rollover interchange control number.
         * 
         * @return builder
         * 
         */
        public Builder rolloverInterchangeControlNumber(Boolean rolloverInterchangeControlNumber) {
            $.rolloverInterchangeControlNumber = rolloverInterchangeControlNumber;
            return this;
        }

        /**
         * @param rolloverTransactionSetControlNumber The value indicating whether to rollover transaction set control number.
         * 
         * @return builder
         * 
         */
        public Builder rolloverTransactionSetControlNumber(Boolean rolloverTransactionSetControlNumber) {
            $.rolloverTransactionSetControlNumber = rolloverTransactionSetControlNumber;
            return this;
        }

        /**
         * @param senderApplicationId The sender application id.
         * 
         * @return builder
         * 
         */
        public Builder senderApplicationId(String senderApplicationId) {
            $.senderApplicationId = senderApplicationId;
            return this;
        }

        /**
         * @param transactionSetControlNumberLowerBound The transaction set control number lower bound.
         * 
         * @return builder
         * 
         */
        public Builder transactionSetControlNumberLowerBound(Integer transactionSetControlNumberLowerBound) {
            $.transactionSetControlNumberLowerBound = transactionSetControlNumberLowerBound;
            return this;
        }

        /**
         * @param transactionSetControlNumberPrefix The transaction set control number prefix.
         * 
         * @return builder
         * 
         */
        public Builder transactionSetControlNumberPrefix(@Nullable String transactionSetControlNumberPrefix) {
            $.transactionSetControlNumberPrefix = transactionSetControlNumberPrefix;
            return this;
        }

        /**
         * @param transactionSetControlNumberSuffix The transaction set control number suffix.
         * 
         * @return builder
         * 
         */
        public Builder transactionSetControlNumberSuffix(@Nullable String transactionSetControlNumberSuffix) {
            $.transactionSetControlNumberSuffix = transactionSetControlNumberSuffix;
            return this;
        }

        /**
         * @param transactionSetControlNumberUpperBound The transaction set control number upper bound.
         * 
         * @return builder
         * 
         */
        public Builder transactionSetControlNumberUpperBound(Integer transactionSetControlNumberUpperBound) {
            $.transactionSetControlNumberUpperBound = transactionSetControlNumberUpperBound;
            return this;
        }

        /**
         * @param usageIndicator The usage indicator.
         * 
         * @return builder
         * 
         */
        public Builder usageIndicator(String usageIndicator) {
            $.usageIndicator = usageIndicator;
            return this;
        }

        /**
         * @param useControlStandardsIdAsRepetitionCharacter The value indicating whether to use control standards id as repetition character.
         * 
         * @return builder
         * 
         */
        public Builder useControlStandardsIdAsRepetitionCharacter(Boolean useControlStandardsIdAsRepetitionCharacter) {
            $.useControlStandardsIdAsRepetitionCharacter = useControlStandardsIdAsRepetitionCharacter;
            return this;
        }

        public X12EnvelopeSettingsResponse build() {
            $.controlStandardsId = Objects.requireNonNull($.controlStandardsId, "expected parameter 'controlStandardsId' to be non-null");
            $.controlVersionNumber = Objects.requireNonNull($.controlVersionNumber, "expected parameter 'controlVersionNumber' to be non-null");
            $.enableDefaultGroupHeaders = Objects.requireNonNull($.enableDefaultGroupHeaders, "expected parameter 'enableDefaultGroupHeaders' to be non-null");
            $.groupControlNumberLowerBound = Objects.requireNonNull($.groupControlNumberLowerBound, "expected parameter 'groupControlNumberLowerBound' to be non-null");
            $.groupControlNumberUpperBound = Objects.requireNonNull($.groupControlNumberUpperBound, "expected parameter 'groupControlNumberUpperBound' to be non-null");
            $.groupHeaderAgencyCode = Objects.requireNonNull($.groupHeaderAgencyCode, "expected parameter 'groupHeaderAgencyCode' to be non-null");
            $.groupHeaderDateFormat = Objects.requireNonNull($.groupHeaderDateFormat, "expected parameter 'groupHeaderDateFormat' to be non-null");
            $.groupHeaderTimeFormat = Objects.requireNonNull($.groupHeaderTimeFormat, "expected parameter 'groupHeaderTimeFormat' to be non-null");
            $.groupHeaderVersion = Objects.requireNonNull($.groupHeaderVersion, "expected parameter 'groupHeaderVersion' to be non-null");
            $.interchangeControlNumberLowerBound = Objects.requireNonNull($.interchangeControlNumberLowerBound, "expected parameter 'interchangeControlNumberLowerBound' to be non-null");
            $.interchangeControlNumberUpperBound = Objects.requireNonNull($.interchangeControlNumberUpperBound, "expected parameter 'interchangeControlNumberUpperBound' to be non-null");
            $.overwriteExistingTransactionSetControlNumber = Objects.requireNonNull($.overwriteExistingTransactionSetControlNumber, "expected parameter 'overwriteExistingTransactionSetControlNumber' to be non-null");
            $.receiverApplicationId = Objects.requireNonNull($.receiverApplicationId, "expected parameter 'receiverApplicationId' to be non-null");
            $.rolloverGroupControlNumber = Objects.requireNonNull($.rolloverGroupControlNumber, "expected parameter 'rolloverGroupControlNumber' to be non-null");
            $.rolloverInterchangeControlNumber = Objects.requireNonNull($.rolloverInterchangeControlNumber, "expected parameter 'rolloverInterchangeControlNumber' to be non-null");
            $.rolloverTransactionSetControlNumber = Objects.requireNonNull($.rolloverTransactionSetControlNumber, "expected parameter 'rolloverTransactionSetControlNumber' to be non-null");
            $.senderApplicationId = Objects.requireNonNull($.senderApplicationId, "expected parameter 'senderApplicationId' to be non-null");
            $.transactionSetControlNumberLowerBound = Objects.requireNonNull($.transactionSetControlNumberLowerBound, "expected parameter 'transactionSetControlNumberLowerBound' to be non-null");
            $.transactionSetControlNumberUpperBound = Objects.requireNonNull($.transactionSetControlNumberUpperBound, "expected parameter 'transactionSetControlNumberUpperBound' to be non-null");
            $.usageIndicator = Objects.requireNonNull($.usageIndicator, "expected parameter 'usageIndicator' to be non-null");
            $.useControlStandardsIdAsRepetitionCharacter = Objects.requireNonNull($.useControlStandardsIdAsRepetitionCharacter, "expected parameter 'useControlStandardsIdAsRepetitionCharacter' to be non-null");
            return $;
        }
    }

}
