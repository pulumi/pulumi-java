// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.insights.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * A webhook receiver.
 * 
 */
public final class WebhookReceiverArgs extends com.pulumi.resources.ResourceArgs {

    public static final WebhookReceiverArgs Empty = new WebhookReceiverArgs();

    /**
     * Indicates the identifier uri for aad auth.
     * 
     */
    @Import(name="identifierUri")
      private final @Nullable Output<String> identifierUri;

    public Output<String> identifierUri() {
        return this.identifierUri == null ? Codegen.empty() : this.identifierUri;
    }

    /**
     * The name of the webhook receiver. Names must be unique across all receivers within an action group.
     * 
     */
    @Import(name="name", required=true)
      private final Output<String> name;

    public Output<String> name() {
        return this.name;
    }

    /**
     * Indicates the webhook app object Id for aad auth.
     * 
     */
    @Import(name="objectId")
      private final @Nullable Output<String> objectId;

    public Output<String> objectId() {
        return this.objectId == null ? Codegen.empty() : this.objectId;
    }

    /**
     * The URI where webhooks should be sent.
     * 
     */
    @Import(name="serviceUri", required=true)
      private final Output<String> serviceUri;

    public Output<String> serviceUri() {
        return this.serviceUri;
    }

    /**
     * Indicates the tenant id for aad auth.
     * 
     */
    @Import(name="tenantId")
      private final @Nullable Output<String> tenantId;

    public Output<String> tenantId() {
        return this.tenantId == null ? Codegen.empty() : this.tenantId;
    }

    /**
     * Indicates whether or not use AAD authentication.
     * 
     */
    @Import(name="useAadAuth")
      private final @Nullable Output<Boolean> useAadAuth;

    public Output<Boolean> useAadAuth() {
        return this.useAadAuth == null ? Codegen.empty() : this.useAadAuth;
    }

    /**
     * Indicates whether to use common alert schema.
     * 
     */
    @Import(name="useCommonAlertSchema")
      private final @Nullable Output<Boolean> useCommonAlertSchema;

    public Output<Boolean> useCommonAlertSchema() {
        return this.useCommonAlertSchema == null ? Codegen.empty() : this.useCommonAlertSchema;
    }

    public WebhookReceiverArgs(
        @Nullable Output<String> identifierUri,
        Output<String> name,
        @Nullable Output<String> objectId,
        Output<String> serviceUri,
        @Nullable Output<String> tenantId,
        @Nullable Output<Boolean> useAadAuth,
        @Nullable Output<Boolean> useCommonAlertSchema) {
        this.identifierUri = identifierUri;
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.objectId = objectId;
        this.serviceUri = Objects.requireNonNull(serviceUri, "expected parameter 'serviceUri' to be non-null");
        this.tenantId = tenantId;
        this.useAadAuth = useAadAuth == null ? Codegen.ofNullable(false) : useAadAuth;
        this.useCommonAlertSchema = useCommonAlertSchema == null ? Codegen.ofNullable(false) : useCommonAlertSchema;
    }

    private WebhookReceiverArgs() {
        this.identifierUri = Codegen.empty();
        this.name = Codegen.empty();
        this.objectId = Codegen.empty();
        this.serviceUri = Codegen.empty();
        this.tenantId = Codegen.empty();
        this.useAadAuth = Codegen.empty();
        this.useCommonAlertSchema = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(WebhookReceiverArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> identifierUri;
        private Output<String> name;
        private @Nullable Output<String> objectId;
        private Output<String> serviceUri;
        private @Nullable Output<String> tenantId;
        private @Nullable Output<Boolean> useAadAuth;
        private @Nullable Output<Boolean> useCommonAlertSchema;

        public Builder() {
    	      // Empty
        }

        public Builder(WebhookReceiverArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.identifierUri = defaults.identifierUri;
    	      this.name = defaults.name;
    	      this.objectId = defaults.objectId;
    	      this.serviceUri = defaults.serviceUri;
    	      this.tenantId = defaults.tenantId;
    	      this.useAadAuth = defaults.useAadAuth;
    	      this.useCommonAlertSchema = defaults.useCommonAlertSchema;
        }

        public Builder identifierUri(@Nullable Output<String> identifierUri) {
            this.identifierUri = identifierUri;
            return this;
        }
        public Builder identifierUri(@Nullable String identifierUri) {
            this.identifierUri = Codegen.ofNullable(identifierUri);
            return this;
        }
        public Builder name(Output<String> name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder name(String name) {
            this.name = Output.of(Objects.requireNonNull(name));
            return this;
        }
        public Builder objectId(@Nullable Output<String> objectId) {
            this.objectId = objectId;
            return this;
        }
        public Builder objectId(@Nullable String objectId) {
            this.objectId = Codegen.ofNullable(objectId);
            return this;
        }
        public Builder serviceUri(Output<String> serviceUri) {
            this.serviceUri = Objects.requireNonNull(serviceUri);
            return this;
        }
        public Builder serviceUri(String serviceUri) {
            this.serviceUri = Output.of(Objects.requireNonNull(serviceUri));
            return this;
        }
        public Builder tenantId(@Nullable Output<String> tenantId) {
            this.tenantId = tenantId;
            return this;
        }
        public Builder tenantId(@Nullable String tenantId) {
            this.tenantId = Codegen.ofNullable(tenantId);
            return this;
        }
        public Builder useAadAuth(@Nullable Output<Boolean> useAadAuth) {
            this.useAadAuth = useAadAuth;
            return this;
        }
        public Builder useAadAuth(@Nullable Boolean useAadAuth) {
            this.useAadAuth = Codegen.ofNullable(useAadAuth);
            return this;
        }
        public Builder useCommonAlertSchema(@Nullable Output<Boolean> useCommonAlertSchema) {
            this.useCommonAlertSchema = useCommonAlertSchema;
            return this;
        }
        public Builder useCommonAlertSchema(@Nullable Boolean useCommonAlertSchema) {
            this.useCommonAlertSchema = Codegen.ofNullable(useCommonAlertSchema);
            return this;
        }        public WebhookReceiverArgs build() {
            return new WebhookReceiverArgs(identifierUri, name, objectId, serviceUri, tenantId, useAadAuth, useCommonAlertSchema);
        }
    }
}
