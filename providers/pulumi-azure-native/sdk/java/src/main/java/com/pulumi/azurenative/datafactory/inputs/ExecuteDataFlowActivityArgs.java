// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.azurenative.datafactory.inputs.ActivityDependencyArgs;
import com.pulumi.azurenative.datafactory.inputs.ActivityPolicyArgs;
import com.pulumi.azurenative.datafactory.inputs.DataFlowReferenceArgs;
import com.pulumi.azurenative.datafactory.inputs.DataFlowStagingInfoArgs;
import com.pulumi.azurenative.datafactory.inputs.ExecuteDataFlowActivityTypePropertiesComputeArgs;
import com.pulumi.azurenative.datafactory.inputs.IntegrationRuntimeReferenceArgs;
import com.pulumi.azurenative.datafactory.inputs.LinkedServiceReferenceArgs;
import com.pulumi.azurenative.datafactory.inputs.UserPropertyArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Execute data flow activity.
 * 
 */
public final class ExecuteDataFlowActivityArgs extends com.pulumi.resources.ResourceArgs {

    public static final ExecuteDataFlowActivityArgs Empty = new ExecuteDataFlowActivityArgs();

    /**
     * Compute properties for data flow activity.
     * 
     */
    @Import(name="compute")
    private @Nullable Output<ExecuteDataFlowActivityTypePropertiesComputeArgs> compute;

    public Optional<Output<ExecuteDataFlowActivityTypePropertiesComputeArgs>> compute() {
        return Optional.ofNullable(this.compute);
    }

    /**
     * Continue on error setting used for data flow execution. Enables processing to continue if a sink fails. Type: boolean (or Expression with resultType boolean)
     * 
     */
    @Import(name="continueOnError")
    private @Nullable Output<Object> continueOnError;

    public Optional<Output<Object>> continueOnError() {
        return Optional.ofNullable(this.continueOnError);
    }

    /**
     * Data flow reference.
     * 
     */
    @Import(name="dataFlow", required=true)
    private Output<DataFlowReferenceArgs> dataFlow;

    public Output<DataFlowReferenceArgs> dataFlow() {
        return this.dataFlow;
    }

    /**
     * Activity depends on condition.
     * 
     */
    @Import(name="dependsOn")
    private @Nullable Output<List<ActivityDependencyArgs>> dependsOn;

    public Optional<Output<List<ActivityDependencyArgs>>> dependsOn() {
        return Optional.ofNullable(this.dependsOn);
    }

    /**
     * Activity description.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The integration runtime reference.
     * 
     */
    @Import(name="integrationRuntime")
    private @Nullable Output<IntegrationRuntimeReferenceArgs> integrationRuntime;

    public Optional<Output<IntegrationRuntimeReferenceArgs>> integrationRuntime() {
        return Optional.ofNullable(this.integrationRuntime);
    }

    /**
     * Linked service reference.
     * 
     */
    @Import(name="linkedServiceName")
    private @Nullable Output<LinkedServiceReferenceArgs> linkedServiceName;

    public Optional<Output<LinkedServiceReferenceArgs>> linkedServiceName() {
        return Optional.ofNullable(this.linkedServiceName);
    }

    /**
     * Activity name.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    public Output<String> name() {
        return this.name;
    }

    /**
     * Activity policy.
     * 
     */
    @Import(name="policy")
    private @Nullable Output<ActivityPolicyArgs> policy;

    public Optional<Output<ActivityPolicyArgs>> policy() {
        return Optional.ofNullable(this.policy);
    }

    /**
     * Concurrent run setting used for data flow execution. Allows sinks with the same save order to be processed concurrently. Type: boolean (or Expression with resultType boolean)
     * 
     */
    @Import(name="runConcurrently")
    private @Nullable Output<Object> runConcurrently;

    public Optional<Output<Object>> runConcurrently() {
        return Optional.ofNullable(this.runConcurrently);
    }

    /**
     * Staging info for execute data flow activity.
     * 
     */
    @Import(name="staging")
    private @Nullable Output<DataFlowStagingInfoArgs> staging;

    public Optional<Output<DataFlowStagingInfoArgs>> staging() {
        return Optional.ofNullable(this.staging);
    }

    /**
     * Trace level setting used for data flow monitoring output. Supported values are: &#39;coarse&#39;, &#39;fine&#39;, and &#39;none&#39;. Type: string (or Expression with resultType string)
     * 
     */
    @Import(name="traceLevel")
    private @Nullable Output<Object> traceLevel;

    public Optional<Output<Object>> traceLevel() {
        return Optional.ofNullable(this.traceLevel);
    }

    /**
     * Type of activity.
     * Expected value is &#39;ExecuteDataFlow&#39;.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    /**
     * Activity user properties.
     * 
     */
    @Import(name="userProperties")
    private @Nullable Output<List<UserPropertyArgs>> userProperties;

    public Optional<Output<List<UserPropertyArgs>>> userProperties() {
        return Optional.ofNullable(this.userProperties);
    }

    private ExecuteDataFlowActivityArgs() {}

    private ExecuteDataFlowActivityArgs(ExecuteDataFlowActivityArgs $) {
        this.compute = $.compute;
        this.continueOnError = $.continueOnError;
        this.dataFlow = $.dataFlow;
        this.dependsOn = $.dependsOn;
        this.description = $.description;
        this.integrationRuntime = $.integrationRuntime;
        this.linkedServiceName = $.linkedServiceName;
        this.name = $.name;
        this.policy = $.policy;
        this.runConcurrently = $.runConcurrently;
        this.staging = $.staging;
        this.traceLevel = $.traceLevel;
        this.type = $.type;
        this.userProperties = $.userProperties;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExecuteDataFlowActivityArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExecuteDataFlowActivityArgs $;

        public Builder() {
            $ = new ExecuteDataFlowActivityArgs();
        }

        public Builder(ExecuteDataFlowActivityArgs defaults) {
            $ = new ExecuteDataFlowActivityArgs(Objects.requireNonNull(defaults));
        }

        public Builder compute(@Nullable Output<ExecuteDataFlowActivityTypePropertiesComputeArgs> compute) {
            $.compute = compute;
            return this;
        }

        public Builder compute(ExecuteDataFlowActivityTypePropertiesComputeArgs compute) {
            return compute(Output.of(compute));
        }

        public Builder continueOnError(@Nullable Output<Object> continueOnError) {
            $.continueOnError = continueOnError;
            return this;
        }

        public Builder continueOnError(Object continueOnError) {
            return continueOnError(Output.of(continueOnError));
        }

        public Builder dataFlow(Output<DataFlowReferenceArgs> dataFlow) {
            $.dataFlow = dataFlow;
            return this;
        }

        public Builder dataFlow(DataFlowReferenceArgs dataFlow) {
            return dataFlow(Output.of(dataFlow));
        }

        public Builder dependsOn(@Nullable Output<List<ActivityDependencyArgs>> dependsOn) {
            $.dependsOn = dependsOn;
            return this;
        }

        public Builder dependsOn(List<ActivityDependencyArgs> dependsOn) {
            return dependsOn(Output.of(dependsOn));
        }

        public Builder dependsOn(ActivityDependencyArgs... dependsOn) {
            return dependsOn(List.of(dependsOn));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder integrationRuntime(@Nullable Output<IntegrationRuntimeReferenceArgs> integrationRuntime) {
            $.integrationRuntime = integrationRuntime;
            return this;
        }

        public Builder integrationRuntime(IntegrationRuntimeReferenceArgs integrationRuntime) {
            return integrationRuntime(Output.of(integrationRuntime));
        }

        public Builder linkedServiceName(@Nullable Output<LinkedServiceReferenceArgs> linkedServiceName) {
            $.linkedServiceName = linkedServiceName;
            return this;
        }

        public Builder linkedServiceName(LinkedServiceReferenceArgs linkedServiceName) {
            return linkedServiceName(Output.of(linkedServiceName));
        }

        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder policy(@Nullable Output<ActivityPolicyArgs> policy) {
            $.policy = policy;
            return this;
        }

        public Builder policy(ActivityPolicyArgs policy) {
            return policy(Output.of(policy));
        }

        public Builder runConcurrently(@Nullable Output<Object> runConcurrently) {
            $.runConcurrently = runConcurrently;
            return this;
        }

        public Builder runConcurrently(Object runConcurrently) {
            return runConcurrently(Output.of(runConcurrently));
        }

        public Builder staging(@Nullable Output<DataFlowStagingInfoArgs> staging) {
            $.staging = staging;
            return this;
        }

        public Builder staging(DataFlowStagingInfoArgs staging) {
            return staging(Output.of(staging));
        }

        public Builder traceLevel(@Nullable Output<Object> traceLevel) {
            $.traceLevel = traceLevel;
            return this;
        }

        public Builder traceLevel(Object traceLevel) {
            return traceLevel(Output.of(traceLevel));
        }

        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public Builder userProperties(@Nullable Output<List<UserPropertyArgs>> userProperties) {
            $.userProperties = userProperties;
            return this;
        }

        public Builder userProperties(List<UserPropertyArgs> userProperties) {
            return userProperties(Output.of(userProperties));
        }

        public Builder userProperties(UserPropertyArgs... userProperties) {
            return userProperties(List.of(userProperties));
        }

        public ExecuteDataFlowActivityArgs build() {
            $.dataFlow = Objects.requireNonNull($.dataFlow, "expected parameter 'dataFlow' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.type = Codegen.stringProp("type").output().arg($.type).require();
            return $;
        }
    }

}
