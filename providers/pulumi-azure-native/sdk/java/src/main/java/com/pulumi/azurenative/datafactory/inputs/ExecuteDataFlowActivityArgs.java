// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.azurenative.datafactory.inputs.ActivityDependencyArgs;
import com.pulumi.azurenative.datafactory.inputs.ActivityPolicyArgs;
import com.pulumi.azurenative.datafactory.inputs.DataFlowReferenceArgs;
import com.pulumi.azurenative.datafactory.inputs.DataFlowStagingInfoArgs;
import com.pulumi.azurenative.datafactory.inputs.ExecuteDataFlowActivityTypePropertiesComputeArgs;
import com.pulumi.azurenative.datafactory.inputs.IntegrationRuntimeReferenceArgs;
import com.pulumi.azurenative.datafactory.inputs.LinkedServiceReferenceArgs;
import com.pulumi.azurenative.datafactory.inputs.UserPropertyArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Execute data flow activity.
 * 
 */
public final class ExecuteDataFlowActivityArgs extends com.pulumi.resources.ResourceArgs {

    public static final ExecuteDataFlowActivityArgs Empty = new ExecuteDataFlowActivityArgs();

    /**
     * Compute properties for data flow activity.
     * 
     */
    @Import(name="compute")
      private final @Nullable Output<ExecuteDataFlowActivityTypePropertiesComputeArgs> compute;

    public Output<ExecuteDataFlowActivityTypePropertiesComputeArgs> compute() {
        return this.compute == null ? Codegen.empty() : this.compute;
    }

    /**
     * Continue on error setting used for data flow execution. Enables processing to continue if a sink fails. Type: boolean (or Expression with resultType boolean)
     * 
     */
    @Import(name="continueOnError")
      private final @Nullable Output<Object> continueOnError;

    public Output<Object> continueOnError() {
        return this.continueOnError == null ? Codegen.empty() : this.continueOnError;
    }

    /**
     * Data flow reference.
     * 
     */
    @Import(name="dataFlow", required=true)
      private final Output<DataFlowReferenceArgs> dataFlow;

    public Output<DataFlowReferenceArgs> dataFlow() {
        return this.dataFlow;
    }

    /**
     * Activity depends on condition.
     * 
     */
    @Import(name="dependsOn")
      private final @Nullable Output<List<ActivityDependencyArgs>> dependsOn;

    public Output<List<ActivityDependencyArgs>> dependsOn() {
        return this.dependsOn == null ? Codegen.empty() : this.dependsOn;
    }

    /**
     * Activity description.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> description() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * The integration runtime reference.
     * 
     */
    @Import(name="integrationRuntime")
      private final @Nullable Output<IntegrationRuntimeReferenceArgs> integrationRuntime;

    public Output<IntegrationRuntimeReferenceArgs> integrationRuntime() {
        return this.integrationRuntime == null ? Codegen.empty() : this.integrationRuntime;
    }

    /**
     * Linked service reference.
     * 
     */
    @Import(name="linkedServiceName")
      private final @Nullable Output<LinkedServiceReferenceArgs> linkedServiceName;

    public Output<LinkedServiceReferenceArgs> linkedServiceName() {
        return this.linkedServiceName == null ? Codegen.empty() : this.linkedServiceName;
    }

    /**
     * Activity name.
     * 
     */
    @Import(name="name", required=true)
      private final Output<String> name;

    public Output<String> name() {
        return this.name;
    }

    /**
     * Activity policy.
     * 
     */
    @Import(name="policy")
      private final @Nullable Output<ActivityPolicyArgs> policy;

    public Output<ActivityPolicyArgs> policy() {
        return this.policy == null ? Codegen.empty() : this.policy;
    }

    /**
     * Concurrent run setting used for data flow execution. Allows sinks with the same save order to be processed concurrently. Type: boolean (or Expression with resultType boolean)
     * 
     */
    @Import(name="runConcurrently")
      private final @Nullable Output<Object> runConcurrently;

    public Output<Object> runConcurrently() {
        return this.runConcurrently == null ? Codegen.empty() : this.runConcurrently;
    }

    /**
     * Staging info for execute data flow activity.
     * 
     */
    @Import(name="staging")
      private final @Nullable Output<DataFlowStagingInfoArgs> staging;

    public Output<DataFlowStagingInfoArgs> staging() {
        return this.staging == null ? Codegen.empty() : this.staging;
    }

    /**
     * Trace level setting used for data flow monitoring output. Supported values are: 'coarse', 'fine', and 'none'. Type: string (or Expression with resultType string)
     * 
     */
    @Import(name="traceLevel")
      private final @Nullable Output<Object> traceLevel;

    public Output<Object> traceLevel() {
        return this.traceLevel == null ? Codegen.empty() : this.traceLevel;
    }

    /**
     * Type of activity.
     * Expected value is 'ExecuteDataFlow'.
     * 
     */
    @Import(name="type", required=true)
      private final Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    /**
     * Activity user properties.
     * 
     */
    @Import(name="userProperties")
      private final @Nullable Output<List<UserPropertyArgs>> userProperties;

    public Output<List<UserPropertyArgs>> userProperties() {
        return this.userProperties == null ? Codegen.empty() : this.userProperties;
    }

    public ExecuteDataFlowActivityArgs(
        @Nullable Output<ExecuteDataFlowActivityTypePropertiesComputeArgs> compute,
        @Nullable Output<Object> continueOnError,
        Output<DataFlowReferenceArgs> dataFlow,
        @Nullable Output<List<ActivityDependencyArgs>> dependsOn,
        @Nullable Output<String> description,
        @Nullable Output<IntegrationRuntimeReferenceArgs> integrationRuntime,
        @Nullable Output<LinkedServiceReferenceArgs> linkedServiceName,
        Output<String> name,
        @Nullable Output<ActivityPolicyArgs> policy,
        @Nullable Output<Object> runConcurrently,
        @Nullable Output<DataFlowStagingInfoArgs> staging,
        @Nullable Output<Object> traceLevel,
        Output<String> type,
        @Nullable Output<List<UserPropertyArgs>> userProperties) {
        this.compute = compute;
        this.continueOnError = continueOnError;
        this.dataFlow = Objects.requireNonNull(dataFlow, "expected parameter 'dataFlow' to be non-null");
        this.dependsOn = dependsOn;
        this.description = description;
        this.integrationRuntime = integrationRuntime;
        this.linkedServiceName = linkedServiceName;
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.policy = policy;
        this.runConcurrently = runConcurrently;
        this.staging = staging;
        this.traceLevel = traceLevel;
        this.type = Codegen.stringProp("type").output().arg(type).require();
        this.userProperties = userProperties;
    }

    private ExecuteDataFlowActivityArgs() {
        this.compute = Codegen.empty();
        this.continueOnError = Codegen.empty();
        this.dataFlow = Codegen.empty();
        this.dependsOn = Codegen.empty();
        this.description = Codegen.empty();
        this.integrationRuntime = Codegen.empty();
        this.linkedServiceName = Codegen.empty();
        this.name = Codegen.empty();
        this.policy = Codegen.empty();
        this.runConcurrently = Codegen.empty();
        this.staging = Codegen.empty();
        this.traceLevel = Codegen.empty();
        this.type = Codegen.empty();
        this.userProperties = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ExecuteDataFlowActivityArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<ExecuteDataFlowActivityTypePropertiesComputeArgs> compute;
        private @Nullable Output<Object> continueOnError;
        private Output<DataFlowReferenceArgs> dataFlow;
        private @Nullable Output<List<ActivityDependencyArgs>> dependsOn;
        private @Nullable Output<String> description;
        private @Nullable Output<IntegrationRuntimeReferenceArgs> integrationRuntime;
        private @Nullable Output<LinkedServiceReferenceArgs> linkedServiceName;
        private Output<String> name;
        private @Nullable Output<ActivityPolicyArgs> policy;
        private @Nullable Output<Object> runConcurrently;
        private @Nullable Output<DataFlowStagingInfoArgs> staging;
        private @Nullable Output<Object> traceLevel;
        private Output<String> type;
        private @Nullable Output<List<UserPropertyArgs>> userProperties;

        public Builder() {
    	      // Empty
        }

        public Builder(ExecuteDataFlowActivityArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.compute = defaults.compute;
    	      this.continueOnError = defaults.continueOnError;
    	      this.dataFlow = defaults.dataFlow;
    	      this.dependsOn = defaults.dependsOn;
    	      this.description = defaults.description;
    	      this.integrationRuntime = defaults.integrationRuntime;
    	      this.linkedServiceName = defaults.linkedServiceName;
    	      this.name = defaults.name;
    	      this.policy = defaults.policy;
    	      this.runConcurrently = defaults.runConcurrently;
    	      this.staging = defaults.staging;
    	      this.traceLevel = defaults.traceLevel;
    	      this.type = defaults.type;
    	      this.userProperties = defaults.userProperties;
        }

        public Builder compute(@Nullable Output<ExecuteDataFlowActivityTypePropertiesComputeArgs> compute) {
            this.compute = compute;
            return this;
        }
        public Builder compute(@Nullable ExecuteDataFlowActivityTypePropertiesComputeArgs compute) {
            this.compute = Codegen.ofNullable(compute);
            return this;
        }
        public Builder continueOnError(@Nullable Output<Object> continueOnError) {
            this.continueOnError = continueOnError;
            return this;
        }
        public Builder continueOnError(@Nullable Object continueOnError) {
            this.continueOnError = Codegen.ofNullable(continueOnError);
            return this;
        }
        public Builder dataFlow(Output<DataFlowReferenceArgs> dataFlow) {
            this.dataFlow = Objects.requireNonNull(dataFlow);
            return this;
        }
        public Builder dataFlow(DataFlowReferenceArgs dataFlow) {
            this.dataFlow = Output.of(Objects.requireNonNull(dataFlow));
            return this;
        }
        public Builder dependsOn(@Nullable Output<List<ActivityDependencyArgs>> dependsOn) {
            this.dependsOn = dependsOn;
            return this;
        }
        public Builder dependsOn(@Nullable List<ActivityDependencyArgs> dependsOn) {
            this.dependsOn = Codegen.ofNullable(dependsOn);
            return this;
        }
        public Builder dependsOn(ActivityDependencyArgs... dependsOn) {
            return dependsOn(List.of(dependsOn));
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder integrationRuntime(@Nullable Output<IntegrationRuntimeReferenceArgs> integrationRuntime) {
            this.integrationRuntime = integrationRuntime;
            return this;
        }
        public Builder integrationRuntime(@Nullable IntegrationRuntimeReferenceArgs integrationRuntime) {
            this.integrationRuntime = Codegen.ofNullable(integrationRuntime);
            return this;
        }
        public Builder linkedServiceName(@Nullable Output<LinkedServiceReferenceArgs> linkedServiceName) {
            this.linkedServiceName = linkedServiceName;
            return this;
        }
        public Builder linkedServiceName(@Nullable LinkedServiceReferenceArgs linkedServiceName) {
            this.linkedServiceName = Codegen.ofNullable(linkedServiceName);
            return this;
        }
        public Builder name(Output<String> name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder name(String name) {
            this.name = Output.of(Objects.requireNonNull(name));
            return this;
        }
        public Builder policy(@Nullable Output<ActivityPolicyArgs> policy) {
            this.policy = policy;
            return this;
        }
        public Builder policy(@Nullable ActivityPolicyArgs policy) {
            this.policy = Codegen.ofNullable(policy);
            return this;
        }
        public Builder runConcurrently(@Nullable Output<Object> runConcurrently) {
            this.runConcurrently = runConcurrently;
            return this;
        }
        public Builder runConcurrently(@Nullable Object runConcurrently) {
            this.runConcurrently = Codegen.ofNullable(runConcurrently);
            return this;
        }
        public Builder staging(@Nullable Output<DataFlowStagingInfoArgs> staging) {
            this.staging = staging;
            return this;
        }
        public Builder staging(@Nullable DataFlowStagingInfoArgs staging) {
            this.staging = Codegen.ofNullable(staging);
            return this;
        }
        public Builder traceLevel(@Nullable Output<Object> traceLevel) {
            this.traceLevel = traceLevel;
            return this;
        }
        public Builder traceLevel(@Nullable Object traceLevel) {
            this.traceLevel = Codegen.ofNullable(traceLevel);
            return this;
        }
        public Builder type(Output<String> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder type(String type) {
            this.type = Output.of(Objects.requireNonNull(type));
            return this;
        }
        public Builder userProperties(@Nullable Output<List<UserPropertyArgs>> userProperties) {
            this.userProperties = userProperties;
            return this;
        }
        public Builder userProperties(@Nullable List<UserPropertyArgs> userProperties) {
            this.userProperties = Codegen.ofNullable(userProperties);
            return this;
        }
        public Builder userProperties(UserPropertyArgs... userProperties) {
            return userProperties(List.of(userProperties));
        }        public ExecuteDataFlowActivityArgs build() {
            return new ExecuteDataFlowActivityArgs(compute, continueOnError, dataFlow, dependsOn, description, integrationRuntime, linkedServiceName, name, policy, runConcurrently, staging, traceLevel, type, userProperties);
        }
    }
}
