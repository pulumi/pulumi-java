// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.resources.inputs;

import com.pulumi.azurenative.resources.inputs.DebugSettingResponse;
import com.pulumi.azurenative.resources.inputs.DependencyResponse;
import com.pulumi.azurenative.resources.inputs.ErrorResponseResponse;
import com.pulumi.azurenative.resources.inputs.OnErrorDeploymentExtendedResponse;
import com.pulumi.azurenative.resources.inputs.ParametersLinkResponse;
import com.pulumi.azurenative.resources.inputs.ProviderResponse;
import com.pulumi.azurenative.resources.inputs.ResourceReferenceResponse;
import com.pulumi.azurenative.resources.inputs.TemplateLinkResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Deployment properties with additional details.
 * 
 */
public final class DeploymentPropertiesExtendedResponse extends com.pulumi.resources.InvokeArgs {

    public static final DeploymentPropertiesExtendedResponse Empty = new DeploymentPropertiesExtendedResponse();

    /**
     * The correlation ID of the deployment.
     * 
     */
    @Import(name="correlationId", required=true)
    private String correlationId;

    /**
     * @return The correlation ID of the deployment.
     * 
     */
    public String correlationId() {
        return this.correlationId;
    }

    /**
     * The debug setting of the deployment.
     * 
     */
    @Import(name="debugSetting", required=true)
    private DebugSettingResponse debugSetting;

    /**
     * @return The debug setting of the deployment.
     * 
     */
    public DebugSettingResponse debugSetting() {
        return this.debugSetting;
    }

    /**
     * The list of deployment dependencies.
     * 
     */
    @Import(name="dependencies", required=true)
    private List<DependencyResponse> dependencies;

    /**
     * @return The list of deployment dependencies.
     * 
     */
    public List<DependencyResponse> dependencies() {
        return this.dependencies;
    }

    /**
     * The duration of the template deployment.
     * 
     */
    @Import(name="duration", required=true)
    private String duration;

    /**
     * @return The duration of the template deployment.
     * 
     */
    public String duration() {
        return this.duration;
    }

    /**
     * The deployment error.
     * 
     */
    @Import(name="error", required=true)
    private ErrorResponseResponse error;

    /**
     * @return The deployment error.
     * 
     */
    public ErrorResponseResponse error() {
        return this.error;
    }

    /**
     * The deployment mode. Possible values are Incremental and Complete.
     * 
     */
    @Import(name="mode", required=true)
    private String mode;

    /**
     * @return The deployment mode. Possible values are Incremental and Complete.
     * 
     */
    public String mode() {
        return this.mode;
    }

    /**
     * The deployment on error behavior.
     * 
     */
    @Import(name="onErrorDeployment", required=true)
    private OnErrorDeploymentExtendedResponse onErrorDeployment;

    /**
     * @return The deployment on error behavior.
     * 
     */
    public OnErrorDeploymentExtendedResponse onErrorDeployment() {
        return this.onErrorDeployment;
    }

    /**
     * Array of provisioned resources.
     * 
     */
    @Import(name="outputResources", required=true)
    private List<ResourceReferenceResponse> outputResources;

    /**
     * @return Array of provisioned resources.
     * 
     */
    public List<ResourceReferenceResponse> outputResources() {
        return this.outputResources;
    }

    /**
     * Key/value pairs that represent deployment output.
     * 
     */
    @Import(name="outputs", required=true)
    private Object outputs;

    /**
     * @return Key/value pairs that represent deployment output.
     * 
     */
    public Object outputs() {
        return this.outputs;
    }

    /**
     * Deployment parameters.
     * 
     */
    @Import(name="parameters", required=true)
    private Object parameters;

    /**
     * @return Deployment parameters.
     * 
     */
    public Object parameters() {
        return this.parameters;
    }

    /**
     * The URI referencing the parameters.
     * 
     */
    @Import(name="parametersLink", required=true)
    private ParametersLinkResponse parametersLink;

    /**
     * @return The URI referencing the parameters.
     * 
     */
    public ParametersLinkResponse parametersLink() {
        return this.parametersLink;
    }

    /**
     * The list of resource providers needed for the deployment.
     * 
     */
    @Import(name="providers", required=true)
    private List<ProviderResponse> providers;

    /**
     * @return The list of resource providers needed for the deployment.
     * 
     */
    public List<ProviderResponse> providers() {
        return this.providers;
    }

    /**
     * Denotes the state of provisioning.
     * 
     */
    @Import(name="provisioningState", required=true)
    private String provisioningState;

    /**
     * @return Denotes the state of provisioning.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * The hash produced for the template.
     * 
     */
    @Import(name="templateHash", required=true)
    private String templateHash;

    /**
     * @return The hash produced for the template.
     * 
     */
    public String templateHash() {
        return this.templateHash;
    }

    /**
     * The URI referencing the template.
     * 
     */
    @Import(name="templateLink", required=true)
    private TemplateLinkResponse templateLink;

    /**
     * @return The URI referencing the template.
     * 
     */
    public TemplateLinkResponse templateLink() {
        return this.templateLink;
    }

    /**
     * The timestamp of the template deployment.
     * 
     */
    @Import(name="timestamp", required=true)
    private String timestamp;

    /**
     * @return The timestamp of the template deployment.
     * 
     */
    public String timestamp() {
        return this.timestamp;
    }

    /**
     * Array of validated resources.
     * 
     */
    @Import(name="validatedResources", required=true)
    private List<ResourceReferenceResponse> validatedResources;

    /**
     * @return Array of validated resources.
     * 
     */
    public List<ResourceReferenceResponse> validatedResources() {
        return this.validatedResources;
    }

    private DeploymentPropertiesExtendedResponse() {}

    private DeploymentPropertiesExtendedResponse(DeploymentPropertiesExtendedResponse $) {
        this.correlationId = $.correlationId;
        this.debugSetting = $.debugSetting;
        this.dependencies = $.dependencies;
        this.duration = $.duration;
        this.error = $.error;
        this.mode = $.mode;
        this.onErrorDeployment = $.onErrorDeployment;
        this.outputResources = $.outputResources;
        this.outputs = $.outputs;
        this.parameters = $.parameters;
        this.parametersLink = $.parametersLink;
        this.providers = $.providers;
        this.provisioningState = $.provisioningState;
        this.templateHash = $.templateHash;
        this.templateLink = $.templateLink;
        this.timestamp = $.timestamp;
        this.validatedResources = $.validatedResources;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeploymentPropertiesExtendedResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeploymentPropertiesExtendedResponse $;

        public Builder() {
            $ = new DeploymentPropertiesExtendedResponse();
        }

        public Builder(DeploymentPropertiesExtendedResponse defaults) {
            $ = new DeploymentPropertiesExtendedResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param correlationId The correlation ID of the deployment.
         * 
         * @return builder
         * 
         */
        public Builder correlationId(String correlationId) {
            $.correlationId = correlationId;
            return this;
        }

        /**
         * @param debugSetting The debug setting of the deployment.
         * 
         * @return builder
         * 
         */
        public Builder debugSetting(DebugSettingResponse debugSetting) {
            $.debugSetting = debugSetting;
            return this;
        }

        /**
         * @param dependencies The list of deployment dependencies.
         * 
         * @return builder
         * 
         */
        public Builder dependencies(List<DependencyResponse> dependencies) {
            $.dependencies = dependencies;
            return this;
        }

        /**
         * @param dependencies The list of deployment dependencies.
         * 
         * @return builder
         * 
         */
        public Builder dependencies(DependencyResponse... dependencies) {
            return dependencies(List.of(dependencies));
        }

        /**
         * @param duration The duration of the template deployment.
         * 
         * @return builder
         * 
         */
        public Builder duration(String duration) {
            $.duration = duration;
            return this;
        }

        /**
         * @param error The deployment error.
         * 
         * @return builder
         * 
         */
        public Builder error(ErrorResponseResponse error) {
            $.error = error;
            return this;
        }

        /**
         * @param mode The deployment mode. Possible values are Incremental and Complete.
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param onErrorDeployment The deployment on error behavior.
         * 
         * @return builder
         * 
         */
        public Builder onErrorDeployment(OnErrorDeploymentExtendedResponse onErrorDeployment) {
            $.onErrorDeployment = onErrorDeployment;
            return this;
        }

        /**
         * @param outputResources Array of provisioned resources.
         * 
         * @return builder
         * 
         */
        public Builder outputResources(List<ResourceReferenceResponse> outputResources) {
            $.outputResources = outputResources;
            return this;
        }

        /**
         * @param outputResources Array of provisioned resources.
         * 
         * @return builder
         * 
         */
        public Builder outputResources(ResourceReferenceResponse... outputResources) {
            return outputResources(List.of(outputResources));
        }

        /**
         * @param outputs Key/value pairs that represent deployment output.
         * 
         * @return builder
         * 
         */
        public Builder outputs(Object outputs) {
            $.outputs = outputs;
            return this;
        }

        /**
         * @param parameters Deployment parameters.
         * 
         * @return builder
         * 
         */
        public Builder parameters(Object parameters) {
            $.parameters = parameters;
            return this;
        }

        /**
         * @param parametersLink The URI referencing the parameters.
         * 
         * @return builder
         * 
         */
        public Builder parametersLink(ParametersLinkResponse parametersLink) {
            $.parametersLink = parametersLink;
            return this;
        }

        /**
         * @param providers The list of resource providers needed for the deployment.
         * 
         * @return builder
         * 
         */
        public Builder providers(List<ProviderResponse> providers) {
            $.providers = providers;
            return this;
        }

        /**
         * @param providers The list of resource providers needed for the deployment.
         * 
         * @return builder
         * 
         */
        public Builder providers(ProviderResponse... providers) {
            return providers(List.of(providers));
        }

        /**
         * @param provisioningState Denotes the state of provisioning.
         * 
         * @return builder
         * 
         */
        public Builder provisioningState(String provisioningState) {
            $.provisioningState = provisioningState;
            return this;
        }

        /**
         * @param templateHash The hash produced for the template.
         * 
         * @return builder
         * 
         */
        public Builder templateHash(String templateHash) {
            $.templateHash = templateHash;
            return this;
        }

        /**
         * @param templateLink The URI referencing the template.
         * 
         * @return builder
         * 
         */
        public Builder templateLink(TemplateLinkResponse templateLink) {
            $.templateLink = templateLink;
            return this;
        }

        /**
         * @param timestamp The timestamp of the template deployment.
         * 
         * @return builder
         * 
         */
        public Builder timestamp(String timestamp) {
            $.timestamp = timestamp;
            return this;
        }

        /**
         * @param validatedResources Array of validated resources.
         * 
         * @return builder
         * 
         */
        public Builder validatedResources(List<ResourceReferenceResponse> validatedResources) {
            $.validatedResources = validatedResources;
            return this;
        }

        /**
         * @param validatedResources Array of validated resources.
         * 
         * @return builder
         * 
         */
        public Builder validatedResources(ResourceReferenceResponse... validatedResources) {
            return validatedResources(List.of(validatedResources));
        }

        public DeploymentPropertiesExtendedResponse build() {
            $.correlationId = Objects.requireNonNull($.correlationId, "expected parameter 'correlationId' to be non-null");
            $.debugSetting = Objects.requireNonNull($.debugSetting, "expected parameter 'debugSetting' to be non-null");
            $.dependencies = Objects.requireNonNull($.dependencies, "expected parameter 'dependencies' to be non-null");
            $.duration = Objects.requireNonNull($.duration, "expected parameter 'duration' to be non-null");
            $.error = Objects.requireNonNull($.error, "expected parameter 'error' to be non-null");
            $.mode = Objects.requireNonNull($.mode, "expected parameter 'mode' to be non-null");
            $.onErrorDeployment = Objects.requireNonNull($.onErrorDeployment, "expected parameter 'onErrorDeployment' to be non-null");
            $.outputResources = Objects.requireNonNull($.outputResources, "expected parameter 'outputResources' to be non-null");
            $.outputs = Objects.requireNonNull($.outputs, "expected parameter 'outputs' to be non-null");
            $.parameters = Objects.requireNonNull($.parameters, "expected parameter 'parameters' to be non-null");
            $.parametersLink = Objects.requireNonNull($.parametersLink, "expected parameter 'parametersLink' to be non-null");
            $.providers = Objects.requireNonNull($.providers, "expected parameter 'providers' to be non-null");
            $.provisioningState = Objects.requireNonNull($.provisioningState, "expected parameter 'provisioningState' to be non-null");
            $.templateHash = Objects.requireNonNull($.templateHash, "expected parameter 'templateHash' to be non-null");
            $.templateLink = Objects.requireNonNull($.templateLink, "expected parameter 'templateLink' to be non-null");
            $.timestamp = Objects.requireNonNull($.timestamp, "expected parameter 'timestamp' to be non-null");
            $.validatedResources = Objects.requireNonNull($.validatedResources, "expected parameter 'validatedResources' to be non-null");
            return $;
        }
    }

}
