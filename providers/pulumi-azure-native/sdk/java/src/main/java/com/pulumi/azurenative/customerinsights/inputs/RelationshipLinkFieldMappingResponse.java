// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.customerinsights.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The fields mapping for Relationships.
 * 
 */
public final class RelationshipLinkFieldMappingResponse extends com.pulumi.resources.InvokeArgs {

    public static final RelationshipLinkFieldMappingResponse Empty = new RelationshipLinkFieldMappingResponse();

    /**
     * The field name on the Interaction Type.
     * 
     */
    @Import(name="interactionFieldName", required=true)
    private String interactionFieldName;

    /**
     * @return The field name on the Interaction Type.
     * 
     */
    public String interactionFieldName() {
        return this.interactionFieldName;
    }

    /**
     * Link type.
     * 
     */
    @Import(name="linkType")
    private @Nullable String linkType;

    /**
     * @return Link type.
     * 
     */
    public Optional<String> linkType() {
        return Optional.ofNullable(this.linkType);
    }

    /**
     * The field name on the Relationship metadata.
     * 
     */
    @Import(name="relationshipFieldName", required=true)
    private String relationshipFieldName;

    /**
     * @return The field name on the Relationship metadata.
     * 
     */
    public String relationshipFieldName() {
        return this.relationshipFieldName;
    }

    private RelationshipLinkFieldMappingResponse() {}

    private RelationshipLinkFieldMappingResponse(RelationshipLinkFieldMappingResponse $) {
        this.interactionFieldName = $.interactionFieldName;
        this.linkType = $.linkType;
        this.relationshipFieldName = $.relationshipFieldName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RelationshipLinkFieldMappingResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RelationshipLinkFieldMappingResponse $;

        public Builder() {
            $ = new RelationshipLinkFieldMappingResponse();
        }

        public Builder(RelationshipLinkFieldMappingResponse defaults) {
            $ = new RelationshipLinkFieldMappingResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param interactionFieldName The field name on the Interaction Type.
         * 
         * @return builder
         * 
         */
        public Builder interactionFieldName(String interactionFieldName) {
            $.interactionFieldName = interactionFieldName;
            return this;
        }

        /**
         * @param linkType Link type.
         * 
         * @return builder
         * 
         */
        public Builder linkType(@Nullable String linkType) {
            $.linkType = linkType;
            return this;
        }

        /**
         * @param relationshipFieldName The field name on the Relationship metadata.
         * 
         * @return builder
         * 
         */
        public Builder relationshipFieldName(String relationshipFieldName) {
            $.relationshipFieldName = relationshipFieldName;
            return this;
        }

        public RelationshipLinkFieldMappingResponse build() {
            $.interactionFieldName = Objects.requireNonNull($.interactionFieldName, "expected parameter 'interactionFieldName' to be non-null");
            $.relationshipFieldName = Objects.requireNonNull($.relationshipFieldName, "expected parameter 'relationshipFieldName' to be non-null");
            return $;
        }
    }

}
