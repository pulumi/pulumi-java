// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.media.outputs;

import com.pulumi.azurenative.media.outputs.H265LayerResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class H265VideoResponse {
    /**
     * @return Tells the encoder how to choose its encoding settings.  Quality will provide for a higher compression ratio but at a higher cost and longer compute time.  Speed will produce a relatively larger file but is faster and more economical. The default value is Balanced.
     * 
     */
    private final @Nullable String complexity;
    /**
     * @return The distance between two key frames. The value should be non-zero in the range [0.5, 20] seconds, specified in ISO 8601 format. The default is 2 seconds(PT2S). Note that this setting is ignored if VideoSyncMode.Passthrough is set, where the KeyFrameInterval value will follow the input source setting.
     * 
     */
    private final @Nullable String keyFrameInterval;
    /**
     * @return An optional label for the codec. The label can be used to control muxing behavior.
     * 
     */
    private final @Nullable String label;
    /**
     * @return The collection of output H.265 layers to be produced by the encoder.
     * 
     */
    private final @Nullable List<H265LayerResponse> layers;
    /**
     * @return The discriminator for derived types.
     * Expected value is &#39;#Microsoft.Media.H265Video&#39;.
     * 
     */
    private final String odataType;
    /**
     * @return Specifies whether or not the encoder should insert key frames at scene changes. If not specified, the default is false. This flag should be set to true only when the encoder is being configured to produce a single output video.
     * 
     */
    private final @Nullable Boolean sceneChangeDetection;
    /**
     * @return The resizing mode - how the input video will be resized to fit the desired output resolution(s). Default is AutoSize
     * 
     */
    private final @Nullable String stretchMode;
    /**
     * @return The Video Sync Mode
     * 
     */
    private final @Nullable String syncMode;

    @CustomType.Constructor
    private H265VideoResponse(
        @CustomType.Parameter("complexity") @Nullable String complexity,
        @CustomType.Parameter("keyFrameInterval") @Nullable String keyFrameInterval,
        @CustomType.Parameter("label") @Nullable String label,
        @CustomType.Parameter("layers") @Nullable List<H265LayerResponse> layers,
        @CustomType.Parameter("odataType") String odataType,
        @CustomType.Parameter("sceneChangeDetection") @Nullable Boolean sceneChangeDetection,
        @CustomType.Parameter("stretchMode") @Nullable String stretchMode,
        @CustomType.Parameter("syncMode") @Nullable String syncMode) {
        this.complexity = complexity;
        this.keyFrameInterval = keyFrameInterval;
        this.label = label;
        this.layers = layers;
        this.odataType = odataType;
        this.sceneChangeDetection = sceneChangeDetection;
        this.stretchMode = stretchMode;
        this.syncMode = syncMode;
    }

    /**
     * @return Tells the encoder how to choose its encoding settings.  Quality will provide for a higher compression ratio but at a higher cost and longer compute time.  Speed will produce a relatively larger file but is faster and more economical. The default value is Balanced.
     * 
     */
    public Optional<String> complexity() {
        return Optional.ofNullable(this.complexity);
    }
    /**
     * @return The distance between two key frames. The value should be non-zero in the range [0.5, 20] seconds, specified in ISO 8601 format. The default is 2 seconds(PT2S). Note that this setting is ignored if VideoSyncMode.Passthrough is set, where the KeyFrameInterval value will follow the input source setting.
     * 
     */
    public Optional<String> keyFrameInterval() {
        return Optional.ofNullable(this.keyFrameInterval);
    }
    /**
     * @return An optional label for the codec. The label can be used to control muxing behavior.
     * 
     */
    public Optional<String> label() {
        return Optional.ofNullable(this.label);
    }
    /**
     * @return The collection of output H.265 layers to be produced by the encoder.
     * 
     */
    public List<H265LayerResponse> layers() {
        return this.layers == null ? List.of() : this.layers;
    }
    /**
     * @return The discriminator for derived types.
     * Expected value is &#39;#Microsoft.Media.H265Video&#39;.
     * 
     */
    public String odataType() {
        return this.odataType;
    }
    /**
     * @return Specifies whether or not the encoder should insert key frames at scene changes. If not specified, the default is false. This flag should be set to true only when the encoder is being configured to produce a single output video.
     * 
     */
    public Optional<Boolean> sceneChangeDetection() {
        return Optional.ofNullable(this.sceneChangeDetection);
    }
    /**
     * @return The resizing mode - how the input video will be resized to fit the desired output resolution(s). Default is AutoSize
     * 
     */
    public Optional<String> stretchMode() {
        return Optional.ofNullable(this.stretchMode);
    }
    /**
     * @return The Video Sync Mode
     * 
     */
    public Optional<String> syncMode() {
        return Optional.ofNullable(this.syncMode);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(H265VideoResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String complexity;
        private @Nullable String keyFrameInterval;
        private @Nullable String label;
        private @Nullable List<H265LayerResponse> layers;
        private String odataType;
        private @Nullable Boolean sceneChangeDetection;
        private @Nullable String stretchMode;
        private @Nullable String syncMode;

        public Builder() {
    	      // Empty
        }

        public Builder(H265VideoResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.complexity = defaults.complexity;
    	      this.keyFrameInterval = defaults.keyFrameInterval;
    	      this.label = defaults.label;
    	      this.layers = defaults.layers;
    	      this.odataType = defaults.odataType;
    	      this.sceneChangeDetection = defaults.sceneChangeDetection;
    	      this.stretchMode = defaults.stretchMode;
    	      this.syncMode = defaults.syncMode;
        }

        public Builder complexity(@Nullable String complexity) {
            this.complexity = complexity;
            return this;
        }
        public Builder keyFrameInterval(@Nullable String keyFrameInterval) {
            this.keyFrameInterval = keyFrameInterval;
            return this;
        }
        public Builder label(@Nullable String label) {
            this.label = label;
            return this;
        }
        public Builder layers(@Nullable List<H265LayerResponse> layers) {
            this.layers = layers;
            return this;
        }
        public Builder layers(H265LayerResponse... layers) {
            return layers(List.of(layers));
        }
        public Builder odataType(String odataType) {
            this.odataType = Objects.requireNonNull(odataType);
            return this;
        }
        public Builder sceneChangeDetection(@Nullable Boolean sceneChangeDetection) {
            this.sceneChangeDetection = sceneChangeDetection;
            return this;
        }
        public Builder stretchMode(@Nullable String stretchMode) {
            this.stretchMode = stretchMode;
            return this;
        }
        public Builder syncMode(@Nullable String syncMode) {
            this.syncMode = syncMode;
            return this;
        }        public H265VideoResponse build() {
            return new H265VideoResponse(complexity, keyFrameInterval, label, layers, odataType, sceneChangeDetection, stretchMode, syncMode);
        }
    }
}
