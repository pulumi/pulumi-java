// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.healthcareapis.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The settings for the CORS configuration of the service instance.
 * 
 */
public final class FhirServiceCorsConfigurationResponse extends com.pulumi.resources.InvokeArgs {

    public static final FhirServiceCorsConfigurationResponse Empty = new FhirServiceCorsConfigurationResponse();

    /**
     * If credentials are allowed via CORS.
     * 
     */
    @Import(name="allowCredentials")
    private @Nullable Boolean allowCredentials;

    /**
     * @return If credentials are allowed via CORS.
     * 
     */
    public Optional<Boolean> allowCredentials() {
        return Optional.ofNullable(this.allowCredentials);
    }

    /**
     * The headers to be allowed via CORS.
     * 
     */
    @Import(name="headers")
    private @Nullable List<String> headers;

    /**
     * @return The headers to be allowed via CORS.
     * 
     */
    public Optional<List<String>> headers() {
        return Optional.ofNullable(this.headers);
    }

    /**
     * The max age to be allowed via CORS.
     * 
     */
    @Import(name="maxAge")
    private @Nullable Integer maxAge;

    /**
     * @return The max age to be allowed via CORS.
     * 
     */
    public Optional<Integer> maxAge() {
        return Optional.ofNullable(this.maxAge);
    }

    /**
     * The methods to be allowed via CORS.
     * 
     */
    @Import(name="methods")
    private @Nullable List<String> methods;

    /**
     * @return The methods to be allowed via CORS.
     * 
     */
    public Optional<List<String>> methods() {
        return Optional.ofNullable(this.methods);
    }

    /**
     * The origins to be allowed via CORS.
     * 
     */
    @Import(name="origins")
    private @Nullable List<String> origins;

    /**
     * @return The origins to be allowed via CORS.
     * 
     */
    public Optional<List<String>> origins() {
        return Optional.ofNullable(this.origins);
    }

    private FhirServiceCorsConfigurationResponse() {}

    private FhirServiceCorsConfigurationResponse(FhirServiceCorsConfigurationResponse $) {
        this.allowCredentials = $.allowCredentials;
        this.headers = $.headers;
        this.maxAge = $.maxAge;
        this.methods = $.methods;
        this.origins = $.origins;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FhirServiceCorsConfigurationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FhirServiceCorsConfigurationResponse $;

        public Builder() {
            $ = new FhirServiceCorsConfigurationResponse();
        }

        public Builder(FhirServiceCorsConfigurationResponse defaults) {
            $ = new FhirServiceCorsConfigurationResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowCredentials If credentials are allowed via CORS.
         * 
         * @return builder
         * 
         */
        public Builder allowCredentials(@Nullable Boolean allowCredentials) {
            $.allowCredentials = allowCredentials;
            return this;
        }

        /**
         * @param headers The headers to be allowed via CORS.
         * 
         * @return builder
         * 
         */
        public Builder headers(@Nullable List<String> headers) {
            $.headers = headers;
            return this;
        }

        /**
         * @param headers The headers to be allowed via CORS.
         * 
         * @return builder
         * 
         */
        public Builder headers(String... headers) {
            return headers(List.of(headers));
        }

        /**
         * @param maxAge The max age to be allowed via CORS.
         * 
         * @return builder
         * 
         */
        public Builder maxAge(@Nullable Integer maxAge) {
            $.maxAge = maxAge;
            return this;
        }

        /**
         * @param methods The methods to be allowed via CORS.
         * 
         * @return builder
         * 
         */
        public Builder methods(@Nullable List<String> methods) {
            $.methods = methods;
            return this;
        }

        /**
         * @param methods The methods to be allowed via CORS.
         * 
         * @return builder
         * 
         */
        public Builder methods(String... methods) {
            return methods(List.of(methods));
        }

        /**
         * @param origins The origins to be allowed via CORS.
         * 
         * @return builder
         * 
         */
        public Builder origins(@Nullable List<String> origins) {
            $.origins = origins;
            return this;
        }

        /**
         * @param origins The origins to be allowed via CORS.
         * 
         * @return builder
         * 
         */
        public Builder origins(String... origins) {
            return origins(List.of(origins));
        }

        public FhirServiceCorsConfigurationResponse build() {
            return $;
        }
    }

}
