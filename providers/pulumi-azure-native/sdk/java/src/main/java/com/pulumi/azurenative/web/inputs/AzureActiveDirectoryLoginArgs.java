// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.web.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The configuration settings of the Azure Active Directory login flow.
 * 
 */
public final class AzureActiveDirectoryLoginArgs extends com.pulumi.resources.ResourceArgs {

    public static final AzureActiveDirectoryLoginArgs Empty = new AzureActiveDirectoryLoginArgs();

    /**
     * &lt;code&gt;true&lt;/code&gt; if the www-authenticate provider should be omitted from the request; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    @Import(name="disableWWWAuthenticate")
    private @Nullable Output<Boolean> disableWWWAuthenticate;

    /**
     * @return &lt;code&gt;true&lt;/code&gt; if the www-authenticate provider should be omitted from the request; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    public Optional<Output<Boolean>> disableWWWAuthenticate() {
        return Optional.ofNullable(this.disableWWWAuthenticate);
    }

    /**
     * Login parameters to send to the OpenID Connect authorization endpoint when
     * a user logs in. Each parameter must be in the form &#34;key=value&#34;.
     * 
     */
    @Import(name="loginParameters")
    private @Nullable Output<List<String>> loginParameters;

    /**
     * @return Login parameters to send to the OpenID Connect authorization endpoint when
     * a user logs in. Each parameter must be in the form &#34;key=value&#34;.
     * 
     */
    public Optional<Output<List<String>>> loginParameters() {
        return Optional.ofNullable(this.loginParameters);
    }

    private AzureActiveDirectoryLoginArgs() {}

    private AzureActiveDirectoryLoginArgs(AzureActiveDirectoryLoginArgs $) {
        this.disableWWWAuthenticate = $.disableWWWAuthenticate;
        this.loginParameters = $.loginParameters;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AzureActiveDirectoryLoginArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AzureActiveDirectoryLoginArgs $;

        public Builder() {
            $ = new AzureActiveDirectoryLoginArgs();
        }

        public Builder(AzureActiveDirectoryLoginArgs defaults) {
            $ = new AzureActiveDirectoryLoginArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param disableWWWAuthenticate &lt;code&gt;true&lt;/code&gt; if the www-authenticate provider should be omitted from the request; otherwise, &lt;code&gt;false&lt;/code&gt;.
         * 
         * @return builder
         * 
         */
        public Builder disableWWWAuthenticate(@Nullable Output<Boolean> disableWWWAuthenticate) {
            $.disableWWWAuthenticate = disableWWWAuthenticate;
            return this;
        }

        /**
         * @param disableWWWAuthenticate &lt;code&gt;true&lt;/code&gt; if the www-authenticate provider should be omitted from the request; otherwise, &lt;code&gt;false&lt;/code&gt;.
         * 
         * @return builder
         * 
         */
        public Builder disableWWWAuthenticate(Boolean disableWWWAuthenticate) {
            return disableWWWAuthenticate(Output.of(disableWWWAuthenticate));
        }

        /**
         * @param loginParameters Login parameters to send to the OpenID Connect authorization endpoint when
         * a user logs in. Each parameter must be in the form &#34;key=value&#34;.
         * 
         * @return builder
         * 
         */
        public Builder loginParameters(@Nullable Output<List<String>> loginParameters) {
            $.loginParameters = loginParameters;
            return this;
        }

        /**
         * @param loginParameters Login parameters to send to the OpenID Connect authorization endpoint when
         * a user logs in. Each parameter must be in the form &#34;key=value&#34;.
         * 
         * @return builder
         * 
         */
        public Builder loginParameters(List<String> loginParameters) {
            return loginParameters(Output.of(loginParameters));
        }

        /**
         * @param loginParameters Login parameters to send to the OpenID Connect authorization endpoint when
         * a user logs in. Each parameter must be in the form &#34;key=value&#34;.
         * 
         * @return builder
         * 
         */
        public Builder loginParameters(String... loginParameters) {
            return loginParameters(List.of(loginParameters));
        }

        public AzureActiveDirectoryLoginArgs build() {
            return $;
        }
    }

}
