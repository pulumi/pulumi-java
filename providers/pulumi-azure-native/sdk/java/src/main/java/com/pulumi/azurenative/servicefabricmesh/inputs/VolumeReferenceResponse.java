// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.servicefabricmesh.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Describes a reference to a volume resource.
 * 
 */
public final class VolumeReferenceResponse extends com.pulumi.resources.InvokeArgs {

    public static final VolumeReferenceResponse Empty = new VolumeReferenceResponse();

    /**
     * The path within the container at which the volume should be mounted. Only valid path characters are allowed.
     * 
     */
    @Import(name="destinationPath", required=true)
    private String destinationPath;

    /**
     * @return The path within the container at which the volume should be mounted. Only valid path characters are allowed.
     * 
     */
    public String destinationPath() {
        return this.destinationPath;
    }

    /**
     * Name of the volume being referenced.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return Name of the volume being referenced.
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * The flag indicating whether the volume is read only. Default is &#39;false&#39;.
     * 
     */
    @Import(name="readOnly")
    private @Nullable Boolean readOnly;

    /**
     * @return The flag indicating whether the volume is read only. Default is &#39;false&#39;.
     * 
     */
    public Optional<Boolean> readOnly() {
        return Optional.ofNullable(this.readOnly);
    }

    private VolumeReferenceResponse() {}

    private VolumeReferenceResponse(VolumeReferenceResponse $) {
        this.destinationPath = $.destinationPath;
        this.name = $.name;
        this.readOnly = $.readOnly;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VolumeReferenceResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VolumeReferenceResponse $;

        public Builder() {
            $ = new VolumeReferenceResponse();
        }

        public Builder(VolumeReferenceResponse defaults) {
            $ = new VolumeReferenceResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param destinationPath The path within the container at which the volume should be mounted. Only valid path characters are allowed.
         * 
         * @return builder
         * 
         */
        public Builder destinationPath(String destinationPath) {
            $.destinationPath = destinationPath;
            return this;
        }

        /**
         * @param name Name of the volume being referenced.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param readOnly The flag indicating whether the volume is read only. Default is &#39;false&#39;.
         * 
         * @return builder
         * 
         */
        public Builder readOnly(@Nullable Boolean readOnly) {
            $.readOnly = readOnly;
            return this;
        }

        public VolumeReferenceResponse build() {
            $.destinationPath = Objects.requireNonNull($.destinationPath, "expected parameter 'destinationPath' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            return $;
        }
    }

}
