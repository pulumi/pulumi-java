// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.apimanagement.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * API OAuth2 Authentication settings details.
 * 
 */
public final class OpenIdAuthenticationSettingsContractResponse extends com.pulumi.resources.InvokeArgs {

    public static final OpenIdAuthenticationSettingsContractResponse Empty = new OpenIdAuthenticationSettingsContractResponse();

    /**
     * How to send token to the server.
     * 
     */
    @Import(name="bearerTokenSendingMethods")
    private @Nullable List<String> bearerTokenSendingMethods;

    /**
     * @return How to send token to the server.
     * 
     */
    public Optional<List<String>> bearerTokenSendingMethods() {
        return Optional.ofNullable(this.bearerTokenSendingMethods);
    }

    /**
     * OAuth authorization server identifier.
     * 
     */
    @Import(name="openidProviderId")
    private @Nullable String openidProviderId;

    /**
     * @return OAuth authorization server identifier.
     * 
     */
    public Optional<String> openidProviderId() {
        return Optional.ofNullable(this.openidProviderId);
    }

    private OpenIdAuthenticationSettingsContractResponse() {}

    private OpenIdAuthenticationSettingsContractResponse(OpenIdAuthenticationSettingsContractResponse $) {
        this.bearerTokenSendingMethods = $.bearerTokenSendingMethods;
        this.openidProviderId = $.openidProviderId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OpenIdAuthenticationSettingsContractResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OpenIdAuthenticationSettingsContractResponse $;

        public Builder() {
            $ = new OpenIdAuthenticationSettingsContractResponse();
        }

        public Builder(OpenIdAuthenticationSettingsContractResponse defaults) {
            $ = new OpenIdAuthenticationSettingsContractResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param bearerTokenSendingMethods How to send token to the server.
         * 
         * @return builder
         * 
         */
        public Builder bearerTokenSendingMethods(@Nullable List<String> bearerTokenSendingMethods) {
            $.bearerTokenSendingMethods = bearerTokenSendingMethods;
            return this;
        }

        /**
         * @param bearerTokenSendingMethods How to send token to the server.
         * 
         * @return builder
         * 
         */
        public Builder bearerTokenSendingMethods(String... bearerTokenSendingMethods) {
            return bearerTokenSendingMethods(List.of(bearerTokenSendingMethods));
        }

        /**
         * @param openidProviderId OAuth authorization server identifier.
         * 
         * @return builder
         * 
         */
        public Builder openidProviderId(@Nullable String openidProviderId) {
            $.openidProviderId = openidProviderId;
            return this;
        }

        public OpenIdAuthenticationSettingsContractResponse build() {
            return $;
        }
    }

}
