// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.media.inputs;

import com.pulumi.azurenative.media.inputs.AacAudioArgs;
import com.pulumi.azurenative.media.inputs.AudioArgs;
import com.pulumi.azurenative.media.inputs.CopyAudioArgs;
import com.pulumi.azurenative.media.inputs.CopyVideoArgs;
import com.pulumi.azurenative.media.inputs.FiltersArgs;
import com.pulumi.azurenative.media.inputs.H264VideoArgs;
import com.pulumi.azurenative.media.inputs.H265VideoArgs;
import com.pulumi.azurenative.media.inputs.ImageArgs;
import com.pulumi.azurenative.media.inputs.ImageFormatArgs;
import com.pulumi.azurenative.media.inputs.JpgFormatArgs;
import com.pulumi.azurenative.media.inputs.JpgImageArgs;
import com.pulumi.azurenative.media.inputs.Mp4FormatArgs;
import com.pulumi.azurenative.media.inputs.MultiBitrateFormatArgs;
import com.pulumi.azurenative.media.inputs.PngFormatArgs;
import com.pulumi.azurenative.media.inputs.PngImageArgs;
import com.pulumi.azurenative.media.inputs.TransportStreamFormatArgs;
import com.pulumi.azurenative.media.inputs.VideoArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Describes all the settings to be used when encoding the input video with the Standard Encoder.
 * 
 */
public final class StandardEncoderPresetArgs extends com.pulumi.resources.ResourceArgs {

    public static final StandardEncoderPresetArgs Empty = new StandardEncoderPresetArgs();

    /**
     * The list of codecs to be used when encoding the input video.
     * 
     */
    @Import(name="codecs", required=true)
      private final Output<List<Object>> codecs;

    public Output<List<Object>> codecs() {
        return this.codecs;
    }

    /**
     * One or more filtering operations that are applied to the input media before encoding.
     * 
     */
    @Import(name="filters")
      private final @Nullable Output<FiltersArgs> filters;

    public Output<FiltersArgs> filters() {
        return this.filters == null ? Codegen.empty() : this.filters;
    }

    /**
     * The list of outputs to be produced by the encoder.
     * 
     */
    @Import(name="formats", required=true)
      private final Output<List<Object>> formats;

    public Output<List<Object>> formats() {
        return this.formats;
    }

    /**
     * The discriminator for derived types.
     * Expected value is &#39;#Microsoft.Media.StandardEncoderPreset&#39;.
     * 
     */
    @Import(name="odataType", required=true)
      private final Output<String> odataType;

    public Output<String> odataType() {
        return this.odataType;
    }

    public StandardEncoderPresetArgs(
        Output<List<Object>> codecs,
        @Nullable Output<FiltersArgs> filters,
        Output<List<Object>> formats,
        Output<String> odataType) {
        this.codecs = Objects.requireNonNull(codecs, "expected parameter 'codecs' to be non-null");
        this.filters = filters;
        this.formats = Objects.requireNonNull(formats, "expected parameter 'formats' to be non-null");
        this.odataType = Codegen.stringProp("odataType").output().arg(odataType).require();
    }

    private StandardEncoderPresetArgs() {
        this.codecs = Codegen.empty();
        this.filters = Codegen.empty();
        this.formats = Codegen.empty();
        this.odataType = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(StandardEncoderPresetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<List<Object>> codecs;
        private @Nullable Output<FiltersArgs> filters;
        private Output<List<Object>> formats;
        private Output<String> odataType;

        public Builder() {
    	      // Empty
        }

        public Builder(StandardEncoderPresetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.codecs = defaults.codecs;
    	      this.filters = defaults.filters;
    	      this.formats = defaults.formats;
    	      this.odataType = defaults.odataType;
        }

        public Builder codecs(Output<List<Object>> codecs) {
            this.codecs = Objects.requireNonNull(codecs);
            return this;
        }
        public Builder codecs(List<Object> codecs) {
            this.codecs = Output.of(Objects.requireNonNull(codecs));
            return this;
        }
        public Builder codecs(Object... codecs) {
            return codecs(List.of(codecs));
        }
        public Builder filters(@Nullable Output<FiltersArgs> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(@Nullable FiltersArgs filters) {
            this.filters = Codegen.ofNullable(filters);
            return this;
        }
        public Builder formats(Output<List<Object>> formats) {
            this.formats = Objects.requireNonNull(formats);
            return this;
        }
        public Builder formats(List<Object> formats) {
            this.formats = Output.of(Objects.requireNonNull(formats));
            return this;
        }
        public Builder formats(Object... formats) {
            return formats(List.of(formats));
        }
        public Builder odataType(Output<String> odataType) {
            this.odataType = Objects.requireNonNull(odataType);
            return this;
        }
        public Builder odataType(String odataType) {
            this.odataType = Output.of(Objects.requireNonNull(odataType));
            return this;
        }        public StandardEncoderPresetArgs build() {
            return new StandardEncoderPresetArgs(codecs, filters, formats, odataType);
        }
    }
}
