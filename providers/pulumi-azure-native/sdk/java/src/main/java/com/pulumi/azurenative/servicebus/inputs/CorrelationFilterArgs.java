// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.servicebus.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Represents the correlation filter expression.
 * 
 */
public final class CorrelationFilterArgs extends com.pulumi.resources.ResourceArgs {

    public static final CorrelationFilterArgs Empty = new CorrelationFilterArgs();

    /**
     * Content type of the message.
     * 
     */
    @Import(name="contentType")
      private final @Nullable Output<String> contentType;

    public Output<String> contentType() {
        return this.contentType == null ? Codegen.empty() : this.contentType;
    }

    /**
     * Identifier of the correlation.
     * 
     */
    @Import(name="correlationId")
      private final @Nullable Output<String> correlationId;

    public Output<String> correlationId() {
        return this.correlationId == null ? Codegen.empty() : this.correlationId;
    }

    /**
     * Application specific label.
     * 
     */
    @Import(name="label")
      private final @Nullable Output<String> label;

    public Output<String> label() {
        return this.label == null ? Codegen.empty() : this.label;
    }

    /**
     * Identifier of the message.
     * 
     */
    @Import(name="messageId")
      private final @Nullable Output<String> messageId;

    public Output<String> messageId() {
        return this.messageId == null ? Codegen.empty() : this.messageId;
    }

    /**
     * dictionary object for custom filters
     * 
     */
    @Import(name="properties")
      private final @Nullable Output<Map<String,String>> properties;

    public Output<Map<String,String>> properties() {
        return this.properties == null ? Codegen.empty() : this.properties;
    }

    /**
     * Address of the queue to reply to.
     * 
     */
    @Import(name="replyTo")
      private final @Nullable Output<String> replyTo;

    public Output<String> replyTo() {
        return this.replyTo == null ? Codegen.empty() : this.replyTo;
    }

    /**
     * Session identifier to reply to.
     * 
     */
    @Import(name="replyToSessionId")
      private final @Nullable Output<String> replyToSessionId;

    public Output<String> replyToSessionId() {
        return this.replyToSessionId == null ? Codegen.empty() : this.replyToSessionId;
    }

    /**
     * Value that indicates whether the rule action requires preprocessing.
     * 
     */
    @Import(name="requiresPreprocessing")
      private final @Nullable Output<Boolean> requiresPreprocessing;

    public Output<Boolean> requiresPreprocessing() {
        return this.requiresPreprocessing == null ? Codegen.empty() : this.requiresPreprocessing;
    }

    /**
     * Session identifier.
     * 
     */
    @Import(name="sessionId")
      private final @Nullable Output<String> sessionId;

    public Output<String> sessionId() {
        return this.sessionId == null ? Codegen.empty() : this.sessionId;
    }

    /**
     * Address to send to.
     * 
     */
    @Import(name="to")
      private final @Nullable Output<String> to;

    public Output<String> to() {
        return this.to == null ? Codegen.empty() : this.to;
    }

    public CorrelationFilterArgs(
        @Nullable Output<String> contentType,
        @Nullable Output<String> correlationId,
        @Nullable Output<String> label,
        @Nullable Output<String> messageId,
        @Nullable Output<Map<String,String>> properties,
        @Nullable Output<String> replyTo,
        @Nullable Output<String> replyToSessionId,
        @Nullable Output<Boolean> requiresPreprocessing,
        @Nullable Output<String> sessionId,
        @Nullable Output<String> to) {
        this.contentType = contentType;
        this.correlationId = correlationId;
        this.label = label;
        this.messageId = messageId;
        this.properties = properties;
        this.replyTo = replyTo;
        this.replyToSessionId = replyToSessionId;
        this.requiresPreprocessing = requiresPreprocessing == null ? Codegen.ofNullable(true) : requiresPreprocessing;
        this.sessionId = sessionId;
        this.to = to;
    }

    private CorrelationFilterArgs() {
        this.contentType = Codegen.empty();
        this.correlationId = Codegen.empty();
        this.label = Codegen.empty();
        this.messageId = Codegen.empty();
        this.properties = Codegen.empty();
        this.replyTo = Codegen.empty();
        this.replyToSessionId = Codegen.empty();
        this.requiresPreprocessing = Codegen.empty();
        this.sessionId = Codegen.empty();
        this.to = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CorrelationFilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> contentType;
        private @Nullable Output<String> correlationId;
        private @Nullable Output<String> label;
        private @Nullable Output<String> messageId;
        private @Nullable Output<Map<String,String>> properties;
        private @Nullable Output<String> replyTo;
        private @Nullable Output<String> replyToSessionId;
        private @Nullable Output<Boolean> requiresPreprocessing;
        private @Nullable Output<String> sessionId;
        private @Nullable Output<String> to;

        public Builder() {
    	      // Empty
        }

        public Builder(CorrelationFilterArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.contentType = defaults.contentType;
    	      this.correlationId = defaults.correlationId;
    	      this.label = defaults.label;
    	      this.messageId = defaults.messageId;
    	      this.properties = defaults.properties;
    	      this.replyTo = defaults.replyTo;
    	      this.replyToSessionId = defaults.replyToSessionId;
    	      this.requiresPreprocessing = defaults.requiresPreprocessing;
    	      this.sessionId = defaults.sessionId;
    	      this.to = defaults.to;
        }

        public Builder contentType(@Nullable Output<String> contentType) {
            this.contentType = contentType;
            return this;
        }
        public Builder contentType(@Nullable String contentType) {
            this.contentType = Codegen.ofNullable(contentType);
            return this;
        }
        public Builder correlationId(@Nullable Output<String> correlationId) {
            this.correlationId = correlationId;
            return this;
        }
        public Builder correlationId(@Nullable String correlationId) {
            this.correlationId = Codegen.ofNullable(correlationId);
            return this;
        }
        public Builder label(@Nullable Output<String> label) {
            this.label = label;
            return this;
        }
        public Builder label(@Nullable String label) {
            this.label = Codegen.ofNullable(label);
            return this;
        }
        public Builder messageId(@Nullable Output<String> messageId) {
            this.messageId = messageId;
            return this;
        }
        public Builder messageId(@Nullable String messageId) {
            this.messageId = Codegen.ofNullable(messageId);
            return this;
        }
        public Builder properties(@Nullable Output<Map<String,String>> properties) {
            this.properties = properties;
            return this;
        }
        public Builder properties(@Nullable Map<String,String> properties) {
            this.properties = Codegen.ofNullable(properties);
            return this;
        }
        public Builder replyTo(@Nullable Output<String> replyTo) {
            this.replyTo = replyTo;
            return this;
        }
        public Builder replyTo(@Nullable String replyTo) {
            this.replyTo = Codegen.ofNullable(replyTo);
            return this;
        }
        public Builder replyToSessionId(@Nullable Output<String> replyToSessionId) {
            this.replyToSessionId = replyToSessionId;
            return this;
        }
        public Builder replyToSessionId(@Nullable String replyToSessionId) {
            this.replyToSessionId = Codegen.ofNullable(replyToSessionId);
            return this;
        }
        public Builder requiresPreprocessing(@Nullable Output<Boolean> requiresPreprocessing) {
            this.requiresPreprocessing = requiresPreprocessing;
            return this;
        }
        public Builder requiresPreprocessing(@Nullable Boolean requiresPreprocessing) {
            this.requiresPreprocessing = Codegen.ofNullable(requiresPreprocessing);
            return this;
        }
        public Builder sessionId(@Nullable Output<String> sessionId) {
            this.sessionId = sessionId;
            return this;
        }
        public Builder sessionId(@Nullable String sessionId) {
            this.sessionId = Codegen.ofNullable(sessionId);
            return this;
        }
        public Builder to(@Nullable Output<String> to) {
            this.to = to;
            return this;
        }
        public Builder to(@Nullable String to) {
            this.to = Codegen.ofNullable(to);
            return this;
        }        public CorrelationFilterArgs build() {
            return new CorrelationFilterArgs(contentType, correlationId, label, messageId, properties, replyTo, replyToSessionId, requiresPreprocessing, sessionId, to);
        }
    }
}
