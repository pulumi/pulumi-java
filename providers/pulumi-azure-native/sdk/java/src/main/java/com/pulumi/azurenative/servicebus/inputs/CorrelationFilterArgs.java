// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.servicebus.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Represents the correlation filter expression.
 * 
 */
public final class CorrelationFilterArgs extends com.pulumi.resources.ResourceArgs {

    public static final CorrelationFilterArgs Empty = new CorrelationFilterArgs();

    /**
     * Content type of the message.
     * 
     */
    @Import(name="contentType")
    private @Nullable Output<String> contentType;

    public Optional<Output<String>> contentType() {
        return Optional.ofNullable(this.contentType);
    }

    /**
     * Identifier of the correlation.
     * 
     */
    @Import(name="correlationId")
    private @Nullable Output<String> correlationId;

    public Optional<Output<String>> correlationId() {
        return Optional.ofNullable(this.correlationId);
    }

    /**
     * Application specific label.
     * 
     */
    @Import(name="label")
    private @Nullable Output<String> label;

    public Optional<Output<String>> label() {
        return Optional.ofNullable(this.label);
    }

    /**
     * Identifier of the message.
     * 
     */
    @Import(name="messageId")
    private @Nullable Output<String> messageId;

    public Optional<Output<String>> messageId() {
        return Optional.ofNullable(this.messageId);
    }

    /**
     * dictionary object for custom filters
     * 
     */
    @Import(name="properties")
    private @Nullable Output<Map<String,String>> properties;

    public Optional<Output<Map<String,String>>> properties() {
        return Optional.ofNullable(this.properties);
    }

    /**
     * Address of the queue to reply to.
     * 
     */
    @Import(name="replyTo")
    private @Nullable Output<String> replyTo;

    public Optional<Output<String>> replyTo() {
        return Optional.ofNullable(this.replyTo);
    }

    /**
     * Session identifier to reply to.
     * 
     */
    @Import(name="replyToSessionId")
    private @Nullable Output<String> replyToSessionId;

    public Optional<Output<String>> replyToSessionId() {
        return Optional.ofNullable(this.replyToSessionId);
    }

    /**
     * Value that indicates whether the rule action requires preprocessing.
     * 
     */
    @Import(name="requiresPreprocessing")
    private @Nullable Output<Boolean> requiresPreprocessing;

    public Optional<Output<Boolean>> requiresPreprocessing() {
        return Optional.ofNullable(this.requiresPreprocessing);
    }

    /**
     * Session identifier.
     * 
     */
    @Import(name="sessionId")
    private @Nullable Output<String> sessionId;

    public Optional<Output<String>> sessionId() {
        return Optional.ofNullable(this.sessionId);
    }

    /**
     * Address to send to.
     * 
     */
    @Import(name="to")
    private @Nullable Output<String> to;

    public Optional<Output<String>> to() {
        return Optional.ofNullable(this.to);
    }

    private CorrelationFilterArgs() {}

    private CorrelationFilterArgs(CorrelationFilterArgs $) {
        this.contentType = $.contentType;
        this.correlationId = $.correlationId;
        this.label = $.label;
        this.messageId = $.messageId;
        this.properties = $.properties;
        this.replyTo = $.replyTo;
        this.replyToSessionId = $.replyToSessionId;
        this.requiresPreprocessing = $.requiresPreprocessing;
        this.sessionId = $.sessionId;
        this.to = $.to;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CorrelationFilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CorrelationFilterArgs $;

        public Builder() {
            $ = new CorrelationFilterArgs();
        }

        public Builder(CorrelationFilterArgs defaults) {
            $ = new CorrelationFilterArgs(Objects.requireNonNull(defaults));
        }

        public Builder contentType(@Nullable Output<String> contentType) {
            $.contentType = contentType;
            return this;
        }

        public Builder contentType(String contentType) {
            return contentType(Output.of(contentType));
        }

        public Builder correlationId(@Nullable Output<String> correlationId) {
            $.correlationId = correlationId;
            return this;
        }

        public Builder correlationId(String correlationId) {
            return correlationId(Output.of(correlationId));
        }

        public Builder label(@Nullable Output<String> label) {
            $.label = label;
            return this;
        }

        public Builder label(String label) {
            return label(Output.of(label));
        }

        public Builder messageId(@Nullable Output<String> messageId) {
            $.messageId = messageId;
            return this;
        }

        public Builder messageId(String messageId) {
            return messageId(Output.of(messageId));
        }

        public Builder properties(@Nullable Output<Map<String,String>> properties) {
            $.properties = properties;
            return this;
        }

        public Builder properties(Map<String,String> properties) {
            return properties(Output.of(properties));
        }

        public Builder replyTo(@Nullable Output<String> replyTo) {
            $.replyTo = replyTo;
            return this;
        }

        public Builder replyTo(String replyTo) {
            return replyTo(Output.of(replyTo));
        }

        public Builder replyToSessionId(@Nullable Output<String> replyToSessionId) {
            $.replyToSessionId = replyToSessionId;
            return this;
        }

        public Builder replyToSessionId(String replyToSessionId) {
            return replyToSessionId(Output.of(replyToSessionId));
        }

        public Builder requiresPreprocessing(@Nullable Output<Boolean> requiresPreprocessing) {
            $.requiresPreprocessing = requiresPreprocessing;
            return this;
        }

        public Builder requiresPreprocessing(Boolean requiresPreprocessing) {
            return requiresPreprocessing(Output.of(requiresPreprocessing));
        }

        public Builder sessionId(@Nullable Output<String> sessionId) {
            $.sessionId = sessionId;
            return this;
        }

        public Builder sessionId(String sessionId) {
            return sessionId(Output.of(sessionId));
        }

        public Builder to(@Nullable Output<String> to) {
            $.to = to;
            return this;
        }

        public Builder to(String to) {
            return to(Output.of(to));
        }

        public CorrelationFilterArgs build() {
            $.requiresPreprocessing = Codegen.booleanProp("requiresPreprocessing").output().arg($.requiresPreprocessing).def(true).getNullable();
            return $;
        }
    }

}
