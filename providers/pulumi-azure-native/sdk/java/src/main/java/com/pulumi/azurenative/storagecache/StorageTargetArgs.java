// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.storagecache;

import com.pulumi.azurenative.storagecache.enums.ProvisioningStateType;
import com.pulumi.azurenative.storagecache.enums.StorageTargetType;
import com.pulumi.azurenative.storagecache.inputs.BlobNfsTargetArgs;
import com.pulumi.azurenative.storagecache.inputs.ClfsTargetArgs;
import com.pulumi.azurenative.storagecache.inputs.NamespaceJunctionArgs;
import com.pulumi.azurenative.storagecache.inputs.Nfs3TargetArgs;
import com.pulumi.azurenative.storagecache.inputs.UnknownTargetArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StorageTargetArgs extends com.pulumi.resources.ResourceArgs {

    public static final StorageTargetArgs Empty = new StorageTargetArgs();

    /**
     * Properties when targetType is blobNfs.
     * 
     */
    @Import(name="blobNfs")
    private @Nullable Output<BlobNfsTargetArgs> blobNfs;

    public Optional<Output<BlobNfsTargetArgs>> blobNfs() {
        return Optional.ofNullable(this.blobNfs);
    }

    /**
     * Name of Cache. Length of name must not be greater than 80 and chars must be from the [-0-9a-zA-Z_] char class.
     * 
     */
    @Import(name="cacheName", required=true)
    private Output<String> cacheName;

    public Output<String> cacheName() {
        return this.cacheName;
    }

    /**
     * Properties when targetType is clfs.
     * 
     */
    @Import(name="clfs")
    private @Nullable Output<ClfsTargetArgs> clfs;

    public Optional<Output<ClfsTargetArgs>> clfs() {
        return Optional.ofNullable(this.clfs);
    }

    /**
     * List of Cache namespace junctions to target for namespace associations.
     * 
     */
    @Import(name="junctions")
    private @Nullable Output<List<NamespaceJunctionArgs>> junctions;

    public Optional<Output<List<NamespaceJunctionArgs>>> junctions() {
        return Optional.ofNullable(this.junctions);
    }

    /**
     * Properties when targetType is nfs3.
     * 
     */
    @Import(name="nfs3")
    private @Nullable Output<Nfs3TargetArgs> nfs3;

    public Optional<Output<Nfs3TargetArgs>> nfs3() {
        return Optional.ofNullable(this.nfs3);
    }

    /**
     * ARM provisioning state, see https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#provisioningstate-property
     * 
     */
    @Import(name="provisioningState")
    private @Nullable Output<Either<String,ProvisioningStateType>> provisioningState;

    public Optional<Output<Either<String,ProvisioningStateType>>> provisioningState() {
        return Optional.ofNullable(this.provisioningState);
    }

    /**
     * Target resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Name of Storage Target.
     * 
     */
    @Import(name="storageTargetName")
    private @Nullable Output<String> storageTargetName;

    public Optional<Output<String>> storageTargetName() {
        return Optional.ofNullable(this.storageTargetName);
    }

    /**
     * Type of the Storage Target.
     * 
     */
    @Import(name="targetType", required=true)
    private Output<Either<String,StorageTargetType>> targetType;

    public Output<Either<String,StorageTargetType>> targetType() {
        return this.targetType;
    }

    /**
     * Properties when targetType is unknown.
     * 
     */
    @Import(name="unknown")
    private @Nullable Output<UnknownTargetArgs> unknown;

    public Optional<Output<UnknownTargetArgs>> unknown() {
        return Optional.ofNullable(this.unknown);
    }

    private StorageTargetArgs() {}

    private StorageTargetArgs(StorageTargetArgs $) {
        this.blobNfs = $.blobNfs;
        this.cacheName = $.cacheName;
        this.clfs = $.clfs;
        this.junctions = $.junctions;
        this.nfs3 = $.nfs3;
        this.provisioningState = $.provisioningState;
        this.resourceGroupName = $.resourceGroupName;
        this.storageTargetName = $.storageTargetName;
        this.targetType = $.targetType;
        this.unknown = $.unknown;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StorageTargetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StorageTargetArgs $;

        public Builder() {
            $ = new StorageTargetArgs();
        }

        public Builder(StorageTargetArgs defaults) {
            $ = new StorageTargetArgs(Objects.requireNonNull(defaults));
        }

        public Builder blobNfs(@Nullable Output<BlobNfsTargetArgs> blobNfs) {
            $.blobNfs = blobNfs;
            return this;
        }

        public Builder blobNfs(BlobNfsTargetArgs blobNfs) {
            return blobNfs(Output.of(blobNfs));
        }

        public Builder cacheName(Output<String> cacheName) {
            $.cacheName = cacheName;
            return this;
        }

        public Builder cacheName(String cacheName) {
            return cacheName(Output.of(cacheName));
        }

        public Builder clfs(@Nullable Output<ClfsTargetArgs> clfs) {
            $.clfs = clfs;
            return this;
        }

        public Builder clfs(ClfsTargetArgs clfs) {
            return clfs(Output.of(clfs));
        }

        public Builder junctions(@Nullable Output<List<NamespaceJunctionArgs>> junctions) {
            $.junctions = junctions;
            return this;
        }

        public Builder junctions(List<NamespaceJunctionArgs> junctions) {
            return junctions(Output.of(junctions));
        }

        public Builder junctions(NamespaceJunctionArgs... junctions) {
            return junctions(List.of(junctions));
        }

        public Builder nfs3(@Nullable Output<Nfs3TargetArgs> nfs3) {
            $.nfs3 = nfs3;
            return this;
        }

        public Builder nfs3(Nfs3TargetArgs nfs3) {
            return nfs3(Output.of(nfs3));
        }

        public Builder provisioningState(@Nullable Output<Either<String,ProvisioningStateType>> provisioningState) {
            $.provisioningState = provisioningState;
            return this;
        }

        public Builder provisioningState(Either<String,ProvisioningStateType> provisioningState) {
            return provisioningState(Output.of(provisioningState));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder storageTargetName(@Nullable Output<String> storageTargetName) {
            $.storageTargetName = storageTargetName;
            return this;
        }

        public Builder storageTargetName(String storageTargetName) {
            return storageTargetName(Output.of(storageTargetName));
        }

        public Builder targetType(Output<Either<String,StorageTargetType>> targetType) {
            $.targetType = targetType;
            return this;
        }

        public Builder targetType(Either<String,StorageTargetType> targetType) {
            return targetType(Output.of(targetType));
        }

        public Builder unknown(@Nullable Output<UnknownTargetArgs> unknown) {
            $.unknown = unknown;
            return this;
        }

        public Builder unknown(UnknownTargetArgs unknown) {
            return unknown(Output.of(unknown));
        }

        public StorageTargetArgs build() {
            $.cacheName = Objects.requireNonNull($.cacheName, "expected parameter 'cacheName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.targetType = Objects.requireNonNull($.targetType, "expected parameter 'targetType' to be non-null");
            return $;
        }
    }

}
