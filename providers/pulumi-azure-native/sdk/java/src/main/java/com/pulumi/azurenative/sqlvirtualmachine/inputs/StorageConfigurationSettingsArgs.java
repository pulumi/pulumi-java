// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.sqlvirtualmachine.inputs;

import com.pulumi.azurenative.sqlvirtualmachine.enums.DiskConfigurationType;
import com.pulumi.azurenative.sqlvirtualmachine.enums.StorageWorkloadType;
import com.pulumi.azurenative.sqlvirtualmachine.inputs.SQLStorageSettingsArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Storage Configurations for SQL Data, Log and TempDb.
 * 
 */
public final class StorageConfigurationSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final StorageConfigurationSettingsArgs Empty = new StorageConfigurationSettingsArgs();

    /**
     * Disk configuration to apply to SQL Server.
     * 
     */
    @Import(name="diskConfigurationType")
    private @Nullable Output<Either<String,DiskConfigurationType>> diskConfigurationType;

    public Optional<Output<Either<String,DiskConfigurationType>>> diskConfigurationType() {
        return Optional.ofNullable(this.diskConfigurationType);
    }

    /**
     * SQL Server Data Storage Settings.
     * 
     */
    @Import(name="sqlDataSettings")
    private @Nullable Output<SQLStorageSettingsArgs> sqlDataSettings;

    public Optional<Output<SQLStorageSettingsArgs>> sqlDataSettings() {
        return Optional.ofNullable(this.sqlDataSettings);
    }

    /**
     * SQL Server Log Storage Settings.
     * 
     */
    @Import(name="sqlLogSettings")
    private @Nullable Output<SQLStorageSettingsArgs> sqlLogSettings;

    public Optional<Output<SQLStorageSettingsArgs>> sqlLogSettings() {
        return Optional.ofNullable(this.sqlLogSettings);
    }

    /**
     * SQL Server TempDb Storage Settings.
     * 
     */
    @Import(name="sqlTempDbSettings")
    private @Nullable Output<SQLStorageSettingsArgs> sqlTempDbSettings;

    public Optional<Output<SQLStorageSettingsArgs>> sqlTempDbSettings() {
        return Optional.ofNullable(this.sqlTempDbSettings);
    }

    /**
     * Storage workload type.
     * 
     */
    @Import(name="storageWorkloadType")
    private @Nullable Output<Either<String,StorageWorkloadType>> storageWorkloadType;

    public Optional<Output<Either<String,StorageWorkloadType>>> storageWorkloadType() {
        return Optional.ofNullable(this.storageWorkloadType);
    }

    private StorageConfigurationSettingsArgs() {}

    private StorageConfigurationSettingsArgs(StorageConfigurationSettingsArgs $) {
        this.diskConfigurationType = $.diskConfigurationType;
        this.sqlDataSettings = $.sqlDataSettings;
        this.sqlLogSettings = $.sqlLogSettings;
        this.sqlTempDbSettings = $.sqlTempDbSettings;
        this.storageWorkloadType = $.storageWorkloadType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StorageConfigurationSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StorageConfigurationSettingsArgs $;

        public Builder() {
            $ = new StorageConfigurationSettingsArgs();
        }

        public Builder(StorageConfigurationSettingsArgs defaults) {
            $ = new StorageConfigurationSettingsArgs(Objects.requireNonNull(defaults));
        }

        public Builder diskConfigurationType(@Nullable Output<Either<String,DiskConfigurationType>> diskConfigurationType) {
            $.diskConfigurationType = diskConfigurationType;
            return this;
        }

        public Builder diskConfigurationType(Either<String,DiskConfigurationType> diskConfigurationType) {
            return diskConfigurationType(Output.of(diskConfigurationType));
        }

        public Builder diskConfigurationType(String diskConfigurationType) {
            return diskConfigurationType(Either.ofLeft(diskConfigurationType));
        }

        public Builder diskConfigurationType(DiskConfigurationType diskConfigurationType) {
            return diskConfigurationType(Either.ofRight(diskConfigurationType));
        }

        public Builder sqlDataSettings(@Nullable Output<SQLStorageSettingsArgs> sqlDataSettings) {
            $.sqlDataSettings = sqlDataSettings;
            return this;
        }

        public Builder sqlDataSettings(SQLStorageSettingsArgs sqlDataSettings) {
            return sqlDataSettings(Output.of(sqlDataSettings));
        }

        public Builder sqlLogSettings(@Nullable Output<SQLStorageSettingsArgs> sqlLogSettings) {
            $.sqlLogSettings = sqlLogSettings;
            return this;
        }

        public Builder sqlLogSettings(SQLStorageSettingsArgs sqlLogSettings) {
            return sqlLogSettings(Output.of(sqlLogSettings));
        }

        public Builder sqlTempDbSettings(@Nullable Output<SQLStorageSettingsArgs> sqlTempDbSettings) {
            $.sqlTempDbSettings = sqlTempDbSettings;
            return this;
        }

        public Builder sqlTempDbSettings(SQLStorageSettingsArgs sqlTempDbSettings) {
            return sqlTempDbSettings(Output.of(sqlTempDbSettings));
        }

        public Builder storageWorkloadType(@Nullable Output<Either<String,StorageWorkloadType>> storageWorkloadType) {
            $.storageWorkloadType = storageWorkloadType;
            return this;
        }

        public Builder storageWorkloadType(Either<String,StorageWorkloadType> storageWorkloadType) {
            return storageWorkloadType(Output.of(storageWorkloadType));
        }

        public Builder storageWorkloadType(String storageWorkloadType) {
            return storageWorkloadType(Either.ofLeft(storageWorkloadType));
        }

        public Builder storageWorkloadType(StorageWorkloadType storageWorkloadType) {
            return storageWorkloadType(Either.ofRight(storageWorkloadType));
        }

        public StorageConfigurationSettingsArgs build() {
            return $;
        }
    }

}
