// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.compute.inputs;

import com.pulumi.azurenative.compute.inputs.ApiErrorResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


/**
 * Describes the properties of the last installed patch summary.
 * 
 */
public final class LastPatchInstallationSummaryResponse extends com.pulumi.resources.InvokeArgs {

    public static final LastPatchInstallationSummaryResponse Empty = new LastPatchInstallationSummaryResponse();

    /**
     * The errors that were encountered during execution of the operation. The details array contains the list of them.
     * 
     */
    @Import(name="error", required=true)
    private ApiErrorResponse error;

    /**
     * @return The errors that were encountered during execution of the operation. The details array contains the list of them.
     * 
     */
    public ApiErrorResponse error() {
        return this.error;
    }

    /**
     * The number of all available patches but excluded explicitly by a customer-specified exclusion list match.
     * 
     */
    @Import(name="excludedPatchCount", required=true)
    private Integer excludedPatchCount;

    /**
     * @return The number of all available patches but excluded explicitly by a customer-specified exclusion list match.
     * 
     */
    public Integer excludedPatchCount() {
        return this.excludedPatchCount;
    }

    /**
     * The count of patches that failed installation.
     * 
     */
    @Import(name="failedPatchCount", required=true)
    private Integer failedPatchCount;

    /**
     * @return The count of patches that failed installation.
     * 
     */
    public Integer failedPatchCount() {
        return this.failedPatchCount;
    }

    /**
     * The activity ID of the operation that produced this result. It is used to correlate across CRP and extension logs.
     * 
     */
    @Import(name="installationActivityId", required=true)
    private String installationActivityId;

    /**
     * @return The activity ID of the operation that produced this result. It is used to correlate across CRP and extension logs.
     * 
     */
    public String installationActivityId() {
        return this.installationActivityId;
    }

    /**
     * The count of patches that successfully installed.
     * 
     */
    @Import(name="installedPatchCount", required=true)
    private Integer installedPatchCount;

    /**
     * @return The count of patches that successfully installed.
     * 
     */
    public Integer installedPatchCount() {
        return this.installedPatchCount;
    }

    /**
     * The UTC timestamp when the operation began.
     * 
     */
    @Import(name="lastModifiedTime", required=true)
    private String lastModifiedTime;

    /**
     * @return The UTC timestamp when the operation began.
     * 
     */
    public String lastModifiedTime() {
        return this.lastModifiedTime;
    }

    /**
     * Describes whether the operation ran out of time before it completed all its intended actions
     * 
     */
    @Import(name="maintenanceWindowExceeded", required=true)
    private Boolean maintenanceWindowExceeded;

    /**
     * @return Describes whether the operation ran out of time before it completed all its intended actions
     * 
     */
    public Boolean maintenanceWindowExceeded() {
        return this.maintenanceWindowExceeded;
    }

    /**
     * The number of all available patches but not going to be installed because it didn&#39;t match a classification or inclusion list entry.
     * 
     */
    @Import(name="notSelectedPatchCount", required=true)
    private Integer notSelectedPatchCount;

    /**
     * @return The number of all available patches but not going to be installed because it didn&#39;t match a classification or inclusion list entry.
     * 
     */
    public Integer notSelectedPatchCount() {
        return this.notSelectedPatchCount;
    }

    /**
     * The number of all available patches expected to be installed over the course of the patch installation operation.
     * 
     */
    @Import(name="pendingPatchCount", required=true)
    private Integer pendingPatchCount;

    /**
     * @return The number of all available patches expected to be installed over the course of the patch installation operation.
     * 
     */
    public Integer pendingPatchCount() {
        return this.pendingPatchCount;
    }

    /**
     * The UTC timestamp when the operation began.
     * 
     */
    @Import(name="startTime", required=true)
    private String startTime;

    /**
     * @return The UTC timestamp when the operation began.
     * 
     */
    public String startTime() {
        return this.startTime;
    }

    /**
     * The overall success or failure status of the operation. It remains &#34;InProgress&#34; until the operation completes. At that point it will become &#34;Unknown&#34;, &#34;Failed&#34;, &#34;Succeeded&#34;, or &#34;CompletedWithWarnings.&#34;
     * 
     */
    @Import(name="status", required=true)
    private String status;

    /**
     * @return The overall success or failure status of the operation. It remains &#34;InProgress&#34; until the operation completes. At that point it will become &#34;Unknown&#34;, &#34;Failed&#34;, &#34;Succeeded&#34;, or &#34;CompletedWithWarnings.&#34;
     * 
     */
    public String status() {
        return this.status;
    }

    private LastPatchInstallationSummaryResponse() {}

    private LastPatchInstallationSummaryResponse(LastPatchInstallationSummaryResponse $) {
        this.error = $.error;
        this.excludedPatchCount = $.excludedPatchCount;
        this.failedPatchCount = $.failedPatchCount;
        this.installationActivityId = $.installationActivityId;
        this.installedPatchCount = $.installedPatchCount;
        this.lastModifiedTime = $.lastModifiedTime;
        this.maintenanceWindowExceeded = $.maintenanceWindowExceeded;
        this.notSelectedPatchCount = $.notSelectedPatchCount;
        this.pendingPatchCount = $.pendingPatchCount;
        this.startTime = $.startTime;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LastPatchInstallationSummaryResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LastPatchInstallationSummaryResponse $;

        public Builder() {
            $ = new LastPatchInstallationSummaryResponse();
        }

        public Builder(LastPatchInstallationSummaryResponse defaults) {
            $ = new LastPatchInstallationSummaryResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param error The errors that were encountered during execution of the operation. The details array contains the list of them.
         * 
         * @return builder
         * 
         */
        public Builder error(ApiErrorResponse error) {
            $.error = error;
            return this;
        }

        /**
         * @param excludedPatchCount The number of all available patches but excluded explicitly by a customer-specified exclusion list match.
         * 
         * @return builder
         * 
         */
        public Builder excludedPatchCount(Integer excludedPatchCount) {
            $.excludedPatchCount = excludedPatchCount;
            return this;
        }

        /**
         * @param failedPatchCount The count of patches that failed installation.
         * 
         * @return builder
         * 
         */
        public Builder failedPatchCount(Integer failedPatchCount) {
            $.failedPatchCount = failedPatchCount;
            return this;
        }

        /**
         * @param installationActivityId The activity ID of the operation that produced this result. It is used to correlate across CRP and extension logs.
         * 
         * @return builder
         * 
         */
        public Builder installationActivityId(String installationActivityId) {
            $.installationActivityId = installationActivityId;
            return this;
        }

        /**
         * @param installedPatchCount The count of patches that successfully installed.
         * 
         * @return builder
         * 
         */
        public Builder installedPatchCount(Integer installedPatchCount) {
            $.installedPatchCount = installedPatchCount;
            return this;
        }

        /**
         * @param lastModifiedTime The UTC timestamp when the operation began.
         * 
         * @return builder
         * 
         */
        public Builder lastModifiedTime(String lastModifiedTime) {
            $.lastModifiedTime = lastModifiedTime;
            return this;
        }

        /**
         * @param maintenanceWindowExceeded Describes whether the operation ran out of time before it completed all its intended actions
         * 
         * @return builder
         * 
         */
        public Builder maintenanceWindowExceeded(Boolean maintenanceWindowExceeded) {
            $.maintenanceWindowExceeded = maintenanceWindowExceeded;
            return this;
        }

        /**
         * @param notSelectedPatchCount The number of all available patches but not going to be installed because it didn&#39;t match a classification or inclusion list entry.
         * 
         * @return builder
         * 
         */
        public Builder notSelectedPatchCount(Integer notSelectedPatchCount) {
            $.notSelectedPatchCount = notSelectedPatchCount;
            return this;
        }

        /**
         * @param pendingPatchCount The number of all available patches expected to be installed over the course of the patch installation operation.
         * 
         * @return builder
         * 
         */
        public Builder pendingPatchCount(Integer pendingPatchCount) {
            $.pendingPatchCount = pendingPatchCount;
            return this;
        }

        /**
         * @param startTime The UTC timestamp when the operation began.
         * 
         * @return builder
         * 
         */
        public Builder startTime(String startTime) {
            $.startTime = startTime;
            return this;
        }

        /**
         * @param status The overall success or failure status of the operation. It remains &#34;InProgress&#34; until the operation completes. At that point it will become &#34;Unknown&#34;, &#34;Failed&#34;, &#34;Succeeded&#34;, or &#34;CompletedWithWarnings.&#34;
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            $.status = status;
            return this;
        }

        public LastPatchInstallationSummaryResponse build() {
            $.error = Objects.requireNonNull($.error, "expected parameter 'error' to be non-null");
            $.excludedPatchCount = Objects.requireNonNull($.excludedPatchCount, "expected parameter 'excludedPatchCount' to be non-null");
            $.failedPatchCount = Objects.requireNonNull($.failedPatchCount, "expected parameter 'failedPatchCount' to be non-null");
            $.installationActivityId = Objects.requireNonNull($.installationActivityId, "expected parameter 'installationActivityId' to be non-null");
            $.installedPatchCount = Objects.requireNonNull($.installedPatchCount, "expected parameter 'installedPatchCount' to be non-null");
            $.lastModifiedTime = Objects.requireNonNull($.lastModifiedTime, "expected parameter 'lastModifiedTime' to be non-null");
            $.maintenanceWindowExceeded = Objects.requireNonNull($.maintenanceWindowExceeded, "expected parameter 'maintenanceWindowExceeded' to be non-null");
            $.notSelectedPatchCount = Objects.requireNonNull($.notSelectedPatchCount, "expected parameter 'notSelectedPatchCount' to be non-null");
            $.pendingPatchCount = Objects.requireNonNull($.pendingPatchCount, "expected parameter 'pendingPatchCount' to be non-null");
            $.startTime = Objects.requireNonNull($.startTime, "expected parameter 'startTime' to be non-null");
            $.status = Objects.requireNonNull($.status, "expected parameter 'status' to be non-null");
            return $;
        }
    }

}
