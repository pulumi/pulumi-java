// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.sql;

import com.pulumi.azurenative.sql.inputs.VulnerabilityAssessmentRecurringScansPropertiesArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ManagedInstanceVulnerabilityAssessmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final ManagedInstanceVulnerabilityAssessmentArgs Empty = new ManagedInstanceVulnerabilityAssessmentArgs();

    /**
     * The name of the managed instance for which the vulnerability assessment is defined.
     * 
     */
    @Import(name="managedInstanceName", required=true)
    private Output<String> managedInstanceName;

    public Output<String> managedInstanceName() {
        return this.managedInstanceName;
    }

    /**
     * The recurring scans settings
     * 
     */
    @Import(name="recurringScans")
    private @Nullable Output<VulnerabilityAssessmentRecurringScansPropertiesArgs> recurringScans;

    public Optional<Output<VulnerabilityAssessmentRecurringScansPropertiesArgs>> recurringScans() {
        return Optional.ofNullable(this.recurringScans);
    }

    /**
     * The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Specifies the identifier key of the storage account for vulnerability assessment scan results. If &#39;StorageContainerSasKey&#39; isn&#39;t specified, storageAccountAccessKey is required. Applies only if the storage account is not behind a Vnet or a firewall
     * 
     */
    @Import(name="storageAccountAccessKey")
    private @Nullable Output<String> storageAccountAccessKey;

    public Optional<Output<String>> storageAccountAccessKey() {
        return Optional.ofNullable(this.storageAccountAccessKey);
    }

    /**
     * A blob storage container path to hold the scan results (e.g. https://myStorage.blob.core.windows.net/VaScans/).
     * 
     */
    @Import(name="storageContainerPath", required=true)
    private Output<String> storageContainerPath;

    public Output<String> storageContainerPath() {
        return this.storageContainerPath;
    }

    /**
     * A shared access signature (SAS Key) that has write access to the blob container specified in &#39;storageContainerPath&#39; parameter. If &#39;storageAccountAccessKey&#39; isn&#39;t specified, StorageContainerSasKey is required. Applies only if the storage account is not behind a Vnet or a firewall
     * 
     */
    @Import(name="storageContainerSasKey")
    private @Nullable Output<String> storageContainerSasKey;

    public Optional<Output<String>> storageContainerSasKey() {
        return Optional.ofNullable(this.storageContainerSasKey);
    }

    /**
     * The name of the vulnerability assessment.
     * 
     */
    @Import(name="vulnerabilityAssessmentName")
    private @Nullable Output<String> vulnerabilityAssessmentName;

    public Optional<Output<String>> vulnerabilityAssessmentName() {
        return Optional.ofNullable(this.vulnerabilityAssessmentName);
    }

    private ManagedInstanceVulnerabilityAssessmentArgs() {}

    private ManagedInstanceVulnerabilityAssessmentArgs(ManagedInstanceVulnerabilityAssessmentArgs $) {
        this.managedInstanceName = $.managedInstanceName;
        this.recurringScans = $.recurringScans;
        this.resourceGroupName = $.resourceGroupName;
        this.storageAccountAccessKey = $.storageAccountAccessKey;
        this.storageContainerPath = $.storageContainerPath;
        this.storageContainerSasKey = $.storageContainerSasKey;
        this.vulnerabilityAssessmentName = $.vulnerabilityAssessmentName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagedInstanceVulnerabilityAssessmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagedInstanceVulnerabilityAssessmentArgs $;

        public Builder() {
            $ = new ManagedInstanceVulnerabilityAssessmentArgs();
        }

        public Builder(ManagedInstanceVulnerabilityAssessmentArgs defaults) {
            $ = new ManagedInstanceVulnerabilityAssessmentArgs(Objects.requireNonNull(defaults));
        }

        public Builder managedInstanceName(Output<String> managedInstanceName) {
            $.managedInstanceName = managedInstanceName;
            return this;
        }

        public Builder managedInstanceName(String managedInstanceName) {
            return managedInstanceName(Output.of(managedInstanceName));
        }

        public Builder recurringScans(@Nullable Output<VulnerabilityAssessmentRecurringScansPropertiesArgs> recurringScans) {
            $.recurringScans = recurringScans;
            return this;
        }

        public Builder recurringScans(VulnerabilityAssessmentRecurringScansPropertiesArgs recurringScans) {
            return recurringScans(Output.of(recurringScans));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder storageAccountAccessKey(@Nullable Output<String> storageAccountAccessKey) {
            $.storageAccountAccessKey = storageAccountAccessKey;
            return this;
        }

        public Builder storageAccountAccessKey(String storageAccountAccessKey) {
            return storageAccountAccessKey(Output.of(storageAccountAccessKey));
        }

        public Builder storageContainerPath(Output<String> storageContainerPath) {
            $.storageContainerPath = storageContainerPath;
            return this;
        }

        public Builder storageContainerPath(String storageContainerPath) {
            return storageContainerPath(Output.of(storageContainerPath));
        }

        public Builder storageContainerSasKey(@Nullable Output<String> storageContainerSasKey) {
            $.storageContainerSasKey = storageContainerSasKey;
            return this;
        }

        public Builder storageContainerSasKey(String storageContainerSasKey) {
            return storageContainerSasKey(Output.of(storageContainerSasKey));
        }

        public Builder vulnerabilityAssessmentName(@Nullable Output<String> vulnerabilityAssessmentName) {
            $.vulnerabilityAssessmentName = vulnerabilityAssessmentName;
            return this;
        }

        public Builder vulnerabilityAssessmentName(String vulnerabilityAssessmentName) {
            return vulnerabilityAssessmentName(Output.of(vulnerabilityAssessmentName));
        }

        public ManagedInstanceVulnerabilityAssessmentArgs build() {
            $.managedInstanceName = Objects.requireNonNull($.managedInstanceName, "expected parameter 'managedInstanceName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.storageContainerPath = Objects.requireNonNull($.storageContainerPath, "expected parameter 'storageContainerPath' to be non-null");
            return $;
        }
    }

}
