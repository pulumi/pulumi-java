// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datamigration.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Base class for file properties.
 * 
 */
public final class ProjectFilePropertiesArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProjectFilePropertiesArgs Empty = new ProjectFilePropertiesArgs();

    /**
     * Optional File extension. If submitted it should not have a leading period and must match the extension from filePath.
     * 
     */
    @Import(name="extension")
    private @Nullable Output<String> extension;

    /**
     * @return Optional File extension. If submitted it should not have a leading period and must match the extension from filePath.
     * 
     */
    public Optional<Output<String>> extension() {
        return Optional.ofNullable(this.extension);
    }

    /**
     * Relative path of this file resource. This property can be set when creating or updating the file resource.
     * 
     */
    @Import(name="filePath")
    private @Nullable Output<String> filePath;

    /**
     * @return Relative path of this file resource. This property can be set when creating or updating the file resource.
     * 
     */
    public Optional<Output<String>> filePath() {
        return Optional.ofNullable(this.filePath);
    }

    /**
     * File content type. This property can be modified to reflect the file content type.
     * 
     */
    @Import(name="mediaType")
    private @Nullable Output<String> mediaType;

    /**
     * @return File content type. This property can be modified to reflect the file content type.
     * 
     */
    public Optional<Output<String>> mediaType() {
        return Optional.ofNullable(this.mediaType);
    }

    private ProjectFilePropertiesArgs() {}

    private ProjectFilePropertiesArgs(ProjectFilePropertiesArgs $) {
        this.extension = $.extension;
        this.filePath = $.filePath;
        this.mediaType = $.mediaType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectFilePropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectFilePropertiesArgs $;

        public Builder() {
            $ = new ProjectFilePropertiesArgs();
        }

        public Builder(ProjectFilePropertiesArgs defaults) {
            $ = new ProjectFilePropertiesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param extension Optional File extension. If submitted it should not have a leading period and must match the extension from filePath.
         * 
         * @return builder
         * 
         */
        public Builder extension(@Nullable Output<String> extension) {
            $.extension = extension;
            return this;
        }

        /**
         * @param extension Optional File extension. If submitted it should not have a leading period and must match the extension from filePath.
         * 
         * @return builder
         * 
         */
        public Builder extension(String extension) {
            return extension(Output.of(extension));
        }

        /**
         * @param filePath Relative path of this file resource. This property can be set when creating or updating the file resource.
         * 
         * @return builder
         * 
         */
        public Builder filePath(@Nullable Output<String> filePath) {
            $.filePath = filePath;
            return this;
        }

        /**
         * @param filePath Relative path of this file resource. This property can be set when creating or updating the file resource.
         * 
         * @return builder
         * 
         */
        public Builder filePath(String filePath) {
            return filePath(Output.of(filePath));
        }

        /**
         * @param mediaType File content type. This property can be modified to reflect the file content type.
         * 
         * @return builder
         * 
         */
        public Builder mediaType(@Nullable Output<String> mediaType) {
            $.mediaType = mediaType;
            return this;
        }

        /**
         * @param mediaType File content type. This property can be modified to reflect the file content type.
         * 
         * @return builder
         * 
         */
        public Builder mediaType(String mediaType) {
            return mediaType(Output.of(mediaType));
        }

        public ProjectFilePropertiesArgs build() {
            return $;
        }
    }

}
