// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.automation;

import com.pulumi.azurenative.automation.enums.RunbookTypeEnum;
import com.pulumi.azurenative.automation.inputs.ContentLinkArgs;
import com.pulumi.azurenative.automation.inputs.RunbookDraftArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class RunbookArgs extends com.pulumi.resources.ResourceArgs {

    public static final RunbookArgs Empty = new RunbookArgs();

    /**
     * The name of the automation account.
     * 
     */
    @Import(name="automationAccountName", required=true)
      private final Output<String> automationAccountName;

    public Output<String> automationAccountName() {
        return this.automationAccountName;
    }

    /**
     * Gets or sets the description of the runbook.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> description() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * Gets or sets the draft runbook properties.
     * 
     */
    @Import(name="draft")
      private final @Nullable Output<RunbookDraftArgs> draft;

    public Output<RunbookDraftArgs> draft() {
        return this.draft == null ? Codegen.empty() : this.draft;
    }

    /**
     * Gets or sets the location of the resource.
     * 
     */
    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> location() {
        return this.location == null ? Codegen.empty() : this.location;
    }

    /**
     * Gets or sets the activity-level tracing options of the runbook.
     * 
     */
    @Import(name="logActivityTrace")
      private final @Nullable Output<Integer> logActivityTrace;

    public Output<Integer> logActivityTrace() {
        return this.logActivityTrace == null ? Codegen.empty() : this.logActivityTrace;
    }

    /**
     * Gets or sets progress log option.
     * 
     */
    @Import(name="logProgress")
      private final @Nullable Output<Boolean> logProgress;

    public Output<Boolean> logProgress() {
        return this.logProgress == null ? Codegen.empty() : this.logProgress;
    }

    /**
     * Gets or sets verbose log option.
     * 
     */
    @Import(name="logVerbose")
      private final @Nullable Output<Boolean> logVerbose;

    public Output<Boolean> logVerbose() {
        return this.logVerbose == null ? Codegen.empty() : this.logVerbose;
    }

    /**
     * Gets or sets the name of the resource.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * Gets or sets the published runbook content link.
     * 
     */
    @Import(name="publishContentLink")
      private final @Nullable Output<ContentLinkArgs> publishContentLink;

    public Output<ContentLinkArgs> publishContentLink() {
        return this.publishContentLink == null ? Codegen.empty() : this.publishContentLink;
    }

    /**
     * Name of an Azure Resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The runbook name.
     * 
     */
    @Import(name="runbookName")
      private final @Nullable Output<String> runbookName;

    public Output<String> runbookName() {
        return this.runbookName == null ? Codegen.empty() : this.runbookName;
    }

    /**
     * Gets or sets the type of the runbook.
     * 
     */
    @Import(name="runbookType", required=true)
      private final Output<Either<String,RunbookTypeEnum>> runbookType;

    public Output<Either<String,RunbookTypeEnum>> runbookType() {
        return this.runbookType;
    }

    /**
     * Gets or sets the tags attached to the resource.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    public RunbookArgs(
        Output<String> automationAccountName,
        @Nullable Output<String> description,
        @Nullable Output<RunbookDraftArgs> draft,
        @Nullable Output<String> location,
        @Nullable Output<Integer> logActivityTrace,
        @Nullable Output<Boolean> logProgress,
        @Nullable Output<Boolean> logVerbose,
        @Nullable Output<String> name,
        @Nullable Output<ContentLinkArgs> publishContentLink,
        Output<String> resourceGroupName,
        @Nullable Output<String> runbookName,
        Output<Either<String,RunbookTypeEnum>> runbookType,
        @Nullable Output<Map<String,String>> tags) {
        this.automationAccountName = Objects.requireNonNull(automationAccountName, "expected parameter 'automationAccountName' to be non-null");
        this.description = description;
        this.draft = draft;
        this.location = location;
        this.logActivityTrace = logActivityTrace;
        this.logProgress = logProgress;
        this.logVerbose = logVerbose;
        this.name = name;
        this.publishContentLink = publishContentLink;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.runbookName = runbookName;
        this.runbookType = Objects.requireNonNull(runbookType, "expected parameter 'runbookType' to be non-null");
        this.tags = tags;
    }

    private RunbookArgs() {
        this.automationAccountName = Codegen.empty();
        this.description = Codegen.empty();
        this.draft = Codegen.empty();
        this.location = Codegen.empty();
        this.logActivityTrace = Codegen.empty();
        this.logProgress = Codegen.empty();
        this.logVerbose = Codegen.empty();
        this.name = Codegen.empty();
        this.publishContentLink = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.runbookName = Codegen.empty();
        this.runbookType = Codegen.empty();
        this.tags = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RunbookArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> automationAccountName;
        private @Nullable Output<String> description;
        private @Nullable Output<RunbookDraftArgs> draft;
        private @Nullable Output<String> location;
        private @Nullable Output<Integer> logActivityTrace;
        private @Nullable Output<Boolean> logProgress;
        private @Nullable Output<Boolean> logVerbose;
        private @Nullable Output<String> name;
        private @Nullable Output<ContentLinkArgs> publishContentLink;
        private Output<String> resourceGroupName;
        private @Nullable Output<String> runbookName;
        private Output<Either<String,RunbookTypeEnum>> runbookType;
        private @Nullable Output<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(RunbookArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.automationAccountName = defaults.automationAccountName;
    	      this.description = defaults.description;
    	      this.draft = defaults.draft;
    	      this.location = defaults.location;
    	      this.logActivityTrace = defaults.logActivityTrace;
    	      this.logProgress = defaults.logProgress;
    	      this.logVerbose = defaults.logVerbose;
    	      this.name = defaults.name;
    	      this.publishContentLink = defaults.publishContentLink;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.runbookName = defaults.runbookName;
    	      this.runbookType = defaults.runbookType;
    	      this.tags = defaults.tags;
        }

        public Builder automationAccountName(Output<String> automationAccountName) {
            this.automationAccountName = Objects.requireNonNull(automationAccountName);
            return this;
        }
        public Builder automationAccountName(String automationAccountName) {
            this.automationAccountName = Output.of(Objects.requireNonNull(automationAccountName));
            return this;
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder draft(@Nullable Output<RunbookDraftArgs> draft) {
            this.draft = draft;
            return this;
        }
        public Builder draft(@Nullable RunbookDraftArgs draft) {
            this.draft = Codegen.ofNullable(draft);
            return this;
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Codegen.ofNullable(location);
            return this;
        }
        public Builder logActivityTrace(@Nullable Output<Integer> logActivityTrace) {
            this.logActivityTrace = logActivityTrace;
            return this;
        }
        public Builder logActivityTrace(@Nullable Integer logActivityTrace) {
            this.logActivityTrace = Codegen.ofNullable(logActivityTrace);
            return this;
        }
        public Builder logProgress(@Nullable Output<Boolean> logProgress) {
            this.logProgress = logProgress;
            return this;
        }
        public Builder logProgress(@Nullable Boolean logProgress) {
            this.logProgress = Codegen.ofNullable(logProgress);
            return this;
        }
        public Builder logVerbose(@Nullable Output<Boolean> logVerbose) {
            this.logVerbose = logVerbose;
            return this;
        }
        public Builder logVerbose(@Nullable Boolean logVerbose) {
            this.logVerbose = Codegen.ofNullable(logVerbose);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder publishContentLink(@Nullable Output<ContentLinkArgs> publishContentLink) {
            this.publishContentLink = publishContentLink;
            return this;
        }
        public Builder publishContentLink(@Nullable ContentLinkArgs publishContentLink) {
            this.publishContentLink = Codegen.ofNullable(publishContentLink);
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder runbookName(@Nullable Output<String> runbookName) {
            this.runbookName = runbookName;
            return this;
        }
        public Builder runbookName(@Nullable String runbookName) {
            this.runbookName = Codegen.ofNullable(runbookName);
            return this;
        }
        public Builder runbookType(Output<Either<String,RunbookTypeEnum>> runbookType) {
            this.runbookType = Objects.requireNonNull(runbookType);
            return this;
        }
        public Builder runbookType(Either<String,RunbookTypeEnum> runbookType) {
            this.runbookType = Output.of(Objects.requireNonNull(runbookType));
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }        public RunbookArgs build() {
            return new RunbookArgs(automationAccountName, description, draft, location, logActivityTrace, logProgress, logVerbose, name, publishContentLink, resourceGroupName, runbookName, runbookType, tags);
        }
    }
}
