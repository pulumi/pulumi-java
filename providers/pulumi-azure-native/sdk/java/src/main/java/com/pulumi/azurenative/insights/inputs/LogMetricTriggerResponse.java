// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.insights.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A log metrics trigger descriptor.
 * 
 */
public final class LogMetricTriggerResponse extends com.pulumi.resources.InvokeArgs {

    public static final LogMetricTriggerResponse Empty = new LogMetricTriggerResponse();

    /**
     * Evaluation of metric on a particular column
     * 
     */
    @Import(name="metricColumn")
    private @Nullable String metricColumn;

    public Optional<String> metricColumn() {
        return Optional.ofNullable(this.metricColumn);
    }

    /**
     * Metric Trigger Type - &#39;Consecutive&#39; or &#39;Total&#39;
     * 
     */
    @Import(name="metricTriggerType")
    private @Nullable String metricTriggerType;

    public Optional<String> metricTriggerType() {
        return Optional.ofNullable(this.metricTriggerType);
    }

    /**
     * The threshold of the metric trigger.
     * 
     */
    @Import(name="threshold")
    private @Nullable Double threshold;

    public Optional<Double> threshold() {
        return Optional.ofNullable(this.threshold);
    }

    /**
     * Evaluation operation for Metric -&#39;GreaterThan&#39; or &#39;LessThan&#39; or &#39;Equal&#39;.
     * 
     */
    @Import(name="thresholdOperator")
    private @Nullable String thresholdOperator;

    public Optional<String> thresholdOperator() {
        return Optional.ofNullable(this.thresholdOperator);
    }

    private LogMetricTriggerResponse() {}

    private LogMetricTriggerResponse(LogMetricTriggerResponse $) {
        this.metricColumn = $.metricColumn;
        this.metricTriggerType = $.metricTriggerType;
        this.threshold = $.threshold;
        this.thresholdOperator = $.thresholdOperator;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LogMetricTriggerResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LogMetricTriggerResponse $;

        public Builder() {
            $ = new LogMetricTriggerResponse();
        }

        public Builder(LogMetricTriggerResponse defaults) {
            $ = new LogMetricTriggerResponse(Objects.requireNonNull(defaults));
        }

        public Builder metricColumn(@Nullable String metricColumn) {
            $.metricColumn = metricColumn;
            return this;
        }

        public Builder metricTriggerType(@Nullable String metricTriggerType) {
            $.metricTriggerType = metricTriggerType;
            return this;
        }

        public Builder threshold(@Nullable Double threshold) {
            $.threshold = threshold;
            return this;
        }

        public Builder thresholdOperator(@Nullable String thresholdOperator) {
            $.thresholdOperator = thresholdOperator;
            return this;
        }

        public LogMetricTriggerResponse build() {
            return $;
        }
    }

}
