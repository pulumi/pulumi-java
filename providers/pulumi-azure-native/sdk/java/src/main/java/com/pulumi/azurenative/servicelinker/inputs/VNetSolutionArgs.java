// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.servicelinker.inputs;

import com.pulumi.azurenative.servicelinker.enums.VNetSolutionType;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The VNet solution for linker
 * 
 */
public final class VNetSolutionArgs extends com.pulumi.resources.ResourceArgs {

    public static final VNetSolutionArgs Empty = new VNetSolutionArgs();

    /**
     * Type of VNet solution.
     * 
     */
    @Import(name="type")
    private @Nullable Output<Either<String,VNetSolutionType>> type;

    /**
     * @return Type of VNet solution.
     * 
     */
    public Optional<Output<Either<String,VNetSolutionType>>> type() {
        return Optional.ofNullable(this.type);
    }

    private VNetSolutionArgs() {}

    private VNetSolutionArgs(VNetSolutionArgs $) {
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VNetSolutionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VNetSolutionArgs $;

        public Builder() {
            $ = new VNetSolutionArgs();
        }

        public Builder(VNetSolutionArgs defaults) {
            $ = new VNetSolutionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param type Type of VNet solution.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<Either<String,VNetSolutionType>> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of VNet solution.
         * 
         * @return builder
         * 
         */
        public Builder type(Either<String,VNetSolutionType> type) {
            return type(Output.of(type));
        }

        /**
         * @param type Type of VNet solution.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Either.ofLeft(type));
        }

        /**
         * @param type Type of VNet solution.
         * 
         * @return builder
         * 
         */
        public Builder type(VNetSolutionType type) {
            return type(Either.ofRight(type));
        }

        public VNetSolutionArgs build() {
            return $;
        }
    }

}
