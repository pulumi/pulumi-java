// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.insights.inputs;

import com.pulumi.azurenative.insights.enums.ScaleDirection;
import com.pulumi.azurenative.insights.enums.ScaleType;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The parameters for the scaling action.
 * 
 */
public final class ScaleActionArgs extends com.pulumi.resources.ResourceArgs {

    public static final ScaleActionArgs Empty = new ScaleActionArgs();

    /**
     * the amount of time to wait since the last scaling action before this action occurs. It must be between 1 week and 1 minute in ISO 8601 format.
     * 
     */
    @Import(name="cooldown", required=true)
    private Output<String> cooldown;

    public Output<String> cooldown() {
        return this.cooldown;
    }

    /**
     * the scale direction. Whether the scaling action increases or decreases the number of instances.
     * 
     */
    @Import(name="direction", required=true)
    private Output<ScaleDirection> direction;

    public Output<ScaleDirection> direction() {
        return this.direction;
    }

    /**
     * the type of action that should occur when the scale rule fires.
     * 
     */
    @Import(name="type", required=true)
    private Output<ScaleType> type;

    public Output<ScaleType> type() {
        return this.type;
    }

    /**
     * the number of instances that are involved in the scaling action. This value must be 1 or greater. The default value is 1.
     * 
     */
    @Import(name="value")
    private @Nullable Output<String> value;

    public Optional<Output<String>> value() {
        return Optional.ofNullable(this.value);
    }

    private ScaleActionArgs() {}

    private ScaleActionArgs(ScaleActionArgs $) {
        this.cooldown = $.cooldown;
        this.direction = $.direction;
        this.type = $.type;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ScaleActionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ScaleActionArgs $;

        public Builder() {
            $ = new ScaleActionArgs();
        }

        public Builder(ScaleActionArgs defaults) {
            $ = new ScaleActionArgs(Objects.requireNonNull(defaults));
        }

        public Builder cooldown(Output<String> cooldown) {
            $.cooldown = cooldown;
            return this;
        }

        public Builder cooldown(String cooldown) {
            return cooldown(Output.of(cooldown));
        }

        public Builder direction(Output<ScaleDirection> direction) {
            $.direction = direction;
            return this;
        }

        public Builder direction(ScaleDirection direction) {
            return direction(Output.of(direction));
        }

        public Builder type(Output<ScaleType> type) {
            $.type = type;
            return this;
        }

        public Builder type(ScaleType type) {
            return type(Output.of(type));
        }

        public Builder value(@Nullable Output<String> value) {
            $.value = value;
            return this;
        }

        public Builder value(String value) {
            return value(Output.of(value));
        }

        public ScaleActionArgs build() {
            $.cooldown = Objects.requireNonNull($.cooldown, "expected parameter 'cooldown' to be non-null");
            $.direction = Objects.requireNonNull($.direction, "expected parameter 'direction' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            $.value = Codegen.stringProp("value").output().arg($.value).def("1").getNullable();
            return $;
        }
    }

}
