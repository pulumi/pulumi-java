// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.keyvault.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The attributes of the key.
 * 
 */
public final class KeyAttributesResponse extends com.pulumi.resources.InvokeArgs {

    public static final KeyAttributesResponse Empty = new KeyAttributesResponse();

    /**
     * Creation time in seconds since 1970-01-01T00:00:00Z.
     * 
     */
    @Import(name="created", required=true)
    private Double created;

    /**
     * @return Creation time in seconds since 1970-01-01T00:00:00Z.
     * 
     */
    public Double created() {
        return this.created;
    }

    /**
     * Determines whether or not the object is enabled.
     * 
     */
    @Import(name="enabled")
    private @Nullable Boolean enabled;

    /**
     * @return Determines whether or not the object is enabled.
     * 
     */
    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Expiry date in seconds since 1970-01-01T00:00:00Z.
     * 
     */
    @Import(name="expires")
    private @Nullable Double expires;

    /**
     * @return Expiry date in seconds since 1970-01-01T00:00:00Z.
     * 
     */
    public Optional<Double> expires() {
        return Optional.ofNullable(this.expires);
    }

    /**
     * Not before date in seconds since 1970-01-01T00:00:00Z.
     * 
     */
    @Import(name="notBefore")
    private @Nullable Double notBefore;

    /**
     * @return Not before date in seconds since 1970-01-01T00:00:00Z.
     * 
     */
    public Optional<Double> notBefore() {
        return Optional.ofNullable(this.notBefore);
    }

    /**
     * The deletion recovery level currently in effect for the object. If it contains &#39;Purgeable&#39;, then the object can be permanently deleted by a privileged user; otherwise, only the system can purge the object at the end of the retention interval.
     * 
     */
    @Import(name="recoveryLevel", required=true)
    private String recoveryLevel;

    /**
     * @return The deletion recovery level currently in effect for the object. If it contains &#39;Purgeable&#39;, then the object can be permanently deleted by a privileged user; otherwise, only the system can purge the object at the end of the retention interval.
     * 
     */
    public String recoveryLevel() {
        return this.recoveryLevel;
    }

    /**
     * Last updated time in seconds since 1970-01-01T00:00:00Z.
     * 
     */
    @Import(name="updated", required=true)
    private Double updated;

    /**
     * @return Last updated time in seconds since 1970-01-01T00:00:00Z.
     * 
     */
    public Double updated() {
        return this.updated;
    }

    private KeyAttributesResponse() {}

    private KeyAttributesResponse(KeyAttributesResponse $) {
        this.created = $.created;
        this.enabled = $.enabled;
        this.expires = $.expires;
        this.notBefore = $.notBefore;
        this.recoveryLevel = $.recoveryLevel;
        this.updated = $.updated;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KeyAttributesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KeyAttributesResponse $;

        public Builder() {
            $ = new KeyAttributesResponse();
        }

        public Builder(KeyAttributesResponse defaults) {
            $ = new KeyAttributesResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param created Creation time in seconds since 1970-01-01T00:00:00Z.
         * 
         * @return builder
         * 
         */
        public Builder created(Double created) {
            $.created = created;
            return this;
        }

        /**
         * @param enabled Determines whether or not the object is enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Boolean enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param expires Expiry date in seconds since 1970-01-01T00:00:00Z.
         * 
         * @return builder
         * 
         */
        public Builder expires(@Nullable Double expires) {
            $.expires = expires;
            return this;
        }

        /**
         * @param notBefore Not before date in seconds since 1970-01-01T00:00:00Z.
         * 
         * @return builder
         * 
         */
        public Builder notBefore(@Nullable Double notBefore) {
            $.notBefore = notBefore;
            return this;
        }

        /**
         * @param recoveryLevel The deletion recovery level currently in effect for the object. If it contains &#39;Purgeable&#39;, then the object can be permanently deleted by a privileged user; otherwise, only the system can purge the object at the end of the retention interval.
         * 
         * @return builder
         * 
         */
        public Builder recoveryLevel(String recoveryLevel) {
            $.recoveryLevel = recoveryLevel;
            return this;
        }

        /**
         * @param updated Last updated time in seconds since 1970-01-01T00:00:00Z.
         * 
         * @return builder
         * 
         */
        public Builder updated(Double updated) {
            $.updated = updated;
            return this;
        }

        public KeyAttributesResponse build() {
            $.created = Objects.requireNonNull($.created, "expected parameter 'created' to be non-null");
            $.recoveryLevel = Objects.requireNonNull($.recoveryLevel, "expected parameter 'recoveryLevel' to be non-null");
            $.updated = Objects.requireNonNull($.updated, "expected parameter 'updated' to be non-null");
            return $;
        }
    }

}
