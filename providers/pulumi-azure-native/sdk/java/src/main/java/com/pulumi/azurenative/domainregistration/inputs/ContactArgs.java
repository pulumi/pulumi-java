// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.domainregistration.inputs;

import com.pulumi.azurenative.domainregistration.inputs.AddressArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Contact information for domain registration. If &#39;Domain Privacy&#39; option is not selected then the contact information is made publicly available through the Whois
 * directories as per ICANN requirements.
 * 
 */
public final class ContactArgs extends com.pulumi.resources.ResourceArgs {

    public static final ContactArgs Empty = new ContactArgs();

    /**
     * Mailing address.
     * 
     */
    @Import(name="addressMailing")
    private @Nullable Output<AddressArgs> addressMailing;

    /**
     * @return Mailing address.
     * 
     */
    public Optional<Output<AddressArgs>> addressMailing() {
        return Optional.ofNullable(this.addressMailing);
    }

    /**
     * Email address.
     * 
     */
    @Import(name="email", required=true)
    private Output<String> email;

    /**
     * @return Email address.
     * 
     */
    public Output<String> email() {
        return this.email;
    }

    /**
     * Fax number.
     * 
     */
    @Import(name="fax")
    private @Nullable Output<String> fax;

    /**
     * @return Fax number.
     * 
     */
    public Optional<Output<String>> fax() {
        return Optional.ofNullable(this.fax);
    }

    /**
     * Job title.
     * 
     */
    @Import(name="jobTitle")
    private @Nullable Output<String> jobTitle;

    /**
     * @return Job title.
     * 
     */
    public Optional<Output<String>> jobTitle() {
        return Optional.ofNullable(this.jobTitle);
    }

    /**
     * First name.
     * 
     */
    @Import(name="nameFirst", required=true)
    private Output<String> nameFirst;

    /**
     * @return First name.
     * 
     */
    public Output<String> nameFirst() {
        return this.nameFirst;
    }

    /**
     * Last name.
     * 
     */
    @Import(name="nameLast", required=true)
    private Output<String> nameLast;

    /**
     * @return Last name.
     * 
     */
    public Output<String> nameLast() {
        return this.nameLast;
    }

    /**
     * Middle name.
     * 
     */
    @Import(name="nameMiddle")
    private @Nullable Output<String> nameMiddle;

    /**
     * @return Middle name.
     * 
     */
    public Optional<Output<String>> nameMiddle() {
        return Optional.ofNullable(this.nameMiddle);
    }

    /**
     * Organization contact belongs to.
     * 
     */
    @Import(name="organization")
    private @Nullable Output<String> organization;

    /**
     * @return Organization contact belongs to.
     * 
     */
    public Optional<Output<String>> organization() {
        return Optional.ofNullable(this.organization);
    }

    /**
     * Phone number.
     * 
     */
    @Import(name="phone", required=true)
    private Output<String> phone;

    /**
     * @return Phone number.
     * 
     */
    public Output<String> phone() {
        return this.phone;
    }

    private ContactArgs() {}

    private ContactArgs(ContactArgs $) {
        this.addressMailing = $.addressMailing;
        this.email = $.email;
        this.fax = $.fax;
        this.jobTitle = $.jobTitle;
        this.nameFirst = $.nameFirst;
        this.nameLast = $.nameLast;
        this.nameMiddle = $.nameMiddle;
        this.organization = $.organization;
        this.phone = $.phone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContactArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContactArgs $;

        public Builder() {
            $ = new ContactArgs();
        }

        public Builder(ContactArgs defaults) {
            $ = new ContactArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param addressMailing Mailing address.
         * 
         * @return builder
         * 
         */
        public Builder addressMailing(@Nullable Output<AddressArgs> addressMailing) {
            $.addressMailing = addressMailing;
            return this;
        }

        /**
         * @param addressMailing Mailing address.
         * 
         * @return builder
         * 
         */
        public Builder addressMailing(AddressArgs addressMailing) {
            return addressMailing(Output.of(addressMailing));
        }

        /**
         * @param email Email address.
         * 
         * @return builder
         * 
         */
        public Builder email(Output<String> email) {
            $.email = email;
            return this;
        }

        /**
         * @param email Email address.
         * 
         * @return builder
         * 
         */
        public Builder email(String email) {
            return email(Output.of(email));
        }

        /**
         * @param fax Fax number.
         * 
         * @return builder
         * 
         */
        public Builder fax(@Nullable Output<String> fax) {
            $.fax = fax;
            return this;
        }

        /**
         * @param fax Fax number.
         * 
         * @return builder
         * 
         */
        public Builder fax(String fax) {
            return fax(Output.of(fax));
        }

        /**
         * @param jobTitle Job title.
         * 
         * @return builder
         * 
         */
        public Builder jobTitle(@Nullable Output<String> jobTitle) {
            $.jobTitle = jobTitle;
            return this;
        }

        /**
         * @param jobTitle Job title.
         * 
         * @return builder
         * 
         */
        public Builder jobTitle(String jobTitle) {
            return jobTitle(Output.of(jobTitle));
        }

        /**
         * @param nameFirst First name.
         * 
         * @return builder
         * 
         */
        public Builder nameFirst(Output<String> nameFirst) {
            $.nameFirst = nameFirst;
            return this;
        }

        /**
         * @param nameFirst First name.
         * 
         * @return builder
         * 
         */
        public Builder nameFirst(String nameFirst) {
            return nameFirst(Output.of(nameFirst));
        }

        /**
         * @param nameLast Last name.
         * 
         * @return builder
         * 
         */
        public Builder nameLast(Output<String> nameLast) {
            $.nameLast = nameLast;
            return this;
        }

        /**
         * @param nameLast Last name.
         * 
         * @return builder
         * 
         */
        public Builder nameLast(String nameLast) {
            return nameLast(Output.of(nameLast));
        }

        /**
         * @param nameMiddle Middle name.
         * 
         * @return builder
         * 
         */
        public Builder nameMiddle(@Nullable Output<String> nameMiddle) {
            $.nameMiddle = nameMiddle;
            return this;
        }

        /**
         * @param nameMiddle Middle name.
         * 
         * @return builder
         * 
         */
        public Builder nameMiddle(String nameMiddle) {
            return nameMiddle(Output.of(nameMiddle));
        }

        /**
         * @param organization Organization contact belongs to.
         * 
         * @return builder
         * 
         */
        public Builder organization(@Nullable Output<String> organization) {
            $.organization = organization;
            return this;
        }

        /**
         * @param organization Organization contact belongs to.
         * 
         * @return builder
         * 
         */
        public Builder organization(String organization) {
            return organization(Output.of(organization));
        }

        /**
         * @param phone Phone number.
         * 
         * @return builder
         * 
         */
        public Builder phone(Output<String> phone) {
            $.phone = phone;
            return this;
        }

        /**
         * @param phone Phone number.
         * 
         * @return builder
         * 
         */
        public Builder phone(String phone) {
            return phone(Output.of(phone));
        }

        public ContactArgs build() {
            $.email = Objects.requireNonNull($.email, "expected parameter 'email' to be non-null");
            $.nameFirst = Objects.requireNonNull($.nameFirst, "expected parameter 'nameFirst' to be non-null");
            $.nameLast = Objects.requireNonNull($.nameLast, "expected parameter 'nameLast' to be non-null");
            $.phone = Objects.requireNonNull($.phone, "expected parameter 'phone' to be non-null");
            return $;
        }
    }

}
