// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.automation;

import com.pulumi.azurenative.automation.enums.SourceType;
import com.pulumi.azurenative.automation.inputs.SourceControlSecurityTokenPropertiesArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SourceControlArgs extends com.pulumi.resources.ResourceArgs {

    public static final SourceControlArgs Empty = new SourceControlArgs();

    /**
     * The auto async of the source control. Default is false.
     * 
     */
    @Import(name="autoSync")
    private @Nullable Output<Boolean> autoSync;

    public Optional<Output<Boolean>> autoSync() {
        return Optional.ofNullable(this.autoSync);
    }

    /**
     * The name of the automation account.
     * 
     */
    @Import(name="automationAccountName", required=true)
    private Output<String> automationAccountName;

    public Output<String> automationAccountName() {
        return this.automationAccountName;
    }

    /**
     * The repo branch of the source control. Include branch as empty string for VsoTfvc.
     * 
     */
    @Import(name="branch")
    private @Nullable Output<String> branch;

    public Optional<Output<String>> branch() {
        return Optional.ofNullable(this.branch);
    }

    /**
     * The user description of the source control.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The folder path of the source control. Path must be relative.
     * 
     */
    @Import(name="folderPath")
    private @Nullable Output<String> folderPath;

    public Optional<Output<String>> folderPath() {
        return Optional.ofNullable(this.folderPath);
    }

    /**
     * The auto publish of the source control. Default is true.
     * 
     */
    @Import(name="publishRunbook")
    private @Nullable Output<Boolean> publishRunbook;

    public Optional<Output<Boolean>> publishRunbook() {
        return Optional.ofNullable(this.publishRunbook);
    }

    /**
     * The repo url of the source control.
     * 
     */
    @Import(name="repoUrl")
    private @Nullable Output<String> repoUrl;

    public Optional<Output<String>> repoUrl() {
        return Optional.ofNullable(this.repoUrl);
    }

    /**
     * Name of an Azure Resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The authorization token for the repo of the source control.
     * 
     */
    @Import(name="securityToken")
    private @Nullable Output<SourceControlSecurityTokenPropertiesArgs> securityToken;

    public Optional<Output<SourceControlSecurityTokenPropertiesArgs>> securityToken() {
        return Optional.ofNullable(this.securityToken);
    }

    /**
     * The source control name.
     * 
     */
    @Import(name="sourceControlName")
    private @Nullable Output<String> sourceControlName;

    public Optional<Output<String>> sourceControlName() {
        return Optional.ofNullable(this.sourceControlName);
    }

    /**
     * The source type. Must be one of VsoGit, VsoTfvc, GitHub, case sensitive.
     * 
     */
    @Import(name="sourceType")
    private @Nullable Output<Either<String,SourceType>> sourceType;

    public Optional<Output<Either<String,SourceType>>> sourceType() {
        return Optional.ofNullable(this.sourceType);
    }

    private SourceControlArgs() {}

    private SourceControlArgs(SourceControlArgs $) {
        this.autoSync = $.autoSync;
        this.automationAccountName = $.automationAccountName;
        this.branch = $.branch;
        this.description = $.description;
        this.folderPath = $.folderPath;
        this.publishRunbook = $.publishRunbook;
        this.repoUrl = $.repoUrl;
        this.resourceGroupName = $.resourceGroupName;
        this.securityToken = $.securityToken;
        this.sourceControlName = $.sourceControlName;
        this.sourceType = $.sourceType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SourceControlArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SourceControlArgs $;

        public Builder() {
            $ = new SourceControlArgs();
        }

        public Builder(SourceControlArgs defaults) {
            $ = new SourceControlArgs(Objects.requireNonNull(defaults));
        }

        public Builder autoSync(@Nullable Output<Boolean> autoSync) {
            $.autoSync = autoSync;
            return this;
        }

        public Builder autoSync(Boolean autoSync) {
            return autoSync(Output.of(autoSync));
        }

        public Builder automationAccountName(Output<String> automationAccountName) {
            $.automationAccountName = automationAccountName;
            return this;
        }

        public Builder automationAccountName(String automationAccountName) {
            return automationAccountName(Output.of(automationAccountName));
        }

        public Builder branch(@Nullable Output<String> branch) {
            $.branch = branch;
            return this;
        }

        public Builder branch(String branch) {
            return branch(Output.of(branch));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder folderPath(@Nullable Output<String> folderPath) {
            $.folderPath = folderPath;
            return this;
        }

        public Builder folderPath(String folderPath) {
            return folderPath(Output.of(folderPath));
        }

        public Builder publishRunbook(@Nullable Output<Boolean> publishRunbook) {
            $.publishRunbook = publishRunbook;
            return this;
        }

        public Builder publishRunbook(Boolean publishRunbook) {
            return publishRunbook(Output.of(publishRunbook));
        }

        public Builder repoUrl(@Nullable Output<String> repoUrl) {
            $.repoUrl = repoUrl;
            return this;
        }

        public Builder repoUrl(String repoUrl) {
            return repoUrl(Output.of(repoUrl));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder securityToken(@Nullable Output<SourceControlSecurityTokenPropertiesArgs> securityToken) {
            $.securityToken = securityToken;
            return this;
        }

        public Builder securityToken(SourceControlSecurityTokenPropertiesArgs securityToken) {
            return securityToken(Output.of(securityToken));
        }

        public Builder sourceControlName(@Nullable Output<String> sourceControlName) {
            $.sourceControlName = sourceControlName;
            return this;
        }

        public Builder sourceControlName(String sourceControlName) {
            return sourceControlName(Output.of(sourceControlName));
        }

        public Builder sourceType(@Nullable Output<Either<String,SourceType>> sourceType) {
            $.sourceType = sourceType;
            return this;
        }

        public Builder sourceType(Either<String,SourceType> sourceType) {
            return sourceType(Output.of(sourceType));
        }

        public SourceControlArgs build() {
            $.automationAccountName = Objects.requireNonNull($.automationAccountName, "expected parameter 'automationAccountName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
