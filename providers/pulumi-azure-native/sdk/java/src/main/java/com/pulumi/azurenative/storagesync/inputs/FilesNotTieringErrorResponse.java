// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.storagesync.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.Integer;
import java.util.Objects;


/**
 * Files not tiering error object
 * 
 */
public final class FilesNotTieringErrorResponse extends com.pulumi.resources.InvokeArgs {

    public static final FilesNotTieringErrorResponse Empty = new FilesNotTieringErrorResponse();

    /**
     * Error code (HResult)
     * 
     */
    @Import(name="errorCode", required=true)
    private Integer errorCode;

    /**
     * @return Error code (HResult)
     * 
     */
    public Integer errorCode() {
        return this.errorCode;
    }

    /**
     * Count of files with this error
     * 
     */
    @Import(name="fileCount", required=true)
    private Double fileCount;

    /**
     * @return Count of files with this error
     * 
     */
    public Double fileCount() {
        return this.fileCount;
    }

    private FilesNotTieringErrorResponse() {}

    private FilesNotTieringErrorResponse(FilesNotTieringErrorResponse $) {
        this.errorCode = $.errorCode;
        this.fileCount = $.fileCount;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FilesNotTieringErrorResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FilesNotTieringErrorResponse $;

        public Builder() {
            $ = new FilesNotTieringErrorResponse();
        }

        public Builder(FilesNotTieringErrorResponse defaults) {
            $ = new FilesNotTieringErrorResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param errorCode Error code (HResult)
         * 
         * @return builder
         * 
         */
        public Builder errorCode(Integer errorCode) {
            $.errorCode = errorCode;
            return this;
        }

        /**
         * @param fileCount Count of files with this error
         * 
         * @return builder
         * 
         */
        public Builder fileCount(Double fileCount) {
            $.fileCount = fileCount;
            return this;
        }

        public FilesNotTieringErrorResponse build() {
            $.errorCode = Objects.requireNonNull($.errorCode, "expected parameter 'errorCode' to be non-null");
            $.fileCount = Objects.requireNonNull($.fileCount, "expected parameter 'fileCount' to be non-null");
            return $;
        }
    }

}
