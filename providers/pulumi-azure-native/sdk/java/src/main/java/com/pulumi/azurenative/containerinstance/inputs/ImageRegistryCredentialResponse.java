// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.containerinstance.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Image registry credential.
 * 
 */
public final class ImageRegistryCredentialResponse extends com.pulumi.resources.InvokeArgs {

    public static final ImageRegistryCredentialResponse Empty = new ImageRegistryCredentialResponse();

    /**
     * The password for the private registry.
     * 
     */
    @Import(name="password")
    private @Nullable String password;

    public Optional<String> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * The Docker image registry server without a protocol such as &#34;http&#34; and &#34;https&#34;.
     * 
     */
    @Import(name="server", required=true)
    private String server;

    public String server() {
        return this.server;
    }

    /**
     * The username for the private registry.
     * 
     */
    @Import(name="username", required=true)
    private String username;

    public String username() {
        return this.username;
    }

    private ImageRegistryCredentialResponse() {}

    private ImageRegistryCredentialResponse(ImageRegistryCredentialResponse $) {
        this.password = $.password;
        this.server = $.server;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ImageRegistryCredentialResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ImageRegistryCredentialResponse $;

        public Builder() {
            $ = new ImageRegistryCredentialResponse();
        }

        public Builder(ImageRegistryCredentialResponse defaults) {
            $ = new ImageRegistryCredentialResponse(Objects.requireNonNull(defaults));
        }

        public Builder password(@Nullable String password) {
            $.password = password;
            return this;
        }

        public Builder server(String server) {
            $.server = server;
            return this;
        }

        public Builder username(String username) {
            $.username = username;
            return this;
        }

        public ImageRegistryCredentialResponse build() {
            $.server = Objects.requireNonNull($.server, "expected parameter 'server' to be non-null");
            $.username = Objects.requireNonNull($.username, "expected parameter 'username' to be non-null");
            return $;
        }
    }

}
