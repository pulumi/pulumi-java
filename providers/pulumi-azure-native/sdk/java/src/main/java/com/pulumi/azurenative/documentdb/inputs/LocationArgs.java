// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.documentdb.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * A region in which the Azure Cosmos DB database account is deployed.
 * 
 */
public final class LocationArgs extends com.pulumi.resources.ResourceArgs {

    public static final LocationArgs Empty = new LocationArgs();

    /**
     * The failover priority of the region. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists.
     * 
     */
    @Import(name="failoverPriority")
      private final @Nullable Output<Integer> failoverPriority;

    public Output<Integer> failoverPriority() {
        return this.failoverPriority == null ? Codegen.empty() : this.failoverPriority;
    }

    /**
     * Flag to indicate whether or not this region is an AvailabilityZone region
     * 
     */
    @Import(name="isZoneRedundant")
      private final @Nullable Output<Boolean> isZoneRedundant;

    public Output<Boolean> isZoneRedundant() {
        return this.isZoneRedundant == null ? Codegen.empty() : this.isZoneRedundant;
    }

    /**
     * The name of the region.
     * 
     */
    @Import(name="locationName")
      private final @Nullable Output<String> locationName;

    public Output<String> locationName() {
        return this.locationName == null ? Codegen.empty() : this.locationName;
    }

    public LocationArgs(
        @Nullable Output<Integer> failoverPriority,
        @Nullable Output<Boolean> isZoneRedundant,
        @Nullable Output<String> locationName) {
        this.failoverPriority = failoverPriority;
        this.isZoneRedundant = isZoneRedundant;
        this.locationName = locationName;
    }

    private LocationArgs() {
        this.failoverPriority = Codegen.empty();
        this.isZoneRedundant = Codegen.empty();
        this.locationName = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LocationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Integer> failoverPriority;
        private @Nullable Output<Boolean> isZoneRedundant;
        private @Nullable Output<String> locationName;

        public Builder() {
    	      // Empty
        }

        public Builder(LocationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.failoverPriority = defaults.failoverPriority;
    	      this.isZoneRedundant = defaults.isZoneRedundant;
    	      this.locationName = defaults.locationName;
        }

        public Builder failoverPriority(@Nullable Output<Integer> failoverPriority) {
            this.failoverPriority = failoverPriority;
            return this;
        }
        public Builder failoverPriority(@Nullable Integer failoverPriority) {
            this.failoverPriority = Codegen.ofNullable(failoverPriority);
            return this;
        }
        public Builder isZoneRedundant(@Nullable Output<Boolean> isZoneRedundant) {
            this.isZoneRedundant = isZoneRedundant;
            return this;
        }
        public Builder isZoneRedundant(@Nullable Boolean isZoneRedundant) {
            this.isZoneRedundant = Codegen.ofNullable(isZoneRedundant);
            return this;
        }
        public Builder locationName(@Nullable Output<String> locationName) {
            this.locationName = locationName;
            return this;
        }
        public Builder locationName(@Nullable String locationName) {
            this.locationName = Codegen.ofNullable(locationName);
            return this;
        }        public LocationArgs build() {
            return new LocationArgs(failoverPriority, isZoneRedundant, locationName);
        }
    }
}
