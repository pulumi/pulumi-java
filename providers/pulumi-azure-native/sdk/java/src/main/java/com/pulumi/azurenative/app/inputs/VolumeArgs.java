// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.app.inputs;

import com.pulumi.azurenative.app.enums.StorageType;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Volume definitions for the Container App.
 * 
 */
public final class VolumeArgs extends com.pulumi.resources.ResourceArgs {

    public static final VolumeArgs Empty = new VolumeArgs();

    /**
     * Volume name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Volume name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Name of storage resource. No need to provide for EmptyDir.
     * 
     */
    @Import(name="storageName")
    private @Nullable Output<String> storageName;

    /**
     * @return Name of storage resource. No need to provide for EmptyDir.
     * 
     */
    public Optional<Output<String>> storageName() {
        return Optional.ofNullable(this.storageName);
    }

    /**
     * Storage type for the volume. If not provided, use EmptyDir.
     * 
     */
    @Import(name="storageType")
    private @Nullable Output<Either<String,StorageType>> storageType;

    /**
     * @return Storage type for the volume. If not provided, use EmptyDir.
     * 
     */
    public Optional<Output<Either<String,StorageType>>> storageType() {
        return Optional.ofNullable(this.storageType);
    }

    private VolumeArgs() {}

    private VolumeArgs(VolumeArgs $) {
        this.name = $.name;
        this.storageName = $.storageName;
        this.storageType = $.storageType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VolumeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VolumeArgs $;

        public Builder() {
            $ = new VolumeArgs();
        }

        public Builder(VolumeArgs defaults) {
            $ = new VolumeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param name Volume name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Volume name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param storageName Name of storage resource. No need to provide for EmptyDir.
         * 
         * @return builder
         * 
         */
        public Builder storageName(@Nullable Output<String> storageName) {
            $.storageName = storageName;
            return this;
        }

        /**
         * @param storageName Name of storage resource. No need to provide for EmptyDir.
         * 
         * @return builder
         * 
         */
        public Builder storageName(String storageName) {
            return storageName(Output.of(storageName));
        }

        /**
         * @param storageType Storage type for the volume. If not provided, use EmptyDir.
         * 
         * @return builder
         * 
         */
        public Builder storageType(@Nullable Output<Either<String,StorageType>> storageType) {
            $.storageType = storageType;
            return this;
        }

        /**
         * @param storageType Storage type for the volume. If not provided, use EmptyDir.
         * 
         * @return builder
         * 
         */
        public Builder storageType(Either<String,StorageType> storageType) {
            return storageType(Output.of(storageType));
        }

        /**
         * @param storageType Storage type for the volume. If not provided, use EmptyDir.
         * 
         * @return builder
         * 
         */
        public Builder storageType(String storageType) {
            return storageType(Either.ofLeft(storageType));
        }

        /**
         * @param storageType Storage type for the volume. If not provided, use EmptyDir.
         * 
         * @return builder
         * 
         */
        public Builder storageType(StorageType storageType) {
            return storageType(Either.ofRight(storageType));
        }

        public VolumeArgs build() {
            return $;
        }
    }

}
