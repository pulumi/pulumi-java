// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.education;

import com.pulumi.azurenative.education.enums.StudentRole;
import com.pulumi.azurenative.education.inputs.AmountArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetStudentArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetStudentArgs Empty = new GetStudentArgs();

    /**
     * Billing account name.
     * 
     */
    @Import(name="billingAccountName", required=true)
    private Output<String> billingAccountName;

    /**
     * @return Billing account name.
     * 
     */
    public Output<String> billingAccountName() {
        return this.billingAccountName;
    }

    /**
     * Billing profile name.
     * 
     */
    @Import(name="billingProfileName", required=true)
    private Output<String> billingProfileName;

    /**
     * @return Billing profile name.
     * 
     */
    public Output<String> billingProfileName() {
        return this.billingProfileName;
    }

    /**
     * Student Budget
     * 
     */
    @Import(name="budget", required=true)
    private Output<AmountArgs> budget;

    /**
     * @return Student Budget
     * 
     */
    public Output<AmountArgs> budget() {
        return this.budget;
    }

    /**
     * Student Email
     * 
     */
    @Import(name="email", required=true)
    private Output<String> email;

    /**
     * @return Student Email
     * 
     */
    public Output<String> email() {
        return this.email;
    }

    /**
     * Date this student is set to expire from the lab.
     * 
     */
    @Import(name="expirationDate", required=true)
    private Output<String> expirationDate;

    /**
     * @return Date this student is set to expire from the lab.
     * 
     */
    public Output<String> expirationDate() {
        return this.expirationDate;
    }

    /**
     * First Name
     * 
     */
    @Import(name="firstName", required=true)
    private Output<String> firstName;

    /**
     * @return First Name
     * 
     */
    public Output<String> firstName() {
        return this.firstName;
    }

    /**
     * Invoice section name.
     * 
     */
    @Import(name="invoiceSectionName", required=true)
    private Output<String> invoiceSectionName;

    /**
     * @return Invoice section name.
     * 
     */
    public Output<String> invoiceSectionName() {
        return this.invoiceSectionName;
    }

    /**
     * Last Name
     * 
     */
    @Import(name="lastName", required=true)
    private Output<String> lastName;

    /**
     * @return Last Name
     * 
     */
    public Output<String> lastName() {
        return this.lastName;
    }

    /**
     * Student Role
     * 
     */
    @Import(name="role", required=true)
    private Output<Either<String,StudentRole>> role;

    /**
     * @return Student Role
     * 
     */
    public Output<Either<String,StudentRole>> role() {
        return this.role;
    }

    /**
     * Student alias.
     * 
     */
    @Import(name="studentAlias")
    private @Nullable Output<String> studentAlias;

    /**
     * @return Student alias.
     * 
     */
    public Optional<Output<String>> studentAlias() {
        return Optional.ofNullable(this.studentAlias);
    }

    /**
     * Subscription alias
     * 
     */
    @Import(name="subscriptionAlias")
    private @Nullable Output<String> subscriptionAlias;

    /**
     * @return Subscription alias
     * 
     */
    public Optional<Output<String>> subscriptionAlias() {
        return Optional.ofNullable(this.subscriptionAlias);
    }

    /**
     * subscription invite last sent date
     * 
     */
    @Import(name="subscriptionInviteLastSentDate")
    private @Nullable Output<String> subscriptionInviteLastSentDate;

    /**
     * @return subscription invite last sent date
     * 
     */
    public Optional<Output<String>> subscriptionInviteLastSentDate() {
        return Optional.ofNullable(this.subscriptionInviteLastSentDate);
    }

    private GetStudentArgs() {}

    private GetStudentArgs(GetStudentArgs $) {
        this.billingAccountName = $.billingAccountName;
        this.billingProfileName = $.billingProfileName;
        this.budget = $.budget;
        this.email = $.email;
        this.expirationDate = $.expirationDate;
        this.firstName = $.firstName;
        this.invoiceSectionName = $.invoiceSectionName;
        this.lastName = $.lastName;
        this.role = $.role;
        this.studentAlias = $.studentAlias;
        this.subscriptionAlias = $.subscriptionAlias;
        this.subscriptionInviteLastSentDate = $.subscriptionInviteLastSentDate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetStudentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetStudentArgs $;

        public Builder() {
            $ = new GetStudentArgs();
        }

        public Builder(GetStudentArgs defaults) {
            $ = new GetStudentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param billingAccountName Billing account name.
         * 
         * @return builder
         * 
         */
        public Builder billingAccountName(Output<String> billingAccountName) {
            $.billingAccountName = billingAccountName;
            return this;
        }

        /**
         * @param billingAccountName Billing account name.
         * 
         * @return builder
         * 
         */
        public Builder billingAccountName(String billingAccountName) {
            return billingAccountName(Output.of(billingAccountName));
        }

        /**
         * @param billingProfileName Billing profile name.
         * 
         * @return builder
         * 
         */
        public Builder billingProfileName(Output<String> billingProfileName) {
            $.billingProfileName = billingProfileName;
            return this;
        }

        /**
         * @param billingProfileName Billing profile name.
         * 
         * @return builder
         * 
         */
        public Builder billingProfileName(String billingProfileName) {
            return billingProfileName(Output.of(billingProfileName));
        }

        /**
         * @param budget Student Budget
         * 
         * @return builder
         * 
         */
        public Builder budget(Output<AmountArgs> budget) {
            $.budget = budget;
            return this;
        }

        /**
         * @param budget Student Budget
         * 
         * @return builder
         * 
         */
        public Builder budget(AmountArgs budget) {
            return budget(Output.of(budget));
        }

        /**
         * @param email Student Email
         * 
         * @return builder
         * 
         */
        public Builder email(Output<String> email) {
            $.email = email;
            return this;
        }

        /**
         * @param email Student Email
         * 
         * @return builder
         * 
         */
        public Builder email(String email) {
            return email(Output.of(email));
        }

        /**
         * @param expirationDate Date this student is set to expire from the lab.
         * 
         * @return builder
         * 
         */
        public Builder expirationDate(Output<String> expirationDate) {
            $.expirationDate = expirationDate;
            return this;
        }

        /**
         * @param expirationDate Date this student is set to expire from the lab.
         * 
         * @return builder
         * 
         */
        public Builder expirationDate(String expirationDate) {
            return expirationDate(Output.of(expirationDate));
        }

        /**
         * @param firstName First Name
         * 
         * @return builder
         * 
         */
        public Builder firstName(Output<String> firstName) {
            $.firstName = firstName;
            return this;
        }

        /**
         * @param firstName First Name
         * 
         * @return builder
         * 
         */
        public Builder firstName(String firstName) {
            return firstName(Output.of(firstName));
        }

        /**
         * @param invoiceSectionName Invoice section name.
         * 
         * @return builder
         * 
         */
        public Builder invoiceSectionName(Output<String> invoiceSectionName) {
            $.invoiceSectionName = invoiceSectionName;
            return this;
        }

        /**
         * @param invoiceSectionName Invoice section name.
         * 
         * @return builder
         * 
         */
        public Builder invoiceSectionName(String invoiceSectionName) {
            return invoiceSectionName(Output.of(invoiceSectionName));
        }

        /**
         * @param lastName Last Name
         * 
         * @return builder
         * 
         */
        public Builder lastName(Output<String> lastName) {
            $.lastName = lastName;
            return this;
        }

        /**
         * @param lastName Last Name
         * 
         * @return builder
         * 
         */
        public Builder lastName(String lastName) {
            return lastName(Output.of(lastName));
        }

        /**
         * @param role Student Role
         * 
         * @return builder
         * 
         */
        public Builder role(Output<Either<String,StudentRole>> role) {
            $.role = role;
            return this;
        }

        /**
         * @param role Student Role
         * 
         * @return builder
         * 
         */
        public Builder role(Either<String,StudentRole> role) {
            return role(Output.of(role));
        }

        /**
         * @param role Student Role
         * 
         * @return builder
         * 
         */
        public Builder role(String role) {
            return role(Either.ofLeft(role));
        }

        /**
         * @param role Student Role
         * 
         * @return builder
         * 
         */
        public Builder role(StudentRole role) {
            return role(Either.ofRight(role));
        }

        /**
         * @param studentAlias Student alias.
         * 
         * @return builder
         * 
         */
        public Builder studentAlias(@Nullable Output<String> studentAlias) {
            $.studentAlias = studentAlias;
            return this;
        }

        /**
         * @param studentAlias Student alias.
         * 
         * @return builder
         * 
         */
        public Builder studentAlias(String studentAlias) {
            return studentAlias(Output.of(studentAlias));
        }

        /**
         * @param subscriptionAlias Subscription alias
         * 
         * @return builder
         * 
         */
        public Builder subscriptionAlias(@Nullable Output<String> subscriptionAlias) {
            $.subscriptionAlias = subscriptionAlias;
            return this;
        }

        /**
         * @param subscriptionAlias Subscription alias
         * 
         * @return builder
         * 
         */
        public Builder subscriptionAlias(String subscriptionAlias) {
            return subscriptionAlias(Output.of(subscriptionAlias));
        }

        /**
         * @param subscriptionInviteLastSentDate subscription invite last sent date
         * 
         * @return builder
         * 
         */
        public Builder subscriptionInviteLastSentDate(@Nullable Output<String> subscriptionInviteLastSentDate) {
            $.subscriptionInviteLastSentDate = subscriptionInviteLastSentDate;
            return this;
        }

        /**
         * @param subscriptionInviteLastSentDate subscription invite last sent date
         * 
         * @return builder
         * 
         */
        public Builder subscriptionInviteLastSentDate(String subscriptionInviteLastSentDate) {
            return subscriptionInviteLastSentDate(Output.of(subscriptionInviteLastSentDate));
        }

        public GetStudentArgs build() {
            $.billingAccountName = Objects.requireNonNull($.billingAccountName, "expected parameter 'billingAccountName' to be non-null");
            $.billingProfileName = Objects.requireNonNull($.billingProfileName, "expected parameter 'billingProfileName' to be non-null");
            $.budget = Objects.requireNonNull($.budget, "expected parameter 'budget' to be non-null");
            $.email = Objects.requireNonNull($.email, "expected parameter 'email' to be non-null");
            $.expirationDate = Objects.requireNonNull($.expirationDate, "expected parameter 'expirationDate' to be non-null");
            $.firstName = Objects.requireNonNull($.firstName, "expected parameter 'firstName' to be non-null");
            $.invoiceSectionName = Objects.requireNonNull($.invoiceSectionName, "expected parameter 'invoiceSectionName' to be non-null");
            $.lastName = Objects.requireNonNull($.lastName, "expected parameter 'lastName' to be non-null");
            $.role = Objects.requireNonNull($.role, "expected parameter 'role' to be non-null");
            return $;
        }
    }

}
