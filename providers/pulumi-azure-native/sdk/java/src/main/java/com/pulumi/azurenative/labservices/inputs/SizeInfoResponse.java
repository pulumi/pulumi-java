// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.labservices.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Contains detailed information about a size
 * 
 */
public final class SizeInfoResponse extends com.pulumi.resources.InvokeArgs {

    public static final SizeInfoResponse Empty = new SizeInfoResponse();

    /**
     * Represents the actual compute size, e.g. Standard_A2_v2.
     * 
     */
    @Import(name="computeSize")
    private @Nullable String computeSize;

    /**
     * @return Represents the actual compute size, e.g. Standard_A2_v2.
     * 
     */
    public Optional<String> computeSize() {
        return Optional.ofNullable(this.computeSize);
    }

    /**
     * The amount of memory available (in GB).
     * 
     */
    @Import(name="memory")
    private @Nullable Double memory;

    /**
     * @return The amount of memory available (in GB).
     * 
     */
    public Optional<Double> memory() {
        return Optional.ofNullable(this.memory);
    }

    /**
     * The number of cores a VM of this size has.
     * 
     */
    @Import(name="numberOfCores")
    private @Nullable Integer numberOfCores;

    /**
     * @return The number of cores a VM of this size has.
     * 
     */
    public Optional<Integer> numberOfCores() {
        return Optional.ofNullable(this.numberOfCores);
    }

    /**
     * The pay-as-you-go price per hour this size will cost. It does not include discounts and may not reflect the actual price the size will cost.
     * 
     */
    @Import(name="price")
    private @Nullable Double price;

    /**
     * @return The pay-as-you-go price per hour this size will cost. It does not include discounts and may not reflect the actual price the size will cost.
     * 
     */
    public Optional<Double> price() {
        return Optional.ofNullable(this.price);
    }

    private SizeInfoResponse() {}

    private SizeInfoResponse(SizeInfoResponse $) {
        this.computeSize = $.computeSize;
        this.memory = $.memory;
        this.numberOfCores = $.numberOfCores;
        this.price = $.price;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SizeInfoResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SizeInfoResponse $;

        public Builder() {
            $ = new SizeInfoResponse();
        }

        public Builder(SizeInfoResponse defaults) {
            $ = new SizeInfoResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param computeSize Represents the actual compute size, e.g. Standard_A2_v2.
         * 
         * @return builder
         * 
         */
        public Builder computeSize(@Nullable String computeSize) {
            $.computeSize = computeSize;
            return this;
        }

        /**
         * @param memory The amount of memory available (in GB).
         * 
         * @return builder
         * 
         */
        public Builder memory(@Nullable Double memory) {
            $.memory = memory;
            return this;
        }

        /**
         * @param numberOfCores The number of cores a VM of this size has.
         * 
         * @return builder
         * 
         */
        public Builder numberOfCores(@Nullable Integer numberOfCores) {
            $.numberOfCores = numberOfCores;
            return this;
        }

        /**
         * @param price The pay-as-you-go price per hour this size will cost. It does not include discounts and may not reflect the actual price the size will cost.
         * 
         * @return builder
         * 
         */
        public Builder price(@Nullable Double price) {
            $.price = price;
            return this;
        }

        public SizeInfoResponse build() {
            return $;
        }
    }

}
