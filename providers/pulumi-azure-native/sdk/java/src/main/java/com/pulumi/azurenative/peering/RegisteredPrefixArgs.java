// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.peering;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RegisteredPrefixArgs extends com.pulumi.resources.ResourceArgs {

    public static final RegisteredPrefixArgs Empty = new RegisteredPrefixArgs();

    /**
     * The name of the peering.
     * 
     */
    @Import(name="peeringName", required=true)
    private Output<String> peeringName;

    /**
     * @return The name of the peering.
     * 
     */
    public Output<String> peeringName() {
        return this.peeringName;
    }

    /**
     * The customer&#39;s prefix from which traffic originates.
     * 
     */
    @Import(name="prefix")
    private @Nullable Output<String> prefix;

    /**
     * @return The customer&#39;s prefix from which traffic originates.
     * 
     */
    public Optional<Output<String>> prefix() {
        return Optional.ofNullable(this.prefix);
    }

    /**
     * The name of the registered prefix.
     * 
     */
    @Import(name="registeredPrefixName")
    private @Nullable Output<String> registeredPrefixName;

    /**
     * @return The name of the registered prefix.
     * 
     */
    public Optional<Output<String>> registeredPrefixName() {
        return Optional.ofNullable(this.registeredPrefixName);
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    private RegisteredPrefixArgs() {}

    private RegisteredPrefixArgs(RegisteredPrefixArgs $) {
        this.peeringName = $.peeringName;
        this.prefix = $.prefix;
        this.registeredPrefixName = $.registeredPrefixName;
        this.resourceGroupName = $.resourceGroupName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RegisteredPrefixArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RegisteredPrefixArgs $;

        public Builder() {
            $ = new RegisteredPrefixArgs();
        }

        public Builder(RegisteredPrefixArgs defaults) {
            $ = new RegisteredPrefixArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param peeringName The name of the peering.
         * 
         * @return builder
         * 
         */
        public Builder peeringName(Output<String> peeringName) {
            $.peeringName = peeringName;
            return this;
        }

        /**
         * @param peeringName The name of the peering.
         * 
         * @return builder
         * 
         */
        public Builder peeringName(String peeringName) {
            return peeringName(Output.of(peeringName));
        }

        /**
         * @param prefix The customer&#39;s prefix from which traffic originates.
         * 
         * @return builder
         * 
         */
        public Builder prefix(@Nullable Output<String> prefix) {
            $.prefix = prefix;
            return this;
        }

        /**
         * @param prefix The customer&#39;s prefix from which traffic originates.
         * 
         * @return builder
         * 
         */
        public Builder prefix(String prefix) {
            return prefix(Output.of(prefix));
        }

        /**
         * @param registeredPrefixName The name of the registered prefix.
         * 
         * @return builder
         * 
         */
        public Builder registeredPrefixName(@Nullable Output<String> registeredPrefixName) {
            $.registeredPrefixName = registeredPrefixName;
            return this;
        }

        /**
         * @param registeredPrefixName The name of the registered prefix.
         * 
         * @return builder
         * 
         */
        public Builder registeredPrefixName(String registeredPrefixName) {
            return registeredPrefixName(Output.of(registeredPrefixName));
        }

        /**
         * @param resourceGroupName The name of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public RegisteredPrefixArgs build() {
            $.peeringName = Objects.requireNonNull($.peeringName, "expected parameter 'peeringName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
