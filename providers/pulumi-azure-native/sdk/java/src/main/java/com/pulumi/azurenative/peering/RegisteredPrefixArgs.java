// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.peering;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class RegisteredPrefixArgs extends com.pulumi.resources.ResourceArgs {

    public static final RegisteredPrefixArgs Empty = new RegisteredPrefixArgs();

    /**
     * The name of the peering.
     * 
     */
    @Import(name="peeringName", required=true)
      private final Output<String> peeringName;

    public Output<String> peeringName() {
        return this.peeringName;
    }

    /**
     * The customer's prefix from which traffic originates.
     * 
     */
    @Import(name="prefix")
      private final @Nullable Output<String> prefix;

    public Output<String> prefix() {
        return this.prefix == null ? Codegen.empty() : this.prefix;
    }

    /**
     * The name of the registered prefix.
     * 
     */
    @Import(name="registeredPrefixName")
      private final @Nullable Output<String> registeredPrefixName;

    public Output<String> registeredPrefixName() {
        return this.registeredPrefixName == null ? Codegen.empty() : this.registeredPrefixName;
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    public RegisteredPrefixArgs(
        Output<String> peeringName,
        @Nullable Output<String> prefix,
        @Nullable Output<String> registeredPrefixName,
        Output<String> resourceGroupName) {
        this.peeringName = Objects.requireNonNull(peeringName, "expected parameter 'peeringName' to be non-null");
        this.prefix = prefix;
        this.registeredPrefixName = registeredPrefixName;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
    }

    private RegisteredPrefixArgs() {
        this.peeringName = Codegen.empty();
        this.prefix = Codegen.empty();
        this.registeredPrefixName = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RegisteredPrefixArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> peeringName;
        private @Nullable Output<String> prefix;
        private @Nullable Output<String> registeredPrefixName;
        private Output<String> resourceGroupName;

        public Builder() {
    	      // Empty
        }

        public Builder(RegisteredPrefixArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.peeringName = defaults.peeringName;
    	      this.prefix = defaults.prefix;
    	      this.registeredPrefixName = defaults.registeredPrefixName;
    	      this.resourceGroupName = defaults.resourceGroupName;
        }

        public Builder peeringName(Output<String> peeringName) {
            this.peeringName = Objects.requireNonNull(peeringName);
            return this;
        }
        public Builder peeringName(String peeringName) {
            this.peeringName = Output.of(Objects.requireNonNull(peeringName));
            return this;
        }
        public Builder prefix(@Nullable Output<String> prefix) {
            this.prefix = prefix;
            return this;
        }
        public Builder prefix(@Nullable String prefix) {
            this.prefix = Codegen.ofNullable(prefix);
            return this;
        }
        public Builder registeredPrefixName(@Nullable Output<String> registeredPrefixName) {
            this.registeredPrefixName = registeredPrefixName;
            return this;
        }
        public Builder registeredPrefixName(@Nullable String registeredPrefixName) {
            this.registeredPrefixName = Codegen.ofNullable(registeredPrefixName);
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }        public RegisteredPrefixArgs build() {
            return new RegisteredPrefixArgs(peeringName, prefix, registeredPrefixName, resourceGroupName);
        }
    }
}
