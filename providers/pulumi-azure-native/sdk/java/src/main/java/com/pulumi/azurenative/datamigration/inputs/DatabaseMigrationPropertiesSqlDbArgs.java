// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datamigration.inputs;

import com.pulumi.azurenative.datamigration.inputs.SqlConnectionInformationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Database Migration Resource properties for SQL database.
 * 
 */
public final class DatabaseMigrationPropertiesSqlDbArgs extends com.pulumi.resources.ResourceArgs {

    public static final DatabaseMigrationPropertiesSqlDbArgs Empty = new DatabaseMigrationPropertiesSqlDbArgs();

    /**
     * Expected value is &#39;SqlDb&#39;.
     * 
     */
    @Import(name="kind", required=true)
    private Output<String> kind;

    /**
     * @return
     * Expected value is &#39;SqlDb&#39;.
     * 
     */
    public Output<String> kind() {
        return this.kind;
    }

    /**
     * ID tracking current migration operation.
     * 
     */
    @Import(name="migrationOperationId")
    private @Nullable Output<String> migrationOperationId;

    /**
     * @return ID tracking current migration operation.
     * 
     */
    public Optional<Output<String>> migrationOperationId() {
        return Optional.ofNullable(this.migrationOperationId);
    }

    /**
     * Resource Id of the Migration Service.
     * 
     */
    @Import(name="migrationService")
    private @Nullable Output<String> migrationService;

    /**
     * @return Resource Id of the Migration Service.
     * 
     */
    public Optional<Output<String>> migrationService() {
        return Optional.ofNullable(this.migrationService);
    }

    /**
     * Error message for migration provisioning failure, if any.
     * 
     */
    @Import(name="provisioningError")
    private @Nullable Output<String> provisioningError;

    /**
     * @return Error message for migration provisioning failure, if any.
     * 
     */
    public Optional<Output<String>> provisioningError() {
        return Optional.ofNullable(this.provisioningError);
    }

    /**
     * Resource Id of the target resource (SQL VM or SQL Managed Instance).
     * 
     */
    @Import(name="scope")
    private @Nullable Output<String> scope;

    /**
     * @return Resource Id of the target resource (SQL VM or SQL Managed Instance).
     * 
     */
    public Optional<Output<String>> scope() {
        return Optional.ofNullable(this.scope);
    }

    /**
     * Name of the source database.
     * 
     */
    @Import(name="sourceDatabaseName")
    private @Nullable Output<String> sourceDatabaseName;

    /**
     * @return Name of the source database.
     * 
     */
    public Optional<Output<String>> sourceDatabaseName() {
        return Optional.ofNullable(this.sourceDatabaseName);
    }

    /**
     * Source SQL Server connection details.
     * 
     */
    @Import(name="sourceSqlConnection")
    private @Nullable Output<SqlConnectionInformationArgs> sourceSqlConnection;

    /**
     * @return Source SQL Server connection details.
     * 
     */
    public Optional<Output<SqlConnectionInformationArgs>> sourceSqlConnection() {
        return Optional.ofNullable(this.sourceSqlConnection);
    }

    /**
     * List of tables to copy.
     * 
     */
    @Import(name="tableList")
    private @Nullable Output<List<String>> tableList;

    /**
     * @return List of tables to copy.
     * 
     */
    public Optional<Output<List<String>>> tableList() {
        return Optional.ofNullable(this.tableList);
    }

    /**
     * Database collation to be used for the target database.
     * 
     */
    @Import(name="targetDatabaseCollation")
    private @Nullable Output<String> targetDatabaseCollation;

    /**
     * @return Database collation to be used for the target database.
     * 
     */
    public Optional<Output<String>> targetDatabaseCollation() {
        return Optional.ofNullable(this.targetDatabaseCollation);
    }

    /**
     * Target SQL DB connection details.
     * 
     */
    @Import(name="targetSqlConnection")
    private @Nullable Output<SqlConnectionInformationArgs> targetSqlConnection;

    /**
     * @return Target SQL DB connection details.
     * 
     */
    public Optional<Output<SqlConnectionInformationArgs>> targetSqlConnection() {
        return Optional.ofNullable(this.targetSqlConnection);
    }

    private DatabaseMigrationPropertiesSqlDbArgs() {}

    private DatabaseMigrationPropertiesSqlDbArgs(DatabaseMigrationPropertiesSqlDbArgs $) {
        this.kind = $.kind;
        this.migrationOperationId = $.migrationOperationId;
        this.migrationService = $.migrationService;
        this.provisioningError = $.provisioningError;
        this.scope = $.scope;
        this.sourceDatabaseName = $.sourceDatabaseName;
        this.sourceSqlConnection = $.sourceSqlConnection;
        this.tableList = $.tableList;
        this.targetDatabaseCollation = $.targetDatabaseCollation;
        this.targetSqlConnection = $.targetSqlConnection;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatabaseMigrationPropertiesSqlDbArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatabaseMigrationPropertiesSqlDbArgs $;

        public Builder() {
            $ = new DatabaseMigrationPropertiesSqlDbArgs();
        }

        public Builder(DatabaseMigrationPropertiesSqlDbArgs defaults) {
            $ = new DatabaseMigrationPropertiesSqlDbArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param kind
         * Expected value is &#39;SqlDb&#39;.
         * 
         * @return builder
         * 
         */
        public Builder kind(Output<String> kind) {
            $.kind = kind;
            return this;
        }

        /**
         * @param kind
         * Expected value is &#39;SqlDb&#39;.
         * 
         * @return builder
         * 
         */
        public Builder kind(String kind) {
            return kind(Output.of(kind));
        }

        /**
         * @param migrationOperationId ID tracking current migration operation.
         * 
         * @return builder
         * 
         */
        public Builder migrationOperationId(@Nullable Output<String> migrationOperationId) {
            $.migrationOperationId = migrationOperationId;
            return this;
        }

        /**
         * @param migrationOperationId ID tracking current migration operation.
         * 
         * @return builder
         * 
         */
        public Builder migrationOperationId(String migrationOperationId) {
            return migrationOperationId(Output.of(migrationOperationId));
        }

        /**
         * @param migrationService Resource Id of the Migration Service.
         * 
         * @return builder
         * 
         */
        public Builder migrationService(@Nullable Output<String> migrationService) {
            $.migrationService = migrationService;
            return this;
        }

        /**
         * @param migrationService Resource Id of the Migration Service.
         * 
         * @return builder
         * 
         */
        public Builder migrationService(String migrationService) {
            return migrationService(Output.of(migrationService));
        }

        /**
         * @param provisioningError Error message for migration provisioning failure, if any.
         * 
         * @return builder
         * 
         */
        public Builder provisioningError(@Nullable Output<String> provisioningError) {
            $.provisioningError = provisioningError;
            return this;
        }

        /**
         * @param provisioningError Error message for migration provisioning failure, if any.
         * 
         * @return builder
         * 
         */
        public Builder provisioningError(String provisioningError) {
            return provisioningError(Output.of(provisioningError));
        }

        /**
         * @param scope Resource Id of the target resource (SQL VM or SQL Managed Instance).
         * 
         * @return builder
         * 
         */
        public Builder scope(@Nullable Output<String> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope Resource Id of the target resource (SQL VM or SQL Managed Instance).
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        /**
         * @param sourceDatabaseName Name of the source database.
         * 
         * @return builder
         * 
         */
        public Builder sourceDatabaseName(@Nullable Output<String> sourceDatabaseName) {
            $.sourceDatabaseName = sourceDatabaseName;
            return this;
        }

        /**
         * @param sourceDatabaseName Name of the source database.
         * 
         * @return builder
         * 
         */
        public Builder sourceDatabaseName(String sourceDatabaseName) {
            return sourceDatabaseName(Output.of(sourceDatabaseName));
        }

        /**
         * @param sourceSqlConnection Source SQL Server connection details.
         * 
         * @return builder
         * 
         */
        public Builder sourceSqlConnection(@Nullable Output<SqlConnectionInformationArgs> sourceSqlConnection) {
            $.sourceSqlConnection = sourceSqlConnection;
            return this;
        }

        /**
         * @param sourceSqlConnection Source SQL Server connection details.
         * 
         * @return builder
         * 
         */
        public Builder sourceSqlConnection(SqlConnectionInformationArgs sourceSqlConnection) {
            return sourceSqlConnection(Output.of(sourceSqlConnection));
        }

        /**
         * @param tableList List of tables to copy.
         * 
         * @return builder
         * 
         */
        public Builder tableList(@Nullable Output<List<String>> tableList) {
            $.tableList = tableList;
            return this;
        }

        /**
         * @param tableList List of tables to copy.
         * 
         * @return builder
         * 
         */
        public Builder tableList(List<String> tableList) {
            return tableList(Output.of(tableList));
        }

        /**
         * @param tableList List of tables to copy.
         * 
         * @return builder
         * 
         */
        public Builder tableList(String... tableList) {
            return tableList(List.of(tableList));
        }

        /**
         * @param targetDatabaseCollation Database collation to be used for the target database.
         * 
         * @return builder
         * 
         */
        public Builder targetDatabaseCollation(@Nullable Output<String> targetDatabaseCollation) {
            $.targetDatabaseCollation = targetDatabaseCollation;
            return this;
        }

        /**
         * @param targetDatabaseCollation Database collation to be used for the target database.
         * 
         * @return builder
         * 
         */
        public Builder targetDatabaseCollation(String targetDatabaseCollation) {
            return targetDatabaseCollation(Output.of(targetDatabaseCollation));
        }

        /**
         * @param targetSqlConnection Target SQL DB connection details.
         * 
         * @return builder
         * 
         */
        public Builder targetSqlConnection(@Nullable Output<SqlConnectionInformationArgs> targetSqlConnection) {
            $.targetSqlConnection = targetSqlConnection;
            return this;
        }

        /**
         * @param targetSqlConnection Target SQL DB connection details.
         * 
         * @return builder
         * 
         */
        public Builder targetSqlConnection(SqlConnectionInformationArgs targetSqlConnection) {
            return targetSqlConnection(Output.of(targetSqlConnection));
        }

        public DatabaseMigrationPropertiesSqlDbArgs build() {
            $.kind = Codegen.stringProp("kind").output().arg($.kind).require();
            return $;
        }
    }

}
