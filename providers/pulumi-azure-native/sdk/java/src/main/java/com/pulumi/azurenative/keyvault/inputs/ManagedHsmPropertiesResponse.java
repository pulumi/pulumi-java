// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.keyvault.inputs;

import com.pulumi.azurenative.keyvault.inputs.MHSMNetworkRuleSetResponse;
import com.pulumi.azurenative.keyvault.inputs.MHSMPrivateEndpointConnectionItemResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Properties of the managed HSM Pool
 * 
 */
public final class ManagedHsmPropertiesResponse extends com.pulumi.resources.InvokeArgs {

    public static final ManagedHsmPropertiesResponse Empty = new ManagedHsmPropertiesResponse();

    /**
     * The create mode to indicate whether the resource is being created or is being recovered from a deleted resource.
     * 
     */
    @Import(name="createMode")
    private @Nullable String createMode;

    public Optional<String> createMode() {
        return Optional.ofNullable(this.createMode);
    }

    /**
     * Property specifying whether protection against purge is enabled for this managed HSM pool. Setting this property to true activates protection against purge for this managed HSM pool and its content - only the Managed HSM service may initiate a hard, irrecoverable deletion. The setting is effective only if soft delete is also enabled. Enabling this functionality is irreversible.
     * 
     */
    @Import(name="enablePurgeProtection")
    private @Nullable Boolean enablePurgeProtection;

    public Optional<Boolean> enablePurgeProtection() {
        return Optional.ofNullable(this.enablePurgeProtection);
    }

    /**
     * Property to specify whether the &#39;soft delete&#39; functionality is enabled for this managed HSM pool. If it&#39;s not set to any value(true or false) when creating new managed HSM pool, it will be set to true by default. Once set to true, it cannot be reverted to false.
     * 
     */
    @Import(name="enableSoftDelete")
    private @Nullable Boolean enableSoftDelete;

    public Optional<Boolean> enableSoftDelete() {
        return Optional.ofNullable(this.enableSoftDelete);
    }

    /**
     * The URI of the managed hsm pool for performing operations on keys.
     * 
     */
    @Import(name="hsmUri", required=true)
    private String hsmUri;

    public String hsmUri() {
        return this.hsmUri;
    }

    /**
     * Array of initial administrators object ids for this managed hsm pool.
     * 
     */
    @Import(name="initialAdminObjectIds")
    private @Nullable List<String> initialAdminObjectIds;

    public Optional<List<String>> initialAdminObjectIds() {
        return Optional.ofNullable(this.initialAdminObjectIds);
    }

    /**
     * Rules governing the accessibility of the key vault from specific network locations.
     * 
     */
    @Import(name="networkAcls")
    private @Nullable MHSMNetworkRuleSetResponse networkAcls;

    public Optional<MHSMNetworkRuleSetResponse> networkAcls() {
        return Optional.ofNullable(this.networkAcls);
    }

    /**
     * List of private endpoint connections associated with the managed hsm pool.
     * 
     */
    @Import(name="privateEndpointConnections", required=true)
    private List<MHSMPrivateEndpointConnectionItemResponse> privateEndpointConnections;

    public List<MHSMPrivateEndpointConnectionItemResponse> privateEndpointConnections() {
        return this.privateEndpointConnections;
    }

    /**
     * Provisioning state.
     * 
     */
    @Import(name="provisioningState", required=true)
    private String provisioningState;

    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Control permission for data plane traffic coming from public networks while private endpoint is enabled.
     * 
     */
    @Import(name="publicNetworkAccess")
    private @Nullable String publicNetworkAccess;

    public Optional<String> publicNetworkAccess() {
        return Optional.ofNullable(this.publicNetworkAccess);
    }

    /**
     * The scheduled purge date in UTC.
     * 
     */
    @Import(name="scheduledPurgeDate", required=true)
    private String scheduledPurgeDate;

    public String scheduledPurgeDate() {
        return this.scheduledPurgeDate;
    }

    /**
     * softDelete data retention days. It accepts &gt;=7 and &lt;=90.
     * 
     */
    @Import(name="softDeleteRetentionInDays")
    private @Nullable Integer softDeleteRetentionInDays;

    public Optional<Integer> softDeleteRetentionInDays() {
        return Optional.ofNullable(this.softDeleteRetentionInDays);
    }

    /**
     * Resource Status Message.
     * 
     */
    @Import(name="statusMessage", required=true)
    private String statusMessage;

    public String statusMessage() {
        return this.statusMessage;
    }

    /**
     * The Azure Active Directory tenant ID that should be used for authenticating requests to the managed HSM pool.
     * 
     */
    @Import(name="tenantId")
    private @Nullable String tenantId;

    public Optional<String> tenantId() {
        return Optional.ofNullable(this.tenantId);
    }

    private ManagedHsmPropertiesResponse() {}

    private ManagedHsmPropertiesResponse(ManagedHsmPropertiesResponse $) {
        this.createMode = $.createMode;
        this.enablePurgeProtection = $.enablePurgeProtection;
        this.enableSoftDelete = $.enableSoftDelete;
        this.hsmUri = $.hsmUri;
        this.initialAdminObjectIds = $.initialAdminObjectIds;
        this.networkAcls = $.networkAcls;
        this.privateEndpointConnections = $.privateEndpointConnections;
        this.provisioningState = $.provisioningState;
        this.publicNetworkAccess = $.publicNetworkAccess;
        this.scheduledPurgeDate = $.scheduledPurgeDate;
        this.softDeleteRetentionInDays = $.softDeleteRetentionInDays;
        this.statusMessage = $.statusMessage;
        this.tenantId = $.tenantId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagedHsmPropertiesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagedHsmPropertiesResponse $;

        public Builder() {
            $ = new ManagedHsmPropertiesResponse();
        }

        public Builder(ManagedHsmPropertiesResponse defaults) {
            $ = new ManagedHsmPropertiesResponse(Objects.requireNonNull(defaults));
        }

        public Builder createMode(@Nullable String createMode) {
            $.createMode = createMode;
            return this;
        }

        public Builder enablePurgeProtection(@Nullable Boolean enablePurgeProtection) {
            $.enablePurgeProtection = enablePurgeProtection;
            return this;
        }

        public Builder enableSoftDelete(@Nullable Boolean enableSoftDelete) {
            $.enableSoftDelete = enableSoftDelete;
            return this;
        }

        public Builder hsmUri(String hsmUri) {
            $.hsmUri = hsmUri;
            return this;
        }

        public Builder initialAdminObjectIds(@Nullable List<String> initialAdminObjectIds) {
            $.initialAdminObjectIds = initialAdminObjectIds;
            return this;
        }

        public Builder initialAdminObjectIds(String... initialAdminObjectIds) {
            return initialAdminObjectIds(List.of(initialAdminObjectIds));
        }

        public Builder networkAcls(@Nullable MHSMNetworkRuleSetResponse networkAcls) {
            $.networkAcls = networkAcls;
            return this;
        }

        public Builder privateEndpointConnections(List<MHSMPrivateEndpointConnectionItemResponse> privateEndpointConnections) {
            $.privateEndpointConnections = privateEndpointConnections;
            return this;
        }

        public Builder privateEndpointConnections(MHSMPrivateEndpointConnectionItemResponse... privateEndpointConnections) {
            return privateEndpointConnections(List.of(privateEndpointConnections));
        }

        public Builder provisioningState(String provisioningState) {
            $.provisioningState = provisioningState;
            return this;
        }

        public Builder publicNetworkAccess(@Nullable String publicNetworkAccess) {
            $.publicNetworkAccess = publicNetworkAccess;
            return this;
        }

        public Builder scheduledPurgeDate(String scheduledPurgeDate) {
            $.scheduledPurgeDate = scheduledPurgeDate;
            return this;
        }

        public Builder softDeleteRetentionInDays(@Nullable Integer softDeleteRetentionInDays) {
            $.softDeleteRetentionInDays = softDeleteRetentionInDays;
            return this;
        }

        public Builder statusMessage(String statusMessage) {
            $.statusMessage = statusMessage;
            return this;
        }

        public Builder tenantId(@Nullable String tenantId) {
            $.tenantId = tenantId;
            return this;
        }

        public ManagedHsmPropertiesResponse build() {
            $.enablePurgeProtection = Codegen.booleanProp("enablePurgeProtection").arg($.enablePurgeProtection).def(true).getNullable();
            $.enableSoftDelete = Codegen.booleanProp("enableSoftDelete").arg($.enableSoftDelete).def(true).getNullable();
            $.hsmUri = Objects.requireNonNull($.hsmUri, "expected parameter 'hsmUri' to be non-null");
            $.privateEndpointConnections = Objects.requireNonNull($.privateEndpointConnections, "expected parameter 'privateEndpointConnections' to be non-null");
            $.provisioningState = Objects.requireNonNull($.provisioningState, "expected parameter 'provisioningState' to be non-null");
            $.scheduledPurgeDate = Objects.requireNonNull($.scheduledPurgeDate, "expected parameter 'scheduledPurgeDate' to be non-null");
            $.softDeleteRetentionInDays = Codegen.integerProp("softDeleteRetentionInDays").arg($.softDeleteRetentionInDays).def(90).getNullable();
            $.statusMessage = Objects.requireNonNull($.statusMessage, "expected parameter 'statusMessage' to be non-null");
            return $;
        }
    }

}
