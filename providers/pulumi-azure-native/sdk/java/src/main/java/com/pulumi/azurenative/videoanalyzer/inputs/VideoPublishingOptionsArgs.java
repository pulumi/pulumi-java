// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.videoanalyzer.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Optional flags used to change how video is published. These are only allowed for topologies where "kind" is set to "live".
 * 
 */
public final class VideoPublishingOptionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final VideoPublishingOptionsArgs Empty = new VideoPublishingOptionsArgs();

    /**
     * When set to 'true' content will not be archived or recorded. This is used, for example, when the topology is used only for low latency video streaming. Default is 'false'.  If set to 'true', then "disableRtspPublishing" must be set to 'false'.
     * 
     */
    @Import(name="disableArchive")
      private final @Nullable Output<String> disableArchive;

    public Output<String> disableArchive() {
        return this.disableArchive == null ? Codegen.empty() : this.disableArchive;
    }

    /**
     * When set to 'true' the RTSP playback URL will not be published, disabling low latency streaming. This is used, for example, when the topology is used only for archiving content. Default is 'false'.  If set to 'true', then "disableArchive" must be set to 'false'.
     * 
     */
    @Import(name="disableRtspPublishing")
      private final @Nullable Output<String> disableRtspPublishing;

    public Output<String> disableRtspPublishing() {
        return this.disableRtspPublishing == null ? Codegen.empty() : this.disableRtspPublishing;
    }

    public VideoPublishingOptionsArgs(
        @Nullable Output<String> disableArchive,
        @Nullable Output<String> disableRtspPublishing) {
        this.disableArchive = disableArchive;
        this.disableRtspPublishing = disableRtspPublishing;
    }

    private VideoPublishingOptionsArgs() {
        this.disableArchive = Codegen.empty();
        this.disableRtspPublishing = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VideoPublishingOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> disableArchive;
        private @Nullable Output<String> disableRtspPublishing;

        public Builder() {
    	      // Empty
        }

        public Builder(VideoPublishingOptionsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.disableArchive = defaults.disableArchive;
    	      this.disableRtspPublishing = defaults.disableRtspPublishing;
        }

        public Builder disableArchive(@Nullable Output<String> disableArchive) {
            this.disableArchive = disableArchive;
            return this;
        }
        public Builder disableArchive(@Nullable String disableArchive) {
            this.disableArchive = Codegen.ofNullable(disableArchive);
            return this;
        }
        public Builder disableRtspPublishing(@Nullable Output<String> disableRtspPublishing) {
            this.disableRtspPublishing = disableRtspPublishing;
            return this;
        }
        public Builder disableRtspPublishing(@Nullable String disableRtspPublishing) {
            this.disableRtspPublishing = Codegen.ofNullable(disableRtspPublishing);
            return this;
        }        public VideoPublishingOptionsArgs build() {
            return new VideoPublishingOptionsArgs(disableArchive, disableRtspPublishing);
        }
    }
}
