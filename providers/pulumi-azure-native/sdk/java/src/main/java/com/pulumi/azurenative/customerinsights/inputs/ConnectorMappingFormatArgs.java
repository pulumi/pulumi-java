// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.customerinsights.inputs;

import com.pulumi.azurenative.customerinsights.enums.FormatTypes;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Connector mapping property format.
 * 
 */
public final class ConnectorMappingFormatArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectorMappingFormatArgs Empty = new ConnectorMappingFormatArgs();

    /**
     * The oData language.
     * 
     */
    @Import(name="acceptLanguage")
    private @Nullable Output<String> acceptLanguage;

    /**
     * @return The oData language.
     * 
     */
    public Optional<Output<String>> acceptLanguage() {
        return Optional.ofNullable(this.acceptLanguage);
    }

    /**
     * Character separating array elements.
     * 
     */
    @Import(name="arraySeparator")
    private @Nullable Output<String> arraySeparator;

    /**
     * @return Character separating array elements.
     * 
     */
    public Optional<Output<String>> arraySeparator() {
        return Optional.ofNullable(this.arraySeparator);
    }

    /**
     * The character that signifies a break between columns.
     * 
     */
    @Import(name="columnDelimiter")
    private @Nullable Output<String> columnDelimiter;

    /**
     * @return The character that signifies a break between columns.
     * 
     */
    public Optional<Output<String>> columnDelimiter() {
        return Optional.ofNullable(this.columnDelimiter);
    }

    /**
     * The type mapping format.
     * 
     */
    @Import(name="formatType", required=true)
    private Output<FormatTypes> formatType;

    /**
     * @return The type mapping format.
     * 
     */
    public Output<FormatTypes> formatType() {
        return this.formatType;
    }

    /**
     * Quote character, used to indicate enquoted fields.
     * 
     */
    @Import(name="quoteCharacter")
    private @Nullable Output<String> quoteCharacter;

    /**
     * @return Quote character, used to indicate enquoted fields.
     * 
     */
    public Optional<Output<String>> quoteCharacter() {
        return Optional.ofNullable(this.quoteCharacter);
    }

    /**
     * Escape character for quotes, can be the same as the quoteCharacter.
     * 
     */
    @Import(name="quoteEscapeCharacter")
    private @Nullable Output<String> quoteEscapeCharacter;

    /**
     * @return Escape character for quotes, can be the same as the quoteCharacter.
     * 
     */
    public Optional<Output<String>> quoteEscapeCharacter() {
        return Optional.ofNullable(this.quoteEscapeCharacter);
    }

    private ConnectorMappingFormatArgs() {}

    private ConnectorMappingFormatArgs(ConnectorMappingFormatArgs $) {
        this.acceptLanguage = $.acceptLanguage;
        this.arraySeparator = $.arraySeparator;
        this.columnDelimiter = $.columnDelimiter;
        this.formatType = $.formatType;
        this.quoteCharacter = $.quoteCharacter;
        this.quoteEscapeCharacter = $.quoteEscapeCharacter;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectorMappingFormatArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectorMappingFormatArgs $;

        public Builder() {
            $ = new ConnectorMappingFormatArgs();
        }

        public Builder(ConnectorMappingFormatArgs defaults) {
            $ = new ConnectorMappingFormatArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param acceptLanguage The oData language.
         * 
         * @return builder
         * 
         */
        public Builder acceptLanguage(@Nullable Output<String> acceptLanguage) {
            $.acceptLanguage = acceptLanguage;
            return this;
        }

        /**
         * @param acceptLanguage The oData language.
         * 
         * @return builder
         * 
         */
        public Builder acceptLanguage(String acceptLanguage) {
            return acceptLanguage(Output.of(acceptLanguage));
        }

        /**
         * @param arraySeparator Character separating array elements.
         * 
         * @return builder
         * 
         */
        public Builder arraySeparator(@Nullable Output<String> arraySeparator) {
            $.arraySeparator = arraySeparator;
            return this;
        }

        /**
         * @param arraySeparator Character separating array elements.
         * 
         * @return builder
         * 
         */
        public Builder arraySeparator(String arraySeparator) {
            return arraySeparator(Output.of(arraySeparator));
        }

        /**
         * @param columnDelimiter The character that signifies a break between columns.
         * 
         * @return builder
         * 
         */
        public Builder columnDelimiter(@Nullable Output<String> columnDelimiter) {
            $.columnDelimiter = columnDelimiter;
            return this;
        }

        /**
         * @param columnDelimiter The character that signifies a break between columns.
         * 
         * @return builder
         * 
         */
        public Builder columnDelimiter(String columnDelimiter) {
            return columnDelimiter(Output.of(columnDelimiter));
        }

        /**
         * @param formatType The type mapping format.
         * 
         * @return builder
         * 
         */
        public Builder formatType(Output<FormatTypes> formatType) {
            $.formatType = formatType;
            return this;
        }

        /**
         * @param formatType The type mapping format.
         * 
         * @return builder
         * 
         */
        public Builder formatType(FormatTypes formatType) {
            return formatType(Output.of(formatType));
        }

        /**
         * @param quoteCharacter Quote character, used to indicate enquoted fields.
         * 
         * @return builder
         * 
         */
        public Builder quoteCharacter(@Nullable Output<String> quoteCharacter) {
            $.quoteCharacter = quoteCharacter;
            return this;
        }

        /**
         * @param quoteCharacter Quote character, used to indicate enquoted fields.
         * 
         * @return builder
         * 
         */
        public Builder quoteCharacter(String quoteCharacter) {
            return quoteCharacter(Output.of(quoteCharacter));
        }

        /**
         * @param quoteEscapeCharacter Escape character for quotes, can be the same as the quoteCharacter.
         * 
         * @return builder
         * 
         */
        public Builder quoteEscapeCharacter(@Nullable Output<String> quoteEscapeCharacter) {
            $.quoteEscapeCharacter = quoteEscapeCharacter;
            return this;
        }

        /**
         * @param quoteEscapeCharacter Escape character for quotes, can be the same as the quoteCharacter.
         * 
         * @return builder
         * 
         */
        public Builder quoteEscapeCharacter(String quoteEscapeCharacter) {
            return quoteEscapeCharacter(Output.of(quoteEscapeCharacter));
        }

        public ConnectorMappingFormatArgs build() {
            $.formatType = Objects.requireNonNull($.formatType, "expected parameter 'formatType' to be non-null");
            return $;
        }
    }

}
