// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datamigration.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Database file specific information
 * 
 */
public final class DatabaseFileInfoResponse extends com.pulumi.resources.InvokeArgs {

    public static final DatabaseFileInfoResponse Empty = new DatabaseFileInfoResponse();

    /**
     * Name of the database
     * 
     */
    @Import(name="databaseName")
    private @Nullable String databaseName;

    /**
     * @return Name of the database
     * 
     */
    public Optional<String> databaseName() {
        return Optional.ofNullable(this.databaseName);
    }

    /**
     * Database file type
     * 
     */
    @Import(name="fileType")
    private @Nullable String fileType;

    /**
     * @return Database file type
     * 
     */
    public Optional<String> fileType() {
        return Optional.ofNullable(this.fileType);
    }

    /**
     * Unique identifier for database file
     * 
     */
    @Import(name="id")
    private @Nullable String id;

    /**
     * @return Unique identifier for database file
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Logical name of the file
     * 
     */
    @Import(name="logicalName")
    private @Nullable String logicalName;

    /**
     * @return Logical name of the file
     * 
     */
    public Optional<String> logicalName() {
        return Optional.ofNullable(this.logicalName);
    }

    /**
     * Operating-system full path of the file
     * 
     */
    @Import(name="physicalFullName")
    private @Nullable String physicalFullName;

    /**
     * @return Operating-system full path of the file
     * 
     */
    public Optional<String> physicalFullName() {
        return Optional.ofNullable(this.physicalFullName);
    }

    /**
     * Suggested full path of the file for restoring
     * 
     */
    @Import(name="restoreFullName")
    private @Nullable String restoreFullName;

    /**
     * @return Suggested full path of the file for restoring
     * 
     */
    public Optional<String> restoreFullName() {
        return Optional.ofNullable(this.restoreFullName);
    }

    /**
     * Size of the file in megabytes
     * 
     */
    @Import(name="sizeMB")
    private @Nullable Double sizeMB;

    /**
     * @return Size of the file in megabytes
     * 
     */
    public Optional<Double> sizeMB() {
        return Optional.ofNullable(this.sizeMB);
    }

    private DatabaseFileInfoResponse() {}

    private DatabaseFileInfoResponse(DatabaseFileInfoResponse $) {
        this.databaseName = $.databaseName;
        this.fileType = $.fileType;
        this.id = $.id;
        this.logicalName = $.logicalName;
        this.physicalFullName = $.physicalFullName;
        this.restoreFullName = $.restoreFullName;
        this.sizeMB = $.sizeMB;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatabaseFileInfoResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatabaseFileInfoResponse $;

        public Builder() {
            $ = new DatabaseFileInfoResponse();
        }

        public Builder(DatabaseFileInfoResponse defaults) {
            $ = new DatabaseFileInfoResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param databaseName Name of the database
         * 
         * @return builder
         * 
         */
        public Builder databaseName(@Nullable String databaseName) {
            $.databaseName = databaseName;
            return this;
        }

        /**
         * @param fileType Database file type
         * 
         * @return builder
         * 
         */
        public Builder fileType(@Nullable String fileType) {
            $.fileType = fileType;
            return this;
        }

        /**
         * @param id Unique identifier for database file
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable String id) {
            $.id = id;
            return this;
        }

        /**
         * @param logicalName Logical name of the file
         * 
         * @return builder
         * 
         */
        public Builder logicalName(@Nullable String logicalName) {
            $.logicalName = logicalName;
            return this;
        }

        /**
         * @param physicalFullName Operating-system full path of the file
         * 
         * @return builder
         * 
         */
        public Builder physicalFullName(@Nullable String physicalFullName) {
            $.physicalFullName = physicalFullName;
            return this;
        }

        /**
         * @param restoreFullName Suggested full path of the file for restoring
         * 
         * @return builder
         * 
         */
        public Builder restoreFullName(@Nullable String restoreFullName) {
            $.restoreFullName = restoreFullName;
            return this;
        }

        /**
         * @param sizeMB Size of the file in megabytes
         * 
         * @return builder
         * 
         */
        public Builder sizeMB(@Nullable Double sizeMB) {
            $.sizeMB = sizeMB;
            return this;
        }

        public DatabaseFileInfoResponse build() {
            return $;
        }
    }

}
