// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.compute.inputs;

import com.pulumi.azurenative.compute.inputs.DiffDiskSettingsResponse;
import com.pulumi.azurenative.compute.inputs.DiskEncryptionSettingsResponse;
import com.pulumi.azurenative.compute.inputs.ManagedDiskParametersResponse;
import com.pulumi.azurenative.compute.inputs.VirtualHardDiskResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Specifies information about the operating system disk used by the virtual machine. &lt;br&gt;&lt;br&gt; For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview).
 * 
 */
public final class OSDiskResponse extends com.pulumi.resources.InvokeArgs {

    public static final OSDiskResponse Empty = new OSDiskResponse();

    /**
     * Specifies the caching requirements. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt; **None** &lt;br&gt;&lt;br&gt; **ReadOnly** &lt;br&gt;&lt;br&gt; **ReadWrite** &lt;br&gt;&lt;br&gt; Default: **None** for Standard storage. **ReadOnly** for Premium storage.
     * 
     */
    @Import(name="caching")
    private @Nullable String caching;

    public Optional<String> caching() {
        return Optional.ofNullable(this.caching);
    }

    /**
     * Specifies how the virtual machine should be created.&lt;br&gt;&lt;br&gt; Possible values are:&lt;br&gt;&lt;br&gt; **Attach** \u2013 This value is used when you are using a specialized disk to create the virtual machine.&lt;br&gt;&lt;br&gt; **FromImage** \u2013 This value is used when you are using an image to create the virtual machine. If you are using a platform image, you also use the imageReference element described above. If you are using a marketplace image, you  also use the plan element previously described.
     * 
     */
    @Import(name="createOption", required=true)
    private String createOption;

    public String createOption() {
        return this.createOption;
    }

    /**
     * Specifies whether OS Disk should be deleted or detached upon VM deletion. &lt;br&gt;&lt;br&gt; Possible values: &lt;br&gt;&lt;br&gt; **Delete** If this value is used, the OS disk is deleted when VM is deleted.&lt;br&gt;&lt;br&gt; **Detach** If this value is used, the os disk is retained after VM is deleted. &lt;br&gt;&lt;br&gt; The default value is set to **detach**. For an ephemeral OS Disk, the default value is set to **Delete**. User cannot change the delete option for ephemeral OS Disk.
     * 
     */
    @Import(name="deleteOption")
    private @Nullable String deleteOption;

    public Optional<String> deleteOption() {
        return Optional.ofNullable(this.deleteOption);
    }

    /**
     * Specifies the ephemeral Disk Settings for the operating system disk used by the virtual machine.
     * 
     */
    @Import(name="diffDiskSettings")
    private @Nullable DiffDiskSettingsResponse diffDiskSettings;

    public Optional<DiffDiskSettingsResponse> diffDiskSettings() {
        return Optional.ofNullable(this.diffDiskSettings);
    }

    /**
     * Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. &lt;br&gt;&lt;br&gt; This value cannot be larger than 1023 GB
     * 
     */
    @Import(name="diskSizeGB")
    private @Nullable Integer diskSizeGB;

    public Optional<Integer> diskSizeGB() {
        return Optional.ofNullable(this.diskSizeGB);
    }

    /**
     * Specifies the encryption settings for the OS Disk. &lt;br&gt;&lt;br&gt; Minimum api-version: 2015-06-15
     * 
     */
    @Import(name="encryptionSettings")
    private @Nullable DiskEncryptionSettingsResponse encryptionSettings;

    public Optional<DiskEncryptionSettingsResponse> encryptionSettings() {
        return Optional.ofNullable(this.encryptionSettings);
    }

    /**
     * The source user image virtual hard disk. The virtual hard disk will be copied before being attached to the virtual machine. If SourceImage is provided, the destination virtual hard drive must not exist.
     * 
     */
    @Import(name="image")
    private @Nullable VirtualHardDiskResponse image;

    public Optional<VirtualHardDiskResponse> image() {
        return Optional.ofNullable(this.image);
    }

    /**
     * The managed disk parameters.
     * 
     */
    @Import(name="managedDisk")
    private @Nullable ManagedDiskParametersResponse managedDisk;

    public Optional<ManagedDiskParametersResponse> managedDisk() {
        return Optional.ofNullable(this.managedDisk);
    }

    /**
     * The disk name.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * This property allows you to specify the type of the OS that is included in the disk if creating a VM from user-image or a specialized VHD. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt; **Windows** &lt;br&gt;&lt;br&gt; **Linux**
     * 
     */
    @Import(name="osType")
    private @Nullable String osType;

    public Optional<String> osType() {
        return Optional.ofNullable(this.osType);
    }

    /**
     * The virtual hard disk.
     * 
     */
    @Import(name="vhd")
    private @Nullable VirtualHardDiskResponse vhd;

    public Optional<VirtualHardDiskResponse> vhd() {
        return Optional.ofNullable(this.vhd);
    }

    /**
     * Specifies whether writeAccelerator should be enabled or disabled on the disk.
     * 
     */
    @Import(name="writeAcceleratorEnabled")
    private @Nullable Boolean writeAcceleratorEnabled;

    public Optional<Boolean> writeAcceleratorEnabled() {
        return Optional.ofNullable(this.writeAcceleratorEnabled);
    }

    private OSDiskResponse() {}

    private OSDiskResponse(OSDiskResponse $) {
        this.caching = $.caching;
        this.createOption = $.createOption;
        this.deleteOption = $.deleteOption;
        this.diffDiskSettings = $.diffDiskSettings;
        this.diskSizeGB = $.diskSizeGB;
        this.encryptionSettings = $.encryptionSettings;
        this.image = $.image;
        this.managedDisk = $.managedDisk;
        this.name = $.name;
        this.osType = $.osType;
        this.vhd = $.vhd;
        this.writeAcceleratorEnabled = $.writeAcceleratorEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OSDiskResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OSDiskResponse $;

        public Builder() {
            $ = new OSDiskResponse();
        }

        public Builder(OSDiskResponse defaults) {
            $ = new OSDiskResponse(Objects.requireNonNull(defaults));
        }

        public Builder caching(@Nullable String caching) {
            $.caching = caching;
            return this;
        }

        public Builder createOption(String createOption) {
            $.createOption = createOption;
            return this;
        }

        public Builder deleteOption(@Nullable String deleteOption) {
            $.deleteOption = deleteOption;
            return this;
        }

        public Builder diffDiskSettings(@Nullable DiffDiskSettingsResponse diffDiskSettings) {
            $.diffDiskSettings = diffDiskSettings;
            return this;
        }

        public Builder diskSizeGB(@Nullable Integer diskSizeGB) {
            $.diskSizeGB = diskSizeGB;
            return this;
        }

        public Builder encryptionSettings(@Nullable DiskEncryptionSettingsResponse encryptionSettings) {
            $.encryptionSettings = encryptionSettings;
            return this;
        }

        public Builder image(@Nullable VirtualHardDiskResponse image) {
            $.image = image;
            return this;
        }

        public Builder managedDisk(@Nullable ManagedDiskParametersResponse managedDisk) {
            $.managedDisk = managedDisk;
            return this;
        }

        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        public Builder osType(@Nullable String osType) {
            $.osType = osType;
            return this;
        }

        public Builder vhd(@Nullable VirtualHardDiskResponse vhd) {
            $.vhd = vhd;
            return this;
        }

        public Builder writeAcceleratorEnabled(@Nullable Boolean writeAcceleratorEnabled) {
            $.writeAcceleratorEnabled = writeAcceleratorEnabled;
            return this;
        }

        public OSDiskResponse build() {
            $.createOption = Objects.requireNonNull($.createOption, "expected parameter 'createOption' to be non-null");
            return $;
        }
    }

}
