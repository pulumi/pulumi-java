// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.mobilenetwork.outputs;

import com.pulumi.azurenative.mobilenetwork.outputs.PinholeTimeoutsResponse;
import com.pulumi.azurenative.mobilenetwork.outputs.PortRangeResponse;
import com.pulumi.azurenative.mobilenetwork.outputs.PortReuseHoldTimesResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class NaptConfigurationResponse {
    /**
     * @return Whether NAPT is enabled for connections to this attachedDataNetwork.
     * 
     */
    private final @Nullable String enabled;
    /**
     * @return Maximum number of UDP and TCP pinholes that can be open simultaneously on the core interface.
     * 
     */
    private final @Nullable Integer pinholeLimits;
    /**
     * @return Expiry times of inactive NAPT pinholes, in seconds. All timers must be at least 1 second.
     * 
     */
    private final @Nullable PinholeTimeoutsResponse pinholeTimeouts;
    /**
     * @return Range of port numbers to use as translated ports on each translated address.
     * If not specified and NAPT is enabled, this range defaults to 1,024 - 65,535. (Ports under 1,024 should not be used because these are special purpose ports reserved by IANA.)
     * 
     */
    private final @Nullable PortRangeResponse portRange;
    /**
     * @return The minimum time (in seconds) that will pass before a port that was used by a closed pinhole can be recycled for use by another pinhole. All hold times must be minimum 1 second.
     * 
     */
    private final @Nullable PortReuseHoldTimesResponse portReuseHoldTime;

    @CustomType.Constructor
    private NaptConfigurationResponse(
        @CustomType.Parameter("enabled") @Nullable String enabled,
        @CustomType.Parameter("pinholeLimits") @Nullable Integer pinholeLimits,
        @CustomType.Parameter("pinholeTimeouts") @Nullable PinholeTimeoutsResponse pinholeTimeouts,
        @CustomType.Parameter("portRange") @Nullable PortRangeResponse portRange,
        @CustomType.Parameter("portReuseHoldTime") @Nullable PortReuseHoldTimesResponse portReuseHoldTime) {
        this.enabled = enabled;
        this.pinholeLimits = pinholeLimits;
        this.pinholeTimeouts = pinholeTimeouts;
        this.portRange = portRange;
        this.portReuseHoldTime = portReuseHoldTime;
    }

    /**
     * @return Whether NAPT is enabled for connections to this attachedDataNetwork.
     * 
     */
    public Optional<String> enabled() {
        return Optional.ofNullable(this.enabled);
    }
    /**
     * @return Maximum number of UDP and TCP pinholes that can be open simultaneously on the core interface.
     * 
     */
    public Optional<Integer> pinholeLimits() {
        return Optional.ofNullable(this.pinholeLimits);
    }
    /**
     * @return Expiry times of inactive NAPT pinholes, in seconds. All timers must be at least 1 second.
     * 
     */
    public Optional<PinholeTimeoutsResponse> pinholeTimeouts() {
        return Optional.ofNullable(this.pinholeTimeouts);
    }
    /**
     * @return Range of port numbers to use as translated ports on each translated address.
     * If not specified and NAPT is enabled, this range defaults to 1,024 - 65,535. (Ports under 1,024 should not be used because these are special purpose ports reserved by IANA.)
     * 
     */
    public Optional<PortRangeResponse> portRange() {
        return Optional.ofNullable(this.portRange);
    }
    /**
     * @return The minimum time (in seconds) that will pass before a port that was used by a closed pinhole can be recycled for use by another pinhole. All hold times must be minimum 1 second.
     * 
     */
    public Optional<PortReuseHoldTimesResponse> portReuseHoldTime() {
        return Optional.ofNullable(this.portReuseHoldTime);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NaptConfigurationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String enabled;
        private @Nullable Integer pinholeLimits;
        private @Nullable PinholeTimeoutsResponse pinholeTimeouts;
        private @Nullable PortRangeResponse portRange;
        private @Nullable PortReuseHoldTimesResponse portReuseHoldTime;

        public Builder() {
    	      // Empty
        }

        public Builder(NaptConfigurationResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enabled = defaults.enabled;
    	      this.pinholeLimits = defaults.pinholeLimits;
    	      this.pinholeTimeouts = defaults.pinholeTimeouts;
    	      this.portRange = defaults.portRange;
    	      this.portReuseHoldTime = defaults.portReuseHoldTime;
        }

        public Builder enabled(@Nullable String enabled) {
            this.enabled = enabled;
            return this;
        }
        public Builder pinholeLimits(@Nullable Integer pinholeLimits) {
            this.pinholeLimits = pinholeLimits;
            return this;
        }
        public Builder pinholeTimeouts(@Nullable PinholeTimeoutsResponse pinholeTimeouts) {
            this.pinholeTimeouts = pinholeTimeouts;
            return this;
        }
        public Builder portRange(@Nullable PortRangeResponse portRange) {
            this.portRange = portRange;
            return this;
        }
        public Builder portReuseHoldTime(@Nullable PortReuseHoldTimesResponse portReuseHoldTime) {
            this.portReuseHoldTime = portReuseHoldTime;
            return this;
        }        public NaptConfigurationResponse build() {
            return new NaptConfigurationResponse(enabled, pinholeLimits, pinholeTimeouts, portRange, portReuseHoldTime);
        }
    }
}
