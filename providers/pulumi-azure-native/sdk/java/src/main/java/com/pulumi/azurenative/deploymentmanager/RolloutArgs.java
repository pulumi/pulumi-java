// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.deploymentmanager;

import com.pulumi.azurenative.deploymentmanager.inputs.IdentityArgs;
import com.pulumi.azurenative.deploymentmanager.inputs.StepGroupArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RolloutArgs extends com.pulumi.resources.ResourceArgs {

    public static final RolloutArgs Empty = new RolloutArgs();

    /**
     * The reference to the artifact source resource Id where the payload is located.
     * 
     */
    @Import(name="artifactSourceId")
    private @Nullable Output<String> artifactSourceId;

    public Optional<Output<String>> artifactSourceId() {
        return Optional.ofNullable(this.artifactSourceId);
    }

    /**
     * The version of the build being deployed.
     * 
     */
    @Import(name="buildVersion", required=true)
    private Output<String> buildVersion;

    public Output<String> buildVersion() {
        return this.buildVersion;
    }

    /**
     * Identity for the resource.
     * 
     */
    @Import(name="identity", required=true)
    private Output<IdentityArgs> identity;

    public Output<IdentityArgs> identity() {
        return this.identity;
    }

    /**
     * The geo-location where the resource lives
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The rollout name.
     * 
     */
    @Import(name="rolloutName")
    private @Nullable Output<String> rolloutName;

    public Optional<Output<String>> rolloutName() {
        return Optional.ofNullable(this.rolloutName);
    }

    /**
     * The list of step groups that define the orchestration.
     * 
     */
    @Import(name="stepGroups", required=true)
    private Output<List<StepGroupArgs>> stepGroups;

    public Output<List<StepGroupArgs>> stepGroups() {
        return this.stepGroups;
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The resource Id of the service topology from which service units are being referenced in step groups to be deployed.
     * 
     */
    @Import(name="targetServiceTopologyId", required=true)
    private Output<String> targetServiceTopologyId;

    public Output<String> targetServiceTopologyId() {
        return this.targetServiceTopologyId;
    }

    private RolloutArgs() {}

    private RolloutArgs(RolloutArgs $) {
        this.artifactSourceId = $.artifactSourceId;
        this.buildVersion = $.buildVersion;
        this.identity = $.identity;
        this.location = $.location;
        this.resourceGroupName = $.resourceGroupName;
        this.rolloutName = $.rolloutName;
        this.stepGroups = $.stepGroups;
        this.tags = $.tags;
        this.targetServiceTopologyId = $.targetServiceTopologyId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RolloutArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RolloutArgs $;

        public Builder() {
            $ = new RolloutArgs();
        }

        public Builder(RolloutArgs defaults) {
            $ = new RolloutArgs(Objects.requireNonNull(defaults));
        }

        public Builder artifactSourceId(@Nullable Output<String> artifactSourceId) {
            $.artifactSourceId = artifactSourceId;
            return this;
        }

        public Builder artifactSourceId(String artifactSourceId) {
            return artifactSourceId(Output.of(artifactSourceId));
        }

        public Builder buildVersion(Output<String> buildVersion) {
            $.buildVersion = buildVersion;
            return this;
        }

        public Builder buildVersion(String buildVersion) {
            return buildVersion(Output.of(buildVersion));
        }

        public Builder identity(Output<IdentityArgs> identity) {
            $.identity = identity;
            return this;
        }

        public Builder identity(IdentityArgs identity) {
            return identity(Output.of(identity));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder rolloutName(@Nullable Output<String> rolloutName) {
            $.rolloutName = rolloutName;
            return this;
        }

        public Builder rolloutName(String rolloutName) {
            return rolloutName(Output.of(rolloutName));
        }

        public Builder stepGroups(Output<List<StepGroupArgs>> stepGroups) {
            $.stepGroups = stepGroups;
            return this;
        }

        public Builder stepGroups(List<StepGroupArgs> stepGroups) {
            return stepGroups(Output.of(stepGroups));
        }

        public Builder stepGroups(StepGroupArgs... stepGroups) {
            return stepGroups(List.of(stepGroups));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder targetServiceTopologyId(Output<String> targetServiceTopologyId) {
            $.targetServiceTopologyId = targetServiceTopologyId;
            return this;
        }

        public Builder targetServiceTopologyId(String targetServiceTopologyId) {
            return targetServiceTopologyId(Output.of(targetServiceTopologyId));
        }

        public RolloutArgs build() {
            $.buildVersion = Objects.requireNonNull($.buildVersion, "expected parameter 'buildVersion' to be non-null");
            $.identity = Objects.requireNonNull($.identity, "expected parameter 'identity' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.stepGroups = Objects.requireNonNull($.stepGroups, "expected parameter 'stepGroups' to be non-null");
            $.targetServiceTopologyId = Objects.requireNonNull($.targetServiceTopologyId, "expected parameter 'targetServiceTopologyId' to be non-null");
            return $;
        }
    }

}
