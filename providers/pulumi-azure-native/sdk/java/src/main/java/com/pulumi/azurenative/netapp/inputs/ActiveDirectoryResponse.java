// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.netapp.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Active Directory
 * 
 */
public final class ActiveDirectoryResponse extends com.pulumi.resources.InvokeArgs {

    public static final ActiveDirectoryResponse Empty = new ActiveDirectoryResponse();

    /**
     * Id of the Active Directory
     * 
     */
    @Import(name="activeDirectoryId")
    private @Nullable String activeDirectoryId;

    /**
     * @return Id of the Active Directory
     * 
     */
    public Optional<String> activeDirectoryId() {
        return Optional.ofNullable(this.activeDirectoryId);
    }

    /**
     * Name of the active directory machine. This optional parameter is used only while creating kerberos volume
     * 
     */
    @Import(name="adName")
    private @Nullable String adName;

    /**
     * @return Name of the active directory machine. This optional parameter is used only while creating kerberos volume
     * 
     */
    public Optional<String> adName() {
        return Optional.ofNullable(this.adName);
    }

    /**
     * If enabled, AES encryption will be enabled for SMB communication.
     * 
     */
    @Import(name="aesEncryption")
    private @Nullable Boolean aesEncryption;

    /**
     * @return If enabled, AES encryption will be enabled for SMB communication.
     * 
     */
    public Optional<Boolean> aesEncryption() {
        return Optional.ofNullable(this.aesEncryption);
    }

    /**
     *  If enabled, NFS client local users can also (in addition to LDAP users) access the NFS volumes.
     * 
     */
    @Import(name="allowLocalNfsUsersWithLdap")
    private @Nullable Boolean allowLocalNfsUsersWithLdap;

    /**
     * @return  If enabled, NFS client local users can also (in addition to LDAP users) access the NFS volumes.
     * 
     */
    public Optional<Boolean> allowLocalNfsUsersWithLdap() {
        return Optional.ofNullable(this.allowLocalNfsUsersWithLdap);
    }

    /**
     * Users to be added to the Built-in Backup Operator active directory group. A list of unique usernames without domain specifier
     * 
     */
    @Import(name="backupOperators")
    private @Nullable List<String> backupOperators;

    /**
     * @return Users to be added to the Built-in Backup Operator active directory group. A list of unique usernames without domain specifier
     * 
     */
    public Optional<List<String>> backupOperators() {
        return Optional.ofNullable(this.backupOperators);
    }

    /**
     * Comma separated list of DNS server IP addresses (IPv4 only) for the Active Directory domain
     * 
     */
    @Import(name="dns")
    private @Nullable String dns;

    /**
     * @return Comma separated list of DNS server IP addresses (IPv4 only) for the Active Directory domain
     * 
     */
    public Optional<String> dns() {
        return Optional.ofNullable(this.dns);
    }

    /**
     * Name of the Active Directory domain
     * 
     */
    @Import(name="domain")
    private @Nullable String domain;

    /**
     * @return Name of the Active Directory domain
     * 
     */
    public Optional<String> domain() {
        return Optional.ofNullable(this.domain);
    }

    /**
     * kdc server IP addresses for the active directory machine. This optional parameter is used only while creating kerberos volume.
     * 
     */
    @Import(name="kdcIP")
    private @Nullable String kdcIP;

    /**
     * @return kdc server IP addresses for the active directory machine. This optional parameter is used only while creating kerberos volume.
     * 
     */
    public Optional<String> kdcIP() {
        return Optional.ofNullable(this.kdcIP);
    }

    /**
     * Specifies whether or not the LDAP traffic needs to be secured via TLS.
     * 
     */
    @Import(name="ldapOverTLS")
    private @Nullable Boolean ldapOverTLS;

    /**
     * @return Specifies whether or not the LDAP traffic needs to be secured via TLS.
     * 
     */
    public Optional<Boolean> ldapOverTLS() {
        return Optional.ofNullable(this.ldapOverTLS);
    }

    /**
     * Specifies whether or not the LDAP traffic needs to be signed.
     * 
     */
    @Import(name="ldapSigning")
    private @Nullable Boolean ldapSigning;

    /**
     * @return Specifies whether or not the LDAP traffic needs to be signed.
     * 
     */
    public Optional<Boolean> ldapSigning() {
        return Optional.ofNullable(this.ldapSigning);
    }

    /**
     * The Organizational Unit (OU) within the Windows Active Directory
     * 
     */
    @Import(name="organizationalUnit")
    private @Nullable String organizationalUnit;

    /**
     * @return The Organizational Unit (OU) within the Windows Active Directory
     * 
     */
    public Optional<String> organizationalUnit() {
        return Optional.ofNullable(this.organizationalUnit);
    }

    /**
     * Plain text password of Active Directory domain administrator, value is masked in the response
     * 
     */
    @Import(name="password")
    private @Nullable String password;

    /**
     * @return Plain text password of Active Directory domain administrator, value is masked in the response
     * 
     */
    public Optional<String> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * Domain Users in the Active directory to be given SeSecurityPrivilege privilege (Needed for SMB Continuously available shares for SQL). A list of unique usernames without domain specifier
     * 
     */
    @Import(name="securityOperators")
    private @Nullable List<String> securityOperators;

    /**
     * @return Domain Users in the Active directory to be given SeSecurityPrivilege privilege (Needed for SMB Continuously available shares for SQL). A list of unique usernames without domain specifier
     * 
     */
    public Optional<List<String>> securityOperators() {
        return Optional.ofNullable(this.securityOperators);
    }

    /**
     * When LDAP over SSL/TLS is enabled, the LDAP client is required to have base64 encoded Active Directory Certificate Service&#39;s self-signed root CA certificate, this optional parameter is used only for dual protocol with LDAP user-mapping volumes.
     * 
     */
    @Import(name="serverRootCACertificate")
    private @Nullable String serverRootCACertificate;

    /**
     * @return When LDAP over SSL/TLS is enabled, the LDAP client is required to have base64 encoded Active Directory Certificate Service&#39;s self-signed root CA certificate, this optional parameter is used only for dual protocol with LDAP user-mapping volumes.
     * 
     */
    public Optional<String> serverRootCACertificate() {
        return Optional.ofNullable(this.serverRootCACertificate);
    }

    /**
     * The Active Directory site the service will limit Domain Controller discovery to
     * 
     */
    @Import(name="site")
    private @Nullable String site;

    /**
     * @return The Active Directory site the service will limit Domain Controller discovery to
     * 
     */
    public Optional<String> site() {
        return Optional.ofNullable(this.site);
    }

    /**
     * NetBIOS name of the SMB server. This name will be registered as a computer account in the AD and used to mount volumes
     * 
     */
    @Import(name="smbServerName")
    private @Nullable String smbServerName;

    /**
     * @return NetBIOS name of the SMB server. This name will be registered as a computer account in the AD and used to mount volumes
     * 
     */
    public Optional<String> smbServerName() {
        return Optional.ofNullable(this.smbServerName);
    }

    /**
     * Status of the Active Directory
     * 
     */
    @Import(name="status", required=true)
    private String status;

    /**
     * @return Status of the Active Directory
     * 
     */
    public String status() {
        return this.status;
    }

    /**
     * Any details in regards to the Status of the Active Directory
     * 
     */
    @Import(name="statusDetails", required=true)
    private String statusDetails;

    /**
     * @return Any details in regards to the Status of the Active Directory
     * 
     */
    public String statusDetails() {
        return this.statusDetails;
    }

    /**
     * Username of Active Directory domain administrator
     * 
     */
    @Import(name="username")
    private @Nullable String username;

    /**
     * @return Username of Active Directory domain administrator
     * 
     */
    public Optional<String> username() {
        return Optional.ofNullable(this.username);
    }

    private ActiveDirectoryResponse() {}

    private ActiveDirectoryResponse(ActiveDirectoryResponse $) {
        this.activeDirectoryId = $.activeDirectoryId;
        this.adName = $.adName;
        this.aesEncryption = $.aesEncryption;
        this.allowLocalNfsUsersWithLdap = $.allowLocalNfsUsersWithLdap;
        this.backupOperators = $.backupOperators;
        this.dns = $.dns;
        this.domain = $.domain;
        this.kdcIP = $.kdcIP;
        this.ldapOverTLS = $.ldapOverTLS;
        this.ldapSigning = $.ldapSigning;
        this.organizationalUnit = $.organizationalUnit;
        this.password = $.password;
        this.securityOperators = $.securityOperators;
        this.serverRootCACertificate = $.serverRootCACertificate;
        this.site = $.site;
        this.smbServerName = $.smbServerName;
        this.status = $.status;
        this.statusDetails = $.statusDetails;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ActiveDirectoryResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ActiveDirectoryResponse $;

        public Builder() {
            $ = new ActiveDirectoryResponse();
        }

        public Builder(ActiveDirectoryResponse defaults) {
            $ = new ActiveDirectoryResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param activeDirectoryId Id of the Active Directory
         * 
         * @return builder
         * 
         */
        public Builder activeDirectoryId(@Nullable String activeDirectoryId) {
            $.activeDirectoryId = activeDirectoryId;
            return this;
        }

        /**
         * @param adName Name of the active directory machine. This optional parameter is used only while creating kerberos volume
         * 
         * @return builder
         * 
         */
        public Builder adName(@Nullable String adName) {
            $.adName = adName;
            return this;
        }

        /**
         * @param aesEncryption If enabled, AES encryption will be enabled for SMB communication.
         * 
         * @return builder
         * 
         */
        public Builder aesEncryption(@Nullable Boolean aesEncryption) {
            $.aesEncryption = aesEncryption;
            return this;
        }

        /**
         * @param allowLocalNfsUsersWithLdap  If enabled, NFS client local users can also (in addition to LDAP users) access the NFS volumes.
         * 
         * @return builder
         * 
         */
        public Builder allowLocalNfsUsersWithLdap(@Nullable Boolean allowLocalNfsUsersWithLdap) {
            $.allowLocalNfsUsersWithLdap = allowLocalNfsUsersWithLdap;
            return this;
        }

        /**
         * @param backupOperators Users to be added to the Built-in Backup Operator active directory group. A list of unique usernames without domain specifier
         * 
         * @return builder
         * 
         */
        public Builder backupOperators(@Nullable List<String> backupOperators) {
            $.backupOperators = backupOperators;
            return this;
        }

        /**
         * @param backupOperators Users to be added to the Built-in Backup Operator active directory group. A list of unique usernames without domain specifier
         * 
         * @return builder
         * 
         */
        public Builder backupOperators(String... backupOperators) {
            return backupOperators(List.of(backupOperators));
        }

        /**
         * @param dns Comma separated list of DNS server IP addresses (IPv4 only) for the Active Directory domain
         * 
         * @return builder
         * 
         */
        public Builder dns(@Nullable String dns) {
            $.dns = dns;
            return this;
        }

        /**
         * @param domain Name of the Active Directory domain
         * 
         * @return builder
         * 
         */
        public Builder domain(@Nullable String domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param kdcIP kdc server IP addresses for the active directory machine. This optional parameter is used only while creating kerberos volume.
         * 
         * @return builder
         * 
         */
        public Builder kdcIP(@Nullable String kdcIP) {
            $.kdcIP = kdcIP;
            return this;
        }

        /**
         * @param ldapOverTLS Specifies whether or not the LDAP traffic needs to be secured via TLS.
         * 
         * @return builder
         * 
         */
        public Builder ldapOverTLS(@Nullable Boolean ldapOverTLS) {
            $.ldapOverTLS = ldapOverTLS;
            return this;
        }

        /**
         * @param ldapSigning Specifies whether or not the LDAP traffic needs to be signed.
         * 
         * @return builder
         * 
         */
        public Builder ldapSigning(@Nullable Boolean ldapSigning) {
            $.ldapSigning = ldapSigning;
            return this;
        }

        /**
         * @param organizationalUnit The Organizational Unit (OU) within the Windows Active Directory
         * 
         * @return builder
         * 
         */
        public Builder organizationalUnit(@Nullable String organizationalUnit) {
            $.organizationalUnit = organizationalUnit;
            return this;
        }

        /**
         * @param password Plain text password of Active Directory domain administrator, value is masked in the response
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable String password) {
            $.password = password;
            return this;
        }

        /**
         * @param securityOperators Domain Users in the Active directory to be given SeSecurityPrivilege privilege (Needed for SMB Continuously available shares for SQL). A list of unique usernames without domain specifier
         * 
         * @return builder
         * 
         */
        public Builder securityOperators(@Nullable List<String> securityOperators) {
            $.securityOperators = securityOperators;
            return this;
        }

        /**
         * @param securityOperators Domain Users in the Active directory to be given SeSecurityPrivilege privilege (Needed for SMB Continuously available shares for SQL). A list of unique usernames without domain specifier
         * 
         * @return builder
         * 
         */
        public Builder securityOperators(String... securityOperators) {
            return securityOperators(List.of(securityOperators));
        }

        /**
         * @param serverRootCACertificate When LDAP over SSL/TLS is enabled, the LDAP client is required to have base64 encoded Active Directory Certificate Service&#39;s self-signed root CA certificate, this optional parameter is used only for dual protocol with LDAP user-mapping volumes.
         * 
         * @return builder
         * 
         */
        public Builder serverRootCACertificate(@Nullable String serverRootCACertificate) {
            $.serverRootCACertificate = serverRootCACertificate;
            return this;
        }

        /**
         * @param site The Active Directory site the service will limit Domain Controller discovery to
         * 
         * @return builder
         * 
         */
        public Builder site(@Nullable String site) {
            $.site = site;
            return this;
        }

        /**
         * @param smbServerName NetBIOS name of the SMB server. This name will be registered as a computer account in the AD and used to mount volumes
         * 
         * @return builder
         * 
         */
        public Builder smbServerName(@Nullable String smbServerName) {
            $.smbServerName = smbServerName;
            return this;
        }

        /**
         * @param status Status of the Active Directory
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            $.status = status;
            return this;
        }

        /**
         * @param statusDetails Any details in regards to the Status of the Active Directory
         * 
         * @return builder
         * 
         */
        public Builder statusDetails(String statusDetails) {
            $.statusDetails = statusDetails;
            return this;
        }

        /**
         * @param username Username of Active Directory domain administrator
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable String username) {
            $.username = username;
            return this;
        }

        public ActiveDirectoryResponse build() {
            $.organizationalUnit = Codegen.stringProp("organizationalUnit").arg($.organizationalUnit).def("CN=Computers").getNullable();
            $.status = Objects.requireNonNull($.status, "expected parameter 'status' to be non-null");
            $.statusDetails = Objects.requireNonNull($.statusDetails, "expected parameter 'statusDetails' to be non-null");
            return $;
        }
    }

}
