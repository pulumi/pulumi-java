// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.documentdb.inputs;

import com.pulumi.azurenative.documentdb.inputs.CertificateResponse;
import com.pulumi.azurenative.documentdb.inputs.SeedNodeResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Properties of a managed Cassandra cluster.
 * 
 */
public final class ClusterResourceResponseProperties extends com.pulumi.resources.InvokeArgs {

    public static final ClusterResourceResponseProperties Empty = new ClusterResourceResponseProperties();

    /**
     * Which authentication method Cassandra should use to authenticate clients. &#39;None&#39; turns off authentication, so should not be used except in emergencies. &#39;Cassandra&#39; is the default password based authentication. The default is &#39;Cassandra&#39;.
     * 
     */
    @Import(name="authenticationMethod")
    private @Nullable String authenticationMethod;

    public Optional<String> authenticationMethod() {
        return Optional.ofNullable(this.authenticationMethod);
    }

    /**
     * Which version of Cassandra should this cluster converge to running (e.g., 3.11). When updated, the cluster may take some time to migrate to the new version.
     * 
     */
    @Import(name="cassandraVersion")
    private @Nullable String cassandraVersion;

    public Optional<String> cassandraVersion() {
        return Optional.ofNullable(this.cassandraVersion);
    }

    /**
     * List of TLS certificates used to authorize clients connecting to the cluster. All connections are TLS encrypted whether clientCertificates is set or not, but if clientCertificates is set, the managed Cassandra cluster will reject all connections not bearing a TLS client certificate that can be validated from one or more of the public certificates in this property.
     * 
     */
    @Import(name="clientCertificates")
    private @Nullable List<CertificateResponse> clientCertificates;

    public Optional<List<CertificateResponse>> clientCertificates() {
        return Optional.ofNullable(this.clientCertificates);
    }

    /**
     * If you need to set the clusterName property in cassandra.yaml to something besides the resource name of the cluster, set the value to use on this property.
     * 
     */
    @Import(name="clusterNameOverride")
    private @Nullable String clusterNameOverride;

    public Optional<String> clusterNameOverride() {
        return Optional.ofNullable(this.clusterNameOverride);
    }

    /**
     * Resource id of a subnet that this cluster&#39;s management service should have its network interface attached to. The subnet must be routable to all subnets that will be delegated to data centers. The resource id must be of the form &#39;/subscriptions/&lt;subscription id&gt;/resourceGroups/&lt;resource group&gt;/providers/Microsoft.Network/virtualNetworks/&lt;virtual network&gt;/subnets/&lt;subnet&gt;&#39;
     * 
     */
    @Import(name="delegatedManagementSubnetId")
    private @Nullable String delegatedManagementSubnetId;

    public Optional<String> delegatedManagementSubnetId() {
        return Optional.ofNullable(this.delegatedManagementSubnetId);
    }

    /**
     * List of TLS certificates used to authorize gossip from unmanaged data centers. The TLS certificates of all nodes in unmanaged data centers must be verifiable using one of the certificates provided in this property.
     * 
     */
    @Import(name="externalGossipCertificates")
    private @Nullable List<CertificateResponse> externalGossipCertificates;

    public Optional<List<CertificateResponse>> externalGossipCertificates() {
        return Optional.ofNullable(this.externalGossipCertificates);
    }

    /**
     * List of IP addresses of seed nodes in unmanaged data centers. These will be added to the seed node lists of all managed nodes.
     * 
     */
    @Import(name="externalSeedNodes")
    private @Nullable List<SeedNodeResponse> externalSeedNodes;

    public Optional<List<SeedNodeResponse>> externalSeedNodes() {
        return Optional.ofNullable(this.externalSeedNodes);
    }

    /**
     * List of TLS certificates that unmanaged nodes must trust for gossip with managed nodes. All managed nodes will present TLS client certificates that are verifiable using one of the certificates provided in this property.
     * 
     */
    @Import(name="gossipCertificates", required=true)
    private List<CertificateResponse> gossipCertificates;

    public List<CertificateResponse> gossipCertificates() {
        return this.gossipCertificates;
    }

    /**
     * Number of hours to wait between taking a backup of the cluster. To disable backups, set this property to 0.
     * 
     */
    @Import(name="hoursBetweenBackups")
    private @Nullable Integer hoursBetweenBackups;

    public Optional<Integer> hoursBetweenBackups() {
        return Optional.ofNullable(this.hoursBetweenBackups);
    }

    /**
     * Hostname or IP address where the Prometheus endpoint containing data about the managed Cassandra nodes can be reached.
     * 
     */
    @Import(name="prometheusEndpoint")
    private @Nullable SeedNodeResponse prometheusEndpoint;

    public Optional<SeedNodeResponse> prometheusEndpoint() {
        return Optional.ofNullable(this.prometheusEndpoint);
    }

    /**
     * The status of the resource at the time the operation was called.
     * 
     */
    @Import(name="provisioningState")
    private @Nullable String provisioningState;

    public Optional<String> provisioningState() {
        return Optional.ofNullable(this.provisioningState);
    }

    /**
     * Should automatic repairs run on this cluster? If omitted, this is true, and should stay true unless you are running a hybrid cluster where you are already doing your own repairs.
     * 
     */
    @Import(name="repairEnabled")
    private @Nullable Boolean repairEnabled;

    public Optional<Boolean> repairEnabled() {
        return Optional.ofNullable(this.repairEnabled);
    }

    /**
     * List of IP addresses of seed nodes in the managed data centers. These should be added to the seed node lists of all unmanaged nodes.
     * 
     */
    @Import(name="seedNodes", required=true)
    private List<SeedNodeResponse> seedNodes;

    public List<SeedNodeResponse> seedNodes() {
        return this.seedNodes;
    }

    private ClusterResourceResponseProperties() {}

    private ClusterResourceResponseProperties(ClusterResourceResponseProperties $) {
        this.authenticationMethod = $.authenticationMethod;
        this.cassandraVersion = $.cassandraVersion;
        this.clientCertificates = $.clientCertificates;
        this.clusterNameOverride = $.clusterNameOverride;
        this.delegatedManagementSubnetId = $.delegatedManagementSubnetId;
        this.externalGossipCertificates = $.externalGossipCertificates;
        this.externalSeedNodes = $.externalSeedNodes;
        this.gossipCertificates = $.gossipCertificates;
        this.hoursBetweenBackups = $.hoursBetweenBackups;
        this.prometheusEndpoint = $.prometheusEndpoint;
        this.provisioningState = $.provisioningState;
        this.repairEnabled = $.repairEnabled;
        this.seedNodes = $.seedNodes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClusterResourceResponseProperties defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterResourceResponseProperties $;

        public Builder() {
            $ = new ClusterResourceResponseProperties();
        }

        public Builder(ClusterResourceResponseProperties defaults) {
            $ = new ClusterResourceResponseProperties(Objects.requireNonNull(defaults));
        }

        public Builder authenticationMethod(@Nullable String authenticationMethod) {
            $.authenticationMethod = authenticationMethod;
            return this;
        }

        public Builder cassandraVersion(@Nullable String cassandraVersion) {
            $.cassandraVersion = cassandraVersion;
            return this;
        }

        public Builder clientCertificates(@Nullable List<CertificateResponse> clientCertificates) {
            $.clientCertificates = clientCertificates;
            return this;
        }

        public Builder clientCertificates(CertificateResponse... clientCertificates) {
            return clientCertificates(List.of(clientCertificates));
        }

        public Builder clusterNameOverride(@Nullable String clusterNameOverride) {
            $.clusterNameOverride = clusterNameOverride;
            return this;
        }

        public Builder delegatedManagementSubnetId(@Nullable String delegatedManagementSubnetId) {
            $.delegatedManagementSubnetId = delegatedManagementSubnetId;
            return this;
        }

        public Builder externalGossipCertificates(@Nullable List<CertificateResponse> externalGossipCertificates) {
            $.externalGossipCertificates = externalGossipCertificates;
            return this;
        }

        public Builder externalGossipCertificates(CertificateResponse... externalGossipCertificates) {
            return externalGossipCertificates(List.of(externalGossipCertificates));
        }

        public Builder externalSeedNodes(@Nullable List<SeedNodeResponse> externalSeedNodes) {
            $.externalSeedNodes = externalSeedNodes;
            return this;
        }

        public Builder externalSeedNodes(SeedNodeResponse... externalSeedNodes) {
            return externalSeedNodes(List.of(externalSeedNodes));
        }

        public Builder gossipCertificates(List<CertificateResponse> gossipCertificates) {
            $.gossipCertificates = gossipCertificates;
            return this;
        }

        public Builder gossipCertificates(CertificateResponse... gossipCertificates) {
            return gossipCertificates(List.of(gossipCertificates));
        }

        public Builder hoursBetweenBackups(@Nullable Integer hoursBetweenBackups) {
            $.hoursBetweenBackups = hoursBetweenBackups;
            return this;
        }

        public Builder prometheusEndpoint(@Nullable SeedNodeResponse prometheusEndpoint) {
            $.prometheusEndpoint = prometheusEndpoint;
            return this;
        }

        public Builder provisioningState(@Nullable String provisioningState) {
            $.provisioningState = provisioningState;
            return this;
        }

        public Builder repairEnabled(@Nullable Boolean repairEnabled) {
            $.repairEnabled = repairEnabled;
            return this;
        }

        public Builder seedNodes(List<SeedNodeResponse> seedNodes) {
            $.seedNodes = seedNodes;
            return this;
        }

        public Builder seedNodes(SeedNodeResponse... seedNodes) {
            return seedNodes(List.of(seedNodes));
        }

        public ClusterResourceResponseProperties build() {
            $.gossipCertificates = Objects.requireNonNull($.gossipCertificates, "expected parameter 'gossipCertificates' to be non-null");
            $.seedNodes = Objects.requireNonNull($.seedNodes, "expected parameter 'seedNodes' to be non-null");
            return $;
        }
    }

}
