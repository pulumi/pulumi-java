// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory;

import com.pulumi.azurenative.datafactory.inputs.BlobEventsTriggerArgs;
import com.pulumi.azurenative.datafactory.inputs.BlobTriggerArgs;
import com.pulumi.azurenative.datafactory.inputs.ChainingTriggerArgs;
import com.pulumi.azurenative.datafactory.inputs.CustomEventsTriggerArgs;
import com.pulumi.azurenative.datafactory.inputs.MultiplePipelineTriggerArgs;
import com.pulumi.azurenative.datafactory.inputs.RerunTumblingWindowTriggerArgs;
import com.pulumi.azurenative.datafactory.inputs.ScheduleTriggerArgs;
import com.pulumi.azurenative.datafactory.inputs.TumblingWindowTriggerArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TriggerArgs extends com.pulumi.resources.ResourceArgs {

    public static final TriggerArgs Empty = new TriggerArgs();

    /**
     * The factory name.
     * 
     */
    @Import(name="factoryName", required=true)
    private Output<String> factoryName;

    /**
     * @return The factory name.
     * 
     */
    public Output<String> factoryName() {
        return this.factoryName;
    }

    /**
     * Properties of the trigger.
     * 
     */
    @Import(name="properties", required=true)
    private Output<Object> properties;

    /**
     * @return Properties of the trigger.
     * 
     */
    public Output<Object> properties() {
        return this.properties;
    }

    /**
     * The resource group name.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The resource group name.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The trigger name.
     * 
     */
    @Import(name="triggerName")
    private @Nullable Output<String> triggerName;

    /**
     * @return The trigger name.
     * 
     */
    public Optional<Output<String>> triggerName() {
        return Optional.ofNullable(this.triggerName);
    }

    private TriggerArgs() {}

    private TriggerArgs(TriggerArgs $) {
        this.factoryName = $.factoryName;
        this.properties = $.properties;
        this.resourceGroupName = $.resourceGroupName;
        this.triggerName = $.triggerName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TriggerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TriggerArgs $;

        public Builder() {
            $ = new TriggerArgs();
        }

        public Builder(TriggerArgs defaults) {
            $ = new TriggerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param factoryName The factory name.
         * 
         * @return builder
         * 
         */
        public Builder factoryName(Output<String> factoryName) {
            $.factoryName = factoryName;
            return this;
        }

        /**
         * @param factoryName The factory name.
         * 
         * @return builder
         * 
         */
        public Builder factoryName(String factoryName) {
            return factoryName(Output.of(factoryName));
        }

        /**
         * @param properties Properties of the trigger.
         * 
         * @return builder
         * 
         */
        public Builder properties(Output<Object> properties) {
            $.properties = properties;
            return this;
        }

        /**
         * @param properties Properties of the trigger.
         * 
         * @return builder
         * 
         */
        public Builder properties(Object properties) {
            return properties(Output.of(properties));
        }

        /**
         * @param resourceGroupName The resource group name.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The resource group name.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param triggerName The trigger name.
         * 
         * @return builder
         * 
         */
        public Builder triggerName(@Nullable Output<String> triggerName) {
            $.triggerName = triggerName;
            return this;
        }

        /**
         * @param triggerName The trigger name.
         * 
         * @return builder
         * 
         */
        public Builder triggerName(String triggerName) {
            return triggerName(Output.of(triggerName));
        }

        public TriggerArgs build() {
            $.factoryName = Objects.requireNonNull($.factoryName, "expected parameter 'factoryName' to be non-null");
            $.properties = Objects.requireNonNull($.properties, "expected parameter 'properties' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
