// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datamigration.inputs;

import com.pulumi.azurenative.datamigration.inputs.BackupFileInfoResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Information of backup set
 * 
 */
public final class BackupSetInfoResponse extends com.pulumi.resources.InvokeArgs {

    public static final BackupSetInfoResponse Empty = new BackupSetInfoResponse();

    /**
     * Date and time that the backup operation finished
     * 
     */
    @Import(name="backupFinishedDate")
    private @Nullable String backupFinishedDate;

    /**
     * @return Date and time that the backup operation finished
     * 
     */
    public Optional<String> backupFinishedDate() {
        return Optional.ofNullable(this.backupFinishedDate);
    }

    /**
     * Id for the set of backup files
     * 
     */
    @Import(name="backupSetId")
    private @Nullable String backupSetId;

    /**
     * @return Id for the set of backup files
     * 
     */
    public Optional<String> backupSetId() {
        return Optional.ofNullable(this.backupSetId);
    }

    /**
     * Date and time that the backup operation began
     * 
     */
    @Import(name="backupStartDate")
    private @Nullable String backupStartDate;

    /**
     * @return Date and time that the backup operation began
     * 
     */
    public Optional<String> backupStartDate() {
        return Optional.ofNullable(this.backupStartDate);
    }

    /**
     * Enum of the different backup types
     * 
     */
    @Import(name="backupType")
    private @Nullable String backupType;

    /**
     * @return Enum of the different backup types
     * 
     */
    public Optional<String> backupType() {
        return Optional.ofNullable(this.backupType);
    }

    /**
     * Name of the database to which the backup set belongs
     * 
     */
    @Import(name="databaseName")
    private @Nullable String databaseName;

    /**
     * @return Name of the database to which the backup set belongs
     * 
     */
    public Optional<String> databaseName() {
        return Optional.ofNullable(this.databaseName);
    }

    /**
     * First log sequence number of the backup file
     * 
     */
    @Import(name="firstLsn")
    private @Nullable String firstLsn;

    /**
     * @return First log sequence number of the backup file
     * 
     */
    public Optional<String> firstLsn() {
        return Optional.ofNullable(this.firstLsn);
    }

    /**
     * Whether the backup set is restored or not
     * 
     */
    @Import(name="isBackupRestored")
    private @Nullable Boolean isBackupRestored;

    /**
     * @return Whether the backup set is restored or not
     * 
     */
    public Optional<Boolean> isBackupRestored() {
        return Optional.ofNullable(this.isBackupRestored);
    }

    /**
     * Last log sequence number of the backup file
     * 
     */
    @Import(name="lastLsn")
    private @Nullable String lastLsn;

    /**
     * @return Last log sequence number of the backup file
     * 
     */
    public Optional<String> lastLsn() {
        return Optional.ofNullable(this.lastLsn);
    }

    /**
     * Last modified time of the backup file in share location
     * 
     */
    @Import(name="lastModifiedTime")
    private @Nullable String lastModifiedTime;

    /**
     * @return Last modified time of the backup file in share location
     * 
     */
    public Optional<String> lastModifiedTime() {
        return Optional.ofNullable(this.lastModifiedTime);
    }

    /**
     * List of files in the backup set
     * 
     */
    @Import(name="listOfBackupFiles")
    private @Nullable List<BackupFileInfoResponse> listOfBackupFiles;

    /**
     * @return List of files in the backup set
     * 
     */
    public Optional<List<BackupFileInfoResponse>> listOfBackupFiles() {
        return Optional.ofNullable(this.listOfBackupFiles);
    }

    private BackupSetInfoResponse() {}

    private BackupSetInfoResponse(BackupSetInfoResponse $) {
        this.backupFinishedDate = $.backupFinishedDate;
        this.backupSetId = $.backupSetId;
        this.backupStartDate = $.backupStartDate;
        this.backupType = $.backupType;
        this.databaseName = $.databaseName;
        this.firstLsn = $.firstLsn;
        this.isBackupRestored = $.isBackupRestored;
        this.lastLsn = $.lastLsn;
        this.lastModifiedTime = $.lastModifiedTime;
        this.listOfBackupFiles = $.listOfBackupFiles;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BackupSetInfoResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BackupSetInfoResponse $;

        public Builder() {
            $ = new BackupSetInfoResponse();
        }

        public Builder(BackupSetInfoResponse defaults) {
            $ = new BackupSetInfoResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param backupFinishedDate Date and time that the backup operation finished
         * 
         * @return builder
         * 
         */
        public Builder backupFinishedDate(@Nullable String backupFinishedDate) {
            $.backupFinishedDate = backupFinishedDate;
            return this;
        }

        /**
         * @param backupSetId Id for the set of backup files
         * 
         * @return builder
         * 
         */
        public Builder backupSetId(@Nullable String backupSetId) {
            $.backupSetId = backupSetId;
            return this;
        }

        /**
         * @param backupStartDate Date and time that the backup operation began
         * 
         * @return builder
         * 
         */
        public Builder backupStartDate(@Nullable String backupStartDate) {
            $.backupStartDate = backupStartDate;
            return this;
        }

        /**
         * @param backupType Enum of the different backup types
         * 
         * @return builder
         * 
         */
        public Builder backupType(@Nullable String backupType) {
            $.backupType = backupType;
            return this;
        }

        /**
         * @param databaseName Name of the database to which the backup set belongs
         * 
         * @return builder
         * 
         */
        public Builder databaseName(@Nullable String databaseName) {
            $.databaseName = databaseName;
            return this;
        }

        /**
         * @param firstLsn First log sequence number of the backup file
         * 
         * @return builder
         * 
         */
        public Builder firstLsn(@Nullable String firstLsn) {
            $.firstLsn = firstLsn;
            return this;
        }

        /**
         * @param isBackupRestored Whether the backup set is restored or not
         * 
         * @return builder
         * 
         */
        public Builder isBackupRestored(@Nullable Boolean isBackupRestored) {
            $.isBackupRestored = isBackupRestored;
            return this;
        }

        /**
         * @param lastLsn Last log sequence number of the backup file
         * 
         * @return builder
         * 
         */
        public Builder lastLsn(@Nullable String lastLsn) {
            $.lastLsn = lastLsn;
            return this;
        }

        /**
         * @param lastModifiedTime Last modified time of the backup file in share location
         * 
         * @return builder
         * 
         */
        public Builder lastModifiedTime(@Nullable String lastModifiedTime) {
            $.lastModifiedTime = lastModifiedTime;
            return this;
        }

        /**
         * @param listOfBackupFiles List of files in the backup set
         * 
         * @return builder
         * 
         */
        public Builder listOfBackupFiles(@Nullable List<BackupFileInfoResponse> listOfBackupFiles) {
            $.listOfBackupFiles = listOfBackupFiles;
            return this;
        }

        /**
         * @param listOfBackupFiles List of files in the backup set
         * 
         * @return builder
         * 
         */
        public Builder listOfBackupFiles(BackupFileInfoResponse... listOfBackupFiles) {
            return listOfBackupFiles(List.of(listOfBackupFiles));
        }

        public BackupSetInfoResponse build() {
            return $;
        }
    }

}
