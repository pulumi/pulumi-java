// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.recoveryservices.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * InMageRcm mobility agent details.
 * 
 */
public final class InMageRcmMobilityAgentDetailsResponse extends com.pulumi.resources.InvokeArgs {

    public static final InMageRcmMobilityAgentDetailsResponse Empty = new InMageRcmMobilityAgentDetailsResponse();

    /**
     * The agent version expiry date.
     * 
     */
    @Import(name="agentVersionExpiryDate", required=true)
    private String agentVersionExpiryDate;

    public String agentVersionExpiryDate() {
        return this.agentVersionExpiryDate;
    }

    /**
     * The driver version.
     * 
     */
    @Import(name="driverVersion", required=true)
    private String driverVersion;

    public String driverVersion() {
        return this.driverVersion;
    }

    /**
     * The driver version expiry date.
     * 
     */
    @Import(name="driverVersionExpiryDate", required=true)
    private String driverVersionExpiryDate;

    public String driverVersionExpiryDate() {
        return this.driverVersionExpiryDate;
    }

    /**
     * A value indicating whether agent is upgradeable or not.
     * 
     */
    @Import(name="isUpgradeable", required=true)
    private String isUpgradeable;

    public String isUpgradeable() {
        return this.isUpgradeable;
    }

    /**
     * The time of the last heartbeat received from the agent.
     * 
     */
    @Import(name="lastHeartbeatUtc", required=true)
    private String lastHeartbeatUtc;

    public String lastHeartbeatUtc() {
        return this.lastHeartbeatUtc;
    }

    /**
     * The latest upgradeable version available without reboot.
     * 
     */
    @Import(name="latestUpgradableVersionWithoutReboot", required=true)
    private String latestUpgradableVersionWithoutReboot;

    public String latestUpgradableVersionWithoutReboot() {
        return this.latestUpgradableVersionWithoutReboot;
    }

    /**
     * The latest agent version available.
     * 
     */
    @Import(name="latestVersion", required=true)
    private String latestVersion;

    public String latestVersion() {
        return this.latestVersion;
    }

    /**
     * The whether update is possible or not.
     * 
     */
    @Import(name="reasonsBlockingUpgrade", required=true)
    private List<String> reasonsBlockingUpgrade;

    public List<String> reasonsBlockingUpgrade() {
        return this.reasonsBlockingUpgrade;
    }

    /**
     * The agent version.
     * 
     */
    @Import(name="version", required=true)
    private String version;

    public String version() {
        return this.version;
    }

    private InMageRcmMobilityAgentDetailsResponse() {}

    private InMageRcmMobilityAgentDetailsResponse(InMageRcmMobilityAgentDetailsResponse $) {
        this.agentVersionExpiryDate = $.agentVersionExpiryDate;
        this.driverVersion = $.driverVersion;
        this.driverVersionExpiryDate = $.driverVersionExpiryDate;
        this.isUpgradeable = $.isUpgradeable;
        this.lastHeartbeatUtc = $.lastHeartbeatUtc;
        this.latestUpgradableVersionWithoutReboot = $.latestUpgradableVersionWithoutReboot;
        this.latestVersion = $.latestVersion;
        this.reasonsBlockingUpgrade = $.reasonsBlockingUpgrade;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InMageRcmMobilityAgentDetailsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InMageRcmMobilityAgentDetailsResponse $;

        public Builder() {
            $ = new InMageRcmMobilityAgentDetailsResponse();
        }

        public Builder(InMageRcmMobilityAgentDetailsResponse defaults) {
            $ = new InMageRcmMobilityAgentDetailsResponse(Objects.requireNonNull(defaults));
        }

        public Builder agentVersionExpiryDate(String agentVersionExpiryDate) {
            $.agentVersionExpiryDate = agentVersionExpiryDate;
            return this;
        }

        public Builder driverVersion(String driverVersion) {
            $.driverVersion = driverVersion;
            return this;
        }

        public Builder driverVersionExpiryDate(String driverVersionExpiryDate) {
            $.driverVersionExpiryDate = driverVersionExpiryDate;
            return this;
        }

        public Builder isUpgradeable(String isUpgradeable) {
            $.isUpgradeable = isUpgradeable;
            return this;
        }

        public Builder lastHeartbeatUtc(String lastHeartbeatUtc) {
            $.lastHeartbeatUtc = lastHeartbeatUtc;
            return this;
        }

        public Builder latestUpgradableVersionWithoutReboot(String latestUpgradableVersionWithoutReboot) {
            $.latestUpgradableVersionWithoutReboot = latestUpgradableVersionWithoutReboot;
            return this;
        }

        public Builder latestVersion(String latestVersion) {
            $.latestVersion = latestVersion;
            return this;
        }

        public Builder reasonsBlockingUpgrade(List<String> reasonsBlockingUpgrade) {
            $.reasonsBlockingUpgrade = reasonsBlockingUpgrade;
            return this;
        }

        public Builder reasonsBlockingUpgrade(String... reasonsBlockingUpgrade) {
            return reasonsBlockingUpgrade(List.of(reasonsBlockingUpgrade));
        }

        public Builder version(String version) {
            $.version = version;
            return this;
        }

        public InMageRcmMobilityAgentDetailsResponse build() {
            $.agentVersionExpiryDate = Objects.requireNonNull($.agentVersionExpiryDate, "expected parameter 'agentVersionExpiryDate' to be non-null");
            $.driverVersion = Objects.requireNonNull($.driverVersion, "expected parameter 'driverVersion' to be non-null");
            $.driverVersionExpiryDate = Objects.requireNonNull($.driverVersionExpiryDate, "expected parameter 'driverVersionExpiryDate' to be non-null");
            $.isUpgradeable = Objects.requireNonNull($.isUpgradeable, "expected parameter 'isUpgradeable' to be non-null");
            $.lastHeartbeatUtc = Objects.requireNonNull($.lastHeartbeatUtc, "expected parameter 'lastHeartbeatUtc' to be non-null");
            $.latestUpgradableVersionWithoutReboot = Objects.requireNonNull($.latestUpgradableVersionWithoutReboot, "expected parameter 'latestUpgradableVersionWithoutReboot' to be non-null");
            $.latestVersion = Objects.requireNonNull($.latestVersion, "expected parameter 'latestVersion' to be non-null");
            $.reasonsBlockingUpgrade = Objects.requireNonNull($.reasonsBlockingUpgrade, "expected parameter 'reasonsBlockingUpgrade' to be non-null");
            $.version = Objects.requireNonNull($.version, "expected parameter 'version' to be non-null");
            return $;
        }
    }

}
