// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.cache.inputs;

import com.pulumi.azurenative.cache.enums.SkuFamily;
import com.pulumi.azurenative.cache.enums.SkuName;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


/**
 * SKU parameters supplied to the create Redis operation.
 * 
 */
public final class SkuArgs extends com.pulumi.resources.ResourceArgs {

    public static final SkuArgs Empty = new SkuArgs();

    /**
     * The size of the Redis cache to deploy. Valid values: for C (Basic/Standard) family (0, 1, 2, 3, 4, 5, 6), for P (Premium) family (1, 2, 3, 4).
     * 
     */
    @Import(name="capacity", required=true)
    private Output<Integer> capacity;

    /**
     * @return The size of the Redis cache to deploy. Valid values: for C (Basic/Standard) family (0, 1, 2, 3, 4, 5, 6), for P (Premium) family (1, 2, 3, 4).
     * 
     */
    public Output<Integer> capacity() {
        return this.capacity;
    }

    /**
     * The SKU family to use. Valid values: (C, P). (C = Basic/Standard, P = Premium).
     * 
     */
    @Import(name="family", required=true)
    private Output<Either<String,SkuFamily>> family;

    /**
     * @return The SKU family to use. Valid values: (C, P). (C = Basic/Standard, P = Premium).
     * 
     */
    public Output<Either<String,SkuFamily>> family() {
        return this.family;
    }

    /**
     * The type of Redis cache to deploy. Valid values: (Basic, Standard, Premium)
     * 
     */
    @Import(name="name", required=true)
    private Output<Either<String,SkuName>> name;

    /**
     * @return The type of Redis cache to deploy. Valid values: (Basic, Standard, Premium)
     * 
     */
    public Output<Either<String,SkuName>> name() {
        return this.name;
    }

    private SkuArgs() {}

    private SkuArgs(SkuArgs $) {
        this.capacity = $.capacity;
        this.family = $.family;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SkuArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SkuArgs $;

        public Builder() {
            $ = new SkuArgs();
        }

        public Builder(SkuArgs defaults) {
            $ = new SkuArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param capacity The size of the Redis cache to deploy. Valid values: for C (Basic/Standard) family (0, 1, 2, 3, 4, 5, 6), for P (Premium) family (1, 2, 3, 4).
         * 
         * @return builder
         * 
         */
        public Builder capacity(Output<Integer> capacity) {
            $.capacity = capacity;
            return this;
        }

        /**
         * @param capacity The size of the Redis cache to deploy. Valid values: for C (Basic/Standard) family (0, 1, 2, 3, 4, 5, 6), for P (Premium) family (1, 2, 3, 4).
         * 
         * @return builder
         * 
         */
        public Builder capacity(Integer capacity) {
            return capacity(Output.of(capacity));
        }

        /**
         * @param family The SKU family to use. Valid values: (C, P). (C = Basic/Standard, P = Premium).
         * 
         * @return builder
         * 
         */
        public Builder family(Output<Either<String,SkuFamily>> family) {
            $.family = family;
            return this;
        }

        /**
         * @param family The SKU family to use. Valid values: (C, P). (C = Basic/Standard, P = Premium).
         * 
         * @return builder
         * 
         */
        public Builder family(Either<String,SkuFamily> family) {
            return family(Output.of(family));
        }

        /**
         * @param family The SKU family to use. Valid values: (C, P). (C = Basic/Standard, P = Premium).
         * 
         * @return builder
         * 
         */
        public Builder family(String family) {
            return family(Either.ofLeft(family));
        }

        /**
         * @param family The SKU family to use. Valid values: (C, P). (C = Basic/Standard, P = Premium).
         * 
         * @return builder
         * 
         */
        public Builder family(SkuFamily family) {
            return family(Either.ofRight(family));
        }

        /**
         * @param name The type of Redis cache to deploy. Valid values: (Basic, Standard, Premium)
         * 
         * @return builder
         * 
         */
        public Builder name(Output<Either<String,SkuName>> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The type of Redis cache to deploy. Valid values: (Basic, Standard, Premium)
         * 
         * @return builder
         * 
         */
        public Builder name(Either<String,SkuName> name) {
            return name(Output.of(name));
        }

        /**
         * @param name The type of Redis cache to deploy. Valid values: (Basic, Standard, Premium)
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Either.ofLeft(name));
        }

        /**
         * @param name The type of Redis cache to deploy. Valid values: (Basic, Standard, Premium)
         * 
         * @return builder
         * 
         */
        public Builder name(SkuName name) {
            return name(Either.ofRight(name));
        }

        public SkuArgs build() {
            $.capacity = Objects.requireNonNull($.capacity, "expected parameter 'capacity' to be non-null");
            $.family = Objects.requireNonNull($.family, "expected parameter 'family' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            return $;
        }
    }

}
