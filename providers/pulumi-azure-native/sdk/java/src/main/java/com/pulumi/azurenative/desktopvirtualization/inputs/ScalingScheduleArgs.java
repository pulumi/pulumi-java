// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.desktopvirtualization.inputs;

import com.pulumi.azurenative.desktopvirtualization.enums.SessionHostLoadBalancingAlgorithm;
import com.pulumi.azurenative.desktopvirtualization.enums.StopHostsWhen;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Scaling plan schedule.
 * 
 */
public final class ScalingScheduleArgs extends com.pulumi.resources.ResourceArgs {

    public static final ScalingScheduleArgs Empty = new ScalingScheduleArgs();

    /**
     * Set of days of the week on which this schedule is active.
     * 
     */
    @Import(name="daysOfWeek")
    private @Nullable Output<List<String>> daysOfWeek;

    /**
     * @return Set of days of the week on which this schedule is active.
     * 
     */
    public Optional<Output<List<String>>> daysOfWeek() {
        return Optional.ofNullable(this.daysOfWeek);
    }

    /**
     * Name of the scaling schedule.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the scaling schedule.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Load balancing algorithm for off-peak period.
     * 
     */
    @Import(name="offPeakLoadBalancingAlgorithm")
    private @Nullable Output<Either<String,SessionHostLoadBalancingAlgorithm>> offPeakLoadBalancingAlgorithm;

    /**
     * @return Load balancing algorithm for off-peak period.
     * 
     */
    public Optional<Output<Either<String,SessionHostLoadBalancingAlgorithm>>> offPeakLoadBalancingAlgorithm() {
        return Optional.ofNullable(this.offPeakLoadBalancingAlgorithm);
    }

    /**
     * Starting time for off-peak period.
     * 
     */
    @Import(name="offPeakStartTime")
    private @Nullable Output<String> offPeakStartTime;

    /**
     * @return Starting time for off-peak period.
     * 
     */
    public Optional<Output<String>> offPeakStartTime() {
        return Optional.ofNullable(this.offPeakStartTime);
    }

    /**
     * Load balancing algorithm for peak period.
     * 
     */
    @Import(name="peakLoadBalancingAlgorithm")
    private @Nullable Output<Either<String,SessionHostLoadBalancingAlgorithm>> peakLoadBalancingAlgorithm;

    /**
     * @return Load balancing algorithm for peak period.
     * 
     */
    public Optional<Output<Either<String,SessionHostLoadBalancingAlgorithm>>> peakLoadBalancingAlgorithm() {
        return Optional.ofNullable(this.peakLoadBalancingAlgorithm);
    }

    /**
     * Starting time for peak period.
     * 
     */
    @Import(name="peakStartTime")
    private @Nullable Output<String> peakStartTime;

    /**
     * @return Starting time for peak period.
     * 
     */
    public Optional<Output<String>> peakStartTime() {
        return Optional.ofNullable(this.peakStartTime);
    }

    /**
     * Capacity threshold for ramp down period.
     * 
     */
    @Import(name="rampDownCapacityThresholdPct")
    private @Nullable Output<Integer> rampDownCapacityThresholdPct;

    /**
     * @return Capacity threshold for ramp down period.
     * 
     */
    public Optional<Output<Integer>> rampDownCapacityThresholdPct() {
        return Optional.ofNullable(this.rampDownCapacityThresholdPct);
    }

    /**
     * Should users be logged off forcefully from hosts.
     * 
     */
    @Import(name="rampDownForceLogoffUsers")
    private @Nullable Output<Boolean> rampDownForceLogoffUsers;

    /**
     * @return Should users be logged off forcefully from hosts.
     * 
     */
    public Optional<Output<Boolean>> rampDownForceLogoffUsers() {
        return Optional.ofNullable(this.rampDownForceLogoffUsers);
    }

    /**
     * Load balancing algorithm for ramp down period.
     * 
     */
    @Import(name="rampDownLoadBalancingAlgorithm")
    private @Nullable Output<Either<String,SessionHostLoadBalancingAlgorithm>> rampDownLoadBalancingAlgorithm;

    /**
     * @return Load balancing algorithm for ramp down period.
     * 
     */
    public Optional<Output<Either<String,SessionHostLoadBalancingAlgorithm>>> rampDownLoadBalancingAlgorithm() {
        return Optional.ofNullable(this.rampDownLoadBalancingAlgorithm);
    }

    /**
     * Minimum host percentage for ramp down period.
     * 
     */
    @Import(name="rampDownMinimumHostsPct")
    private @Nullable Output<Integer> rampDownMinimumHostsPct;

    /**
     * @return Minimum host percentage for ramp down period.
     * 
     */
    public Optional<Output<Integer>> rampDownMinimumHostsPct() {
        return Optional.ofNullable(this.rampDownMinimumHostsPct);
    }

    /**
     * Notification message for users during ramp down period.
     * 
     */
    @Import(name="rampDownNotificationMessage")
    private @Nullable Output<String> rampDownNotificationMessage;

    /**
     * @return Notification message for users during ramp down period.
     * 
     */
    public Optional<Output<String>> rampDownNotificationMessage() {
        return Optional.ofNullable(this.rampDownNotificationMessage);
    }

    /**
     * Starting time for ramp down period.
     * 
     */
    @Import(name="rampDownStartTime")
    private @Nullable Output<String> rampDownStartTime;

    /**
     * @return Starting time for ramp down period.
     * 
     */
    public Optional<Output<String>> rampDownStartTime() {
        return Optional.ofNullable(this.rampDownStartTime);
    }

    /**
     * Specifies when to stop hosts during ramp down period.
     * 
     */
    @Import(name="rampDownStopHostsWhen")
    private @Nullable Output<Either<String,StopHostsWhen>> rampDownStopHostsWhen;

    /**
     * @return Specifies when to stop hosts during ramp down period.
     * 
     */
    public Optional<Output<Either<String,StopHostsWhen>>> rampDownStopHostsWhen() {
        return Optional.ofNullable(this.rampDownStopHostsWhen);
    }

    /**
     * Number of minutes to wait to stop hosts during ramp down period.
     * 
     */
    @Import(name="rampDownWaitTimeMinutes")
    private @Nullable Output<Integer> rampDownWaitTimeMinutes;

    /**
     * @return Number of minutes to wait to stop hosts during ramp down period.
     * 
     */
    public Optional<Output<Integer>> rampDownWaitTimeMinutes() {
        return Optional.ofNullable(this.rampDownWaitTimeMinutes);
    }

    /**
     * Capacity threshold for ramp up period.
     * 
     */
    @Import(name="rampUpCapacityThresholdPct")
    private @Nullable Output<Integer> rampUpCapacityThresholdPct;

    /**
     * @return Capacity threshold for ramp up period.
     * 
     */
    public Optional<Output<Integer>> rampUpCapacityThresholdPct() {
        return Optional.ofNullable(this.rampUpCapacityThresholdPct);
    }

    /**
     * Load balancing algorithm for ramp up period.
     * 
     */
    @Import(name="rampUpLoadBalancingAlgorithm")
    private @Nullable Output<Either<String,SessionHostLoadBalancingAlgorithm>> rampUpLoadBalancingAlgorithm;

    /**
     * @return Load balancing algorithm for ramp up period.
     * 
     */
    public Optional<Output<Either<String,SessionHostLoadBalancingAlgorithm>>> rampUpLoadBalancingAlgorithm() {
        return Optional.ofNullable(this.rampUpLoadBalancingAlgorithm);
    }

    /**
     * Minimum host percentage for ramp up period.
     * 
     */
    @Import(name="rampUpMinimumHostsPct")
    private @Nullable Output<Integer> rampUpMinimumHostsPct;

    /**
     * @return Minimum host percentage for ramp up period.
     * 
     */
    public Optional<Output<Integer>> rampUpMinimumHostsPct() {
        return Optional.ofNullable(this.rampUpMinimumHostsPct);
    }

    /**
     * Starting time for ramp up period.
     * 
     */
    @Import(name="rampUpStartTime")
    private @Nullable Output<String> rampUpStartTime;

    /**
     * @return Starting time for ramp up period.
     * 
     */
    public Optional<Output<String>> rampUpStartTime() {
        return Optional.ofNullable(this.rampUpStartTime);
    }

    private ScalingScheduleArgs() {}

    private ScalingScheduleArgs(ScalingScheduleArgs $) {
        this.daysOfWeek = $.daysOfWeek;
        this.name = $.name;
        this.offPeakLoadBalancingAlgorithm = $.offPeakLoadBalancingAlgorithm;
        this.offPeakStartTime = $.offPeakStartTime;
        this.peakLoadBalancingAlgorithm = $.peakLoadBalancingAlgorithm;
        this.peakStartTime = $.peakStartTime;
        this.rampDownCapacityThresholdPct = $.rampDownCapacityThresholdPct;
        this.rampDownForceLogoffUsers = $.rampDownForceLogoffUsers;
        this.rampDownLoadBalancingAlgorithm = $.rampDownLoadBalancingAlgorithm;
        this.rampDownMinimumHostsPct = $.rampDownMinimumHostsPct;
        this.rampDownNotificationMessage = $.rampDownNotificationMessage;
        this.rampDownStartTime = $.rampDownStartTime;
        this.rampDownStopHostsWhen = $.rampDownStopHostsWhen;
        this.rampDownWaitTimeMinutes = $.rampDownWaitTimeMinutes;
        this.rampUpCapacityThresholdPct = $.rampUpCapacityThresholdPct;
        this.rampUpLoadBalancingAlgorithm = $.rampUpLoadBalancingAlgorithm;
        this.rampUpMinimumHostsPct = $.rampUpMinimumHostsPct;
        this.rampUpStartTime = $.rampUpStartTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ScalingScheduleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ScalingScheduleArgs $;

        public Builder() {
            $ = new ScalingScheduleArgs();
        }

        public Builder(ScalingScheduleArgs defaults) {
            $ = new ScalingScheduleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param daysOfWeek Set of days of the week on which this schedule is active.
         * 
         * @return builder
         * 
         */
        public Builder daysOfWeek(@Nullable Output<List<String>> daysOfWeek) {
            $.daysOfWeek = daysOfWeek;
            return this;
        }

        /**
         * @param daysOfWeek Set of days of the week on which this schedule is active.
         * 
         * @return builder
         * 
         */
        public Builder daysOfWeek(List<String> daysOfWeek) {
            return daysOfWeek(Output.of(daysOfWeek));
        }

        /**
         * @param daysOfWeek Set of days of the week on which this schedule is active.
         * 
         * @return builder
         * 
         */
        public Builder daysOfWeek(String... daysOfWeek) {
            return daysOfWeek(List.of(daysOfWeek));
        }

        /**
         * @param name Name of the scaling schedule.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the scaling schedule.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param offPeakLoadBalancingAlgorithm Load balancing algorithm for off-peak period.
         * 
         * @return builder
         * 
         */
        public Builder offPeakLoadBalancingAlgorithm(@Nullable Output<Either<String,SessionHostLoadBalancingAlgorithm>> offPeakLoadBalancingAlgorithm) {
            $.offPeakLoadBalancingAlgorithm = offPeakLoadBalancingAlgorithm;
            return this;
        }

        /**
         * @param offPeakLoadBalancingAlgorithm Load balancing algorithm for off-peak period.
         * 
         * @return builder
         * 
         */
        public Builder offPeakLoadBalancingAlgorithm(Either<String,SessionHostLoadBalancingAlgorithm> offPeakLoadBalancingAlgorithm) {
            return offPeakLoadBalancingAlgorithm(Output.of(offPeakLoadBalancingAlgorithm));
        }

        /**
         * @param offPeakLoadBalancingAlgorithm Load balancing algorithm for off-peak period.
         * 
         * @return builder
         * 
         */
        public Builder offPeakLoadBalancingAlgorithm(String offPeakLoadBalancingAlgorithm) {
            return offPeakLoadBalancingAlgorithm(Either.ofLeft(offPeakLoadBalancingAlgorithm));
        }

        /**
         * @param offPeakLoadBalancingAlgorithm Load balancing algorithm for off-peak period.
         * 
         * @return builder
         * 
         */
        public Builder offPeakLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm offPeakLoadBalancingAlgorithm) {
            return offPeakLoadBalancingAlgorithm(Either.ofRight(offPeakLoadBalancingAlgorithm));
        }

        /**
         * @param offPeakStartTime Starting time for off-peak period.
         * 
         * @return builder
         * 
         */
        public Builder offPeakStartTime(@Nullable Output<String> offPeakStartTime) {
            $.offPeakStartTime = offPeakStartTime;
            return this;
        }

        /**
         * @param offPeakStartTime Starting time for off-peak period.
         * 
         * @return builder
         * 
         */
        public Builder offPeakStartTime(String offPeakStartTime) {
            return offPeakStartTime(Output.of(offPeakStartTime));
        }

        /**
         * @param peakLoadBalancingAlgorithm Load balancing algorithm for peak period.
         * 
         * @return builder
         * 
         */
        public Builder peakLoadBalancingAlgorithm(@Nullable Output<Either<String,SessionHostLoadBalancingAlgorithm>> peakLoadBalancingAlgorithm) {
            $.peakLoadBalancingAlgorithm = peakLoadBalancingAlgorithm;
            return this;
        }

        /**
         * @param peakLoadBalancingAlgorithm Load balancing algorithm for peak period.
         * 
         * @return builder
         * 
         */
        public Builder peakLoadBalancingAlgorithm(Either<String,SessionHostLoadBalancingAlgorithm> peakLoadBalancingAlgorithm) {
            return peakLoadBalancingAlgorithm(Output.of(peakLoadBalancingAlgorithm));
        }

        /**
         * @param peakLoadBalancingAlgorithm Load balancing algorithm for peak period.
         * 
         * @return builder
         * 
         */
        public Builder peakLoadBalancingAlgorithm(String peakLoadBalancingAlgorithm) {
            return peakLoadBalancingAlgorithm(Either.ofLeft(peakLoadBalancingAlgorithm));
        }

        /**
         * @param peakLoadBalancingAlgorithm Load balancing algorithm for peak period.
         * 
         * @return builder
         * 
         */
        public Builder peakLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm peakLoadBalancingAlgorithm) {
            return peakLoadBalancingAlgorithm(Either.ofRight(peakLoadBalancingAlgorithm));
        }

        /**
         * @param peakStartTime Starting time for peak period.
         * 
         * @return builder
         * 
         */
        public Builder peakStartTime(@Nullable Output<String> peakStartTime) {
            $.peakStartTime = peakStartTime;
            return this;
        }

        /**
         * @param peakStartTime Starting time for peak period.
         * 
         * @return builder
         * 
         */
        public Builder peakStartTime(String peakStartTime) {
            return peakStartTime(Output.of(peakStartTime));
        }

        /**
         * @param rampDownCapacityThresholdPct Capacity threshold for ramp down period.
         * 
         * @return builder
         * 
         */
        public Builder rampDownCapacityThresholdPct(@Nullable Output<Integer> rampDownCapacityThresholdPct) {
            $.rampDownCapacityThresholdPct = rampDownCapacityThresholdPct;
            return this;
        }

        /**
         * @param rampDownCapacityThresholdPct Capacity threshold for ramp down period.
         * 
         * @return builder
         * 
         */
        public Builder rampDownCapacityThresholdPct(Integer rampDownCapacityThresholdPct) {
            return rampDownCapacityThresholdPct(Output.of(rampDownCapacityThresholdPct));
        }

        /**
         * @param rampDownForceLogoffUsers Should users be logged off forcefully from hosts.
         * 
         * @return builder
         * 
         */
        public Builder rampDownForceLogoffUsers(@Nullable Output<Boolean> rampDownForceLogoffUsers) {
            $.rampDownForceLogoffUsers = rampDownForceLogoffUsers;
            return this;
        }

        /**
         * @param rampDownForceLogoffUsers Should users be logged off forcefully from hosts.
         * 
         * @return builder
         * 
         */
        public Builder rampDownForceLogoffUsers(Boolean rampDownForceLogoffUsers) {
            return rampDownForceLogoffUsers(Output.of(rampDownForceLogoffUsers));
        }

        /**
         * @param rampDownLoadBalancingAlgorithm Load balancing algorithm for ramp down period.
         * 
         * @return builder
         * 
         */
        public Builder rampDownLoadBalancingAlgorithm(@Nullable Output<Either<String,SessionHostLoadBalancingAlgorithm>> rampDownLoadBalancingAlgorithm) {
            $.rampDownLoadBalancingAlgorithm = rampDownLoadBalancingAlgorithm;
            return this;
        }

        /**
         * @param rampDownLoadBalancingAlgorithm Load balancing algorithm for ramp down period.
         * 
         * @return builder
         * 
         */
        public Builder rampDownLoadBalancingAlgorithm(Either<String,SessionHostLoadBalancingAlgorithm> rampDownLoadBalancingAlgorithm) {
            return rampDownLoadBalancingAlgorithm(Output.of(rampDownLoadBalancingAlgorithm));
        }

        /**
         * @param rampDownLoadBalancingAlgorithm Load balancing algorithm for ramp down period.
         * 
         * @return builder
         * 
         */
        public Builder rampDownLoadBalancingAlgorithm(String rampDownLoadBalancingAlgorithm) {
            return rampDownLoadBalancingAlgorithm(Either.ofLeft(rampDownLoadBalancingAlgorithm));
        }

        /**
         * @param rampDownLoadBalancingAlgorithm Load balancing algorithm for ramp down period.
         * 
         * @return builder
         * 
         */
        public Builder rampDownLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm rampDownLoadBalancingAlgorithm) {
            return rampDownLoadBalancingAlgorithm(Either.ofRight(rampDownLoadBalancingAlgorithm));
        }

        /**
         * @param rampDownMinimumHostsPct Minimum host percentage for ramp down period.
         * 
         * @return builder
         * 
         */
        public Builder rampDownMinimumHostsPct(@Nullable Output<Integer> rampDownMinimumHostsPct) {
            $.rampDownMinimumHostsPct = rampDownMinimumHostsPct;
            return this;
        }

        /**
         * @param rampDownMinimumHostsPct Minimum host percentage for ramp down period.
         * 
         * @return builder
         * 
         */
        public Builder rampDownMinimumHostsPct(Integer rampDownMinimumHostsPct) {
            return rampDownMinimumHostsPct(Output.of(rampDownMinimumHostsPct));
        }

        /**
         * @param rampDownNotificationMessage Notification message for users during ramp down period.
         * 
         * @return builder
         * 
         */
        public Builder rampDownNotificationMessage(@Nullable Output<String> rampDownNotificationMessage) {
            $.rampDownNotificationMessage = rampDownNotificationMessage;
            return this;
        }

        /**
         * @param rampDownNotificationMessage Notification message for users during ramp down period.
         * 
         * @return builder
         * 
         */
        public Builder rampDownNotificationMessage(String rampDownNotificationMessage) {
            return rampDownNotificationMessage(Output.of(rampDownNotificationMessage));
        }

        /**
         * @param rampDownStartTime Starting time for ramp down period.
         * 
         * @return builder
         * 
         */
        public Builder rampDownStartTime(@Nullable Output<String> rampDownStartTime) {
            $.rampDownStartTime = rampDownStartTime;
            return this;
        }

        /**
         * @param rampDownStartTime Starting time for ramp down period.
         * 
         * @return builder
         * 
         */
        public Builder rampDownStartTime(String rampDownStartTime) {
            return rampDownStartTime(Output.of(rampDownStartTime));
        }

        /**
         * @param rampDownStopHostsWhen Specifies when to stop hosts during ramp down period.
         * 
         * @return builder
         * 
         */
        public Builder rampDownStopHostsWhen(@Nullable Output<Either<String,StopHostsWhen>> rampDownStopHostsWhen) {
            $.rampDownStopHostsWhen = rampDownStopHostsWhen;
            return this;
        }

        /**
         * @param rampDownStopHostsWhen Specifies when to stop hosts during ramp down period.
         * 
         * @return builder
         * 
         */
        public Builder rampDownStopHostsWhen(Either<String,StopHostsWhen> rampDownStopHostsWhen) {
            return rampDownStopHostsWhen(Output.of(rampDownStopHostsWhen));
        }

        /**
         * @param rampDownStopHostsWhen Specifies when to stop hosts during ramp down period.
         * 
         * @return builder
         * 
         */
        public Builder rampDownStopHostsWhen(String rampDownStopHostsWhen) {
            return rampDownStopHostsWhen(Either.ofLeft(rampDownStopHostsWhen));
        }

        /**
         * @param rampDownStopHostsWhen Specifies when to stop hosts during ramp down period.
         * 
         * @return builder
         * 
         */
        public Builder rampDownStopHostsWhen(StopHostsWhen rampDownStopHostsWhen) {
            return rampDownStopHostsWhen(Either.ofRight(rampDownStopHostsWhen));
        }

        /**
         * @param rampDownWaitTimeMinutes Number of minutes to wait to stop hosts during ramp down period.
         * 
         * @return builder
         * 
         */
        public Builder rampDownWaitTimeMinutes(@Nullable Output<Integer> rampDownWaitTimeMinutes) {
            $.rampDownWaitTimeMinutes = rampDownWaitTimeMinutes;
            return this;
        }

        /**
         * @param rampDownWaitTimeMinutes Number of minutes to wait to stop hosts during ramp down period.
         * 
         * @return builder
         * 
         */
        public Builder rampDownWaitTimeMinutes(Integer rampDownWaitTimeMinutes) {
            return rampDownWaitTimeMinutes(Output.of(rampDownWaitTimeMinutes));
        }

        /**
         * @param rampUpCapacityThresholdPct Capacity threshold for ramp up period.
         * 
         * @return builder
         * 
         */
        public Builder rampUpCapacityThresholdPct(@Nullable Output<Integer> rampUpCapacityThresholdPct) {
            $.rampUpCapacityThresholdPct = rampUpCapacityThresholdPct;
            return this;
        }

        /**
         * @param rampUpCapacityThresholdPct Capacity threshold for ramp up period.
         * 
         * @return builder
         * 
         */
        public Builder rampUpCapacityThresholdPct(Integer rampUpCapacityThresholdPct) {
            return rampUpCapacityThresholdPct(Output.of(rampUpCapacityThresholdPct));
        }

        /**
         * @param rampUpLoadBalancingAlgorithm Load balancing algorithm for ramp up period.
         * 
         * @return builder
         * 
         */
        public Builder rampUpLoadBalancingAlgorithm(@Nullable Output<Either<String,SessionHostLoadBalancingAlgorithm>> rampUpLoadBalancingAlgorithm) {
            $.rampUpLoadBalancingAlgorithm = rampUpLoadBalancingAlgorithm;
            return this;
        }

        /**
         * @param rampUpLoadBalancingAlgorithm Load balancing algorithm for ramp up period.
         * 
         * @return builder
         * 
         */
        public Builder rampUpLoadBalancingAlgorithm(Either<String,SessionHostLoadBalancingAlgorithm> rampUpLoadBalancingAlgorithm) {
            return rampUpLoadBalancingAlgorithm(Output.of(rampUpLoadBalancingAlgorithm));
        }

        /**
         * @param rampUpLoadBalancingAlgorithm Load balancing algorithm for ramp up period.
         * 
         * @return builder
         * 
         */
        public Builder rampUpLoadBalancingAlgorithm(String rampUpLoadBalancingAlgorithm) {
            return rampUpLoadBalancingAlgorithm(Either.ofLeft(rampUpLoadBalancingAlgorithm));
        }

        /**
         * @param rampUpLoadBalancingAlgorithm Load balancing algorithm for ramp up period.
         * 
         * @return builder
         * 
         */
        public Builder rampUpLoadBalancingAlgorithm(SessionHostLoadBalancingAlgorithm rampUpLoadBalancingAlgorithm) {
            return rampUpLoadBalancingAlgorithm(Either.ofRight(rampUpLoadBalancingAlgorithm));
        }

        /**
         * @param rampUpMinimumHostsPct Minimum host percentage for ramp up period.
         * 
         * @return builder
         * 
         */
        public Builder rampUpMinimumHostsPct(@Nullable Output<Integer> rampUpMinimumHostsPct) {
            $.rampUpMinimumHostsPct = rampUpMinimumHostsPct;
            return this;
        }

        /**
         * @param rampUpMinimumHostsPct Minimum host percentage for ramp up period.
         * 
         * @return builder
         * 
         */
        public Builder rampUpMinimumHostsPct(Integer rampUpMinimumHostsPct) {
            return rampUpMinimumHostsPct(Output.of(rampUpMinimumHostsPct));
        }

        /**
         * @param rampUpStartTime Starting time for ramp up period.
         * 
         * @return builder
         * 
         */
        public Builder rampUpStartTime(@Nullable Output<String> rampUpStartTime) {
            $.rampUpStartTime = rampUpStartTime;
            return this;
        }

        /**
         * @param rampUpStartTime Starting time for ramp up period.
         * 
         * @return builder
         * 
         */
        public Builder rampUpStartTime(String rampUpStartTime) {
            return rampUpStartTime(Output.of(rampUpStartTime));
        }

        public ScalingScheduleArgs build() {
            return $;
        }
    }

}
