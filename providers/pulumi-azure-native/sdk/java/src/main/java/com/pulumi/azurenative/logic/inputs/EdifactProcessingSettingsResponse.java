// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.logic.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.util.Objects;


/**
 * The Edifact agreement protocol settings.
 * 
 */
public final class EdifactProcessingSettingsResponse extends com.pulumi.resources.InvokeArgs {

    public static final EdifactProcessingSettingsResponse Empty = new EdifactProcessingSettingsResponse();

    /**
     * The value indicating whether to create empty xml tags for trailing separators.
     * 
     */
    @Import(name="createEmptyXmlTagsForTrailingSeparators", required=true)
    private Boolean createEmptyXmlTagsForTrailingSeparators;

    /**
     * @return The value indicating whether to create empty xml tags for trailing separators.
     * 
     */
    public Boolean createEmptyXmlTagsForTrailingSeparators() {
        return this.createEmptyXmlTagsForTrailingSeparators;
    }

    /**
     * The value indicating whether to mask security information.
     * 
     */
    @Import(name="maskSecurityInfo", required=true)
    private Boolean maskSecurityInfo;

    /**
     * @return The value indicating whether to mask security information.
     * 
     */
    public Boolean maskSecurityInfo() {
        return this.maskSecurityInfo;
    }

    /**
     * The value indicating whether to preserve interchange.
     * 
     */
    @Import(name="preserveInterchange", required=true)
    private Boolean preserveInterchange;

    /**
     * @return The value indicating whether to preserve interchange.
     * 
     */
    public Boolean preserveInterchange() {
        return this.preserveInterchange;
    }

    /**
     * The value indicating whether to suspend interchange on error.
     * 
     */
    @Import(name="suspendInterchangeOnError", required=true)
    private Boolean suspendInterchangeOnError;

    /**
     * @return The value indicating whether to suspend interchange on error.
     * 
     */
    public Boolean suspendInterchangeOnError() {
        return this.suspendInterchangeOnError;
    }

    /**
     * The value indicating whether to use dot as decimal separator.
     * 
     */
    @Import(name="useDotAsDecimalSeparator", required=true)
    private Boolean useDotAsDecimalSeparator;

    /**
     * @return The value indicating whether to use dot as decimal separator.
     * 
     */
    public Boolean useDotAsDecimalSeparator() {
        return this.useDotAsDecimalSeparator;
    }

    private EdifactProcessingSettingsResponse() {}

    private EdifactProcessingSettingsResponse(EdifactProcessingSettingsResponse $) {
        this.createEmptyXmlTagsForTrailingSeparators = $.createEmptyXmlTagsForTrailingSeparators;
        this.maskSecurityInfo = $.maskSecurityInfo;
        this.preserveInterchange = $.preserveInterchange;
        this.suspendInterchangeOnError = $.suspendInterchangeOnError;
        this.useDotAsDecimalSeparator = $.useDotAsDecimalSeparator;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EdifactProcessingSettingsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EdifactProcessingSettingsResponse $;

        public Builder() {
            $ = new EdifactProcessingSettingsResponse();
        }

        public Builder(EdifactProcessingSettingsResponse defaults) {
            $ = new EdifactProcessingSettingsResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param createEmptyXmlTagsForTrailingSeparators The value indicating whether to create empty xml tags for trailing separators.
         * 
         * @return builder
         * 
         */
        public Builder createEmptyXmlTagsForTrailingSeparators(Boolean createEmptyXmlTagsForTrailingSeparators) {
            $.createEmptyXmlTagsForTrailingSeparators = createEmptyXmlTagsForTrailingSeparators;
            return this;
        }

        /**
         * @param maskSecurityInfo The value indicating whether to mask security information.
         * 
         * @return builder
         * 
         */
        public Builder maskSecurityInfo(Boolean maskSecurityInfo) {
            $.maskSecurityInfo = maskSecurityInfo;
            return this;
        }

        /**
         * @param preserveInterchange The value indicating whether to preserve interchange.
         * 
         * @return builder
         * 
         */
        public Builder preserveInterchange(Boolean preserveInterchange) {
            $.preserveInterchange = preserveInterchange;
            return this;
        }

        /**
         * @param suspendInterchangeOnError The value indicating whether to suspend interchange on error.
         * 
         * @return builder
         * 
         */
        public Builder suspendInterchangeOnError(Boolean suspendInterchangeOnError) {
            $.suspendInterchangeOnError = suspendInterchangeOnError;
            return this;
        }

        /**
         * @param useDotAsDecimalSeparator The value indicating whether to use dot as decimal separator.
         * 
         * @return builder
         * 
         */
        public Builder useDotAsDecimalSeparator(Boolean useDotAsDecimalSeparator) {
            $.useDotAsDecimalSeparator = useDotAsDecimalSeparator;
            return this;
        }

        public EdifactProcessingSettingsResponse build() {
            $.createEmptyXmlTagsForTrailingSeparators = Objects.requireNonNull($.createEmptyXmlTagsForTrailingSeparators, "expected parameter 'createEmptyXmlTagsForTrailingSeparators' to be non-null");
            $.maskSecurityInfo = Objects.requireNonNull($.maskSecurityInfo, "expected parameter 'maskSecurityInfo' to be non-null");
            $.preserveInterchange = Objects.requireNonNull($.preserveInterchange, "expected parameter 'preserveInterchange' to be non-null");
            $.suspendInterchangeOnError = Objects.requireNonNull($.suspendInterchangeOnError, "expected parameter 'suspendInterchangeOnError' to be non-null");
            $.useDotAsDecimalSeparator = Objects.requireNonNull($.useDotAsDecimalSeparator, "expected parameter 'useDotAsDecimalSeparator' to be non-null");
            return $;
        }
    }

}
