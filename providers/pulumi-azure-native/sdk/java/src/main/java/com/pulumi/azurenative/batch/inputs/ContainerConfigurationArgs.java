// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.batch.inputs;

import com.pulumi.azurenative.batch.enums.ContainerType;
import com.pulumi.azurenative.batch.inputs.ContainerRegistryArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ContainerConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final ContainerConfigurationArgs Empty = new ContainerConfigurationArgs();

    /**
     * This is the full image reference, as would be specified to &#34;docker pull&#34;. An image will be sourced from the default Docker registry unless the image is fully qualified with an alternative registry.
     * 
     */
    @Import(name="containerImageNames")
    private @Nullable Output<List<String>> containerImageNames;

    /**
     * @return This is the full image reference, as would be specified to &#34;docker pull&#34;. An image will be sourced from the default Docker registry unless the image is fully qualified with an alternative registry.
     * 
     */
    public Optional<Output<List<String>>> containerImageNames() {
        return Optional.ofNullable(this.containerImageNames);
    }

    /**
     * If any images must be downloaded from a private registry which requires credentials, then those credentials must be provided here.
     * 
     */
    @Import(name="containerRegistries")
    private @Nullable Output<List<ContainerRegistryArgs>> containerRegistries;

    /**
     * @return If any images must be downloaded from a private registry which requires credentials, then those credentials must be provided here.
     * 
     */
    public Optional<Output<List<ContainerRegistryArgs>>> containerRegistries() {
        return Optional.ofNullable(this.containerRegistries);
    }

    @Import(name="type", required=true)
    private Output<ContainerType> type;

    public Output<ContainerType> type() {
        return this.type;
    }

    private ContainerConfigurationArgs() {}

    private ContainerConfigurationArgs(ContainerConfigurationArgs $) {
        this.containerImageNames = $.containerImageNames;
        this.containerRegistries = $.containerRegistries;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContainerConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContainerConfigurationArgs $;

        public Builder() {
            $ = new ContainerConfigurationArgs();
        }

        public Builder(ContainerConfigurationArgs defaults) {
            $ = new ContainerConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param containerImageNames This is the full image reference, as would be specified to &#34;docker pull&#34;. An image will be sourced from the default Docker registry unless the image is fully qualified with an alternative registry.
         * 
         * @return builder
         * 
         */
        public Builder containerImageNames(@Nullable Output<List<String>> containerImageNames) {
            $.containerImageNames = containerImageNames;
            return this;
        }

        /**
         * @param containerImageNames This is the full image reference, as would be specified to &#34;docker pull&#34;. An image will be sourced from the default Docker registry unless the image is fully qualified with an alternative registry.
         * 
         * @return builder
         * 
         */
        public Builder containerImageNames(List<String> containerImageNames) {
            return containerImageNames(Output.of(containerImageNames));
        }

        /**
         * @param containerImageNames This is the full image reference, as would be specified to &#34;docker pull&#34;. An image will be sourced from the default Docker registry unless the image is fully qualified with an alternative registry.
         * 
         * @return builder
         * 
         */
        public Builder containerImageNames(String... containerImageNames) {
            return containerImageNames(List.of(containerImageNames));
        }

        /**
         * @param containerRegistries If any images must be downloaded from a private registry which requires credentials, then those credentials must be provided here.
         * 
         * @return builder
         * 
         */
        public Builder containerRegistries(@Nullable Output<List<ContainerRegistryArgs>> containerRegistries) {
            $.containerRegistries = containerRegistries;
            return this;
        }

        /**
         * @param containerRegistries If any images must be downloaded from a private registry which requires credentials, then those credentials must be provided here.
         * 
         * @return builder
         * 
         */
        public Builder containerRegistries(List<ContainerRegistryArgs> containerRegistries) {
            return containerRegistries(Output.of(containerRegistries));
        }

        /**
         * @param containerRegistries If any images must be downloaded from a private registry which requires credentials, then those credentials must be provided here.
         * 
         * @return builder
         * 
         */
        public Builder containerRegistries(ContainerRegistryArgs... containerRegistries) {
            return containerRegistries(List.of(containerRegistries));
        }

        public Builder type(Output<ContainerType> type) {
            $.type = type;
            return this;
        }

        public Builder type(ContainerType type) {
            return type(Output.of(type));
        }

        public ContainerConfigurationArgs build() {
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
