// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.containerregistry.inputs;

import com.pulumi.azurenative.containerregistry.inputs.PipelineRunSourcePropertiesResponse;
import com.pulumi.azurenative.containerregistry.inputs.PipelineRunTargetPropertiesResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The request properties provided for a pipeline run.
 * 
 */
public final class PipelineRunRequestResponse extends com.pulumi.resources.InvokeArgs {

    public static final PipelineRunRequestResponse Empty = new PipelineRunRequestResponse();

    /**
     * List of source artifacts to be transferred by the pipeline.
     * Specify an image by repository (&#39;hello-world&#39;). This will use the &#39;latest&#39; tag.
     * Specify an image by tag (&#39;hello-world:latest&#39;).
     * Specify an image by sha256-based manifest digest (&#39;hello-world@sha256:abc123&#39;).
     * 
     */
    @Import(name="artifacts")
    private @Nullable List<String> artifacts;

    /**
     * @return List of source artifacts to be transferred by the pipeline.
     * Specify an image by repository (&#39;hello-world&#39;). This will use the &#39;latest&#39; tag.
     * Specify an image by tag (&#39;hello-world:latest&#39;).
     * Specify an image by sha256-based manifest digest (&#39;hello-world@sha256:abc123&#39;).
     * 
     */
    public Optional<List<String>> artifacts() {
        return Optional.ofNullable(this.artifacts);
    }

    /**
     * The digest of the tar used to transfer the artifacts.
     * 
     */
    @Import(name="catalogDigest")
    private @Nullable String catalogDigest;

    /**
     * @return The digest of the tar used to transfer the artifacts.
     * 
     */
    public Optional<String> catalogDigest() {
        return Optional.ofNullable(this.catalogDigest);
    }

    /**
     * The resource ID of the pipeline to run.
     * 
     */
    @Import(name="pipelineResourceId")
    private @Nullable String pipelineResourceId;

    /**
     * @return The resource ID of the pipeline to run.
     * 
     */
    public Optional<String> pipelineResourceId() {
        return Optional.ofNullable(this.pipelineResourceId);
    }

    /**
     * The source properties of the pipeline run.
     * 
     */
    @Import(name="source")
    private @Nullable PipelineRunSourcePropertiesResponse source;

    /**
     * @return The source properties of the pipeline run.
     * 
     */
    public Optional<PipelineRunSourcePropertiesResponse> source() {
        return Optional.ofNullable(this.source);
    }

    /**
     * The target properties of the pipeline run.
     * 
     */
    @Import(name="target")
    private @Nullable PipelineRunTargetPropertiesResponse target;

    /**
     * @return The target properties of the pipeline run.
     * 
     */
    public Optional<PipelineRunTargetPropertiesResponse> target() {
        return Optional.ofNullable(this.target);
    }

    private PipelineRunRequestResponse() {}

    private PipelineRunRequestResponse(PipelineRunRequestResponse $) {
        this.artifacts = $.artifacts;
        this.catalogDigest = $.catalogDigest;
        this.pipelineResourceId = $.pipelineResourceId;
        this.source = $.source;
        this.target = $.target;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PipelineRunRequestResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PipelineRunRequestResponse $;

        public Builder() {
            $ = new PipelineRunRequestResponse();
        }

        public Builder(PipelineRunRequestResponse defaults) {
            $ = new PipelineRunRequestResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param artifacts List of source artifacts to be transferred by the pipeline.
         * Specify an image by repository (&#39;hello-world&#39;). This will use the &#39;latest&#39; tag.
         * Specify an image by tag (&#39;hello-world:latest&#39;).
         * Specify an image by sha256-based manifest digest (&#39;hello-world@sha256:abc123&#39;).
         * 
         * @return builder
         * 
         */
        public Builder artifacts(@Nullable List<String> artifacts) {
            $.artifacts = artifacts;
            return this;
        }

        /**
         * @param artifacts List of source artifacts to be transferred by the pipeline.
         * Specify an image by repository (&#39;hello-world&#39;). This will use the &#39;latest&#39; tag.
         * Specify an image by tag (&#39;hello-world:latest&#39;).
         * Specify an image by sha256-based manifest digest (&#39;hello-world@sha256:abc123&#39;).
         * 
         * @return builder
         * 
         */
        public Builder artifacts(String... artifacts) {
            return artifacts(List.of(artifacts));
        }

        /**
         * @param catalogDigest The digest of the tar used to transfer the artifacts.
         * 
         * @return builder
         * 
         */
        public Builder catalogDigest(@Nullable String catalogDigest) {
            $.catalogDigest = catalogDigest;
            return this;
        }

        /**
         * @param pipelineResourceId The resource ID of the pipeline to run.
         * 
         * @return builder
         * 
         */
        public Builder pipelineResourceId(@Nullable String pipelineResourceId) {
            $.pipelineResourceId = pipelineResourceId;
            return this;
        }

        /**
         * @param source The source properties of the pipeline run.
         * 
         * @return builder
         * 
         */
        public Builder source(@Nullable PipelineRunSourcePropertiesResponse source) {
            $.source = source;
            return this;
        }

        /**
         * @param target The target properties of the pipeline run.
         * 
         * @return builder
         * 
         */
        public Builder target(@Nullable PipelineRunTargetPropertiesResponse target) {
            $.target = target;
            return this;
        }

        public PipelineRunRequestResponse build() {
            return $;
        }
    }

}
