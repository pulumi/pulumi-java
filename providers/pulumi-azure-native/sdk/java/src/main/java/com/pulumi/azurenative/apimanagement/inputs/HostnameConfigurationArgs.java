// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.apimanagement.inputs;

import com.pulumi.azurenative.apimanagement.enums.HostnameType;
import com.pulumi.azurenative.apimanagement.inputs.CertificateInformationArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Custom hostname configuration.
 * 
 */
public final class HostnameConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final HostnameConfigurationArgs Empty = new HostnameConfigurationArgs();

    /**
     * Certificate information.
     * 
     */
    @Import(name="certificate")
    private @Nullable Output<CertificateInformationArgs> certificate;

    /**
     * @return Certificate information.
     * 
     */
    public Optional<Output<CertificateInformationArgs>> certificate() {
        return Optional.ofNullable(this.certificate);
    }

    /**
     * Certificate Password.
     * 
     */
    @Import(name="certificatePassword")
    private @Nullable Output<String> certificatePassword;

    /**
     * @return Certificate Password.
     * 
     */
    public Optional<Output<String>> certificatePassword() {
        return Optional.ofNullable(this.certificatePassword);
    }

    /**
     * Specify true to setup the certificate associated with this Hostname as the Default SSL Certificate. If a client does not send the SNI header, then this will be the certificate that will be challenged. The property is useful if a service has multiple custom hostname enabled and it needs to decide on the default ssl certificate. The setting only applied to Proxy Hostname Type.
     * 
     */
    @Import(name="defaultSslBinding")
    private @Nullable Output<Boolean> defaultSslBinding;

    /**
     * @return Specify true to setup the certificate associated with this Hostname as the Default SSL Certificate. If a client does not send the SNI header, then this will be the certificate that will be challenged. The property is useful if a service has multiple custom hostname enabled and it needs to decide on the default ssl certificate. The setting only applied to Proxy Hostname Type.
     * 
     */
    public Optional<Output<Boolean>> defaultSslBinding() {
        return Optional.ofNullable(this.defaultSslBinding);
    }

    /**
     * Base64 Encoded certificate.
     * 
     */
    @Import(name="encodedCertificate")
    private @Nullable Output<String> encodedCertificate;

    /**
     * @return Base64 Encoded certificate.
     * 
     */
    public Optional<Output<String>> encodedCertificate() {
        return Optional.ofNullable(this.encodedCertificate);
    }

    /**
     * Hostname to configure on the Api Management service.
     * 
     */
    @Import(name="hostName", required=true)
    private Output<String> hostName;

    /**
     * @return Hostname to configure on the Api Management service.
     * 
     */
    public Output<String> hostName() {
        return this.hostName;
    }

    /**
     * System or User Assigned Managed identity clientId as generated by Azure AD, which has GET access to the keyVault containing the SSL certificate.
     * 
     */
    @Import(name="identityClientId")
    private @Nullable Output<String> identityClientId;

    /**
     * @return System or User Assigned Managed identity clientId as generated by Azure AD, which has GET access to the keyVault containing the SSL certificate.
     * 
     */
    public Optional<Output<String>> identityClientId() {
        return Optional.ofNullable(this.identityClientId);
    }

    /**
     * Url to the KeyVault Secret containing the Ssl Certificate. If absolute Url containing version is provided, auto-update of ssl certificate will not work. This requires Api Management service to be configured with aka.ms/apimmsi. The secret should be of type *application/x-pkcs12*
     * 
     */
    @Import(name="keyVaultId")
    private @Nullable Output<String> keyVaultId;

    /**
     * @return Url to the KeyVault Secret containing the Ssl Certificate. If absolute Url containing version is provided, auto-update of ssl certificate will not work. This requires Api Management service to be configured with aka.ms/apimmsi. The secret should be of type *application/x-pkcs12*
     * 
     */
    public Optional<Output<String>> keyVaultId() {
        return Optional.ofNullable(this.keyVaultId);
    }

    /**
     * Specify true to always negotiate client certificate on the hostname. Default Value is false.
     * 
     */
    @Import(name="negotiateClientCertificate")
    private @Nullable Output<Boolean> negotiateClientCertificate;

    /**
     * @return Specify true to always negotiate client certificate on the hostname. Default Value is false.
     * 
     */
    public Optional<Output<Boolean>> negotiateClientCertificate() {
        return Optional.ofNullable(this.negotiateClientCertificate);
    }

    /**
     * Hostname type.
     * 
     */
    @Import(name="type", required=true)
    private Output<Either<String,HostnameType>> type;

    /**
     * @return Hostname type.
     * 
     */
    public Output<Either<String,HostnameType>> type() {
        return this.type;
    }

    private HostnameConfigurationArgs() {}

    private HostnameConfigurationArgs(HostnameConfigurationArgs $) {
        this.certificate = $.certificate;
        this.certificatePassword = $.certificatePassword;
        this.defaultSslBinding = $.defaultSslBinding;
        this.encodedCertificate = $.encodedCertificate;
        this.hostName = $.hostName;
        this.identityClientId = $.identityClientId;
        this.keyVaultId = $.keyVaultId;
        this.negotiateClientCertificate = $.negotiateClientCertificate;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HostnameConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HostnameConfigurationArgs $;

        public Builder() {
            $ = new HostnameConfigurationArgs();
        }

        public Builder(HostnameConfigurationArgs defaults) {
            $ = new HostnameConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificate Certificate information.
         * 
         * @return builder
         * 
         */
        public Builder certificate(@Nullable Output<CertificateInformationArgs> certificate) {
            $.certificate = certificate;
            return this;
        }

        /**
         * @param certificate Certificate information.
         * 
         * @return builder
         * 
         */
        public Builder certificate(CertificateInformationArgs certificate) {
            return certificate(Output.of(certificate));
        }

        /**
         * @param certificatePassword Certificate Password.
         * 
         * @return builder
         * 
         */
        public Builder certificatePassword(@Nullable Output<String> certificatePassword) {
            $.certificatePassword = certificatePassword;
            return this;
        }

        /**
         * @param certificatePassword Certificate Password.
         * 
         * @return builder
         * 
         */
        public Builder certificatePassword(String certificatePassword) {
            return certificatePassword(Output.of(certificatePassword));
        }

        /**
         * @param defaultSslBinding Specify true to setup the certificate associated with this Hostname as the Default SSL Certificate. If a client does not send the SNI header, then this will be the certificate that will be challenged. The property is useful if a service has multiple custom hostname enabled and it needs to decide on the default ssl certificate. The setting only applied to Proxy Hostname Type.
         * 
         * @return builder
         * 
         */
        public Builder defaultSslBinding(@Nullable Output<Boolean> defaultSslBinding) {
            $.defaultSslBinding = defaultSslBinding;
            return this;
        }

        /**
         * @param defaultSslBinding Specify true to setup the certificate associated with this Hostname as the Default SSL Certificate. If a client does not send the SNI header, then this will be the certificate that will be challenged. The property is useful if a service has multiple custom hostname enabled and it needs to decide on the default ssl certificate. The setting only applied to Proxy Hostname Type.
         * 
         * @return builder
         * 
         */
        public Builder defaultSslBinding(Boolean defaultSslBinding) {
            return defaultSslBinding(Output.of(defaultSslBinding));
        }

        /**
         * @param encodedCertificate Base64 Encoded certificate.
         * 
         * @return builder
         * 
         */
        public Builder encodedCertificate(@Nullable Output<String> encodedCertificate) {
            $.encodedCertificate = encodedCertificate;
            return this;
        }

        /**
         * @param encodedCertificate Base64 Encoded certificate.
         * 
         * @return builder
         * 
         */
        public Builder encodedCertificate(String encodedCertificate) {
            return encodedCertificate(Output.of(encodedCertificate));
        }

        /**
         * @param hostName Hostname to configure on the Api Management service.
         * 
         * @return builder
         * 
         */
        public Builder hostName(Output<String> hostName) {
            $.hostName = hostName;
            return this;
        }

        /**
         * @param hostName Hostname to configure on the Api Management service.
         * 
         * @return builder
         * 
         */
        public Builder hostName(String hostName) {
            return hostName(Output.of(hostName));
        }

        /**
         * @param identityClientId System or User Assigned Managed identity clientId as generated by Azure AD, which has GET access to the keyVault containing the SSL certificate.
         * 
         * @return builder
         * 
         */
        public Builder identityClientId(@Nullable Output<String> identityClientId) {
            $.identityClientId = identityClientId;
            return this;
        }

        /**
         * @param identityClientId System or User Assigned Managed identity clientId as generated by Azure AD, which has GET access to the keyVault containing the SSL certificate.
         * 
         * @return builder
         * 
         */
        public Builder identityClientId(String identityClientId) {
            return identityClientId(Output.of(identityClientId));
        }

        /**
         * @param keyVaultId Url to the KeyVault Secret containing the Ssl Certificate. If absolute Url containing version is provided, auto-update of ssl certificate will not work. This requires Api Management service to be configured with aka.ms/apimmsi. The secret should be of type *application/x-pkcs12*
         * 
         * @return builder
         * 
         */
        public Builder keyVaultId(@Nullable Output<String> keyVaultId) {
            $.keyVaultId = keyVaultId;
            return this;
        }

        /**
         * @param keyVaultId Url to the KeyVault Secret containing the Ssl Certificate. If absolute Url containing version is provided, auto-update of ssl certificate will not work. This requires Api Management service to be configured with aka.ms/apimmsi. The secret should be of type *application/x-pkcs12*
         * 
         * @return builder
         * 
         */
        public Builder keyVaultId(String keyVaultId) {
            return keyVaultId(Output.of(keyVaultId));
        }

        /**
         * @param negotiateClientCertificate Specify true to always negotiate client certificate on the hostname. Default Value is false.
         * 
         * @return builder
         * 
         */
        public Builder negotiateClientCertificate(@Nullable Output<Boolean> negotiateClientCertificate) {
            $.negotiateClientCertificate = negotiateClientCertificate;
            return this;
        }

        /**
         * @param negotiateClientCertificate Specify true to always negotiate client certificate on the hostname. Default Value is false.
         * 
         * @return builder
         * 
         */
        public Builder negotiateClientCertificate(Boolean negotiateClientCertificate) {
            return negotiateClientCertificate(Output.of(negotiateClientCertificate));
        }

        /**
         * @param type Hostname type.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<Either<String,HostnameType>> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Hostname type.
         * 
         * @return builder
         * 
         */
        public Builder type(Either<String,HostnameType> type) {
            return type(Output.of(type));
        }

        /**
         * @param type Hostname type.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Either.ofLeft(type));
        }

        /**
         * @param type Hostname type.
         * 
         * @return builder
         * 
         */
        public Builder type(HostnameType type) {
            return type(Either.ofRight(type));
        }

        public HostnameConfigurationArgs build() {
            $.defaultSslBinding = Codegen.booleanProp("defaultSslBinding").output().arg($.defaultSslBinding).def(false).getNullable();
            $.hostName = Objects.requireNonNull($.hostName, "expected parameter 'hostName' to be non-null");
            $.negotiateClientCertificate = Codegen.booleanProp("negotiateClientCertificate").output().arg($.negotiateClientCertificate).def(false).getNullable();
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
