// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.recoveryservices.inputs;

import com.pulumi.azurenative.recoveryservices.enums.DiskAccountType;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * VMwareCbt disk input.
 * 
 */
public final class VMwareCbtDiskInputArgs extends com.pulumi.resources.ResourceArgs {

    public static final VMwareCbtDiskInputArgs Empty = new VMwareCbtDiskInputArgs();

    /**
     * The disk Id.
     * 
     */
    @Import(name="diskId", required=true)
    private Output<String> diskId;

    public Output<String> diskId() {
        return this.diskId;
    }

    /**
     * The disk type.
     * 
     */
    @Import(name="diskType")
    private @Nullable Output<Either<String,DiskAccountType>> diskType;

    public Optional<Output<Either<String,DiskAccountType>>> diskType() {
        return Optional.ofNullable(this.diskType);
    }

    /**
     * A value indicating whether the disk is the OS disk.
     * 
     */
    @Import(name="isOSDisk", required=true)
    private Output<String> isOSDisk;

    public Output<String> isOSDisk() {
        return this.isOSDisk;
    }

    /**
     * The log storage account ARM Id.
     * 
     */
    @Import(name="logStorageAccountId", required=true)
    private Output<String> logStorageAccountId;

    public Output<String> logStorageAccountId() {
        return this.logStorageAccountId;
    }

    /**
     * The key vault secret name of the log storage account.
     * 
     */
    @Import(name="logStorageAccountSasSecretName", required=true)
    private Output<String> logStorageAccountSasSecretName;

    public Output<String> logStorageAccountSasSecretName() {
        return this.logStorageAccountSasSecretName;
    }

    private VMwareCbtDiskInputArgs() {}

    private VMwareCbtDiskInputArgs(VMwareCbtDiskInputArgs $) {
        this.diskId = $.diskId;
        this.diskType = $.diskType;
        this.isOSDisk = $.isOSDisk;
        this.logStorageAccountId = $.logStorageAccountId;
        this.logStorageAccountSasSecretName = $.logStorageAccountSasSecretName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VMwareCbtDiskInputArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VMwareCbtDiskInputArgs $;

        public Builder() {
            $ = new VMwareCbtDiskInputArgs();
        }

        public Builder(VMwareCbtDiskInputArgs defaults) {
            $ = new VMwareCbtDiskInputArgs(Objects.requireNonNull(defaults));
        }

        public Builder diskId(Output<String> diskId) {
            $.diskId = diskId;
            return this;
        }

        public Builder diskId(String diskId) {
            return diskId(Output.of(diskId));
        }

        public Builder diskType(@Nullable Output<Either<String,DiskAccountType>> diskType) {
            $.diskType = diskType;
            return this;
        }

        public Builder diskType(Either<String,DiskAccountType> diskType) {
            return diskType(Output.of(diskType));
        }

        public Builder diskType(String diskType) {
            return diskType(Either.ofLeft(diskType));
        }

        public Builder diskType(DiskAccountType diskType) {
            return diskType(Either.ofRight(diskType));
        }

        public Builder isOSDisk(Output<String> isOSDisk) {
            $.isOSDisk = isOSDisk;
            return this;
        }

        public Builder isOSDisk(String isOSDisk) {
            return isOSDisk(Output.of(isOSDisk));
        }

        public Builder logStorageAccountId(Output<String> logStorageAccountId) {
            $.logStorageAccountId = logStorageAccountId;
            return this;
        }

        public Builder logStorageAccountId(String logStorageAccountId) {
            return logStorageAccountId(Output.of(logStorageAccountId));
        }

        public Builder logStorageAccountSasSecretName(Output<String> logStorageAccountSasSecretName) {
            $.logStorageAccountSasSecretName = logStorageAccountSasSecretName;
            return this;
        }

        public Builder logStorageAccountSasSecretName(String logStorageAccountSasSecretName) {
            return logStorageAccountSasSecretName(Output.of(logStorageAccountSasSecretName));
        }

        public VMwareCbtDiskInputArgs build() {
            $.diskId = Objects.requireNonNull($.diskId, "expected parameter 'diskId' to be non-null");
            $.isOSDisk = Objects.requireNonNull($.isOSDisk, "expected parameter 'isOSDisk' to be non-null");
            $.logStorageAccountId = Objects.requireNonNull($.logStorageAccountId, "expected parameter 'logStorageAccountId' to be non-null");
            $.logStorageAccountSasSecretName = Objects.requireNonNull($.logStorageAccountSasSecretName, "expected parameter 'logStorageAccountSasSecretName' to be non-null");
            return $;
        }
    }

}
