// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network;

import com.pulumi.azurenative.network.enums.ZoneType;
import com.pulumi.azurenative.network.inputs.SubResourceArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ZoneArgs extends com.pulumi.resources.ResourceArgs {

    public static final ZoneArgs Empty = new ZoneArgs();

    /**
     * Resource location.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * A list of references to virtual networks that register hostnames in this DNS zone. This is a only when ZoneType is Private.
     * 
     */
    @Import(name="registrationVirtualNetworks")
    private @Nullable Output<List<SubResourceArgs>> registrationVirtualNetworks;

    public Optional<Output<List<SubResourceArgs>>> registrationVirtualNetworks() {
        return Optional.ofNullable(this.registrationVirtualNetworks);
    }

    /**
     * A list of references to virtual networks that resolve records in this DNS zone. This is a only when ZoneType is Private.
     * 
     */
    @Import(name="resolutionVirtualNetworks")
    private @Nullable Output<List<SubResourceArgs>> resolutionVirtualNetworks;

    public Optional<Output<List<SubResourceArgs>>> resolutionVirtualNetworks() {
        return Optional.ofNullable(this.resolutionVirtualNetworks);
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The name of the DNS zone (without a terminating dot).
     * 
     */
    @Import(name="zoneName")
    private @Nullable Output<String> zoneName;

    public Optional<Output<String>> zoneName() {
        return Optional.ofNullable(this.zoneName);
    }

    /**
     * The type of this DNS zone (Public or Private).
     * 
     */
    @Import(name="zoneType")
    private @Nullable Output<ZoneType> zoneType;

    public Optional<Output<ZoneType>> zoneType() {
        return Optional.ofNullable(this.zoneType);
    }

    private ZoneArgs() {}

    private ZoneArgs(ZoneArgs $) {
        this.location = $.location;
        this.registrationVirtualNetworks = $.registrationVirtualNetworks;
        this.resolutionVirtualNetworks = $.resolutionVirtualNetworks;
        this.resourceGroupName = $.resourceGroupName;
        this.tags = $.tags;
        this.zoneName = $.zoneName;
        this.zoneType = $.zoneType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ZoneArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ZoneArgs $;

        public Builder() {
            $ = new ZoneArgs();
        }

        public Builder(ZoneArgs defaults) {
            $ = new ZoneArgs(Objects.requireNonNull(defaults));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder registrationVirtualNetworks(@Nullable Output<List<SubResourceArgs>> registrationVirtualNetworks) {
            $.registrationVirtualNetworks = registrationVirtualNetworks;
            return this;
        }

        public Builder registrationVirtualNetworks(List<SubResourceArgs> registrationVirtualNetworks) {
            return registrationVirtualNetworks(Output.of(registrationVirtualNetworks));
        }

        public Builder registrationVirtualNetworks(SubResourceArgs... registrationVirtualNetworks) {
            return registrationVirtualNetworks(List.of(registrationVirtualNetworks));
        }

        public Builder resolutionVirtualNetworks(@Nullable Output<List<SubResourceArgs>> resolutionVirtualNetworks) {
            $.resolutionVirtualNetworks = resolutionVirtualNetworks;
            return this;
        }

        public Builder resolutionVirtualNetworks(List<SubResourceArgs> resolutionVirtualNetworks) {
            return resolutionVirtualNetworks(Output.of(resolutionVirtualNetworks));
        }

        public Builder resolutionVirtualNetworks(SubResourceArgs... resolutionVirtualNetworks) {
            return resolutionVirtualNetworks(List.of(resolutionVirtualNetworks));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder zoneName(@Nullable Output<String> zoneName) {
            $.zoneName = zoneName;
            return this;
        }

        public Builder zoneName(String zoneName) {
            return zoneName(Output.of(zoneName));
        }

        public Builder zoneType(@Nullable Output<ZoneType> zoneType) {
            $.zoneType = zoneType;
            return this;
        }

        public Builder zoneType(ZoneType zoneType) {
            return zoneType(Output.of(zoneType));
        }

        public ZoneArgs build() {
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.zoneType = Codegen.objectProp("zoneType", ZoneType.class).output().arg($.zoneType).def(ZoneType.Public).getNullable();
            return $;
        }
    }

}
