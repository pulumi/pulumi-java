// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datamigration.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponse extends com.pulumi.resources.InvokeArgs {

    public static final MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponse Empty = new MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponse();

    /**
     * Count of databases
     * 
     */
    @Import(name="databaseCount", required=true)
    private Integer databaseCount;

    public Integer databaseCount() {
        return this.databaseCount;
    }

    /**
     * Number of database level errors
     * 
     */
    @Import(name="databaseErrorCount", required=true)
    private Integer databaseErrorCount;

    public Integer databaseErrorCount() {
        return this.databaseErrorCount;
    }

    /**
     * Migration end time
     * 
     */
    @Import(name="endedOn", required=true)
    private String endedOn;

    public String endedOn() {
        return this.endedOn;
    }

    /**
     * Result identifier
     * 
     */
    @Import(name="id", required=true)
    private String id;

    public String id() {
        return this.id;
    }

    /**
     * Result type
     * Expected value is &#39;MigrationLevelOutput&#39;.
     * 
     */
    @Import(name="resultType", required=true)
    private String resultType;

    public String resultType() {
        return this.resultType;
    }

    /**
     * Source server brand version
     * 
     */
    @Import(name="sourceServerBrandVersion", required=true)
    private String sourceServerBrandVersion;

    public String sourceServerBrandVersion() {
        return this.sourceServerBrandVersion;
    }

    /**
     * Source server name
     * 
     */
    @Import(name="sourceServerName", required=true)
    private String sourceServerName;

    public String sourceServerName() {
        return this.sourceServerName;
    }

    /**
     * Source server version
     * 
     */
    @Import(name="sourceServerVersion", required=true)
    private String sourceServerVersion;

    public String sourceServerVersion() {
        return this.sourceServerVersion;
    }

    /**
     * Migration start time
     * 
     */
    @Import(name="startedOn", required=true)
    private String startedOn;

    public String startedOn() {
        return this.startedOn;
    }

    /**
     * Current state of migration
     * 
     */
    @Import(name="state", required=true)
    private String state;

    public String state() {
        return this.state;
    }

    /**
     * Target server brand version
     * 
     */
    @Import(name="targetServerBrandVersion", required=true)
    private String targetServerBrandVersion;

    public String targetServerBrandVersion() {
        return this.targetServerBrandVersion;
    }

    /**
     * Target server name
     * 
     */
    @Import(name="targetServerName", required=true)
    private String targetServerName;

    public String targetServerName() {
        return this.targetServerName;
    }

    /**
     * Target server version
     * 
     */
    @Import(name="targetServerVersion", required=true)
    private String targetServerVersion;

    public String targetServerVersion() {
        return this.targetServerVersion;
    }

    private MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponse() {}

    private MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponse(MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponse $) {
        this.databaseCount = $.databaseCount;
        this.databaseErrorCount = $.databaseErrorCount;
        this.endedOn = $.endedOn;
        this.id = $.id;
        this.resultType = $.resultType;
        this.sourceServerBrandVersion = $.sourceServerBrandVersion;
        this.sourceServerName = $.sourceServerName;
        this.sourceServerVersion = $.sourceServerVersion;
        this.startedOn = $.startedOn;
        this.state = $.state;
        this.targetServerBrandVersion = $.targetServerBrandVersion;
        this.targetServerName = $.targetServerName;
        this.targetServerVersion = $.targetServerVersion;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponse $;

        public Builder() {
            $ = new MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponse();
        }

        public Builder(MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponse defaults) {
            $ = new MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponse(Objects.requireNonNull(defaults));
        }

        public Builder databaseCount(Integer databaseCount) {
            $.databaseCount = databaseCount;
            return this;
        }

        public Builder databaseErrorCount(Integer databaseErrorCount) {
            $.databaseErrorCount = databaseErrorCount;
            return this;
        }

        public Builder endedOn(String endedOn) {
            $.endedOn = endedOn;
            return this;
        }

        public Builder id(String id) {
            $.id = id;
            return this;
        }

        public Builder resultType(String resultType) {
            $.resultType = resultType;
            return this;
        }

        public Builder sourceServerBrandVersion(String sourceServerBrandVersion) {
            $.sourceServerBrandVersion = sourceServerBrandVersion;
            return this;
        }

        public Builder sourceServerName(String sourceServerName) {
            $.sourceServerName = sourceServerName;
            return this;
        }

        public Builder sourceServerVersion(String sourceServerVersion) {
            $.sourceServerVersion = sourceServerVersion;
            return this;
        }

        public Builder startedOn(String startedOn) {
            $.startedOn = startedOn;
            return this;
        }

        public Builder state(String state) {
            $.state = state;
            return this;
        }

        public Builder targetServerBrandVersion(String targetServerBrandVersion) {
            $.targetServerBrandVersion = targetServerBrandVersion;
            return this;
        }

        public Builder targetServerName(String targetServerName) {
            $.targetServerName = targetServerName;
            return this;
        }

        public Builder targetServerVersion(String targetServerVersion) {
            $.targetServerVersion = targetServerVersion;
            return this;
        }

        public MigrateSqlServerSqlMISyncTaskOutputMigrationLevelResponse build() {
            $.databaseCount = Objects.requireNonNull($.databaseCount, "expected parameter 'databaseCount' to be non-null");
            $.databaseErrorCount = Objects.requireNonNull($.databaseErrorCount, "expected parameter 'databaseErrorCount' to be non-null");
            $.endedOn = Objects.requireNonNull($.endedOn, "expected parameter 'endedOn' to be non-null");
            $.id = Objects.requireNonNull($.id, "expected parameter 'id' to be non-null");
            $.resultType = Codegen.stringProp("resultType").arg($.resultType).require();
            $.sourceServerBrandVersion = Objects.requireNonNull($.sourceServerBrandVersion, "expected parameter 'sourceServerBrandVersion' to be non-null");
            $.sourceServerName = Objects.requireNonNull($.sourceServerName, "expected parameter 'sourceServerName' to be non-null");
            $.sourceServerVersion = Objects.requireNonNull($.sourceServerVersion, "expected parameter 'sourceServerVersion' to be non-null");
            $.startedOn = Objects.requireNonNull($.startedOn, "expected parameter 'startedOn' to be non-null");
            $.state = Objects.requireNonNull($.state, "expected parameter 'state' to be non-null");
            $.targetServerBrandVersion = Objects.requireNonNull($.targetServerBrandVersion, "expected parameter 'targetServerBrandVersion' to be non-null");
            $.targetServerName = Objects.requireNonNull($.targetServerName, "expected parameter 'targetServerName' to be non-null");
            $.targetServerVersion = Objects.requireNonNull($.targetServerVersion, "expected parameter 'targetServerVersion' to be non-null");
            return $;
        }
    }

}
