// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datamigration.inputs;

import com.pulumi.azurenative.datamigration.inputs.WaitStatisticsResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Description about the errors happen while performing migration validation
 * 
 */
public final class ExecutionStatisticsResponse extends com.pulumi.resources.InvokeArgs {

    public static final ExecutionStatisticsResponse Empty = new ExecutionStatisticsResponse();

    /**
     * CPU Time in millisecond(s) for the query execution
     * 
     */
    @Import(name="cpuTimeMs", required=true)
    private Double cpuTimeMs;

    public Double cpuTimeMs() {
        return this.cpuTimeMs;
    }

    /**
     * Time taken in millisecond(s) for executing the query
     * 
     */
    @Import(name="elapsedTimeMs", required=true)
    private Double elapsedTimeMs;

    public Double elapsedTimeMs() {
        return this.elapsedTimeMs;
    }

    /**
     * No. of query executions
     * 
     */
    @Import(name="executionCount", required=true)
    private Double executionCount;

    public Double executionCount() {
        return this.executionCount;
    }

    /**
     * Indicates whether the query resulted in an error
     * 
     */
    @Import(name="hasErrors", required=true)
    private Boolean hasErrors;

    public Boolean hasErrors() {
        return this.hasErrors;
    }

    /**
     * List of sql Errors
     * 
     */
    @Import(name="sqlErrors", required=true)
    private List<String> sqlErrors;

    public List<String> sqlErrors() {
        return this.sqlErrors;
    }

    /**
     * Dictionary of sql query execution wait types and the respective statistics
     * 
     */
    @Import(name="waitStats")
    private @Nullable Map<String,WaitStatisticsResponse> waitStats;

    public Optional<Map<String,WaitStatisticsResponse>> waitStats() {
        return Optional.ofNullable(this.waitStats);
    }

    private ExecutionStatisticsResponse() {}

    private ExecutionStatisticsResponse(ExecutionStatisticsResponse $) {
        this.cpuTimeMs = $.cpuTimeMs;
        this.elapsedTimeMs = $.elapsedTimeMs;
        this.executionCount = $.executionCount;
        this.hasErrors = $.hasErrors;
        this.sqlErrors = $.sqlErrors;
        this.waitStats = $.waitStats;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExecutionStatisticsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExecutionStatisticsResponse $;

        public Builder() {
            $ = new ExecutionStatisticsResponse();
        }

        public Builder(ExecutionStatisticsResponse defaults) {
            $ = new ExecutionStatisticsResponse(Objects.requireNonNull(defaults));
        }

        public Builder cpuTimeMs(Double cpuTimeMs) {
            $.cpuTimeMs = cpuTimeMs;
            return this;
        }

        public Builder elapsedTimeMs(Double elapsedTimeMs) {
            $.elapsedTimeMs = elapsedTimeMs;
            return this;
        }

        public Builder executionCount(Double executionCount) {
            $.executionCount = executionCount;
            return this;
        }

        public Builder hasErrors(Boolean hasErrors) {
            $.hasErrors = hasErrors;
            return this;
        }

        public Builder sqlErrors(List<String> sqlErrors) {
            $.sqlErrors = sqlErrors;
            return this;
        }

        public Builder sqlErrors(String... sqlErrors) {
            return sqlErrors(List.of(sqlErrors));
        }

        public Builder waitStats(@Nullable Map<String,WaitStatisticsResponse> waitStats) {
            $.waitStats = waitStats;
            return this;
        }

        public ExecutionStatisticsResponse build() {
            $.cpuTimeMs = Objects.requireNonNull($.cpuTimeMs, "expected parameter 'cpuTimeMs' to be non-null");
            $.elapsedTimeMs = Objects.requireNonNull($.elapsedTimeMs, "expected parameter 'elapsedTimeMs' to be non-null");
            $.executionCount = Objects.requireNonNull($.executionCount, "expected parameter 'executionCount' to be non-null");
            $.hasErrors = Objects.requireNonNull($.hasErrors, "expected parameter 'hasErrors' to be non-null");
            $.sqlErrors = Objects.requireNonNull($.sqlErrors, "expected parameter 'sqlErrors' to be non-null");
            return $;
        }
    }

}
