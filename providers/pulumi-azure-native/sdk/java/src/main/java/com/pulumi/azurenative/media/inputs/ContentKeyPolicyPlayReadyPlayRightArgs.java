// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.media.inputs;

import com.pulumi.azurenative.media.enums.ContentKeyPolicyPlayReadyUnknownOutputPassingOption;
import com.pulumi.azurenative.media.inputs.ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Configures the Play Right in the PlayReady license.
 * 
 */
public final class ContentKeyPolicyPlayReadyPlayRightArgs extends com.pulumi.resources.ResourceArgs {

    public static final ContentKeyPolicyPlayReadyPlayRightArgs Empty = new ContentKeyPolicyPlayReadyPlayRightArgs();

    /**
     * Configures Automatic Gain Control (AGC) and Color Stripe in the license. Must be between 0 and 3 inclusive.
     * 
     */
    @Import(name="agcAndColorStripeRestriction")
    private @Nullable Output<Integer> agcAndColorStripeRestriction;

    /**
     * @return Configures Automatic Gain Control (AGC) and Color Stripe in the license. Must be between 0 and 3 inclusive.
     * 
     */
    public Optional<Output<Integer>> agcAndColorStripeRestriction() {
        return Optional.ofNullable(this.agcAndColorStripeRestriction);
    }

    /**
     * Configures Unknown output handling settings of the license.
     * 
     */
    @Import(name="allowPassingVideoContentToUnknownOutput", required=true)
    private Output<Either<String,ContentKeyPolicyPlayReadyUnknownOutputPassingOption>> allowPassingVideoContentToUnknownOutput;

    /**
     * @return Configures Unknown output handling settings of the license.
     * 
     */
    public Output<Either<String,ContentKeyPolicyPlayReadyUnknownOutputPassingOption>> allowPassingVideoContentToUnknownOutput() {
        return this.allowPassingVideoContentToUnknownOutput;
    }

    /**
     * Specifies the output protection level for compressed digital audio.
     * 
     */
    @Import(name="analogVideoOpl")
    private @Nullable Output<Integer> analogVideoOpl;

    /**
     * @return Specifies the output protection level for compressed digital audio.
     * 
     */
    public Optional<Output<Integer>> analogVideoOpl() {
        return Optional.ofNullable(this.analogVideoOpl);
    }

    /**
     * Specifies the output protection level for compressed digital audio.
     * 
     */
    @Import(name="compressedDigitalAudioOpl")
    private @Nullable Output<Integer> compressedDigitalAudioOpl;

    /**
     * @return Specifies the output protection level for compressed digital audio.
     * 
     */
    public Optional<Output<Integer>> compressedDigitalAudioOpl() {
        return Optional.ofNullable(this.compressedDigitalAudioOpl);
    }

    /**
     * Specifies the output protection level for compressed digital video.
     * 
     */
    @Import(name="compressedDigitalVideoOpl")
    private @Nullable Output<Integer> compressedDigitalVideoOpl;

    /**
     * @return Specifies the output protection level for compressed digital video.
     * 
     */
    public Optional<Output<Integer>> compressedDigitalVideoOpl() {
        return Optional.ofNullable(this.compressedDigitalVideoOpl);
    }

    /**
     * Enables the Image Constraint For Analog Component Video Restriction in the license.
     * 
     */
    @Import(name="digitalVideoOnlyContentRestriction", required=true)
    private Output<Boolean> digitalVideoOnlyContentRestriction;

    /**
     * @return Enables the Image Constraint For Analog Component Video Restriction in the license.
     * 
     */
    public Output<Boolean> digitalVideoOnlyContentRestriction() {
        return this.digitalVideoOnlyContentRestriction;
    }

    /**
     * Configures the Explicit Analog Television Output Restriction in the license. Configuration data must be between 0 and 3 inclusive.
     * 
     */
    @Import(name="explicitAnalogTelevisionOutputRestriction")
    private @Nullable Output<ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionArgs> explicitAnalogTelevisionOutputRestriction;

    /**
     * @return Configures the Explicit Analog Television Output Restriction in the license. Configuration data must be between 0 and 3 inclusive.
     * 
     */
    public Optional<Output<ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionArgs>> explicitAnalogTelevisionOutputRestriction() {
        return Optional.ofNullable(this.explicitAnalogTelevisionOutputRestriction);
    }

    /**
     * The amount of time that the license is valid after the license is first used to play content.
     * 
     */
    @Import(name="firstPlayExpiration")
    private @Nullable Output<String> firstPlayExpiration;

    /**
     * @return The amount of time that the license is valid after the license is first used to play content.
     * 
     */
    public Optional<Output<String>> firstPlayExpiration() {
        return Optional.ofNullable(this.firstPlayExpiration);
    }

    /**
     * Enables the Image Constraint For Analog Component Video Restriction in the license.
     * 
     */
    @Import(name="imageConstraintForAnalogComponentVideoRestriction", required=true)
    private Output<Boolean> imageConstraintForAnalogComponentVideoRestriction;

    /**
     * @return Enables the Image Constraint For Analog Component Video Restriction in the license.
     * 
     */
    public Output<Boolean> imageConstraintForAnalogComponentVideoRestriction() {
        return this.imageConstraintForAnalogComponentVideoRestriction;
    }

    /**
     * Enables the Image Constraint For Analog Component Video Restriction in the license.
     * 
     */
    @Import(name="imageConstraintForAnalogComputerMonitorRestriction", required=true)
    private Output<Boolean> imageConstraintForAnalogComputerMonitorRestriction;

    /**
     * @return Enables the Image Constraint For Analog Component Video Restriction in the license.
     * 
     */
    public Output<Boolean> imageConstraintForAnalogComputerMonitorRestriction() {
        return this.imageConstraintForAnalogComputerMonitorRestriction;
    }

    /**
     * Configures the Serial Copy Management System (SCMS) in the license. Must be between 0 and 3 inclusive.
     * 
     */
    @Import(name="scmsRestriction")
    private @Nullable Output<Integer> scmsRestriction;

    /**
     * @return Configures the Serial Copy Management System (SCMS) in the license. Must be between 0 and 3 inclusive.
     * 
     */
    public Optional<Output<Integer>> scmsRestriction() {
        return Optional.ofNullable(this.scmsRestriction);
    }

    /**
     * Specifies the output protection level for uncompressed digital audio.
     * 
     */
    @Import(name="uncompressedDigitalAudioOpl")
    private @Nullable Output<Integer> uncompressedDigitalAudioOpl;

    /**
     * @return Specifies the output protection level for uncompressed digital audio.
     * 
     */
    public Optional<Output<Integer>> uncompressedDigitalAudioOpl() {
        return Optional.ofNullable(this.uncompressedDigitalAudioOpl);
    }

    /**
     * Specifies the output protection level for uncompressed digital video.
     * 
     */
    @Import(name="uncompressedDigitalVideoOpl")
    private @Nullable Output<Integer> uncompressedDigitalVideoOpl;

    /**
     * @return Specifies the output protection level for uncompressed digital video.
     * 
     */
    public Optional<Output<Integer>> uncompressedDigitalVideoOpl() {
        return Optional.ofNullable(this.uncompressedDigitalVideoOpl);
    }

    private ContentKeyPolicyPlayReadyPlayRightArgs() {}

    private ContentKeyPolicyPlayReadyPlayRightArgs(ContentKeyPolicyPlayReadyPlayRightArgs $) {
        this.agcAndColorStripeRestriction = $.agcAndColorStripeRestriction;
        this.allowPassingVideoContentToUnknownOutput = $.allowPassingVideoContentToUnknownOutput;
        this.analogVideoOpl = $.analogVideoOpl;
        this.compressedDigitalAudioOpl = $.compressedDigitalAudioOpl;
        this.compressedDigitalVideoOpl = $.compressedDigitalVideoOpl;
        this.digitalVideoOnlyContentRestriction = $.digitalVideoOnlyContentRestriction;
        this.explicitAnalogTelevisionOutputRestriction = $.explicitAnalogTelevisionOutputRestriction;
        this.firstPlayExpiration = $.firstPlayExpiration;
        this.imageConstraintForAnalogComponentVideoRestriction = $.imageConstraintForAnalogComponentVideoRestriction;
        this.imageConstraintForAnalogComputerMonitorRestriction = $.imageConstraintForAnalogComputerMonitorRestriction;
        this.scmsRestriction = $.scmsRestriction;
        this.uncompressedDigitalAudioOpl = $.uncompressedDigitalAudioOpl;
        this.uncompressedDigitalVideoOpl = $.uncompressedDigitalVideoOpl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContentKeyPolicyPlayReadyPlayRightArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContentKeyPolicyPlayReadyPlayRightArgs $;

        public Builder() {
            $ = new ContentKeyPolicyPlayReadyPlayRightArgs();
        }

        public Builder(ContentKeyPolicyPlayReadyPlayRightArgs defaults) {
            $ = new ContentKeyPolicyPlayReadyPlayRightArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param agcAndColorStripeRestriction Configures Automatic Gain Control (AGC) and Color Stripe in the license. Must be between 0 and 3 inclusive.
         * 
         * @return builder
         * 
         */
        public Builder agcAndColorStripeRestriction(@Nullable Output<Integer> agcAndColorStripeRestriction) {
            $.agcAndColorStripeRestriction = agcAndColorStripeRestriction;
            return this;
        }

        /**
         * @param agcAndColorStripeRestriction Configures Automatic Gain Control (AGC) and Color Stripe in the license. Must be between 0 and 3 inclusive.
         * 
         * @return builder
         * 
         */
        public Builder agcAndColorStripeRestriction(Integer agcAndColorStripeRestriction) {
            return agcAndColorStripeRestriction(Output.of(agcAndColorStripeRestriction));
        }

        /**
         * @param allowPassingVideoContentToUnknownOutput Configures Unknown output handling settings of the license.
         * 
         * @return builder
         * 
         */
        public Builder allowPassingVideoContentToUnknownOutput(Output<Either<String,ContentKeyPolicyPlayReadyUnknownOutputPassingOption>> allowPassingVideoContentToUnknownOutput) {
            $.allowPassingVideoContentToUnknownOutput = allowPassingVideoContentToUnknownOutput;
            return this;
        }

        /**
         * @param allowPassingVideoContentToUnknownOutput Configures Unknown output handling settings of the license.
         * 
         * @return builder
         * 
         */
        public Builder allowPassingVideoContentToUnknownOutput(Either<String,ContentKeyPolicyPlayReadyUnknownOutputPassingOption> allowPassingVideoContentToUnknownOutput) {
            return allowPassingVideoContentToUnknownOutput(Output.of(allowPassingVideoContentToUnknownOutput));
        }

        /**
         * @param allowPassingVideoContentToUnknownOutput Configures Unknown output handling settings of the license.
         * 
         * @return builder
         * 
         */
        public Builder allowPassingVideoContentToUnknownOutput(String allowPassingVideoContentToUnknownOutput) {
            return allowPassingVideoContentToUnknownOutput(Either.ofLeft(allowPassingVideoContentToUnknownOutput));
        }

        /**
         * @param allowPassingVideoContentToUnknownOutput Configures Unknown output handling settings of the license.
         * 
         * @return builder
         * 
         */
        public Builder allowPassingVideoContentToUnknownOutput(ContentKeyPolicyPlayReadyUnknownOutputPassingOption allowPassingVideoContentToUnknownOutput) {
            return allowPassingVideoContentToUnknownOutput(Either.ofRight(allowPassingVideoContentToUnknownOutput));
        }

        /**
         * @param analogVideoOpl Specifies the output protection level for compressed digital audio.
         * 
         * @return builder
         * 
         */
        public Builder analogVideoOpl(@Nullable Output<Integer> analogVideoOpl) {
            $.analogVideoOpl = analogVideoOpl;
            return this;
        }

        /**
         * @param analogVideoOpl Specifies the output protection level for compressed digital audio.
         * 
         * @return builder
         * 
         */
        public Builder analogVideoOpl(Integer analogVideoOpl) {
            return analogVideoOpl(Output.of(analogVideoOpl));
        }

        /**
         * @param compressedDigitalAudioOpl Specifies the output protection level for compressed digital audio.
         * 
         * @return builder
         * 
         */
        public Builder compressedDigitalAudioOpl(@Nullable Output<Integer> compressedDigitalAudioOpl) {
            $.compressedDigitalAudioOpl = compressedDigitalAudioOpl;
            return this;
        }

        /**
         * @param compressedDigitalAudioOpl Specifies the output protection level for compressed digital audio.
         * 
         * @return builder
         * 
         */
        public Builder compressedDigitalAudioOpl(Integer compressedDigitalAudioOpl) {
            return compressedDigitalAudioOpl(Output.of(compressedDigitalAudioOpl));
        }

        /**
         * @param compressedDigitalVideoOpl Specifies the output protection level for compressed digital video.
         * 
         * @return builder
         * 
         */
        public Builder compressedDigitalVideoOpl(@Nullable Output<Integer> compressedDigitalVideoOpl) {
            $.compressedDigitalVideoOpl = compressedDigitalVideoOpl;
            return this;
        }

        /**
         * @param compressedDigitalVideoOpl Specifies the output protection level for compressed digital video.
         * 
         * @return builder
         * 
         */
        public Builder compressedDigitalVideoOpl(Integer compressedDigitalVideoOpl) {
            return compressedDigitalVideoOpl(Output.of(compressedDigitalVideoOpl));
        }

        /**
         * @param digitalVideoOnlyContentRestriction Enables the Image Constraint For Analog Component Video Restriction in the license.
         * 
         * @return builder
         * 
         */
        public Builder digitalVideoOnlyContentRestriction(Output<Boolean> digitalVideoOnlyContentRestriction) {
            $.digitalVideoOnlyContentRestriction = digitalVideoOnlyContentRestriction;
            return this;
        }

        /**
         * @param digitalVideoOnlyContentRestriction Enables the Image Constraint For Analog Component Video Restriction in the license.
         * 
         * @return builder
         * 
         */
        public Builder digitalVideoOnlyContentRestriction(Boolean digitalVideoOnlyContentRestriction) {
            return digitalVideoOnlyContentRestriction(Output.of(digitalVideoOnlyContentRestriction));
        }

        /**
         * @param explicitAnalogTelevisionOutputRestriction Configures the Explicit Analog Television Output Restriction in the license. Configuration data must be between 0 and 3 inclusive.
         * 
         * @return builder
         * 
         */
        public Builder explicitAnalogTelevisionOutputRestriction(@Nullable Output<ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionArgs> explicitAnalogTelevisionOutputRestriction) {
            $.explicitAnalogTelevisionOutputRestriction = explicitAnalogTelevisionOutputRestriction;
            return this;
        }

        /**
         * @param explicitAnalogTelevisionOutputRestriction Configures the Explicit Analog Television Output Restriction in the license. Configuration data must be between 0 and 3 inclusive.
         * 
         * @return builder
         * 
         */
        public Builder explicitAnalogTelevisionOutputRestriction(ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestrictionArgs explicitAnalogTelevisionOutputRestriction) {
            return explicitAnalogTelevisionOutputRestriction(Output.of(explicitAnalogTelevisionOutputRestriction));
        }

        /**
         * @param firstPlayExpiration The amount of time that the license is valid after the license is first used to play content.
         * 
         * @return builder
         * 
         */
        public Builder firstPlayExpiration(@Nullable Output<String> firstPlayExpiration) {
            $.firstPlayExpiration = firstPlayExpiration;
            return this;
        }

        /**
         * @param firstPlayExpiration The amount of time that the license is valid after the license is first used to play content.
         * 
         * @return builder
         * 
         */
        public Builder firstPlayExpiration(String firstPlayExpiration) {
            return firstPlayExpiration(Output.of(firstPlayExpiration));
        }

        /**
         * @param imageConstraintForAnalogComponentVideoRestriction Enables the Image Constraint For Analog Component Video Restriction in the license.
         * 
         * @return builder
         * 
         */
        public Builder imageConstraintForAnalogComponentVideoRestriction(Output<Boolean> imageConstraintForAnalogComponentVideoRestriction) {
            $.imageConstraintForAnalogComponentVideoRestriction = imageConstraintForAnalogComponentVideoRestriction;
            return this;
        }

        /**
         * @param imageConstraintForAnalogComponentVideoRestriction Enables the Image Constraint For Analog Component Video Restriction in the license.
         * 
         * @return builder
         * 
         */
        public Builder imageConstraintForAnalogComponentVideoRestriction(Boolean imageConstraintForAnalogComponentVideoRestriction) {
            return imageConstraintForAnalogComponentVideoRestriction(Output.of(imageConstraintForAnalogComponentVideoRestriction));
        }

        /**
         * @param imageConstraintForAnalogComputerMonitorRestriction Enables the Image Constraint For Analog Component Video Restriction in the license.
         * 
         * @return builder
         * 
         */
        public Builder imageConstraintForAnalogComputerMonitorRestriction(Output<Boolean> imageConstraintForAnalogComputerMonitorRestriction) {
            $.imageConstraintForAnalogComputerMonitorRestriction = imageConstraintForAnalogComputerMonitorRestriction;
            return this;
        }

        /**
         * @param imageConstraintForAnalogComputerMonitorRestriction Enables the Image Constraint For Analog Component Video Restriction in the license.
         * 
         * @return builder
         * 
         */
        public Builder imageConstraintForAnalogComputerMonitorRestriction(Boolean imageConstraintForAnalogComputerMonitorRestriction) {
            return imageConstraintForAnalogComputerMonitorRestriction(Output.of(imageConstraintForAnalogComputerMonitorRestriction));
        }

        /**
         * @param scmsRestriction Configures the Serial Copy Management System (SCMS) in the license. Must be between 0 and 3 inclusive.
         * 
         * @return builder
         * 
         */
        public Builder scmsRestriction(@Nullable Output<Integer> scmsRestriction) {
            $.scmsRestriction = scmsRestriction;
            return this;
        }

        /**
         * @param scmsRestriction Configures the Serial Copy Management System (SCMS) in the license. Must be between 0 and 3 inclusive.
         * 
         * @return builder
         * 
         */
        public Builder scmsRestriction(Integer scmsRestriction) {
            return scmsRestriction(Output.of(scmsRestriction));
        }

        /**
         * @param uncompressedDigitalAudioOpl Specifies the output protection level for uncompressed digital audio.
         * 
         * @return builder
         * 
         */
        public Builder uncompressedDigitalAudioOpl(@Nullable Output<Integer> uncompressedDigitalAudioOpl) {
            $.uncompressedDigitalAudioOpl = uncompressedDigitalAudioOpl;
            return this;
        }

        /**
         * @param uncompressedDigitalAudioOpl Specifies the output protection level for uncompressed digital audio.
         * 
         * @return builder
         * 
         */
        public Builder uncompressedDigitalAudioOpl(Integer uncompressedDigitalAudioOpl) {
            return uncompressedDigitalAudioOpl(Output.of(uncompressedDigitalAudioOpl));
        }

        /**
         * @param uncompressedDigitalVideoOpl Specifies the output protection level for uncompressed digital video.
         * 
         * @return builder
         * 
         */
        public Builder uncompressedDigitalVideoOpl(@Nullable Output<Integer> uncompressedDigitalVideoOpl) {
            $.uncompressedDigitalVideoOpl = uncompressedDigitalVideoOpl;
            return this;
        }

        /**
         * @param uncompressedDigitalVideoOpl Specifies the output protection level for uncompressed digital video.
         * 
         * @return builder
         * 
         */
        public Builder uncompressedDigitalVideoOpl(Integer uncompressedDigitalVideoOpl) {
            return uncompressedDigitalVideoOpl(Output.of(uncompressedDigitalVideoOpl));
        }

        public ContentKeyPolicyPlayReadyPlayRightArgs build() {
            $.allowPassingVideoContentToUnknownOutput = Objects.requireNonNull($.allowPassingVideoContentToUnknownOutput, "expected parameter 'allowPassingVideoContentToUnknownOutput' to be non-null");
            $.digitalVideoOnlyContentRestriction = Objects.requireNonNull($.digitalVideoOnlyContentRestriction, "expected parameter 'digitalVideoOnlyContentRestriction' to be non-null");
            $.imageConstraintForAnalogComponentVideoRestriction = Objects.requireNonNull($.imageConstraintForAnalogComponentVideoRestriction, "expected parameter 'imageConstraintForAnalogComponentVideoRestriction' to be non-null");
            $.imageConstraintForAnalogComputerMonitorRestriction = Objects.requireNonNull($.imageConstraintForAnalogComputerMonitorRestriction, "expected parameter 'imageConstraintForAnalogComputerMonitorRestriction' to be non-null");
            return $;
        }
    }

}
