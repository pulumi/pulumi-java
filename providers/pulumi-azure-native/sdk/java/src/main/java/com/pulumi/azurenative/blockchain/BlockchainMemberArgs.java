// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.blockchain;

import com.pulumi.azurenative.blockchain.enums.BlockchainProtocol;
import com.pulumi.azurenative.blockchain.inputs.BlockchainMemberNodesSkuArgs;
import com.pulumi.azurenative.blockchain.inputs.FirewallRuleArgs;
import com.pulumi.azurenative.blockchain.inputs.SkuArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BlockchainMemberArgs extends com.pulumi.resources.ResourceArgs {

    public static final BlockchainMemberArgs Empty = new BlockchainMemberArgs();

    /**
     * Blockchain member name.
     * 
     */
    @Import(name="blockchainMemberName")
    private @Nullable Output<String> blockchainMemberName;

    public Optional<Output<String>> blockchainMemberName() {
        return Optional.ofNullable(this.blockchainMemberName);
    }

    /**
     * Gets or sets the consortium for the blockchain member.
     * 
     */
    @Import(name="consortium")
    private @Nullable Output<String> consortium;

    public Optional<Output<String>> consortium() {
        return Optional.ofNullable(this.consortium);
    }

    /**
     * Sets the managed consortium management account password.
     * 
     */
    @Import(name="consortiumManagementAccountPassword")
    private @Nullable Output<String> consortiumManagementAccountPassword;

    public Optional<Output<String>> consortiumManagementAccountPassword() {
        return Optional.ofNullable(this.consortiumManagementAccountPassword);
    }

    /**
     * Gets the display name of the member in the consortium.
     * 
     */
    @Import(name="consortiumMemberDisplayName")
    private @Nullable Output<String> consortiumMemberDisplayName;

    public Optional<Output<String>> consortiumMemberDisplayName() {
        return Optional.ofNullable(this.consortiumMemberDisplayName);
    }

    /**
     * Gets the role of the member in the consortium.
     * 
     */
    @Import(name="consortiumRole")
    private @Nullable Output<String> consortiumRole;

    public Optional<Output<String>> consortiumRole() {
        return Optional.ofNullable(this.consortiumRole);
    }

    /**
     * Gets or sets firewall rules
     * 
     */
    @Import(name="firewallRules")
    private @Nullable Output<List<FirewallRuleArgs>> firewallRules;

    public Optional<Output<List<FirewallRuleArgs>>> firewallRules() {
        return Optional.ofNullable(this.firewallRules);
    }

    /**
     * The GEO location of the blockchain service.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Sets the basic auth password of the blockchain member.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * Gets or sets the blockchain protocol.
     * 
     */
    @Import(name="protocol")
    private @Nullable Output<Either<String,BlockchainProtocol>> protocol;

    public Optional<Output<Either<String,BlockchainProtocol>>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    /**
     * The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Gets or sets the blockchain member Sku.
     * 
     */
    @Import(name="sku")
    private @Nullable Output<SkuArgs> sku;

    public Optional<Output<SkuArgs>> sku() {
        return Optional.ofNullable(this.sku);
    }

    /**
     * Tags of the service which is a list of key value pairs that describes the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Gets or sets the blockchain validator nodes Sku.
     * 
     */
    @Import(name="validatorNodesSku")
    private @Nullable Output<BlockchainMemberNodesSkuArgs> validatorNodesSku;

    public Optional<Output<BlockchainMemberNodesSkuArgs>> validatorNodesSku() {
        return Optional.ofNullable(this.validatorNodesSku);
    }

    private BlockchainMemberArgs() {}

    private BlockchainMemberArgs(BlockchainMemberArgs $) {
        this.blockchainMemberName = $.blockchainMemberName;
        this.consortium = $.consortium;
        this.consortiumManagementAccountPassword = $.consortiumManagementAccountPassword;
        this.consortiumMemberDisplayName = $.consortiumMemberDisplayName;
        this.consortiumRole = $.consortiumRole;
        this.firewallRules = $.firewallRules;
        this.location = $.location;
        this.password = $.password;
        this.protocol = $.protocol;
        this.resourceGroupName = $.resourceGroupName;
        this.sku = $.sku;
        this.tags = $.tags;
        this.validatorNodesSku = $.validatorNodesSku;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BlockchainMemberArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BlockchainMemberArgs $;

        public Builder() {
            $ = new BlockchainMemberArgs();
        }

        public Builder(BlockchainMemberArgs defaults) {
            $ = new BlockchainMemberArgs(Objects.requireNonNull(defaults));
        }

        public Builder blockchainMemberName(@Nullable Output<String> blockchainMemberName) {
            $.blockchainMemberName = blockchainMemberName;
            return this;
        }

        public Builder blockchainMemberName(String blockchainMemberName) {
            return blockchainMemberName(Output.of(blockchainMemberName));
        }

        public Builder consortium(@Nullable Output<String> consortium) {
            $.consortium = consortium;
            return this;
        }

        public Builder consortium(String consortium) {
            return consortium(Output.of(consortium));
        }

        public Builder consortiumManagementAccountPassword(@Nullable Output<String> consortiumManagementAccountPassword) {
            $.consortiumManagementAccountPassword = consortiumManagementAccountPassword;
            return this;
        }

        public Builder consortiumManagementAccountPassword(String consortiumManagementAccountPassword) {
            return consortiumManagementAccountPassword(Output.of(consortiumManagementAccountPassword));
        }

        public Builder consortiumMemberDisplayName(@Nullable Output<String> consortiumMemberDisplayName) {
            $.consortiumMemberDisplayName = consortiumMemberDisplayName;
            return this;
        }

        public Builder consortiumMemberDisplayName(String consortiumMemberDisplayName) {
            return consortiumMemberDisplayName(Output.of(consortiumMemberDisplayName));
        }

        public Builder consortiumRole(@Nullable Output<String> consortiumRole) {
            $.consortiumRole = consortiumRole;
            return this;
        }

        public Builder consortiumRole(String consortiumRole) {
            return consortiumRole(Output.of(consortiumRole));
        }

        public Builder firewallRules(@Nullable Output<List<FirewallRuleArgs>> firewallRules) {
            $.firewallRules = firewallRules;
            return this;
        }

        public Builder firewallRules(List<FirewallRuleArgs> firewallRules) {
            return firewallRules(Output.of(firewallRules));
        }

        public Builder firewallRules(FirewallRuleArgs... firewallRules) {
            return firewallRules(List.of(firewallRules));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        public Builder password(String password) {
            return password(Output.of(password));
        }

        public Builder protocol(@Nullable Output<Either<String,BlockchainProtocol>> protocol) {
            $.protocol = protocol;
            return this;
        }

        public Builder protocol(Either<String,BlockchainProtocol> protocol) {
            return protocol(Output.of(protocol));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder sku(@Nullable Output<SkuArgs> sku) {
            $.sku = sku;
            return this;
        }

        public Builder sku(SkuArgs sku) {
            return sku(Output.of(sku));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder validatorNodesSku(@Nullable Output<BlockchainMemberNodesSkuArgs> validatorNodesSku) {
            $.validatorNodesSku = validatorNodesSku;
            return this;
        }

        public Builder validatorNodesSku(BlockchainMemberNodesSkuArgs validatorNodesSku) {
            return validatorNodesSku(Output.of(validatorNodesSku));
        }

        public BlockchainMemberArgs build() {
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
