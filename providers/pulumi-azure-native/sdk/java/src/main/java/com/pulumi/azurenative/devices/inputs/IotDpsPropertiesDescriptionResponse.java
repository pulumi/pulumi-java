// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.devices.inputs;

import com.pulumi.azurenative.devices.inputs.IotHubDefinitionDescriptionResponse;
import com.pulumi.azurenative.devices.inputs.PrivateEndpointConnectionResponse;
import com.pulumi.azurenative.devices.inputs.SharedAccessSignatureAuthorizationRuleAccessRightsDescriptionResponse;
import com.pulumi.azurenative.devices.inputs.TargetIpFilterRuleResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * the service specific properties of a provisioning service, including keys, linked iot hubs, current state, and system generated properties such as hostname and idScope
 * 
 */
public final class IotDpsPropertiesDescriptionResponse extends com.pulumi.resources.InvokeArgs {

    public static final IotDpsPropertiesDescriptionResponse Empty = new IotDpsPropertiesDescriptionResponse();

    /**
     * Allocation policy to be used by this provisioning service.
     * 
     */
    @Import(name="allocationPolicy")
      private final @Nullable String allocationPolicy;

    public Optional<String> allocationPolicy() {
        return this.allocationPolicy == null ? Optional.empty() : Optional.ofNullable(this.allocationPolicy);
    }

    /**
     * List of authorization keys for a provisioning service.
     * 
     */
    @Import(name="authorizationPolicies")
      private final @Nullable List<SharedAccessSignatureAuthorizationRuleAccessRightsDescriptionResponse> authorizationPolicies;

    public List<SharedAccessSignatureAuthorizationRuleAccessRightsDescriptionResponse> authorizationPolicies() {
        return this.authorizationPolicies == null ? List.of() : this.authorizationPolicies;
    }

    /**
     * Device endpoint for this provisioning service.
     * 
     */
    @Import(name="deviceProvisioningHostName", required=true)
      private final String deviceProvisioningHostName;

    public String deviceProvisioningHostName() {
        return this.deviceProvisioningHostName;
    }

    /**
     * Unique identifier of this provisioning service.
     * 
     */
    @Import(name="idScope", required=true)
      private final String idScope;

    public String idScope() {
        return this.idScope;
    }

    /**
     * List of IoT hubs associated with this provisioning service.
     * 
     */
    @Import(name="iotHubs")
      private final @Nullable List<IotHubDefinitionDescriptionResponse> iotHubs;

    public List<IotHubDefinitionDescriptionResponse> iotHubs() {
        return this.iotHubs == null ? List.of() : this.iotHubs;
    }

    /**
     * The IP filter rules.
     * 
     */
    @Import(name="ipFilterRules")
      private final @Nullable List<TargetIpFilterRuleResponse> ipFilterRules;

    public List<TargetIpFilterRuleResponse> ipFilterRules() {
        return this.ipFilterRules == null ? List.of() : this.ipFilterRules;
    }

    /**
     * Private endpoint connections created on this IotHub
     * 
     */
    @Import(name="privateEndpointConnections")
      private final @Nullable List<PrivateEndpointConnectionResponse> privateEndpointConnections;

    public List<PrivateEndpointConnectionResponse> privateEndpointConnections() {
        return this.privateEndpointConnections == null ? List.of() : this.privateEndpointConnections;
    }

    /**
     * The ARM provisioning state of the provisioning service.
     * 
     */
    @Import(name="provisioningState")
      private final @Nullable String provisioningState;

    public Optional<String> provisioningState() {
        return this.provisioningState == null ? Optional.empty() : Optional.ofNullable(this.provisioningState);
    }

    /**
     * Whether requests from Public Network are allowed
     * 
     */
    @Import(name="publicNetworkAccess")
      private final @Nullable String publicNetworkAccess;

    public Optional<String> publicNetworkAccess() {
        return this.publicNetworkAccess == null ? Optional.empty() : Optional.ofNullable(this.publicNetworkAccess);
    }

    /**
     * Service endpoint for provisioning service.
     * 
     */
    @Import(name="serviceOperationsHostName", required=true)
      private final String serviceOperationsHostName;

    public String serviceOperationsHostName() {
        return this.serviceOperationsHostName;
    }

    /**
     * Current state of the provisioning service.
     * 
     */
    @Import(name="state")
      private final @Nullable String state;

    public Optional<String> state() {
        return this.state == null ? Optional.empty() : Optional.ofNullable(this.state);
    }

    public IotDpsPropertiesDescriptionResponse(
        @Nullable String allocationPolicy,
        @Nullable List<SharedAccessSignatureAuthorizationRuleAccessRightsDescriptionResponse> authorizationPolicies,
        String deviceProvisioningHostName,
        String idScope,
        @Nullable List<IotHubDefinitionDescriptionResponse> iotHubs,
        @Nullable List<TargetIpFilterRuleResponse> ipFilterRules,
        @Nullable List<PrivateEndpointConnectionResponse> privateEndpointConnections,
        @Nullable String provisioningState,
        @Nullable String publicNetworkAccess,
        String serviceOperationsHostName,
        @Nullable String state) {
        this.allocationPolicy = allocationPolicy;
        this.authorizationPolicies = authorizationPolicies;
        this.deviceProvisioningHostName = Objects.requireNonNull(deviceProvisioningHostName, "expected parameter 'deviceProvisioningHostName' to be non-null");
        this.idScope = Objects.requireNonNull(idScope, "expected parameter 'idScope' to be non-null");
        this.iotHubs = iotHubs;
        this.ipFilterRules = ipFilterRules;
        this.privateEndpointConnections = privateEndpointConnections;
        this.provisioningState = provisioningState;
        this.publicNetworkAccess = publicNetworkAccess;
        this.serviceOperationsHostName = Objects.requireNonNull(serviceOperationsHostName, "expected parameter 'serviceOperationsHostName' to be non-null");
        this.state = state;
    }

    private IotDpsPropertiesDescriptionResponse() {
        this.allocationPolicy = null;
        this.authorizationPolicies = List.of();
        this.deviceProvisioningHostName = null;
        this.idScope = null;
        this.iotHubs = List.of();
        this.ipFilterRules = List.of();
        this.privateEndpointConnections = List.of();
        this.provisioningState = null;
        this.publicNetworkAccess = null;
        this.serviceOperationsHostName = null;
        this.state = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(IotDpsPropertiesDescriptionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String allocationPolicy;
        private @Nullable List<SharedAccessSignatureAuthorizationRuleAccessRightsDescriptionResponse> authorizationPolicies;
        private String deviceProvisioningHostName;
        private String idScope;
        private @Nullable List<IotHubDefinitionDescriptionResponse> iotHubs;
        private @Nullable List<TargetIpFilterRuleResponse> ipFilterRules;
        private @Nullable List<PrivateEndpointConnectionResponse> privateEndpointConnections;
        private @Nullable String provisioningState;
        private @Nullable String publicNetworkAccess;
        private String serviceOperationsHostName;
        private @Nullable String state;

        public Builder() {
    	      // Empty
        }

        public Builder(IotDpsPropertiesDescriptionResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allocationPolicy = defaults.allocationPolicy;
    	      this.authorizationPolicies = defaults.authorizationPolicies;
    	      this.deviceProvisioningHostName = defaults.deviceProvisioningHostName;
    	      this.idScope = defaults.idScope;
    	      this.iotHubs = defaults.iotHubs;
    	      this.ipFilterRules = defaults.ipFilterRules;
    	      this.privateEndpointConnections = defaults.privateEndpointConnections;
    	      this.provisioningState = defaults.provisioningState;
    	      this.publicNetworkAccess = defaults.publicNetworkAccess;
    	      this.serviceOperationsHostName = defaults.serviceOperationsHostName;
    	      this.state = defaults.state;
        }

        public Builder allocationPolicy(@Nullable String allocationPolicy) {
            this.allocationPolicy = allocationPolicy;
            return this;
        }
        public Builder authorizationPolicies(@Nullable List<SharedAccessSignatureAuthorizationRuleAccessRightsDescriptionResponse> authorizationPolicies) {
            this.authorizationPolicies = authorizationPolicies;
            return this;
        }
        public Builder authorizationPolicies(SharedAccessSignatureAuthorizationRuleAccessRightsDescriptionResponse... authorizationPolicies) {
            return authorizationPolicies(List.of(authorizationPolicies));
        }
        public Builder deviceProvisioningHostName(String deviceProvisioningHostName) {
            this.deviceProvisioningHostName = Objects.requireNonNull(deviceProvisioningHostName);
            return this;
        }
        public Builder idScope(String idScope) {
            this.idScope = Objects.requireNonNull(idScope);
            return this;
        }
        public Builder iotHubs(@Nullable List<IotHubDefinitionDescriptionResponse> iotHubs) {
            this.iotHubs = iotHubs;
            return this;
        }
        public Builder iotHubs(IotHubDefinitionDescriptionResponse... iotHubs) {
            return iotHubs(List.of(iotHubs));
        }
        public Builder ipFilterRules(@Nullable List<TargetIpFilterRuleResponse> ipFilterRules) {
            this.ipFilterRules = ipFilterRules;
            return this;
        }
        public Builder ipFilterRules(TargetIpFilterRuleResponse... ipFilterRules) {
            return ipFilterRules(List.of(ipFilterRules));
        }
        public Builder privateEndpointConnections(@Nullable List<PrivateEndpointConnectionResponse> privateEndpointConnections) {
            this.privateEndpointConnections = privateEndpointConnections;
            return this;
        }
        public Builder privateEndpointConnections(PrivateEndpointConnectionResponse... privateEndpointConnections) {
            return privateEndpointConnections(List.of(privateEndpointConnections));
        }
        public Builder provisioningState(@Nullable String provisioningState) {
            this.provisioningState = provisioningState;
            return this;
        }
        public Builder publicNetworkAccess(@Nullable String publicNetworkAccess) {
            this.publicNetworkAccess = publicNetworkAccess;
            return this;
        }
        public Builder serviceOperationsHostName(String serviceOperationsHostName) {
            this.serviceOperationsHostName = Objects.requireNonNull(serviceOperationsHostName);
            return this;
        }
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }        public IotDpsPropertiesDescriptionResponse build() {
            return new IotDpsPropertiesDescriptionResponse(allocationPolicy, authorizationPolicies, deviceProvisioningHostName, idScope, iotHubs, ipFilterRules, privateEndpointConnections, provisioningState, publicNetworkAccess, serviceOperationsHostName, state);
        }
    }
}
