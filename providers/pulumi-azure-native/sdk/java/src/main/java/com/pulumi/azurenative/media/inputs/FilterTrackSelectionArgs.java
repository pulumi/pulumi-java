// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.media.inputs;

import com.pulumi.azurenative.media.inputs.FilterTrackPropertyConditionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.List;
import java.util.Objects;


/**
 * Representing a list of FilterTrackPropertyConditions to select a track.  The filters are combined using a logical AND operation.
 * 
 */
public final class FilterTrackSelectionArgs extends com.pulumi.resources.ResourceArgs {

    public static final FilterTrackSelectionArgs Empty = new FilterTrackSelectionArgs();

    /**
     * The track selections.
     * 
     */
    @Import(name="trackSelections", required=true)
    private Output<List<FilterTrackPropertyConditionArgs>> trackSelections;

    /**
     * @return The track selections.
     * 
     */
    public Output<List<FilterTrackPropertyConditionArgs>> trackSelections() {
        return this.trackSelections;
    }

    private FilterTrackSelectionArgs() {}

    private FilterTrackSelectionArgs(FilterTrackSelectionArgs $) {
        this.trackSelections = $.trackSelections;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FilterTrackSelectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FilterTrackSelectionArgs $;

        public Builder() {
            $ = new FilterTrackSelectionArgs();
        }

        public Builder(FilterTrackSelectionArgs defaults) {
            $ = new FilterTrackSelectionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param trackSelections The track selections.
         * 
         * @return builder
         * 
         */
        public Builder trackSelections(Output<List<FilterTrackPropertyConditionArgs>> trackSelections) {
            $.trackSelections = trackSelections;
            return this;
        }

        /**
         * @param trackSelections The track selections.
         * 
         * @return builder
         * 
         */
        public Builder trackSelections(List<FilterTrackPropertyConditionArgs> trackSelections) {
            return trackSelections(Output.of(trackSelections));
        }

        /**
         * @param trackSelections The track selections.
         * 
         * @return builder
         * 
         */
        public Builder trackSelections(FilterTrackPropertyConditionArgs... trackSelections) {
            return trackSelections(List.of(trackSelections));
        }

        public FilterTrackSelectionArgs build() {
            $.trackSelections = Objects.requireNonNull($.trackSelections, "expected parameter 'trackSelections' to be non-null");
            return $;
        }
    }

}
