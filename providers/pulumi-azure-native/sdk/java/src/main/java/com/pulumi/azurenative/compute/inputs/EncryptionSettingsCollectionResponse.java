// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.compute.inputs;

import com.pulumi.azurenative.compute.inputs.EncryptionSettingsElementResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Encryption settings for disk or snapshot
 * 
 */
public final class EncryptionSettingsCollectionResponse extends com.pulumi.resources.InvokeArgs {

    public static final EncryptionSettingsCollectionResponse Empty = new EncryptionSettingsCollectionResponse();

    /**
     * Set this flag to true and provide DiskEncryptionKey and optional KeyEncryptionKey to enable encryption. Set this flag to false and remove DiskEncryptionKey and KeyEncryptionKey to disable encryption. If EncryptionSettings is null in the request object, the existing settings remain unchanged.
     * 
     */
    @Import(name="enabled", required=true)
    private Boolean enabled;

    public Boolean enabled() {
        return this.enabled;
    }

    /**
     * A collection of encryption settings, one for each disk volume.
     * 
     */
    @Import(name="encryptionSettings")
    private @Nullable List<EncryptionSettingsElementResponse> encryptionSettings;

    public Optional<List<EncryptionSettingsElementResponse>> encryptionSettings() {
        return Optional.ofNullable(this.encryptionSettings);
    }

    /**
     * Describes what type of encryption is used for the disks. Once this field is set, it cannot be overwritten. &#39;1.0&#39; corresponds to Azure Disk Encryption with AAD app.&#39;1.1&#39; corresponds to Azure Disk Encryption.
     * 
     */
    @Import(name="encryptionSettingsVersion")
    private @Nullable String encryptionSettingsVersion;

    public Optional<String> encryptionSettingsVersion() {
        return Optional.ofNullable(this.encryptionSettingsVersion);
    }

    private EncryptionSettingsCollectionResponse() {}

    private EncryptionSettingsCollectionResponse(EncryptionSettingsCollectionResponse $) {
        this.enabled = $.enabled;
        this.encryptionSettings = $.encryptionSettings;
        this.encryptionSettingsVersion = $.encryptionSettingsVersion;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EncryptionSettingsCollectionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EncryptionSettingsCollectionResponse $;

        public Builder() {
            $ = new EncryptionSettingsCollectionResponse();
        }

        public Builder(EncryptionSettingsCollectionResponse defaults) {
            $ = new EncryptionSettingsCollectionResponse(Objects.requireNonNull(defaults));
        }

        public Builder enabled(Boolean enabled) {
            $.enabled = enabled;
            return this;
        }

        public Builder encryptionSettings(@Nullable List<EncryptionSettingsElementResponse> encryptionSettings) {
            $.encryptionSettings = encryptionSettings;
            return this;
        }

        public Builder encryptionSettings(EncryptionSettingsElementResponse... encryptionSettings) {
            return encryptionSettings(List.of(encryptionSettings));
        }

        public Builder encryptionSettingsVersion(@Nullable String encryptionSettingsVersion) {
            $.encryptionSettingsVersion = encryptionSettingsVersion;
            return this;
        }

        public EncryptionSettingsCollectionResponse build() {
            $.enabled = Objects.requireNonNull($.enabled, "expected parameter 'enabled' to be non-null");
            return $;
        }
    }

}
