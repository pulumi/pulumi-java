// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.security;

import com.pulumi.azurenative.security.inputs.AssignedComponentItemArgs;
import com.pulumi.azurenative.security.inputs.AssignedStandardItemArgs;
import com.pulumi.azurenative.security.inputs.AssignmentPropertiesAdditionalDataArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class AssignmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final AssignmentArgs Empty = new AssignmentArgs();

    /**
     * Additional data about the assignment
     * 
     */
    @Import(name="additionalData")
      private final @Nullable Output<AssignmentPropertiesAdditionalDataArgs> additionalData;

    public Output<AssignmentPropertiesAdditionalDataArgs> additionalData() {
        return this.additionalData == null ? Codegen.empty() : this.additionalData;
    }

    /**
     * Component item with key as applied to this standard assignment over the given scope
     * 
     */
    @Import(name="assignedComponent")
      private final @Nullable Output<AssignedComponentItemArgs> assignedComponent;

    public Output<AssignedComponentItemArgs> assignedComponent() {
        return this.assignedComponent == null ? Codegen.empty() : this.assignedComponent;
    }

    /**
     * Standard item with key as applied to this standard assignment over the given scope
     * 
     */
    @Import(name="assignedStandard")
      private final @Nullable Output<AssignedStandardItemArgs> assignedStandard;

    public Output<AssignedStandardItemArgs> assignedStandard() {
        return this.assignedStandard == null ? Codegen.empty() : this.assignedStandard;
    }

    /**
     * The security assignment key - unique key for the standard assignment
     * 
     */
    @Import(name="assignmentId")
      private final @Nullable Output<String> assignmentId;

    public Output<String> assignmentId() {
        return this.assignmentId == null ? Codegen.empty() : this.assignmentId;
    }

    /**
     * description of the standardAssignment
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> description() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * display name of the standardAssignment
     * 
     */
    @Import(name="displayName")
      private final @Nullable Output<String> displayName;

    public Output<String> displayName() {
        return this.displayName == null ? Codegen.empty() : this.displayName;
    }

    /**
     * expected effect of this assignment (Disable/Exempt/etc)
     * 
     */
    @Import(name="effect")
      private final @Nullable Output<String> effect;

    public Output<String> effect() {
        return this.effect == null ? Codegen.empty() : this.effect;
    }

    /**
     * Expiration date of this assignment as a full ISO date
     * 
     */
    @Import(name="expiresOn")
      private final @Nullable Output<String> expiresOn;

    public Output<String> expiresOn() {
        return this.expiresOn == null ? Codegen.empty() : this.expiresOn;
    }

    /**
     * Kind of the resource
     * 
     */
    @Import(name="kind")
      private final @Nullable Output<String> kind;

    public Output<String> kind() {
        return this.kind == null ? Codegen.empty() : this.kind;
    }

    /**
     * Location where the resource is stored
     * 
     */
    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> location() {
        return this.location == null ? Codegen.empty() : this.location;
    }

    /**
     * The assignment metadata. Metadata is an open ended object and is typically a collection of key value pairs.
     * 
     */
    @Import(name="metadata")
      private final @Nullable Output<Object> metadata;

    public Output<Object> metadata() {
        return this.metadata == null ? Codegen.empty() : this.metadata;
    }

    /**
     * The name of the resource group within the user&#39;s subscription. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Scope to which the standardAssignment applies - can be a subscription path or a resource group under that subscription
     * 
     */
    @Import(name="scope")
      private final @Nullable Output<String> scope;

    public Output<String> scope() {
        return this.scope == null ? Codegen.empty() : this.scope;
    }

    /**
     * A list of key value pairs that describe the resource.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    public AssignmentArgs(
        @Nullable Output<AssignmentPropertiesAdditionalDataArgs> additionalData,
        @Nullable Output<AssignedComponentItemArgs> assignedComponent,
        @Nullable Output<AssignedStandardItemArgs> assignedStandard,
        @Nullable Output<String> assignmentId,
        @Nullable Output<String> description,
        @Nullable Output<String> displayName,
        @Nullable Output<String> effect,
        @Nullable Output<String> expiresOn,
        @Nullable Output<String> kind,
        @Nullable Output<String> location,
        @Nullable Output<Object> metadata,
        Output<String> resourceGroupName,
        @Nullable Output<String> scope,
        @Nullable Output<Map<String,String>> tags) {
        this.additionalData = additionalData;
        this.assignedComponent = assignedComponent;
        this.assignedStandard = assignedStandard;
        this.assignmentId = assignmentId;
        this.description = description;
        this.displayName = displayName;
        this.effect = effect;
        this.expiresOn = expiresOn;
        this.kind = kind;
        this.location = location;
        this.metadata = metadata;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.scope = scope;
        this.tags = tags;
    }

    private AssignmentArgs() {
        this.additionalData = Codegen.empty();
        this.assignedComponent = Codegen.empty();
        this.assignedStandard = Codegen.empty();
        this.assignmentId = Codegen.empty();
        this.description = Codegen.empty();
        this.displayName = Codegen.empty();
        this.effect = Codegen.empty();
        this.expiresOn = Codegen.empty();
        this.kind = Codegen.empty();
        this.location = Codegen.empty();
        this.metadata = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.scope = Codegen.empty();
        this.tags = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AssignmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<AssignmentPropertiesAdditionalDataArgs> additionalData;
        private @Nullable Output<AssignedComponentItemArgs> assignedComponent;
        private @Nullable Output<AssignedStandardItemArgs> assignedStandard;
        private @Nullable Output<String> assignmentId;
        private @Nullable Output<String> description;
        private @Nullable Output<String> displayName;
        private @Nullable Output<String> effect;
        private @Nullable Output<String> expiresOn;
        private @Nullable Output<String> kind;
        private @Nullable Output<String> location;
        private @Nullable Output<Object> metadata;
        private Output<String> resourceGroupName;
        private @Nullable Output<String> scope;
        private @Nullable Output<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(AssignmentArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalData = defaults.additionalData;
    	      this.assignedComponent = defaults.assignedComponent;
    	      this.assignedStandard = defaults.assignedStandard;
    	      this.assignmentId = defaults.assignmentId;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.effect = defaults.effect;
    	      this.expiresOn = defaults.expiresOn;
    	      this.kind = defaults.kind;
    	      this.location = defaults.location;
    	      this.metadata = defaults.metadata;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.scope = defaults.scope;
    	      this.tags = defaults.tags;
        }

        public Builder additionalData(@Nullable Output<AssignmentPropertiesAdditionalDataArgs> additionalData) {
            this.additionalData = additionalData;
            return this;
        }
        public Builder additionalData(@Nullable AssignmentPropertiesAdditionalDataArgs additionalData) {
            this.additionalData = Codegen.ofNullable(additionalData);
            return this;
        }
        public Builder assignedComponent(@Nullable Output<AssignedComponentItemArgs> assignedComponent) {
            this.assignedComponent = assignedComponent;
            return this;
        }
        public Builder assignedComponent(@Nullable AssignedComponentItemArgs assignedComponent) {
            this.assignedComponent = Codegen.ofNullable(assignedComponent);
            return this;
        }
        public Builder assignedStandard(@Nullable Output<AssignedStandardItemArgs> assignedStandard) {
            this.assignedStandard = assignedStandard;
            return this;
        }
        public Builder assignedStandard(@Nullable AssignedStandardItemArgs assignedStandard) {
            this.assignedStandard = Codegen.ofNullable(assignedStandard);
            return this;
        }
        public Builder assignmentId(@Nullable Output<String> assignmentId) {
            this.assignmentId = assignmentId;
            return this;
        }
        public Builder assignmentId(@Nullable String assignmentId) {
            this.assignmentId = Codegen.ofNullable(assignmentId);
            return this;
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder displayName(@Nullable Output<String> displayName) {
            this.displayName = displayName;
            return this;
        }
        public Builder displayName(@Nullable String displayName) {
            this.displayName = Codegen.ofNullable(displayName);
            return this;
        }
        public Builder effect(@Nullable Output<String> effect) {
            this.effect = effect;
            return this;
        }
        public Builder effect(@Nullable String effect) {
            this.effect = Codegen.ofNullable(effect);
            return this;
        }
        public Builder expiresOn(@Nullable Output<String> expiresOn) {
            this.expiresOn = expiresOn;
            return this;
        }
        public Builder expiresOn(@Nullable String expiresOn) {
            this.expiresOn = Codegen.ofNullable(expiresOn);
            return this;
        }
        public Builder kind(@Nullable Output<String> kind) {
            this.kind = kind;
            return this;
        }
        public Builder kind(@Nullable String kind) {
            this.kind = Codegen.ofNullable(kind);
            return this;
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Codegen.ofNullable(location);
            return this;
        }
        public Builder metadata(@Nullable Output<Object> metadata) {
            this.metadata = metadata;
            return this;
        }
        public Builder metadata(@Nullable Object metadata) {
            this.metadata = Codegen.ofNullable(metadata);
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder scope(@Nullable Output<String> scope) {
            this.scope = scope;
            return this;
        }
        public Builder scope(@Nullable String scope) {
            this.scope = Codegen.ofNullable(scope);
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }        public AssignmentArgs build() {
            return new AssignmentArgs(additionalData, assignedComponent, assignedStandard, assignmentId, description, displayName, effect, expiresOn, kind, location, metadata, resourceGroupName, scope, tags);
        }
    }
}
