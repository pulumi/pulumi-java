// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.security;

import com.pulumi.azurenative.security.inputs.AssignedComponentItemArgs;
import com.pulumi.azurenative.security.inputs.AssignedStandardItemArgs;
import com.pulumi.azurenative.security.inputs.AssignmentPropertiesAdditionalDataArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AssignmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final AssignmentArgs Empty = new AssignmentArgs();

    /**
     * Additional data about the assignment
     * 
     */
    @Import(name="additionalData")
    private @Nullable Output<AssignmentPropertiesAdditionalDataArgs> additionalData;

    public Optional<Output<AssignmentPropertiesAdditionalDataArgs>> additionalData() {
        return Optional.ofNullable(this.additionalData);
    }

    /**
     * Component item with key as applied to this standard assignment over the given scope
     * 
     */
    @Import(name="assignedComponent")
    private @Nullable Output<AssignedComponentItemArgs> assignedComponent;

    public Optional<Output<AssignedComponentItemArgs>> assignedComponent() {
        return Optional.ofNullable(this.assignedComponent);
    }

    /**
     * Standard item with key as applied to this standard assignment over the given scope
     * 
     */
    @Import(name="assignedStandard")
    private @Nullable Output<AssignedStandardItemArgs> assignedStandard;

    public Optional<Output<AssignedStandardItemArgs>> assignedStandard() {
        return Optional.ofNullable(this.assignedStandard);
    }

    /**
     * The security assignment key - unique key for the standard assignment
     * 
     */
    @Import(name="assignmentId")
    private @Nullable Output<String> assignmentId;

    public Optional<Output<String>> assignmentId() {
        return Optional.ofNullable(this.assignmentId);
    }

    /**
     * description of the standardAssignment
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * display name of the standardAssignment
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * expected effect of this assignment (Disable/Exempt/etc)
     * 
     */
    @Import(name="effect")
    private @Nullable Output<String> effect;

    public Optional<Output<String>> effect() {
        return Optional.ofNullable(this.effect);
    }

    /**
     * Expiration date of this assignment as a full ISO date
     * 
     */
    @Import(name="expiresOn")
    private @Nullable Output<String> expiresOn;

    public Optional<Output<String>> expiresOn() {
        return Optional.ofNullable(this.expiresOn);
    }

    /**
     * Kind of the resource
     * 
     */
    @Import(name="kind")
    private @Nullable Output<String> kind;

    public Optional<Output<String>> kind() {
        return Optional.ofNullable(this.kind);
    }

    /**
     * Location where the resource is stored
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The assignment metadata. Metadata is an open ended object and is typically a collection of key value pairs.
     * 
     */
    @Import(name="metadata")
    private @Nullable Output<Object> metadata;

    public Optional<Output<Object>> metadata() {
        return Optional.ofNullable(this.metadata);
    }

    /**
     * The name of the resource group within the user&#39;s subscription. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Scope to which the standardAssignment applies - can be a subscription path or a resource group under that subscription
     * 
     */
    @Import(name="scope")
    private @Nullable Output<String> scope;

    public Optional<Output<String>> scope() {
        return Optional.ofNullable(this.scope);
    }

    /**
     * A list of key value pairs that describe the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private AssignmentArgs() {}

    private AssignmentArgs(AssignmentArgs $) {
        this.additionalData = $.additionalData;
        this.assignedComponent = $.assignedComponent;
        this.assignedStandard = $.assignedStandard;
        this.assignmentId = $.assignmentId;
        this.description = $.description;
        this.displayName = $.displayName;
        this.effect = $.effect;
        this.expiresOn = $.expiresOn;
        this.kind = $.kind;
        this.location = $.location;
        this.metadata = $.metadata;
        this.resourceGroupName = $.resourceGroupName;
        this.scope = $.scope;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AssignmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AssignmentArgs $;

        public Builder() {
            $ = new AssignmentArgs();
        }

        public Builder(AssignmentArgs defaults) {
            $ = new AssignmentArgs(Objects.requireNonNull(defaults));
        }

        public Builder additionalData(@Nullable Output<AssignmentPropertiesAdditionalDataArgs> additionalData) {
            $.additionalData = additionalData;
            return this;
        }

        public Builder additionalData(AssignmentPropertiesAdditionalDataArgs additionalData) {
            return additionalData(Output.of(additionalData));
        }

        public Builder assignedComponent(@Nullable Output<AssignedComponentItemArgs> assignedComponent) {
            $.assignedComponent = assignedComponent;
            return this;
        }

        public Builder assignedComponent(AssignedComponentItemArgs assignedComponent) {
            return assignedComponent(Output.of(assignedComponent));
        }

        public Builder assignedStandard(@Nullable Output<AssignedStandardItemArgs> assignedStandard) {
            $.assignedStandard = assignedStandard;
            return this;
        }

        public Builder assignedStandard(AssignedStandardItemArgs assignedStandard) {
            return assignedStandard(Output.of(assignedStandard));
        }

        public Builder assignmentId(@Nullable Output<String> assignmentId) {
            $.assignmentId = assignmentId;
            return this;
        }

        public Builder assignmentId(String assignmentId) {
            return assignmentId(Output.of(assignmentId));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder effect(@Nullable Output<String> effect) {
            $.effect = effect;
            return this;
        }

        public Builder effect(String effect) {
            return effect(Output.of(effect));
        }

        public Builder expiresOn(@Nullable Output<String> expiresOn) {
            $.expiresOn = expiresOn;
            return this;
        }

        public Builder expiresOn(String expiresOn) {
            return expiresOn(Output.of(expiresOn));
        }

        public Builder kind(@Nullable Output<String> kind) {
            $.kind = kind;
            return this;
        }

        public Builder kind(String kind) {
            return kind(Output.of(kind));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder metadata(@Nullable Output<Object> metadata) {
            $.metadata = metadata;
            return this;
        }

        public Builder metadata(Object metadata) {
            return metadata(Output.of(metadata));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder scope(@Nullable Output<String> scope) {
            $.scope = scope;
            return this;
        }

        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public AssignmentArgs build() {
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
