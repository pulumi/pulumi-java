// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.security.inputs;

import com.pulumi.azurenative.security.inputs.DefenderForContainersAwsOfferingCloudWatchToKinesisArgs;
import com.pulumi.azurenative.security.inputs.DefenderForContainersAwsOfferingKinesisToS3Args;
import com.pulumi.azurenative.security.inputs.DefenderForContainersAwsOfferingKubernetesScubaReaderArgs;
import com.pulumi.azurenative.security.inputs.DefenderForContainersAwsOfferingKubernetesServiceArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The Defender for Containers AWS offering configurations
 * 
 */
public final class DefenderForContainersAwsOfferingArgs extends com.pulumi.resources.ResourceArgs {

    public static final DefenderForContainersAwsOfferingArgs Empty = new DefenderForContainersAwsOfferingArgs();

    /**
     * The cloudwatch to kinesis connection configuration
     * 
     */
    @Import(name="cloudWatchToKinesis")
    private @Nullable Output<DefenderForContainersAwsOfferingCloudWatchToKinesisArgs> cloudWatchToKinesis;

    /**
     * @return The cloudwatch to kinesis connection configuration
     * 
     */
    public Optional<Output<DefenderForContainersAwsOfferingCloudWatchToKinesisArgs>> cloudWatchToKinesis() {
        return Optional.ofNullable(this.cloudWatchToKinesis);
    }

    /**
     * The kinesis to s3 connection configuration
     * 
     */
    @Import(name="kinesisToS3")
    private @Nullable Output<DefenderForContainersAwsOfferingKinesisToS3Args> kinesisToS3;

    /**
     * @return The kinesis to s3 connection configuration
     * 
     */
    public Optional<Output<DefenderForContainersAwsOfferingKinesisToS3Args>> kinesisToS3() {
        return Optional.ofNullable(this.kinesisToS3);
    }

    /**
     * The kubernetes to scuba connection configuration
     * 
     */
    @Import(name="kubernetesScubaReader")
    private @Nullable Output<DefenderForContainersAwsOfferingKubernetesScubaReaderArgs> kubernetesScubaReader;

    /**
     * @return The kubernetes to scuba connection configuration
     * 
     */
    public Optional<Output<DefenderForContainersAwsOfferingKubernetesScubaReaderArgs>> kubernetesScubaReader() {
        return Optional.ofNullable(this.kubernetesScubaReader);
    }

    /**
     * The kubernetes service connection configuration
     * 
     */
    @Import(name="kubernetesService")
    private @Nullable Output<DefenderForContainersAwsOfferingKubernetesServiceArgs> kubernetesService;

    /**
     * @return The kubernetes service connection configuration
     * 
     */
    public Optional<Output<DefenderForContainersAwsOfferingKubernetesServiceArgs>> kubernetesService() {
        return Optional.ofNullable(this.kubernetesService);
    }

    /**
     * The type of the security offering.
     * Expected value is &#39;DefenderForContainersAws&#39;.
     * 
     */
    @Import(name="offeringType", required=true)
    private Output<String> offeringType;

    /**
     * @return The type of the security offering.
     * Expected value is &#39;DefenderForContainersAws&#39;.
     * 
     */
    public Output<String> offeringType() {
        return this.offeringType;
    }

    private DefenderForContainersAwsOfferingArgs() {}

    private DefenderForContainersAwsOfferingArgs(DefenderForContainersAwsOfferingArgs $) {
        this.cloudWatchToKinesis = $.cloudWatchToKinesis;
        this.kinesisToS3 = $.kinesisToS3;
        this.kubernetesScubaReader = $.kubernetesScubaReader;
        this.kubernetesService = $.kubernetesService;
        this.offeringType = $.offeringType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DefenderForContainersAwsOfferingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DefenderForContainersAwsOfferingArgs $;

        public Builder() {
            $ = new DefenderForContainersAwsOfferingArgs();
        }

        public Builder(DefenderForContainersAwsOfferingArgs defaults) {
            $ = new DefenderForContainersAwsOfferingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cloudWatchToKinesis The cloudwatch to kinesis connection configuration
         * 
         * @return builder
         * 
         */
        public Builder cloudWatchToKinesis(@Nullable Output<DefenderForContainersAwsOfferingCloudWatchToKinesisArgs> cloudWatchToKinesis) {
            $.cloudWatchToKinesis = cloudWatchToKinesis;
            return this;
        }

        /**
         * @param cloudWatchToKinesis The cloudwatch to kinesis connection configuration
         * 
         * @return builder
         * 
         */
        public Builder cloudWatchToKinesis(DefenderForContainersAwsOfferingCloudWatchToKinesisArgs cloudWatchToKinesis) {
            return cloudWatchToKinesis(Output.of(cloudWatchToKinesis));
        }

        /**
         * @param kinesisToS3 The kinesis to s3 connection configuration
         * 
         * @return builder
         * 
         */
        public Builder kinesisToS3(@Nullable Output<DefenderForContainersAwsOfferingKinesisToS3Args> kinesisToS3) {
            $.kinesisToS3 = kinesisToS3;
            return this;
        }

        /**
         * @param kinesisToS3 The kinesis to s3 connection configuration
         * 
         * @return builder
         * 
         */
        public Builder kinesisToS3(DefenderForContainersAwsOfferingKinesisToS3Args kinesisToS3) {
            return kinesisToS3(Output.of(kinesisToS3));
        }

        /**
         * @param kubernetesScubaReader The kubernetes to scuba connection configuration
         * 
         * @return builder
         * 
         */
        public Builder kubernetesScubaReader(@Nullable Output<DefenderForContainersAwsOfferingKubernetesScubaReaderArgs> kubernetesScubaReader) {
            $.kubernetesScubaReader = kubernetesScubaReader;
            return this;
        }

        /**
         * @param kubernetesScubaReader The kubernetes to scuba connection configuration
         * 
         * @return builder
         * 
         */
        public Builder kubernetesScubaReader(DefenderForContainersAwsOfferingKubernetesScubaReaderArgs kubernetesScubaReader) {
            return kubernetesScubaReader(Output.of(kubernetesScubaReader));
        }

        /**
         * @param kubernetesService The kubernetes service connection configuration
         * 
         * @return builder
         * 
         */
        public Builder kubernetesService(@Nullable Output<DefenderForContainersAwsOfferingKubernetesServiceArgs> kubernetesService) {
            $.kubernetesService = kubernetesService;
            return this;
        }

        /**
         * @param kubernetesService The kubernetes service connection configuration
         * 
         * @return builder
         * 
         */
        public Builder kubernetesService(DefenderForContainersAwsOfferingKubernetesServiceArgs kubernetesService) {
            return kubernetesService(Output.of(kubernetesService));
        }

        /**
         * @param offeringType The type of the security offering.
         * Expected value is &#39;DefenderForContainersAws&#39;.
         * 
         * @return builder
         * 
         */
        public Builder offeringType(Output<String> offeringType) {
            $.offeringType = offeringType;
            return this;
        }

        /**
         * @param offeringType The type of the security offering.
         * Expected value is &#39;DefenderForContainersAws&#39;.
         * 
         * @return builder
         * 
         */
        public Builder offeringType(String offeringType) {
            return offeringType(Output.of(offeringType));
        }

        public DefenderForContainersAwsOfferingArgs build() {
            $.offeringType = Codegen.stringProp("offeringType").output().arg($.offeringType).require();
            return $;
        }
    }

}
