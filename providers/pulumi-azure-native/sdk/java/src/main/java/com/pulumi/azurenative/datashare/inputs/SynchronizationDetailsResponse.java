// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datashare.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


/**
 * Synchronization details at data set level
 * 
 */
public final class SynchronizationDetailsResponse extends com.pulumi.resources.InvokeArgs {

    public static final SynchronizationDetailsResponse Empty = new SynchronizationDetailsResponse();

    /**
     * Id of data set
     * 
     */
    @Import(name="dataSetId", required=true)
    private String dataSetId;

    public String dataSetId() {
        return this.dataSetId;
    }

    /**
     * Type of the data set
     * 
     */
    @Import(name="dataSetType", required=true)
    private String dataSetType;

    public String dataSetType() {
        return this.dataSetType;
    }

    /**
     * Duration of data set level copy
     * 
     */
    @Import(name="durationMs", required=true)
    private Integer durationMs;

    public Integer durationMs() {
        return this.durationMs;
    }

    /**
     * End time of data set level copy
     * 
     */
    @Import(name="endTime", required=true)
    private String endTime;

    public String endTime() {
        return this.endTime;
    }

    /**
     * The number of files read from the source data set
     * 
     */
    @Import(name="filesRead", required=true)
    private Double filesRead;

    public Double filesRead() {
        return this.filesRead;
    }

    /**
     * The number of files written into the sink data set
     * 
     */
    @Import(name="filesWritten", required=true)
    private Double filesWritten;

    public Double filesWritten() {
        return this.filesWritten;
    }

    /**
     * Error message if any
     * 
     */
    @Import(name="message", required=true)
    private String message;

    public String message() {
        return this.message;
    }

    /**
     * Name of the data set
     * 
     */
    @Import(name="name", required=true)
    private String name;

    public String name() {
        return this.name;
    }

    /**
     * The number of files copied into the sink data set
     * 
     */
    @Import(name="rowsCopied", required=true)
    private Double rowsCopied;

    public Double rowsCopied() {
        return this.rowsCopied;
    }

    /**
     * The number of rows read from the source data set.
     * 
     */
    @Import(name="rowsRead", required=true)
    private Double rowsRead;

    public Double rowsRead() {
        return this.rowsRead;
    }

    /**
     * The size of the data read from the source data set in bytes
     * 
     */
    @Import(name="sizeRead", required=true)
    private Double sizeRead;

    public Double sizeRead() {
        return this.sizeRead;
    }

    /**
     * The size of the data written into the sink data set in bytes
     * 
     */
    @Import(name="sizeWritten", required=true)
    private Double sizeWritten;

    public Double sizeWritten() {
        return this.sizeWritten;
    }

    /**
     * Start time of data set level copy
     * 
     */
    @Import(name="startTime", required=true)
    private String startTime;

    public String startTime() {
        return this.startTime;
    }

    /**
     * Raw Status
     * 
     */
    @Import(name="status", required=true)
    private String status;

    public String status() {
        return this.status;
    }

    /**
     * The vCore units consumed for the data set synchronization
     * 
     */
    @Import(name="vCore", required=true)
    private Double vCore;

    public Double vCore() {
        return this.vCore;
    }

    private SynchronizationDetailsResponse() {}

    private SynchronizationDetailsResponse(SynchronizationDetailsResponse $) {
        this.dataSetId = $.dataSetId;
        this.dataSetType = $.dataSetType;
        this.durationMs = $.durationMs;
        this.endTime = $.endTime;
        this.filesRead = $.filesRead;
        this.filesWritten = $.filesWritten;
        this.message = $.message;
        this.name = $.name;
        this.rowsCopied = $.rowsCopied;
        this.rowsRead = $.rowsRead;
        this.sizeRead = $.sizeRead;
        this.sizeWritten = $.sizeWritten;
        this.startTime = $.startTime;
        this.status = $.status;
        this.vCore = $.vCore;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SynchronizationDetailsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SynchronizationDetailsResponse $;

        public Builder() {
            $ = new SynchronizationDetailsResponse();
        }

        public Builder(SynchronizationDetailsResponse defaults) {
            $ = new SynchronizationDetailsResponse(Objects.requireNonNull(defaults));
        }

        public Builder dataSetId(String dataSetId) {
            $.dataSetId = dataSetId;
            return this;
        }

        public Builder dataSetType(String dataSetType) {
            $.dataSetType = dataSetType;
            return this;
        }

        public Builder durationMs(Integer durationMs) {
            $.durationMs = durationMs;
            return this;
        }

        public Builder endTime(String endTime) {
            $.endTime = endTime;
            return this;
        }

        public Builder filesRead(Double filesRead) {
            $.filesRead = filesRead;
            return this;
        }

        public Builder filesWritten(Double filesWritten) {
            $.filesWritten = filesWritten;
            return this;
        }

        public Builder message(String message) {
            $.message = message;
            return this;
        }

        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public Builder rowsCopied(Double rowsCopied) {
            $.rowsCopied = rowsCopied;
            return this;
        }

        public Builder rowsRead(Double rowsRead) {
            $.rowsRead = rowsRead;
            return this;
        }

        public Builder sizeRead(Double sizeRead) {
            $.sizeRead = sizeRead;
            return this;
        }

        public Builder sizeWritten(Double sizeWritten) {
            $.sizeWritten = sizeWritten;
            return this;
        }

        public Builder startTime(String startTime) {
            $.startTime = startTime;
            return this;
        }

        public Builder status(String status) {
            $.status = status;
            return this;
        }

        public Builder vCore(Double vCore) {
            $.vCore = vCore;
            return this;
        }

        public SynchronizationDetailsResponse build() {
            $.dataSetId = Objects.requireNonNull($.dataSetId, "expected parameter 'dataSetId' to be non-null");
            $.dataSetType = Objects.requireNonNull($.dataSetType, "expected parameter 'dataSetType' to be non-null");
            $.durationMs = Objects.requireNonNull($.durationMs, "expected parameter 'durationMs' to be non-null");
            $.endTime = Objects.requireNonNull($.endTime, "expected parameter 'endTime' to be non-null");
            $.filesRead = Objects.requireNonNull($.filesRead, "expected parameter 'filesRead' to be non-null");
            $.filesWritten = Objects.requireNonNull($.filesWritten, "expected parameter 'filesWritten' to be non-null");
            $.message = Objects.requireNonNull($.message, "expected parameter 'message' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.rowsCopied = Objects.requireNonNull($.rowsCopied, "expected parameter 'rowsCopied' to be non-null");
            $.rowsRead = Objects.requireNonNull($.rowsRead, "expected parameter 'rowsRead' to be non-null");
            $.sizeRead = Objects.requireNonNull($.sizeRead, "expected parameter 'sizeRead' to be non-null");
            $.sizeWritten = Objects.requireNonNull($.sizeWritten, "expected parameter 'sizeWritten' to be non-null");
            $.startTime = Objects.requireNonNull($.startTime, "expected parameter 'startTime' to be non-null");
            $.status = Objects.requireNonNull($.status, "expected parameter 'status' to be non-null");
            $.vCore = Objects.requireNonNull($.vCore, "expected parameter 'vCore' to be non-null");
            return $;
        }
    }

}
