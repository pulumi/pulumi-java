// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datashare.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


/**
 * Synchronization details at data set level
 * 
 */
public final class SynchronizationDetailsResponse extends com.pulumi.resources.InvokeArgs {

    public static final SynchronizationDetailsResponse Empty = new SynchronizationDetailsResponse();

    /**
     * Id of data set
     * 
     */
    @Import(name="dataSetId", required=true)
      private final String dataSetId;

    public String dataSetId() {
        return this.dataSetId;
    }

    /**
     * Type of the data set
     * 
     */
    @Import(name="dataSetType", required=true)
      private final String dataSetType;

    public String dataSetType() {
        return this.dataSetType;
    }

    /**
     * Duration of data set level copy
     * 
     */
    @Import(name="durationMs", required=true)
      private final Integer durationMs;

    public Integer durationMs() {
        return this.durationMs;
    }

    /**
     * End time of data set level copy
     * 
     */
    @Import(name="endTime", required=true)
      private final String endTime;

    public String endTime() {
        return this.endTime;
    }

    /**
     * The number of files read from the source data set
     * 
     */
    @Import(name="filesRead", required=true)
      private final Double filesRead;

    public Double filesRead() {
        return this.filesRead;
    }

    /**
     * The number of files written into the sink data set
     * 
     */
    @Import(name="filesWritten", required=true)
      private final Double filesWritten;

    public Double filesWritten() {
        return this.filesWritten;
    }

    /**
     * Error message if any
     * 
     */
    @Import(name="message", required=true)
      private final String message;

    public String message() {
        return this.message;
    }

    /**
     * Name of the data set
     * 
     */
    @Import(name="name", required=true)
      private final String name;

    public String name() {
        return this.name;
    }

    /**
     * The number of files copied into the sink data set
     * 
     */
    @Import(name="rowsCopied", required=true)
      private final Double rowsCopied;

    public Double rowsCopied() {
        return this.rowsCopied;
    }

    /**
     * The number of rows read from the source data set.
     * 
     */
    @Import(name="rowsRead", required=true)
      private final Double rowsRead;

    public Double rowsRead() {
        return this.rowsRead;
    }

    /**
     * The size of the data read from the source data set in bytes
     * 
     */
    @Import(name="sizeRead", required=true)
      private final Double sizeRead;

    public Double sizeRead() {
        return this.sizeRead;
    }

    /**
     * The size of the data written into the sink data set in bytes
     * 
     */
    @Import(name="sizeWritten", required=true)
      private final Double sizeWritten;

    public Double sizeWritten() {
        return this.sizeWritten;
    }

    /**
     * Start time of data set level copy
     * 
     */
    @Import(name="startTime", required=true)
      private final String startTime;

    public String startTime() {
        return this.startTime;
    }

    /**
     * Raw Status
     * 
     */
    @Import(name="status", required=true)
      private final String status;

    public String status() {
        return this.status;
    }

    /**
     * The vCore units consumed for the data set synchronization
     * 
     */
    @Import(name="vCore", required=true)
      private final Double vCore;

    public Double vCore() {
        return this.vCore;
    }

    public SynchronizationDetailsResponse(
        String dataSetId,
        String dataSetType,
        Integer durationMs,
        String endTime,
        Double filesRead,
        Double filesWritten,
        String message,
        String name,
        Double rowsCopied,
        Double rowsRead,
        Double sizeRead,
        Double sizeWritten,
        String startTime,
        String status,
        Double vCore) {
        this.dataSetId = Objects.requireNonNull(dataSetId, "expected parameter 'dataSetId' to be non-null");
        this.dataSetType = Objects.requireNonNull(dataSetType, "expected parameter 'dataSetType' to be non-null");
        this.durationMs = Objects.requireNonNull(durationMs, "expected parameter 'durationMs' to be non-null");
        this.endTime = Objects.requireNonNull(endTime, "expected parameter 'endTime' to be non-null");
        this.filesRead = Objects.requireNonNull(filesRead, "expected parameter 'filesRead' to be non-null");
        this.filesWritten = Objects.requireNonNull(filesWritten, "expected parameter 'filesWritten' to be non-null");
        this.message = Objects.requireNonNull(message, "expected parameter 'message' to be non-null");
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.rowsCopied = Objects.requireNonNull(rowsCopied, "expected parameter 'rowsCopied' to be non-null");
        this.rowsRead = Objects.requireNonNull(rowsRead, "expected parameter 'rowsRead' to be non-null");
        this.sizeRead = Objects.requireNonNull(sizeRead, "expected parameter 'sizeRead' to be non-null");
        this.sizeWritten = Objects.requireNonNull(sizeWritten, "expected parameter 'sizeWritten' to be non-null");
        this.startTime = Objects.requireNonNull(startTime, "expected parameter 'startTime' to be non-null");
        this.status = Objects.requireNonNull(status, "expected parameter 'status' to be non-null");
        this.vCore = Objects.requireNonNull(vCore, "expected parameter 'vCore' to be non-null");
    }

    private SynchronizationDetailsResponse() {
        this.dataSetId = null;
        this.dataSetType = null;
        this.durationMs = null;
        this.endTime = null;
        this.filesRead = null;
        this.filesWritten = null;
        this.message = null;
        this.name = null;
        this.rowsCopied = null;
        this.rowsRead = null;
        this.sizeRead = null;
        this.sizeWritten = null;
        this.startTime = null;
        this.status = null;
        this.vCore = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SynchronizationDetailsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String dataSetId;
        private String dataSetType;
        private Integer durationMs;
        private String endTime;
        private Double filesRead;
        private Double filesWritten;
        private String message;
        private String name;
        private Double rowsCopied;
        private Double rowsRead;
        private Double sizeRead;
        private Double sizeWritten;
        private String startTime;
        private String status;
        private Double vCore;

        public Builder() {
    	      // Empty
        }

        public Builder(SynchronizationDetailsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dataSetId = defaults.dataSetId;
    	      this.dataSetType = defaults.dataSetType;
    	      this.durationMs = defaults.durationMs;
    	      this.endTime = defaults.endTime;
    	      this.filesRead = defaults.filesRead;
    	      this.filesWritten = defaults.filesWritten;
    	      this.message = defaults.message;
    	      this.name = defaults.name;
    	      this.rowsCopied = defaults.rowsCopied;
    	      this.rowsRead = defaults.rowsRead;
    	      this.sizeRead = defaults.sizeRead;
    	      this.sizeWritten = defaults.sizeWritten;
    	      this.startTime = defaults.startTime;
    	      this.status = defaults.status;
    	      this.vCore = defaults.vCore;
        }

        public Builder dataSetId(String dataSetId) {
            this.dataSetId = Objects.requireNonNull(dataSetId);
            return this;
        }
        public Builder dataSetType(String dataSetType) {
            this.dataSetType = Objects.requireNonNull(dataSetType);
            return this;
        }
        public Builder durationMs(Integer durationMs) {
            this.durationMs = Objects.requireNonNull(durationMs);
            return this;
        }
        public Builder endTime(String endTime) {
            this.endTime = Objects.requireNonNull(endTime);
            return this;
        }
        public Builder filesRead(Double filesRead) {
            this.filesRead = Objects.requireNonNull(filesRead);
            return this;
        }
        public Builder filesWritten(Double filesWritten) {
            this.filesWritten = Objects.requireNonNull(filesWritten);
            return this;
        }
        public Builder message(String message) {
            this.message = Objects.requireNonNull(message);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder rowsCopied(Double rowsCopied) {
            this.rowsCopied = Objects.requireNonNull(rowsCopied);
            return this;
        }
        public Builder rowsRead(Double rowsRead) {
            this.rowsRead = Objects.requireNonNull(rowsRead);
            return this;
        }
        public Builder sizeRead(Double sizeRead) {
            this.sizeRead = Objects.requireNonNull(sizeRead);
            return this;
        }
        public Builder sizeWritten(Double sizeWritten) {
            this.sizeWritten = Objects.requireNonNull(sizeWritten);
            return this;
        }
        public Builder startTime(String startTime) {
            this.startTime = Objects.requireNonNull(startTime);
            return this;
        }
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        public Builder vCore(Double vCore) {
            this.vCore = Objects.requireNonNull(vCore);
            return this;
        }        public SynchronizationDetailsResponse build() {
            return new SynchronizationDetailsResponse(dataSetId, dataSetType, durationMs, endTime, filesRead, filesWritten, message, name, rowsCopied, rowsRead, sizeRead, sizeWritten, startTime, status, vCore);
        }
    }
}
