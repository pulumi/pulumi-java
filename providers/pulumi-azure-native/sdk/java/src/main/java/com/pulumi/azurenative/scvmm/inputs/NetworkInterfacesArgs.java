// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.scvmm.inputs;

import com.pulumi.azurenative.scvmm.enums.AllocationMethod;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Network Interface model
 * 
 */
public final class NetworkInterfacesArgs extends com.pulumi.resources.ResourceArgs {

    public static final NetworkInterfacesArgs Empty = new NetworkInterfacesArgs();

    /**
     * Gets or sets the ipv4 address type.
     * 
     */
    @Import(name="ipv4AddressType")
    private @Nullable Output<Either<String,AllocationMethod>> ipv4AddressType;

    /**
     * @return Gets or sets the ipv4 address type.
     * 
     */
    public Optional<Output<Either<String,AllocationMethod>>> ipv4AddressType() {
        return Optional.ofNullable(this.ipv4AddressType);
    }

    /**
     * Gets or sets the ipv6 address type.
     * 
     */
    @Import(name="ipv6AddressType")
    private @Nullable Output<Either<String,AllocationMethod>> ipv6AddressType;

    /**
     * @return Gets or sets the ipv6 address type.
     * 
     */
    public Optional<Output<Either<String,AllocationMethod>>> ipv6AddressType() {
        return Optional.ofNullable(this.ipv6AddressType);
    }

    /**
     * Gets or sets the nic MAC address.
     * 
     */
    @Import(name="macAddress")
    private @Nullable Output<String> macAddress;

    /**
     * @return Gets or sets the nic MAC address.
     * 
     */
    public Optional<Output<String>> macAddress() {
        return Optional.ofNullable(this.macAddress);
    }

    /**
     * Gets or sets the mac address type.
     * 
     */
    @Import(name="macAddressType")
    private @Nullable Output<Either<String,AllocationMethod>> macAddressType;

    /**
     * @return Gets or sets the mac address type.
     * 
     */
    public Optional<Output<Either<String,AllocationMethod>>> macAddressType() {
        return Optional.ofNullable(this.macAddressType);
    }

    /**
     * Gets or sets the name of the network interface.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Gets or sets the name of the network interface.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Gets or sets the nic id.
     * 
     */
    @Import(name="nicId")
    private @Nullable Output<String> nicId;

    /**
     * @return Gets or sets the nic id.
     * 
     */
    public Optional<Output<String>> nicId() {
        return Optional.ofNullable(this.nicId);
    }

    /**
     * Gets or sets the ARM Id of the Microsoft.ScVmm/virtualNetwork resource to connect the nic.
     * 
     */
    @Import(name="virtualNetworkId")
    private @Nullable Output<String> virtualNetworkId;

    /**
     * @return Gets or sets the ARM Id of the Microsoft.ScVmm/virtualNetwork resource to connect the nic.
     * 
     */
    public Optional<Output<String>> virtualNetworkId() {
        return Optional.ofNullable(this.virtualNetworkId);
    }

    private NetworkInterfacesArgs() {}

    private NetworkInterfacesArgs(NetworkInterfacesArgs $) {
        this.ipv4AddressType = $.ipv4AddressType;
        this.ipv6AddressType = $.ipv6AddressType;
        this.macAddress = $.macAddress;
        this.macAddressType = $.macAddressType;
        this.name = $.name;
        this.nicId = $.nicId;
        this.virtualNetworkId = $.virtualNetworkId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkInterfacesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkInterfacesArgs $;

        public Builder() {
            $ = new NetworkInterfacesArgs();
        }

        public Builder(NetworkInterfacesArgs defaults) {
            $ = new NetworkInterfacesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param ipv4AddressType Gets or sets the ipv4 address type.
         * 
         * @return builder
         * 
         */
        public Builder ipv4AddressType(@Nullable Output<Either<String,AllocationMethod>> ipv4AddressType) {
            $.ipv4AddressType = ipv4AddressType;
            return this;
        }

        /**
         * @param ipv4AddressType Gets or sets the ipv4 address type.
         * 
         * @return builder
         * 
         */
        public Builder ipv4AddressType(Either<String,AllocationMethod> ipv4AddressType) {
            return ipv4AddressType(Output.of(ipv4AddressType));
        }

        /**
         * @param ipv4AddressType Gets or sets the ipv4 address type.
         * 
         * @return builder
         * 
         */
        public Builder ipv4AddressType(String ipv4AddressType) {
            return ipv4AddressType(Either.ofLeft(ipv4AddressType));
        }

        /**
         * @param ipv4AddressType Gets or sets the ipv4 address type.
         * 
         * @return builder
         * 
         */
        public Builder ipv4AddressType(AllocationMethod ipv4AddressType) {
            return ipv4AddressType(Either.ofRight(ipv4AddressType));
        }

        /**
         * @param ipv6AddressType Gets or sets the ipv6 address type.
         * 
         * @return builder
         * 
         */
        public Builder ipv6AddressType(@Nullable Output<Either<String,AllocationMethod>> ipv6AddressType) {
            $.ipv6AddressType = ipv6AddressType;
            return this;
        }

        /**
         * @param ipv6AddressType Gets or sets the ipv6 address type.
         * 
         * @return builder
         * 
         */
        public Builder ipv6AddressType(Either<String,AllocationMethod> ipv6AddressType) {
            return ipv6AddressType(Output.of(ipv6AddressType));
        }

        /**
         * @param ipv6AddressType Gets or sets the ipv6 address type.
         * 
         * @return builder
         * 
         */
        public Builder ipv6AddressType(String ipv6AddressType) {
            return ipv6AddressType(Either.ofLeft(ipv6AddressType));
        }

        /**
         * @param ipv6AddressType Gets or sets the ipv6 address type.
         * 
         * @return builder
         * 
         */
        public Builder ipv6AddressType(AllocationMethod ipv6AddressType) {
            return ipv6AddressType(Either.ofRight(ipv6AddressType));
        }

        /**
         * @param macAddress Gets or sets the nic MAC address.
         * 
         * @return builder
         * 
         */
        public Builder macAddress(@Nullable Output<String> macAddress) {
            $.macAddress = macAddress;
            return this;
        }

        /**
         * @param macAddress Gets or sets the nic MAC address.
         * 
         * @return builder
         * 
         */
        public Builder macAddress(String macAddress) {
            return macAddress(Output.of(macAddress));
        }

        /**
         * @param macAddressType Gets or sets the mac address type.
         * 
         * @return builder
         * 
         */
        public Builder macAddressType(@Nullable Output<Either<String,AllocationMethod>> macAddressType) {
            $.macAddressType = macAddressType;
            return this;
        }

        /**
         * @param macAddressType Gets or sets the mac address type.
         * 
         * @return builder
         * 
         */
        public Builder macAddressType(Either<String,AllocationMethod> macAddressType) {
            return macAddressType(Output.of(macAddressType));
        }

        /**
         * @param macAddressType Gets or sets the mac address type.
         * 
         * @return builder
         * 
         */
        public Builder macAddressType(String macAddressType) {
            return macAddressType(Either.ofLeft(macAddressType));
        }

        /**
         * @param macAddressType Gets or sets the mac address type.
         * 
         * @return builder
         * 
         */
        public Builder macAddressType(AllocationMethod macAddressType) {
            return macAddressType(Either.ofRight(macAddressType));
        }

        /**
         * @param name Gets or sets the name of the network interface.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Gets or sets the name of the network interface.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nicId Gets or sets the nic id.
         * 
         * @return builder
         * 
         */
        public Builder nicId(@Nullable Output<String> nicId) {
            $.nicId = nicId;
            return this;
        }

        /**
         * @param nicId Gets or sets the nic id.
         * 
         * @return builder
         * 
         */
        public Builder nicId(String nicId) {
            return nicId(Output.of(nicId));
        }

        /**
         * @param virtualNetworkId Gets or sets the ARM Id of the Microsoft.ScVmm/virtualNetwork resource to connect the nic.
         * 
         * @return builder
         * 
         */
        public Builder virtualNetworkId(@Nullable Output<String> virtualNetworkId) {
            $.virtualNetworkId = virtualNetworkId;
            return this;
        }

        /**
         * @param virtualNetworkId Gets or sets the ARM Id of the Microsoft.ScVmm/virtualNetwork resource to connect the nic.
         * 
         * @return builder
         * 
         */
        public Builder virtualNetworkId(String virtualNetworkId) {
            return virtualNetworkId(Output.of(virtualNetworkId));
        }

        public NetworkInterfacesArgs build() {
            return $;
        }
    }

}
