// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.resources;

import com.pulumi.azurenative.Utilities;
import com.pulumi.azurenative.resources.AzureCliScriptArgs;
import com.pulumi.azurenative.resources.outputs.ContainerConfigurationResponse;
import com.pulumi.azurenative.resources.outputs.EnvironmentVariableResponse;
import com.pulumi.azurenative.resources.outputs.ManagedServiceIdentityResponse;
import com.pulumi.azurenative.resources.outputs.ScriptStatusResponse;
import com.pulumi.azurenative.resources.outputs.StorageAccountConfigurationResponse;
import com.pulumi.azurenative.resources.outputs.SystemDataResponse;
import com.pulumi.core.Alias;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * Object model for the Azure CLI script.
 * API Version: 2020-10-01.
 * 
 * ## Example Usage
 * 
 * ## Import
 * 
 * An existing resource can be imported using its type token, name, and identifier, e.g.
 * 
 * ```sh
 * $ pulumi import azure-native:resources:AzureCliScript myresource1 /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deploymentScripts/{scriptName} 
 * ```
 * 
 */
@ResourceType(type="azure-native:resources:AzureCliScript")
public class AzureCliScript extends com.pulumi.resources.CustomResource {
    /**
     * Command line arguments to pass to the script. Arguments are separated by spaces. ex: -Name blue* -Location &#39;West US 2&#39;
     * 
     */
    @Export(name="arguments", type=String.class, parameters={})
    private Output</* @Nullable */ String> arguments;

    /**
     * @return Command line arguments to pass to the script. Arguments are separated by spaces. ex: -Name blue* -Location &#39;West US 2&#39;
     * 
     */
    public Output</* @Nullable */ String> arguments() {
        return this.arguments;
    }
    /**
     * Azure CLI module version to be used.
     * 
     */
    @Export(name="azCliVersion", type=String.class, parameters={})
    private Output<String> azCliVersion;

    /**
     * @return Azure CLI module version to be used.
     * 
     */
    public Output<String> azCliVersion() {
        return this.azCliVersion;
    }
    /**
     * The clean up preference when the script execution gets in a terminal state. Default setting is &#39;Always&#39;.
     * 
     */
    @Export(name="cleanupPreference", type=String.class, parameters={})
    private Output</* @Nullable */ String> cleanupPreference;

    /**
     * @return The clean up preference when the script execution gets in a terminal state. Default setting is &#39;Always&#39;.
     * 
     */
    public Output</* @Nullable */ String> cleanupPreference() {
        return this.cleanupPreference;
    }
    /**
     * Container settings.
     * 
     */
    @Export(name="containerSettings", type=ContainerConfigurationResponse.class, parameters={})
    private Output</* @Nullable */ ContainerConfigurationResponse> containerSettings;

    /**
     * @return Container settings.
     * 
     */
    public Output</* @Nullable */ ContainerConfigurationResponse> containerSettings() {
        return this.containerSettings;
    }
    /**
     * The environment variables to pass over to the script.
     * 
     */
    @Export(name="environmentVariables", type=List.class, parameters={EnvironmentVariableResponse.class})
    private Output</* @Nullable */ List<EnvironmentVariableResponse>> environmentVariables;

    /**
     * @return The environment variables to pass over to the script.
     * 
     */
    public Output</* @Nullable */ List<EnvironmentVariableResponse>> environmentVariables() {
        return this.environmentVariables;
    }
    /**
     * Gets or sets how the deployment script should be forced to execute even if the script resource has not changed. Can be current time stamp or a GUID.
     * 
     */
    @Export(name="forceUpdateTag", type=String.class, parameters={})
    private Output</* @Nullable */ String> forceUpdateTag;

    /**
     * @return Gets or sets how the deployment script should be forced to execute even if the script resource has not changed. Can be current time stamp or a GUID.
     * 
     */
    public Output</* @Nullable */ String> forceUpdateTag() {
        return this.forceUpdateTag;
    }
    /**
     * Optional property. Managed identity to be used for this deployment script. Currently, only user-assigned MSI is supported.
     * 
     */
    @Export(name="identity", type=ManagedServiceIdentityResponse.class, parameters={})
    private Output</* @Nullable */ ManagedServiceIdentityResponse> identity;

    /**
     * @return Optional property. Managed identity to be used for this deployment script. Currently, only user-assigned MSI is supported.
     * 
     */
    public Output</* @Nullable */ ManagedServiceIdentityResponse> identity() {
        return this.identity;
    }
    /**
     * Type of the script.
     * Expected value is &#39;AzureCLI&#39;.
     * 
     */
    @Export(name="kind", type=String.class, parameters={})
    private Output<String> kind;

    /**
     * @return Type of the script.
     * Expected value is &#39;AzureCLI&#39;.
     * 
     */
    public Output<String> kind() {
        return this.kind;
    }
    /**
     * The location of the ACI and the storage account for the deployment script.
     * 
     */
    @Export(name="location", type=String.class, parameters={})
    private Output<String> location;

    /**
     * @return The location of the ACI and the storage account for the deployment script.
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * Name of this resource.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return Name of this resource.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * List of script outputs.
     * 
     */
    @Export(name="outputs", type=Map.class, parameters={String.class, Object.class})
    private Output<Map<String,Object>> outputs;

    /**
     * @return List of script outputs.
     * 
     */
    public Output<Map<String,Object>> outputs() {
        return this.outputs;
    }
    /**
     * Uri for the script. This is the entry point for the external script.
     * 
     */
    @Export(name="primaryScriptUri", type=String.class, parameters={})
    private Output</* @Nullable */ String> primaryScriptUri;

    /**
     * @return Uri for the script. This is the entry point for the external script.
     * 
     */
    public Output</* @Nullable */ String> primaryScriptUri() {
        return this.primaryScriptUri;
    }
    /**
     * State of the script execution. This only appears in the response.
     * 
     */
    @Export(name="provisioningState", type=String.class, parameters={})
    private Output<String> provisioningState;

    /**
     * @return State of the script execution. This only appears in the response.
     * 
     */
    public Output<String> provisioningState() {
        return this.provisioningState;
    }
    /**
     * Interval for which the service retains the script resource after it reaches a terminal state. Resource will be deleted when this duration expires. Duration is based on ISO 8601 pattern (for example P1D means one day).
     * 
     */
    @Export(name="retentionInterval", type=String.class, parameters={})
    private Output<String> retentionInterval;

    /**
     * @return Interval for which the service retains the script resource after it reaches a terminal state. Resource will be deleted when this duration expires. Duration is based on ISO 8601 pattern (for example P1D means one day).
     * 
     */
    public Output<String> retentionInterval() {
        return this.retentionInterval;
    }
    /**
     * Script body.
     * 
     */
    @Export(name="scriptContent", type=String.class, parameters={})
    private Output</* @Nullable */ String> scriptContent;

    /**
     * @return Script body.
     * 
     */
    public Output</* @Nullable */ String> scriptContent() {
        return this.scriptContent;
    }
    /**
     * Contains the results of script execution.
     * 
     */
    @Export(name="status", type=ScriptStatusResponse.class, parameters={})
    private Output<ScriptStatusResponse> status;

    /**
     * @return Contains the results of script execution.
     * 
     */
    public Output<ScriptStatusResponse> status() {
        return this.status;
    }
    /**
     * Storage Account settings.
     * 
     */
    @Export(name="storageAccountSettings", type=StorageAccountConfigurationResponse.class, parameters={})
    private Output</* @Nullable */ StorageAccountConfigurationResponse> storageAccountSettings;

    /**
     * @return Storage Account settings.
     * 
     */
    public Output</* @Nullable */ StorageAccountConfigurationResponse> storageAccountSettings() {
        return this.storageAccountSettings;
    }
    /**
     * Supporting files for the external script.
     * 
     */
    @Export(name="supportingScriptUris", type=List.class, parameters={String.class})
    private Output</* @Nullable */ List<String>> supportingScriptUris;

    /**
     * @return Supporting files for the external script.
     * 
     */
    public Output</* @Nullable */ List<String>> supportingScriptUris() {
        return this.supportingScriptUris;
    }
    /**
     * The system metadata related to this resource.
     * 
     */
    @Export(name="systemData", type=SystemDataResponse.class, parameters={})
    private Output<SystemDataResponse> systemData;

    /**
     * @return The system metadata related to this resource.
     * 
     */
    public Output<SystemDataResponse> systemData() {
        return this.systemData;
    }
    /**
     * Resource tags.
     * 
     */
    @Export(name="tags", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return Resource tags.
     * 
     */
    public Output</* @Nullable */ Map<String,String>> tags() {
        return this.tags;
    }
    /**
     * Maximum allowed script execution time specified in ISO 8601 format. Default value is P1D
     * 
     */
    @Export(name="timeout", type=String.class, parameters={})
    private Output</* @Nullable */ String> timeout;

    /**
     * @return Maximum allowed script execution time specified in ISO 8601 format. Default value is P1D
     * 
     */
    public Output</* @Nullable */ String> timeout() {
        return this.timeout;
    }
    /**
     * Type of this resource.
     * 
     */
    @Export(name="type", type=String.class, parameters={})
    private Output<String> type;

    /**
     * @return Type of this resource.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public AzureCliScript(String name) {
        this(name, AzureCliScriptArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public AzureCliScript(String name, AzureCliScriptArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public AzureCliScript(String name, AzureCliScriptArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:resources:AzureCliScript", name, makeArgs(args), makeResourceOptions(options, Codegen.empty()));
    }

    private AzureCliScript(String name, Output<String> id, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:resources:AzureCliScript", name, null, makeResourceOptions(options, id));
    }

    private static AzureCliScriptArgs makeArgs(AzureCliScriptArgs args) {
        var builder = args == null ? AzureCliScriptArgs.builder() : AzureCliScriptArgs.builder(args);
        return builder
            .kind("AzureCLI")
            .build();
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .aliases(List.of(
                Output.of(Alias.builder().type("azure-native:resources/v20191001preview:AzureCliScript").build()),
                Output.of(Alias.builder().type("azure-native:resources/v20201001:AzureCliScript").build())
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static AzureCliScript get(String name, Output<String> id, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new AzureCliScript(name, id, options);
    }
}
