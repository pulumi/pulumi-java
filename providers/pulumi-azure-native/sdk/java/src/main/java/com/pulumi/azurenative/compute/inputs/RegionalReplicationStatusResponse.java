// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.compute.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


/**
 * This is the regional replication status.
 * 
 */
public final class RegionalReplicationStatusResponse extends com.pulumi.resources.InvokeArgs {

    public static final RegionalReplicationStatusResponse Empty = new RegionalReplicationStatusResponse();

    /**
     * The details of the replication status.
     * 
     */
    @Import(name="details", required=true)
    private String details;

    /**
     * @return The details of the replication status.
     * 
     */
    public String details() {
        return this.details;
    }

    /**
     * It indicates progress of the replication job.
     * 
     */
    @Import(name="progress", required=true)
    private Integer progress;

    /**
     * @return It indicates progress of the replication job.
     * 
     */
    public Integer progress() {
        return this.progress;
    }

    /**
     * The region to which the gallery image version is being replicated to.
     * 
     */
    @Import(name="region", required=true)
    private String region;

    /**
     * @return The region to which the gallery image version is being replicated to.
     * 
     */
    public String region() {
        return this.region;
    }

    /**
     * This is the regional replication state.
     * 
     */
    @Import(name="state", required=true)
    private String state;

    /**
     * @return This is the regional replication state.
     * 
     */
    public String state() {
        return this.state;
    }

    private RegionalReplicationStatusResponse() {}

    private RegionalReplicationStatusResponse(RegionalReplicationStatusResponse $) {
        this.details = $.details;
        this.progress = $.progress;
        this.region = $.region;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RegionalReplicationStatusResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RegionalReplicationStatusResponse $;

        public Builder() {
            $ = new RegionalReplicationStatusResponse();
        }

        public Builder(RegionalReplicationStatusResponse defaults) {
            $ = new RegionalReplicationStatusResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param details The details of the replication status.
         * 
         * @return builder
         * 
         */
        public Builder details(String details) {
            $.details = details;
            return this;
        }

        /**
         * @param progress It indicates progress of the replication job.
         * 
         * @return builder
         * 
         */
        public Builder progress(Integer progress) {
            $.progress = progress;
            return this;
        }

        /**
         * @param region The region to which the gallery image version is being replicated to.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            $.region = region;
            return this;
        }

        /**
         * @param state This is the regional replication state.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            $.state = state;
            return this;
        }

        public RegionalReplicationStatusResponse build() {
            $.details = Objects.requireNonNull($.details, "expected parameter 'details' to be non-null");
            $.progress = Objects.requireNonNull($.progress, "expected parameter 'progress' to be non-null");
            $.region = Objects.requireNonNull($.region, "expected parameter 'region' to be non-null");
            $.state = Objects.requireNonNull($.state, "expected parameter 'state' to be non-null");
            return $;
        }
    }

}
