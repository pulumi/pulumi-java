// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datamigration.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SqlConnectionInformationResponse {
    /**
     * @return Authentication type.
     * 
     */
    private final @Nullable String authentication;
    /**
     * @return Data source.
     * 
     */
    private final @Nullable String dataSource;
    /**
     * @return Whether to encrypt connection or not.
     * 
     */
    private final @Nullable Boolean encryptConnection;
    /**
     * @return Password to connect to source SQL.
     * 
     */
    private final @Nullable String password;
    /**
     * @return Whether to trust server certificate or not.
     * 
     */
    private final @Nullable Boolean trustServerCertificate;
    /**
     * @return User name to connect to source SQL.
     * 
     */
    private final @Nullable String userName;

    @CustomType.Constructor
    private SqlConnectionInformationResponse(
        @CustomType.Parameter("authentication") @Nullable String authentication,
        @CustomType.Parameter("dataSource") @Nullable String dataSource,
        @CustomType.Parameter("encryptConnection") @Nullable Boolean encryptConnection,
        @CustomType.Parameter("password") @Nullable String password,
        @CustomType.Parameter("trustServerCertificate") @Nullable Boolean trustServerCertificate,
        @CustomType.Parameter("userName") @Nullable String userName) {
        this.authentication = authentication;
        this.dataSource = dataSource;
        this.encryptConnection = encryptConnection;
        this.password = password;
        this.trustServerCertificate = trustServerCertificate;
        this.userName = userName;
    }

    /**
     * @return Authentication type.
     * 
     */
    public Optional<String> authentication() {
        return Optional.ofNullable(this.authentication);
    }
    /**
     * @return Data source.
     * 
     */
    public Optional<String> dataSource() {
        return Optional.ofNullable(this.dataSource);
    }
    /**
     * @return Whether to encrypt connection or not.
     * 
     */
    public Optional<Boolean> encryptConnection() {
        return Optional.ofNullable(this.encryptConnection);
    }
    /**
     * @return Password to connect to source SQL.
     * 
     */
    public Optional<String> password() {
        return Optional.ofNullable(this.password);
    }
    /**
     * @return Whether to trust server certificate or not.
     * 
     */
    public Optional<Boolean> trustServerCertificate() {
        return Optional.ofNullable(this.trustServerCertificate);
    }
    /**
     * @return User name to connect to source SQL.
     * 
     */
    public Optional<String> userName() {
        return Optional.ofNullable(this.userName);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SqlConnectionInformationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String authentication;
        private @Nullable String dataSource;
        private @Nullable Boolean encryptConnection;
        private @Nullable String password;
        private @Nullable Boolean trustServerCertificate;
        private @Nullable String userName;

        public Builder() {
    	      // Empty
        }

        public Builder(SqlConnectionInformationResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authentication = defaults.authentication;
    	      this.dataSource = defaults.dataSource;
    	      this.encryptConnection = defaults.encryptConnection;
    	      this.password = defaults.password;
    	      this.trustServerCertificate = defaults.trustServerCertificate;
    	      this.userName = defaults.userName;
        }

        public Builder authentication(@Nullable String authentication) {
            this.authentication = authentication;
            return this;
        }
        public Builder dataSource(@Nullable String dataSource) {
            this.dataSource = dataSource;
            return this;
        }
        public Builder encryptConnection(@Nullable Boolean encryptConnection) {
            this.encryptConnection = encryptConnection;
            return this;
        }
        public Builder password(@Nullable String password) {
            this.password = password;
            return this;
        }
        public Builder trustServerCertificate(@Nullable Boolean trustServerCertificate) {
            this.trustServerCertificate = trustServerCertificate;
            return this;
        }
        public Builder userName(@Nullable String userName) {
            this.userName = userName;
            return this;
        }        public SqlConnectionInformationResponse build() {
            return new SqlConnectionInformationResponse(authentication, dataSource, encryptConnection, password, trustServerCertificate, userName);
        }
    }
}
