// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.eventgrid;

import com.pulumi.azurenative.eventgrid.enums.PartnerTopicActivationState;
import com.pulumi.azurenative.eventgrid.inputs.EventTypeInfoArgs;
import com.pulumi.azurenative.eventgrid.inputs.IdentityInfoArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PartnerTopicArgs extends com.pulumi.resources.ResourceArgs {

    public static final PartnerTopicArgs Empty = new PartnerTopicArgs();

    /**
     * Activation state of the partner topic.
     * 
     */
    @Import(name="activationState")
    private @Nullable Output<Either<String,PartnerTopicActivationState>> activationState;

    /**
     * @return Activation state of the partner topic.
     * 
     */
    public Optional<Output<Either<String,PartnerTopicActivationState>>> activationState() {
        return Optional.ofNullable(this.activationState);
    }

    /**
     * Event Type information from the corresponding event channel.
     * 
     */
    @Import(name="eventTypeInfo")
    private @Nullable Output<EventTypeInfoArgs> eventTypeInfo;

    /**
     * @return Event Type information from the corresponding event channel.
     * 
     */
    public Optional<Output<EventTypeInfoArgs>> eventTypeInfo() {
        return Optional.ofNullable(this.eventTypeInfo);
    }

    /**
     * Expiration time of the partner topic. If this timer expires while the partner topic is still never activated,
     * the partner topic and corresponding event channel are deleted.
     * 
     */
    @Import(name="expirationTimeIfNotActivatedUtc")
    private @Nullable Output<String> expirationTimeIfNotActivatedUtc;

    /**
     * @return Expiration time of the partner topic. If this timer expires while the partner topic is still never activated,
     * the partner topic and corresponding event channel are deleted.
     * 
     */
    public Optional<Output<String>> expirationTimeIfNotActivatedUtc() {
        return Optional.ofNullable(this.expirationTimeIfNotActivatedUtc);
    }

    /**
     * Identity information for the Partner Topic resource.
     * 
     */
    @Import(name="identity")
    private @Nullable Output<IdentityInfoArgs> identity;

    /**
     * @return Identity information for the Partner Topic resource.
     * 
     */
    public Optional<Output<IdentityInfoArgs>> identity() {
        return Optional.ofNullable(this.identity);
    }

    /**
     * Location of the resource.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Location of the resource.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Context or helpful message that can be used during the approval process by the subscriber.
     * 
     */
    @Import(name="messageForActivation")
    private @Nullable Output<String> messageForActivation;

    /**
     * @return Context or helpful message that can be used during the approval process by the subscriber.
     * 
     */
    public Optional<Output<String>> messageForActivation() {
        return Optional.ofNullable(this.messageForActivation);
    }

    /**
     * The immutableId of the corresponding partner registration.
     * 
     */
    @Import(name="partnerRegistrationImmutableId")
    private @Nullable Output<String> partnerRegistrationImmutableId;

    /**
     * @return The immutableId of the corresponding partner registration.
     * 
     */
    public Optional<Output<String>> partnerRegistrationImmutableId() {
        return Optional.ofNullable(this.partnerRegistrationImmutableId);
    }

    /**
     * Friendly description about the topic. This can be set by the publisher/partner to show custom description for the customer partner topic.
     * This will be helpful to remove any ambiguity of the origin of creation of the partner topic for the customer.
     * 
     */
    @Import(name="partnerTopicFriendlyDescription")
    private @Nullable Output<String> partnerTopicFriendlyDescription;

    /**
     * @return Friendly description about the topic. This can be set by the publisher/partner to show custom description for the customer partner topic.
     * This will be helpful to remove any ambiguity of the origin of creation of the partner topic for the customer.
     * 
     */
    public Optional<Output<String>> partnerTopicFriendlyDescription() {
        return Optional.ofNullable(this.partnerTopicFriendlyDescription);
    }

    /**
     * Name of the partner topic.
     * 
     */
    @Import(name="partnerTopicName")
    private @Nullable Output<String> partnerTopicName;

    /**
     * @return Name of the partner topic.
     * 
     */
    public Optional<Output<String>> partnerTopicName() {
        return Optional.ofNullable(this.partnerTopicName);
    }

    /**
     * The name of the resource group within the user&#39;s subscription.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group within the user&#39;s subscription.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Source associated with this partner topic. This represents a unique partner resource.
     * 
     */
    @Import(name="source")
    private @Nullable Output<String> source;

    /**
     * @return Source associated with this partner topic. This represents a unique partner resource.
     * 
     */
    public Optional<Output<String>> source() {
        return Optional.ofNullable(this.source);
    }

    /**
     * Tags of the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Tags of the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private PartnerTopicArgs() {}

    private PartnerTopicArgs(PartnerTopicArgs $) {
        this.activationState = $.activationState;
        this.eventTypeInfo = $.eventTypeInfo;
        this.expirationTimeIfNotActivatedUtc = $.expirationTimeIfNotActivatedUtc;
        this.identity = $.identity;
        this.location = $.location;
        this.messageForActivation = $.messageForActivation;
        this.partnerRegistrationImmutableId = $.partnerRegistrationImmutableId;
        this.partnerTopicFriendlyDescription = $.partnerTopicFriendlyDescription;
        this.partnerTopicName = $.partnerTopicName;
        this.resourceGroupName = $.resourceGroupName;
        this.source = $.source;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PartnerTopicArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PartnerTopicArgs $;

        public Builder() {
            $ = new PartnerTopicArgs();
        }

        public Builder(PartnerTopicArgs defaults) {
            $ = new PartnerTopicArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param activationState Activation state of the partner topic.
         * 
         * @return builder
         * 
         */
        public Builder activationState(@Nullable Output<Either<String,PartnerTopicActivationState>> activationState) {
            $.activationState = activationState;
            return this;
        }

        /**
         * @param activationState Activation state of the partner topic.
         * 
         * @return builder
         * 
         */
        public Builder activationState(Either<String,PartnerTopicActivationState> activationState) {
            return activationState(Output.of(activationState));
        }

        /**
         * @param activationState Activation state of the partner topic.
         * 
         * @return builder
         * 
         */
        public Builder activationState(String activationState) {
            return activationState(Either.ofLeft(activationState));
        }

        /**
         * @param activationState Activation state of the partner topic.
         * 
         * @return builder
         * 
         */
        public Builder activationState(PartnerTopicActivationState activationState) {
            return activationState(Either.ofRight(activationState));
        }

        /**
         * @param eventTypeInfo Event Type information from the corresponding event channel.
         * 
         * @return builder
         * 
         */
        public Builder eventTypeInfo(@Nullable Output<EventTypeInfoArgs> eventTypeInfo) {
            $.eventTypeInfo = eventTypeInfo;
            return this;
        }

        /**
         * @param eventTypeInfo Event Type information from the corresponding event channel.
         * 
         * @return builder
         * 
         */
        public Builder eventTypeInfo(EventTypeInfoArgs eventTypeInfo) {
            return eventTypeInfo(Output.of(eventTypeInfo));
        }

        /**
         * @param expirationTimeIfNotActivatedUtc Expiration time of the partner topic. If this timer expires while the partner topic is still never activated,
         * the partner topic and corresponding event channel are deleted.
         * 
         * @return builder
         * 
         */
        public Builder expirationTimeIfNotActivatedUtc(@Nullable Output<String> expirationTimeIfNotActivatedUtc) {
            $.expirationTimeIfNotActivatedUtc = expirationTimeIfNotActivatedUtc;
            return this;
        }

        /**
         * @param expirationTimeIfNotActivatedUtc Expiration time of the partner topic. If this timer expires while the partner topic is still never activated,
         * the partner topic and corresponding event channel are deleted.
         * 
         * @return builder
         * 
         */
        public Builder expirationTimeIfNotActivatedUtc(String expirationTimeIfNotActivatedUtc) {
            return expirationTimeIfNotActivatedUtc(Output.of(expirationTimeIfNotActivatedUtc));
        }

        /**
         * @param identity Identity information for the Partner Topic resource.
         * 
         * @return builder
         * 
         */
        public Builder identity(@Nullable Output<IdentityInfoArgs> identity) {
            $.identity = identity;
            return this;
        }

        /**
         * @param identity Identity information for the Partner Topic resource.
         * 
         * @return builder
         * 
         */
        public Builder identity(IdentityInfoArgs identity) {
            return identity(Output.of(identity));
        }

        /**
         * @param location Location of the resource.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Location of the resource.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param messageForActivation Context or helpful message that can be used during the approval process by the subscriber.
         * 
         * @return builder
         * 
         */
        public Builder messageForActivation(@Nullable Output<String> messageForActivation) {
            $.messageForActivation = messageForActivation;
            return this;
        }

        /**
         * @param messageForActivation Context or helpful message that can be used during the approval process by the subscriber.
         * 
         * @return builder
         * 
         */
        public Builder messageForActivation(String messageForActivation) {
            return messageForActivation(Output.of(messageForActivation));
        }

        /**
         * @param partnerRegistrationImmutableId The immutableId of the corresponding partner registration.
         * 
         * @return builder
         * 
         */
        public Builder partnerRegistrationImmutableId(@Nullable Output<String> partnerRegistrationImmutableId) {
            $.partnerRegistrationImmutableId = partnerRegistrationImmutableId;
            return this;
        }

        /**
         * @param partnerRegistrationImmutableId The immutableId of the corresponding partner registration.
         * 
         * @return builder
         * 
         */
        public Builder partnerRegistrationImmutableId(String partnerRegistrationImmutableId) {
            return partnerRegistrationImmutableId(Output.of(partnerRegistrationImmutableId));
        }

        /**
         * @param partnerTopicFriendlyDescription Friendly description about the topic. This can be set by the publisher/partner to show custom description for the customer partner topic.
         * This will be helpful to remove any ambiguity of the origin of creation of the partner topic for the customer.
         * 
         * @return builder
         * 
         */
        public Builder partnerTopicFriendlyDescription(@Nullable Output<String> partnerTopicFriendlyDescription) {
            $.partnerTopicFriendlyDescription = partnerTopicFriendlyDescription;
            return this;
        }

        /**
         * @param partnerTopicFriendlyDescription Friendly description about the topic. This can be set by the publisher/partner to show custom description for the customer partner topic.
         * This will be helpful to remove any ambiguity of the origin of creation of the partner topic for the customer.
         * 
         * @return builder
         * 
         */
        public Builder partnerTopicFriendlyDescription(String partnerTopicFriendlyDescription) {
            return partnerTopicFriendlyDescription(Output.of(partnerTopicFriendlyDescription));
        }

        /**
         * @param partnerTopicName Name of the partner topic.
         * 
         * @return builder
         * 
         */
        public Builder partnerTopicName(@Nullable Output<String> partnerTopicName) {
            $.partnerTopicName = partnerTopicName;
            return this;
        }

        /**
         * @param partnerTopicName Name of the partner topic.
         * 
         * @return builder
         * 
         */
        public Builder partnerTopicName(String partnerTopicName) {
            return partnerTopicName(Output.of(partnerTopicName));
        }

        /**
         * @param resourceGroupName The name of the resource group within the user&#39;s subscription.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group within the user&#39;s subscription.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param source Source associated with this partner topic. This represents a unique partner resource.
         * 
         * @return builder
         * 
         */
        public Builder source(@Nullable Output<String> source) {
            $.source = source;
            return this;
        }

        /**
         * @param source Source associated with this partner topic. This represents a unique partner resource.
         * 
         * @return builder
         * 
         */
        public Builder source(String source) {
            return source(Output.of(source));
        }

        /**
         * @param tags Tags of the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Tags of the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public PartnerTopicArgs build() {
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
