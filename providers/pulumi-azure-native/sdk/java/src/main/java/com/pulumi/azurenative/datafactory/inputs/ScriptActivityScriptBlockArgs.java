// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.azurenative.datafactory.enums.ScriptType;
import com.pulumi.azurenative.datafactory.inputs.ScriptActivityParameterArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Script block of scripts.
 * 
 */
public final class ScriptActivityScriptBlockArgs extends com.pulumi.resources.ResourceArgs {

    public static final ScriptActivityScriptBlockArgs Empty = new ScriptActivityScriptBlockArgs();

    /**
     * Array of script parameters. Type: array.
     * 
     */
    @Import(name="parameters")
    private @Nullable Output<List<ScriptActivityParameterArgs>> parameters;

    /**
     * @return Array of script parameters. Type: array.
     * 
     */
    public Optional<Output<List<ScriptActivityParameterArgs>>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    /**
     * The query text. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="text", required=true)
    private Output<Object> text;

    /**
     * @return The query text. Type: string (or Expression with resultType string).
     * 
     */
    public Output<Object> text() {
        return this.text;
    }

    /**
     * The type of the query. Type: string.
     * 
     */
    @Import(name="type", required=true)
    private Output<Either<String,ScriptType>> type;

    /**
     * @return The type of the query. Type: string.
     * 
     */
    public Output<Either<String,ScriptType>> type() {
        return this.type;
    }

    private ScriptActivityScriptBlockArgs() {}

    private ScriptActivityScriptBlockArgs(ScriptActivityScriptBlockArgs $) {
        this.parameters = $.parameters;
        this.text = $.text;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ScriptActivityScriptBlockArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ScriptActivityScriptBlockArgs $;

        public Builder() {
            $ = new ScriptActivityScriptBlockArgs();
        }

        public Builder(ScriptActivityScriptBlockArgs defaults) {
            $ = new ScriptActivityScriptBlockArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param parameters Array of script parameters. Type: array.
         * 
         * @return builder
         * 
         */
        public Builder parameters(@Nullable Output<List<ScriptActivityParameterArgs>> parameters) {
            $.parameters = parameters;
            return this;
        }

        /**
         * @param parameters Array of script parameters. Type: array.
         * 
         * @return builder
         * 
         */
        public Builder parameters(List<ScriptActivityParameterArgs> parameters) {
            return parameters(Output.of(parameters));
        }

        /**
         * @param parameters Array of script parameters. Type: array.
         * 
         * @return builder
         * 
         */
        public Builder parameters(ScriptActivityParameterArgs... parameters) {
            return parameters(List.of(parameters));
        }

        /**
         * @param text The query text. Type: string (or Expression with resultType string).
         * 
         * @return builder
         * 
         */
        public Builder text(Output<Object> text) {
            $.text = text;
            return this;
        }

        /**
         * @param text The query text. Type: string (or Expression with resultType string).
         * 
         * @return builder
         * 
         */
        public Builder text(Object text) {
            return text(Output.of(text));
        }

        /**
         * @param type The type of the query. Type: string.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<Either<String,ScriptType>> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of the query. Type: string.
         * 
         * @return builder
         * 
         */
        public Builder type(Either<String,ScriptType> type) {
            return type(Output.of(type));
        }

        /**
         * @param type The type of the query. Type: string.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Either.ofLeft(type));
        }

        /**
         * @param type The type of the query. Type: string.
         * 
         * @return builder
         * 
         */
        public Builder type(ScriptType type) {
            return type(Either.ofRight(type));
        }

        public ScriptActivityScriptBlockArgs build() {
            $.text = Objects.requireNonNull($.text, "expected parameter 'text' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
