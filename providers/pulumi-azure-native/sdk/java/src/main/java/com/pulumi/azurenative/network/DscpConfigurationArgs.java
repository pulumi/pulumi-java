// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network;

import com.pulumi.azurenative.network.enums.ProtocolType;
import com.pulumi.azurenative.network.inputs.QosIpRangeArgs;
import com.pulumi.azurenative.network.inputs.QosPortRangeArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DscpConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final DscpConfigurationArgs Empty = new DscpConfigurationArgs();

    /**
     * Destination IP ranges.
     * 
     */
    @Import(name="destinationIpRanges")
    private @Nullable Output<List<QosIpRangeArgs>> destinationIpRanges;

    public Optional<Output<List<QosIpRangeArgs>>> destinationIpRanges() {
        return Optional.ofNullable(this.destinationIpRanges);
    }

    /**
     * Destination port ranges.
     * 
     */
    @Import(name="destinationPortRanges")
    private @Nullable Output<List<QosPortRangeArgs>> destinationPortRanges;

    public Optional<Output<List<QosPortRangeArgs>>> destinationPortRanges() {
        return Optional.ofNullable(this.destinationPortRanges);
    }

    /**
     * The name of the resource.
     * 
     */
    @Import(name="dscpConfigurationName")
    private @Nullable Output<String> dscpConfigurationName;

    public Optional<Output<String>> dscpConfigurationName() {
        return Optional.ofNullable(this.dscpConfigurationName);
    }

    /**
     * Resource ID.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Resource location.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * List of markings to be used in the configuration.
     * 
     */
    @Import(name="markings")
    private @Nullable Output<List<Integer>> markings;

    public Optional<Output<List<Integer>>> markings() {
        return Optional.ofNullable(this.markings);
    }

    /**
     * RNM supported protocol types.
     * 
     */
    @Import(name="protocol")
    private @Nullable Output<Either<String,ProtocolType>> protocol;

    public Optional<Output<Either<String,ProtocolType>>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Source IP ranges.
     * 
     */
    @Import(name="sourceIpRanges")
    private @Nullable Output<List<QosIpRangeArgs>> sourceIpRanges;

    public Optional<Output<List<QosIpRangeArgs>>> sourceIpRanges() {
        return Optional.ofNullable(this.sourceIpRanges);
    }

    /**
     * Sources port ranges.
     * 
     */
    @Import(name="sourcePortRanges")
    private @Nullable Output<List<QosPortRangeArgs>> sourcePortRanges;

    public Optional<Output<List<QosPortRangeArgs>>> sourcePortRanges() {
        return Optional.ofNullable(this.sourcePortRanges);
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private DscpConfigurationArgs() {}

    private DscpConfigurationArgs(DscpConfigurationArgs $) {
        this.destinationIpRanges = $.destinationIpRanges;
        this.destinationPortRanges = $.destinationPortRanges;
        this.dscpConfigurationName = $.dscpConfigurationName;
        this.id = $.id;
        this.location = $.location;
        this.markings = $.markings;
        this.protocol = $.protocol;
        this.resourceGroupName = $.resourceGroupName;
        this.sourceIpRanges = $.sourceIpRanges;
        this.sourcePortRanges = $.sourcePortRanges;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DscpConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DscpConfigurationArgs $;

        public Builder() {
            $ = new DscpConfigurationArgs();
        }

        public Builder(DscpConfigurationArgs defaults) {
            $ = new DscpConfigurationArgs(Objects.requireNonNull(defaults));
        }

        public Builder destinationIpRanges(@Nullable Output<List<QosIpRangeArgs>> destinationIpRanges) {
            $.destinationIpRanges = destinationIpRanges;
            return this;
        }

        public Builder destinationIpRanges(List<QosIpRangeArgs> destinationIpRanges) {
            return destinationIpRanges(Output.of(destinationIpRanges));
        }

        public Builder destinationIpRanges(QosIpRangeArgs... destinationIpRanges) {
            return destinationIpRanges(List.of(destinationIpRanges));
        }

        public Builder destinationPortRanges(@Nullable Output<List<QosPortRangeArgs>> destinationPortRanges) {
            $.destinationPortRanges = destinationPortRanges;
            return this;
        }

        public Builder destinationPortRanges(List<QosPortRangeArgs> destinationPortRanges) {
            return destinationPortRanges(Output.of(destinationPortRanges));
        }

        public Builder destinationPortRanges(QosPortRangeArgs... destinationPortRanges) {
            return destinationPortRanges(List.of(destinationPortRanges));
        }

        public Builder dscpConfigurationName(@Nullable Output<String> dscpConfigurationName) {
            $.dscpConfigurationName = dscpConfigurationName;
            return this;
        }

        public Builder dscpConfigurationName(String dscpConfigurationName) {
            return dscpConfigurationName(Output.of(dscpConfigurationName));
        }

        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        public Builder id(String id) {
            return id(Output.of(id));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder markings(@Nullable Output<List<Integer>> markings) {
            $.markings = markings;
            return this;
        }

        public Builder markings(List<Integer> markings) {
            return markings(Output.of(markings));
        }

        public Builder markings(Integer... markings) {
            return markings(List.of(markings));
        }

        public Builder protocol(@Nullable Output<Either<String,ProtocolType>> protocol) {
            $.protocol = protocol;
            return this;
        }

        public Builder protocol(Either<String,ProtocolType> protocol) {
            return protocol(Output.of(protocol));
        }

        public Builder protocol(String protocol) {
            return protocol(Either.ofLeft(protocol));
        }

        public Builder protocol(ProtocolType protocol) {
            return protocol(Either.ofRight(protocol));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder sourceIpRanges(@Nullable Output<List<QosIpRangeArgs>> sourceIpRanges) {
            $.sourceIpRanges = sourceIpRanges;
            return this;
        }

        public Builder sourceIpRanges(List<QosIpRangeArgs> sourceIpRanges) {
            return sourceIpRanges(Output.of(sourceIpRanges));
        }

        public Builder sourceIpRanges(QosIpRangeArgs... sourceIpRanges) {
            return sourceIpRanges(List.of(sourceIpRanges));
        }

        public Builder sourcePortRanges(@Nullable Output<List<QosPortRangeArgs>> sourcePortRanges) {
            $.sourcePortRanges = sourcePortRanges;
            return this;
        }

        public Builder sourcePortRanges(List<QosPortRangeArgs> sourcePortRanges) {
            return sourcePortRanges(Output.of(sourcePortRanges));
        }

        public Builder sourcePortRanges(QosPortRangeArgs... sourcePortRanges) {
            return sourcePortRanges(List.of(sourcePortRanges));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public DscpConfigurationArgs build() {
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
