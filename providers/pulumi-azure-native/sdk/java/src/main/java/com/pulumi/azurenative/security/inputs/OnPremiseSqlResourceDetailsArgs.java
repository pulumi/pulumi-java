// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.security.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;


/**
 * Details of the On Premise Sql resource that was assessed
 * 
 */
public final class OnPremiseSqlResourceDetailsArgs extends com.pulumi.resources.ResourceArgs {

    public static final OnPremiseSqlResourceDetailsArgs Empty = new OnPremiseSqlResourceDetailsArgs();

    /**
     * The Sql database name installed on the machine
     * 
     */
    @Import(name="databaseName", required=true)
    private Output<String> databaseName;

    /**
     * @return The Sql database name installed on the machine
     * 
     */
    public Output<String> databaseName() {
        return this.databaseName;
    }

    /**
     * The name of the machine
     * 
     */
    @Import(name="machineName", required=true)
    private Output<String> machineName;

    /**
     * @return The name of the machine
     * 
     */
    public Output<String> machineName() {
        return this.machineName;
    }

    /**
     * The Sql server name installed on the machine
     * 
     */
    @Import(name="serverName", required=true)
    private Output<String> serverName;

    /**
     * @return The Sql server name installed on the machine
     * 
     */
    public Output<String> serverName() {
        return this.serverName;
    }

    /**
     * The platform where the assessed resource resides
     * Expected value is &#39;OnPremiseSql&#39;.
     * 
     */
    @Import(name="source", required=true)
    private Output<String> source;

    /**
     * @return The platform where the assessed resource resides
     * Expected value is &#39;OnPremiseSql&#39;.
     * 
     */
    public Output<String> source() {
        return this.source;
    }

    /**
     * The oms agent Id installed on the machine
     * 
     */
    @Import(name="sourceComputerId", required=true)
    private Output<String> sourceComputerId;

    /**
     * @return The oms agent Id installed on the machine
     * 
     */
    public Output<String> sourceComputerId() {
        return this.sourceComputerId;
    }

    /**
     * The unique Id of the machine
     * 
     */
    @Import(name="vmuuid", required=true)
    private Output<String> vmuuid;

    /**
     * @return The unique Id of the machine
     * 
     */
    public Output<String> vmuuid() {
        return this.vmuuid;
    }

    /**
     * Azure resource Id of the workspace the machine is attached to
     * 
     */
    @Import(name="workspaceId", required=true)
    private Output<String> workspaceId;

    /**
     * @return Azure resource Id of the workspace the machine is attached to
     * 
     */
    public Output<String> workspaceId() {
        return this.workspaceId;
    }

    private OnPremiseSqlResourceDetailsArgs() {}

    private OnPremiseSqlResourceDetailsArgs(OnPremiseSqlResourceDetailsArgs $) {
        this.databaseName = $.databaseName;
        this.machineName = $.machineName;
        this.serverName = $.serverName;
        this.source = $.source;
        this.sourceComputerId = $.sourceComputerId;
        this.vmuuid = $.vmuuid;
        this.workspaceId = $.workspaceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OnPremiseSqlResourceDetailsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OnPremiseSqlResourceDetailsArgs $;

        public Builder() {
            $ = new OnPremiseSqlResourceDetailsArgs();
        }

        public Builder(OnPremiseSqlResourceDetailsArgs defaults) {
            $ = new OnPremiseSqlResourceDetailsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param databaseName The Sql database name installed on the machine
         * 
         * @return builder
         * 
         */
        public Builder databaseName(Output<String> databaseName) {
            $.databaseName = databaseName;
            return this;
        }

        /**
         * @param databaseName The Sql database name installed on the machine
         * 
         * @return builder
         * 
         */
        public Builder databaseName(String databaseName) {
            return databaseName(Output.of(databaseName));
        }

        /**
         * @param machineName The name of the machine
         * 
         * @return builder
         * 
         */
        public Builder machineName(Output<String> machineName) {
            $.machineName = machineName;
            return this;
        }

        /**
         * @param machineName The name of the machine
         * 
         * @return builder
         * 
         */
        public Builder machineName(String machineName) {
            return machineName(Output.of(machineName));
        }

        /**
         * @param serverName The Sql server name installed on the machine
         * 
         * @return builder
         * 
         */
        public Builder serverName(Output<String> serverName) {
            $.serverName = serverName;
            return this;
        }

        /**
         * @param serverName The Sql server name installed on the machine
         * 
         * @return builder
         * 
         */
        public Builder serverName(String serverName) {
            return serverName(Output.of(serverName));
        }

        /**
         * @param source The platform where the assessed resource resides
         * Expected value is &#39;OnPremiseSql&#39;.
         * 
         * @return builder
         * 
         */
        public Builder source(Output<String> source) {
            $.source = source;
            return this;
        }

        /**
         * @param source The platform where the assessed resource resides
         * Expected value is &#39;OnPremiseSql&#39;.
         * 
         * @return builder
         * 
         */
        public Builder source(String source) {
            return source(Output.of(source));
        }

        /**
         * @param sourceComputerId The oms agent Id installed on the machine
         * 
         * @return builder
         * 
         */
        public Builder sourceComputerId(Output<String> sourceComputerId) {
            $.sourceComputerId = sourceComputerId;
            return this;
        }

        /**
         * @param sourceComputerId The oms agent Id installed on the machine
         * 
         * @return builder
         * 
         */
        public Builder sourceComputerId(String sourceComputerId) {
            return sourceComputerId(Output.of(sourceComputerId));
        }

        /**
         * @param vmuuid The unique Id of the machine
         * 
         * @return builder
         * 
         */
        public Builder vmuuid(Output<String> vmuuid) {
            $.vmuuid = vmuuid;
            return this;
        }

        /**
         * @param vmuuid The unique Id of the machine
         * 
         * @return builder
         * 
         */
        public Builder vmuuid(String vmuuid) {
            return vmuuid(Output.of(vmuuid));
        }

        /**
         * @param workspaceId Azure resource Id of the workspace the machine is attached to
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(Output<String> workspaceId) {
            $.workspaceId = workspaceId;
            return this;
        }

        /**
         * @param workspaceId Azure resource Id of the workspace the machine is attached to
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(String workspaceId) {
            return workspaceId(Output.of(workspaceId));
        }

        public OnPremiseSqlResourceDetailsArgs build() {
            $.databaseName = Objects.requireNonNull($.databaseName, "expected parameter 'databaseName' to be non-null");
            $.machineName = Objects.requireNonNull($.machineName, "expected parameter 'machineName' to be non-null");
            $.serverName = Objects.requireNonNull($.serverName, "expected parameter 'serverName' to be non-null");
            $.source = Codegen.stringProp("source").output().arg($.source).require();
            $.sourceComputerId = Objects.requireNonNull($.sourceComputerId, "expected parameter 'sourceComputerId' to be non-null");
            $.vmuuid = Objects.requireNonNull($.vmuuid, "expected parameter 'vmuuid' to be non-null");
            $.workspaceId = Objects.requireNonNull($.workspaceId, "expected parameter 'workspaceId' to be non-null");
            return $;
        }
    }

}
