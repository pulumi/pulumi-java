// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.compute.inputs;

import com.pulumi.azurenative.compute.inputs.KeyVaultAndKeyReferenceResponse;
import com.pulumi.azurenative.compute.inputs.KeyVaultAndSecretReferenceResponse;
import com.pulumi.core.annotations.Import;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Encryption settings for one disk volume.
 * 
 */
public final class EncryptionSettingsElementResponse extends com.pulumi.resources.InvokeArgs {

    public static final EncryptionSettingsElementResponse Empty = new EncryptionSettingsElementResponse();

    /**
     * Key Vault Secret Url and vault id of the disk encryption key
     * 
     */
    @Import(name="diskEncryptionKey")
    private @Nullable KeyVaultAndSecretReferenceResponse diskEncryptionKey;

    /**
     * @return Key Vault Secret Url and vault id of the disk encryption key
     * 
     */
    public Optional<KeyVaultAndSecretReferenceResponse> diskEncryptionKey() {
        return Optional.ofNullable(this.diskEncryptionKey);
    }

    /**
     * Key Vault Key Url and vault id of the key encryption key. KeyEncryptionKey is optional and when provided is used to unwrap the disk encryption key.
     * 
     */
    @Import(name="keyEncryptionKey")
    private @Nullable KeyVaultAndKeyReferenceResponse keyEncryptionKey;

    /**
     * @return Key Vault Key Url and vault id of the key encryption key. KeyEncryptionKey is optional and when provided is used to unwrap the disk encryption key.
     * 
     */
    public Optional<KeyVaultAndKeyReferenceResponse> keyEncryptionKey() {
        return Optional.ofNullable(this.keyEncryptionKey);
    }

    private EncryptionSettingsElementResponse() {}

    private EncryptionSettingsElementResponse(EncryptionSettingsElementResponse $) {
        this.diskEncryptionKey = $.diskEncryptionKey;
        this.keyEncryptionKey = $.keyEncryptionKey;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EncryptionSettingsElementResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EncryptionSettingsElementResponse $;

        public Builder() {
            $ = new EncryptionSettingsElementResponse();
        }

        public Builder(EncryptionSettingsElementResponse defaults) {
            $ = new EncryptionSettingsElementResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param diskEncryptionKey Key Vault Secret Url and vault id of the disk encryption key
         * 
         * @return builder
         * 
         */
        public Builder diskEncryptionKey(@Nullable KeyVaultAndSecretReferenceResponse diskEncryptionKey) {
            $.diskEncryptionKey = diskEncryptionKey;
            return this;
        }

        /**
         * @param keyEncryptionKey Key Vault Key Url and vault id of the key encryption key. KeyEncryptionKey is optional and when provided is used to unwrap the disk encryption key.
         * 
         * @return builder
         * 
         */
        public Builder keyEncryptionKey(@Nullable KeyVaultAndKeyReferenceResponse keyEncryptionKey) {
            $.keyEncryptionKey = keyEncryptionKey;
            return this;
        }

        public EncryptionSettingsElementResponse build() {
            return $;
        }
    }

}
