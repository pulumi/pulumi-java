// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.outputs;

import com.pulumi.azurenative.network.outputs.ExpressRouteLinkMacSecConfigResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ExpressRouteLinkResponse {
    /**
     * @return Administrative state of the physical port.
     * 
     */
    private final @Nullable String adminState;
    /**
     * @return Physical fiber port type.
     * 
     */
    private final String connectorType;
    /**
     * @return A unique read-only string that changes whenever the resource is updated.
     * 
     */
    private final String etag;
    /**
     * @return Resource ID.
     * 
     */
    private final @Nullable String id;
    /**
     * @return Name of Azure router interface.
     * 
     */
    private final String interfaceName;
    /**
     * @return MacSec configuration.
     * 
     */
    private final @Nullable ExpressRouteLinkMacSecConfigResponse macSecConfig;
    /**
     * @return Name of child port resource that is unique among child port resources of the parent.
     * 
     */
    private final @Nullable String name;
    /**
     * @return Mapping between physical port to patch panel port.
     * 
     */
    private final String patchPanelId;
    /**
     * @return The provisioning state of the express route link resource.
     * 
     */
    private final String provisioningState;
    /**
     * @return Mapping of physical patch panel to rack.
     * 
     */
    private final String rackId;
    /**
     * @return Name of Azure router associated with physical port.
     * 
     */
    private final String routerName;

    @CustomType.Constructor
    private ExpressRouteLinkResponse(
        @CustomType.Parameter("adminState") @Nullable String adminState,
        @CustomType.Parameter("connectorType") String connectorType,
        @CustomType.Parameter("etag") String etag,
        @CustomType.Parameter("id") @Nullable String id,
        @CustomType.Parameter("interfaceName") String interfaceName,
        @CustomType.Parameter("macSecConfig") @Nullable ExpressRouteLinkMacSecConfigResponse macSecConfig,
        @CustomType.Parameter("name") @Nullable String name,
        @CustomType.Parameter("patchPanelId") String patchPanelId,
        @CustomType.Parameter("provisioningState") String provisioningState,
        @CustomType.Parameter("rackId") String rackId,
        @CustomType.Parameter("routerName") String routerName) {
        this.adminState = adminState;
        this.connectorType = connectorType;
        this.etag = etag;
        this.id = id;
        this.interfaceName = interfaceName;
        this.macSecConfig = macSecConfig;
        this.name = name;
        this.patchPanelId = patchPanelId;
        this.provisioningState = provisioningState;
        this.rackId = rackId;
        this.routerName = routerName;
    }

    /**
     * @return Administrative state of the physical port.
     * 
     */
    public Optional<String> adminState() {
        return Optional.ofNullable(this.adminState);
    }
    /**
     * @return Physical fiber port type.
     * 
     */
    public String connectorType() {
        return this.connectorType;
    }
    /**
     * @return A unique read-only string that changes whenever the resource is updated.
     * 
     */
    public String etag() {
        return this.etag;
    }
    /**
     * @return Resource ID.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return Name of Azure router interface.
     * 
     */
    public String interfaceName() {
        return this.interfaceName;
    }
    /**
     * @return MacSec configuration.
     * 
     */
    public Optional<ExpressRouteLinkMacSecConfigResponse> macSecConfig() {
        return Optional.ofNullable(this.macSecConfig);
    }
    /**
     * @return Name of child port resource that is unique among child port resources of the parent.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return Mapping between physical port to patch panel port.
     * 
     */
    public String patchPanelId() {
        return this.patchPanelId;
    }
    /**
     * @return The provisioning state of the express route link resource.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return Mapping of physical patch panel to rack.
     * 
     */
    public String rackId() {
        return this.rackId;
    }
    /**
     * @return Name of Azure router associated with physical port.
     * 
     */
    public String routerName() {
        return this.routerName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ExpressRouteLinkResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String adminState;
        private String connectorType;
        private String etag;
        private @Nullable String id;
        private String interfaceName;
        private @Nullable ExpressRouteLinkMacSecConfigResponse macSecConfig;
        private @Nullable String name;
        private String patchPanelId;
        private String provisioningState;
        private String rackId;
        private String routerName;

        public Builder() {
    	      // Empty
        }

        public Builder(ExpressRouteLinkResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adminState = defaults.adminState;
    	      this.connectorType = defaults.connectorType;
    	      this.etag = defaults.etag;
    	      this.id = defaults.id;
    	      this.interfaceName = defaults.interfaceName;
    	      this.macSecConfig = defaults.macSecConfig;
    	      this.name = defaults.name;
    	      this.patchPanelId = defaults.patchPanelId;
    	      this.provisioningState = defaults.provisioningState;
    	      this.rackId = defaults.rackId;
    	      this.routerName = defaults.routerName;
        }

        public Builder adminState(@Nullable String adminState) {
            this.adminState = adminState;
            return this;
        }
        public Builder connectorType(String connectorType) {
            this.connectorType = Objects.requireNonNull(connectorType);
            return this;
        }
        public Builder etag(String etag) {
            this.etag = Objects.requireNonNull(etag);
            return this;
        }
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        public Builder interfaceName(String interfaceName) {
            this.interfaceName = Objects.requireNonNull(interfaceName);
            return this;
        }
        public Builder macSecConfig(@Nullable ExpressRouteLinkMacSecConfigResponse macSecConfig) {
            this.macSecConfig = macSecConfig;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        public Builder patchPanelId(String patchPanelId) {
            this.patchPanelId = Objects.requireNonNull(patchPanelId);
            return this;
        }
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        public Builder rackId(String rackId) {
            this.rackId = Objects.requireNonNull(rackId);
            return this;
        }
        public Builder routerName(String routerName) {
            this.routerName = Objects.requireNonNull(routerName);
            return this;
        }        public ExpressRouteLinkResponse build() {
            return new ExpressRouteLinkResponse(adminState, connectorType, etag, id, interfaceName, macSecConfig, name, patchPanelId, provisioningState, rackId, routerName);
        }
    }
}
