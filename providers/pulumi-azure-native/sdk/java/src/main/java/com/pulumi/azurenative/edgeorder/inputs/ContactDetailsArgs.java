// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.edgeorder.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Contact Details.
 * 
 */
public final class ContactDetailsArgs extends com.pulumi.resources.ResourceArgs {

    public static final ContactDetailsArgs Empty = new ContactDetailsArgs();

    /**
     * Contact name of the person.
     * 
     */
    @Import(name="contactName", required=true)
    private Output<String> contactName;

    /**
     * @return Contact name of the person.
     * 
     */
    public Output<String> contactName() {
        return this.contactName;
    }

    /**
     * List of Email-ids to be notified about job progress.
     * 
     */
    @Import(name="emailList", required=true)
    private Output<List<String>> emailList;

    /**
     * @return List of Email-ids to be notified about job progress.
     * 
     */
    public Output<List<String>> emailList() {
        return this.emailList;
    }

    /**
     * Mobile number of the contact person.
     * 
     */
    @Import(name="mobile")
    private @Nullable Output<String> mobile;

    /**
     * @return Mobile number of the contact person.
     * 
     */
    public Optional<Output<String>> mobile() {
        return Optional.ofNullable(this.mobile);
    }

    /**
     * Phone number of the contact person.
     * 
     */
    @Import(name="phone", required=true)
    private Output<String> phone;

    /**
     * @return Phone number of the contact person.
     * 
     */
    public Output<String> phone() {
        return this.phone;
    }

    /**
     * Phone extension number of the contact person.
     * 
     */
    @Import(name="phoneExtension")
    private @Nullable Output<String> phoneExtension;

    /**
     * @return Phone extension number of the contact person.
     * 
     */
    public Optional<Output<String>> phoneExtension() {
        return Optional.ofNullable(this.phoneExtension);
    }

    private ContactDetailsArgs() {}

    private ContactDetailsArgs(ContactDetailsArgs $) {
        this.contactName = $.contactName;
        this.emailList = $.emailList;
        this.mobile = $.mobile;
        this.phone = $.phone;
        this.phoneExtension = $.phoneExtension;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContactDetailsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContactDetailsArgs $;

        public Builder() {
            $ = new ContactDetailsArgs();
        }

        public Builder(ContactDetailsArgs defaults) {
            $ = new ContactDetailsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param contactName Contact name of the person.
         * 
         * @return builder
         * 
         */
        public Builder contactName(Output<String> contactName) {
            $.contactName = contactName;
            return this;
        }

        /**
         * @param contactName Contact name of the person.
         * 
         * @return builder
         * 
         */
        public Builder contactName(String contactName) {
            return contactName(Output.of(contactName));
        }

        /**
         * @param emailList List of Email-ids to be notified about job progress.
         * 
         * @return builder
         * 
         */
        public Builder emailList(Output<List<String>> emailList) {
            $.emailList = emailList;
            return this;
        }

        /**
         * @param emailList List of Email-ids to be notified about job progress.
         * 
         * @return builder
         * 
         */
        public Builder emailList(List<String> emailList) {
            return emailList(Output.of(emailList));
        }

        /**
         * @param emailList List of Email-ids to be notified about job progress.
         * 
         * @return builder
         * 
         */
        public Builder emailList(String... emailList) {
            return emailList(List.of(emailList));
        }

        /**
         * @param mobile Mobile number of the contact person.
         * 
         * @return builder
         * 
         */
        public Builder mobile(@Nullable Output<String> mobile) {
            $.mobile = mobile;
            return this;
        }

        /**
         * @param mobile Mobile number of the contact person.
         * 
         * @return builder
         * 
         */
        public Builder mobile(String mobile) {
            return mobile(Output.of(mobile));
        }

        /**
         * @param phone Phone number of the contact person.
         * 
         * @return builder
         * 
         */
        public Builder phone(Output<String> phone) {
            $.phone = phone;
            return this;
        }

        /**
         * @param phone Phone number of the contact person.
         * 
         * @return builder
         * 
         */
        public Builder phone(String phone) {
            return phone(Output.of(phone));
        }

        /**
         * @param phoneExtension Phone extension number of the contact person.
         * 
         * @return builder
         * 
         */
        public Builder phoneExtension(@Nullable Output<String> phoneExtension) {
            $.phoneExtension = phoneExtension;
            return this;
        }

        /**
         * @param phoneExtension Phone extension number of the contact person.
         * 
         * @return builder
         * 
         */
        public Builder phoneExtension(String phoneExtension) {
            return phoneExtension(Output.of(phoneExtension));
        }

        public ContactDetailsArgs build() {
            $.contactName = Objects.requireNonNull($.contactName, "expected parameter 'contactName' to be non-null");
            $.emailList = Objects.requireNonNull($.emailList, "expected parameter 'emailList' to be non-null");
            $.phone = Objects.requireNonNull($.phone, "expected parameter 'phone' to be non-null");
            return $;
        }
    }

}
