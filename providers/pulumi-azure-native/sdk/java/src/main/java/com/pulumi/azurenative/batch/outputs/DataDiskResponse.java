// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.batch.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DataDiskResponse {
    /**
     * Values are:
     * 
     *  none - The caching mode for the disk is not enabled.
     *  readOnly - The caching mode for the disk is read only.
     *  readWrite - The caching mode for the disk is read and write.
     * 
     *  The default value for caching is none. For information about the caching options see: https://blogs.msdn.microsoft.com/windowsazurestorage/2012/06/27/exploring-windows-azure-drives-disks-and-images/.
     * 
     */
    private final @Nullable String caching;
    private final Integer diskSizeGB;
    /**
     * The lun is used to uniquely identify each data disk. If attaching multiple disks, each should have a distinct lun. The value must be between 0 and 63, inclusive.
     * 
     */
    private final Integer lun;
    /**
     * If omitted, the default is &#34;Standard_LRS&#34;. Values are:
     * 
     *  Standard_LRS - The data disk should use standard locally redundant storage.
     *  Premium_LRS - The data disk should use premium locally redundant storage.
     * 
     */
    private final @Nullable String storageAccountType;

    @CustomType.Constructor
    private DataDiskResponse(
        @CustomType.Parameter("caching") @Nullable String caching,
        @CustomType.Parameter("diskSizeGB") Integer diskSizeGB,
        @CustomType.Parameter("lun") Integer lun,
        @CustomType.Parameter("storageAccountType") @Nullable String storageAccountType) {
        this.caching = caching;
        this.diskSizeGB = diskSizeGB;
        this.lun = lun;
        this.storageAccountType = storageAccountType;
    }

    /**
     * Values are:
     * 
     *  none - The caching mode for the disk is not enabled.
     *  readOnly - The caching mode for the disk is read only.
     *  readWrite - The caching mode for the disk is read and write.
     * 
     *  The default value for caching is none. For information about the caching options see: https://blogs.msdn.microsoft.com/windowsazurestorage/2012/06/27/exploring-windows-azure-drives-disks-and-images/.
     * 
    */
    public Optional<String> caching() {
        return Optional.ofNullable(this.caching);
    }
    public Integer diskSizeGB() {
        return this.diskSizeGB;
    }
    /**
     * The lun is used to uniquely identify each data disk. If attaching multiple disks, each should have a distinct lun. The value must be between 0 and 63, inclusive.
     * 
    */
    public Integer lun() {
        return this.lun;
    }
    /**
     * If omitted, the default is &#34;Standard_LRS&#34;. Values are:
     * 
     *  Standard_LRS - The data disk should use standard locally redundant storage.
     *  Premium_LRS - The data disk should use premium locally redundant storage.
     * 
    */
    public Optional<String> storageAccountType() {
        return Optional.ofNullable(this.storageAccountType);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DataDiskResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String caching;
        private Integer diskSizeGB;
        private Integer lun;
        private @Nullable String storageAccountType;

        public Builder() {
    	      // Empty
        }

        public Builder(DataDiskResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.caching = defaults.caching;
    	      this.diskSizeGB = defaults.diskSizeGB;
    	      this.lun = defaults.lun;
    	      this.storageAccountType = defaults.storageAccountType;
        }

        public Builder caching(@Nullable String caching) {
            this.caching = caching;
            return this;
        }
        public Builder diskSizeGB(Integer diskSizeGB) {
            this.diskSizeGB = Objects.requireNonNull(diskSizeGB);
            return this;
        }
        public Builder lun(Integer lun) {
            this.lun = Objects.requireNonNull(lun);
            return this;
        }
        public Builder storageAccountType(@Nullable String storageAccountType) {
            this.storageAccountType = storageAccountType;
            return this;
        }        public DataDiskResponse build() {
            return new DataDiskResponse(caching, diskSizeGB, lun, storageAccountType);
        }
    }
}
