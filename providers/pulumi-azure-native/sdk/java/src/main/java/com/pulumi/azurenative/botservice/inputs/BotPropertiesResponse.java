// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.botservice.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The parameters to provide for the Bot.
 * 
 */
public final class BotPropertiesResponse extends com.pulumi.resources.InvokeArgs {

    public static final BotPropertiesResponse Empty = new BotPropertiesResponse();

    /**
     * Contains resource all settings defined as key/value pairs.
     * 
     */
    @Import(name="allSettings")
    private @Nullable Map<String,String> allSettings;

    public Optional<Map<String,String>> allSettings() {
        return Optional.ofNullable(this.allSettings);
    }

    /**
     * The hint (e.g. keyVault secret resourceId) on how to fetch the app secret
     * 
     */
    @Import(name="appPasswordHint")
    private @Nullable String appPasswordHint;

    public Optional<String> appPasswordHint() {
        return Optional.ofNullable(this.appPasswordHint);
    }

    /**
     * The CMK encryption status
     * 
     */
    @Import(name="cmekEncryptionStatus", required=true)
    private String cmekEncryptionStatus;

    public String cmekEncryptionStatus() {
        return this.cmekEncryptionStatus;
    }

    /**
     * The CMK Url
     * 
     */
    @Import(name="cmekKeyVaultUrl")
    private @Nullable String cmekKeyVaultUrl;

    public Optional<String> cmekKeyVaultUrl() {
        return Optional.ofNullable(this.cmekKeyVaultUrl);
    }

    /**
     * Collection of channels for which the bot is configured
     * 
     */
    @Import(name="configuredChannels", required=true)
    private List<String> configuredChannels;

    public List<String> configuredChannels() {
        return this.configuredChannels;
    }

    /**
     * The description of the bot
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The Application Insights key
     * 
     */
    @Import(name="developerAppInsightKey")
    private @Nullable String developerAppInsightKey;

    public Optional<String> developerAppInsightKey() {
        return Optional.ofNullable(this.developerAppInsightKey);
    }

    /**
     * The Application Insights Api Key
     * 
     */
    @Import(name="developerAppInsightsApiKey")
    private @Nullable String developerAppInsightsApiKey;

    public Optional<String> developerAppInsightsApiKey() {
        return Optional.ofNullable(this.developerAppInsightsApiKey);
    }

    /**
     * The Application Insights App Id
     * 
     */
    @Import(name="developerAppInsightsApplicationId")
    private @Nullable String developerAppInsightsApplicationId;

    public Optional<String> developerAppInsightsApplicationId() {
        return Optional.ofNullable(this.developerAppInsightsApplicationId);
    }

    /**
     * Opt-out of local authentication and ensure only MSI and AAD can be used exclusively for authentication.
     * 
     */
    @Import(name="disableLocalAuth")
    private @Nullable Boolean disableLocalAuth;

    public Optional<Boolean> disableLocalAuth() {
        return Optional.ofNullable(this.disableLocalAuth);
    }

    /**
     * The Name of the bot
     * 
     */
    @Import(name="displayName", required=true)
    private String displayName;

    public String displayName() {
        return this.displayName;
    }

    /**
     * Collection of channels for which the bot is enabled
     * 
     */
    @Import(name="enabledChannels", required=true)
    private List<String> enabledChannels;

    public List<String> enabledChannels() {
        return this.enabledChannels;
    }

    /**
     * The bot&#39;s endpoint
     * 
     */
    @Import(name="endpoint", required=true)
    private String endpoint;

    public String endpoint() {
        return this.endpoint;
    }

    /**
     * The bot&#39;s endpoint version
     * 
     */
    @Import(name="endpointVersion", required=true)
    private String endpointVersion;

    public String endpointVersion() {
        return this.endpointVersion;
    }

    /**
     * The Icon Url of the bot
     * 
     */
    @Import(name="iconUrl")
    private @Nullable String iconUrl;

    public Optional<String> iconUrl() {
        return Optional.ofNullable(this.iconUrl);
    }

    /**
     * Whether Cmek is enabled
     * 
     */
    @Import(name="isCmekEnabled")
    private @Nullable Boolean isCmekEnabled;

    public Optional<Boolean> isCmekEnabled() {
        return Optional.ofNullable(this.isCmekEnabled);
    }

    /**
     * Whether the bot is developerAppInsightsApiKey set
     * 
     */
    @Import(name="isDeveloperAppInsightsApiKeySet", required=true)
    private Boolean isDeveloperAppInsightsApiKeySet;

    public Boolean isDeveloperAppInsightsApiKeySet() {
        return this.isDeveloperAppInsightsApiKeySet;
    }

    /**
     * Whether the bot is streaming supported
     * 
     */
    @Import(name="isStreamingSupported")
    private @Nullable Boolean isStreamingSupported;

    public Optional<Boolean> isStreamingSupported() {
        return Optional.ofNullable(this.isStreamingSupported);
    }

    /**
     * Collection of LUIS App Ids
     * 
     */
    @Import(name="luisAppIds")
    private @Nullable List<String> luisAppIds;

    public Optional<List<String>> luisAppIds() {
        return Optional.ofNullable(this.luisAppIds);
    }

    /**
     * The LUIS Key
     * 
     */
    @Import(name="luisKey")
    private @Nullable String luisKey;

    public Optional<String> luisKey() {
        return Optional.ofNullable(this.luisKey);
    }

    /**
     * The bot&#39;s manifest url
     * 
     */
    @Import(name="manifestUrl")
    private @Nullable String manifestUrl;

    public Optional<String> manifestUrl() {
        return Optional.ofNullable(this.manifestUrl);
    }

    /**
     * Token used to migrate non Azure bot to azure subscription
     * 
     */
    @Import(name="migrationToken", required=true)
    private String migrationToken;

    public String migrationToken() {
        return this.migrationToken;
    }

    /**
     * Microsoft App Id for the bot
     * 
     */
    @Import(name="msaAppId", required=true)
    private String msaAppId;

    public String msaAppId() {
        return this.msaAppId;
    }

    /**
     * Microsoft App Managed Identity Resource Id for the bot
     * 
     */
    @Import(name="msaAppMSIResourceId")
    private @Nullable String msaAppMSIResourceId;

    public Optional<String> msaAppMSIResourceId() {
        return Optional.ofNullable(this.msaAppMSIResourceId);
    }

    /**
     * Microsoft App Tenant Id for the bot
     * 
     */
    @Import(name="msaAppTenantId")
    private @Nullable String msaAppTenantId;

    public Optional<String> msaAppTenantId() {
        return Optional.ofNullable(this.msaAppTenantId);
    }

    /**
     * Microsoft App Type for the bot
     * 
     */
    @Import(name="msaAppType")
    private @Nullable String msaAppType;

    public Optional<String> msaAppType() {
        return Optional.ofNullable(this.msaAppType);
    }

    /**
     * The hint to browser (e.g. protocol handler) on how to open the bot for authoring
     * 
     */
    @Import(name="openWithHint")
    private @Nullable String openWithHint;

    public Optional<String> openWithHint() {
        return Optional.ofNullable(this.openWithHint);
    }

    /**
     * Contains resource parameters defined as key/value pairs.
     * 
     */
    @Import(name="parameters")
    private @Nullable Map<String,String> parameters;

    public Optional<Map<String,String>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    /**
     * Provisioning state of the resource
     * 
     */
    @Import(name="provisioningState", required=true)
    private String provisioningState;

    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Whether the bot is in an isolated network
     * 
     */
    @Import(name="publicNetworkAccess")
    private @Nullable String publicNetworkAccess;

    public Optional<String> publicNetworkAccess() {
        return Optional.ofNullable(this.publicNetworkAccess);
    }

    /**
     * Publishing credentials of the resource
     * 
     */
    @Import(name="publishingCredentials")
    private @Nullable String publishingCredentials;

    public Optional<String> publishingCredentials() {
        return Optional.ofNullable(this.publishingCredentials);
    }

    /**
     * The channel schema transformation version for the bot
     * 
     */
    @Import(name="schemaTransformationVersion")
    private @Nullable String schemaTransformationVersion;

    public Optional<String> schemaTransformationVersion() {
        return Optional.ofNullable(this.schemaTransformationVersion);
    }

    /**
     * The storage resourceId for the bot
     * 
     */
    @Import(name="storageResourceId")
    private @Nullable String storageResourceId;

    public Optional<String> storageResourceId() {
        return Optional.ofNullable(this.storageResourceId);
    }

    private BotPropertiesResponse() {}

    private BotPropertiesResponse(BotPropertiesResponse $) {
        this.allSettings = $.allSettings;
        this.appPasswordHint = $.appPasswordHint;
        this.cmekEncryptionStatus = $.cmekEncryptionStatus;
        this.cmekKeyVaultUrl = $.cmekKeyVaultUrl;
        this.configuredChannels = $.configuredChannels;
        this.description = $.description;
        this.developerAppInsightKey = $.developerAppInsightKey;
        this.developerAppInsightsApiKey = $.developerAppInsightsApiKey;
        this.developerAppInsightsApplicationId = $.developerAppInsightsApplicationId;
        this.disableLocalAuth = $.disableLocalAuth;
        this.displayName = $.displayName;
        this.enabledChannels = $.enabledChannels;
        this.endpoint = $.endpoint;
        this.endpointVersion = $.endpointVersion;
        this.iconUrl = $.iconUrl;
        this.isCmekEnabled = $.isCmekEnabled;
        this.isDeveloperAppInsightsApiKeySet = $.isDeveloperAppInsightsApiKeySet;
        this.isStreamingSupported = $.isStreamingSupported;
        this.luisAppIds = $.luisAppIds;
        this.luisKey = $.luisKey;
        this.manifestUrl = $.manifestUrl;
        this.migrationToken = $.migrationToken;
        this.msaAppId = $.msaAppId;
        this.msaAppMSIResourceId = $.msaAppMSIResourceId;
        this.msaAppTenantId = $.msaAppTenantId;
        this.msaAppType = $.msaAppType;
        this.openWithHint = $.openWithHint;
        this.parameters = $.parameters;
        this.provisioningState = $.provisioningState;
        this.publicNetworkAccess = $.publicNetworkAccess;
        this.publishingCredentials = $.publishingCredentials;
        this.schemaTransformationVersion = $.schemaTransformationVersion;
        this.storageResourceId = $.storageResourceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BotPropertiesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BotPropertiesResponse $;

        public Builder() {
            $ = new BotPropertiesResponse();
        }

        public Builder(BotPropertiesResponse defaults) {
            $ = new BotPropertiesResponse(Objects.requireNonNull(defaults));
        }

        public Builder allSettings(@Nullable Map<String,String> allSettings) {
            $.allSettings = allSettings;
            return this;
        }

        public Builder appPasswordHint(@Nullable String appPasswordHint) {
            $.appPasswordHint = appPasswordHint;
            return this;
        }

        public Builder cmekEncryptionStatus(String cmekEncryptionStatus) {
            $.cmekEncryptionStatus = cmekEncryptionStatus;
            return this;
        }

        public Builder cmekKeyVaultUrl(@Nullable String cmekKeyVaultUrl) {
            $.cmekKeyVaultUrl = cmekKeyVaultUrl;
            return this;
        }

        public Builder configuredChannels(List<String> configuredChannels) {
            $.configuredChannels = configuredChannels;
            return this;
        }

        public Builder configuredChannels(String... configuredChannels) {
            return configuredChannels(List.of(configuredChannels));
        }

        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        public Builder developerAppInsightKey(@Nullable String developerAppInsightKey) {
            $.developerAppInsightKey = developerAppInsightKey;
            return this;
        }

        public Builder developerAppInsightsApiKey(@Nullable String developerAppInsightsApiKey) {
            $.developerAppInsightsApiKey = developerAppInsightsApiKey;
            return this;
        }

        public Builder developerAppInsightsApplicationId(@Nullable String developerAppInsightsApplicationId) {
            $.developerAppInsightsApplicationId = developerAppInsightsApplicationId;
            return this;
        }

        public Builder disableLocalAuth(@Nullable Boolean disableLocalAuth) {
            $.disableLocalAuth = disableLocalAuth;
            return this;
        }

        public Builder displayName(String displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder enabledChannels(List<String> enabledChannels) {
            $.enabledChannels = enabledChannels;
            return this;
        }

        public Builder enabledChannels(String... enabledChannels) {
            return enabledChannels(List.of(enabledChannels));
        }

        public Builder endpoint(String endpoint) {
            $.endpoint = endpoint;
            return this;
        }

        public Builder endpointVersion(String endpointVersion) {
            $.endpointVersion = endpointVersion;
            return this;
        }

        public Builder iconUrl(@Nullable String iconUrl) {
            $.iconUrl = iconUrl;
            return this;
        }

        public Builder isCmekEnabled(@Nullable Boolean isCmekEnabled) {
            $.isCmekEnabled = isCmekEnabled;
            return this;
        }

        public Builder isDeveloperAppInsightsApiKeySet(Boolean isDeveloperAppInsightsApiKeySet) {
            $.isDeveloperAppInsightsApiKeySet = isDeveloperAppInsightsApiKeySet;
            return this;
        }

        public Builder isStreamingSupported(@Nullable Boolean isStreamingSupported) {
            $.isStreamingSupported = isStreamingSupported;
            return this;
        }

        public Builder luisAppIds(@Nullable List<String> luisAppIds) {
            $.luisAppIds = luisAppIds;
            return this;
        }

        public Builder luisAppIds(String... luisAppIds) {
            return luisAppIds(List.of(luisAppIds));
        }

        public Builder luisKey(@Nullable String luisKey) {
            $.luisKey = luisKey;
            return this;
        }

        public Builder manifestUrl(@Nullable String manifestUrl) {
            $.manifestUrl = manifestUrl;
            return this;
        }

        public Builder migrationToken(String migrationToken) {
            $.migrationToken = migrationToken;
            return this;
        }

        public Builder msaAppId(String msaAppId) {
            $.msaAppId = msaAppId;
            return this;
        }

        public Builder msaAppMSIResourceId(@Nullable String msaAppMSIResourceId) {
            $.msaAppMSIResourceId = msaAppMSIResourceId;
            return this;
        }

        public Builder msaAppTenantId(@Nullable String msaAppTenantId) {
            $.msaAppTenantId = msaAppTenantId;
            return this;
        }

        public Builder msaAppType(@Nullable String msaAppType) {
            $.msaAppType = msaAppType;
            return this;
        }

        public Builder openWithHint(@Nullable String openWithHint) {
            $.openWithHint = openWithHint;
            return this;
        }

        public Builder parameters(@Nullable Map<String,String> parameters) {
            $.parameters = parameters;
            return this;
        }

        public Builder provisioningState(String provisioningState) {
            $.provisioningState = provisioningState;
            return this;
        }

        public Builder publicNetworkAccess(@Nullable String publicNetworkAccess) {
            $.publicNetworkAccess = publicNetworkAccess;
            return this;
        }

        public Builder publishingCredentials(@Nullable String publishingCredentials) {
            $.publishingCredentials = publishingCredentials;
            return this;
        }

        public Builder schemaTransformationVersion(@Nullable String schemaTransformationVersion) {
            $.schemaTransformationVersion = schemaTransformationVersion;
            return this;
        }

        public Builder storageResourceId(@Nullable String storageResourceId) {
            $.storageResourceId = storageResourceId;
            return this;
        }

        public BotPropertiesResponse build() {
            $.cmekEncryptionStatus = Objects.requireNonNull($.cmekEncryptionStatus, "expected parameter 'cmekEncryptionStatus' to be non-null");
            $.configuredChannels = Objects.requireNonNull($.configuredChannels, "expected parameter 'configuredChannels' to be non-null");
            $.displayName = Objects.requireNonNull($.displayName, "expected parameter 'displayName' to be non-null");
            $.enabledChannels = Objects.requireNonNull($.enabledChannels, "expected parameter 'enabledChannels' to be non-null");
            $.endpoint = Objects.requireNonNull($.endpoint, "expected parameter 'endpoint' to be non-null");
            $.endpointVersion = Objects.requireNonNull($.endpointVersion, "expected parameter 'endpointVersion' to be non-null");
            $.isDeveloperAppInsightsApiKeySet = Objects.requireNonNull($.isDeveloperAppInsightsApiKeySet, "expected parameter 'isDeveloperAppInsightsApiKeySet' to be non-null");
            $.isStreamingSupported = Codegen.booleanProp("isStreamingSupported").arg($.isStreamingSupported).def(false).getNullable();
            $.migrationToken = Objects.requireNonNull($.migrationToken, "expected parameter 'migrationToken' to be non-null");
            $.msaAppId = Objects.requireNonNull($.msaAppId, "expected parameter 'msaAppId' to be non-null");
            $.provisioningState = Objects.requireNonNull($.provisioningState, "expected parameter 'provisioningState' to be non-null");
            $.publicNetworkAccess = Codegen.stringProp("publicNetworkAccess").arg($.publicNetworkAccess).def("Enabled").getNullable();
            return $;
        }
    }

}
