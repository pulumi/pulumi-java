// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.containerservice.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * OpenShiftManagedClusterMaterPoolProfile contains configuration for OpenShift master VMs.
 * 
 */
public final class OpenShiftManagedClusterMasterPoolProfileResponse extends com.pulumi.resources.InvokeArgs {

    public static final OpenShiftManagedClusterMasterPoolProfileResponse Empty = new OpenShiftManagedClusterMasterPoolProfileResponse();

    /**
     * Number of masters (VMs) to host docker containers. The default value is 3.
     * 
     */
    @Import(name="count", required=true)
    private Integer count;

    /**
     * @return Number of masters (VMs) to host docker containers. The default value is 3.
     * 
     */
    public Integer count() {
        return this.count;
    }

    /**
     * Unique name of the master pool profile in the context of the subscription and resource group.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return Unique name of the master pool profile in the context of the subscription and resource group.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux.
     * 
     */
    @Import(name="osType")
    private @Nullable String osType;

    /**
     * @return OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux.
     * 
     */
    public Optional<String> osType() {
        return Optional.ofNullable(this.osType);
    }

    /**
     * Subnet CIDR for the peering.
     * 
     */
    @Import(name="subnetCidr")
    private @Nullable String subnetCidr;

    /**
     * @return Subnet CIDR for the peering.
     * 
     */
    public Optional<String> subnetCidr() {
        return Optional.ofNullable(this.subnetCidr);
    }

    /**
     * Size of agent VMs.
     * 
     */
    @Import(name="vmSize", required=true)
    private String vmSize;

    /**
     * @return Size of agent VMs.
     * 
     */
    public String vmSize() {
        return this.vmSize;
    }

    private OpenShiftManagedClusterMasterPoolProfileResponse() {}

    private OpenShiftManagedClusterMasterPoolProfileResponse(OpenShiftManagedClusterMasterPoolProfileResponse $) {
        this.count = $.count;
        this.name = $.name;
        this.osType = $.osType;
        this.subnetCidr = $.subnetCidr;
        this.vmSize = $.vmSize;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OpenShiftManagedClusterMasterPoolProfileResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OpenShiftManagedClusterMasterPoolProfileResponse $;

        public Builder() {
            $ = new OpenShiftManagedClusterMasterPoolProfileResponse();
        }

        public Builder(OpenShiftManagedClusterMasterPoolProfileResponse defaults) {
            $ = new OpenShiftManagedClusterMasterPoolProfileResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param count Number of masters (VMs) to host docker containers. The default value is 3.
         * 
         * @return builder
         * 
         */
        public Builder count(Integer count) {
            $.count = count;
            return this;
        }

        /**
         * @param name Unique name of the master pool profile in the context of the subscription and resource group.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param osType OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux.
         * 
         * @return builder
         * 
         */
        public Builder osType(@Nullable String osType) {
            $.osType = osType;
            return this;
        }

        /**
         * @param subnetCidr Subnet CIDR for the peering.
         * 
         * @return builder
         * 
         */
        public Builder subnetCidr(@Nullable String subnetCidr) {
            $.subnetCidr = subnetCidr;
            return this;
        }

        /**
         * @param vmSize Size of agent VMs.
         * 
         * @return builder
         * 
         */
        public Builder vmSize(String vmSize) {
            $.vmSize = vmSize;
            return this;
        }

        public OpenShiftManagedClusterMasterPoolProfileResponse build() {
            $.count = Objects.requireNonNull($.count, "expected parameter 'count' to be non-null");
            $.vmSize = Objects.requireNonNull($.vmSize, "expected parameter 'vmSize' to be non-null");
            return $;
        }
    }

}
