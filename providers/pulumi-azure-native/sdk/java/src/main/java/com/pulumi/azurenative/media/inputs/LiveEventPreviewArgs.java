// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.media.inputs;

import com.pulumi.azurenative.media.inputs.LiveEventEndpointArgs;
import com.pulumi.azurenative.media.inputs.LiveEventPreviewAccessControlArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Live event preview settings.
 * 
 */
public final class LiveEventPreviewArgs extends com.pulumi.resources.ResourceArgs {

    public static final LiveEventPreviewArgs Empty = new LiveEventPreviewArgs();

    /**
     * The access control for live event preview.
     * 
     */
    @Import(name="accessControl")
    private @Nullable Output<LiveEventPreviewAccessControlArgs> accessControl;

    public Optional<Output<LiveEventPreviewAccessControlArgs>> accessControl() {
        return Optional.ofNullable(this.accessControl);
    }

    /**
     * An alternative media identifier associated with the streaming locator created for the preview. This value is specified at creation time and cannot be updated. The identifier can be used in the CustomLicenseAcquisitionUrlTemplate or the CustomKeyAcquisitionUrlTemplate of the StreamingPolicy specified in the StreamingPolicyName field.
     * 
     */
    @Import(name="alternativeMediaId")
    private @Nullable Output<String> alternativeMediaId;

    public Optional<Output<String>> alternativeMediaId() {
        return Optional.ofNullable(this.alternativeMediaId);
    }

    /**
     * The endpoints for preview. Do not share the preview URL with the live event audience.
     * 
     */
    @Import(name="endpoints")
    private @Nullable Output<List<LiveEventEndpointArgs>> endpoints;

    public Optional<Output<List<LiveEventEndpointArgs>>> endpoints() {
        return Optional.ofNullable(this.endpoints);
    }

    /**
     * The identifier of the preview locator in Guid format. Specifying this at creation time allows the caller to know the preview locator url before the event is created. If omitted, the service will generate a random identifier. This value cannot be updated once the live event is created.
     * 
     */
    @Import(name="previewLocator")
    private @Nullable Output<String> previewLocator;

    public Optional<Output<String>> previewLocator() {
        return Optional.ofNullable(this.previewLocator);
    }

    /**
     * The name of streaming policy used for the live event preview. This value is specified at creation time and cannot be updated.
     * 
     */
    @Import(name="streamingPolicyName")
    private @Nullable Output<String> streamingPolicyName;

    public Optional<Output<String>> streamingPolicyName() {
        return Optional.ofNullable(this.streamingPolicyName);
    }

    private LiveEventPreviewArgs() {}

    private LiveEventPreviewArgs(LiveEventPreviewArgs $) {
        this.accessControl = $.accessControl;
        this.alternativeMediaId = $.alternativeMediaId;
        this.endpoints = $.endpoints;
        this.previewLocator = $.previewLocator;
        this.streamingPolicyName = $.streamingPolicyName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LiveEventPreviewArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LiveEventPreviewArgs $;

        public Builder() {
            $ = new LiveEventPreviewArgs();
        }

        public Builder(LiveEventPreviewArgs defaults) {
            $ = new LiveEventPreviewArgs(Objects.requireNonNull(defaults));
        }

        public Builder accessControl(@Nullable Output<LiveEventPreviewAccessControlArgs> accessControl) {
            $.accessControl = accessControl;
            return this;
        }

        public Builder accessControl(LiveEventPreviewAccessControlArgs accessControl) {
            return accessControl(Output.of(accessControl));
        }

        public Builder alternativeMediaId(@Nullable Output<String> alternativeMediaId) {
            $.alternativeMediaId = alternativeMediaId;
            return this;
        }

        public Builder alternativeMediaId(String alternativeMediaId) {
            return alternativeMediaId(Output.of(alternativeMediaId));
        }

        public Builder endpoints(@Nullable Output<List<LiveEventEndpointArgs>> endpoints) {
            $.endpoints = endpoints;
            return this;
        }

        public Builder endpoints(List<LiveEventEndpointArgs> endpoints) {
            return endpoints(Output.of(endpoints));
        }

        public Builder endpoints(LiveEventEndpointArgs... endpoints) {
            return endpoints(List.of(endpoints));
        }

        public Builder previewLocator(@Nullable Output<String> previewLocator) {
            $.previewLocator = previewLocator;
            return this;
        }

        public Builder previewLocator(String previewLocator) {
            return previewLocator(Output.of(previewLocator));
        }

        public Builder streamingPolicyName(@Nullable Output<String> streamingPolicyName) {
            $.streamingPolicyName = streamingPolicyName;
            return this;
        }

        public Builder streamingPolicyName(String streamingPolicyName) {
            return streamingPolicyName(Output.of(streamingPolicyName));
        }

        public LiveEventPreviewArgs build() {
            return $;
        }
    }

}
