// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.azurenative.network.enums.ApplicationGatewayProtocol;
import com.pulumi.azurenative.network.inputs.ApplicationGatewayProbeHealthResponseMatchArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Probe of the application gateway.
 * 
 */
public final class ApplicationGatewayProbeArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApplicationGatewayProbeArgs Empty = new ApplicationGatewayProbeArgs();

    /**
     * Host name to send the probe to.
     * 
     */
    @Import(name="host")
      private final @Nullable Output<String> host;

    public Output<String> host() {
        return this.host == null ? Codegen.empty() : this.host;
    }

    /**
     * Resource ID.
     * 
     */
    @Import(name="id")
      private final @Nullable Output<String> id;

    public Output<String> id() {
        return this.id == null ? Codegen.empty() : this.id;
    }

    /**
     * The probing interval in seconds. This is the time interval between two consecutive probes. Acceptable values are from 1 second to 86400 seconds.
     * 
     */
    @Import(name="interval")
      private final @Nullable Output<Integer> interval;

    public Output<Integer> interval() {
        return this.interval == null ? Codegen.empty() : this.interval;
    }

    /**
     * Criterion for classifying a healthy probe response.
     * 
     */
    @Import(name="match")
      private final @Nullable Output<ApplicationGatewayProbeHealthResponseMatchArgs> match;

    public Output<ApplicationGatewayProbeHealthResponseMatchArgs> match() {
        return this.match == null ? Codegen.empty() : this.match;
    }

    /**
     * Minimum number of servers that are always marked healthy. Default value is 0.
     * 
     */
    @Import(name="minServers")
      private final @Nullable Output<Integer> minServers;

    public Output<Integer> minServers() {
        return this.minServers == null ? Codegen.empty() : this.minServers;
    }

    /**
     * Name of the probe that is unique within an Application Gateway.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * Relative path of probe. Valid path starts from '/'. Probe is sent to <Protocol>://<host>:<port><path>.
     * 
     */
    @Import(name="path")
      private final @Nullable Output<String> path;

    public Output<String> path() {
        return this.path == null ? Codegen.empty() : this.path;
    }

    /**
     * Whether the host header should be picked from the backend http settings. Default value is false.
     * 
     */
    @Import(name="pickHostNameFromBackendHttpSettings")
      private final @Nullable Output<Boolean> pickHostNameFromBackendHttpSettings;

    public Output<Boolean> pickHostNameFromBackendHttpSettings() {
        return this.pickHostNameFromBackendHttpSettings == null ? Codegen.empty() : this.pickHostNameFromBackendHttpSettings;
    }

    /**
     * Custom port which will be used for probing the backend servers. The valid value ranges from 1 to 65535. In case not set, port from http settings will be used. This property is valid for Standard_v2 and WAF_v2 only.
     * 
     */
    @Import(name="port")
      private final @Nullable Output<Integer> port;

    public Output<Integer> port() {
        return this.port == null ? Codegen.empty() : this.port;
    }

    /**
     * The protocol used for the probe.
     * 
     */
    @Import(name="protocol")
      private final @Nullable Output<Either<String,ApplicationGatewayProtocol>> protocol;

    public Output<Either<String,ApplicationGatewayProtocol>> protocol() {
        return this.protocol == null ? Codegen.empty() : this.protocol;
    }

    /**
     * The probe timeout in seconds. Probe marked as failed if valid response is not received with this timeout period. Acceptable values are from 1 second to 86400 seconds.
     * 
     */
    @Import(name="timeout")
      private final @Nullable Output<Integer> timeout;

    public Output<Integer> timeout() {
        return this.timeout == null ? Codegen.empty() : this.timeout;
    }

    /**
     * The probe retry count. Backend server is marked down after consecutive probe failure count reaches UnhealthyThreshold. Acceptable values are from 1 second to 20.
     * 
     */
    @Import(name="unhealthyThreshold")
      private final @Nullable Output<Integer> unhealthyThreshold;

    public Output<Integer> unhealthyThreshold() {
        return this.unhealthyThreshold == null ? Codegen.empty() : this.unhealthyThreshold;
    }

    public ApplicationGatewayProbeArgs(
        @Nullable Output<String> host,
        @Nullable Output<String> id,
        @Nullable Output<Integer> interval,
        @Nullable Output<ApplicationGatewayProbeHealthResponseMatchArgs> match,
        @Nullable Output<Integer> minServers,
        @Nullable Output<String> name,
        @Nullable Output<String> path,
        @Nullable Output<Boolean> pickHostNameFromBackendHttpSettings,
        @Nullable Output<Integer> port,
        @Nullable Output<Either<String,ApplicationGatewayProtocol>> protocol,
        @Nullable Output<Integer> timeout,
        @Nullable Output<Integer> unhealthyThreshold) {
        this.host = host;
        this.id = id;
        this.interval = interval;
        this.match = match;
        this.minServers = minServers;
        this.name = name;
        this.path = path;
        this.pickHostNameFromBackendHttpSettings = pickHostNameFromBackendHttpSettings;
        this.port = port;
        this.protocol = protocol;
        this.timeout = timeout;
        this.unhealthyThreshold = unhealthyThreshold;
    }

    private ApplicationGatewayProbeArgs() {
        this.host = Codegen.empty();
        this.id = Codegen.empty();
        this.interval = Codegen.empty();
        this.match = Codegen.empty();
        this.minServers = Codegen.empty();
        this.name = Codegen.empty();
        this.path = Codegen.empty();
        this.pickHostNameFromBackendHttpSettings = Codegen.empty();
        this.port = Codegen.empty();
        this.protocol = Codegen.empty();
        this.timeout = Codegen.empty();
        this.unhealthyThreshold = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ApplicationGatewayProbeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> host;
        private @Nullable Output<String> id;
        private @Nullable Output<Integer> interval;
        private @Nullable Output<ApplicationGatewayProbeHealthResponseMatchArgs> match;
        private @Nullable Output<Integer> minServers;
        private @Nullable Output<String> name;
        private @Nullable Output<String> path;
        private @Nullable Output<Boolean> pickHostNameFromBackendHttpSettings;
        private @Nullable Output<Integer> port;
        private @Nullable Output<Either<String,ApplicationGatewayProtocol>> protocol;
        private @Nullable Output<Integer> timeout;
        private @Nullable Output<Integer> unhealthyThreshold;

        public Builder() {
    	      // Empty
        }

        public Builder(ApplicationGatewayProbeArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.host = defaults.host;
    	      this.id = defaults.id;
    	      this.interval = defaults.interval;
    	      this.match = defaults.match;
    	      this.minServers = defaults.minServers;
    	      this.name = defaults.name;
    	      this.path = defaults.path;
    	      this.pickHostNameFromBackendHttpSettings = defaults.pickHostNameFromBackendHttpSettings;
    	      this.port = defaults.port;
    	      this.protocol = defaults.protocol;
    	      this.timeout = defaults.timeout;
    	      this.unhealthyThreshold = defaults.unhealthyThreshold;
        }

        public Builder host(@Nullable Output<String> host) {
            this.host = host;
            return this;
        }
        public Builder host(@Nullable String host) {
            this.host = Codegen.ofNullable(host);
            return this;
        }
        public Builder id(@Nullable Output<String> id) {
            this.id = id;
            return this;
        }
        public Builder id(@Nullable String id) {
            this.id = Codegen.ofNullable(id);
            return this;
        }
        public Builder interval(@Nullable Output<Integer> interval) {
            this.interval = interval;
            return this;
        }
        public Builder interval(@Nullable Integer interval) {
            this.interval = Codegen.ofNullable(interval);
            return this;
        }
        public Builder match(@Nullable Output<ApplicationGatewayProbeHealthResponseMatchArgs> match) {
            this.match = match;
            return this;
        }
        public Builder match(@Nullable ApplicationGatewayProbeHealthResponseMatchArgs match) {
            this.match = Codegen.ofNullable(match);
            return this;
        }
        public Builder minServers(@Nullable Output<Integer> minServers) {
            this.minServers = minServers;
            return this;
        }
        public Builder minServers(@Nullable Integer minServers) {
            this.minServers = Codegen.ofNullable(minServers);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder path(@Nullable Output<String> path) {
            this.path = path;
            return this;
        }
        public Builder path(@Nullable String path) {
            this.path = Codegen.ofNullable(path);
            return this;
        }
        public Builder pickHostNameFromBackendHttpSettings(@Nullable Output<Boolean> pickHostNameFromBackendHttpSettings) {
            this.pickHostNameFromBackendHttpSettings = pickHostNameFromBackendHttpSettings;
            return this;
        }
        public Builder pickHostNameFromBackendHttpSettings(@Nullable Boolean pickHostNameFromBackendHttpSettings) {
            this.pickHostNameFromBackendHttpSettings = Codegen.ofNullable(pickHostNameFromBackendHttpSettings);
            return this;
        }
        public Builder port(@Nullable Output<Integer> port) {
            this.port = port;
            return this;
        }
        public Builder port(@Nullable Integer port) {
            this.port = Codegen.ofNullable(port);
            return this;
        }
        public Builder protocol(@Nullable Output<Either<String,ApplicationGatewayProtocol>> protocol) {
            this.protocol = protocol;
            return this;
        }
        public Builder protocol(@Nullable Either<String,ApplicationGatewayProtocol> protocol) {
            this.protocol = Codegen.ofNullable(protocol);
            return this;
        }
        public Builder timeout(@Nullable Output<Integer> timeout) {
            this.timeout = timeout;
            return this;
        }
        public Builder timeout(@Nullable Integer timeout) {
            this.timeout = Codegen.ofNullable(timeout);
            return this;
        }
        public Builder unhealthyThreshold(@Nullable Output<Integer> unhealthyThreshold) {
            this.unhealthyThreshold = unhealthyThreshold;
            return this;
        }
        public Builder unhealthyThreshold(@Nullable Integer unhealthyThreshold) {
            this.unhealthyThreshold = Codegen.ofNullable(unhealthyThreshold);
            return this;
        }        public ApplicationGatewayProbeArgs build() {
            return new ApplicationGatewayProbeArgs(host, id, interval, match, minServers, name, path, pickHostNameFromBackendHttpSettings, port, protocol, timeout, unhealthyThreshold);
        }
    }
}
