// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.logic.inputs;

import com.pulumi.azurenative.logic.enums.SegmentTerminatorSuffix;
import com.pulumi.azurenative.logic.enums.X12CharacterSet;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


/**
 * The X12 agreement framing settings.
 * 
 */
public final class X12FramingSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final X12FramingSettingsArgs Empty = new X12FramingSettingsArgs();

    /**
     * The X12 character set.
     * 
     */
    @Import(name="characterSet", required=true)
      private final Output<Either<String,X12CharacterSet>> characterSet;

    public Output<Either<String,X12CharacterSet>> characterSet() {
        return this.characterSet;
    }

    /**
     * The component separator.
     * 
     */
    @Import(name="componentSeparator", required=true)
      private final Output<Integer> componentSeparator;

    public Output<Integer> componentSeparator() {
        return this.componentSeparator;
    }

    /**
     * The data element separator.
     * 
     */
    @Import(name="dataElementSeparator", required=true)
      private final Output<Integer> dataElementSeparator;

    public Output<Integer> dataElementSeparator() {
        return this.dataElementSeparator;
    }

    /**
     * The replacement character.
     * 
     */
    @Import(name="replaceCharacter", required=true)
      private final Output<Integer> replaceCharacter;

    public Output<Integer> replaceCharacter() {
        return this.replaceCharacter;
    }

    /**
     * The value indicating whether to replace separators in payload.
     * 
     */
    @Import(name="replaceSeparatorsInPayload", required=true)
      private final Output<Boolean> replaceSeparatorsInPayload;

    public Output<Boolean> replaceSeparatorsInPayload() {
        return this.replaceSeparatorsInPayload;
    }

    /**
     * The segment terminator.
     * 
     */
    @Import(name="segmentTerminator", required=true)
      private final Output<Integer> segmentTerminator;

    public Output<Integer> segmentTerminator() {
        return this.segmentTerminator;
    }

    /**
     * The segment terminator suffix.
     * 
     */
    @Import(name="segmentTerminatorSuffix", required=true)
      private final Output<SegmentTerminatorSuffix> segmentTerminatorSuffix;

    public Output<SegmentTerminatorSuffix> segmentTerminatorSuffix() {
        return this.segmentTerminatorSuffix;
    }

    public X12FramingSettingsArgs(
        Output<Either<String,X12CharacterSet>> characterSet,
        Output<Integer> componentSeparator,
        Output<Integer> dataElementSeparator,
        Output<Integer> replaceCharacter,
        Output<Boolean> replaceSeparatorsInPayload,
        Output<Integer> segmentTerminator,
        Output<SegmentTerminatorSuffix> segmentTerminatorSuffix) {
        this.characterSet = Objects.requireNonNull(characterSet, "expected parameter 'characterSet' to be non-null");
        this.componentSeparator = Objects.requireNonNull(componentSeparator, "expected parameter 'componentSeparator' to be non-null");
        this.dataElementSeparator = Objects.requireNonNull(dataElementSeparator, "expected parameter 'dataElementSeparator' to be non-null");
        this.replaceCharacter = Objects.requireNonNull(replaceCharacter, "expected parameter 'replaceCharacter' to be non-null");
        this.replaceSeparatorsInPayload = Objects.requireNonNull(replaceSeparatorsInPayload, "expected parameter 'replaceSeparatorsInPayload' to be non-null");
        this.segmentTerminator = Objects.requireNonNull(segmentTerminator, "expected parameter 'segmentTerminator' to be non-null");
        this.segmentTerminatorSuffix = Objects.requireNonNull(segmentTerminatorSuffix, "expected parameter 'segmentTerminatorSuffix' to be non-null");
    }

    private X12FramingSettingsArgs() {
        this.characterSet = Codegen.empty();
        this.componentSeparator = Codegen.empty();
        this.dataElementSeparator = Codegen.empty();
        this.replaceCharacter = Codegen.empty();
        this.replaceSeparatorsInPayload = Codegen.empty();
        this.segmentTerminator = Codegen.empty();
        this.segmentTerminatorSuffix = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(X12FramingSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<Either<String,X12CharacterSet>> characterSet;
        private Output<Integer> componentSeparator;
        private Output<Integer> dataElementSeparator;
        private Output<Integer> replaceCharacter;
        private Output<Boolean> replaceSeparatorsInPayload;
        private Output<Integer> segmentTerminator;
        private Output<SegmentTerminatorSuffix> segmentTerminatorSuffix;

        public Builder() {
    	      // Empty
        }

        public Builder(X12FramingSettingsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.characterSet = defaults.characterSet;
    	      this.componentSeparator = defaults.componentSeparator;
    	      this.dataElementSeparator = defaults.dataElementSeparator;
    	      this.replaceCharacter = defaults.replaceCharacter;
    	      this.replaceSeparatorsInPayload = defaults.replaceSeparatorsInPayload;
    	      this.segmentTerminator = defaults.segmentTerminator;
    	      this.segmentTerminatorSuffix = defaults.segmentTerminatorSuffix;
        }

        public Builder characterSet(Output<Either<String,X12CharacterSet>> characterSet) {
            this.characterSet = Objects.requireNonNull(characterSet);
            return this;
        }
        public Builder characterSet(Either<String,X12CharacterSet> characterSet) {
            this.characterSet = Output.of(Objects.requireNonNull(characterSet));
            return this;
        }
        public Builder componentSeparator(Output<Integer> componentSeparator) {
            this.componentSeparator = Objects.requireNonNull(componentSeparator);
            return this;
        }
        public Builder componentSeparator(Integer componentSeparator) {
            this.componentSeparator = Output.of(Objects.requireNonNull(componentSeparator));
            return this;
        }
        public Builder dataElementSeparator(Output<Integer> dataElementSeparator) {
            this.dataElementSeparator = Objects.requireNonNull(dataElementSeparator);
            return this;
        }
        public Builder dataElementSeparator(Integer dataElementSeparator) {
            this.dataElementSeparator = Output.of(Objects.requireNonNull(dataElementSeparator));
            return this;
        }
        public Builder replaceCharacter(Output<Integer> replaceCharacter) {
            this.replaceCharacter = Objects.requireNonNull(replaceCharacter);
            return this;
        }
        public Builder replaceCharacter(Integer replaceCharacter) {
            this.replaceCharacter = Output.of(Objects.requireNonNull(replaceCharacter));
            return this;
        }
        public Builder replaceSeparatorsInPayload(Output<Boolean> replaceSeparatorsInPayload) {
            this.replaceSeparatorsInPayload = Objects.requireNonNull(replaceSeparatorsInPayload);
            return this;
        }
        public Builder replaceSeparatorsInPayload(Boolean replaceSeparatorsInPayload) {
            this.replaceSeparatorsInPayload = Output.of(Objects.requireNonNull(replaceSeparatorsInPayload));
            return this;
        }
        public Builder segmentTerminator(Output<Integer> segmentTerminator) {
            this.segmentTerminator = Objects.requireNonNull(segmentTerminator);
            return this;
        }
        public Builder segmentTerminator(Integer segmentTerminator) {
            this.segmentTerminator = Output.of(Objects.requireNonNull(segmentTerminator));
            return this;
        }
        public Builder segmentTerminatorSuffix(Output<SegmentTerminatorSuffix> segmentTerminatorSuffix) {
            this.segmentTerminatorSuffix = Objects.requireNonNull(segmentTerminatorSuffix);
            return this;
        }
        public Builder segmentTerminatorSuffix(SegmentTerminatorSuffix segmentTerminatorSuffix) {
            this.segmentTerminatorSuffix = Output.of(Objects.requireNonNull(segmentTerminatorSuffix));
            return this;
        }        public X12FramingSettingsArgs build() {
            return new X12FramingSettingsArgs(characterSet, componentSeparator, dataElementSeparator, replaceCharacter, replaceSeparatorsInPayload, segmentTerminator, segmentTerminatorSuffix);
        }
    }
}
