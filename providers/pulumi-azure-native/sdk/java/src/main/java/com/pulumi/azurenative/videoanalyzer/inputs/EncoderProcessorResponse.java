// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.videoanalyzer.inputs;

import com.pulumi.azurenative.videoanalyzer.inputs.EncoderCustomPresetResponse;
import com.pulumi.azurenative.videoanalyzer.inputs.EncoderSystemPresetResponse;
import com.pulumi.azurenative.videoanalyzer.inputs.NodeInputResponse;
import com.pulumi.core.Either;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Encoder processor allows for encoding of the input content. For example, it can used to change the resolution from 4K to 1280x720.
 * 
 */
public final class EncoderProcessorResponse extends com.pulumi.resources.InvokeArgs {

    public static final EncoderProcessorResponse Empty = new EncoderProcessorResponse();

    /**
     * An array of upstream node references within the topology to be used as inputs for this node.
     * 
     */
    @Import(name="inputs", required=true)
      private final List<NodeInputResponse> inputs;

    public List<NodeInputResponse> inputs() {
        return this.inputs;
    }

    /**
     * Node name. Must be unique within the topology.
     * 
     */
    @Import(name="name", required=true)
      private final String name;

    public String name() {
        return this.name;
    }

    /**
     * The encoder preset, which defines the recipe or instructions on how the input content should be processed.
     * 
     */
    @Import(name="preset", required=true)
      private final Either<EncoderCustomPresetResponse,EncoderSystemPresetResponse> preset;

    public Either<EncoderCustomPresetResponse,EncoderSystemPresetResponse> preset() {
        return this.preset;
    }

    /**
     * The discriminator for derived types.
     * Expected value is &#39;#Microsoft.VideoAnalyzer.EncoderProcessor&#39;.
     * 
     */
    @Import(name="type", required=true)
      private final String type;

    public String type() {
        return this.type;
    }

    public EncoderProcessorResponse(
        List<NodeInputResponse> inputs,
        String name,
        Either<EncoderCustomPresetResponse,EncoderSystemPresetResponse> preset,
        String type) {
        this.inputs = Objects.requireNonNull(inputs, "expected parameter 'inputs' to be non-null");
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.preset = Objects.requireNonNull(preset, "expected parameter 'preset' to be non-null");
        this.type = Codegen.stringProp("type").arg(type).require();
    }

    private EncoderProcessorResponse() {
        this.inputs = List.of();
        this.name = null;
        this.preset = null;
        this.type = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EncoderProcessorResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<NodeInputResponse> inputs;
        private String name;
        private Either<EncoderCustomPresetResponse,EncoderSystemPresetResponse> preset;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(EncoderProcessorResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.inputs = defaults.inputs;
    	      this.name = defaults.name;
    	      this.preset = defaults.preset;
    	      this.type = defaults.type;
        }

        public Builder inputs(List<NodeInputResponse> inputs) {
            this.inputs = Objects.requireNonNull(inputs);
            return this;
        }
        public Builder inputs(NodeInputResponse... inputs) {
            return inputs(List.of(inputs));
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder preset(Either<EncoderCustomPresetResponse,EncoderSystemPresetResponse> preset) {
            this.preset = Objects.requireNonNull(preset);
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }        public EncoderProcessorResponse build() {
            return new EncoderProcessorResponse(inputs, name, preset, type);
        }
    }
}
