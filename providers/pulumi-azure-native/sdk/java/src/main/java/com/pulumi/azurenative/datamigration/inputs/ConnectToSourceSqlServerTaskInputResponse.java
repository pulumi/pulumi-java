// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datamigration.inputs;

import com.pulumi.azurenative.datamigration.inputs.SqlConnectionInfoResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Input for the task that validates connection to SQL Server and also validates source server requirements
 * 
 */
public final class ConnectToSourceSqlServerTaskInputResponse extends com.pulumi.resources.InvokeArgs {

    public static final ConnectToSourceSqlServerTaskInputResponse Empty = new ConnectToSourceSqlServerTaskInputResponse();

    /**
     * Permission group for validations
     * 
     */
    @Import(name="checkPermissionsGroup")
    private @Nullable String checkPermissionsGroup;

    /**
     * @return Permission group for validations
     * 
     */
    public Optional<String> checkPermissionsGroup() {
        return Optional.ofNullable(this.checkPermissionsGroup);
    }

    /**
     * Flag for whether to collect agent jobs from source server.
     * 
     */
    @Import(name="collectAgentJobs")
    private @Nullable Boolean collectAgentJobs;

    /**
     * @return Flag for whether to collect agent jobs from source server.
     * 
     */
    public Optional<Boolean> collectAgentJobs() {
        return Optional.ofNullable(this.collectAgentJobs);
    }

    /**
     * Flag for whether to collect logins from source server.
     * 
     */
    @Import(name="collectLogins")
    private @Nullable Boolean collectLogins;

    /**
     * @return Flag for whether to collect logins from source server.
     * 
     */
    public Optional<Boolean> collectLogins() {
        return Optional.ofNullable(this.collectLogins);
    }

    /**
     * Connection information for Source SQL Server
     * 
     */
    @Import(name="sourceConnectionInfo", required=true)
    private SqlConnectionInfoResponse sourceConnectionInfo;

    /**
     * @return Connection information for Source SQL Server
     * 
     */
    public SqlConnectionInfoResponse sourceConnectionInfo() {
        return this.sourceConnectionInfo;
    }

    private ConnectToSourceSqlServerTaskInputResponse() {}

    private ConnectToSourceSqlServerTaskInputResponse(ConnectToSourceSqlServerTaskInputResponse $) {
        this.checkPermissionsGroup = $.checkPermissionsGroup;
        this.collectAgentJobs = $.collectAgentJobs;
        this.collectLogins = $.collectLogins;
        this.sourceConnectionInfo = $.sourceConnectionInfo;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectToSourceSqlServerTaskInputResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectToSourceSqlServerTaskInputResponse $;

        public Builder() {
            $ = new ConnectToSourceSqlServerTaskInputResponse();
        }

        public Builder(ConnectToSourceSqlServerTaskInputResponse defaults) {
            $ = new ConnectToSourceSqlServerTaskInputResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param checkPermissionsGroup Permission group for validations
         * 
         * @return builder
         * 
         */
        public Builder checkPermissionsGroup(@Nullable String checkPermissionsGroup) {
            $.checkPermissionsGroup = checkPermissionsGroup;
            return this;
        }

        /**
         * @param collectAgentJobs Flag for whether to collect agent jobs from source server.
         * 
         * @return builder
         * 
         */
        public Builder collectAgentJobs(@Nullable Boolean collectAgentJobs) {
            $.collectAgentJobs = collectAgentJobs;
            return this;
        }

        /**
         * @param collectLogins Flag for whether to collect logins from source server.
         * 
         * @return builder
         * 
         */
        public Builder collectLogins(@Nullable Boolean collectLogins) {
            $.collectLogins = collectLogins;
            return this;
        }

        /**
         * @param sourceConnectionInfo Connection information for Source SQL Server
         * 
         * @return builder
         * 
         */
        public Builder sourceConnectionInfo(SqlConnectionInfoResponse sourceConnectionInfo) {
            $.sourceConnectionInfo = sourceConnectionInfo;
            return this;
        }

        public ConnectToSourceSqlServerTaskInputResponse build() {
            $.collectAgentJobs = Codegen.booleanProp("collectAgentJobs").arg($.collectAgentJobs).def(false).getNullable();
            $.collectLogins = Codegen.booleanProp("collectLogins").arg($.collectLogins).def(false).getNullable();
            $.sourceConnectionInfo = Objects.requireNonNull($.sourceConnectionInfo, "expected parameter 'sourceConnectionInfo' to be non-null");
            return $;
        }
    }

}
