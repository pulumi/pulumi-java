// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.compute.inputs;

import com.pulumi.azurenative.compute.inputs.VirtualMachineScaleSetManagedDiskParametersResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Describes a virtual machine scale set data disk.
 * 
 */
public final class VirtualMachineScaleSetDataDiskResponse extends com.pulumi.resources.InvokeArgs {

    public static final VirtualMachineScaleSetDataDiskResponse Empty = new VirtualMachineScaleSetDataDiskResponse();

    /**
     * Specifies the caching requirements. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt; **None** &lt;br&gt;&lt;br&gt; **ReadOnly** &lt;br&gt;&lt;br&gt; **ReadWrite** &lt;br&gt;&lt;br&gt; Default: **None for Standard storage. ReadOnly for Premium storage**
     * 
     */
    @Import(name="caching")
    private @Nullable String caching;

    /**
     * @return Specifies the caching requirements. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt; **None** &lt;br&gt;&lt;br&gt; **ReadOnly** &lt;br&gt;&lt;br&gt; **ReadWrite** &lt;br&gt;&lt;br&gt; Default: **None for Standard storage. ReadOnly for Premium storage**
     * 
     */
    public Optional<String> caching() {
        return Optional.ofNullable(this.caching);
    }

    /**
     * The create option.
     * 
     */
    @Import(name="createOption", required=true)
    private String createOption;

    /**
     * @return The create option.
     * 
     */
    public String createOption() {
        return this.createOption;
    }

    /**
     * Specifies the Read-Write IOPS for the managed disk. Should be used only when StorageAccountType is UltraSSD_LRS. If not specified, a default value would be assigned based on diskSizeGB.
     * 
     */
    @Import(name="diskIOPSReadWrite")
    private @Nullable Double diskIOPSReadWrite;

    /**
     * @return Specifies the Read-Write IOPS for the managed disk. Should be used only when StorageAccountType is UltraSSD_LRS. If not specified, a default value would be assigned based on diskSizeGB.
     * 
     */
    public Optional<Double> diskIOPSReadWrite() {
        return Optional.ofNullable(this.diskIOPSReadWrite);
    }

    /**
     * Specifies the bandwidth in MB per second for the managed disk. Should be used only when StorageAccountType is UltraSSD_LRS. If not specified, a default value would be assigned based on diskSizeGB.
     * 
     */
    @Import(name="diskMBpsReadWrite")
    private @Nullable Double diskMBpsReadWrite;

    /**
     * @return Specifies the bandwidth in MB per second for the managed disk. Should be used only when StorageAccountType is UltraSSD_LRS. If not specified, a default value would be assigned based on diskSizeGB.
     * 
     */
    public Optional<Double> diskMBpsReadWrite() {
        return Optional.ofNullable(this.diskMBpsReadWrite);
    }

    /**
     * Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. &lt;br&gt;&lt;br&gt; This value cannot be larger than 1023 GB
     * 
     */
    @Import(name="diskSizeGB")
    private @Nullable Integer diskSizeGB;

    /**
     * @return Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. &lt;br&gt;&lt;br&gt; This value cannot be larger than 1023 GB
     * 
     */
    public Optional<Integer> diskSizeGB() {
        return Optional.ofNullable(this.diskSizeGB);
    }

    /**
     * Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data disk attached to a VM.
     * 
     */
    @Import(name="lun", required=true)
    private Integer lun;

    /**
     * @return Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data disk attached to a VM.
     * 
     */
    public Integer lun() {
        return this.lun;
    }

    /**
     * The managed disk parameters.
     * 
     */
    @Import(name="managedDisk")
    private @Nullable VirtualMachineScaleSetManagedDiskParametersResponse managedDisk;

    /**
     * @return The managed disk parameters.
     * 
     */
    public Optional<VirtualMachineScaleSetManagedDiskParametersResponse> managedDisk() {
        return Optional.ofNullable(this.managedDisk);
    }

    /**
     * The disk name.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return The disk name.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Specifies whether writeAccelerator should be enabled or disabled on the disk.
     * 
     */
    @Import(name="writeAcceleratorEnabled")
    private @Nullable Boolean writeAcceleratorEnabled;

    /**
     * @return Specifies whether writeAccelerator should be enabled or disabled on the disk.
     * 
     */
    public Optional<Boolean> writeAcceleratorEnabled() {
        return Optional.ofNullable(this.writeAcceleratorEnabled);
    }

    private VirtualMachineScaleSetDataDiskResponse() {}

    private VirtualMachineScaleSetDataDiskResponse(VirtualMachineScaleSetDataDiskResponse $) {
        this.caching = $.caching;
        this.createOption = $.createOption;
        this.diskIOPSReadWrite = $.diskIOPSReadWrite;
        this.diskMBpsReadWrite = $.diskMBpsReadWrite;
        this.diskSizeGB = $.diskSizeGB;
        this.lun = $.lun;
        this.managedDisk = $.managedDisk;
        this.name = $.name;
        this.writeAcceleratorEnabled = $.writeAcceleratorEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VirtualMachineScaleSetDataDiskResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VirtualMachineScaleSetDataDiskResponse $;

        public Builder() {
            $ = new VirtualMachineScaleSetDataDiskResponse();
        }

        public Builder(VirtualMachineScaleSetDataDiskResponse defaults) {
            $ = new VirtualMachineScaleSetDataDiskResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param caching Specifies the caching requirements. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt; **None** &lt;br&gt;&lt;br&gt; **ReadOnly** &lt;br&gt;&lt;br&gt; **ReadWrite** &lt;br&gt;&lt;br&gt; Default: **None for Standard storage. ReadOnly for Premium storage**
         * 
         * @return builder
         * 
         */
        public Builder caching(@Nullable String caching) {
            $.caching = caching;
            return this;
        }

        /**
         * @param createOption The create option.
         * 
         * @return builder
         * 
         */
        public Builder createOption(String createOption) {
            $.createOption = createOption;
            return this;
        }

        /**
         * @param diskIOPSReadWrite Specifies the Read-Write IOPS for the managed disk. Should be used only when StorageAccountType is UltraSSD_LRS. If not specified, a default value would be assigned based on diskSizeGB.
         * 
         * @return builder
         * 
         */
        public Builder diskIOPSReadWrite(@Nullable Double diskIOPSReadWrite) {
            $.diskIOPSReadWrite = diskIOPSReadWrite;
            return this;
        }

        /**
         * @param diskMBpsReadWrite Specifies the bandwidth in MB per second for the managed disk. Should be used only when StorageAccountType is UltraSSD_LRS. If not specified, a default value would be assigned based on diskSizeGB.
         * 
         * @return builder
         * 
         */
        public Builder diskMBpsReadWrite(@Nullable Double diskMBpsReadWrite) {
            $.diskMBpsReadWrite = diskMBpsReadWrite;
            return this;
        }

        /**
         * @param diskSizeGB Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. &lt;br&gt;&lt;br&gt; This value cannot be larger than 1023 GB
         * 
         * @return builder
         * 
         */
        public Builder diskSizeGB(@Nullable Integer diskSizeGB) {
            $.diskSizeGB = diskSizeGB;
            return this;
        }

        /**
         * @param lun Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data disk attached to a VM.
         * 
         * @return builder
         * 
         */
        public Builder lun(Integer lun) {
            $.lun = lun;
            return this;
        }

        /**
         * @param managedDisk The managed disk parameters.
         * 
         * @return builder
         * 
         */
        public Builder managedDisk(@Nullable VirtualMachineScaleSetManagedDiskParametersResponse managedDisk) {
            $.managedDisk = managedDisk;
            return this;
        }

        /**
         * @param name The disk name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param writeAcceleratorEnabled Specifies whether writeAccelerator should be enabled or disabled on the disk.
         * 
         * @return builder
         * 
         */
        public Builder writeAcceleratorEnabled(@Nullable Boolean writeAcceleratorEnabled) {
            $.writeAcceleratorEnabled = writeAcceleratorEnabled;
            return this;
        }

        public VirtualMachineScaleSetDataDiskResponse build() {
            $.createOption = Objects.requireNonNull($.createOption, "expected parameter 'createOption' to be non-null");
            $.lun = Objects.requireNonNull($.lun, "expected parameter 'lun' to be non-null");
            return $;
        }
    }

}
