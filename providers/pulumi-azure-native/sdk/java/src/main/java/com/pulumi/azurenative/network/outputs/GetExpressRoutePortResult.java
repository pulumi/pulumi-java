// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.outputs;

import com.pulumi.azurenative.network.outputs.ExpressRouteLinkResponse;
import com.pulumi.azurenative.network.outputs.ManagedServiceIdentityResponse;
import com.pulumi.azurenative.network.outputs.SubResourceResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetExpressRoutePortResult {
    /**
     * @return Date of the physical port allocation to be used in Letter of Authorization.
     * 
     */
    private final String allocationDate;
    /**
     * @return Bandwidth of procured ports in Gbps.
     * 
     */
    private final @Nullable Integer bandwidthInGbps;
    /**
     * @return Reference the ExpressRoute circuit(s) that are provisioned on this ExpressRoutePort resource.
     * 
     */
    private final List<SubResourceResponse> circuits;
    /**
     * @return Encapsulation method on physical ports.
     * 
     */
    private final @Nullable String encapsulation;
    /**
     * @return A unique read-only string that changes whenever the resource is updated.
     * 
     */
    private final String etag;
    /**
     * @return Ether type of the physical port.
     * 
     */
    private final String etherType;
    /**
     * @return Resource ID.
     * 
     */
    private final @Nullable String id;
    /**
     * @return The identity of ExpressRoutePort, if configured.
     * 
     */
    private final @Nullable ManagedServiceIdentityResponse identity;
    /**
     * @return The set of physical links of the ExpressRoutePort resource.
     * 
     */
    private final @Nullable List<ExpressRouteLinkResponse> links;
    /**
     * @return Resource location.
     * 
     */
    private final @Nullable String location;
    /**
     * @return Maximum transmission unit of the physical port pair(s).
     * 
     */
    private final String mtu;
    /**
     * @return Resource name.
     * 
     */
    private final String name;
    /**
     * @return The name of the peering location that the ExpressRoutePort is mapped to physically.
     * 
     */
    private final @Nullable String peeringLocation;
    /**
     * @return Aggregate Gbps of associated circuit bandwidths.
     * 
     */
    private final Double provisionedBandwidthInGbps;
    /**
     * @return The provisioning state of the express route port resource.
     * 
     */
    private final String provisioningState;
    /**
     * @return The resource GUID property of the express route port resource.
     * 
     */
    private final String resourceGuid;
    /**
     * @return Resource tags.
     * 
     */
    private final @Nullable Map<String,String> tags;
    /**
     * @return Resource type.
     * 
     */
    private final String type;

    @CustomType.Constructor
    private GetExpressRoutePortResult(
        @CustomType.Parameter("allocationDate") String allocationDate,
        @CustomType.Parameter("bandwidthInGbps") @Nullable Integer bandwidthInGbps,
        @CustomType.Parameter("circuits") List<SubResourceResponse> circuits,
        @CustomType.Parameter("encapsulation") @Nullable String encapsulation,
        @CustomType.Parameter("etag") String etag,
        @CustomType.Parameter("etherType") String etherType,
        @CustomType.Parameter("id") @Nullable String id,
        @CustomType.Parameter("identity") @Nullable ManagedServiceIdentityResponse identity,
        @CustomType.Parameter("links") @Nullable List<ExpressRouteLinkResponse> links,
        @CustomType.Parameter("location") @Nullable String location,
        @CustomType.Parameter("mtu") String mtu,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("peeringLocation") @Nullable String peeringLocation,
        @CustomType.Parameter("provisionedBandwidthInGbps") Double provisionedBandwidthInGbps,
        @CustomType.Parameter("provisioningState") String provisioningState,
        @CustomType.Parameter("resourceGuid") String resourceGuid,
        @CustomType.Parameter("tags") @Nullable Map<String,String> tags,
        @CustomType.Parameter("type") String type) {
        this.allocationDate = allocationDate;
        this.bandwidthInGbps = bandwidthInGbps;
        this.circuits = circuits;
        this.encapsulation = encapsulation;
        this.etag = etag;
        this.etherType = etherType;
        this.id = id;
        this.identity = identity;
        this.links = links;
        this.location = location;
        this.mtu = mtu;
        this.name = name;
        this.peeringLocation = peeringLocation;
        this.provisionedBandwidthInGbps = provisionedBandwidthInGbps;
        this.provisioningState = provisioningState;
        this.resourceGuid = resourceGuid;
        this.tags = tags;
        this.type = type;
    }

    /**
     * @return Date of the physical port allocation to be used in Letter of Authorization.
     * 
     */
    public String allocationDate() {
        return this.allocationDate;
    }
    /**
     * @return Bandwidth of procured ports in Gbps.
     * 
     */
    public Optional<Integer> bandwidthInGbps() {
        return Optional.ofNullable(this.bandwidthInGbps);
    }
    /**
     * @return Reference the ExpressRoute circuit(s) that are provisioned on this ExpressRoutePort resource.
     * 
     */
    public List<SubResourceResponse> circuits() {
        return this.circuits;
    }
    /**
     * @return Encapsulation method on physical ports.
     * 
     */
    public Optional<String> encapsulation() {
        return Optional.ofNullable(this.encapsulation);
    }
    /**
     * @return A unique read-only string that changes whenever the resource is updated.
     * 
     */
    public String etag() {
        return this.etag;
    }
    /**
     * @return Ether type of the physical port.
     * 
     */
    public String etherType() {
        return this.etherType;
    }
    /**
     * @return Resource ID.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * @return The identity of ExpressRoutePort, if configured.
     * 
     */
    public Optional<ManagedServiceIdentityResponse> identity() {
        return Optional.ofNullable(this.identity);
    }
    /**
     * @return The set of physical links of the ExpressRoutePort resource.
     * 
     */
    public List<ExpressRouteLinkResponse> links() {
        return this.links == null ? List.of() : this.links;
    }
    /**
     * @return Resource location.
     * 
     */
    public Optional<String> location() {
        return Optional.ofNullable(this.location);
    }
    /**
     * @return Maximum transmission unit of the physical port pair(s).
     * 
     */
    public String mtu() {
        return this.mtu;
    }
    /**
     * @return Resource name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The name of the peering location that the ExpressRoutePort is mapped to physically.
     * 
     */
    public Optional<String> peeringLocation() {
        return Optional.ofNullable(this.peeringLocation);
    }
    /**
     * @return Aggregate Gbps of associated circuit bandwidths.
     * 
     */
    public Double provisionedBandwidthInGbps() {
        return this.provisionedBandwidthInGbps;
    }
    /**
     * @return The provisioning state of the express route port resource.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return The resource GUID property of the express route port resource.
     * 
     */
    public String resourceGuid() {
        return this.resourceGuid;
    }
    /**
     * @return Resource tags.
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return Resource type.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetExpressRoutePortResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String allocationDate;
        private @Nullable Integer bandwidthInGbps;
        private List<SubResourceResponse> circuits;
        private @Nullable String encapsulation;
        private String etag;
        private String etherType;
        private @Nullable String id;
        private @Nullable ManagedServiceIdentityResponse identity;
        private @Nullable List<ExpressRouteLinkResponse> links;
        private @Nullable String location;
        private String mtu;
        private String name;
        private @Nullable String peeringLocation;
        private Double provisionedBandwidthInGbps;
        private String provisioningState;
        private String resourceGuid;
        private @Nullable Map<String,String> tags;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(GetExpressRoutePortResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allocationDate = defaults.allocationDate;
    	      this.bandwidthInGbps = defaults.bandwidthInGbps;
    	      this.circuits = defaults.circuits;
    	      this.encapsulation = defaults.encapsulation;
    	      this.etag = defaults.etag;
    	      this.etherType = defaults.etherType;
    	      this.id = defaults.id;
    	      this.identity = defaults.identity;
    	      this.links = defaults.links;
    	      this.location = defaults.location;
    	      this.mtu = defaults.mtu;
    	      this.name = defaults.name;
    	      this.peeringLocation = defaults.peeringLocation;
    	      this.provisionedBandwidthInGbps = defaults.provisionedBandwidthInGbps;
    	      this.provisioningState = defaults.provisioningState;
    	      this.resourceGuid = defaults.resourceGuid;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
        }

        public Builder allocationDate(String allocationDate) {
            this.allocationDate = Objects.requireNonNull(allocationDate);
            return this;
        }
        public Builder bandwidthInGbps(@Nullable Integer bandwidthInGbps) {
            this.bandwidthInGbps = bandwidthInGbps;
            return this;
        }
        public Builder circuits(List<SubResourceResponse> circuits) {
            this.circuits = Objects.requireNonNull(circuits);
            return this;
        }
        public Builder circuits(SubResourceResponse... circuits) {
            return circuits(List.of(circuits));
        }
        public Builder encapsulation(@Nullable String encapsulation) {
            this.encapsulation = encapsulation;
            return this;
        }
        public Builder etag(String etag) {
            this.etag = Objects.requireNonNull(etag);
            return this;
        }
        public Builder etherType(String etherType) {
            this.etherType = Objects.requireNonNull(etherType);
            return this;
        }
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        public Builder identity(@Nullable ManagedServiceIdentityResponse identity) {
            this.identity = identity;
            return this;
        }
        public Builder links(@Nullable List<ExpressRouteLinkResponse> links) {
            this.links = links;
            return this;
        }
        public Builder links(ExpressRouteLinkResponse... links) {
            return links(List.of(links));
        }
        public Builder location(@Nullable String location) {
            this.location = location;
            return this;
        }
        public Builder mtu(String mtu) {
            this.mtu = Objects.requireNonNull(mtu);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder peeringLocation(@Nullable String peeringLocation) {
            this.peeringLocation = peeringLocation;
            return this;
        }
        public Builder provisionedBandwidthInGbps(Double provisionedBandwidthInGbps) {
            this.provisionedBandwidthInGbps = Objects.requireNonNull(provisionedBandwidthInGbps);
            return this;
        }
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        public Builder resourceGuid(String resourceGuid) {
            this.resourceGuid = Objects.requireNonNull(resourceGuid);
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }        public GetExpressRoutePortResult build() {
            return new GetExpressRoutePortResult(allocationDate, bandwidthInGbps, circuits, encapsulation, etag, etherType, id, identity, links, location, mtu, name, peeringLocation, provisionedBandwidthInGbps, provisioningState, resourceGuid, tags, type);
        }
    }
}
