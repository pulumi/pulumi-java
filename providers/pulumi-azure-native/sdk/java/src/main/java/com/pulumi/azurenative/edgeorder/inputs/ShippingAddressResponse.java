// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.edgeorder.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Shipping address where customer wishes to receive the device.
 * 
 */
public final class ShippingAddressResponse extends com.pulumi.resources.InvokeArgs {

    public static final ShippingAddressResponse Empty = new ShippingAddressResponse();

    /**
     * Type of address.
     * 
     */
    @Import(name="addressType")
    private @Nullable String addressType;

    /**
     * @return Type of address.
     * 
     */
    public Optional<String> addressType() {
        return Optional.ofNullable(this.addressType);
    }

    /**
     * Name of the City.
     * 
     */
    @Import(name="city")
    private @Nullable String city;

    /**
     * @return Name of the City.
     * 
     */
    public Optional<String> city() {
        return Optional.ofNullable(this.city);
    }

    /**
     * Name of the company.
     * 
     */
    @Import(name="companyName")
    private @Nullable String companyName;

    /**
     * @return Name of the company.
     * 
     */
    public Optional<String> companyName() {
        return Optional.ofNullable(this.companyName);
    }

    /**
     * Name of the Country.
     * 
     */
    @Import(name="country", required=true)
    private String country;

    /**
     * @return Name of the Country.
     * 
     */
    public String country() {
        return this.country;
    }

    /**
     * Postal code.
     * 
     */
    @Import(name="postalCode")
    private @Nullable String postalCode;

    /**
     * @return Postal code.
     * 
     */
    public Optional<String> postalCode() {
        return Optional.ofNullable(this.postalCode);
    }

    /**
     * Name of the State or Province.
     * 
     */
    @Import(name="stateOrProvince")
    private @Nullable String stateOrProvince;

    /**
     * @return Name of the State or Province.
     * 
     */
    public Optional<String> stateOrProvince() {
        return Optional.ofNullable(this.stateOrProvince);
    }

    /**
     * Street Address line 1.
     * 
     */
    @Import(name="streetAddress1", required=true)
    private String streetAddress1;

    /**
     * @return Street Address line 1.
     * 
     */
    public String streetAddress1() {
        return this.streetAddress1;
    }

    /**
     * Street Address line 2.
     * 
     */
    @Import(name="streetAddress2")
    private @Nullable String streetAddress2;

    /**
     * @return Street Address line 2.
     * 
     */
    public Optional<String> streetAddress2() {
        return Optional.ofNullable(this.streetAddress2);
    }

    /**
     * Street Address line 3.
     * 
     */
    @Import(name="streetAddress3")
    private @Nullable String streetAddress3;

    /**
     * @return Street Address line 3.
     * 
     */
    public Optional<String> streetAddress3() {
        return Optional.ofNullable(this.streetAddress3);
    }

    /**
     * Extended Zip Code.
     * 
     */
    @Import(name="zipExtendedCode")
    private @Nullable String zipExtendedCode;

    /**
     * @return Extended Zip Code.
     * 
     */
    public Optional<String> zipExtendedCode() {
        return Optional.ofNullable(this.zipExtendedCode);
    }

    private ShippingAddressResponse() {}

    private ShippingAddressResponse(ShippingAddressResponse $) {
        this.addressType = $.addressType;
        this.city = $.city;
        this.companyName = $.companyName;
        this.country = $.country;
        this.postalCode = $.postalCode;
        this.stateOrProvince = $.stateOrProvince;
        this.streetAddress1 = $.streetAddress1;
        this.streetAddress2 = $.streetAddress2;
        this.streetAddress3 = $.streetAddress3;
        this.zipExtendedCode = $.zipExtendedCode;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ShippingAddressResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ShippingAddressResponse $;

        public Builder() {
            $ = new ShippingAddressResponse();
        }

        public Builder(ShippingAddressResponse defaults) {
            $ = new ShippingAddressResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param addressType Type of address.
         * 
         * @return builder
         * 
         */
        public Builder addressType(@Nullable String addressType) {
            $.addressType = addressType;
            return this;
        }

        /**
         * @param city Name of the City.
         * 
         * @return builder
         * 
         */
        public Builder city(@Nullable String city) {
            $.city = city;
            return this;
        }

        /**
         * @param companyName Name of the company.
         * 
         * @return builder
         * 
         */
        public Builder companyName(@Nullable String companyName) {
            $.companyName = companyName;
            return this;
        }

        /**
         * @param country Name of the Country.
         * 
         * @return builder
         * 
         */
        public Builder country(String country) {
            $.country = country;
            return this;
        }

        /**
         * @param postalCode Postal code.
         * 
         * @return builder
         * 
         */
        public Builder postalCode(@Nullable String postalCode) {
            $.postalCode = postalCode;
            return this;
        }

        /**
         * @param stateOrProvince Name of the State or Province.
         * 
         * @return builder
         * 
         */
        public Builder stateOrProvince(@Nullable String stateOrProvince) {
            $.stateOrProvince = stateOrProvince;
            return this;
        }

        /**
         * @param streetAddress1 Street Address line 1.
         * 
         * @return builder
         * 
         */
        public Builder streetAddress1(String streetAddress1) {
            $.streetAddress1 = streetAddress1;
            return this;
        }

        /**
         * @param streetAddress2 Street Address line 2.
         * 
         * @return builder
         * 
         */
        public Builder streetAddress2(@Nullable String streetAddress2) {
            $.streetAddress2 = streetAddress2;
            return this;
        }

        /**
         * @param streetAddress3 Street Address line 3.
         * 
         * @return builder
         * 
         */
        public Builder streetAddress3(@Nullable String streetAddress3) {
            $.streetAddress3 = streetAddress3;
            return this;
        }

        /**
         * @param zipExtendedCode Extended Zip Code.
         * 
         * @return builder
         * 
         */
        public Builder zipExtendedCode(@Nullable String zipExtendedCode) {
            $.zipExtendedCode = zipExtendedCode;
            return this;
        }

        public ShippingAddressResponse build() {
            $.country = Objects.requireNonNull($.country, "expected parameter 'country' to be non-null");
            $.streetAddress1 = Objects.requireNonNull($.streetAddress1, "expected parameter 'streetAddress1' to be non-null");
            return $;
        }
    }

}
