// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;


/**
 * Definition of a single parameter for an entity.
 * 
 */
public final class GlobalParameterSpecificationResponse extends com.pulumi.resources.InvokeArgs {

    public static final GlobalParameterSpecificationResponse Empty = new GlobalParameterSpecificationResponse();

    /**
     * Global Parameter type.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    public String type() {
        return this.type;
    }

    /**
     * Value of parameter.
     * 
     */
    @Import(name="value", required=true)
    private Object value;

    public Object value() {
        return this.value;
    }

    private GlobalParameterSpecificationResponse() {}

    private GlobalParameterSpecificationResponse(GlobalParameterSpecificationResponse $) {
        this.type = $.type;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GlobalParameterSpecificationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GlobalParameterSpecificationResponse $;

        public Builder() {
            $ = new GlobalParameterSpecificationResponse();
        }

        public Builder(GlobalParameterSpecificationResponse defaults) {
            $ = new GlobalParameterSpecificationResponse(Objects.requireNonNull(defaults));
        }

        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public Builder value(Object value) {
            $.value = value;
            return this;
        }

        public GlobalParameterSpecificationResponse build() {
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            $.value = Objects.requireNonNull($.value, "expected parameter 'value' to be non-null");
            return $;
        }
    }

}
