// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.videoanalyzer.inputs;

import com.pulumi.azurenative.videoanalyzer.inputs.VideoSequenceAbsoluteTimeMarkersArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;


/**
 * Video source allows for content from a Video Analyzer video resource to be ingested into a pipeline. Currently supported only with batch pipelines.
 * 
 */
public final class VideoSourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final VideoSourceArgs Empty = new VideoSourceArgs();

    /**
     * Node name. Must be unique within the topology.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Node name. Must be unique within the topology.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Describes a sequence of datetime ranges. The video source only picks up recorded media within these ranges.
     * 
     */
    @Import(name="timeSequences", required=true)
    private Output<VideoSequenceAbsoluteTimeMarkersArgs> timeSequences;

    /**
     * @return Describes a sequence of datetime ranges. The video source only picks up recorded media within these ranges.
     * 
     */
    public Output<VideoSequenceAbsoluteTimeMarkersArgs> timeSequences() {
        return this.timeSequences;
    }

    /**
     * The discriminator for derived types.
     * Expected value is &#39;#Microsoft.VideoAnalyzer.VideoSource&#39;.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The discriminator for derived types.
     * Expected value is &#39;#Microsoft.VideoAnalyzer.VideoSource&#39;.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * Name of the Video Analyzer video resource to be used as the source.
     * 
     */
    @Import(name="videoName", required=true)
    private Output<String> videoName;

    /**
     * @return Name of the Video Analyzer video resource to be used as the source.
     * 
     */
    public Output<String> videoName() {
        return this.videoName;
    }

    private VideoSourceArgs() {}

    private VideoSourceArgs(VideoSourceArgs $) {
        this.name = $.name;
        this.timeSequences = $.timeSequences;
        this.type = $.type;
        this.videoName = $.videoName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VideoSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VideoSourceArgs $;

        public Builder() {
            $ = new VideoSourceArgs();
        }

        public Builder(VideoSourceArgs defaults) {
            $ = new VideoSourceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param name Node name. Must be unique within the topology.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Node name. Must be unique within the topology.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param timeSequences Describes a sequence of datetime ranges. The video source only picks up recorded media within these ranges.
         * 
         * @return builder
         * 
         */
        public Builder timeSequences(Output<VideoSequenceAbsoluteTimeMarkersArgs> timeSequences) {
            $.timeSequences = timeSequences;
            return this;
        }

        /**
         * @param timeSequences Describes a sequence of datetime ranges. The video source only picks up recorded media within these ranges.
         * 
         * @return builder
         * 
         */
        public Builder timeSequences(VideoSequenceAbsoluteTimeMarkersArgs timeSequences) {
            return timeSequences(Output.of(timeSequences));
        }

        /**
         * @param type The discriminator for derived types.
         * Expected value is &#39;#Microsoft.VideoAnalyzer.VideoSource&#39;.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The discriminator for derived types.
         * Expected value is &#39;#Microsoft.VideoAnalyzer.VideoSource&#39;.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param videoName Name of the Video Analyzer video resource to be used as the source.
         * 
         * @return builder
         * 
         */
        public Builder videoName(Output<String> videoName) {
            $.videoName = videoName;
            return this;
        }

        /**
         * @param videoName Name of the Video Analyzer video resource to be used as the source.
         * 
         * @return builder
         * 
         */
        public Builder videoName(String videoName) {
            return videoName(Output.of(videoName));
        }

        public VideoSourceArgs build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.timeSequences = Objects.requireNonNull($.timeSequences, "expected parameter 'timeSequences' to be non-null");
            $.type = Codegen.stringProp("type").output().arg($.type).require();
            $.videoName = Objects.requireNonNull($.videoName, "expected parameter 'videoName' to be non-null");
            return $;
        }
    }

}
