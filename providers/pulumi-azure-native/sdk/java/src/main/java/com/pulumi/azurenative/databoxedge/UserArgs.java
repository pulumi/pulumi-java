// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.databoxedge;

import com.pulumi.azurenative.databoxedge.enums.UserType;
import com.pulumi.azurenative.databoxedge.inputs.AsymmetricEncryptedSecretArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserArgs extends com.pulumi.resources.ResourceArgs {

    public static final UserArgs Empty = new UserArgs();

    /**
     * The device name.
     * 
     */
    @Import(name="deviceName", required=true)
    private Output<String> deviceName;

    public Output<String> deviceName() {
        return this.deviceName;
    }

    /**
     * The password details.
     * 
     */
    @Import(name="encryptedPassword")
    private @Nullable Output<AsymmetricEncryptedSecretArgs> encryptedPassword;

    public Optional<Output<AsymmetricEncryptedSecretArgs>> encryptedPassword() {
        return Optional.ofNullable(this.encryptedPassword);
    }

    /**
     * The user name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The resource group name.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Type of the user.
     * 
     */
    @Import(name="userType", required=true)
    private Output<Either<String,UserType>> userType;

    public Output<Either<String,UserType>> userType() {
        return this.userType;
    }

    private UserArgs() {}

    private UserArgs(UserArgs $) {
        this.deviceName = $.deviceName;
        this.encryptedPassword = $.encryptedPassword;
        this.name = $.name;
        this.resourceGroupName = $.resourceGroupName;
        this.userType = $.userType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserArgs $;

        public Builder() {
            $ = new UserArgs();
        }

        public Builder(UserArgs defaults) {
            $ = new UserArgs(Objects.requireNonNull(defaults));
        }

        public Builder deviceName(Output<String> deviceName) {
            $.deviceName = deviceName;
            return this;
        }

        public Builder deviceName(String deviceName) {
            return deviceName(Output.of(deviceName));
        }

        public Builder encryptedPassword(@Nullable Output<AsymmetricEncryptedSecretArgs> encryptedPassword) {
            $.encryptedPassword = encryptedPassword;
            return this;
        }

        public Builder encryptedPassword(AsymmetricEncryptedSecretArgs encryptedPassword) {
            return encryptedPassword(Output.of(encryptedPassword));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder userType(Output<Either<String,UserType>> userType) {
            $.userType = userType;
            return this;
        }

        public Builder userType(Either<String,UserType> userType) {
            return userType(Output.of(userType));
        }

        public Builder userType(String userType) {
            return userType(Either.ofLeft(userType));
        }

        public Builder userType(UserType userType) {
            return userType(Either.ofRight(userType));
        }

        public UserArgs build() {
            $.deviceName = Objects.requireNonNull($.deviceName, "expected parameter 'deviceName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.userType = Objects.requireNonNull($.userType, "expected parameter 'userType' to be non-null");
            return $;
        }
    }

}
