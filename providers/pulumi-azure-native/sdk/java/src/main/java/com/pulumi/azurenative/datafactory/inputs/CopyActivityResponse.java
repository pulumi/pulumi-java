// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.azurenative.datafactory.inputs.ActivityDependencyResponse;
import com.pulumi.azurenative.datafactory.inputs.ActivityPolicyResponse;
import com.pulumi.azurenative.datafactory.inputs.AmazonMWSSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.AmazonRdsForOracleSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.AmazonRdsForSqlServerSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.AmazonRedshiftSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.AvroSinkResponse;
import com.pulumi.azurenative.datafactory.inputs.AvroSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.AzureBlobFSSinkResponse;
import com.pulumi.azurenative.datafactory.inputs.AzureBlobFSSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.AzureDataExplorerSinkResponse;
import com.pulumi.azurenative.datafactory.inputs.AzureDataExplorerSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.AzureDataLakeStoreSinkResponse;
import com.pulumi.azurenative.datafactory.inputs.AzureDataLakeStoreSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.AzureDatabricksDeltaLakeSinkResponse;
import com.pulumi.azurenative.datafactory.inputs.AzureDatabricksDeltaLakeSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.AzureMariaDBSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.AzureMySqlSinkResponse;
import com.pulumi.azurenative.datafactory.inputs.AzureMySqlSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.AzurePostgreSqlSinkResponse;
import com.pulumi.azurenative.datafactory.inputs.AzurePostgreSqlSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.AzureQueueSinkResponse;
import com.pulumi.azurenative.datafactory.inputs.AzureSearchIndexSinkResponse;
import com.pulumi.azurenative.datafactory.inputs.AzureSqlSinkResponse;
import com.pulumi.azurenative.datafactory.inputs.AzureSqlSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.AzureTableSinkResponse;
import com.pulumi.azurenative.datafactory.inputs.AzureTableSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.BinarySinkResponse;
import com.pulumi.azurenative.datafactory.inputs.BinarySourceResponse;
import com.pulumi.azurenative.datafactory.inputs.BlobSinkResponse;
import com.pulumi.azurenative.datafactory.inputs.BlobSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.CassandraSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.CommonDataServiceForAppsSinkResponse;
import com.pulumi.azurenative.datafactory.inputs.CommonDataServiceForAppsSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.ConcurSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.CosmosDbMongoDbApiSinkResponse;
import com.pulumi.azurenative.datafactory.inputs.CosmosDbMongoDbApiSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.CosmosDbSqlApiSinkResponse;
import com.pulumi.azurenative.datafactory.inputs.CosmosDbSqlApiSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.CouchbaseSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.DatasetReferenceResponse;
import com.pulumi.azurenative.datafactory.inputs.Db2SourceResponse;
import com.pulumi.azurenative.datafactory.inputs.DelimitedTextSinkResponse;
import com.pulumi.azurenative.datafactory.inputs.DelimitedTextSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.DocumentDbCollectionSinkResponse;
import com.pulumi.azurenative.datafactory.inputs.DocumentDbCollectionSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.DrillSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.DynamicsAXSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.DynamicsCrmSinkResponse;
import com.pulumi.azurenative.datafactory.inputs.DynamicsCrmSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.DynamicsSinkResponse;
import com.pulumi.azurenative.datafactory.inputs.DynamicsSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.EloquaSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.ExcelSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.FileSystemSinkResponse;
import com.pulumi.azurenative.datafactory.inputs.FileSystemSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.GoogleAdWordsSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.GoogleBigQuerySourceResponse;
import com.pulumi.azurenative.datafactory.inputs.GreenplumSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.HBaseSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.HdfsSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.HiveSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.HttpSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.HubspotSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.ImpalaSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.InformixSinkResponse;
import com.pulumi.azurenative.datafactory.inputs.InformixSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.JiraSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.JsonSinkResponse;
import com.pulumi.azurenative.datafactory.inputs.JsonSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.LinkedServiceReferenceResponse;
import com.pulumi.azurenative.datafactory.inputs.LogSettingsResponse;
import com.pulumi.azurenative.datafactory.inputs.LogStorageSettingsResponse;
import com.pulumi.azurenative.datafactory.inputs.MagentoSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.MariaDBSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.MarketoSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.MicrosoftAccessSinkResponse;
import com.pulumi.azurenative.datafactory.inputs.MicrosoftAccessSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.MongoDbAtlasSinkResponse;
import com.pulumi.azurenative.datafactory.inputs.MongoDbAtlasSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.MongoDbSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.MongoDbV2SinkResponse;
import com.pulumi.azurenative.datafactory.inputs.MongoDbV2SourceResponse;
import com.pulumi.azurenative.datafactory.inputs.MySqlSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.NetezzaSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.ODataSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.OdbcSinkResponse;
import com.pulumi.azurenative.datafactory.inputs.OdbcSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.Office365SourceResponse;
import com.pulumi.azurenative.datafactory.inputs.OracleServiceCloudSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.OracleSinkResponse;
import com.pulumi.azurenative.datafactory.inputs.OracleSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.OrcSinkResponse;
import com.pulumi.azurenative.datafactory.inputs.OrcSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.ParquetSinkResponse;
import com.pulumi.azurenative.datafactory.inputs.ParquetSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.PaypalSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.PhoenixSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.PostgreSqlSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.PrestoSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.QuickBooksSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.RedirectIncompatibleRowSettingsResponse;
import com.pulumi.azurenative.datafactory.inputs.RelationalSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.ResponsysSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.RestSinkResponse;
import com.pulumi.azurenative.datafactory.inputs.RestSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.SalesforceMarketingCloudSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.SalesforceServiceCloudSinkResponse;
import com.pulumi.azurenative.datafactory.inputs.SalesforceServiceCloudSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.SalesforceSinkResponse;
import com.pulumi.azurenative.datafactory.inputs.SalesforceSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.SapBwSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.SapCloudForCustomerSinkResponse;
import com.pulumi.azurenative.datafactory.inputs.SapCloudForCustomerSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.SapEccSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.SapHanaSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.SapOpenHubSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.SapTableSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.ServiceNowSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.SharePointOnlineListSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.ShopifySourceResponse;
import com.pulumi.azurenative.datafactory.inputs.SkipErrorFileResponse;
import com.pulumi.azurenative.datafactory.inputs.SnowflakeSinkResponse;
import com.pulumi.azurenative.datafactory.inputs.SnowflakeSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.SparkSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.SqlDWSinkResponse;
import com.pulumi.azurenative.datafactory.inputs.SqlDWSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.SqlMISinkResponse;
import com.pulumi.azurenative.datafactory.inputs.SqlMISourceResponse;
import com.pulumi.azurenative.datafactory.inputs.SqlServerSinkResponse;
import com.pulumi.azurenative.datafactory.inputs.SqlServerSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.SqlSinkResponse;
import com.pulumi.azurenative.datafactory.inputs.SqlSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.SquareSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.StagingSettingsResponse;
import com.pulumi.azurenative.datafactory.inputs.SybaseSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.TabularSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.TeradataSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.UserPropertyResponse;
import com.pulumi.azurenative.datafactory.inputs.VerticaSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.WebSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.XeroSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.XmlSourceResponse;
import com.pulumi.azurenative.datafactory.inputs.ZohoSourceResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Copy activity.
 * 
 */
public final class CopyActivityResponse extends com.pulumi.resources.InvokeArgs {

    public static final CopyActivityResponse Empty = new CopyActivityResponse();

    /**
     * Maximum number of data integration units that can be used to perform this data movement. Type: integer (or Expression with resultType integer), minimum: 0.
     * 
     */
    @Import(name="dataIntegrationUnits")
    private @Nullable Object dataIntegrationUnits;

    public Optional<Object> dataIntegrationUnits() {
        return Optional.ofNullable(this.dataIntegrationUnits);
    }

    /**
     * Activity depends on condition.
     * 
     */
    @Import(name="dependsOn")
    private @Nullable List<ActivityDependencyResponse> dependsOn;

    public Optional<List<ActivityDependencyResponse>> dependsOn() {
        return Optional.ofNullable(this.dependsOn);
    }

    /**
     * Activity description.
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Whether to skip incompatible row. Default value is false. Type: boolean (or Expression with resultType boolean).
     * 
     */
    @Import(name="enableSkipIncompatibleRow")
    private @Nullable Object enableSkipIncompatibleRow;

    public Optional<Object> enableSkipIncompatibleRow() {
        return Optional.ofNullable(this.enableSkipIncompatibleRow);
    }

    /**
     * Specifies whether to copy data via an interim staging. Default value is false. Type: boolean (or Expression with resultType boolean).
     * 
     */
    @Import(name="enableStaging")
    private @Nullable Object enableStaging;

    public Optional<Object> enableStaging() {
        return Optional.ofNullable(this.enableStaging);
    }

    /**
     * List of inputs for the activity.
     * 
     */
    @Import(name="inputs")
    private @Nullable List<DatasetReferenceResponse> inputs;

    public Optional<List<DatasetReferenceResponse>> inputs() {
        return Optional.ofNullable(this.inputs);
    }

    /**
     * Linked service reference.
     * 
     */
    @Import(name="linkedServiceName")
    private @Nullable LinkedServiceReferenceResponse linkedServiceName;

    public Optional<LinkedServiceReferenceResponse> linkedServiceName() {
        return Optional.ofNullable(this.linkedServiceName);
    }

    /**
     * Log settings customer needs provide when enabling log.
     * 
     */
    @Import(name="logSettings")
    private @Nullable LogSettingsResponse logSettings;

    public Optional<LogSettingsResponse> logSettings() {
        return Optional.ofNullable(this.logSettings);
    }

    /**
     * (Deprecated. Please use LogSettings) Log storage settings customer need to provide when enabling session log.
     * 
     */
    @Import(name="logStorageSettings")
    private @Nullable LogStorageSettingsResponse logStorageSettings;

    public Optional<LogStorageSettingsResponse> logStorageSettings() {
        return Optional.ofNullable(this.logStorageSettings);
    }

    /**
     * Activity name.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    public String name() {
        return this.name;
    }

    /**
     * List of outputs for the activity.
     * 
     */
    @Import(name="outputs")
    private @Nullable List<DatasetReferenceResponse> outputs;

    public Optional<List<DatasetReferenceResponse>> outputs() {
        return Optional.ofNullable(this.outputs);
    }

    /**
     * Maximum number of concurrent sessions opened on the source or sink to avoid overloading the data store. Type: integer (or Expression with resultType integer), minimum: 0.
     * 
     */
    @Import(name="parallelCopies")
    private @Nullable Object parallelCopies;

    public Optional<Object> parallelCopies() {
        return Optional.ofNullable(this.parallelCopies);
    }

    /**
     * Activity policy.
     * 
     */
    @Import(name="policy")
    private @Nullable ActivityPolicyResponse policy;

    public Optional<ActivityPolicyResponse> policy() {
        return Optional.ofNullable(this.policy);
    }

    /**
     * Preserve rules.
     * 
     */
    @Import(name="preserve")
    private @Nullable List<Object> preserve;

    public Optional<List<Object>> preserve() {
        return Optional.ofNullable(this.preserve);
    }

    /**
     * Preserve Rules.
     * 
     */
    @Import(name="preserveRules")
    private @Nullable List<Object> preserveRules;

    public Optional<List<Object>> preserveRules() {
        return Optional.ofNullable(this.preserveRules);
    }

    /**
     * Redirect incompatible row settings when EnableSkipIncompatibleRow is true.
     * 
     */
    @Import(name="redirectIncompatibleRowSettings")
    private @Nullable RedirectIncompatibleRowSettingsResponse redirectIncompatibleRowSettings;

    public Optional<RedirectIncompatibleRowSettingsResponse> redirectIncompatibleRowSettings() {
        return Optional.ofNullable(this.redirectIncompatibleRowSettings);
    }

    /**
     * Copy activity sink.
     * 
     */
    @Import(name="sink", required=true)
    private Object sink;

    public Object sink() {
        return this.sink;
    }

    /**
     * Specify the fault tolerance for data consistency.
     * 
     */
    @Import(name="skipErrorFile")
    private @Nullable SkipErrorFileResponse skipErrorFile;

    public Optional<SkipErrorFileResponse> skipErrorFile() {
        return Optional.ofNullable(this.skipErrorFile);
    }

    /**
     * Copy activity source.
     * 
     */
    @Import(name="source", required=true)
    private Object source;

    public Object source() {
        return this.source;
    }

    /**
     * Specifies interim staging settings when EnableStaging is true.
     * 
     */
    @Import(name="stagingSettings")
    private @Nullable StagingSettingsResponse stagingSettings;

    public Optional<StagingSettingsResponse> stagingSettings() {
        return Optional.ofNullable(this.stagingSettings);
    }

    /**
     * Copy activity translator. If not specified, tabular translator is used.
     * 
     */
    @Import(name="translator")
    private @Nullable Object translator;

    public Optional<Object> translator() {
        return Optional.ofNullable(this.translator);
    }

    /**
     * Type of activity.
     * Expected value is &#39;Copy&#39;.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    public String type() {
        return this.type;
    }

    /**
     * Activity user properties.
     * 
     */
    @Import(name="userProperties")
    private @Nullable List<UserPropertyResponse> userProperties;

    public Optional<List<UserPropertyResponse>> userProperties() {
        return Optional.ofNullable(this.userProperties);
    }

    /**
     * Whether to enable Data Consistency validation. Type: boolean (or Expression with resultType boolean).
     * 
     */
    @Import(name="validateDataConsistency")
    private @Nullable Object validateDataConsistency;

    public Optional<Object> validateDataConsistency() {
        return Optional.ofNullable(this.validateDataConsistency);
    }

    private CopyActivityResponse() {}

    private CopyActivityResponse(CopyActivityResponse $) {
        this.dataIntegrationUnits = $.dataIntegrationUnits;
        this.dependsOn = $.dependsOn;
        this.description = $.description;
        this.enableSkipIncompatibleRow = $.enableSkipIncompatibleRow;
        this.enableStaging = $.enableStaging;
        this.inputs = $.inputs;
        this.linkedServiceName = $.linkedServiceName;
        this.logSettings = $.logSettings;
        this.logStorageSettings = $.logStorageSettings;
        this.name = $.name;
        this.outputs = $.outputs;
        this.parallelCopies = $.parallelCopies;
        this.policy = $.policy;
        this.preserve = $.preserve;
        this.preserveRules = $.preserveRules;
        this.redirectIncompatibleRowSettings = $.redirectIncompatibleRowSettings;
        this.sink = $.sink;
        this.skipErrorFile = $.skipErrorFile;
        this.source = $.source;
        this.stagingSettings = $.stagingSettings;
        this.translator = $.translator;
        this.type = $.type;
        this.userProperties = $.userProperties;
        this.validateDataConsistency = $.validateDataConsistency;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CopyActivityResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CopyActivityResponse $;

        public Builder() {
            $ = new CopyActivityResponse();
        }

        public Builder(CopyActivityResponse defaults) {
            $ = new CopyActivityResponse(Objects.requireNonNull(defaults));
        }

        public Builder dataIntegrationUnits(@Nullable Object dataIntegrationUnits) {
            $.dataIntegrationUnits = dataIntegrationUnits;
            return this;
        }

        public Builder dependsOn(@Nullable List<ActivityDependencyResponse> dependsOn) {
            $.dependsOn = dependsOn;
            return this;
        }

        public Builder dependsOn(ActivityDependencyResponse... dependsOn) {
            return dependsOn(List.of(dependsOn));
        }

        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        public Builder enableSkipIncompatibleRow(@Nullable Object enableSkipIncompatibleRow) {
            $.enableSkipIncompatibleRow = enableSkipIncompatibleRow;
            return this;
        }

        public Builder enableStaging(@Nullable Object enableStaging) {
            $.enableStaging = enableStaging;
            return this;
        }

        public Builder inputs(@Nullable List<DatasetReferenceResponse> inputs) {
            $.inputs = inputs;
            return this;
        }

        public Builder inputs(DatasetReferenceResponse... inputs) {
            return inputs(List.of(inputs));
        }

        public Builder linkedServiceName(@Nullable LinkedServiceReferenceResponse linkedServiceName) {
            $.linkedServiceName = linkedServiceName;
            return this;
        }

        public Builder logSettings(@Nullable LogSettingsResponse logSettings) {
            $.logSettings = logSettings;
            return this;
        }

        public Builder logStorageSettings(@Nullable LogStorageSettingsResponse logStorageSettings) {
            $.logStorageSettings = logStorageSettings;
            return this;
        }

        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public Builder outputs(@Nullable List<DatasetReferenceResponse> outputs) {
            $.outputs = outputs;
            return this;
        }

        public Builder outputs(DatasetReferenceResponse... outputs) {
            return outputs(List.of(outputs));
        }

        public Builder parallelCopies(@Nullable Object parallelCopies) {
            $.parallelCopies = parallelCopies;
            return this;
        }

        public Builder policy(@Nullable ActivityPolicyResponse policy) {
            $.policy = policy;
            return this;
        }

        public Builder preserve(@Nullable List<Object> preserve) {
            $.preserve = preserve;
            return this;
        }

        public Builder preserve(Object... preserve) {
            return preserve(List.of(preserve));
        }

        public Builder preserveRules(@Nullable List<Object> preserveRules) {
            $.preserveRules = preserveRules;
            return this;
        }

        public Builder preserveRules(Object... preserveRules) {
            return preserveRules(List.of(preserveRules));
        }

        public Builder redirectIncompatibleRowSettings(@Nullable RedirectIncompatibleRowSettingsResponse redirectIncompatibleRowSettings) {
            $.redirectIncompatibleRowSettings = redirectIncompatibleRowSettings;
            return this;
        }

        public Builder sink(Object sink) {
            $.sink = sink;
            return this;
        }

        public Builder skipErrorFile(@Nullable SkipErrorFileResponse skipErrorFile) {
            $.skipErrorFile = skipErrorFile;
            return this;
        }

        public Builder source(Object source) {
            $.source = source;
            return this;
        }

        public Builder stagingSettings(@Nullable StagingSettingsResponse stagingSettings) {
            $.stagingSettings = stagingSettings;
            return this;
        }

        public Builder translator(@Nullable Object translator) {
            $.translator = translator;
            return this;
        }

        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public Builder userProperties(@Nullable List<UserPropertyResponse> userProperties) {
            $.userProperties = userProperties;
            return this;
        }

        public Builder userProperties(UserPropertyResponse... userProperties) {
            return userProperties(List.of(userProperties));
        }

        public Builder validateDataConsistency(@Nullable Object validateDataConsistency) {
            $.validateDataConsistency = validateDataConsistency;
            return this;
        }

        public CopyActivityResponse build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.sink = Objects.requireNonNull($.sink, "expected parameter 'sink' to be non-null");
            $.source = Objects.requireNonNull($.source, "expected parameter 'source' to be non-null");
            $.type = Codegen.stringProp("type").arg($.type).require();
            return $;
        }
    }

}
