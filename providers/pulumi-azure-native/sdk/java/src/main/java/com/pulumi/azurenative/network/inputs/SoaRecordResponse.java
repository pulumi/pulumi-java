// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * An SOA record.
 * 
 */
public final class SoaRecordResponse extends com.pulumi.resources.InvokeArgs {

    public static final SoaRecordResponse Empty = new SoaRecordResponse();

    /**
     * The email contact for this SOA record.
     * 
     */
    @Import(name="email")
    private @Nullable String email;

    public Optional<String> email() {
        return Optional.ofNullable(this.email);
    }

    /**
     * The expire time for this SOA record.
     * 
     */
    @Import(name="expireTime")
    private @Nullable Double expireTime;

    public Optional<Double> expireTime() {
        return Optional.ofNullable(this.expireTime);
    }

    /**
     * The domain name of the authoritative name server for this SOA record.
     * 
     */
    @Import(name="host")
    private @Nullable String host;

    public Optional<String> host() {
        return Optional.ofNullable(this.host);
    }

    /**
     * The minimum value for this SOA record. By convention this is used to determine the negative caching duration.
     * 
     */
    @Import(name="minimumTtl")
    private @Nullable Double minimumTtl;

    public Optional<Double> minimumTtl() {
        return Optional.ofNullable(this.minimumTtl);
    }

    /**
     * The refresh value for this SOA record.
     * 
     */
    @Import(name="refreshTime")
    private @Nullable Double refreshTime;

    public Optional<Double> refreshTime() {
        return Optional.ofNullable(this.refreshTime);
    }

    /**
     * The retry time for this SOA record.
     * 
     */
    @Import(name="retryTime")
    private @Nullable Double retryTime;

    public Optional<Double> retryTime() {
        return Optional.ofNullable(this.retryTime);
    }

    /**
     * The serial number for this SOA record.
     * 
     */
    @Import(name="serialNumber")
    private @Nullable Double serialNumber;

    public Optional<Double> serialNumber() {
        return Optional.ofNullable(this.serialNumber);
    }

    private SoaRecordResponse() {}

    private SoaRecordResponse(SoaRecordResponse $) {
        this.email = $.email;
        this.expireTime = $.expireTime;
        this.host = $.host;
        this.minimumTtl = $.minimumTtl;
        this.refreshTime = $.refreshTime;
        this.retryTime = $.retryTime;
        this.serialNumber = $.serialNumber;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SoaRecordResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SoaRecordResponse $;

        public Builder() {
            $ = new SoaRecordResponse();
        }

        public Builder(SoaRecordResponse defaults) {
            $ = new SoaRecordResponse(Objects.requireNonNull(defaults));
        }

        public Builder email(@Nullable String email) {
            $.email = email;
            return this;
        }

        public Builder expireTime(@Nullable Double expireTime) {
            $.expireTime = expireTime;
            return this;
        }

        public Builder host(@Nullable String host) {
            $.host = host;
            return this;
        }

        public Builder minimumTtl(@Nullable Double minimumTtl) {
            $.minimumTtl = minimumTtl;
            return this;
        }

        public Builder refreshTime(@Nullable Double refreshTime) {
            $.refreshTime = refreshTime;
            return this;
        }

        public Builder retryTime(@Nullable Double retryTime) {
            $.retryTime = retryTime;
            return this;
        }

        public Builder serialNumber(@Nullable Double serialNumber) {
            $.serialNumber = serialNumber;
            return this;
        }

        public SoaRecordResponse build() {
            return $;
        }
    }

}
