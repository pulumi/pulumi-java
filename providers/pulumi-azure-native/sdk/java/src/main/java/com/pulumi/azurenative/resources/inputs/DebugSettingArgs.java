// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.resources.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The debug setting.
 * 
 */
public final class DebugSettingArgs extends com.pulumi.resources.ResourceArgs {

    public static final DebugSettingArgs Empty = new DebugSettingArgs();

    /**
     * Specifies the type of information to log for debugging. The permitted values are none, requestContent, responseContent, or both requestContent and responseContent separated by a comma. The default is none. When setting this value, carefully consider the type of information you are passing in during deployment. By logging information about the request or response, you could potentially expose sensitive data that is retrieved through the deployment operations.
     * 
     */
    @Import(name="detailLevel")
    private @Nullable Output<String> detailLevel;

    /**
     * @return Specifies the type of information to log for debugging. The permitted values are none, requestContent, responseContent, or both requestContent and responseContent separated by a comma. The default is none. When setting this value, carefully consider the type of information you are passing in during deployment. By logging information about the request or response, you could potentially expose sensitive data that is retrieved through the deployment operations.
     * 
     */
    public Optional<Output<String>> detailLevel() {
        return Optional.ofNullable(this.detailLevel);
    }

    private DebugSettingArgs() {}

    private DebugSettingArgs(DebugSettingArgs $) {
        this.detailLevel = $.detailLevel;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DebugSettingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DebugSettingArgs $;

        public Builder() {
            $ = new DebugSettingArgs();
        }

        public Builder(DebugSettingArgs defaults) {
            $ = new DebugSettingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param detailLevel Specifies the type of information to log for debugging. The permitted values are none, requestContent, responseContent, or both requestContent and responseContent separated by a comma. The default is none. When setting this value, carefully consider the type of information you are passing in during deployment. By logging information about the request or response, you could potentially expose sensitive data that is retrieved through the deployment operations.
         * 
         * @return builder
         * 
         */
        public Builder detailLevel(@Nullable Output<String> detailLevel) {
            $.detailLevel = detailLevel;
            return this;
        }

        /**
         * @param detailLevel Specifies the type of information to log for debugging. The permitted values are none, requestContent, responseContent, or both requestContent and responseContent separated by a comma. The default is none. When setting this value, carefully consider the type of information you are passing in during deployment. By logging information about the request or response, you could potentially expose sensitive data that is retrieved through the deployment operations.
         * 
         * @return builder
         * 
         */
        public Builder detailLevel(String detailLevel) {
            return detailLevel(Output.of(detailLevel));
        }

        public DebugSettingArgs build() {
            return $;
        }
    }

}
