// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.resources.inputs;

import com.pulumi.azurenative.resources.enums.ExpressionEvaluationOptionsScopeType;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Specifies whether template expressions are evaluated within the scope of the parent template or nested template.
 * 
 */
public final class ExpressionEvaluationOptionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final ExpressionEvaluationOptionsArgs Empty = new ExpressionEvaluationOptionsArgs();

    /**
     * The scope to be used for evaluation of parameters, variables and functions in a nested template.
     * 
     */
    @Import(name="scope")
    private @Nullable Output<Either<String,ExpressionEvaluationOptionsScopeType>> scope;

    /**
     * @return The scope to be used for evaluation of parameters, variables and functions in a nested template.
     * 
     */
    public Optional<Output<Either<String,ExpressionEvaluationOptionsScopeType>>> scope() {
        return Optional.ofNullable(this.scope);
    }

    private ExpressionEvaluationOptionsArgs() {}

    private ExpressionEvaluationOptionsArgs(ExpressionEvaluationOptionsArgs $) {
        this.scope = $.scope;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExpressionEvaluationOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExpressionEvaluationOptionsArgs $;

        public Builder() {
            $ = new ExpressionEvaluationOptionsArgs();
        }

        public Builder(ExpressionEvaluationOptionsArgs defaults) {
            $ = new ExpressionEvaluationOptionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param scope The scope to be used for evaluation of parameters, variables and functions in a nested template.
         * 
         * @return builder
         * 
         */
        public Builder scope(@Nullable Output<Either<String,ExpressionEvaluationOptionsScopeType>> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope The scope to be used for evaluation of parameters, variables and functions in a nested template.
         * 
         * @return builder
         * 
         */
        public Builder scope(Either<String,ExpressionEvaluationOptionsScopeType> scope) {
            return scope(Output.of(scope));
        }

        /**
         * @param scope The scope to be used for evaluation of parameters, variables and functions in a nested template.
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            return scope(Either.ofLeft(scope));
        }

        /**
         * @param scope The scope to be used for evaluation of parameters, variables and functions in a nested template.
         * 
         * @return builder
         * 
         */
        public Builder scope(ExpressionEvaluationOptionsScopeType scope) {
            return scope(Either.ofRight(scope));
        }

        public ExpressionEvaluationOptionsArgs build() {
            return $;
        }
    }

}
