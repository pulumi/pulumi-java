// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.securityinsights.inputs;

import com.pulumi.azurenative.securityinsights.enums.AutomationRulePropertyConditionSupportedOperator;
import com.pulumi.azurenative.securityinsights.enums.AutomationRulePropertyConditionSupportedProperty;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The configuration of the automation rule condition
 * 
 */
public final class AutomationRulePropertyValuesConditionConditionPropertiesArgs extends com.pulumi.resources.ResourceArgs {

    public static final AutomationRulePropertyValuesConditionConditionPropertiesArgs Empty = new AutomationRulePropertyValuesConditionConditionPropertiesArgs();

    /**
     * The operator to use for evaluation the condition
     * 
     */
    @Import(name="operator")
    private @Nullable Output<Either<String,AutomationRulePropertyConditionSupportedOperator>> operator;

    public Optional<Output<Either<String,AutomationRulePropertyConditionSupportedOperator>>> operator() {
        return Optional.ofNullable(this.operator);
    }

    /**
     * The property to evaluate
     * 
     */
    @Import(name="propertyName")
    private @Nullable Output<Either<String,AutomationRulePropertyConditionSupportedProperty>> propertyName;

    public Optional<Output<Either<String,AutomationRulePropertyConditionSupportedProperty>>> propertyName() {
        return Optional.ofNullable(this.propertyName);
    }

    /**
     * The values to use for evaluating the condition
     * 
     */
    @Import(name="propertyValues")
    private @Nullable Output<List<String>> propertyValues;

    public Optional<Output<List<String>>> propertyValues() {
        return Optional.ofNullable(this.propertyValues);
    }

    private AutomationRulePropertyValuesConditionConditionPropertiesArgs() {}

    private AutomationRulePropertyValuesConditionConditionPropertiesArgs(AutomationRulePropertyValuesConditionConditionPropertiesArgs $) {
        this.operator = $.operator;
        this.propertyName = $.propertyName;
        this.propertyValues = $.propertyValues;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AutomationRulePropertyValuesConditionConditionPropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AutomationRulePropertyValuesConditionConditionPropertiesArgs $;

        public Builder() {
            $ = new AutomationRulePropertyValuesConditionConditionPropertiesArgs();
        }

        public Builder(AutomationRulePropertyValuesConditionConditionPropertiesArgs defaults) {
            $ = new AutomationRulePropertyValuesConditionConditionPropertiesArgs(Objects.requireNonNull(defaults));
        }

        public Builder operator(@Nullable Output<Either<String,AutomationRulePropertyConditionSupportedOperator>> operator) {
            $.operator = operator;
            return this;
        }

        public Builder operator(Either<String,AutomationRulePropertyConditionSupportedOperator> operator) {
            return operator(Output.of(operator));
        }

        public Builder propertyName(@Nullable Output<Either<String,AutomationRulePropertyConditionSupportedProperty>> propertyName) {
            $.propertyName = propertyName;
            return this;
        }

        public Builder propertyName(Either<String,AutomationRulePropertyConditionSupportedProperty> propertyName) {
            return propertyName(Output.of(propertyName));
        }

        public Builder propertyValues(@Nullable Output<List<String>> propertyValues) {
            $.propertyValues = propertyValues;
            return this;
        }

        public Builder propertyValues(List<String> propertyValues) {
            return propertyValues(Output.of(propertyValues));
        }

        public Builder propertyValues(String... propertyValues) {
            return propertyValues(List.of(propertyValues));
        }

        public AutomationRulePropertyValuesConditionConditionPropertiesArgs build() {
            return $;
        }
    }

}
