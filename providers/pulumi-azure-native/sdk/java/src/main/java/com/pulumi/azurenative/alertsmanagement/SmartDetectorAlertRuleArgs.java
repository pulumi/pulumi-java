// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.alertsmanagement;

import com.pulumi.azurenative.alertsmanagement.enums.AlertRuleState;
import com.pulumi.azurenative.alertsmanagement.enums.Severity;
import com.pulumi.azurenative.alertsmanagement.inputs.ActionGroupsInformationArgs;
import com.pulumi.azurenative.alertsmanagement.inputs.DetectorArgs;
import com.pulumi.azurenative.alertsmanagement.inputs.ThrottlingInformationArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SmartDetectorAlertRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final SmartDetectorAlertRuleArgs Empty = new SmartDetectorAlertRuleArgs();

    /**
     * The alert rule actions.
     * 
     */
    @Import(name="actionGroups", required=true)
    private Output<ActionGroupsInformationArgs> actionGroups;

    /**
     * @return The alert rule actions.
     * 
     */
    public Output<ActionGroupsInformationArgs> actionGroups() {
        return this.actionGroups;
    }

    /**
     * The name of the alert rule.
     * 
     */
    @Import(name="alertRuleName")
    private @Nullable Output<String> alertRuleName;

    /**
     * @return The name of the alert rule.
     * 
     */
    public Optional<Output<String>> alertRuleName() {
        return Optional.ofNullable(this.alertRuleName);
    }

    /**
     * The alert rule description.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The alert rule description.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The alert rule&#39;s detector.
     * 
     */
    @Import(name="detector", required=true)
    private Output<DetectorArgs> detector;

    /**
     * @return The alert rule&#39;s detector.
     * 
     */
    public Output<DetectorArgs> detector() {
        return this.detector;
    }

    /**
     * The alert rule frequency in ISO8601 format. The time granularity must be in minutes and minimum value is 5 minutes.
     * 
     */
    @Import(name="frequency", required=true)
    private Output<String> frequency;

    /**
     * @return The alert rule frequency in ISO8601 format. The time granularity must be in minutes and minimum value is 5 minutes.
     * 
     */
    public Output<String> frequency() {
        return this.frequency;
    }

    /**
     * The resource location.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The resource location.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The alert rule resources scope.
     * 
     */
    @Import(name="scope", required=true)
    private Output<List<String>> scope;

    /**
     * @return The alert rule resources scope.
     * 
     */
    public Output<List<String>> scope() {
        return this.scope;
    }

    /**
     * The alert rule severity.
     * 
     */
    @Import(name="severity", required=true)
    private Output<Either<String,Severity>> severity;

    /**
     * @return The alert rule severity.
     * 
     */
    public Output<Either<String,Severity>> severity() {
        return this.severity;
    }

    /**
     * The alert rule state.
     * 
     */
    @Import(name="state", required=true)
    private Output<Either<String,AlertRuleState>> state;

    /**
     * @return The alert rule state.
     * 
     */
    public Output<Either<String,AlertRuleState>> state() {
        return this.state;
    }

    /**
     * The resource tags.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return The resource tags.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The alert rule throttling information.
     * 
     */
    @Import(name="throttling")
    private @Nullable Output<ThrottlingInformationArgs> throttling;

    /**
     * @return The alert rule throttling information.
     * 
     */
    public Optional<Output<ThrottlingInformationArgs>> throttling() {
        return Optional.ofNullable(this.throttling);
    }

    private SmartDetectorAlertRuleArgs() {}

    private SmartDetectorAlertRuleArgs(SmartDetectorAlertRuleArgs $) {
        this.actionGroups = $.actionGroups;
        this.alertRuleName = $.alertRuleName;
        this.description = $.description;
        this.detector = $.detector;
        this.frequency = $.frequency;
        this.location = $.location;
        this.resourceGroupName = $.resourceGroupName;
        this.scope = $.scope;
        this.severity = $.severity;
        this.state = $.state;
        this.tags = $.tags;
        this.throttling = $.throttling;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SmartDetectorAlertRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SmartDetectorAlertRuleArgs $;

        public Builder() {
            $ = new SmartDetectorAlertRuleArgs();
        }

        public Builder(SmartDetectorAlertRuleArgs defaults) {
            $ = new SmartDetectorAlertRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param actionGroups The alert rule actions.
         * 
         * @return builder
         * 
         */
        public Builder actionGroups(Output<ActionGroupsInformationArgs> actionGroups) {
            $.actionGroups = actionGroups;
            return this;
        }

        /**
         * @param actionGroups The alert rule actions.
         * 
         * @return builder
         * 
         */
        public Builder actionGroups(ActionGroupsInformationArgs actionGroups) {
            return actionGroups(Output.of(actionGroups));
        }

        /**
         * @param alertRuleName The name of the alert rule.
         * 
         * @return builder
         * 
         */
        public Builder alertRuleName(@Nullable Output<String> alertRuleName) {
            $.alertRuleName = alertRuleName;
            return this;
        }

        /**
         * @param alertRuleName The name of the alert rule.
         * 
         * @return builder
         * 
         */
        public Builder alertRuleName(String alertRuleName) {
            return alertRuleName(Output.of(alertRuleName));
        }

        /**
         * @param description The alert rule description.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The alert rule description.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param detector The alert rule&#39;s detector.
         * 
         * @return builder
         * 
         */
        public Builder detector(Output<DetectorArgs> detector) {
            $.detector = detector;
            return this;
        }

        /**
         * @param detector The alert rule&#39;s detector.
         * 
         * @return builder
         * 
         */
        public Builder detector(DetectorArgs detector) {
            return detector(Output.of(detector));
        }

        /**
         * @param frequency The alert rule frequency in ISO8601 format. The time granularity must be in minutes and minimum value is 5 minutes.
         * 
         * @return builder
         * 
         */
        public Builder frequency(Output<String> frequency) {
            $.frequency = frequency;
            return this;
        }

        /**
         * @param frequency The alert rule frequency in ISO8601 format. The time granularity must be in minutes and minimum value is 5 minutes.
         * 
         * @return builder
         * 
         */
        public Builder frequency(String frequency) {
            return frequency(Output.of(frequency));
        }

        /**
         * @param location The resource location.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The resource location.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param resourceGroupName The name of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param scope The alert rule resources scope.
         * 
         * @return builder
         * 
         */
        public Builder scope(Output<List<String>> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope The alert rule resources scope.
         * 
         * @return builder
         * 
         */
        public Builder scope(List<String> scope) {
            return scope(Output.of(scope));
        }

        /**
         * @param scope The alert rule resources scope.
         * 
         * @return builder
         * 
         */
        public Builder scope(String... scope) {
            return scope(List.of(scope));
        }

        /**
         * @param severity The alert rule severity.
         * 
         * @return builder
         * 
         */
        public Builder severity(Output<Either<String,Severity>> severity) {
            $.severity = severity;
            return this;
        }

        /**
         * @param severity The alert rule severity.
         * 
         * @return builder
         * 
         */
        public Builder severity(Either<String,Severity> severity) {
            return severity(Output.of(severity));
        }

        /**
         * @param severity The alert rule severity.
         * 
         * @return builder
         * 
         */
        public Builder severity(String severity) {
            return severity(Either.ofLeft(severity));
        }

        /**
         * @param severity The alert rule severity.
         * 
         * @return builder
         * 
         */
        public Builder severity(Severity severity) {
            return severity(Either.ofRight(severity));
        }

        /**
         * @param state The alert rule state.
         * 
         * @return builder
         * 
         */
        public Builder state(Output<Either<String,AlertRuleState>> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The alert rule state.
         * 
         * @return builder
         * 
         */
        public Builder state(Either<String,AlertRuleState> state) {
            return state(Output.of(state));
        }

        /**
         * @param state The alert rule state.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Either.ofLeft(state));
        }

        /**
         * @param state The alert rule state.
         * 
         * @return builder
         * 
         */
        public Builder state(AlertRuleState state) {
            return state(Either.ofRight(state));
        }

        /**
         * @param tags The resource tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags The resource tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param throttling The alert rule throttling information.
         * 
         * @return builder
         * 
         */
        public Builder throttling(@Nullable Output<ThrottlingInformationArgs> throttling) {
            $.throttling = throttling;
            return this;
        }

        /**
         * @param throttling The alert rule throttling information.
         * 
         * @return builder
         * 
         */
        public Builder throttling(ThrottlingInformationArgs throttling) {
            return throttling(Output.of(throttling));
        }

        public SmartDetectorAlertRuleArgs build() {
            $.actionGroups = Objects.requireNonNull($.actionGroups, "expected parameter 'actionGroups' to be non-null");
            $.detector = Objects.requireNonNull($.detector, "expected parameter 'detector' to be non-null");
            $.frequency = Objects.requireNonNull($.frequency, "expected parameter 'frequency' to be non-null");
            $.location = Codegen.stringProp("location").output().arg($.location).def("global").getNullable();
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.scope = Objects.requireNonNull($.scope, "expected parameter 'scope' to be non-null");
            $.severity = Objects.requireNonNull($.severity, "expected parameter 'severity' to be non-null");
            $.state = Objects.requireNonNull($.state, "expected parameter 'state' to be non-null");
            return $;
        }
    }

}
