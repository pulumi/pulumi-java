// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.azurenative.datafactory.inputs.LinkedServiceReferenceArgs;
import com.pulumi.azurenative.datafactory.inputs.TriggerPipelineReferenceArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Trigger that runs every time the selected Blob container changes.
 * 
 */
public final class BlobTriggerArgs extends com.pulumi.resources.ResourceArgs {

    public static final BlobTriggerArgs Empty = new BlobTriggerArgs();

    /**
     * List of tags that can be used for describing the trigger.
     * 
     */
    @Import(name="annotations")
    private @Nullable Output<List<Object>> annotations;

    /**
     * @return List of tags that can be used for describing the trigger.
     * 
     */
    public Optional<Output<List<Object>>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    /**
     * Trigger description.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Trigger description.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The path of the container/folder that will trigger the pipeline.
     * 
     */
    @Import(name="folderPath", required=true)
    private Output<String> folderPath;

    /**
     * @return The path of the container/folder that will trigger the pipeline.
     * 
     */
    public Output<String> folderPath() {
        return this.folderPath;
    }

    /**
     * The Azure Storage linked service reference.
     * 
     */
    @Import(name="linkedService", required=true)
    private Output<LinkedServiceReferenceArgs> linkedService;

    /**
     * @return The Azure Storage linked service reference.
     * 
     */
    public Output<LinkedServiceReferenceArgs> linkedService() {
        return this.linkedService;
    }

    /**
     * The max number of parallel files to handle when it is triggered.
     * 
     */
    @Import(name="maxConcurrency", required=true)
    private Output<Integer> maxConcurrency;

    /**
     * @return The max number of parallel files to handle when it is triggered.
     * 
     */
    public Output<Integer> maxConcurrency() {
        return this.maxConcurrency;
    }

    /**
     * Pipelines that need to be started.
     * 
     */
    @Import(name="pipelines")
    private @Nullable Output<List<TriggerPipelineReferenceArgs>> pipelines;

    /**
     * @return Pipelines that need to be started.
     * 
     */
    public Optional<Output<List<TriggerPipelineReferenceArgs>>> pipelines() {
        return Optional.ofNullable(this.pipelines);
    }

    /**
     * Trigger type.
     * Expected value is &#39;BlobTrigger&#39;.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Trigger type.
     * Expected value is &#39;BlobTrigger&#39;.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private BlobTriggerArgs() {}

    private BlobTriggerArgs(BlobTriggerArgs $) {
        this.annotations = $.annotations;
        this.description = $.description;
        this.folderPath = $.folderPath;
        this.linkedService = $.linkedService;
        this.maxConcurrency = $.maxConcurrency;
        this.pipelines = $.pipelines;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BlobTriggerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BlobTriggerArgs $;

        public Builder() {
            $ = new BlobTriggerArgs();
        }

        public Builder(BlobTriggerArgs defaults) {
            $ = new BlobTriggerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param annotations List of tags that can be used for describing the trigger.
         * 
         * @return builder
         * 
         */
        public Builder annotations(@Nullable Output<List<Object>> annotations) {
            $.annotations = annotations;
            return this;
        }

        /**
         * @param annotations List of tags that can be used for describing the trigger.
         * 
         * @return builder
         * 
         */
        public Builder annotations(List<Object> annotations) {
            return annotations(Output.of(annotations));
        }

        /**
         * @param annotations List of tags that can be used for describing the trigger.
         * 
         * @return builder
         * 
         */
        public Builder annotations(Object... annotations) {
            return annotations(List.of(annotations));
        }

        /**
         * @param description Trigger description.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Trigger description.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param folderPath The path of the container/folder that will trigger the pipeline.
         * 
         * @return builder
         * 
         */
        public Builder folderPath(Output<String> folderPath) {
            $.folderPath = folderPath;
            return this;
        }

        /**
         * @param folderPath The path of the container/folder that will trigger the pipeline.
         * 
         * @return builder
         * 
         */
        public Builder folderPath(String folderPath) {
            return folderPath(Output.of(folderPath));
        }

        /**
         * @param linkedService The Azure Storage linked service reference.
         * 
         * @return builder
         * 
         */
        public Builder linkedService(Output<LinkedServiceReferenceArgs> linkedService) {
            $.linkedService = linkedService;
            return this;
        }

        /**
         * @param linkedService The Azure Storage linked service reference.
         * 
         * @return builder
         * 
         */
        public Builder linkedService(LinkedServiceReferenceArgs linkedService) {
            return linkedService(Output.of(linkedService));
        }

        /**
         * @param maxConcurrency The max number of parallel files to handle when it is triggered.
         * 
         * @return builder
         * 
         */
        public Builder maxConcurrency(Output<Integer> maxConcurrency) {
            $.maxConcurrency = maxConcurrency;
            return this;
        }

        /**
         * @param maxConcurrency The max number of parallel files to handle when it is triggered.
         * 
         * @return builder
         * 
         */
        public Builder maxConcurrency(Integer maxConcurrency) {
            return maxConcurrency(Output.of(maxConcurrency));
        }

        /**
         * @param pipelines Pipelines that need to be started.
         * 
         * @return builder
         * 
         */
        public Builder pipelines(@Nullable Output<List<TriggerPipelineReferenceArgs>> pipelines) {
            $.pipelines = pipelines;
            return this;
        }

        /**
         * @param pipelines Pipelines that need to be started.
         * 
         * @return builder
         * 
         */
        public Builder pipelines(List<TriggerPipelineReferenceArgs> pipelines) {
            return pipelines(Output.of(pipelines));
        }

        /**
         * @param pipelines Pipelines that need to be started.
         * 
         * @return builder
         * 
         */
        public Builder pipelines(TriggerPipelineReferenceArgs... pipelines) {
            return pipelines(List.of(pipelines));
        }

        /**
         * @param type Trigger type.
         * Expected value is &#39;BlobTrigger&#39;.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Trigger type.
         * Expected value is &#39;BlobTrigger&#39;.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public BlobTriggerArgs build() {
            $.folderPath = Objects.requireNonNull($.folderPath, "expected parameter 'folderPath' to be non-null");
            $.linkedService = Objects.requireNonNull($.linkedService, "expected parameter 'linkedService' to be non-null");
            $.maxConcurrency = Objects.requireNonNull($.maxConcurrency, "expected parameter 'maxConcurrency' to be non-null");
            $.type = Codegen.stringProp("type").output().arg($.type).require();
            return $;
        }
    }

}
