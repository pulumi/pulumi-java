// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.orbital.inputs;

import com.pulumi.azurenative.orbital.inputs.ResourceReferenceResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Customer retrieves list of Available Contacts for a spacecraft resource. Later, one of the available contact can be selected to create a contact.
 * 
 */
public final class AvailableContactsResponse extends com.pulumi.resources.InvokeArgs {

    public static final AvailableContactsResponse Empty = new AvailableContactsResponse();

    /**
     * Azimuth of the antenna at the end of the contact in decimal degrees.
     * 
     */
    @Import(name="endAzimuthDegrees", required=true)
    private Double endAzimuthDegrees;

    public Double endAzimuthDegrees() {
        return this.endAzimuthDegrees;
    }

    /**
     * Spacecraft elevation above the horizon at contact end.
     * 
     */
    @Import(name="endElevationDegrees", required=true)
    private Double endElevationDegrees;

    public Double endElevationDegrees() {
        return this.endElevationDegrees;
    }

    /**
     * Name of Azure Ground Station.
     * 
     */
    @Import(name="groundStationName", required=true)
    private String groundStationName;

    public String groundStationName() {
        return this.groundStationName;
    }

    /**
     * Maximum elevation of the antenna during the contact in decimal degrees.
     * 
     */
    @Import(name="maximumElevationDegrees", required=true)
    private Double maximumElevationDegrees;

    public Double maximumElevationDegrees() {
        return this.maximumElevationDegrees;
    }

    /**
     * Time to lost receiving a signal.
     * 
     */
    @Import(name="rxEndTime", required=true)
    private String rxEndTime;

    public String rxEndTime() {
        return this.rxEndTime;
    }

    /**
     * Earliest time to receive a signal.
     * 
     */
    @Import(name="rxStartTime", required=true)
    private String rxStartTime;

    public String rxStartTime() {
        return this.rxStartTime;
    }

    /**
     * The reference to the spacecraft resource.
     * 
     */
    @Import(name="spacecraft")
    private @Nullable ResourceReferenceResponse spacecraft;

    public Optional<ResourceReferenceResponse> spacecraft() {
        return Optional.ofNullable(this.spacecraft);
    }

    /**
     * Azimuth of the antenna at the start of the contact in decimal degrees.
     * 
     */
    @Import(name="startAzimuthDegrees", required=true)
    private Double startAzimuthDegrees;

    public Double startAzimuthDegrees() {
        return this.startAzimuthDegrees;
    }

    /**
     * Spacecraft elevation above the horizon at contact start.
     * 
     */
    @Import(name="startElevationDegrees", required=true)
    private Double startElevationDegrees;

    public Double startElevationDegrees() {
        return this.startElevationDegrees;
    }

    /**
     * Time at which antenna transmit will be disabled.
     * 
     */
    @Import(name="txEndTime", required=true)
    private String txEndTime;

    public String txEndTime() {
        return this.txEndTime;
    }

    /**
     * Time at which antenna transmit will be enabled.
     * 
     */
    @Import(name="txStartTime", required=true)
    private String txStartTime;

    public String txStartTime() {
        return this.txStartTime;
    }

    private AvailableContactsResponse() {}

    private AvailableContactsResponse(AvailableContactsResponse $) {
        this.endAzimuthDegrees = $.endAzimuthDegrees;
        this.endElevationDegrees = $.endElevationDegrees;
        this.groundStationName = $.groundStationName;
        this.maximumElevationDegrees = $.maximumElevationDegrees;
        this.rxEndTime = $.rxEndTime;
        this.rxStartTime = $.rxStartTime;
        this.spacecraft = $.spacecraft;
        this.startAzimuthDegrees = $.startAzimuthDegrees;
        this.startElevationDegrees = $.startElevationDegrees;
        this.txEndTime = $.txEndTime;
        this.txStartTime = $.txStartTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AvailableContactsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AvailableContactsResponse $;

        public Builder() {
            $ = new AvailableContactsResponse();
        }

        public Builder(AvailableContactsResponse defaults) {
            $ = new AvailableContactsResponse(Objects.requireNonNull(defaults));
        }

        public Builder endAzimuthDegrees(Double endAzimuthDegrees) {
            $.endAzimuthDegrees = endAzimuthDegrees;
            return this;
        }

        public Builder endElevationDegrees(Double endElevationDegrees) {
            $.endElevationDegrees = endElevationDegrees;
            return this;
        }

        public Builder groundStationName(String groundStationName) {
            $.groundStationName = groundStationName;
            return this;
        }

        public Builder maximumElevationDegrees(Double maximumElevationDegrees) {
            $.maximumElevationDegrees = maximumElevationDegrees;
            return this;
        }

        public Builder rxEndTime(String rxEndTime) {
            $.rxEndTime = rxEndTime;
            return this;
        }

        public Builder rxStartTime(String rxStartTime) {
            $.rxStartTime = rxStartTime;
            return this;
        }

        public Builder spacecraft(@Nullable ResourceReferenceResponse spacecraft) {
            $.spacecraft = spacecraft;
            return this;
        }

        public Builder startAzimuthDegrees(Double startAzimuthDegrees) {
            $.startAzimuthDegrees = startAzimuthDegrees;
            return this;
        }

        public Builder startElevationDegrees(Double startElevationDegrees) {
            $.startElevationDegrees = startElevationDegrees;
            return this;
        }

        public Builder txEndTime(String txEndTime) {
            $.txEndTime = txEndTime;
            return this;
        }

        public Builder txStartTime(String txStartTime) {
            $.txStartTime = txStartTime;
            return this;
        }

        public AvailableContactsResponse build() {
            $.endAzimuthDegrees = Objects.requireNonNull($.endAzimuthDegrees, "expected parameter 'endAzimuthDegrees' to be non-null");
            $.endElevationDegrees = Objects.requireNonNull($.endElevationDegrees, "expected parameter 'endElevationDegrees' to be non-null");
            $.groundStationName = Objects.requireNonNull($.groundStationName, "expected parameter 'groundStationName' to be non-null");
            $.maximumElevationDegrees = Objects.requireNonNull($.maximumElevationDegrees, "expected parameter 'maximumElevationDegrees' to be non-null");
            $.rxEndTime = Objects.requireNonNull($.rxEndTime, "expected parameter 'rxEndTime' to be non-null");
            $.rxStartTime = Objects.requireNonNull($.rxStartTime, "expected parameter 'rxStartTime' to be non-null");
            $.startAzimuthDegrees = Objects.requireNonNull($.startAzimuthDegrees, "expected parameter 'startAzimuthDegrees' to be non-null");
            $.startElevationDegrees = Objects.requireNonNull($.startElevationDegrees, "expected parameter 'startElevationDegrees' to be non-null");
            $.txEndTime = Objects.requireNonNull($.txEndTime, "expected parameter 'txEndTime' to be non-null");
            $.txStartTime = Objects.requireNonNull($.txStartTime, "expected parameter 'txStartTime' to be non-null");
            return $;
        }
    }

}
