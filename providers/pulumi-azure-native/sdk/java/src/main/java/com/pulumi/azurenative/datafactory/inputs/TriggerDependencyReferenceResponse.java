// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.azurenative.datafactory.inputs.TriggerReferenceResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;


/**
 * Trigger referenced dependency.
 * 
 */
public final class TriggerDependencyReferenceResponse extends com.pulumi.resources.InvokeArgs {

    public static final TriggerDependencyReferenceResponse Empty = new TriggerDependencyReferenceResponse();

    /**
     * Referenced trigger.
     * 
     */
    @Import(name="referenceTrigger", required=true)
    private TriggerReferenceResponse referenceTrigger;

    /**
     * @return Referenced trigger.
     * 
     */
    public TriggerReferenceResponse referenceTrigger() {
        return this.referenceTrigger;
    }

    /**
     * The type of dependency reference.
     * Expected value is &#39;TriggerDependencyReference&#39;.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    /**
     * @return The type of dependency reference.
     * Expected value is &#39;TriggerDependencyReference&#39;.
     * 
     */
    public String type() {
        return this.type;
    }

    private TriggerDependencyReferenceResponse() {}

    private TriggerDependencyReferenceResponse(TriggerDependencyReferenceResponse $) {
        this.referenceTrigger = $.referenceTrigger;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TriggerDependencyReferenceResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TriggerDependencyReferenceResponse $;

        public Builder() {
            $ = new TriggerDependencyReferenceResponse();
        }

        public Builder(TriggerDependencyReferenceResponse defaults) {
            $ = new TriggerDependencyReferenceResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param referenceTrigger Referenced trigger.
         * 
         * @return builder
         * 
         */
        public Builder referenceTrigger(TriggerReferenceResponse referenceTrigger) {
            $.referenceTrigger = referenceTrigger;
            return this;
        }

        /**
         * @param type The type of dependency reference.
         * Expected value is &#39;TriggerDependencyReference&#39;.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public TriggerDependencyReferenceResponse build() {
            $.referenceTrigger = Objects.requireNonNull($.referenceTrigger, "expected parameter 'referenceTrigger' to be non-null");
            $.type = Codegen.stringProp("type").arg($.type).require();
            return $;
        }
    }

}
