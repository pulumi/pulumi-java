// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.authorization;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RoleManagementPolicyAssignmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final RoleManagementPolicyAssignmentArgs Empty = new RoleManagementPolicyAssignmentArgs();

    /**
     * The policy id role management policy assignment.
     * 
     */
    @Import(name="policyId")
    private @Nullable Output<String> policyId;

    /**
     * @return The policy id role management policy assignment.
     * 
     */
    public Optional<Output<String>> policyId() {
        return Optional.ofNullable(this.policyId);
    }

    /**
     * The role definition of management policy assignment.
     * 
     */
    @Import(name="roleDefinitionId")
    private @Nullable Output<String> roleDefinitionId;

    /**
     * @return The role definition of management policy assignment.
     * 
     */
    public Optional<Output<String>> roleDefinitionId() {
        return Optional.ofNullable(this.roleDefinitionId);
    }

    /**
     * The name of format {guid_guid} the role management policy assignment to upsert.
     * 
     */
    @Import(name="roleManagementPolicyAssignmentName")
    private @Nullable Output<String> roleManagementPolicyAssignmentName;

    /**
     * @return The name of format {guid_guid} the role management policy assignment to upsert.
     * 
     */
    public Optional<Output<String>> roleManagementPolicyAssignmentName() {
        return Optional.ofNullable(this.roleManagementPolicyAssignmentName);
    }

    /**
     * The role management policy scope.
     * 
     */
    @Import(name="scope", required=true)
    private Output<String> scope;

    /**
     * @return The role management policy scope.
     * 
     */
    public Output<String> scope() {
        return this.scope;
    }

    private RoleManagementPolicyAssignmentArgs() {}

    private RoleManagementPolicyAssignmentArgs(RoleManagementPolicyAssignmentArgs $) {
        this.policyId = $.policyId;
        this.roleDefinitionId = $.roleDefinitionId;
        this.roleManagementPolicyAssignmentName = $.roleManagementPolicyAssignmentName;
        this.scope = $.scope;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RoleManagementPolicyAssignmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RoleManagementPolicyAssignmentArgs $;

        public Builder() {
            $ = new RoleManagementPolicyAssignmentArgs();
        }

        public Builder(RoleManagementPolicyAssignmentArgs defaults) {
            $ = new RoleManagementPolicyAssignmentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param policyId The policy id role management policy assignment.
         * 
         * @return builder
         * 
         */
        public Builder policyId(@Nullable Output<String> policyId) {
            $.policyId = policyId;
            return this;
        }

        /**
         * @param policyId The policy id role management policy assignment.
         * 
         * @return builder
         * 
         */
        public Builder policyId(String policyId) {
            return policyId(Output.of(policyId));
        }

        /**
         * @param roleDefinitionId The role definition of management policy assignment.
         * 
         * @return builder
         * 
         */
        public Builder roleDefinitionId(@Nullable Output<String> roleDefinitionId) {
            $.roleDefinitionId = roleDefinitionId;
            return this;
        }

        /**
         * @param roleDefinitionId The role definition of management policy assignment.
         * 
         * @return builder
         * 
         */
        public Builder roleDefinitionId(String roleDefinitionId) {
            return roleDefinitionId(Output.of(roleDefinitionId));
        }

        /**
         * @param roleManagementPolicyAssignmentName The name of format {guid_guid} the role management policy assignment to upsert.
         * 
         * @return builder
         * 
         */
        public Builder roleManagementPolicyAssignmentName(@Nullable Output<String> roleManagementPolicyAssignmentName) {
            $.roleManagementPolicyAssignmentName = roleManagementPolicyAssignmentName;
            return this;
        }

        /**
         * @param roleManagementPolicyAssignmentName The name of format {guid_guid} the role management policy assignment to upsert.
         * 
         * @return builder
         * 
         */
        public Builder roleManagementPolicyAssignmentName(String roleManagementPolicyAssignmentName) {
            return roleManagementPolicyAssignmentName(Output.of(roleManagementPolicyAssignmentName));
        }

        /**
         * @param scope The role management policy scope.
         * 
         * @return builder
         * 
         */
        public Builder scope(Output<String> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope The role management policy scope.
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        public RoleManagementPolicyAssignmentArgs build() {
            $.scope = Objects.requireNonNull($.scope, "expected parameter 'scope' to be non-null");
            return $;
        }
    }

}
