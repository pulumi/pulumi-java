// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.kubernetesconfiguration;

import com.pulumi.azurenative.kubernetesconfiguration.enums.ScopeType;
import com.pulumi.azurenative.kubernetesconfiguration.enums.SourceKindType;
import com.pulumi.azurenative.kubernetesconfiguration.inputs.GitRepositoryDefinitionArgs;
import com.pulumi.azurenative.kubernetesconfiguration.inputs.KustomizationDefinitionArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FluxConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final FluxConfigurationArgs Empty = new FluxConfigurationArgs();

    /**
     * The name of the kubernetes cluster.
     * 
     */
    @Import(name="clusterName", required=true)
    private Output<String> clusterName;

    public Output<String> clusterName() {
        return this.clusterName;
    }

    /**
     * The Kubernetes cluster resource name - either managedClusters (for AKS clusters) or connectedClusters (for OnPrem K8S clusters).
     * 
     */
    @Import(name="clusterResourceName", required=true)
    private Output<String> clusterResourceName;

    public Output<String> clusterResourceName() {
        return this.clusterResourceName;
    }

    /**
     * The Kubernetes cluster RP - either Microsoft.ContainerService (for AKS clusters) or Microsoft.Kubernetes (for OnPrem K8S clusters).
     * 
     */
    @Import(name="clusterRp", required=true)
    private Output<String> clusterRp;

    public Output<String> clusterRp() {
        return this.clusterRp;
    }

    /**
     * Key-value pairs of protected configuration settings for the configuration
     * 
     */
    @Import(name="configurationProtectedSettings")
    private @Nullable Output<Map<String,String>> configurationProtectedSettings;

    public Optional<Output<Map<String,String>>> configurationProtectedSettings() {
        return Optional.ofNullable(this.configurationProtectedSettings);
    }

    /**
     * Name of the Flux Configuration.
     * 
     */
    @Import(name="fluxConfigurationName")
    private @Nullable Output<String> fluxConfigurationName;

    public Optional<Output<String>> fluxConfigurationName() {
        return Optional.ofNullable(this.fluxConfigurationName);
    }

    /**
     * Parameters to reconcile to the GitRepository source kind type.
     * 
     */
    @Import(name="gitRepository")
    private @Nullable Output<GitRepositoryDefinitionArgs> gitRepository;

    public Optional<Output<GitRepositoryDefinitionArgs>> gitRepository() {
        return Optional.ofNullable(this.gitRepository);
    }

    /**
     * Array of kustomizations used to reconcile the artifact pulled by the source type on the cluster.
     * 
     */
    @Import(name="kustomizations")
    private @Nullable Output<Map<String,KustomizationDefinitionArgs>> kustomizations;

    public Optional<Output<Map<String,KustomizationDefinitionArgs>>> kustomizations() {
        return Optional.ofNullable(this.kustomizations);
    }

    /**
     * The namespace to which this configuration is installed to. Maximum of 253 lower case alphanumeric characters, hyphen and period only.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Scope at which the operator will be installed.
     * 
     */
    @Import(name="scope")
    private @Nullable Output<Either<String,ScopeType>> scope;

    public Optional<Output<Either<String,ScopeType>>> scope() {
        return Optional.ofNullable(this.scope);
    }

    /**
     * Source Kind to pull the configuration data from.
     * 
     */
    @Import(name="sourceKind")
    private @Nullable Output<Either<String,SourceKindType>> sourceKind;

    public Optional<Output<Either<String,SourceKindType>>> sourceKind() {
        return Optional.ofNullable(this.sourceKind);
    }

    /**
     * Whether this configuration should suspend its reconciliation of its kustomizations and sources.
     * 
     */
    @Import(name="suspend")
    private @Nullable Output<Boolean> suspend;

    public Optional<Output<Boolean>> suspend() {
        return Optional.ofNullable(this.suspend);
    }

    private FluxConfigurationArgs() {}

    private FluxConfigurationArgs(FluxConfigurationArgs $) {
        this.clusterName = $.clusterName;
        this.clusterResourceName = $.clusterResourceName;
        this.clusterRp = $.clusterRp;
        this.configurationProtectedSettings = $.configurationProtectedSettings;
        this.fluxConfigurationName = $.fluxConfigurationName;
        this.gitRepository = $.gitRepository;
        this.kustomizations = $.kustomizations;
        this.namespace = $.namespace;
        this.resourceGroupName = $.resourceGroupName;
        this.scope = $.scope;
        this.sourceKind = $.sourceKind;
        this.suspend = $.suspend;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FluxConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FluxConfigurationArgs $;

        public Builder() {
            $ = new FluxConfigurationArgs();
        }

        public Builder(FluxConfigurationArgs defaults) {
            $ = new FluxConfigurationArgs(Objects.requireNonNull(defaults));
        }

        public Builder clusterName(Output<String> clusterName) {
            $.clusterName = clusterName;
            return this;
        }

        public Builder clusterName(String clusterName) {
            return clusterName(Output.of(clusterName));
        }

        public Builder clusterResourceName(Output<String> clusterResourceName) {
            $.clusterResourceName = clusterResourceName;
            return this;
        }

        public Builder clusterResourceName(String clusterResourceName) {
            return clusterResourceName(Output.of(clusterResourceName));
        }

        public Builder clusterRp(Output<String> clusterRp) {
            $.clusterRp = clusterRp;
            return this;
        }

        public Builder clusterRp(String clusterRp) {
            return clusterRp(Output.of(clusterRp));
        }

        public Builder configurationProtectedSettings(@Nullable Output<Map<String,String>> configurationProtectedSettings) {
            $.configurationProtectedSettings = configurationProtectedSettings;
            return this;
        }

        public Builder configurationProtectedSettings(Map<String,String> configurationProtectedSettings) {
            return configurationProtectedSettings(Output.of(configurationProtectedSettings));
        }

        public Builder fluxConfigurationName(@Nullable Output<String> fluxConfigurationName) {
            $.fluxConfigurationName = fluxConfigurationName;
            return this;
        }

        public Builder fluxConfigurationName(String fluxConfigurationName) {
            return fluxConfigurationName(Output.of(fluxConfigurationName));
        }

        public Builder gitRepository(@Nullable Output<GitRepositoryDefinitionArgs> gitRepository) {
            $.gitRepository = gitRepository;
            return this;
        }

        public Builder gitRepository(GitRepositoryDefinitionArgs gitRepository) {
            return gitRepository(Output.of(gitRepository));
        }

        public Builder kustomizations(@Nullable Output<Map<String,KustomizationDefinitionArgs>> kustomizations) {
            $.kustomizations = kustomizations;
            return this;
        }

        public Builder kustomizations(Map<String,KustomizationDefinitionArgs> kustomizations) {
            return kustomizations(Output.of(kustomizations));
        }

        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder scope(@Nullable Output<Either<String,ScopeType>> scope) {
            $.scope = scope;
            return this;
        }

        public Builder scope(Either<String,ScopeType> scope) {
            return scope(Output.of(scope));
        }

        public Builder scope(String scope) {
            return scope(Either.ofLeft(scope));
        }

        public Builder scope(ScopeType scope) {
            return scope(Either.ofRight(scope));
        }

        public Builder sourceKind(@Nullable Output<Either<String,SourceKindType>> sourceKind) {
            $.sourceKind = sourceKind;
            return this;
        }

        public Builder sourceKind(Either<String,SourceKindType> sourceKind) {
            return sourceKind(Output.of(sourceKind));
        }

        public Builder sourceKind(String sourceKind) {
            return sourceKind(Either.ofLeft(sourceKind));
        }

        public Builder sourceKind(SourceKindType sourceKind) {
            return sourceKind(Either.ofRight(sourceKind));
        }

        public Builder suspend(@Nullable Output<Boolean> suspend) {
            $.suspend = suspend;
            return this;
        }

        public Builder suspend(Boolean suspend) {
            return suspend(Output.of(suspend));
        }

        public FluxConfigurationArgs build() {
            $.clusterName = Objects.requireNonNull($.clusterName, "expected parameter 'clusterName' to be non-null");
            $.clusterResourceName = Objects.requireNonNull($.clusterResourceName, "expected parameter 'clusterResourceName' to be non-null");
            $.clusterRp = Objects.requireNonNull($.clusterRp, "expected parameter 'clusterRp' to be non-null");
            $.namespace = Codegen.stringProp("namespace").output().arg($.namespace).def("default").getNullable();
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.suspend = Codegen.booleanProp("suspend").output().arg($.suspend).def(false).getNullable();
            return $;
        }
    }

}
