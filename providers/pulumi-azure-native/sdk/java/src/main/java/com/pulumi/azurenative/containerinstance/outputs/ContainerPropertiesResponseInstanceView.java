// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.containerinstance.outputs;

import com.pulumi.azurenative.containerinstance.outputs.ContainerStateResponse;
import com.pulumi.azurenative.containerinstance.outputs.EventResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.util.List;
import java.util.Objects;

@CustomType
public final class ContainerPropertiesResponseInstanceView {
    /**
     * @return Current container instance state.
     * 
     */
    private final ContainerStateResponse currentState;
    /**
     * @return The events of the container instance.
     * 
     */
    private final List<EventResponse> events;
    /**
     * @return Previous container instance state.
     * 
     */
    private final ContainerStateResponse previousState;
    /**
     * @return The number of times that the container instance has been restarted.
     * 
     */
    private final Integer restartCount;

    @CustomType.Constructor
    private ContainerPropertiesResponseInstanceView(
        @CustomType.Parameter("currentState") ContainerStateResponse currentState,
        @CustomType.Parameter("events") List<EventResponse> events,
        @CustomType.Parameter("previousState") ContainerStateResponse previousState,
        @CustomType.Parameter("restartCount") Integer restartCount) {
        this.currentState = currentState;
        this.events = events;
        this.previousState = previousState;
        this.restartCount = restartCount;
    }

    /**
     * @return Current container instance state.
     * 
     */
    public ContainerStateResponse currentState() {
        return this.currentState;
    }
    /**
     * @return The events of the container instance.
     * 
     */
    public List<EventResponse> events() {
        return this.events;
    }
    /**
     * @return Previous container instance state.
     * 
     */
    public ContainerStateResponse previousState() {
        return this.previousState;
    }
    /**
     * @return The number of times that the container instance has been restarted.
     * 
     */
    public Integer restartCount() {
        return this.restartCount;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ContainerPropertiesResponseInstanceView defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContainerStateResponse currentState;
        private List<EventResponse> events;
        private ContainerStateResponse previousState;
        private Integer restartCount;

        public Builder() {
    	      // Empty
        }

        public Builder(ContainerPropertiesResponseInstanceView defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.currentState = defaults.currentState;
    	      this.events = defaults.events;
    	      this.previousState = defaults.previousState;
    	      this.restartCount = defaults.restartCount;
        }

        public Builder currentState(ContainerStateResponse currentState) {
            this.currentState = Objects.requireNonNull(currentState);
            return this;
        }
        public Builder events(List<EventResponse> events) {
            this.events = Objects.requireNonNull(events);
            return this;
        }
        public Builder events(EventResponse... events) {
            return events(List.of(events));
        }
        public Builder previousState(ContainerStateResponse previousState) {
            this.previousState = Objects.requireNonNull(previousState);
            return this;
        }
        public Builder restartCount(Integer restartCount) {
            this.restartCount = Objects.requireNonNull(restartCount);
            return this;
        }        public ContainerPropertiesResponseInstanceView build() {
            return new ContainerPropertiesResponseInstanceView(currentState, events, previousState, restartCount);
        }
    }
}
