// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network;

import com.pulumi.azurenative.network.inputs.FrontendIPConfigurationArgs;
import com.pulumi.azurenative.network.inputs.NetworkInterfaceIPConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VirtualNetworkTapArgs extends com.pulumi.resources.ResourceArgs {

    public static final VirtualNetworkTapArgs Empty = new VirtualNetworkTapArgs();

    /**
     * The reference to the private IP address on the internal Load Balancer that will receive the tap.
     * 
     */
    @Import(name="destinationLoadBalancerFrontEndIPConfiguration")
    private @Nullable Output<FrontendIPConfigurationArgs> destinationLoadBalancerFrontEndIPConfiguration;

    public Optional<Output<FrontendIPConfigurationArgs>> destinationLoadBalancerFrontEndIPConfiguration() {
        return Optional.ofNullable(this.destinationLoadBalancerFrontEndIPConfiguration);
    }

    /**
     * The reference to the private IP Address of the collector nic that will receive the tap.
     * 
     */
    @Import(name="destinationNetworkInterfaceIPConfiguration")
    private @Nullable Output<NetworkInterfaceIPConfigurationArgs> destinationNetworkInterfaceIPConfiguration;

    public Optional<Output<NetworkInterfaceIPConfigurationArgs>> destinationNetworkInterfaceIPConfiguration() {
        return Optional.ofNullable(this.destinationNetworkInterfaceIPConfiguration);
    }

    /**
     * The VXLAN destination port that will receive the tapped traffic.
     * 
     */
    @Import(name="destinationPort")
    private @Nullable Output<Integer> destinationPort;

    public Optional<Output<Integer>> destinationPort() {
        return Optional.ofNullable(this.destinationPort);
    }

    /**
     * Resource ID.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Resource location.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The name of the virtual network tap.
     * 
     */
    @Import(name="tapName")
    private @Nullable Output<String> tapName;

    public Optional<Output<String>> tapName() {
        return Optional.ofNullable(this.tapName);
    }

    private VirtualNetworkTapArgs() {}

    private VirtualNetworkTapArgs(VirtualNetworkTapArgs $) {
        this.destinationLoadBalancerFrontEndIPConfiguration = $.destinationLoadBalancerFrontEndIPConfiguration;
        this.destinationNetworkInterfaceIPConfiguration = $.destinationNetworkInterfaceIPConfiguration;
        this.destinationPort = $.destinationPort;
        this.id = $.id;
        this.location = $.location;
        this.resourceGroupName = $.resourceGroupName;
        this.tags = $.tags;
        this.tapName = $.tapName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VirtualNetworkTapArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VirtualNetworkTapArgs $;

        public Builder() {
            $ = new VirtualNetworkTapArgs();
        }

        public Builder(VirtualNetworkTapArgs defaults) {
            $ = new VirtualNetworkTapArgs(Objects.requireNonNull(defaults));
        }

        public Builder destinationLoadBalancerFrontEndIPConfiguration(@Nullable Output<FrontendIPConfigurationArgs> destinationLoadBalancerFrontEndIPConfiguration) {
            $.destinationLoadBalancerFrontEndIPConfiguration = destinationLoadBalancerFrontEndIPConfiguration;
            return this;
        }

        public Builder destinationLoadBalancerFrontEndIPConfiguration(FrontendIPConfigurationArgs destinationLoadBalancerFrontEndIPConfiguration) {
            return destinationLoadBalancerFrontEndIPConfiguration(Output.of(destinationLoadBalancerFrontEndIPConfiguration));
        }

        public Builder destinationNetworkInterfaceIPConfiguration(@Nullable Output<NetworkInterfaceIPConfigurationArgs> destinationNetworkInterfaceIPConfiguration) {
            $.destinationNetworkInterfaceIPConfiguration = destinationNetworkInterfaceIPConfiguration;
            return this;
        }

        public Builder destinationNetworkInterfaceIPConfiguration(NetworkInterfaceIPConfigurationArgs destinationNetworkInterfaceIPConfiguration) {
            return destinationNetworkInterfaceIPConfiguration(Output.of(destinationNetworkInterfaceIPConfiguration));
        }

        public Builder destinationPort(@Nullable Output<Integer> destinationPort) {
            $.destinationPort = destinationPort;
            return this;
        }

        public Builder destinationPort(Integer destinationPort) {
            return destinationPort(Output.of(destinationPort));
        }

        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        public Builder id(String id) {
            return id(Output.of(id));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder tapName(@Nullable Output<String> tapName) {
            $.tapName = tapName;
            return this;
        }

        public Builder tapName(String tapName) {
            return tapName(Output.of(tapName));
        }

        public VirtualNetworkTapArgs build() {
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
