// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.containerinstance.inputs;

import com.pulumi.azurenative.containerinstance.inputs.ContainerStateResponse;
import com.pulumi.azurenative.containerinstance.inputs.EventResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.List;
import java.util.Objects;


/**
 * The instance view of the init container. Only valid in response.
 * 
 */
public final class InitContainerPropertiesDefinitionResponseInstanceView extends com.pulumi.resources.InvokeArgs {

    public static final InitContainerPropertiesDefinitionResponseInstanceView Empty = new InitContainerPropertiesDefinitionResponseInstanceView();

    /**
     * The current state of the init container.
     * 
     */
    @Import(name="currentState", required=true)
    private ContainerStateResponse currentState;

    /**
     * @return The current state of the init container.
     * 
     */
    public ContainerStateResponse currentState() {
        return this.currentState;
    }

    /**
     * The events of the init container.
     * 
     */
    @Import(name="events", required=true)
    private List<EventResponse> events;

    /**
     * @return The events of the init container.
     * 
     */
    public List<EventResponse> events() {
        return this.events;
    }

    /**
     * The previous state of the init container.
     * 
     */
    @Import(name="previousState", required=true)
    private ContainerStateResponse previousState;

    /**
     * @return The previous state of the init container.
     * 
     */
    public ContainerStateResponse previousState() {
        return this.previousState;
    }

    /**
     * The number of times that the init container has been restarted.
     * 
     */
    @Import(name="restartCount", required=true)
    private Integer restartCount;

    /**
     * @return The number of times that the init container has been restarted.
     * 
     */
    public Integer restartCount() {
        return this.restartCount;
    }

    private InitContainerPropertiesDefinitionResponseInstanceView() {}

    private InitContainerPropertiesDefinitionResponseInstanceView(InitContainerPropertiesDefinitionResponseInstanceView $) {
        this.currentState = $.currentState;
        this.events = $.events;
        this.previousState = $.previousState;
        this.restartCount = $.restartCount;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InitContainerPropertiesDefinitionResponseInstanceView defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InitContainerPropertiesDefinitionResponseInstanceView $;

        public Builder() {
            $ = new InitContainerPropertiesDefinitionResponseInstanceView();
        }

        public Builder(InitContainerPropertiesDefinitionResponseInstanceView defaults) {
            $ = new InitContainerPropertiesDefinitionResponseInstanceView(Objects.requireNonNull(defaults));
        }

        /**
         * @param currentState The current state of the init container.
         * 
         * @return builder
         * 
         */
        public Builder currentState(ContainerStateResponse currentState) {
            $.currentState = currentState;
            return this;
        }

        /**
         * @param events The events of the init container.
         * 
         * @return builder
         * 
         */
        public Builder events(List<EventResponse> events) {
            $.events = events;
            return this;
        }

        /**
         * @param events The events of the init container.
         * 
         * @return builder
         * 
         */
        public Builder events(EventResponse... events) {
            return events(List.of(events));
        }

        /**
         * @param previousState The previous state of the init container.
         * 
         * @return builder
         * 
         */
        public Builder previousState(ContainerStateResponse previousState) {
            $.previousState = previousState;
            return this;
        }

        /**
         * @param restartCount The number of times that the init container has been restarted.
         * 
         * @return builder
         * 
         */
        public Builder restartCount(Integer restartCount) {
            $.restartCount = restartCount;
            return this;
        }

        public InitContainerPropertiesDefinitionResponseInstanceView build() {
            $.currentState = Objects.requireNonNull($.currentState, "expected parameter 'currentState' to be non-null");
            $.events = Objects.requireNonNull($.events, "expected parameter 'events' to be non-null");
            $.previousState = Objects.requireNonNull($.previousState, "expected parameter 'previousState' to be non-null");
            $.restartCount = Objects.requireNonNull($.restartCount, "expected parameter 'restartCount' to be non-null");
            return $;
        }
    }

}
