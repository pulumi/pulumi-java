// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.azurenative.network.enums.MonitorProtocol;
import com.pulumi.azurenative.network.enums.ProfileMonitorStatus;
import com.pulumi.azurenative.network.inputs.MonitorConfigCustomHeadersArgs;
import com.pulumi.azurenative.network.inputs.MonitorConfigExpectedStatusCodeRangesArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Class containing endpoint monitoring settings in a Traffic Manager profile.
 * 
 */
public final class MonitorConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final MonitorConfigArgs Empty = new MonitorConfigArgs();

    /**
     * List of custom headers.
     * 
     */
    @Import(name="customHeaders")
    private @Nullable Output<List<MonitorConfigCustomHeadersArgs>> customHeaders;

    public Optional<Output<List<MonitorConfigCustomHeadersArgs>>> customHeaders() {
        return Optional.ofNullable(this.customHeaders);
    }

    /**
     * List of expected status code ranges.
     * 
     */
    @Import(name="expectedStatusCodeRanges")
    private @Nullable Output<List<MonitorConfigExpectedStatusCodeRangesArgs>> expectedStatusCodeRanges;

    public Optional<Output<List<MonitorConfigExpectedStatusCodeRangesArgs>>> expectedStatusCodeRanges() {
        return Optional.ofNullable(this.expectedStatusCodeRanges);
    }

    /**
     * The monitor interval for endpoints in this profile. This is the interval at which Traffic Manager will check the health of each endpoint in this profile.
     * 
     */
    @Import(name="intervalInSeconds")
    private @Nullable Output<Double> intervalInSeconds;

    public Optional<Output<Double>> intervalInSeconds() {
        return Optional.ofNullable(this.intervalInSeconds);
    }

    /**
     * The path relative to the endpoint domain name used to probe for endpoint health.
     * 
     */
    @Import(name="path")
    private @Nullable Output<String> path;

    public Optional<Output<String>> path() {
        return Optional.ofNullable(this.path);
    }

    /**
     * The TCP port used to probe for endpoint health.
     * 
     */
    @Import(name="port")
    private @Nullable Output<Double> port;

    public Optional<Output<Double>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * The profile-level monitoring status of the Traffic Manager profile.
     * 
     */
    @Import(name="profileMonitorStatus")
    private @Nullable Output<Either<String,ProfileMonitorStatus>> profileMonitorStatus;

    public Optional<Output<Either<String,ProfileMonitorStatus>>> profileMonitorStatus() {
        return Optional.ofNullable(this.profileMonitorStatus);
    }

    /**
     * The protocol (HTTP, HTTPS or TCP) used to probe for endpoint health.
     * 
     */
    @Import(name="protocol")
    private @Nullable Output<Either<String,MonitorProtocol>> protocol;

    public Optional<Output<Either<String,MonitorProtocol>>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    /**
     * The monitor timeout for endpoints in this profile. This is the time that Traffic Manager allows endpoints in this profile to response to the health check.
     * 
     */
    @Import(name="timeoutInSeconds")
    private @Nullable Output<Double> timeoutInSeconds;

    public Optional<Output<Double>> timeoutInSeconds() {
        return Optional.ofNullable(this.timeoutInSeconds);
    }

    /**
     * The number of consecutive failed health check that Traffic Manager tolerates before declaring an endpoint in this profile Degraded after the next failed health check.
     * 
     */
    @Import(name="toleratedNumberOfFailures")
    private @Nullable Output<Double> toleratedNumberOfFailures;

    public Optional<Output<Double>> toleratedNumberOfFailures() {
        return Optional.ofNullable(this.toleratedNumberOfFailures);
    }

    private MonitorConfigArgs() {}

    private MonitorConfigArgs(MonitorConfigArgs $) {
        this.customHeaders = $.customHeaders;
        this.expectedStatusCodeRanges = $.expectedStatusCodeRanges;
        this.intervalInSeconds = $.intervalInSeconds;
        this.path = $.path;
        this.port = $.port;
        this.profileMonitorStatus = $.profileMonitorStatus;
        this.protocol = $.protocol;
        this.timeoutInSeconds = $.timeoutInSeconds;
        this.toleratedNumberOfFailures = $.toleratedNumberOfFailures;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MonitorConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MonitorConfigArgs $;

        public Builder() {
            $ = new MonitorConfigArgs();
        }

        public Builder(MonitorConfigArgs defaults) {
            $ = new MonitorConfigArgs(Objects.requireNonNull(defaults));
        }

        public Builder customHeaders(@Nullable Output<List<MonitorConfigCustomHeadersArgs>> customHeaders) {
            $.customHeaders = customHeaders;
            return this;
        }

        public Builder customHeaders(List<MonitorConfigCustomHeadersArgs> customHeaders) {
            return customHeaders(Output.of(customHeaders));
        }

        public Builder customHeaders(MonitorConfigCustomHeadersArgs... customHeaders) {
            return customHeaders(List.of(customHeaders));
        }

        public Builder expectedStatusCodeRanges(@Nullable Output<List<MonitorConfigExpectedStatusCodeRangesArgs>> expectedStatusCodeRanges) {
            $.expectedStatusCodeRanges = expectedStatusCodeRanges;
            return this;
        }

        public Builder expectedStatusCodeRanges(List<MonitorConfigExpectedStatusCodeRangesArgs> expectedStatusCodeRanges) {
            return expectedStatusCodeRanges(Output.of(expectedStatusCodeRanges));
        }

        public Builder expectedStatusCodeRanges(MonitorConfigExpectedStatusCodeRangesArgs... expectedStatusCodeRanges) {
            return expectedStatusCodeRanges(List.of(expectedStatusCodeRanges));
        }

        public Builder intervalInSeconds(@Nullable Output<Double> intervalInSeconds) {
            $.intervalInSeconds = intervalInSeconds;
            return this;
        }

        public Builder intervalInSeconds(Double intervalInSeconds) {
            return intervalInSeconds(Output.of(intervalInSeconds));
        }

        public Builder path(@Nullable Output<String> path) {
            $.path = path;
            return this;
        }

        public Builder path(String path) {
            return path(Output.of(path));
        }

        public Builder port(@Nullable Output<Double> port) {
            $.port = port;
            return this;
        }

        public Builder port(Double port) {
            return port(Output.of(port));
        }

        public Builder profileMonitorStatus(@Nullable Output<Either<String,ProfileMonitorStatus>> profileMonitorStatus) {
            $.profileMonitorStatus = profileMonitorStatus;
            return this;
        }

        public Builder profileMonitorStatus(Either<String,ProfileMonitorStatus> profileMonitorStatus) {
            return profileMonitorStatus(Output.of(profileMonitorStatus));
        }

        public Builder protocol(@Nullable Output<Either<String,MonitorProtocol>> protocol) {
            $.protocol = protocol;
            return this;
        }

        public Builder protocol(Either<String,MonitorProtocol> protocol) {
            return protocol(Output.of(protocol));
        }

        public Builder timeoutInSeconds(@Nullable Output<Double> timeoutInSeconds) {
            $.timeoutInSeconds = timeoutInSeconds;
            return this;
        }

        public Builder timeoutInSeconds(Double timeoutInSeconds) {
            return timeoutInSeconds(Output.of(timeoutInSeconds));
        }

        public Builder toleratedNumberOfFailures(@Nullable Output<Double> toleratedNumberOfFailures) {
            $.toleratedNumberOfFailures = toleratedNumberOfFailures;
            return this;
        }

        public Builder toleratedNumberOfFailures(Double toleratedNumberOfFailures) {
            return toleratedNumberOfFailures(Output.of(toleratedNumberOfFailures));
        }

        public MonitorConfigArgs build() {
            return $;
        }
    }

}
