// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.sql;

import com.pulumi.azurenative.sql.enums.SensitivityLabelRank;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SensitivityLabelArgs extends com.pulumi.resources.ResourceArgs {

    public static final SensitivityLabelArgs Empty = new SensitivityLabelArgs();

    /**
     * The name of the column.
     * 
     */
    @Import(name="columnName", required=true)
    private Output<String> columnName;

    /**
     * @return The name of the column.
     * 
     */
    public Output<String> columnName() {
        return this.columnName;
    }

    /**
     * The name of the database.
     * 
     */
    @Import(name="databaseName", required=true)
    private Output<String> databaseName;

    /**
     * @return The name of the database.
     * 
     */
    public Output<String> databaseName() {
        return this.databaseName;
    }

    /**
     * The information type.
     * 
     */
    @Import(name="informationType")
    private @Nullable Output<String> informationType;

    /**
     * @return The information type.
     * 
     */
    public Optional<Output<String>> informationType() {
        return Optional.ofNullable(this.informationType);
    }

    /**
     * The information type ID.
     * 
     */
    @Import(name="informationTypeId")
    private @Nullable Output<String> informationTypeId;

    /**
     * @return The information type ID.
     * 
     */
    public Optional<Output<String>> informationTypeId() {
        return Optional.ofNullable(this.informationTypeId);
    }

    /**
     * The label ID.
     * 
     */
    @Import(name="labelId")
    private @Nullable Output<String> labelId;

    /**
     * @return The label ID.
     * 
     */
    public Optional<Output<String>> labelId() {
        return Optional.ofNullable(this.labelId);
    }

    /**
     * The label name.
     * 
     */
    @Import(name="labelName")
    private @Nullable Output<String> labelName;

    /**
     * @return The label name.
     * 
     */
    public Optional<Output<String>> labelName() {
        return Optional.ofNullable(this.labelName);
    }

    @Import(name="rank")
    private @Nullable Output<SensitivityLabelRank> rank;

    public Optional<Output<SensitivityLabelRank>> rank() {
        return Optional.ofNullable(this.rank);
    }

    /**
     * The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The name of the schema.
     * 
     */
    @Import(name="schemaName", required=true)
    private Output<String> schemaName;

    /**
     * @return The name of the schema.
     * 
     */
    public Output<String> schemaName() {
        return this.schemaName;
    }

    /**
     * The source of the sensitivity label.
     * 
     */
    @Import(name="sensitivityLabelSource")
    private @Nullable Output<String> sensitivityLabelSource;

    /**
     * @return The source of the sensitivity label.
     * 
     */
    public Optional<Output<String>> sensitivityLabelSource() {
        return Optional.ofNullable(this.sensitivityLabelSource);
    }

    /**
     * The name of the server.
     * 
     */
    @Import(name="serverName", required=true)
    private Output<String> serverName;

    /**
     * @return The name of the server.
     * 
     */
    public Output<String> serverName() {
        return this.serverName;
    }

    /**
     * The name of the table.
     * 
     */
    @Import(name="tableName", required=true)
    private Output<String> tableName;

    /**
     * @return The name of the table.
     * 
     */
    public Output<String> tableName() {
        return this.tableName;
    }

    private SensitivityLabelArgs() {}

    private SensitivityLabelArgs(SensitivityLabelArgs $) {
        this.columnName = $.columnName;
        this.databaseName = $.databaseName;
        this.informationType = $.informationType;
        this.informationTypeId = $.informationTypeId;
        this.labelId = $.labelId;
        this.labelName = $.labelName;
        this.rank = $.rank;
        this.resourceGroupName = $.resourceGroupName;
        this.schemaName = $.schemaName;
        this.sensitivityLabelSource = $.sensitivityLabelSource;
        this.serverName = $.serverName;
        this.tableName = $.tableName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SensitivityLabelArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SensitivityLabelArgs $;

        public Builder() {
            $ = new SensitivityLabelArgs();
        }

        public Builder(SensitivityLabelArgs defaults) {
            $ = new SensitivityLabelArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param columnName The name of the column.
         * 
         * @return builder
         * 
         */
        public Builder columnName(Output<String> columnName) {
            $.columnName = columnName;
            return this;
        }

        /**
         * @param columnName The name of the column.
         * 
         * @return builder
         * 
         */
        public Builder columnName(String columnName) {
            return columnName(Output.of(columnName));
        }

        /**
         * @param databaseName The name of the database.
         * 
         * @return builder
         * 
         */
        public Builder databaseName(Output<String> databaseName) {
            $.databaseName = databaseName;
            return this;
        }

        /**
         * @param databaseName The name of the database.
         * 
         * @return builder
         * 
         */
        public Builder databaseName(String databaseName) {
            return databaseName(Output.of(databaseName));
        }

        /**
         * @param informationType The information type.
         * 
         * @return builder
         * 
         */
        public Builder informationType(@Nullable Output<String> informationType) {
            $.informationType = informationType;
            return this;
        }

        /**
         * @param informationType The information type.
         * 
         * @return builder
         * 
         */
        public Builder informationType(String informationType) {
            return informationType(Output.of(informationType));
        }

        /**
         * @param informationTypeId The information type ID.
         * 
         * @return builder
         * 
         */
        public Builder informationTypeId(@Nullable Output<String> informationTypeId) {
            $.informationTypeId = informationTypeId;
            return this;
        }

        /**
         * @param informationTypeId The information type ID.
         * 
         * @return builder
         * 
         */
        public Builder informationTypeId(String informationTypeId) {
            return informationTypeId(Output.of(informationTypeId));
        }

        /**
         * @param labelId The label ID.
         * 
         * @return builder
         * 
         */
        public Builder labelId(@Nullable Output<String> labelId) {
            $.labelId = labelId;
            return this;
        }

        /**
         * @param labelId The label ID.
         * 
         * @return builder
         * 
         */
        public Builder labelId(String labelId) {
            return labelId(Output.of(labelId));
        }

        /**
         * @param labelName The label name.
         * 
         * @return builder
         * 
         */
        public Builder labelName(@Nullable Output<String> labelName) {
            $.labelName = labelName;
            return this;
        }

        /**
         * @param labelName The label name.
         * 
         * @return builder
         * 
         */
        public Builder labelName(String labelName) {
            return labelName(Output.of(labelName));
        }

        public Builder rank(@Nullable Output<SensitivityLabelRank> rank) {
            $.rank = rank;
            return this;
        }

        public Builder rank(SensitivityLabelRank rank) {
            return rank(Output.of(rank));
        }

        /**
         * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param schemaName The name of the schema.
         * 
         * @return builder
         * 
         */
        public Builder schemaName(Output<String> schemaName) {
            $.schemaName = schemaName;
            return this;
        }

        /**
         * @param schemaName The name of the schema.
         * 
         * @return builder
         * 
         */
        public Builder schemaName(String schemaName) {
            return schemaName(Output.of(schemaName));
        }

        /**
         * @param sensitivityLabelSource The source of the sensitivity label.
         * 
         * @return builder
         * 
         */
        public Builder sensitivityLabelSource(@Nullable Output<String> sensitivityLabelSource) {
            $.sensitivityLabelSource = sensitivityLabelSource;
            return this;
        }

        /**
         * @param sensitivityLabelSource The source of the sensitivity label.
         * 
         * @return builder
         * 
         */
        public Builder sensitivityLabelSource(String sensitivityLabelSource) {
            return sensitivityLabelSource(Output.of(sensitivityLabelSource));
        }

        /**
         * @param serverName The name of the server.
         * 
         * @return builder
         * 
         */
        public Builder serverName(Output<String> serverName) {
            $.serverName = serverName;
            return this;
        }

        /**
         * @param serverName The name of the server.
         * 
         * @return builder
         * 
         */
        public Builder serverName(String serverName) {
            return serverName(Output.of(serverName));
        }

        /**
         * @param tableName The name of the table.
         * 
         * @return builder
         * 
         */
        public Builder tableName(Output<String> tableName) {
            $.tableName = tableName;
            return this;
        }

        /**
         * @param tableName The name of the table.
         * 
         * @return builder
         * 
         */
        public Builder tableName(String tableName) {
            return tableName(Output.of(tableName));
        }

        public SensitivityLabelArgs build() {
            $.columnName = Objects.requireNonNull($.columnName, "expected parameter 'columnName' to be non-null");
            $.databaseName = Objects.requireNonNull($.databaseName, "expected parameter 'databaseName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.schemaName = Objects.requireNonNull($.schemaName, "expected parameter 'schemaName' to be non-null");
            $.serverName = Objects.requireNonNull($.serverName, "expected parameter 'serverName' to be non-null");
            $.tableName = Objects.requireNonNull($.tableName, "expected parameter 'tableName' to be non-null");
            return $;
        }
    }

}
