// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.web.outputs;

import com.pulumi.azurenative.web.outputs.TrafficWeightResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class IngressResponse {
    /**
     * @return Bool indicating if HTTP connections to is allowed. If set to false HTTP connections are automatically redirected to HTTPS connections
     * 
     */
    private final @Nullable Boolean allowInsecure;
    /**
     * @return Bool indicating if app exposes an external http endpoint
     * 
     */
    private final @Nullable Boolean external;
    /**
     * @return Hostname.
     * 
     */
    private final String fqdn;
    /**
     * @return Target Port in containers for traffic from ingress
     * 
     */
    private final @Nullable Integer targetPort;
    private final @Nullable List<TrafficWeightResponse> traffic;
    /**
     * @return Ingress transport protocol
     * 
     */
    private final @Nullable String transport;

    @CustomType.Constructor
    private IngressResponse(
        @CustomType.Parameter("allowInsecure") @Nullable Boolean allowInsecure,
        @CustomType.Parameter("external") @Nullable Boolean external,
        @CustomType.Parameter("fqdn") String fqdn,
        @CustomType.Parameter("targetPort") @Nullable Integer targetPort,
        @CustomType.Parameter("traffic") @Nullable List<TrafficWeightResponse> traffic,
        @CustomType.Parameter("transport") @Nullable String transport) {
        this.allowInsecure = allowInsecure;
        this.external = external;
        this.fqdn = fqdn;
        this.targetPort = targetPort;
        this.traffic = traffic;
        this.transport = transport;
    }

    /**
     * @return Bool indicating if HTTP connections to is allowed. If set to false HTTP connections are automatically redirected to HTTPS connections
     * 
     */
    public Optional<Boolean> allowInsecure() {
        return Optional.ofNullable(this.allowInsecure);
    }
    /**
     * @return Bool indicating if app exposes an external http endpoint
     * 
     */
    public Optional<Boolean> external() {
        return Optional.ofNullable(this.external);
    }
    /**
     * @return Hostname.
     * 
     */
    public String fqdn() {
        return this.fqdn;
    }
    /**
     * @return Target Port in containers for traffic from ingress
     * 
     */
    public Optional<Integer> targetPort() {
        return Optional.ofNullable(this.targetPort);
    }
    public List<TrafficWeightResponse> traffic() {
        return this.traffic == null ? List.of() : this.traffic;
    }
    /**
     * @return Ingress transport protocol
     * 
     */
    public Optional<String> transport() {
        return Optional.ofNullable(this.transport);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(IngressResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Boolean allowInsecure;
        private @Nullable Boolean external;
        private String fqdn;
        private @Nullable Integer targetPort;
        private @Nullable List<TrafficWeightResponse> traffic;
        private @Nullable String transport;

        public Builder() {
    	      // Empty
        }

        public Builder(IngressResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowInsecure = defaults.allowInsecure;
    	      this.external = defaults.external;
    	      this.fqdn = defaults.fqdn;
    	      this.targetPort = defaults.targetPort;
    	      this.traffic = defaults.traffic;
    	      this.transport = defaults.transport;
        }

        public Builder allowInsecure(@Nullable Boolean allowInsecure) {
            this.allowInsecure = allowInsecure;
            return this;
        }
        public Builder external(@Nullable Boolean external) {
            this.external = external;
            return this;
        }
        public Builder fqdn(String fqdn) {
            this.fqdn = Objects.requireNonNull(fqdn);
            return this;
        }
        public Builder targetPort(@Nullable Integer targetPort) {
            this.targetPort = targetPort;
            return this;
        }
        public Builder traffic(@Nullable List<TrafficWeightResponse> traffic) {
            this.traffic = traffic;
            return this;
        }
        public Builder traffic(TrafficWeightResponse... traffic) {
            return traffic(List.of(traffic));
        }
        public Builder transport(@Nullable String transport) {
            this.transport = transport;
            return this;
        }        public IngressResponse build() {
            return new IngressResponse(allowInsecure, external, fqdn, targetPort, traffic, transport);
        }
    }
}
