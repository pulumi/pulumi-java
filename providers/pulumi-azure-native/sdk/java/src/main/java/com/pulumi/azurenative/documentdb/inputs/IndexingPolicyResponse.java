// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.documentdb.inputs;

import com.pulumi.azurenative.documentdb.inputs.CompositePathResponse;
import com.pulumi.azurenative.documentdb.inputs.ExcludedPathResponse;
import com.pulumi.azurenative.documentdb.inputs.IncludedPathResponse;
import com.pulumi.azurenative.documentdb.inputs.SpatialSpecResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Cosmos DB indexing policy
 * 
 */
public final class IndexingPolicyResponse extends com.pulumi.resources.InvokeArgs {

    public static final IndexingPolicyResponse Empty = new IndexingPolicyResponse();

    /**
     * Indicates if the indexing policy is automatic
     * 
     */
    @Import(name="automatic")
    private @Nullable Boolean automatic;

    /**
     * @return Indicates if the indexing policy is automatic
     * 
     */
    public Optional<Boolean> automatic() {
        return Optional.ofNullable(this.automatic);
    }

    /**
     * List of composite path list
     * 
     */
    @Import(name="compositeIndexes")
    private @Nullable List<List<CompositePathResponse>> compositeIndexes;

    /**
     * @return List of composite path list
     * 
     */
    public Optional<List<List<CompositePathResponse>>> compositeIndexes() {
        return Optional.ofNullable(this.compositeIndexes);
    }

    /**
     * List of paths to exclude from indexing
     * 
     */
    @Import(name="excludedPaths")
    private @Nullable List<ExcludedPathResponse> excludedPaths;

    /**
     * @return List of paths to exclude from indexing
     * 
     */
    public Optional<List<ExcludedPathResponse>> excludedPaths() {
        return Optional.ofNullable(this.excludedPaths);
    }

    /**
     * List of paths to include in the indexing
     * 
     */
    @Import(name="includedPaths")
    private @Nullable List<IncludedPathResponse> includedPaths;

    /**
     * @return List of paths to include in the indexing
     * 
     */
    public Optional<List<IncludedPathResponse>> includedPaths() {
        return Optional.ofNullable(this.includedPaths);
    }

    /**
     * Indicates the indexing mode.
     * 
     */
    @Import(name="indexingMode")
    private @Nullable String indexingMode;

    /**
     * @return Indicates the indexing mode.
     * 
     */
    public Optional<String> indexingMode() {
        return Optional.ofNullable(this.indexingMode);
    }

    /**
     * List of spatial specifics
     * 
     */
    @Import(name="spatialIndexes")
    private @Nullable List<SpatialSpecResponse> spatialIndexes;

    /**
     * @return List of spatial specifics
     * 
     */
    public Optional<List<SpatialSpecResponse>> spatialIndexes() {
        return Optional.ofNullable(this.spatialIndexes);
    }

    private IndexingPolicyResponse() {}

    private IndexingPolicyResponse(IndexingPolicyResponse $) {
        this.automatic = $.automatic;
        this.compositeIndexes = $.compositeIndexes;
        this.excludedPaths = $.excludedPaths;
        this.includedPaths = $.includedPaths;
        this.indexingMode = $.indexingMode;
        this.spatialIndexes = $.spatialIndexes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IndexingPolicyResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IndexingPolicyResponse $;

        public Builder() {
            $ = new IndexingPolicyResponse();
        }

        public Builder(IndexingPolicyResponse defaults) {
            $ = new IndexingPolicyResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param automatic Indicates if the indexing policy is automatic
         * 
         * @return builder
         * 
         */
        public Builder automatic(@Nullable Boolean automatic) {
            $.automatic = automatic;
            return this;
        }

        /**
         * @param compositeIndexes List of composite path list
         * 
         * @return builder
         * 
         */
        public Builder compositeIndexes(@Nullable List<List<CompositePathResponse>> compositeIndexes) {
            $.compositeIndexes = compositeIndexes;
            return this;
        }

        /**
         * @param compositeIndexes List of composite path list
         * 
         * @return builder
         * 
         */
        public Builder compositeIndexes(List<CompositePathResponse>... compositeIndexes) {
            return compositeIndexes(List.of(compositeIndexes));
        }

        /**
         * @param excludedPaths List of paths to exclude from indexing
         * 
         * @return builder
         * 
         */
        public Builder excludedPaths(@Nullable List<ExcludedPathResponse> excludedPaths) {
            $.excludedPaths = excludedPaths;
            return this;
        }

        /**
         * @param excludedPaths List of paths to exclude from indexing
         * 
         * @return builder
         * 
         */
        public Builder excludedPaths(ExcludedPathResponse... excludedPaths) {
            return excludedPaths(List.of(excludedPaths));
        }

        /**
         * @param includedPaths List of paths to include in the indexing
         * 
         * @return builder
         * 
         */
        public Builder includedPaths(@Nullable List<IncludedPathResponse> includedPaths) {
            $.includedPaths = includedPaths;
            return this;
        }

        /**
         * @param includedPaths List of paths to include in the indexing
         * 
         * @return builder
         * 
         */
        public Builder includedPaths(IncludedPathResponse... includedPaths) {
            return includedPaths(List.of(includedPaths));
        }

        /**
         * @param indexingMode Indicates the indexing mode.
         * 
         * @return builder
         * 
         */
        public Builder indexingMode(@Nullable String indexingMode) {
            $.indexingMode = indexingMode;
            return this;
        }

        /**
         * @param spatialIndexes List of spatial specifics
         * 
         * @return builder
         * 
         */
        public Builder spatialIndexes(@Nullable List<SpatialSpecResponse> spatialIndexes) {
            $.spatialIndexes = spatialIndexes;
            return this;
        }

        /**
         * @param spatialIndexes List of spatial specifics
         * 
         * @return builder
         * 
         */
        public Builder spatialIndexes(SpatialSpecResponse... spatialIndexes) {
            return spatialIndexes(List.of(spatialIndexes));
        }

        public IndexingPolicyResponse build() {
            $.indexingMode = Codegen.stringProp("indexingMode").arg($.indexingMode).def("consistent").getNullable();
            return $;
        }
    }

}
