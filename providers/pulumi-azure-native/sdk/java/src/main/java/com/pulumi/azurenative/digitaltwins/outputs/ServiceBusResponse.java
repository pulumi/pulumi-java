// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.digitaltwins.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ServiceBusResponse {
    /**
     * Specifies the authentication type being used for connecting to the endpoint.
     * 
     */
    private final @Nullable String authenticationType;
    /**
     * Time when the Endpoint was added to DigitalTwinsInstance.
     * 
     */
    private final String createdTime;
    /**
     * Dead letter storage secret for key-based authentication. Will be obfuscated during read.
     * 
     */
    private final @Nullable String deadLetterSecret;
    /**
     * Dead letter storage URL for identity-based authentication.
     * 
     */
    private final @Nullable String deadLetterUri;
    /**
     * The type of Digital Twins endpoint
     * Expected value is 'ServiceBus'.
     * 
     */
    private final String endpointType;
    /**
     * The URL of the ServiceBus namespace for identity-based authentication. It must include the protocol sb://
     * 
     */
    private final @Nullable String endpointUri;
    /**
     * The ServiceBus Topic name for identity-based authentication
     * 
     */
    private final @Nullable String entityPath;
    /**
     * PrimaryConnectionString of the endpoint for key-based authentication. Will be obfuscated during read.
     * 
     */
    private final @Nullable String primaryConnectionString;
    /**
     * The provisioning state.
     * 
     */
    private final String provisioningState;
    /**
     * SecondaryConnectionString of the endpoint for key-based authentication. Will be obfuscated during read.
     * 
     */
    private final @Nullable String secondaryConnectionString;

    @CustomType.Constructor
    private ServiceBusResponse(
        @CustomType.Parameter("authenticationType") @Nullable String authenticationType,
        @CustomType.Parameter("createdTime") String createdTime,
        @CustomType.Parameter("deadLetterSecret") @Nullable String deadLetterSecret,
        @CustomType.Parameter("deadLetterUri") @Nullable String deadLetterUri,
        @CustomType.Parameter("endpointType") String endpointType,
        @CustomType.Parameter("endpointUri") @Nullable String endpointUri,
        @CustomType.Parameter("entityPath") @Nullable String entityPath,
        @CustomType.Parameter("primaryConnectionString") @Nullable String primaryConnectionString,
        @CustomType.Parameter("provisioningState") String provisioningState,
        @CustomType.Parameter("secondaryConnectionString") @Nullable String secondaryConnectionString) {
        this.authenticationType = authenticationType;
        this.createdTime = createdTime;
        this.deadLetterSecret = deadLetterSecret;
        this.deadLetterUri = deadLetterUri;
        this.endpointType = endpointType;
        this.endpointUri = endpointUri;
        this.entityPath = entityPath;
        this.primaryConnectionString = primaryConnectionString;
        this.provisioningState = provisioningState;
        this.secondaryConnectionString = secondaryConnectionString;
    }

    /**
     * Specifies the authentication type being used for connecting to the endpoint.
     * 
    */
    public Optional<String> authenticationType() {
        return Optional.ofNullable(this.authenticationType);
    }
    /**
     * Time when the Endpoint was added to DigitalTwinsInstance.
     * 
    */
    public String createdTime() {
        return this.createdTime;
    }
    /**
     * Dead letter storage secret for key-based authentication. Will be obfuscated during read.
     * 
    */
    public Optional<String> deadLetterSecret() {
        return Optional.ofNullable(this.deadLetterSecret);
    }
    /**
     * Dead letter storage URL for identity-based authentication.
     * 
    */
    public Optional<String> deadLetterUri() {
        return Optional.ofNullable(this.deadLetterUri);
    }
    /**
     * The type of Digital Twins endpoint
     * Expected value is 'ServiceBus'.
     * 
    */
    public String endpointType() {
        return this.endpointType;
    }
    /**
     * The URL of the ServiceBus namespace for identity-based authentication. It must include the protocol sb://
     * 
    */
    public Optional<String> endpointUri() {
        return Optional.ofNullable(this.endpointUri);
    }
    /**
     * The ServiceBus Topic name for identity-based authentication
     * 
    */
    public Optional<String> entityPath() {
        return Optional.ofNullable(this.entityPath);
    }
    /**
     * PrimaryConnectionString of the endpoint for key-based authentication. Will be obfuscated during read.
     * 
    */
    public Optional<String> primaryConnectionString() {
        return Optional.ofNullable(this.primaryConnectionString);
    }
    /**
     * The provisioning state.
     * 
    */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * SecondaryConnectionString of the endpoint for key-based authentication. Will be obfuscated during read.
     * 
    */
    public Optional<String> secondaryConnectionString() {
        return Optional.ofNullable(this.secondaryConnectionString);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServiceBusResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String authenticationType;
        private String createdTime;
        private @Nullable String deadLetterSecret;
        private @Nullable String deadLetterUri;
        private String endpointType;
        private @Nullable String endpointUri;
        private @Nullable String entityPath;
        private @Nullable String primaryConnectionString;
        private String provisioningState;
        private @Nullable String secondaryConnectionString;

        public Builder() {
    	      // Empty
        }

        public Builder(ServiceBusResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authenticationType = defaults.authenticationType;
    	      this.createdTime = defaults.createdTime;
    	      this.deadLetterSecret = defaults.deadLetterSecret;
    	      this.deadLetterUri = defaults.deadLetterUri;
    	      this.endpointType = defaults.endpointType;
    	      this.endpointUri = defaults.endpointUri;
    	      this.entityPath = defaults.entityPath;
    	      this.primaryConnectionString = defaults.primaryConnectionString;
    	      this.provisioningState = defaults.provisioningState;
    	      this.secondaryConnectionString = defaults.secondaryConnectionString;
        }

        public Builder authenticationType(@Nullable String authenticationType) {
            this.authenticationType = authenticationType;
            return this;
        }
        public Builder createdTime(String createdTime) {
            this.createdTime = Objects.requireNonNull(createdTime);
            return this;
        }
        public Builder deadLetterSecret(@Nullable String deadLetterSecret) {
            this.deadLetterSecret = deadLetterSecret;
            return this;
        }
        public Builder deadLetterUri(@Nullable String deadLetterUri) {
            this.deadLetterUri = deadLetterUri;
            return this;
        }
        public Builder endpointType(String endpointType) {
            this.endpointType = Objects.requireNonNull(endpointType);
            return this;
        }
        public Builder endpointUri(@Nullable String endpointUri) {
            this.endpointUri = endpointUri;
            return this;
        }
        public Builder entityPath(@Nullable String entityPath) {
            this.entityPath = entityPath;
            return this;
        }
        public Builder primaryConnectionString(@Nullable String primaryConnectionString) {
            this.primaryConnectionString = primaryConnectionString;
            return this;
        }
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        public Builder secondaryConnectionString(@Nullable String secondaryConnectionString) {
            this.secondaryConnectionString = secondaryConnectionString;
            return this;
        }        public ServiceBusResponse build() {
            return new ServiceBusResponse(authenticationType, createdTime, deadLetterSecret, deadLetterUri, endpointType, endpointUri, entityPath, primaryConnectionString, provisioningState, secondaryConnectionString);
        }
    }
}
