// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.documentdb.inputs;

import com.pulumi.azurenative.documentdb.enums.IndexingMode;
import com.pulumi.azurenative.documentdb.inputs.CompositePathArgs;
import com.pulumi.azurenative.documentdb.inputs.ExcludedPathArgs;
import com.pulumi.azurenative.documentdb.inputs.IncludedPathArgs;
import com.pulumi.azurenative.documentdb.inputs.SpatialSpecArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Cosmos DB indexing policy
 * 
 */
public final class IndexingPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final IndexingPolicyArgs Empty = new IndexingPolicyArgs();

    /**
     * Indicates if the indexing policy is automatic
     * 
     */
    @Import(name="automatic")
    private @Nullable Output<Boolean> automatic;

    public Optional<Output<Boolean>> automatic() {
        return Optional.ofNullable(this.automatic);
    }

    /**
     * List of composite path list
     * 
     */
    @Import(name="compositeIndexes")
    private @Nullable Output<List<List<CompositePathArgs>>> compositeIndexes;

    public Optional<Output<List<List<CompositePathArgs>>>> compositeIndexes() {
        return Optional.ofNullable(this.compositeIndexes);
    }

    /**
     * List of paths to exclude from indexing
     * 
     */
    @Import(name="excludedPaths")
    private @Nullable Output<List<ExcludedPathArgs>> excludedPaths;

    public Optional<Output<List<ExcludedPathArgs>>> excludedPaths() {
        return Optional.ofNullable(this.excludedPaths);
    }

    /**
     * List of paths to include in the indexing
     * 
     */
    @Import(name="includedPaths")
    private @Nullable Output<List<IncludedPathArgs>> includedPaths;

    public Optional<Output<List<IncludedPathArgs>>> includedPaths() {
        return Optional.ofNullable(this.includedPaths);
    }

    /**
     * Indicates the indexing mode.
     * 
     */
    @Import(name="indexingMode")
    private @Nullable Output<Either<String,IndexingMode>> indexingMode;

    public Optional<Output<Either<String,IndexingMode>>> indexingMode() {
        return Optional.ofNullable(this.indexingMode);
    }

    /**
     * List of spatial specifics
     * 
     */
    @Import(name="spatialIndexes")
    private @Nullable Output<List<SpatialSpecArgs>> spatialIndexes;

    public Optional<Output<List<SpatialSpecArgs>>> spatialIndexes() {
        return Optional.ofNullable(this.spatialIndexes);
    }

    private IndexingPolicyArgs() {}

    private IndexingPolicyArgs(IndexingPolicyArgs $) {
        this.automatic = $.automatic;
        this.compositeIndexes = $.compositeIndexes;
        this.excludedPaths = $.excludedPaths;
        this.includedPaths = $.includedPaths;
        this.indexingMode = $.indexingMode;
        this.spatialIndexes = $.spatialIndexes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IndexingPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IndexingPolicyArgs $;

        public Builder() {
            $ = new IndexingPolicyArgs();
        }

        public Builder(IndexingPolicyArgs defaults) {
            $ = new IndexingPolicyArgs(Objects.requireNonNull(defaults));
        }

        public Builder automatic(@Nullable Output<Boolean> automatic) {
            $.automatic = automatic;
            return this;
        }

        public Builder automatic(Boolean automatic) {
            return automatic(Output.of(automatic));
        }

        public Builder compositeIndexes(@Nullable Output<List<List<CompositePathArgs>>> compositeIndexes) {
            $.compositeIndexes = compositeIndexes;
            return this;
        }

        public Builder compositeIndexes(List<List<CompositePathArgs>> compositeIndexes) {
            return compositeIndexes(Output.of(compositeIndexes));
        }

        public Builder compositeIndexes(List<CompositePathArgs>... compositeIndexes) {
            return compositeIndexes(List.of(compositeIndexes));
        }

        public Builder excludedPaths(@Nullable Output<List<ExcludedPathArgs>> excludedPaths) {
            $.excludedPaths = excludedPaths;
            return this;
        }

        public Builder excludedPaths(List<ExcludedPathArgs> excludedPaths) {
            return excludedPaths(Output.of(excludedPaths));
        }

        public Builder excludedPaths(ExcludedPathArgs... excludedPaths) {
            return excludedPaths(List.of(excludedPaths));
        }

        public Builder includedPaths(@Nullable Output<List<IncludedPathArgs>> includedPaths) {
            $.includedPaths = includedPaths;
            return this;
        }

        public Builder includedPaths(List<IncludedPathArgs> includedPaths) {
            return includedPaths(Output.of(includedPaths));
        }

        public Builder includedPaths(IncludedPathArgs... includedPaths) {
            return includedPaths(List.of(includedPaths));
        }

        public Builder indexingMode(@Nullable Output<Either<String,IndexingMode>> indexingMode) {
            $.indexingMode = indexingMode;
            return this;
        }

        public Builder indexingMode(Either<String,IndexingMode> indexingMode) {
            return indexingMode(Output.of(indexingMode));
        }

        public Builder spatialIndexes(@Nullable Output<List<SpatialSpecArgs>> spatialIndexes) {
            $.spatialIndexes = spatialIndexes;
            return this;
        }

        public Builder spatialIndexes(List<SpatialSpecArgs> spatialIndexes) {
            return spatialIndexes(Output.of(spatialIndexes));
        }

        public Builder spatialIndexes(SpatialSpecArgs... spatialIndexes) {
            return spatialIndexes(List.of(spatialIndexes));
        }

        public IndexingPolicyArgs build() {
            $.indexingMode = Codegen.stringProp("indexingMode").left(IndexingMode.class).output().arg($.indexingMode).def("consistent").getNullable();
            return $;
        }
    }

}
