// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.media.inputs;

import com.pulumi.azurenative.media.enums.EntropyMode;
import com.pulumi.azurenative.media.enums.H264VideoProfile;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Describes the settings to be used when encoding the input video into a desired output bitrate layer with the H.264 video codec.
 * 
 */
public final class H264LayerArgs extends com.pulumi.resources.ResourceArgs {

    public static final H264LayerArgs Empty = new H264LayerArgs();

    /**
     * Whether or not adaptive B-frames are to be used when encoding this layer. If not specified, the encoder will turn it on whenever the video profile permits its use.
     * 
     */
    @Import(name="adaptiveBFrame")
      private final @Nullable Output<Boolean> adaptiveBFrame;

    public Output<Boolean> adaptiveBFrame() {
        return this.adaptiveBFrame == null ? Codegen.empty() : this.adaptiveBFrame;
    }

    /**
     * The number of B-frames to be used when encoding this layer.  If not specified, the encoder chooses an appropriate number based on the video profile and level.
     * 
     */
    @Import(name="bFrames")
      private final @Nullable Output<Integer> bFrames;

    public Output<Integer> bFrames() {
        return this.bFrames == null ? Codegen.empty() : this.bFrames;
    }

    /**
     * The average bitrate in bits per second at which to encode the input video when generating this layer. This is a required field.
     * 
     */
    @Import(name="bitrate", required=true)
      private final Output<Integer> bitrate;

    public Output<Integer> bitrate() {
        return this.bitrate;
    }

    /**
     * The VBV buffer window length. The value should be in ISO 8601 format. The value should be in the range [0.1-100] seconds. The default is 5 seconds (for example, PT5S).
     * 
     */
    @Import(name="bufferWindow")
      private final @Nullable Output<String> bufferWindow;

    public Output<String> bufferWindow() {
        return this.bufferWindow == null ? Codegen.empty() : this.bufferWindow;
    }

    /**
     * The entropy mode to be used for this layer. If not specified, the encoder chooses the mode that is appropriate for the profile and level.
     * 
     */
    @Import(name="entropyMode")
      private final @Nullable Output<Either<String,EntropyMode>> entropyMode;

    public Output<Either<String,EntropyMode>> entropyMode() {
        return this.entropyMode == null ? Codegen.empty() : this.entropyMode;
    }

    /**
     * The frame rate (in frames per second) at which to encode this layer. The value can be in the form of M/N where M and N are integers (For example, 30000/1001), or in the form of a number (For example, 30, or 29.97). The encoder enforces constraints on allowed frame rates based on the profile and level. If it is not specified, the encoder will use the same frame rate as the input video.
     * 
     */
    @Import(name="frameRate")
      private final @Nullable Output<String> frameRate;

    public Output<String> frameRate() {
        return this.frameRate == null ? Codegen.empty() : this.frameRate;
    }

    /**
     * The height of the output video for this layer. The value can be absolute (in pixels) or relative (in percentage). For example 50% means the output video has half as many pixels in height as the input.
     * 
     */
    @Import(name="height")
      private final @Nullable Output<String> height;

    public Output<String> height() {
        return this.height == null ? Codegen.empty() : this.height;
    }

    /**
     * The alphanumeric label for this layer, which can be used in multiplexing different video and audio layers, or in naming the output file.
     * 
     */
    @Import(name="label")
      private final @Nullable Output<String> label;

    public Output<String> label() {
        return this.label == null ? Codegen.empty() : this.label;
    }

    /**
     * We currently support Level up to 6.2. The value can be Auto, or a number that matches the H.264 profile. If not specified, the default is Auto, which lets the encoder choose the Level that is appropriate for this layer.
     * 
     */
    @Import(name="level")
      private final @Nullable Output<String> level;

    public Output<String> level() {
        return this.level == null ? Codegen.empty() : this.level;
    }

    /**
     * The maximum bitrate (in bits per second), at which the VBV buffer should be assumed to refill. If not specified, defaults to the same value as bitrate.
     * 
     */
    @Import(name="maxBitrate")
      private final @Nullable Output<Integer> maxBitrate;

    public Output<Integer> maxBitrate() {
        return this.maxBitrate == null ? Codegen.empty() : this.maxBitrate;
    }

    /**
     * The discriminator for derived types.
     * Expected value is &#39;#Microsoft.Media.H264Layer&#39;.
     * 
     */
    @Import(name="odataType", required=true)
      private final Output<String> odataType;

    public Output<String> odataType() {
        return this.odataType;
    }

    /**
     * We currently support Baseline, Main, High, High422, High444. Default is Auto.
     * 
     */
    @Import(name="profile")
      private final @Nullable Output<Either<String,H264VideoProfile>> profile;

    public Output<Either<String,H264VideoProfile>> profile() {
        return this.profile == null ? Codegen.empty() : this.profile;
    }

    /**
     * The number of reference frames to be used when encoding this layer. If not specified, the encoder determines an appropriate number based on the encoder complexity setting.
     * 
     */
    @Import(name="referenceFrames")
      private final @Nullable Output<Integer> referenceFrames;

    public Output<Integer> referenceFrames() {
        return this.referenceFrames == null ? Codegen.empty() : this.referenceFrames;
    }

    /**
     * The number of slices to be used when encoding this layer. If not specified, default is zero, which means that encoder will use a single slice for each frame.
     * 
     */
    @Import(name="slices")
      private final @Nullable Output<Integer> slices;

    public Output<Integer> slices() {
        return this.slices == null ? Codegen.empty() : this.slices;
    }

    /**
     * The width of the output video for this layer. The value can be absolute (in pixels) or relative (in percentage). For example 50% means the output video has half as many pixels in width as the input.
     * 
     */
    @Import(name="width")
      private final @Nullable Output<String> width;

    public Output<String> width() {
        return this.width == null ? Codegen.empty() : this.width;
    }

    public H264LayerArgs(
        @Nullable Output<Boolean> adaptiveBFrame,
        @Nullable Output<Integer> bFrames,
        Output<Integer> bitrate,
        @Nullable Output<String> bufferWindow,
        @Nullable Output<Either<String,EntropyMode>> entropyMode,
        @Nullable Output<String> frameRate,
        @Nullable Output<String> height,
        @Nullable Output<String> label,
        @Nullable Output<String> level,
        @Nullable Output<Integer> maxBitrate,
        Output<String> odataType,
        @Nullable Output<Either<String,H264VideoProfile>> profile,
        @Nullable Output<Integer> referenceFrames,
        @Nullable Output<Integer> slices,
        @Nullable Output<String> width) {
        this.adaptiveBFrame = adaptiveBFrame;
        this.bFrames = bFrames;
        this.bitrate = Objects.requireNonNull(bitrate, "expected parameter 'bitrate' to be non-null");
        this.bufferWindow = bufferWindow;
        this.entropyMode = entropyMode;
        this.frameRate = frameRate;
        this.height = height;
        this.label = label;
        this.level = level;
        this.maxBitrate = maxBitrate;
        this.odataType = Codegen.stringProp("odataType").output().arg(odataType).require();
        this.profile = profile;
        this.referenceFrames = referenceFrames;
        this.slices = slices;
        this.width = width;
    }

    private H264LayerArgs() {
        this.adaptiveBFrame = Codegen.empty();
        this.bFrames = Codegen.empty();
        this.bitrate = Codegen.empty();
        this.bufferWindow = Codegen.empty();
        this.entropyMode = Codegen.empty();
        this.frameRate = Codegen.empty();
        this.height = Codegen.empty();
        this.label = Codegen.empty();
        this.level = Codegen.empty();
        this.maxBitrate = Codegen.empty();
        this.odataType = Codegen.empty();
        this.profile = Codegen.empty();
        this.referenceFrames = Codegen.empty();
        this.slices = Codegen.empty();
        this.width = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(H264LayerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Boolean> adaptiveBFrame;
        private @Nullable Output<Integer> bFrames;
        private Output<Integer> bitrate;
        private @Nullable Output<String> bufferWindow;
        private @Nullable Output<Either<String,EntropyMode>> entropyMode;
        private @Nullable Output<String> frameRate;
        private @Nullable Output<String> height;
        private @Nullable Output<String> label;
        private @Nullable Output<String> level;
        private @Nullable Output<Integer> maxBitrate;
        private Output<String> odataType;
        private @Nullable Output<Either<String,H264VideoProfile>> profile;
        private @Nullable Output<Integer> referenceFrames;
        private @Nullable Output<Integer> slices;
        private @Nullable Output<String> width;

        public Builder() {
    	      // Empty
        }

        public Builder(H264LayerArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adaptiveBFrame = defaults.adaptiveBFrame;
    	      this.bFrames = defaults.bFrames;
    	      this.bitrate = defaults.bitrate;
    	      this.bufferWindow = defaults.bufferWindow;
    	      this.entropyMode = defaults.entropyMode;
    	      this.frameRate = defaults.frameRate;
    	      this.height = defaults.height;
    	      this.label = defaults.label;
    	      this.level = defaults.level;
    	      this.maxBitrate = defaults.maxBitrate;
    	      this.odataType = defaults.odataType;
    	      this.profile = defaults.profile;
    	      this.referenceFrames = defaults.referenceFrames;
    	      this.slices = defaults.slices;
    	      this.width = defaults.width;
        }

        public Builder adaptiveBFrame(@Nullable Output<Boolean> adaptiveBFrame) {
            this.adaptiveBFrame = adaptiveBFrame;
            return this;
        }
        public Builder adaptiveBFrame(@Nullable Boolean adaptiveBFrame) {
            this.adaptiveBFrame = Codegen.ofNullable(adaptiveBFrame);
            return this;
        }
        public Builder bFrames(@Nullable Output<Integer> bFrames) {
            this.bFrames = bFrames;
            return this;
        }
        public Builder bFrames(@Nullable Integer bFrames) {
            this.bFrames = Codegen.ofNullable(bFrames);
            return this;
        }
        public Builder bitrate(Output<Integer> bitrate) {
            this.bitrate = Objects.requireNonNull(bitrate);
            return this;
        }
        public Builder bitrate(Integer bitrate) {
            this.bitrate = Output.of(Objects.requireNonNull(bitrate));
            return this;
        }
        public Builder bufferWindow(@Nullable Output<String> bufferWindow) {
            this.bufferWindow = bufferWindow;
            return this;
        }
        public Builder bufferWindow(@Nullable String bufferWindow) {
            this.bufferWindow = Codegen.ofNullable(bufferWindow);
            return this;
        }
        public Builder entropyMode(@Nullable Output<Either<String,EntropyMode>> entropyMode) {
            this.entropyMode = entropyMode;
            return this;
        }
        public Builder entropyMode(@Nullable Either<String,EntropyMode> entropyMode) {
            this.entropyMode = Codegen.ofNullable(entropyMode);
            return this;
        }
        public Builder frameRate(@Nullable Output<String> frameRate) {
            this.frameRate = frameRate;
            return this;
        }
        public Builder frameRate(@Nullable String frameRate) {
            this.frameRate = Codegen.ofNullable(frameRate);
            return this;
        }
        public Builder height(@Nullable Output<String> height) {
            this.height = height;
            return this;
        }
        public Builder height(@Nullable String height) {
            this.height = Codegen.ofNullable(height);
            return this;
        }
        public Builder label(@Nullable Output<String> label) {
            this.label = label;
            return this;
        }
        public Builder label(@Nullable String label) {
            this.label = Codegen.ofNullable(label);
            return this;
        }
        public Builder level(@Nullable Output<String> level) {
            this.level = level;
            return this;
        }
        public Builder level(@Nullable String level) {
            this.level = Codegen.ofNullable(level);
            return this;
        }
        public Builder maxBitrate(@Nullable Output<Integer> maxBitrate) {
            this.maxBitrate = maxBitrate;
            return this;
        }
        public Builder maxBitrate(@Nullable Integer maxBitrate) {
            this.maxBitrate = Codegen.ofNullable(maxBitrate);
            return this;
        }
        public Builder odataType(Output<String> odataType) {
            this.odataType = Objects.requireNonNull(odataType);
            return this;
        }
        public Builder odataType(String odataType) {
            this.odataType = Output.of(Objects.requireNonNull(odataType));
            return this;
        }
        public Builder profile(@Nullable Output<Either<String,H264VideoProfile>> profile) {
            this.profile = profile;
            return this;
        }
        public Builder profile(@Nullable Either<String,H264VideoProfile> profile) {
            this.profile = Codegen.ofNullable(profile);
            return this;
        }
        public Builder referenceFrames(@Nullable Output<Integer> referenceFrames) {
            this.referenceFrames = referenceFrames;
            return this;
        }
        public Builder referenceFrames(@Nullable Integer referenceFrames) {
            this.referenceFrames = Codegen.ofNullable(referenceFrames);
            return this;
        }
        public Builder slices(@Nullable Output<Integer> slices) {
            this.slices = slices;
            return this;
        }
        public Builder slices(@Nullable Integer slices) {
            this.slices = Codegen.ofNullable(slices);
            return this;
        }
        public Builder width(@Nullable Output<String> width) {
            this.width = width;
            return this;
        }
        public Builder width(@Nullable String width) {
            this.width = Codegen.ofNullable(width);
            return this;
        }        public H264LayerArgs build() {
            return new H264LayerArgs(adaptiveBFrame, bFrames, bitrate, bufferWindow, entropyMode, frameRate, height, label, level, maxBitrate, odataType, profile, referenceFrames, slices, width);
        }
    }
}
