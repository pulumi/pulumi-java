// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.containerregistry.inputs;

import com.pulumi.azurenative.containerregistry.inputs.SourcePropertiesResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The properties of a source based trigger.
 * 
 */
public final class SourceTriggerResponse extends com.pulumi.resources.InvokeArgs {

    public static final SourceTriggerResponse Empty = new SourceTriggerResponse();

    /**
     * The name of the trigger.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    public String name() {
        return this.name;
    }

    /**
     * The properties that describes the source(code) for the task.
     * 
     */
    @Import(name="sourceRepository", required=true)
    private SourcePropertiesResponse sourceRepository;

    public SourcePropertiesResponse sourceRepository() {
        return this.sourceRepository;
    }

    /**
     * The source event corresponding to the trigger.
     * 
     */
    @Import(name="sourceTriggerEvents", required=true)
    private List<String> sourceTriggerEvents;

    public List<String> sourceTriggerEvents() {
        return this.sourceTriggerEvents;
    }

    /**
     * The current status of trigger.
     * 
     */
    @Import(name="status")
    private @Nullable String status;

    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }

    private SourceTriggerResponse() {}

    private SourceTriggerResponse(SourceTriggerResponse $) {
        this.name = $.name;
        this.sourceRepository = $.sourceRepository;
        this.sourceTriggerEvents = $.sourceTriggerEvents;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SourceTriggerResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SourceTriggerResponse $;

        public Builder() {
            $ = new SourceTriggerResponse();
        }

        public Builder(SourceTriggerResponse defaults) {
            $ = new SourceTriggerResponse(Objects.requireNonNull(defaults));
        }

        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public Builder sourceRepository(SourcePropertiesResponse sourceRepository) {
            $.sourceRepository = sourceRepository;
            return this;
        }

        public Builder sourceTriggerEvents(List<String> sourceTriggerEvents) {
            $.sourceTriggerEvents = sourceTriggerEvents;
            return this;
        }

        public Builder sourceTriggerEvents(String... sourceTriggerEvents) {
            return sourceTriggerEvents(List.of(sourceTriggerEvents));
        }

        public Builder status(@Nullable String status) {
            $.status = status;
            return this;
        }

        public SourceTriggerResponse build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.sourceRepository = Objects.requireNonNull($.sourceRepository, "expected parameter 'sourceRepository' to be non-null");
            $.sourceTriggerEvents = Objects.requireNonNull($.sourceTriggerEvents, "expected parameter 'sourceTriggerEvents' to be non-null");
            $.status = Codegen.stringProp("status").arg($.status).def("Enabled").getNullable();
            return $;
        }
    }

}
