// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.kubernetes;

import com.pulumi.azurenative.kubernetes.enums.ProvisioningState;
import com.pulumi.azurenative.kubernetes.inputs.ConnectedClusterIdentityArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectedClusterArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectedClusterArgs Empty = new ConnectedClusterArgs();

    /**
     * Base64 encoded public certificate used by the agent to do the initial handshake to the backend services in Azure.
     * 
     */
    @Import(name="agentPublicKeyCertificate", required=true)
    private Output<String> agentPublicKeyCertificate;

    /**
     * @return Base64 encoded public certificate used by the agent to do the initial handshake to the backend services in Azure.
     * 
     */
    public Output<String> agentPublicKeyCertificate() {
        return this.agentPublicKeyCertificate;
    }

    /**
     * The name of the Kubernetes cluster on which get is called.
     * 
     */
    @Import(name="clusterName")
    private @Nullable Output<String> clusterName;

    /**
     * @return The name of the Kubernetes cluster on which get is called.
     * 
     */
    public Optional<Output<String>> clusterName() {
        return Optional.ofNullable(this.clusterName);
    }

    /**
     * The Kubernetes distribution running on this connected cluster.
     * 
     */
    @Import(name="distribution")
    private @Nullable Output<String> distribution;

    /**
     * @return The Kubernetes distribution running on this connected cluster.
     * 
     */
    public Optional<Output<String>> distribution() {
        return Optional.ofNullable(this.distribution);
    }

    /**
     * The identity of the connected cluster.
     * 
     */
    @Import(name="identity", required=true)
    private Output<ConnectedClusterIdentityArgs> identity;

    /**
     * @return The identity of the connected cluster.
     * 
     */
    public Output<ConnectedClusterIdentityArgs> identity() {
        return this.identity;
    }

    /**
     * The infrastructure on which the Kubernetes cluster represented by this connected cluster is running on.
     * 
     */
    @Import(name="infrastructure")
    private @Nullable Output<String> infrastructure;

    /**
     * @return The infrastructure on which the Kubernetes cluster represented by this connected cluster is running on.
     * 
     */
    public Optional<Output<String>> infrastructure() {
        return Optional.ofNullable(this.infrastructure);
    }

    /**
     * The geo-location where the resource lives
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The geo-location where the resource lives
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Provisioning state of the connected cluster resource.
     * 
     */
    @Import(name="provisioningState")
    private @Nullable Output<Either<String,ProvisioningState>> provisioningState;

    /**
     * @return Provisioning state of the connected cluster resource.
     * 
     */
    public Optional<Output<Either<String,ProvisioningState>>> provisioningState() {
        return Optional.ofNullable(this.provisioningState);
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group. The name is case insensitive.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Resource tags.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private ConnectedClusterArgs() {}

    private ConnectedClusterArgs(ConnectedClusterArgs $) {
        this.agentPublicKeyCertificate = $.agentPublicKeyCertificate;
        this.clusterName = $.clusterName;
        this.distribution = $.distribution;
        this.identity = $.identity;
        this.infrastructure = $.infrastructure;
        this.location = $.location;
        this.provisioningState = $.provisioningState;
        this.resourceGroupName = $.resourceGroupName;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectedClusterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectedClusterArgs $;

        public Builder() {
            $ = new ConnectedClusterArgs();
        }

        public Builder(ConnectedClusterArgs defaults) {
            $ = new ConnectedClusterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param agentPublicKeyCertificate Base64 encoded public certificate used by the agent to do the initial handshake to the backend services in Azure.
         * 
         * @return builder
         * 
         */
        public Builder agentPublicKeyCertificate(Output<String> agentPublicKeyCertificate) {
            $.agentPublicKeyCertificate = agentPublicKeyCertificate;
            return this;
        }

        /**
         * @param agentPublicKeyCertificate Base64 encoded public certificate used by the agent to do the initial handshake to the backend services in Azure.
         * 
         * @return builder
         * 
         */
        public Builder agentPublicKeyCertificate(String agentPublicKeyCertificate) {
            return agentPublicKeyCertificate(Output.of(agentPublicKeyCertificate));
        }

        /**
         * @param clusterName The name of the Kubernetes cluster on which get is called.
         * 
         * @return builder
         * 
         */
        public Builder clusterName(@Nullable Output<String> clusterName) {
            $.clusterName = clusterName;
            return this;
        }

        /**
         * @param clusterName The name of the Kubernetes cluster on which get is called.
         * 
         * @return builder
         * 
         */
        public Builder clusterName(String clusterName) {
            return clusterName(Output.of(clusterName));
        }

        /**
         * @param distribution The Kubernetes distribution running on this connected cluster.
         * 
         * @return builder
         * 
         */
        public Builder distribution(@Nullable Output<String> distribution) {
            $.distribution = distribution;
            return this;
        }

        /**
         * @param distribution The Kubernetes distribution running on this connected cluster.
         * 
         * @return builder
         * 
         */
        public Builder distribution(String distribution) {
            return distribution(Output.of(distribution));
        }

        /**
         * @param identity The identity of the connected cluster.
         * 
         * @return builder
         * 
         */
        public Builder identity(Output<ConnectedClusterIdentityArgs> identity) {
            $.identity = identity;
            return this;
        }

        /**
         * @param identity The identity of the connected cluster.
         * 
         * @return builder
         * 
         */
        public Builder identity(ConnectedClusterIdentityArgs identity) {
            return identity(Output.of(identity));
        }

        /**
         * @param infrastructure The infrastructure on which the Kubernetes cluster represented by this connected cluster is running on.
         * 
         * @return builder
         * 
         */
        public Builder infrastructure(@Nullable Output<String> infrastructure) {
            $.infrastructure = infrastructure;
            return this;
        }

        /**
         * @param infrastructure The infrastructure on which the Kubernetes cluster represented by this connected cluster is running on.
         * 
         * @return builder
         * 
         */
        public Builder infrastructure(String infrastructure) {
            return infrastructure(Output.of(infrastructure));
        }

        /**
         * @param location The geo-location where the resource lives
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The geo-location where the resource lives
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param provisioningState Provisioning state of the connected cluster resource.
         * 
         * @return builder
         * 
         */
        public Builder provisioningState(@Nullable Output<Either<String,ProvisioningState>> provisioningState) {
            $.provisioningState = provisioningState;
            return this;
        }

        /**
         * @param provisioningState Provisioning state of the connected cluster resource.
         * 
         * @return builder
         * 
         */
        public Builder provisioningState(Either<String,ProvisioningState> provisioningState) {
            return provisioningState(Output.of(provisioningState));
        }

        /**
         * @param provisioningState Provisioning state of the connected cluster resource.
         * 
         * @return builder
         * 
         */
        public Builder provisioningState(String provisioningState) {
            return provisioningState(Either.ofLeft(provisioningState));
        }

        /**
         * @param provisioningState Provisioning state of the connected cluster resource.
         * 
         * @return builder
         * 
         */
        public Builder provisioningState(ProvisioningState provisioningState) {
            return provisioningState(Either.ofRight(provisioningState));
        }

        /**
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param tags Resource tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Resource tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public ConnectedClusterArgs build() {
            $.agentPublicKeyCertificate = Objects.requireNonNull($.agentPublicKeyCertificate, "expected parameter 'agentPublicKeyCertificate' to be non-null");
            $.identity = Objects.requireNonNull($.identity, "expected parameter 'identity' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
