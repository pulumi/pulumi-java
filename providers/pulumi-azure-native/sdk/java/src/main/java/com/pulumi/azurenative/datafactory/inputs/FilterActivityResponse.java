// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.azurenative.datafactory.inputs.ActivityDependencyResponse;
import com.pulumi.azurenative.datafactory.inputs.ExpressionResponse;
import com.pulumi.azurenative.datafactory.inputs.UserPropertyResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Filter and return results from input array based on the conditions.
 * 
 */
public final class FilterActivityResponse extends com.pulumi.resources.InvokeArgs {

    public static final FilterActivityResponse Empty = new FilterActivityResponse();

    /**
     * Condition to be used for filtering the input.
     * 
     */
    @Import(name="condition", required=true)
      private final ExpressionResponse condition;

    public ExpressionResponse condition() {
        return this.condition;
    }

    /**
     * Activity depends on condition.
     * 
     */
    @Import(name="dependsOn")
      private final @Nullable List<ActivityDependencyResponse> dependsOn;

    public List<ActivityDependencyResponse> dependsOn() {
        return this.dependsOn == null ? List.of() : this.dependsOn;
    }

    /**
     * Activity description.
     * 
     */
    @Import(name="description")
      private final @Nullable String description;

    public Optional<String> description() {
        return this.description == null ? Optional.empty() : Optional.ofNullable(this.description);
    }

    /**
     * Input array on which filter should be applied.
     * 
     */
    @Import(name="items", required=true)
      private final ExpressionResponse items;

    public ExpressionResponse items() {
        return this.items;
    }

    /**
     * Activity name.
     * 
     */
    @Import(name="name", required=true)
      private final String name;

    public String name() {
        return this.name;
    }

    /**
     * Type of activity.
     * Expected value is 'Filter'.
     * 
     */
    @Import(name="type", required=true)
      private final String type;

    public String type() {
        return this.type;
    }

    /**
     * Activity user properties.
     * 
     */
    @Import(name="userProperties")
      private final @Nullable List<UserPropertyResponse> userProperties;

    public List<UserPropertyResponse> userProperties() {
        return this.userProperties == null ? List.of() : this.userProperties;
    }

    public FilterActivityResponse(
        ExpressionResponse condition,
        @Nullable List<ActivityDependencyResponse> dependsOn,
        @Nullable String description,
        ExpressionResponse items,
        String name,
        String type,
        @Nullable List<UserPropertyResponse> userProperties) {
        this.condition = Objects.requireNonNull(condition, "expected parameter 'condition' to be non-null");
        this.dependsOn = dependsOn;
        this.description = description;
        this.items = Objects.requireNonNull(items, "expected parameter 'items' to be non-null");
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
        this.userProperties = userProperties;
    }

    private FilterActivityResponse() {
        this.condition = null;
        this.dependsOn = List.of();
        this.description = null;
        this.items = null;
        this.name = null;
        this.type = null;
        this.userProperties = List.of();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FilterActivityResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExpressionResponse condition;
        private @Nullable List<ActivityDependencyResponse> dependsOn;
        private @Nullable String description;
        private ExpressionResponse items;
        private String name;
        private String type;
        private @Nullable List<UserPropertyResponse> userProperties;

        public Builder() {
    	      // Empty
        }

        public Builder(FilterActivityResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.condition = defaults.condition;
    	      this.dependsOn = defaults.dependsOn;
    	      this.description = defaults.description;
    	      this.items = defaults.items;
    	      this.name = defaults.name;
    	      this.type = defaults.type;
    	      this.userProperties = defaults.userProperties;
        }

        public Builder condition(ExpressionResponse condition) {
            this.condition = Objects.requireNonNull(condition);
            return this;
        }
        public Builder dependsOn(@Nullable List<ActivityDependencyResponse> dependsOn) {
            this.dependsOn = dependsOn;
            return this;
        }
        public Builder dependsOn(ActivityDependencyResponse... dependsOn) {
            return dependsOn(List.of(dependsOn));
        }
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        public Builder items(ExpressionResponse items) {
            this.items = Objects.requireNonNull(items);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder userProperties(@Nullable List<UserPropertyResponse> userProperties) {
            this.userProperties = userProperties;
            return this;
        }
        public Builder userProperties(UserPropertyResponse... userProperties) {
            return userProperties(List.of(userProperties));
        }        public FilterActivityResponse build() {
            return new FilterActivityResponse(condition, dependsOn, description, items, name, type, userProperties);
        }
    }
}
