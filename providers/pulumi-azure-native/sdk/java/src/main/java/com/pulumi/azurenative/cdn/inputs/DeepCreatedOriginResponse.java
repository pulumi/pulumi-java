// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.cdn.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The main origin of CDN content which is added when creating a CDN endpoint.
 * 
 */
public final class DeepCreatedOriginResponse extends com.pulumi.resources.InvokeArgs {

    public static final DeepCreatedOriginResponse Empty = new DeepCreatedOriginResponse();

    /**
     * Origin is enabled for load balancing or not. By default, origin is always enabled.
     * 
     */
    @Import(name="enabled")
    private @Nullable Boolean enabled;

    /**
     * @return Origin is enabled for load balancing or not. By default, origin is always enabled.
     * 
     */
    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The address of the origin. It can be a domain name, IPv4 address, or IPv6 address. This should be unique across all origins in an endpoint.
     * 
     */
    @Import(name="hostName", required=true)
    private String hostName;

    /**
     * @return The address of the origin. It can be a domain name, IPv4 address, or IPv6 address. This should be unique across all origins in an endpoint.
     * 
     */
    public String hostName() {
        return this.hostName;
    }

    /**
     * The value of the HTTP port. Must be between 1 and 65535.
     * 
     */
    @Import(name="httpPort")
    private @Nullable Integer httpPort;

    /**
     * @return The value of the HTTP port. Must be between 1 and 65535.
     * 
     */
    public Optional<Integer> httpPort() {
        return Optional.ofNullable(this.httpPort);
    }

    /**
     * The value of the HTTPS port. Must be between 1 and 65535.
     * 
     */
    @Import(name="httpsPort")
    private @Nullable Integer httpsPort;

    /**
     * @return The value of the HTTPS port. Must be between 1 and 65535.
     * 
     */
    public Optional<Integer> httpsPort() {
        return Optional.ofNullable(this.httpsPort);
    }

    /**
     * Origin name which must be unique within the endpoint.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return Origin name which must be unique within the endpoint.
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * The host header value sent to the origin with each request. If you leave this blank, the request hostname determines this value. Azure CDN origins, such as Web Apps, Blob Storage, and Cloud Services require this host header value to match the origin hostname by default.
     * 
     */
    @Import(name="originHostHeader")
    private @Nullable String originHostHeader;

    /**
     * @return The host header value sent to the origin with each request. If you leave this blank, the request hostname determines this value. Azure CDN origins, such as Web Apps, Blob Storage, and Cloud Services require this host header value to match the origin hostname by default.
     * 
     */
    public Optional<String> originHostHeader() {
        return Optional.ofNullable(this.originHostHeader);
    }

    /**
     * Priority of origin in given origin group for load balancing. Higher priorities will not be used for load balancing if any lower priority origin is healthy.Must be between 1 and 5.
     * 
     */
    @Import(name="priority")
    private @Nullable Integer priority;

    /**
     * @return Priority of origin in given origin group for load balancing. Higher priorities will not be used for load balancing if any lower priority origin is healthy.Must be between 1 and 5.
     * 
     */
    public Optional<Integer> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * The Alias of the Private Link resource. Populating this optional field indicates that this origin is &#39;Private&#39;
     * 
     */
    @Import(name="privateLinkAlias")
    private @Nullable String privateLinkAlias;

    /**
     * @return The Alias of the Private Link resource. Populating this optional field indicates that this origin is &#39;Private&#39;
     * 
     */
    public Optional<String> privateLinkAlias() {
        return Optional.ofNullable(this.privateLinkAlias);
    }

    /**
     * A custom message to be included in the approval request to connect to the Private Link.
     * 
     */
    @Import(name="privateLinkApprovalMessage")
    private @Nullable String privateLinkApprovalMessage;

    /**
     * @return A custom message to be included in the approval request to connect to the Private Link.
     * 
     */
    public Optional<String> privateLinkApprovalMessage() {
        return Optional.ofNullable(this.privateLinkApprovalMessage);
    }

    /**
     * The location of the Private Link resource. Required only if &#39;privateLinkResourceId&#39; is populated
     * 
     */
    @Import(name="privateLinkLocation")
    private @Nullable String privateLinkLocation;

    /**
     * @return The location of the Private Link resource. Required only if &#39;privateLinkResourceId&#39; is populated
     * 
     */
    public Optional<String> privateLinkLocation() {
        return Optional.ofNullable(this.privateLinkLocation);
    }

    /**
     * The Resource Id of the Private Link resource. Populating this optional field indicates that this backend is &#39;Private&#39;
     * 
     */
    @Import(name="privateLinkResourceId")
    private @Nullable String privateLinkResourceId;

    /**
     * @return The Resource Id of the Private Link resource. Populating this optional field indicates that this backend is &#39;Private&#39;
     * 
     */
    public Optional<String> privateLinkResourceId() {
        return Optional.ofNullable(this.privateLinkResourceId);
    }

    /**
     * Weight of the origin in given origin group for load balancing. Must be between 1 and 1000
     * 
     */
    @Import(name="weight")
    private @Nullable Integer weight;

    /**
     * @return Weight of the origin in given origin group for load balancing. Must be between 1 and 1000
     * 
     */
    public Optional<Integer> weight() {
        return Optional.ofNullable(this.weight);
    }

    private DeepCreatedOriginResponse() {}

    private DeepCreatedOriginResponse(DeepCreatedOriginResponse $) {
        this.enabled = $.enabled;
        this.hostName = $.hostName;
        this.httpPort = $.httpPort;
        this.httpsPort = $.httpsPort;
        this.name = $.name;
        this.originHostHeader = $.originHostHeader;
        this.priority = $.priority;
        this.privateLinkAlias = $.privateLinkAlias;
        this.privateLinkApprovalMessage = $.privateLinkApprovalMessage;
        this.privateLinkLocation = $.privateLinkLocation;
        this.privateLinkResourceId = $.privateLinkResourceId;
        this.weight = $.weight;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeepCreatedOriginResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeepCreatedOriginResponse $;

        public Builder() {
            $ = new DeepCreatedOriginResponse();
        }

        public Builder(DeepCreatedOriginResponse defaults) {
            $ = new DeepCreatedOriginResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param enabled Origin is enabled for load balancing or not. By default, origin is always enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Boolean enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param hostName The address of the origin. It can be a domain name, IPv4 address, or IPv6 address. This should be unique across all origins in an endpoint.
         * 
         * @return builder
         * 
         */
        public Builder hostName(String hostName) {
            $.hostName = hostName;
            return this;
        }

        /**
         * @param httpPort The value of the HTTP port. Must be between 1 and 65535.
         * 
         * @return builder
         * 
         */
        public Builder httpPort(@Nullable Integer httpPort) {
            $.httpPort = httpPort;
            return this;
        }

        /**
         * @param httpsPort The value of the HTTPS port. Must be between 1 and 65535.
         * 
         * @return builder
         * 
         */
        public Builder httpsPort(@Nullable Integer httpsPort) {
            $.httpsPort = httpsPort;
            return this;
        }

        /**
         * @param name Origin name which must be unique within the endpoint.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param originHostHeader The host header value sent to the origin with each request. If you leave this blank, the request hostname determines this value. Azure CDN origins, such as Web Apps, Blob Storage, and Cloud Services require this host header value to match the origin hostname by default.
         * 
         * @return builder
         * 
         */
        public Builder originHostHeader(@Nullable String originHostHeader) {
            $.originHostHeader = originHostHeader;
            return this;
        }

        /**
         * @param priority Priority of origin in given origin group for load balancing. Higher priorities will not be used for load balancing if any lower priority origin is healthy.Must be between 1 and 5.
         * 
         * @return builder
         * 
         */
        public Builder priority(@Nullable Integer priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param privateLinkAlias The Alias of the Private Link resource. Populating this optional field indicates that this origin is &#39;Private&#39;
         * 
         * @return builder
         * 
         */
        public Builder privateLinkAlias(@Nullable String privateLinkAlias) {
            $.privateLinkAlias = privateLinkAlias;
            return this;
        }

        /**
         * @param privateLinkApprovalMessage A custom message to be included in the approval request to connect to the Private Link.
         * 
         * @return builder
         * 
         */
        public Builder privateLinkApprovalMessage(@Nullable String privateLinkApprovalMessage) {
            $.privateLinkApprovalMessage = privateLinkApprovalMessage;
            return this;
        }

        /**
         * @param privateLinkLocation The location of the Private Link resource. Required only if &#39;privateLinkResourceId&#39; is populated
         * 
         * @return builder
         * 
         */
        public Builder privateLinkLocation(@Nullable String privateLinkLocation) {
            $.privateLinkLocation = privateLinkLocation;
            return this;
        }

        /**
         * @param privateLinkResourceId The Resource Id of the Private Link resource. Populating this optional field indicates that this backend is &#39;Private&#39;
         * 
         * @return builder
         * 
         */
        public Builder privateLinkResourceId(@Nullable String privateLinkResourceId) {
            $.privateLinkResourceId = privateLinkResourceId;
            return this;
        }

        /**
         * @param weight Weight of the origin in given origin group for load balancing. Must be between 1 and 1000
         * 
         * @return builder
         * 
         */
        public Builder weight(@Nullable Integer weight) {
            $.weight = weight;
            return this;
        }

        public DeepCreatedOriginResponse build() {
            $.hostName = Objects.requireNonNull($.hostName, "expected parameter 'hostName' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            return $;
        }
    }

}
