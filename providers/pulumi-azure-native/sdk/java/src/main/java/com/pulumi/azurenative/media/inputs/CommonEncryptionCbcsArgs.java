// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.media.inputs;

import com.pulumi.azurenative.media.inputs.CbcsDrmConfigurationArgs;
import com.pulumi.azurenative.media.inputs.EnabledProtocolsArgs;
import com.pulumi.azurenative.media.inputs.StreamingPolicyContentKeysArgs;
import com.pulumi.azurenative.media.inputs.TrackSelectionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Class for CommonEncryptionCbcs encryption scheme
 * 
 */
public final class CommonEncryptionCbcsArgs extends com.pulumi.resources.ResourceArgs {

    public static final CommonEncryptionCbcsArgs Empty = new CommonEncryptionCbcsArgs();

    /**
     * Representing which tracks should not be encrypted
     * 
     */
    @Import(name="clearTracks")
    private @Nullable Output<List<TrackSelectionArgs>> clearTracks;

    /**
     * @return Representing which tracks should not be encrypted
     * 
     */
    public Optional<Output<List<TrackSelectionArgs>>> clearTracks() {
        return Optional.ofNullable(this.clearTracks);
    }

    /**
     * Representing default content key for each encryption scheme and separate content keys for specific tracks
     * 
     */
    @Import(name="contentKeys")
    private @Nullable Output<StreamingPolicyContentKeysArgs> contentKeys;

    /**
     * @return Representing default content key for each encryption scheme and separate content keys for specific tracks
     * 
     */
    public Optional<Output<StreamingPolicyContentKeysArgs>> contentKeys() {
        return Optional.ofNullable(this.contentKeys);
    }

    /**
     * Configuration of DRMs for current encryption scheme
     * 
     */
    @Import(name="drm")
    private @Nullable Output<CbcsDrmConfigurationArgs> drm;

    /**
     * @return Configuration of DRMs for current encryption scheme
     * 
     */
    public Optional<Output<CbcsDrmConfigurationArgs>> drm() {
        return Optional.ofNullable(this.drm);
    }

    /**
     * Representing supported protocols
     * 
     */
    @Import(name="enabledProtocols")
    private @Nullable Output<EnabledProtocolsArgs> enabledProtocols;

    /**
     * @return Representing supported protocols
     * 
     */
    public Optional<Output<EnabledProtocolsArgs>> enabledProtocols() {
        return Optional.ofNullable(this.enabledProtocols);
    }

    private CommonEncryptionCbcsArgs() {}

    private CommonEncryptionCbcsArgs(CommonEncryptionCbcsArgs $) {
        this.clearTracks = $.clearTracks;
        this.contentKeys = $.contentKeys;
        this.drm = $.drm;
        this.enabledProtocols = $.enabledProtocols;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CommonEncryptionCbcsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CommonEncryptionCbcsArgs $;

        public Builder() {
            $ = new CommonEncryptionCbcsArgs();
        }

        public Builder(CommonEncryptionCbcsArgs defaults) {
            $ = new CommonEncryptionCbcsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clearTracks Representing which tracks should not be encrypted
         * 
         * @return builder
         * 
         */
        public Builder clearTracks(@Nullable Output<List<TrackSelectionArgs>> clearTracks) {
            $.clearTracks = clearTracks;
            return this;
        }

        /**
         * @param clearTracks Representing which tracks should not be encrypted
         * 
         * @return builder
         * 
         */
        public Builder clearTracks(List<TrackSelectionArgs> clearTracks) {
            return clearTracks(Output.of(clearTracks));
        }

        /**
         * @param clearTracks Representing which tracks should not be encrypted
         * 
         * @return builder
         * 
         */
        public Builder clearTracks(TrackSelectionArgs... clearTracks) {
            return clearTracks(List.of(clearTracks));
        }

        /**
         * @param contentKeys Representing default content key for each encryption scheme and separate content keys for specific tracks
         * 
         * @return builder
         * 
         */
        public Builder contentKeys(@Nullable Output<StreamingPolicyContentKeysArgs> contentKeys) {
            $.contentKeys = contentKeys;
            return this;
        }

        /**
         * @param contentKeys Representing default content key for each encryption scheme and separate content keys for specific tracks
         * 
         * @return builder
         * 
         */
        public Builder contentKeys(StreamingPolicyContentKeysArgs contentKeys) {
            return contentKeys(Output.of(contentKeys));
        }

        /**
         * @param drm Configuration of DRMs for current encryption scheme
         * 
         * @return builder
         * 
         */
        public Builder drm(@Nullable Output<CbcsDrmConfigurationArgs> drm) {
            $.drm = drm;
            return this;
        }

        /**
         * @param drm Configuration of DRMs for current encryption scheme
         * 
         * @return builder
         * 
         */
        public Builder drm(CbcsDrmConfigurationArgs drm) {
            return drm(Output.of(drm));
        }

        /**
         * @param enabledProtocols Representing supported protocols
         * 
         * @return builder
         * 
         */
        public Builder enabledProtocols(@Nullable Output<EnabledProtocolsArgs> enabledProtocols) {
            $.enabledProtocols = enabledProtocols;
            return this;
        }

        /**
         * @param enabledProtocols Representing supported protocols
         * 
         * @return builder
         * 
         */
        public Builder enabledProtocols(EnabledProtocolsArgs enabledProtocols) {
            return enabledProtocols(Output.of(enabledProtocols));
        }

        public CommonEncryptionCbcsArgs build() {
            return $;
        }
    }

}
