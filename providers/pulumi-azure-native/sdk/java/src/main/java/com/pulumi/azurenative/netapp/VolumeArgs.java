// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.netapp;

import com.pulumi.azurenative.netapp.enums.SecurityStyle;
import com.pulumi.azurenative.netapp.enums.ServiceLevel;
import com.pulumi.azurenative.netapp.inputs.VolumePropertiesDataProtectionArgs;
import com.pulumi.azurenative.netapp.inputs.VolumePropertiesExportPolicyArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class VolumeArgs extends com.pulumi.resources.ResourceArgs {

    public static final VolumeArgs Empty = new VolumeArgs();

    /**
     * The name of the NetApp account
     * 
     */
    @Import(name="accountName", required=true)
      private final Output<String> accountName;

    public Output<String> accountName() {
        return this.accountName;
    }

    /**
     * UUID v4 or resource identifier used to identify the Backup.
     * 
     */
    @Import(name="backupId")
      private final @Nullable Output<String> backupId;

    public Output<String> backupId() {
        return this.backupId == null ? Codegen.empty() : this.backupId;
    }

    /**
     * A unique file path for the volume. Used when creating mount targets
     * 
     */
    @Import(name="creationToken", required=true)
      private final Output<String> creationToken;

    public Output<String> creationToken() {
        return this.creationToken;
    }

    /**
     * DataProtection type volumes include an object containing details of the replication
     * 
     */
    @Import(name="dataProtection")
      private final @Nullable Output<VolumePropertiesDataProtectionArgs> dataProtection;

    public Output<VolumePropertiesDataProtectionArgs> dataProtection() {
        return this.dataProtection == null ? Codegen.empty() : this.dataProtection;
    }

    /**
     * Encryption Key Source. Possible values are: 'Microsoft.NetApp'
     * 
     */
    @Import(name="encryptionKeySource")
      private final @Nullable Output<String> encryptionKeySource;

    public Output<String> encryptionKeySource() {
        return this.encryptionKeySource == null ? Codegen.empty() : this.encryptionKeySource;
    }

    /**
     * Set of export policy rules
     * 
     */
    @Import(name="exportPolicy")
      private final @Nullable Output<VolumePropertiesExportPolicyArgs> exportPolicy;

    public Output<VolumePropertiesExportPolicyArgs> exportPolicy() {
        return this.exportPolicy == null ? Codegen.empty() : this.exportPolicy;
    }

    /**
     * Restoring
     * 
     */
    @Import(name="isRestoring")
      private final @Nullable Output<Boolean> isRestoring;

    public Output<Boolean> isRestoring() {
        return this.isRestoring == null ? Codegen.empty() : this.isRestoring;
    }

    /**
     * Describe if a volume is KerberosEnabled. To be use with swagger version 2020-05-01 or later
     * 
     */
    @Import(name="kerberosEnabled")
      private final @Nullable Output<Boolean> kerberosEnabled;

    public Output<Boolean> kerberosEnabled() {
        return this.kerberosEnabled == null ? Codegen.empty() : this.kerberosEnabled;
    }

    /**
     * Specifies whether LDAP is enabled or not for a given NFS volume.
     * 
     */
    @Import(name="ldapEnabled")
      private final @Nullable Output<Boolean> ldapEnabled;

    public Output<Boolean> ldapEnabled() {
        return this.ldapEnabled == null ? Codegen.empty() : this.ldapEnabled;
    }

    /**
     * Resource location
     * 
     */
    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> location() {
        return this.location == null ? Codegen.empty() : this.location;
    }

    /**
     * The name of the capacity pool
     * 
     */
    @Import(name="poolName", required=true)
      private final Output<String> poolName;

    public Output<String> poolName() {
        return this.poolName;
    }

    /**
     * Set of protocol types, default NFSv3, CIFS for SMB protocol
     * 
     */
    @Import(name="protocolTypes")
      private final @Nullable Output<List<String>> protocolTypes;

    public Output<List<String>> protocolTypes() {
        return this.protocolTypes == null ? Codegen.empty() : this.protocolTypes;
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The security style of volume, default unix, defaults to ntfs for dual protocol or CIFS protocol
     * 
     */
    @Import(name="securityStyle")
      private final @Nullable Output<Either<String,SecurityStyle>> securityStyle;

    public Output<Either<String,SecurityStyle>> securityStyle() {
        return this.securityStyle == null ? Codegen.empty() : this.securityStyle;
    }

    /**
     * The service level of the file system
     * 
     */
    @Import(name="serviceLevel")
      private final @Nullable Output<Either<String,ServiceLevel>> serviceLevel;

    public Output<Either<String,ServiceLevel>> serviceLevel() {
        return this.serviceLevel == null ? Codegen.empty() : this.serviceLevel;
    }

    /**
     * Enables continuously available share property for smb volume. Only applicable for SMB volume
     * 
     */
    @Import(name="smbContinuouslyAvailable")
      private final @Nullable Output<Boolean> smbContinuouslyAvailable;

    public Output<Boolean> smbContinuouslyAvailable() {
        return this.smbContinuouslyAvailable == null ? Codegen.empty() : this.smbContinuouslyAvailable;
    }

    /**
     * Enables encryption for in-flight smb3 data. Only applicable for SMB/DualProtocol volume. To be used with swagger version 2020-08-01 or later
     * 
     */
    @Import(name="smbEncryption")
      private final @Nullable Output<Boolean> smbEncryption;

    public Output<Boolean> smbEncryption() {
        return this.smbEncryption == null ? Codegen.empty() : this.smbEncryption;
    }

    /**
     * If enabled (true) the volume will contain a read-only snapshot directory which provides access to each of the volume's snapshots (default to true).
     * 
     */
    @Import(name="snapshotDirectoryVisible")
      private final @Nullable Output<Boolean> snapshotDirectoryVisible;

    public Output<Boolean> snapshotDirectoryVisible() {
        return this.snapshotDirectoryVisible == null ? Codegen.empty() : this.snapshotDirectoryVisible;
    }

    /**
     * UUID v4 or resource identifier used to identify the Snapshot.
     * 
     */
    @Import(name="snapshotId")
      private final @Nullable Output<String> snapshotId;

    public Output<String> snapshotId() {
        return this.snapshotId == null ? Codegen.empty() : this.snapshotId;
    }

    /**
     * The Azure Resource URI for a delegated subnet. Must have the delegation Microsoft.NetApp/volumes
     * 
     */
    @Import(name="subnetId", required=true)
      private final Output<String> subnetId;

    public Output<String> subnetId() {
        return this.subnetId;
    }

    /**
     * Resource tags
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    @Import(name="throughputMibps")
      private final @Nullable Output<Double> throughputMibps;

    public Output<Double> throughputMibps() {
        return this.throughputMibps == null ? Codegen.empty() : this.throughputMibps;
    }

    /**
     * Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB. Specified in bytes.
     * 
     */
    @Import(name="usageThreshold", required=true)
      private final Output<Double> usageThreshold;

    public Output<Double> usageThreshold() {
        return this.usageThreshold;
    }

    /**
     * The name of the volume
     * 
     */
    @Import(name="volumeName")
      private final @Nullable Output<String> volumeName;

    public Output<String> volumeName() {
        return this.volumeName == null ? Codegen.empty() : this.volumeName;
    }

    /**
     * What type of volume is this
     * 
     */
    @Import(name="volumeType")
      private final @Nullable Output<String> volumeType;

    public Output<String> volumeType() {
        return this.volumeType == null ? Codegen.empty() : this.volumeType;
    }

    public VolumeArgs(
        Output<String> accountName,
        @Nullable Output<String> backupId,
        Output<String> creationToken,
        @Nullable Output<VolumePropertiesDataProtectionArgs> dataProtection,
        @Nullable Output<String> encryptionKeySource,
        @Nullable Output<VolumePropertiesExportPolicyArgs> exportPolicy,
        @Nullable Output<Boolean> isRestoring,
        @Nullable Output<Boolean> kerberosEnabled,
        @Nullable Output<Boolean> ldapEnabled,
        @Nullable Output<String> location,
        Output<String> poolName,
        @Nullable Output<List<String>> protocolTypes,
        Output<String> resourceGroupName,
        @Nullable Output<Either<String,SecurityStyle>> securityStyle,
        @Nullable Output<Either<String,ServiceLevel>> serviceLevel,
        @Nullable Output<Boolean> smbContinuouslyAvailable,
        @Nullable Output<Boolean> smbEncryption,
        @Nullable Output<Boolean> snapshotDirectoryVisible,
        @Nullable Output<String> snapshotId,
        Output<String> subnetId,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<Double> throughputMibps,
        Output<Double> usageThreshold,
        @Nullable Output<String> volumeName,
        @Nullable Output<String> volumeType) {
        this.accountName = Objects.requireNonNull(accountName, "expected parameter 'accountName' to be non-null");
        this.backupId = backupId;
        this.creationToken = Objects.requireNonNull(creationToken, "expected parameter 'creationToken' to be non-null");
        this.dataProtection = dataProtection;
        this.encryptionKeySource = encryptionKeySource;
        this.exportPolicy = exportPolicy;
        this.isRestoring = isRestoring;
        this.kerberosEnabled = Codegen.booleanProp("kerberosEnabled").output().arg(kerberosEnabled).def(false).getNullable();
        this.ldapEnabled = Codegen.booleanProp("ldapEnabled").output().arg(ldapEnabled).def(false).getNullable();
        this.location = location;
        this.poolName = Objects.requireNonNull(poolName, "expected parameter 'poolName' to be non-null");
        this.protocolTypes = protocolTypes;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.securityStyle = Codegen.stringProp("securityStyle").left(SecurityStyle.class).output().arg(securityStyle).def("unix").getNullable();
        this.serviceLevel = Codegen.stringProp("serviceLevel").left(ServiceLevel.class).output().arg(serviceLevel).def("Premium").getNullable();
        this.smbContinuouslyAvailable = Codegen.booleanProp("smbContinuouslyAvailable").output().arg(smbContinuouslyAvailable).def(false).getNullable();
        this.smbEncryption = Codegen.booleanProp("smbEncryption").output().arg(smbEncryption).def(false).getNullable();
        this.snapshotDirectoryVisible = Codegen.booleanProp("snapshotDirectoryVisible").output().arg(snapshotDirectoryVisible).def(true).getNullable();
        this.snapshotId = snapshotId;
        this.subnetId = Objects.requireNonNull(subnetId, "expected parameter 'subnetId' to be non-null");
        this.tags = tags;
        this.throughputMibps = Codegen.doubleProp("throughputMibps").output().arg(throughputMibps).def(0e+00).getNullable();
        this.usageThreshold = Codegen.doubleProp("usageThreshold").output().arg(usageThreshold).def(1.073741824e+11).require();
        this.volumeName = volumeName;
        this.volumeType = volumeType;
    }

    private VolumeArgs() {
        this.accountName = Codegen.empty();
        this.backupId = Codegen.empty();
        this.creationToken = Codegen.empty();
        this.dataProtection = Codegen.empty();
        this.encryptionKeySource = Codegen.empty();
        this.exportPolicy = Codegen.empty();
        this.isRestoring = Codegen.empty();
        this.kerberosEnabled = Codegen.empty();
        this.ldapEnabled = Codegen.empty();
        this.location = Codegen.empty();
        this.poolName = Codegen.empty();
        this.protocolTypes = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.securityStyle = Codegen.empty();
        this.serviceLevel = Codegen.empty();
        this.smbContinuouslyAvailable = Codegen.empty();
        this.smbEncryption = Codegen.empty();
        this.snapshotDirectoryVisible = Codegen.empty();
        this.snapshotId = Codegen.empty();
        this.subnetId = Codegen.empty();
        this.tags = Codegen.empty();
        this.throughputMibps = Codegen.empty();
        this.usageThreshold = Codegen.empty();
        this.volumeName = Codegen.empty();
        this.volumeType = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VolumeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> accountName;
        private @Nullable Output<String> backupId;
        private Output<String> creationToken;
        private @Nullable Output<VolumePropertiesDataProtectionArgs> dataProtection;
        private @Nullable Output<String> encryptionKeySource;
        private @Nullable Output<VolumePropertiesExportPolicyArgs> exportPolicy;
        private @Nullable Output<Boolean> isRestoring;
        private @Nullable Output<Boolean> kerberosEnabled;
        private @Nullable Output<Boolean> ldapEnabled;
        private @Nullable Output<String> location;
        private Output<String> poolName;
        private @Nullable Output<List<String>> protocolTypes;
        private Output<String> resourceGroupName;
        private @Nullable Output<Either<String,SecurityStyle>> securityStyle;
        private @Nullable Output<Either<String,ServiceLevel>> serviceLevel;
        private @Nullable Output<Boolean> smbContinuouslyAvailable;
        private @Nullable Output<Boolean> smbEncryption;
        private @Nullable Output<Boolean> snapshotDirectoryVisible;
        private @Nullable Output<String> snapshotId;
        private Output<String> subnetId;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<Double> throughputMibps;
        private Output<Double> usageThreshold;
        private @Nullable Output<String> volumeName;
        private @Nullable Output<String> volumeType;

        public Builder() {
    	      // Empty
        }

        public Builder(VolumeArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountName = defaults.accountName;
    	      this.backupId = defaults.backupId;
    	      this.creationToken = defaults.creationToken;
    	      this.dataProtection = defaults.dataProtection;
    	      this.encryptionKeySource = defaults.encryptionKeySource;
    	      this.exportPolicy = defaults.exportPolicy;
    	      this.isRestoring = defaults.isRestoring;
    	      this.kerberosEnabled = defaults.kerberosEnabled;
    	      this.ldapEnabled = defaults.ldapEnabled;
    	      this.location = defaults.location;
    	      this.poolName = defaults.poolName;
    	      this.protocolTypes = defaults.protocolTypes;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.securityStyle = defaults.securityStyle;
    	      this.serviceLevel = defaults.serviceLevel;
    	      this.smbContinuouslyAvailable = defaults.smbContinuouslyAvailable;
    	      this.smbEncryption = defaults.smbEncryption;
    	      this.snapshotDirectoryVisible = defaults.snapshotDirectoryVisible;
    	      this.snapshotId = defaults.snapshotId;
    	      this.subnetId = defaults.subnetId;
    	      this.tags = defaults.tags;
    	      this.throughputMibps = defaults.throughputMibps;
    	      this.usageThreshold = defaults.usageThreshold;
    	      this.volumeName = defaults.volumeName;
    	      this.volumeType = defaults.volumeType;
        }

        public Builder accountName(Output<String> accountName) {
            this.accountName = Objects.requireNonNull(accountName);
            return this;
        }
        public Builder accountName(String accountName) {
            this.accountName = Output.of(Objects.requireNonNull(accountName));
            return this;
        }
        public Builder backupId(@Nullable Output<String> backupId) {
            this.backupId = backupId;
            return this;
        }
        public Builder backupId(@Nullable String backupId) {
            this.backupId = Codegen.ofNullable(backupId);
            return this;
        }
        public Builder creationToken(Output<String> creationToken) {
            this.creationToken = Objects.requireNonNull(creationToken);
            return this;
        }
        public Builder creationToken(String creationToken) {
            this.creationToken = Output.of(Objects.requireNonNull(creationToken));
            return this;
        }
        public Builder dataProtection(@Nullable Output<VolumePropertiesDataProtectionArgs> dataProtection) {
            this.dataProtection = dataProtection;
            return this;
        }
        public Builder dataProtection(@Nullable VolumePropertiesDataProtectionArgs dataProtection) {
            this.dataProtection = Codegen.ofNullable(dataProtection);
            return this;
        }
        public Builder encryptionKeySource(@Nullable Output<String> encryptionKeySource) {
            this.encryptionKeySource = encryptionKeySource;
            return this;
        }
        public Builder encryptionKeySource(@Nullable String encryptionKeySource) {
            this.encryptionKeySource = Codegen.ofNullable(encryptionKeySource);
            return this;
        }
        public Builder exportPolicy(@Nullable Output<VolumePropertiesExportPolicyArgs> exportPolicy) {
            this.exportPolicy = exportPolicy;
            return this;
        }
        public Builder exportPolicy(@Nullable VolumePropertiesExportPolicyArgs exportPolicy) {
            this.exportPolicy = Codegen.ofNullable(exportPolicy);
            return this;
        }
        public Builder isRestoring(@Nullable Output<Boolean> isRestoring) {
            this.isRestoring = isRestoring;
            return this;
        }
        public Builder isRestoring(@Nullable Boolean isRestoring) {
            this.isRestoring = Codegen.ofNullable(isRestoring);
            return this;
        }
        public Builder kerberosEnabled(@Nullable Output<Boolean> kerberosEnabled) {
            this.kerberosEnabled = kerberosEnabled;
            return this;
        }
        public Builder kerberosEnabled(@Nullable Boolean kerberosEnabled) {
            this.kerberosEnabled = Codegen.ofNullable(kerberosEnabled);
            return this;
        }
        public Builder ldapEnabled(@Nullable Output<Boolean> ldapEnabled) {
            this.ldapEnabled = ldapEnabled;
            return this;
        }
        public Builder ldapEnabled(@Nullable Boolean ldapEnabled) {
            this.ldapEnabled = Codegen.ofNullable(ldapEnabled);
            return this;
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Codegen.ofNullable(location);
            return this;
        }
        public Builder poolName(Output<String> poolName) {
            this.poolName = Objects.requireNonNull(poolName);
            return this;
        }
        public Builder poolName(String poolName) {
            this.poolName = Output.of(Objects.requireNonNull(poolName));
            return this;
        }
        public Builder protocolTypes(@Nullable Output<List<String>> protocolTypes) {
            this.protocolTypes = protocolTypes;
            return this;
        }
        public Builder protocolTypes(@Nullable List<String> protocolTypes) {
            this.protocolTypes = Codegen.ofNullable(protocolTypes);
            return this;
        }
        public Builder protocolTypes(String... protocolTypes) {
            return protocolTypes(List.of(protocolTypes));
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder securityStyle(@Nullable Output<Either<String,SecurityStyle>> securityStyle) {
            this.securityStyle = securityStyle;
            return this;
        }
        public Builder securityStyle(@Nullable Either<String,SecurityStyle> securityStyle) {
            this.securityStyle = Codegen.ofNullable(securityStyle);
            return this;
        }
        public Builder serviceLevel(@Nullable Output<Either<String,ServiceLevel>> serviceLevel) {
            this.serviceLevel = serviceLevel;
            return this;
        }
        public Builder serviceLevel(@Nullable Either<String,ServiceLevel> serviceLevel) {
            this.serviceLevel = Codegen.ofNullable(serviceLevel);
            return this;
        }
        public Builder smbContinuouslyAvailable(@Nullable Output<Boolean> smbContinuouslyAvailable) {
            this.smbContinuouslyAvailable = smbContinuouslyAvailable;
            return this;
        }
        public Builder smbContinuouslyAvailable(@Nullable Boolean smbContinuouslyAvailable) {
            this.smbContinuouslyAvailable = Codegen.ofNullable(smbContinuouslyAvailable);
            return this;
        }
        public Builder smbEncryption(@Nullable Output<Boolean> smbEncryption) {
            this.smbEncryption = smbEncryption;
            return this;
        }
        public Builder smbEncryption(@Nullable Boolean smbEncryption) {
            this.smbEncryption = Codegen.ofNullable(smbEncryption);
            return this;
        }
        public Builder snapshotDirectoryVisible(@Nullable Output<Boolean> snapshotDirectoryVisible) {
            this.snapshotDirectoryVisible = snapshotDirectoryVisible;
            return this;
        }
        public Builder snapshotDirectoryVisible(@Nullable Boolean snapshotDirectoryVisible) {
            this.snapshotDirectoryVisible = Codegen.ofNullable(snapshotDirectoryVisible);
            return this;
        }
        public Builder snapshotId(@Nullable Output<String> snapshotId) {
            this.snapshotId = snapshotId;
            return this;
        }
        public Builder snapshotId(@Nullable String snapshotId) {
            this.snapshotId = Codegen.ofNullable(snapshotId);
            return this;
        }
        public Builder subnetId(Output<String> subnetId) {
            this.subnetId = Objects.requireNonNull(subnetId);
            return this;
        }
        public Builder subnetId(String subnetId) {
            this.subnetId = Output.of(Objects.requireNonNull(subnetId));
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder throughputMibps(@Nullable Output<Double> throughputMibps) {
            this.throughputMibps = throughputMibps;
            return this;
        }
        public Builder throughputMibps(@Nullable Double throughputMibps) {
            this.throughputMibps = Codegen.ofNullable(throughputMibps);
            return this;
        }
        public Builder usageThreshold(Output<Double> usageThreshold) {
            this.usageThreshold = Objects.requireNonNull(usageThreshold);
            return this;
        }
        public Builder usageThreshold(Double usageThreshold) {
            this.usageThreshold = Output.of(Objects.requireNonNull(usageThreshold));
            return this;
        }
        public Builder volumeName(@Nullable Output<String> volumeName) {
            this.volumeName = volumeName;
            return this;
        }
        public Builder volumeName(@Nullable String volumeName) {
            this.volumeName = Codegen.ofNullable(volumeName);
            return this;
        }
        public Builder volumeType(@Nullable Output<String> volumeType) {
            this.volumeType = volumeType;
            return this;
        }
        public Builder volumeType(@Nullable String volumeType) {
            this.volumeType = Codegen.ofNullable(volumeType);
            return this;
        }        public VolumeArgs build() {
            return new VolumeArgs(accountName, backupId, creationToken, dataProtection, encryptionKeySource, exportPolicy, isRestoring, kerberosEnabled, ldapEnabled, location, poolName, protocolTypes, resourceGroupName, securityStyle, serviceLevel, smbContinuouslyAvailable, smbEncryption, snapshotDirectoryVisible, snapshotId, subnetId, tags, throughputMibps, usageThreshold, volumeName, volumeType);
        }
    }
}
