// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.netapp;

import com.pulumi.azurenative.netapp.enums.SecurityStyle;
import com.pulumi.azurenative.netapp.enums.ServiceLevel;
import com.pulumi.azurenative.netapp.inputs.VolumePropertiesDataProtectionArgs;
import com.pulumi.azurenative.netapp.inputs.VolumePropertiesExportPolicyArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VolumeArgs extends com.pulumi.resources.ResourceArgs {

    public static final VolumeArgs Empty = new VolumeArgs();

    /**
     * The name of the NetApp account
     * 
     */
    @Import(name="accountName", required=true)
    private Output<String> accountName;

    /**
     * @return The name of the NetApp account
     * 
     */
    public Output<String> accountName() {
        return this.accountName;
    }

    /**
     * UUID v4 or resource identifier used to identify the Backup.
     * 
     */
    @Import(name="backupId")
    private @Nullable Output<String> backupId;

    /**
     * @return UUID v4 or resource identifier used to identify the Backup.
     * 
     */
    public Optional<Output<String>> backupId() {
        return Optional.ofNullable(this.backupId);
    }

    /**
     * A unique file path for the volume. Used when creating mount targets
     * 
     */
    @Import(name="creationToken", required=true)
    private Output<String> creationToken;

    /**
     * @return A unique file path for the volume. Used when creating mount targets
     * 
     */
    public Output<String> creationToken() {
        return this.creationToken;
    }

    /**
     * DataProtection type volumes include an object containing details of the replication
     * 
     */
    @Import(name="dataProtection")
    private @Nullable Output<VolumePropertiesDataProtectionArgs> dataProtection;

    /**
     * @return DataProtection type volumes include an object containing details of the replication
     * 
     */
    public Optional<Output<VolumePropertiesDataProtectionArgs>> dataProtection() {
        return Optional.ofNullable(this.dataProtection);
    }

    /**
     * Encryption Key Source. Possible values are: &#39;Microsoft.NetApp&#39;
     * 
     */
    @Import(name="encryptionKeySource")
    private @Nullable Output<String> encryptionKeySource;

    /**
     * @return Encryption Key Source. Possible values are: &#39;Microsoft.NetApp&#39;
     * 
     */
    public Optional<Output<String>> encryptionKeySource() {
        return Optional.ofNullable(this.encryptionKeySource);
    }

    /**
     * Set of export policy rules
     * 
     */
    @Import(name="exportPolicy")
    private @Nullable Output<VolumePropertiesExportPolicyArgs> exportPolicy;

    /**
     * @return Set of export policy rules
     * 
     */
    public Optional<Output<VolumePropertiesExportPolicyArgs>> exportPolicy() {
        return Optional.ofNullable(this.exportPolicy);
    }

    /**
     * Restoring
     * 
     */
    @Import(name="isRestoring")
    private @Nullable Output<Boolean> isRestoring;

    /**
     * @return Restoring
     * 
     */
    public Optional<Output<Boolean>> isRestoring() {
        return Optional.ofNullable(this.isRestoring);
    }

    /**
     * Describe if a volume is KerberosEnabled. To be use with swagger version 2020-05-01 or later
     * 
     */
    @Import(name="kerberosEnabled")
    private @Nullable Output<Boolean> kerberosEnabled;

    /**
     * @return Describe if a volume is KerberosEnabled. To be use with swagger version 2020-05-01 or later
     * 
     */
    public Optional<Output<Boolean>> kerberosEnabled() {
        return Optional.ofNullable(this.kerberosEnabled);
    }

    /**
     * Specifies whether LDAP is enabled or not for a given NFS volume.
     * 
     */
    @Import(name="ldapEnabled")
    private @Nullable Output<Boolean> ldapEnabled;

    /**
     * @return Specifies whether LDAP is enabled or not for a given NFS volume.
     * 
     */
    public Optional<Output<Boolean>> ldapEnabled() {
        return Optional.ofNullable(this.ldapEnabled);
    }

    /**
     * Resource location
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Resource location
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name of the capacity pool
     * 
     */
    @Import(name="poolName", required=true)
    private Output<String> poolName;

    /**
     * @return The name of the capacity pool
     * 
     */
    public Output<String> poolName() {
        return this.poolName;
    }

    /**
     * Set of protocol types, default NFSv3, CIFS for SMB protocol
     * 
     */
    @Import(name="protocolTypes")
    private @Nullable Output<List<String>> protocolTypes;

    /**
     * @return Set of protocol types, default NFSv3, CIFS for SMB protocol
     * 
     */
    public Optional<Output<List<String>>> protocolTypes() {
        return Optional.ofNullable(this.protocolTypes);
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The security style of volume, default unix, defaults to ntfs for dual protocol or CIFS protocol
     * 
     */
    @Import(name="securityStyle")
    private @Nullable Output<Either<String,SecurityStyle>> securityStyle;

    /**
     * @return The security style of volume, default unix, defaults to ntfs for dual protocol or CIFS protocol
     * 
     */
    public Optional<Output<Either<String,SecurityStyle>>> securityStyle() {
        return Optional.ofNullable(this.securityStyle);
    }

    /**
     * The service level of the file system
     * 
     */
    @Import(name="serviceLevel")
    private @Nullable Output<Either<String,ServiceLevel>> serviceLevel;

    /**
     * @return The service level of the file system
     * 
     */
    public Optional<Output<Either<String,ServiceLevel>>> serviceLevel() {
        return Optional.ofNullable(this.serviceLevel);
    }

    /**
     * Enables continuously available share property for smb volume. Only applicable for SMB volume
     * 
     */
    @Import(name="smbContinuouslyAvailable")
    private @Nullable Output<Boolean> smbContinuouslyAvailable;

    /**
     * @return Enables continuously available share property for smb volume. Only applicable for SMB volume
     * 
     */
    public Optional<Output<Boolean>> smbContinuouslyAvailable() {
        return Optional.ofNullable(this.smbContinuouslyAvailable);
    }

    /**
     * Enables encryption for in-flight smb3 data. Only applicable for SMB/DualProtocol volume. To be used with swagger version 2020-08-01 or later
     * 
     */
    @Import(name="smbEncryption")
    private @Nullable Output<Boolean> smbEncryption;

    /**
     * @return Enables encryption for in-flight smb3 data. Only applicable for SMB/DualProtocol volume. To be used with swagger version 2020-08-01 or later
     * 
     */
    public Optional<Output<Boolean>> smbEncryption() {
        return Optional.ofNullable(this.smbEncryption);
    }

    /**
     * If enabled (true) the volume will contain a read-only snapshot directory which provides access to each of the volume&#39;s snapshots (default to true).
     * 
     */
    @Import(name="snapshotDirectoryVisible")
    private @Nullable Output<Boolean> snapshotDirectoryVisible;

    /**
     * @return If enabled (true) the volume will contain a read-only snapshot directory which provides access to each of the volume&#39;s snapshots (default to true).
     * 
     */
    public Optional<Output<Boolean>> snapshotDirectoryVisible() {
        return Optional.ofNullable(this.snapshotDirectoryVisible);
    }

    /**
     * UUID v4 or resource identifier used to identify the Snapshot.
     * 
     */
    @Import(name="snapshotId")
    private @Nullable Output<String> snapshotId;

    /**
     * @return UUID v4 or resource identifier used to identify the Snapshot.
     * 
     */
    public Optional<Output<String>> snapshotId() {
        return Optional.ofNullable(this.snapshotId);
    }

    /**
     * The Azure Resource URI for a delegated subnet. Must have the delegation Microsoft.NetApp/volumes
     * 
     */
    @Import(name="subnetId", required=true)
    private Output<String> subnetId;

    /**
     * @return The Azure Resource URI for a delegated subnet. Must have the delegation Microsoft.NetApp/volumes
     * 
     */
    public Output<String> subnetId() {
        return this.subnetId;
    }

    /**
     * Resource tags
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Resource tags
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="throughputMibps")
    private @Nullable Output<Double> throughputMibps;

    public Optional<Output<Double>> throughputMibps() {
        return Optional.ofNullable(this.throughputMibps);
    }

    /**
     * Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB. Specified in bytes.
     * 
     */
    @Import(name="usageThreshold", required=true)
    private Output<Double> usageThreshold;

    /**
     * @return Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB. Specified in bytes.
     * 
     */
    public Output<Double> usageThreshold() {
        return this.usageThreshold;
    }

    /**
     * The name of the volume
     * 
     */
    @Import(name="volumeName")
    private @Nullable Output<String> volumeName;

    /**
     * @return The name of the volume
     * 
     */
    public Optional<Output<String>> volumeName() {
        return Optional.ofNullable(this.volumeName);
    }

    /**
     * What type of volume is this
     * 
     */
    @Import(name="volumeType")
    private @Nullable Output<String> volumeType;

    /**
     * @return What type of volume is this
     * 
     */
    public Optional<Output<String>> volumeType() {
        return Optional.ofNullable(this.volumeType);
    }

    private VolumeArgs() {}

    private VolumeArgs(VolumeArgs $) {
        this.accountName = $.accountName;
        this.backupId = $.backupId;
        this.creationToken = $.creationToken;
        this.dataProtection = $.dataProtection;
        this.encryptionKeySource = $.encryptionKeySource;
        this.exportPolicy = $.exportPolicy;
        this.isRestoring = $.isRestoring;
        this.kerberosEnabled = $.kerberosEnabled;
        this.ldapEnabled = $.ldapEnabled;
        this.location = $.location;
        this.poolName = $.poolName;
        this.protocolTypes = $.protocolTypes;
        this.resourceGroupName = $.resourceGroupName;
        this.securityStyle = $.securityStyle;
        this.serviceLevel = $.serviceLevel;
        this.smbContinuouslyAvailable = $.smbContinuouslyAvailable;
        this.smbEncryption = $.smbEncryption;
        this.snapshotDirectoryVisible = $.snapshotDirectoryVisible;
        this.snapshotId = $.snapshotId;
        this.subnetId = $.subnetId;
        this.tags = $.tags;
        this.throughputMibps = $.throughputMibps;
        this.usageThreshold = $.usageThreshold;
        this.volumeName = $.volumeName;
        this.volumeType = $.volumeType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VolumeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VolumeArgs $;

        public Builder() {
            $ = new VolumeArgs();
        }

        public Builder(VolumeArgs defaults) {
            $ = new VolumeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountName The name of the NetApp account
         * 
         * @return builder
         * 
         */
        public Builder accountName(Output<String> accountName) {
            $.accountName = accountName;
            return this;
        }

        /**
         * @param accountName The name of the NetApp account
         * 
         * @return builder
         * 
         */
        public Builder accountName(String accountName) {
            return accountName(Output.of(accountName));
        }

        /**
         * @param backupId UUID v4 or resource identifier used to identify the Backup.
         * 
         * @return builder
         * 
         */
        public Builder backupId(@Nullable Output<String> backupId) {
            $.backupId = backupId;
            return this;
        }

        /**
         * @param backupId UUID v4 or resource identifier used to identify the Backup.
         * 
         * @return builder
         * 
         */
        public Builder backupId(String backupId) {
            return backupId(Output.of(backupId));
        }

        /**
         * @param creationToken A unique file path for the volume. Used when creating mount targets
         * 
         * @return builder
         * 
         */
        public Builder creationToken(Output<String> creationToken) {
            $.creationToken = creationToken;
            return this;
        }

        /**
         * @param creationToken A unique file path for the volume. Used when creating mount targets
         * 
         * @return builder
         * 
         */
        public Builder creationToken(String creationToken) {
            return creationToken(Output.of(creationToken));
        }

        /**
         * @param dataProtection DataProtection type volumes include an object containing details of the replication
         * 
         * @return builder
         * 
         */
        public Builder dataProtection(@Nullable Output<VolumePropertiesDataProtectionArgs> dataProtection) {
            $.dataProtection = dataProtection;
            return this;
        }

        /**
         * @param dataProtection DataProtection type volumes include an object containing details of the replication
         * 
         * @return builder
         * 
         */
        public Builder dataProtection(VolumePropertiesDataProtectionArgs dataProtection) {
            return dataProtection(Output.of(dataProtection));
        }

        /**
         * @param encryptionKeySource Encryption Key Source. Possible values are: &#39;Microsoft.NetApp&#39;
         * 
         * @return builder
         * 
         */
        public Builder encryptionKeySource(@Nullable Output<String> encryptionKeySource) {
            $.encryptionKeySource = encryptionKeySource;
            return this;
        }

        /**
         * @param encryptionKeySource Encryption Key Source. Possible values are: &#39;Microsoft.NetApp&#39;
         * 
         * @return builder
         * 
         */
        public Builder encryptionKeySource(String encryptionKeySource) {
            return encryptionKeySource(Output.of(encryptionKeySource));
        }

        /**
         * @param exportPolicy Set of export policy rules
         * 
         * @return builder
         * 
         */
        public Builder exportPolicy(@Nullable Output<VolumePropertiesExportPolicyArgs> exportPolicy) {
            $.exportPolicy = exportPolicy;
            return this;
        }

        /**
         * @param exportPolicy Set of export policy rules
         * 
         * @return builder
         * 
         */
        public Builder exportPolicy(VolumePropertiesExportPolicyArgs exportPolicy) {
            return exportPolicy(Output.of(exportPolicy));
        }

        /**
         * @param isRestoring Restoring
         * 
         * @return builder
         * 
         */
        public Builder isRestoring(@Nullable Output<Boolean> isRestoring) {
            $.isRestoring = isRestoring;
            return this;
        }

        /**
         * @param isRestoring Restoring
         * 
         * @return builder
         * 
         */
        public Builder isRestoring(Boolean isRestoring) {
            return isRestoring(Output.of(isRestoring));
        }

        /**
         * @param kerberosEnabled Describe if a volume is KerberosEnabled. To be use with swagger version 2020-05-01 or later
         * 
         * @return builder
         * 
         */
        public Builder kerberosEnabled(@Nullable Output<Boolean> kerberosEnabled) {
            $.kerberosEnabled = kerberosEnabled;
            return this;
        }

        /**
         * @param kerberosEnabled Describe if a volume is KerberosEnabled. To be use with swagger version 2020-05-01 or later
         * 
         * @return builder
         * 
         */
        public Builder kerberosEnabled(Boolean kerberosEnabled) {
            return kerberosEnabled(Output.of(kerberosEnabled));
        }

        /**
         * @param ldapEnabled Specifies whether LDAP is enabled or not for a given NFS volume.
         * 
         * @return builder
         * 
         */
        public Builder ldapEnabled(@Nullable Output<Boolean> ldapEnabled) {
            $.ldapEnabled = ldapEnabled;
            return this;
        }

        /**
         * @param ldapEnabled Specifies whether LDAP is enabled or not for a given NFS volume.
         * 
         * @return builder
         * 
         */
        public Builder ldapEnabled(Boolean ldapEnabled) {
            return ldapEnabled(Output.of(ldapEnabled));
        }

        /**
         * @param location Resource location
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Resource location
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param poolName The name of the capacity pool
         * 
         * @return builder
         * 
         */
        public Builder poolName(Output<String> poolName) {
            $.poolName = poolName;
            return this;
        }

        /**
         * @param poolName The name of the capacity pool
         * 
         * @return builder
         * 
         */
        public Builder poolName(String poolName) {
            return poolName(Output.of(poolName));
        }

        /**
         * @param protocolTypes Set of protocol types, default NFSv3, CIFS for SMB protocol
         * 
         * @return builder
         * 
         */
        public Builder protocolTypes(@Nullable Output<List<String>> protocolTypes) {
            $.protocolTypes = protocolTypes;
            return this;
        }

        /**
         * @param protocolTypes Set of protocol types, default NFSv3, CIFS for SMB protocol
         * 
         * @return builder
         * 
         */
        public Builder protocolTypes(List<String> protocolTypes) {
            return protocolTypes(Output.of(protocolTypes));
        }

        /**
         * @param protocolTypes Set of protocol types, default NFSv3, CIFS for SMB protocol
         * 
         * @return builder
         * 
         */
        public Builder protocolTypes(String... protocolTypes) {
            return protocolTypes(List.of(protocolTypes));
        }

        /**
         * @param resourceGroupName The name of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param securityStyle The security style of volume, default unix, defaults to ntfs for dual protocol or CIFS protocol
         * 
         * @return builder
         * 
         */
        public Builder securityStyle(@Nullable Output<Either<String,SecurityStyle>> securityStyle) {
            $.securityStyle = securityStyle;
            return this;
        }

        /**
         * @param securityStyle The security style of volume, default unix, defaults to ntfs for dual protocol or CIFS protocol
         * 
         * @return builder
         * 
         */
        public Builder securityStyle(Either<String,SecurityStyle> securityStyle) {
            return securityStyle(Output.of(securityStyle));
        }

        /**
         * @param securityStyle The security style of volume, default unix, defaults to ntfs for dual protocol or CIFS protocol
         * 
         * @return builder
         * 
         */
        public Builder securityStyle(String securityStyle) {
            return securityStyle(Either.ofLeft(securityStyle));
        }

        /**
         * @param securityStyle The security style of volume, default unix, defaults to ntfs for dual protocol or CIFS protocol
         * 
         * @return builder
         * 
         */
        public Builder securityStyle(SecurityStyle securityStyle) {
            return securityStyle(Either.ofRight(securityStyle));
        }

        /**
         * @param serviceLevel The service level of the file system
         * 
         * @return builder
         * 
         */
        public Builder serviceLevel(@Nullable Output<Either<String,ServiceLevel>> serviceLevel) {
            $.serviceLevel = serviceLevel;
            return this;
        }

        /**
         * @param serviceLevel The service level of the file system
         * 
         * @return builder
         * 
         */
        public Builder serviceLevel(Either<String,ServiceLevel> serviceLevel) {
            return serviceLevel(Output.of(serviceLevel));
        }

        /**
         * @param serviceLevel The service level of the file system
         * 
         * @return builder
         * 
         */
        public Builder serviceLevel(String serviceLevel) {
            return serviceLevel(Either.ofLeft(serviceLevel));
        }

        /**
         * @param serviceLevel The service level of the file system
         * 
         * @return builder
         * 
         */
        public Builder serviceLevel(ServiceLevel serviceLevel) {
            return serviceLevel(Either.ofRight(serviceLevel));
        }

        /**
         * @param smbContinuouslyAvailable Enables continuously available share property for smb volume. Only applicable for SMB volume
         * 
         * @return builder
         * 
         */
        public Builder smbContinuouslyAvailable(@Nullable Output<Boolean> smbContinuouslyAvailable) {
            $.smbContinuouslyAvailable = smbContinuouslyAvailable;
            return this;
        }

        /**
         * @param smbContinuouslyAvailable Enables continuously available share property for smb volume. Only applicable for SMB volume
         * 
         * @return builder
         * 
         */
        public Builder smbContinuouslyAvailable(Boolean smbContinuouslyAvailable) {
            return smbContinuouslyAvailable(Output.of(smbContinuouslyAvailable));
        }

        /**
         * @param smbEncryption Enables encryption for in-flight smb3 data. Only applicable for SMB/DualProtocol volume. To be used with swagger version 2020-08-01 or later
         * 
         * @return builder
         * 
         */
        public Builder smbEncryption(@Nullable Output<Boolean> smbEncryption) {
            $.smbEncryption = smbEncryption;
            return this;
        }

        /**
         * @param smbEncryption Enables encryption for in-flight smb3 data. Only applicable for SMB/DualProtocol volume. To be used with swagger version 2020-08-01 or later
         * 
         * @return builder
         * 
         */
        public Builder smbEncryption(Boolean smbEncryption) {
            return smbEncryption(Output.of(smbEncryption));
        }

        /**
         * @param snapshotDirectoryVisible If enabled (true) the volume will contain a read-only snapshot directory which provides access to each of the volume&#39;s snapshots (default to true).
         * 
         * @return builder
         * 
         */
        public Builder snapshotDirectoryVisible(@Nullable Output<Boolean> snapshotDirectoryVisible) {
            $.snapshotDirectoryVisible = snapshotDirectoryVisible;
            return this;
        }

        /**
         * @param snapshotDirectoryVisible If enabled (true) the volume will contain a read-only snapshot directory which provides access to each of the volume&#39;s snapshots (default to true).
         * 
         * @return builder
         * 
         */
        public Builder snapshotDirectoryVisible(Boolean snapshotDirectoryVisible) {
            return snapshotDirectoryVisible(Output.of(snapshotDirectoryVisible));
        }

        /**
         * @param snapshotId UUID v4 or resource identifier used to identify the Snapshot.
         * 
         * @return builder
         * 
         */
        public Builder snapshotId(@Nullable Output<String> snapshotId) {
            $.snapshotId = snapshotId;
            return this;
        }

        /**
         * @param snapshotId UUID v4 or resource identifier used to identify the Snapshot.
         * 
         * @return builder
         * 
         */
        public Builder snapshotId(String snapshotId) {
            return snapshotId(Output.of(snapshotId));
        }

        /**
         * @param subnetId The Azure Resource URI for a delegated subnet. Must have the delegation Microsoft.NetApp/volumes
         * 
         * @return builder
         * 
         */
        public Builder subnetId(Output<String> subnetId) {
            $.subnetId = subnetId;
            return this;
        }

        /**
         * @param subnetId The Azure Resource URI for a delegated subnet. Must have the delegation Microsoft.NetApp/volumes
         * 
         * @return builder
         * 
         */
        public Builder subnetId(String subnetId) {
            return subnetId(Output.of(subnetId));
        }

        /**
         * @param tags Resource tags
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Resource tags
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder throughputMibps(@Nullable Output<Double> throughputMibps) {
            $.throughputMibps = throughputMibps;
            return this;
        }

        public Builder throughputMibps(Double throughputMibps) {
            return throughputMibps(Output.of(throughputMibps));
        }

        /**
         * @param usageThreshold Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB. Specified in bytes.
         * 
         * @return builder
         * 
         */
        public Builder usageThreshold(Output<Double> usageThreshold) {
            $.usageThreshold = usageThreshold;
            return this;
        }

        /**
         * @param usageThreshold Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB. Specified in bytes.
         * 
         * @return builder
         * 
         */
        public Builder usageThreshold(Double usageThreshold) {
            return usageThreshold(Output.of(usageThreshold));
        }

        /**
         * @param volumeName The name of the volume
         * 
         * @return builder
         * 
         */
        public Builder volumeName(@Nullable Output<String> volumeName) {
            $.volumeName = volumeName;
            return this;
        }

        /**
         * @param volumeName The name of the volume
         * 
         * @return builder
         * 
         */
        public Builder volumeName(String volumeName) {
            return volumeName(Output.of(volumeName));
        }

        /**
         * @param volumeType What type of volume is this
         * 
         * @return builder
         * 
         */
        public Builder volumeType(@Nullable Output<String> volumeType) {
            $.volumeType = volumeType;
            return this;
        }

        /**
         * @param volumeType What type of volume is this
         * 
         * @return builder
         * 
         */
        public Builder volumeType(String volumeType) {
            return volumeType(Output.of(volumeType));
        }

        public VolumeArgs build() {
            $.accountName = Objects.requireNonNull($.accountName, "expected parameter 'accountName' to be non-null");
            $.creationToken = Objects.requireNonNull($.creationToken, "expected parameter 'creationToken' to be non-null");
            $.kerberosEnabled = Codegen.booleanProp("kerberosEnabled").output().arg($.kerberosEnabled).def(false).getNullable();
            $.ldapEnabled = Codegen.booleanProp("ldapEnabled").output().arg($.ldapEnabled).def(false).getNullable();
            $.poolName = Objects.requireNonNull($.poolName, "expected parameter 'poolName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.securityStyle = Codegen.stringProp("securityStyle").left(SecurityStyle.class).output().arg($.securityStyle).def("unix").getNullable();
            $.serviceLevel = Codegen.stringProp("serviceLevel").left(ServiceLevel.class).output().arg($.serviceLevel).def("Premium").getNullable();
            $.smbContinuouslyAvailable = Codegen.booleanProp("smbContinuouslyAvailable").output().arg($.smbContinuouslyAvailable).def(false).getNullable();
            $.smbEncryption = Codegen.booleanProp("smbEncryption").output().arg($.smbEncryption).def(false).getNullable();
            $.snapshotDirectoryVisible = Codegen.booleanProp("snapshotDirectoryVisible").output().arg($.snapshotDirectoryVisible).def(true).getNullable();
            $.subnetId = Objects.requireNonNull($.subnetId, "expected parameter 'subnetId' to be non-null");
            $.throughputMibps = Codegen.doubleProp("throughputMibps").output().arg($.throughputMibps).def(0e+00).getNullable();
            $.usageThreshold = Codegen.doubleProp("usageThreshold").output().arg($.usageThreshold).def(1.073741824e+11).require();
            return $;
        }
    }

}
