// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.hybridnetwork.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The image reference properties.
 * 
 */
public final class ImageReferenceArgs extends com.pulumi.resources.ResourceArgs {

    public static final ImageReferenceArgs Empty = new ImageReferenceArgs();

    /**
     * Specifies in decimal numbers, the exact version of image used to create the virtual machine.
     * 
     */
    @Import(name="exactVersion")
    private @Nullable Output<String> exactVersion;

    public Optional<Output<String>> exactVersion() {
        return Optional.ofNullable(this.exactVersion);
    }

    /**
     * Specifies the offer of the image used to create the virtual machine.
     * 
     */
    @Import(name="offer")
    private @Nullable Output<String> offer;

    public Optional<Output<String>> offer() {
        return Optional.ofNullable(this.offer);
    }

    /**
     * The image publisher.
     * 
     */
    @Import(name="publisher")
    private @Nullable Output<String> publisher;

    public Optional<Output<String>> publisher() {
        return Optional.ofNullable(this.publisher);
    }

    /**
     * The image SKU.
     * 
     */
    @Import(name="sku")
    private @Nullable Output<String> sku;

    public Optional<Output<String>> sku() {
        return Optional.ofNullable(this.sku);
    }

    /**
     * Specifies the version of the image used to create the virtual machine. The allowed formats are Major.Minor.Build or &#39;latest&#39;. Major, Minor, and Build are decimal numbers. Specify &#39;latest&#39; to use the latest version of an image available at deploy time. Even if you use &#39;latest&#39;, the VM image will not automatically update after deploy time even if a new version becomes available.
     * 
     */
    @Import(name="version")
    private @Nullable Output<String> version;

    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    private ImageReferenceArgs() {}

    private ImageReferenceArgs(ImageReferenceArgs $) {
        this.exactVersion = $.exactVersion;
        this.offer = $.offer;
        this.publisher = $.publisher;
        this.sku = $.sku;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ImageReferenceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ImageReferenceArgs $;

        public Builder() {
            $ = new ImageReferenceArgs();
        }

        public Builder(ImageReferenceArgs defaults) {
            $ = new ImageReferenceArgs(Objects.requireNonNull(defaults));
        }

        public Builder exactVersion(@Nullable Output<String> exactVersion) {
            $.exactVersion = exactVersion;
            return this;
        }

        public Builder exactVersion(String exactVersion) {
            return exactVersion(Output.of(exactVersion));
        }

        public Builder offer(@Nullable Output<String> offer) {
            $.offer = offer;
            return this;
        }

        public Builder offer(String offer) {
            return offer(Output.of(offer));
        }

        public Builder publisher(@Nullable Output<String> publisher) {
            $.publisher = publisher;
            return this;
        }

        public Builder publisher(String publisher) {
            return publisher(Output.of(publisher));
        }

        public Builder sku(@Nullable Output<String> sku) {
            $.sku = sku;
            return this;
        }

        public Builder sku(String sku) {
            return sku(Output.of(sku));
        }

        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        public Builder version(String version) {
            return version(Output.of(version));
        }

        public ImageReferenceArgs build() {
            return $;
        }
    }

}
