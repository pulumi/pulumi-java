// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.media.inputs;

import com.pulumi.azurenative.media.inputs.MediaGraphPemCertificateListArgs;
import com.pulumi.azurenative.media.inputs.MediaGraphTlsValidationOptionsArgs;
import com.pulumi.azurenative.media.inputs.MediaGraphUsernamePasswordCredentialsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * An endpoint which must be connected over TLS/SSL.
 * 
 */
public final class MediaGraphTlsEndpointArgs extends com.pulumi.resources.ResourceArgs {

    public static final MediaGraphTlsEndpointArgs Empty = new MediaGraphTlsEndpointArgs();

    /**
     * Polymorphic credentials to present to the endpoint.
     * 
     */
    @Import(name="credentials")
    private @Nullable Output<MediaGraphUsernamePasswordCredentialsArgs> credentials;

    public Optional<Output<MediaGraphUsernamePasswordCredentialsArgs>> credentials() {
        return Optional.ofNullable(this.credentials);
    }

    /**
     * The discriminator for derived types.
     * Expected value is &#39;#Microsoft.Media.MediaGraphTlsEndpoint&#39;.
     * 
     */
    @Import(name="odataType", required=true)
    private Output<String> odataType;

    public Output<String> odataType() {
        return this.odataType;
    }

    /**
     * What certificates should be trusted when authenticating a TLS connection. Null designates that Azure Media&#39;s source of trust should be used.
     * 
     */
    @Import(name="trustedCertificates")
    private @Nullable Output<MediaGraphPemCertificateListArgs> trustedCertificates;

    public Optional<Output<MediaGraphPemCertificateListArgs>> trustedCertificates() {
        return Optional.ofNullable(this.trustedCertificates);
    }

    /**
     * Url for the endpoint.
     * 
     */
    @Import(name="url", required=true)
    private Output<String> url;

    public Output<String> url() {
        return this.url;
    }

    /**
     * Validation options to use when authenticating a TLS connection. By default, strict validation is used.
     * 
     */
    @Import(name="validationOptions")
    private @Nullable Output<MediaGraphTlsValidationOptionsArgs> validationOptions;

    public Optional<Output<MediaGraphTlsValidationOptionsArgs>> validationOptions() {
        return Optional.ofNullable(this.validationOptions);
    }

    private MediaGraphTlsEndpointArgs() {}

    private MediaGraphTlsEndpointArgs(MediaGraphTlsEndpointArgs $) {
        this.credentials = $.credentials;
        this.odataType = $.odataType;
        this.trustedCertificates = $.trustedCertificates;
        this.url = $.url;
        this.validationOptions = $.validationOptions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MediaGraphTlsEndpointArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MediaGraphTlsEndpointArgs $;

        public Builder() {
            $ = new MediaGraphTlsEndpointArgs();
        }

        public Builder(MediaGraphTlsEndpointArgs defaults) {
            $ = new MediaGraphTlsEndpointArgs(Objects.requireNonNull(defaults));
        }

        public Builder credentials(@Nullable Output<MediaGraphUsernamePasswordCredentialsArgs> credentials) {
            $.credentials = credentials;
            return this;
        }

        public Builder credentials(MediaGraphUsernamePasswordCredentialsArgs credentials) {
            return credentials(Output.of(credentials));
        }

        public Builder odataType(Output<String> odataType) {
            $.odataType = odataType;
            return this;
        }

        public Builder odataType(String odataType) {
            return odataType(Output.of(odataType));
        }

        public Builder trustedCertificates(@Nullable Output<MediaGraphPemCertificateListArgs> trustedCertificates) {
            $.trustedCertificates = trustedCertificates;
            return this;
        }

        public Builder trustedCertificates(MediaGraphPemCertificateListArgs trustedCertificates) {
            return trustedCertificates(Output.of(trustedCertificates));
        }

        public Builder url(Output<String> url) {
            $.url = url;
            return this;
        }

        public Builder url(String url) {
            return url(Output.of(url));
        }

        public Builder validationOptions(@Nullable Output<MediaGraphTlsValidationOptionsArgs> validationOptions) {
            $.validationOptions = validationOptions;
            return this;
        }

        public Builder validationOptions(MediaGraphTlsValidationOptionsArgs validationOptions) {
            return validationOptions(Output.of(validationOptions));
        }

        public MediaGraphTlsEndpointArgs build() {
            $.odataType = Codegen.stringProp("odataType").output().arg($.odataType).require();
            $.url = Objects.requireNonNull($.url, "expected parameter 'url' to be non-null");
            return $;
        }
    }

}
