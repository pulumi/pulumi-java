// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.containerregistry.inputs;

import com.pulumi.azurenative.containerregistry.inputs.AgentPropertiesResponse;
import com.pulumi.azurenative.containerregistry.inputs.CredentialsResponse;
import com.pulumi.azurenative.containerregistry.inputs.PlatformPropertiesResponse;
import com.pulumi.azurenative.containerregistry.inputs.SetValueResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The parameters for a quick task run request.
 * 
 */
public final class EncodedTaskRunRequestResponse extends com.pulumi.resources.InvokeArgs {

    public static final EncodedTaskRunRequestResponse Empty = new EncodedTaskRunRequestResponse();

    /**
     * The machine configuration of the run agent.
     * 
     */
    @Import(name="agentConfiguration")
    private @Nullable AgentPropertiesResponse agentConfiguration;

    public Optional<AgentPropertiesResponse> agentConfiguration() {
        return Optional.ofNullable(this.agentConfiguration);
    }

    /**
     * The dedicated agent pool for the run.
     * 
     */
    @Import(name="agentPoolName")
    private @Nullable String agentPoolName;

    public Optional<String> agentPoolName() {
        return Optional.ofNullable(this.agentPoolName);
    }

    /**
     * The properties that describes a set of credentials that will be used when this run is invoked.
     * 
     */
    @Import(name="credentials")
    private @Nullable CredentialsResponse credentials;

    public Optional<CredentialsResponse> credentials() {
        return Optional.ofNullable(this.credentials);
    }

    /**
     * Base64 encoded value of the template/definition file content.
     * 
     */
    @Import(name="encodedTaskContent", required=true)
    private String encodedTaskContent;

    public String encodedTaskContent() {
        return this.encodedTaskContent;
    }

    /**
     * Base64 encoded value of the parameters/values file content.
     * 
     */
    @Import(name="encodedValuesContent")
    private @Nullable String encodedValuesContent;

    public Optional<String> encodedValuesContent() {
        return Optional.ofNullable(this.encodedValuesContent);
    }

    /**
     * The value that indicates whether archiving is enabled for the run or not.
     * 
     */
    @Import(name="isArchiveEnabled")
    private @Nullable Boolean isArchiveEnabled;

    public Optional<Boolean> isArchiveEnabled() {
        return Optional.ofNullable(this.isArchiveEnabled);
    }

    /**
     * The template that describes the repository and tag information for run log artifact.
     * 
     */
    @Import(name="logTemplate")
    private @Nullable String logTemplate;

    public Optional<String> logTemplate() {
        return Optional.ofNullable(this.logTemplate);
    }

    /**
     * The platform properties against which the run has to happen.
     * 
     */
    @Import(name="platform", required=true)
    private PlatformPropertiesResponse platform;

    public PlatformPropertiesResponse platform() {
        return this.platform;
    }

    /**
     * The URL(absolute or relative) of the source context. It can be an URL to a tar or git repository.
     * If it is relative URL, the relative path should be obtained from calling listBuildSourceUploadUrl API.
     * 
     */
    @Import(name="sourceLocation")
    private @Nullable String sourceLocation;

    public Optional<String> sourceLocation() {
        return Optional.ofNullable(this.sourceLocation);
    }

    /**
     * Run timeout in seconds.
     * 
     */
    @Import(name="timeout")
    private @Nullable Integer timeout;

    public Optional<Integer> timeout() {
        return Optional.ofNullable(this.timeout);
    }

    /**
     * The type of the run request.
     * Expected value is &#39;EncodedTaskRunRequest&#39;.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    public String type() {
        return this.type;
    }

    /**
     * The collection of overridable values that can be passed when running a task.
     * 
     */
    @Import(name="values")
    private @Nullable List<SetValueResponse> values;

    public Optional<List<SetValueResponse>> values() {
        return Optional.ofNullable(this.values);
    }

    private EncodedTaskRunRequestResponse() {}

    private EncodedTaskRunRequestResponse(EncodedTaskRunRequestResponse $) {
        this.agentConfiguration = $.agentConfiguration;
        this.agentPoolName = $.agentPoolName;
        this.credentials = $.credentials;
        this.encodedTaskContent = $.encodedTaskContent;
        this.encodedValuesContent = $.encodedValuesContent;
        this.isArchiveEnabled = $.isArchiveEnabled;
        this.logTemplate = $.logTemplate;
        this.platform = $.platform;
        this.sourceLocation = $.sourceLocation;
        this.timeout = $.timeout;
        this.type = $.type;
        this.values = $.values;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EncodedTaskRunRequestResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EncodedTaskRunRequestResponse $;

        public Builder() {
            $ = new EncodedTaskRunRequestResponse();
        }

        public Builder(EncodedTaskRunRequestResponse defaults) {
            $ = new EncodedTaskRunRequestResponse(Objects.requireNonNull(defaults));
        }

        public Builder agentConfiguration(@Nullable AgentPropertiesResponse agentConfiguration) {
            $.agentConfiguration = agentConfiguration;
            return this;
        }

        public Builder agentPoolName(@Nullable String agentPoolName) {
            $.agentPoolName = agentPoolName;
            return this;
        }

        public Builder credentials(@Nullable CredentialsResponse credentials) {
            $.credentials = credentials;
            return this;
        }

        public Builder encodedTaskContent(String encodedTaskContent) {
            $.encodedTaskContent = encodedTaskContent;
            return this;
        }

        public Builder encodedValuesContent(@Nullable String encodedValuesContent) {
            $.encodedValuesContent = encodedValuesContent;
            return this;
        }

        public Builder isArchiveEnabled(@Nullable Boolean isArchiveEnabled) {
            $.isArchiveEnabled = isArchiveEnabled;
            return this;
        }

        public Builder logTemplate(@Nullable String logTemplate) {
            $.logTemplate = logTemplate;
            return this;
        }

        public Builder platform(PlatformPropertiesResponse platform) {
            $.platform = platform;
            return this;
        }

        public Builder sourceLocation(@Nullable String sourceLocation) {
            $.sourceLocation = sourceLocation;
            return this;
        }

        public Builder timeout(@Nullable Integer timeout) {
            $.timeout = timeout;
            return this;
        }

        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public Builder values(@Nullable List<SetValueResponse> values) {
            $.values = values;
            return this;
        }

        public Builder values(SetValueResponse... values) {
            return values(List.of(values));
        }

        public EncodedTaskRunRequestResponse build() {
            $.encodedTaskContent = Objects.requireNonNull($.encodedTaskContent, "expected parameter 'encodedTaskContent' to be non-null");
            $.isArchiveEnabled = Codegen.booleanProp("isArchiveEnabled").arg($.isArchiveEnabled).def(false).getNullable();
            $.platform = Objects.requireNonNull($.platform, "expected parameter 'platform' to be non-null");
            $.timeout = Codegen.integerProp("timeout").arg($.timeout).def(3600).getNullable();
            $.type = Codegen.stringProp("type").arg($.type).require();
            return $;
        }
    }

}
