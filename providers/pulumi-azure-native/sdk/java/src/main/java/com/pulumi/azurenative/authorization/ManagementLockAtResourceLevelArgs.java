// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.authorization;

import com.pulumi.azurenative.authorization.enums.LockLevel;
import com.pulumi.azurenative.authorization.inputs.ManagementLockOwnerArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ManagementLockAtResourceLevelArgs extends com.pulumi.resources.ResourceArgs {

    public static final ManagementLockAtResourceLevelArgs Empty = new ManagementLockAtResourceLevelArgs();

    /**
     * The level of the lock. Possible values are: NotSpecified, CanNotDelete, ReadOnly. CanNotDelete means authorized users are able to read and modify the resources, but not delete. ReadOnly means authorized users can only read from a resource, but they can&#39;t modify or delete it.
     * 
     */
    @Import(name="level", required=true)
    private Output<Either<String,LockLevel>> level;

    /**
     * @return The level of the lock. Possible values are: NotSpecified, CanNotDelete, ReadOnly. CanNotDelete means authorized users are able to read and modify the resources, but not delete. ReadOnly means authorized users can only read from a resource, but they can&#39;t modify or delete it.
     * 
     */
    public Output<Either<String,LockLevel>> level() {
        return this.level;
    }

    /**
     * The name of lock. The lock name can be a maximum of 260 characters. It cannot contain &lt;, &gt; %, &amp;, :, \, ?, /, or any control characters.
     * 
     */
    @Import(name="lockName")
    private @Nullable Output<String> lockName;

    /**
     * @return The name of lock. The lock name can be a maximum of 260 characters. It cannot contain &lt;, &gt; %, &amp;, :, \, ?, /, or any control characters.
     * 
     */
    public Optional<Output<String>> lockName() {
        return Optional.ofNullable(this.lockName);
    }

    /**
     * Notes about the lock. Maximum of 512 characters.
     * 
     */
    @Import(name="notes")
    private @Nullable Output<String> notes;

    /**
     * @return Notes about the lock. Maximum of 512 characters.
     * 
     */
    public Optional<Output<String>> notes() {
        return Optional.ofNullable(this.notes);
    }

    /**
     * The owners of the lock.
     * 
     */
    @Import(name="owners")
    private @Nullable Output<List<ManagementLockOwnerArgs>> owners;

    /**
     * @return The owners of the lock.
     * 
     */
    public Optional<Output<List<ManagementLockOwnerArgs>>> owners() {
        return Optional.ofNullable(this.owners);
    }

    /**
     * The parent resource identity.
     * 
     */
    @Import(name="parentResourcePath", required=true)
    private Output<String> parentResourcePath;

    /**
     * @return The parent resource identity.
     * 
     */
    public Output<String> parentResourcePath() {
        return this.parentResourcePath;
    }

    /**
     * The name of the resource group containing the resource to lock.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group containing the resource to lock.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The name of the resource to lock.
     * 
     */
    @Import(name="resourceName", required=true)
    private Output<String> resourceName;

    /**
     * @return The name of the resource to lock.
     * 
     */
    public Output<String> resourceName() {
        return this.resourceName;
    }

    /**
     * The resource provider namespace of the resource to lock.
     * 
     */
    @Import(name="resourceProviderNamespace", required=true)
    private Output<String> resourceProviderNamespace;

    /**
     * @return The resource provider namespace of the resource to lock.
     * 
     */
    public Output<String> resourceProviderNamespace() {
        return this.resourceProviderNamespace;
    }

    /**
     * The resource type of the resource to lock.
     * 
     */
    @Import(name="resourceType", required=true)
    private Output<String> resourceType;

    /**
     * @return The resource type of the resource to lock.
     * 
     */
    public Output<String> resourceType() {
        return this.resourceType;
    }

    private ManagementLockAtResourceLevelArgs() {}

    private ManagementLockAtResourceLevelArgs(ManagementLockAtResourceLevelArgs $) {
        this.level = $.level;
        this.lockName = $.lockName;
        this.notes = $.notes;
        this.owners = $.owners;
        this.parentResourcePath = $.parentResourcePath;
        this.resourceGroupName = $.resourceGroupName;
        this.resourceName = $.resourceName;
        this.resourceProviderNamespace = $.resourceProviderNamespace;
        this.resourceType = $.resourceType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagementLockAtResourceLevelArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagementLockAtResourceLevelArgs $;

        public Builder() {
            $ = new ManagementLockAtResourceLevelArgs();
        }

        public Builder(ManagementLockAtResourceLevelArgs defaults) {
            $ = new ManagementLockAtResourceLevelArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param level The level of the lock. Possible values are: NotSpecified, CanNotDelete, ReadOnly. CanNotDelete means authorized users are able to read and modify the resources, but not delete. ReadOnly means authorized users can only read from a resource, but they can&#39;t modify or delete it.
         * 
         * @return builder
         * 
         */
        public Builder level(Output<Either<String,LockLevel>> level) {
            $.level = level;
            return this;
        }

        /**
         * @param level The level of the lock. Possible values are: NotSpecified, CanNotDelete, ReadOnly. CanNotDelete means authorized users are able to read and modify the resources, but not delete. ReadOnly means authorized users can only read from a resource, but they can&#39;t modify or delete it.
         * 
         * @return builder
         * 
         */
        public Builder level(Either<String,LockLevel> level) {
            return level(Output.of(level));
        }

        /**
         * @param level The level of the lock. Possible values are: NotSpecified, CanNotDelete, ReadOnly. CanNotDelete means authorized users are able to read and modify the resources, but not delete. ReadOnly means authorized users can only read from a resource, but they can&#39;t modify or delete it.
         * 
         * @return builder
         * 
         */
        public Builder level(String level) {
            return level(Either.ofLeft(level));
        }

        /**
         * @param level The level of the lock. Possible values are: NotSpecified, CanNotDelete, ReadOnly. CanNotDelete means authorized users are able to read and modify the resources, but not delete. ReadOnly means authorized users can only read from a resource, but they can&#39;t modify or delete it.
         * 
         * @return builder
         * 
         */
        public Builder level(LockLevel level) {
            return level(Either.ofRight(level));
        }

        /**
         * @param lockName The name of lock. The lock name can be a maximum of 260 characters. It cannot contain &lt;, &gt; %, &amp;, :, \, ?, /, or any control characters.
         * 
         * @return builder
         * 
         */
        public Builder lockName(@Nullable Output<String> lockName) {
            $.lockName = lockName;
            return this;
        }

        /**
         * @param lockName The name of lock. The lock name can be a maximum of 260 characters. It cannot contain &lt;, &gt; %, &amp;, :, \, ?, /, or any control characters.
         * 
         * @return builder
         * 
         */
        public Builder lockName(String lockName) {
            return lockName(Output.of(lockName));
        }

        /**
         * @param notes Notes about the lock. Maximum of 512 characters.
         * 
         * @return builder
         * 
         */
        public Builder notes(@Nullable Output<String> notes) {
            $.notes = notes;
            return this;
        }

        /**
         * @param notes Notes about the lock. Maximum of 512 characters.
         * 
         * @return builder
         * 
         */
        public Builder notes(String notes) {
            return notes(Output.of(notes));
        }

        /**
         * @param owners The owners of the lock.
         * 
         * @return builder
         * 
         */
        public Builder owners(@Nullable Output<List<ManagementLockOwnerArgs>> owners) {
            $.owners = owners;
            return this;
        }

        /**
         * @param owners The owners of the lock.
         * 
         * @return builder
         * 
         */
        public Builder owners(List<ManagementLockOwnerArgs> owners) {
            return owners(Output.of(owners));
        }

        /**
         * @param owners The owners of the lock.
         * 
         * @return builder
         * 
         */
        public Builder owners(ManagementLockOwnerArgs... owners) {
            return owners(List.of(owners));
        }

        /**
         * @param parentResourcePath The parent resource identity.
         * 
         * @return builder
         * 
         */
        public Builder parentResourcePath(Output<String> parentResourcePath) {
            $.parentResourcePath = parentResourcePath;
            return this;
        }

        /**
         * @param parentResourcePath The parent resource identity.
         * 
         * @return builder
         * 
         */
        public Builder parentResourcePath(String parentResourcePath) {
            return parentResourcePath(Output.of(parentResourcePath));
        }

        /**
         * @param resourceGroupName The name of the resource group containing the resource to lock.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group containing the resource to lock.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param resourceName The name of the resource to lock.
         * 
         * @return builder
         * 
         */
        public Builder resourceName(Output<String> resourceName) {
            $.resourceName = resourceName;
            return this;
        }

        /**
         * @param resourceName The name of the resource to lock.
         * 
         * @return builder
         * 
         */
        public Builder resourceName(String resourceName) {
            return resourceName(Output.of(resourceName));
        }

        /**
         * @param resourceProviderNamespace The resource provider namespace of the resource to lock.
         * 
         * @return builder
         * 
         */
        public Builder resourceProviderNamespace(Output<String> resourceProviderNamespace) {
            $.resourceProviderNamespace = resourceProviderNamespace;
            return this;
        }

        /**
         * @param resourceProviderNamespace The resource provider namespace of the resource to lock.
         * 
         * @return builder
         * 
         */
        public Builder resourceProviderNamespace(String resourceProviderNamespace) {
            return resourceProviderNamespace(Output.of(resourceProviderNamespace));
        }

        /**
         * @param resourceType The resource type of the resource to lock.
         * 
         * @return builder
         * 
         */
        public Builder resourceType(Output<String> resourceType) {
            $.resourceType = resourceType;
            return this;
        }

        /**
         * @param resourceType The resource type of the resource to lock.
         * 
         * @return builder
         * 
         */
        public Builder resourceType(String resourceType) {
            return resourceType(Output.of(resourceType));
        }

        public ManagementLockAtResourceLevelArgs build() {
            $.level = Objects.requireNonNull($.level, "expected parameter 'level' to be non-null");
            $.parentResourcePath = Objects.requireNonNull($.parentResourcePath, "expected parameter 'parentResourcePath' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.resourceName = Objects.requireNonNull($.resourceName, "expected parameter 'resourceName' to be non-null");
            $.resourceProviderNamespace = Objects.requireNonNull($.resourceProviderNamespace, "expected parameter 'resourceProviderNamespace' to be non-null");
            $.resourceType = Objects.requireNonNull($.resourceType, "expected parameter 'resourceType' to be non-null");
            return $;
        }
    }

}
