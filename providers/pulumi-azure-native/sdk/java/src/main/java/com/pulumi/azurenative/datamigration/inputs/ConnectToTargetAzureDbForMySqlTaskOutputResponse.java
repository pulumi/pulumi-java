// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datamigration.inputs;

import com.pulumi.azurenative.datamigration.inputs.ReportableExceptionResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Output for the task that validates connection to Azure Database for MySQL and target server requirements
 * 
 */
public final class ConnectToTargetAzureDbForMySqlTaskOutputResponse extends com.pulumi.resources.InvokeArgs {

    public static final ConnectToTargetAzureDbForMySqlTaskOutputResponse Empty = new ConnectToTargetAzureDbForMySqlTaskOutputResponse();

    /**
     * List of databases on target server
     * 
     */
    @Import(name="databases", required=true)
    private List<String> databases;

    public List<String> databases() {
        return this.databases;
    }

    /**
     * Result identifier
     * 
     */
    @Import(name="id", required=true)
    private String id;

    public String id() {
        return this.id;
    }

    /**
     * Version of the target server
     * 
     */
    @Import(name="serverVersion", required=true)
    private String serverVersion;

    public String serverVersion() {
        return this.serverVersion;
    }

    /**
     * Target server brand version
     * 
     */
    @Import(name="targetServerBrandVersion", required=true)
    private String targetServerBrandVersion;

    public String targetServerBrandVersion() {
        return this.targetServerBrandVersion;
    }

    /**
     * Validation errors associated with the task
     * 
     */
    @Import(name="validationErrors", required=true)
    private List<ReportableExceptionResponse> validationErrors;

    public List<ReportableExceptionResponse> validationErrors() {
        return this.validationErrors;
    }

    private ConnectToTargetAzureDbForMySqlTaskOutputResponse() {}

    private ConnectToTargetAzureDbForMySqlTaskOutputResponse(ConnectToTargetAzureDbForMySqlTaskOutputResponse $) {
        this.databases = $.databases;
        this.id = $.id;
        this.serverVersion = $.serverVersion;
        this.targetServerBrandVersion = $.targetServerBrandVersion;
        this.validationErrors = $.validationErrors;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectToTargetAzureDbForMySqlTaskOutputResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectToTargetAzureDbForMySqlTaskOutputResponse $;

        public Builder() {
            $ = new ConnectToTargetAzureDbForMySqlTaskOutputResponse();
        }

        public Builder(ConnectToTargetAzureDbForMySqlTaskOutputResponse defaults) {
            $ = new ConnectToTargetAzureDbForMySqlTaskOutputResponse(Objects.requireNonNull(defaults));
        }

        public Builder databases(List<String> databases) {
            $.databases = databases;
            return this;
        }

        public Builder databases(String... databases) {
            return databases(List.of(databases));
        }

        public Builder id(String id) {
            $.id = id;
            return this;
        }

        public Builder serverVersion(String serverVersion) {
            $.serverVersion = serverVersion;
            return this;
        }

        public Builder targetServerBrandVersion(String targetServerBrandVersion) {
            $.targetServerBrandVersion = targetServerBrandVersion;
            return this;
        }

        public Builder validationErrors(List<ReportableExceptionResponse> validationErrors) {
            $.validationErrors = validationErrors;
            return this;
        }

        public Builder validationErrors(ReportableExceptionResponse... validationErrors) {
            return validationErrors(List.of(validationErrors));
        }

        public ConnectToTargetAzureDbForMySqlTaskOutputResponse build() {
            $.databases = Objects.requireNonNull($.databases, "expected parameter 'databases' to be non-null");
            $.id = Objects.requireNonNull($.id, "expected parameter 'id' to be non-null");
            $.serverVersion = Objects.requireNonNull($.serverVersion, "expected parameter 'serverVersion' to be non-null");
            $.targetServerBrandVersion = Objects.requireNonNull($.targetServerBrandVersion, "expected parameter 'targetServerBrandVersion' to be non-null");
            $.validationErrors = Objects.requireNonNull($.validationErrors, "expected parameter 'validationErrors' to be non-null");
            return $;
        }
    }

}
