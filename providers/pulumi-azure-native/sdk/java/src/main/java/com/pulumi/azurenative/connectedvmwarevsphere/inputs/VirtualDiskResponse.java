// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.connectedvmwarevsphere.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Virtual disk model
 * 
 */
public final class VirtualDiskResponse extends com.pulumi.resources.InvokeArgs {

    public static final VirtualDiskResponse Empty = new VirtualDiskResponse();

    /**
     * Gets or sets the controller id.
     * 
     */
    @Import(name="controllerKey")
      private final @Nullable Integer controllerKey;

    public Optional<Integer> controllerKey() {
        return this.controllerKey == null ? Optional.empty() : Optional.ofNullable(this.controllerKey);
    }

    /**
     * Gets or sets the device key value.
     * 
     */
    @Import(name="deviceKey")
      private final @Nullable Integer deviceKey;

    public Optional<Integer> deviceKey() {
        return this.deviceKey == null ? Optional.empty() : Optional.ofNullable(this.deviceKey);
    }

    /**
     * Gets or sets the device name.
     * 
     */
    @Import(name="deviceName")
      private final @Nullable String deviceName;

    public Optional<String> deviceName() {
        return this.deviceName == null ? Optional.empty() : Optional.ofNullable(this.deviceName);
    }

    /**
     * Gets or sets the disk mode.
     * 
     */
    @Import(name="diskMode")
      private final @Nullable String diskMode;

    public Optional<String> diskMode() {
        return this.diskMode == null ? Optional.empty() : Optional.ofNullable(this.diskMode);
    }

    /**
     * Gets or sets the disk object id.
     * 
     */
    @Import(name="diskObjectId", required=true)
      private final String diskObjectId;

    public String diskObjectId() {
        return this.diskObjectId;
    }

    /**
     * Gets or sets the disk total size.
     * 
     */
    @Import(name="diskSizeGB")
      private final @Nullable Integer diskSizeGB;

    public Optional<Integer> diskSizeGB() {
        return this.diskSizeGB == null ? Optional.empty() : Optional.ofNullable(this.diskSizeGB);
    }

    /**
     * Gets or sets the disk backing type.
     * 
     */
    @Import(name="diskType")
      private final @Nullable String diskType;

    public Optional<String> diskType() {
        return this.diskType == null ? Optional.empty() : Optional.ofNullable(this.diskType);
    }

    /**
     * Gets or sets the label of the virtual disk in vCenter.
     * 
     */
    @Import(name="label", required=true)
      private final String label;

    public String label() {
        return this.label;
    }

    /**
     * Gets or sets the name of the virtual disk.
     * 
     */
    @Import(name="name")
      private final @Nullable String name;

    public Optional<String> name() {
        return this.name == null ? Optional.empty() : Optional.ofNullable(this.name);
    }

    /**
     * Gets or sets the unit number of the disk on the controller.
     * 
     */
    @Import(name="unitNumber")
      private final @Nullable Integer unitNumber;

    public Optional<Integer> unitNumber() {
        return this.unitNumber == null ? Optional.empty() : Optional.ofNullable(this.unitNumber);
    }

    public VirtualDiskResponse(
        @Nullable Integer controllerKey,
        @Nullable Integer deviceKey,
        @Nullable String deviceName,
        @Nullable String diskMode,
        String diskObjectId,
        @Nullable Integer diskSizeGB,
        @Nullable String diskType,
        String label,
        @Nullable String name,
        @Nullable Integer unitNumber) {
        this.controllerKey = controllerKey;
        this.deviceKey = deviceKey;
        this.deviceName = deviceName;
        this.diskMode = diskMode;
        this.diskObjectId = Objects.requireNonNull(diskObjectId, "expected parameter 'diskObjectId' to be non-null");
        this.diskSizeGB = diskSizeGB;
        this.diskType = diskType;
        this.label = Objects.requireNonNull(label, "expected parameter 'label' to be non-null");
        this.name = name;
        this.unitNumber = unitNumber;
    }

    private VirtualDiskResponse() {
        this.controllerKey = null;
        this.deviceKey = null;
        this.deviceName = null;
        this.diskMode = null;
        this.diskObjectId = null;
        this.diskSizeGB = null;
        this.diskType = null;
        this.label = null;
        this.name = null;
        this.unitNumber = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VirtualDiskResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Integer controllerKey;
        private @Nullable Integer deviceKey;
        private @Nullable String deviceName;
        private @Nullable String diskMode;
        private String diskObjectId;
        private @Nullable Integer diskSizeGB;
        private @Nullable String diskType;
        private String label;
        private @Nullable String name;
        private @Nullable Integer unitNumber;

        public Builder() {
    	      // Empty
        }

        public Builder(VirtualDiskResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.controllerKey = defaults.controllerKey;
    	      this.deviceKey = defaults.deviceKey;
    	      this.deviceName = defaults.deviceName;
    	      this.diskMode = defaults.diskMode;
    	      this.diskObjectId = defaults.diskObjectId;
    	      this.diskSizeGB = defaults.diskSizeGB;
    	      this.diskType = defaults.diskType;
    	      this.label = defaults.label;
    	      this.name = defaults.name;
    	      this.unitNumber = defaults.unitNumber;
        }

        public Builder controllerKey(@Nullable Integer controllerKey) {
            this.controllerKey = controllerKey;
            return this;
        }
        public Builder deviceKey(@Nullable Integer deviceKey) {
            this.deviceKey = deviceKey;
            return this;
        }
        public Builder deviceName(@Nullable String deviceName) {
            this.deviceName = deviceName;
            return this;
        }
        public Builder diskMode(@Nullable String diskMode) {
            this.diskMode = diskMode;
            return this;
        }
        public Builder diskObjectId(String diskObjectId) {
            this.diskObjectId = Objects.requireNonNull(diskObjectId);
            return this;
        }
        public Builder diskSizeGB(@Nullable Integer diskSizeGB) {
            this.diskSizeGB = diskSizeGB;
            return this;
        }
        public Builder diskType(@Nullable String diskType) {
            this.diskType = diskType;
            return this;
        }
        public Builder label(String label) {
            this.label = Objects.requireNonNull(label);
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        public Builder unitNumber(@Nullable Integer unitNumber) {
            this.unitNumber = unitNumber;
            return this;
        }        public VirtualDiskResponse build() {
            return new VirtualDiskResponse(controllerKey, deviceKey, deviceName, diskMode, diskObjectId, diskSizeGB, diskType, label, name, unitNumber);
        }
    }
}
