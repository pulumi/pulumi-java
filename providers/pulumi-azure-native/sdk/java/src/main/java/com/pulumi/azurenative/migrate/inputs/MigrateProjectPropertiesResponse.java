// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.migrate.inputs;

import com.pulumi.azurenative.migrate.inputs.DatabaseProjectSummaryResponse;
import com.pulumi.azurenative.migrate.inputs.ServersProjectSummaryResponse;
import com.pulumi.core.Either;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Class for migrate project properties.
 * 
 */
public final class MigrateProjectPropertiesResponse extends com.pulumi.resources.InvokeArgs {

    public static final MigrateProjectPropertiesResponse Empty = new MigrateProjectPropertiesResponse();

    /**
     * Gets the last time the project summary was refreshed.
     * 
     */
    @Import(name="lastSummaryRefreshedTime", required=true)
    private String lastSummaryRefreshedTime;

    /**
     * @return Gets the last time the project summary was refreshed.
     * 
     */
    public String lastSummaryRefreshedTime() {
        return this.lastSummaryRefreshedTime;
    }

    /**
     * Provisioning state of the migrate project.
     * 
     */
    @Import(name="provisioningState")
    private @Nullable String provisioningState;

    /**
     * @return Provisioning state of the migrate project.
     * 
     */
    public Optional<String> provisioningState() {
        return Optional.ofNullable(this.provisioningState);
    }

    /**
     * Gets the refresh summary state.
     * 
     */
    @Import(name="refreshSummaryState", required=true)
    private String refreshSummaryState;

    /**
     * @return Gets the refresh summary state.
     * 
     */
    public String refreshSummaryState() {
        return this.refreshSummaryState;
    }

    /**
     * Gets or sets the list of tools registered with the migrate project.
     * 
     */
    @Import(name="registeredTools")
    private @Nullable List<String> registeredTools;

    /**
     * @return Gets or sets the list of tools registered with the migrate project.
     * 
     */
    public Optional<List<String>> registeredTools() {
        return Optional.ofNullable(this.registeredTools);
    }

    /**
     * Gets the summary of the migrate project.
     * 
     */
    @Import(name="summary", required=true)
    private Map<String,Either<DatabaseProjectSummaryResponse,ServersProjectSummaryResponse>> summary;

    /**
     * @return Gets the summary of the migrate project.
     * 
     */
    public Map<String,Either<DatabaseProjectSummaryResponse,ServersProjectSummaryResponse>> summary() {
        return this.summary;
    }

    private MigrateProjectPropertiesResponse() {}

    private MigrateProjectPropertiesResponse(MigrateProjectPropertiesResponse $) {
        this.lastSummaryRefreshedTime = $.lastSummaryRefreshedTime;
        this.provisioningState = $.provisioningState;
        this.refreshSummaryState = $.refreshSummaryState;
        this.registeredTools = $.registeredTools;
        this.summary = $.summary;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MigrateProjectPropertiesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MigrateProjectPropertiesResponse $;

        public Builder() {
            $ = new MigrateProjectPropertiesResponse();
        }

        public Builder(MigrateProjectPropertiesResponse defaults) {
            $ = new MigrateProjectPropertiesResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param lastSummaryRefreshedTime Gets the last time the project summary was refreshed.
         * 
         * @return builder
         * 
         */
        public Builder lastSummaryRefreshedTime(String lastSummaryRefreshedTime) {
            $.lastSummaryRefreshedTime = lastSummaryRefreshedTime;
            return this;
        }

        /**
         * @param provisioningState Provisioning state of the migrate project.
         * 
         * @return builder
         * 
         */
        public Builder provisioningState(@Nullable String provisioningState) {
            $.provisioningState = provisioningState;
            return this;
        }

        /**
         * @param refreshSummaryState Gets the refresh summary state.
         * 
         * @return builder
         * 
         */
        public Builder refreshSummaryState(String refreshSummaryState) {
            $.refreshSummaryState = refreshSummaryState;
            return this;
        }

        /**
         * @param registeredTools Gets or sets the list of tools registered with the migrate project.
         * 
         * @return builder
         * 
         */
        public Builder registeredTools(@Nullable List<String> registeredTools) {
            $.registeredTools = registeredTools;
            return this;
        }

        /**
         * @param registeredTools Gets or sets the list of tools registered with the migrate project.
         * 
         * @return builder
         * 
         */
        public Builder registeredTools(String... registeredTools) {
            return registeredTools(List.of(registeredTools));
        }

        /**
         * @param summary Gets the summary of the migrate project.
         * 
         * @return builder
         * 
         */
        public Builder summary(Map<String,Either<DatabaseProjectSummaryResponse,ServersProjectSummaryResponse>> summary) {
            $.summary = summary;
            return this;
        }

        public MigrateProjectPropertiesResponse build() {
            $.lastSummaryRefreshedTime = Objects.requireNonNull($.lastSummaryRefreshedTime, "expected parameter 'lastSummaryRefreshedTime' to be non-null");
            $.refreshSummaryState = Objects.requireNonNull($.refreshSummaryState, "expected parameter 'refreshSummaryState' to be non-null");
            $.summary = Objects.requireNonNull($.summary, "expected parameter 'summary' to be non-null");
            return $;
        }
    }

}
