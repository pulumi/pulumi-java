// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.blueprint;

import com.pulumi.azurenative.blueprint.inputs.AssignmentLockSettingsArgs;
import com.pulumi.azurenative.blueprint.inputs.ManagedServiceIdentityArgs;
import com.pulumi.azurenative.blueprint.inputs.ParameterValueArgs;
import com.pulumi.azurenative.blueprint.inputs.ResourceGroupValueArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AssignmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final AssignmentArgs Empty = new AssignmentArgs();

    /**
     * Name of the blueprint assignment.
     * 
     */
    @Import(name="assignmentName")
    private @Nullable Output<String> assignmentName;

    /**
     * @return Name of the blueprint assignment.
     * 
     */
    public Optional<Output<String>> assignmentName() {
        return Optional.ofNullable(this.assignmentName);
    }

    /**
     * ID of the published version of a blueprint definition.
     * 
     */
    @Import(name="blueprintId")
    private @Nullable Output<String> blueprintId;

    /**
     * @return ID of the published version of a blueprint definition.
     * 
     */
    public Optional<Output<String>> blueprintId() {
        return Optional.ofNullable(this.blueprintId);
    }

    /**
     * Multi-line explain this resource.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Multi-line explain this resource.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * One-liner string explain this resource.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return One-liner string explain this resource.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Managed identity for this blueprint assignment.
     * 
     */
    @Import(name="identity", required=true)
    private Output<ManagedServiceIdentityArgs> identity;

    /**
     * @return Managed identity for this blueprint assignment.
     * 
     */
    public Output<ManagedServiceIdentityArgs> identity() {
        return this.identity;
    }

    /**
     * The location of this blueprint assignment.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The location of this blueprint assignment.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Defines how resources deployed by a blueprint assignment are locked.
     * 
     */
    @Import(name="locks")
    private @Nullable Output<AssignmentLockSettingsArgs> locks;

    /**
     * @return Defines how resources deployed by a blueprint assignment are locked.
     * 
     */
    public Optional<Output<AssignmentLockSettingsArgs>> locks() {
        return Optional.ofNullable(this.locks);
    }

    /**
     * Blueprint assignment parameter values.
     * 
     */
    @Import(name="parameters", required=true)
    private Output<Map<String,ParameterValueArgs>> parameters;

    /**
     * @return Blueprint assignment parameter values.
     * 
     */
    public Output<Map<String,ParameterValueArgs>> parameters() {
        return this.parameters;
    }

    /**
     * Names and locations of resource group placeholders.
     * 
     */
    @Import(name="resourceGroups", required=true)
    private Output<Map<String,ResourceGroupValueArgs>> resourceGroups;

    /**
     * @return Names and locations of resource group placeholders.
     * 
     */
    public Output<Map<String,ResourceGroupValueArgs>> resourceGroups() {
        return this.resourceGroups;
    }

    /**
     * The scope of the resource. Valid scopes are: management group (format: &#39;/providers/Microsoft.Management/managementGroups/{managementGroup}&#39;), subscription (format: &#39;/subscriptions/{subscriptionId}&#39;).
     * 
     */
    @Import(name="resourceScope", required=true)
    private Output<String> resourceScope;

    /**
     * @return The scope of the resource. Valid scopes are: management group (format: &#39;/providers/Microsoft.Management/managementGroups/{managementGroup}&#39;), subscription (format: &#39;/subscriptions/{subscriptionId}&#39;).
     * 
     */
    public Output<String> resourceScope() {
        return this.resourceScope;
    }

    /**
     * The target subscription scope of the blueprint assignment (format: &#39;/subscriptions/{subscriptionId}&#39;). For management group level assignments, the property is required.
     * 
     */
    @Import(name="scope")
    private @Nullable Output<String> scope;

    /**
     * @return The target subscription scope of the blueprint assignment (format: &#39;/subscriptions/{subscriptionId}&#39;). For management group level assignments, the property is required.
     * 
     */
    public Optional<Output<String>> scope() {
        return Optional.ofNullable(this.scope);
    }

    private AssignmentArgs() {}

    private AssignmentArgs(AssignmentArgs $) {
        this.assignmentName = $.assignmentName;
        this.blueprintId = $.blueprintId;
        this.description = $.description;
        this.displayName = $.displayName;
        this.identity = $.identity;
        this.location = $.location;
        this.locks = $.locks;
        this.parameters = $.parameters;
        this.resourceGroups = $.resourceGroups;
        this.resourceScope = $.resourceScope;
        this.scope = $.scope;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AssignmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AssignmentArgs $;

        public Builder() {
            $ = new AssignmentArgs();
        }

        public Builder(AssignmentArgs defaults) {
            $ = new AssignmentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param assignmentName Name of the blueprint assignment.
         * 
         * @return builder
         * 
         */
        public Builder assignmentName(@Nullable Output<String> assignmentName) {
            $.assignmentName = assignmentName;
            return this;
        }

        /**
         * @param assignmentName Name of the blueprint assignment.
         * 
         * @return builder
         * 
         */
        public Builder assignmentName(String assignmentName) {
            return assignmentName(Output.of(assignmentName));
        }

        /**
         * @param blueprintId ID of the published version of a blueprint definition.
         * 
         * @return builder
         * 
         */
        public Builder blueprintId(@Nullable Output<String> blueprintId) {
            $.blueprintId = blueprintId;
            return this;
        }

        /**
         * @param blueprintId ID of the published version of a blueprint definition.
         * 
         * @return builder
         * 
         */
        public Builder blueprintId(String blueprintId) {
            return blueprintId(Output.of(blueprintId));
        }

        /**
         * @param description Multi-line explain this resource.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Multi-line explain this resource.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName One-liner string explain this resource.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName One-liner string explain this resource.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param identity Managed identity for this blueprint assignment.
         * 
         * @return builder
         * 
         */
        public Builder identity(Output<ManagedServiceIdentityArgs> identity) {
            $.identity = identity;
            return this;
        }

        /**
         * @param identity Managed identity for this blueprint assignment.
         * 
         * @return builder
         * 
         */
        public Builder identity(ManagedServiceIdentityArgs identity) {
            return identity(Output.of(identity));
        }

        /**
         * @param location The location of this blueprint assignment.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location of this blueprint assignment.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param locks Defines how resources deployed by a blueprint assignment are locked.
         * 
         * @return builder
         * 
         */
        public Builder locks(@Nullable Output<AssignmentLockSettingsArgs> locks) {
            $.locks = locks;
            return this;
        }

        /**
         * @param locks Defines how resources deployed by a blueprint assignment are locked.
         * 
         * @return builder
         * 
         */
        public Builder locks(AssignmentLockSettingsArgs locks) {
            return locks(Output.of(locks));
        }

        /**
         * @param parameters Blueprint assignment parameter values.
         * 
         * @return builder
         * 
         */
        public Builder parameters(Output<Map<String,ParameterValueArgs>> parameters) {
            $.parameters = parameters;
            return this;
        }

        /**
         * @param parameters Blueprint assignment parameter values.
         * 
         * @return builder
         * 
         */
        public Builder parameters(Map<String,ParameterValueArgs> parameters) {
            return parameters(Output.of(parameters));
        }

        /**
         * @param resourceGroups Names and locations of resource group placeholders.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroups(Output<Map<String,ResourceGroupValueArgs>> resourceGroups) {
            $.resourceGroups = resourceGroups;
            return this;
        }

        /**
         * @param resourceGroups Names and locations of resource group placeholders.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroups(Map<String,ResourceGroupValueArgs> resourceGroups) {
            return resourceGroups(Output.of(resourceGroups));
        }

        /**
         * @param resourceScope The scope of the resource. Valid scopes are: management group (format: &#39;/providers/Microsoft.Management/managementGroups/{managementGroup}&#39;), subscription (format: &#39;/subscriptions/{subscriptionId}&#39;).
         * 
         * @return builder
         * 
         */
        public Builder resourceScope(Output<String> resourceScope) {
            $.resourceScope = resourceScope;
            return this;
        }

        /**
         * @param resourceScope The scope of the resource. Valid scopes are: management group (format: &#39;/providers/Microsoft.Management/managementGroups/{managementGroup}&#39;), subscription (format: &#39;/subscriptions/{subscriptionId}&#39;).
         * 
         * @return builder
         * 
         */
        public Builder resourceScope(String resourceScope) {
            return resourceScope(Output.of(resourceScope));
        }

        /**
         * @param scope The target subscription scope of the blueprint assignment (format: &#39;/subscriptions/{subscriptionId}&#39;). For management group level assignments, the property is required.
         * 
         * @return builder
         * 
         */
        public Builder scope(@Nullable Output<String> scope) {
            $.scope = scope;
            return this;
        }

        /**
         * @param scope The target subscription scope of the blueprint assignment (format: &#39;/subscriptions/{subscriptionId}&#39;). For management group level assignments, the property is required.
         * 
         * @return builder
         * 
         */
        public Builder scope(String scope) {
            return scope(Output.of(scope));
        }

        public AssignmentArgs build() {
            $.identity = Objects.requireNonNull($.identity, "expected parameter 'identity' to be non-null");
            $.parameters = Objects.requireNonNull($.parameters, "expected parameter 'parameters' to be non-null");
            $.resourceGroups = Objects.requireNonNull($.resourceGroups, "expected parameter 'resourceGroups' to be non-null");
            $.resourceScope = Objects.requireNonNull($.resourceScope, "expected parameter 'resourceScope' to be non-null");
            return $;
        }
    }

}
