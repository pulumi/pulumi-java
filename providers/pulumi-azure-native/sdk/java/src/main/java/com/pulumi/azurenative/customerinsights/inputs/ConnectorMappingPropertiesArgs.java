// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.customerinsights.inputs;

import com.pulumi.azurenative.customerinsights.inputs.ConnectorMappingAvailabilityArgs;
import com.pulumi.azurenative.customerinsights.inputs.ConnectorMappingCompleteOperationArgs;
import com.pulumi.azurenative.customerinsights.inputs.ConnectorMappingErrorManagementArgs;
import com.pulumi.azurenative.customerinsights.inputs.ConnectorMappingFormatArgs;
import com.pulumi.azurenative.customerinsights.inputs.ConnectorMappingStructureArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The connector mapping properties.
 * 
 */
public final class ConnectorMappingPropertiesArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectorMappingPropertiesArgs Empty = new ConnectorMappingPropertiesArgs();

    /**
     * The availability of mapping property.
     * 
     */
    @Import(name="availability", required=true)
    private Output<ConnectorMappingAvailabilityArgs> availability;

    /**
     * @return The availability of mapping property.
     * 
     */
    public Output<ConnectorMappingAvailabilityArgs> availability() {
        return this.availability;
    }

    /**
     * The operation after import is done.
     * 
     */
    @Import(name="completeOperation", required=true)
    private Output<ConnectorMappingCompleteOperationArgs> completeOperation;

    /**
     * @return The operation after import is done.
     * 
     */
    public Output<ConnectorMappingCompleteOperationArgs> completeOperation() {
        return this.completeOperation;
    }

    /**
     * The error management setting for the mapping.
     * 
     */
    @Import(name="errorManagement", required=true)
    private Output<ConnectorMappingErrorManagementArgs> errorManagement;

    /**
     * @return The error management setting for the mapping.
     * 
     */
    public Output<ConnectorMappingErrorManagementArgs> errorManagement() {
        return this.errorManagement;
    }

    /**
     * The file filter for the mapping.
     * 
     */
    @Import(name="fileFilter")
    private @Nullable Output<String> fileFilter;

    /**
     * @return The file filter for the mapping.
     * 
     */
    public Optional<Output<String>> fileFilter() {
        return Optional.ofNullable(this.fileFilter);
    }

    /**
     * The folder path for the mapping.
     * 
     */
    @Import(name="folderPath")
    private @Nullable Output<String> folderPath;

    /**
     * @return The folder path for the mapping.
     * 
     */
    public Optional<Output<String>> folderPath() {
        return Optional.ofNullable(this.folderPath);
    }

    /**
     * The format of mapping property.
     * 
     */
    @Import(name="format", required=true)
    private Output<ConnectorMappingFormatArgs> format;

    /**
     * @return The format of mapping property.
     * 
     */
    public Output<ConnectorMappingFormatArgs> format() {
        return this.format;
    }

    /**
     * If the file contains a header or not.
     * 
     */
    @Import(name="hasHeader")
    private @Nullable Output<Boolean> hasHeader;

    /**
     * @return If the file contains a header or not.
     * 
     */
    public Optional<Output<Boolean>> hasHeader() {
        return Optional.ofNullable(this.hasHeader);
    }

    /**
     * Ingestion mapping information at property level.
     * 
     */
    @Import(name="structure", required=true)
    private Output<List<ConnectorMappingStructureArgs>> structure;

    /**
     * @return Ingestion mapping information at property level.
     * 
     */
    public Output<List<ConnectorMappingStructureArgs>> structure() {
        return this.structure;
    }

    private ConnectorMappingPropertiesArgs() {}

    private ConnectorMappingPropertiesArgs(ConnectorMappingPropertiesArgs $) {
        this.availability = $.availability;
        this.completeOperation = $.completeOperation;
        this.errorManagement = $.errorManagement;
        this.fileFilter = $.fileFilter;
        this.folderPath = $.folderPath;
        this.format = $.format;
        this.hasHeader = $.hasHeader;
        this.structure = $.structure;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectorMappingPropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectorMappingPropertiesArgs $;

        public Builder() {
            $ = new ConnectorMappingPropertiesArgs();
        }

        public Builder(ConnectorMappingPropertiesArgs defaults) {
            $ = new ConnectorMappingPropertiesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param availability The availability of mapping property.
         * 
         * @return builder
         * 
         */
        public Builder availability(Output<ConnectorMappingAvailabilityArgs> availability) {
            $.availability = availability;
            return this;
        }

        /**
         * @param availability The availability of mapping property.
         * 
         * @return builder
         * 
         */
        public Builder availability(ConnectorMappingAvailabilityArgs availability) {
            return availability(Output.of(availability));
        }

        /**
         * @param completeOperation The operation after import is done.
         * 
         * @return builder
         * 
         */
        public Builder completeOperation(Output<ConnectorMappingCompleteOperationArgs> completeOperation) {
            $.completeOperation = completeOperation;
            return this;
        }

        /**
         * @param completeOperation The operation after import is done.
         * 
         * @return builder
         * 
         */
        public Builder completeOperation(ConnectorMappingCompleteOperationArgs completeOperation) {
            return completeOperation(Output.of(completeOperation));
        }

        /**
         * @param errorManagement The error management setting for the mapping.
         * 
         * @return builder
         * 
         */
        public Builder errorManagement(Output<ConnectorMappingErrorManagementArgs> errorManagement) {
            $.errorManagement = errorManagement;
            return this;
        }

        /**
         * @param errorManagement The error management setting for the mapping.
         * 
         * @return builder
         * 
         */
        public Builder errorManagement(ConnectorMappingErrorManagementArgs errorManagement) {
            return errorManagement(Output.of(errorManagement));
        }

        /**
         * @param fileFilter The file filter for the mapping.
         * 
         * @return builder
         * 
         */
        public Builder fileFilter(@Nullable Output<String> fileFilter) {
            $.fileFilter = fileFilter;
            return this;
        }

        /**
         * @param fileFilter The file filter for the mapping.
         * 
         * @return builder
         * 
         */
        public Builder fileFilter(String fileFilter) {
            return fileFilter(Output.of(fileFilter));
        }

        /**
         * @param folderPath The folder path for the mapping.
         * 
         * @return builder
         * 
         */
        public Builder folderPath(@Nullable Output<String> folderPath) {
            $.folderPath = folderPath;
            return this;
        }

        /**
         * @param folderPath The folder path for the mapping.
         * 
         * @return builder
         * 
         */
        public Builder folderPath(String folderPath) {
            return folderPath(Output.of(folderPath));
        }

        /**
         * @param format The format of mapping property.
         * 
         * @return builder
         * 
         */
        public Builder format(Output<ConnectorMappingFormatArgs> format) {
            $.format = format;
            return this;
        }

        /**
         * @param format The format of mapping property.
         * 
         * @return builder
         * 
         */
        public Builder format(ConnectorMappingFormatArgs format) {
            return format(Output.of(format));
        }

        /**
         * @param hasHeader If the file contains a header or not.
         * 
         * @return builder
         * 
         */
        public Builder hasHeader(@Nullable Output<Boolean> hasHeader) {
            $.hasHeader = hasHeader;
            return this;
        }

        /**
         * @param hasHeader If the file contains a header or not.
         * 
         * @return builder
         * 
         */
        public Builder hasHeader(Boolean hasHeader) {
            return hasHeader(Output.of(hasHeader));
        }

        /**
         * @param structure Ingestion mapping information at property level.
         * 
         * @return builder
         * 
         */
        public Builder structure(Output<List<ConnectorMappingStructureArgs>> structure) {
            $.structure = structure;
            return this;
        }

        /**
         * @param structure Ingestion mapping information at property level.
         * 
         * @return builder
         * 
         */
        public Builder structure(List<ConnectorMappingStructureArgs> structure) {
            return structure(Output.of(structure));
        }

        /**
         * @param structure Ingestion mapping information at property level.
         * 
         * @return builder
         * 
         */
        public Builder structure(ConnectorMappingStructureArgs... structure) {
            return structure(List.of(structure));
        }

        public ConnectorMappingPropertiesArgs build() {
            $.availability = Objects.requireNonNull($.availability, "expected parameter 'availability' to be non-null");
            $.completeOperation = Objects.requireNonNull($.completeOperation, "expected parameter 'completeOperation' to be non-null");
            $.errorManagement = Objects.requireNonNull($.errorManagement, "expected parameter 'errorManagement' to be non-null");
            $.format = Objects.requireNonNull($.format, "expected parameter 'format' to be non-null");
            $.structure = Objects.requireNonNull($.structure, "expected parameter 'structure' to be non-null");
            return $;
        }
    }

}
