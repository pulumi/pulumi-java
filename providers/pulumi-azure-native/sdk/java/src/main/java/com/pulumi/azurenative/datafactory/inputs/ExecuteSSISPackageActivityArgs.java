// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.azurenative.datafactory.inputs.ActivityDependencyArgs;
import com.pulumi.azurenative.datafactory.inputs.ActivityPolicyArgs;
import com.pulumi.azurenative.datafactory.inputs.IntegrationRuntimeReferenceArgs;
import com.pulumi.azurenative.datafactory.inputs.LinkedServiceReferenceArgs;
import com.pulumi.azurenative.datafactory.inputs.SSISExecutionCredentialArgs;
import com.pulumi.azurenative.datafactory.inputs.SSISExecutionParameterArgs;
import com.pulumi.azurenative.datafactory.inputs.SSISLogLocationArgs;
import com.pulumi.azurenative.datafactory.inputs.SSISPackageLocationArgs;
import com.pulumi.azurenative.datafactory.inputs.SSISPropertyOverrideArgs;
import com.pulumi.azurenative.datafactory.inputs.UserPropertyArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Execute SSIS package activity.
 * 
 */
public final class ExecuteSSISPackageActivityArgs extends com.pulumi.resources.ResourceArgs {

    public static final ExecuteSSISPackageActivityArgs Empty = new ExecuteSSISPackageActivityArgs();

    /**
     * The integration runtime reference.
     * 
     */
    @Import(name="connectVia", required=true)
    private Output<IntegrationRuntimeReferenceArgs> connectVia;

    public Output<IntegrationRuntimeReferenceArgs> connectVia() {
        return this.connectVia;
    }

    /**
     * Activity depends on condition.
     * 
     */
    @Import(name="dependsOn")
    private @Nullable Output<List<ActivityDependencyArgs>> dependsOn;

    public Optional<Output<List<ActivityDependencyArgs>>> dependsOn() {
        return Optional.ofNullable(this.dependsOn);
    }

    /**
     * Activity description.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The environment path to execute the SSIS package. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="environmentPath")
    private @Nullable Output<Object> environmentPath;

    public Optional<Output<Object>> environmentPath() {
        return Optional.ofNullable(this.environmentPath);
    }

    /**
     * The package execution credential.
     * 
     */
    @Import(name="executionCredential")
    private @Nullable Output<SSISExecutionCredentialArgs> executionCredential;

    public Optional<Output<SSISExecutionCredentialArgs>> executionCredential() {
        return Optional.ofNullable(this.executionCredential);
    }

    /**
     * Linked service reference.
     * 
     */
    @Import(name="linkedServiceName")
    private @Nullable Output<LinkedServiceReferenceArgs> linkedServiceName;

    public Optional<Output<LinkedServiceReferenceArgs>> linkedServiceName() {
        return Optional.ofNullable(this.linkedServiceName);
    }

    /**
     * SSIS package execution log location.
     * 
     */
    @Import(name="logLocation")
    private @Nullable Output<SSISLogLocationArgs> logLocation;

    public Optional<Output<SSISLogLocationArgs>> logLocation() {
        return Optional.ofNullable(this.logLocation);
    }

    /**
     * The logging level of SSIS package execution. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="loggingLevel")
    private @Nullable Output<Object> loggingLevel;

    public Optional<Output<Object>> loggingLevel() {
        return Optional.ofNullable(this.loggingLevel);
    }

    /**
     * Activity name.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    public Output<String> name() {
        return this.name;
    }

    /**
     * The package level connection managers to execute the SSIS package.
     * 
     */
    @Import(name="packageConnectionManagers")
    private @Nullable Output<Map<String,Map<String,SSISExecutionParameterArgs>>> packageConnectionManagers;

    public Optional<Output<Map<String,Map<String,SSISExecutionParameterArgs>>>> packageConnectionManagers() {
        return Optional.ofNullable(this.packageConnectionManagers);
    }

    /**
     * SSIS package location.
     * 
     */
    @Import(name="packageLocation", required=true)
    private Output<SSISPackageLocationArgs> packageLocation;

    public Output<SSISPackageLocationArgs> packageLocation() {
        return this.packageLocation;
    }

    /**
     * The package level parameters to execute the SSIS package.
     * 
     */
    @Import(name="packageParameters")
    private @Nullable Output<Map<String,SSISExecutionParameterArgs>> packageParameters;

    public Optional<Output<Map<String,SSISExecutionParameterArgs>>> packageParameters() {
        return Optional.ofNullable(this.packageParameters);
    }

    /**
     * Activity policy.
     * 
     */
    @Import(name="policy")
    private @Nullable Output<ActivityPolicyArgs> policy;

    public Optional<Output<ActivityPolicyArgs>> policy() {
        return Optional.ofNullable(this.policy);
    }

    /**
     * The project level connection managers to execute the SSIS package.
     * 
     */
    @Import(name="projectConnectionManagers")
    private @Nullable Output<Map<String,Map<String,SSISExecutionParameterArgs>>> projectConnectionManagers;

    public Optional<Output<Map<String,Map<String,SSISExecutionParameterArgs>>>> projectConnectionManagers() {
        return Optional.ofNullable(this.projectConnectionManagers);
    }

    /**
     * The project level parameters to execute the SSIS package.
     * 
     */
    @Import(name="projectParameters")
    private @Nullable Output<Map<String,SSISExecutionParameterArgs>> projectParameters;

    public Optional<Output<Map<String,SSISExecutionParameterArgs>>> projectParameters() {
        return Optional.ofNullable(this.projectParameters);
    }

    /**
     * The property overrides to execute the SSIS package.
     * 
     */
    @Import(name="propertyOverrides")
    private @Nullable Output<Map<String,SSISPropertyOverrideArgs>> propertyOverrides;

    public Optional<Output<Map<String,SSISPropertyOverrideArgs>>> propertyOverrides() {
        return Optional.ofNullable(this.propertyOverrides);
    }

    /**
     * Specifies the runtime to execute SSIS package. The value should be &#34;x86&#34; or &#34;x64&#34;. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="runtime")
    private @Nullable Output<Object> runtime;

    public Optional<Output<Object>> runtime() {
        return Optional.ofNullable(this.runtime);
    }

    /**
     * Type of activity.
     * Expected value is &#39;ExecuteSSISPackage&#39;.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    /**
     * Activity user properties.
     * 
     */
    @Import(name="userProperties")
    private @Nullable Output<List<UserPropertyArgs>> userProperties;

    public Optional<Output<List<UserPropertyArgs>>> userProperties() {
        return Optional.ofNullable(this.userProperties);
    }

    private ExecuteSSISPackageActivityArgs() {}

    private ExecuteSSISPackageActivityArgs(ExecuteSSISPackageActivityArgs $) {
        this.connectVia = $.connectVia;
        this.dependsOn = $.dependsOn;
        this.description = $.description;
        this.environmentPath = $.environmentPath;
        this.executionCredential = $.executionCredential;
        this.linkedServiceName = $.linkedServiceName;
        this.logLocation = $.logLocation;
        this.loggingLevel = $.loggingLevel;
        this.name = $.name;
        this.packageConnectionManagers = $.packageConnectionManagers;
        this.packageLocation = $.packageLocation;
        this.packageParameters = $.packageParameters;
        this.policy = $.policy;
        this.projectConnectionManagers = $.projectConnectionManagers;
        this.projectParameters = $.projectParameters;
        this.propertyOverrides = $.propertyOverrides;
        this.runtime = $.runtime;
        this.type = $.type;
        this.userProperties = $.userProperties;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExecuteSSISPackageActivityArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExecuteSSISPackageActivityArgs $;

        public Builder() {
            $ = new ExecuteSSISPackageActivityArgs();
        }

        public Builder(ExecuteSSISPackageActivityArgs defaults) {
            $ = new ExecuteSSISPackageActivityArgs(Objects.requireNonNull(defaults));
        }

        public Builder connectVia(Output<IntegrationRuntimeReferenceArgs> connectVia) {
            $.connectVia = connectVia;
            return this;
        }

        public Builder connectVia(IntegrationRuntimeReferenceArgs connectVia) {
            return connectVia(Output.of(connectVia));
        }

        public Builder dependsOn(@Nullable Output<List<ActivityDependencyArgs>> dependsOn) {
            $.dependsOn = dependsOn;
            return this;
        }

        public Builder dependsOn(List<ActivityDependencyArgs> dependsOn) {
            return dependsOn(Output.of(dependsOn));
        }

        public Builder dependsOn(ActivityDependencyArgs... dependsOn) {
            return dependsOn(List.of(dependsOn));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder environmentPath(@Nullable Output<Object> environmentPath) {
            $.environmentPath = environmentPath;
            return this;
        }

        public Builder environmentPath(Object environmentPath) {
            return environmentPath(Output.of(environmentPath));
        }

        public Builder executionCredential(@Nullable Output<SSISExecutionCredentialArgs> executionCredential) {
            $.executionCredential = executionCredential;
            return this;
        }

        public Builder executionCredential(SSISExecutionCredentialArgs executionCredential) {
            return executionCredential(Output.of(executionCredential));
        }

        public Builder linkedServiceName(@Nullable Output<LinkedServiceReferenceArgs> linkedServiceName) {
            $.linkedServiceName = linkedServiceName;
            return this;
        }

        public Builder linkedServiceName(LinkedServiceReferenceArgs linkedServiceName) {
            return linkedServiceName(Output.of(linkedServiceName));
        }

        public Builder logLocation(@Nullable Output<SSISLogLocationArgs> logLocation) {
            $.logLocation = logLocation;
            return this;
        }

        public Builder logLocation(SSISLogLocationArgs logLocation) {
            return logLocation(Output.of(logLocation));
        }

        public Builder loggingLevel(@Nullable Output<Object> loggingLevel) {
            $.loggingLevel = loggingLevel;
            return this;
        }

        public Builder loggingLevel(Object loggingLevel) {
            return loggingLevel(Output.of(loggingLevel));
        }

        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder packageConnectionManagers(@Nullable Output<Map<String,Map<String,SSISExecutionParameterArgs>>> packageConnectionManagers) {
            $.packageConnectionManagers = packageConnectionManagers;
            return this;
        }

        public Builder packageConnectionManagers(Map<String,Map<String,SSISExecutionParameterArgs>> packageConnectionManagers) {
            return packageConnectionManagers(Output.of(packageConnectionManagers));
        }

        public Builder packageLocation(Output<SSISPackageLocationArgs> packageLocation) {
            $.packageLocation = packageLocation;
            return this;
        }

        public Builder packageLocation(SSISPackageLocationArgs packageLocation) {
            return packageLocation(Output.of(packageLocation));
        }

        public Builder packageParameters(@Nullable Output<Map<String,SSISExecutionParameterArgs>> packageParameters) {
            $.packageParameters = packageParameters;
            return this;
        }

        public Builder packageParameters(Map<String,SSISExecutionParameterArgs> packageParameters) {
            return packageParameters(Output.of(packageParameters));
        }

        public Builder policy(@Nullable Output<ActivityPolicyArgs> policy) {
            $.policy = policy;
            return this;
        }

        public Builder policy(ActivityPolicyArgs policy) {
            return policy(Output.of(policy));
        }

        public Builder projectConnectionManagers(@Nullable Output<Map<String,Map<String,SSISExecutionParameterArgs>>> projectConnectionManagers) {
            $.projectConnectionManagers = projectConnectionManagers;
            return this;
        }

        public Builder projectConnectionManagers(Map<String,Map<String,SSISExecutionParameterArgs>> projectConnectionManagers) {
            return projectConnectionManagers(Output.of(projectConnectionManagers));
        }

        public Builder projectParameters(@Nullable Output<Map<String,SSISExecutionParameterArgs>> projectParameters) {
            $.projectParameters = projectParameters;
            return this;
        }

        public Builder projectParameters(Map<String,SSISExecutionParameterArgs> projectParameters) {
            return projectParameters(Output.of(projectParameters));
        }

        public Builder propertyOverrides(@Nullable Output<Map<String,SSISPropertyOverrideArgs>> propertyOverrides) {
            $.propertyOverrides = propertyOverrides;
            return this;
        }

        public Builder propertyOverrides(Map<String,SSISPropertyOverrideArgs> propertyOverrides) {
            return propertyOverrides(Output.of(propertyOverrides));
        }

        public Builder runtime(@Nullable Output<Object> runtime) {
            $.runtime = runtime;
            return this;
        }

        public Builder runtime(Object runtime) {
            return runtime(Output.of(runtime));
        }

        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public Builder userProperties(@Nullable Output<List<UserPropertyArgs>> userProperties) {
            $.userProperties = userProperties;
            return this;
        }

        public Builder userProperties(List<UserPropertyArgs> userProperties) {
            return userProperties(Output.of(userProperties));
        }

        public Builder userProperties(UserPropertyArgs... userProperties) {
            return userProperties(List.of(userProperties));
        }

        public ExecuteSSISPackageActivityArgs build() {
            $.connectVia = Objects.requireNonNull($.connectVia, "expected parameter 'connectVia' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.packageLocation = Objects.requireNonNull($.packageLocation, "expected parameter 'packageLocation' to be non-null");
            $.type = Codegen.stringProp("type").output().arg($.type).require();
            return $;
        }
    }

}
