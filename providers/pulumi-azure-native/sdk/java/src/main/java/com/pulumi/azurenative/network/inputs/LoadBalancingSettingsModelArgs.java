// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Load balancing settings for a backend pool
 * 
 */
public final class LoadBalancingSettingsModelArgs extends com.pulumi.resources.ResourceArgs {

    public static final LoadBalancingSettingsModelArgs Empty = new LoadBalancingSettingsModelArgs();

    /**
     * The additional latency in milliseconds for probes to fall into the lowest latency bucket
     * 
     */
    @Import(name="additionalLatencyMilliseconds")
    private @Nullable Output<Integer> additionalLatencyMilliseconds;

    /**
     * @return The additional latency in milliseconds for probes to fall into the lowest latency bucket
     * 
     */
    public Optional<Output<Integer>> additionalLatencyMilliseconds() {
        return Optional.ofNullable(this.additionalLatencyMilliseconds);
    }

    /**
     * Resource ID.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return Resource ID.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Resource name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Resource name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The number of samples to consider for load balancing decisions
     * 
     */
    @Import(name="sampleSize")
    private @Nullable Output<Integer> sampleSize;

    /**
     * @return The number of samples to consider for load balancing decisions
     * 
     */
    public Optional<Output<Integer>> sampleSize() {
        return Optional.ofNullable(this.sampleSize);
    }

    /**
     * The number of samples within the sample period that must succeed
     * 
     */
    @Import(name="successfulSamplesRequired")
    private @Nullable Output<Integer> successfulSamplesRequired;

    /**
     * @return The number of samples within the sample period that must succeed
     * 
     */
    public Optional<Output<Integer>> successfulSamplesRequired() {
        return Optional.ofNullable(this.successfulSamplesRequired);
    }

    private LoadBalancingSettingsModelArgs() {}

    private LoadBalancingSettingsModelArgs(LoadBalancingSettingsModelArgs $) {
        this.additionalLatencyMilliseconds = $.additionalLatencyMilliseconds;
        this.id = $.id;
        this.name = $.name;
        this.sampleSize = $.sampleSize;
        this.successfulSamplesRequired = $.successfulSamplesRequired;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoadBalancingSettingsModelArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoadBalancingSettingsModelArgs $;

        public Builder() {
            $ = new LoadBalancingSettingsModelArgs();
        }

        public Builder(LoadBalancingSettingsModelArgs defaults) {
            $ = new LoadBalancingSettingsModelArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param additionalLatencyMilliseconds The additional latency in milliseconds for probes to fall into the lowest latency bucket
         * 
         * @return builder
         * 
         */
        public Builder additionalLatencyMilliseconds(@Nullable Output<Integer> additionalLatencyMilliseconds) {
            $.additionalLatencyMilliseconds = additionalLatencyMilliseconds;
            return this;
        }

        /**
         * @param additionalLatencyMilliseconds The additional latency in milliseconds for probes to fall into the lowest latency bucket
         * 
         * @return builder
         * 
         */
        public Builder additionalLatencyMilliseconds(Integer additionalLatencyMilliseconds) {
            return additionalLatencyMilliseconds(Output.of(additionalLatencyMilliseconds));
        }

        /**
         * @param id Resource ID.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id Resource ID.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param name Resource name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Resource name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param sampleSize The number of samples to consider for load balancing decisions
         * 
         * @return builder
         * 
         */
        public Builder sampleSize(@Nullable Output<Integer> sampleSize) {
            $.sampleSize = sampleSize;
            return this;
        }

        /**
         * @param sampleSize The number of samples to consider for load balancing decisions
         * 
         * @return builder
         * 
         */
        public Builder sampleSize(Integer sampleSize) {
            return sampleSize(Output.of(sampleSize));
        }

        /**
         * @param successfulSamplesRequired The number of samples within the sample period that must succeed
         * 
         * @return builder
         * 
         */
        public Builder successfulSamplesRequired(@Nullable Output<Integer> successfulSamplesRequired) {
            $.successfulSamplesRequired = successfulSamplesRequired;
            return this;
        }

        /**
         * @param successfulSamplesRequired The number of samples within the sample period that must succeed
         * 
         * @return builder
         * 
         */
        public Builder successfulSamplesRequired(Integer successfulSamplesRequired) {
            return successfulSamplesRequired(Output.of(successfulSamplesRequired));
        }

        public LoadBalancingSettingsModelArgs build() {
            return $;
        }
    }

}
