// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.videoanalyzer.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;


/**
 * Required validation properties for tokens generated with Elliptical Curve algorithm.
 * 
 */
public final class EccTokenKeyResponse extends com.pulumi.resources.InvokeArgs {

    public static final EccTokenKeyResponse Empty = new EccTokenKeyResponse();

    /**
     * Elliptical curve algorithm to be used: ES256, ES384 or ES512.
     * 
     */
    @Import(name="alg", required=true)
    private String alg;

    /**
     * @return Elliptical curve algorithm to be used: ES256, ES384 or ES512.
     * 
     */
    public String alg() {
        return this.alg;
    }

    /**
     * JWT token key id. Validation keys are looked up based on the key id present on the JWT token header.
     * 
     */
    @Import(name="kid", required=true)
    private String kid;

    /**
     * @return JWT token key id. Validation keys are looked up based on the key id present on the JWT token header.
     * 
     */
    public String kid() {
        return this.kid;
    }

    /**
     * The discriminator for derived types.
     * Expected value is &#39;#Microsoft.VideoAnalyzer.EccTokenKey&#39;.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    /**
     * @return The discriminator for derived types.
     * Expected value is &#39;#Microsoft.VideoAnalyzer.EccTokenKey&#39;.
     * 
     */
    public String type() {
        return this.type;
    }

    /**
     * X coordinate.
     * 
     */
    @Import(name="x", required=true)
    private String x;

    /**
     * @return X coordinate.
     * 
     */
    public String x() {
        return this.x;
    }

    /**
     * Y coordinate.
     * 
     */
    @Import(name="y", required=true)
    private String y;

    /**
     * @return Y coordinate.
     * 
     */
    public String y() {
        return this.y;
    }

    private EccTokenKeyResponse() {}

    private EccTokenKeyResponse(EccTokenKeyResponse $) {
        this.alg = $.alg;
        this.kid = $.kid;
        this.type = $.type;
        this.x = $.x;
        this.y = $.y;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EccTokenKeyResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EccTokenKeyResponse $;

        public Builder() {
            $ = new EccTokenKeyResponse();
        }

        public Builder(EccTokenKeyResponse defaults) {
            $ = new EccTokenKeyResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param alg Elliptical curve algorithm to be used: ES256, ES384 or ES512.
         * 
         * @return builder
         * 
         */
        public Builder alg(String alg) {
            $.alg = alg;
            return this;
        }

        /**
         * @param kid JWT token key id. Validation keys are looked up based on the key id present on the JWT token header.
         * 
         * @return builder
         * 
         */
        public Builder kid(String kid) {
            $.kid = kid;
            return this;
        }

        /**
         * @param type The discriminator for derived types.
         * Expected value is &#39;#Microsoft.VideoAnalyzer.EccTokenKey&#39;.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            $.type = type;
            return this;
        }

        /**
         * @param x X coordinate.
         * 
         * @return builder
         * 
         */
        public Builder x(String x) {
            $.x = x;
            return this;
        }

        /**
         * @param y Y coordinate.
         * 
         * @return builder
         * 
         */
        public Builder y(String y) {
            $.y = y;
            return this;
        }

        public EccTokenKeyResponse build() {
            $.alg = Objects.requireNonNull($.alg, "expected parameter 'alg' to be non-null");
            $.kid = Objects.requireNonNull($.kid, "expected parameter 'kid' to be non-null");
            $.type = Codegen.stringProp("type").arg($.type).require();
            $.x = Objects.requireNonNull($.x, "expected parameter 'x' to be non-null");
            $.y = Objects.requireNonNull($.y, "expected parameter 'y' to be non-null");
            return $;
        }
    }

}
