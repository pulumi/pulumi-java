// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.logic.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The Edifact agreement acknowledgement settings.
 * 
 */
public final class EdifactAcknowledgementSettingsResponse extends com.pulumi.resources.InvokeArgs {

    public static final EdifactAcknowledgementSettingsResponse Empty = new EdifactAcknowledgementSettingsResponse();

    /**
     * The acknowledgement control number lower bound.
     * 
     */
    @Import(name="acknowledgementControlNumberLowerBound", required=true)
    private Integer acknowledgementControlNumberLowerBound;

    public Integer acknowledgementControlNumberLowerBound() {
        return this.acknowledgementControlNumberLowerBound;
    }

    /**
     * The acknowledgement control number prefix.
     * 
     */
    @Import(name="acknowledgementControlNumberPrefix")
    private @Nullable String acknowledgementControlNumberPrefix;

    public Optional<String> acknowledgementControlNumberPrefix() {
        return Optional.ofNullable(this.acknowledgementControlNumberPrefix);
    }

    /**
     * The acknowledgement control number suffix.
     * 
     */
    @Import(name="acknowledgementControlNumberSuffix")
    private @Nullable String acknowledgementControlNumberSuffix;

    public Optional<String> acknowledgementControlNumberSuffix() {
        return Optional.ofNullable(this.acknowledgementControlNumberSuffix);
    }

    /**
     * The acknowledgement control number upper bound.
     * 
     */
    @Import(name="acknowledgementControlNumberUpperBound", required=true)
    private Integer acknowledgementControlNumberUpperBound;

    public Integer acknowledgementControlNumberUpperBound() {
        return this.acknowledgementControlNumberUpperBound;
    }

    /**
     * The value indicating whether to batch functional acknowledgements.
     * 
     */
    @Import(name="batchFunctionalAcknowledgements", required=true)
    private Boolean batchFunctionalAcknowledgements;

    public Boolean batchFunctionalAcknowledgements() {
        return this.batchFunctionalAcknowledgements;
    }

    /**
     * The value indicating whether to batch the technical acknowledgements.
     * 
     */
    @Import(name="batchTechnicalAcknowledgements", required=true)
    private Boolean batchTechnicalAcknowledgements;

    public Boolean batchTechnicalAcknowledgements() {
        return this.batchTechnicalAcknowledgements;
    }

    /**
     * The value indicating whether functional acknowledgement is needed.
     * 
     */
    @Import(name="needFunctionalAcknowledgement", required=true)
    private Boolean needFunctionalAcknowledgement;

    public Boolean needFunctionalAcknowledgement() {
        return this.needFunctionalAcknowledgement;
    }

    /**
     * The value indicating whether a loop is needed for valid messages.
     * 
     */
    @Import(name="needLoopForValidMessages", required=true)
    private Boolean needLoopForValidMessages;

    public Boolean needLoopForValidMessages() {
        return this.needLoopForValidMessages;
    }

    /**
     * The value indicating whether technical acknowledgement is needed.
     * 
     */
    @Import(name="needTechnicalAcknowledgement", required=true)
    private Boolean needTechnicalAcknowledgement;

    public Boolean needTechnicalAcknowledgement() {
        return this.needTechnicalAcknowledgement;
    }

    /**
     * The value indicating whether to rollover acknowledgement control number.
     * 
     */
    @Import(name="rolloverAcknowledgementControlNumber", required=true)
    private Boolean rolloverAcknowledgementControlNumber;

    public Boolean rolloverAcknowledgementControlNumber() {
        return this.rolloverAcknowledgementControlNumber;
    }

    /**
     * The value indicating whether to send synchronous acknowledgement.
     * 
     */
    @Import(name="sendSynchronousAcknowledgement", required=true)
    private Boolean sendSynchronousAcknowledgement;

    public Boolean sendSynchronousAcknowledgement() {
        return this.sendSynchronousAcknowledgement;
    }

    private EdifactAcknowledgementSettingsResponse() {}

    private EdifactAcknowledgementSettingsResponse(EdifactAcknowledgementSettingsResponse $) {
        this.acknowledgementControlNumberLowerBound = $.acknowledgementControlNumberLowerBound;
        this.acknowledgementControlNumberPrefix = $.acknowledgementControlNumberPrefix;
        this.acknowledgementControlNumberSuffix = $.acknowledgementControlNumberSuffix;
        this.acknowledgementControlNumberUpperBound = $.acknowledgementControlNumberUpperBound;
        this.batchFunctionalAcknowledgements = $.batchFunctionalAcknowledgements;
        this.batchTechnicalAcknowledgements = $.batchTechnicalAcknowledgements;
        this.needFunctionalAcknowledgement = $.needFunctionalAcknowledgement;
        this.needLoopForValidMessages = $.needLoopForValidMessages;
        this.needTechnicalAcknowledgement = $.needTechnicalAcknowledgement;
        this.rolloverAcknowledgementControlNumber = $.rolloverAcknowledgementControlNumber;
        this.sendSynchronousAcknowledgement = $.sendSynchronousAcknowledgement;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EdifactAcknowledgementSettingsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EdifactAcknowledgementSettingsResponse $;

        public Builder() {
            $ = new EdifactAcknowledgementSettingsResponse();
        }

        public Builder(EdifactAcknowledgementSettingsResponse defaults) {
            $ = new EdifactAcknowledgementSettingsResponse(Objects.requireNonNull(defaults));
        }

        public Builder acknowledgementControlNumberLowerBound(Integer acknowledgementControlNumberLowerBound) {
            $.acknowledgementControlNumberLowerBound = acknowledgementControlNumberLowerBound;
            return this;
        }

        public Builder acknowledgementControlNumberPrefix(@Nullable String acknowledgementControlNumberPrefix) {
            $.acknowledgementControlNumberPrefix = acknowledgementControlNumberPrefix;
            return this;
        }

        public Builder acknowledgementControlNumberSuffix(@Nullable String acknowledgementControlNumberSuffix) {
            $.acknowledgementControlNumberSuffix = acknowledgementControlNumberSuffix;
            return this;
        }

        public Builder acknowledgementControlNumberUpperBound(Integer acknowledgementControlNumberUpperBound) {
            $.acknowledgementControlNumberUpperBound = acknowledgementControlNumberUpperBound;
            return this;
        }

        public Builder batchFunctionalAcknowledgements(Boolean batchFunctionalAcknowledgements) {
            $.batchFunctionalAcknowledgements = batchFunctionalAcknowledgements;
            return this;
        }

        public Builder batchTechnicalAcknowledgements(Boolean batchTechnicalAcknowledgements) {
            $.batchTechnicalAcknowledgements = batchTechnicalAcknowledgements;
            return this;
        }

        public Builder needFunctionalAcknowledgement(Boolean needFunctionalAcknowledgement) {
            $.needFunctionalAcknowledgement = needFunctionalAcknowledgement;
            return this;
        }

        public Builder needLoopForValidMessages(Boolean needLoopForValidMessages) {
            $.needLoopForValidMessages = needLoopForValidMessages;
            return this;
        }

        public Builder needTechnicalAcknowledgement(Boolean needTechnicalAcknowledgement) {
            $.needTechnicalAcknowledgement = needTechnicalAcknowledgement;
            return this;
        }

        public Builder rolloverAcknowledgementControlNumber(Boolean rolloverAcknowledgementControlNumber) {
            $.rolloverAcknowledgementControlNumber = rolloverAcknowledgementControlNumber;
            return this;
        }

        public Builder sendSynchronousAcknowledgement(Boolean sendSynchronousAcknowledgement) {
            $.sendSynchronousAcknowledgement = sendSynchronousAcknowledgement;
            return this;
        }

        public EdifactAcknowledgementSettingsResponse build() {
            $.acknowledgementControlNumberLowerBound = Objects.requireNonNull($.acknowledgementControlNumberLowerBound, "expected parameter 'acknowledgementControlNumberLowerBound' to be non-null");
            $.acknowledgementControlNumberUpperBound = Objects.requireNonNull($.acknowledgementControlNumberUpperBound, "expected parameter 'acknowledgementControlNumberUpperBound' to be non-null");
            $.batchFunctionalAcknowledgements = Objects.requireNonNull($.batchFunctionalAcknowledgements, "expected parameter 'batchFunctionalAcknowledgements' to be non-null");
            $.batchTechnicalAcknowledgements = Objects.requireNonNull($.batchTechnicalAcknowledgements, "expected parameter 'batchTechnicalAcknowledgements' to be non-null");
            $.needFunctionalAcknowledgement = Objects.requireNonNull($.needFunctionalAcknowledgement, "expected parameter 'needFunctionalAcknowledgement' to be non-null");
            $.needLoopForValidMessages = Objects.requireNonNull($.needLoopForValidMessages, "expected parameter 'needLoopForValidMessages' to be non-null");
            $.needTechnicalAcknowledgement = Objects.requireNonNull($.needTechnicalAcknowledgement, "expected parameter 'needTechnicalAcknowledgement' to be non-null");
            $.rolloverAcknowledgementControlNumber = Objects.requireNonNull($.rolloverAcknowledgementControlNumber, "expected parameter 'rolloverAcknowledgementControlNumber' to be non-null");
            $.sendSynchronousAcknowledgement = Objects.requireNonNull($.sendSynchronousAcknowledgement, "expected parameter 'sendSynchronousAcknowledgement' to be non-null");
            return $;
        }
    }

}
