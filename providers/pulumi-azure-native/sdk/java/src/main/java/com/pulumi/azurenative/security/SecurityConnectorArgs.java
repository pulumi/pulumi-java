// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.security;

import com.pulumi.azurenative.security.enums.CloudName;
import com.pulumi.azurenative.security.inputs.CspmMonitorAwsOfferingArgs;
import com.pulumi.azurenative.security.inputs.DefenderForContainersAwsOfferingArgs;
import com.pulumi.azurenative.security.inputs.DefenderForServersAwsOfferingArgs;
import com.pulumi.azurenative.security.inputs.InformationProtectionAwsOfferingArgs;
import com.pulumi.azurenative.security.inputs.SecurityConnectorPropertiesOrganizationalDataArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SecurityConnectorArgs extends com.pulumi.resources.ResourceArgs {

    public static final SecurityConnectorArgs Empty = new SecurityConnectorArgs();

    /**
     * The multi cloud resource&#39;s cloud name.
     * 
     */
    @Import(name="cloudName")
    private @Nullable Output<Either<String,CloudName>> cloudName;

    /**
     * @return The multi cloud resource&#39;s cloud name.
     * 
     */
    public Optional<Output<Either<String,CloudName>>> cloudName() {
        return Optional.ofNullable(this.cloudName);
    }

    /**
     * The multi cloud resource identifier (account id in case of AWS connector).
     * 
     */
    @Import(name="hierarchyIdentifier")
    private @Nullable Output<String> hierarchyIdentifier;

    /**
     * @return The multi cloud resource identifier (account id in case of AWS connector).
     * 
     */
    public Optional<Output<String>> hierarchyIdentifier() {
        return Optional.ofNullable(this.hierarchyIdentifier);
    }

    /**
     * Kind of the resource
     * 
     */
    @Import(name="kind")
    private @Nullable Output<String> kind;

    /**
     * @return Kind of the resource
     * 
     */
    public Optional<Output<String>> kind() {
        return Optional.ofNullable(this.kind);
    }

    /**
     * Location where the resource is stored
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Location where the resource is stored
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * A collection of offerings for the security connector.
     * 
     */
    @Import(name="offerings")
    private @Nullable Output<List<Object>> offerings;

    /**
     * @return A collection of offerings for the security connector.
     * 
     */
    public Optional<Output<List<Object>>> offerings() {
        return Optional.ofNullable(this.offerings);
    }

    /**
     * The multi cloud account&#39;s organizational data
     * 
     */
    @Import(name="organizationalData")
    private @Nullable Output<SecurityConnectorPropertiesOrganizationalDataArgs> organizationalData;

    /**
     * @return The multi cloud account&#39;s organizational data
     * 
     */
    public Optional<Output<SecurityConnectorPropertiesOrganizationalDataArgs>> organizationalData() {
        return Optional.ofNullable(this.organizationalData);
    }

    /**
     * The name of the resource group within the user&#39;s subscription. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group within the user&#39;s subscription. The name is case insensitive.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The security connector name.
     * 
     */
    @Import(name="securityConnectorName")
    private @Nullable Output<String> securityConnectorName;

    /**
     * @return The security connector name.
     * 
     */
    public Optional<Output<String>> securityConnectorName() {
        return Optional.ofNullable(this.securityConnectorName);
    }

    /**
     * A list of key value pairs that describe the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A list of key value pairs that describe the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private SecurityConnectorArgs() {}

    private SecurityConnectorArgs(SecurityConnectorArgs $) {
        this.cloudName = $.cloudName;
        this.hierarchyIdentifier = $.hierarchyIdentifier;
        this.kind = $.kind;
        this.location = $.location;
        this.offerings = $.offerings;
        this.organizationalData = $.organizationalData;
        this.resourceGroupName = $.resourceGroupName;
        this.securityConnectorName = $.securityConnectorName;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecurityConnectorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecurityConnectorArgs $;

        public Builder() {
            $ = new SecurityConnectorArgs();
        }

        public Builder(SecurityConnectorArgs defaults) {
            $ = new SecurityConnectorArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cloudName The multi cloud resource&#39;s cloud name.
         * 
         * @return builder
         * 
         */
        public Builder cloudName(@Nullable Output<Either<String,CloudName>> cloudName) {
            $.cloudName = cloudName;
            return this;
        }

        /**
         * @param cloudName The multi cloud resource&#39;s cloud name.
         * 
         * @return builder
         * 
         */
        public Builder cloudName(Either<String,CloudName> cloudName) {
            return cloudName(Output.of(cloudName));
        }

        /**
         * @param cloudName The multi cloud resource&#39;s cloud name.
         * 
         * @return builder
         * 
         */
        public Builder cloudName(String cloudName) {
            return cloudName(Either.ofLeft(cloudName));
        }

        /**
         * @param cloudName The multi cloud resource&#39;s cloud name.
         * 
         * @return builder
         * 
         */
        public Builder cloudName(CloudName cloudName) {
            return cloudName(Either.ofRight(cloudName));
        }

        /**
         * @param hierarchyIdentifier The multi cloud resource identifier (account id in case of AWS connector).
         * 
         * @return builder
         * 
         */
        public Builder hierarchyIdentifier(@Nullable Output<String> hierarchyIdentifier) {
            $.hierarchyIdentifier = hierarchyIdentifier;
            return this;
        }

        /**
         * @param hierarchyIdentifier The multi cloud resource identifier (account id in case of AWS connector).
         * 
         * @return builder
         * 
         */
        public Builder hierarchyIdentifier(String hierarchyIdentifier) {
            return hierarchyIdentifier(Output.of(hierarchyIdentifier));
        }

        /**
         * @param kind Kind of the resource
         * 
         * @return builder
         * 
         */
        public Builder kind(@Nullable Output<String> kind) {
            $.kind = kind;
            return this;
        }

        /**
         * @param kind Kind of the resource
         * 
         * @return builder
         * 
         */
        public Builder kind(String kind) {
            return kind(Output.of(kind));
        }

        /**
         * @param location Location where the resource is stored
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Location where the resource is stored
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param offerings A collection of offerings for the security connector.
         * 
         * @return builder
         * 
         */
        public Builder offerings(@Nullable Output<List<Object>> offerings) {
            $.offerings = offerings;
            return this;
        }

        /**
         * @param offerings A collection of offerings for the security connector.
         * 
         * @return builder
         * 
         */
        public Builder offerings(List<Object> offerings) {
            return offerings(Output.of(offerings));
        }

        /**
         * @param offerings A collection of offerings for the security connector.
         * 
         * @return builder
         * 
         */
        public Builder offerings(Object... offerings) {
            return offerings(List.of(offerings));
        }

        /**
         * @param organizationalData The multi cloud account&#39;s organizational data
         * 
         * @return builder
         * 
         */
        public Builder organizationalData(@Nullable Output<SecurityConnectorPropertiesOrganizationalDataArgs> organizationalData) {
            $.organizationalData = organizationalData;
            return this;
        }

        /**
         * @param organizationalData The multi cloud account&#39;s organizational data
         * 
         * @return builder
         * 
         */
        public Builder organizationalData(SecurityConnectorPropertiesOrganizationalDataArgs organizationalData) {
            return organizationalData(Output.of(organizationalData));
        }

        /**
         * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param securityConnectorName The security connector name.
         * 
         * @return builder
         * 
         */
        public Builder securityConnectorName(@Nullable Output<String> securityConnectorName) {
            $.securityConnectorName = securityConnectorName;
            return this;
        }

        /**
         * @param securityConnectorName The security connector name.
         * 
         * @return builder
         * 
         */
        public Builder securityConnectorName(String securityConnectorName) {
            return securityConnectorName(Output.of(securityConnectorName));
        }

        /**
         * @param tags A list of key value pairs that describe the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A list of key value pairs that describe the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public SecurityConnectorArgs build() {
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
