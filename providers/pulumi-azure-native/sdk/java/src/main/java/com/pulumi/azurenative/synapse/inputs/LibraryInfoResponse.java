// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.synapse.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Library/package information of a Big Data pool powered by Apache Spark
 * 
 */
public final class LibraryInfoResponse extends com.pulumi.resources.InvokeArgs {

    public static final LibraryInfoResponse Empty = new LibraryInfoResponse();

    /**
     * Storage blob container name.
     * 
     */
    @Import(name="containerName")
    private @Nullable String containerName;

    public Optional<String> containerName() {
        return Optional.ofNullable(this.containerName);
    }

    /**
     * Creator Id of the library/package.
     * 
     */
    @Import(name="creatorId", required=true)
    private String creatorId;

    public String creatorId() {
        return this.creatorId;
    }

    /**
     * Name of the library.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Storage blob path of library.
     * 
     */
    @Import(name="path")
    private @Nullable String path;

    public Optional<String> path() {
        return Optional.ofNullable(this.path);
    }

    /**
     * Provisioning status of the library/package.
     * 
     */
    @Import(name="provisioningStatus", required=true)
    private String provisioningStatus;

    public String provisioningStatus() {
        return this.provisioningStatus;
    }

    /**
     * Type of the library.
     * 
     */
    @Import(name="type")
    private @Nullable String type;

    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * The last update time of the library.
     * 
     */
    @Import(name="uploadedTimestamp", required=true)
    private String uploadedTimestamp;

    public String uploadedTimestamp() {
        return this.uploadedTimestamp;
    }

    private LibraryInfoResponse() {}

    private LibraryInfoResponse(LibraryInfoResponse $) {
        this.containerName = $.containerName;
        this.creatorId = $.creatorId;
        this.name = $.name;
        this.path = $.path;
        this.provisioningStatus = $.provisioningStatus;
        this.type = $.type;
        this.uploadedTimestamp = $.uploadedTimestamp;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LibraryInfoResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LibraryInfoResponse $;

        public Builder() {
            $ = new LibraryInfoResponse();
        }

        public Builder(LibraryInfoResponse defaults) {
            $ = new LibraryInfoResponse(Objects.requireNonNull(defaults));
        }

        public Builder containerName(@Nullable String containerName) {
            $.containerName = containerName;
            return this;
        }

        public Builder creatorId(String creatorId) {
            $.creatorId = creatorId;
            return this;
        }

        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        public Builder path(@Nullable String path) {
            $.path = path;
            return this;
        }

        public Builder provisioningStatus(String provisioningStatus) {
            $.provisioningStatus = provisioningStatus;
            return this;
        }

        public Builder type(@Nullable String type) {
            $.type = type;
            return this;
        }

        public Builder uploadedTimestamp(String uploadedTimestamp) {
            $.uploadedTimestamp = uploadedTimestamp;
            return this;
        }

        public LibraryInfoResponse build() {
            $.creatorId = Objects.requireNonNull($.creatorId, "expected parameter 'creatorId' to be non-null");
            $.provisioningStatus = Objects.requireNonNull($.provisioningStatus, "expected parameter 'provisioningStatus' to be non-null");
            $.uploadedTimestamp = Objects.requireNonNull($.uploadedTimestamp, "expected parameter 'uploadedTimestamp' to be non-null");
            return $;
        }
    }

}
