// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.botservice.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The parameters to provide for the Microsoft Teams channel.
 * 
 */
public final class SkypeChannelPropertiesResponse extends com.pulumi.resources.InvokeArgs {

    public static final SkypeChannelPropertiesResponse Empty = new SkypeChannelPropertiesResponse();

    /**
     * Calling web hook for Skype channel
     * 
     */
    @Import(name="callingWebHook")
    private @Nullable String callingWebHook;

    /**
     * @return Calling web hook for Skype channel
     * 
     */
    public Optional<String> callingWebHook() {
        return Optional.ofNullable(this.callingWebHook);
    }

    /**
     * Enable calling for Skype channel
     * 
     */
    @Import(name="enableCalling")
    private @Nullable Boolean enableCalling;

    /**
     * @return Enable calling for Skype channel
     * 
     */
    public Optional<Boolean> enableCalling() {
        return Optional.ofNullable(this.enableCalling);
    }

    /**
     * Enable groups for Skype channel
     * 
     */
    @Import(name="enableGroups")
    private @Nullable Boolean enableGroups;

    /**
     * @return Enable groups for Skype channel
     * 
     */
    public Optional<Boolean> enableGroups() {
        return Optional.ofNullable(this.enableGroups);
    }

    /**
     * Enable media cards for Skype channel
     * 
     */
    @Import(name="enableMediaCards")
    private @Nullable Boolean enableMediaCards;

    /**
     * @return Enable media cards for Skype channel
     * 
     */
    public Optional<Boolean> enableMediaCards() {
        return Optional.ofNullable(this.enableMediaCards);
    }

    /**
     * Enable messaging for Skype channel
     * 
     */
    @Import(name="enableMessaging")
    private @Nullable Boolean enableMessaging;

    /**
     * @return Enable messaging for Skype channel
     * 
     */
    public Optional<Boolean> enableMessaging() {
        return Optional.ofNullable(this.enableMessaging);
    }

    /**
     * Enable screen sharing for Skype channel
     * 
     */
    @Import(name="enableScreenSharing")
    private @Nullable Boolean enableScreenSharing;

    /**
     * @return Enable screen sharing for Skype channel
     * 
     */
    public Optional<Boolean> enableScreenSharing() {
        return Optional.ofNullable(this.enableScreenSharing);
    }

    /**
     * Enable video for Skype channel
     * 
     */
    @Import(name="enableVideo")
    private @Nullable Boolean enableVideo;

    /**
     * @return Enable video for Skype channel
     * 
     */
    public Optional<Boolean> enableVideo() {
        return Optional.ofNullable(this.enableVideo);
    }

    /**
     * Group mode for Skype channel
     * 
     */
    @Import(name="groupsMode")
    private @Nullable String groupsMode;

    /**
     * @return Group mode for Skype channel
     * 
     */
    public Optional<String> groupsMode() {
        return Optional.ofNullable(this.groupsMode);
    }

    /**
     * Incoming call route for Skype channel
     * 
     */
    @Import(name="incomingCallRoute")
    private @Nullable String incomingCallRoute;

    /**
     * @return Incoming call route for Skype channel
     * 
     */
    public Optional<String> incomingCallRoute() {
        return Optional.ofNullable(this.incomingCallRoute);
    }

    /**
     * Whether this channel is enabled for the bot
     * 
     */
    @Import(name="isEnabled", required=true)
    private Boolean isEnabled;

    /**
     * @return Whether this channel is enabled for the bot
     * 
     */
    public Boolean isEnabled() {
        return this.isEnabled;
    }

    private SkypeChannelPropertiesResponse() {}

    private SkypeChannelPropertiesResponse(SkypeChannelPropertiesResponse $) {
        this.callingWebHook = $.callingWebHook;
        this.enableCalling = $.enableCalling;
        this.enableGroups = $.enableGroups;
        this.enableMediaCards = $.enableMediaCards;
        this.enableMessaging = $.enableMessaging;
        this.enableScreenSharing = $.enableScreenSharing;
        this.enableVideo = $.enableVideo;
        this.groupsMode = $.groupsMode;
        this.incomingCallRoute = $.incomingCallRoute;
        this.isEnabled = $.isEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SkypeChannelPropertiesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SkypeChannelPropertiesResponse $;

        public Builder() {
            $ = new SkypeChannelPropertiesResponse();
        }

        public Builder(SkypeChannelPropertiesResponse defaults) {
            $ = new SkypeChannelPropertiesResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param callingWebHook Calling web hook for Skype channel
         * 
         * @return builder
         * 
         */
        public Builder callingWebHook(@Nullable String callingWebHook) {
            $.callingWebHook = callingWebHook;
            return this;
        }

        /**
         * @param enableCalling Enable calling for Skype channel
         * 
         * @return builder
         * 
         */
        public Builder enableCalling(@Nullable Boolean enableCalling) {
            $.enableCalling = enableCalling;
            return this;
        }

        /**
         * @param enableGroups Enable groups for Skype channel
         * 
         * @return builder
         * 
         */
        public Builder enableGroups(@Nullable Boolean enableGroups) {
            $.enableGroups = enableGroups;
            return this;
        }

        /**
         * @param enableMediaCards Enable media cards for Skype channel
         * 
         * @return builder
         * 
         */
        public Builder enableMediaCards(@Nullable Boolean enableMediaCards) {
            $.enableMediaCards = enableMediaCards;
            return this;
        }

        /**
         * @param enableMessaging Enable messaging for Skype channel
         * 
         * @return builder
         * 
         */
        public Builder enableMessaging(@Nullable Boolean enableMessaging) {
            $.enableMessaging = enableMessaging;
            return this;
        }

        /**
         * @param enableScreenSharing Enable screen sharing for Skype channel
         * 
         * @return builder
         * 
         */
        public Builder enableScreenSharing(@Nullable Boolean enableScreenSharing) {
            $.enableScreenSharing = enableScreenSharing;
            return this;
        }

        /**
         * @param enableVideo Enable video for Skype channel
         * 
         * @return builder
         * 
         */
        public Builder enableVideo(@Nullable Boolean enableVideo) {
            $.enableVideo = enableVideo;
            return this;
        }

        /**
         * @param groupsMode Group mode for Skype channel
         * 
         * @return builder
         * 
         */
        public Builder groupsMode(@Nullable String groupsMode) {
            $.groupsMode = groupsMode;
            return this;
        }

        /**
         * @param incomingCallRoute Incoming call route for Skype channel
         * 
         * @return builder
         * 
         */
        public Builder incomingCallRoute(@Nullable String incomingCallRoute) {
            $.incomingCallRoute = incomingCallRoute;
            return this;
        }

        /**
         * @param isEnabled Whether this channel is enabled for the bot
         * 
         * @return builder
         * 
         */
        public Builder isEnabled(Boolean isEnabled) {
            $.isEnabled = isEnabled;
            return this;
        }

        public SkypeChannelPropertiesResponse build() {
            $.isEnabled = Objects.requireNonNull($.isEnabled, "expected parameter 'isEnabled' to be non-null");
            return $;
        }
    }

}
