// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datalakeanalytics.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The parameters used to add a new Azure Storage account while creating a new Data Lake Analytics account.
 * 
 */
public final class AddStorageAccountWithAccountParametersArgs extends com.pulumi.resources.ResourceArgs {

    public static final AddStorageAccountWithAccountParametersArgs Empty = new AddStorageAccountWithAccountParametersArgs();

    /**
     * The access key associated with this Azure Storage account that will be used to connect to it.
     * 
     */
    @Import(name="accessKey", required=true)
    private Output<String> accessKey;

    /**
     * @return The access key associated with this Azure Storage account that will be used to connect to it.
     * 
     */
    public Output<String> accessKey() {
        return this.accessKey;
    }

    /**
     * The unique name of the Azure Storage account to add.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The unique name of the Azure Storage account to add.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The optional suffix for the storage account.
     * 
     */
    @Import(name="suffix")
    private @Nullable Output<String> suffix;

    /**
     * @return The optional suffix for the storage account.
     * 
     */
    public Optional<Output<String>> suffix() {
        return Optional.ofNullable(this.suffix);
    }

    private AddStorageAccountWithAccountParametersArgs() {}

    private AddStorageAccountWithAccountParametersArgs(AddStorageAccountWithAccountParametersArgs $) {
        this.accessKey = $.accessKey;
        this.name = $.name;
        this.suffix = $.suffix;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AddStorageAccountWithAccountParametersArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AddStorageAccountWithAccountParametersArgs $;

        public Builder() {
            $ = new AddStorageAccountWithAccountParametersArgs();
        }

        public Builder(AddStorageAccountWithAccountParametersArgs defaults) {
            $ = new AddStorageAccountWithAccountParametersArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessKey The access key associated with this Azure Storage account that will be used to connect to it.
         * 
         * @return builder
         * 
         */
        public Builder accessKey(Output<String> accessKey) {
            $.accessKey = accessKey;
            return this;
        }

        /**
         * @param accessKey The access key associated with this Azure Storage account that will be used to connect to it.
         * 
         * @return builder
         * 
         */
        public Builder accessKey(String accessKey) {
            return accessKey(Output.of(accessKey));
        }

        /**
         * @param name The unique name of the Azure Storage account to add.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The unique name of the Azure Storage account to add.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param suffix The optional suffix for the storage account.
         * 
         * @return builder
         * 
         */
        public Builder suffix(@Nullable Output<String> suffix) {
            $.suffix = suffix;
            return this;
        }

        /**
         * @param suffix The optional suffix for the storage account.
         * 
         * @return builder
         * 
         */
        public Builder suffix(String suffix) {
            return suffix(Output.of(suffix));
        }

        public AddStorageAccountWithAccountParametersArgs build() {
            $.accessKey = Objects.requireNonNull($.accessKey, "expected parameter 'accessKey' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.suffix = Codegen.stringProp("suffix").output().arg($.suffix).def("azuredatalakestore.net").getNullable();
            return $;
        }
    }

}
