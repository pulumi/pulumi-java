// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.edgeorder.inputs;

import com.pulumi.azurenative.edgeorder.inputs.CustomerSubscriptionDetails;
import com.pulumi.azurenative.edgeorder.inputs.FilterableProperty;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ListProductFamiliesPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final ListProductFamiliesPlainArgs Empty = new ListProductFamiliesPlainArgs();

    /**
     * Customer subscription properties. Clients can display available products to unregistered customers by explicitly passing subscription details
     * 
     */
    @Import(name="customerSubscriptionDetails")
    private @Nullable CustomerSubscriptionDetails customerSubscriptionDetails;

    /**
     * @return Customer subscription properties. Clients can display available products to unregistered customers by explicitly passing subscription details
     * 
     */
    public Optional<CustomerSubscriptionDetails> customerSubscriptionDetails() {
        return Optional.ofNullable(this.customerSubscriptionDetails);
    }

    /**
     * $expand is supported on configurations parameter for product, which provides details on the configurations for the product.
     * 
     */
    @Import(name="expand")
    private @Nullable String expand;

    /**
     * @return $expand is supported on configurations parameter for product, which provides details on the configurations for the product.
     * 
     */
    public Optional<String> expand() {
        return Optional.ofNullable(this.expand);
    }

    /**
     * Dictionary of filterable properties on product family.
     * 
     */
    @Import(name="filterableProperties", required=true)
    private Map<String,List<FilterableProperty>> filterableProperties;

    /**
     * @return Dictionary of filterable properties on product family.
     * 
     */
    public Map<String,List<FilterableProperty>> filterableProperties() {
        return this.filterableProperties;
    }

    /**
     * $skipToken is supported on list of product families, which provides the next page in the list of product families.
     * 
     */
    @Import(name="skipToken")
    private @Nullable String skipToken;

    /**
     * @return $skipToken is supported on list of product families, which provides the next page in the list of product families.
     * 
     */
    public Optional<String> skipToken() {
        return Optional.ofNullable(this.skipToken);
    }

    private ListProductFamiliesPlainArgs() {}

    private ListProductFamiliesPlainArgs(ListProductFamiliesPlainArgs $) {
        this.customerSubscriptionDetails = $.customerSubscriptionDetails;
        this.expand = $.expand;
        this.filterableProperties = $.filterableProperties;
        this.skipToken = $.skipToken;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ListProductFamiliesPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ListProductFamiliesPlainArgs $;

        public Builder() {
            $ = new ListProductFamiliesPlainArgs();
        }

        public Builder(ListProductFamiliesPlainArgs defaults) {
            $ = new ListProductFamiliesPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param customerSubscriptionDetails Customer subscription properties. Clients can display available products to unregistered customers by explicitly passing subscription details
         * 
         * @return builder
         * 
         */
        public Builder customerSubscriptionDetails(@Nullable CustomerSubscriptionDetails customerSubscriptionDetails) {
            $.customerSubscriptionDetails = customerSubscriptionDetails;
            return this;
        }

        /**
         * @param expand $expand is supported on configurations parameter for product, which provides details on the configurations for the product.
         * 
         * @return builder
         * 
         */
        public Builder expand(@Nullable String expand) {
            $.expand = expand;
            return this;
        }

        /**
         * @param filterableProperties Dictionary of filterable properties on product family.
         * 
         * @return builder
         * 
         */
        public Builder filterableProperties(Map<String,List<FilterableProperty>> filterableProperties) {
            $.filterableProperties = filterableProperties;
            return this;
        }

        /**
         * @param skipToken $skipToken is supported on list of product families, which provides the next page in the list of product families.
         * 
         * @return builder
         * 
         */
        public Builder skipToken(@Nullable String skipToken) {
            $.skipToken = skipToken;
            return this;
        }

        public ListProductFamiliesPlainArgs build() {
            $.filterableProperties = Objects.requireNonNull($.filterableProperties, "expected parameter 'filterableProperties' to be non-null");
            return $;
        }
    }

}
