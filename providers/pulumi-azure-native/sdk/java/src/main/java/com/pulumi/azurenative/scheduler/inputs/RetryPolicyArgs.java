// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.scheduler.inputs;

import com.pulumi.azurenative.scheduler.enums.RetryType;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RetryPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final RetryPolicyArgs Empty = new RetryPolicyArgs();

    /**
     * Gets or sets the number of times a retry should be attempted.
     * 
     */
    @Import(name="retryCount")
    private @Nullable Output<Integer> retryCount;

    /**
     * @return Gets or sets the number of times a retry should be attempted.
     * 
     */
    public Optional<Output<Integer>> retryCount() {
        return Optional.ofNullable(this.retryCount);
    }

    /**
     * Gets or sets the retry interval between retries, specify duration in ISO 8601 format.
     * 
     */
    @Import(name="retryInterval")
    private @Nullable Output<String> retryInterval;

    /**
     * @return Gets or sets the retry interval between retries, specify duration in ISO 8601 format.
     * 
     */
    public Optional<Output<String>> retryInterval() {
        return Optional.ofNullable(this.retryInterval);
    }

    /**
     * Gets or sets the retry strategy to be used.
     * 
     */
    @Import(name="retryType")
    private @Nullable Output<RetryType> retryType;

    /**
     * @return Gets or sets the retry strategy to be used.
     * 
     */
    public Optional<Output<RetryType>> retryType() {
        return Optional.ofNullable(this.retryType);
    }

    private RetryPolicyArgs() {}

    private RetryPolicyArgs(RetryPolicyArgs $) {
        this.retryCount = $.retryCount;
        this.retryInterval = $.retryInterval;
        this.retryType = $.retryType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RetryPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RetryPolicyArgs $;

        public Builder() {
            $ = new RetryPolicyArgs();
        }

        public Builder(RetryPolicyArgs defaults) {
            $ = new RetryPolicyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param retryCount Gets or sets the number of times a retry should be attempted.
         * 
         * @return builder
         * 
         */
        public Builder retryCount(@Nullable Output<Integer> retryCount) {
            $.retryCount = retryCount;
            return this;
        }

        /**
         * @param retryCount Gets or sets the number of times a retry should be attempted.
         * 
         * @return builder
         * 
         */
        public Builder retryCount(Integer retryCount) {
            return retryCount(Output.of(retryCount));
        }

        /**
         * @param retryInterval Gets or sets the retry interval between retries, specify duration in ISO 8601 format.
         * 
         * @return builder
         * 
         */
        public Builder retryInterval(@Nullable Output<String> retryInterval) {
            $.retryInterval = retryInterval;
            return this;
        }

        /**
         * @param retryInterval Gets or sets the retry interval between retries, specify duration in ISO 8601 format.
         * 
         * @return builder
         * 
         */
        public Builder retryInterval(String retryInterval) {
            return retryInterval(Output.of(retryInterval));
        }

        /**
         * @param retryType Gets or sets the retry strategy to be used.
         * 
         * @return builder
         * 
         */
        public Builder retryType(@Nullable Output<RetryType> retryType) {
            $.retryType = retryType;
            return this;
        }

        /**
         * @param retryType Gets or sets the retry strategy to be used.
         * 
         * @return builder
         * 
         */
        public Builder retryType(RetryType retryType) {
            return retryType(Output.of(retryType));
        }

        public RetryPolicyArgs build() {
            return $;
        }
    }

}
