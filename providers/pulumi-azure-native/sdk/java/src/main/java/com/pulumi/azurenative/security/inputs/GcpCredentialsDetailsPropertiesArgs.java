// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.security.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;


/**
 * GCP cloud account connector based service to service credentials, the credentials are composed of the organization ID and a JSON API key (write only)
 * 
 */
public final class GcpCredentialsDetailsPropertiesArgs extends com.pulumi.resources.ResourceArgs {

    public static final GcpCredentialsDetailsPropertiesArgs Empty = new GcpCredentialsDetailsPropertiesArgs();

    /**
     * Auth provider x509 certificate URL field of the API key (write only)
     * 
     */
    @Import(name="authProviderX509CertUrl", required=true)
    private Output<String> authProviderX509CertUrl;

    public Output<String> authProviderX509CertUrl() {
        return this.authProviderX509CertUrl;
    }

    /**
     * Auth URI field of the API key (write only)
     * 
     */
    @Import(name="authUri", required=true)
    private Output<String> authUri;

    public Output<String> authUri() {
        return this.authUri;
    }

    /**
     * Connect to your cloud account, for AWS use either account credentials or role-based authentication. For GCP use account organization credentials.
     * Expected value is &#39;gcpCredentials&#39;.
     * 
     */
    @Import(name="authenticationType", required=true)
    private Output<String> authenticationType;

    public Output<String> authenticationType() {
        return this.authenticationType;
    }

    /**
     * Client email field of the API key (write only)
     * 
     */
    @Import(name="clientEmail", required=true)
    private Output<String> clientEmail;

    public Output<String> clientEmail() {
        return this.clientEmail;
    }

    /**
     * Client ID field of the API key (write only)
     * 
     */
    @Import(name="clientId", required=true)
    private Output<String> clientId;

    public Output<String> clientId() {
        return this.clientId;
    }

    /**
     * Client x509 certificate URL field of the API key (write only)
     * 
     */
    @Import(name="clientX509CertUrl", required=true)
    private Output<String> clientX509CertUrl;

    public Output<String> clientX509CertUrl() {
        return this.clientX509CertUrl;
    }

    /**
     * The organization ID of the GCP cloud account
     * 
     */
    @Import(name="organizationId", required=true)
    private Output<String> organizationId;

    public Output<String> organizationId() {
        return this.organizationId;
    }

    /**
     * Private key field of the API key (write only)
     * 
     */
    @Import(name="privateKey", required=true)
    private Output<String> privateKey;

    public Output<String> privateKey() {
        return this.privateKey;
    }

    /**
     * Private key ID field of the API key (write only)
     * 
     */
    @Import(name="privateKeyId", required=true)
    private Output<String> privateKeyId;

    public Output<String> privateKeyId() {
        return this.privateKeyId;
    }

    /**
     * Project ID field of the API key (write only)
     * 
     */
    @Import(name="projectId", required=true)
    private Output<String> projectId;

    public Output<String> projectId() {
        return this.projectId;
    }

    /**
     * Token URI field of the API key (write only)
     * 
     */
    @Import(name="tokenUri", required=true)
    private Output<String> tokenUri;

    public Output<String> tokenUri() {
        return this.tokenUri;
    }

    /**
     * Type field of the API key (write only)
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    private GcpCredentialsDetailsPropertiesArgs() {}

    private GcpCredentialsDetailsPropertiesArgs(GcpCredentialsDetailsPropertiesArgs $) {
        this.authProviderX509CertUrl = $.authProviderX509CertUrl;
        this.authUri = $.authUri;
        this.authenticationType = $.authenticationType;
        this.clientEmail = $.clientEmail;
        this.clientId = $.clientId;
        this.clientX509CertUrl = $.clientX509CertUrl;
        this.organizationId = $.organizationId;
        this.privateKey = $.privateKey;
        this.privateKeyId = $.privateKeyId;
        this.projectId = $.projectId;
        this.tokenUri = $.tokenUri;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GcpCredentialsDetailsPropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GcpCredentialsDetailsPropertiesArgs $;

        public Builder() {
            $ = new GcpCredentialsDetailsPropertiesArgs();
        }

        public Builder(GcpCredentialsDetailsPropertiesArgs defaults) {
            $ = new GcpCredentialsDetailsPropertiesArgs(Objects.requireNonNull(defaults));
        }

        public Builder authProviderX509CertUrl(Output<String> authProviderX509CertUrl) {
            $.authProviderX509CertUrl = authProviderX509CertUrl;
            return this;
        }

        public Builder authProviderX509CertUrl(String authProviderX509CertUrl) {
            return authProviderX509CertUrl(Output.of(authProviderX509CertUrl));
        }

        public Builder authUri(Output<String> authUri) {
            $.authUri = authUri;
            return this;
        }

        public Builder authUri(String authUri) {
            return authUri(Output.of(authUri));
        }

        public Builder authenticationType(Output<String> authenticationType) {
            $.authenticationType = authenticationType;
            return this;
        }

        public Builder authenticationType(String authenticationType) {
            return authenticationType(Output.of(authenticationType));
        }

        public Builder clientEmail(Output<String> clientEmail) {
            $.clientEmail = clientEmail;
            return this;
        }

        public Builder clientEmail(String clientEmail) {
            return clientEmail(Output.of(clientEmail));
        }

        public Builder clientId(Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        public Builder clientX509CertUrl(Output<String> clientX509CertUrl) {
            $.clientX509CertUrl = clientX509CertUrl;
            return this;
        }

        public Builder clientX509CertUrl(String clientX509CertUrl) {
            return clientX509CertUrl(Output.of(clientX509CertUrl));
        }

        public Builder organizationId(Output<String> organizationId) {
            $.organizationId = organizationId;
            return this;
        }

        public Builder organizationId(String organizationId) {
            return organizationId(Output.of(organizationId));
        }

        public Builder privateKey(Output<String> privateKey) {
            $.privateKey = privateKey;
            return this;
        }

        public Builder privateKey(String privateKey) {
            return privateKey(Output.of(privateKey));
        }

        public Builder privateKeyId(Output<String> privateKeyId) {
            $.privateKeyId = privateKeyId;
            return this;
        }

        public Builder privateKeyId(String privateKeyId) {
            return privateKeyId(Output.of(privateKeyId));
        }

        public Builder projectId(Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        public Builder tokenUri(Output<String> tokenUri) {
            $.tokenUri = tokenUri;
            return this;
        }

        public Builder tokenUri(String tokenUri) {
            return tokenUri(Output.of(tokenUri));
        }

        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public GcpCredentialsDetailsPropertiesArgs build() {
            $.authProviderX509CertUrl = Objects.requireNonNull($.authProviderX509CertUrl, "expected parameter 'authProviderX509CertUrl' to be non-null");
            $.authUri = Objects.requireNonNull($.authUri, "expected parameter 'authUri' to be non-null");
            $.authenticationType = Codegen.stringProp("authenticationType").output().arg($.authenticationType).require();
            $.clientEmail = Objects.requireNonNull($.clientEmail, "expected parameter 'clientEmail' to be non-null");
            $.clientId = Objects.requireNonNull($.clientId, "expected parameter 'clientId' to be non-null");
            $.clientX509CertUrl = Objects.requireNonNull($.clientX509CertUrl, "expected parameter 'clientX509CertUrl' to be non-null");
            $.organizationId = Objects.requireNonNull($.organizationId, "expected parameter 'organizationId' to be non-null");
            $.privateKey = Objects.requireNonNull($.privateKey, "expected parameter 'privateKey' to be non-null");
            $.privateKeyId = Objects.requireNonNull($.privateKeyId, "expected parameter 'privateKeyId' to be non-null");
            $.projectId = Objects.requireNonNull($.projectId, "expected parameter 'projectId' to be non-null");
            $.tokenUri = Objects.requireNonNull($.tokenUri, "expected parameter 'tokenUri' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
