// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.containerservice.inputs;

import com.pulumi.azurenative.containerservice.inputs.AgentPoolUpgradeSettingsResponse;
import com.pulumi.azurenative.containerservice.inputs.KubeletConfigResponse;
import com.pulumi.azurenative.containerservice.inputs.LinuxOSConfigResponse;
import com.pulumi.azurenative.containerservice.inputs.PowerStateResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Profile for the container service agent pool.
 * 
 */
public final class ManagedClusterAgentPoolProfileResponse extends com.pulumi.resources.InvokeArgs {

    public static final ManagedClusterAgentPoolProfileResponse Empty = new ManagedClusterAgentPoolProfileResponse();

    /**
     * Availability zones for nodes. Must use VirtualMachineScaleSets AgentPoolType.
     * 
     */
    @Import(name="availabilityZones")
    private @Nullable List<String> availabilityZones;

    public Optional<List<String>> availabilityZones() {
        return Optional.ofNullable(this.availabilityZones);
    }

    /**
     * Number of agents (VMs) to host docker containers. Allowed values must be in the range of 0 to 100 (inclusive) for user pools and in the range of 1 to 100 (inclusive) for system pools. The default value is 1.
     * 
     */
    @Import(name="count")
    private @Nullable Integer count;

    public Optional<Integer> count() {
        return Optional.ofNullable(this.count);
    }

    /**
     * Whether to enable auto-scaler
     * 
     */
    @Import(name="enableAutoScaling")
    private @Nullable Boolean enableAutoScaling;

    public Optional<Boolean> enableAutoScaling() {
        return Optional.ofNullable(this.enableAutoScaling);
    }

    /**
     * Whether to enable EncryptionAtHost
     * 
     */
    @Import(name="enableEncryptionAtHost")
    private @Nullable Boolean enableEncryptionAtHost;

    public Optional<Boolean> enableEncryptionAtHost() {
        return Optional.ofNullable(this.enableEncryptionAtHost);
    }

    /**
     * Whether to use FIPS enabled OS
     * 
     */
    @Import(name="enableFIPS")
    private @Nullable Boolean enableFIPS;

    public Optional<Boolean> enableFIPS() {
        return Optional.ofNullable(this.enableFIPS);
    }

    /**
     * Enable public IP for nodes
     * 
     */
    @Import(name="enableNodePublicIP")
    private @Nullable Boolean enableNodePublicIP;

    public Optional<Boolean> enableNodePublicIP() {
        return Optional.ofNullable(this.enableNodePublicIP);
    }

    /**
     * GPUInstanceProfile to be used to specify GPU MIG instance profile for supported GPU VM SKU. Supported values are MIG1g, MIG2g, MIG3g, MIG4g and MIG7g.
     * 
     */
    @Import(name="gpuInstanceProfile")
    private @Nullable String gpuInstanceProfile;

    public Optional<String> gpuInstanceProfile() {
        return Optional.ofNullable(this.gpuInstanceProfile);
    }

    /**
     * KubeletConfig specifies the configuration of kubelet on agent nodes.
     * 
     */
    @Import(name="kubeletConfig")
    private @Nullable KubeletConfigResponse kubeletConfig;

    public Optional<KubeletConfigResponse> kubeletConfig() {
        return Optional.ofNullable(this.kubeletConfig);
    }

    /**
     * KubeletDiskType determines the placement of emptyDir volumes, container runtime data root, and Kubelet ephemeral storage. Currently allows one value, OS, resulting in Kubelet using the OS disk for data.
     * 
     */
    @Import(name="kubeletDiskType")
    private @Nullable String kubeletDiskType;

    public Optional<String> kubeletDiskType() {
        return Optional.ofNullable(this.kubeletDiskType);
    }

    /**
     * LinuxOSConfig specifies the OS configuration of linux agent nodes.
     * 
     */
    @Import(name="linuxOSConfig")
    private @Nullable LinuxOSConfigResponse linuxOSConfig;

    public Optional<LinuxOSConfigResponse> linuxOSConfig() {
        return Optional.ofNullable(this.linuxOSConfig);
    }

    /**
     * Maximum number of nodes for auto-scaling
     * 
     */
    @Import(name="maxCount")
    private @Nullable Integer maxCount;

    public Optional<Integer> maxCount() {
        return Optional.ofNullable(this.maxCount);
    }

    /**
     * Maximum number of pods that can run on a node.
     * 
     */
    @Import(name="maxPods")
    private @Nullable Integer maxPods;

    public Optional<Integer> maxPods() {
        return Optional.ofNullable(this.maxPods);
    }

    /**
     * Minimum number of nodes for auto-scaling
     * 
     */
    @Import(name="minCount")
    private @Nullable Integer minCount;

    public Optional<Integer> minCount() {
        return Optional.ofNullable(this.minCount);
    }

    /**
     * AgentPoolMode represents mode of an agent pool
     * 
     */
    @Import(name="mode")
    private @Nullable String mode;

    public Optional<String> mode() {
        return Optional.ofNullable(this.mode);
    }

    /**
     * Unique name of the agent pool profile in the context of the subscription and resource group.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    public String name() {
        return this.name;
    }

    /**
     * Version of node image
     * 
     */
    @Import(name="nodeImageVersion", required=true)
    private String nodeImageVersion;

    public String nodeImageVersion() {
        return this.nodeImageVersion;
    }

    /**
     * Agent pool node labels to be persisted across all nodes in agent pool.
     * 
     */
    @Import(name="nodeLabels")
    private @Nullable Map<String,String> nodeLabels;

    public Optional<Map<String,String>> nodeLabels() {
        return Optional.ofNullable(this.nodeLabels);
    }

    /**
     * Public IP Prefix ID. VM nodes use IPs assigned from this Public IP Prefix.
     * 
     */
    @Import(name="nodePublicIPPrefixID")
    private @Nullable String nodePublicIPPrefixID;

    public Optional<String> nodePublicIPPrefixID() {
        return Optional.ofNullable(this.nodePublicIPPrefixID);
    }

    /**
     * Taints added to new nodes during node pool create and scale. For example, key=value:NoSchedule.
     * 
     */
    @Import(name="nodeTaints")
    private @Nullable List<String> nodeTaints;

    public Optional<List<String>> nodeTaints() {
        return Optional.ofNullable(this.nodeTaints);
    }

    /**
     * Version of orchestrator specified when creating the managed cluster.
     * 
     */
    @Import(name="orchestratorVersion")
    private @Nullable String orchestratorVersion;

    public Optional<String> orchestratorVersion() {
        return Optional.ofNullable(this.orchestratorVersion);
    }

    /**
     * OS Disk Size in GB to be used to specify the disk size for every machine in this master/agent pool. If you specify 0, it will apply the default osDisk size according to the vmSize specified.
     * 
     */
    @Import(name="osDiskSizeGB")
    private @Nullable Integer osDiskSizeGB;

    public Optional<Integer> osDiskSizeGB() {
        return Optional.ofNullable(this.osDiskSizeGB);
    }

    /**
     * OS disk type to be used for machines in a given agent pool. Allowed values are &#39;Ephemeral&#39; and &#39;Managed&#39;. If unspecified, defaults to &#39;Ephemeral&#39; when the VM supports ephemeral OS and has a cache disk larger than the requested OSDiskSizeGB. Otherwise, defaults to &#39;Managed&#39;. May not be changed after creation.
     * 
     */
    @Import(name="osDiskType")
    private @Nullable String osDiskType;

    public Optional<String> osDiskType() {
        return Optional.ofNullable(this.osDiskType);
    }

    /**
     * OsSKU to be used to specify os sku. Choose from Ubuntu(default) and CBLMariner for Linux OSType. Not applicable to Windows OSType.
     * 
     */
    @Import(name="osSKU")
    private @Nullable String osSKU;

    public Optional<String> osSKU() {
        return Optional.ofNullable(this.osSKU);
    }

    /**
     * OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux.
     * 
     */
    @Import(name="osType")
    private @Nullable String osType;

    public Optional<String> osType() {
        return Optional.ofNullable(this.osType);
    }

    /**
     * Pod SubnetID specifies the VNet&#39;s subnet identifier for pods.
     * 
     */
    @Import(name="podSubnetID")
    private @Nullable String podSubnetID;

    public Optional<String> podSubnetID() {
        return Optional.ofNullable(this.podSubnetID);
    }

    /**
     * Describes whether the Agent Pool is Running or Stopped
     * 
     */
    @Import(name="powerState", required=true)
    private PowerStateResponse powerState;

    public PowerStateResponse powerState() {
        return this.powerState;
    }

    /**
     * The current deployment or provisioning state, which only appears in the response.
     * 
     */
    @Import(name="provisioningState", required=true)
    private String provisioningState;

    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * The ID for Proximity Placement Group.
     * 
     */
    @Import(name="proximityPlacementGroupID")
    private @Nullable String proximityPlacementGroupID;

    public Optional<String> proximityPlacementGroupID() {
        return Optional.ofNullable(this.proximityPlacementGroupID);
    }

    /**
     * ScaleSetEvictionPolicy to be used to specify eviction policy for Spot virtual machine scale set. Default to Delete.
     * 
     */
    @Import(name="scaleSetEvictionPolicy")
    private @Nullable String scaleSetEvictionPolicy;

    public Optional<String> scaleSetEvictionPolicy() {
        return Optional.ofNullable(this.scaleSetEvictionPolicy);
    }

    /**
     * ScaleSetPriority to be used to specify virtual machine scale set priority. Default to regular.
     * 
     */
    @Import(name="scaleSetPriority")
    private @Nullable String scaleSetPriority;

    public Optional<String> scaleSetPriority() {
        return Optional.ofNullable(this.scaleSetPriority);
    }

    /**
     * SpotMaxPrice to be used to specify the maximum price you are willing to pay in US Dollars. Possible values are any decimal value greater than zero or -1 which indicates default price to be up-to on-demand.
     * 
     */
    @Import(name="spotMaxPrice")
    private @Nullable Double spotMaxPrice;

    public Optional<Double> spotMaxPrice() {
        return Optional.ofNullable(this.spotMaxPrice);
    }

    /**
     * Agent pool tags to be persisted on the agent pool virtual machine scale set.
     * 
     */
    @Import(name="tags")
    private @Nullable Map<String,String> tags;

    public Optional<Map<String,String>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * AgentPoolType represents types of an agent pool
     * 
     */
    @Import(name="type")
    private @Nullable String type;

    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * Settings for upgrading the agentpool
     * 
     */
    @Import(name="upgradeSettings")
    private @Nullable AgentPoolUpgradeSettingsResponse upgradeSettings;

    public Optional<AgentPoolUpgradeSettingsResponse> upgradeSettings() {
        return Optional.ofNullable(this.upgradeSettings);
    }

    /**
     * Size of agent VMs.
     * 
     */
    @Import(name="vmSize")
    private @Nullable String vmSize;

    public Optional<String> vmSize() {
        return Optional.ofNullable(this.vmSize);
    }

    /**
     * VNet SubnetID specifies the VNet&#39;s subnet identifier for nodes and maybe pods
     * 
     */
    @Import(name="vnetSubnetID")
    private @Nullable String vnetSubnetID;

    public Optional<String> vnetSubnetID() {
        return Optional.ofNullable(this.vnetSubnetID);
    }

    private ManagedClusterAgentPoolProfileResponse() {}

    private ManagedClusterAgentPoolProfileResponse(ManagedClusterAgentPoolProfileResponse $) {
        this.availabilityZones = $.availabilityZones;
        this.count = $.count;
        this.enableAutoScaling = $.enableAutoScaling;
        this.enableEncryptionAtHost = $.enableEncryptionAtHost;
        this.enableFIPS = $.enableFIPS;
        this.enableNodePublicIP = $.enableNodePublicIP;
        this.gpuInstanceProfile = $.gpuInstanceProfile;
        this.kubeletConfig = $.kubeletConfig;
        this.kubeletDiskType = $.kubeletDiskType;
        this.linuxOSConfig = $.linuxOSConfig;
        this.maxCount = $.maxCount;
        this.maxPods = $.maxPods;
        this.minCount = $.minCount;
        this.mode = $.mode;
        this.name = $.name;
        this.nodeImageVersion = $.nodeImageVersion;
        this.nodeLabels = $.nodeLabels;
        this.nodePublicIPPrefixID = $.nodePublicIPPrefixID;
        this.nodeTaints = $.nodeTaints;
        this.orchestratorVersion = $.orchestratorVersion;
        this.osDiskSizeGB = $.osDiskSizeGB;
        this.osDiskType = $.osDiskType;
        this.osSKU = $.osSKU;
        this.osType = $.osType;
        this.podSubnetID = $.podSubnetID;
        this.powerState = $.powerState;
        this.provisioningState = $.provisioningState;
        this.proximityPlacementGroupID = $.proximityPlacementGroupID;
        this.scaleSetEvictionPolicy = $.scaleSetEvictionPolicy;
        this.scaleSetPriority = $.scaleSetPriority;
        this.spotMaxPrice = $.spotMaxPrice;
        this.tags = $.tags;
        this.type = $.type;
        this.upgradeSettings = $.upgradeSettings;
        this.vmSize = $.vmSize;
        this.vnetSubnetID = $.vnetSubnetID;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagedClusterAgentPoolProfileResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagedClusterAgentPoolProfileResponse $;

        public Builder() {
            $ = new ManagedClusterAgentPoolProfileResponse();
        }

        public Builder(ManagedClusterAgentPoolProfileResponse defaults) {
            $ = new ManagedClusterAgentPoolProfileResponse(Objects.requireNonNull(defaults));
        }

        public Builder availabilityZones(@Nullable List<String> availabilityZones) {
            $.availabilityZones = availabilityZones;
            return this;
        }

        public Builder availabilityZones(String... availabilityZones) {
            return availabilityZones(List.of(availabilityZones));
        }

        public Builder count(@Nullable Integer count) {
            $.count = count;
            return this;
        }

        public Builder enableAutoScaling(@Nullable Boolean enableAutoScaling) {
            $.enableAutoScaling = enableAutoScaling;
            return this;
        }

        public Builder enableEncryptionAtHost(@Nullable Boolean enableEncryptionAtHost) {
            $.enableEncryptionAtHost = enableEncryptionAtHost;
            return this;
        }

        public Builder enableFIPS(@Nullable Boolean enableFIPS) {
            $.enableFIPS = enableFIPS;
            return this;
        }

        public Builder enableNodePublicIP(@Nullable Boolean enableNodePublicIP) {
            $.enableNodePublicIP = enableNodePublicIP;
            return this;
        }

        public Builder gpuInstanceProfile(@Nullable String gpuInstanceProfile) {
            $.gpuInstanceProfile = gpuInstanceProfile;
            return this;
        }

        public Builder kubeletConfig(@Nullable KubeletConfigResponse kubeletConfig) {
            $.kubeletConfig = kubeletConfig;
            return this;
        }

        public Builder kubeletDiskType(@Nullable String kubeletDiskType) {
            $.kubeletDiskType = kubeletDiskType;
            return this;
        }

        public Builder linuxOSConfig(@Nullable LinuxOSConfigResponse linuxOSConfig) {
            $.linuxOSConfig = linuxOSConfig;
            return this;
        }

        public Builder maxCount(@Nullable Integer maxCount) {
            $.maxCount = maxCount;
            return this;
        }

        public Builder maxPods(@Nullable Integer maxPods) {
            $.maxPods = maxPods;
            return this;
        }

        public Builder minCount(@Nullable Integer minCount) {
            $.minCount = minCount;
            return this;
        }

        public Builder mode(@Nullable String mode) {
            $.mode = mode;
            return this;
        }

        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public Builder nodeImageVersion(String nodeImageVersion) {
            $.nodeImageVersion = nodeImageVersion;
            return this;
        }

        public Builder nodeLabels(@Nullable Map<String,String> nodeLabels) {
            $.nodeLabels = nodeLabels;
            return this;
        }

        public Builder nodePublicIPPrefixID(@Nullable String nodePublicIPPrefixID) {
            $.nodePublicIPPrefixID = nodePublicIPPrefixID;
            return this;
        }

        public Builder nodeTaints(@Nullable List<String> nodeTaints) {
            $.nodeTaints = nodeTaints;
            return this;
        }

        public Builder nodeTaints(String... nodeTaints) {
            return nodeTaints(List.of(nodeTaints));
        }

        public Builder orchestratorVersion(@Nullable String orchestratorVersion) {
            $.orchestratorVersion = orchestratorVersion;
            return this;
        }

        public Builder osDiskSizeGB(@Nullable Integer osDiskSizeGB) {
            $.osDiskSizeGB = osDiskSizeGB;
            return this;
        }

        public Builder osDiskType(@Nullable String osDiskType) {
            $.osDiskType = osDiskType;
            return this;
        }

        public Builder osSKU(@Nullable String osSKU) {
            $.osSKU = osSKU;
            return this;
        }

        public Builder osType(@Nullable String osType) {
            $.osType = osType;
            return this;
        }

        public Builder podSubnetID(@Nullable String podSubnetID) {
            $.podSubnetID = podSubnetID;
            return this;
        }

        public Builder powerState(PowerStateResponse powerState) {
            $.powerState = powerState;
            return this;
        }

        public Builder provisioningState(String provisioningState) {
            $.provisioningState = provisioningState;
            return this;
        }

        public Builder proximityPlacementGroupID(@Nullable String proximityPlacementGroupID) {
            $.proximityPlacementGroupID = proximityPlacementGroupID;
            return this;
        }

        public Builder scaleSetEvictionPolicy(@Nullable String scaleSetEvictionPolicy) {
            $.scaleSetEvictionPolicy = scaleSetEvictionPolicy;
            return this;
        }

        public Builder scaleSetPriority(@Nullable String scaleSetPriority) {
            $.scaleSetPriority = scaleSetPriority;
            return this;
        }

        public Builder spotMaxPrice(@Nullable Double spotMaxPrice) {
            $.spotMaxPrice = spotMaxPrice;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            $.tags = tags;
            return this;
        }

        public Builder type(@Nullable String type) {
            $.type = type;
            return this;
        }

        public Builder upgradeSettings(@Nullable AgentPoolUpgradeSettingsResponse upgradeSettings) {
            $.upgradeSettings = upgradeSettings;
            return this;
        }

        public Builder vmSize(@Nullable String vmSize) {
            $.vmSize = vmSize;
            return this;
        }

        public Builder vnetSubnetID(@Nullable String vnetSubnetID) {
            $.vnetSubnetID = vnetSubnetID;
            return this;
        }

        public ManagedClusterAgentPoolProfileResponse build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.nodeImageVersion = Objects.requireNonNull($.nodeImageVersion, "expected parameter 'nodeImageVersion' to be non-null");
            $.powerState = Objects.requireNonNull($.powerState, "expected parameter 'powerState' to be non-null");
            $.provisioningState = Objects.requireNonNull($.provisioningState, "expected parameter 'provisioningState' to be non-null");
            return $;
        }
    }

}
