// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.containerservice.inputs;

import com.pulumi.azurenative.containerservice.inputs.AgentPoolUpgradeSettingsResponse;
import com.pulumi.azurenative.containerservice.inputs.KubeletConfigResponse;
import com.pulumi.azurenative.containerservice.inputs.LinuxOSConfigResponse;
import com.pulumi.azurenative.containerservice.inputs.PowerStateResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Profile for the container service agent pool.
 * 
 */
public final class ManagedClusterAgentPoolProfileResponse extends com.pulumi.resources.InvokeArgs {

    public static final ManagedClusterAgentPoolProfileResponse Empty = new ManagedClusterAgentPoolProfileResponse();

    /**
     * Availability zones for nodes. Must use VirtualMachineScaleSets AgentPoolType.
     * 
     */
    @Import(name="availabilityZones")
    private @Nullable List<String> availabilityZones;

    /**
     * @return Availability zones for nodes. Must use VirtualMachineScaleSets AgentPoolType.
     * 
     */
    public Optional<List<String>> availabilityZones() {
        return Optional.ofNullable(this.availabilityZones);
    }

    /**
     * Number of agents (VMs) to host docker containers. Allowed values must be in the range of 0 to 100 (inclusive) for user pools and in the range of 1 to 100 (inclusive) for system pools. The default value is 1.
     * 
     */
    @Import(name="count")
    private @Nullable Integer count;

    /**
     * @return Number of agents (VMs) to host docker containers. Allowed values must be in the range of 0 to 100 (inclusive) for user pools and in the range of 1 to 100 (inclusive) for system pools. The default value is 1.
     * 
     */
    public Optional<Integer> count() {
        return Optional.ofNullable(this.count);
    }

    /**
     * Whether to enable auto-scaler
     * 
     */
    @Import(name="enableAutoScaling")
    private @Nullable Boolean enableAutoScaling;

    /**
     * @return Whether to enable auto-scaler
     * 
     */
    public Optional<Boolean> enableAutoScaling() {
        return Optional.ofNullable(this.enableAutoScaling);
    }

    /**
     * Whether to enable EncryptionAtHost
     * 
     */
    @Import(name="enableEncryptionAtHost")
    private @Nullable Boolean enableEncryptionAtHost;

    /**
     * @return Whether to enable EncryptionAtHost
     * 
     */
    public Optional<Boolean> enableEncryptionAtHost() {
        return Optional.ofNullable(this.enableEncryptionAtHost);
    }

    /**
     * Whether to use FIPS enabled OS
     * 
     */
    @Import(name="enableFIPS")
    private @Nullable Boolean enableFIPS;

    /**
     * @return Whether to use FIPS enabled OS
     * 
     */
    public Optional<Boolean> enableFIPS() {
        return Optional.ofNullable(this.enableFIPS);
    }

    /**
     * Enable public IP for nodes
     * 
     */
    @Import(name="enableNodePublicIP")
    private @Nullable Boolean enableNodePublicIP;

    /**
     * @return Enable public IP for nodes
     * 
     */
    public Optional<Boolean> enableNodePublicIP() {
        return Optional.ofNullable(this.enableNodePublicIP);
    }

    /**
     * GPUInstanceProfile to be used to specify GPU MIG instance profile for supported GPU VM SKU. Supported values are MIG1g, MIG2g, MIG3g, MIG4g and MIG7g.
     * 
     */
    @Import(name="gpuInstanceProfile")
    private @Nullable String gpuInstanceProfile;

    /**
     * @return GPUInstanceProfile to be used to specify GPU MIG instance profile for supported GPU VM SKU. Supported values are MIG1g, MIG2g, MIG3g, MIG4g and MIG7g.
     * 
     */
    public Optional<String> gpuInstanceProfile() {
        return Optional.ofNullable(this.gpuInstanceProfile);
    }

    /**
     * KubeletConfig specifies the configuration of kubelet on agent nodes.
     * 
     */
    @Import(name="kubeletConfig")
    private @Nullable KubeletConfigResponse kubeletConfig;

    /**
     * @return KubeletConfig specifies the configuration of kubelet on agent nodes.
     * 
     */
    public Optional<KubeletConfigResponse> kubeletConfig() {
        return Optional.ofNullable(this.kubeletConfig);
    }

    /**
     * KubeletDiskType determines the placement of emptyDir volumes, container runtime data root, and Kubelet ephemeral storage. Currently allows one value, OS, resulting in Kubelet using the OS disk for data.
     * 
     */
    @Import(name="kubeletDiskType")
    private @Nullable String kubeletDiskType;

    /**
     * @return KubeletDiskType determines the placement of emptyDir volumes, container runtime data root, and Kubelet ephemeral storage. Currently allows one value, OS, resulting in Kubelet using the OS disk for data.
     * 
     */
    public Optional<String> kubeletDiskType() {
        return Optional.ofNullable(this.kubeletDiskType);
    }

    /**
     * LinuxOSConfig specifies the OS configuration of linux agent nodes.
     * 
     */
    @Import(name="linuxOSConfig")
    private @Nullable LinuxOSConfigResponse linuxOSConfig;

    /**
     * @return LinuxOSConfig specifies the OS configuration of linux agent nodes.
     * 
     */
    public Optional<LinuxOSConfigResponse> linuxOSConfig() {
        return Optional.ofNullable(this.linuxOSConfig);
    }

    /**
     * Maximum number of nodes for auto-scaling
     * 
     */
    @Import(name="maxCount")
    private @Nullable Integer maxCount;

    /**
     * @return Maximum number of nodes for auto-scaling
     * 
     */
    public Optional<Integer> maxCount() {
        return Optional.ofNullable(this.maxCount);
    }

    /**
     * Maximum number of pods that can run on a node.
     * 
     */
    @Import(name="maxPods")
    private @Nullable Integer maxPods;

    /**
     * @return Maximum number of pods that can run on a node.
     * 
     */
    public Optional<Integer> maxPods() {
        return Optional.ofNullable(this.maxPods);
    }

    /**
     * Minimum number of nodes for auto-scaling
     * 
     */
    @Import(name="minCount")
    private @Nullable Integer minCount;

    /**
     * @return Minimum number of nodes for auto-scaling
     * 
     */
    public Optional<Integer> minCount() {
        return Optional.ofNullable(this.minCount);
    }

    /**
     * AgentPoolMode represents mode of an agent pool
     * 
     */
    @Import(name="mode")
    private @Nullable String mode;

    /**
     * @return AgentPoolMode represents mode of an agent pool
     * 
     */
    public Optional<String> mode() {
        return Optional.ofNullable(this.mode);
    }

    /**
     * Unique name of the agent pool profile in the context of the subscription and resource group.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return Unique name of the agent pool profile in the context of the subscription and resource group.
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * Version of node image
     * 
     */
    @Import(name="nodeImageVersion", required=true)
    private String nodeImageVersion;

    /**
     * @return Version of node image
     * 
     */
    public String nodeImageVersion() {
        return this.nodeImageVersion;
    }

    /**
     * Agent pool node labels to be persisted across all nodes in agent pool.
     * 
     */
    @Import(name="nodeLabels")
    private @Nullable Map<String,String> nodeLabels;

    /**
     * @return Agent pool node labels to be persisted across all nodes in agent pool.
     * 
     */
    public Optional<Map<String,String>> nodeLabels() {
        return Optional.ofNullable(this.nodeLabels);
    }

    /**
     * Public IP Prefix ID. VM nodes use IPs assigned from this Public IP Prefix.
     * 
     */
    @Import(name="nodePublicIPPrefixID")
    private @Nullable String nodePublicIPPrefixID;

    /**
     * @return Public IP Prefix ID. VM nodes use IPs assigned from this Public IP Prefix.
     * 
     */
    public Optional<String> nodePublicIPPrefixID() {
        return Optional.ofNullable(this.nodePublicIPPrefixID);
    }

    /**
     * Taints added to new nodes during node pool create and scale. For example, key=value:NoSchedule.
     * 
     */
    @Import(name="nodeTaints")
    private @Nullable List<String> nodeTaints;

    /**
     * @return Taints added to new nodes during node pool create and scale. For example, key=value:NoSchedule.
     * 
     */
    public Optional<List<String>> nodeTaints() {
        return Optional.ofNullable(this.nodeTaints);
    }

    /**
     * Version of orchestrator specified when creating the managed cluster.
     * 
     */
    @Import(name="orchestratorVersion")
    private @Nullable String orchestratorVersion;

    /**
     * @return Version of orchestrator specified when creating the managed cluster.
     * 
     */
    public Optional<String> orchestratorVersion() {
        return Optional.ofNullable(this.orchestratorVersion);
    }

    /**
     * OS Disk Size in GB to be used to specify the disk size for every machine in this master/agent pool. If you specify 0, it will apply the default osDisk size according to the vmSize specified.
     * 
     */
    @Import(name="osDiskSizeGB")
    private @Nullable Integer osDiskSizeGB;

    /**
     * @return OS Disk Size in GB to be used to specify the disk size for every machine in this master/agent pool. If you specify 0, it will apply the default osDisk size according to the vmSize specified.
     * 
     */
    public Optional<Integer> osDiskSizeGB() {
        return Optional.ofNullable(this.osDiskSizeGB);
    }

    /**
     * OS disk type to be used for machines in a given agent pool. Allowed values are &#39;Ephemeral&#39; and &#39;Managed&#39;. If unspecified, defaults to &#39;Ephemeral&#39; when the VM supports ephemeral OS and has a cache disk larger than the requested OSDiskSizeGB. Otherwise, defaults to &#39;Managed&#39;. May not be changed after creation.
     * 
     */
    @Import(name="osDiskType")
    private @Nullable String osDiskType;

    /**
     * @return OS disk type to be used for machines in a given agent pool. Allowed values are &#39;Ephemeral&#39; and &#39;Managed&#39;. If unspecified, defaults to &#39;Ephemeral&#39; when the VM supports ephemeral OS and has a cache disk larger than the requested OSDiskSizeGB. Otherwise, defaults to &#39;Managed&#39;. May not be changed after creation.
     * 
     */
    public Optional<String> osDiskType() {
        return Optional.ofNullable(this.osDiskType);
    }

    /**
     * OsSKU to be used to specify os sku. Choose from Ubuntu(default) and CBLMariner for Linux OSType. Not applicable to Windows OSType.
     * 
     */
    @Import(name="osSKU")
    private @Nullable String osSKU;

    /**
     * @return OsSKU to be used to specify os sku. Choose from Ubuntu(default) and CBLMariner for Linux OSType. Not applicable to Windows OSType.
     * 
     */
    public Optional<String> osSKU() {
        return Optional.ofNullable(this.osSKU);
    }

    /**
     * OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux.
     * 
     */
    @Import(name="osType")
    private @Nullable String osType;

    /**
     * @return OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux.
     * 
     */
    public Optional<String> osType() {
        return Optional.ofNullable(this.osType);
    }

    /**
     * Pod SubnetID specifies the VNet&#39;s subnet identifier for pods.
     * 
     */
    @Import(name="podSubnetID")
    private @Nullable String podSubnetID;

    /**
     * @return Pod SubnetID specifies the VNet&#39;s subnet identifier for pods.
     * 
     */
    public Optional<String> podSubnetID() {
        return Optional.ofNullable(this.podSubnetID);
    }

    /**
     * Describes whether the Agent Pool is Running or Stopped
     * 
     */
    @Import(name="powerState", required=true)
    private PowerStateResponse powerState;

    /**
     * @return Describes whether the Agent Pool is Running or Stopped
     * 
     */
    public PowerStateResponse powerState() {
        return this.powerState;
    }

    /**
     * The current deployment or provisioning state, which only appears in the response.
     * 
     */
    @Import(name="provisioningState", required=true)
    private String provisioningState;

    /**
     * @return The current deployment or provisioning state, which only appears in the response.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * The ID for Proximity Placement Group.
     * 
     */
    @Import(name="proximityPlacementGroupID")
    private @Nullable String proximityPlacementGroupID;

    /**
     * @return The ID for Proximity Placement Group.
     * 
     */
    public Optional<String> proximityPlacementGroupID() {
        return Optional.ofNullable(this.proximityPlacementGroupID);
    }

    /**
     * ScaleSetEvictionPolicy to be used to specify eviction policy for Spot virtual machine scale set. Default to Delete.
     * 
     */
    @Import(name="scaleSetEvictionPolicy")
    private @Nullable String scaleSetEvictionPolicy;

    /**
     * @return ScaleSetEvictionPolicy to be used to specify eviction policy for Spot virtual machine scale set. Default to Delete.
     * 
     */
    public Optional<String> scaleSetEvictionPolicy() {
        return Optional.ofNullable(this.scaleSetEvictionPolicy);
    }

    /**
     * ScaleSetPriority to be used to specify virtual machine scale set priority. Default to regular.
     * 
     */
    @Import(name="scaleSetPriority")
    private @Nullable String scaleSetPriority;

    /**
     * @return ScaleSetPriority to be used to specify virtual machine scale set priority. Default to regular.
     * 
     */
    public Optional<String> scaleSetPriority() {
        return Optional.ofNullable(this.scaleSetPriority);
    }

    /**
     * SpotMaxPrice to be used to specify the maximum price you are willing to pay in US Dollars. Possible values are any decimal value greater than zero or -1 which indicates default price to be up-to on-demand.
     * 
     */
    @Import(name="spotMaxPrice")
    private @Nullable Double spotMaxPrice;

    /**
     * @return SpotMaxPrice to be used to specify the maximum price you are willing to pay in US Dollars. Possible values are any decimal value greater than zero or -1 which indicates default price to be up-to on-demand.
     * 
     */
    public Optional<Double> spotMaxPrice() {
        return Optional.ofNullable(this.spotMaxPrice);
    }

    /**
     * Agent pool tags to be persisted on the agent pool virtual machine scale set.
     * 
     */
    @Import(name="tags")
    private @Nullable Map<String,String> tags;

    /**
     * @return Agent pool tags to be persisted on the agent pool virtual machine scale set.
     * 
     */
    public Optional<Map<String,String>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * AgentPoolType represents types of an agent pool
     * 
     */
    @Import(name="type")
    private @Nullable String type;

    /**
     * @return AgentPoolType represents types of an agent pool
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * Settings for upgrading the agentpool
     * 
     */
    @Import(name="upgradeSettings")
    private @Nullable AgentPoolUpgradeSettingsResponse upgradeSettings;

    /**
     * @return Settings for upgrading the agentpool
     * 
     */
    public Optional<AgentPoolUpgradeSettingsResponse> upgradeSettings() {
        return Optional.ofNullable(this.upgradeSettings);
    }

    /**
     * Size of agent VMs.
     * 
     */
    @Import(name="vmSize")
    private @Nullable String vmSize;

    /**
     * @return Size of agent VMs.
     * 
     */
    public Optional<String> vmSize() {
        return Optional.ofNullable(this.vmSize);
    }

    /**
     * VNet SubnetID specifies the VNet&#39;s subnet identifier for nodes and maybe pods
     * 
     */
    @Import(name="vnetSubnetID")
    private @Nullable String vnetSubnetID;

    /**
     * @return VNet SubnetID specifies the VNet&#39;s subnet identifier for nodes and maybe pods
     * 
     */
    public Optional<String> vnetSubnetID() {
        return Optional.ofNullable(this.vnetSubnetID);
    }

    private ManagedClusterAgentPoolProfileResponse() {}

    private ManagedClusterAgentPoolProfileResponse(ManagedClusterAgentPoolProfileResponse $) {
        this.availabilityZones = $.availabilityZones;
        this.count = $.count;
        this.enableAutoScaling = $.enableAutoScaling;
        this.enableEncryptionAtHost = $.enableEncryptionAtHost;
        this.enableFIPS = $.enableFIPS;
        this.enableNodePublicIP = $.enableNodePublicIP;
        this.gpuInstanceProfile = $.gpuInstanceProfile;
        this.kubeletConfig = $.kubeletConfig;
        this.kubeletDiskType = $.kubeletDiskType;
        this.linuxOSConfig = $.linuxOSConfig;
        this.maxCount = $.maxCount;
        this.maxPods = $.maxPods;
        this.minCount = $.minCount;
        this.mode = $.mode;
        this.name = $.name;
        this.nodeImageVersion = $.nodeImageVersion;
        this.nodeLabels = $.nodeLabels;
        this.nodePublicIPPrefixID = $.nodePublicIPPrefixID;
        this.nodeTaints = $.nodeTaints;
        this.orchestratorVersion = $.orchestratorVersion;
        this.osDiskSizeGB = $.osDiskSizeGB;
        this.osDiskType = $.osDiskType;
        this.osSKU = $.osSKU;
        this.osType = $.osType;
        this.podSubnetID = $.podSubnetID;
        this.powerState = $.powerState;
        this.provisioningState = $.provisioningState;
        this.proximityPlacementGroupID = $.proximityPlacementGroupID;
        this.scaleSetEvictionPolicy = $.scaleSetEvictionPolicy;
        this.scaleSetPriority = $.scaleSetPriority;
        this.spotMaxPrice = $.spotMaxPrice;
        this.tags = $.tags;
        this.type = $.type;
        this.upgradeSettings = $.upgradeSettings;
        this.vmSize = $.vmSize;
        this.vnetSubnetID = $.vnetSubnetID;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagedClusterAgentPoolProfileResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagedClusterAgentPoolProfileResponse $;

        public Builder() {
            $ = new ManagedClusterAgentPoolProfileResponse();
        }

        public Builder(ManagedClusterAgentPoolProfileResponse defaults) {
            $ = new ManagedClusterAgentPoolProfileResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param availabilityZones Availability zones for nodes. Must use VirtualMachineScaleSets AgentPoolType.
         * 
         * @return builder
         * 
         */
        public Builder availabilityZones(@Nullable List<String> availabilityZones) {
            $.availabilityZones = availabilityZones;
            return this;
        }

        /**
         * @param availabilityZones Availability zones for nodes. Must use VirtualMachineScaleSets AgentPoolType.
         * 
         * @return builder
         * 
         */
        public Builder availabilityZones(String... availabilityZones) {
            return availabilityZones(List.of(availabilityZones));
        }

        /**
         * @param count Number of agents (VMs) to host docker containers. Allowed values must be in the range of 0 to 100 (inclusive) for user pools and in the range of 1 to 100 (inclusive) for system pools. The default value is 1.
         * 
         * @return builder
         * 
         */
        public Builder count(@Nullable Integer count) {
            $.count = count;
            return this;
        }

        /**
         * @param enableAutoScaling Whether to enable auto-scaler
         * 
         * @return builder
         * 
         */
        public Builder enableAutoScaling(@Nullable Boolean enableAutoScaling) {
            $.enableAutoScaling = enableAutoScaling;
            return this;
        }

        /**
         * @param enableEncryptionAtHost Whether to enable EncryptionAtHost
         * 
         * @return builder
         * 
         */
        public Builder enableEncryptionAtHost(@Nullable Boolean enableEncryptionAtHost) {
            $.enableEncryptionAtHost = enableEncryptionAtHost;
            return this;
        }

        /**
         * @param enableFIPS Whether to use FIPS enabled OS
         * 
         * @return builder
         * 
         */
        public Builder enableFIPS(@Nullable Boolean enableFIPS) {
            $.enableFIPS = enableFIPS;
            return this;
        }

        /**
         * @param enableNodePublicIP Enable public IP for nodes
         * 
         * @return builder
         * 
         */
        public Builder enableNodePublicIP(@Nullable Boolean enableNodePublicIP) {
            $.enableNodePublicIP = enableNodePublicIP;
            return this;
        }

        /**
         * @param gpuInstanceProfile GPUInstanceProfile to be used to specify GPU MIG instance profile for supported GPU VM SKU. Supported values are MIG1g, MIG2g, MIG3g, MIG4g and MIG7g.
         * 
         * @return builder
         * 
         */
        public Builder gpuInstanceProfile(@Nullable String gpuInstanceProfile) {
            $.gpuInstanceProfile = gpuInstanceProfile;
            return this;
        }

        /**
         * @param kubeletConfig KubeletConfig specifies the configuration of kubelet on agent nodes.
         * 
         * @return builder
         * 
         */
        public Builder kubeletConfig(@Nullable KubeletConfigResponse kubeletConfig) {
            $.kubeletConfig = kubeletConfig;
            return this;
        }

        /**
         * @param kubeletDiskType KubeletDiskType determines the placement of emptyDir volumes, container runtime data root, and Kubelet ephemeral storage. Currently allows one value, OS, resulting in Kubelet using the OS disk for data.
         * 
         * @return builder
         * 
         */
        public Builder kubeletDiskType(@Nullable String kubeletDiskType) {
            $.kubeletDiskType = kubeletDiskType;
            return this;
        }

        /**
         * @param linuxOSConfig LinuxOSConfig specifies the OS configuration of linux agent nodes.
         * 
         * @return builder
         * 
         */
        public Builder linuxOSConfig(@Nullable LinuxOSConfigResponse linuxOSConfig) {
            $.linuxOSConfig = linuxOSConfig;
            return this;
        }

        /**
         * @param maxCount Maximum number of nodes for auto-scaling
         * 
         * @return builder
         * 
         */
        public Builder maxCount(@Nullable Integer maxCount) {
            $.maxCount = maxCount;
            return this;
        }

        /**
         * @param maxPods Maximum number of pods that can run on a node.
         * 
         * @return builder
         * 
         */
        public Builder maxPods(@Nullable Integer maxPods) {
            $.maxPods = maxPods;
            return this;
        }

        /**
         * @param minCount Minimum number of nodes for auto-scaling
         * 
         * @return builder
         * 
         */
        public Builder minCount(@Nullable Integer minCount) {
            $.minCount = minCount;
            return this;
        }

        /**
         * @param mode AgentPoolMode represents mode of an agent pool
         * 
         * @return builder
         * 
         */
        public Builder mode(@Nullable String mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param name Unique name of the agent pool profile in the context of the subscription and resource group.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param nodeImageVersion Version of node image
         * 
         * @return builder
         * 
         */
        public Builder nodeImageVersion(String nodeImageVersion) {
            $.nodeImageVersion = nodeImageVersion;
            return this;
        }

        /**
         * @param nodeLabels Agent pool node labels to be persisted across all nodes in agent pool.
         * 
         * @return builder
         * 
         */
        public Builder nodeLabels(@Nullable Map<String,String> nodeLabels) {
            $.nodeLabels = nodeLabels;
            return this;
        }

        /**
         * @param nodePublicIPPrefixID Public IP Prefix ID. VM nodes use IPs assigned from this Public IP Prefix.
         * 
         * @return builder
         * 
         */
        public Builder nodePublicIPPrefixID(@Nullable String nodePublicIPPrefixID) {
            $.nodePublicIPPrefixID = nodePublicIPPrefixID;
            return this;
        }

        /**
         * @param nodeTaints Taints added to new nodes during node pool create and scale. For example, key=value:NoSchedule.
         * 
         * @return builder
         * 
         */
        public Builder nodeTaints(@Nullable List<String> nodeTaints) {
            $.nodeTaints = nodeTaints;
            return this;
        }

        /**
         * @param nodeTaints Taints added to new nodes during node pool create and scale. For example, key=value:NoSchedule.
         * 
         * @return builder
         * 
         */
        public Builder nodeTaints(String... nodeTaints) {
            return nodeTaints(List.of(nodeTaints));
        }

        /**
         * @param orchestratorVersion Version of orchestrator specified when creating the managed cluster.
         * 
         * @return builder
         * 
         */
        public Builder orchestratorVersion(@Nullable String orchestratorVersion) {
            $.orchestratorVersion = orchestratorVersion;
            return this;
        }

        /**
         * @param osDiskSizeGB OS Disk Size in GB to be used to specify the disk size for every machine in this master/agent pool. If you specify 0, it will apply the default osDisk size according to the vmSize specified.
         * 
         * @return builder
         * 
         */
        public Builder osDiskSizeGB(@Nullable Integer osDiskSizeGB) {
            $.osDiskSizeGB = osDiskSizeGB;
            return this;
        }

        /**
         * @param osDiskType OS disk type to be used for machines in a given agent pool. Allowed values are &#39;Ephemeral&#39; and &#39;Managed&#39;. If unspecified, defaults to &#39;Ephemeral&#39; when the VM supports ephemeral OS and has a cache disk larger than the requested OSDiskSizeGB. Otherwise, defaults to &#39;Managed&#39;. May not be changed after creation.
         * 
         * @return builder
         * 
         */
        public Builder osDiskType(@Nullable String osDiskType) {
            $.osDiskType = osDiskType;
            return this;
        }

        /**
         * @param osSKU OsSKU to be used to specify os sku. Choose from Ubuntu(default) and CBLMariner for Linux OSType. Not applicable to Windows OSType.
         * 
         * @return builder
         * 
         */
        public Builder osSKU(@Nullable String osSKU) {
            $.osSKU = osSKU;
            return this;
        }

        /**
         * @param osType OsType to be used to specify os type. Choose from Linux and Windows. Default to Linux.
         * 
         * @return builder
         * 
         */
        public Builder osType(@Nullable String osType) {
            $.osType = osType;
            return this;
        }

        /**
         * @param podSubnetID Pod SubnetID specifies the VNet&#39;s subnet identifier for pods.
         * 
         * @return builder
         * 
         */
        public Builder podSubnetID(@Nullable String podSubnetID) {
            $.podSubnetID = podSubnetID;
            return this;
        }

        /**
         * @param powerState Describes whether the Agent Pool is Running or Stopped
         * 
         * @return builder
         * 
         */
        public Builder powerState(PowerStateResponse powerState) {
            $.powerState = powerState;
            return this;
        }

        /**
         * @param provisioningState The current deployment or provisioning state, which only appears in the response.
         * 
         * @return builder
         * 
         */
        public Builder provisioningState(String provisioningState) {
            $.provisioningState = provisioningState;
            return this;
        }

        /**
         * @param proximityPlacementGroupID The ID for Proximity Placement Group.
         * 
         * @return builder
         * 
         */
        public Builder proximityPlacementGroupID(@Nullable String proximityPlacementGroupID) {
            $.proximityPlacementGroupID = proximityPlacementGroupID;
            return this;
        }

        /**
         * @param scaleSetEvictionPolicy ScaleSetEvictionPolicy to be used to specify eviction policy for Spot virtual machine scale set. Default to Delete.
         * 
         * @return builder
         * 
         */
        public Builder scaleSetEvictionPolicy(@Nullable String scaleSetEvictionPolicy) {
            $.scaleSetEvictionPolicy = scaleSetEvictionPolicy;
            return this;
        }

        /**
         * @param scaleSetPriority ScaleSetPriority to be used to specify virtual machine scale set priority. Default to regular.
         * 
         * @return builder
         * 
         */
        public Builder scaleSetPriority(@Nullable String scaleSetPriority) {
            $.scaleSetPriority = scaleSetPriority;
            return this;
        }

        /**
         * @param spotMaxPrice SpotMaxPrice to be used to specify the maximum price you are willing to pay in US Dollars. Possible values are any decimal value greater than zero or -1 which indicates default price to be up-to on-demand.
         * 
         * @return builder
         * 
         */
        public Builder spotMaxPrice(@Nullable Double spotMaxPrice) {
            $.spotMaxPrice = spotMaxPrice;
            return this;
        }

        /**
         * @param tags Agent pool tags to be persisted on the agent pool virtual machine scale set.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Map<String,String> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param type AgentPoolType represents types of an agent pool
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable String type) {
            $.type = type;
            return this;
        }

        /**
         * @param upgradeSettings Settings for upgrading the agentpool
         * 
         * @return builder
         * 
         */
        public Builder upgradeSettings(@Nullable AgentPoolUpgradeSettingsResponse upgradeSettings) {
            $.upgradeSettings = upgradeSettings;
            return this;
        }

        /**
         * @param vmSize Size of agent VMs.
         * 
         * @return builder
         * 
         */
        public Builder vmSize(@Nullable String vmSize) {
            $.vmSize = vmSize;
            return this;
        }

        /**
         * @param vnetSubnetID VNet SubnetID specifies the VNet&#39;s subnet identifier for nodes and maybe pods
         * 
         * @return builder
         * 
         */
        public Builder vnetSubnetID(@Nullable String vnetSubnetID) {
            $.vnetSubnetID = vnetSubnetID;
            return this;
        }

        public ManagedClusterAgentPoolProfileResponse build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.nodeImageVersion = Objects.requireNonNull($.nodeImageVersion, "expected parameter 'nodeImageVersion' to be non-null");
            $.powerState = Objects.requireNonNull($.powerState, "expected parameter 'powerState' to be non-null");
            $.provisioningState = Objects.requireNonNull($.provisioningState, "expected parameter 'provisioningState' to be non-null");
            return $;
        }
    }

}
