// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.web;

import com.pulumi.azurenative.web.inputs.GitHubActionConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WebAppSourceControlArgs extends com.pulumi.resources.ResourceArgs {

    public static final WebAppSourceControlArgs Empty = new WebAppSourceControlArgs();

    /**
     * Name of branch to use for deployment.
     * 
     */
    @Import(name="branch")
    private @Nullable Output<String> branch;

    /**
     * @return Name of branch to use for deployment.
     * 
     */
    public Optional<Output<String>> branch() {
        return Optional.ofNullable(this.branch);
    }

    /**
     * &lt;code&gt;true&lt;/code&gt; to enable deployment rollback; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    @Import(name="deploymentRollbackEnabled")
    private @Nullable Output<Boolean> deploymentRollbackEnabled;

    /**
     * @return &lt;code&gt;true&lt;/code&gt; to enable deployment rollback; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    public Optional<Output<Boolean>> deploymentRollbackEnabled() {
        return Optional.ofNullable(this.deploymentRollbackEnabled);
    }

    /**
     * If GitHub Action is selected, than the associated configuration.
     * 
     */
    @Import(name="gitHubActionConfiguration")
    private @Nullable Output<GitHubActionConfigurationArgs> gitHubActionConfiguration;

    /**
     * @return If GitHub Action is selected, than the associated configuration.
     * 
     */
    public Optional<Output<GitHubActionConfigurationArgs>> gitHubActionConfiguration() {
        return Optional.ofNullable(this.gitHubActionConfiguration);
    }

    /**
     * &lt;code&gt;true&lt;/code&gt; if this is deployed via GitHub action.
     * 
     */
    @Import(name="isGitHubAction")
    private @Nullable Output<Boolean> isGitHubAction;

    /**
     * @return &lt;code&gt;true&lt;/code&gt; if this is deployed via GitHub action.
     * 
     */
    public Optional<Output<Boolean>> isGitHubAction() {
        return Optional.ofNullable(this.isGitHubAction);
    }

    /**
     * &lt;code&gt;true&lt;/code&gt; to limit to manual integration; &lt;code&gt;false&lt;/code&gt; to enable continuous integration (which configures webhooks into online repos like GitHub).
     * 
     */
    @Import(name="isManualIntegration")
    private @Nullable Output<Boolean> isManualIntegration;

    /**
     * @return &lt;code&gt;true&lt;/code&gt; to limit to manual integration; &lt;code&gt;false&lt;/code&gt; to enable continuous integration (which configures webhooks into online repos like GitHub).
     * 
     */
    public Optional<Output<Boolean>> isManualIntegration() {
        return Optional.ofNullable(this.isManualIntegration);
    }

    /**
     * &lt;code&gt;true&lt;/code&gt; for a Mercurial repository; &lt;code&gt;false&lt;/code&gt; for a Git repository.
     * 
     */
    @Import(name="isMercurial")
    private @Nullable Output<Boolean> isMercurial;

    /**
     * @return &lt;code&gt;true&lt;/code&gt; for a Mercurial repository; &lt;code&gt;false&lt;/code&gt; for a Git repository.
     * 
     */
    public Optional<Output<Boolean>> isMercurial() {
        return Optional.ofNullable(this.isMercurial);
    }

    /**
     * Kind of resource.
     * 
     */
    @Import(name="kind")
    private @Nullable Output<String> kind;

    /**
     * @return Kind of resource.
     * 
     */
    public Optional<Output<String>> kind() {
        return Optional.ofNullable(this.kind);
    }

    /**
     * Name of the app.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Name of the app.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Repository or source control URL.
     * 
     */
    @Import(name="repoUrl")
    private @Nullable Output<String> repoUrl;

    /**
     * @return Repository or source control URL.
     * 
     */
    public Optional<Output<String>> repoUrl() {
        return Optional.ofNullable(this.repoUrl);
    }

    /**
     * Name of the resource group to which the resource belongs.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return Name of the resource group to which the resource belongs.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    private WebAppSourceControlArgs() {}

    private WebAppSourceControlArgs(WebAppSourceControlArgs $) {
        this.branch = $.branch;
        this.deploymentRollbackEnabled = $.deploymentRollbackEnabled;
        this.gitHubActionConfiguration = $.gitHubActionConfiguration;
        this.isGitHubAction = $.isGitHubAction;
        this.isManualIntegration = $.isManualIntegration;
        this.isMercurial = $.isMercurial;
        this.kind = $.kind;
        this.name = $.name;
        this.repoUrl = $.repoUrl;
        this.resourceGroupName = $.resourceGroupName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WebAppSourceControlArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WebAppSourceControlArgs $;

        public Builder() {
            $ = new WebAppSourceControlArgs();
        }

        public Builder(WebAppSourceControlArgs defaults) {
            $ = new WebAppSourceControlArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param branch Name of branch to use for deployment.
         * 
         * @return builder
         * 
         */
        public Builder branch(@Nullable Output<String> branch) {
            $.branch = branch;
            return this;
        }

        /**
         * @param branch Name of branch to use for deployment.
         * 
         * @return builder
         * 
         */
        public Builder branch(String branch) {
            return branch(Output.of(branch));
        }

        /**
         * @param deploymentRollbackEnabled &lt;code&gt;true&lt;/code&gt; to enable deployment rollback; otherwise, &lt;code&gt;false&lt;/code&gt;.
         * 
         * @return builder
         * 
         */
        public Builder deploymentRollbackEnabled(@Nullable Output<Boolean> deploymentRollbackEnabled) {
            $.deploymentRollbackEnabled = deploymentRollbackEnabled;
            return this;
        }

        /**
         * @param deploymentRollbackEnabled &lt;code&gt;true&lt;/code&gt; to enable deployment rollback; otherwise, &lt;code&gt;false&lt;/code&gt;.
         * 
         * @return builder
         * 
         */
        public Builder deploymentRollbackEnabled(Boolean deploymentRollbackEnabled) {
            return deploymentRollbackEnabled(Output.of(deploymentRollbackEnabled));
        }

        /**
         * @param gitHubActionConfiguration If GitHub Action is selected, than the associated configuration.
         * 
         * @return builder
         * 
         */
        public Builder gitHubActionConfiguration(@Nullable Output<GitHubActionConfigurationArgs> gitHubActionConfiguration) {
            $.gitHubActionConfiguration = gitHubActionConfiguration;
            return this;
        }

        /**
         * @param gitHubActionConfiguration If GitHub Action is selected, than the associated configuration.
         * 
         * @return builder
         * 
         */
        public Builder gitHubActionConfiguration(GitHubActionConfigurationArgs gitHubActionConfiguration) {
            return gitHubActionConfiguration(Output.of(gitHubActionConfiguration));
        }

        /**
         * @param isGitHubAction &lt;code&gt;true&lt;/code&gt; if this is deployed via GitHub action.
         * 
         * @return builder
         * 
         */
        public Builder isGitHubAction(@Nullable Output<Boolean> isGitHubAction) {
            $.isGitHubAction = isGitHubAction;
            return this;
        }

        /**
         * @param isGitHubAction &lt;code&gt;true&lt;/code&gt; if this is deployed via GitHub action.
         * 
         * @return builder
         * 
         */
        public Builder isGitHubAction(Boolean isGitHubAction) {
            return isGitHubAction(Output.of(isGitHubAction));
        }

        /**
         * @param isManualIntegration &lt;code&gt;true&lt;/code&gt; to limit to manual integration; &lt;code&gt;false&lt;/code&gt; to enable continuous integration (which configures webhooks into online repos like GitHub).
         * 
         * @return builder
         * 
         */
        public Builder isManualIntegration(@Nullable Output<Boolean> isManualIntegration) {
            $.isManualIntegration = isManualIntegration;
            return this;
        }

        /**
         * @param isManualIntegration &lt;code&gt;true&lt;/code&gt; to limit to manual integration; &lt;code&gt;false&lt;/code&gt; to enable continuous integration (which configures webhooks into online repos like GitHub).
         * 
         * @return builder
         * 
         */
        public Builder isManualIntegration(Boolean isManualIntegration) {
            return isManualIntegration(Output.of(isManualIntegration));
        }

        /**
         * @param isMercurial &lt;code&gt;true&lt;/code&gt; for a Mercurial repository; &lt;code&gt;false&lt;/code&gt; for a Git repository.
         * 
         * @return builder
         * 
         */
        public Builder isMercurial(@Nullable Output<Boolean> isMercurial) {
            $.isMercurial = isMercurial;
            return this;
        }

        /**
         * @param isMercurial &lt;code&gt;true&lt;/code&gt; for a Mercurial repository; &lt;code&gt;false&lt;/code&gt; for a Git repository.
         * 
         * @return builder
         * 
         */
        public Builder isMercurial(Boolean isMercurial) {
            return isMercurial(Output.of(isMercurial));
        }

        /**
         * @param kind Kind of resource.
         * 
         * @return builder
         * 
         */
        public Builder kind(@Nullable Output<String> kind) {
            $.kind = kind;
            return this;
        }

        /**
         * @param kind Kind of resource.
         * 
         * @return builder
         * 
         */
        public Builder kind(String kind) {
            return kind(Output.of(kind));
        }

        /**
         * @param name Name of the app.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the app.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param repoUrl Repository or source control URL.
         * 
         * @return builder
         * 
         */
        public Builder repoUrl(@Nullable Output<String> repoUrl) {
            $.repoUrl = repoUrl;
            return this;
        }

        /**
         * @param repoUrl Repository or source control URL.
         * 
         * @return builder
         * 
         */
        public Builder repoUrl(String repoUrl) {
            return repoUrl(Output.of(repoUrl));
        }

        /**
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public WebAppSourceControlArgs build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
