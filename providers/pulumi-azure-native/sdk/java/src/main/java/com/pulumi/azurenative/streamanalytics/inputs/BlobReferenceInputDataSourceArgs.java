// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.streamanalytics.inputs;

import com.pulumi.azurenative.streamanalytics.inputs.StorageAccountArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Describes a blob input data source that contains reference data.
 * 
 */
public final class BlobReferenceInputDataSourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final BlobReferenceInputDataSourceArgs Empty = new BlobReferenceInputDataSourceArgs();

    /**
     * The name of a container within the associated Storage account. This container contains either the blob(s) to be read from or written to. Required on PUT (CreateOrReplace) requests.
     * 
     */
    @Import(name="container")
    private @Nullable Output<String> container;

    public Optional<Output<String>> container() {
        return Optional.ofNullable(this.container);
    }

    /**
     * The date format. Wherever {date} appears in pathPattern, the value of this property is used as the date format instead.
     * 
     */
    @Import(name="dateFormat")
    private @Nullable Output<String> dateFormat;

    public Optional<Output<String>> dateFormat() {
        return Optional.ofNullable(this.dateFormat);
    }

    /**
     * The blob path pattern. Not a regular expression. It represents a pattern against which blob names will be matched to determine whether or not they should be included as input or output to the job. See https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-input or https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output for a more detailed explanation and example.
     * 
     */
    @Import(name="pathPattern")
    private @Nullable Output<String> pathPattern;

    public Optional<Output<String>> pathPattern() {
        return Optional.ofNullable(this.pathPattern);
    }

    /**
     * A list of one or more Azure Storage accounts. Required on PUT (CreateOrReplace) requests.
     * 
     */
    @Import(name="storageAccounts")
    private @Nullable Output<List<StorageAccountArgs>> storageAccounts;

    public Optional<Output<List<StorageAccountArgs>>> storageAccounts() {
        return Optional.ofNullable(this.storageAccounts);
    }

    /**
     * The time format. Wherever {time} appears in pathPattern, the value of this property is used as the time format instead.
     * 
     */
    @Import(name="timeFormat")
    private @Nullable Output<String> timeFormat;

    public Optional<Output<String>> timeFormat() {
        return Optional.ofNullable(this.timeFormat);
    }

    /**
     * Indicates the type of input data source containing reference data. Required on PUT (CreateOrReplace) requests.
     * Expected value is &#39;Microsoft.Storage/Blob&#39;.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    private BlobReferenceInputDataSourceArgs() {}

    private BlobReferenceInputDataSourceArgs(BlobReferenceInputDataSourceArgs $) {
        this.container = $.container;
        this.dateFormat = $.dateFormat;
        this.pathPattern = $.pathPattern;
        this.storageAccounts = $.storageAccounts;
        this.timeFormat = $.timeFormat;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BlobReferenceInputDataSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BlobReferenceInputDataSourceArgs $;

        public Builder() {
            $ = new BlobReferenceInputDataSourceArgs();
        }

        public Builder(BlobReferenceInputDataSourceArgs defaults) {
            $ = new BlobReferenceInputDataSourceArgs(Objects.requireNonNull(defaults));
        }

        public Builder container(@Nullable Output<String> container) {
            $.container = container;
            return this;
        }

        public Builder container(String container) {
            return container(Output.of(container));
        }

        public Builder dateFormat(@Nullable Output<String> dateFormat) {
            $.dateFormat = dateFormat;
            return this;
        }

        public Builder dateFormat(String dateFormat) {
            return dateFormat(Output.of(dateFormat));
        }

        public Builder pathPattern(@Nullable Output<String> pathPattern) {
            $.pathPattern = pathPattern;
            return this;
        }

        public Builder pathPattern(String pathPattern) {
            return pathPattern(Output.of(pathPattern));
        }

        public Builder storageAccounts(@Nullable Output<List<StorageAccountArgs>> storageAccounts) {
            $.storageAccounts = storageAccounts;
            return this;
        }

        public Builder storageAccounts(List<StorageAccountArgs> storageAccounts) {
            return storageAccounts(Output.of(storageAccounts));
        }

        public Builder storageAccounts(StorageAccountArgs... storageAccounts) {
            return storageAccounts(List.of(storageAccounts));
        }

        public Builder timeFormat(@Nullable Output<String> timeFormat) {
            $.timeFormat = timeFormat;
            return this;
        }

        public Builder timeFormat(String timeFormat) {
            return timeFormat(Output.of(timeFormat));
        }

        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public BlobReferenceInputDataSourceArgs build() {
            $.type = Codegen.stringProp("type").output().arg($.type).require();
            return $;
        }
    }

}
