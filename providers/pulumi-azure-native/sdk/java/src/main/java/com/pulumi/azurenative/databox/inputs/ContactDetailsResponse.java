// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.databox.inputs;

import com.pulumi.azurenative.databox.inputs.NotificationPreferenceResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Contact Details.
 * 
 */
public final class ContactDetailsResponse extends com.pulumi.resources.InvokeArgs {

    public static final ContactDetailsResponse Empty = new ContactDetailsResponse();

    /**
     * Contact name of the person.
     * 
     */
    @Import(name="contactName", required=true)
    private String contactName;

    /**
     * @return Contact name of the person.
     * 
     */
    public String contactName() {
        return this.contactName;
    }

    /**
     * List of Email-ids to be notified about job progress.
     * 
     */
    @Import(name="emailList", required=true)
    private List<String> emailList;

    /**
     * @return List of Email-ids to be notified about job progress.
     * 
     */
    public List<String> emailList() {
        return this.emailList;
    }

    /**
     * Mobile number of the contact person.
     * 
     */
    @Import(name="mobile")
    private @Nullable String mobile;

    /**
     * @return Mobile number of the contact person.
     * 
     */
    public Optional<String> mobile() {
        return Optional.ofNullable(this.mobile);
    }

    /**
     * Notification preference for a job stage.
     * 
     */
    @Import(name="notificationPreference")
    private @Nullable List<NotificationPreferenceResponse> notificationPreference;

    /**
     * @return Notification preference for a job stage.
     * 
     */
    public Optional<List<NotificationPreferenceResponse>> notificationPreference() {
        return Optional.ofNullable(this.notificationPreference);
    }

    /**
     * Phone number of the contact person.
     * 
     */
    @Import(name="phone", required=true)
    private String phone;

    /**
     * @return Phone number of the contact person.
     * 
     */
    public String phone() {
        return this.phone;
    }

    /**
     * Phone extension number of the contact person.
     * 
     */
    @Import(name="phoneExtension")
    private @Nullable String phoneExtension;

    /**
     * @return Phone extension number of the contact person.
     * 
     */
    public Optional<String> phoneExtension() {
        return Optional.ofNullable(this.phoneExtension);
    }

    private ContactDetailsResponse() {}

    private ContactDetailsResponse(ContactDetailsResponse $) {
        this.contactName = $.contactName;
        this.emailList = $.emailList;
        this.mobile = $.mobile;
        this.notificationPreference = $.notificationPreference;
        this.phone = $.phone;
        this.phoneExtension = $.phoneExtension;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContactDetailsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContactDetailsResponse $;

        public Builder() {
            $ = new ContactDetailsResponse();
        }

        public Builder(ContactDetailsResponse defaults) {
            $ = new ContactDetailsResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param contactName Contact name of the person.
         * 
         * @return builder
         * 
         */
        public Builder contactName(String contactName) {
            $.contactName = contactName;
            return this;
        }

        /**
         * @param emailList List of Email-ids to be notified about job progress.
         * 
         * @return builder
         * 
         */
        public Builder emailList(List<String> emailList) {
            $.emailList = emailList;
            return this;
        }

        /**
         * @param emailList List of Email-ids to be notified about job progress.
         * 
         * @return builder
         * 
         */
        public Builder emailList(String... emailList) {
            return emailList(List.of(emailList));
        }

        /**
         * @param mobile Mobile number of the contact person.
         * 
         * @return builder
         * 
         */
        public Builder mobile(@Nullable String mobile) {
            $.mobile = mobile;
            return this;
        }

        /**
         * @param notificationPreference Notification preference for a job stage.
         * 
         * @return builder
         * 
         */
        public Builder notificationPreference(@Nullable List<NotificationPreferenceResponse> notificationPreference) {
            $.notificationPreference = notificationPreference;
            return this;
        }

        /**
         * @param notificationPreference Notification preference for a job stage.
         * 
         * @return builder
         * 
         */
        public Builder notificationPreference(NotificationPreferenceResponse... notificationPreference) {
            return notificationPreference(List.of(notificationPreference));
        }

        /**
         * @param phone Phone number of the contact person.
         * 
         * @return builder
         * 
         */
        public Builder phone(String phone) {
            $.phone = phone;
            return this;
        }

        /**
         * @param phoneExtension Phone extension number of the contact person.
         * 
         * @return builder
         * 
         */
        public Builder phoneExtension(@Nullable String phoneExtension) {
            $.phoneExtension = phoneExtension;
            return this;
        }

        public ContactDetailsResponse build() {
            $.contactName = Objects.requireNonNull($.contactName, "expected parameter 'contactName' to be non-null");
            $.emailList = Objects.requireNonNull($.emailList, "expected parameter 'emailList' to be non-null");
            $.phone = Objects.requireNonNull($.phone, "expected parameter 'phone' to be non-null");
            return $;
        }
    }

}
