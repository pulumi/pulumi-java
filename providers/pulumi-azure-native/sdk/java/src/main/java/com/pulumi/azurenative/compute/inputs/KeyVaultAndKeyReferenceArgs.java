// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.compute.inputs;

import com.pulumi.azurenative.compute.inputs.SourceVaultArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * Key Vault Key Url and vault id of KeK, KeK is optional and when provided is used to unwrap the encryptionKey
 * 
 */
public final class KeyVaultAndKeyReferenceArgs extends com.pulumi.resources.ResourceArgs {

    public static final KeyVaultAndKeyReferenceArgs Empty = new KeyVaultAndKeyReferenceArgs();

    /**
     * Url pointing to a key or secret in KeyVault
     * 
     */
    @Import(name="keyUrl", required=true)
    private Output<String> keyUrl;

    /**
     * @return Url pointing to a key or secret in KeyVault
     * 
     */
    public Output<String> keyUrl() {
        return this.keyUrl;
    }

    /**
     * Resource id of the KeyVault containing the key or secret
     * 
     */
    @Import(name="sourceVault", required=true)
    private Output<SourceVaultArgs> sourceVault;

    /**
     * @return Resource id of the KeyVault containing the key or secret
     * 
     */
    public Output<SourceVaultArgs> sourceVault() {
        return this.sourceVault;
    }

    private KeyVaultAndKeyReferenceArgs() {}

    private KeyVaultAndKeyReferenceArgs(KeyVaultAndKeyReferenceArgs $) {
        this.keyUrl = $.keyUrl;
        this.sourceVault = $.sourceVault;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KeyVaultAndKeyReferenceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KeyVaultAndKeyReferenceArgs $;

        public Builder() {
            $ = new KeyVaultAndKeyReferenceArgs();
        }

        public Builder(KeyVaultAndKeyReferenceArgs defaults) {
            $ = new KeyVaultAndKeyReferenceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param keyUrl Url pointing to a key or secret in KeyVault
         * 
         * @return builder
         * 
         */
        public Builder keyUrl(Output<String> keyUrl) {
            $.keyUrl = keyUrl;
            return this;
        }

        /**
         * @param keyUrl Url pointing to a key or secret in KeyVault
         * 
         * @return builder
         * 
         */
        public Builder keyUrl(String keyUrl) {
            return keyUrl(Output.of(keyUrl));
        }

        /**
         * @param sourceVault Resource id of the KeyVault containing the key or secret
         * 
         * @return builder
         * 
         */
        public Builder sourceVault(Output<SourceVaultArgs> sourceVault) {
            $.sourceVault = sourceVault;
            return this;
        }

        /**
         * @param sourceVault Resource id of the KeyVault containing the key or secret
         * 
         * @return builder
         * 
         */
        public Builder sourceVault(SourceVaultArgs sourceVault) {
            return sourceVault(Output.of(sourceVault));
        }

        public KeyVaultAndKeyReferenceArgs build() {
            $.keyUrl = Objects.requireNonNull($.keyUrl, "expected parameter 'keyUrl' to be non-null");
            $.sourceVault = Objects.requireNonNull($.sourceVault, "expected parameter 'sourceVault' to be non-null");
            return $;
        }
    }

}
