// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.aad.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Secure LDAP Settings
 * 
 */
public final class LdapsSettingsResponse extends com.pulumi.resources.InvokeArgs {

    public static final LdapsSettingsResponse Empty = new LdapsSettingsResponse();

    /**
     * NotAfter DateTime of configure ldaps certificate.
     * 
     */
    @Import(name="certificateNotAfter", required=true)
    private String certificateNotAfter;

    /**
     * @return NotAfter DateTime of configure ldaps certificate.
     * 
     */
    public String certificateNotAfter() {
        return this.certificateNotAfter;
    }

    /**
     * Thumbprint of configure ldaps certificate.
     * 
     */
    @Import(name="certificateThumbprint", required=true)
    private String certificateThumbprint;

    /**
     * @return Thumbprint of configure ldaps certificate.
     * 
     */
    public String certificateThumbprint() {
        return this.certificateThumbprint;
    }

    /**
     * A flag to determine whether or not Secure LDAP access over the internet is enabled or disabled.
     * 
     */
    @Import(name="externalAccess")
    private @Nullable String externalAccess;

    /**
     * @return A flag to determine whether or not Secure LDAP access over the internet is enabled or disabled.
     * 
     */
    public Optional<String> externalAccess() {
        return Optional.ofNullable(this.externalAccess);
    }

    /**
     * A flag to determine whether or not Secure LDAP is enabled or disabled.
     * 
     */
    @Import(name="ldaps")
    private @Nullable String ldaps;

    /**
     * @return A flag to determine whether or not Secure LDAP is enabled or disabled.
     * 
     */
    public Optional<String> ldaps() {
        return Optional.ofNullable(this.ldaps);
    }

    /**
     * The certificate required to configure Secure LDAP. The parameter passed here should be a base64encoded representation of the certificate pfx file.
     * 
     */
    @Import(name="pfxCertificate")
    private @Nullable String pfxCertificate;

    /**
     * @return The certificate required to configure Secure LDAP. The parameter passed here should be a base64encoded representation of the certificate pfx file.
     * 
     */
    public Optional<String> pfxCertificate() {
        return Optional.ofNullable(this.pfxCertificate);
    }

    /**
     * The password to decrypt the provided Secure LDAP certificate pfx file.
     * 
     */
    @Import(name="pfxCertificatePassword")
    private @Nullable String pfxCertificatePassword;

    /**
     * @return The password to decrypt the provided Secure LDAP certificate pfx file.
     * 
     */
    public Optional<String> pfxCertificatePassword() {
        return Optional.ofNullable(this.pfxCertificatePassword);
    }

    /**
     * Public certificate used to configure secure ldap.
     * 
     */
    @Import(name="publicCertificate", required=true)
    private String publicCertificate;

    /**
     * @return Public certificate used to configure secure ldap.
     * 
     */
    public String publicCertificate() {
        return this.publicCertificate;
    }

    private LdapsSettingsResponse() {}

    private LdapsSettingsResponse(LdapsSettingsResponse $) {
        this.certificateNotAfter = $.certificateNotAfter;
        this.certificateThumbprint = $.certificateThumbprint;
        this.externalAccess = $.externalAccess;
        this.ldaps = $.ldaps;
        this.pfxCertificate = $.pfxCertificate;
        this.pfxCertificatePassword = $.pfxCertificatePassword;
        this.publicCertificate = $.publicCertificate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LdapsSettingsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LdapsSettingsResponse $;

        public Builder() {
            $ = new LdapsSettingsResponse();
        }

        public Builder(LdapsSettingsResponse defaults) {
            $ = new LdapsSettingsResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificateNotAfter NotAfter DateTime of configure ldaps certificate.
         * 
         * @return builder
         * 
         */
        public Builder certificateNotAfter(String certificateNotAfter) {
            $.certificateNotAfter = certificateNotAfter;
            return this;
        }

        /**
         * @param certificateThumbprint Thumbprint of configure ldaps certificate.
         * 
         * @return builder
         * 
         */
        public Builder certificateThumbprint(String certificateThumbprint) {
            $.certificateThumbprint = certificateThumbprint;
            return this;
        }

        /**
         * @param externalAccess A flag to determine whether or not Secure LDAP access over the internet is enabled or disabled.
         * 
         * @return builder
         * 
         */
        public Builder externalAccess(@Nullable String externalAccess) {
            $.externalAccess = externalAccess;
            return this;
        }

        /**
         * @param ldaps A flag to determine whether or not Secure LDAP is enabled or disabled.
         * 
         * @return builder
         * 
         */
        public Builder ldaps(@Nullable String ldaps) {
            $.ldaps = ldaps;
            return this;
        }

        /**
         * @param pfxCertificate The certificate required to configure Secure LDAP. The parameter passed here should be a base64encoded representation of the certificate pfx file.
         * 
         * @return builder
         * 
         */
        public Builder pfxCertificate(@Nullable String pfxCertificate) {
            $.pfxCertificate = pfxCertificate;
            return this;
        }

        /**
         * @param pfxCertificatePassword The password to decrypt the provided Secure LDAP certificate pfx file.
         * 
         * @return builder
         * 
         */
        public Builder pfxCertificatePassword(@Nullable String pfxCertificatePassword) {
            $.pfxCertificatePassword = pfxCertificatePassword;
            return this;
        }

        /**
         * @param publicCertificate Public certificate used to configure secure ldap.
         * 
         * @return builder
         * 
         */
        public Builder publicCertificate(String publicCertificate) {
            $.publicCertificate = publicCertificate;
            return this;
        }

        public LdapsSettingsResponse build() {
            $.certificateNotAfter = Objects.requireNonNull($.certificateNotAfter, "expected parameter 'certificateNotAfter' to be non-null");
            $.certificateThumbprint = Objects.requireNonNull($.certificateThumbprint, "expected parameter 'certificateThumbprint' to be non-null");
            $.externalAccess = Codegen.stringProp("externalAccess").arg($.externalAccess).def("Disabled").getNullable();
            $.ldaps = Codegen.stringProp("ldaps").arg($.ldaps).def("Disabled").getNullable();
            $.publicCertificate = Objects.requireNonNull($.publicCertificate, "expected parameter 'publicCertificate' to be non-null");
            return $;
        }
    }

}
