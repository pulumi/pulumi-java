// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.sqlvirtualmachine.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Configure backups for databases in your SQL virtual machine.
 * 
 */
public final class AutoBackupSettingsResponse extends com.pulumi.resources.InvokeArgs {

    public static final AutoBackupSettingsResponse Empty = new AutoBackupSettingsResponse();

    /**
     * Backup schedule type.
     * 
     */
    @Import(name="backupScheduleType")
    private @Nullable String backupScheduleType;

    public Optional<String> backupScheduleType() {
        return Optional.ofNullable(this.backupScheduleType);
    }

    /**
     * Include or exclude system databases from auto backup.
     * 
     */
    @Import(name="backupSystemDbs")
    private @Nullable Boolean backupSystemDbs;

    public Optional<Boolean> backupSystemDbs() {
        return Optional.ofNullable(this.backupSystemDbs);
    }

    /**
     * Enable or disable autobackup on SQL virtual machine.
     * 
     */
    @Import(name="enable")
    private @Nullable Boolean enable;

    public Optional<Boolean> enable() {
        return Optional.ofNullable(this.enable);
    }

    /**
     * Enable or disable encryption for backup on SQL virtual machine.
     * 
     */
    @Import(name="enableEncryption")
    private @Nullable Boolean enableEncryption;

    public Optional<Boolean> enableEncryption() {
        return Optional.ofNullable(this.enableEncryption);
    }

    /**
     * Frequency of full backups. In both cases, full backups begin during the next scheduled time window.
     * 
     */
    @Import(name="fullBackupFrequency")
    private @Nullable String fullBackupFrequency;

    public Optional<String> fullBackupFrequency() {
        return Optional.ofNullable(this.fullBackupFrequency);
    }

    /**
     * Start time of a given day during which full backups can take place. 0-23 hours.
     * 
     */
    @Import(name="fullBackupStartTime")
    private @Nullable Integer fullBackupStartTime;

    public Optional<Integer> fullBackupStartTime() {
        return Optional.ofNullable(this.fullBackupStartTime);
    }

    /**
     * Duration of the time window of a given day during which full backups can take place. 1-23 hours.
     * 
     */
    @Import(name="fullBackupWindowHours")
    private @Nullable Integer fullBackupWindowHours;

    public Optional<Integer> fullBackupWindowHours() {
        return Optional.ofNullable(this.fullBackupWindowHours);
    }

    /**
     * Frequency of log backups. 5-60 minutes.
     * 
     */
    @Import(name="logBackupFrequency")
    private @Nullable Integer logBackupFrequency;

    public Optional<Integer> logBackupFrequency() {
        return Optional.ofNullable(this.logBackupFrequency);
    }

    /**
     * Retention period of backup: 1-30 days.
     * 
     */
    @Import(name="retentionPeriod")
    private @Nullable Integer retentionPeriod;

    public Optional<Integer> retentionPeriod() {
        return Optional.ofNullable(this.retentionPeriod);
    }

    /**
     * Storage account url where backup will be taken to.
     * 
     */
    @Import(name="storageAccountUrl")
    private @Nullable String storageAccountUrl;

    public Optional<String> storageAccountUrl() {
        return Optional.ofNullable(this.storageAccountUrl);
    }

    private AutoBackupSettingsResponse() {}

    private AutoBackupSettingsResponse(AutoBackupSettingsResponse $) {
        this.backupScheduleType = $.backupScheduleType;
        this.backupSystemDbs = $.backupSystemDbs;
        this.enable = $.enable;
        this.enableEncryption = $.enableEncryption;
        this.fullBackupFrequency = $.fullBackupFrequency;
        this.fullBackupStartTime = $.fullBackupStartTime;
        this.fullBackupWindowHours = $.fullBackupWindowHours;
        this.logBackupFrequency = $.logBackupFrequency;
        this.retentionPeriod = $.retentionPeriod;
        this.storageAccountUrl = $.storageAccountUrl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AutoBackupSettingsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AutoBackupSettingsResponse $;

        public Builder() {
            $ = new AutoBackupSettingsResponse();
        }

        public Builder(AutoBackupSettingsResponse defaults) {
            $ = new AutoBackupSettingsResponse(Objects.requireNonNull(defaults));
        }

        public Builder backupScheduleType(@Nullable String backupScheduleType) {
            $.backupScheduleType = backupScheduleType;
            return this;
        }

        public Builder backupSystemDbs(@Nullable Boolean backupSystemDbs) {
            $.backupSystemDbs = backupSystemDbs;
            return this;
        }

        public Builder enable(@Nullable Boolean enable) {
            $.enable = enable;
            return this;
        }

        public Builder enableEncryption(@Nullable Boolean enableEncryption) {
            $.enableEncryption = enableEncryption;
            return this;
        }

        public Builder fullBackupFrequency(@Nullable String fullBackupFrequency) {
            $.fullBackupFrequency = fullBackupFrequency;
            return this;
        }

        public Builder fullBackupStartTime(@Nullable Integer fullBackupStartTime) {
            $.fullBackupStartTime = fullBackupStartTime;
            return this;
        }

        public Builder fullBackupWindowHours(@Nullable Integer fullBackupWindowHours) {
            $.fullBackupWindowHours = fullBackupWindowHours;
            return this;
        }

        public Builder logBackupFrequency(@Nullable Integer logBackupFrequency) {
            $.logBackupFrequency = logBackupFrequency;
            return this;
        }

        public Builder retentionPeriod(@Nullable Integer retentionPeriod) {
            $.retentionPeriod = retentionPeriod;
            return this;
        }

        public Builder storageAccountUrl(@Nullable String storageAccountUrl) {
            $.storageAccountUrl = storageAccountUrl;
            return this;
        }

        public AutoBackupSettingsResponse build() {
            return $;
        }
    }

}
