// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.marketplace;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PrivateStoreCollectionArgs extends com.pulumi.resources.ResourceArgs {

    public static final PrivateStoreCollectionArgs Empty = new PrivateStoreCollectionArgs();

    /**
     * Indicating whether all subscriptions are selected (=true) or not (=false).
     * 
     */
    @Import(name="allSubscriptions")
    private @Nullable Output<Boolean> allSubscriptions;

    public Optional<Output<Boolean>> allSubscriptions() {
        return Optional.ofNullable(this.allSubscriptions);
    }

    /**
     * Gets or sets the association with Commercial&#39;s Billing Account.
     * 
     */
    @Import(name="claim")
    private @Nullable Output<String> claim;

    public Optional<Output<String>> claim() {
        return Optional.ofNullable(this.claim);
    }

    /**
     * The collection ID
     * 
     */
    @Import(name="collectionId")
    private @Nullable Output<String> collectionId;

    public Optional<Output<String>> collectionId() {
        return Optional.ofNullable(this.collectionId);
    }

    /**
     * Gets or sets collection name.
     * 
     */
    @Import(name="collectionName")
    private @Nullable Output<String> collectionName;

    public Optional<Output<String>> collectionName() {
        return Optional.ofNullable(this.collectionName);
    }

    /**
     * Indicating whether the collection is enabled or disabled.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The store ID - must use the tenant ID
     * 
     */
    @Import(name="privateStoreId", required=true)
    private Output<String> privateStoreId;

    public Output<String> privateStoreId() {
        return this.privateStoreId;
    }

    /**
     * Gets or sets subscription ids list. Empty list indicates all subscriptions are selected, null indicates no update is done, explicit list indicates the explicit selected subscriptions. On insert, null is considered as bad request
     * 
     */
    @Import(name="subscriptionsList")
    private @Nullable Output<List<String>> subscriptionsList;

    public Optional<Output<List<String>>> subscriptionsList() {
        return Optional.ofNullable(this.subscriptionsList);
    }

    private PrivateStoreCollectionArgs() {}

    private PrivateStoreCollectionArgs(PrivateStoreCollectionArgs $) {
        this.allSubscriptions = $.allSubscriptions;
        this.claim = $.claim;
        this.collectionId = $.collectionId;
        this.collectionName = $.collectionName;
        this.enabled = $.enabled;
        this.privateStoreId = $.privateStoreId;
        this.subscriptionsList = $.subscriptionsList;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PrivateStoreCollectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PrivateStoreCollectionArgs $;

        public Builder() {
            $ = new PrivateStoreCollectionArgs();
        }

        public Builder(PrivateStoreCollectionArgs defaults) {
            $ = new PrivateStoreCollectionArgs(Objects.requireNonNull(defaults));
        }

        public Builder allSubscriptions(@Nullable Output<Boolean> allSubscriptions) {
            $.allSubscriptions = allSubscriptions;
            return this;
        }

        public Builder allSubscriptions(Boolean allSubscriptions) {
            return allSubscriptions(Output.of(allSubscriptions));
        }

        public Builder claim(@Nullable Output<String> claim) {
            $.claim = claim;
            return this;
        }

        public Builder claim(String claim) {
            return claim(Output.of(claim));
        }

        public Builder collectionId(@Nullable Output<String> collectionId) {
            $.collectionId = collectionId;
            return this;
        }

        public Builder collectionId(String collectionId) {
            return collectionId(Output.of(collectionId));
        }

        public Builder collectionName(@Nullable Output<String> collectionName) {
            $.collectionName = collectionName;
            return this;
        }

        public Builder collectionName(String collectionName) {
            return collectionName(Output.of(collectionName));
        }

        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        public Builder privateStoreId(Output<String> privateStoreId) {
            $.privateStoreId = privateStoreId;
            return this;
        }

        public Builder privateStoreId(String privateStoreId) {
            return privateStoreId(Output.of(privateStoreId));
        }

        public Builder subscriptionsList(@Nullable Output<List<String>> subscriptionsList) {
            $.subscriptionsList = subscriptionsList;
            return this;
        }

        public Builder subscriptionsList(List<String> subscriptionsList) {
            return subscriptionsList(Output.of(subscriptionsList));
        }

        public Builder subscriptionsList(String... subscriptionsList) {
            return subscriptionsList(List.of(subscriptionsList));
        }

        public PrivateStoreCollectionArgs build() {
            $.privateStoreId = Objects.requireNonNull($.privateStoreId, "expected parameter 'privateStoreId' to be non-null");
            return $;
        }
    }

}
