// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.servicefabricmesh.inputs;

import com.pulumi.azurenative.servicefabricmesh.inputs.AzureInternalMonitoringPipelineSinkDescriptionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Describes the diagnostics options available
 * 
 */
public final class DiagnosticsDescriptionArgs extends com.pulumi.resources.ResourceArgs {

    public static final DiagnosticsDescriptionArgs Empty = new DiagnosticsDescriptionArgs();

    /**
     * The sinks to be used if diagnostics is enabled. Sink choices can be overridden at the service and code package level.
     * 
     */
    @Import(name="defaultSinkRefs")
    private @Nullable Output<List<String>> defaultSinkRefs;

    /**
     * @return The sinks to be used if diagnostics is enabled. Sink choices can be overridden at the service and code package level.
     * 
     */
    public Optional<Output<List<String>>> defaultSinkRefs() {
        return Optional.ofNullable(this.defaultSinkRefs);
    }

    /**
     * Status of whether or not sinks are enabled.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Status of whether or not sinks are enabled.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * List of supported sinks that can be referenced.
     * 
     */
    @Import(name="sinks")
    private @Nullable Output<List<AzureInternalMonitoringPipelineSinkDescriptionArgs>> sinks;

    /**
     * @return List of supported sinks that can be referenced.
     * 
     */
    public Optional<Output<List<AzureInternalMonitoringPipelineSinkDescriptionArgs>>> sinks() {
        return Optional.ofNullable(this.sinks);
    }

    private DiagnosticsDescriptionArgs() {}

    private DiagnosticsDescriptionArgs(DiagnosticsDescriptionArgs $) {
        this.defaultSinkRefs = $.defaultSinkRefs;
        this.enabled = $.enabled;
        this.sinks = $.sinks;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DiagnosticsDescriptionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DiagnosticsDescriptionArgs $;

        public Builder() {
            $ = new DiagnosticsDescriptionArgs();
        }

        public Builder(DiagnosticsDescriptionArgs defaults) {
            $ = new DiagnosticsDescriptionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param defaultSinkRefs The sinks to be used if diagnostics is enabled. Sink choices can be overridden at the service and code package level.
         * 
         * @return builder
         * 
         */
        public Builder defaultSinkRefs(@Nullable Output<List<String>> defaultSinkRefs) {
            $.defaultSinkRefs = defaultSinkRefs;
            return this;
        }

        /**
         * @param defaultSinkRefs The sinks to be used if diagnostics is enabled. Sink choices can be overridden at the service and code package level.
         * 
         * @return builder
         * 
         */
        public Builder defaultSinkRefs(List<String> defaultSinkRefs) {
            return defaultSinkRefs(Output.of(defaultSinkRefs));
        }

        /**
         * @param defaultSinkRefs The sinks to be used if diagnostics is enabled. Sink choices can be overridden at the service and code package level.
         * 
         * @return builder
         * 
         */
        public Builder defaultSinkRefs(String... defaultSinkRefs) {
            return defaultSinkRefs(List.of(defaultSinkRefs));
        }

        /**
         * @param enabled Status of whether or not sinks are enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Status of whether or not sinks are enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param sinks List of supported sinks that can be referenced.
         * 
         * @return builder
         * 
         */
        public Builder sinks(@Nullable Output<List<AzureInternalMonitoringPipelineSinkDescriptionArgs>> sinks) {
            $.sinks = sinks;
            return this;
        }

        /**
         * @param sinks List of supported sinks that can be referenced.
         * 
         * @return builder
         * 
         */
        public Builder sinks(List<AzureInternalMonitoringPipelineSinkDescriptionArgs> sinks) {
            return sinks(Output.of(sinks));
        }

        /**
         * @param sinks List of supported sinks that can be referenced.
         * 
         * @return builder
         * 
         */
        public Builder sinks(AzureInternalMonitoringPipelineSinkDescriptionArgs... sinks) {
            return sinks(List.of(sinks));
        }

        public DiagnosticsDescriptionArgs build() {
            return $;
        }
    }

}
