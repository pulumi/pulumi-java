// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.azurenative.datafactory.enums.TriggerReferenceType;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * Trigger reference type.
 * 
 */
public final class TriggerReferenceArgs extends com.pulumi.resources.ResourceArgs {

    public static final TriggerReferenceArgs Empty = new TriggerReferenceArgs();

    /**
     * Reference trigger name.
     * 
     */
    @Import(name="referenceName", required=true)
    private Output<String> referenceName;

    /**
     * @return Reference trigger name.
     * 
     */
    public Output<String> referenceName() {
        return this.referenceName;
    }

    /**
     * Trigger reference type.
     * 
     */
    @Import(name="type", required=true)
    private Output<Either<String,TriggerReferenceType>> type;

    /**
     * @return Trigger reference type.
     * 
     */
    public Output<Either<String,TriggerReferenceType>> type() {
        return this.type;
    }

    private TriggerReferenceArgs() {}

    private TriggerReferenceArgs(TriggerReferenceArgs $) {
        this.referenceName = $.referenceName;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TriggerReferenceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TriggerReferenceArgs $;

        public Builder() {
            $ = new TriggerReferenceArgs();
        }

        public Builder(TriggerReferenceArgs defaults) {
            $ = new TriggerReferenceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param referenceName Reference trigger name.
         * 
         * @return builder
         * 
         */
        public Builder referenceName(Output<String> referenceName) {
            $.referenceName = referenceName;
            return this;
        }

        /**
         * @param referenceName Reference trigger name.
         * 
         * @return builder
         * 
         */
        public Builder referenceName(String referenceName) {
            return referenceName(Output.of(referenceName));
        }

        /**
         * @param type Trigger reference type.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<Either<String,TriggerReferenceType>> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Trigger reference type.
         * 
         * @return builder
         * 
         */
        public Builder type(Either<String,TriggerReferenceType> type) {
            return type(Output.of(type));
        }

        /**
         * @param type Trigger reference type.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Either.ofLeft(type));
        }

        /**
         * @param type Trigger reference type.
         * 
         * @return builder
         * 
         */
        public Builder type(TriggerReferenceType type) {
            return type(Either.ofRight(type));
        }

        public TriggerReferenceArgs build() {
            $.referenceName = Objects.requireNonNull($.referenceName, "expected parameter 'referenceName' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
