// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.azurenative.datafactory.inputs.RetryPolicyResponse;
import com.pulumi.azurenative.datafactory.inputs.SelfDependencyTumblingWindowTriggerReferenceResponse;
import com.pulumi.azurenative.datafactory.inputs.TriggerDependencyReferenceResponse;
import com.pulumi.azurenative.datafactory.inputs.TriggerPipelineReferenceResponse;
import com.pulumi.azurenative.datafactory.inputs.TumblingWindowTriggerDependencyReferenceResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Trigger that schedules pipeline runs for all fixed time interval windows from a start time without gaps and also supports backfill scenarios (when start time is in the past).
 * 
 */
public final class TumblingWindowTriggerResponse extends com.pulumi.resources.InvokeArgs {

    public static final TumblingWindowTriggerResponse Empty = new TumblingWindowTriggerResponse();

    /**
     * List of tags that can be used for describing the trigger.
     * 
     */
    @Import(name="annotations")
    private @Nullable List<Object> annotations;

    /**
     * @return List of tags that can be used for describing the trigger.
     * 
     */
    public Optional<List<Object>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    /**
     * Specifies how long the trigger waits past due time before triggering new run. It doesn&#39;t alter window start and end time. The default is 0. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     * 
     */
    @Import(name="delay")
    private @Nullable Object delay;

    /**
     * @return Specifies how long the trigger waits past due time before triggering new run. It doesn&#39;t alter window start and end time. The default is 0. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     * 
     */
    public Optional<Object> delay() {
        return Optional.ofNullable(this.delay);
    }

    /**
     * Triggers that this trigger depends on. Only tumbling window triggers are supported.
     * 
     */
    @Import(name="dependsOn")
    private @Nullable List<Object> dependsOn;

    /**
     * @return Triggers that this trigger depends on. Only tumbling window triggers are supported.
     * 
     */
    public Optional<List<Object>> dependsOn() {
        return Optional.ofNullable(this.dependsOn);
    }

    /**
     * Trigger description.
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    /**
     * @return Trigger description.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The end time for the time period for the trigger during which events are fired for windows that are ready. Only UTC time is currently supported.
     * 
     */
    @Import(name="endTime")
    private @Nullable String endTime;

    /**
     * @return The end time for the time period for the trigger during which events are fired for windows that are ready. Only UTC time is currently supported.
     * 
     */
    public Optional<String> endTime() {
        return Optional.ofNullable(this.endTime);
    }

    /**
     * The frequency of the time windows.
     * 
     */
    @Import(name="frequency", required=true)
    private String frequency;

    /**
     * @return The frequency of the time windows.
     * 
     */
    public String frequency() {
        return this.frequency;
    }

    /**
     * The interval of the time windows. The minimum interval allowed is 15 Minutes.
     * 
     */
    @Import(name="interval", required=true)
    private Integer interval;

    /**
     * @return The interval of the time windows. The minimum interval allowed is 15 Minutes.
     * 
     */
    public Integer interval() {
        return this.interval;
    }

    /**
     * The max number of parallel time windows (ready for execution) for which a new run is triggered.
     * 
     */
    @Import(name="maxConcurrency", required=true)
    private Integer maxConcurrency;

    /**
     * @return The max number of parallel time windows (ready for execution) for which a new run is triggered.
     * 
     */
    public Integer maxConcurrency() {
        return this.maxConcurrency;
    }

    /**
     * Pipeline for which runs are created when an event is fired for trigger window that is ready.
     * 
     */
    @Import(name="pipeline", required=true)
    private TriggerPipelineReferenceResponse pipeline;

    /**
     * @return Pipeline for which runs are created when an event is fired for trigger window that is ready.
     * 
     */
    public TriggerPipelineReferenceResponse pipeline() {
        return this.pipeline;
    }

    /**
     * Retry policy that will be applied for failed pipeline runs.
     * 
     */
    @Import(name="retryPolicy")
    private @Nullable RetryPolicyResponse retryPolicy;

    /**
     * @return Retry policy that will be applied for failed pipeline runs.
     * 
     */
    public Optional<RetryPolicyResponse> retryPolicy() {
        return Optional.ofNullable(this.retryPolicy);
    }

    /**
     * Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
     * 
     */
    @Import(name="runtimeState", required=true)
    private String runtimeState;

    /**
     * @return Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
     * 
     */
    public String runtimeState() {
        return this.runtimeState;
    }

    /**
     * The start time for the time period for the trigger during which events are fired for windows that are ready. Only UTC time is currently supported.
     * 
     */
    @Import(name="startTime", required=true)
    private String startTime;

    /**
     * @return The start time for the time period for the trigger during which events are fired for windows that are ready. Only UTC time is currently supported.
     * 
     */
    public String startTime() {
        return this.startTime;
    }

    /**
     * Trigger type.
     * Expected value is &#39;TumblingWindowTrigger&#39;.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    /**
     * @return Trigger type.
     * Expected value is &#39;TumblingWindowTrigger&#39;.
     * 
     */
    public String type() {
        return this.type;
    }

    private TumblingWindowTriggerResponse() {}

    private TumblingWindowTriggerResponse(TumblingWindowTriggerResponse $) {
        this.annotations = $.annotations;
        this.delay = $.delay;
        this.dependsOn = $.dependsOn;
        this.description = $.description;
        this.endTime = $.endTime;
        this.frequency = $.frequency;
        this.interval = $.interval;
        this.maxConcurrency = $.maxConcurrency;
        this.pipeline = $.pipeline;
        this.retryPolicy = $.retryPolicy;
        this.runtimeState = $.runtimeState;
        this.startTime = $.startTime;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TumblingWindowTriggerResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TumblingWindowTriggerResponse $;

        public Builder() {
            $ = new TumblingWindowTriggerResponse();
        }

        public Builder(TumblingWindowTriggerResponse defaults) {
            $ = new TumblingWindowTriggerResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param annotations List of tags that can be used for describing the trigger.
         * 
         * @return builder
         * 
         */
        public Builder annotations(@Nullable List<Object> annotations) {
            $.annotations = annotations;
            return this;
        }

        /**
         * @param annotations List of tags that can be used for describing the trigger.
         * 
         * @return builder
         * 
         */
        public Builder annotations(Object... annotations) {
            return annotations(List.of(annotations));
        }

        /**
         * @param delay Specifies how long the trigger waits past due time before triggering new run. It doesn&#39;t alter window start and end time. The default is 0. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
         * 
         * @return builder
         * 
         */
        public Builder delay(@Nullable Object delay) {
            $.delay = delay;
            return this;
        }

        /**
         * @param dependsOn Triggers that this trigger depends on. Only tumbling window triggers are supported.
         * 
         * @return builder
         * 
         */
        public Builder dependsOn(@Nullable List<Object> dependsOn) {
            $.dependsOn = dependsOn;
            return this;
        }

        /**
         * @param dependsOn Triggers that this trigger depends on. Only tumbling window triggers are supported.
         * 
         * @return builder
         * 
         */
        public Builder dependsOn(Object... dependsOn) {
            return dependsOn(List.of(dependsOn));
        }

        /**
         * @param description Trigger description.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        /**
         * @param endTime The end time for the time period for the trigger during which events are fired for windows that are ready. Only UTC time is currently supported.
         * 
         * @return builder
         * 
         */
        public Builder endTime(@Nullable String endTime) {
            $.endTime = endTime;
            return this;
        }

        /**
         * @param frequency The frequency of the time windows.
         * 
         * @return builder
         * 
         */
        public Builder frequency(String frequency) {
            $.frequency = frequency;
            return this;
        }

        /**
         * @param interval The interval of the time windows. The minimum interval allowed is 15 Minutes.
         * 
         * @return builder
         * 
         */
        public Builder interval(Integer interval) {
            $.interval = interval;
            return this;
        }

        /**
         * @param maxConcurrency The max number of parallel time windows (ready for execution) for which a new run is triggered.
         * 
         * @return builder
         * 
         */
        public Builder maxConcurrency(Integer maxConcurrency) {
            $.maxConcurrency = maxConcurrency;
            return this;
        }

        /**
         * @param pipeline Pipeline for which runs are created when an event is fired for trigger window that is ready.
         * 
         * @return builder
         * 
         */
        public Builder pipeline(TriggerPipelineReferenceResponse pipeline) {
            $.pipeline = pipeline;
            return this;
        }

        /**
         * @param retryPolicy Retry policy that will be applied for failed pipeline runs.
         * 
         * @return builder
         * 
         */
        public Builder retryPolicy(@Nullable RetryPolicyResponse retryPolicy) {
            $.retryPolicy = retryPolicy;
            return this;
        }

        /**
         * @param runtimeState Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
         * 
         * @return builder
         * 
         */
        public Builder runtimeState(String runtimeState) {
            $.runtimeState = runtimeState;
            return this;
        }

        /**
         * @param startTime The start time for the time period for the trigger during which events are fired for windows that are ready. Only UTC time is currently supported.
         * 
         * @return builder
         * 
         */
        public Builder startTime(String startTime) {
            $.startTime = startTime;
            return this;
        }

        /**
         * @param type Trigger type.
         * Expected value is &#39;TumblingWindowTrigger&#39;.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public TumblingWindowTriggerResponse build() {
            $.frequency = Objects.requireNonNull($.frequency, "expected parameter 'frequency' to be non-null");
            $.interval = Objects.requireNonNull($.interval, "expected parameter 'interval' to be non-null");
            $.maxConcurrency = Objects.requireNonNull($.maxConcurrency, "expected parameter 'maxConcurrency' to be non-null");
            $.pipeline = Objects.requireNonNull($.pipeline, "expected parameter 'pipeline' to be non-null");
            $.runtimeState = Objects.requireNonNull($.runtimeState, "expected parameter 'runtimeState' to be non-null");
            $.startTime = Objects.requireNonNull($.startTime, "expected parameter 'startTime' to be non-null");
            $.type = Codegen.stringProp("type").arg($.type).require();
            return $;
        }
    }

}
