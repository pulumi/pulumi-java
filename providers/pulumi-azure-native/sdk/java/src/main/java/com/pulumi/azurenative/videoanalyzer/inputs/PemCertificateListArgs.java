// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.videoanalyzer.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * A list of PEM formatted certificates.
 * 
 */
public final class PemCertificateListArgs extends com.pulumi.resources.ResourceArgs {

    public static final PemCertificateListArgs Empty = new PemCertificateListArgs();

    /**
     * PEM formatted public certificates. One certificate per entry.
     * 
     */
    @Import(name="certificates", required=true)
      private final Output<List<String>> certificates;

    public Output<List<String>> certificates() {
        return this.certificates;
    }

    /**
     * The discriminator for derived types.
     * Expected value is &#39;#Microsoft.VideoAnalyzer.PemCertificateList&#39;.
     * 
     */
    @Import(name="type", required=true)
      private final Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    public PemCertificateListArgs(
        Output<List<String>> certificates,
        Output<String> type) {
        this.certificates = Objects.requireNonNull(certificates, "expected parameter 'certificates' to be non-null");
        this.type = Codegen.stringProp("type").output().arg(type).require();
    }

    private PemCertificateListArgs() {
        this.certificates = Codegen.empty();
        this.type = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PemCertificateListArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<List<String>> certificates;
        private Output<String> type;

        public Builder() {
    	      // Empty
        }

        public Builder(PemCertificateListArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificates = defaults.certificates;
    	      this.type = defaults.type;
        }

        public Builder certificates(Output<List<String>> certificates) {
            this.certificates = Objects.requireNonNull(certificates);
            return this;
        }
        public Builder certificates(List<String> certificates) {
            this.certificates = Output.of(Objects.requireNonNull(certificates));
            return this;
        }
        public Builder certificates(String... certificates) {
            return certificates(List.of(certificates));
        }
        public Builder type(Output<String> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder type(String type) {
            this.type = Output.of(Objects.requireNonNull(type));
            return this;
        }        public PemCertificateListArgs build() {
            return new PemCertificateListArgs(certificates, type);
        }
    }
}
