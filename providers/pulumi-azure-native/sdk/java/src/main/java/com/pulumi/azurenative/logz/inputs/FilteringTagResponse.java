// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.logz.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The definition of a filtering tag. Filtering tags are used for capturing resources and include/exclude them from being monitored.
 * 
 */
public final class FilteringTagResponse extends com.pulumi.resources.InvokeArgs {

    public static final FilteringTagResponse Empty = new FilteringTagResponse();

    /**
     * Valid actions for a filtering tag. Exclusion takes priority over inclusion.
     * 
     */
    @Import(name="action")
    private @Nullable String action;

    /**
     * @return Valid actions for a filtering tag. Exclusion takes priority over inclusion.
     * 
     */
    public Optional<String> action() {
        return Optional.ofNullable(this.action);
    }

    /**
     * The name (also known as the key) of the tag.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return The name (also known as the key) of the tag.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The value of the tag.
     * 
     */
    @Import(name="value")
    private @Nullable String value;

    /**
     * @return The value of the tag.
     * 
     */
    public Optional<String> value() {
        return Optional.ofNullable(this.value);
    }

    private FilteringTagResponse() {}

    private FilteringTagResponse(FilteringTagResponse $) {
        this.action = $.action;
        this.name = $.name;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FilteringTagResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FilteringTagResponse $;

        public Builder() {
            $ = new FilteringTagResponse();
        }

        public Builder(FilteringTagResponse defaults) {
            $ = new FilteringTagResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param action Valid actions for a filtering tag. Exclusion takes priority over inclusion.
         * 
         * @return builder
         * 
         */
        public Builder action(@Nullable String action) {
            $.action = action;
            return this;
        }

        /**
         * @param name The name (also known as the key) of the tag.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param value The value of the tag.
         * 
         * @return builder
         * 
         */
        public Builder value(@Nullable String value) {
            $.value = value;
            return this;
        }

        public FilteringTagResponse build() {
            return $;
        }
    }

}
