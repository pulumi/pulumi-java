// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.recoveryservices.inputs;

import com.pulumi.azurenative.recoveryservices.enums.LicenseType;
import com.pulumi.azurenative.recoveryservices.inputs.VMwareCbtDiskInputArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * VMwareCbt specific enable migration input.
 * 
 */
public final class VMwareCbtEnableMigrationInputArgs extends com.pulumi.resources.ResourceArgs {

    public static final VMwareCbtEnableMigrationInputArgs Empty = new VMwareCbtEnableMigrationInputArgs();

    /**
     * The data mover RunAs account Id.
     * 
     */
    @Import(name="dataMoverRunAsAccountId", required=true)
    private Output<String> dataMoverRunAsAccountId;

    public Output<String> dataMoverRunAsAccountId() {
        return this.dataMoverRunAsAccountId;
    }

    /**
     * The disks to include list.
     * 
     */
    @Import(name="disksToInclude", required=true)
    private Output<List<VMwareCbtDiskInputArgs>> disksToInclude;

    public Output<List<VMwareCbtDiskInputArgs>> disksToInclude() {
        return this.disksToInclude;
    }

    /**
     * The class type.
     * Expected value is &#39;VMwareCbt&#39;.
     * 
     */
    @Import(name="instanceType", required=true)
    private Output<String> instanceType;

    public Output<String> instanceType() {
        return this.instanceType;
    }

    /**
     * License type.
     * 
     */
    @Import(name="licenseType")
    private @Nullable Output<Either<String,LicenseType>> licenseType;

    public Optional<Output<Either<String,LicenseType>>> licenseType() {
        return Optional.ofNullable(this.licenseType);
    }

    /**
     * The snapshot RunAs account Id.
     * 
     */
    @Import(name="snapshotRunAsAccountId", required=true)
    private Output<String> snapshotRunAsAccountId;

    public Output<String> snapshotRunAsAccountId() {
        return this.snapshotRunAsAccountId;
    }

    /**
     * The target availability set ARM Id.
     * 
     */
    @Import(name="targetAvailabilitySetId")
    private @Nullable Output<String> targetAvailabilitySetId;

    public Optional<Output<String>> targetAvailabilitySetId() {
        return Optional.ofNullable(this.targetAvailabilitySetId);
    }

    /**
     * The target boot diagnostics storage account ARM Id.
     * 
     */
    @Import(name="targetBootDiagnosticsStorageAccountId")
    private @Nullable Output<String> targetBootDiagnosticsStorageAccountId;

    public Optional<Output<String>> targetBootDiagnosticsStorageAccountId() {
        return Optional.ofNullable(this.targetBootDiagnosticsStorageAccountId);
    }

    /**
     * The target network ARM Id.
     * 
     */
    @Import(name="targetNetworkId", required=true)
    private Output<String> targetNetworkId;

    public Output<String> targetNetworkId() {
        return this.targetNetworkId;
    }

    /**
     * The target resource group ARM Id.
     * 
     */
    @Import(name="targetResourceGroupId", required=true)
    private Output<String> targetResourceGroupId;

    public Output<String> targetResourceGroupId() {
        return this.targetResourceGroupId;
    }

    /**
     * The target subnet name.
     * 
     */
    @Import(name="targetSubnetName")
    private @Nullable Output<String> targetSubnetName;

    public Optional<Output<String>> targetSubnetName() {
        return Optional.ofNullable(this.targetSubnetName);
    }

    /**
     * The target VM name.
     * 
     */
    @Import(name="targetVmName")
    private @Nullable Output<String> targetVmName;

    public Optional<Output<String>> targetVmName() {
        return Optional.ofNullable(this.targetVmName);
    }

    /**
     * The target VM size.
     * 
     */
    @Import(name="targetVmSize")
    private @Nullable Output<String> targetVmSize;

    public Optional<Output<String>> targetVmSize() {
        return Optional.ofNullable(this.targetVmSize);
    }

    /**
     * The ARM Id of the VM discovered in VMware.
     * 
     */
    @Import(name="vmwareMachineId", required=true)
    private Output<String> vmwareMachineId;

    public Output<String> vmwareMachineId() {
        return this.vmwareMachineId;
    }

    private VMwareCbtEnableMigrationInputArgs() {}

    private VMwareCbtEnableMigrationInputArgs(VMwareCbtEnableMigrationInputArgs $) {
        this.dataMoverRunAsAccountId = $.dataMoverRunAsAccountId;
        this.disksToInclude = $.disksToInclude;
        this.instanceType = $.instanceType;
        this.licenseType = $.licenseType;
        this.snapshotRunAsAccountId = $.snapshotRunAsAccountId;
        this.targetAvailabilitySetId = $.targetAvailabilitySetId;
        this.targetBootDiagnosticsStorageAccountId = $.targetBootDiagnosticsStorageAccountId;
        this.targetNetworkId = $.targetNetworkId;
        this.targetResourceGroupId = $.targetResourceGroupId;
        this.targetSubnetName = $.targetSubnetName;
        this.targetVmName = $.targetVmName;
        this.targetVmSize = $.targetVmSize;
        this.vmwareMachineId = $.vmwareMachineId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VMwareCbtEnableMigrationInputArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VMwareCbtEnableMigrationInputArgs $;

        public Builder() {
            $ = new VMwareCbtEnableMigrationInputArgs();
        }

        public Builder(VMwareCbtEnableMigrationInputArgs defaults) {
            $ = new VMwareCbtEnableMigrationInputArgs(Objects.requireNonNull(defaults));
        }

        public Builder dataMoverRunAsAccountId(Output<String> dataMoverRunAsAccountId) {
            $.dataMoverRunAsAccountId = dataMoverRunAsAccountId;
            return this;
        }

        public Builder dataMoverRunAsAccountId(String dataMoverRunAsAccountId) {
            return dataMoverRunAsAccountId(Output.of(dataMoverRunAsAccountId));
        }

        public Builder disksToInclude(Output<List<VMwareCbtDiskInputArgs>> disksToInclude) {
            $.disksToInclude = disksToInclude;
            return this;
        }

        public Builder disksToInclude(List<VMwareCbtDiskInputArgs> disksToInclude) {
            return disksToInclude(Output.of(disksToInclude));
        }

        public Builder disksToInclude(VMwareCbtDiskInputArgs... disksToInclude) {
            return disksToInclude(List.of(disksToInclude));
        }

        public Builder instanceType(Output<String> instanceType) {
            $.instanceType = instanceType;
            return this;
        }

        public Builder instanceType(String instanceType) {
            return instanceType(Output.of(instanceType));
        }

        public Builder licenseType(@Nullable Output<Either<String,LicenseType>> licenseType) {
            $.licenseType = licenseType;
            return this;
        }

        public Builder licenseType(Either<String,LicenseType> licenseType) {
            return licenseType(Output.of(licenseType));
        }

        public Builder snapshotRunAsAccountId(Output<String> snapshotRunAsAccountId) {
            $.snapshotRunAsAccountId = snapshotRunAsAccountId;
            return this;
        }

        public Builder snapshotRunAsAccountId(String snapshotRunAsAccountId) {
            return snapshotRunAsAccountId(Output.of(snapshotRunAsAccountId));
        }

        public Builder targetAvailabilitySetId(@Nullable Output<String> targetAvailabilitySetId) {
            $.targetAvailabilitySetId = targetAvailabilitySetId;
            return this;
        }

        public Builder targetAvailabilitySetId(String targetAvailabilitySetId) {
            return targetAvailabilitySetId(Output.of(targetAvailabilitySetId));
        }

        public Builder targetBootDiagnosticsStorageAccountId(@Nullable Output<String> targetBootDiagnosticsStorageAccountId) {
            $.targetBootDiagnosticsStorageAccountId = targetBootDiagnosticsStorageAccountId;
            return this;
        }

        public Builder targetBootDiagnosticsStorageAccountId(String targetBootDiagnosticsStorageAccountId) {
            return targetBootDiagnosticsStorageAccountId(Output.of(targetBootDiagnosticsStorageAccountId));
        }

        public Builder targetNetworkId(Output<String> targetNetworkId) {
            $.targetNetworkId = targetNetworkId;
            return this;
        }

        public Builder targetNetworkId(String targetNetworkId) {
            return targetNetworkId(Output.of(targetNetworkId));
        }

        public Builder targetResourceGroupId(Output<String> targetResourceGroupId) {
            $.targetResourceGroupId = targetResourceGroupId;
            return this;
        }

        public Builder targetResourceGroupId(String targetResourceGroupId) {
            return targetResourceGroupId(Output.of(targetResourceGroupId));
        }

        public Builder targetSubnetName(@Nullable Output<String> targetSubnetName) {
            $.targetSubnetName = targetSubnetName;
            return this;
        }

        public Builder targetSubnetName(String targetSubnetName) {
            return targetSubnetName(Output.of(targetSubnetName));
        }

        public Builder targetVmName(@Nullable Output<String> targetVmName) {
            $.targetVmName = targetVmName;
            return this;
        }

        public Builder targetVmName(String targetVmName) {
            return targetVmName(Output.of(targetVmName));
        }

        public Builder targetVmSize(@Nullable Output<String> targetVmSize) {
            $.targetVmSize = targetVmSize;
            return this;
        }

        public Builder targetVmSize(String targetVmSize) {
            return targetVmSize(Output.of(targetVmSize));
        }

        public Builder vmwareMachineId(Output<String> vmwareMachineId) {
            $.vmwareMachineId = vmwareMachineId;
            return this;
        }

        public Builder vmwareMachineId(String vmwareMachineId) {
            return vmwareMachineId(Output.of(vmwareMachineId));
        }

        public VMwareCbtEnableMigrationInputArgs build() {
            $.dataMoverRunAsAccountId = Objects.requireNonNull($.dataMoverRunAsAccountId, "expected parameter 'dataMoverRunAsAccountId' to be non-null");
            $.disksToInclude = Objects.requireNonNull($.disksToInclude, "expected parameter 'disksToInclude' to be non-null");
            $.instanceType = Codegen.stringProp("instanceType").output().arg($.instanceType).require();
            $.snapshotRunAsAccountId = Objects.requireNonNull($.snapshotRunAsAccountId, "expected parameter 'snapshotRunAsAccountId' to be non-null");
            $.targetNetworkId = Objects.requireNonNull($.targetNetworkId, "expected parameter 'targetNetworkId' to be non-null");
            $.targetResourceGroupId = Objects.requireNonNull($.targetResourceGroupId, "expected parameter 'targetResourceGroupId' to be non-null");
            $.vmwareMachineId = Objects.requireNonNull($.vmwareMachineId, "expected parameter 'vmwareMachineId' to be non-null");
            return $;
        }
    }

}
