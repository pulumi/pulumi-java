// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.connectedvmwarevsphere.inputs;

import com.pulumi.azurenative.connectedvmwarevsphere.enums.DiskMode;
import com.pulumi.azurenative.connectedvmwarevsphere.enums.DiskType;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Virtual disk model
 * 
 */
public final class VirtualDiskArgs extends com.pulumi.resources.ResourceArgs {

    public static final VirtualDiskArgs Empty = new VirtualDiskArgs();

    /**
     * Gets or sets the controller id.
     * 
     */
    @Import(name="controllerKey")
    private @Nullable Output<Integer> controllerKey;

    /**
     * @return Gets or sets the controller id.
     * 
     */
    public Optional<Output<Integer>> controllerKey() {
        return Optional.ofNullable(this.controllerKey);
    }

    /**
     * Gets or sets the device key value.
     * 
     */
    @Import(name="deviceKey")
    private @Nullable Output<Integer> deviceKey;

    /**
     * @return Gets or sets the device key value.
     * 
     */
    public Optional<Output<Integer>> deviceKey() {
        return Optional.ofNullable(this.deviceKey);
    }

    /**
     * Gets or sets the device name.
     * 
     */
    @Import(name="deviceName")
    private @Nullable Output<String> deviceName;

    /**
     * @return Gets or sets the device name.
     * 
     */
    public Optional<Output<String>> deviceName() {
        return Optional.ofNullable(this.deviceName);
    }

    /**
     * Gets or sets the disk mode.
     * 
     */
    @Import(name="diskMode")
    private @Nullable Output<Either<String,DiskMode>> diskMode;

    /**
     * @return Gets or sets the disk mode.
     * 
     */
    public Optional<Output<Either<String,DiskMode>>> diskMode() {
        return Optional.ofNullable(this.diskMode);
    }

    /**
     * Gets or sets the disk total size.
     * 
     */
    @Import(name="diskSizeGB")
    private @Nullable Output<Integer> diskSizeGB;

    /**
     * @return Gets or sets the disk total size.
     * 
     */
    public Optional<Output<Integer>> diskSizeGB() {
        return Optional.ofNullable(this.diskSizeGB);
    }

    /**
     * Gets or sets the disk backing type.
     * 
     */
    @Import(name="diskType")
    private @Nullable Output<Either<String,DiskType>> diskType;

    /**
     * @return Gets or sets the disk backing type.
     * 
     */
    public Optional<Output<Either<String,DiskType>>> diskType() {
        return Optional.ofNullable(this.diskType);
    }

    /**
     * Gets or sets the name of the virtual disk.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Gets or sets the name of the virtual disk.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Gets or sets the unit number of the disk on the controller.
     * 
     */
    @Import(name="unitNumber")
    private @Nullable Output<Integer> unitNumber;

    /**
     * @return Gets or sets the unit number of the disk on the controller.
     * 
     */
    public Optional<Output<Integer>> unitNumber() {
        return Optional.ofNullable(this.unitNumber);
    }

    private VirtualDiskArgs() {}

    private VirtualDiskArgs(VirtualDiskArgs $) {
        this.controllerKey = $.controllerKey;
        this.deviceKey = $.deviceKey;
        this.deviceName = $.deviceName;
        this.diskMode = $.diskMode;
        this.diskSizeGB = $.diskSizeGB;
        this.diskType = $.diskType;
        this.name = $.name;
        this.unitNumber = $.unitNumber;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VirtualDiskArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VirtualDiskArgs $;

        public Builder() {
            $ = new VirtualDiskArgs();
        }

        public Builder(VirtualDiskArgs defaults) {
            $ = new VirtualDiskArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param controllerKey Gets or sets the controller id.
         * 
         * @return builder
         * 
         */
        public Builder controllerKey(@Nullable Output<Integer> controllerKey) {
            $.controllerKey = controllerKey;
            return this;
        }

        /**
         * @param controllerKey Gets or sets the controller id.
         * 
         * @return builder
         * 
         */
        public Builder controllerKey(Integer controllerKey) {
            return controllerKey(Output.of(controllerKey));
        }

        /**
         * @param deviceKey Gets or sets the device key value.
         * 
         * @return builder
         * 
         */
        public Builder deviceKey(@Nullable Output<Integer> deviceKey) {
            $.deviceKey = deviceKey;
            return this;
        }

        /**
         * @param deviceKey Gets or sets the device key value.
         * 
         * @return builder
         * 
         */
        public Builder deviceKey(Integer deviceKey) {
            return deviceKey(Output.of(deviceKey));
        }

        /**
         * @param deviceName Gets or sets the device name.
         * 
         * @return builder
         * 
         */
        public Builder deviceName(@Nullable Output<String> deviceName) {
            $.deviceName = deviceName;
            return this;
        }

        /**
         * @param deviceName Gets or sets the device name.
         * 
         * @return builder
         * 
         */
        public Builder deviceName(String deviceName) {
            return deviceName(Output.of(deviceName));
        }

        /**
         * @param diskMode Gets or sets the disk mode.
         * 
         * @return builder
         * 
         */
        public Builder diskMode(@Nullable Output<Either<String,DiskMode>> diskMode) {
            $.diskMode = diskMode;
            return this;
        }

        /**
         * @param diskMode Gets or sets the disk mode.
         * 
         * @return builder
         * 
         */
        public Builder diskMode(Either<String,DiskMode> diskMode) {
            return diskMode(Output.of(diskMode));
        }

        /**
         * @param diskMode Gets or sets the disk mode.
         * 
         * @return builder
         * 
         */
        public Builder diskMode(String diskMode) {
            return diskMode(Either.ofLeft(diskMode));
        }

        /**
         * @param diskMode Gets or sets the disk mode.
         * 
         * @return builder
         * 
         */
        public Builder diskMode(DiskMode diskMode) {
            return diskMode(Either.ofRight(diskMode));
        }

        /**
         * @param diskSizeGB Gets or sets the disk total size.
         * 
         * @return builder
         * 
         */
        public Builder diskSizeGB(@Nullable Output<Integer> diskSizeGB) {
            $.diskSizeGB = diskSizeGB;
            return this;
        }

        /**
         * @param diskSizeGB Gets or sets the disk total size.
         * 
         * @return builder
         * 
         */
        public Builder diskSizeGB(Integer diskSizeGB) {
            return diskSizeGB(Output.of(diskSizeGB));
        }

        /**
         * @param diskType Gets or sets the disk backing type.
         * 
         * @return builder
         * 
         */
        public Builder diskType(@Nullable Output<Either<String,DiskType>> diskType) {
            $.diskType = diskType;
            return this;
        }

        /**
         * @param diskType Gets or sets the disk backing type.
         * 
         * @return builder
         * 
         */
        public Builder diskType(Either<String,DiskType> diskType) {
            return diskType(Output.of(diskType));
        }

        /**
         * @param diskType Gets or sets the disk backing type.
         * 
         * @return builder
         * 
         */
        public Builder diskType(String diskType) {
            return diskType(Either.ofLeft(diskType));
        }

        /**
         * @param diskType Gets or sets the disk backing type.
         * 
         * @return builder
         * 
         */
        public Builder diskType(DiskType diskType) {
            return diskType(Either.ofRight(diskType));
        }

        /**
         * @param name Gets or sets the name of the virtual disk.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Gets or sets the name of the virtual disk.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param unitNumber Gets or sets the unit number of the disk on the controller.
         * 
         * @return builder
         * 
         */
        public Builder unitNumber(@Nullable Output<Integer> unitNumber) {
            $.unitNumber = unitNumber;
            return this;
        }

        /**
         * @param unitNumber Gets or sets the unit number of the disk on the controller.
         * 
         * @return builder
         * 
         */
        public Builder unitNumber(Integer unitNumber) {
            return unitNumber(Output.of(unitNumber));
        }

        public VirtualDiskArgs build() {
            return $;
        }
    }

}
