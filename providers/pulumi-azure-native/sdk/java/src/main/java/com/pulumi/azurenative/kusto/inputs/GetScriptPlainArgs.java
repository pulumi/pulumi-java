// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.kusto.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class GetScriptPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetScriptPlainArgs Empty = new GetScriptPlainArgs();

    /**
     * The name of the Kusto cluster.
     * 
     */
    @Import(name="clusterName", required=true)
    private String clusterName;

    /**
     * @return The name of the Kusto cluster.
     * 
     */
    public String clusterName() {
        return this.clusterName;
    }

    /**
     * The name of the database in the Kusto cluster.
     * 
     */
    @Import(name="databaseName", required=true)
    private String databaseName;

    /**
     * @return The name of the database in the Kusto cluster.
     * 
     */
    public String databaseName() {
        return this.databaseName;
    }

    /**
     * The name of the resource group containing the Kusto cluster.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private String resourceGroupName;

    /**
     * @return The name of the resource group containing the Kusto cluster.
     * 
     */
    public String resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The name of the Kusto database script.
     * 
     */
    @Import(name="scriptName", required=true)
    private String scriptName;

    /**
     * @return The name of the Kusto database script.
     * 
     */
    public String scriptName() {
        return this.scriptName;
    }

    private GetScriptPlainArgs() {}

    private GetScriptPlainArgs(GetScriptPlainArgs $) {
        this.clusterName = $.clusterName;
        this.databaseName = $.databaseName;
        this.resourceGroupName = $.resourceGroupName;
        this.scriptName = $.scriptName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetScriptPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetScriptPlainArgs $;

        public Builder() {
            $ = new GetScriptPlainArgs();
        }

        public Builder(GetScriptPlainArgs defaults) {
            $ = new GetScriptPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clusterName The name of the Kusto cluster.
         * 
         * @return builder
         * 
         */
        public Builder clusterName(String clusterName) {
            $.clusterName = clusterName;
            return this;
        }

        /**
         * @param databaseName The name of the database in the Kusto cluster.
         * 
         * @return builder
         * 
         */
        public Builder databaseName(String databaseName) {
            $.databaseName = databaseName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group containing the Kusto cluster.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param scriptName The name of the Kusto database script.
         * 
         * @return builder
         * 
         */
        public Builder scriptName(String scriptName) {
            $.scriptName = scriptName;
            return this;
        }

        public GetScriptPlainArgs build() {
            $.clusterName = Objects.requireNonNull($.clusterName, "expected parameter 'clusterName' to be non-null");
            $.databaseName = Objects.requireNonNull($.databaseName, "expected parameter 'databaseName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.scriptName = Objects.requireNonNull($.scriptName, "expected parameter 'scriptName' to be non-null");
            return $;
        }
    }

}
