// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datashare;

import com.pulumi.azurenative.datashare.enums.RecurrenceInterval;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ScheduledSynchronizationSettingArgs extends com.pulumi.resources.ResourceArgs {

    public static final ScheduledSynchronizationSettingArgs Empty = new ScheduledSynchronizationSettingArgs();

    /**
     * The name of the share account.
     * 
     */
    @Import(name="accountName", required=true)
    private Output<String> accountName;

    public Output<String> accountName() {
        return this.accountName;
    }

    /**
     * Kind of synchronization setting.
     * Expected value is &#39;ScheduleBased&#39;.
     * 
     */
    @Import(name="kind", required=true)
    private Output<String> kind;

    public Output<String> kind() {
        return this.kind;
    }

    /**
     * Recurrence Interval
     * 
     */
    @Import(name="recurrenceInterval", required=true)
    private Output<Either<String,RecurrenceInterval>> recurrenceInterval;

    public Output<Either<String,RecurrenceInterval>> recurrenceInterval() {
        return this.recurrenceInterval;
    }

    /**
     * The resource group name.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The name of the share to add the synchronization setting to.
     * 
     */
    @Import(name="shareName", required=true)
    private Output<String> shareName;

    public Output<String> shareName() {
        return this.shareName;
    }

    /**
     * The name of the synchronizationSetting.
     * 
     */
    @Import(name="synchronizationSettingName")
    private @Nullable Output<String> synchronizationSettingName;

    public Optional<Output<String>> synchronizationSettingName() {
        return Optional.ofNullable(this.synchronizationSettingName);
    }

    /**
     * Synchronization time
     * 
     */
    @Import(name="synchronizationTime", required=true)
    private Output<String> synchronizationTime;

    public Output<String> synchronizationTime() {
        return this.synchronizationTime;
    }

    private ScheduledSynchronizationSettingArgs() {}

    private ScheduledSynchronizationSettingArgs(ScheduledSynchronizationSettingArgs $) {
        this.accountName = $.accountName;
        this.kind = $.kind;
        this.recurrenceInterval = $.recurrenceInterval;
        this.resourceGroupName = $.resourceGroupName;
        this.shareName = $.shareName;
        this.synchronizationSettingName = $.synchronizationSettingName;
        this.synchronizationTime = $.synchronizationTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ScheduledSynchronizationSettingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ScheduledSynchronizationSettingArgs $;

        public Builder() {
            $ = new ScheduledSynchronizationSettingArgs();
        }

        public Builder(ScheduledSynchronizationSettingArgs defaults) {
            $ = new ScheduledSynchronizationSettingArgs(Objects.requireNonNull(defaults));
        }

        public Builder accountName(Output<String> accountName) {
            $.accountName = accountName;
            return this;
        }

        public Builder accountName(String accountName) {
            return accountName(Output.of(accountName));
        }

        public Builder kind(Output<String> kind) {
            $.kind = kind;
            return this;
        }

        public Builder kind(String kind) {
            return kind(Output.of(kind));
        }

        public Builder recurrenceInterval(Output<Either<String,RecurrenceInterval>> recurrenceInterval) {
            $.recurrenceInterval = recurrenceInterval;
            return this;
        }

        public Builder recurrenceInterval(Either<String,RecurrenceInterval> recurrenceInterval) {
            return recurrenceInterval(Output.of(recurrenceInterval));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder shareName(Output<String> shareName) {
            $.shareName = shareName;
            return this;
        }

        public Builder shareName(String shareName) {
            return shareName(Output.of(shareName));
        }

        public Builder synchronizationSettingName(@Nullable Output<String> synchronizationSettingName) {
            $.synchronizationSettingName = synchronizationSettingName;
            return this;
        }

        public Builder synchronizationSettingName(String synchronizationSettingName) {
            return synchronizationSettingName(Output.of(synchronizationSettingName));
        }

        public Builder synchronizationTime(Output<String> synchronizationTime) {
            $.synchronizationTime = synchronizationTime;
            return this;
        }

        public Builder synchronizationTime(String synchronizationTime) {
            return synchronizationTime(Output.of(synchronizationTime));
        }

        public ScheduledSynchronizationSettingArgs build() {
            $.accountName = Objects.requireNonNull($.accountName, "expected parameter 'accountName' to be non-null");
            $.kind = Codegen.stringProp("kind").output().arg($.kind).require();
            $.recurrenceInterval = Objects.requireNonNull($.recurrenceInterval, "expected parameter 'recurrenceInterval' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.shareName = Objects.requireNonNull($.shareName, "expected parameter 'shareName' to be non-null");
            $.synchronizationTime = Objects.requireNonNull($.synchronizationTime, "expected parameter 'synchronizationTime' to be non-null");
            return $;
        }
    }

}
