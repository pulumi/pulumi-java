// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.databox;

import com.pulumi.azurenative.databox.enums.JobDeliveryType;
import com.pulumi.azurenative.databox.enums.TransferType;
import com.pulumi.azurenative.databox.inputs.DataBoxDiskJobDetailsArgs;
import com.pulumi.azurenative.databox.inputs.DataBoxHeavyJobDetailsArgs;
import com.pulumi.azurenative.databox.inputs.DataBoxJobDetailsArgs;
import com.pulumi.azurenative.databox.inputs.JobDeliveryInfoArgs;
import com.pulumi.azurenative.databox.inputs.ResourceIdentityArgs;
import com.pulumi.azurenative.databox.inputs.SkuArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class JobArgs extends com.pulumi.resources.ResourceArgs {

    public static final JobArgs Empty = new JobArgs();

    /**
     * Delivery Info of Job.
     * 
     */
    @Import(name="deliveryInfo")
    private @Nullable Output<JobDeliveryInfoArgs> deliveryInfo;

    public Optional<Output<JobDeliveryInfoArgs>> deliveryInfo() {
        return Optional.ofNullable(this.deliveryInfo);
    }

    /**
     * Delivery type of Job.
     * 
     */
    @Import(name="deliveryType")
    private @Nullable Output<Either<String,JobDeliveryType>> deliveryType;

    public Optional<Output<Either<String,JobDeliveryType>>> deliveryType() {
        return Optional.ofNullable(this.deliveryType);
    }

    /**
     * Details of a job run. This field will only be sent for expand details filter.
     * 
     */
    @Import(name="details")
    private @Nullable Output<Object> details;

    public Optional<Output<Object>> details() {
        return Optional.ofNullable(this.details);
    }

    /**
     * Msi identity of the resource
     * 
     */
    @Import(name="identity")
    private @Nullable Output<ResourceIdentityArgs> identity;

    public Optional<Output<ResourceIdentityArgs>> identity() {
        return Optional.ofNullable(this.identity);
    }

    /**
     * The name of the job Resource within the specified resource group. job names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * 
     */
    @Import(name="jobName")
    private @Nullable Output<String> jobName;

    public Optional<Output<String>> jobName() {
        return Optional.ofNullable(this.jobName);
    }

    /**
     * The location of the resource. This will be one of the supported and registered Azure Regions (e.g. West US, East US, Southeast Asia, etc.). The region of a resource cannot be changed once it is created, but if an identical region is specified on update the request will succeed.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The Resource Group Name
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The sku type.
     * 
     */
    @Import(name="sku", required=true)
    private Output<SkuArgs> sku;

    public Output<SkuArgs> sku() {
        return this.sku;
    }

    /**
     * The list of key value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups).
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Type of the data transfer.
     * 
     */
    @Import(name="transferType", required=true)
    private Output<Either<String,TransferType>> transferType;

    public Output<Either<String,TransferType>> transferType() {
        return this.transferType;
    }

    private JobArgs() {}

    private JobArgs(JobArgs $) {
        this.deliveryInfo = $.deliveryInfo;
        this.deliveryType = $.deliveryType;
        this.details = $.details;
        this.identity = $.identity;
        this.jobName = $.jobName;
        this.location = $.location;
        this.resourceGroupName = $.resourceGroupName;
        this.sku = $.sku;
        this.tags = $.tags;
        this.transferType = $.transferType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(JobArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private JobArgs $;

        public Builder() {
            $ = new JobArgs();
        }

        public Builder(JobArgs defaults) {
            $ = new JobArgs(Objects.requireNonNull(defaults));
        }

        public Builder deliveryInfo(@Nullable Output<JobDeliveryInfoArgs> deliveryInfo) {
            $.deliveryInfo = deliveryInfo;
            return this;
        }

        public Builder deliveryInfo(JobDeliveryInfoArgs deliveryInfo) {
            return deliveryInfo(Output.of(deliveryInfo));
        }

        public Builder deliveryType(@Nullable Output<Either<String,JobDeliveryType>> deliveryType) {
            $.deliveryType = deliveryType;
            return this;
        }

        public Builder deliveryType(Either<String,JobDeliveryType> deliveryType) {
            return deliveryType(Output.of(deliveryType));
        }

        public Builder details(@Nullable Output<Object> details) {
            $.details = details;
            return this;
        }

        public Builder details(Object details) {
            return details(Output.of(details));
        }

        public Builder identity(@Nullable Output<ResourceIdentityArgs> identity) {
            $.identity = identity;
            return this;
        }

        public Builder identity(ResourceIdentityArgs identity) {
            return identity(Output.of(identity));
        }

        public Builder jobName(@Nullable Output<String> jobName) {
            $.jobName = jobName;
            return this;
        }

        public Builder jobName(String jobName) {
            return jobName(Output.of(jobName));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder sku(Output<SkuArgs> sku) {
            $.sku = sku;
            return this;
        }

        public Builder sku(SkuArgs sku) {
            return sku(Output.of(sku));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder transferType(Output<Either<String,TransferType>> transferType) {
            $.transferType = transferType;
            return this;
        }

        public Builder transferType(Either<String,TransferType> transferType) {
            return transferType(Output.of(transferType));
        }

        public JobArgs build() {
            $.deliveryType = Codegen.stringProp("deliveryType").left(JobDeliveryType.class).output().arg($.deliveryType).def("NonScheduled").getNullable();
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.sku = Objects.requireNonNull($.sku, "expected parameter 'sku' to be non-null");
            $.transferType = Objects.requireNonNull($.transferType, "expected parameter 'transferType' to be non-null");
            return $;
        }
    }

}
