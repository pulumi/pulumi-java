// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A copy activity Azure CosmosDB (SQL API) Collection source.
 * 
 */
public final class CosmosDbSqlApiSourceResponse extends com.pulumi.resources.InvokeArgs {

    public static final CosmosDbSqlApiSourceResponse Empty = new CosmosDbSqlApiSourceResponse();

    /**
     * Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
     * 
     */
    @Import(name="additionalColumns")
    private @Nullable Object additionalColumns;

    /**
     * @return Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
     * 
     */
    public Optional<Object> additionalColumns() {
        return Optional.ofNullable(this.additionalColumns);
    }

    /**
     * Whether detect primitive values as datetime values. Type: boolean (or Expression with resultType boolean).
     * 
     */
    @Import(name="detectDatetime")
    private @Nullable Object detectDatetime;

    /**
     * @return Whether detect primitive values as datetime values. Type: boolean (or Expression with resultType boolean).
     * 
     */
    public Optional<Object> detectDatetime() {
        return Optional.ofNullable(this.detectDatetime);
    }

    /**
     * If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
     * 
     */
    @Import(name="disableMetricsCollection")
    private @Nullable Object disableMetricsCollection;

    /**
     * @return If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
     * 
     */
    public Optional<Object> disableMetricsCollection() {
        return Optional.ofNullable(this.disableMetricsCollection);
    }

    /**
     * The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
     * 
     */
    @Import(name="maxConcurrentConnections")
    private @Nullable Object maxConcurrentConnections;

    /**
     * @return The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
     * 
     */
    public Optional<Object> maxConcurrentConnections() {
        return Optional.ofNullable(this.maxConcurrentConnections);
    }

    /**
     * Page size of the result. Type: integer (or Expression with resultType integer).
     * 
     */
    @Import(name="pageSize")
    private @Nullable Object pageSize;

    /**
     * @return Page size of the result. Type: integer (or Expression with resultType integer).
     * 
     */
    public Optional<Object> pageSize() {
        return Optional.ofNullable(this.pageSize);
    }

    /**
     * Preferred regions. Type: array of strings (or Expression with resultType array of strings).
     * 
     */
    @Import(name="preferredRegions")
    private @Nullable Object preferredRegions;

    /**
     * @return Preferred regions. Type: array of strings (or Expression with resultType array of strings).
     * 
     */
    public Optional<Object> preferredRegions() {
        return Optional.ofNullable(this.preferredRegions);
    }

    /**
     * SQL API query. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="query")
    private @Nullable Object query;

    /**
     * @return SQL API query. Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Object> query() {
        return Optional.ofNullable(this.query);
    }

    /**
     * Source retry count. Type: integer (or Expression with resultType integer).
     * 
     */
    @Import(name="sourceRetryCount")
    private @Nullable Object sourceRetryCount;

    /**
     * @return Source retry count. Type: integer (or Expression with resultType integer).
     * 
     */
    public Optional<Object> sourceRetryCount() {
        return Optional.ofNullable(this.sourceRetryCount);
    }

    /**
     * Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     * 
     */
    @Import(name="sourceRetryWait")
    private @Nullable Object sourceRetryWait;

    /**
     * @return Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     * 
     */
    public Optional<Object> sourceRetryWait() {
        return Optional.ofNullable(this.sourceRetryWait);
    }

    /**
     * Copy source type.
     * Expected value is &#39;CosmosDbSqlApiSource&#39;.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    /**
     * @return Copy source type.
     * Expected value is &#39;CosmosDbSqlApiSource&#39;.
     * 
     */
    public String type() {
        return this.type;
    }

    private CosmosDbSqlApiSourceResponse() {}

    private CosmosDbSqlApiSourceResponse(CosmosDbSqlApiSourceResponse $) {
        this.additionalColumns = $.additionalColumns;
        this.detectDatetime = $.detectDatetime;
        this.disableMetricsCollection = $.disableMetricsCollection;
        this.maxConcurrentConnections = $.maxConcurrentConnections;
        this.pageSize = $.pageSize;
        this.preferredRegions = $.preferredRegions;
        this.query = $.query;
        this.sourceRetryCount = $.sourceRetryCount;
        this.sourceRetryWait = $.sourceRetryWait;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CosmosDbSqlApiSourceResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CosmosDbSqlApiSourceResponse $;

        public Builder() {
            $ = new CosmosDbSqlApiSourceResponse();
        }

        public Builder(CosmosDbSqlApiSourceResponse defaults) {
            $ = new CosmosDbSqlApiSourceResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param additionalColumns Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with resultType array of objects).
         * 
         * @return builder
         * 
         */
        public Builder additionalColumns(@Nullable Object additionalColumns) {
            $.additionalColumns = additionalColumns;
            return this;
        }

        /**
         * @param detectDatetime Whether detect primitive values as datetime values. Type: boolean (or Expression with resultType boolean).
         * 
         * @return builder
         * 
         */
        public Builder detectDatetime(@Nullable Object detectDatetime) {
            $.detectDatetime = detectDatetime;
            return this;
        }

        /**
         * @param disableMetricsCollection If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
         * 
         * @return builder
         * 
         */
        public Builder disableMetricsCollection(@Nullable Object disableMetricsCollection) {
            $.disableMetricsCollection = disableMetricsCollection;
            return this;
        }

        /**
         * @param maxConcurrentConnections The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
         * 
         * @return builder
         * 
         */
        public Builder maxConcurrentConnections(@Nullable Object maxConcurrentConnections) {
            $.maxConcurrentConnections = maxConcurrentConnections;
            return this;
        }

        /**
         * @param pageSize Page size of the result. Type: integer (or Expression with resultType integer).
         * 
         * @return builder
         * 
         */
        public Builder pageSize(@Nullable Object pageSize) {
            $.pageSize = pageSize;
            return this;
        }

        /**
         * @param preferredRegions Preferred regions. Type: array of strings (or Expression with resultType array of strings).
         * 
         * @return builder
         * 
         */
        public Builder preferredRegions(@Nullable Object preferredRegions) {
            $.preferredRegions = preferredRegions;
            return this;
        }

        /**
         * @param query SQL API query. Type: string (or Expression with resultType string).
         * 
         * @return builder
         * 
         */
        public Builder query(@Nullable Object query) {
            $.query = query;
            return this;
        }

        /**
         * @param sourceRetryCount Source retry count. Type: integer (or Expression with resultType integer).
         * 
         * @return builder
         * 
         */
        public Builder sourceRetryCount(@Nullable Object sourceRetryCount) {
            $.sourceRetryCount = sourceRetryCount;
            return this;
        }

        /**
         * @param sourceRetryWait Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
         * 
         * @return builder
         * 
         */
        public Builder sourceRetryWait(@Nullable Object sourceRetryWait) {
            $.sourceRetryWait = sourceRetryWait;
            return this;
        }

        /**
         * @param type Copy source type.
         * Expected value is &#39;CosmosDbSqlApiSource&#39;.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public CosmosDbSqlApiSourceResponse build() {
            $.type = Codegen.stringProp("type").arg($.type).require();
            return $;
        }
    }

}
