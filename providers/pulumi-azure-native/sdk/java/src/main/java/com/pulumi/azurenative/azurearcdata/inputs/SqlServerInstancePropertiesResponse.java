// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.azurearcdata.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Properties of SqlServerInstance.
 * 
 */
public final class SqlServerInstancePropertiesResponse extends com.pulumi.resources.InvokeArgs {

    public static final SqlServerInstancePropertiesResponse Empty = new SqlServerInstancePropertiesResponse();

    /**
     * SQL Server collation.
     * 
     */
    @Import(name="collation")
    private @Nullable String collation;

    /**
     * @return SQL Server collation.
     * 
     */
    public Optional<String> collation() {
        return Optional.ofNullable(this.collation);
    }

    /**
     * ARM Resource id of the container resource (Azure Arc for Servers).
     * 
     */
    @Import(name="containerResourceId", required=true)
    private String containerResourceId;

    /**
     * @return ARM Resource id of the container resource (Azure Arc for Servers).
     * 
     */
    public String containerResourceId() {
        return this.containerResourceId;
    }

    /**
     * The time when the resource was created.
     * 
     */
    @Import(name="createTime", required=true)
    private String createTime;

    /**
     * @return The time when the resource was created.
     * 
     */
    public String createTime() {
        return this.createTime;
    }

    /**
     * SQL Server current version.
     * 
     */
    @Import(name="currentVersion")
    private @Nullable String currentVersion;

    /**
     * @return SQL Server current version.
     * 
     */
    public Optional<String> currentVersion() {
        return Optional.ofNullable(this.currentVersion);
    }

    /**
     * SQL Server edition.
     * 
     */
    @Import(name="edition")
    private @Nullable String edition;

    /**
     * @return SQL Server edition.
     * 
     */
    public Optional<String> edition() {
        return Optional.ofNullable(this.edition);
    }

    /**
     * SQL Server instance name.
     * 
     */
    @Import(name="instanceName")
    private @Nullable String instanceName;

    /**
     * @return SQL Server instance name.
     * 
     */
    public Optional<String> instanceName() {
        return Optional.ofNullable(this.instanceName);
    }

    /**
     * SQL Server license type.
     * 
     */
    @Import(name="licenseType")
    private @Nullable String licenseType;

    /**
     * @return SQL Server license type.
     * 
     */
    public Optional<String> licenseType() {
        return Optional.ofNullable(this.licenseType);
    }

    /**
     * SQL Server update level.
     * 
     */
    @Import(name="patchLevel")
    private @Nullable String patchLevel;

    /**
     * @return SQL Server update level.
     * 
     */
    public Optional<String> patchLevel() {
        return Optional.ofNullable(this.patchLevel);
    }

    /**
     * SQL Server product ID.
     * 
     */
    @Import(name="productId")
    private @Nullable String productId;

    /**
     * @return SQL Server product ID.
     * 
     */
    public Optional<String> productId() {
        return Optional.ofNullable(this.productId);
    }

    @Import(name="provisioningState", required=true)
    private String provisioningState;

    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * The cloud connectivity status.
     * 
     */
    @Import(name="status", required=true)
    private String status;

    /**
     * @return The cloud connectivity status.
     * 
     */
    public String status() {
        return this.status;
    }

    /**
     * Dynamic TCP ports used by SQL Server.
     * 
     */
    @Import(name="tcpDynamicPorts")
    private @Nullable String tcpDynamicPorts;

    /**
     * @return Dynamic TCP ports used by SQL Server.
     * 
     */
    public Optional<String> tcpDynamicPorts() {
        return Optional.ofNullable(this.tcpDynamicPorts);
    }

    /**
     * Static TCP ports used by SQL Server.
     * 
     */
    @Import(name="tcpStaticPorts")
    private @Nullable String tcpStaticPorts;

    /**
     * @return Static TCP ports used by SQL Server.
     * 
     */
    public Optional<String> tcpStaticPorts() {
        return Optional.ofNullable(this.tcpStaticPorts);
    }

    /**
     * The number of logical processors used by the SQL Server instance.
     * 
     */
    @Import(name="vCore")
    private @Nullable String vCore;

    /**
     * @return The number of logical processors used by the SQL Server instance.
     * 
     */
    public Optional<String> vCore() {
        return Optional.ofNullable(this.vCore);
    }

    /**
     * SQL Server version.
     * 
     */
    @Import(name="version")
    private @Nullable String version;

    /**
     * @return SQL Server version.
     * 
     */
    public Optional<String> version() {
        return Optional.ofNullable(this.version);
    }

    private SqlServerInstancePropertiesResponse() {}

    private SqlServerInstancePropertiesResponse(SqlServerInstancePropertiesResponse $) {
        this.collation = $.collation;
        this.containerResourceId = $.containerResourceId;
        this.createTime = $.createTime;
        this.currentVersion = $.currentVersion;
        this.edition = $.edition;
        this.instanceName = $.instanceName;
        this.licenseType = $.licenseType;
        this.patchLevel = $.patchLevel;
        this.productId = $.productId;
        this.provisioningState = $.provisioningState;
        this.status = $.status;
        this.tcpDynamicPorts = $.tcpDynamicPorts;
        this.tcpStaticPorts = $.tcpStaticPorts;
        this.vCore = $.vCore;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SqlServerInstancePropertiesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SqlServerInstancePropertiesResponse $;

        public Builder() {
            $ = new SqlServerInstancePropertiesResponse();
        }

        public Builder(SqlServerInstancePropertiesResponse defaults) {
            $ = new SqlServerInstancePropertiesResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param collation SQL Server collation.
         * 
         * @return builder
         * 
         */
        public Builder collation(@Nullable String collation) {
            $.collation = collation;
            return this;
        }

        /**
         * @param containerResourceId ARM Resource id of the container resource (Azure Arc for Servers).
         * 
         * @return builder
         * 
         */
        public Builder containerResourceId(String containerResourceId) {
            $.containerResourceId = containerResourceId;
            return this;
        }

        /**
         * @param createTime The time when the resource was created.
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param currentVersion SQL Server current version.
         * 
         * @return builder
         * 
         */
        public Builder currentVersion(@Nullable String currentVersion) {
            $.currentVersion = currentVersion;
            return this;
        }

        /**
         * @param edition SQL Server edition.
         * 
         * @return builder
         * 
         */
        public Builder edition(@Nullable String edition) {
            $.edition = edition;
            return this;
        }

        /**
         * @param instanceName SQL Server instance name.
         * 
         * @return builder
         * 
         */
        public Builder instanceName(@Nullable String instanceName) {
            $.instanceName = instanceName;
            return this;
        }

        /**
         * @param licenseType SQL Server license type.
         * 
         * @return builder
         * 
         */
        public Builder licenseType(@Nullable String licenseType) {
            $.licenseType = licenseType;
            return this;
        }

        /**
         * @param patchLevel SQL Server update level.
         * 
         * @return builder
         * 
         */
        public Builder patchLevel(@Nullable String patchLevel) {
            $.patchLevel = patchLevel;
            return this;
        }

        /**
         * @param productId SQL Server product ID.
         * 
         * @return builder
         * 
         */
        public Builder productId(@Nullable String productId) {
            $.productId = productId;
            return this;
        }

        public Builder provisioningState(String provisioningState) {
            $.provisioningState = provisioningState;
            return this;
        }

        /**
         * @param status The cloud connectivity status.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            $.status = status;
            return this;
        }

        /**
         * @param tcpDynamicPorts Dynamic TCP ports used by SQL Server.
         * 
         * @return builder
         * 
         */
        public Builder tcpDynamicPorts(@Nullable String tcpDynamicPorts) {
            $.tcpDynamicPorts = tcpDynamicPorts;
            return this;
        }

        /**
         * @param tcpStaticPorts Static TCP ports used by SQL Server.
         * 
         * @return builder
         * 
         */
        public Builder tcpStaticPorts(@Nullable String tcpStaticPorts) {
            $.tcpStaticPorts = tcpStaticPorts;
            return this;
        }

        /**
         * @param vCore The number of logical processors used by the SQL Server instance.
         * 
         * @return builder
         * 
         */
        public Builder vCore(@Nullable String vCore) {
            $.vCore = vCore;
            return this;
        }

        /**
         * @param version SQL Server version.
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable String version) {
            $.version = version;
            return this;
        }

        public SqlServerInstancePropertiesResponse build() {
            $.containerResourceId = Objects.requireNonNull($.containerResourceId, "expected parameter 'containerResourceId' to be non-null");
            $.createTime = Objects.requireNonNull($.createTime, "expected parameter 'createTime' to be non-null");
            $.provisioningState = Objects.requireNonNull($.provisioningState, "expected parameter 'provisioningState' to be non-null");
            $.status = Objects.requireNonNull($.status, "expected parameter 'status' to be non-null");
            return $;
        }
    }

}
