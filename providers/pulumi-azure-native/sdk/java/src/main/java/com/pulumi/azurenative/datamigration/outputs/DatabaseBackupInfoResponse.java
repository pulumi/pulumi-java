// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datamigration.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class DatabaseBackupInfoResponse {
    /**
     * @return The list of backup files for the current database.
     * 
     */
    private final List<String> backupFiles;
    /**
     * @return Date and time when the backup operation finished.
     * 
     */
    private final String backupFinishDate;
    /**
     * @return Backup Type.
     * 
     */
    private final String backupType;
    /**
     * @return Database name.
     * 
     */
    private final String databaseName;
    /**
     * @return Number of files in the backup set.
     * 
     */
    private final Integer familyCount;
    /**
     * @return Whether the backup set is compressed
     * 
     */
    private final Boolean isCompressed;
    /**
     * @return Database was damaged when backed up, but the backup operation was requested to continue despite errors.
     * 
     */
    private final Boolean isDamaged;
    /**
     * @return Position of current database backup in the file.
     * 
     */
    private final Integer position;

    @CustomType.Constructor
    private DatabaseBackupInfoResponse(
        @CustomType.Parameter("backupFiles") List<String> backupFiles,
        @CustomType.Parameter("backupFinishDate") String backupFinishDate,
        @CustomType.Parameter("backupType") String backupType,
        @CustomType.Parameter("databaseName") String databaseName,
        @CustomType.Parameter("familyCount") Integer familyCount,
        @CustomType.Parameter("isCompressed") Boolean isCompressed,
        @CustomType.Parameter("isDamaged") Boolean isDamaged,
        @CustomType.Parameter("position") Integer position) {
        this.backupFiles = backupFiles;
        this.backupFinishDate = backupFinishDate;
        this.backupType = backupType;
        this.databaseName = databaseName;
        this.familyCount = familyCount;
        this.isCompressed = isCompressed;
        this.isDamaged = isDamaged;
        this.position = position;
    }

    /**
     * @return The list of backup files for the current database.
     * 
     */
    public List<String> backupFiles() {
        return this.backupFiles;
    }
    /**
     * @return Date and time when the backup operation finished.
     * 
     */
    public String backupFinishDate() {
        return this.backupFinishDate;
    }
    /**
     * @return Backup Type.
     * 
     */
    public String backupType() {
        return this.backupType;
    }
    /**
     * @return Database name.
     * 
     */
    public String databaseName() {
        return this.databaseName;
    }
    /**
     * @return Number of files in the backup set.
     * 
     */
    public Integer familyCount() {
        return this.familyCount;
    }
    /**
     * @return Whether the backup set is compressed
     * 
     */
    public Boolean isCompressed() {
        return this.isCompressed;
    }
    /**
     * @return Database was damaged when backed up, but the backup operation was requested to continue despite errors.
     * 
     */
    public Boolean isDamaged() {
        return this.isDamaged;
    }
    /**
     * @return Position of current database backup in the file.
     * 
     */
    public Integer position() {
        return this.position;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatabaseBackupInfoResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<String> backupFiles;
        private String backupFinishDate;
        private String backupType;
        private String databaseName;
        private Integer familyCount;
        private Boolean isCompressed;
        private Boolean isDamaged;
        private Integer position;

        public Builder() {
    	      // Empty
        }

        public Builder(DatabaseBackupInfoResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backupFiles = defaults.backupFiles;
    	      this.backupFinishDate = defaults.backupFinishDate;
    	      this.backupType = defaults.backupType;
    	      this.databaseName = defaults.databaseName;
    	      this.familyCount = defaults.familyCount;
    	      this.isCompressed = defaults.isCompressed;
    	      this.isDamaged = defaults.isDamaged;
    	      this.position = defaults.position;
        }

        public Builder backupFiles(List<String> backupFiles) {
            this.backupFiles = Objects.requireNonNull(backupFiles);
            return this;
        }
        public Builder backupFiles(String... backupFiles) {
            return backupFiles(List.of(backupFiles));
        }
        public Builder backupFinishDate(String backupFinishDate) {
            this.backupFinishDate = Objects.requireNonNull(backupFinishDate);
            return this;
        }
        public Builder backupType(String backupType) {
            this.backupType = Objects.requireNonNull(backupType);
            return this;
        }
        public Builder databaseName(String databaseName) {
            this.databaseName = Objects.requireNonNull(databaseName);
            return this;
        }
        public Builder familyCount(Integer familyCount) {
            this.familyCount = Objects.requireNonNull(familyCount);
            return this;
        }
        public Builder isCompressed(Boolean isCompressed) {
            this.isCompressed = Objects.requireNonNull(isCompressed);
            return this;
        }
        public Builder isDamaged(Boolean isDamaged) {
            this.isDamaged = Objects.requireNonNull(isDamaged);
            return this;
        }
        public Builder position(Integer position) {
            this.position = Objects.requireNonNull(position);
            return this;
        }        public DatabaseBackupInfoResponse build() {
            return new DatabaseBackupInfoResponse(backupFiles, backupFinishDate, backupType, databaseName, familyCount, isCompressed, isDamaged, position);
        }
    }
}
