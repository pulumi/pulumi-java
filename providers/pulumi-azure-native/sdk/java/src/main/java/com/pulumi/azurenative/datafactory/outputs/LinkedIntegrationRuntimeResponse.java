// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class LinkedIntegrationRuntimeResponse {
    /**
     * The creating time of the linked integration runtime.
     * 
     */
    private final String createTime;
    /**
     * The location of the data factory for which the linked integration runtime belong to.
     * 
     */
    private final String dataFactoryLocation;
    /**
     * The name of the data factory for which the linked integration runtime belong to.
     * 
     */
    private final String dataFactoryName;
    /**
     * The name of the linked integration runtime.
     * 
     */
    private final String name;
    /**
     * The subscription ID for which the linked integration runtime belong to.
     * 
     */
    private final String subscriptionId;

    @CustomType.Constructor
    private LinkedIntegrationRuntimeResponse(
        @CustomType.Parameter("createTime") String createTime,
        @CustomType.Parameter("dataFactoryLocation") String dataFactoryLocation,
        @CustomType.Parameter("dataFactoryName") String dataFactoryName,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("subscriptionId") String subscriptionId) {
        this.createTime = createTime;
        this.dataFactoryLocation = dataFactoryLocation;
        this.dataFactoryName = dataFactoryName;
        this.name = name;
        this.subscriptionId = subscriptionId;
    }

    /**
     * The creating time of the linked integration runtime.
     * 
    */
    public String createTime() {
        return this.createTime;
    }
    /**
     * The location of the data factory for which the linked integration runtime belong to.
     * 
    */
    public String dataFactoryLocation() {
        return this.dataFactoryLocation;
    }
    /**
     * The name of the data factory for which the linked integration runtime belong to.
     * 
    */
    public String dataFactoryName() {
        return this.dataFactoryName;
    }
    /**
     * The name of the linked integration runtime.
     * 
    */
    public String name() {
        return this.name;
    }
    /**
     * The subscription ID for which the linked integration runtime belong to.
     * 
    */
    public String subscriptionId() {
        return this.subscriptionId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LinkedIntegrationRuntimeResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String createTime;
        private String dataFactoryLocation;
        private String dataFactoryName;
        private String name;
        private String subscriptionId;

        public Builder() {
    	      // Empty
        }

        public Builder(LinkedIntegrationRuntimeResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createTime = defaults.createTime;
    	      this.dataFactoryLocation = defaults.dataFactoryLocation;
    	      this.dataFactoryName = defaults.dataFactoryName;
    	      this.name = defaults.name;
    	      this.subscriptionId = defaults.subscriptionId;
        }

        public Builder createTime(String createTime) {
            this.createTime = Objects.requireNonNull(createTime);
            return this;
        }
        public Builder dataFactoryLocation(String dataFactoryLocation) {
            this.dataFactoryLocation = Objects.requireNonNull(dataFactoryLocation);
            return this;
        }
        public Builder dataFactoryName(String dataFactoryName) {
            this.dataFactoryName = Objects.requireNonNull(dataFactoryName);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder subscriptionId(String subscriptionId) {
            this.subscriptionId = Objects.requireNonNull(subscriptionId);
            return this;
        }        public LinkedIntegrationRuntimeResponse build() {
            return new LinkedIntegrationRuntimeResponse(createTime, dataFactoryLocation, dataFactoryName, name, subscriptionId);
        }
    }
}
