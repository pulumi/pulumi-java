// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.recoveryservices.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Hyper-V Replica specific policy Input.
 * 
 */
public final class HyperVReplicaPolicyInputArgs extends com.pulumi.resources.ResourceArgs {

    public static final HyperVReplicaPolicyInputArgs Empty = new HyperVReplicaPolicyInputArgs();

    /**
     * A value indicating the authentication type.
     * 
     */
    @Import(name="allowedAuthenticationType")
    private @Nullable Output<Integer> allowedAuthenticationType;

    public Optional<Output<Integer>> allowedAuthenticationType() {
        return Optional.ofNullable(this.allowedAuthenticationType);
    }

    /**
     * A value indicating the application consistent frequency.
     * 
     */
    @Import(name="applicationConsistentSnapshotFrequencyInHours")
    private @Nullable Output<Integer> applicationConsistentSnapshotFrequencyInHours;

    public Optional<Output<Integer>> applicationConsistentSnapshotFrequencyInHours() {
        return Optional.ofNullable(this.applicationConsistentSnapshotFrequencyInHours);
    }

    /**
     * A value indicating whether compression has to be enabled.
     * 
     */
    @Import(name="compression")
    private @Nullable Output<String> compression;

    public Optional<Output<String>> compression() {
        return Optional.ofNullable(this.compression);
    }

    /**
     * A value indicating whether IR is online.
     * 
     */
    @Import(name="initialReplicationMethod")
    private @Nullable Output<String> initialReplicationMethod;

    public Optional<Output<String>> initialReplicationMethod() {
        return Optional.ofNullable(this.initialReplicationMethod);
    }

    /**
     * The class type.
     * Expected value is &#39;HyperVReplica2012&#39;.
     * 
     */
    @Import(name="instanceType")
    private @Nullable Output<String> instanceType;

    public Optional<Output<String>> instanceType() {
        return Optional.ofNullable(this.instanceType);
    }

    /**
     * A value indicating the offline IR export path.
     * 
     */
    @Import(name="offlineReplicationExportPath")
    private @Nullable Output<String> offlineReplicationExportPath;

    public Optional<Output<String>> offlineReplicationExportPath() {
        return Optional.ofNullable(this.offlineReplicationExportPath);
    }

    /**
     * A value indicating the offline IR import path.
     * 
     */
    @Import(name="offlineReplicationImportPath")
    private @Nullable Output<String> offlineReplicationImportPath;

    public Optional<Output<String>> offlineReplicationImportPath() {
        return Optional.ofNullable(this.offlineReplicationImportPath);
    }

    /**
     * A value indicating the online IR start time.
     * 
     */
    @Import(name="onlineReplicationStartTime")
    private @Nullable Output<String> onlineReplicationStartTime;

    public Optional<Output<String>> onlineReplicationStartTime() {
        return Optional.ofNullable(this.onlineReplicationStartTime);
    }

    /**
     * A value indicating the number of recovery points.
     * 
     */
    @Import(name="recoveryPoints")
    private @Nullable Output<Integer> recoveryPoints;

    public Optional<Output<Integer>> recoveryPoints() {
        return Optional.ofNullable(this.recoveryPoints);
    }

    /**
     * A value indicating whether the VM has to be auto deleted.
     * 
     */
    @Import(name="replicaDeletion")
    private @Nullable Output<String> replicaDeletion;

    public Optional<Output<String>> replicaDeletion() {
        return Optional.ofNullable(this.replicaDeletion);
    }

    /**
     * A value indicating the recovery HTTPS port.
     * 
     */
    @Import(name="replicationPort")
    private @Nullable Output<Integer> replicationPort;

    public Optional<Output<Integer>> replicationPort() {
        return Optional.ofNullable(this.replicationPort);
    }

    private HyperVReplicaPolicyInputArgs() {}

    private HyperVReplicaPolicyInputArgs(HyperVReplicaPolicyInputArgs $) {
        this.allowedAuthenticationType = $.allowedAuthenticationType;
        this.applicationConsistentSnapshotFrequencyInHours = $.applicationConsistentSnapshotFrequencyInHours;
        this.compression = $.compression;
        this.initialReplicationMethod = $.initialReplicationMethod;
        this.instanceType = $.instanceType;
        this.offlineReplicationExportPath = $.offlineReplicationExportPath;
        this.offlineReplicationImportPath = $.offlineReplicationImportPath;
        this.onlineReplicationStartTime = $.onlineReplicationStartTime;
        this.recoveryPoints = $.recoveryPoints;
        this.replicaDeletion = $.replicaDeletion;
        this.replicationPort = $.replicationPort;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HyperVReplicaPolicyInputArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HyperVReplicaPolicyInputArgs $;

        public Builder() {
            $ = new HyperVReplicaPolicyInputArgs();
        }

        public Builder(HyperVReplicaPolicyInputArgs defaults) {
            $ = new HyperVReplicaPolicyInputArgs(Objects.requireNonNull(defaults));
        }

        public Builder allowedAuthenticationType(@Nullable Output<Integer> allowedAuthenticationType) {
            $.allowedAuthenticationType = allowedAuthenticationType;
            return this;
        }

        public Builder allowedAuthenticationType(Integer allowedAuthenticationType) {
            return allowedAuthenticationType(Output.of(allowedAuthenticationType));
        }

        public Builder applicationConsistentSnapshotFrequencyInHours(@Nullable Output<Integer> applicationConsistentSnapshotFrequencyInHours) {
            $.applicationConsistentSnapshotFrequencyInHours = applicationConsistentSnapshotFrequencyInHours;
            return this;
        }

        public Builder applicationConsistentSnapshotFrequencyInHours(Integer applicationConsistentSnapshotFrequencyInHours) {
            return applicationConsistentSnapshotFrequencyInHours(Output.of(applicationConsistentSnapshotFrequencyInHours));
        }

        public Builder compression(@Nullable Output<String> compression) {
            $.compression = compression;
            return this;
        }

        public Builder compression(String compression) {
            return compression(Output.of(compression));
        }

        public Builder initialReplicationMethod(@Nullable Output<String> initialReplicationMethod) {
            $.initialReplicationMethod = initialReplicationMethod;
            return this;
        }

        public Builder initialReplicationMethod(String initialReplicationMethod) {
            return initialReplicationMethod(Output.of(initialReplicationMethod));
        }

        public Builder instanceType(@Nullable Output<String> instanceType) {
            $.instanceType = instanceType;
            return this;
        }

        public Builder instanceType(String instanceType) {
            return instanceType(Output.of(instanceType));
        }

        public Builder offlineReplicationExportPath(@Nullable Output<String> offlineReplicationExportPath) {
            $.offlineReplicationExportPath = offlineReplicationExportPath;
            return this;
        }

        public Builder offlineReplicationExportPath(String offlineReplicationExportPath) {
            return offlineReplicationExportPath(Output.of(offlineReplicationExportPath));
        }

        public Builder offlineReplicationImportPath(@Nullable Output<String> offlineReplicationImportPath) {
            $.offlineReplicationImportPath = offlineReplicationImportPath;
            return this;
        }

        public Builder offlineReplicationImportPath(String offlineReplicationImportPath) {
            return offlineReplicationImportPath(Output.of(offlineReplicationImportPath));
        }

        public Builder onlineReplicationStartTime(@Nullable Output<String> onlineReplicationStartTime) {
            $.onlineReplicationStartTime = onlineReplicationStartTime;
            return this;
        }

        public Builder onlineReplicationStartTime(String onlineReplicationStartTime) {
            return onlineReplicationStartTime(Output.of(onlineReplicationStartTime));
        }

        public Builder recoveryPoints(@Nullable Output<Integer> recoveryPoints) {
            $.recoveryPoints = recoveryPoints;
            return this;
        }

        public Builder recoveryPoints(Integer recoveryPoints) {
            return recoveryPoints(Output.of(recoveryPoints));
        }

        public Builder replicaDeletion(@Nullable Output<String> replicaDeletion) {
            $.replicaDeletion = replicaDeletion;
            return this;
        }

        public Builder replicaDeletion(String replicaDeletion) {
            return replicaDeletion(Output.of(replicaDeletion));
        }

        public Builder replicationPort(@Nullable Output<Integer> replicationPort) {
            $.replicationPort = replicationPort;
            return this;
        }

        public Builder replicationPort(Integer replicationPort) {
            return replicationPort(Output.of(replicationPort));
        }

        public HyperVReplicaPolicyInputArgs build() {
            $.instanceType = Codegen.stringProp("instanceType").output().arg($.instanceType).getNullable();
            return $;
        }
    }

}
