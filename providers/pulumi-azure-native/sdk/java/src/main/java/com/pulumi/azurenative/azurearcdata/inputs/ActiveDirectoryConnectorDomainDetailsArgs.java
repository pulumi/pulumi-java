// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.azurearcdata.inputs;

import com.pulumi.azurenative.azurearcdata.enums.AccountProvisioningMode;
import com.pulumi.azurenative.azurearcdata.inputs.ActiveDirectoryDomainControllersArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Active Directory domain details
 * 
 */
public final class ActiveDirectoryConnectorDomainDetailsArgs extends com.pulumi.resources.ResourceArgs {

    public static final ActiveDirectoryConnectorDomainDetailsArgs Empty = new ActiveDirectoryConnectorDomainDetailsArgs();

    /**
     * null
     * 
     */
    @Import(name="domainControllers", required=true)
    private Output<ActiveDirectoryDomainControllersArgs> domainControllers;

    /**
     * @return null
     * 
     */
    public Output<ActiveDirectoryDomainControllersArgs> domainControllers() {
        return this.domainControllers;
    }

    /**
     * NETBIOS name of the Active Directory domain.
     * 
     */
    @Import(name="netbiosDomainName")
    private @Nullable Output<String> netbiosDomainName;

    /**
     * @return NETBIOS name of the Active Directory domain.
     * 
     */
    public Optional<Output<String>> netbiosDomainName() {
        return Optional.ofNullable(this.netbiosDomainName);
    }

    /**
     * The distinguished name of the Active Directory Organizational Unit.
     * 
     */
    @Import(name="ouDistinguishedName")
    private @Nullable Output<String> ouDistinguishedName;

    /**
     * @return The distinguished name of the Active Directory Organizational Unit.
     * 
     */
    public Optional<Output<String>> ouDistinguishedName() {
        return Optional.ofNullable(this.ouDistinguishedName);
    }

    /**
     * Name (uppercase) of the Active Directory domain that this AD connector will be associated with.
     * 
     */
    @Import(name="realm", required=true)
    private Output<String> realm;

    /**
     * @return Name (uppercase) of the Active Directory domain that this AD connector will be associated with.
     * 
     */
    public Output<String> realm() {
        return this.realm;
    }

    /**
     * The service account provisioning mode for this Active Directory connector.
     * 
     */
    @Import(name="serviceAccountProvisioning")
    private @Nullable Output<Either<String,AccountProvisioningMode>> serviceAccountProvisioning;

    /**
     * @return The service account provisioning mode for this Active Directory connector.
     * 
     */
    public Optional<Output<Either<String,AccountProvisioningMode>>> serviceAccountProvisioning() {
        return Optional.ofNullable(this.serviceAccountProvisioning);
    }

    private ActiveDirectoryConnectorDomainDetailsArgs() {}

    private ActiveDirectoryConnectorDomainDetailsArgs(ActiveDirectoryConnectorDomainDetailsArgs $) {
        this.domainControllers = $.domainControllers;
        this.netbiosDomainName = $.netbiosDomainName;
        this.ouDistinguishedName = $.ouDistinguishedName;
        this.realm = $.realm;
        this.serviceAccountProvisioning = $.serviceAccountProvisioning;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ActiveDirectoryConnectorDomainDetailsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ActiveDirectoryConnectorDomainDetailsArgs $;

        public Builder() {
            $ = new ActiveDirectoryConnectorDomainDetailsArgs();
        }

        public Builder(ActiveDirectoryConnectorDomainDetailsArgs defaults) {
            $ = new ActiveDirectoryConnectorDomainDetailsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param domainControllers null
         * 
         * @return builder
         * 
         */
        public Builder domainControllers(Output<ActiveDirectoryDomainControllersArgs> domainControllers) {
            $.domainControllers = domainControllers;
            return this;
        }

        /**
         * @param domainControllers null
         * 
         * @return builder
         * 
         */
        public Builder domainControllers(ActiveDirectoryDomainControllersArgs domainControllers) {
            return domainControllers(Output.of(domainControllers));
        }

        /**
         * @param netbiosDomainName NETBIOS name of the Active Directory domain.
         * 
         * @return builder
         * 
         */
        public Builder netbiosDomainName(@Nullable Output<String> netbiosDomainName) {
            $.netbiosDomainName = netbiosDomainName;
            return this;
        }

        /**
         * @param netbiosDomainName NETBIOS name of the Active Directory domain.
         * 
         * @return builder
         * 
         */
        public Builder netbiosDomainName(String netbiosDomainName) {
            return netbiosDomainName(Output.of(netbiosDomainName));
        }

        /**
         * @param ouDistinguishedName The distinguished name of the Active Directory Organizational Unit.
         * 
         * @return builder
         * 
         */
        public Builder ouDistinguishedName(@Nullable Output<String> ouDistinguishedName) {
            $.ouDistinguishedName = ouDistinguishedName;
            return this;
        }

        /**
         * @param ouDistinguishedName The distinguished name of the Active Directory Organizational Unit.
         * 
         * @return builder
         * 
         */
        public Builder ouDistinguishedName(String ouDistinguishedName) {
            return ouDistinguishedName(Output.of(ouDistinguishedName));
        }

        /**
         * @param realm Name (uppercase) of the Active Directory domain that this AD connector will be associated with.
         * 
         * @return builder
         * 
         */
        public Builder realm(Output<String> realm) {
            $.realm = realm;
            return this;
        }

        /**
         * @param realm Name (uppercase) of the Active Directory domain that this AD connector will be associated with.
         * 
         * @return builder
         * 
         */
        public Builder realm(String realm) {
            return realm(Output.of(realm));
        }

        /**
         * @param serviceAccountProvisioning The service account provisioning mode for this Active Directory connector.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccountProvisioning(@Nullable Output<Either<String,AccountProvisioningMode>> serviceAccountProvisioning) {
            $.serviceAccountProvisioning = serviceAccountProvisioning;
            return this;
        }

        /**
         * @param serviceAccountProvisioning The service account provisioning mode for this Active Directory connector.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccountProvisioning(Either<String,AccountProvisioningMode> serviceAccountProvisioning) {
            return serviceAccountProvisioning(Output.of(serviceAccountProvisioning));
        }

        /**
         * @param serviceAccountProvisioning The service account provisioning mode for this Active Directory connector.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccountProvisioning(String serviceAccountProvisioning) {
            return serviceAccountProvisioning(Either.ofLeft(serviceAccountProvisioning));
        }

        /**
         * @param serviceAccountProvisioning The service account provisioning mode for this Active Directory connector.
         * 
         * @return builder
         * 
         */
        public Builder serviceAccountProvisioning(AccountProvisioningMode serviceAccountProvisioning) {
            return serviceAccountProvisioning(Either.ofRight(serviceAccountProvisioning));
        }

        public ActiveDirectoryConnectorDomainDetailsArgs build() {
            $.domainControllers = Objects.requireNonNull($.domainControllers, "expected parameter 'domainControllers' to be non-null");
            $.realm = Objects.requireNonNull($.realm, "expected parameter 'realm' to be non-null");
            $.serviceAccountProvisioning = Codegen.stringProp("serviceAccountProvisioning").left(AccountProvisioningMode.class).output().arg($.serviceAccountProvisioning).def("manual").getNullable();
            return $;
        }
    }

}
