// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.storsimple.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ListDeviceFailoverTarsArgs extends com.pulumi.resources.InvokeArgs {

    public static final ListDeviceFailoverTarsArgs Empty = new ListDeviceFailoverTarsArgs();

    /**
     * The manager name
     * 
     */
    @Import(name="managerName", required=true)
    private String managerName;

    public String managerName() {
        return this.managerName;
    }

    /**
     * The resource group name
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private String resourceGroupName;

    public String resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The source device name on which failover is performed.
     * 
     */
    @Import(name="sourceDeviceName", required=true)
    private String sourceDeviceName;

    public String sourceDeviceName() {
        return this.sourceDeviceName;
    }

    /**
     * The list of path IDs of the volume containers that needs to be failed-over, for which we want to fetch the eligible targets.
     * 
     */
    @Import(name="volumeContainers")
    private @Nullable List<String> volumeContainers;

    public Optional<List<String>> volumeContainers() {
        return Optional.ofNullable(this.volumeContainers);
    }

    private ListDeviceFailoverTarsArgs() {}

    private ListDeviceFailoverTarsArgs(ListDeviceFailoverTarsArgs $) {
        this.managerName = $.managerName;
        this.resourceGroupName = $.resourceGroupName;
        this.sourceDeviceName = $.sourceDeviceName;
        this.volumeContainers = $.volumeContainers;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ListDeviceFailoverTarsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ListDeviceFailoverTarsArgs $;

        public Builder() {
            $ = new ListDeviceFailoverTarsArgs();
        }

        public Builder(ListDeviceFailoverTarsArgs defaults) {
            $ = new ListDeviceFailoverTarsArgs(Objects.requireNonNull(defaults));
        }

        public Builder managerName(String managerName) {
            $.managerName = managerName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder sourceDeviceName(String sourceDeviceName) {
            $.sourceDeviceName = sourceDeviceName;
            return this;
        }

        public Builder volumeContainers(@Nullable List<String> volumeContainers) {
            $.volumeContainers = volumeContainers;
            return this;
        }

        public Builder volumeContainers(String... volumeContainers) {
            return volumeContainers(List.of(volumeContainers));
        }

        public ListDeviceFailoverTarsArgs build() {
            $.managerName = Objects.requireNonNull($.managerName, "expected parameter 'managerName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.sourceDeviceName = Objects.requireNonNull($.sourceDeviceName, "expected parameter 'sourceDeviceName' to be non-null");
            return $;
        }
    }

}
