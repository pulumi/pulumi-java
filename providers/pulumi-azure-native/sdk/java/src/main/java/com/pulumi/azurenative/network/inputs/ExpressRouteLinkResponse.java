// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.azurenative.network.inputs.ExpressRouteLinkMacSecConfigResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * ExpressRouteLink child resource definition.
 * 
 */
public final class ExpressRouteLinkResponse extends com.pulumi.resources.InvokeArgs {

    public static final ExpressRouteLinkResponse Empty = new ExpressRouteLinkResponse();

    /**
     * Administrative state of the physical port.
     * 
     */
    @Import(name="adminState")
    private @Nullable String adminState;

    /**
     * @return Administrative state of the physical port.
     * 
     */
    public Optional<String> adminState() {
        return Optional.ofNullable(this.adminState);
    }

    /**
     * Physical fiber port type.
     * 
     */
    @Import(name="connectorType", required=true)
    private String connectorType;

    /**
     * @return Physical fiber port type.
     * 
     */
    public String connectorType() {
        return this.connectorType;
    }

    /**
     * A unique read-only string that changes whenever the resource is updated.
     * 
     */
    @Import(name="etag", required=true)
    private String etag;

    /**
     * @return A unique read-only string that changes whenever the resource is updated.
     * 
     */
    public String etag() {
        return this.etag;
    }

    /**
     * Resource ID.
     * 
     */
    @Import(name="id")
    private @Nullable String id;

    /**
     * @return Resource ID.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Name of Azure router interface.
     * 
     */
    @Import(name="interfaceName", required=true)
    private String interfaceName;

    /**
     * @return Name of Azure router interface.
     * 
     */
    public String interfaceName() {
        return this.interfaceName;
    }

    /**
     * MacSec configuration.
     * 
     */
    @Import(name="macSecConfig")
    private @Nullable ExpressRouteLinkMacSecConfigResponse macSecConfig;

    /**
     * @return MacSec configuration.
     * 
     */
    public Optional<ExpressRouteLinkMacSecConfigResponse> macSecConfig() {
        return Optional.ofNullable(this.macSecConfig);
    }

    /**
     * Name of child port resource that is unique among child port resources of the parent.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return Name of child port resource that is unique among child port resources of the parent.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Mapping between physical port to patch panel port.
     * 
     */
    @Import(name="patchPanelId", required=true)
    private String patchPanelId;

    /**
     * @return Mapping between physical port to patch panel port.
     * 
     */
    public String patchPanelId() {
        return this.patchPanelId;
    }

    /**
     * The provisioning state of the express route link resource.
     * 
     */
    @Import(name="provisioningState", required=true)
    private String provisioningState;

    /**
     * @return The provisioning state of the express route link resource.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Mapping of physical patch panel to rack.
     * 
     */
    @Import(name="rackId", required=true)
    private String rackId;

    /**
     * @return Mapping of physical patch panel to rack.
     * 
     */
    public String rackId() {
        return this.rackId;
    }

    /**
     * Name of Azure router associated with physical port.
     * 
     */
    @Import(name="routerName", required=true)
    private String routerName;

    /**
     * @return Name of Azure router associated with physical port.
     * 
     */
    public String routerName() {
        return this.routerName;
    }

    private ExpressRouteLinkResponse() {}

    private ExpressRouteLinkResponse(ExpressRouteLinkResponse $) {
        this.adminState = $.adminState;
        this.connectorType = $.connectorType;
        this.etag = $.etag;
        this.id = $.id;
        this.interfaceName = $.interfaceName;
        this.macSecConfig = $.macSecConfig;
        this.name = $.name;
        this.patchPanelId = $.patchPanelId;
        this.provisioningState = $.provisioningState;
        this.rackId = $.rackId;
        this.routerName = $.routerName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExpressRouteLinkResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExpressRouteLinkResponse $;

        public Builder() {
            $ = new ExpressRouteLinkResponse();
        }

        public Builder(ExpressRouteLinkResponse defaults) {
            $ = new ExpressRouteLinkResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param adminState Administrative state of the physical port.
         * 
         * @return builder
         * 
         */
        public Builder adminState(@Nullable String adminState) {
            $.adminState = adminState;
            return this;
        }

        /**
         * @param connectorType Physical fiber port type.
         * 
         * @return builder
         * 
         */
        public Builder connectorType(String connectorType) {
            $.connectorType = connectorType;
            return this;
        }

        /**
         * @param etag A unique read-only string that changes whenever the resource is updated.
         * 
         * @return builder
         * 
         */
        public Builder etag(String etag) {
            $.etag = etag;
            return this;
        }

        /**
         * @param id Resource ID.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable String id) {
            $.id = id;
            return this;
        }

        /**
         * @param interfaceName Name of Azure router interface.
         * 
         * @return builder
         * 
         */
        public Builder interfaceName(String interfaceName) {
            $.interfaceName = interfaceName;
            return this;
        }

        /**
         * @param macSecConfig MacSec configuration.
         * 
         * @return builder
         * 
         */
        public Builder macSecConfig(@Nullable ExpressRouteLinkMacSecConfigResponse macSecConfig) {
            $.macSecConfig = macSecConfig;
            return this;
        }

        /**
         * @param name Name of child port resource that is unique among child port resources of the parent.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param patchPanelId Mapping between physical port to patch panel port.
         * 
         * @return builder
         * 
         */
        public Builder patchPanelId(String patchPanelId) {
            $.patchPanelId = patchPanelId;
            return this;
        }

        /**
         * @param provisioningState The provisioning state of the express route link resource.
         * 
         * @return builder
         * 
         */
        public Builder provisioningState(String provisioningState) {
            $.provisioningState = provisioningState;
            return this;
        }

        /**
         * @param rackId Mapping of physical patch panel to rack.
         * 
         * @return builder
         * 
         */
        public Builder rackId(String rackId) {
            $.rackId = rackId;
            return this;
        }

        /**
         * @param routerName Name of Azure router associated with physical port.
         * 
         * @return builder
         * 
         */
        public Builder routerName(String routerName) {
            $.routerName = routerName;
            return this;
        }

        public ExpressRouteLinkResponse build() {
            $.connectorType = Objects.requireNonNull($.connectorType, "expected parameter 'connectorType' to be non-null");
            $.etag = Objects.requireNonNull($.etag, "expected parameter 'etag' to be non-null");
            $.interfaceName = Objects.requireNonNull($.interfaceName, "expected parameter 'interfaceName' to be non-null");
            $.patchPanelId = Objects.requireNonNull($.patchPanelId, "expected parameter 'patchPanelId' to be non-null");
            $.provisioningState = Objects.requireNonNull($.provisioningState, "expected parameter 'provisioningState' to be non-null");
            $.rackId = Objects.requireNonNull($.rackId, "expected parameter 'rackId' to be non-null");
            $.routerName = Objects.requireNonNull($.routerName, "expected parameter 'routerName' to be non-null");
            return $;
        }
    }

}
