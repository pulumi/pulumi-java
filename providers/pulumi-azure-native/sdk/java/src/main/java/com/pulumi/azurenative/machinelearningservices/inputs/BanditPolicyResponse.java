// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.machinelearningservices.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Defines an early termination policy based on slack criteria, and a frequency and delay interval for evaluation.
 * 
 */
public final class BanditPolicyResponse extends com.pulumi.resources.InvokeArgs {

    public static final BanditPolicyResponse Empty = new BanditPolicyResponse();

    /**
     * Number of intervals by which to delay the first evaluation.
     * 
     */
    @Import(name="delayEvaluation")
    private @Nullable Integer delayEvaluation;

    /**
     * @return Number of intervals by which to delay the first evaluation.
     * 
     */
    public Optional<Integer> delayEvaluation() {
        return Optional.ofNullable(this.delayEvaluation);
    }

    /**
     * Interval (number of runs) between policy evaluations.
     * 
     */
    @Import(name="evaluationInterval")
    private @Nullable Integer evaluationInterval;

    /**
     * @return Interval (number of runs) between policy evaluations.
     * 
     */
    public Optional<Integer> evaluationInterval() {
        return Optional.ofNullable(this.evaluationInterval);
    }

    /**
     * Expected value is &#39;Bandit&#39;.
     * 
     */
    @Import(name="policyType", required=true)
    private String policyType;

    /**
     * @return
     * Expected value is &#39;Bandit&#39;.
     * 
     */
    public String policyType() {
        return this.policyType;
    }

    /**
     * Absolute distance allowed from the best performing run.
     * 
     */
    @Import(name="slackAmount")
    private @Nullable Double slackAmount;

    /**
     * @return Absolute distance allowed from the best performing run.
     * 
     */
    public Optional<Double> slackAmount() {
        return Optional.ofNullable(this.slackAmount);
    }

    /**
     * Ratio of the allowed distance from the best performing run.
     * 
     */
    @Import(name="slackFactor")
    private @Nullable Double slackFactor;

    /**
     * @return Ratio of the allowed distance from the best performing run.
     * 
     */
    public Optional<Double> slackFactor() {
        return Optional.ofNullable(this.slackFactor);
    }

    private BanditPolicyResponse() {}

    private BanditPolicyResponse(BanditPolicyResponse $) {
        this.delayEvaluation = $.delayEvaluation;
        this.evaluationInterval = $.evaluationInterval;
        this.policyType = $.policyType;
        this.slackAmount = $.slackAmount;
        this.slackFactor = $.slackFactor;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BanditPolicyResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BanditPolicyResponse $;

        public Builder() {
            $ = new BanditPolicyResponse();
        }

        public Builder(BanditPolicyResponse defaults) {
            $ = new BanditPolicyResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param delayEvaluation Number of intervals by which to delay the first evaluation.
         * 
         * @return builder
         * 
         */
        public Builder delayEvaluation(@Nullable Integer delayEvaluation) {
            $.delayEvaluation = delayEvaluation;
            return this;
        }

        /**
         * @param evaluationInterval Interval (number of runs) between policy evaluations.
         * 
         * @return builder
         * 
         */
        public Builder evaluationInterval(@Nullable Integer evaluationInterval) {
            $.evaluationInterval = evaluationInterval;
            return this;
        }

        /**
         * @param policyType
         * Expected value is &#39;Bandit&#39;.
         * 
         * @return builder
         * 
         */
        public Builder policyType(String policyType) {
            $.policyType = policyType;
            return this;
        }

        /**
         * @param slackAmount Absolute distance allowed from the best performing run.
         * 
         * @return builder
         * 
         */
        public Builder slackAmount(@Nullable Double slackAmount) {
            $.slackAmount = slackAmount;
            return this;
        }

        /**
         * @param slackFactor Ratio of the allowed distance from the best performing run.
         * 
         * @return builder
         * 
         */
        public Builder slackFactor(@Nullable Double slackFactor) {
            $.slackFactor = slackFactor;
            return this;
        }

        public BanditPolicyResponse build() {
            $.policyType = Codegen.stringProp("policyType").arg($.policyType).require();
            return $;
        }
    }

}
