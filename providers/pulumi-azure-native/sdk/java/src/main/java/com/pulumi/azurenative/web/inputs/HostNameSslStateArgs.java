// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.web.inputs;

import com.pulumi.azurenative.web.enums.HostType;
import com.pulumi.azurenative.web.enums.SslState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * SSL-enabled hostname.
 * 
 */
public final class HostNameSslStateArgs extends com.pulumi.resources.ResourceArgs {

    public static final HostNameSslStateArgs Empty = new HostNameSslStateArgs();

    /**
     * Indicates whether the hostname is a standard or repository hostname.
     * 
     */
    @Import(name="hostType")
    private @Nullable Output<HostType> hostType;

    public Optional<Output<HostType>> hostType() {
        return Optional.ofNullable(this.hostType);
    }

    /**
     * Hostname.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * SSL type.
     * 
     */
    @Import(name="sslState")
    private @Nullable Output<SslState> sslState;

    public Optional<Output<SslState>> sslState() {
        return Optional.ofNullable(this.sslState);
    }

    /**
     * SSL certificate thumbprint.
     * 
     */
    @Import(name="thumbprint")
    private @Nullable Output<String> thumbprint;

    public Optional<Output<String>> thumbprint() {
        return Optional.ofNullable(this.thumbprint);
    }

    /**
     * Set to &lt;code&gt;true&lt;/code&gt; to update existing hostname.
     * 
     */
    @Import(name="toUpdate")
    private @Nullable Output<Boolean> toUpdate;

    public Optional<Output<Boolean>> toUpdate() {
        return Optional.ofNullable(this.toUpdate);
    }

    /**
     * Virtual IP address assigned to the hostname if IP based SSL is enabled.
     * 
     */
    @Import(name="virtualIP")
    private @Nullable Output<String> virtualIP;

    public Optional<Output<String>> virtualIP() {
        return Optional.ofNullable(this.virtualIP);
    }

    private HostNameSslStateArgs() {}

    private HostNameSslStateArgs(HostNameSslStateArgs $) {
        this.hostType = $.hostType;
        this.name = $.name;
        this.sslState = $.sslState;
        this.thumbprint = $.thumbprint;
        this.toUpdate = $.toUpdate;
        this.virtualIP = $.virtualIP;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HostNameSslStateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HostNameSslStateArgs $;

        public Builder() {
            $ = new HostNameSslStateArgs();
        }

        public Builder(HostNameSslStateArgs defaults) {
            $ = new HostNameSslStateArgs(Objects.requireNonNull(defaults));
        }

        public Builder hostType(@Nullable Output<HostType> hostType) {
            $.hostType = hostType;
            return this;
        }

        public Builder hostType(HostType hostType) {
            return hostType(Output.of(hostType));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder sslState(@Nullable Output<SslState> sslState) {
            $.sslState = sslState;
            return this;
        }

        public Builder sslState(SslState sslState) {
            return sslState(Output.of(sslState));
        }

        public Builder thumbprint(@Nullable Output<String> thumbprint) {
            $.thumbprint = thumbprint;
            return this;
        }

        public Builder thumbprint(String thumbprint) {
            return thumbprint(Output.of(thumbprint));
        }

        public Builder toUpdate(@Nullable Output<Boolean> toUpdate) {
            $.toUpdate = toUpdate;
            return this;
        }

        public Builder toUpdate(Boolean toUpdate) {
            return toUpdate(Output.of(toUpdate));
        }

        public Builder virtualIP(@Nullable Output<String> virtualIP) {
            $.virtualIP = virtualIP;
            return this;
        }

        public Builder virtualIP(String virtualIP) {
            return virtualIP(Output.of(virtualIP));
        }

        public HostNameSslStateArgs build() {
            return $;
        }
    }

}
