// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.automation.inputs;

import com.pulumi.azurenative.automation.enums.ScheduleDay;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The properties of the create advanced schedule monthly occurrence.
 * 
 */
public final class AdvancedScheduleMonthlyOccurrenceArgs extends com.pulumi.resources.ResourceArgs {

    public static final AdvancedScheduleMonthlyOccurrenceArgs Empty = new AdvancedScheduleMonthlyOccurrenceArgs();

    /**
     * Day of the occurrence. Must be one of monday, tuesday, wednesday, thursday, friday, saturday, sunday.
     * 
     */
    @Import(name="day")
    private @Nullable Output<Either<String,ScheduleDay>> day;

    /**
     * @return Day of the occurrence. Must be one of monday, tuesday, wednesday, thursday, friday, saturday, sunday.
     * 
     */
    public Optional<Output<Either<String,ScheduleDay>>> day() {
        return Optional.ofNullable(this.day);
    }

    /**
     * Occurrence of the week within the month. Must be between 1 and 5
     * 
     */
    @Import(name="occurrence")
    private @Nullable Output<Integer> occurrence;

    /**
     * @return Occurrence of the week within the month. Must be between 1 and 5
     * 
     */
    public Optional<Output<Integer>> occurrence() {
        return Optional.ofNullable(this.occurrence);
    }

    private AdvancedScheduleMonthlyOccurrenceArgs() {}

    private AdvancedScheduleMonthlyOccurrenceArgs(AdvancedScheduleMonthlyOccurrenceArgs $) {
        this.day = $.day;
        this.occurrence = $.occurrence;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AdvancedScheduleMonthlyOccurrenceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AdvancedScheduleMonthlyOccurrenceArgs $;

        public Builder() {
            $ = new AdvancedScheduleMonthlyOccurrenceArgs();
        }

        public Builder(AdvancedScheduleMonthlyOccurrenceArgs defaults) {
            $ = new AdvancedScheduleMonthlyOccurrenceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param day Day of the occurrence. Must be one of monday, tuesday, wednesday, thursday, friday, saturday, sunday.
         * 
         * @return builder
         * 
         */
        public Builder day(@Nullable Output<Either<String,ScheduleDay>> day) {
            $.day = day;
            return this;
        }

        /**
         * @param day Day of the occurrence. Must be one of monday, tuesday, wednesday, thursday, friday, saturday, sunday.
         * 
         * @return builder
         * 
         */
        public Builder day(Either<String,ScheduleDay> day) {
            return day(Output.of(day));
        }

        /**
         * @param day Day of the occurrence. Must be one of monday, tuesday, wednesday, thursday, friday, saturday, sunday.
         * 
         * @return builder
         * 
         */
        public Builder day(String day) {
            return day(Either.ofLeft(day));
        }

        /**
         * @param day Day of the occurrence. Must be one of monday, tuesday, wednesday, thursday, friday, saturday, sunday.
         * 
         * @return builder
         * 
         */
        public Builder day(ScheduleDay day) {
            return day(Either.ofRight(day));
        }

        /**
         * @param occurrence Occurrence of the week within the month. Must be between 1 and 5
         * 
         * @return builder
         * 
         */
        public Builder occurrence(@Nullable Output<Integer> occurrence) {
            $.occurrence = occurrence;
            return this;
        }

        /**
         * @param occurrence Occurrence of the week within the month. Must be between 1 and 5
         * 
         * @return builder
         * 
         */
        public Builder occurrence(Integer occurrence) {
            return occurrence(Output.of(occurrence));
        }

        public AdvancedScheduleMonthlyOccurrenceArgs build() {
            return $;
        }
    }

}
