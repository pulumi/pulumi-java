// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.labservices.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * Details of the backing virtual machine.
 * 
 */
public final class VirtualMachineDetailsResponse extends com.pulumi.resources.InvokeArgs {

    public static final VirtualMachineDetailsResponse Empty = new VirtualMachineDetailsResponse();

    /**
     * Last known compute power state captured in DTL
     * 
     */
    @Import(name="lastKnownPowerState", required=true)
    private String lastKnownPowerState;

    /**
     * @return Last known compute power state captured in DTL
     * 
     */
    public String lastKnownPowerState() {
        return this.lastKnownPowerState;
    }

    /**
     * PrivateIp address of the compute VM
     * 
     */
    @Import(name="privateIpAddress", required=true)
    private String privateIpAddress;

    /**
     * @return PrivateIp address of the compute VM
     * 
     */
    public String privateIpAddress() {
        return this.privateIpAddress;
    }

    /**
     * Provisioning state of the Dtl VM
     * 
     */
    @Import(name="provisioningState", required=true)
    private String provisioningState;

    /**
     * @return Provisioning state of the Dtl VM
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Connection information for Windows
     * 
     */
    @Import(name="rdpAuthority", required=true)
    private String rdpAuthority;

    /**
     * @return Connection information for Windows
     * 
     */
    public String rdpAuthority() {
        return this.rdpAuthority;
    }

    /**
     * Connection information for Linux
     * 
     */
    @Import(name="sshAuthority", required=true)
    private String sshAuthority;

    /**
     * @return Connection information for Linux
     * 
     */
    public String sshAuthority() {
        return this.sshAuthority;
    }

    /**
     * Compute VM login user name
     * 
     */
    @Import(name="userName", required=true)
    private String userName;

    /**
     * @return Compute VM login user name
     * 
     */
    public String userName() {
        return this.userName;
    }

    private VirtualMachineDetailsResponse() {}

    private VirtualMachineDetailsResponse(VirtualMachineDetailsResponse $) {
        this.lastKnownPowerState = $.lastKnownPowerState;
        this.privateIpAddress = $.privateIpAddress;
        this.provisioningState = $.provisioningState;
        this.rdpAuthority = $.rdpAuthority;
        this.sshAuthority = $.sshAuthority;
        this.userName = $.userName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VirtualMachineDetailsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VirtualMachineDetailsResponse $;

        public Builder() {
            $ = new VirtualMachineDetailsResponse();
        }

        public Builder(VirtualMachineDetailsResponse defaults) {
            $ = new VirtualMachineDetailsResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param lastKnownPowerState Last known compute power state captured in DTL
         * 
         * @return builder
         * 
         */
        public Builder lastKnownPowerState(String lastKnownPowerState) {
            $.lastKnownPowerState = lastKnownPowerState;
            return this;
        }

        /**
         * @param privateIpAddress PrivateIp address of the compute VM
         * 
         * @return builder
         * 
         */
        public Builder privateIpAddress(String privateIpAddress) {
            $.privateIpAddress = privateIpAddress;
            return this;
        }

        /**
         * @param provisioningState Provisioning state of the Dtl VM
         * 
         * @return builder
         * 
         */
        public Builder provisioningState(String provisioningState) {
            $.provisioningState = provisioningState;
            return this;
        }

        /**
         * @param rdpAuthority Connection information for Windows
         * 
         * @return builder
         * 
         */
        public Builder rdpAuthority(String rdpAuthority) {
            $.rdpAuthority = rdpAuthority;
            return this;
        }

        /**
         * @param sshAuthority Connection information for Linux
         * 
         * @return builder
         * 
         */
        public Builder sshAuthority(String sshAuthority) {
            $.sshAuthority = sshAuthority;
            return this;
        }

        /**
         * @param userName Compute VM login user name
         * 
         * @return builder
         * 
         */
        public Builder userName(String userName) {
            $.userName = userName;
            return this;
        }

        public VirtualMachineDetailsResponse build() {
            $.lastKnownPowerState = Objects.requireNonNull($.lastKnownPowerState, "expected parameter 'lastKnownPowerState' to be non-null");
            $.privateIpAddress = Objects.requireNonNull($.privateIpAddress, "expected parameter 'privateIpAddress' to be non-null");
            $.provisioningState = Objects.requireNonNull($.provisioningState, "expected parameter 'provisioningState' to be non-null");
            $.rdpAuthority = Objects.requireNonNull($.rdpAuthority, "expected parameter 'rdpAuthority' to be non-null");
            $.sshAuthority = Objects.requireNonNull($.sshAuthority, "expected parameter 'sshAuthority' to be non-null");
            $.userName = Objects.requireNonNull($.userName, "expected parameter 'userName' to be non-null");
            return $;
        }
    }

}
