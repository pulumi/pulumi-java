// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.videoanalyzer;

import com.pulumi.azurenative.videoanalyzer.inputs.AccountEncryptionArgs;
import com.pulumi.azurenative.videoanalyzer.inputs.StorageAccountArgs;
import com.pulumi.azurenative.videoanalyzer.inputs.VideoAnalyzerIdentityArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VideoAnalyzerArgs extends com.pulumi.resources.ResourceArgs {

    public static final VideoAnalyzerArgs Empty = new VideoAnalyzerArgs();

    /**
     * The Video Analyzer account name.
     * 
     */
    @Import(name="accountName")
    private @Nullable Output<String> accountName;

    /**
     * @return The Video Analyzer account name.
     * 
     */
    public Optional<Output<String>> accountName() {
        return Optional.ofNullable(this.accountName);
    }

    /**
     * The account encryption properties.
     * 
     */
    @Import(name="encryption", required=true)
    private Output<AccountEncryptionArgs> encryption;

    /**
     * @return The account encryption properties.
     * 
     */
    public Output<AccountEncryptionArgs> encryption() {
        return this.encryption;
    }

    /**
     * The set of managed identities associated with the Video Analyzer resource.
     * 
     */
    @Import(name="identity")
    private @Nullable Output<VideoAnalyzerIdentityArgs> identity;

    /**
     * @return The set of managed identities associated with the Video Analyzer resource.
     * 
     */
    public Optional<Output<VideoAnalyzerIdentityArgs>> identity() {
        return Optional.ofNullable(this.identity);
    }

    /**
     * The geo-location where the resource lives
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The geo-location where the resource lives
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group. The name is case insensitive.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The storage accounts for this resource.
     * 
     */
    @Import(name="storageAccounts", required=true)
    private Output<List<StorageAccountArgs>> storageAccounts;

    /**
     * @return The storage accounts for this resource.
     * 
     */
    public Output<List<StorageAccountArgs>> storageAccounts() {
        return this.storageAccounts;
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Resource tags.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private VideoAnalyzerArgs() {}

    private VideoAnalyzerArgs(VideoAnalyzerArgs $) {
        this.accountName = $.accountName;
        this.encryption = $.encryption;
        this.identity = $.identity;
        this.location = $.location;
        this.resourceGroupName = $.resourceGroupName;
        this.storageAccounts = $.storageAccounts;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VideoAnalyzerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VideoAnalyzerArgs $;

        public Builder() {
            $ = new VideoAnalyzerArgs();
        }

        public Builder(VideoAnalyzerArgs defaults) {
            $ = new VideoAnalyzerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountName The Video Analyzer account name.
         * 
         * @return builder
         * 
         */
        public Builder accountName(@Nullable Output<String> accountName) {
            $.accountName = accountName;
            return this;
        }

        /**
         * @param accountName The Video Analyzer account name.
         * 
         * @return builder
         * 
         */
        public Builder accountName(String accountName) {
            return accountName(Output.of(accountName));
        }

        /**
         * @param encryption The account encryption properties.
         * 
         * @return builder
         * 
         */
        public Builder encryption(Output<AccountEncryptionArgs> encryption) {
            $.encryption = encryption;
            return this;
        }

        /**
         * @param encryption The account encryption properties.
         * 
         * @return builder
         * 
         */
        public Builder encryption(AccountEncryptionArgs encryption) {
            return encryption(Output.of(encryption));
        }

        /**
         * @param identity The set of managed identities associated with the Video Analyzer resource.
         * 
         * @return builder
         * 
         */
        public Builder identity(@Nullable Output<VideoAnalyzerIdentityArgs> identity) {
            $.identity = identity;
            return this;
        }

        /**
         * @param identity The set of managed identities associated with the Video Analyzer resource.
         * 
         * @return builder
         * 
         */
        public Builder identity(VideoAnalyzerIdentityArgs identity) {
            return identity(Output.of(identity));
        }

        /**
         * @param location The geo-location where the resource lives
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The geo-location where the resource lives
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param storageAccounts The storage accounts for this resource.
         * 
         * @return builder
         * 
         */
        public Builder storageAccounts(Output<List<StorageAccountArgs>> storageAccounts) {
            $.storageAccounts = storageAccounts;
            return this;
        }

        /**
         * @param storageAccounts The storage accounts for this resource.
         * 
         * @return builder
         * 
         */
        public Builder storageAccounts(List<StorageAccountArgs> storageAccounts) {
            return storageAccounts(Output.of(storageAccounts));
        }

        /**
         * @param storageAccounts The storage accounts for this resource.
         * 
         * @return builder
         * 
         */
        public Builder storageAccounts(StorageAccountArgs... storageAccounts) {
            return storageAccounts(List.of(storageAccounts));
        }

        /**
         * @param tags Resource tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Resource tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public VideoAnalyzerArgs build() {
            $.encryption = Objects.requireNonNull($.encryption, "expected parameter 'encryption' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.storageAccounts = Objects.requireNonNull($.storageAccounts, "expected parameter 'storageAccounts' to be non-null");
            return $;
        }
    }

}
