// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.batch.inputs;

import com.pulumi.azurenative.batch.inputs.InboundNatPoolArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.List;
import java.util.Objects;


public final class PoolEndpointConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final PoolEndpointConfigurationArgs Empty = new PoolEndpointConfigurationArgs();

    /**
     * The maximum number of inbound NAT pools per Batch pool is 5. If the maximum number of inbound NAT pools is exceeded the request fails with HTTP status code 400. This cannot be specified if the IPAddressProvisioningType is NoPublicIPAddresses.
     * 
     */
    @Import(name="inboundNatPools", required=true)
    private Output<List<InboundNatPoolArgs>> inboundNatPools;

    /**
     * @return The maximum number of inbound NAT pools per Batch pool is 5. If the maximum number of inbound NAT pools is exceeded the request fails with HTTP status code 400. This cannot be specified if the IPAddressProvisioningType is NoPublicIPAddresses.
     * 
     */
    public Output<List<InboundNatPoolArgs>> inboundNatPools() {
        return this.inboundNatPools;
    }

    private PoolEndpointConfigurationArgs() {}

    private PoolEndpointConfigurationArgs(PoolEndpointConfigurationArgs $) {
        this.inboundNatPools = $.inboundNatPools;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PoolEndpointConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PoolEndpointConfigurationArgs $;

        public Builder() {
            $ = new PoolEndpointConfigurationArgs();
        }

        public Builder(PoolEndpointConfigurationArgs defaults) {
            $ = new PoolEndpointConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param inboundNatPools The maximum number of inbound NAT pools per Batch pool is 5. If the maximum number of inbound NAT pools is exceeded the request fails with HTTP status code 400. This cannot be specified if the IPAddressProvisioningType is NoPublicIPAddresses.
         * 
         * @return builder
         * 
         */
        public Builder inboundNatPools(Output<List<InboundNatPoolArgs>> inboundNatPools) {
            $.inboundNatPools = inboundNatPools;
            return this;
        }

        /**
         * @param inboundNatPools The maximum number of inbound NAT pools per Batch pool is 5. If the maximum number of inbound NAT pools is exceeded the request fails with HTTP status code 400. This cannot be specified if the IPAddressProvisioningType is NoPublicIPAddresses.
         * 
         * @return builder
         * 
         */
        public Builder inboundNatPools(List<InboundNatPoolArgs> inboundNatPools) {
            return inboundNatPools(Output.of(inboundNatPools));
        }

        /**
         * @param inboundNatPools The maximum number of inbound NAT pools per Batch pool is 5. If the maximum number of inbound NAT pools is exceeded the request fails with HTTP status code 400. This cannot be specified if the IPAddressProvisioningType is NoPublicIPAddresses.
         * 
         * @return builder
         * 
         */
        public Builder inboundNatPools(InboundNatPoolArgs... inboundNatPools) {
            return inboundNatPools(List.of(inboundNatPools));
        }

        public PoolEndpointConfigurationArgs build() {
            $.inboundNatPools = Objects.requireNonNull($.inboundNatPools, "expected parameter 'inboundNatPools' to be non-null");
            return $;
        }
    }

}
