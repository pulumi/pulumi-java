// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.storagecache.inputs;

import com.pulumi.azurenative.storagecache.enums.UsernameSource;
import com.pulumi.azurenative.storagecache.inputs.CacheUsernameDownloadSettingsCredentialsArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Settings for Extended Groups username and group download.
 * 
 */
public final class CacheUsernameDownloadSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final CacheUsernameDownloadSettingsArgs Empty = new CacheUsernameDownloadSettingsArgs();

    /**
     * Determines if the certificate should be automatically downloaded. This applies to &#39;caCertificateURI&#39; only if &#39;requireValidCertificate&#39; is true.
     * 
     */
    @Import(name="autoDownloadCertificate")
    private @Nullable Output<Boolean> autoDownloadCertificate;

    public Optional<Output<Boolean>> autoDownloadCertificate() {
        return Optional.ofNullable(this.autoDownloadCertificate);
    }

    /**
     * The URI of the CA certificate to validate the LDAP secure connection. This field must be populated when &#39;requireValidCertificate&#39; is set to true.
     * 
     */
    @Import(name="caCertificateURI")
    private @Nullable Output<String> caCertificateURI;

    public Optional<Output<String>> caCertificateURI() {
        return Optional.ofNullable(this.caCertificateURI);
    }

    /**
     * When present, these are the credentials for the secure LDAP connection.
     * 
     */
    @Import(name="credentials")
    private @Nullable Output<CacheUsernameDownloadSettingsCredentialsArgs> credentials;

    public Optional<Output<CacheUsernameDownloadSettingsCredentialsArgs>> credentials() {
        return Optional.ofNullable(this.credentials);
    }

    /**
     * Whether or not the LDAP connection should be encrypted.
     * 
     */
    @Import(name="encryptLdapConnection")
    private @Nullable Output<Boolean> encryptLdapConnection;

    public Optional<Output<Boolean>> encryptLdapConnection() {
        return Optional.ofNullable(this.encryptLdapConnection);
    }

    /**
     * Whether or not Extended Groups is enabled.
     * 
     */
    @Import(name="extendedGroups")
    private @Nullable Output<Boolean> extendedGroups;

    public Optional<Output<Boolean>> extendedGroups() {
        return Optional.ofNullable(this.extendedGroups);
    }

    /**
     * The URI of the file containing group information (in /etc/group file format). This field must be populated when &#39;usernameSource&#39; is set to &#39;File&#39;.
     * 
     */
    @Import(name="groupFileURI")
    private @Nullable Output<String> groupFileURI;

    public Optional<Output<String>> groupFileURI() {
        return Optional.ofNullable(this.groupFileURI);
    }

    /**
     * The base distinguished name for the LDAP domain.
     * 
     */
    @Import(name="ldapBaseDN")
    private @Nullable Output<String> ldapBaseDN;

    public Optional<Output<String>> ldapBaseDN() {
        return Optional.ofNullable(this.ldapBaseDN);
    }

    /**
     * The fully qualified domain name or IP address of the LDAP server to use.
     * 
     */
    @Import(name="ldapServer")
    private @Nullable Output<String> ldapServer;

    public Optional<Output<String>> ldapServer() {
        return Optional.ofNullable(this.ldapServer);
    }

    /**
     * Determines if the certificates must be validated by a certificate authority. When true, caCertificateURI must be provided.
     * 
     */
    @Import(name="requireValidCertificate")
    private @Nullable Output<Boolean> requireValidCertificate;

    public Optional<Output<Boolean>> requireValidCertificate() {
        return Optional.ofNullable(this.requireValidCertificate);
    }

    /**
     * The URI of the file containing user information (in /etc/passwd file format). This field must be populated when &#39;usernameSource&#39; is set to &#39;File&#39;.
     * 
     */
    @Import(name="userFileURI")
    private @Nullable Output<String> userFileURI;

    public Optional<Output<String>> userFileURI() {
        return Optional.ofNullable(this.userFileURI);
    }

    /**
     * This setting determines how the cache gets username and group names for clients.
     * 
     */
    @Import(name="usernameSource")
    private @Nullable Output<Either<String,UsernameSource>> usernameSource;

    public Optional<Output<Either<String,UsernameSource>>> usernameSource() {
        return Optional.ofNullable(this.usernameSource);
    }

    private CacheUsernameDownloadSettingsArgs() {}

    private CacheUsernameDownloadSettingsArgs(CacheUsernameDownloadSettingsArgs $) {
        this.autoDownloadCertificate = $.autoDownloadCertificate;
        this.caCertificateURI = $.caCertificateURI;
        this.credentials = $.credentials;
        this.encryptLdapConnection = $.encryptLdapConnection;
        this.extendedGroups = $.extendedGroups;
        this.groupFileURI = $.groupFileURI;
        this.ldapBaseDN = $.ldapBaseDN;
        this.ldapServer = $.ldapServer;
        this.requireValidCertificate = $.requireValidCertificate;
        this.userFileURI = $.userFileURI;
        this.usernameSource = $.usernameSource;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CacheUsernameDownloadSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CacheUsernameDownloadSettingsArgs $;

        public Builder() {
            $ = new CacheUsernameDownloadSettingsArgs();
        }

        public Builder(CacheUsernameDownloadSettingsArgs defaults) {
            $ = new CacheUsernameDownloadSettingsArgs(Objects.requireNonNull(defaults));
        }

        public Builder autoDownloadCertificate(@Nullable Output<Boolean> autoDownloadCertificate) {
            $.autoDownloadCertificate = autoDownloadCertificate;
            return this;
        }

        public Builder autoDownloadCertificate(Boolean autoDownloadCertificate) {
            return autoDownloadCertificate(Output.of(autoDownloadCertificate));
        }

        public Builder caCertificateURI(@Nullable Output<String> caCertificateURI) {
            $.caCertificateURI = caCertificateURI;
            return this;
        }

        public Builder caCertificateURI(String caCertificateURI) {
            return caCertificateURI(Output.of(caCertificateURI));
        }

        public Builder credentials(@Nullable Output<CacheUsernameDownloadSettingsCredentialsArgs> credentials) {
            $.credentials = credentials;
            return this;
        }

        public Builder credentials(CacheUsernameDownloadSettingsCredentialsArgs credentials) {
            return credentials(Output.of(credentials));
        }

        public Builder encryptLdapConnection(@Nullable Output<Boolean> encryptLdapConnection) {
            $.encryptLdapConnection = encryptLdapConnection;
            return this;
        }

        public Builder encryptLdapConnection(Boolean encryptLdapConnection) {
            return encryptLdapConnection(Output.of(encryptLdapConnection));
        }

        public Builder extendedGroups(@Nullable Output<Boolean> extendedGroups) {
            $.extendedGroups = extendedGroups;
            return this;
        }

        public Builder extendedGroups(Boolean extendedGroups) {
            return extendedGroups(Output.of(extendedGroups));
        }

        public Builder groupFileURI(@Nullable Output<String> groupFileURI) {
            $.groupFileURI = groupFileURI;
            return this;
        }

        public Builder groupFileURI(String groupFileURI) {
            return groupFileURI(Output.of(groupFileURI));
        }

        public Builder ldapBaseDN(@Nullable Output<String> ldapBaseDN) {
            $.ldapBaseDN = ldapBaseDN;
            return this;
        }

        public Builder ldapBaseDN(String ldapBaseDN) {
            return ldapBaseDN(Output.of(ldapBaseDN));
        }

        public Builder ldapServer(@Nullable Output<String> ldapServer) {
            $.ldapServer = ldapServer;
            return this;
        }

        public Builder ldapServer(String ldapServer) {
            return ldapServer(Output.of(ldapServer));
        }

        public Builder requireValidCertificate(@Nullable Output<Boolean> requireValidCertificate) {
            $.requireValidCertificate = requireValidCertificate;
            return this;
        }

        public Builder requireValidCertificate(Boolean requireValidCertificate) {
            return requireValidCertificate(Output.of(requireValidCertificate));
        }

        public Builder userFileURI(@Nullable Output<String> userFileURI) {
            $.userFileURI = userFileURI;
            return this;
        }

        public Builder userFileURI(String userFileURI) {
            return userFileURI(Output.of(userFileURI));
        }

        public Builder usernameSource(@Nullable Output<Either<String,UsernameSource>> usernameSource) {
            $.usernameSource = usernameSource;
            return this;
        }

        public Builder usernameSource(Either<String,UsernameSource> usernameSource) {
            return usernameSource(Output.of(usernameSource));
        }

        public Builder usernameSource(String usernameSource) {
            return usernameSource(Either.ofLeft(usernameSource));
        }

        public Builder usernameSource(UsernameSource usernameSource) {
            return usernameSource(Either.ofRight(usernameSource));
        }

        public CacheUsernameDownloadSettingsArgs build() {
            $.usernameSource = Codegen.stringProp("usernameSource").left(UsernameSource.class).output().arg($.usernameSource).def("None").getNullable();
            return $;
        }
    }

}
