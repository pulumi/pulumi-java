// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datamigration.inputs;

import com.pulumi.azurenative.datamigration.inputs.DataIntegrityValidationResultResponse;
import com.pulumi.azurenative.datamigration.inputs.QueryAnalysisValidationResultResponse;
import com.pulumi.azurenative.datamigration.inputs.SchemaComparisonValidationResultResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;


/**
 * Database validation result for Sql Server to Azure Sql DB migration.
 * 
 */
public final class MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponse extends com.pulumi.resources.InvokeArgs {

    public static final MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponse Empty = new MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponse();

    /**
     * Provides data integrity validation result between the source and target tables that are migrated.
     * 
     */
    @Import(name="dataIntegrityValidationResult", required=true)
    private DataIntegrityValidationResultResponse dataIntegrityValidationResult;

    /**
     * @return Provides data integrity validation result between the source and target tables that are migrated.
     * 
     */
    public DataIntegrityValidationResultResponse dataIntegrityValidationResult() {
        return this.dataIntegrityValidationResult;
    }

    /**
     * Validation end time
     * 
     */
    @Import(name="endedOn", required=true)
    private String endedOn;

    /**
     * @return Validation end time
     * 
     */
    public String endedOn() {
        return this.endedOn;
    }

    /**
     * Result identifier
     * 
     */
    @Import(name="id", required=true)
    private String id;

    /**
     * @return Result identifier
     * 
     */
    public String id() {
        return this.id;
    }

    /**
     * Migration Identifier
     * 
     */
    @Import(name="migrationId", required=true)
    private String migrationId;

    /**
     * @return Migration Identifier
     * 
     */
    public String migrationId() {
        return this.migrationId;
    }

    /**
     * Results of some of the query execution result between source and target database
     * 
     */
    @Import(name="queryAnalysisValidationResult", required=true)
    private QueryAnalysisValidationResultResponse queryAnalysisValidationResult;

    /**
     * @return Results of some of the query execution result between source and target database
     * 
     */
    public QueryAnalysisValidationResultResponse queryAnalysisValidationResult() {
        return this.queryAnalysisValidationResult;
    }

    /**
     * Result type
     * Expected value is &#39;MigrationDatabaseLevelValidationOutput&#39;.
     * 
     */
    @Import(name="resultType", required=true)
    private String resultType;

    /**
     * @return Result type
     * Expected value is &#39;MigrationDatabaseLevelValidationOutput&#39;.
     * 
     */
    public String resultType() {
        return this.resultType;
    }

    /**
     * Provides schema comparison result between source and target database
     * 
     */
    @Import(name="schemaValidationResult", required=true)
    private SchemaComparisonValidationResultResponse schemaValidationResult;

    /**
     * @return Provides schema comparison result between source and target database
     * 
     */
    public SchemaComparisonValidationResultResponse schemaValidationResult() {
        return this.schemaValidationResult;
    }

    /**
     * Name of the source database
     * 
     */
    @Import(name="sourceDatabaseName", required=true)
    private String sourceDatabaseName;

    /**
     * @return Name of the source database
     * 
     */
    public String sourceDatabaseName() {
        return this.sourceDatabaseName;
    }

    /**
     * Validation start time
     * 
     */
    @Import(name="startedOn", required=true)
    private String startedOn;

    /**
     * @return Validation start time
     * 
     */
    public String startedOn() {
        return this.startedOn;
    }

    /**
     * Current status of validation at the database level
     * 
     */
    @Import(name="status", required=true)
    private String status;

    /**
     * @return Current status of validation at the database level
     * 
     */
    public String status() {
        return this.status;
    }

    /**
     * Name of the target database
     * 
     */
    @Import(name="targetDatabaseName", required=true)
    private String targetDatabaseName;

    /**
     * @return Name of the target database
     * 
     */
    public String targetDatabaseName() {
        return this.targetDatabaseName;
    }

    private MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponse() {}

    private MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponse(MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponse $) {
        this.dataIntegrityValidationResult = $.dataIntegrityValidationResult;
        this.endedOn = $.endedOn;
        this.id = $.id;
        this.migrationId = $.migrationId;
        this.queryAnalysisValidationResult = $.queryAnalysisValidationResult;
        this.resultType = $.resultType;
        this.schemaValidationResult = $.schemaValidationResult;
        this.sourceDatabaseName = $.sourceDatabaseName;
        this.startedOn = $.startedOn;
        this.status = $.status;
        this.targetDatabaseName = $.targetDatabaseName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponse $;

        public Builder() {
            $ = new MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponse();
        }

        public Builder(MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponse defaults) {
            $ = new MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param dataIntegrityValidationResult Provides data integrity validation result between the source and target tables that are migrated.
         * 
         * @return builder
         * 
         */
        public Builder dataIntegrityValidationResult(DataIntegrityValidationResultResponse dataIntegrityValidationResult) {
            $.dataIntegrityValidationResult = dataIntegrityValidationResult;
            return this;
        }

        /**
         * @param endedOn Validation end time
         * 
         * @return builder
         * 
         */
        public Builder endedOn(String endedOn) {
            $.endedOn = endedOn;
            return this;
        }

        /**
         * @param id Result identifier
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            $.id = id;
            return this;
        }

        /**
         * @param migrationId Migration Identifier
         * 
         * @return builder
         * 
         */
        public Builder migrationId(String migrationId) {
            $.migrationId = migrationId;
            return this;
        }

        /**
         * @param queryAnalysisValidationResult Results of some of the query execution result between source and target database
         * 
         * @return builder
         * 
         */
        public Builder queryAnalysisValidationResult(QueryAnalysisValidationResultResponse queryAnalysisValidationResult) {
            $.queryAnalysisValidationResult = queryAnalysisValidationResult;
            return this;
        }

        /**
         * @param resultType Result type
         * Expected value is &#39;MigrationDatabaseLevelValidationOutput&#39;.
         * 
         * @return builder
         * 
         */
        public Builder resultType(String resultType) {
            $.resultType = resultType;
            return this;
        }

        /**
         * @param schemaValidationResult Provides schema comparison result between source and target database
         * 
         * @return builder
         * 
         */
        public Builder schemaValidationResult(SchemaComparisonValidationResultResponse schemaValidationResult) {
            $.schemaValidationResult = schemaValidationResult;
            return this;
        }

        /**
         * @param sourceDatabaseName Name of the source database
         * 
         * @return builder
         * 
         */
        public Builder sourceDatabaseName(String sourceDatabaseName) {
            $.sourceDatabaseName = sourceDatabaseName;
            return this;
        }

        /**
         * @param startedOn Validation start time
         * 
         * @return builder
         * 
         */
        public Builder startedOn(String startedOn) {
            $.startedOn = startedOn;
            return this;
        }

        /**
         * @param status Current status of validation at the database level
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            $.status = status;
            return this;
        }

        /**
         * @param targetDatabaseName Name of the target database
         * 
         * @return builder
         * 
         */
        public Builder targetDatabaseName(String targetDatabaseName) {
            $.targetDatabaseName = targetDatabaseName;
            return this;
        }

        public MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponse build() {
            $.dataIntegrityValidationResult = Objects.requireNonNull($.dataIntegrityValidationResult, "expected parameter 'dataIntegrityValidationResult' to be non-null");
            $.endedOn = Objects.requireNonNull($.endedOn, "expected parameter 'endedOn' to be non-null");
            $.id = Objects.requireNonNull($.id, "expected parameter 'id' to be non-null");
            $.migrationId = Objects.requireNonNull($.migrationId, "expected parameter 'migrationId' to be non-null");
            $.queryAnalysisValidationResult = Objects.requireNonNull($.queryAnalysisValidationResult, "expected parameter 'queryAnalysisValidationResult' to be non-null");
            $.resultType = Codegen.stringProp("resultType").arg($.resultType).require();
            $.schemaValidationResult = Objects.requireNonNull($.schemaValidationResult, "expected parameter 'schemaValidationResult' to be non-null");
            $.sourceDatabaseName = Objects.requireNonNull($.sourceDatabaseName, "expected parameter 'sourceDatabaseName' to be non-null");
            $.startedOn = Objects.requireNonNull($.startedOn, "expected parameter 'startedOn' to be non-null");
            $.status = Objects.requireNonNull($.status, "expected parameter 'status' to be non-null");
            $.targetDatabaseName = Objects.requireNonNull($.targetDatabaseName, "expected parameter 'targetDatabaseName' to be non-null");
            return $;
        }
    }

}
