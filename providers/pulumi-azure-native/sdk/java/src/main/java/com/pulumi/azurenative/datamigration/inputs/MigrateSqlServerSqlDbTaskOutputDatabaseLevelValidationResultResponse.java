// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datamigration.inputs;

import com.pulumi.azurenative.datamigration.inputs.DataIntegrityValidationResultResponse;
import com.pulumi.azurenative.datamigration.inputs.QueryAnalysisValidationResultResponse;
import com.pulumi.azurenative.datamigration.inputs.SchemaComparisonValidationResultResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;


/**
 * Database validation result for Sql Server to Azure Sql DB migration.
 * 
 */
public final class MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponse extends com.pulumi.resources.InvokeArgs {

    public static final MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponse Empty = new MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponse();

    /**
     * Provides data integrity validation result between the source and target tables that are migrated.
     * 
     */
    @Import(name="dataIntegrityValidationResult", required=true)
      private final DataIntegrityValidationResultResponse dataIntegrityValidationResult;

    public DataIntegrityValidationResultResponse dataIntegrityValidationResult() {
        return this.dataIntegrityValidationResult;
    }

    /**
     * Validation end time
     * 
     */
    @Import(name="endedOn", required=true)
      private final String endedOn;

    public String endedOn() {
        return this.endedOn;
    }

    /**
     * Result identifier
     * 
     */
    @Import(name="id", required=true)
      private final String id;

    public String id() {
        return this.id;
    }

    /**
     * Migration Identifier
     * 
     */
    @Import(name="migrationId", required=true)
      private final String migrationId;

    public String migrationId() {
        return this.migrationId;
    }

    /**
     * Results of some of the query execution result between source and target database
     * 
     */
    @Import(name="queryAnalysisValidationResult", required=true)
      private final QueryAnalysisValidationResultResponse queryAnalysisValidationResult;

    public QueryAnalysisValidationResultResponse queryAnalysisValidationResult() {
        return this.queryAnalysisValidationResult;
    }

    /**
     * Result type
     * Expected value is &#39;MigrationDatabaseLevelValidationOutput&#39;.
     * 
     */
    @Import(name="resultType", required=true)
      private final String resultType;

    public String resultType() {
        return this.resultType;
    }

    /**
     * Provides schema comparison result between source and target database
     * 
     */
    @Import(name="schemaValidationResult", required=true)
      private final SchemaComparisonValidationResultResponse schemaValidationResult;

    public SchemaComparisonValidationResultResponse schemaValidationResult() {
        return this.schemaValidationResult;
    }

    /**
     * Name of the source database
     * 
     */
    @Import(name="sourceDatabaseName", required=true)
      private final String sourceDatabaseName;

    public String sourceDatabaseName() {
        return this.sourceDatabaseName;
    }

    /**
     * Validation start time
     * 
     */
    @Import(name="startedOn", required=true)
      private final String startedOn;

    public String startedOn() {
        return this.startedOn;
    }

    /**
     * Current status of validation at the database level
     * 
     */
    @Import(name="status", required=true)
      private final String status;

    public String status() {
        return this.status;
    }

    /**
     * Name of the target database
     * 
     */
    @Import(name="targetDatabaseName", required=true)
      private final String targetDatabaseName;

    public String targetDatabaseName() {
        return this.targetDatabaseName;
    }

    public MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponse(
        DataIntegrityValidationResultResponse dataIntegrityValidationResult,
        String endedOn,
        String id,
        String migrationId,
        QueryAnalysisValidationResultResponse queryAnalysisValidationResult,
        String resultType,
        SchemaComparisonValidationResultResponse schemaValidationResult,
        String sourceDatabaseName,
        String startedOn,
        String status,
        String targetDatabaseName) {
        this.dataIntegrityValidationResult = Objects.requireNonNull(dataIntegrityValidationResult, "expected parameter 'dataIntegrityValidationResult' to be non-null");
        this.endedOn = Objects.requireNonNull(endedOn, "expected parameter 'endedOn' to be non-null");
        this.id = Objects.requireNonNull(id, "expected parameter 'id' to be non-null");
        this.migrationId = Objects.requireNonNull(migrationId, "expected parameter 'migrationId' to be non-null");
        this.queryAnalysisValidationResult = Objects.requireNonNull(queryAnalysisValidationResult, "expected parameter 'queryAnalysisValidationResult' to be non-null");
        this.resultType = Codegen.stringProp("resultType").arg(resultType).require();
        this.schemaValidationResult = Objects.requireNonNull(schemaValidationResult, "expected parameter 'schemaValidationResult' to be non-null");
        this.sourceDatabaseName = Objects.requireNonNull(sourceDatabaseName, "expected parameter 'sourceDatabaseName' to be non-null");
        this.startedOn = Objects.requireNonNull(startedOn, "expected parameter 'startedOn' to be non-null");
        this.status = Objects.requireNonNull(status, "expected parameter 'status' to be non-null");
        this.targetDatabaseName = Objects.requireNonNull(targetDatabaseName, "expected parameter 'targetDatabaseName' to be non-null");
    }

    private MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponse() {
        this.dataIntegrityValidationResult = null;
        this.endedOn = null;
        this.id = null;
        this.migrationId = null;
        this.queryAnalysisValidationResult = null;
        this.resultType = null;
        this.schemaValidationResult = null;
        this.sourceDatabaseName = null;
        this.startedOn = null;
        this.status = null;
        this.targetDatabaseName = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataIntegrityValidationResultResponse dataIntegrityValidationResult;
        private String endedOn;
        private String id;
        private String migrationId;
        private QueryAnalysisValidationResultResponse queryAnalysisValidationResult;
        private String resultType;
        private SchemaComparisonValidationResultResponse schemaValidationResult;
        private String sourceDatabaseName;
        private String startedOn;
        private String status;
        private String targetDatabaseName;

        public Builder() {
    	      // Empty
        }

        public Builder(MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dataIntegrityValidationResult = defaults.dataIntegrityValidationResult;
    	      this.endedOn = defaults.endedOn;
    	      this.id = defaults.id;
    	      this.migrationId = defaults.migrationId;
    	      this.queryAnalysisValidationResult = defaults.queryAnalysisValidationResult;
    	      this.resultType = defaults.resultType;
    	      this.schemaValidationResult = defaults.schemaValidationResult;
    	      this.sourceDatabaseName = defaults.sourceDatabaseName;
    	      this.startedOn = defaults.startedOn;
    	      this.status = defaults.status;
    	      this.targetDatabaseName = defaults.targetDatabaseName;
        }

        public Builder dataIntegrityValidationResult(DataIntegrityValidationResultResponse dataIntegrityValidationResult) {
            this.dataIntegrityValidationResult = Objects.requireNonNull(dataIntegrityValidationResult);
            return this;
        }
        public Builder endedOn(String endedOn) {
            this.endedOn = Objects.requireNonNull(endedOn);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder migrationId(String migrationId) {
            this.migrationId = Objects.requireNonNull(migrationId);
            return this;
        }
        public Builder queryAnalysisValidationResult(QueryAnalysisValidationResultResponse queryAnalysisValidationResult) {
            this.queryAnalysisValidationResult = Objects.requireNonNull(queryAnalysisValidationResult);
            return this;
        }
        public Builder resultType(String resultType) {
            this.resultType = Objects.requireNonNull(resultType);
            return this;
        }
        public Builder schemaValidationResult(SchemaComparisonValidationResultResponse schemaValidationResult) {
            this.schemaValidationResult = Objects.requireNonNull(schemaValidationResult);
            return this;
        }
        public Builder sourceDatabaseName(String sourceDatabaseName) {
            this.sourceDatabaseName = Objects.requireNonNull(sourceDatabaseName);
            return this;
        }
        public Builder startedOn(String startedOn) {
            this.startedOn = Objects.requireNonNull(startedOn);
            return this;
        }
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        public Builder targetDatabaseName(String targetDatabaseName) {
            this.targetDatabaseName = Objects.requireNonNull(targetDatabaseName);
            return this;
        }        public MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponse build() {
            return new MigrateSqlServerSqlDbTaskOutputDatabaseLevelValidationResultResponse(dataIntegrityValidationResult, endedOn, id, migrationId, queryAnalysisValidationResult, resultType, schemaValidationResult, sourceDatabaseName, startedOn, status, targetDatabaseName);
        }
    }
}
