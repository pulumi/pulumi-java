// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.videoanalyzer.outputs;

import com.pulumi.azurenative.videoanalyzer.outputs.VideoScaleResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class VideoEncoderH264Response {
    /**
     * @return The maximum bitrate, in kilobits per second or Kbps, at which video should be encoded. If omitted, encoder sets it automatically to try and match the quality of the input video.
     * 
     */
    private final @Nullable String bitrateKbps;
    /**
     * @return The frame rate (in frames per second) of the encoded video. The value must be greater than zero, and less than or equal to 300. If omitted, the encoder uses the average frame rate of the input video.
     * 
     */
    private final @Nullable String frameRate;
    /**
     * @return Describes the resolution of the encoded video. If omitted, the encoder uses the resolution of the input video.
     * 
     */
    private final @Nullable VideoScaleResponse scale;
    /**
     * @return The discriminator for derived types.
     * Expected value is &#39;#Microsoft.VideoAnalyzer.VideoEncoderH264&#39;.
     * 
     */
    private final String type;

    @CustomType.Constructor
    private VideoEncoderH264Response(
        @CustomType.Parameter("bitrateKbps") @Nullable String bitrateKbps,
        @CustomType.Parameter("frameRate") @Nullable String frameRate,
        @CustomType.Parameter("scale") @Nullable VideoScaleResponse scale,
        @CustomType.Parameter("type") String type) {
        this.bitrateKbps = bitrateKbps;
        this.frameRate = frameRate;
        this.scale = scale;
        this.type = type;
    }

    /**
     * @return The maximum bitrate, in kilobits per second or Kbps, at which video should be encoded. If omitted, encoder sets it automatically to try and match the quality of the input video.
     * 
     */
    public Optional<String> bitrateKbps() {
        return Optional.ofNullable(this.bitrateKbps);
    }
    /**
     * @return The frame rate (in frames per second) of the encoded video. The value must be greater than zero, and less than or equal to 300. If omitted, the encoder uses the average frame rate of the input video.
     * 
     */
    public Optional<String> frameRate() {
        return Optional.ofNullable(this.frameRate);
    }
    /**
     * @return Describes the resolution of the encoded video. If omitted, the encoder uses the resolution of the input video.
     * 
     */
    public Optional<VideoScaleResponse> scale() {
        return Optional.ofNullable(this.scale);
    }
    /**
     * @return The discriminator for derived types.
     * Expected value is &#39;#Microsoft.VideoAnalyzer.VideoEncoderH264&#39;.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VideoEncoderH264Response defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String bitrateKbps;
        private @Nullable String frameRate;
        private @Nullable VideoScaleResponse scale;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(VideoEncoderH264Response defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bitrateKbps = defaults.bitrateKbps;
    	      this.frameRate = defaults.frameRate;
    	      this.scale = defaults.scale;
    	      this.type = defaults.type;
        }

        public Builder bitrateKbps(@Nullable String bitrateKbps) {
            this.bitrateKbps = bitrateKbps;
            return this;
        }
        public Builder frameRate(@Nullable String frameRate) {
            this.frameRate = frameRate;
            return this;
        }
        public Builder scale(@Nullable VideoScaleResponse scale) {
            this.scale = scale;
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }        public VideoEncoderH264Response build() {
            return new VideoEncoderH264Response(bitrateKbps, frameRate, scale, type);
        }
    }
}
