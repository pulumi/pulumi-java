// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.resources.inputs;

import com.pulumi.azurenative.resources.inputs.AliasResponse;
import com.pulumi.azurenative.resources.inputs.ApiProfileResponse;
import com.pulumi.azurenative.resources.inputs.ProviderExtendedLocationResponse;
import com.pulumi.azurenative.resources.inputs.ZoneMappingResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Resource type managed by the resource provider.
 * 
 */
public final class ProviderResourceTypeResponse extends com.pulumi.resources.InvokeArgs {

    public static final ProviderResourceTypeResponse Empty = new ProviderResourceTypeResponse();

    /**
     * The aliases that are supported by this resource type.
     * 
     */
    @Import(name="aliases")
    private @Nullable List<AliasResponse> aliases;

    public Optional<List<AliasResponse>> aliases() {
        return Optional.ofNullable(this.aliases);
    }

    /**
     * The API profiles for the resource provider.
     * 
     */
    @Import(name="apiProfiles", required=true)
    private List<ApiProfileResponse> apiProfiles;

    public List<ApiProfileResponse> apiProfiles() {
        return this.apiProfiles;
    }

    /**
     * The API version.
     * 
     */
    @Import(name="apiVersions")
    private @Nullable List<String> apiVersions;

    public Optional<List<String>> apiVersions() {
        return Optional.ofNullable(this.apiVersions);
    }

    /**
     * The additional capabilities offered by this resource type.
     * 
     */
    @Import(name="capabilities")
    private @Nullable String capabilities;

    public Optional<String> capabilities() {
        return Optional.ofNullable(this.capabilities);
    }

    /**
     * The default API version.
     * 
     */
    @Import(name="defaultApiVersion", required=true)
    private String defaultApiVersion;

    public String defaultApiVersion() {
        return this.defaultApiVersion;
    }

    /**
     * The location mappings that are supported by this resource type.
     * 
     */
    @Import(name="locationMappings")
    private @Nullable List<ProviderExtendedLocationResponse> locationMappings;

    public Optional<List<ProviderExtendedLocationResponse>> locationMappings() {
        return Optional.ofNullable(this.locationMappings);
    }

    /**
     * The collection of locations where this resource type can be created.
     * 
     */
    @Import(name="locations")
    private @Nullable List<String> locations;

    public Optional<List<String>> locations() {
        return Optional.ofNullable(this.locations);
    }

    /**
     * The properties.
     * 
     */
    @Import(name="properties")
    private @Nullable Map<String,String> properties;

    public Optional<Map<String,String>> properties() {
        return Optional.ofNullable(this.properties);
    }

    /**
     * The resource type.
     * 
     */
    @Import(name="resourceType")
    private @Nullable String resourceType;

    public Optional<String> resourceType() {
        return Optional.ofNullable(this.resourceType);
    }

    @Import(name="zoneMappings")
    private @Nullable List<ZoneMappingResponse> zoneMappings;

    public Optional<List<ZoneMappingResponse>> zoneMappings() {
        return Optional.ofNullable(this.zoneMappings);
    }

    private ProviderResourceTypeResponse() {}

    private ProviderResourceTypeResponse(ProviderResourceTypeResponse $) {
        this.aliases = $.aliases;
        this.apiProfiles = $.apiProfiles;
        this.apiVersions = $.apiVersions;
        this.capabilities = $.capabilities;
        this.defaultApiVersion = $.defaultApiVersion;
        this.locationMappings = $.locationMappings;
        this.locations = $.locations;
        this.properties = $.properties;
        this.resourceType = $.resourceType;
        this.zoneMappings = $.zoneMappings;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProviderResourceTypeResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProviderResourceTypeResponse $;

        public Builder() {
            $ = new ProviderResourceTypeResponse();
        }

        public Builder(ProviderResourceTypeResponse defaults) {
            $ = new ProviderResourceTypeResponse(Objects.requireNonNull(defaults));
        }

        public Builder aliases(@Nullable List<AliasResponse> aliases) {
            $.aliases = aliases;
            return this;
        }

        public Builder aliases(AliasResponse... aliases) {
            return aliases(List.of(aliases));
        }

        public Builder apiProfiles(List<ApiProfileResponse> apiProfiles) {
            $.apiProfiles = apiProfiles;
            return this;
        }

        public Builder apiProfiles(ApiProfileResponse... apiProfiles) {
            return apiProfiles(List.of(apiProfiles));
        }

        public Builder apiVersions(@Nullable List<String> apiVersions) {
            $.apiVersions = apiVersions;
            return this;
        }

        public Builder apiVersions(String... apiVersions) {
            return apiVersions(List.of(apiVersions));
        }

        public Builder capabilities(@Nullable String capabilities) {
            $.capabilities = capabilities;
            return this;
        }

        public Builder defaultApiVersion(String defaultApiVersion) {
            $.defaultApiVersion = defaultApiVersion;
            return this;
        }

        public Builder locationMappings(@Nullable List<ProviderExtendedLocationResponse> locationMappings) {
            $.locationMappings = locationMappings;
            return this;
        }

        public Builder locationMappings(ProviderExtendedLocationResponse... locationMappings) {
            return locationMappings(List.of(locationMappings));
        }

        public Builder locations(@Nullable List<String> locations) {
            $.locations = locations;
            return this;
        }

        public Builder locations(String... locations) {
            return locations(List.of(locations));
        }

        public Builder properties(@Nullable Map<String,String> properties) {
            $.properties = properties;
            return this;
        }

        public Builder resourceType(@Nullable String resourceType) {
            $.resourceType = resourceType;
            return this;
        }

        public Builder zoneMappings(@Nullable List<ZoneMappingResponse> zoneMappings) {
            $.zoneMappings = zoneMappings;
            return this;
        }

        public Builder zoneMappings(ZoneMappingResponse... zoneMappings) {
            return zoneMappings(List.of(zoneMappings));
        }

        public ProviderResourceTypeResponse build() {
            $.apiProfiles = Objects.requireNonNull($.apiProfiles, "expected parameter 'apiProfiles' to be non-null");
            $.defaultApiVersion = Objects.requireNonNull($.defaultApiVersion, "expected parameter 'defaultApiVersion' to be non-null");
            return $;
        }
    }

}
