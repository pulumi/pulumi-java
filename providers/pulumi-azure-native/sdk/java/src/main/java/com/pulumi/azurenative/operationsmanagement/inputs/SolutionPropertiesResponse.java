// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.operationsmanagement.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Solution properties supported by the OperationsManagement resource provider.
 * 
 */
public final class SolutionPropertiesResponse extends com.pulumi.resources.InvokeArgs {

    public static final SolutionPropertiesResponse Empty = new SolutionPropertiesResponse();

    /**
     * The azure resources that will be contained within the solutions. They will be locked and gets deleted automatically when the solution is deleted.
     * 
     */
    @Import(name="containedResources")
      private final @Nullable List<String> containedResources;

    public List<String> containedResources() {
        return this.containedResources == null ? List.of() : this.containedResources;
    }

    /**
     * The provisioning state for the solution.
     * 
     */
    @Import(name="provisioningState", required=true)
      private final String provisioningState;

    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * The resources that will be referenced from this solution. Deleting any of those solution out of band will break the solution.
     * 
     */
    @Import(name="referencedResources")
      private final @Nullable List<String> referencedResources;

    public List<String> referencedResources() {
        return this.referencedResources == null ? List.of() : this.referencedResources;
    }

    /**
     * The azure resourceId for the workspace where the solution will be deployed/enabled.
     * 
     */
    @Import(name="workspaceResourceId", required=true)
      private final String workspaceResourceId;

    public String workspaceResourceId() {
        return this.workspaceResourceId;
    }

    public SolutionPropertiesResponse(
        @Nullable List<String> containedResources,
        String provisioningState,
        @Nullable List<String> referencedResources,
        String workspaceResourceId) {
        this.containedResources = containedResources;
        this.provisioningState = Objects.requireNonNull(provisioningState, "expected parameter 'provisioningState' to be non-null");
        this.referencedResources = referencedResources;
        this.workspaceResourceId = Objects.requireNonNull(workspaceResourceId, "expected parameter 'workspaceResourceId' to be non-null");
    }

    private SolutionPropertiesResponse() {
        this.containedResources = List.of();
        this.provisioningState = null;
        this.referencedResources = List.of();
        this.workspaceResourceId = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SolutionPropertiesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<String> containedResources;
        private String provisioningState;
        private @Nullable List<String> referencedResources;
        private String workspaceResourceId;

        public Builder() {
    	      // Empty
        }

        public Builder(SolutionPropertiesResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.containedResources = defaults.containedResources;
    	      this.provisioningState = defaults.provisioningState;
    	      this.referencedResources = defaults.referencedResources;
    	      this.workspaceResourceId = defaults.workspaceResourceId;
        }

        public Builder containedResources(@Nullable List<String> containedResources) {
            this.containedResources = containedResources;
            return this;
        }
        public Builder containedResources(String... containedResources) {
            return containedResources(List.of(containedResources));
        }
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        public Builder referencedResources(@Nullable List<String> referencedResources) {
            this.referencedResources = referencedResources;
            return this;
        }
        public Builder referencedResources(String... referencedResources) {
            return referencedResources(List.of(referencedResources));
        }
        public Builder workspaceResourceId(String workspaceResourceId) {
            this.workspaceResourceId = Objects.requireNonNull(workspaceResourceId);
            return this;
        }        public SolutionPropertiesResponse build() {
            return new SolutionPropertiesResponse(containedResources, provisioningState, referencedResources, workspaceResourceId);
        }
    }
}
