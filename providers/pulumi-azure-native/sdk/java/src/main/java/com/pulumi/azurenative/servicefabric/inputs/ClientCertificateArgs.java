// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.servicefabric.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Client Certificate definition.
 * 
 */
public final class ClientCertificateArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClientCertificateArgs Empty = new ClientCertificateArgs();

    /**
     * Certificate Common name.
     * 
     */
    @Import(name="commonName")
    private @Nullable Output<String> commonName;

    /**
     * @return Certificate Common name.
     * 
     */
    public Optional<Output<String>> commonName() {
        return Optional.ofNullable(this.commonName);
    }

    /**
     * Whether the certificate is admin or not.
     * 
     */
    @Import(name="isAdmin", required=true)
    private Output<Boolean> isAdmin;

    /**
     * @return Whether the certificate is admin or not.
     * 
     */
    public Output<Boolean> isAdmin() {
        return this.isAdmin;
    }

    /**
     * Issuer thumbprint for the certificate. Only used together with CommonName.
     * 
     */
    @Import(name="issuerThumbprint")
    private @Nullable Output<String> issuerThumbprint;

    /**
     * @return Issuer thumbprint for the certificate. Only used together with CommonName.
     * 
     */
    public Optional<Output<String>> issuerThumbprint() {
        return Optional.ofNullable(this.issuerThumbprint);
    }

    /**
     * Certificate Thumbprint.
     * 
     */
    @Import(name="thumbprint")
    private @Nullable Output<String> thumbprint;

    /**
     * @return Certificate Thumbprint.
     * 
     */
    public Optional<Output<String>> thumbprint() {
        return Optional.ofNullable(this.thumbprint);
    }

    private ClientCertificateArgs() {}

    private ClientCertificateArgs(ClientCertificateArgs $) {
        this.commonName = $.commonName;
        this.isAdmin = $.isAdmin;
        this.issuerThumbprint = $.issuerThumbprint;
        this.thumbprint = $.thumbprint;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClientCertificateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClientCertificateArgs $;

        public Builder() {
            $ = new ClientCertificateArgs();
        }

        public Builder(ClientCertificateArgs defaults) {
            $ = new ClientCertificateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param commonName Certificate Common name.
         * 
         * @return builder
         * 
         */
        public Builder commonName(@Nullable Output<String> commonName) {
            $.commonName = commonName;
            return this;
        }

        /**
         * @param commonName Certificate Common name.
         * 
         * @return builder
         * 
         */
        public Builder commonName(String commonName) {
            return commonName(Output.of(commonName));
        }

        /**
         * @param isAdmin Whether the certificate is admin or not.
         * 
         * @return builder
         * 
         */
        public Builder isAdmin(Output<Boolean> isAdmin) {
            $.isAdmin = isAdmin;
            return this;
        }

        /**
         * @param isAdmin Whether the certificate is admin or not.
         * 
         * @return builder
         * 
         */
        public Builder isAdmin(Boolean isAdmin) {
            return isAdmin(Output.of(isAdmin));
        }

        /**
         * @param issuerThumbprint Issuer thumbprint for the certificate. Only used together with CommonName.
         * 
         * @return builder
         * 
         */
        public Builder issuerThumbprint(@Nullable Output<String> issuerThumbprint) {
            $.issuerThumbprint = issuerThumbprint;
            return this;
        }

        /**
         * @param issuerThumbprint Issuer thumbprint for the certificate. Only used together with CommonName.
         * 
         * @return builder
         * 
         */
        public Builder issuerThumbprint(String issuerThumbprint) {
            return issuerThumbprint(Output.of(issuerThumbprint));
        }

        /**
         * @param thumbprint Certificate Thumbprint.
         * 
         * @return builder
         * 
         */
        public Builder thumbprint(@Nullable Output<String> thumbprint) {
            $.thumbprint = thumbprint;
            return this;
        }

        /**
         * @param thumbprint Certificate Thumbprint.
         * 
         * @return builder
         * 
         */
        public Builder thumbprint(String thumbprint) {
            return thumbprint(Output.of(thumbprint));
        }

        public ClientCertificateArgs build() {
            $.isAdmin = Objects.requireNonNull($.isAdmin, "expected parameter 'isAdmin' to be non-null");
            return $;
        }
    }

}
