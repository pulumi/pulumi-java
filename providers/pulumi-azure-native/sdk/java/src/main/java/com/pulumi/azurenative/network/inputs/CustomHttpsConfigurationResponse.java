// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.azurenative.network.inputs.KeyVaultCertificateSourceParametersResponseVault;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Https settings for a domain
 * 
 */
public final class CustomHttpsConfigurationResponse extends com.pulumi.resources.InvokeArgs {

    public static final CustomHttpsConfigurationResponse Empty = new CustomHttpsConfigurationResponse();

    /**
     * Defines the source of the SSL certificate
     * 
     */
    @Import(name="certificateSource", required=true)
    private String certificateSource;

    /**
     * @return Defines the source of the SSL certificate
     * 
     */
    public String certificateSource() {
        return this.certificateSource;
    }

    /**
     * Defines the type of the certificate used for secure connections to a frontendEndpoint
     * 
     */
    @Import(name="certificateType")
    private @Nullable String certificateType;

    /**
     * @return Defines the type of the certificate used for secure connections to a frontendEndpoint
     * 
     */
    public Optional<String> certificateType() {
        return Optional.ofNullable(this.certificateType);
    }

    /**
     * The minimum TLS version required from the clients to establish an SSL handshake with Front Door.
     * 
     */
    @Import(name="minimumTlsVersion", required=true)
    private String minimumTlsVersion;

    /**
     * @return The minimum TLS version required from the clients to establish an SSL handshake with Front Door.
     * 
     */
    public String minimumTlsVersion() {
        return this.minimumTlsVersion;
    }

    /**
     * Defines the TLS extension protocol that is used for secure delivery
     * 
     */
    @Import(name="protocolType", required=true)
    private String protocolType;

    /**
     * @return Defines the TLS extension protocol that is used for secure delivery
     * 
     */
    public String protocolType() {
        return this.protocolType;
    }

    /**
     * The name of the Key Vault secret representing the full certificate PFX
     * 
     */
    @Import(name="secretName")
    private @Nullable String secretName;

    /**
     * @return The name of the Key Vault secret representing the full certificate PFX
     * 
     */
    public Optional<String> secretName() {
        return Optional.ofNullable(this.secretName);
    }

    /**
     * The version of the Key Vault secret representing the full certificate PFX
     * 
     */
    @Import(name="secretVersion")
    private @Nullable String secretVersion;

    /**
     * @return The version of the Key Vault secret representing the full certificate PFX
     * 
     */
    public Optional<String> secretVersion() {
        return Optional.ofNullable(this.secretVersion);
    }

    /**
     * The Key Vault containing the SSL certificate
     * 
     */
    @Import(name="vault")
    private @Nullable KeyVaultCertificateSourceParametersResponseVault vault;

    /**
     * @return The Key Vault containing the SSL certificate
     * 
     */
    public Optional<KeyVaultCertificateSourceParametersResponseVault> vault() {
        return Optional.ofNullable(this.vault);
    }

    private CustomHttpsConfigurationResponse() {}

    private CustomHttpsConfigurationResponse(CustomHttpsConfigurationResponse $) {
        this.certificateSource = $.certificateSource;
        this.certificateType = $.certificateType;
        this.minimumTlsVersion = $.minimumTlsVersion;
        this.protocolType = $.protocolType;
        this.secretName = $.secretName;
        this.secretVersion = $.secretVersion;
        this.vault = $.vault;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CustomHttpsConfigurationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CustomHttpsConfigurationResponse $;

        public Builder() {
            $ = new CustomHttpsConfigurationResponse();
        }

        public Builder(CustomHttpsConfigurationResponse defaults) {
            $ = new CustomHttpsConfigurationResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificateSource Defines the source of the SSL certificate
         * 
         * @return builder
         * 
         */
        public Builder certificateSource(String certificateSource) {
            $.certificateSource = certificateSource;
            return this;
        }

        /**
         * @param certificateType Defines the type of the certificate used for secure connections to a frontendEndpoint
         * 
         * @return builder
         * 
         */
        public Builder certificateType(@Nullable String certificateType) {
            $.certificateType = certificateType;
            return this;
        }

        /**
         * @param minimumTlsVersion The minimum TLS version required from the clients to establish an SSL handshake with Front Door.
         * 
         * @return builder
         * 
         */
        public Builder minimumTlsVersion(String minimumTlsVersion) {
            $.minimumTlsVersion = minimumTlsVersion;
            return this;
        }

        /**
         * @param protocolType Defines the TLS extension protocol that is used for secure delivery
         * 
         * @return builder
         * 
         */
        public Builder protocolType(String protocolType) {
            $.protocolType = protocolType;
            return this;
        }

        /**
         * @param secretName The name of the Key Vault secret representing the full certificate PFX
         * 
         * @return builder
         * 
         */
        public Builder secretName(@Nullable String secretName) {
            $.secretName = secretName;
            return this;
        }

        /**
         * @param secretVersion The version of the Key Vault secret representing the full certificate PFX
         * 
         * @return builder
         * 
         */
        public Builder secretVersion(@Nullable String secretVersion) {
            $.secretVersion = secretVersion;
            return this;
        }

        /**
         * @param vault The Key Vault containing the SSL certificate
         * 
         * @return builder
         * 
         */
        public Builder vault(@Nullable KeyVaultCertificateSourceParametersResponseVault vault) {
            $.vault = vault;
            return this;
        }

        public CustomHttpsConfigurationResponse build() {
            $.certificateSource = Objects.requireNonNull($.certificateSource, "expected parameter 'certificateSource' to be non-null");
            $.minimumTlsVersion = Objects.requireNonNull($.minimumTlsVersion, "expected parameter 'minimumTlsVersion' to be non-null");
            $.protocolType = Objects.requireNonNull($.protocolType, "expected parameter 'protocolType' to be non-null");
            return $;
        }
    }

}
