// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.cdn.inputs;

import com.pulumi.azurenative.cdn.inputs.DeliveryRuleCacheExpirationActionResponse;
import com.pulumi.azurenative.cdn.inputs.DeliveryRuleCacheKeyQueryStringActionResponse;
import com.pulumi.azurenative.cdn.inputs.DeliveryRuleCookiesConditionResponse;
import com.pulumi.azurenative.cdn.inputs.DeliveryRuleHttpVersionConditionResponse;
import com.pulumi.azurenative.cdn.inputs.DeliveryRuleIsDeviceConditionResponse;
import com.pulumi.azurenative.cdn.inputs.DeliveryRulePostArgsConditionResponse;
import com.pulumi.azurenative.cdn.inputs.DeliveryRuleQueryStringConditionResponse;
import com.pulumi.azurenative.cdn.inputs.DeliveryRuleRemoteAddressConditionResponse;
import com.pulumi.azurenative.cdn.inputs.DeliveryRuleRequestBodyConditionResponse;
import com.pulumi.azurenative.cdn.inputs.DeliveryRuleRequestHeaderActionResponse;
import com.pulumi.azurenative.cdn.inputs.DeliveryRuleRequestHeaderConditionResponse;
import com.pulumi.azurenative.cdn.inputs.DeliveryRuleRequestMethodConditionResponse;
import com.pulumi.azurenative.cdn.inputs.DeliveryRuleRequestSchemeConditionResponse;
import com.pulumi.azurenative.cdn.inputs.DeliveryRuleRequestUriConditionResponse;
import com.pulumi.azurenative.cdn.inputs.DeliveryRuleResponseHeaderActionResponse;
import com.pulumi.azurenative.cdn.inputs.DeliveryRuleUrlFileExtensionConditionResponse;
import com.pulumi.azurenative.cdn.inputs.DeliveryRuleUrlFileNameConditionResponse;
import com.pulumi.azurenative.cdn.inputs.DeliveryRuleUrlPathConditionResponse;
import com.pulumi.azurenative.cdn.inputs.OriginGroupOverrideActionResponse;
import com.pulumi.azurenative.cdn.inputs.UrlRedirectActionResponse;
import com.pulumi.azurenative.cdn.inputs.UrlRewriteActionResponse;
import com.pulumi.azurenative.cdn.inputs.UrlSigningActionResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A rule that specifies a set of actions and conditions
 * 
 */
public final class DeliveryRuleResponse extends com.pulumi.resources.InvokeArgs {

    public static final DeliveryRuleResponse Empty = new DeliveryRuleResponse();

    /**
     * A list of actions that are executed when all the conditions of a rule are satisfied.
     * 
     */
    @Import(name="actions", required=true)
    private List<Object> actions;

    /**
     * @return A list of actions that are executed when all the conditions of a rule are satisfied.
     * 
     */
    public List<Object> actions() {
        return this.actions;
    }

    /**
     * A list of conditions that must be matched for the actions to be executed
     * 
     */
    @Import(name="conditions")
    private @Nullable List<Object> conditions;

    /**
     * @return A list of conditions that must be matched for the actions to be executed
     * 
     */
    public Optional<List<Object>> conditions() {
        return Optional.ofNullable(this.conditions);
    }

    /**
     * Name of the rule
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return Name of the rule
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The order in which the rules are applied for the endpoint. Possible values {0,1,2,3,………}. A rule with a lesser order will be applied before a rule with a greater order. Rule with order 0 is a special rule. It does not require any condition and actions listed in it will always be applied.
     * 
     */
    @Import(name="order", required=true)
    private Integer order;

    /**
     * @return The order in which the rules are applied for the endpoint. Possible values {0,1,2,3,………}. A rule with a lesser order will be applied before a rule with a greater order. Rule with order 0 is a special rule. It does not require any condition and actions listed in it will always be applied.
     * 
     */
    public Integer order() {
        return this.order;
    }

    private DeliveryRuleResponse() {}

    private DeliveryRuleResponse(DeliveryRuleResponse $) {
        this.actions = $.actions;
        this.conditions = $.conditions;
        this.name = $.name;
        this.order = $.order;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeliveryRuleResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeliveryRuleResponse $;

        public Builder() {
            $ = new DeliveryRuleResponse();
        }

        public Builder(DeliveryRuleResponse defaults) {
            $ = new DeliveryRuleResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param actions A list of actions that are executed when all the conditions of a rule are satisfied.
         * 
         * @return builder
         * 
         */
        public Builder actions(List<Object> actions) {
            $.actions = actions;
            return this;
        }

        /**
         * @param actions A list of actions that are executed when all the conditions of a rule are satisfied.
         * 
         * @return builder
         * 
         */
        public Builder actions(Object... actions) {
            return actions(List.of(actions));
        }

        /**
         * @param conditions A list of conditions that must be matched for the actions to be executed
         * 
         * @return builder
         * 
         */
        public Builder conditions(@Nullable List<Object> conditions) {
            $.conditions = conditions;
            return this;
        }

        /**
         * @param conditions A list of conditions that must be matched for the actions to be executed
         * 
         * @return builder
         * 
         */
        public Builder conditions(Object... conditions) {
            return conditions(List.of(conditions));
        }

        /**
         * @param name Name of the rule
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param order The order in which the rules are applied for the endpoint. Possible values {0,1,2,3,………}. A rule with a lesser order will be applied before a rule with a greater order. Rule with order 0 is a special rule. It does not require any condition and actions listed in it will always be applied.
         * 
         * @return builder
         * 
         */
        public Builder order(Integer order) {
            $.order = order;
            return this;
        }

        public DeliveryRuleResponse build() {
            $.actions = Objects.requireNonNull($.actions, "expected parameter 'actions' to be non-null");
            $.order = Objects.requireNonNull($.order, "expected parameter 'order' to be non-null");
            return $;
        }
    }

}
