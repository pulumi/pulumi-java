// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.containerregistry;

import com.pulumi.azurenative.containerregistry.inputs.NetworkRuleSetArgs;
import com.pulumi.azurenative.containerregistry.inputs.PoliciesArgs;
import com.pulumi.azurenative.containerregistry.inputs.SkuArgs;
import com.pulumi.azurenative.containerregistry.inputs.StorageAccountPropertiesArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RegistryArgs extends com.pulumi.resources.ResourceArgs {

    public static final RegistryArgs Empty = new RegistryArgs();

    /**
     * The value that indicates whether the admin user is enabled.
     * 
     */
    @Import(name="adminUserEnabled")
    private @Nullable Output<Boolean> adminUserEnabled;

    public Optional<Output<Boolean>> adminUserEnabled() {
        return Optional.ofNullable(this.adminUserEnabled);
    }

    /**
     * The location of the resource. This cannot be changed after the resource is created.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The network rule set for a container registry.
     * 
     */
    @Import(name="networkRuleSet")
    private @Nullable Output<NetworkRuleSetArgs> networkRuleSet;

    public Optional<Output<NetworkRuleSetArgs>> networkRuleSet() {
        return Optional.ofNullable(this.networkRuleSet);
    }

    /**
     * The policies for a container registry.
     * 
     */
    @Import(name="policies")
    private @Nullable Output<PoliciesArgs> policies;

    public Optional<Output<PoliciesArgs>> policies() {
        return Optional.ofNullable(this.policies);
    }

    /**
     * The name of the container registry.
     * 
     */
    @Import(name="registryName")
    private @Nullable Output<String> registryName;

    public Optional<Output<String>> registryName() {
        return Optional.ofNullable(this.registryName);
    }

    /**
     * The name of the resource group to which the container registry belongs.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The SKU of the container registry.
     * 
     */
    @Import(name="sku", required=true)
    private Output<SkuArgs> sku;

    public Output<SkuArgs> sku() {
        return this.sku;
    }

    /**
     * The properties of the storage account for the container registry. Only applicable to Classic SKU.
     * 
     */
    @Import(name="storageAccount")
    private @Nullable Output<StorageAccountPropertiesArgs> storageAccount;

    public Optional<Output<StorageAccountPropertiesArgs>> storageAccount() {
        return Optional.ofNullable(this.storageAccount);
    }

    /**
     * The tags of the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private RegistryArgs() {}

    private RegistryArgs(RegistryArgs $) {
        this.adminUserEnabled = $.adminUserEnabled;
        this.location = $.location;
        this.networkRuleSet = $.networkRuleSet;
        this.policies = $.policies;
        this.registryName = $.registryName;
        this.resourceGroupName = $.resourceGroupName;
        this.sku = $.sku;
        this.storageAccount = $.storageAccount;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RegistryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RegistryArgs $;

        public Builder() {
            $ = new RegistryArgs();
        }

        public Builder(RegistryArgs defaults) {
            $ = new RegistryArgs(Objects.requireNonNull(defaults));
        }

        public Builder adminUserEnabled(@Nullable Output<Boolean> adminUserEnabled) {
            $.adminUserEnabled = adminUserEnabled;
            return this;
        }

        public Builder adminUserEnabled(Boolean adminUserEnabled) {
            return adminUserEnabled(Output.of(adminUserEnabled));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder networkRuleSet(@Nullable Output<NetworkRuleSetArgs> networkRuleSet) {
            $.networkRuleSet = networkRuleSet;
            return this;
        }

        public Builder networkRuleSet(NetworkRuleSetArgs networkRuleSet) {
            return networkRuleSet(Output.of(networkRuleSet));
        }

        public Builder policies(@Nullable Output<PoliciesArgs> policies) {
            $.policies = policies;
            return this;
        }

        public Builder policies(PoliciesArgs policies) {
            return policies(Output.of(policies));
        }

        public Builder registryName(@Nullable Output<String> registryName) {
            $.registryName = registryName;
            return this;
        }

        public Builder registryName(String registryName) {
            return registryName(Output.of(registryName));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder sku(Output<SkuArgs> sku) {
            $.sku = sku;
            return this;
        }

        public Builder sku(SkuArgs sku) {
            return sku(Output.of(sku));
        }

        public Builder storageAccount(@Nullable Output<StorageAccountPropertiesArgs> storageAccount) {
            $.storageAccount = storageAccount;
            return this;
        }

        public Builder storageAccount(StorageAccountPropertiesArgs storageAccount) {
            return storageAccount(Output.of(storageAccount));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public RegistryArgs build() {
            $.adminUserEnabled = Codegen.booleanProp("adminUserEnabled").output().arg($.adminUserEnabled).def(false).getNullable();
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.sku = Objects.requireNonNull($.sku, "expected parameter 'sku' to be non-null");
            return $;
        }
    }

}
