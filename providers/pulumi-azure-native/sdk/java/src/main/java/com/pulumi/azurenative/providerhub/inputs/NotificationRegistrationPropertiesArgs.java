// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.providerhub.inputs;

import com.pulumi.azurenative.providerhub.enums.MessageScope;
import com.pulumi.azurenative.providerhub.enums.NotificationMode;
import com.pulumi.azurenative.providerhub.enums.ProvisioningState;
import com.pulumi.azurenative.providerhub.inputs.NotificationEndpointArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NotificationRegistrationPropertiesArgs extends com.pulumi.resources.ResourceArgs {

    public static final NotificationRegistrationPropertiesArgs Empty = new NotificationRegistrationPropertiesArgs();

    @Import(name="includedEvents")
    private @Nullable Output<List<String>> includedEvents;

    public Optional<Output<List<String>>> includedEvents() {
        return Optional.ofNullable(this.includedEvents);
    }

    @Import(name="messageScope")
    private @Nullable Output<Either<String,MessageScope>> messageScope;

    public Optional<Output<Either<String,MessageScope>>> messageScope() {
        return Optional.ofNullable(this.messageScope);
    }

    @Import(name="notificationEndpoints")
    private @Nullable Output<List<NotificationEndpointArgs>> notificationEndpoints;

    public Optional<Output<List<NotificationEndpointArgs>>> notificationEndpoints() {
        return Optional.ofNullable(this.notificationEndpoints);
    }

    @Import(name="notificationMode")
    private @Nullable Output<Either<String,NotificationMode>> notificationMode;

    public Optional<Output<Either<String,NotificationMode>>> notificationMode() {
        return Optional.ofNullable(this.notificationMode);
    }

    @Import(name="provisioningState")
    private @Nullable Output<Either<String,ProvisioningState>> provisioningState;

    public Optional<Output<Either<String,ProvisioningState>>> provisioningState() {
        return Optional.ofNullable(this.provisioningState);
    }

    private NotificationRegistrationPropertiesArgs() {}

    private NotificationRegistrationPropertiesArgs(NotificationRegistrationPropertiesArgs $) {
        this.includedEvents = $.includedEvents;
        this.messageScope = $.messageScope;
        this.notificationEndpoints = $.notificationEndpoints;
        this.notificationMode = $.notificationMode;
        this.provisioningState = $.provisioningState;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NotificationRegistrationPropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NotificationRegistrationPropertiesArgs $;

        public Builder() {
            $ = new NotificationRegistrationPropertiesArgs();
        }

        public Builder(NotificationRegistrationPropertiesArgs defaults) {
            $ = new NotificationRegistrationPropertiesArgs(Objects.requireNonNull(defaults));
        }

        public Builder includedEvents(@Nullable Output<List<String>> includedEvents) {
            $.includedEvents = includedEvents;
            return this;
        }

        public Builder includedEvents(List<String> includedEvents) {
            return includedEvents(Output.of(includedEvents));
        }

        public Builder includedEvents(String... includedEvents) {
            return includedEvents(List.of(includedEvents));
        }

        public Builder messageScope(@Nullable Output<Either<String,MessageScope>> messageScope) {
            $.messageScope = messageScope;
            return this;
        }

        public Builder messageScope(Either<String,MessageScope> messageScope) {
            return messageScope(Output.of(messageScope));
        }

        public Builder messageScope(String messageScope) {
            return messageScope(Either.ofLeft(messageScope));
        }

        public Builder messageScope(MessageScope messageScope) {
            return messageScope(Either.ofRight(messageScope));
        }

        public Builder notificationEndpoints(@Nullable Output<List<NotificationEndpointArgs>> notificationEndpoints) {
            $.notificationEndpoints = notificationEndpoints;
            return this;
        }

        public Builder notificationEndpoints(List<NotificationEndpointArgs> notificationEndpoints) {
            return notificationEndpoints(Output.of(notificationEndpoints));
        }

        public Builder notificationEndpoints(NotificationEndpointArgs... notificationEndpoints) {
            return notificationEndpoints(List.of(notificationEndpoints));
        }

        public Builder notificationMode(@Nullable Output<Either<String,NotificationMode>> notificationMode) {
            $.notificationMode = notificationMode;
            return this;
        }

        public Builder notificationMode(Either<String,NotificationMode> notificationMode) {
            return notificationMode(Output.of(notificationMode));
        }

        public Builder notificationMode(String notificationMode) {
            return notificationMode(Either.ofLeft(notificationMode));
        }

        public Builder notificationMode(NotificationMode notificationMode) {
            return notificationMode(Either.ofRight(notificationMode));
        }

        public Builder provisioningState(@Nullable Output<Either<String,ProvisioningState>> provisioningState) {
            $.provisioningState = provisioningState;
            return this;
        }

        public Builder provisioningState(Either<String,ProvisioningState> provisioningState) {
            return provisioningState(Output.of(provisioningState));
        }

        public Builder provisioningState(String provisioningState) {
            return provisioningState(Either.ofLeft(provisioningState));
        }

        public Builder provisioningState(ProvisioningState provisioningState) {
            return provisioningState(Either.ofRight(provisioningState));
        }

        public NotificationRegistrationPropertiesArgs build() {
            return $;
        }
    }

}
