// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.costmanagement.inputs;

import com.pulumi.azurenative.costmanagement.inputs.ReportRecurrencePeriodResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The schedule associated with a report.
 * 
 */
public final class ReportScheduleResponse extends com.pulumi.resources.InvokeArgs {

    public static final ReportScheduleResponse Empty = new ReportScheduleResponse();

    /**
     * The schedule recurrence.
     * 
     */
    @Import(name="recurrence", required=true)
      private final String recurrence;

    public String recurrence() {
        return this.recurrence;
    }

    /**
     * Has start and end date of the recurrence. The start date must be in future. If present, the end date must be greater than start date.
     * 
     */
    @Import(name="recurrencePeriod")
      private final @Nullable ReportRecurrencePeriodResponse recurrencePeriod;

    public Optional<ReportRecurrencePeriodResponse> recurrencePeriod() {
        return this.recurrencePeriod == null ? Optional.empty() : Optional.ofNullable(this.recurrencePeriod);
    }

    /**
     * The status of the schedule. Whether active or not. If inactive, the report&#39;s scheduled execution is paused.
     * 
     */
    @Import(name="status")
      private final @Nullable String status;

    public Optional<String> status() {
        return this.status == null ? Optional.empty() : Optional.ofNullable(this.status);
    }

    public ReportScheduleResponse(
        String recurrence,
        @Nullable ReportRecurrencePeriodResponse recurrencePeriod,
        @Nullable String status) {
        this.recurrence = Objects.requireNonNull(recurrence, "expected parameter 'recurrence' to be non-null");
        this.recurrencePeriod = recurrencePeriod;
        this.status = status;
    }

    private ReportScheduleResponse() {
        this.recurrence = null;
        this.recurrencePeriod = null;
        this.status = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ReportScheduleResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String recurrence;
        private @Nullable ReportRecurrencePeriodResponse recurrencePeriod;
        private @Nullable String status;

        public Builder() {
    	      // Empty
        }

        public Builder(ReportScheduleResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.recurrence = defaults.recurrence;
    	      this.recurrencePeriod = defaults.recurrencePeriod;
    	      this.status = defaults.status;
        }

        public Builder recurrence(String recurrence) {
            this.recurrence = Objects.requireNonNull(recurrence);
            return this;
        }
        public Builder recurrencePeriod(@Nullable ReportRecurrencePeriodResponse recurrencePeriod) {
            this.recurrencePeriod = recurrencePeriod;
            return this;
        }
        public Builder status(@Nullable String status) {
            this.status = status;
            return this;
        }        public ReportScheduleResponse build() {
            return new ReportScheduleResponse(recurrence, recurrencePeriod, status);
        }
    }
}
