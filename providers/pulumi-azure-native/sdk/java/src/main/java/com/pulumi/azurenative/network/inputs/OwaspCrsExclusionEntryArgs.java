// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.azurenative.network.enums.OwaspCrsExclusionEntryMatchVariable;
import com.pulumi.azurenative.network.enums.OwaspCrsExclusionEntrySelectorMatchOperator;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;


/**
 * Allow to exclude some variable satisfy the condition for the WAF check.
 * 
 */
public final class OwaspCrsExclusionEntryArgs extends com.pulumi.resources.ResourceArgs {

    public static final OwaspCrsExclusionEntryArgs Empty = new OwaspCrsExclusionEntryArgs();

    /**
     * The variable to be excluded.
     * 
     */
    @Import(name="matchVariable", required=true)
      private final Output<Either<String,OwaspCrsExclusionEntryMatchVariable>> matchVariable;

    public Output<Either<String,OwaspCrsExclusionEntryMatchVariable>> matchVariable() {
        return this.matchVariable;
    }

    /**
     * When matchVariable is a collection, operator used to specify which elements in the collection this exclusion applies to.
     * 
     */
    @Import(name="selector", required=true)
      private final Output<String> selector;

    public Output<String> selector() {
        return this.selector;
    }

    /**
     * When matchVariable is a collection, operate on the selector to specify which elements in the collection this exclusion applies to.
     * 
     */
    @Import(name="selectorMatchOperator", required=true)
      private final Output<Either<String,OwaspCrsExclusionEntrySelectorMatchOperator>> selectorMatchOperator;

    public Output<Either<String,OwaspCrsExclusionEntrySelectorMatchOperator>> selectorMatchOperator() {
        return this.selectorMatchOperator;
    }

    public OwaspCrsExclusionEntryArgs(
        Output<Either<String,OwaspCrsExclusionEntryMatchVariable>> matchVariable,
        Output<String> selector,
        Output<Either<String,OwaspCrsExclusionEntrySelectorMatchOperator>> selectorMatchOperator) {
        this.matchVariable = Objects.requireNonNull(matchVariable, "expected parameter 'matchVariable' to be non-null");
        this.selector = Objects.requireNonNull(selector, "expected parameter 'selector' to be non-null");
        this.selectorMatchOperator = Objects.requireNonNull(selectorMatchOperator, "expected parameter 'selectorMatchOperator' to be non-null");
    }

    private OwaspCrsExclusionEntryArgs() {
        this.matchVariable = Codegen.empty();
        this.selector = Codegen.empty();
        this.selectorMatchOperator = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(OwaspCrsExclusionEntryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<Either<String,OwaspCrsExclusionEntryMatchVariable>> matchVariable;
        private Output<String> selector;
        private Output<Either<String,OwaspCrsExclusionEntrySelectorMatchOperator>> selectorMatchOperator;

        public Builder() {
    	      // Empty
        }

        public Builder(OwaspCrsExclusionEntryArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.matchVariable = defaults.matchVariable;
    	      this.selector = defaults.selector;
    	      this.selectorMatchOperator = defaults.selectorMatchOperator;
        }

        public Builder matchVariable(Output<Either<String,OwaspCrsExclusionEntryMatchVariable>> matchVariable) {
            this.matchVariable = Objects.requireNonNull(matchVariable);
            return this;
        }
        public Builder matchVariable(Either<String,OwaspCrsExclusionEntryMatchVariable> matchVariable) {
            this.matchVariable = Output.of(Objects.requireNonNull(matchVariable));
            return this;
        }
        public Builder selector(Output<String> selector) {
            this.selector = Objects.requireNonNull(selector);
            return this;
        }
        public Builder selector(String selector) {
            this.selector = Output.of(Objects.requireNonNull(selector));
            return this;
        }
        public Builder selectorMatchOperator(Output<Either<String,OwaspCrsExclusionEntrySelectorMatchOperator>> selectorMatchOperator) {
            this.selectorMatchOperator = Objects.requireNonNull(selectorMatchOperator);
            return this;
        }
        public Builder selectorMatchOperator(Either<String,OwaspCrsExclusionEntrySelectorMatchOperator> selectorMatchOperator) {
            this.selectorMatchOperator = Output.of(Objects.requireNonNull(selectorMatchOperator));
            return this;
        }        public OwaspCrsExclusionEntryArgs build() {
            return new OwaspCrsExclusionEntryArgs(matchVariable, selector, selectorMatchOperator);
        }
    }
}
