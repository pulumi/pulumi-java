// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.appplatform.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Required inbound or outbound traffic for Azure Spring Cloud instance.
 * 
 */
public final class RequiredTrafficResponse extends com.pulumi.resources.InvokeArgs {

    public static final RequiredTrafficResponse Empty = new RequiredTrafficResponse();

    /**
     * The direction of required traffic
     * 
     */
    @Import(name="direction", required=true)
    private String direction;

    /**
     * @return The direction of required traffic
     * 
     */
    public String direction() {
        return this.direction;
    }

    /**
     * The FQDN list of required traffic
     * 
     */
    @Import(name="fqdns", required=true)
    private List<String> fqdns;

    /**
     * @return The FQDN list of required traffic
     * 
     */
    public List<String> fqdns() {
        return this.fqdns;
    }

    /**
     * The ip list of required traffic
     * 
     */
    @Import(name="ips", required=true)
    private List<String> ips;

    /**
     * @return The ip list of required traffic
     * 
     */
    public List<String> ips() {
        return this.ips;
    }

    /**
     * The port of required traffic
     * 
     */
    @Import(name="port", required=true)
    private Integer port;

    /**
     * @return The port of required traffic
     * 
     */
    public Integer port() {
        return this.port;
    }

    /**
     * The protocol of required traffic
     * 
     */
    @Import(name="protocol", required=true)
    private String protocol;

    /**
     * @return The protocol of required traffic
     * 
     */
    public String protocol() {
        return this.protocol;
    }

    private RequiredTrafficResponse() {}

    private RequiredTrafficResponse(RequiredTrafficResponse $) {
        this.direction = $.direction;
        this.fqdns = $.fqdns;
        this.ips = $.ips;
        this.port = $.port;
        this.protocol = $.protocol;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RequiredTrafficResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RequiredTrafficResponse $;

        public Builder() {
            $ = new RequiredTrafficResponse();
        }

        public Builder(RequiredTrafficResponse defaults) {
            $ = new RequiredTrafficResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param direction The direction of required traffic
         * 
         * @return builder
         * 
         */
        public Builder direction(String direction) {
            $.direction = direction;
            return this;
        }

        /**
         * @param fqdns The FQDN list of required traffic
         * 
         * @return builder
         * 
         */
        public Builder fqdns(List<String> fqdns) {
            $.fqdns = fqdns;
            return this;
        }

        /**
         * @param fqdns The FQDN list of required traffic
         * 
         * @return builder
         * 
         */
        public Builder fqdns(String... fqdns) {
            return fqdns(List.of(fqdns));
        }

        /**
         * @param ips The ip list of required traffic
         * 
         * @return builder
         * 
         */
        public Builder ips(List<String> ips) {
            $.ips = ips;
            return this;
        }

        /**
         * @param ips The ip list of required traffic
         * 
         * @return builder
         * 
         */
        public Builder ips(String... ips) {
            return ips(List.of(ips));
        }

        /**
         * @param port The port of required traffic
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            $.port = port;
            return this;
        }

        /**
         * @param protocol The protocol of required traffic
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            $.protocol = protocol;
            return this;
        }

        public RequiredTrafficResponse build() {
            $.direction = Objects.requireNonNull($.direction, "expected parameter 'direction' to be non-null");
            $.fqdns = Objects.requireNonNull($.fqdns, "expected parameter 'fqdns' to be non-null");
            $.ips = Objects.requireNonNull($.ips, "expected parameter 'ips' to be non-null");
            $.port = Objects.requireNonNull($.port, "expected parameter 'port' to be non-null");
            $.protocol = Objects.requireNonNull($.protocol, "expected parameter 'protocol' to be non-null");
            return $;
        }
    }

}
