// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.servicefabricmesh.inputs;

import com.pulumi.azurenative.servicefabricmesh.inputs.ApplicationScopedVolumeArgs;
import com.pulumi.azurenative.servicefabricmesh.inputs.ContainerLabelArgs;
import com.pulumi.azurenative.servicefabricmesh.inputs.DiagnosticsRefArgs;
import com.pulumi.azurenative.servicefabricmesh.inputs.EndpointPropertiesArgs;
import com.pulumi.azurenative.servicefabricmesh.inputs.EnvironmentVariableArgs;
import com.pulumi.azurenative.servicefabricmesh.inputs.ImageRegistryCredentialArgs;
import com.pulumi.azurenative.servicefabricmesh.inputs.ReliableCollectionsRefArgs;
import com.pulumi.azurenative.servicefabricmesh.inputs.ResourceRequirementsArgs;
import com.pulumi.azurenative.servicefabricmesh.inputs.SettingArgs;
import com.pulumi.azurenative.servicefabricmesh.inputs.VolumeReferenceArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Describes a container and its runtime properties.
 * 
 */
public final class ContainerCodePackagePropertiesArgs extends com.pulumi.resources.ResourceArgs {

    public static final ContainerCodePackagePropertiesArgs Empty = new ContainerCodePackagePropertiesArgs();

    /**
     * Command array to execute within the container in exec form.
     * 
     */
    @Import(name="commands")
    private @Nullable Output<List<String>> commands;

    public Optional<Output<List<String>>> commands() {
        return Optional.ofNullable(this.commands);
    }

    /**
     * Reference to sinks in DiagnosticsDescription.
     * 
     */
    @Import(name="diagnostics")
    private @Nullable Output<DiagnosticsRefArgs> diagnostics;

    public Optional<Output<DiagnosticsRefArgs>> diagnostics() {
        return Optional.ofNullable(this.diagnostics);
    }

    /**
     * The endpoints exposed by this container.
     * 
     */
    @Import(name="endpoints")
    private @Nullable Output<List<EndpointPropertiesArgs>> endpoints;

    public Optional<Output<List<EndpointPropertiesArgs>>> endpoints() {
        return Optional.ofNullable(this.endpoints);
    }

    /**
     * Override for the default entry point in the container.
     * 
     */
    @Import(name="entrypoint")
    private @Nullable Output<String> entrypoint;

    public Optional<Output<String>> entrypoint() {
        return Optional.ofNullable(this.entrypoint);
    }

    /**
     * The environment variables to set in this container
     * 
     */
    @Import(name="environmentVariables")
    private @Nullable Output<List<EnvironmentVariableArgs>> environmentVariables;

    public Optional<Output<List<EnvironmentVariableArgs>>> environmentVariables() {
        return Optional.ofNullable(this.environmentVariables);
    }

    /**
     * The Container image to use.
     * 
     */
    @Import(name="image", required=true)
    private Output<String> image;

    public Output<String> image() {
        return this.image;
    }

    /**
     * Image registry credential.
     * 
     */
    @Import(name="imageRegistryCredential")
    private @Nullable Output<ImageRegistryCredentialArgs> imageRegistryCredential;

    public Optional<Output<ImageRegistryCredentialArgs>> imageRegistryCredential() {
        return Optional.ofNullable(this.imageRegistryCredential);
    }

    /**
     * The labels to set in this container.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<List<ContainerLabelArgs>> labels;

    public Optional<Output<List<ContainerLabelArgs>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The name of the code package.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    public Output<String> name() {
        return this.name;
    }

    /**
     * A list of ReliableCollection resources used by this particular code package. Please refer to ReliableCollectionsRef for more details.
     * 
     */
    @Import(name="reliableCollectionsRefs")
    private @Nullable Output<List<ReliableCollectionsRefArgs>> reliableCollectionsRefs;

    public Optional<Output<List<ReliableCollectionsRefArgs>>> reliableCollectionsRefs() {
        return Optional.ofNullable(this.reliableCollectionsRefs);
    }

    /**
     * The resources required by this container.
     * 
     */
    @Import(name="resources", required=true)
    private Output<ResourceRequirementsArgs> resources;

    public Output<ResourceRequirementsArgs> resources() {
        return this.resources;
    }

    /**
     * The settings to set in this container. The setting file path can be fetched from environment variable &#34;Fabric_SettingPath&#34;. The path for Windows container is &#34;C:\\secrets&#34;. The path for Linux container is &#34;/var/secrets&#34;.
     * 
     */
    @Import(name="settings")
    private @Nullable Output<List<SettingArgs>> settings;

    public Optional<Output<List<SettingArgs>>> settings() {
        return Optional.ofNullable(this.settings);
    }

    /**
     * Volumes to be attached to the container. The lifetime of these volumes is independent of the application&#39;s lifetime.
     * 
     */
    @Import(name="volumeRefs")
    private @Nullable Output<List<VolumeReferenceArgs>> volumeRefs;

    public Optional<Output<List<VolumeReferenceArgs>>> volumeRefs() {
        return Optional.ofNullable(this.volumeRefs);
    }

    /**
     * Volumes to be attached to the container. The lifetime of these volumes is scoped to the application&#39;s lifetime.
     * 
     */
    @Import(name="volumes")
    private @Nullable Output<List<ApplicationScopedVolumeArgs>> volumes;

    public Optional<Output<List<ApplicationScopedVolumeArgs>>> volumes() {
        return Optional.ofNullable(this.volumes);
    }

    private ContainerCodePackagePropertiesArgs() {}

    private ContainerCodePackagePropertiesArgs(ContainerCodePackagePropertiesArgs $) {
        this.commands = $.commands;
        this.diagnostics = $.diagnostics;
        this.endpoints = $.endpoints;
        this.entrypoint = $.entrypoint;
        this.environmentVariables = $.environmentVariables;
        this.image = $.image;
        this.imageRegistryCredential = $.imageRegistryCredential;
        this.labels = $.labels;
        this.name = $.name;
        this.reliableCollectionsRefs = $.reliableCollectionsRefs;
        this.resources = $.resources;
        this.settings = $.settings;
        this.volumeRefs = $.volumeRefs;
        this.volumes = $.volumes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContainerCodePackagePropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContainerCodePackagePropertiesArgs $;

        public Builder() {
            $ = new ContainerCodePackagePropertiesArgs();
        }

        public Builder(ContainerCodePackagePropertiesArgs defaults) {
            $ = new ContainerCodePackagePropertiesArgs(Objects.requireNonNull(defaults));
        }

        public Builder commands(@Nullable Output<List<String>> commands) {
            $.commands = commands;
            return this;
        }

        public Builder commands(List<String> commands) {
            return commands(Output.of(commands));
        }

        public Builder commands(String... commands) {
            return commands(List.of(commands));
        }

        public Builder diagnostics(@Nullable Output<DiagnosticsRefArgs> diagnostics) {
            $.diagnostics = diagnostics;
            return this;
        }

        public Builder diagnostics(DiagnosticsRefArgs diagnostics) {
            return diagnostics(Output.of(diagnostics));
        }

        public Builder endpoints(@Nullable Output<List<EndpointPropertiesArgs>> endpoints) {
            $.endpoints = endpoints;
            return this;
        }

        public Builder endpoints(List<EndpointPropertiesArgs> endpoints) {
            return endpoints(Output.of(endpoints));
        }

        public Builder endpoints(EndpointPropertiesArgs... endpoints) {
            return endpoints(List.of(endpoints));
        }

        public Builder entrypoint(@Nullable Output<String> entrypoint) {
            $.entrypoint = entrypoint;
            return this;
        }

        public Builder entrypoint(String entrypoint) {
            return entrypoint(Output.of(entrypoint));
        }

        public Builder environmentVariables(@Nullable Output<List<EnvironmentVariableArgs>> environmentVariables) {
            $.environmentVariables = environmentVariables;
            return this;
        }

        public Builder environmentVariables(List<EnvironmentVariableArgs> environmentVariables) {
            return environmentVariables(Output.of(environmentVariables));
        }

        public Builder environmentVariables(EnvironmentVariableArgs... environmentVariables) {
            return environmentVariables(List.of(environmentVariables));
        }

        public Builder image(Output<String> image) {
            $.image = image;
            return this;
        }

        public Builder image(String image) {
            return image(Output.of(image));
        }

        public Builder imageRegistryCredential(@Nullable Output<ImageRegistryCredentialArgs> imageRegistryCredential) {
            $.imageRegistryCredential = imageRegistryCredential;
            return this;
        }

        public Builder imageRegistryCredential(ImageRegistryCredentialArgs imageRegistryCredential) {
            return imageRegistryCredential(Output.of(imageRegistryCredential));
        }

        public Builder labels(@Nullable Output<List<ContainerLabelArgs>> labels) {
            $.labels = labels;
            return this;
        }

        public Builder labels(List<ContainerLabelArgs> labels) {
            return labels(Output.of(labels));
        }

        public Builder labels(ContainerLabelArgs... labels) {
            return labels(List.of(labels));
        }

        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder reliableCollectionsRefs(@Nullable Output<List<ReliableCollectionsRefArgs>> reliableCollectionsRefs) {
            $.reliableCollectionsRefs = reliableCollectionsRefs;
            return this;
        }

        public Builder reliableCollectionsRefs(List<ReliableCollectionsRefArgs> reliableCollectionsRefs) {
            return reliableCollectionsRefs(Output.of(reliableCollectionsRefs));
        }

        public Builder reliableCollectionsRefs(ReliableCollectionsRefArgs... reliableCollectionsRefs) {
            return reliableCollectionsRefs(List.of(reliableCollectionsRefs));
        }

        public Builder resources(Output<ResourceRequirementsArgs> resources) {
            $.resources = resources;
            return this;
        }

        public Builder resources(ResourceRequirementsArgs resources) {
            return resources(Output.of(resources));
        }

        public Builder settings(@Nullable Output<List<SettingArgs>> settings) {
            $.settings = settings;
            return this;
        }

        public Builder settings(List<SettingArgs> settings) {
            return settings(Output.of(settings));
        }

        public Builder settings(SettingArgs... settings) {
            return settings(List.of(settings));
        }

        public Builder volumeRefs(@Nullable Output<List<VolumeReferenceArgs>> volumeRefs) {
            $.volumeRefs = volumeRefs;
            return this;
        }

        public Builder volumeRefs(List<VolumeReferenceArgs> volumeRefs) {
            return volumeRefs(Output.of(volumeRefs));
        }

        public Builder volumeRefs(VolumeReferenceArgs... volumeRefs) {
            return volumeRefs(List.of(volumeRefs));
        }

        public Builder volumes(@Nullable Output<List<ApplicationScopedVolumeArgs>> volumes) {
            $.volumes = volumes;
            return this;
        }

        public Builder volumes(List<ApplicationScopedVolumeArgs> volumes) {
            return volumes(Output.of(volumes));
        }

        public Builder volumes(ApplicationScopedVolumeArgs... volumes) {
            return volumes(List.of(volumes));
        }

        public ContainerCodePackagePropertiesArgs build() {
            $.image = Objects.requireNonNull($.image, "expected parameter 'image' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.resources = Objects.requireNonNull($.resources, "expected parameter 'resources' to be non-null");
            return $;
        }
    }

}
