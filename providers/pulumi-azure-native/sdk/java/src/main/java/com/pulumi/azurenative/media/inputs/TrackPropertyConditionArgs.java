// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.media.inputs;

import com.pulumi.azurenative.media.enums.TrackPropertyCompareOperation;
import com.pulumi.azurenative.media.enums.TrackPropertyType;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Class to specify one track property condition
 * 
 */
public final class TrackPropertyConditionArgs extends com.pulumi.resources.ResourceArgs {

    public static final TrackPropertyConditionArgs Empty = new TrackPropertyConditionArgs();

    /**
     * Track property condition operation
     * 
     */
    @Import(name="operation", required=true)
    private Output<Either<String,TrackPropertyCompareOperation>> operation;

    /**
     * @return Track property condition operation
     * 
     */
    public Output<Either<String,TrackPropertyCompareOperation>> operation() {
        return this.operation;
    }

    /**
     * Track property type
     * 
     */
    @Import(name="property", required=true)
    private Output<Either<String,TrackPropertyType>> property;

    /**
     * @return Track property type
     * 
     */
    public Output<Either<String,TrackPropertyType>> property() {
        return this.property;
    }

    /**
     * Track property value
     * 
     */
    @Import(name="value")
    private @Nullable Output<String> value;

    /**
     * @return Track property value
     * 
     */
    public Optional<Output<String>> value() {
        return Optional.ofNullable(this.value);
    }

    private TrackPropertyConditionArgs() {}

    private TrackPropertyConditionArgs(TrackPropertyConditionArgs $) {
        this.operation = $.operation;
        this.property = $.property;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TrackPropertyConditionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TrackPropertyConditionArgs $;

        public Builder() {
            $ = new TrackPropertyConditionArgs();
        }

        public Builder(TrackPropertyConditionArgs defaults) {
            $ = new TrackPropertyConditionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param operation Track property condition operation
         * 
         * @return builder
         * 
         */
        public Builder operation(Output<Either<String,TrackPropertyCompareOperation>> operation) {
            $.operation = operation;
            return this;
        }

        /**
         * @param operation Track property condition operation
         * 
         * @return builder
         * 
         */
        public Builder operation(Either<String,TrackPropertyCompareOperation> operation) {
            return operation(Output.of(operation));
        }

        /**
         * @param operation Track property condition operation
         * 
         * @return builder
         * 
         */
        public Builder operation(String operation) {
            return operation(Either.ofLeft(operation));
        }

        /**
         * @param operation Track property condition operation
         * 
         * @return builder
         * 
         */
        public Builder operation(TrackPropertyCompareOperation operation) {
            return operation(Either.ofRight(operation));
        }

        /**
         * @param property Track property type
         * 
         * @return builder
         * 
         */
        public Builder property(Output<Either<String,TrackPropertyType>> property) {
            $.property = property;
            return this;
        }

        /**
         * @param property Track property type
         * 
         * @return builder
         * 
         */
        public Builder property(Either<String,TrackPropertyType> property) {
            return property(Output.of(property));
        }

        /**
         * @param property Track property type
         * 
         * @return builder
         * 
         */
        public Builder property(String property) {
            return property(Either.ofLeft(property));
        }

        /**
         * @param property Track property type
         * 
         * @return builder
         * 
         */
        public Builder property(TrackPropertyType property) {
            return property(Either.ofRight(property));
        }

        /**
         * @param value Track property value
         * 
         * @return builder
         * 
         */
        public Builder value(@Nullable Output<String> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value Track property value
         * 
         * @return builder
         * 
         */
        public Builder value(String value) {
            return value(Output.of(value));
        }

        public TrackPropertyConditionArgs build() {
            $.operation = Objects.requireNonNull($.operation, "expected parameter 'operation' to be non-null");
            $.property = Objects.requireNonNull($.property, "expected parameter 'property' to be non-null");
            return $;
        }
    }

}
