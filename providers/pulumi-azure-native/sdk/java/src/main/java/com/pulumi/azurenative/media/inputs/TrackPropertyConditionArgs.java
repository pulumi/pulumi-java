// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.media.inputs;

import com.pulumi.azurenative.media.enums.TrackPropertyCompareOperation;
import com.pulumi.azurenative.media.enums.TrackPropertyType;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Class to specify one track property condition
 * 
 */
public final class TrackPropertyConditionArgs extends com.pulumi.resources.ResourceArgs {

    public static final TrackPropertyConditionArgs Empty = new TrackPropertyConditionArgs();

    /**
     * Track property condition operation
     * 
     */
    @Import(name="operation", required=true)
      private final Output<Either<String,TrackPropertyCompareOperation>> operation;

    public Output<Either<String,TrackPropertyCompareOperation>> operation() {
        return this.operation;
    }

    /**
     * Track property type
     * 
     */
    @Import(name="property", required=true)
      private final Output<Either<String,TrackPropertyType>> property;

    public Output<Either<String,TrackPropertyType>> property() {
        return this.property;
    }

    /**
     * Track property value
     * 
     */
    @Import(name="value")
      private final @Nullable Output<String> value;

    public Output<String> value() {
        return this.value == null ? Codegen.empty() : this.value;
    }

    public TrackPropertyConditionArgs(
        Output<Either<String,TrackPropertyCompareOperation>> operation,
        Output<Either<String,TrackPropertyType>> property,
        @Nullable Output<String> value) {
        this.operation = Objects.requireNonNull(operation, "expected parameter 'operation' to be non-null");
        this.property = Objects.requireNonNull(property, "expected parameter 'property' to be non-null");
        this.value = value;
    }

    private TrackPropertyConditionArgs() {
        this.operation = Codegen.empty();
        this.property = Codegen.empty();
        this.value = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TrackPropertyConditionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<Either<String,TrackPropertyCompareOperation>> operation;
        private Output<Either<String,TrackPropertyType>> property;
        private @Nullable Output<String> value;

        public Builder() {
    	      // Empty
        }

        public Builder(TrackPropertyConditionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.operation = defaults.operation;
    	      this.property = defaults.property;
    	      this.value = defaults.value;
        }

        public Builder operation(Output<Either<String,TrackPropertyCompareOperation>> operation) {
            this.operation = Objects.requireNonNull(operation);
            return this;
        }
        public Builder operation(Either<String,TrackPropertyCompareOperation> operation) {
            this.operation = Output.of(Objects.requireNonNull(operation));
            return this;
        }
        public Builder property(Output<Either<String,TrackPropertyType>> property) {
            this.property = Objects.requireNonNull(property);
            return this;
        }
        public Builder property(Either<String,TrackPropertyType> property) {
            this.property = Output.of(Objects.requireNonNull(property));
            return this;
        }
        public Builder value(@Nullable Output<String> value) {
            this.value = value;
            return this;
        }
        public Builder value(@Nullable String value) {
            this.value = Codegen.ofNullable(value);
            return this;
        }        public TrackPropertyConditionArgs build() {
            return new TrackPropertyConditionArgs(operation, property, value);
        }
    }
}
