// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.notificationhubs.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * SharedAccessAuthorizationRule properties.
 * 
 */
public final class SharedAccessAuthorizationRulePropertiesResponse extends com.pulumi.resources.InvokeArgs {

    public static final SharedAccessAuthorizationRulePropertiesResponse Empty = new SharedAccessAuthorizationRulePropertiesResponse();

    /**
     * A string that describes the claim type
     * 
     */
    @Import(name="claimType", required=true)
    private String claimType;

    /**
     * @return A string that describes the claim type
     * 
     */
    public String claimType() {
        return this.claimType;
    }

    /**
     * A string that describes the claim value
     * 
     */
    @Import(name="claimValue", required=true)
    private String claimValue;

    /**
     * @return A string that describes the claim value
     * 
     */
    public String claimValue() {
        return this.claimValue;
    }

    /**
     * The created time for this rule
     * 
     */
    @Import(name="createdTime", required=true)
    private String createdTime;

    /**
     * @return The created time for this rule
     * 
     */
    public String createdTime() {
        return this.createdTime;
    }

    /**
     * A string that describes the authorization rule.
     * 
     */
    @Import(name="keyName", required=true)
    private String keyName;

    /**
     * @return A string that describes the authorization rule.
     * 
     */
    public String keyName() {
        return this.keyName;
    }

    /**
     * The last modified time for this rule
     * 
     */
    @Import(name="modifiedTime", required=true)
    private String modifiedTime;

    /**
     * @return The last modified time for this rule
     * 
     */
    public String modifiedTime() {
        return this.modifiedTime;
    }

    /**
     * A base64-encoded 256-bit primary key for signing and validating the SAS token.
     * 
     */
    @Import(name="primaryKey", required=true)
    private String primaryKey;

    /**
     * @return A base64-encoded 256-bit primary key for signing and validating the SAS token.
     * 
     */
    public String primaryKey() {
        return this.primaryKey;
    }

    /**
     * The revision number for the rule
     * 
     */
    @Import(name="revision", required=true)
    private Integer revision;

    /**
     * @return The revision number for the rule
     * 
     */
    public Integer revision() {
        return this.revision;
    }

    /**
     * The rights associated with the rule.
     * 
     */
    @Import(name="rights")
    private @Nullable List<String> rights;

    /**
     * @return The rights associated with the rule.
     * 
     */
    public Optional<List<String>> rights() {
        return Optional.ofNullable(this.rights);
    }

    /**
     * A base64-encoded 256-bit primary key for signing and validating the SAS token.
     * 
     */
    @Import(name="secondaryKey", required=true)
    private String secondaryKey;

    /**
     * @return A base64-encoded 256-bit primary key for signing and validating the SAS token.
     * 
     */
    public String secondaryKey() {
        return this.secondaryKey;
    }

    private SharedAccessAuthorizationRulePropertiesResponse() {}

    private SharedAccessAuthorizationRulePropertiesResponse(SharedAccessAuthorizationRulePropertiesResponse $) {
        this.claimType = $.claimType;
        this.claimValue = $.claimValue;
        this.createdTime = $.createdTime;
        this.keyName = $.keyName;
        this.modifiedTime = $.modifiedTime;
        this.primaryKey = $.primaryKey;
        this.revision = $.revision;
        this.rights = $.rights;
        this.secondaryKey = $.secondaryKey;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SharedAccessAuthorizationRulePropertiesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SharedAccessAuthorizationRulePropertiesResponse $;

        public Builder() {
            $ = new SharedAccessAuthorizationRulePropertiesResponse();
        }

        public Builder(SharedAccessAuthorizationRulePropertiesResponse defaults) {
            $ = new SharedAccessAuthorizationRulePropertiesResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param claimType A string that describes the claim type
         * 
         * @return builder
         * 
         */
        public Builder claimType(String claimType) {
            $.claimType = claimType;
            return this;
        }

        /**
         * @param claimValue A string that describes the claim value
         * 
         * @return builder
         * 
         */
        public Builder claimValue(String claimValue) {
            $.claimValue = claimValue;
            return this;
        }

        /**
         * @param createdTime The created time for this rule
         * 
         * @return builder
         * 
         */
        public Builder createdTime(String createdTime) {
            $.createdTime = createdTime;
            return this;
        }

        /**
         * @param keyName A string that describes the authorization rule.
         * 
         * @return builder
         * 
         */
        public Builder keyName(String keyName) {
            $.keyName = keyName;
            return this;
        }

        /**
         * @param modifiedTime The last modified time for this rule
         * 
         * @return builder
         * 
         */
        public Builder modifiedTime(String modifiedTime) {
            $.modifiedTime = modifiedTime;
            return this;
        }

        /**
         * @param primaryKey A base64-encoded 256-bit primary key for signing and validating the SAS token.
         * 
         * @return builder
         * 
         */
        public Builder primaryKey(String primaryKey) {
            $.primaryKey = primaryKey;
            return this;
        }

        /**
         * @param revision The revision number for the rule
         * 
         * @return builder
         * 
         */
        public Builder revision(Integer revision) {
            $.revision = revision;
            return this;
        }

        /**
         * @param rights The rights associated with the rule.
         * 
         * @return builder
         * 
         */
        public Builder rights(@Nullable List<String> rights) {
            $.rights = rights;
            return this;
        }

        /**
         * @param rights The rights associated with the rule.
         * 
         * @return builder
         * 
         */
        public Builder rights(String... rights) {
            return rights(List.of(rights));
        }

        /**
         * @param secondaryKey A base64-encoded 256-bit primary key for signing and validating the SAS token.
         * 
         * @return builder
         * 
         */
        public Builder secondaryKey(String secondaryKey) {
            $.secondaryKey = secondaryKey;
            return this;
        }

        public SharedAccessAuthorizationRulePropertiesResponse build() {
            $.claimType = Objects.requireNonNull($.claimType, "expected parameter 'claimType' to be non-null");
            $.claimValue = Objects.requireNonNull($.claimValue, "expected parameter 'claimValue' to be non-null");
            $.createdTime = Objects.requireNonNull($.createdTime, "expected parameter 'createdTime' to be non-null");
            $.keyName = Objects.requireNonNull($.keyName, "expected parameter 'keyName' to be non-null");
            $.modifiedTime = Objects.requireNonNull($.modifiedTime, "expected parameter 'modifiedTime' to be non-null");
            $.primaryKey = Objects.requireNonNull($.primaryKey, "expected parameter 'primaryKey' to be non-null");
            $.revision = Objects.requireNonNull($.revision, "expected parameter 'revision' to be non-null");
            $.secondaryKey = Objects.requireNonNull($.secondaryKey, "expected parameter 'secondaryKey' to be non-null");
            return $;
        }
    }

}
