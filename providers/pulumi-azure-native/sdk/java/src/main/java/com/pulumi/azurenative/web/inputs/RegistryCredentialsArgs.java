// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.web.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Container App Private Registry
 * 
 */
public final class RegistryCredentialsArgs extends com.pulumi.resources.ResourceArgs {

    public static final RegistryCredentialsArgs Empty = new RegistryCredentialsArgs();

    /**
     * The name of the Secret that contains the registry login password
     * 
     */
    @Import(name="passwordSecretRef")
    private @Nullable Output<String> passwordSecretRef;

    /**
     * @return The name of the Secret that contains the registry login password
     * 
     */
    public Optional<Output<String>> passwordSecretRef() {
        return Optional.ofNullable(this.passwordSecretRef);
    }

    /**
     * Container Registry Server
     * 
     */
    @Import(name="server")
    private @Nullable Output<String> server;

    /**
     * @return Container Registry Server
     * 
     */
    public Optional<Output<String>> server() {
        return Optional.ofNullable(this.server);
    }

    /**
     * Container Registry Username
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return Container Registry Username
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    private RegistryCredentialsArgs() {}

    private RegistryCredentialsArgs(RegistryCredentialsArgs $) {
        this.passwordSecretRef = $.passwordSecretRef;
        this.server = $.server;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RegistryCredentialsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RegistryCredentialsArgs $;

        public Builder() {
            $ = new RegistryCredentialsArgs();
        }

        public Builder(RegistryCredentialsArgs defaults) {
            $ = new RegistryCredentialsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param passwordSecretRef The name of the Secret that contains the registry login password
         * 
         * @return builder
         * 
         */
        public Builder passwordSecretRef(@Nullable Output<String> passwordSecretRef) {
            $.passwordSecretRef = passwordSecretRef;
            return this;
        }

        /**
         * @param passwordSecretRef The name of the Secret that contains the registry login password
         * 
         * @return builder
         * 
         */
        public Builder passwordSecretRef(String passwordSecretRef) {
            return passwordSecretRef(Output.of(passwordSecretRef));
        }

        /**
         * @param server Container Registry Server
         * 
         * @return builder
         * 
         */
        public Builder server(@Nullable Output<String> server) {
            $.server = server;
            return this;
        }

        /**
         * @param server Container Registry Server
         * 
         * @return builder
         * 
         */
        public Builder server(String server) {
            return server(Output.of(server));
        }

        /**
         * @param username Container Registry Username
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username Container Registry Username
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public RegistryCredentialsArgs build() {
            return $;
        }
    }

}
