// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datamigration.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class CopyProgressDetailsResponse {
    /**
     * @return Copy Duration in seconds
     * 
     */
    private final Integer copyDuration;
    /**
     * @return Copy Start
     * 
     */
    private final String copyStart;
    /**
     * @return Copy throughput in KBps
     * 
     */
    private final Double copyThroughput;
    /**
     * @return Bytes read
     * 
     */
    private final Double dataRead;
    /**
     * @return Bytes written
     * 
     */
    private final Double dataWritten;
    /**
     * @return Type of parallel copy (Dynamic range, Physical partition, none).
     * 
     */
    private final String parallelCopyType;
    /**
     * @return Rows Copied
     * 
     */
    private final Double rowsCopied;
    /**
     * @return Rows read
     * 
     */
    private final Double rowsRead;
    /**
     * @return Status of the Copy activity (InProgress, Succeeded, Failed, Canceled).
     * 
     */
    private final String status;
    /**
     * @return Table Name
     * 
     */
    private final String tableName;
    /**
     * @return The degree of parallelization.
     * 
     */
    private final Integer usedParallelCopies;

    @CustomType.Constructor
    private CopyProgressDetailsResponse(
        @CustomType.Parameter("copyDuration") Integer copyDuration,
        @CustomType.Parameter("copyStart") String copyStart,
        @CustomType.Parameter("copyThroughput") Double copyThroughput,
        @CustomType.Parameter("dataRead") Double dataRead,
        @CustomType.Parameter("dataWritten") Double dataWritten,
        @CustomType.Parameter("parallelCopyType") String parallelCopyType,
        @CustomType.Parameter("rowsCopied") Double rowsCopied,
        @CustomType.Parameter("rowsRead") Double rowsRead,
        @CustomType.Parameter("status") String status,
        @CustomType.Parameter("tableName") String tableName,
        @CustomType.Parameter("usedParallelCopies") Integer usedParallelCopies) {
        this.copyDuration = copyDuration;
        this.copyStart = copyStart;
        this.copyThroughput = copyThroughput;
        this.dataRead = dataRead;
        this.dataWritten = dataWritten;
        this.parallelCopyType = parallelCopyType;
        this.rowsCopied = rowsCopied;
        this.rowsRead = rowsRead;
        this.status = status;
        this.tableName = tableName;
        this.usedParallelCopies = usedParallelCopies;
    }

    /**
     * @return Copy Duration in seconds
     * 
     */
    public Integer copyDuration() {
        return this.copyDuration;
    }
    /**
     * @return Copy Start
     * 
     */
    public String copyStart() {
        return this.copyStart;
    }
    /**
     * @return Copy throughput in KBps
     * 
     */
    public Double copyThroughput() {
        return this.copyThroughput;
    }
    /**
     * @return Bytes read
     * 
     */
    public Double dataRead() {
        return this.dataRead;
    }
    /**
     * @return Bytes written
     * 
     */
    public Double dataWritten() {
        return this.dataWritten;
    }
    /**
     * @return Type of parallel copy (Dynamic range, Physical partition, none).
     * 
     */
    public String parallelCopyType() {
        return this.parallelCopyType;
    }
    /**
     * @return Rows Copied
     * 
     */
    public Double rowsCopied() {
        return this.rowsCopied;
    }
    /**
     * @return Rows read
     * 
     */
    public Double rowsRead() {
        return this.rowsRead;
    }
    /**
     * @return Status of the Copy activity (InProgress, Succeeded, Failed, Canceled).
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return Table Name
     * 
     */
    public String tableName() {
        return this.tableName;
    }
    /**
     * @return The degree of parallelization.
     * 
     */
    public Integer usedParallelCopies() {
        return this.usedParallelCopies;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CopyProgressDetailsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Integer copyDuration;
        private String copyStart;
        private Double copyThroughput;
        private Double dataRead;
        private Double dataWritten;
        private String parallelCopyType;
        private Double rowsCopied;
        private Double rowsRead;
        private String status;
        private String tableName;
        private Integer usedParallelCopies;

        public Builder() {
    	      // Empty
        }

        public Builder(CopyProgressDetailsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.copyDuration = defaults.copyDuration;
    	      this.copyStart = defaults.copyStart;
    	      this.copyThroughput = defaults.copyThroughput;
    	      this.dataRead = defaults.dataRead;
    	      this.dataWritten = defaults.dataWritten;
    	      this.parallelCopyType = defaults.parallelCopyType;
    	      this.rowsCopied = defaults.rowsCopied;
    	      this.rowsRead = defaults.rowsRead;
    	      this.status = defaults.status;
    	      this.tableName = defaults.tableName;
    	      this.usedParallelCopies = defaults.usedParallelCopies;
        }

        public Builder copyDuration(Integer copyDuration) {
            this.copyDuration = Objects.requireNonNull(copyDuration);
            return this;
        }
        public Builder copyStart(String copyStart) {
            this.copyStart = Objects.requireNonNull(copyStart);
            return this;
        }
        public Builder copyThroughput(Double copyThroughput) {
            this.copyThroughput = Objects.requireNonNull(copyThroughput);
            return this;
        }
        public Builder dataRead(Double dataRead) {
            this.dataRead = Objects.requireNonNull(dataRead);
            return this;
        }
        public Builder dataWritten(Double dataWritten) {
            this.dataWritten = Objects.requireNonNull(dataWritten);
            return this;
        }
        public Builder parallelCopyType(String parallelCopyType) {
            this.parallelCopyType = Objects.requireNonNull(parallelCopyType);
            return this;
        }
        public Builder rowsCopied(Double rowsCopied) {
            this.rowsCopied = Objects.requireNonNull(rowsCopied);
            return this;
        }
        public Builder rowsRead(Double rowsRead) {
            this.rowsRead = Objects.requireNonNull(rowsRead);
            return this;
        }
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        public Builder tableName(String tableName) {
            this.tableName = Objects.requireNonNull(tableName);
            return this;
        }
        public Builder usedParallelCopies(Integer usedParallelCopies) {
            this.usedParallelCopies = Objects.requireNonNull(usedParallelCopies);
            return this;
        }        public CopyProgressDetailsResponse build() {
            return new CopyProgressDetailsResponse(copyDuration, copyStart, copyThroughput, dataRead, dataWritten, parallelCopyType, rowsCopied, rowsRead, status, tableName, usedParallelCopies);
        }
    }
}
