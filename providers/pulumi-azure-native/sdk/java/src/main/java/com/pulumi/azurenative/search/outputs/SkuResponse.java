// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.search.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SkuResponse {
    /**
     * @return The SKU of the search service. Valid values include: &#39;free&#39;: Shared service. &#39;basic&#39;: Dedicated service with up to 3 replicas. &#39;standard&#39;: Dedicated service with up to 12 partitions and 12 replicas. &#39;standard2&#39;: Similar to standard, but with more capacity per search unit. &#39;standard3&#39;: The largest Standard offering with up to 12 partitions and 12 replicas (or up to 3 partitions with more indexes if you also set the hostingMode property to &#39;highDensity&#39;). &#39;storage_optimized_l1&#39;: Supports 1TB per partition, up to 12 partitions. &#39;storage_optimized_l2&#39;: Supports 2TB per partition, up to 12 partitions.&#39;
     * 
     */
    private final @Nullable String name;

    @CustomType.Constructor
    private SkuResponse(@CustomType.Parameter("name") @Nullable String name) {
        this.name = name;
    }

    /**
     * @return The SKU of the search service. Valid values include: &#39;free&#39;: Shared service. &#39;basic&#39;: Dedicated service with up to 3 replicas. &#39;standard&#39;: Dedicated service with up to 12 partitions and 12 replicas. &#39;standard2&#39;: Similar to standard, but with more capacity per search unit. &#39;standard3&#39;: The largest Standard offering with up to 12 partitions and 12 replicas (or up to 3 partitions with more indexes if you also set the hostingMode property to &#39;highDensity&#39;). &#39;storage_optimized_l1&#39;: Supports 1TB per partition, up to 12 partitions. &#39;storage_optimized_l2&#39;: Supports 2TB per partition, up to 12 partitions.&#39;
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SkuResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String name;

        public Builder() {
    	      // Empty
        }

        public Builder(SkuResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.name = defaults.name;
        }

        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }        public SkuResponse build() {
            return new SkuResponse(name);
        }
    }
}
