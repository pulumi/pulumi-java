// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.sql.inputs;

import com.pulumi.azurenative.sql.enums.JobStepOutputType;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The output configuration of a job step.
 * 
 */
public final class JobStepOutputArgs extends com.pulumi.resources.ResourceArgs {

    public static final JobStepOutputArgs Empty = new JobStepOutputArgs();

    /**
     * The resource ID of the credential to use to connect to the output destination.
     * 
     */
    @Import(name="credential", required=true)
    private Output<String> credential;

    public Output<String> credential() {
        return this.credential;
    }

    /**
     * The output destination database.
     * 
     */
    @Import(name="databaseName", required=true)
    private Output<String> databaseName;

    public Output<String> databaseName() {
        return this.databaseName;
    }

    /**
     * The output destination resource group.
     * 
     */
    @Import(name="resourceGroupName")
    private @Nullable Output<String> resourceGroupName;

    public Optional<Output<String>> resourceGroupName() {
        return Optional.ofNullable(this.resourceGroupName);
    }

    /**
     * The output destination schema.
     * 
     */
    @Import(name="schemaName")
    private @Nullable Output<String> schemaName;

    public Optional<Output<String>> schemaName() {
        return Optional.ofNullable(this.schemaName);
    }

    /**
     * The output destination server name.
     * 
     */
    @Import(name="serverName", required=true)
    private Output<String> serverName;

    public Output<String> serverName() {
        return this.serverName;
    }

    /**
     * The output destination subscription id.
     * 
     */
    @Import(name="subscriptionId")
    private @Nullable Output<String> subscriptionId;

    public Optional<Output<String>> subscriptionId() {
        return Optional.ofNullable(this.subscriptionId);
    }

    /**
     * The output destination table.
     * 
     */
    @Import(name="tableName", required=true)
    private Output<String> tableName;

    public Output<String> tableName() {
        return this.tableName;
    }

    /**
     * The output destination type.
     * 
     */
    @Import(name="type")
    private @Nullable Output<Either<String,JobStepOutputType>> type;

    public Optional<Output<Either<String,JobStepOutputType>>> type() {
        return Optional.ofNullable(this.type);
    }

    private JobStepOutputArgs() {}

    private JobStepOutputArgs(JobStepOutputArgs $) {
        this.credential = $.credential;
        this.databaseName = $.databaseName;
        this.resourceGroupName = $.resourceGroupName;
        this.schemaName = $.schemaName;
        this.serverName = $.serverName;
        this.subscriptionId = $.subscriptionId;
        this.tableName = $.tableName;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(JobStepOutputArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private JobStepOutputArgs $;

        public Builder() {
            $ = new JobStepOutputArgs();
        }

        public Builder(JobStepOutputArgs defaults) {
            $ = new JobStepOutputArgs(Objects.requireNonNull(defaults));
        }

        public Builder credential(Output<String> credential) {
            $.credential = credential;
            return this;
        }

        public Builder credential(String credential) {
            return credential(Output.of(credential));
        }

        public Builder databaseName(Output<String> databaseName) {
            $.databaseName = databaseName;
            return this;
        }

        public Builder databaseName(String databaseName) {
            return databaseName(Output.of(databaseName));
        }

        public Builder resourceGroupName(@Nullable Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder schemaName(@Nullable Output<String> schemaName) {
            $.schemaName = schemaName;
            return this;
        }

        public Builder schemaName(String schemaName) {
            return schemaName(Output.of(schemaName));
        }

        public Builder serverName(Output<String> serverName) {
            $.serverName = serverName;
            return this;
        }

        public Builder serverName(String serverName) {
            return serverName(Output.of(serverName));
        }

        public Builder subscriptionId(@Nullable Output<String> subscriptionId) {
            $.subscriptionId = subscriptionId;
            return this;
        }

        public Builder subscriptionId(String subscriptionId) {
            return subscriptionId(Output.of(subscriptionId));
        }

        public Builder tableName(Output<String> tableName) {
            $.tableName = tableName;
            return this;
        }

        public Builder tableName(String tableName) {
            return tableName(Output.of(tableName));
        }

        public Builder type(@Nullable Output<Either<String,JobStepOutputType>> type) {
            $.type = type;
            return this;
        }

        public Builder type(Either<String,JobStepOutputType> type) {
            return type(Output.of(type));
        }

        public JobStepOutputArgs build() {
            $.credential = Objects.requireNonNull($.credential, "expected parameter 'credential' to be non-null");
            $.databaseName = Objects.requireNonNull($.databaseName, "expected parameter 'databaseName' to be non-null");
            $.schemaName = Codegen.stringProp("schemaName").output().arg($.schemaName).def("dbo").getNullable();
            $.serverName = Objects.requireNonNull($.serverName, "expected parameter 'serverName' to be non-null");
            $.tableName = Objects.requireNonNull($.tableName, "expected parameter 'tableName' to be non-null");
            $.type = Codegen.stringProp("type").left(JobStepOutputType.class).output().arg($.type).def("SqlDatabase").getNullable();
            return $;
        }
    }

}
