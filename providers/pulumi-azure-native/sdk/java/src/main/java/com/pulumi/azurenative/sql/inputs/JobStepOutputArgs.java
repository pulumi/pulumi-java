// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.sql.inputs;

import com.pulumi.azurenative.sql.enums.JobStepOutputType;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The output configuration of a job step.
 * 
 */
public final class JobStepOutputArgs extends com.pulumi.resources.ResourceArgs {

    public static final JobStepOutputArgs Empty = new JobStepOutputArgs();

    /**
     * The resource ID of the credential to use to connect to the output destination.
     * 
     */
    @Import(name="credential", required=true)
      private final Output<String> credential;

    public Output<String> credential() {
        return this.credential;
    }

    /**
     * The output destination database.
     * 
     */
    @Import(name="databaseName", required=true)
      private final Output<String> databaseName;

    public Output<String> databaseName() {
        return this.databaseName;
    }

    /**
     * The output destination resource group.
     * 
     */
    @Import(name="resourceGroupName")
      private final @Nullable Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName == null ? Codegen.empty() : this.resourceGroupName;
    }

    /**
     * The output destination schema.
     * 
     */
    @Import(name="schemaName")
      private final @Nullable Output<String> schemaName;

    public Output<String> schemaName() {
        return this.schemaName == null ? Codegen.empty() : this.schemaName;
    }

    /**
     * The output destination server name.
     * 
     */
    @Import(name="serverName", required=true)
      private final Output<String> serverName;

    public Output<String> serverName() {
        return this.serverName;
    }

    /**
     * The output destination subscription id.
     * 
     */
    @Import(name="subscriptionId")
      private final @Nullable Output<String> subscriptionId;

    public Output<String> subscriptionId() {
        return this.subscriptionId == null ? Codegen.empty() : this.subscriptionId;
    }

    /**
     * The output destination table.
     * 
     */
    @Import(name="tableName", required=true)
      private final Output<String> tableName;

    public Output<String> tableName() {
        return this.tableName;
    }

    /**
     * The output destination type.
     * 
     */
    @Import(name="type")
      private final @Nullable Output<Either<String,JobStepOutputType>> type;

    public Output<Either<String,JobStepOutputType>> type() {
        return this.type == null ? Codegen.empty() : this.type;
    }

    public JobStepOutputArgs(
        Output<String> credential,
        Output<String> databaseName,
        @Nullable Output<String> resourceGroupName,
        @Nullable Output<String> schemaName,
        Output<String> serverName,
        @Nullable Output<String> subscriptionId,
        Output<String> tableName,
        @Nullable Output<Either<String,JobStepOutputType>> type) {
        this.credential = Objects.requireNonNull(credential, "expected parameter 'credential' to be non-null");
        this.databaseName = Objects.requireNonNull(databaseName, "expected parameter 'databaseName' to be non-null");
        this.resourceGroupName = resourceGroupName;
        this.schemaName = Codegen.stringProp("schemaName").output().arg(schemaName).def("dbo").getNullable();
        this.serverName = Objects.requireNonNull(serverName, "expected parameter 'serverName' to be non-null");
        this.subscriptionId = subscriptionId;
        this.tableName = Objects.requireNonNull(tableName, "expected parameter 'tableName' to be non-null");
        this.type = Codegen.stringProp("type").left(JobStepOutputType.class).output().arg(type).def("SqlDatabase").getNullable();
    }

    private JobStepOutputArgs() {
        this.credential = Codegen.empty();
        this.databaseName = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.schemaName = Codegen.empty();
        this.serverName = Codegen.empty();
        this.subscriptionId = Codegen.empty();
        this.tableName = Codegen.empty();
        this.type = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(JobStepOutputArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> credential;
        private Output<String> databaseName;
        private @Nullable Output<String> resourceGroupName;
        private @Nullable Output<String> schemaName;
        private Output<String> serverName;
        private @Nullable Output<String> subscriptionId;
        private Output<String> tableName;
        private @Nullable Output<Either<String,JobStepOutputType>> type;

        public Builder() {
    	      // Empty
        }

        public Builder(JobStepOutputArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.credential = defaults.credential;
    	      this.databaseName = defaults.databaseName;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.schemaName = defaults.schemaName;
    	      this.serverName = defaults.serverName;
    	      this.subscriptionId = defaults.subscriptionId;
    	      this.tableName = defaults.tableName;
    	      this.type = defaults.type;
        }

        public Builder credential(Output<String> credential) {
            this.credential = Objects.requireNonNull(credential);
            return this;
        }
        public Builder credential(String credential) {
            this.credential = Output.of(Objects.requireNonNull(credential));
            return this;
        }
        public Builder databaseName(Output<String> databaseName) {
            this.databaseName = Objects.requireNonNull(databaseName);
            return this;
        }
        public Builder databaseName(String databaseName) {
            this.databaseName = Output.of(Objects.requireNonNull(databaseName));
            return this;
        }
        public Builder resourceGroupName(@Nullable Output<String> resourceGroupName) {
            this.resourceGroupName = resourceGroupName;
            return this;
        }
        public Builder resourceGroupName(@Nullable String resourceGroupName) {
            this.resourceGroupName = Codegen.ofNullable(resourceGroupName);
            return this;
        }
        public Builder schemaName(@Nullable Output<String> schemaName) {
            this.schemaName = schemaName;
            return this;
        }
        public Builder schemaName(@Nullable String schemaName) {
            this.schemaName = Codegen.ofNullable(schemaName);
            return this;
        }
        public Builder serverName(Output<String> serverName) {
            this.serverName = Objects.requireNonNull(serverName);
            return this;
        }
        public Builder serverName(String serverName) {
            this.serverName = Output.of(Objects.requireNonNull(serverName));
            return this;
        }
        public Builder subscriptionId(@Nullable Output<String> subscriptionId) {
            this.subscriptionId = subscriptionId;
            return this;
        }
        public Builder subscriptionId(@Nullable String subscriptionId) {
            this.subscriptionId = Codegen.ofNullable(subscriptionId);
            return this;
        }
        public Builder tableName(Output<String> tableName) {
            this.tableName = Objects.requireNonNull(tableName);
            return this;
        }
        public Builder tableName(String tableName) {
            this.tableName = Output.of(Objects.requireNonNull(tableName));
            return this;
        }
        public Builder type(@Nullable Output<Either<String,JobStepOutputType>> type) {
            this.type = type;
            return this;
        }
        public Builder type(@Nullable Either<String,JobStepOutputType> type) {
            this.type = Codegen.ofNullable(type);
            return this;
        }        public JobStepOutputArgs build() {
            return new JobStepOutputArgs(credential, databaseName, resourceGroupName, schemaName, serverName, subscriptionId, tableName, type);
        }
    }
}
