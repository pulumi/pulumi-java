// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.recommendationsservice.inputs;

import com.pulumi.azurenative.recommendationsservice.enums.ModelingFeatures;
import com.pulumi.azurenative.recommendationsservice.enums.ModelingFrequency;
import com.pulumi.azurenative.recommendationsservice.enums.ModelingSize;
import com.pulumi.azurenative.recommendationsservice.inputs.ModelingInputDataArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Modeling resource properties.
 * 
 */
public final class ModelingResourcePropertiesArgs extends com.pulumi.resources.ResourceArgs {

    public static final ModelingResourcePropertiesArgs Empty = new ModelingResourcePropertiesArgs();

    /**
     * Modeling features controls the set of supported scenarios\models being computed. This can only be set at Modeling creation.
     * 
     */
    @Import(name="features")
    private @Nullable Output<Either<String,ModelingFeatures>> features;

    /**
     * @return Modeling features controls the set of supported scenarios\models being computed. This can only be set at Modeling creation.
     * 
     */
    public Optional<Output<Either<String,ModelingFeatures>>> features() {
        return Optional.ofNullable(this.features);
    }

    /**
     * Modeling frequency controls the modeling compute frequency.
     * 
     */
    @Import(name="frequency")
    private @Nullable Output<Either<String,ModelingFrequency>> frequency;

    /**
     * @return Modeling frequency controls the modeling compute frequency.
     * 
     */
    public Optional<Output<Either<String,ModelingFrequency>>> frequency() {
        return Optional.ofNullable(this.frequency);
    }

    /**
     * The configuration to raw CDM data to be used as Modeling resource input.
     * 
     */
    @Import(name="inputData")
    private @Nullable Output<ModelingInputDataArgs> inputData;

    /**
     * @return The configuration to raw CDM data to be used as Modeling resource input.
     * 
     */
    public Optional<Output<ModelingInputDataArgs>> inputData() {
        return Optional.ofNullable(this.inputData);
    }

    /**
     * Modeling size controls the maximum supported input data size.
     * 
     */
    @Import(name="size")
    private @Nullable Output<Either<String,ModelingSize>> size;

    /**
     * @return Modeling size controls the maximum supported input data size.
     * 
     */
    public Optional<Output<Either<String,ModelingSize>>> size() {
        return Optional.ofNullable(this.size);
    }

    private ModelingResourcePropertiesArgs() {}

    private ModelingResourcePropertiesArgs(ModelingResourcePropertiesArgs $) {
        this.features = $.features;
        this.frequency = $.frequency;
        this.inputData = $.inputData;
        this.size = $.size;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ModelingResourcePropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ModelingResourcePropertiesArgs $;

        public Builder() {
            $ = new ModelingResourcePropertiesArgs();
        }

        public Builder(ModelingResourcePropertiesArgs defaults) {
            $ = new ModelingResourcePropertiesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param features Modeling features controls the set of supported scenarios\models being computed. This can only be set at Modeling creation.
         * 
         * @return builder
         * 
         */
        public Builder features(@Nullable Output<Either<String,ModelingFeatures>> features) {
            $.features = features;
            return this;
        }

        /**
         * @param features Modeling features controls the set of supported scenarios\models being computed. This can only be set at Modeling creation.
         * 
         * @return builder
         * 
         */
        public Builder features(Either<String,ModelingFeatures> features) {
            return features(Output.of(features));
        }

        /**
         * @param features Modeling features controls the set of supported scenarios\models being computed. This can only be set at Modeling creation.
         * 
         * @return builder
         * 
         */
        public Builder features(String features) {
            return features(Either.ofLeft(features));
        }

        /**
         * @param features Modeling features controls the set of supported scenarios\models being computed. This can only be set at Modeling creation.
         * 
         * @return builder
         * 
         */
        public Builder features(ModelingFeatures features) {
            return features(Either.ofRight(features));
        }

        /**
         * @param frequency Modeling frequency controls the modeling compute frequency.
         * 
         * @return builder
         * 
         */
        public Builder frequency(@Nullable Output<Either<String,ModelingFrequency>> frequency) {
            $.frequency = frequency;
            return this;
        }

        /**
         * @param frequency Modeling frequency controls the modeling compute frequency.
         * 
         * @return builder
         * 
         */
        public Builder frequency(Either<String,ModelingFrequency> frequency) {
            return frequency(Output.of(frequency));
        }

        /**
         * @param frequency Modeling frequency controls the modeling compute frequency.
         * 
         * @return builder
         * 
         */
        public Builder frequency(String frequency) {
            return frequency(Either.ofLeft(frequency));
        }

        /**
         * @param frequency Modeling frequency controls the modeling compute frequency.
         * 
         * @return builder
         * 
         */
        public Builder frequency(ModelingFrequency frequency) {
            return frequency(Either.ofRight(frequency));
        }

        /**
         * @param inputData The configuration to raw CDM data to be used as Modeling resource input.
         * 
         * @return builder
         * 
         */
        public Builder inputData(@Nullable Output<ModelingInputDataArgs> inputData) {
            $.inputData = inputData;
            return this;
        }

        /**
         * @param inputData The configuration to raw CDM data to be used as Modeling resource input.
         * 
         * @return builder
         * 
         */
        public Builder inputData(ModelingInputDataArgs inputData) {
            return inputData(Output.of(inputData));
        }

        /**
         * @param size Modeling size controls the maximum supported input data size.
         * 
         * @return builder
         * 
         */
        public Builder size(@Nullable Output<Either<String,ModelingSize>> size) {
            $.size = size;
            return this;
        }

        /**
         * @param size Modeling size controls the maximum supported input data size.
         * 
         * @return builder
         * 
         */
        public Builder size(Either<String,ModelingSize> size) {
            return size(Output.of(size));
        }

        /**
         * @param size Modeling size controls the maximum supported input data size.
         * 
         * @return builder
         * 
         */
        public Builder size(String size) {
            return size(Either.ofLeft(size));
        }

        /**
         * @param size Modeling size controls the maximum supported input data size.
         * 
         * @return builder
         * 
         */
        public Builder size(ModelingSize size) {
            return size(Either.ofRight(size));
        }

        public ModelingResourcePropertiesArgs build() {
            return $;
        }
    }

}
