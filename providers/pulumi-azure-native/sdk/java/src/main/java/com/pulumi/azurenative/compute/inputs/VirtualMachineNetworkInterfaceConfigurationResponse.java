// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.compute.inputs;

import com.pulumi.azurenative.compute.inputs.SubResourceResponse;
import com.pulumi.azurenative.compute.inputs.VirtualMachineNetworkInterfaceDnsSettingsConfigurationResponse;
import com.pulumi.azurenative.compute.inputs.VirtualMachineNetworkInterfaceIPConfigurationResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Describes a virtual machine network interface configurations.
 * 
 */
public final class VirtualMachineNetworkInterfaceConfigurationResponse extends com.pulumi.resources.InvokeArgs {

    public static final VirtualMachineNetworkInterfaceConfigurationResponse Empty = new VirtualMachineNetworkInterfaceConfigurationResponse();

    /**
     * Specify what happens to the network interface when the VM is deleted
     * 
     */
    @Import(name="deleteOption")
    private @Nullable String deleteOption;

    public Optional<String> deleteOption() {
        return Optional.ofNullable(this.deleteOption);
    }

    /**
     * The dns settings to be applied on the network interfaces.
     * 
     */
    @Import(name="dnsSettings")
    private @Nullable VirtualMachineNetworkInterfaceDnsSettingsConfigurationResponse dnsSettings;

    public Optional<VirtualMachineNetworkInterfaceDnsSettingsConfigurationResponse> dnsSettings() {
        return Optional.ofNullable(this.dnsSettings);
    }

    @Import(name="dscpConfiguration")
    private @Nullable SubResourceResponse dscpConfiguration;

    public Optional<SubResourceResponse> dscpConfiguration() {
        return Optional.ofNullable(this.dscpConfiguration);
    }

    /**
     * Specifies whether the network interface is accelerated networking-enabled.
     * 
     */
    @Import(name="enableAcceleratedNetworking")
    private @Nullable Boolean enableAcceleratedNetworking;

    public Optional<Boolean> enableAcceleratedNetworking() {
        return Optional.ofNullable(this.enableAcceleratedNetworking);
    }

    /**
     * Specifies whether the network interface is FPGA networking-enabled.
     * 
     */
    @Import(name="enableFpga")
    private @Nullable Boolean enableFpga;

    public Optional<Boolean> enableFpga() {
        return Optional.ofNullable(this.enableFpga);
    }

    /**
     * Whether IP forwarding enabled on this NIC.
     * 
     */
    @Import(name="enableIPForwarding")
    private @Nullable Boolean enableIPForwarding;

    public Optional<Boolean> enableIPForwarding() {
        return Optional.ofNullable(this.enableIPForwarding);
    }

    /**
     * Specifies the IP configurations of the network interface.
     * 
     */
    @Import(name="ipConfigurations", required=true)
    private List<VirtualMachineNetworkInterfaceIPConfigurationResponse> ipConfigurations;

    public List<VirtualMachineNetworkInterfaceIPConfigurationResponse> ipConfigurations() {
        return this.ipConfigurations;
    }

    /**
     * The network interface configuration name.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    public String name() {
        return this.name;
    }

    /**
     * The network security group.
     * 
     */
    @Import(name="networkSecurityGroup")
    private @Nullable SubResourceResponse networkSecurityGroup;

    public Optional<SubResourceResponse> networkSecurityGroup() {
        return Optional.ofNullable(this.networkSecurityGroup);
    }

    /**
     * Specifies the primary network interface in case the virtual machine has more than 1 network interface.
     * 
     */
    @Import(name="primary")
    private @Nullable Boolean primary;

    public Optional<Boolean> primary() {
        return Optional.ofNullable(this.primary);
    }

    private VirtualMachineNetworkInterfaceConfigurationResponse() {}

    private VirtualMachineNetworkInterfaceConfigurationResponse(VirtualMachineNetworkInterfaceConfigurationResponse $) {
        this.deleteOption = $.deleteOption;
        this.dnsSettings = $.dnsSettings;
        this.dscpConfiguration = $.dscpConfiguration;
        this.enableAcceleratedNetworking = $.enableAcceleratedNetworking;
        this.enableFpga = $.enableFpga;
        this.enableIPForwarding = $.enableIPForwarding;
        this.ipConfigurations = $.ipConfigurations;
        this.name = $.name;
        this.networkSecurityGroup = $.networkSecurityGroup;
        this.primary = $.primary;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VirtualMachineNetworkInterfaceConfigurationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VirtualMachineNetworkInterfaceConfigurationResponse $;

        public Builder() {
            $ = new VirtualMachineNetworkInterfaceConfigurationResponse();
        }

        public Builder(VirtualMachineNetworkInterfaceConfigurationResponse defaults) {
            $ = new VirtualMachineNetworkInterfaceConfigurationResponse(Objects.requireNonNull(defaults));
        }

        public Builder deleteOption(@Nullable String deleteOption) {
            $.deleteOption = deleteOption;
            return this;
        }

        public Builder dnsSettings(@Nullable VirtualMachineNetworkInterfaceDnsSettingsConfigurationResponse dnsSettings) {
            $.dnsSettings = dnsSettings;
            return this;
        }

        public Builder dscpConfiguration(@Nullable SubResourceResponse dscpConfiguration) {
            $.dscpConfiguration = dscpConfiguration;
            return this;
        }

        public Builder enableAcceleratedNetworking(@Nullable Boolean enableAcceleratedNetworking) {
            $.enableAcceleratedNetworking = enableAcceleratedNetworking;
            return this;
        }

        public Builder enableFpga(@Nullable Boolean enableFpga) {
            $.enableFpga = enableFpga;
            return this;
        }

        public Builder enableIPForwarding(@Nullable Boolean enableIPForwarding) {
            $.enableIPForwarding = enableIPForwarding;
            return this;
        }

        public Builder ipConfigurations(List<VirtualMachineNetworkInterfaceIPConfigurationResponse> ipConfigurations) {
            $.ipConfigurations = ipConfigurations;
            return this;
        }

        public Builder ipConfigurations(VirtualMachineNetworkInterfaceIPConfigurationResponse... ipConfigurations) {
            return ipConfigurations(List.of(ipConfigurations));
        }

        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public Builder networkSecurityGroup(@Nullable SubResourceResponse networkSecurityGroup) {
            $.networkSecurityGroup = networkSecurityGroup;
            return this;
        }

        public Builder primary(@Nullable Boolean primary) {
            $.primary = primary;
            return this;
        }

        public VirtualMachineNetworkInterfaceConfigurationResponse build() {
            $.ipConfigurations = Objects.requireNonNull($.ipConfigurations, "expected parameter 'ipConfigurations' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            return $;
        }
    }

}
