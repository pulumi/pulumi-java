// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.streamanalytics.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Describes how data from an input is serialized or how data is serialized when written to an output in JSON format.
 * 
 */
public final class JsonSerializationResponse extends com.pulumi.resources.InvokeArgs {

    public static final JsonSerializationResponse Empty = new JsonSerializationResponse();

    /**
     * Specifies the encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. Required on PUT (CreateOrReplace) requests.
     * 
     */
    @Import(name="encoding")
    private @Nullable String encoding;

    /**
     * @return Specifies the encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. Required on PUT (CreateOrReplace) requests.
     * 
     */
    public Optional<String> encoding() {
        return Optional.ofNullable(this.encoding);
    }

    /**
     * This property only applies to JSON serialization of outputs only. It is not applicable to inputs. This property specifies the format of the JSON the output will be written in. The currently supported values are &#39;lineSeparated&#39; indicating the output will be formatted by having each JSON object separated by a new line and &#39;array&#39; indicating the output will be formatted as an array of JSON objects. Default value is &#39;lineSeparated&#39; if left null.
     * 
     */
    @Import(name="format")
    private @Nullable String format;

    /**
     * @return This property only applies to JSON serialization of outputs only. It is not applicable to inputs. This property specifies the format of the JSON the output will be written in. The currently supported values are &#39;lineSeparated&#39; indicating the output will be formatted by having each JSON object separated by a new line and &#39;array&#39; indicating the output will be formatted as an array of JSON objects. Default value is &#39;lineSeparated&#39; if left null.
     * 
     */
    public Optional<String> format() {
        return Optional.ofNullable(this.format);
    }

    /**
     * Indicates the type of serialization that the input or output uses. Required on PUT (CreateOrReplace) requests.
     * Expected value is &#39;Json&#39;.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    /**
     * @return Indicates the type of serialization that the input or output uses. Required on PUT (CreateOrReplace) requests.
     * Expected value is &#39;Json&#39;.
     * 
     */
    public String type() {
        return this.type;
    }

    private JsonSerializationResponse() {}

    private JsonSerializationResponse(JsonSerializationResponse $) {
        this.encoding = $.encoding;
        this.format = $.format;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(JsonSerializationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private JsonSerializationResponse $;

        public Builder() {
            $ = new JsonSerializationResponse();
        }

        public Builder(JsonSerializationResponse defaults) {
            $ = new JsonSerializationResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param encoding Specifies the encoding of the incoming data in the case of input and the encoding of outgoing data in the case of output. Required on PUT (CreateOrReplace) requests.
         * 
         * @return builder
         * 
         */
        public Builder encoding(@Nullable String encoding) {
            $.encoding = encoding;
            return this;
        }

        /**
         * @param format This property only applies to JSON serialization of outputs only. It is not applicable to inputs. This property specifies the format of the JSON the output will be written in. The currently supported values are &#39;lineSeparated&#39; indicating the output will be formatted by having each JSON object separated by a new line and &#39;array&#39; indicating the output will be formatted as an array of JSON objects. Default value is &#39;lineSeparated&#39; if left null.
         * 
         * @return builder
         * 
         */
        public Builder format(@Nullable String format) {
            $.format = format;
            return this;
        }

        /**
         * @param type Indicates the type of serialization that the input or output uses. Required on PUT (CreateOrReplace) requests.
         * Expected value is &#39;Json&#39;.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public JsonSerializationResponse build() {
            $.type = Codegen.stringProp("type").arg($.type).require();
            return $;
        }
    }

}
