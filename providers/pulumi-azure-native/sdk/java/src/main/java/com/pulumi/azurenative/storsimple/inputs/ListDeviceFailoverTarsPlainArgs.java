// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.storsimple.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ListDeviceFailoverTarsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final ListDeviceFailoverTarsPlainArgs Empty = new ListDeviceFailoverTarsPlainArgs();

    /**
     * The manager name
     * 
     */
    @Import(name="managerName", required=true)
    private String managerName;

    /**
     * @return The manager name
     * 
     */
    public String managerName() {
        return this.managerName;
    }

    /**
     * The resource group name
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private String resourceGroupName;

    /**
     * @return The resource group name
     * 
     */
    public String resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The source device name on which failover is performed.
     * 
     */
    @Import(name="sourceDeviceName", required=true)
    private String sourceDeviceName;

    /**
     * @return The source device name on which failover is performed.
     * 
     */
    public String sourceDeviceName() {
        return this.sourceDeviceName;
    }

    /**
     * The list of path IDs of the volume containers that needs to be failed-over, for which we want to fetch the eligible targets.
     * 
     */
    @Import(name="volumeContainers")
    private @Nullable List<String> volumeContainers;

    /**
     * @return The list of path IDs of the volume containers that needs to be failed-over, for which we want to fetch the eligible targets.
     * 
     */
    public Optional<List<String>> volumeContainers() {
        return Optional.ofNullable(this.volumeContainers);
    }

    private ListDeviceFailoverTarsPlainArgs() {}

    private ListDeviceFailoverTarsPlainArgs(ListDeviceFailoverTarsPlainArgs $) {
        this.managerName = $.managerName;
        this.resourceGroupName = $.resourceGroupName;
        this.sourceDeviceName = $.sourceDeviceName;
        this.volumeContainers = $.volumeContainers;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ListDeviceFailoverTarsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ListDeviceFailoverTarsPlainArgs $;

        public Builder() {
            $ = new ListDeviceFailoverTarsPlainArgs();
        }

        public Builder(ListDeviceFailoverTarsPlainArgs defaults) {
            $ = new ListDeviceFailoverTarsPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param managerName The manager name
         * 
         * @return builder
         * 
         */
        public Builder managerName(String managerName) {
            $.managerName = managerName;
            return this;
        }

        /**
         * @param resourceGroupName The resource group name
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param sourceDeviceName The source device name on which failover is performed.
         * 
         * @return builder
         * 
         */
        public Builder sourceDeviceName(String sourceDeviceName) {
            $.sourceDeviceName = sourceDeviceName;
            return this;
        }

        /**
         * @param volumeContainers The list of path IDs of the volume containers that needs to be failed-over, for which we want to fetch the eligible targets.
         * 
         * @return builder
         * 
         */
        public Builder volumeContainers(@Nullable List<String> volumeContainers) {
            $.volumeContainers = volumeContainers;
            return this;
        }

        /**
         * @param volumeContainers The list of path IDs of the volume containers that needs to be failed-over, for which we want to fetch the eligible targets.
         * 
         * @return builder
         * 
         */
        public Builder volumeContainers(String... volumeContainers) {
            return volumeContainers(List.of(volumeContainers));
        }

        public ListDeviceFailoverTarsPlainArgs build() {
            $.managerName = Objects.requireNonNull($.managerName, "expected parameter 'managerName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.sourceDeviceName = Objects.requireNonNull($.sourceDeviceName, "expected parameter 'sourceDeviceName' to be non-null");
            return $;
        }
    }

}
