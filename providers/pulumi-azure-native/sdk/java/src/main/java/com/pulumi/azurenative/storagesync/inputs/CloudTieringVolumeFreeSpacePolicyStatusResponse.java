// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.storagesync.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


/**
 * Status of the volume free space policy
 * 
 */
public final class CloudTieringVolumeFreeSpacePolicyStatusResponse extends com.pulumi.resources.InvokeArgs {

    public static final CloudTieringVolumeFreeSpacePolicyStatusResponse Empty = new CloudTieringVolumeFreeSpacePolicyStatusResponse();

    /**
     * Current volume free space percentage.
     * 
     */
    @Import(name="currentVolumeFreeSpacePercent", required=true)
    private Integer currentVolumeFreeSpacePercent;

    /**
     * @return Current volume free space percentage.
     * 
     */
    public Integer currentVolumeFreeSpacePercent() {
        return this.currentVolumeFreeSpacePercent;
    }

    /**
     * In the case where multiple server endpoints are present in a volume, an effective free space policy is applied.
     * 
     */
    @Import(name="effectiveVolumeFreeSpacePolicy", required=true)
    private Integer effectiveVolumeFreeSpacePolicy;

    /**
     * @return In the case where multiple server endpoints are present in a volume, an effective free space policy is applied.
     * 
     */
    public Integer effectiveVolumeFreeSpacePolicy() {
        return this.effectiveVolumeFreeSpacePolicy;
    }

    /**
     * Last updated timestamp
     * 
     */
    @Import(name="lastUpdatedTimestamp", required=true)
    private String lastUpdatedTimestamp;

    /**
     * @return Last updated timestamp
     * 
     */
    public String lastUpdatedTimestamp() {
        return this.lastUpdatedTimestamp;
    }

    private CloudTieringVolumeFreeSpacePolicyStatusResponse() {}

    private CloudTieringVolumeFreeSpacePolicyStatusResponse(CloudTieringVolumeFreeSpacePolicyStatusResponse $) {
        this.currentVolumeFreeSpacePercent = $.currentVolumeFreeSpacePercent;
        this.effectiveVolumeFreeSpacePolicy = $.effectiveVolumeFreeSpacePolicy;
        this.lastUpdatedTimestamp = $.lastUpdatedTimestamp;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CloudTieringVolumeFreeSpacePolicyStatusResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CloudTieringVolumeFreeSpacePolicyStatusResponse $;

        public Builder() {
            $ = new CloudTieringVolumeFreeSpacePolicyStatusResponse();
        }

        public Builder(CloudTieringVolumeFreeSpacePolicyStatusResponse defaults) {
            $ = new CloudTieringVolumeFreeSpacePolicyStatusResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param currentVolumeFreeSpacePercent Current volume free space percentage.
         * 
         * @return builder
         * 
         */
        public Builder currentVolumeFreeSpacePercent(Integer currentVolumeFreeSpacePercent) {
            $.currentVolumeFreeSpacePercent = currentVolumeFreeSpacePercent;
            return this;
        }

        /**
         * @param effectiveVolumeFreeSpacePolicy In the case where multiple server endpoints are present in a volume, an effective free space policy is applied.
         * 
         * @return builder
         * 
         */
        public Builder effectiveVolumeFreeSpacePolicy(Integer effectiveVolumeFreeSpacePolicy) {
            $.effectiveVolumeFreeSpacePolicy = effectiveVolumeFreeSpacePolicy;
            return this;
        }

        /**
         * @param lastUpdatedTimestamp Last updated timestamp
         * 
         * @return builder
         * 
         */
        public Builder lastUpdatedTimestamp(String lastUpdatedTimestamp) {
            $.lastUpdatedTimestamp = lastUpdatedTimestamp;
            return this;
        }

        public CloudTieringVolumeFreeSpacePolicyStatusResponse build() {
            $.currentVolumeFreeSpacePercent = Objects.requireNonNull($.currentVolumeFreeSpacePercent, "expected parameter 'currentVolumeFreeSpacePercent' to be non-null");
            $.effectiveVolumeFreeSpacePolicy = Objects.requireNonNull($.effectiveVolumeFreeSpacePolicy, "expected parameter 'effectiveVolumeFreeSpacePolicy' to be non-null");
            $.lastUpdatedTimestamp = Objects.requireNonNull($.lastUpdatedTimestamp, "expected parameter 'lastUpdatedTimestamp' to be non-null");
            return $;
        }
    }

}
