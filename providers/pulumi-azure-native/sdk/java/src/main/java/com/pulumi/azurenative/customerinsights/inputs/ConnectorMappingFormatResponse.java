// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.customerinsights.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Connector mapping property format.
 * 
 */
public final class ConnectorMappingFormatResponse extends com.pulumi.resources.InvokeArgs {

    public static final ConnectorMappingFormatResponse Empty = new ConnectorMappingFormatResponse();

    /**
     * The oData language.
     * 
     */
    @Import(name="acceptLanguage")
    private @Nullable String acceptLanguage;

    /**
     * @return The oData language.
     * 
     */
    public Optional<String> acceptLanguage() {
        return Optional.ofNullable(this.acceptLanguage);
    }

    /**
     * Character separating array elements.
     * 
     */
    @Import(name="arraySeparator")
    private @Nullable String arraySeparator;

    /**
     * @return Character separating array elements.
     * 
     */
    public Optional<String> arraySeparator() {
        return Optional.ofNullable(this.arraySeparator);
    }

    /**
     * The character that signifies a break between columns.
     * 
     */
    @Import(name="columnDelimiter")
    private @Nullable String columnDelimiter;

    /**
     * @return The character that signifies a break between columns.
     * 
     */
    public Optional<String> columnDelimiter() {
        return Optional.ofNullable(this.columnDelimiter);
    }

    /**
     * The type mapping format.
     * 
     */
    @Import(name="formatType", required=true)
    private String formatType;

    /**
     * @return The type mapping format.
     * 
     */
    public String formatType() {
        return this.formatType;
    }

    /**
     * Quote character, used to indicate enquoted fields.
     * 
     */
    @Import(name="quoteCharacter")
    private @Nullable String quoteCharacter;

    /**
     * @return Quote character, used to indicate enquoted fields.
     * 
     */
    public Optional<String> quoteCharacter() {
        return Optional.ofNullable(this.quoteCharacter);
    }

    /**
     * Escape character for quotes, can be the same as the quoteCharacter.
     * 
     */
    @Import(name="quoteEscapeCharacter")
    private @Nullable String quoteEscapeCharacter;

    /**
     * @return Escape character for quotes, can be the same as the quoteCharacter.
     * 
     */
    public Optional<String> quoteEscapeCharacter() {
        return Optional.ofNullable(this.quoteEscapeCharacter);
    }

    private ConnectorMappingFormatResponse() {}

    private ConnectorMappingFormatResponse(ConnectorMappingFormatResponse $) {
        this.acceptLanguage = $.acceptLanguage;
        this.arraySeparator = $.arraySeparator;
        this.columnDelimiter = $.columnDelimiter;
        this.formatType = $.formatType;
        this.quoteCharacter = $.quoteCharacter;
        this.quoteEscapeCharacter = $.quoteEscapeCharacter;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectorMappingFormatResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectorMappingFormatResponse $;

        public Builder() {
            $ = new ConnectorMappingFormatResponse();
        }

        public Builder(ConnectorMappingFormatResponse defaults) {
            $ = new ConnectorMappingFormatResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param acceptLanguage The oData language.
         * 
         * @return builder
         * 
         */
        public Builder acceptLanguage(@Nullable String acceptLanguage) {
            $.acceptLanguage = acceptLanguage;
            return this;
        }

        /**
         * @param arraySeparator Character separating array elements.
         * 
         * @return builder
         * 
         */
        public Builder arraySeparator(@Nullable String arraySeparator) {
            $.arraySeparator = arraySeparator;
            return this;
        }

        /**
         * @param columnDelimiter The character that signifies a break between columns.
         * 
         * @return builder
         * 
         */
        public Builder columnDelimiter(@Nullable String columnDelimiter) {
            $.columnDelimiter = columnDelimiter;
            return this;
        }

        /**
         * @param formatType The type mapping format.
         * 
         * @return builder
         * 
         */
        public Builder formatType(String formatType) {
            $.formatType = formatType;
            return this;
        }

        /**
         * @param quoteCharacter Quote character, used to indicate enquoted fields.
         * 
         * @return builder
         * 
         */
        public Builder quoteCharacter(@Nullable String quoteCharacter) {
            $.quoteCharacter = quoteCharacter;
            return this;
        }

        /**
         * @param quoteEscapeCharacter Escape character for quotes, can be the same as the quoteCharacter.
         * 
         * @return builder
         * 
         */
        public Builder quoteEscapeCharacter(@Nullable String quoteEscapeCharacter) {
            $.quoteEscapeCharacter = quoteEscapeCharacter;
            return this;
        }

        public ConnectorMappingFormatResponse build() {
            $.formatType = Objects.requireNonNull($.formatType, "expected parameter 'formatType' to be non-null");
            return $;
        }
    }

}
