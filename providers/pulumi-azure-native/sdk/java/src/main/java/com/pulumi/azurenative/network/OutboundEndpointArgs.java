// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network;

import com.pulumi.azurenative.network.inputs.SubResourceArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OutboundEndpointArgs extends com.pulumi.resources.ResourceArgs {

    public static final OutboundEndpointArgs Empty = new OutboundEndpointArgs();

    /**
     * The name of the DNS resolver.
     * 
     */
    @Import(name="dnsResolverName", required=true)
    private Output<String> dnsResolverName;

    /**
     * @return The name of the DNS resolver.
     * 
     */
    public Output<String> dnsResolverName() {
        return this.dnsResolverName;
    }

    /**
     * The geo-location where the resource lives
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The geo-location where the resource lives
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name of the outbound endpoint for the DNS resolver.
     * 
     */
    @Import(name="outboundEndpointName")
    private @Nullable Output<String> outboundEndpointName;

    /**
     * @return The name of the outbound endpoint for the DNS resolver.
     * 
     */
    public Optional<Output<String>> outboundEndpointName() {
        return Optional.ofNullable(this.outboundEndpointName);
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group. The name is case insensitive.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The reference to the subnet used for the outbound endpoint.
     * 
     */
    @Import(name="subnet")
    private @Nullable Output<SubResourceArgs> subnet;

    /**
     * @return The reference to the subnet used for the outbound endpoint.
     * 
     */
    public Optional<Output<SubResourceArgs>> subnet() {
        return Optional.ofNullable(this.subnet);
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Resource tags.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private OutboundEndpointArgs() {}

    private OutboundEndpointArgs(OutboundEndpointArgs $) {
        this.dnsResolverName = $.dnsResolverName;
        this.location = $.location;
        this.outboundEndpointName = $.outboundEndpointName;
        this.resourceGroupName = $.resourceGroupName;
        this.subnet = $.subnet;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OutboundEndpointArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OutboundEndpointArgs $;

        public Builder() {
            $ = new OutboundEndpointArgs();
        }

        public Builder(OutboundEndpointArgs defaults) {
            $ = new OutboundEndpointArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dnsResolverName The name of the DNS resolver.
         * 
         * @return builder
         * 
         */
        public Builder dnsResolverName(Output<String> dnsResolverName) {
            $.dnsResolverName = dnsResolverName;
            return this;
        }

        /**
         * @param dnsResolverName The name of the DNS resolver.
         * 
         * @return builder
         * 
         */
        public Builder dnsResolverName(String dnsResolverName) {
            return dnsResolverName(Output.of(dnsResolverName));
        }

        /**
         * @param location The geo-location where the resource lives
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The geo-location where the resource lives
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param outboundEndpointName The name of the outbound endpoint for the DNS resolver.
         * 
         * @return builder
         * 
         */
        public Builder outboundEndpointName(@Nullable Output<String> outboundEndpointName) {
            $.outboundEndpointName = outboundEndpointName;
            return this;
        }

        /**
         * @param outboundEndpointName The name of the outbound endpoint for the DNS resolver.
         * 
         * @return builder
         * 
         */
        public Builder outboundEndpointName(String outboundEndpointName) {
            return outboundEndpointName(Output.of(outboundEndpointName));
        }

        /**
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param subnet The reference to the subnet used for the outbound endpoint.
         * 
         * @return builder
         * 
         */
        public Builder subnet(@Nullable Output<SubResourceArgs> subnet) {
            $.subnet = subnet;
            return this;
        }

        /**
         * @param subnet The reference to the subnet used for the outbound endpoint.
         * 
         * @return builder
         * 
         */
        public Builder subnet(SubResourceArgs subnet) {
            return subnet(Output.of(subnet));
        }

        /**
         * @param tags Resource tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Resource tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public OutboundEndpointArgs build() {
            $.dnsResolverName = Objects.requireNonNull($.dnsResolverName, "expected parameter 'dnsResolverName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
