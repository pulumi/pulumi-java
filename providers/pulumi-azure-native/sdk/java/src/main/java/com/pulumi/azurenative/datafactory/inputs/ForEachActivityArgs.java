// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.azurenative.datafactory.inputs.ActivityDependencyArgs;
import com.pulumi.azurenative.datafactory.inputs.AppendVariableActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.AzureDataExplorerCommandActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.AzureFunctionActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.AzureMLBatchExecutionActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.AzureMLExecutePipelineActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.AzureMLUpdateResourceActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.ControlActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.CopyActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.CustomActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.DataLakeAnalyticsUSQLActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.DatabricksNotebookActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.DatabricksSparkJarActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.DatabricksSparkPythonActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.DeleteActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.ExecuteDataFlowActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.ExecutePipelineActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.ExecuteSSISPackageActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.ExecuteWranglingDataflowActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.ExecutionActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.ExpressionArgs;
import com.pulumi.azurenative.datafactory.inputs.FailActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.FilterActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.GetMetadataActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.HDInsightHiveActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.HDInsightMapReduceActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.HDInsightPigActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.HDInsightSparkActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.HDInsightStreamingActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.IfConditionActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.LookupActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.ScriptActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.SetVariableActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.SqlServerStoredProcedureActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.SwitchActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.UntilActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.UserPropertyArgs;
import com.pulumi.azurenative.datafactory.inputs.ValidationActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.WaitActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.WebActivityArgs;
import com.pulumi.azurenative.datafactory.inputs.WebHookActivityArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * This activity is used for iterating over a collection and execute given activities.
 * 
 */
public final class ForEachActivityArgs extends com.pulumi.resources.ResourceArgs {

    public static final ForEachActivityArgs Empty = new ForEachActivityArgs();

    /**
     * List of activities to execute .
     * 
     */
    @Import(name="activities", required=true)
    private Output<List<Object>> activities;

    /**
     * @return List of activities to execute .
     * 
     */
    public Output<List<Object>> activities() {
        return this.activities;
    }

    /**
     * Batch count to be used for controlling the number of parallel execution (when isSequential is set to false).
     * 
     */
    @Import(name="batchCount")
    private @Nullable Output<Integer> batchCount;

    /**
     * @return Batch count to be used for controlling the number of parallel execution (when isSequential is set to false).
     * 
     */
    public Optional<Output<Integer>> batchCount() {
        return Optional.ofNullable(this.batchCount);
    }

    /**
     * Activity depends on condition.
     * 
     */
    @Import(name="dependsOn")
    private @Nullable Output<List<ActivityDependencyArgs>> dependsOn;

    /**
     * @return Activity depends on condition.
     * 
     */
    public Optional<Output<List<ActivityDependencyArgs>>> dependsOn() {
        return Optional.ofNullable(this.dependsOn);
    }

    /**
     * Activity description.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Activity description.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Should the loop be executed in sequence or in parallel (max 50)
     * 
     */
    @Import(name="isSequential")
    private @Nullable Output<Boolean> isSequential;

    /**
     * @return Should the loop be executed in sequence or in parallel (max 50)
     * 
     */
    public Optional<Output<Boolean>> isSequential() {
        return Optional.ofNullable(this.isSequential);
    }

    /**
     * Collection to iterate.
     * 
     */
    @Import(name="items", required=true)
    private Output<ExpressionArgs> items;

    /**
     * @return Collection to iterate.
     * 
     */
    public Output<ExpressionArgs> items() {
        return this.items;
    }

    /**
     * Activity name.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Activity name.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Type of activity.
     * Expected value is &#39;ForEach&#39;.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Type of activity.
     * Expected value is &#39;ForEach&#39;.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * Activity user properties.
     * 
     */
    @Import(name="userProperties")
    private @Nullable Output<List<UserPropertyArgs>> userProperties;

    /**
     * @return Activity user properties.
     * 
     */
    public Optional<Output<List<UserPropertyArgs>>> userProperties() {
        return Optional.ofNullable(this.userProperties);
    }

    private ForEachActivityArgs() {}

    private ForEachActivityArgs(ForEachActivityArgs $) {
        this.activities = $.activities;
        this.batchCount = $.batchCount;
        this.dependsOn = $.dependsOn;
        this.description = $.description;
        this.isSequential = $.isSequential;
        this.items = $.items;
        this.name = $.name;
        this.type = $.type;
        this.userProperties = $.userProperties;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ForEachActivityArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ForEachActivityArgs $;

        public Builder() {
            $ = new ForEachActivityArgs();
        }

        public Builder(ForEachActivityArgs defaults) {
            $ = new ForEachActivityArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param activities List of activities to execute .
         * 
         * @return builder
         * 
         */
        public Builder activities(Output<List<Object>> activities) {
            $.activities = activities;
            return this;
        }

        /**
         * @param activities List of activities to execute .
         * 
         * @return builder
         * 
         */
        public Builder activities(List<Object> activities) {
            return activities(Output.of(activities));
        }

        /**
         * @param activities List of activities to execute .
         * 
         * @return builder
         * 
         */
        public Builder activities(Object... activities) {
            return activities(List.of(activities));
        }

        /**
         * @param batchCount Batch count to be used for controlling the number of parallel execution (when isSequential is set to false).
         * 
         * @return builder
         * 
         */
        public Builder batchCount(@Nullable Output<Integer> batchCount) {
            $.batchCount = batchCount;
            return this;
        }

        /**
         * @param batchCount Batch count to be used for controlling the number of parallel execution (when isSequential is set to false).
         * 
         * @return builder
         * 
         */
        public Builder batchCount(Integer batchCount) {
            return batchCount(Output.of(batchCount));
        }

        /**
         * @param dependsOn Activity depends on condition.
         * 
         * @return builder
         * 
         */
        public Builder dependsOn(@Nullable Output<List<ActivityDependencyArgs>> dependsOn) {
            $.dependsOn = dependsOn;
            return this;
        }

        /**
         * @param dependsOn Activity depends on condition.
         * 
         * @return builder
         * 
         */
        public Builder dependsOn(List<ActivityDependencyArgs> dependsOn) {
            return dependsOn(Output.of(dependsOn));
        }

        /**
         * @param dependsOn Activity depends on condition.
         * 
         * @return builder
         * 
         */
        public Builder dependsOn(ActivityDependencyArgs... dependsOn) {
            return dependsOn(List.of(dependsOn));
        }

        /**
         * @param description Activity description.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Activity description.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param isSequential Should the loop be executed in sequence or in parallel (max 50)
         * 
         * @return builder
         * 
         */
        public Builder isSequential(@Nullable Output<Boolean> isSequential) {
            $.isSequential = isSequential;
            return this;
        }

        /**
         * @param isSequential Should the loop be executed in sequence or in parallel (max 50)
         * 
         * @return builder
         * 
         */
        public Builder isSequential(Boolean isSequential) {
            return isSequential(Output.of(isSequential));
        }

        /**
         * @param items Collection to iterate.
         * 
         * @return builder
         * 
         */
        public Builder items(Output<ExpressionArgs> items) {
            $.items = items;
            return this;
        }

        /**
         * @param items Collection to iterate.
         * 
         * @return builder
         * 
         */
        public Builder items(ExpressionArgs items) {
            return items(Output.of(items));
        }

        /**
         * @param name Activity name.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Activity name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param type Type of activity.
         * Expected value is &#39;ForEach&#39;.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of activity.
         * Expected value is &#39;ForEach&#39;.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param userProperties Activity user properties.
         * 
         * @return builder
         * 
         */
        public Builder userProperties(@Nullable Output<List<UserPropertyArgs>> userProperties) {
            $.userProperties = userProperties;
            return this;
        }

        /**
         * @param userProperties Activity user properties.
         * 
         * @return builder
         * 
         */
        public Builder userProperties(List<UserPropertyArgs> userProperties) {
            return userProperties(Output.of(userProperties));
        }

        /**
         * @param userProperties Activity user properties.
         * 
         * @return builder
         * 
         */
        public Builder userProperties(UserPropertyArgs... userProperties) {
            return userProperties(List.of(userProperties));
        }

        public ForEachActivityArgs build() {
            $.activities = Objects.requireNonNull($.activities, "expected parameter 'activities' to be non-null");
            $.items = Objects.requireNonNull($.items, "expected parameter 'items' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.type = Codegen.stringProp("type").output().arg($.type).require();
            return $;
        }
    }

}
