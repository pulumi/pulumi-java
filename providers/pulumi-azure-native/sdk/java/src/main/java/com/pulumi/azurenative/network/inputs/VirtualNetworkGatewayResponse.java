// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.azurenative.network.inputs.AddressSpaceResponse;
import com.pulumi.azurenative.network.inputs.BgpSettingsResponse;
import com.pulumi.azurenative.network.inputs.ExtendedLocationResponse;
import com.pulumi.azurenative.network.inputs.SubResourceResponse;
import com.pulumi.azurenative.network.inputs.VirtualNetworkGatewayIPConfigurationResponse;
import com.pulumi.azurenative.network.inputs.VirtualNetworkGatewaySkuResponse;
import com.pulumi.azurenative.network.inputs.VpnClientConfigurationResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A common class for general resource information.
 * 
 */
public final class VirtualNetworkGatewayResponse extends com.pulumi.resources.InvokeArgs {

    public static final VirtualNetworkGatewayResponse Empty = new VirtualNetworkGatewayResponse();

    /**
     * ActiveActive flag.
     * 
     */
    @Import(name="activeActive")
    private @Nullable Boolean activeActive;

    public Optional<Boolean> activeActive() {
        return Optional.ofNullable(this.activeActive);
    }

    /**
     * Virtual network gateway&#39;s BGP speaker settings.
     * 
     */
    @Import(name="bgpSettings")
    private @Nullable BgpSettingsResponse bgpSettings;

    public Optional<BgpSettingsResponse> bgpSettings() {
        return Optional.ofNullable(this.bgpSettings);
    }

    /**
     * The reference to the address space resource which represents the custom routes address space specified by the customer for virtual network gateway and VpnClient.
     * 
     */
    @Import(name="customRoutes")
    private @Nullable AddressSpaceResponse customRoutes;

    public Optional<AddressSpaceResponse> customRoutes() {
        return Optional.ofNullable(this.customRoutes);
    }

    /**
     * Whether BGP is enabled for this virtual network gateway or not.
     * 
     */
    @Import(name="enableBgp")
    private @Nullable Boolean enableBgp;

    public Optional<Boolean> enableBgp() {
        return Optional.ofNullable(this.enableBgp);
    }

    /**
     * Whether dns forwarding is enabled or not.
     * 
     */
    @Import(name="enableDnsForwarding")
    private @Nullable Boolean enableDnsForwarding;

    public Optional<Boolean> enableDnsForwarding() {
        return Optional.ofNullable(this.enableDnsForwarding);
    }

    /**
     * Whether private IP needs to be enabled on this gateway for connections or not.
     * 
     */
    @Import(name="enablePrivateIpAddress")
    private @Nullable Boolean enablePrivateIpAddress;

    public Optional<Boolean> enablePrivateIpAddress() {
        return Optional.ofNullable(this.enablePrivateIpAddress);
    }

    /**
     * A unique read-only string that changes whenever the resource is updated.
     * 
     */
    @Import(name="etag", required=true)
    private String etag;

    public String etag() {
        return this.etag;
    }

    /**
     * The extended location of type local virtual network gateway.
     * 
     */
    @Import(name="extendedLocation")
    private @Nullable ExtendedLocationResponse extendedLocation;

    public Optional<ExtendedLocationResponse> extendedLocation() {
        return Optional.ofNullable(this.extendedLocation);
    }

    /**
     * The reference to the LocalNetworkGateway resource which represents local network site having default routes. Assign Null value in case of removing existing default site setting.
     * 
     */
    @Import(name="gatewayDefaultSite")
    private @Nullable SubResourceResponse gatewayDefaultSite;

    public Optional<SubResourceResponse> gatewayDefaultSite() {
        return Optional.ofNullable(this.gatewayDefaultSite);
    }

    /**
     * The type of this virtual network gateway.
     * 
     */
    @Import(name="gatewayType")
    private @Nullable String gatewayType;

    public Optional<String> gatewayType() {
        return Optional.ofNullable(this.gatewayType);
    }

    /**
     * Resource ID.
     * 
     */
    @Import(name="id")
    private @Nullable String id;

    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The IP address allocated by the gateway to which dns requests can be sent.
     * 
     */
    @Import(name="inboundDnsForwardingEndpoint", required=true)
    private String inboundDnsForwardingEndpoint;

    public String inboundDnsForwardingEndpoint() {
        return this.inboundDnsForwardingEndpoint;
    }

    /**
     * IP configurations for virtual network gateway.
     * 
     */
    @Import(name="ipConfigurations")
    private @Nullable List<VirtualNetworkGatewayIPConfigurationResponse> ipConfigurations;

    public Optional<List<VirtualNetworkGatewayIPConfigurationResponse>> ipConfigurations() {
        return Optional.ofNullable(this.ipConfigurations);
    }

    /**
     * Resource location.
     * 
     */
    @Import(name="location")
    private @Nullable String location;

    public Optional<String> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Resource name.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    public String name() {
        return this.name;
    }

    /**
     * The provisioning state of the virtual network gateway resource.
     * 
     */
    @Import(name="provisioningState", required=true)
    private String provisioningState;

    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * The resource GUID property of the virtual network gateway resource.
     * 
     */
    @Import(name="resourceGuid", required=true)
    private String resourceGuid;

    public String resourceGuid() {
        return this.resourceGuid;
    }

    /**
     * The reference to the VirtualNetworkGatewaySku resource which represents the SKU selected for Virtual network gateway.
     * 
     */
    @Import(name="sku")
    private @Nullable VirtualNetworkGatewaySkuResponse sku;

    public Optional<VirtualNetworkGatewaySkuResponse> sku() {
        return Optional.ofNullable(this.sku);
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
    private @Nullable Map<String,String> tags;

    public Optional<Map<String,String>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Resource type.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    public String type() {
        return this.type;
    }

    /**
     * Customer vnet resource id. VirtualNetworkGateway of type local gateway is associated with the customer vnet.
     * 
     */
    @Import(name="vNetExtendedLocationResourceId")
    private @Nullable String vNetExtendedLocationResourceId;

    public Optional<String> vNetExtendedLocationResourceId() {
        return Optional.ofNullable(this.vNetExtendedLocationResourceId);
    }

    /**
     * The reference to the VpnClientConfiguration resource which represents the P2S VpnClient configurations.
     * 
     */
    @Import(name="vpnClientConfiguration")
    private @Nullable VpnClientConfigurationResponse vpnClientConfiguration;

    public Optional<VpnClientConfigurationResponse> vpnClientConfiguration() {
        return Optional.ofNullable(this.vpnClientConfiguration);
    }

    /**
     * The generation for this VirtualNetworkGateway. Must be None if gatewayType is not VPN.
     * 
     */
    @Import(name="vpnGatewayGeneration")
    private @Nullable String vpnGatewayGeneration;

    public Optional<String> vpnGatewayGeneration() {
        return Optional.ofNullable(this.vpnGatewayGeneration);
    }

    /**
     * The type of this virtual network gateway.
     * 
     */
    @Import(name="vpnType")
    private @Nullable String vpnType;

    public Optional<String> vpnType() {
        return Optional.ofNullable(this.vpnType);
    }

    private VirtualNetworkGatewayResponse() {}

    private VirtualNetworkGatewayResponse(VirtualNetworkGatewayResponse $) {
        this.activeActive = $.activeActive;
        this.bgpSettings = $.bgpSettings;
        this.customRoutes = $.customRoutes;
        this.enableBgp = $.enableBgp;
        this.enableDnsForwarding = $.enableDnsForwarding;
        this.enablePrivateIpAddress = $.enablePrivateIpAddress;
        this.etag = $.etag;
        this.extendedLocation = $.extendedLocation;
        this.gatewayDefaultSite = $.gatewayDefaultSite;
        this.gatewayType = $.gatewayType;
        this.id = $.id;
        this.inboundDnsForwardingEndpoint = $.inboundDnsForwardingEndpoint;
        this.ipConfigurations = $.ipConfigurations;
        this.location = $.location;
        this.name = $.name;
        this.provisioningState = $.provisioningState;
        this.resourceGuid = $.resourceGuid;
        this.sku = $.sku;
        this.tags = $.tags;
        this.type = $.type;
        this.vNetExtendedLocationResourceId = $.vNetExtendedLocationResourceId;
        this.vpnClientConfiguration = $.vpnClientConfiguration;
        this.vpnGatewayGeneration = $.vpnGatewayGeneration;
        this.vpnType = $.vpnType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VirtualNetworkGatewayResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VirtualNetworkGatewayResponse $;

        public Builder() {
            $ = new VirtualNetworkGatewayResponse();
        }

        public Builder(VirtualNetworkGatewayResponse defaults) {
            $ = new VirtualNetworkGatewayResponse(Objects.requireNonNull(defaults));
        }

        public Builder activeActive(@Nullable Boolean activeActive) {
            $.activeActive = activeActive;
            return this;
        }

        public Builder bgpSettings(@Nullable BgpSettingsResponse bgpSettings) {
            $.bgpSettings = bgpSettings;
            return this;
        }

        public Builder customRoutes(@Nullable AddressSpaceResponse customRoutes) {
            $.customRoutes = customRoutes;
            return this;
        }

        public Builder enableBgp(@Nullable Boolean enableBgp) {
            $.enableBgp = enableBgp;
            return this;
        }

        public Builder enableDnsForwarding(@Nullable Boolean enableDnsForwarding) {
            $.enableDnsForwarding = enableDnsForwarding;
            return this;
        }

        public Builder enablePrivateIpAddress(@Nullable Boolean enablePrivateIpAddress) {
            $.enablePrivateIpAddress = enablePrivateIpAddress;
            return this;
        }

        public Builder etag(String etag) {
            $.etag = etag;
            return this;
        }

        public Builder extendedLocation(@Nullable ExtendedLocationResponse extendedLocation) {
            $.extendedLocation = extendedLocation;
            return this;
        }

        public Builder gatewayDefaultSite(@Nullable SubResourceResponse gatewayDefaultSite) {
            $.gatewayDefaultSite = gatewayDefaultSite;
            return this;
        }

        public Builder gatewayType(@Nullable String gatewayType) {
            $.gatewayType = gatewayType;
            return this;
        }

        public Builder id(@Nullable String id) {
            $.id = id;
            return this;
        }

        public Builder inboundDnsForwardingEndpoint(String inboundDnsForwardingEndpoint) {
            $.inboundDnsForwardingEndpoint = inboundDnsForwardingEndpoint;
            return this;
        }

        public Builder ipConfigurations(@Nullable List<VirtualNetworkGatewayIPConfigurationResponse> ipConfigurations) {
            $.ipConfigurations = ipConfigurations;
            return this;
        }

        public Builder ipConfigurations(VirtualNetworkGatewayIPConfigurationResponse... ipConfigurations) {
            return ipConfigurations(List.of(ipConfigurations));
        }

        public Builder location(@Nullable String location) {
            $.location = location;
            return this;
        }

        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public Builder provisioningState(String provisioningState) {
            $.provisioningState = provisioningState;
            return this;
        }

        public Builder resourceGuid(String resourceGuid) {
            $.resourceGuid = resourceGuid;
            return this;
        }

        public Builder sku(@Nullable VirtualNetworkGatewaySkuResponse sku) {
            $.sku = sku;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            $.tags = tags;
            return this;
        }

        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public Builder vNetExtendedLocationResourceId(@Nullable String vNetExtendedLocationResourceId) {
            $.vNetExtendedLocationResourceId = vNetExtendedLocationResourceId;
            return this;
        }

        public Builder vpnClientConfiguration(@Nullable VpnClientConfigurationResponse vpnClientConfiguration) {
            $.vpnClientConfiguration = vpnClientConfiguration;
            return this;
        }

        public Builder vpnGatewayGeneration(@Nullable String vpnGatewayGeneration) {
            $.vpnGatewayGeneration = vpnGatewayGeneration;
            return this;
        }

        public Builder vpnType(@Nullable String vpnType) {
            $.vpnType = vpnType;
            return this;
        }

        public VirtualNetworkGatewayResponse build() {
            $.etag = Objects.requireNonNull($.etag, "expected parameter 'etag' to be non-null");
            $.inboundDnsForwardingEndpoint = Objects.requireNonNull($.inboundDnsForwardingEndpoint, "expected parameter 'inboundDnsForwardingEndpoint' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.provisioningState = Objects.requireNonNull($.provisioningState, "expected parameter 'provisioningState' to be non-null");
            $.resourceGuid = Objects.requireNonNull($.resourceGuid, "expected parameter 'resourceGuid' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
