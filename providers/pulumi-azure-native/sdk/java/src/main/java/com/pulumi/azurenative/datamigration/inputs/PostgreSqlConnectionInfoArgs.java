// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datamigration.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Information for connecting to PostgreSQL server
 * 
 */
public final class PostgreSqlConnectionInfoArgs extends com.pulumi.resources.ResourceArgs {

    public static final PostgreSqlConnectionInfoArgs Empty = new PostgreSqlConnectionInfoArgs();

    /**
     * Name of the database
     * 
     */
    @Import(name="databaseName")
    private @Nullable Output<String> databaseName;

    /**
     * @return Name of the database
     * 
     */
    public Optional<Output<String>> databaseName() {
        return Optional.ofNullable(this.databaseName);
    }

    /**
     * Password credential.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return Password credential.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * Port for Server
     * 
     */
    @Import(name="port", required=true)
    private Output<Integer> port;

    /**
     * @return Port for Server
     * 
     */
    public Output<Integer> port() {
        return this.port;
    }

    /**
     * Name of the server
     * 
     */
    @Import(name="serverName", required=true)
    private Output<String> serverName;

    /**
     * @return Name of the server
     * 
     */
    public Output<String> serverName() {
        return this.serverName;
    }

    /**
     * Type of connection info
     * Expected value is &#39;PostgreSqlConnectionInfo&#39;.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Type of connection info
     * Expected value is &#39;PostgreSqlConnectionInfo&#39;.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * User name
     * 
     */
    @Import(name="userName")
    private @Nullable Output<String> userName;

    /**
     * @return User name
     * 
     */
    public Optional<Output<String>> userName() {
        return Optional.ofNullable(this.userName);
    }

    private PostgreSqlConnectionInfoArgs() {}

    private PostgreSqlConnectionInfoArgs(PostgreSqlConnectionInfoArgs $) {
        this.databaseName = $.databaseName;
        this.password = $.password;
        this.port = $.port;
        this.serverName = $.serverName;
        this.type = $.type;
        this.userName = $.userName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PostgreSqlConnectionInfoArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PostgreSqlConnectionInfoArgs $;

        public Builder() {
            $ = new PostgreSqlConnectionInfoArgs();
        }

        public Builder(PostgreSqlConnectionInfoArgs defaults) {
            $ = new PostgreSqlConnectionInfoArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param databaseName Name of the database
         * 
         * @return builder
         * 
         */
        public Builder databaseName(@Nullable Output<String> databaseName) {
            $.databaseName = databaseName;
            return this;
        }

        /**
         * @param databaseName Name of the database
         * 
         * @return builder
         * 
         */
        public Builder databaseName(String databaseName) {
            return databaseName(Output.of(databaseName));
        }

        /**
         * @param password Password credential.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password Password credential.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param port Port for Server
         * 
         * @return builder
         * 
         */
        public Builder port(Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port Port for Server
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param serverName Name of the server
         * 
         * @return builder
         * 
         */
        public Builder serverName(Output<String> serverName) {
            $.serverName = serverName;
            return this;
        }

        /**
         * @param serverName Name of the server
         * 
         * @return builder
         * 
         */
        public Builder serverName(String serverName) {
            return serverName(Output.of(serverName));
        }

        /**
         * @param type Type of connection info
         * Expected value is &#39;PostgreSqlConnectionInfo&#39;.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of connection info
         * Expected value is &#39;PostgreSqlConnectionInfo&#39;.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param userName User name
         * 
         * @return builder
         * 
         */
        public Builder userName(@Nullable Output<String> userName) {
            $.userName = userName;
            return this;
        }

        /**
         * @param userName User name
         * 
         * @return builder
         * 
         */
        public Builder userName(String userName) {
            return userName(Output.of(userName));
        }

        public PostgreSqlConnectionInfoArgs build() {
            $.port = Objects.requireNonNull($.port, "expected parameter 'port' to be non-null");
            $.serverName = Objects.requireNonNull($.serverName, "expected parameter 'serverName' to be non-null");
            $.type = Codegen.stringProp("type").output().arg($.type).require();
            return $;
        }
    }

}
