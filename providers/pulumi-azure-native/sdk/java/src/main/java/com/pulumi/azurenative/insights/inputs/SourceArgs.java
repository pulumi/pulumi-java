// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.insights.inputs;

import com.pulumi.azurenative.insights.enums.QueryType;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Specifies the log search query.
 * 
 */
public final class SourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final SourceArgs Empty = new SourceArgs();

    /**
     * List of  Resource referred into query
     * 
     */
    @Import(name="authorizedResources")
    private @Nullable Output<List<String>> authorizedResources;

    /**
     * @return List of  Resource referred into query
     * 
     */
    public Optional<Output<List<String>>> authorizedResources() {
        return Optional.ofNullable(this.authorizedResources);
    }

    /**
     * The resource uri over which log search query is to be run.
     * 
     */
    @Import(name="dataSourceId", required=true)
    private Output<String> dataSourceId;

    /**
     * @return The resource uri over which log search query is to be run.
     * 
     */
    public Output<String> dataSourceId() {
        return this.dataSourceId;
    }

    /**
     * Log search query. Required for action type - AlertingAction
     * 
     */
    @Import(name="query")
    private @Nullable Output<String> query;

    /**
     * @return Log search query. Required for action type - AlertingAction
     * 
     */
    public Optional<Output<String>> query() {
        return Optional.ofNullable(this.query);
    }

    /**
     * Set value to &#39;ResultCount&#39; .
     * 
     */
    @Import(name="queryType")
    private @Nullable Output<Either<String,QueryType>> queryType;

    /**
     * @return Set value to &#39;ResultCount&#39; .
     * 
     */
    public Optional<Output<Either<String,QueryType>>> queryType() {
        return Optional.ofNullable(this.queryType);
    }

    private SourceArgs() {}

    private SourceArgs(SourceArgs $) {
        this.authorizedResources = $.authorizedResources;
        this.dataSourceId = $.dataSourceId;
        this.query = $.query;
        this.queryType = $.queryType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SourceArgs $;

        public Builder() {
            $ = new SourceArgs();
        }

        public Builder(SourceArgs defaults) {
            $ = new SourceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authorizedResources List of  Resource referred into query
         * 
         * @return builder
         * 
         */
        public Builder authorizedResources(@Nullable Output<List<String>> authorizedResources) {
            $.authorizedResources = authorizedResources;
            return this;
        }

        /**
         * @param authorizedResources List of  Resource referred into query
         * 
         * @return builder
         * 
         */
        public Builder authorizedResources(List<String> authorizedResources) {
            return authorizedResources(Output.of(authorizedResources));
        }

        /**
         * @param authorizedResources List of  Resource referred into query
         * 
         * @return builder
         * 
         */
        public Builder authorizedResources(String... authorizedResources) {
            return authorizedResources(List.of(authorizedResources));
        }

        /**
         * @param dataSourceId The resource uri over which log search query is to be run.
         * 
         * @return builder
         * 
         */
        public Builder dataSourceId(Output<String> dataSourceId) {
            $.dataSourceId = dataSourceId;
            return this;
        }

        /**
         * @param dataSourceId The resource uri over which log search query is to be run.
         * 
         * @return builder
         * 
         */
        public Builder dataSourceId(String dataSourceId) {
            return dataSourceId(Output.of(dataSourceId));
        }

        /**
         * @param query Log search query. Required for action type - AlertingAction
         * 
         * @return builder
         * 
         */
        public Builder query(@Nullable Output<String> query) {
            $.query = query;
            return this;
        }

        /**
         * @param query Log search query. Required for action type - AlertingAction
         * 
         * @return builder
         * 
         */
        public Builder query(String query) {
            return query(Output.of(query));
        }

        /**
         * @param queryType Set value to &#39;ResultCount&#39; .
         * 
         * @return builder
         * 
         */
        public Builder queryType(@Nullable Output<Either<String,QueryType>> queryType) {
            $.queryType = queryType;
            return this;
        }

        /**
         * @param queryType Set value to &#39;ResultCount&#39; .
         * 
         * @return builder
         * 
         */
        public Builder queryType(Either<String,QueryType> queryType) {
            return queryType(Output.of(queryType));
        }

        /**
         * @param queryType Set value to &#39;ResultCount&#39; .
         * 
         * @return builder
         * 
         */
        public Builder queryType(String queryType) {
            return queryType(Either.ofLeft(queryType));
        }

        /**
         * @param queryType Set value to &#39;ResultCount&#39; .
         * 
         * @return builder
         * 
         */
        public Builder queryType(QueryType queryType) {
            return queryType(Either.ofRight(queryType));
        }

        public SourceArgs build() {
            $.dataSourceId = Objects.requireNonNull($.dataSourceId, "expected parameter 'dataSourceId' to be non-null");
            return $;
        }
    }

}
