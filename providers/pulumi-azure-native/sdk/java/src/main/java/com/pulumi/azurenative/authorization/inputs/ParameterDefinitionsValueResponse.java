// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.authorization.inputs;

import com.pulumi.azurenative.authorization.inputs.ParameterDefinitionsValueResponseMetadata;
import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The definition of a parameter that can be provided to the policy.
 * 
 */
public final class ParameterDefinitionsValueResponse extends com.pulumi.resources.InvokeArgs {

    public static final ParameterDefinitionsValueResponse Empty = new ParameterDefinitionsValueResponse();

    /**
     * The allowed values for the parameter.
     * 
     */
    @Import(name="allowedValues")
    private @Nullable List<Object> allowedValues;

    /**
     * @return The allowed values for the parameter.
     * 
     */
    public Optional<List<Object>> allowedValues() {
        return Optional.ofNullable(this.allowedValues);
    }

    /**
     * The default value for the parameter if no value is provided.
     * 
     */
    @Import(name="defaultValue")
    private @Nullable Object defaultValue;

    /**
     * @return The default value for the parameter if no value is provided.
     * 
     */
    public Optional<Object> defaultValue() {
        return Optional.ofNullable(this.defaultValue);
    }

    /**
     * General metadata for the parameter.
     * 
     */
    @Import(name="metadata")
    private @Nullable ParameterDefinitionsValueResponseMetadata metadata;

    /**
     * @return General metadata for the parameter.
     * 
     */
    public Optional<ParameterDefinitionsValueResponseMetadata> metadata() {
        return Optional.ofNullable(this.metadata);
    }

    /**
     * The data type of the parameter.
     * 
     */
    @Import(name="type")
    private @Nullable String type;

    /**
     * @return The data type of the parameter.
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    private ParameterDefinitionsValueResponse() {}

    private ParameterDefinitionsValueResponse(ParameterDefinitionsValueResponse $) {
        this.allowedValues = $.allowedValues;
        this.defaultValue = $.defaultValue;
        this.metadata = $.metadata;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ParameterDefinitionsValueResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ParameterDefinitionsValueResponse $;

        public Builder() {
            $ = new ParameterDefinitionsValueResponse();
        }

        public Builder(ParameterDefinitionsValueResponse defaults) {
            $ = new ParameterDefinitionsValueResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowedValues The allowed values for the parameter.
         * 
         * @return builder
         * 
         */
        public Builder allowedValues(@Nullable List<Object> allowedValues) {
            $.allowedValues = allowedValues;
            return this;
        }

        /**
         * @param allowedValues The allowed values for the parameter.
         * 
         * @return builder
         * 
         */
        public Builder allowedValues(Object... allowedValues) {
            return allowedValues(List.of(allowedValues));
        }

        /**
         * @param defaultValue The default value for the parameter if no value is provided.
         * 
         * @return builder
         * 
         */
        public Builder defaultValue(@Nullable Object defaultValue) {
            $.defaultValue = defaultValue;
            return this;
        }

        /**
         * @param metadata General metadata for the parameter.
         * 
         * @return builder
         * 
         */
        public Builder metadata(@Nullable ParameterDefinitionsValueResponseMetadata metadata) {
            $.metadata = metadata;
            return this;
        }

        /**
         * @param type The data type of the parameter.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable String type) {
            $.type = type;
            return this;
        }

        public ParameterDefinitionsValueResponse build() {
            return $;
        }
    }

}
