// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.netapp.inputs;

import com.pulumi.azurenative.netapp.enums.AvsDataStore;
import com.pulumi.azurenative.netapp.enums.EnableSubvolumes;
import com.pulumi.azurenative.netapp.enums.NetworkFeatures;
import com.pulumi.azurenative.netapp.enums.SecurityStyle;
import com.pulumi.azurenative.netapp.enums.ServiceLevel;
import com.pulumi.azurenative.netapp.inputs.PlacementKeyValuePairsArgs;
import com.pulumi.azurenative.netapp.inputs.VolumePropertiesDataProtectionArgs;
import com.pulumi.azurenative.netapp.inputs.VolumePropertiesExportPolicyArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Volume resource
 * 
 */
public final class VolumeGroupVolumePropertiesArgs extends com.pulumi.resources.ResourceArgs {

    public static final VolumeGroupVolumePropertiesArgs Empty = new VolumeGroupVolumePropertiesArgs();

    /**
     * Specifies whether the volume is enabled for Azure VMware Solution (AVS) datastore purpose
     * 
     */
    @Import(name="avsDataStore")
    private @Nullable Output<Either<String,AvsDataStore>> avsDataStore;

    /**
     * @return Specifies whether the volume is enabled for Azure VMware Solution (AVS) datastore purpose
     * 
     */
    public Optional<Output<Either<String,AvsDataStore>>> avsDataStore() {
        return Optional.ofNullable(this.avsDataStore);
    }

    /**
     * UUID v4 or resource identifier used to identify the Backup.
     * 
     */
    @Import(name="backupId")
    private @Nullable Output<String> backupId;

    /**
     * @return UUID v4 or resource identifier used to identify the Backup.
     * 
     */
    public Optional<Output<String>> backupId() {
        return Optional.ofNullable(this.backupId);
    }

    /**
     * Pool Resource Id used in case of creating a volume through volume group
     * 
     */
    @Import(name="capacityPoolResourceId")
    private @Nullable Output<String> capacityPoolResourceId;

    /**
     * @return Pool Resource Id used in case of creating a volume through volume group
     * 
     */
    public Optional<Output<String>> capacityPoolResourceId() {
        return Optional.ofNullable(this.capacityPoolResourceId);
    }

    /**
     * Specifies whether Cool Access(tiering) is enabled for the volume.
     * 
     */
    @Import(name="coolAccess")
    private @Nullable Output<Boolean> coolAccess;

    /**
     * @return Specifies whether Cool Access(tiering) is enabled for the volume.
     * 
     */
    public Optional<Output<Boolean>> coolAccess() {
        return Optional.ofNullable(this.coolAccess);
    }

    /**
     * Specifies the number of days after which data that is not accessed by clients will be tiered.
     * 
     */
    @Import(name="coolnessPeriod")
    private @Nullable Output<Integer> coolnessPeriod;

    /**
     * @return Specifies the number of days after which data that is not accessed by clients will be tiered.
     * 
     */
    public Optional<Output<Integer>> coolnessPeriod() {
        return Optional.ofNullable(this.coolnessPeriod);
    }

    /**
     * A unique file path for the volume. Used when creating mount targets
     * 
     */
    @Import(name="creationToken", required=true)
    private Output<String> creationToken;

    /**
     * @return A unique file path for the volume. Used when creating mount targets
     * 
     */
    public Output<String> creationToken() {
        return this.creationToken;
    }

    /**
     * DataProtection type volumes include an object containing details of the replication
     * 
     */
    @Import(name="dataProtection")
    private @Nullable Output<VolumePropertiesDataProtectionArgs> dataProtection;

    /**
     * @return DataProtection type volumes include an object containing details of the replication
     * 
     */
    public Optional<Output<VolumePropertiesDataProtectionArgs>> dataProtection() {
        return Optional.ofNullable(this.dataProtection);
    }

    /**
     * Default group quota for volume in KiBs. If isDefaultQuotaEnabled is set, the minimum value of 4 KiBs applies.
     * 
     */
    @Import(name="defaultGroupQuotaInKiBs")
    private @Nullable Output<Double> defaultGroupQuotaInKiBs;

    /**
     * @return Default group quota for volume in KiBs. If isDefaultQuotaEnabled is set, the minimum value of 4 KiBs applies.
     * 
     */
    public Optional<Output<Double>> defaultGroupQuotaInKiBs() {
        return Optional.ofNullable(this.defaultGroupQuotaInKiBs);
    }

    /**
     * Default user quota for volume in KiBs. If isDefaultQuotaEnabled is set, the minimum value of 4 KiBs applies .
     * 
     */
    @Import(name="defaultUserQuotaInKiBs")
    private @Nullable Output<Double> defaultUserQuotaInKiBs;

    /**
     * @return Default user quota for volume in KiBs. If isDefaultQuotaEnabled is set, the minimum value of 4 KiBs applies .
     * 
     */
    public Optional<Output<Double>> defaultUserQuotaInKiBs() {
        return Optional.ofNullable(this.defaultUserQuotaInKiBs);
    }

    /**
     * Flag indicating whether subvolume operations are enabled on the volume
     * 
     */
    @Import(name="enableSubvolumes")
    private @Nullable Output<Either<String,EnableSubvolumes>> enableSubvolumes;

    /**
     * @return Flag indicating whether subvolume operations are enabled on the volume
     * 
     */
    public Optional<Output<Either<String,EnableSubvolumes>>> enableSubvolumes() {
        return Optional.ofNullable(this.enableSubvolumes);
    }

    /**
     * Encryption Key Source. Possible values are: &#39;Microsoft.NetApp&#39;
     * 
     */
    @Import(name="encryptionKeySource")
    private @Nullable Output<String> encryptionKeySource;

    /**
     * @return Encryption Key Source. Possible values are: &#39;Microsoft.NetApp&#39;
     * 
     */
    public Optional<Output<String>> encryptionKeySource() {
        return Optional.ofNullable(this.encryptionKeySource);
    }

    /**
     * Set of export policy rules
     * 
     */
    @Import(name="exportPolicy")
    private @Nullable Output<VolumePropertiesExportPolicyArgs> exportPolicy;

    /**
     * @return Set of export policy rules
     * 
     */
    public Optional<Output<VolumePropertiesExportPolicyArgs>> exportPolicy() {
        return Optional.ofNullable(this.exportPolicy);
    }

    /**
     * Specifies if default quota is enabled for the volume.
     * 
     */
    @Import(name="isDefaultQuotaEnabled")
    private @Nullable Output<Boolean> isDefaultQuotaEnabled;

    /**
     * @return Specifies if default quota is enabled for the volume.
     * 
     */
    public Optional<Output<Boolean>> isDefaultQuotaEnabled() {
        return Optional.ofNullable(this.isDefaultQuotaEnabled);
    }

    /**
     * Restoring
     * 
     */
    @Import(name="isRestoring")
    private @Nullable Output<Boolean> isRestoring;

    /**
     * @return Restoring
     * 
     */
    public Optional<Output<Boolean>> isRestoring() {
        return Optional.ofNullable(this.isRestoring);
    }

    /**
     * Describe if a volume is KerberosEnabled. To be use with swagger version 2020-05-01 or later
     * 
     */
    @Import(name="kerberosEnabled")
    private @Nullable Output<Boolean> kerberosEnabled;

    /**
     * @return Describe if a volume is KerberosEnabled. To be use with swagger version 2020-05-01 or later
     * 
     */
    public Optional<Output<Boolean>> kerberosEnabled() {
        return Optional.ofNullable(this.kerberosEnabled);
    }

    /**
     * Specifies whether LDAP is enabled or not for a given NFS volume.
     * 
     */
    @Import(name="ldapEnabled")
    private @Nullable Output<Boolean> ldapEnabled;

    /**
     * @return Specifies whether LDAP is enabled or not for a given NFS volume.
     * 
     */
    public Optional<Output<Boolean>> ldapEnabled() {
        return Optional.ofNullable(this.ldapEnabled);
    }

    /**
     * Resource name
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Resource name
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Basic network, or Standard features available to the volume.
     * 
     */
    @Import(name="networkFeatures")
    private @Nullable Output<Either<String,NetworkFeatures>> networkFeatures;

    /**
     * @return Basic network, or Standard features available to the volume.
     * 
     */
    public Optional<Output<Either<String,NetworkFeatures>>> networkFeatures() {
        return Optional.ofNullable(this.networkFeatures);
    }

    /**
     * Application specific placement rules for the particular volume
     * 
     */
    @Import(name="placementRules")
    private @Nullable Output<List<PlacementKeyValuePairsArgs>> placementRules;

    /**
     * @return Application specific placement rules for the particular volume
     * 
     */
    public Optional<Output<List<PlacementKeyValuePairsArgs>>> placementRules() {
        return Optional.ofNullable(this.placementRules);
    }

    /**
     * Set of protocol types, default NFSv3, CIFS for SMB protocol
     * 
     */
    @Import(name="protocolTypes")
    private @Nullable Output<List<String>> protocolTypes;

    /**
     * @return Set of protocol types, default NFSv3, CIFS for SMB protocol
     * 
     */
    public Optional<Output<List<String>>> protocolTypes() {
        return Optional.ofNullable(this.protocolTypes);
    }

    /**
     * Proximity placement group associated with the volume
     * 
     */
    @Import(name="proximityPlacementGroup")
    private @Nullable Output<String> proximityPlacementGroup;

    /**
     * @return Proximity placement group associated with the volume
     * 
     */
    public Optional<Output<String>> proximityPlacementGroup() {
        return Optional.ofNullable(this.proximityPlacementGroup);
    }

    /**
     * The security style of volume, default unix, defaults to ntfs for dual protocol or CIFS protocol
     * 
     */
    @Import(name="securityStyle")
    private @Nullable Output<Either<String,SecurityStyle>> securityStyle;

    /**
     * @return The security style of volume, default unix, defaults to ntfs for dual protocol or CIFS protocol
     * 
     */
    public Optional<Output<Either<String,SecurityStyle>>> securityStyle() {
        return Optional.ofNullable(this.securityStyle);
    }

    /**
     * The service level of the file system
     * 
     */
    @Import(name="serviceLevel")
    private @Nullable Output<Either<String,ServiceLevel>> serviceLevel;

    /**
     * @return The service level of the file system
     * 
     */
    public Optional<Output<Either<String,ServiceLevel>>> serviceLevel() {
        return Optional.ofNullable(this.serviceLevel);
    }

    /**
     * Enables continuously available share property for smb volume. Only applicable for SMB volume
     * 
     */
    @Import(name="smbContinuouslyAvailable")
    private @Nullable Output<Boolean> smbContinuouslyAvailable;

    /**
     * @return Enables continuously available share property for smb volume. Only applicable for SMB volume
     * 
     */
    public Optional<Output<Boolean>> smbContinuouslyAvailable() {
        return Optional.ofNullable(this.smbContinuouslyAvailable);
    }

    /**
     * Enables encryption for in-flight smb3 data. Only applicable for SMB/DualProtocol volume. To be used with swagger version 2020-08-01 or later
     * 
     */
    @Import(name="smbEncryption")
    private @Nullable Output<Boolean> smbEncryption;

    /**
     * @return Enables encryption for in-flight smb3 data. Only applicable for SMB/DualProtocol volume. To be used with swagger version 2020-08-01 or later
     * 
     */
    public Optional<Output<Boolean>> smbEncryption() {
        return Optional.ofNullable(this.smbEncryption);
    }

    /**
     * If enabled (true) the volume will contain a read-only snapshot directory which provides access to each of the volume&#39;s snapshots (default to true).
     * 
     */
    @Import(name="snapshotDirectoryVisible")
    private @Nullable Output<Boolean> snapshotDirectoryVisible;

    /**
     * @return If enabled (true) the volume will contain a read-only snapshot directory which provides access to each of the volume&#39;s snapshots (default to true).
     * 
     */
    public Optional<Output<Boolean>> snapshotDirectoryVisible() {
        return Optional.ofNullable(this.snapshotDirectoryVisible);
    }

    /**
     * UUID v4 or resource identifier used to identify the Snapshot.
     * 
     */
    @Import(name="snapshotId")
    private @Nullable Output<String> snapshotId;

    /**
     * @return UUID v4 or resource identifier used to identify the Snapshot.
     * 
     */
    public Optional<Output<String>> snapshotId() {
        return Optional.ofNullable(this.snapshotId);
    }

    /**
     * The Azure Resource URI for a delegated subnet. Must have the delegation Microsoft.NetApp/volumes
     * 
     */
    @Import(name="subnetId", required=true)
    private Output<String> subnetId;

    /**
     * @return The Azure Resource URI for a delegated subnet. Must have the delegation Microsoft.NetApp/volumes
     * 
     */
    public Output<String> subnetId() {
        return this.subnetId;
    }

    /**
     * Resource tags
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Resource tags
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="throughputMibps")
    private @Nullable Output<Double> throughputMibps;

    public Optional<Output<Double>> throughputMibps() {
        return Optional.ofNullable(this.throughputMibps);
    }

    /**
     * UNIX permissions for NFS volume accepted in octal 4 digit format. First digit selects the set user ID(4), set group ID (2) and sticky (1) attributes. Second digit selects permission for the owner of the file: read (4), write (2) and execute (1). Third selects permissions for other users in the same group. the fourth for other users not in the group. 0755 - gives read/write/execute permissions to owner and read/execute to group and other users.
     * 
     */
    @Import(name="unixPermissions")
    private @Nullable Output<String> unixPermissions;

    /**
     * @return UNIX permissions for NFS volume accepted in octal 4 digit format. First digit selects the set user ID(4), set group ID (2) and sticky (1) attributes. Second digit selects permission for the owner of the file: read (4), write (2) and execute (1). Third selects permissions for other users in the same group. the fourth for other users not in the group. 0755 - gives read/write/execute permissions to owner and read/execute to group and other users.
     * 
     */
    public Optional<Output<String>> unixPermissions() {
        return Optional.ofNullable(this.unixPermissions);
    }

    /**
     * Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB. Specified in bytes.
     * 
     */
    @Import(name="usageThreshold", required=true)
    private Output<Double> usageThreshold;

    /**
     * @return Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB. Specified in bytes.
     * 
     */
    public Output<Double> usageThreshold() {
        return this.usageThreshold;
    }

    /**
     * Volume spec name is the application specific designation or identifier for the particular volume in a volume group for e.g. data, log
     * 
     */
    @Import(name="volumeSpecName")
    private @Nullable Output<String> volumeSpecName;

    /**
     * @return Volume spec name is the application specific designation or identifier for the particular volume in a volume group for e.g. data, log
     * 
     */
    public Optional<Output<String>> volumeSpecName() {
        return Optional.ofNullable(this.volumeSpecName);
    }

    /**
     * What type of volume is this. For destination volumes in Cross Region Replication, set type to DataProtection
     * 
     */
    @Import(name="volumeType")
    private @Nullable Output<String> volumeType;

    /**
     * @return What type of volume is this. For destination volumes in Cross Region Replication, set type to DataProtection
     * 
     */
    public Optional<Output<String>> volumeType() {
        return Optional.ofNullable(this.volumeType);
    }

    private VolumeGroupVolumePropertiesArgs() {}

    private VolumeGroupVolumePropertiesArgs(VolumeGroupVolumePropertiesArgs $) {
        this.avsDataStore = $.avsDataStore;
        this.backupId = $.backupId;
        this.capacityPoolResourceId = $.capacityPoolResourceId;
        this.coolAccess = $.coolAccess;
        this.coolnessPeriod = $.coolnessPeriod;
        this.creationToken = $.creationToken;
        this.dataProtection = $.dataProtection;
        this.defaultGroupQuotaInKiBs = $.defaultGroupQuotaInKiBs;
        this.defaultUserQuotaInKiBs = $.defaultUserQuotaInKiBs;
        this.enableSubvolumes = $.enableSubvolumes;
        this.encryptionKeySource = $.encryptionKeySource;
        this.exportPolicy = $.exportPolicy;
        this.isDefaultQuotaEnabled = $.isDefaultQuotaEnabled;
        this.isRestoring = $.isRestoring;
        this.kerberosEnabled = $.kerberosEnabled;
        this.ldapEnabled = $.ldapEnabled;
        this.name = $.name;
        this.networkFeatures = $.networkFeatures;
        this.placementRules = $.placementRules;
        this.protocolTypes = $.protocolTypes;
        this.proximityPlacementGroup = $.proximityPlacementGroup;
        this.securityStyle = $.securityStyle;
        this.serviceLevel = $.serviceLevel;
        this.smbContinuouslyAvailable = $.smbContinuouslyAvailable;
        this.smbEncryption = $.smbEncryption;
        this.snapshotDirectoryVisible = $.snapshotDirectoryVisible;
        this.snapshotId = $.snapshotId;
        this.subnetId = $.subnetId;
        this.tags = $.tags;
        this.throughputMibps = $.throughputMibps;
        this.unixPermissions = $.unixPermissions;
        this.usageThreshold = $.usageThreshold;
        this.volumeSpecName = $.volumeSpecName;
        this.volumeType = $.volumeType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VolumeGroupVolumePropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VolumeGroupVolumePropertiesArgs $;

        public Builder() {
            $ = new VolumeGroupVolumePropertiesArgs();
        }

        public Builder(VolumeGroupVolumePropertiesArgs defaults) {
            $ = new VolumeGroupVolumePropertiesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param avsDataStore Specifies whether the volume is enabled for Azure VMware Solution (AVS) datastore purpose
         * 
         * @return builder
         * 
         */
        public Builder avsDataStore(@Nullable Output<Either<String,AvsDataStore>> avsDataStore) {
            $.avsDataStore = avsDataStore;
            return this;
        }

        /**
         * @param avsDataStore Specifies whether the volume is enabled for Azure VMware Solution (AVS) datastore purpose
         * 
         * @return builder
         * 
         */
        public Builder avsDataStore(Either<String,AvsDataStore> avsDataStore) {
            return avsDataStore(Output.of(avsDataStore));
        }

        /**
         * @param avsDataStore Specifies whether the volume is enabled for Azure VMware Solution (AVS) datastore purpose
         * 
         * @return builder
         * 
         */
        public Builder avsDataStore(String avsDataStore) {
            return avsDataStore(Either.ofLeft(avsDataStore));
        }

        /**
         * @param avsDataStore Specifies whether the volume is enabled for Azure VMware Solution (AVS) datastore purpose
         * 
         * @return builder
         * 
         */
        public Builder avsDataStore(AvsDataStore avsDataStore) {
            return avsDataStore(Either.ofRight(avsDataStore));
        }

        /**
         * @param backupId UUID v4 or resource identifier used to identify the Backup.
         * 
         * @return builder
         * 
         */
        public Builder backupId(@Nullable Output<String> backupId) {
            $.backupId = backupId;
            return this;
        }

        /**
         * @param backupId UUID v4 or resource identifier used to identify the Backup.
         * 
         * @return builder
         * 
         */
        public Builder backupId(String backupId) {
            return backupId(Output.of(backupId));
        }

        /**
         * @param capacityPoolResourceId Pool Resource Id used in case of creating a volume through volume group
         * 
         * @return builder
         * 
         */
        public Builder capacityPoolResourceId(@Nullable Output<String> capacityPoolResourceId) {
            $.capacityPoolResourceId = capacityPoolResourceId;
            return this;
        }

        /**
         * @param capacityPoolResourceId Pool Resource Id used in case of creating a volume through volume group
         * 
         * @return builder
         * 
         */
        public Builder capacityPoolResourceId(String capacityPoolResourceId) {
            return capacityPoolResourceId(Output.of(capacityPoolResourceId));
        }

        /**
         * @param coolAccess Specifies whether Cool Access(tiering) is enabled for the volume.
         * 
         * @return builder
         * 
         */
        public Builder coolAccess(@Nullable Output<Boolean> coolAccess) {
            $.coolAccess = coolAccess;
            return this;
        }

        /**
         * @param coolAccess Specifies whether Cool Access(tiering) is enabled for the volume.
         * 
         * @return builder
         * 
         */
        public Builder coolAccess(Boolean coolAccess) {
            return coolAccess(Output.of(coolAccess));
        }

        /**
         * @param coolnessPeriod Specifies the number of days after which data that is not accessed by clients will be tiered.
         * 
         * @return builder
         * 
         */
        public Builder coolnessPeriod(@Nullable Output<Integer> coolnessPeriod) {
            $.coolnessPeriod = coolnessPeriod;
            return this;
        }

        /**
         * @param coolnessPeriod Specifies the number of days after which data that is not accessed by clients will be tiered.
         * 
         * @return builder
         * 
         */
        public Builder coolnessPeriod(Integer coolnessPeriod) {
            return coolnessPeriod(Output.of(coolnessPeriod));
        }

        /**
         * @param creationToken A unique file path for the volume. Used when creating mount targets
         * 
         * @return builder
         * 
         */
        public Builder creationToken(Output<String> creationToken) {
            $.creationToken = creationToken;
            return this;
        }

        /**
         * @param creationToken A unique file path for the volume. Used when creating mount targets
         * 
         * @return builder
         * 
         */
        public Builder creationToken(String creationToken) {
            return creationToken(Output.of(creationToken));
        }

        /**
         * @param dataProtection DataProtection type volumes include an object containing details of the replication
         * 
         * @return builder
         * 
         */
        public Builder dataProtection(@Nullable Output<VolumePropertiesDataProtectionArgs> dataProtection) {
            $.dataProtection = dataProtection;
            return this;
        }

        /**
         * @param dataProtection DataProtection type volumes include an object containing details of the replication
         * 
         * @return builder
         * 
         */
        public Builder dataProtection(VolumePropertiesDataProtectionArgs dataProtection) {
            return dataProtection(Output.of(dataProtection));
        }

        /**
         * @param defaultGroupQuotaInKiBs Default group quota for volume in KiBs. If isDefaultQuotaEnabled is set, the minimum value of 4 KiBs applies.
         * 
         * @return builder
         * 
         */
        public Builder defaultGroupQuotaInKiBs(@Nullable Output<Double> defaultGroupQuotaInKiBs) {
            $.defaultGroupQuotaInKiBs = defaultGroupQuotaInKiBs;
            return this;
        }

        /**
         * @param defaultGroupQuotaInKiBs Default group quota for volume in KiBs. If isDefaultQuotaEnabled is set, the minimum value of 4 KiBs applies.
         * 
         * @return builder
         * 
         */
        public Builder defaultGroupQuotaInKiBs(Double defaultGroupQuotaInKiBs) {
            return defaultGroupQuotaInKiBs(Output.of(defaultGroupQuotaInKiBs));
        }

        /**
         * @param defaultUserQuotaInKiBs Default user quota for volume in KiBs. If isDefaultQuotaEnabled is set, the minimum value of 4 KiBs applies .
         * 
         * @return builder
         * 
         */
        public Builder defaultUserQuotaInKiBs(@Nullable Output<Double> defaultUserQuotaInKiBs) {
            $.defaultUserQuotaInKiBs = defaultUserQuotaInKiBs;
            return this;
        }

        /**
         * @param defaultUserQuotaInKiBs Default user quota for volume in KiBs. If isDefaultQuotaEnabled is set, the minimum value of 4 KiBs applies .
         * 
         * @return builder
         * 
         */
        public Builder defaultUserQuotaInKiBs(Double defaultUserQuotaInKiBs) {
            return defaultUserQuotaInKiBs(Output.of(defaultUserQuotaInKiBs));
        }

        /**
         * @param enableSubvolumes Flag indicating whether subvolume operations are enabled on the volume
         * 
         * @return builder
         * 
         */
        public Builder enableSubvolumes(@Nullable Output<Either<String,EnableSubvolumes>> enableSubvolumes) {
            $.enableSubvolumes = enableSubvolumes;
            return this;
        }

        /**
         * @param enableSubvolumes Flag indicating whether subvolume operations are enabled on the volume
         * 
         * @return builder
         * 
         */
        public Builder enableSubvolumes(Either<String,EnableSubvolumes> enableSubvolumes) {
            return enableSubvolumes(Output.of(enableSubvolumes));
        }

        /**
         * @param enableSubvolumes Flag indicating whether subvolume operations are enabled on the volume
         * 
         * @return builder
         * 
         */
        public Builder enableSubvolumes(String enableSubvolumes) {
            return enableSubvolumes(Either.ofLeft(enableSubvolumes));
        }

        /**
         * @param enableSubvolumes Flag indicating whether subvolume operations are enabled on the volume
         * 
         * @return builder
         * 
         */
        public Builder enableSubvolumes(EnableSubvolumes enableSubvolumes) {
            return enableSubvolumes(Either.ofRight(enableSubvolumes));
        }

        /**
         * @param encryptionKeySource Encryption Key Source. Possible values are: &#39;Microsoft.NetApp&#39;
         * 
         * @return builder
         * 
         */
        public Builder encryptionKeySource(@Nullable Output<String> encryptionKeySource) {
            $.encryptionKeySource = encryptionKeySource;
            return this;
        }

        /**
         * @param encryptionKeySource Encryption Key Source. Possible values are: &#39;Microsoft.NetApp&#39;
         * 
         * @return builder
         * 
         */
        public Builder encryptionKeySource(String encryptionKeySource) {
            return encryptionKeySource(Output.of(encryptionKeySource));
        }

        /**
         * @param exportPolicy Set of export policy rules
         * 
         * @return builder
         * 
         */
        public Builder exportPolicy(@Nullable Output<VolumePropertiesExportPolicyArgs> exportPolicy) {
            $.exportPolicy = exportPolicy;
            return this;
        }

        /**
         * @param exportPolicy Set of export policy rules
         * 
         * @return builder
         * 
         */
        public Builder exportPolicy(VolumePropertiesExportPolicyArgs exportPolicy) {
            return exportPolicy(Output.of(exportPolicy));
        }

        /**
         * @param isDefaultQuotaEnabled Specifies if default quota is enabled for the volume.
         * 
         * @return builder
         * 
         */
        public Builder isDefaultQuotaEnabled(@Nullable Output<Boolean> isDefaultQuotaEnabled) {
            $.isDefaultQuotaEnabled = isDefaultQuotaEnabled;
            return this;
        }

        /**
         * @param isDefaultQuotaEnabled Specifies if default quota is enabled for the volume.
         * 
         * @return builder
         * 
         */
        public Builder isDefaultQuotaEnabled(Boolean isDefaultQuotaEnabled) {
            return isDefaultQuotaEnabled(Output.of(isDefaultQuotaEnabled));
        }

        /**
         * @param isRestoring Restoring
         * 
         * @return builder
         * 
         */
        public Builder isRestoring(@Nullable Output<Boolean> isRestoring) {
            $.isRestoring = isRestoring;
            return this;
        }

        /**
         * @param isRestoring Restoring
         * 
         * @return builder
         * 
         */
        public Builder isRestoring(Boolean isRestoring) {
            return isRestoring(Output.of(isRestoring));
        }

        /**
         * @param kerberosEnabled Describe if a volume is KerberosEnabled. To be use with swagger version 2020-05-01 or later
         * 
         * @return builder
         * 
         */
        public Builder kerberosEnabled(@Nullable Output<Boolean> kerberosEnabled) {
            $.kerberosEnabled = kerberosEnabled;
            return this;
        }

        /**
         * @param kerberosEnabled Describe if a volume is KerberosEnabled. To be use with swagger version 2020-05-01 or later
         * 
         * @return builder
         * 
         */
        public Builder kerberosEnabled(Boolean kerberosEnabled) {
            return kerberosEnabled(Output.of(kerberosEnabled));
        }

        /**
         * @param ldapEnabled Specifies whether LDAP is enabled or not for a given NFS volume.
         * 
         * @return builder
         * 
         */
        public Builder ldapEnabled(@Nullable Output<Boolean> ldapEnabled) {
            $.ldapEnabled = ldapEnabled;
            return this;
        }

        /**
         * @param ldapEnabled Specifies whether LDAP is enabled or not for a given NFS volume.
         * 
         * @return builder
         * 
         */
        public Builder ldapEnabled(Boolean ldapEnabled) {
            return ldapEnabled(Output.of(ldapEnabled));
        }

        /**
         * @param name Resource name
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Resource name
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networkFeatures Basic network, or Standard features available to the volume.
         * 
         * @return builder
         * 
         */
        public Builder networkFeatures(@Nullable Output<Either<String,NetworkFeatures>> networkFeatures) {
            $.networkFeatures = networkFeatures;
            return this;
        }

        /**
         * @param networkFeatures Basic network, or Standard features available to the volume.
         * 
         * @return builder
         * 
         */
        public Builder networkFeatures(Either<String,NetworkFeatures> networkFeatures) {
            return networkFeatures(Output.of(networkFeatures));
        }

        /**
         * @param networkFeatures Basic network, or Standard features available to the volume.
         * 
         * @return builder
         * 
         */
        public Builder networkFeatures(String networkFeatures) {
            return networkFeatures(Either.ofLeft(networkFeatures));
        }

        /**
         * @param networkFeatures Basic network, or Standard features available to the volume.
         * 
         * @return builder
         * 
         */
        public Builder networkFeatures(NetworkFeatures networkFeatures) {
            return networkFeatures(Either.ofRight(networkFeatures));
        }

        /**
         * @param placementRules Application specific placement rules for the particular volume
         * 
         * @return builder
         * 
         */
        public Builder placementRules(@Nullable Output<List<PlacementKeyValuePairsArgs>> placementRules) {
            $.placementRules = placementRules;
            return this;
        }

        /**
         * @param placementRules Application specific placement rules for the particular volume
         * 
         * @return builder
         * 
         */
        public Builder placementRules(List<PlacementKeyValuePairsArgs> placementRules) {
            return placementRules(Output.of(placementRules));
        }

        /**
         * @param placementRules Application specific placement rules for the particular volume
         * 
         * @return builder
         * 
         */
        public Builder placementRules(PlacementKeyValuePairsArgs... placementRules) {
            return placementRules(List.of(placementRules));
        }

        /**
         * @param protocolTypes Set of protocol types, default NFSv3, CIFS for SMB protocol
         * 
         * @return builder
         * 
         */
        public Builder protocolTypes(@Nullable Output<List<String>> protocolTypes) {
            $.protocolTypes = protocolTypes;
            return this;
        }

        /**
         * @param protocolTypes Set of protocol types, default NFSv3, CIFS for SMB protocol
         * 
         * @return builder
         * 
         */
        public Builder protocolTypes(List<String> protocolTypes) {
            return protocolTypes(Output.of(protocolTypes));
        }

        /**
         * @param protocolTypes Set of protocol types, default NFSv3, CIFS for SMB protocol
         * 
         * @return builder
         * 
         */
        public Builder protocolTypes(String... protocolTypes) {
            return protocolTypes(List.of(protocolTypes));
        }

        /**
         * @param proximityPlacementGroup Proximity placement group associated with the volume
         * 
         * @return builder
         * 
         */
        public Builder proximityPlacementGroup(@Nullable Output<String> proximityPlacementGroup) {
            $.proximityPlacementGroup = proximityPlacementGroup;
            return this;
        }

        /**
         * @param proximityPlacementGroup Proximity placement group associated with the volume
         * 
         * @return builder
         * 
         */
        public Builder proximityPlacementGroup(String proximityPlacementGroup) {
            return proximityPlacementGroup(Output.of(proximityPlacementGroup));
        }

        /**
         * @param securityStyle The security style of volume, default unix, defaults to ntfs for dual protocol or CIFS protocol
         * 
         * @return builder
         * 
         */
        public Builder securityStyle(@Nullable Output<Either<String,SecurityStyle>> securityStyle) {
            $.securityStyle = securityStyle;
            return this;
        }

        /**
         * @param securityStyle The security style of volume, default unix, defaults to ntfs for dual protocol or CIFS protocol
         * 
         * @return builder
         * 
         */
        public Builder securityStyle(Either<String,SecurityStyle> securityStyle) {
            return securityStyle(Output.of(securityStyle));
        }

        /**
         * @param securityStyle The security style of volume, default unix, defaults to ntfs for dual protocol or CIFS protocol
         * 
         * @return builder
         * 
         */
        public Builder securityStyle(String securityStyle) {
            return securityStyle(Either.ofLeft(securityStyle));
        }

        /**
         * @param securityStyle The security style of volume, default unix, defaults to ntfs for dual protocol or CIFS protocol
         * 
         * @return builder
         * 
         */
        public Builder securityStyle(SecurityStyle securityStyle) {
            return securityStyle(Either.ofRight(securityStyle));
        }

        /**
         * @param serviceLevel The service level of the file system
         * 
         * @return builder
         * 
         */
        public Builder serviceLevel(@Nullable Output<Either<String,ServiceLevel>> serviceLevel) {
            $.serviceLevel = serviceLevel;
            return this;
        }

        /**
         * @param serviceLevel The service level of the file system
         * 
         * @return builder
         * 
         */
        public Builder serviceLevel(Either<String,ServiceLevel> serviceLevel) {
            return serviceLevel(Output.of(serviceLevel));
        }

        /**
         * @param serviceLevel The service level of the file system
         * 
         * @return builder
         * 
         */
        public Builder serviceLevel(String serviceLevel) {
            return serviceLevel(Either.ofLeft(serviceLevel));
        }

        /**
         * @param serviceLevel The service level of the file system
         * 
         * @return builder
         * 
         */
        public Builder serviceLevel(ServiceLevel serviceLevel) {
            return serviceLevel(Either.ofRight(serviceLevel));
        }

        /**
         * @param smbContinuouslyAvailable Enables continuously available share property for smb volume. Only applicable for SMB volume
         * 
         * @return builder
         * 
         */
        public Builder smbContinuouslyAvailable(@Nullable Output<Boolean> smbContinuouslyAvailable) {
            $.smbContinuouslyAvailable = smbContinuouslyAvailable;
            return this;
        }

        /**
         * @param smbContinuouslyAvailable Enables continuously available share property for smb volume. Only applicable for SMB volume
         * 
         * @return builder
         * 
         */
        public Builder smbContinuouslyAvailable(Boolean smbContinuouslyAvailable) {
            return smbContinuouslyAvailable(Output.of(smbContinuouslyAvailable));
        }

        /**
         * @param smbEncryption Enables encryption for in-flight smb3 data. Only applicable for SMB/DualProtocol volume. To be used with swagger version 2020-08-01 or later
         * 
         * @return builder
         * 
         */
        public Builder smbEncryption(@Nullable Output<Boolean> smbEncryption) {
            $.smbEncryption = smbEncryption;
            return this;
        }

        /**
         * @param smbEncryption Enables encryption for in-flight smb3 data. Only applicable for SMB/DualProtocol volume. To be used with swagger version 2020-08-01 or later
         * 
         * @return builder
         * 
         */
        public Builder smbEncryption(Boolean smbEncryption) {
            return smbEncryption(Output.of(smbEncryption));
        }

        /**
         * @param snapshotDirectoryVisible If enabled (true) the volume will contain a read-only snapshot directory which provides access to each of the volume&#39;s snapshots (default to true).
         * 
         * @return builder
         * 
         */
        public Builder snapshotDirectoryVisible(@Nullable Output<Boolean> snapshotDirectoryVisible) {
            $.snapshotDirectoryVisible = snapshotDirectoryVisible;
            return this;
        }

        /**
         * @param snapshotDirectoryVisible If enabled (true) the volume will contain a read-only snapshot directory which provides access to each of the volume&#39;s snapshots (default to true).
         * 
         * @return builder
         * 
         */
        public Builder snapshotDirectoryVisible(Boolean snapshotDirectoryVisible) {
            return snapshotDirectoryVisible(Output.of(snapshotDirectoryVisible));
        }

        /**
         * @param snapshotId UUID v4 or resource identifier used to identify the Snapshot.
         * 
         * @return builder
         * 
         */
        public Builder snapshotId(@Nullable Output<String> snapshotId) {
            $.snapshotId = snapshotId;
            return this;
        }

        /**
         * @param snapshotId UUID v4 or resource identifier used to identify the Snapshot.
         * 
         * @return builder
         * 
         */
        public Builder snapshotId(String snapshotId) {
            return snapshotId(Output.of(snapshotId));
        }

        /**
         * @param subnetId The Azure Resource URI for a delegated subnet. Must have the delegation Microsoft.NetApp/volumes
         * 
         * @return builder
         * 
         */
        public Builder subnetId(Output<String> subnetId) {
            $.subnetId = subnetId;
            return this;
        }

        /**
         * @param subnetId The Azure Resource URI for a delegated subnet. Must have the delegation Microsoft.NetApp/volumes
         * 
         * @return builder
         * 
         */
        public Builder subnetId(String subnetId) {
            return subnetId(Output.of(subnetId));
        }

        /**
         * @param tags Resource tags
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Resource tags
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder throughputMibps(@Nullable Output<Double> throughputMibps) {
            $.throughputMibps = throughputMibps;
            return this;
        }

        public Builder throughputMibps(Double throughputMibps) {
            return throughputMibps(Output.of(throughputMibps));
        }

        /**
         * @param unixPermissions UNIX permissions for NFS volume accepted in octal 4 digit format. First digit selects the set user ID(4), set group ID (2) and sticky (1) attributes. Second digit selects permission for the owner of the file: read (4), write (2) and execute (1). Third selects permissions for other users in the same group. the fourth for other users not in the group. 0755 - gives read/write/execute permissions to owner and read/execute to group and other users.
         * 
         * @return builder
         * 
         */
        public Builder unixPermissions(@Nullable Output<String> unixPermissions) {
            $.unixPermissions = unixPermissions;
            return this;
        }

        /**
         * @param unixPermissions UNIX permissions for NFS volume accepted in octal 4 digit format. First digit selects the set user ID(4), set group ID (2) and sticky (1) attributes. Second digit selects permission for the owner of the file: read (4), write (2) and execute (1). Third selects permissions for other users in the same group. the fourth for other users not in the group. 0755 - gives read/write/execute permissions to owner and read/execute to group and other users.
         * 
         * @return builder
         * 
         */
        public Builder unixPermissions(String unixPermissions) {
            return unixPermissions(Output.of(unixPermissions));
        }

        /**
         * @param usageThreshold Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB. Specified in bytes.
         * 
         * @return builder
         * 
         */
        public Builder usageThreshold(Output<Double> usageThreshold) {
            $.usageThreshold = usageThreshold;
            return this;
        }

        /**
         * @param usageThreshold Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB. Specified in bytes.
         * 
         * @return builder
         * 
         */
        public Builder usageThreshold(Double usageThreshold) {
            return usageThreshold(Output.of(usageThreshold));
        }

        /**
         * @param volumeSpecName Volume spec name is the application specific designation or identifier for the particular volume in a volume group for e.g. data, log
         * 
         * @return builder
         * 
         */
        public Builder volumeSpecName(@Nullable Output<String> volumeSpecName) {
            $.volumeSpecName = volumeSpecName;
            return this;
        }

        /**
         * @param volumeSpecName Volume spec name is the application specific designation or identifier for the particular volume in a volume group for e.g. data, log
         * 
         * @return builder
         * 
         */
        public Builder volumeSpecName(String volumeSpecName) {
            return volumeSpecName(Output.of(volumeSpecName));
        }

        /**
         * @param volumeType What type of volume is this. For destination volumes in Cross Region Replication, set type to DataProtection
         * 
         * @return builder
         * 
         */
        public Builder volumeType(@Nullable Output<String> volumeType) {
            $.volumeType = volumeType;
            return this;
        }

        /**
         * @param volumeType What type of volume is this. For destination volumes in Cross Region Replication, set type to DataProtection
         * 
         * @return builder
         * 
         */
        public Builder volumeType(String volumeType) {
            return volumeType(Output.of(volumeType));
        }

        public VolumeGroupVolumePropertiesArgs build() {
            $.avsDataStore = Codegen.stringProp("avsDataStore").left(AvsDataStore.class).output().arg($.avsDataStore).def("Disabled").getNullable();
            $.coolAccess = Codegen.booleanProp("coolAccess").output().arg($.coolAccess).def(false).getNullable();
            $.creationToken = Objects.requireNonNull($.creationToken, "expected parameter 'creationToken' to be non-null");
            $.defaultGroupQuotaInKiBs = Codegen.doubleProp("defaultGroupQuotaInKiBs").output().arg($.defaultGroupQuotaInKiBs).def(0e+00).getNullable();
            $.defaultUserQuotaInKiBs = Codegen.doubleProp("defaultUserQuotaInKiBs").output().arg($.defaultUserQuotaInKiBs).def(0e+00).getNullable();
            $.enableSubvolumes = Codegen.stringProp("enableSubvolumes").left(EnableSubvolumes.class).output().arg($.enableSubvolumes).def("Disabled").getNullable();
            $.isDefaultQuotaEnabled = Codegen.booleanProp("isDefaultQuotaEnabled").output().arg($.isDefaultQuotaEnabled).def(false).getNullable();
            $.kerberosEnabled = Codegen.booleanProp("kerberosEnabled").output().arg($.kerberosEnabled).def(false).getNullable();
            $.ldapEnabled = Codegen.booleanProp("ldapEnabled").output().arg($.ldapEnabled).def(false).getNullable();
            $.networkFeatures = Codegen.stringProp("networkFeatures").left(NetworkFeatures.class).output().arg($.networkFeatures).def("Basic").getNullable();
            $.securityStyle = Codegen.stringProp("securityStyle").left(SecurityStyle.class).output().arg($.securityStyle).def("unix").getNullable();
            $.smbContinuouslyAvailable = Codegen.booleanProp("smbContinuouslyAvailable").output().arg($.smbContinuouslyAvailable).def(false).getNullable();
            $.smbEncryption = Codegen.booleanProp("smbEncryption").output().arg($.smbEncryption).def(false).getNullable();
            $.snapshotDirectoryVisible = Codegen.booleanProp("snapshotDirectoryVisible").output().arg($.snapshotDirectoryVisible).def(true).getNullable();
            $.subnetId = Objects.requireNonNull($.subnetId, "expected parameter 'subnetId' to be non-null");
            $.throughputMibps = Codegen.doubleProp("throughputMibps").output().arg($.throughputMibps).def(0e+00).getNullable();
            $.unixPermissions = Codegen.stringProp("unixPermissions").output().arg($.unixPermissions).def("0770").getNullable();
            $.usageThreshold = Codegen.doubleProp("usageThreshold").output().arg($.usageThreshold).def(1.073741824e+11).require();
            return $;
        }
    }

}
