// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.deploymentmanager.outputs;

import com.pulumi.azurenative.deploymentmanager.outputs.IdentityResponse;
import com.pulumi.azurenative.deploymentmanager.outputs.RolloutOperationInfoResponse;
import com.pulumi.azurenative.deploymentmanager.outputs.ServiceResponse;
import com.pulumi.azurenative.deploymentmanager.outputs.StepGroupResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetRolloutResult {
    /**
     * @return The reference to the artifact source resource Id where the payload is located.
     * 
     */
    private final @Nullable String artifactSourceId;
    /**
     * @return The version of the build being deployed.
     * 
     */
    private final String buildVersion;
    /**
     * @return Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * 
     */
    private final String id;
    /**
     * @return Identity for the resource.
     * 
     */
    private final @Nullable IdentityResponse identity;
    /**
     * @return The geo-location where the resource lives
     * 
     */
    private final String location;
    /**
     * @return The name of the resource
     * 
     */
    private final String name;
    /**
     * @return Operational information of the rollout.
     * 
     */
    private final RolloutOperationInfoResponse operationInfo;
    /**
     * @return The detailed information on the services being deployed.
     * 
     */
    private final List<ServiceResponse> services;
    /**
     * @return The current status of the rollout.
     * 
     */
    private final String status;
    /**
     * @return The list of step groups that define the orchestration.
     * 
     */
    private final List<StepGroupResponse> stepGroups;
    /**
     * @return Resource tags.
     * 
     */
    private final @Nullable Map<String,String> tags;
    /**
     * @return The resource Id of the service topology from which service units are being referenced in step groups to be deployed.
     * 
     */
    private final String targetServiceTopologyId;
    /**
     * @return The cardinal count of total number of retries performed on the rollout at a given time.
     * 
     */
    private final Integer totalRetryAttempts;
    /**
     * @return The type of the resource. E.g. &#34;Microsoft.Compute/virtualMachines&#34; or &#34;Microsoft.Storage/storageAccounts&#34;
     * 
     */
    private final String type;

    @CustomType.Constructor
    private GetRolloutResult(
        @CustomType.Parameter("artifactSourceId") @Nullable String artifactSourceId,
        @CustomType.Parameter("buildVersion") String buildVersion,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("identity") @Nullable IdentityResponse identity,
        @CustomType.Parameter("location") String location,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("operationInfo") RolloutOperationInfoResponse operationInfo,
        @CustomType.Parameter("services") List<ServiceResponse> services,
        @CustomType.Parameter("status") String status,
        @CustomType.Parameter("stepGroups") List<StepGroupResponse> stepGroups,
        @CustomType.Parameter("tags") @Nullable Map<String,String> tags,
        @CustomType.Parameter("targetServiceTopologyId") String targetServiceTopologyId,
        @CustomType.Parameter("totalRetryAttempts") Integer totalRetryAttempts,
        @CustomType.Parameter("type") String type) {
        this.artifactSourceId = artifactSourceId;
        this.buildVersion = buildVersion;
        this.id = id;
        this.identity = identity;
        this.location = location;
        this.name = name;
        this.operationInfo = operationInfo;
        this.services = services;
        this.status = status;
        this.stepGroups = stepGroups;
        this.tags = tags;
        this.targetServiceTopologyId = targetServiceTopologyId;
        this.totalRetryAttempts = totalRetryAttempts;
        this.type = type;
    }

    /**
     * @return The reference to the artifact source resource Id where the payload is located.
     * 
     */
    public Optional<String> artifactSourceId() {
        return Optional.ofNullable(this.artifactSourceId);
    }
    /**
     * @return The version of the build being deployed.
     * 
     */
    public String buildVersion() {
        return this.buildVersion;
    }
    /**
     * @return Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Identity for the resource.
     * 
     */
    public Optional<IdentityResponse> identity() {
        return Optional.ofNullable(this.identity);
    }
    /**
     * @return The geo-location where the resource lives
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return The name of the resource
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Operational information of the rollout.
     * 
     */
    public RolloutOperationInfoResponse operationInfo() {
        return this.operationInfo;
    }
    /**
     * @return The detailed information on the services being deployed.
     * 
     */
    public List<ServiceResponse> services() {
        return this.services;
    }
    /**
     * @return The current status of the rollout.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The list of step groups that define the orchestration.
     * 
     */
    public List<StepGroupResponse> stepGroups() {
        return this.stepGroups;
    }
    /**
     * @return Resource tags.
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return The resource Id of the service topology from which service units are being referenced in step groups to be deployed.
     * 
     */
    public String targetServiceTopologyId() {
        return this.targetServiceTopologyId;
    }
    /**
     * @return The cardinal count of total number of retries performed on the rollout at a given time.
     * 
     */
    public Integer totalRetryAttempts() {
        return this.totalRetryAttempts;
    }
    /**
     * @return The type of the resource. E.g. &#34;Microsoft.Compute/virtualMachines&#34; or &#34;Microsoft.Storage/storageAccounts&#34;
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRolloutResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String artifactSourceId;
        private String buildVersion;
        private String id;
        private @Nullable IdentityResponse identity;
        private String location;
        private String name;
        private RolloutOperationInfoResponse operationInfo;
        private List<ServiceResponse> services;
        private String status;
        private List<StepGroupResponse> stepGroups;
        private @Nullable Map<String,String> tags;
        private String targetServiceTopologyId;
        private Integer totalRetryAttempts;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(GetRolloutResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.artifactSourceId = defaults.artifactSourceId;
    	      this.buildVersion = defaults.buildVersion;
    	      this.id = defaults.id;
    	      this.identity = defaults.identity;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.operationInfo = defaults.operationInfo;
    	      this.services = defaults.services;
    	      this.status = defaults.status;
    	      this.stepGroups = defaults.stepGroups;
    	      this.tags = defaults.tags;
    	      this.targetServiceTopologyId = defaults.targetServiceTopologyId;
    	      this.totalRetryAttempts = defaults.totalRetryAttempts;
    	      this.type = defaults.type;
        }

        public Builder artifactSourceId(@Nullable String artifactSourceId) {
            this.artifactSourceId = artifactSourceId;
            return this;
        }
        public Builder buildVersion(String buildVersion) {
            this.buildVersion = Objects.requireNonNull(buildVersion);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder identity(@Nullable IdentityResponse identity) {
            this.identity = identity;
            return this;
        }
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder operationInfo(RolloutOperationInfoResponse operationInfo) {
            this.operationInfo = Objects.requireNonNull(operationInfo);
            return this;
        }
        public Builder services(List<ServiceResponse> services) {
            this.services = Objects.requireNonNull(services);
            return this;
        }
        public Builder services(ServiceResponse... services) {
            return services(List.of(services));
        }
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        public Builder stepGroups(List<StepGroupResponse> stepGroups) {
            this.stepGroups = Objects.requireNonNull(stepGroups);
            return this;
        }
        public Builder stepGroups(StepGroupResponse... stepGroups) {
            return stepGroups(List.of(stepGroups));
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        public Builder targetServiceTopologyId(String targetServiceTopologyId) {
            this.targetServiceTopologyId = Objects.requireNonNull(targetServiceTopologyId);
            return this;
        }
        public Builder totalRetryAttempts(Integer totalRetryAttempts) {
            this.totalRetryAttempts = Objects.requireNonNull(totalRetryAttempts);
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }        public GetRolloutResult build() {
            return new GetRolloutResult(artifactSourceId, buildVersion, id, identity, location, name, operationInfo, services, status, stepGroups, tags, targetServiceTopologyId, totalRetryAttempts, type);
        }
    }
}
