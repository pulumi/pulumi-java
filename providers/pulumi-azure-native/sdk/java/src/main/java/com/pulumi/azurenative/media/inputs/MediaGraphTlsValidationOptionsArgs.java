// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.media.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.util.Objects;


/**
 * Options for controlling the authentication of TLS endpoints.
 * 
 */
public final class MediaGraphTlsValidationOptionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final MediaGraphTlsValidationOptionsArgs Empty = new MediaGraphTlsValidationOptionsArgs();

    /**
     * Ignore the host name (common name) during validation.
     * 
     */
    @Import(name="ignoreHostname", required=true)
    private Output<Boolean> ignoreHostname;

    /**
     * @return Ignore the host name (common name) during validation.
     * 
     */
    public Output<Boolean> ignoreHostname() {
        return this.ignoreHostname;
    }

    /**
     * Ignore the integrity of the certificate chain at the current time.
     * 
     */
    @Import(name="ignoreSignature", required=true)
    private Output<Boolean> ignoreSignature;

    /**
     * @return Ignore the integrity of the certificate chain at the current time.
     * 
     */
    public Output<Boolean> ignoreSignature() {
        return this.ignoreSignature;
    }

    private MediaGraphTlsValidationOptionsArgs() {}

    private MediaGraphTlsValidationOptionsArgs(MediaGraphTlsValidationOptionsArgs $) {
        this.ignoreHostname = $.ignoreHostname;
        this.ignoreSignature = $.ignoreSignature;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MediaGraphTlsValidationOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MediaGraphTlsValidationOptionsArgs $;

        public Builder() {
            $ = new MediaGraphTlsValidationOptionsArgs();
        }

        public Builder(MediaGraphTlsValidationOptionsArgs defaults) {
            $ = new MediaGraphTlsValidationOptionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param ignoreHostname Ignore the host name (common name) during validation.
         * 
         * @return builder
         * 
         */
        public Builder ignoreHostname(Output<Boolean> ignoreHostname) {
            $.ignoreHostname = ignoreHostname;
            return this;
        }

        /**
         * @param ignoreHostname Ignore the host name (common name) during validation.
         * 
         * @return builder
         * 
         */
        public Builder ignoreHostname(Boolean ignoreHostname) {
            return ignoreHostname(Output.of(ignoreHostname));
        }

        /**
         * @param ignoreSignature Ignore the integrity of the certificate chain at the current time.
         * 
         * @return builder
         * 
         */
        public Builder ignoreSignature(Output<Boolean> ignoreSignature) {
            $.ignoreSignature = ignoreSignature;
            return this;
        }

        /**
         * @param ignoreSignature Ignore the integrity of the certificate chain at the current time.
         * 
         * @return builder
         * 
         */
        public Builder ignoreSignature(Boolean ignoreSignature) {
            return ignoreSignature(Output.of(ignoreSignature));
        }

        public MediaGraphTlsValidationOptionsArgs build() {
            $.ignoreHostname = Objects.requireNonNull($.ignoreHostname, "expected parameter 'ignoreHostname' to be non-null");
            $.ignoreSignature = Objects.requireNonNull($.ignoreSignature, "expected parameter 'ignoreSignature' to be non-null");
            return $;
        }
    }

}
