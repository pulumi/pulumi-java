// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.media.inputs;

import com.pulumi.azurenative.media.enums.AudioAnalysisMode;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The Audio Analyzer preset applies a pre-defined set of AI-based analysis operations, including speech transcription. Currently, the preset supports processing of content with a single audio track.
 * 
 */
public final class AudioAnalyzerPresetArgs extends com.pulumi.resources.ResourceArgs {

    public static final AudioAnalyzerPresetArgs Empty = new AudioAnalyzerPresetArgs();

    /**
     * The language for the audio payload in the input using the BCP-47 format of 'language tag-region' (e.g: 'en-US').  If you know the language of your content, it is recommended that you specify it. The language must be specified explicitly for AudioAnalysisMode::Basic, since automatic language detection is not included in basic mode. If the language isn't specified or set to null, automatic language detection will choose the first language detected and process with the selected language for the duration of the file. It does not currently support dynamically switching between languages after the first language is detected. The automatic detection works best with audio recordings with clearly discernable speech. If automatic detection fails to find the language, transcription would fallback to 'en-US'." The list of supported languages is available here: https://go.microsoft.com/fwlink/?linkid=2109463
     * 
     */
    @Import(name="audioLanguage")
      private final @Nullable Output<String> audioLanguage;

    public Output<String> audioLanguage() {
        return this.audioLanguage == null ? Codegen.empty() : this.audioLanguage;
    }

    /**
     * Dictionary containing key value pairs for parameters not exposed in the preset itself
     * 
     */
    @Import(name="experimentalOptions")
      private final @Nullable Output<Map<String,String>> experimentalOptions;

    public Output<Map<String,String>> experimentalOptions() {
        return this.experimentalOptions == null ? Codegen.empty() : this.experimentalOptions;
    }

    /**
     * Determines the set of audio analysis operations to be performed. If unspecified, the Standard AudioAnalysisMode would be chosen.
     * 
     */
    @Import(name="mode")
      private final @Nullable Output<Either<String,AudioAnalysisMode>> mode;

    public Output<Either<String,AudioAnalysisMode>> mode() {
        return this.mode == null ? Codegen.empty() : this.mode;
    }

    /**
     * The discriminator for derived types.
     * Expected value is '#Microsoft.Media.AudioAnalyzerPreset'.
     * 
     */
    @Import(name="odataType", required=true)
      private final Output<String> odataType;

    public Output<String> odataType() {
        return this.odataType;
    }

    public AudioAnalyzerPresetArgs(
        @Nullable Output<String> audioLanguage,
        @Nullable Output<Map<String,String>> experimentalOptions,
        @Nullable Output<Either<String,AudioAnalysisMode>> mode,
        Output<String> odataType) {
        this.audioLanguage = audioLanguage;
        this.experimentalOptions = experimentalOptions;
        this.mode = mode;
        this.odataType = Codegen.stringProp("odataType").output().arg(odataType).require();
    }

    private AudioAnalyzerPresetArgs() {
        this.audioLanguage = Codegen.empty();
        this.experimentalOptions = Codegen.empty();
        this.mode = Codegen.empty();
        this.odataType = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AudioAnalyzerPresetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> audioLanguage;
        private @Nullable Output<Map<String,String>> experimentalOptions;
        private @Nullable Output<Either<String,AudioAnalysisMode>> mode;
        private Output<String> odataType;

        public Builder() {
    	      // Empty
        }

        public Builder(AudioAnalyzerPresetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.audioLanguage = defaults.audioLanguage;
    	      this.experimentalOptions = defaults.experimentalOptions;
    	      this.mode = defaults.mode;
    	      this.odataType = defaults.odataType;
        }

        public Builder audioLanguage(@Nullable Output<String> audioLanguage) {
            this.audioLanguage = audioLanguage;
            return this;
        }
        public Builder audioLanguage(@Nullable String audioLanguage) {
            this.audioLanguage = Codegen.ofNullable(audioLanguage);
            return this;
        }
        public Builder experimentalOptions(@Nullable Output<Map<String,String>> experimentalOptions) {
            this.experimentalOptions = experimentalOptions;
            return this;
        }
        public Builder experimentalOptions(@Nullable Map<String,String> experimentalOptions) {
            this.experimentalOptions = Codegen.ofNullable(experimentalOptions);
            return this;
        }
        public Builder mode(@Nullable Output<Either<String,AudioAnalysisMode>> mode) {
            this.mode = mode;
            return this;
        }
        public Builder mode(@Nullable Either<String,AudioAnalysisMode> mode) {
            this.mode = Codegen.ofNullable(mode);
            return this;
        }
        public Builder odataType(Output<String> odataType) {
            this.odataType = Objects.requireNonNull(odataType);
            return this;
        }
        public Builder odataType(String odataType) {
            this.odataType = Output.of(Objects.requireNonNull(odataType));
            return this;
        }        public AudioAnalyzerPresetArgs build() {
            return new AudioAnalyzerPresetArgs(audioLanguage, experimentalOptions, mode, odataType);
        }
    }
}
