// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.security.outputs;

import com.pulumi.azurenative.security.outputs.AutomationActionEventHubResponse;
import com.pulumi.azurenative.security.outputs.AutomationActionLogicAppResponse;
import com.pulumi.azurenative.security.outputs.AutomationActionWorkspaceResponse;
import com.pulumi.azurenative.security.outputs.AutomationScopeResponse;
import com.pulumi.azurenative.security.outputs.AutomationSourceResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetAutomationResult {
    /**
     * A collection of the actions which are triggered if all the configured rules evaluations, within at least one rule set, are true.
     * 
     */
    private final @Nullable List<Object> actions;
    /**
     * The security automation description.
     * 
     */
    private final @Nullable String description;
    /**
     * Entity tag is used for comparing two or more entities from the same requested resource.
     * 
     */
    private final @Nullable String etag;
    /**
     * Resource Id
     * 
     */
    private final String id;
    /**
     * Indicates whether the security automation is enabled.
     * 
     */
    private final @Nullable Boolean isEnabled;
    /**
     * Kind of the resource
     * 
     */
    private final @Nullable String kind;
    /**
     * Location where the resource is stored
     * 
     */
    private final @Nullable String location;
    /**
     * Resource name
     * 
     */
    private final String name;
    /**
     * A collection of scopes on which the security automations logic is applied. Supported scopes are the subscription itself or a resource group under that subscription. The automation will only apply on defined scopes.
     * 
     */
    private final @Nullable List<AutomationScopeResponse> scopes;
    /**
     * A collection of the source event types which evaluate the security automation set of rules.
     * 
     */
    private final @Nullable List<AutomationSourceResponse> sources;
    /**
     * A list of key value pairs that describe the resource.
     * 
     */
    private final @Nullable Map<String,String> tags;
    /**
     * Resource type
     * 
     */
    private final String type;

    @CustomType.Constructor
    private GetAutomationResult(
        @CustomType.Parameter("actions") @Nullable List<Object> actions,
        @CustomType.Parameter("description") @Nullable String description,
        @CustomType.Parameter("etag") @Nullable String etag,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("isEnabled") @Nullable Boolean isEnabled,
        @CustomType.Parameter("kind") @Nullable String kind,
        @CustomType.Parameter("location") @Nullable String location,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("scopes") @Nullable List<AutomationScopeResponse> scopes,
        @CustomType.Parameter("sources") @Nullable List<AutomationSourceResponse> sources,
        @CustomType.Parameter("tags") @Nullable Map<String,String> tags,
        @CustomType.Parameter("type") String type) {
        this.actions = actions;
        this.description = description;
        this.etag = etag;
        this.id = id;
        this.isEnabled = isEnabled;
        this.kind = kind;
        this.location = location;
        this.name = name;
        this.scopes = scopes;
        this.sources = sources;
        this.tags = tags;
        this.type = type;
    }

    /**
     * A collection of the actions which are triggered if all the configured rules evaluations, within at least one rule set, are true.
     * 
    */
    public List<Object> actions() {
        return this.actions == null ? List.of() : this.actions;
    }
    /**
     * The security automation description.
     * 
    */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * Entity tag is used for comparing two or more entities from the same requested resource.
     * 
    */
    public Optional<String> etag() {
        return Optional.ofNullable(this.etag);
    }
    /**
     * Resource Id
     * 
    */
    public String id() {
        return this.id;
    }
    /**
     * Indicates whether the security automation is enabled.
     * 
    */
    public Optional<Boolean> isEnabled() {
        return Optional.ofNullable(this.isEnabled);
    }
    /**
     * Kind of the resource
     * 
    */
    public Optional<String> kind() {
        return Optional.ofNullable(this.kind);
    }
    /**
     * Location where the resource is stored
     * 
    */
    public Optional<String> location() {
        return Optional.ofNullable(this.location);
    }
    /**
     * Resource name
     * 
    */
    public String name() {
        return this.name;
    }
    /**
     * A collection of scopes on which the security automations logic is applied. Supported scopes are the subscription itself or a resource group under that subscription. The automation will only apply on defined scopes.
     * 
    */
    public List<AutomationScopeResponse> scopes() {
        return this.scopes == null ? List.of() : this.scopes;
    }
    /**
     * A collection of the source event types which evaluate the security automation set of rules.
     * 
    */
    public List<AutomationSourceResponse> sources() {
        return this.sources == null ? List.of() : this.sources;
    }
    /**
     * A list of key value pairs that describe the resource.
     * 
    */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * Resource type
     * 
    */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAutomationResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<Object> actions;
        private @Nullable String description;
        private @Nullable String etag;
        private String id;
        private @Nullable Boolean isEnabled;
        private @Nullable String kind;
        private @Nullable String location;
        private String name;
        private @Nullable List<AutomationScopeResponse> scopes;
        private @Nullable List<AutomationSourceResponse> sources;
        private @Nullable Map<String,String> tags;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(GetAutomationResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.actions = defaults.actions;
    	      this.description = defaults.description;
    	      this.etag = defaults.etag;
    	      this.id = defaults.id;
    	      this.isEnabled = defaults.isEnabled;
    	      this.kind = defaults.kind;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.scopes = defaults.scopes;
    	      this.sources = defaults.sources;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
        }

        public Builder actions(@Nullable List<Object> actions) {
            this.actions = actions;
            return this;
        }
        public Builder actions(Object... actions) {
            return actions(List.of(actions));
        }
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        public Builder etag(@Nullable String etag) {
            this.etag = etag;
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder isEnabled(@Nullable Boolean isEnabled) {
            this.isEnabled = isEnabled;
            return this;
        }
        public Builder kind(@Nullable String kind) {
            this.kind = kind;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = location;
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder scopes(@Nullable List<AutomationScopeResponse> scopes) {
            this.scopes = scopes;
            return this;
        }
        public Builder scopes(AutomationScopeResponse... scopes) {
            return scopes(List.of(scopes));
        }
        public Builder sources(@Nullable List<AutomationSourceResponse> sources) {
            this.sources = sources;
            return this;
        }
        public Builder sources(AutomationSourceResponse... sources) {
            return sources(List.of(sources));
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }        public GetAutomationResult build() {
            return new GetAutomationResult(actions, description, etag, id, isEnabled, kind, location, name, scopes, sources, tags, type);
        }
    }
}
