// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.storsimple.inputs;

import com.pulumi.azurenative.storsimple.inputs.TargetEligibilityResultResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Represents the eligibility of a device as a failover target device.
 * 
 */
public final class FailoverTargetResponse extends com.pulumi.resources.InvokeArgs {

    public static final FailoverTargetResponse Empty = new FailoverTargetResponse();

    /**
     * The amount of free local storage available on the device in bytes.
     * 
     */
    @Import(name="availableLocalStorageInBytes")
    private @Nullable Double availableLocalStorageInBytes;

    public Optional<Double> availableLocalStorageInBytes() {
        return Optional.ofNullable(this.availableLocalStorageInBytes);
    }

    /**
     * The amount of free tiered storage available for the device in bytes.
     * 
     */
    @Import(name="availableTieredStorageInBytes")
    private @Nullable Double availableTieredStorageInBytes;

    public Optional<Double> availableTieredStorageInBytes() {
        return Optional.ofNullable(this.availableTieredStorageInBytes);
    }

    /**
     * The count of data containers on the device.
     * 
     */
    @Import(name="dataContainersCount")
    private @Nullable Integer dataContainersCount;

    public Optional<Integer> dataContainersCount() {
        return Optional.ofNullable(this.dataContainersCount);
    }

    /**
     * The path ID of the device.
     * 
     */
    @Import(name="deviceId")
    private @Nullable String deviceId;

    public Optional<String> deviceId() {
        return Optional.ofNullable(this.deviceId);
    }

    /**
     * The geo location (applicable only for cloud appliances) of the device.
     * 
     */
    @Import(name="deviceLocation")
    private @Nullable String deviceLocation;

    public Optional<String> deviceLocation() {
        return Optional.ofNullable(this.deviceLocation);
    }

    /**
     * The software version of the device.
     * 
     */
    @Import(name="deviceSoftwareVersion")
    private @Nullable String deviceSoftwareVersion;

    public Optional<String> deviceSoftwareVersion() {
        return Optional.ofNullable(this.deviceSoftwareVersion);
    }

    /**
     * The status of the device.
     * 
     */
    @Import(name="deviceStatus")
    private @Nullable String deviceStatus;

    public Optional<String> deviceStatus() {
        return Optional.ofNullable(this.deviceStatus);
    }

    /**
     * The eligibility result of the device, as a failover target device.
     * 
     */
    @Import(name="eligibilityResult")
    private @Nullable TargetEligibilityResultResponse eligibilityResult;

    public Optional<TargetEligibilityResultResponse> eligibilityResult() {
        return Optional.ofNullable(this.eligibilityResult);
    }

    /**
     * The friendly name for the current version of software on the device.
     * 
     */
    @Import(name="friendlyDeviceSoftwareVersion")
    private @Nullable String friendlyDeviceSoftwareVersion;

    public Optional<String> friendlyDeviceSoftwareVersion() {
        return Optional.ofNullable(this.friendlyDeviceSoftwareVersion);
    }

    /**
     * The model number of the device.
     * 
     */
    @Import(name="modelDescription")
    private @Nullable String modelDescription;

    public Optional<String> modelDescription() {
        return Optional.ofNullable(this.modelDescription);
    }

    /**
     * The count of volumes on the device.
     * 
     */
    @Import(name="volumesCount")
    private @Nullable Integer volumesCount;

    public Optional<Integer> volumesCount() {
        return Optional.ofNullable(this.volumesCount);
    }

    private FailoverTargetResponse() {}

    private FailoverTargetResponse(FailoverTargetResponse $) {
        this.availableLocalStorageInBytes = $.availableLocalStorageInBytes;
        this.availableTieredStorageInBytes = $.availableTieredStorageInBytes;
        this.dataContainersCount = $.dataContainersCount;
        this.deviceId = $.deviceId;
        this.deviceLocation = $.deviceLocation;
        this.deviceSoftwareVersion = $.deviceSoftwareVersion;
        this.deviceStatus = $.deviceStatus;
        this.eligibilityResult = $.eligibilityResult;
        this.friendlyDeviceSoftwareVersion = $.friendlyDeviceSoftwareVersion;
        this.modelDescription = $.modelDescription;
        this.volumesCount = $.volumesCount;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FailoverTargetResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FailoverTargetResponse $;

        public Builder() {
            $ = new FailoverTargetResponse();
        }

        public Builder(FailoverTargetResponse defaults) {
            $ = new FailoverTargetResponse(Objects.requireNonNull(defaults));
        }

        public Builder availableLocalStorageInBytes(@Nullable Double availableLocalStorageInBytes) {
            $.availableLocalStorageInBytes = availableLocalStorageInBytes;
            return this;
        }

        public Builder availableTieredStorageInBytes(@Nullable Double availableTieredStorageInBytes) {
            $.availableTieredStorageInBytes = availableTieredStorageInBytes;
            return this;
        }

        public Builder dataContainersCount(@Nullable Integer dataContainersCount) {
            $.dataContainersCount = dataContainersCount;
            return this;
        }

        public Builder deviceId(@Nullable String deviceId) {
            $.deviceId = deviceId;
            return this;
        }

        public Builder deviceLocation(@Nullable String deviceLocation) {
            $.deviceLocation = deviceLocation;
            return this;
        }

        public Builder deviceSoftwareVersion(@Nullable String deviceSoftwareVersion) {
            $.deviceSoftwareVersion = deviceSoftwareVersion;
            return this;
        }

        public Builder deviceStatus(@Nullable String deviceStatus) {
            $.deviceStatus = deviceStatus;
            return this;
        }

        public Builder eligibilityResult(@Nullable TargetEligibilityResultResponse eligibilityResult) {
            $.eligibilityResult = eligibilityResult;
            return this;
        }

        public Builder friendlyDeviceSoftwareVersion(@Nullable String friendlyDeviceSoftwareVersion) {
            $.friendlyDeviceSoftwareVersion = friendlyDeviceSoftwareVersion;
            return this;
        }

        public Builder modelDescription(@Nullable String modelDescription) {
            $.modelDescription = modelDescription;
            return this;
        }

        public Builder volumesCount(@Nullable Integer volumesCount) {
            $.volumesCount = volumesCount;
            return this;
        }

        public FailoverTargetResponse build() {
            return $;
        }
    }

}
