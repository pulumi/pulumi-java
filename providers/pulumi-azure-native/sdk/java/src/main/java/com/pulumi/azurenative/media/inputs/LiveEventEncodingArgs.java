// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.media.inputs;

import com.pulumi.azurenative.media.enums.LiveEventEncodingType;
import com.pulumi.azurenative.media.enums.StretchMode;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Specifies the live event type and optional encoding settings for encoding live events.
 * 
 */
public final class LiveEventEncodingArgs extends com.pulumi.resources.ResourceArgs {

    public static final LiveEventEncodingArgs Empty = new LiveEventEncodingArgs();

    /**
     * Live event type. When encodingType is set to None, the service simply passes through the incoming video and audio layer(s) to the output. When encodingType is set to Standard or Premium1080p, a live encoder transcodes the incoming stream into multiple bitrates or layers. See https://go.microsoft.com/fwlink/?linkid=2095101 for more information. This property cannot be modified after the live event is created.
     * 
     */
    @Import(name="encodingType")
    private @Nullable Output<Either<String,LiveEventEncodingType>> encodingType;

    public Optional<Output<Either<String,LiveEventEncodingType>>> encodingType() {
        return Optional.ofNullable(this.encodingType);
    }

    /**
     * Use an ISO 8601 time value between 0.5 to 20 seconds to specify the output fragment length for the video and audio tracks of an encoding live event. For example, use PT2S to indicate 2 seconds. For the video track it also defines the key frame interval, or the length of a GoP (group of pictures).   If this value is not set for an encoding live event, the fragment duration defaults to 2 seconds. The value cannot be set for pass-through live events.
     * 
     */
    @Import(name="keyFrameInterval")
    private @Nullable Output<String> keyFrameInterval;

    public Optional<Output<String>> keyFrameInterval() {
        return Optional.ofNullable(this.keyFrameInterval);
    }

    /**
     * The optional encoding preset name, used when encodingType is not None. This value is specified at creation time and cannot be updated. If the encodingType is set to Standard, then the default preset name is ‘Default720p’. Else if the encodingType is set to Premium1080p, the default preset is ‘Default1080p’.
     * 
     */
    @Import(name="presetName")
    private @Nullable Output<String> presetName;

    public Optional<Output<String>> presetName() {
        return Optional.ofNullable(this.presetName);
    }

    /**
     * Specifies how the input video will be resized to fit the desired output resolution(s). Default is None
     * 
     */
    @Import(name="stretchMode")
    private @Nullable Output<Either<String,StretchMode>> stretchMode;

    public Optional<Output<Either<String,StretchMode>>> stretchMode() {
        return Optional.ofNullable(this.stretchMode);
    }

    private LiveEventEncodingArgs() {}

    private LiveEventEncodingArgs(LiveEventEncodingArgs $) {
        this.encodingType = $.encodingType;
        this.keyFrameInterval = $.keyFrameInterval;
        this.presetName = $.presetName;
        this.stretchMode = $.stretchMode;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LiveEventEncodingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LiveEventEncodingArgs $;

        public Builder() {
            $ = new LiveEventEncodingArgs();
        }

        public Builder(LiveEventEncodingArgs defaults) {
            $ = new LiveEventEncodingArgs(Objects.requireNonNull(defaults));
        }

        public Builder encodingType(@Nullable Output<Either<String,LiveEventEncodingType>> encodingType) {
            $.encodingType = encodingType;
            return this;
        }

        public Builder encodingType(Either<String,LiveEventEncodingType> encodingType) {
            return encodingType(Output.of(encodingType));
        }

        public Builder encodingType(String encodingType) {
            return encodingType(Either.ofLeft(encodingType));
        }

        public Builder encodingType(LiveEventEncodingType encodingType) {
            return encodingType(Either.ofRight(encodingType));
        }

        public Builder keyFrameInterval(@Nullable Output<String> keyFrameInterval) {
            $.keyFrameInterval = keyFrameInterval;
            return this;
        }

        public Builder keyFrameInterval(String keyFrameInterval) {
            return keyFrameInterval(Output.of(keyFrameInterval));
        }

        public Builder presetName(@Nullable Output<String> presetName) {
            $.presetName = presetName;
            return this;
        }

        public Builder presetName(String presetName) {
            return presetName(Output.of(presetName));
        }

        public Builder stretchMode(@Nullable Output<Either<String,StretchMode>> stretchMode) {
            $.stretchMode = stretchMode;
            return this;
        }

        public Builder stretchMode(Either<String,StretchMode> stretchMode) {
            return stretchMode(Output.of(stretchMode));
        }

        public Builder stretchMode(String stretchMode) {
            return stretchMode(Either.ofLeft(stretchMode));
        }

        public Builder stretchMode(StretchMode stretchMode) {
            return stretchMode(Either.ofRight(stretchMode));
        }

        public LiveEventEncodingArgs build() {
            return $;
        }
    }

}
