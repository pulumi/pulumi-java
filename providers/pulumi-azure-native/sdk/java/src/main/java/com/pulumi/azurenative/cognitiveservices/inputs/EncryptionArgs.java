// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.cognitiveservices.inputs;

import com.pulumi.azurenative.cognitiveservices.enums.KeySource;
import com.pulumi.azurenative.cognitiveservices.inputs.KeyVaultPropertiesArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Properties to configure Encryption
 * 
 */
public final class EncryptionArgs extends com.pulumi.resources.ResourceArgs {

    public static final EncryptionArgs Empty = new EncryptionArgs();

    /**
     * Enumerates the possible value of keySource for Encryption
     * 
     */
    @Import(name="keySource")
    private @Nullable Output<Either<String,KeySource>> keySource;

    /**
     * @return Enumerates the possible value of keySource for Encryption
     * 
     */
    public Optional<Output<Either<String,KeySource>>> keySource() {
        return Optional.ofNullable(this.keySource);
    }

    /**
     * Properties of KeyVault
     * 
     */
    @Import(name="keyVaultProperties")
    private @Nullable Output<KeyVaultPropertiesArgs> keyVaultProperties;

    /**
     * @return Properties of KeyVault
     * 
     */
    public Optional<Output<KeyVaultPropertiesArgs>> keyVaultProperties() {
        return Optional.ofNullable(this.keyVaultProperties);
    }

    private EncryptionArgs() {}

    private EncryptionArgs(EncryptionArgs $) {
        this.keySource = $.keySource;
        this.keyVaultProperties = $.keyVaultProperties;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EncryptionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EncryptionArgs $;

        public Builder() {
            $ = new EncryptionArgs();
        }

        public Builder(EncryptionArgs defaults) {
            $ = new EncryptionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param keySource Enumerates the possible value of keySource for Encryption
         * 
         * @return builder
         * 
         */
        public Builder keySource(@Nullable Output<Either<String,KeySource>> keySource) {
            $.keySource = keySource;
            return this;
        }

        /**
         * @param keySource Enumerates the possible value of keySource for Encryption
         * 
         * @return builder
         * 
         */
        public Builder keySource(Either<String,KeySource> keySource) {
            return keySource(Output.of(keySource));
        }

        /**
         * @param keySource Enumerates the possible value of keySource for Encryption
         * 
         * @return builder
         * 
         */
        public Builder keySource(String keySource) {
            return keySource(Either.ofLeft(keySource));
        }

        /**
         * @param keySource Enumerates the possible value of keySource for Encryption
         * 
         * @return builder
         * 
         */
        public Builder keySource(KeySource keySource) {
            return keySource(Either.ofRight(keySource));
        }

        /**
         * @param keyVaultProperties Properties of KeyVault
         * 
         * @return builder
         * 
         */
        public Builder keyVaultProperties(@Nullable Output<KeyVaultPropertiesArgs> keyVaultProperties) {
            $.keyVaultProperties = keyVaultProperties;
            return this;
        }

        /**
         * @param keyVaultProperties Properties of KeyVault
         * 
         * @return builder
         * 
         */
        public Builder keyVaultProperties(KeyVaultPropertiesArgs keyVaultProperties) {
            return keyVaultProperties(Output.of(keyVaultProperties));
        }

        public EncryptionArgs build() {
            $.keySource = Codegen.stringProp("keySource").left(KeySource.class).output().arg($.keySource).def("Microsoft.KeyVault").getNullable();
            return $;
        }
    }

}
