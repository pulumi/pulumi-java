// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datalakestore;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TrustedIdProviderArgs extends com.pulumi.resources.ResourceArgs {

    public static final TrustedIdProviderArgs Empty = new TrustedIdProviderArgs();

    /**
     * The name of the Data Lake Store account.
     * 
     */
    @Import(name="accountName", required=true)
    private Output<String> accountName;

    public Output<String> accountName() {
        return this.accountName;
    }

    /**
     * The URL of this trusted identity provider.
     * 
     */
    @Import(name="idProvider", required=true)
    private Output<String> idProvider;

    public Output<String> idProvider() {
        return this.idProvider;
    }

    /**
     * The name of the Azure resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The name of the trusted identity provider. This is used for differentiation of providers in the account.
     * 
     */
    @Import(name="trustedIdProviderName")
    private @Nullable Output<String> trustedIdProviderName;

    public Optional<Output<String>> trustedIdProviderName() {
        return Optional.ofNullable(this.trustedIdProviderName);
    }

    private TrustedIdProviderArgs() {}

    private TrustedIdProviderArgs(TrustedIdProviderArgs $) {
        this.accountName = $.accountName;
        this.idProvider = $.idProvider;
        this.resourceGroupName = $.resourceGroupName;
        this.trustedIdProviderName = $.trustedIdProviderName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TrustedIdProviderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TrustedIdProviderArgs $;

        public Builder() {
            $ = new TrustedIdProviderArgs();
        }

        public Builder(TrustedIdProviderArgs defaults) {
            $ = new TrustedIdProviderArgs(Objects.requireNonNull(defaults));
        }

        public Builder accountName(Output<String> accountName) {
            $.accountName = accountName;
            return this;
        }

        public Builder accountName(String accountName) {
            return accountName(Output.of(accountName));
        }

        public Builder idProvider(Output<String> idProvider) {
            $.idProvider = idProvider;
            return this;
        }

        public Builder idProvider(String idProvider) {
            return idProvider(Output.of(idProvider));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder trustedIdProviderName(@Nullable Output<String> trustedIdProviderName) {
            $.trustedIdProviderName = trustedIdProviderName;
            return this;
        }

        public Builder trustedIdProviderName(String trustedIdProviderName) {
            return trustedIdProviderName(Output.of(trustedIdProviderName));
        }

        public TrustedIdProviderArgs build() {
            $.accountName = Objects.requireNonNull($.accountName, "expected parameter 'accountName' to be non-null");
            $.idProvider = Objects.requireNonNull($.idProvider, "expected parameter 'idProvider' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
