// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.azurenative.network.enums.VirtualNetworkGatewayConnectionProtocol;
import com.pulumi.azurenative.network.enums.VpnLinkConnectionMode;
import com.pulumi.azurenative.network.inputs.IpsecPolicyArgs;
import com.pulumi.azurenative.network.inputs.SubResourceArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * VpnSiteLinkConnection Resource.
 * 
 */
public final class VpnSiteLinkConnectionArgs extends com.pulumi.resources.ResourceArgs {

    public static final VpnSiteLinkConnectionArgs Empty = new VpnSiteLinkConnectionArgs();

    /**
     * Expected bandwidth in MBPS.
     * 
     */
    @Import(name="connectionBandwidth")
    private @Nullable Output<Integer> connectionBandwidth;

    public Optional<Output<Integer>> connectionBandwidth() {
        return Optional.ofNullable(this.connectionBandwidth);
    }

    /**
     * List of egress NatRules.
     * 
     */
    @Import(name="egressNatRules")
    private @Nullable Output<List<SubResourceArgs>> egressNatRules;

    public Optional<Output<List<SubResourceArgs>>> egressNatRules() {
        return Optional.ofNullable(this.egressNatRules);
    }

    /**
     * EnableBgp flag.
     * 
     */
    @Import(name="enableBgp")
    private @Nullable Output<Boolean> enableBgp;

    public Optional<Output<Boolean>> enableBgp() {
        return Optional.ofNullable(this.enableBgp);
    }

    /**
     * EnableBgp flag.
     * 
     */
    @Import(name="enableRateLimiting")
    private @Nullable Output<Boolean> enableRateLimiting;

    public Optional<Output<Boolean>> enableRateLimiting() {
        return Optional.ofNullable(this.enableRateLimiting);
    }

    /**
     * Resource ID.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * List of ingress NatRules.
     * 
     */
    @Import(name="ingressNatRules")
    private @Nullable Output<List<SubResourceArgs>> ingressNatRules;

    public Optional<Output<List<SubResourceArgs>>> ingressNatRules() {
        return Optional.ofNullable(this.ingressNatRules);
    }

    /**
     * The IPSec Policies to be considered by this connection.
     * 
     */
    @Import(name="ipsecPolicies")
    private @Nullable Output<List<IpsecPolicyArgs>> ipsecPolicies;

    public Optional<Output<List<IpsecPolicyArgs>>> ipsecPolicies() {
        return Optional.ofNullable(this.ipsecPolicies);
    }

    /**
     * The name of the resource that is unique within a resource group. This name can be used to access the resource.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Routing weight for vpn connection.
     * 
     */
    @Import(name="routingWeight")
    private @Nullable Output<Integer> routingWeight;

    public Optional<Output<Integer>> routingWeight() {
        return Optional.ofNullable(this.routingWeight);
    }

    /**
     * SharedKey for the vpn connection.
     * 
     */
    @Import(name="sharedKey")
    private @Nullable Output<String> sharedKey;

    public Optional<Output<String>> sharedKey() {
        return Optional.ofNullable(this.sharedKey);
    }

    /**
     * Use local azure ip to initiate connection.
     * 
     */
    @Import(name="useLocalAzureIpAddress")
    private @Nullable Output<Boolean> useLocalAzureIpAddress;

    public Optional<Output<Boolean>> useLocalAzureIpAddress() {
        return Optional.ofNullable(this.useLocalAzureIpAddress);
    }

    /**
     * Enable policy-based traffic selectors.
     * 
     */
    @Import(name="usePolicyBasedTrafficSelectors")
    private @Nullable Output<Boolean> usePolicyBasedTrafficSelectors;

    public Optional<Output<Boolean>> usePolicyBasedTrafficSelectors() {
        return Optional.ofNullable(this.usePolicyBasedTrafficSelectors);
    }

    /**
     * Connection protocol used for this connection.
     * 
     */
    @Import(name="vpnConnectionProtocolType")
    private @Nullable Output<Either<String,VirtualNetworkGatewayConnectionProtocol>> vpnConnectionProtocolType;

    public Optional<Output<Either<String,VirtualNetworkGatewayConnectionProtocol>>> vpnConnectionProtocolType() {
        return Optional.ofNullable(this.vpnConnectionProtocolType);
    }

    /**
     * Vpn link connection mode.
     * 
     */
    @Import(name="vpnLinkConnectionMode")
    private @Nullable Output<Either<String,VpnLinkConnectionMode>> vpnLinkConnectionMode;

    public Optional<Output<Either<String,VpnLinkConnectionMode>>> vpnLinkConnectionMode() {
        return Optional.ofNullable(this.vpnLinkConnectionMode);
    }

    /**
     * Id of the connected vpn site link.
     * 
     */
    @Import(name="vpnSiteLink")
    private @Nullable Output<SubResourceArgs> vpnSiteLink;

    public Optional<Output<SubResourceArgs>> vpnSiteLink() {
        return Optional.ofNullable(this.vpnSiteLink);
    }

    private VpnSiteLinkConnectionArgs() {}

    private VpnSiteLinkConnectionArgs(VpnSiteLinkConnectionArgs $) {
        this.connectionBandwidth = $.connectionBandwidth;
        this.egressNatRules = $.egressNatRules;
        this.enableBgp = $.enableBgp;
        this.enableRateLimiting = $.enableRateLimiting;
        this.id = $.id;
        this.ingressNatRules = $.ingressNatRules;
        this.ipsecPolicies = $.ipsecPolicies;
        this.name = $.name;
        this.routingWeight = $.routingWeight;
        this.sharedKey = $.sharedKey;
        this.useLocalAzureIpAddress = $.useLocalAzureIpAddress;
        this.usePolicyBasedTrafficSelectors = $.usePolicyBasedTrafficSelectors;
        this.vpnConnectionProtocolType = $.vpnConnectionProtocolType;
        this.vpnLinkConnectionMode = $.vpnLinkConnectionMode;
        this.vpnSiteLink = $.vpnSiteLink;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VpnSiteLinkConnectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VpnSiteLinkConnectionArgs $;

        public Builder() {
            $ = new VpnSiteLinkConnectionArgs();
        }

        public Builder(VpnSiteLinkConnectionArgs defaults) {
            $ = new VpnSiteLinkConnectionArgs(Objects.requireNonNull(defaults));
        }

        public Builder connectionBandwidth(@Nullable Output<Integer> connectionBandwidth) {
            $.connectionBandwidth = connectionBandwidth;
            return this;
        }

        public Builder connectionBandwidth(Integer connectionBandwidth) {
            return connectionBandwidth(Output.of(connectionBandwidth));
        }

        public Builder egressNatRules(@Nullable Output<List<SubResourceArgs>> egressNatRules) {
            $.egressNatRules = egressNatRules;
            return this;
        }

        public Builder egressNatRules(List<SubResourceArgs> egressNatRules) {
            return egressNatRules(Output.of(egressNatRules));
        }

        public Builder egressNatRules(SubResourceArgs... egressNatRules) {
            return egressNatRules(List.of(egressNatRules));
        }

        public Builder enableBgp(@Nullable Output<Boolean> enableBgp) {
            $.enableBgp = enableBgp;
            return this;
        }

        public Builder enableBgp(Boolean enableBgp) {
            return enableBgp(Output.of(enableBgp));
        }

        public Builder enableRateLimiting(@Nullable Output<Boolean> enableRateLimiting) {
            $.enableRateLimiting = enableRateLimiting;
            return this;
        }

        public Builder enableRateLimiting(Boolean enableRateLimiting) {
            return enableRateLimiting(Output.of(enableRateLimiting));
        }

        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        public Builder id(String id) {
            return id(Output.of(id));
        }

        public Builder ingressNatRules(@Nullable Output<List<SubResourceArgs>> ingressNatRules) {
            $.ingressNatRules = ingressNatRules;
            return this;
        }

        public Builder ingressNatRules(List<SubResourceArgs> ingressNatRules) {
            return ingressNatRules(Output.of(ingressNatRules));
        }

        public Builder ingressNatRules(SubResourceArgs... ingressNatRules) {
            return ingressNatRules(List.of(ingressNatRules));
        }

        public Builder ipsecPolicies(@Nullable Output<List<IpsecPolicyArgs>> ipsecPolicies) {
            $.ipsecPolicies = ipsecPolicies;
            return this;
        }

        public Builder ipsecPolicies(List<IpsecPolicyArgs> ipsecPolicies) {
            return ipsecPolicies(Output.of(ipsecPolicies));
        }

        public Builder ipsecPolicies(IpsecPolicyArgs... ipsecPolicies) {
            return ipsecPolicies(List.of(ipsecPolicies));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder routingWeight(@Nullable Output<Integer> routingWeight) {
            $.routingWeight = routingWeight;
            return this;
        }

        public Builder routingWeight(Integer routingWeight) {
            return routingWeight(Output.of(routingWeight));
        }

        public Builder sharedKey(@Nullable Output<String> sharedKey) {
            $.sharedKey = sharedKey;
            return this;
        }

        public Builder sharedKey(String sharedKey) {
            return sharedKey(Output.of(sharedKey));
        }

        public Builder useLocalAzureIpAddress(@Nullable Output<Boolean> useLocalAzureIpAddress) {
            $.useLocalAzureIpAddress = useLocalAzureIpAddress;
            return this;
        }

        public Builder useLocalAzureIpAddress(Boolean useLocalAzureIpAddress) {
            return useLocalAzureIpAddress(Output.of(useLocalAzureIpAddress));
        }

        public Builder usePolicyBasedTrafficSelectors(@Nullable Output<Boolean> usePolicyBasedTrafficSelectors) {
            $.usePolicyBasedTrafficSelectors = usePolicyBasedTrafficSelectors;
            return this;
        }

        public Builder usePolicyBasedTrafficSelectors(Boolean usePolicyBasedTrafficSelectors) {
            return usePolicyBasedTrafficSelectors(Output.of(usePolicyBasedTrafficSelectors));
        }

        public Builder vpnConnectionProtocolType(@Nullable Output<Either<String,VirtualNetworkGatewayConnectionProtocol>> vpnConnectionProtocolType) {
            $.vpnConnectionProtocolType = vpnConnectionProtocolType;
            return this;
        }

        public Builder vpnConnectionProtocolType(Either<String,VirtualNetworkGatewayConnectionProtocol> vpnConnectionProtocolType) {
            return vpnConnectionProtocolType(Output.of(vpnConnectionProtocolType));
        }

        public Builder vpnConnectionProtocolType(String vpnConnectionProtocolType) {
            return vpnConnectionProtocolType(Either.ofLeft(vpnConnectionProtocolType));
        }

        public Builder vpnConnectionProtocolType(VirtualNetworkGatewayConnectionProtocol vpnConnectionProtocolType) {
            return vpnConnectionProtocolType(Either.ofRight(vpnConnectionProtocolType));
        }

        public Builder vpnLinkConnectionMode(@Nullable Output<Either<String,VpnLinkConnectionMode>> vpnLinkConnectionMode) {
            $.vpnLinkConnectionMode = vpnLinkConnectionMode;
            return this;
        }

        public Builder vpnLinkConnectionMode(Either<String,VpnLinkConnectionMode> vpnLinkConnectionMode) {
            return vpnLinkConnectionMode(Output.of(vpnLinkConnectionMode));
        }

        public Builder vpnLinkConnectionMode(String vpnLinkConnectionMode) {
            return vpnLinkConnectionMode(Either.ofLeft(vpnLinkConnectionMode));
        }

        public Builder vpnLinkConnectionMode(VpnLinkConnectionMode vpnLinkConnectionMode) {
            return vpnLinkConnectionMode(Either.ofRight(vpnLinkConnectionMode));
        }

        public Builder vpnSiteLink(@Nullable Output<SubResourceArgs> vpnSiteLink) {
            $.vpnSiteLink = vpnSiteLink;
            return this;
        }

        public Builder vpnSiteLink(SubResourceArgs vpnSiteLink) {
            return vpnSiteLink(Output.of(vpnSiteLink));
        }

        public VpnSiteLinkConnectionArgs build() {
            return $;
        }
    }

}
