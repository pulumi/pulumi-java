// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.notebooks;

import com.pulumi.azurenative.notebooks.inputs.NotebookResourceSystemDataArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NotebookProxyArgs extends com.pulumi.resources.ResourceArgs {

    public static final NotebookProxyArgs Empty = new NotebookProxyArgs();

    /**
     * The friendly string identifier of the creator of the NotebookProxy resource.
     * 
     */
    @Import(name="hostname")
    private @Nullable Output<String> hostname;

    public Optional<Output<String>> hostname() {
        return Optional.ofNullable(this.hostname);
    }

    /**
     * The public DNS name
     * 
     */
    @Import(name="publicDns")
    private @Nullable Output<String> publicDns;

    public Optional<Output<String>> publicDns() {
        return Optional.ofNullable(this.publicDns);
    }

    /**
     * Allow public network access on a V-Net locked notebook resource
     * 
     */
    @Import(name="publicNetworkAccess")
    private @Nullable Output<String> publicNetworkAccess;

    public Optional<Output<String>> publicNetworkAccess() {
        return Optional.ofNullable(this.publicNetworkAccess);
    }

    /**
     * The region of the NotebookProxy resource.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The name of the resource.
     * 
     */
    @Import(name="resourceName")
    private @Nullable Output<String> resourceName;

    public Optional<Output<String>> resourceName() {
        return Optional.ofNullable(this.resourceName);
    }

    /**
     * The alternate application ID used for auth token request in the data plane
     * 
     */
    @Import(name="secondaryAppId")
    private @Nullable Output<String> secondaryAppId;

    public Optional<Output<String>> secondaryAppId() {
        return Optional.ofNullable(this.secondaryAppId);
    }

    /**
     * System data for notebook resource
     * 
     */
    @Import(name="systemData")
    private @Nullable Output<NotebookResourceSystemDataArgs> systemData;

    public Optional<Output<NotebookResourceSystemDataArgs>> systemData() {
        return Optional.ofNullable(this.systemData);
    }

    private NotebookProxyArgs() {}

    private NotebookProxyArgs(NotebookProxyArgs $) {
        this.hostname = $.hostname;
        this.publicDns = $.publicDns;
        this.publicNetworkAccess = $.publicNetworkAccess;
        this.region = $.region;
        this.resourceGroupName = $.resourceGroupName;
        this.resourceName = $.resourceName;
        this.secondaryAppId = $.secondaryAppId;
        this.systemData = $.systemData;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NotebookProxyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NotebookProxyArgs $;

        public Builder() {
            $ = new NotebookProxyArgs();
        }

        public Builder(NotebookProxyArgs defaults) {
            $ = new NotebookProxyArgs(Objects.requireNonNull(defaults));
        }

        public Builder hostname(@Nullable Output<String> hostname) {
            $.hostname = hostname;
            return this;
        }

        public Builder hostname(String hostname) {
            return hostname(Output.of(hostname));
        }

        public Builder publicDns(@Nullable Output<String> publicDns) {
            $.publicDns = publicDns;
            return this;
        }

        public Builder publicDns(String publicDns) {
            return publicDns(Output.of(publicDns));
        }

        public Builder publicNetworkAccess(@Nullable Output<String> publicNetworkAccess) {
            $.publicNetworkAccess = publicNetworkAccess;
            return this;
        }

        public Builder publicNetworkAccess(String publicNetworkAccess) {
            return publicNetworkAccess(Output.of(publicNetworkAccess));
        }

        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        public Builder region(String region) {
            return region(Output.of(region));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder resourceName(@Nullable Output<String> resourceName) {
            $.resourceName = resourceName;
            return this;
        }

        public Builder resourceName(String resourceName) {
            return resourceName(Output.of(resourceName));
        }

        public Builder secondaryAppId(@Nullable Output<String> secondaryAppId) {
            $.secondaryAppId = secondaryAppId;
            return this;
        }

        public Builder secondaryAppId(String secondaryAppId) {
            return secondaryAppId(Output.of(secondaryAppId));
        }

        public Builder systemData(@Nullable Output<NotebookResourceSystemDataArgs> systemData) {
            $.systemData = systemData;
            return this;
        }

        public Builder systemData(NotebookResourceSystemDataArgs systemData) {
            return systemData(Output.of(systemData));
        }

        public NotebookProxyArgs build() {
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
