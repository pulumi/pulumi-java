// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.eventgrid.inputs;

import com.pulumi.azurenative.eventgrid.inputs.EventSubscriptionIdentityArgs;
import com.pulumi.azurenative.eventgrid.inputs.StorageBlobDeadLetterDestinationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Information about the deadletter destination with resource identity.
 * 
 */
public final class DeadLetterWithResourceIdentityArgs extends com.pulumi.resources.ResourceArgs {

    public static final DeadLetterWithResourceIdentityArgs Empty = new DeadLetterWithResourceIdentityArgs();

    /**
     * Information about the destination where events have to be delivered for the event subscription.
     * Uses the managed identity setup on the parent resource (namely, topic or domain) to acquire the authentication tokens being used during delivery / dead-lettering.
     * 
     */
    @Import(name="deadLetterDestination")
    private @Nullable Output<StorageBlobDeadLetterDestinationArgs> deadLetterDestination;

    /**
     * @return Information about the destination where events have to be delivered for the event subscription.
     * Uses the managed identity setup on the parent resource (namely, topic or domain) to acquire the authentication tokens being used during delivery / dead-lettering.
     * 
     */
    public Optional<Output<StorageBlobDeadLetterDestinationArgs>> deadLetterDestination() {
        return Optional.ofNullable(this.deadLetterDestination);
    }

    /**
     * The identity to use when dead-lettering events.
     * 
     */
    @Import(name="identity")
    private @Nullable Output<EventSubscriptionIdentityArgs> identity;

    /**
     * @return The identity to use when dead-lettering events.
     * 
     */
    public Optional<Output<EventSubscriptionIdentityArgs>> identity() {
        return Optional.ofNullable(this.identity);
    }

    private DeadLetterWithResourceIdentityArgs() {}

    private DeadLetterWithResourceIdentityArgs(DeadLetterWithResourceIdentityArgs $) {
        this.deadLetterDestination = $.deadLetterDestination;
        this.identity = $.identity;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DeadLetterWithResourceIdentityArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DeadLetterWithResourceIdentityArgs $;

        public Builder() {
            $ = new DeadLetterWithResourceIdentityArgs();
        }

        public Builder(DeadLetterWithResourceIdentityArgs defaults) {
            $ = new DeadLetterWithResourceIdentityArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param deadLetterDestination Information about the destination where events have to be delivered for the event subscription.
         * Uses the managed identity setup on the parent resource (namely, topic or domain) to acquire the authentication tokens being used during delivery / dead-lettering.
         * 
         * @return builder
         * 
         */
        public Builder deadLetterDestination(@Nullable Output<StorageBlobDeadLetterDestinationArgs> deadLetterDestination) {
            $.deadLetterDestination = deadLetterDestination;
            return this;
        }

        /**
         * @param deadLetterDestination Information about the destination where events have to be delivered for the event subscription.
         * Uses the managed identity setup on the parent resource (namely, topic or domain) to acquire the authentication tokens being used during delivery / dead-lettering.
         * 
         * @return builder
         * 
         */
        public Builder deadLetterDestination(StorageBlobDeadLetterDestinationArgs deadLetterDestination) {
            return deadLetterDestination(Output.of(deadLetterDestination));
        }

        /**
         * @param identity The identity to use when dead-lettering events.
         * 
         * @return builder
         * 
         */
        public Builder identity(@Nullable Output<EventSubscriptionIdentityArgs> identity) {
            $.identity = identity;
            return this;
        }

        /**
         * @param identity The identity to use when dead-lettering events.
         * 
         * @return builder
         * 
         */
        public Builder identity(EventSubscriptionIdentityArgs identity) {
            return identity(Output.of(identity));
        }

        public DeadLetterWithResourceIdentityArgs build() {
            return $;
        }
    }

}
