// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.azurenative.datafactory.inputs.AzureKeyVaultSecretReferenceResponse;
import com.pulumi.azurenative.datafactory.inputs.IntegrationRuntimeReferenceResponse;
import com.pulumi.azurenative.datafactory.inputs.ParameterSpecificationResponse;
import com.pulumi.azurenative.datafactory.inputs.SecureStringResponse;
import com.pulumi.core.Either;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * QuickBooks server linked service.
 * 
 */
public final class QuickBooksLinkedServiceResponse extends com.pulumi.resources.InvokeArgs {

    public static final QuickBooksLinkedServiceResponse Empty = new QuickBooksLinkedServiceResponse();

    /**
     * The access token for OAuth 1.0 authentication.
     * 
     */
    @Import(name="accessToken")
    private @Nullable Either<AzureKeyVaultSecretReferenceResponse,SecureStringResponse> accessToken;

    public Optional<Either<AzureKeyVaultSecretReferenceResponse,SecureStringResponse>> accessToken() {
        return Optional.ofNullable(this.accessToken);
    }

    /**
     * The access token secret for OAuth 1.0 authentication.
     * 
     */
    @Import(name="accessTokenSecret")
    private @Nullable Either<AzureKeyVaultSecretReferenceResponse,SecureStringResponse> accessTokenSecret;

    public Optional<Either<AzureKeyVaultSecretReferenceResponse,SecureStringResponse>> accessTokenSecret() {
        return Optional.ofNullable(this.accessTokenSecret);
    }

    /**
     * List of tags that can be used for describing the linked service.
     * 
     */
    @Import(name="annotations")
    private @Nullable List<Object> annotations;

    public Optional<List<Object>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    /**
     * The company ID of the QuickBooks company to authorize.
     * 
     */
    @Import(name="companyId")
    private @Nullable Object companyId;

    public Optional<Object> companyId() {
        return Optional.ofNullable(this.companyId);
    }

    /**
     * The integration runtime reference.
     * 
     */
    @Import(name="connectVia")
    private @Nullable IntegrationRuntimeReferenceResponse connectVia;

    public Optional<IntegrationRuntimeReferenceResponse> connectVia() {
        return Optional.ofNullable(this.connectVia);
    }

    /**
     * Properties used to connect to QuickBooks. It is mutually exclusive with any other properties in the linked service. Type: object.
     * 
     */
    @Import(name="connectionProperties")
    private @Nullable Object connectionProperties;

    public Optional<Object> connectionProperties() {
        return Optional.ofNullable(this.connectionProperties);
    }

    /**
     * The consumer key for OAuth 1.0 authentication.
     * 
     */
    @Import(name="consumerKey")
    private @Nullable Object consumerKey;

    public Optional<Object> consumerKey() {
        return Optional.ofNullable(this.consumerKey);
    }

    /**
     * The consumer secret for OAuth 1.0 authentication.
     * 
     */
    @Import(name="consumerSecret")
    private @Nullable Either<AzureKeyVaultSecretReferenceResponse,SecureStringResponse> consumerSecret;

    public Optional<Either<AzureKeyVaultSecretReferenceResponse,SecureStringResponse>> consumerSecret() {
        return Optional.ofNullable(this.consumerSecret);
    }

    /**
     * Linked service description.
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="encryptedCredential")
    private @Nullable Object encryptedCredential;

    public Optional<Object> encryptedCredential() {
        return Optional.ofNullable(this.encryptedCredential);
    }

    /**
     * The endpoint of the QuickBooks server. (i.e. quickbooks.api.intuit.com)
     * 
     */
    @Import(name="endpoint")
    private @Nullable Object endpoint;

    public Optional<Object> endpoint() {
        return Optional.ofNullable(this.endpoint);
    }

    /**
     * Parameters for linked service.
     * 
     */
    @Import(name="parameters")
    private @Nullable Map<String,ParameterSpecificationResponse> parameters;

    public Optional<Map<String,ParameterSpecificationResponse>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    /**
     * Type of linked service.
     * Expected value is &#39;QuickBooks&#39;.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    public String type() {
        return this.type;
    }

    /**
     * Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
     * 
     */
    @Import(name="useEncryptedEndpoints")
    private @Nullable Object useEncryptedEndpoints;

    public Optional<Object> useEncryptedEndpoints() {
        return Optional.ofNullable(this.useEncryptedEndpoints);
    }

    private QuickBooksLinkedServiceResponse() {}

    private QuickBooksLinkedServiceResponse(QuickBooksLinkedServiceResponse $) {
        this.accessToken = $.accessToken;
        this.accessTokenSecret = $.accessTokenSecret;
        this.annotations = $.annotations;
        this.companyId = $.companyId;
        this.connectVia = $.connectVia;
        this.connectionProperties = $.connectionProperties;
        this.consumerKey = $.consumerKey;
        this.consumerSecret = $.consumerSecret;
        this.description = $.description;
        this.encryptedCredential = $.encryptedCredential;
        this.endpoint = $.endpoint;
        this.parameters = $.parameters;
        this.type = $.type;
        this.useEncryptedEndpoints = $.useEncryptedEndpoints;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(QuickBooksLinkedServiceResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private QuickBooksLinkedServiceResponse $;

        public Builder() {
            $ = new QuickBooksLinkedServiceResponse();
        }

        public Builder(QuickBooksLinkedServiceResponse defaults) {
            $ = new QuickBooksLinkedServiceResponse(Objects.requireNonNull(defaults));
        }

        public Builder accessToken(@Nullable Either<AzureKeyVaultSecretReferenceResponse,SecureStringResponse> accessToken) {
            $.accessToken = accessToken;
            return this;
        }

        public Builder accessTokenSecret(@Nullable Either<AzureKeyVaultSecretReferenceResponse,SecureStringResponse> accessTokenSecret) {
            $.accessTokenSecret = accessTokenSecret;
            return this;
        }

        public Builder annotations(@Nullable List<Object> annotations) {
            $.annotations = annotations;
            return this;
        }

        public Builder annotations(Object... annotations) {
            return annotations(List.of(annotations));
        }

        public Builder companyId(@Nullable Object companyId) {
            $.companyId = companyId;
            return this;
        }

        public Builder connectVia(@Nullable IntegrationRuntimeReferenceResponse connectVia) {
            $.connectVia = connectVia;
            return this;
        }

        public Builder connectionProperties(@Nullable Object connectionProperties) {
            $.connectionProperties = connectionProperties;
            return this;
        }

        public Builder consumerKey(@Nullable Object consumerKey) {
            $.consumerKey = consumerKey;
            return this;
        }

        public Builder consumerSecret(@Nullable Either<AzureKeyVaultSecretReferenceResponse,SecureStringResponse> consumerSecret) {
            $.consumerSecret = consumerSecret;
            return this;
        }

        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        public Builder encryptedCredential(@Nullable Object encryptedCredential) {
            $.encryptedCredential = encryptedCredential;
            return this;
        }

        public Builder endpoint(@Nullable Object endpoint) {
            $.endpoint = endpoint;
            return this;
        }

        public Builder parameters(@Nullable Map<String,ParameterSpecificationResponse> parameters) {
            $.parameters = parameters;
            return this;
        }

        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public Builder useEncryptedEndpoints(@Nullable Object useEncryptedEndpoints) {
            $.useEncryptedEndpoints = useEncryptedEndpoints;
            return this;
        }

        public QuickBooksLinkedServiceResponse build() {
            $.type = Codegen.stringProp("type").arg($.type).require();
            return $;
        }
    }

}
