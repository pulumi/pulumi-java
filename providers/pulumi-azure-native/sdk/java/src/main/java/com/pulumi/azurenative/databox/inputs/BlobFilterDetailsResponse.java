// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.databox.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Filter details to transfer Azure Blobs
 * 
 */
public final class BlobFilterDetailsResponse extends com.pulumi.resources.InvokeArgs {

    public static final BlobFilterDetailsResponse Empty = new BlobFilterDetailsResponse();

    /**
     * List of full path of the blobs to be transferred.
     * 
     */
    @Import(name="blobPathList")
    private @Nullable List<String> blobPathList;

    public Optional<List<String>> blobPathList() {
        return Optional.ofNullable(this.blobPathList);
    }

    /**
     * Prefix list of the Azure blobs to be transferred.
     * 
     */
    @Import(name="blobPrefixList")
    private @Nullable List<String> blobPrefixList;

    public Optional<List<String>> blobPrefixList() {
        return Optional.ofNullable(this.blobPrefixList);
    }

    /**
     * List of blob containers to be transferred.
     * 
     */
    @Import(name="containerList")
    private @Nullable List<String> containerList;

    public Optional<List<String>> containerList() {
        return Optional.ofNullable(this.containerList);
    }

    private BlobFilterDetailsResponse() {}

    private BlobFilterDetailsResponse(BlobFilterDetailsResponse $) {
        this.blobPathList = $.blobPathList;
        this.blobPrefixList = $.blobPrefixList;
        this.containerList = $.containerList;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BlobFilterDetailsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BlobFilterDetailsResponse $;

        public Builder() {
            $ = new BlobFilterDetailsResponse();
        }

        public Builder(BlobFilterDetailsResponse defaults) {
            $ = new BlobFilterDetailsResponse(Objects.requireNonNull(defaults));
        }

        public Builder blobPathList(@Nullable List<String> blobPathList) {
            $.blobPathList = blobPathList;
            return this;
        }

        public Builder blobPathList(String... blobPathList) {
            return blobPathList(List.of(blobPathList));
        }

        public Builder blobPrefixList(@Nullable List<String> blobPrefixList) {
            $.blobPrefixList = blobPrefixList;
            return this;
        }

        public Builder blobPrefixList(String... blobPrefixList) {
            return blobPrefixList(List.of(blobPrefixList));
        }

        public Builder containerList(@Nullable List<String> containerList) {
            $.containerList = containerList;
            return this;
        }

        public Builder containerList(String... containerList) {
            return containerList(List.of(containerList));
        }

        public BlobFilterDetailsResponse build() {
            return $;
        }
    }

}
