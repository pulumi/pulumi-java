// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.logz.inputs;

import com.pulumi.azurenative.logz.inputs.FilteringTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Set of rules for sending metrics for the Monitor resource.
 * 
 */
public final class MetricRulesArgs extends com.pulumi.resources.ResourceArgs {

    public static final MetricRulesArgs Empty = new MetricRulesArgs();

    /**
     * List of filtering tags to be used for capturing metrics. If empty, all resources will be captured. If only Exclude action is specified, the rules will apply to the list of all available resources. If Include actions are specified, the rules will only include resources with the associated tags.
     * 
     */
    @Import(name="filteringTags")
      private final @Nullable Output<List<FilteringTagArgs>> filteringTags;

    public Output<List<FilteringTagArgs>> filteringTags() {
        return this.filteringTags == null ? Codegen.empty() : this.filteringTags;
    }

    /**
     * Subscription Id for which filtering tags are applicable
     * 
     */
    @Import(name="subscriptionId")
      private final @Nullable Output<String> subscriptionId;

    public Output<String> subscriptionId() {
        return this.subscriptionId == null ? Codegen.empty() : this.subscriptionId;
    }

    public MetricRulesArgs(
        @Nullable Output<List<FilteringTagArgs>> filteringTags,
        @Nullable Output<String> subscriptionId) {
        this.filteringTags = filteringTags;
        this.subscriptionId = subscriptionId;
    }

    private MetricRulesArgs() {
        this.filteringTags = Codegen.empty();
        this.subscriptionId = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MetricRulesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<FilteringTagArgs>> filteringTags;
        private @Nullable Output<String> subscriptionId;

        public Builder() {
    	      // Empty
        }

        public Builder(MetricRulesArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.filteringTags = defaults.filteringTags;
    	      this.subscriptionId = defaults.subscriptionId;
        }

        public Builder filteringTags(@Nullable Output<List<FilteringTagArgs>> filteringTags) {
            this.filteringTags = filteringTags;
            return this;
        }
        public Builder filteringTags(@Nullable List<FilteringTagArgs> filteringTags) {
            this.filteringTags = Codegen.ofNullable(filteringTags);
            return this;
        }
        public Builder filteringTags(FilteringTagArgs... filteringTags) {
            return filteringTags(List.of(filteringTags));
        }
        public Builder subscriptionId(@Nullable Output<String> subscriptionId) {
            this.subscriptionId = subscriptionId;
            return this;
        }
        public Builder subscriptionId(@Nullable String subscriptionId) {
            this.subscriptionId = Codegen.ofNullable(subscriptionId);
            return this;
        }        public MetricRulesArgs build() {
            return new MetricRulesArgs(filteringTags, subscriptionId);
        }
    }
}
