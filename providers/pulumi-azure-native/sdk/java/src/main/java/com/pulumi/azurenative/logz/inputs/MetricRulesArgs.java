// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.logz.inputs;

import com.pulumi.azurenative.logz.inputs.FilteringTagArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Set of rules for sending metrics for the Monitor resource.
 * 
 */
public final class MetricRulesArgs extends com.pulumi.resources.ResourceArgs {

    public static final MetricRulesArgs Empty = new MetricRulesArgs();

    /**
     * List of filtering tags to be used for capturing metrics. If empty, all resources will be captured. If only Exclude action is specified, the rules will apply to the list of all available resources. If Include actions are specified, the rules will only include resources with the associated tags.
     * 
     */
    @Import(name="filteringTags")
    private @Nullable Output<List<FilteringTagArgs>> filteringTags;

    public Optional<Output<List<FilteringTagArgs>>> filteringTags() {
        return Optional.ofNullable(this.filteringTags);
    }

    /**
     * Subscription Id for which filtering tags are applicable
     * 
     */
    @Import(name="subscriptionId")
    private @Nullable Output<String> subscriptionId;

    public Optional<Output<String>> subscriptionId() {
        return Optional.ofNullable(this.subscriptionId);
    }

    private MetricRulesArgs() {}

    private MetricRulesArgs(MetricRulesArgs $) {
        this.filteringTags = $.filteringTags;
        this.subscriptionId = $.subscriptionId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MetricRulesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MetricRulesArgs $;

        public Builder() {
            $ = new MetricRulesArgs();
        }

        public Builder(MetricRulesArgs defaults) {
            $ = new MetricRulesArgs(Objects.requireNonNull(defaults));
        }

        public Builder filteringTags(@Nullable Output<List<FilteringTagArgs>> filteringTags) {
            $.filteringTags = filteringTags;
            return this;
        }

        public Builder filteringTags(List<FilteringTagArgs> filteringTags) {
            return filteringTags(Output.of(filteringTags));
        }

        public Builder filteringTags(FilteringTagArgs... filteringTags) {
            return filteringTags(List.of(filteringTags));
        }

        public Builder subscriptionId(@Nullable Output<String> subscriptionId) {
            $.subscriptionId = subscriptionId;
            return this;
        }

        public Builder subscriptionId(String subscriptionId) {
            return subscriptionId(Output.of(subscriptionId));
        }

        public MetricRulesArgs build() {
            return $;
        }
    }

}
