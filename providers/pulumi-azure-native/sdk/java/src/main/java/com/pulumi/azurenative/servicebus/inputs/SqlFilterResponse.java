// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.servicebus.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Represents a filter which is a composition of an expression and an action that is executed in the pub/sub pipeline.
 * 
 */
public final class SqlFilterResponse extends com.pulumi.resources.InvokeArgs {

    public static final SqlFilterResponse Empty = new SqlFilterResponse();

    /**
     * This property is reserved for future use. An integer value showing the compatibility level, currently hard-coded to 20.
     * 
     */
    @Import(name="compatibilityLevel")
    private @Nullable Integer compatibilityLevel;

    public Optional<Integer> compatibilityLevel() {
        return Optional.ofNullable(this.compatibilityLevel);
    }

    /**
     * Value that indicates whether the rule action requires preprocessing.
     * 
     */
    @Import(name="requiresPreprocessing")
    private @Nullable Boolean requiresPreprocessing;

    public Optional<Boolean> requiresPreprocessing() {
        return Optional.ofNullable(this.requiresPreprocessing);
    }

    /**
     * The SQL expression. e.g. MyProperty=&#39;ABC&#39;
     * 
     */
    @Import(name="sqlExpression")
    private @Nullable String sqlExpression;

    public Optional<String> sqlExpression() {
        return Optional.ofNullable(this.sqlExpression);
    }

    private SqlFilterResponse() {}

    private SqlFilterResponse(SqlFilterResponse $) {
        this.compatibilityLevel = $.compatibilityLevel;
        this.requiresPreprocessing = $.requiresPreprocessing;
        this.sqlExpression = $.sqlExpression;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SqlFilterResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SqlFilterResponse $;

        public Builder() {
            $ = new SqlFilterResponse();
        }

        public Builder(SqlFilterResponse defaults) {
            $ = new SqlFilterResponse(Objects.requireNonNull(defaults));
        }

        public Builder compatibilityLevel(@Nullable Integer compatibilityLevel) {
            $.compatibilityLevel = compatibilityLevel;
            return this;
        }

        public Builder requiresPreprocessing(@Nullable Boolean requiresPreprocessing) {
            $.requiresPreprocessing = requiresPreprocessing;
            return this;
        }

        public Builder sqlExpression(@Nullable String sqlExpression) {
            $.sqlExpression = sqlExpression;
            return this;
        }

        public SqlFilterResponse build() {
            $.compatibilityLevel = Codegen.integerProp("compatibilityLevel").arg($.compatibilityLevel).def(20).getNullable();
            $.requiresPreprocessing = Codegen.booleanProp("requiresPreprocessing").arg($.requiresPreprocessing).def(true).getNullable();
            return $;
        }
    }

}
