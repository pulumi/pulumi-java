// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.webpubsub.inputs;

import com.pulumi.azurenative.webpubsub.inputs.UpstreamAuthSettingsResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * EventHandler template item settings.
 * 
 */
public final class EventHandlerTemplateResponse extends com.pulumi.resources.InvokeArgs {

    public static final EventHandlerTemplateResponse Empty = new EventHandlerTemplateResponse();

    /**
     * Gets or sets the auth settings for an event handler. If not set, no auth is used.
     * 
     */
    @Import(name="auth")
    private @Nullable UpstreamAuthSettingsResponse auth;

    /**
     * @return Gets or sets the auth settings for an event handler. If not set, no auth is used.
     * 
     */
    public Optional<UpstreamAuthSettingsResponse> auth() {
        return Optional.ofNullable(this.auth);
    }

    /**
     * Gets ot sets the system event pattern.
     * There are 2 kind of patterns supported:
     *     1. The single event name, for example, &#34;connect&#34;, it matches &#34;connect&#34;
     *     2. Combine multiple events with &#34;,&#34;, for example &#34;connect,disconnected&#34;, it matches event &#34;connect&#34; and &#34;disconnected&#34;
     * 
     */
    @Import(name="systemEventPattern")
    private @Nullable String systemEventPattern;

    /**
     * @return Gets ot sets the system event pattern.
     * There are 2 kind of patterns supported:
     *     1. The single event name, for example, &#34;connect&#34;, it matches &#34;connect&#34;
     *     2. Combine multiple events with &#34;,&#34;, for example &#34;connect,disconnected&#34;, it matches event &#34;connect&#34; and &#34;disconnected&#34;
     * 
     */
    public Optional<String> systemEventPattern() {
        return Optional.ofNullable(this.systemEventPattern);
    }

    /**
     * Gets or sets the EventHandler URL template. You can use a predefined parameter {hub} and {event} inside the template, the value of the EventHandler URL is dynamically calculated when the client request comes in.
     * For example, UrlTemplate can be `http://example.com/api/{hub}/{event}`. The host part can&#39;t contains parameters.
     * 
     */
    @Import(name="urlTemplate", required=true)
    private String urlTemplate;

    /**
     * @return Gets or sets the EventHandler URL template. You can use a predefined parameter {hub} and {event} inside the template, the value of the EventHandler URL is dynamically calculated when the client request comes in.
     * For example, UrlTemplate can be `http://example.com/api/{hub}/{event}`. The host part can&#39;t contains parameters.
     * 
     */
    public String urlTemplate() {
        return this.urlTemplate;
    }

    /**
     * Gets or sets the matching pattern for event names.
     * There are 3 kind of patterns supported:
     *     1. &#34;*&#34;, it to matches any event name
     *     2. Combine multiple events with &#34;,&#34;, for example &#34;event1,event2&#34;, it matches event &#34;event1&#34; and &#34;event2&#34;
     *     3. The single event name, for example, &#34;event1&#34;, it matches &#34;event1&#34;
     * 
     */
    @Import(name="userEventPattern")
    private @Nullable String userEventPattern;

    /**
     * @return Gets or sets the matching pattern for event names.
     * There are 3 kind of patterns supported:
     *     1. &#34;*&#34;, it to matches any event name
     *     2. Combine multiple events with &#34;,&#34;, for example &#34;event1,event2&#34;, it matches event &#34;event1&#34; and &#34;event2&#34;
     *     3. The single event name, for example, &#34;event1&#34;, it matches &#34;event1&#34;
     * 
     */
    public Optional<String> userEventPattern() {
        return Optional.ofNullable(this.userEventPattern);
    }

    private EventHandlerTemplateResponse() {}

    private EventHandlerTemplateResponse(EventHandlerTemplateResponse $) {
        this.auth = $.auth;
        this.systemEventPattern = $.systemEventPattern;
        this.urlTemplate = $.urlTemplate;
        this.userEventPattern = $.userEventPattern;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EventHandlerTemplateResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EventHandlerTemplateResponse $;

        public Builder() {
            $ = new EventHandlerTemplateResponse();
        }

        public Builder(EventHandlerTemplateResponse defaults) {
            $ = new EventHandlerTemplateResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param auth Gets or sets the auth settings for an event handler. If not set, no auth is used.
         * 
         * @return builder
         * 
         */
        public Builder auth(@Nullable UpstreamAuthSettingsResponse auth) {
            $.auth = auth;
            return this;
        }

        /**
         * @param systemEventPattern Gets ot sets the system event pattern.
         * There are 2 kind of patterns supported:
         *     1. The single event name, for example, &#34;connect&#34;, it matches &#34;connect&#34;
         *     2. Combine multiple events with &#34;,&#34;, for example &#34;connect,disconnected&#34;, it matches event &#34;connect&#34; and &#34;disconnected&#34;
         * 
         * @return builder
         * 
         */
        public Builder systemEventPattern(@Nullable String systemEventPattern) {
            $.systemEventPattern = systemEventPattern;
            return this;
        }

        /**
         * @param urlTemplate Gets or sets the EventHandler URL template. You can use a predefined parameter {hub} and {event} inside the template, the value of the EventHandler URL is dynamically calculated when the client request comes in.
         * For example, UrlTemplate can be `http://example.com/api/{hub}/{event}`. The host part can&#39;t contains parameters.
         * 
         * @return builder
         * 
         */
        public Builder urlTemplate(String urlTemplate) {
            $.urlTemplate = urlTemplate;
            return this;
        }

        /**
         * @param userEventPattern Gets or sets the matching pattern for event names.
         * There are 3 kind of patterns supported:
         *     1. &#34;*&#34;, it to matches any event name
         *     2. Combine multiple events with &#34;,&#34;, for example &#34;event1,event2&#34;, it matches event &#34;event1&#34; and &#34;event2&#34;
         *     3. The single event name, for example, &#34;event1&#34;, it matches &#34;event1&#34;
         * 
         * @return builder
         * 
         */
        public Builder userEventPattern(@Nullable String userEventPattern) {
            $.userEventPattern = userEventPattern;
            return this;
        }

        public EventHandlerTemplateResponse build() {
            $.urlTemplate = Objects.requireNonNull($.urlTemplate, "expected parameter 'urlTemplate' to be non-null");
            return $;
        }
    }

}
