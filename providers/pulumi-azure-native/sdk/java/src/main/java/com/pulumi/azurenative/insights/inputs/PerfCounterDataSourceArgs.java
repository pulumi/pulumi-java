// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.insights.inputs;

import com.pulumi.azurenative.insights.enums.KnownPerfCounterDataSourceStreams;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Definition of which performance counters will be collected and how they will be collected by this data collection rule.
 * Collected from both Windows and Linux machines where the counter is present.
 * 
 */
public final class PerfCounterDataSourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final PerfCounterDataSourceArgs Empty = new PerfCounterDataSourceArgs();

    /**
     * A list of specifier names of the performance counters you want to collect.
     * Use a wildcard (*) to collect a counter for all instances.
     * To get a list of performance counters on Windows, run the command &#39;typeperf&#39;.
     * 
     */
    @Import(name="counterSpecifiers")
    private @Nullable Output<List<String>> counterSpecifiers;

    /**
     * @return A list of specifier names of the performance counters you want to collect.
     * Use a wildcard (*) to collect a counter for all instances.
     * To get a list of performance counters on Windows, run the command &#39;typeperf&#39;.
     * 
     */
    public Optional<Output<List<String>>> counterSpecifiers() {
        return Optional.ofNullable(this.counterSpecifiers);
    }

    /**
     * A friendly name for the data source.
     * This name should be unique across all data sources (regardless of type) within the data collection rule.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return A friendly name for the data source.
     * This name should be unique across all data sources (regardless of type) within the data collection rule.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The number of seconds between consecutive counter measurements (samples).
     * 
     */
    @Import(name="samplingFrequencyInSeconds")
    private @Nullable Output<Integer> samplingFrequencyInSeconds;

    /**
     * @return The number of seconds between consecutive counter measurements (samples).
     * 
     */
    public Optional<Output<Integer>> samplingFrequencyInSeconds() {
        return Optional.ofNullable(this.samplingFrequencyInSeconds);
    }

    /**
     * List of streams that this data source will be sent to.
     * A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
     * 
     */
    @Import(name="streams")
    private @Nullable Output<List<Either<String,KnownPerfCounterDataSourceStreams>>> streams;

    /**
     * @return List of streams that this data source will be sent to.
     * A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
     * 
     */
    public Optional<Output<List<Either<String,KnownPerfCounterDataSourceStreams>>>> streams() {
        return Optional.ofNullable(this.streams);
    }

    private PerfCounterDataSourceArgs() {}

    private PerfCounterDataSourceArgs(PerfCounterDataSourceArgs $) {
        this.counterSpecifiers = $.counterSpecifiers;
        this.name = $.name;
        this.samplingFrequencyInSeconds = $.samplingFrequencyInSeconds;
        this.streams = $.streams;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PerfCounterDataSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PerfCounterDataSourceArgs $;

        public Builder() {
            $ = new PerfCounterDataSourceArgs();
        }

        public Builder(PerfCounterDataSourceArgs defaults) {
            $ = new PerfCounterDataSourceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param counterSpecifiers A list of specifier names of the performance counters you want to collect.
         * Use a wildcard (*) to collect a counter for all instances.
         * To get a list of performance counters on Windows, run the command &#39;typeperf&#39;.
         * 
         * @return builder
         * 
         */
        public Builder counterSpecifiers(@Nullable Output<List<String>> counterSpecifiers) {
            $.counterSpecifiers = counterSpecifiers;
            return this;
        }

        /**
         * @param counterSpecifiers A list of specifier names of the performance counters you want to collect.
         * Use a wildcard (*) to collect a counter for all instances.
         * To get a list of performance counters on Windows, run the command &#39;typeperf&#39;.
         * 
         * @return builder
         * 
         */
        public Builder counterSpecifiers(List<String> counterSpecifiers) {
            return counterSpecifiers(Output.of(counterSpecifiers));
        }

        /**
         * @param counterSpecifiers A list of specifier names of the performance counters you want to collect.
         * Use a wildcard (*) to collect a counter for all instances.
         * To get a list of performance counters on Windows, run the command &#39;typeperf&#39;.
         * 
         * @return builder
         * 
         */
        public Builder counterSpecifiers(String... counterSpecifiers) {
            return counterSpecifiers(List.of(counterSpecifiers));
        }

        /**
         * @param name A friendly name for the data source.
         * This name should be unique across all data sources (regardless of type) within the data collection rule.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A friendly name for the data source.
         * This name should be unique across all data sources (regardless of type) within the data collection rule.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param samplingFrequencyInSeconds The number of seconds between consecutive counter measurements (samples).
         * 
         * @return builder
         * 
         */
        public Builder samplingFrequencyInSeconds(@Nullable Output<Integer> samplingFrequencyInSeconds) {
            $.samplingFrequencyInSeconds = samplingFrequencyInSeconds;
            return this;
        }

        /**
         * @param samplingFrequencyInSeconds The number of seconds between consecutive counter measurements (samples).
         * 
         * @return builder
         * 
         */
        public Builder samplingFrequencyInSeconds(Integer samplingFrequencyInSeconds) {
            return samplingFrequencyInSeconds(Output.of(samplingFrequencyInSeconds));
        }

        /**
         * @param streams List of streams that this data source will be sent to.
         * A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
         * 
         * @return builder
         * 
         */
        public Builder streams(@Nullable Output<List<Either<String,KnownPerfCounterDataSourceStreams>>> streams) {
            $.streams = streams;
            return this;
        }

        /**
         * @param streams List of streams that this data source will be sent to.
         * A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
         * 
         * @return builder
         * 
         */
        public Builder streams(List<Either<String,KnownPerfCounterDataSourceStreams>> streams) {
            return streams(Output.of(streams));
        }

        /**
         * @param streams List of streams that this data source will be sent to.
         * A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
         * 
         * @return builder
         * 
         */
        public Builder streams(Either<String,KnownPerfCounterDataSourceStreams>... streams) {
            return streams(List.of(streams));
        }

        public PerfCounterDataSourceArgs build() {
            return $;
        }
    }

}
