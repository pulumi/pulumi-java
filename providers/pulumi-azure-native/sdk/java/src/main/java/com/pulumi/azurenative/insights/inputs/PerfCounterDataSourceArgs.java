// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.insights.inputs;

import com.pulumi.azurenative.insights.enums.KnownPerfCounterDataSourceStreams;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Definition of which performance counters will be collected and how they will be collected by this data collection rule.
 * Collected from both Windows and Linux machines where the counter is present.
 * 
 */
public final class PerfCounterDataSourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final PerfCounterDataSourceArgs Empty = new PerfCounterDataSourceArgs();

    /**
     * A list of specifier names of the performance counters you want to collect.
     * Use a wildcard (*) to collect a counter for all instances.
     * To get a list of performance counters on Windows, run the command 'typeperf'.
     * 
     */
    @Import(name="counterSpecifiers")
      private final @Nullable Output<List<String>> counterSpecifiers;

    public Output<List<String>> counterSpecifiers() {
        return this.counterSpecifiers == null ? Codegen.empty() : this.counterSpecifiers;
    }

    /**
     * A friendly name for the data source.
     * This name should be unique across all data sources (regardless of type) within the data collection rule.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * The number of seconds between consecutive counter measurements (samples).
     * 
     */
    @Import(name="samplingFrequencyInSeconds")
      private final @Nullable Output<Integer> samplingFrequencyInSeconds;

    public Output<Integer> samplingFrequencyInSeconds() {
        return this.samplingFrequencyInSeconds == null ? Codegen.empty() : this.samplingFrequencyInSeconds;
    }

    /**
     * List of streams that this data source will be sent to.
     * A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
     * 
     */
    @Import(name="streams")
      private final @Nullable Output<List<Either<String,KnownPerfCounterDataSourceStreams>>> streams;

    public Output<List<Either<String,KnownPerfCounterDataSourceStreams>>> streams() {
        return this.streams == null ? Codegen.empty() : this.streams;
    }

    public PerfCounterDataSourceArgs(
        @Nullable Output<List<String>> counterSpecifiers,
        @Nullable Output<String> name,
        @Nullable Output<Integer> samplingFrequencyInSeconds,
        @Nullable Output<List<Either<String,KnownPerfCounterDataSourceStreams>>> streams) {
        this.counterSpecifiers = counterSpecifiers;
        this.name = name;
        this.samplingFrequencyInSeconds = samplingFrequencyInSeconds;
        this.streams = streams;
    }

    private PerfCounterDataSourceArgs() {
        this.counterSpecifiers = Codegen.empty();
        this.name = Codegen.empty();
        this.samplingFrequencyInSeconds = Codegen.empty();
        this.streams = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PerfCounterDataSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<String>> counterSpecifiers;
        private @Nullable Output<String> name;
        private @Nullable Output<Integer> samplingFrequencyInSeconds;
        private @Nullable Output<List<Either<String,KnownPerfCounterDataSourceStreams>>> streams;

        public Builder() {
    	      // Empty
        }

        public Builder(PerfCounterDataSourceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.counterSpecifiers = defaults.counterSpecifiers;
    	      this.name = defaults.name;
    	      this.samplingFrequencyInSeconds = defaults.samplingFrequencyInSeconds;
    	      this.streams = defaults.streams;
        }

        public Builder counterSpecifiers(@Nullable Output<List<String>> counterSpecifiers) {
            this.counterSpecifiers = counterSpecifiers;
            return this;
        }
        public Builder counterSpecifiers(@Nullable List<String> counterSpecifiers) {
            this.counterSpecifiers = Codegen.ofNullable(counterSpecifiers);
            return this;
        }
        public Builder counterSpecifiers(String... counterSpecifiers) {
            return counterSpecifiers(List.of(counterSpecifiers));
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder samplingFrequencyInSeconds(@Nullable Output<Integer> samplingFrequencyInSeconds) {
            this.samplingFrequencyInSeconds = samplingFrequencyInSeconds;
            return this;
        }
        public Builder samplingFrequencyInSeconds(@Nullable Integer samplingFrequencyInSeconds) {
            this.samplingFrequencyInSeconds = Codegen.ofNullable(samplingFrequencyInSeconds);
            return this;
        }
        public Builder streams(@Nullable Output<List<Either<String,KnownPerfCounterDataSourceStreams>>> streams) {
            this.streams = streams;
            return this;
        }
        public Builder streams(@Nullable List<Either<String,KnownPerfCounterDataSourceStreams>> streams) {
            this.streams = Codegen.ofNullable(streams);
            return this;
        }
        public Builder streams(Either<String,KnownPerfCounterDataSourceStreams>... streams) {
            return streams(List.of(streams));
        }        public PerfCounterDataSourceArgs build() {
            return new PerfCounterDataSourceArgs(counterSpecifiers, name, samplingFrequencyInSeconds, streams);
        }
    }
}
