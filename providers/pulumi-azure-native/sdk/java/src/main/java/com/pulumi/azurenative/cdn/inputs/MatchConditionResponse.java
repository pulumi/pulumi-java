// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.cdn.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Define match conditions
 * 
 */
public final class MatchConditionResponse extends com.pulumi.resources.InvokeArgs {

    public static final MatchConditionResponse Empty = new MatchConditionResponse();

    /**
     * List of possible match values.
     * 
     */
    @Import(name="matchValue", required=true)
    private List<String> matchValue;

    /**
     * @return List of possible match values.
     * 
     */
    public List<String> matchValue() {
        return this.matchValue;
    }

    /**
     * Match variable to compare against.
     * 
     */
    @Import(name="matchVariable", required=true)
    private String matchVariable;

    /**
     * @return Match variable to compare against.
     * 
     */
    public String matchVariable() {
        return this.matchVariable;
    }

    /**
     * Describes if the result of this condition should be negated.
     * 
     */
    @Import(name="negateCondition")
    private @Nullable Boolean negateCondition;

    /**
     * @return Describes if the result of this condition should be negated.
     * 
     */
    public Optional<Boolean> negateCondition() {
        return Optional.ofNullable(this.negateCondition);
    }

    /**
     * Describes operator to be matched
     * 
     */
    @Import(name="operator", required=true)
    private String operator;

    /**
     * @return Describes operator to be matched
     * 
     */
    public String operator() {
        return this.operator;
    }

    /**
     * Selector can used to match a specific key for QueryString, Cookies, RequestHeader or PostArgs.
     * 
     */
    @Import(name="selector")
    private @Nullable String selector;

    /**
     * @return Selector can used to match a specific key for QueryString, Cookies, RequestHeader or PostArgs.
     * 
     */
    public Optional<String> selector() {
        return Optional.ofNullable(this.selector);
    }

    /**
     * List of transforms.
     * 
     */
    @Import(name="transforms")
    private @Nullable List<String> transforms;

    /**
     * @return List of transforms.
     * 
     */
    public Optional<List<String>> transforms() {
        return Optional.ofNullable(this.transforms);
    }

    private MatchConditionResponse() {}

    private MatchConditionResponse(MatchConditionResponse $) {
        this.matchValue = $.matchValue;
        this.matchVariable = $.matchVariable;
        this.negateCondition = $.negateCondition;
        this.operator = $.operator;
        this.selector = $.selector;
        this.transforms = $.transforms;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MatchConditionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MatchConditionResponse $;

        public Builder() {
            $ = new MatchConditionResponse();
        }

        public Builder(MatchConditionResponse defaults) {
            $ = new MatchConditionResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param matchValue List of possible match values.
         * 
         * @return builder
         * 
         */
        public Builder matchValue(List<String> matchValue) {
            $.matchValue = matchValue;
            return this;
        }

        /**
         * @param matchValue List of possible match values.
         * 
         * @return builder
         * 
         */
        public Builder matchValue(String... matchValue) {
            return matchValue(List.of(matchValue));
        }

        /**
         * @param matchVariable Match variable to compare against.
         * 
         * @return builder
         * 
         */
        public Builder matchVariable(String matchVariable) {
            $.matchVariable = matchVariable;
            return this;
        }

        /**
         * @param negateCondition Describes if the result of this condition should be negated.
         * 
         * @return builder
         * 
         */
        public Builder negateCondition(@Nullable Boolean negateCondition) {
            $.negateCondition = negateCondition;
            return this;
        }

        /**
         * @param operator Describes operator to be matched
         * 
         * @return builder
         * 
         */
        public Builder operator(String operator) {
            $.operator = operator;
            return this;
        }

        /**
         * @param selector Selector can used to match a specific key for QueryString, Cookies, RequestHeader or PostArgs.
         * 
         * @return builder
         * 
         */
        public Builder selector(@Nullable String selector) {
            $.selector = selector;
            return this;
        }

        /**
         * @param transforms List of transforms.
         * 
         * @return builder
         * 
         */
        public Builder transforms(@Nullable List<String> transforms) {
            $.transforms = transforms;
            return this;
        }

        /**
         * @param transforms List of transforms.
         * 
         * @return builder
         * 
         */
        public Builder transforms(String... transforms) {
            return transforms(List.of(transforms));
        }

        public MatchConditionResponse build() {
            $.matchValue = Objects.requireNonNull($.matchValue, "expected parameter 'matchValue' to be non-null");
            $.matchVariable = Objects.requireNonNull($.matchVariable, "expected parameter 'matchVariable' to be non-null");
            $.operator = Objects.requireNonNull($.operator, "expected parameter 'operator' to be non-null");
            return $;
        }
    }

}
