// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.azurenative.datafactory.enums.StoredProcedureParameterType;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * SQL stored procedure parameter.
 * 
 */
public final class StoredProcedureParameterArgs extends com.pulumi.resources.ResourceArgs {

    public static final StoredProcedureParameterArgs Empty = new StoredProcedureParameterArgs();

    /**
     * Stored procedure parameter type.
     * 
     */
    @Import(name="type")
    private @Nullable Output<Either<String,StoredProcedureParameterType>> type;

    /**
     * @return Stored procedure parameter type.
     * 
     */
    public Optional<Output<Either<String,StoredProcedureParameterType>>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * Stored procedure parameter value. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="value")
    private @Nullable Output<Object> value;

    /**
     * @return Stored procedure parameter value. Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Output<Object>> value() {
        return Optional.ofNullable(this.value);
    }

    private StoredProcedureParameterArgs() {}

    private StoredProcedureParameterArgs(StoredProcedureParameterArgs $) {
        this.type = $.type;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StoredProcedureParameterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StoredProcedureParameterArgs $;

        public Builder() {
            $ = new StoredProcedureParameterArgs();
        }

        public Builder(StoredProcedureParameterArgs defaults) {
            $ = new StoredProcedureParameterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param type Stored procedure parameter type.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<Either<String,StoredProcedureParameterType>> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Stored procedure parameter type.
         * 
         * @return builder
         * 
         */
        public Builder type(Either<String,StoredProcedureParameterType> type) {
            return type(Output.of(type));
        }

        /**
         * @param type Stored procedure parameter type.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Either.ofLeft(type));
        }

        /**
         * @param type Stored procedure parameter type.
         * 
         * @return builder
         * 
         */
        public Builder type(StoredProcedureParameterType type) {
            return type(Either.ofRight(type));
        }

        /**
         * @param value Stored procedure parameter value. Type: string (or Expression with resultType string).
         * 
         * @return builder
         * 
         */
        public Builder value(@Nullable Output<Object> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value Stored procedure parameter value. Type: string (or Expression with resultType string).
         * 
         * @return builder
         * 
         */
        public Builder value(Object value) {
            return value(Output.of(value));
        }

        public StoredProcedureParameterArgs build() {
            return $;
        }
    }

}
