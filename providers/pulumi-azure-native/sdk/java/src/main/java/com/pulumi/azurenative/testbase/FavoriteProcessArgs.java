// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.testbase;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FavoriteProcessArgs extends com.pulumi.resources.ResourceArgs {

    public static final FavoriteProcessArgs Empty = new FavoriteProcessArgs();

    /**
     * The actual name of the favorite process. It will be equal to resource name except for the scenario that the process name contains characters that are not allowed in the resource name.
     * 
     */
    @Import(name="actualProcessName", required=true)
    private Output<String> actualProcessName;

    /**
     * @return The actual name of the favorite process. It will be equal to resource name except for the scenario that the process name contains characters that are not allowed in the resource name.
     * 
     */
    public Output<String> actualProcessName() {
        return this.actualProcessName;
    }

    /**
     * The resource name of a favorite process in a package. If the process name contains characters that are not allowed in Azure Resource Name, we use &#39;actualProcessName&#39; in request body to submit the name.
     * 
     */
    @Import(name="favoriteProcessResourceName")
    private @Nullable Output<String> favoriteProcessResourceName;

    /**
     * @return The resource name of a favorite process in a package. If the process name contains characters that are not allowed in Azure Resource Name, we use &#39;actualProcessName&#39; in request body to submit the name.
     * 
     */
    public Optional<Output<String>> favoriteProcessResourceName() {
        return Optional.ofNullable(this.favoriteProcessResourceName);
    }

    /**
     * The resource name of the Test Base Package.
     * 
     */
    @Import(name="packageName", required=true)
    private Output<String> packageName;

    /**
     * @return The resource name of the Test Base Package.
     * 
     */
    public Output<String> packageName() {
        return this.packageName;
    }

    /**
     * The name of the resource group that contains the resource.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group that contains the resource.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The resource name of the Test Base Account.
     * 
     */
    @Import(name="testBaseAccountName", required=true)
    private Output<String> testBaseAccountName;

    /**
     * @return The resource name of the Test Base Account.
     * 
     */
    public Output<String> testBaseAccountName() {
        return this.testBaseAccountName;
    }

    private FavoriteProcessArgs() {}

    private FavoriteProcessArgs(FavoriteProcessArgs $) {
        this.actualProcessName = $.actualProcessName;
        this.favoriteProcessResourceName = $.favoriteProcessResourceName;
        this.packageName = $.packageName;
        this.resourceGroupName = $.resourceGroupName;
        this.testBaseAccountName = $.testBaseAccountName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FavoriteProcessArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FavoriteProcessArgs $;

        public Builder() {
            $ = new FavoriteProcessArgs();
        }

        public Builder(FavoriteProcessArgs defaults) {
            $ = new FavoriteProcessArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param actualProcessName The actual name of the favorite process. It will be equal to resource name except for the scenario that the process name contains characters that are not allowed in the resource name.
         * 
         * @return builder
         * 
         */
        public Builder actualProcessName(Output<String> actualProcessName) {
            $.actualProcessName = actualProcessName;
            return this;
        }

        /**
         * @param actualProcessName The actual name of the favorite process. It will be equal to resource name except for the scenario that the process name contains characters that are not allowed in the resource name.
         * 
         * @return builder
         * 
         */
        public Builder actualProcessName(String actualProcessName) {
            return actualProcessName(Output.of(actualProcessName));
        }

        /**
         * @param favoriteProcessResourceName The resource name of a favorite process in a package. If the process name contains characters that are not allowed in Azure Resource Name, we use &#39;actualProcessName&#39; in request body to submit the name.
         * 
         * @return builder
         * 
         */
        public Builder favoriteProcessResourceName(@Nullable Output<String> favoriteProcessResourceName) {
            $.favoriteProcessResourceName = favoriteProcessResourceName;
            return this;
        }

        /**
         * @param favoriteProcessResourceName The resource name of a favorite process in a package. If the process name contains characters that are not allowed in Azure Resource Name, we use &#39;actualProcessName&#39; in request body to submit the name.
         * 
         * @return builder
         * 
         */
        public Builder favoriteProcessResourceName(String favoriteProcessResourceName) {
            return favoriteProcessResourceName(Output.of(favoriteProcessResourceName));
        }

        /**
         * @param packageName The resource name of the Test Base Package.
         * 
         * @return builder
         * 
         */
        public Builder packageName(Output<String> packageName) {
            $.packageName = packageName;
            return this;
        }

        /**
         * @param packageName The resource name of the Test Base Package.
         * 
         * @return builder
         * 
         */
        public Builder packageName(String packageName) {
            return packageName(Output.of(packageName));
        }

        /**
         * @param resourceGroupName The name of the resource group that contains the resource.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group that contains the resource.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param testBaseAccountName The resource name of the Test Base Account.
         * 
         * @return builder
         * 
         */
        public Builder testBaseAccountName(Output<String> testBaseAccountName) {
            $.testBaseAccountName = testBaseAccountName;
            return this;
        }

        /**
         * @param testBaseAccountName The resource name of the Test Base Account.
         * 
         * @return builder
         * 
         */
        public Builder testBaseAccountName(String testBaseAccountName) {
            return testBaseAccountName(Output.of(testBaseAccountName));
        }

        public FavoriteProcessArgs build() {
            $.actualProcessName = Objects.requireNonNull($.actualProcessName, "expected parameter 'actualProcessName' to be non-null");
            $.packageName = Objects.requireNonNull($.packageName, "expected parameter 'packageName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.testBaseAccountName = Objects.requireNonNull($.testBaseAccountName, "expected parameter 'testBaseAccountName' to be non-null");
            return $;
        }
    }

}
