// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.avs.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * The properties of a default cluster
 * 
 */
public final class ManagementClusterResponse extends com.pulumi.resources.InvokeArgs {

    public static final ManagementClusterResponse Empty = new ManagementClusterResponse();

    /**
     * The identity
     * 
     */
    @Import(name="clusterId", required=true)
    private Integer clusterId;

    /**
     * @return The identity
     * 
     */
    public Integer clusterId() {
        return this.clusterId;
    }

    /**
     * The cluster size
     * 
     */
    @Import(name="clusterSize", required=true)
    private Integer clusterSize;

    /**
     * @return The cluster size
     * 
     */
    public Integer clusterSize() {
        return this.clusterSize;
    }

    /**
     * The hosts
     * 
     */
    @Import(name="hosts", required=true)
    private List<String> hosts;

    /**
     * @return The hosts
     * 
     */
    public List<String> hosts() {
        return this.hosts;
    }

    /**
     * The state of the cluster provisioning
     * 
     */
    @Import(name="provisioningState", required=true)
    private String provisioningState;

    /**
     * @return The state of the cluster provisioning
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    private ManagementClusterResponse() {}

    private ManagementClusterResponse(ManagementClusterResponse $) {
        this.clusterId = $.clusterId;
        this.clusterSize = $.clusterSize;
        this.hosts = $.hosts;
        this.provisioningState = $.provisioningState;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagementClusterResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagementClusterResponse $;

        public Builder() {
            $ = new ManagementClusterResponse();
        }

        public Builder(ManagementClusterResponse defaults) {
            $ = new ManagementClusterResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param clusterId The identity
         * 
         * @return builder
         * 
         */
        public Builder clusterId(Integer clusterId) {
            $.clusterId = clusterId;
            return this;
        }

        /**
         * @param clusterSize The cluster size
         * 
         * @return builder
         * 
         */
        public Builder clusterSize(Integer clusterSize) {
            $.clusterSize = clusterSize;
            return this;
        }

        /**
         * @param hosts The hosts
         * 
         * @return builder
         * 
         */
        public Builder hosts(List<String> hosts) {
            $.hosts = hosts;
            return this;
        }

        /**
         * @param hosts The hosts
         * 
         * @return builder
         * 
         */
        public Builder hosts(String... hosts) {
            return hosts(List.of(hosts));
        }

        /**
         * @param provisioningState The state of the cluster provisioning
         * 
         * @return builder
         * 
         */
        public Builder provisioningState(String provisioningState) {
            $.provisioningState = provisioningState;
            return this;
        }

        public ManagementClusterResponse build() {
            $.clusterId = Objects.requireNonNull($.clusterId, "expected parameter 'clusterId' to be non-null");
            $.clusterSize = Objects.requireNonNull($.clusterSize, "expected parameter 'clusterSize' to be non-null");
            $.hosts = Objects.requireNonNull($.hosts, "expected parameter 'hosts' to be non-null");
            $.provisioningState = Objects.requireNonNull($.provisioningState, "expected parameter 'provisioningState' to be non-null");
            return $;
        }
    }

}
