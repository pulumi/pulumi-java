// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.azurenative.datafactory.enums.ScriptActivityParameterDirection;
import com.pulumi.azurenative.datafactory.enums.ScriptActivityParameterType;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Parameters of a script block.
 * 
 */
public final class ScriptActivityParameterArgs extends com.pulumi.resources.ResourceArgs {

    public static final ScriptActivityParameterArgs Empty = new ScriptActivityParameterArgs();

    /**
     * The direction of the parameter.
     * 
     */
    @Import(name="direction")
    private @Nullable Output<Either<String,ScriptActivityParameterDirection>> direction;

    /**
     * @return The direction of the parameter.
     * 
     */
    public Optional<Output<Either<String,ScriptActivityParameterDirection>>> direction() {
        return Optional.ofNullable(this.direction);
    }

    /**
     * The name of the parameter. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="name")
    private @Nullable Output<Object> name;

    /**
     * @return The name of the parameter. Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Output<Object>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The size of the output direction parameter.
     * 
     */
    @Import(name="size")
    private @Nullable Output<Integer> size;

    /**
     * @return The size of the output direction parameter.
     * 
     */
    public Optional<Output<Integer>> size() {
        return Optional.ofNullable(this.size);
    }

    /**
     * The type of the parameter.
     * 
     */
    @Import(name="type")
    private @Nullable Output<Either<String,ScriptActivityParameterType>> type;

    /**
     * @return The type of the parameter.
     * 
     */
    public Optional<Output<Either<String,ScriptActivityParameterType>>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * The value of the parameter.
     * 
     */
    @Import(name="value")
    private @Nullable Output<Object> value;

    /**
     * @return The value of the parameter.
     * 
     */
    public Optional<Output<Object>> value() {
        return Optional.ofNullable(this.value);
    }

    private ScriptActivityParameterArgs() {}

    private ScriptActivityParameterArgs(ScriptActivityParameterArgs $) {
        this.direction = $.direction;
        this.name = $.name;
        this.size = $.size;
        this.type = $.type;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ScriptActivityParameterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ScriptActivityParameterArgs $;

        public Builder() {
            $ = new ScriptActivityParameterArgs();
        }

        public Builder(ScriptActivityParameterArgs defaults) {
            $ = new ScriptActivityParameterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param direction The direction of the parameter.
         * 
         * @return builder
         * 
         */
        public Builder direction(@Nullable Output<Either<String,ScriptActivityParameterDirection>> direction) {
            $.direction = direction;
            return this;
        }

        /**
         * @param direction The direction of the parameter.
         * 
         * @return builder
         * 
         */
        public Builder direction(Either<String,ScriptActivityParameterDirection> direction) {
            return direction(Output.of(direction));
        }

        /**
         * @param direction The direction of the parameter.
         * 
         * @return builder
         * 
         */
        public Builder direction(String direction) {
            return direction(Either.ofLeft(direction));
        }

        /**
         * @param direction The direction of the parameter.
         * 
         * @return builder
         * 
         */
        public Builder direction(ScriptActivityParameterDirection direction) {
            return direction(Either.ofRight(direction));
        }

        /**
         * @param name The name of the parameter. Type: string (or Expression with resultType string).
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<Object> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the parameter. Type: string (or Expression with resultType string).
         * 
         * @return builder
         * 
         */
        public Builder name(Object name) {
            return name(Output.of(name));
        }

        /**
         * @param size The size of the output direction parameter.
         * 
         * @return builder
         * 
         */
        public Builder size(@Nullable Output<Integer> size) {
            $.size = size;
            return this;
        }

        /**
         * @param size The size of the output direction parameter.
         * 
         * @return builder
         * 
         */
        public Builder size(Integer size) {
            return size(Output.of(size));
        }

        /**
         * @param type The type of the parameter.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<Either<String,ScriptActivityParameterType>> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of the parameter.
         * 
         * @return builder
         * 
         */
        public Builder type(Either<String,ScriptActivityParameterType> type) {
            return type(Output.of(type));
        }

        /**
         * @param type The type of the parameter.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Either.ofLeft(type));
        }

        /**
         * @param type The type of the parameter.
         * 
         * @return builder
         * 
         */
        public Builder type(ScriptActivityParameterType type) {
            return type(Either.ofRight(type));
        }

        /**
         * @param value The value of the parameter.
         * 
         * @return builder
         * 
         */
        public Builder value(@Nullable Output<Object> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value The value of the parameter.
         * 
         * @return builder
         * 
         */
        public Builder value(Object value) {
            return value(Output.of(value));
        }

        public ScriptActivityParameterArgs build() {
            return $;
        }
    }

}
