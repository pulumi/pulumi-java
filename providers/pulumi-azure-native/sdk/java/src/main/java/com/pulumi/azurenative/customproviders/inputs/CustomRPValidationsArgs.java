// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.customproviders.inputs;

import com.pulumi.azurenative.customproviders.enums.ValidationType;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A validation to apply on custom resource provider requests.
 * 
 */
public final class CustomRPValidationsArgs extends com.pulumi.resources.ResourceArgs {

    public static final CustomRPValidationsArgs Empty = new CustomRPValidationsArgs();

    /**
     * A link to the validation specification. The specification must be hosted on raw.githubusercontent.com.
     * 
     */
    @Import(name="specification", required=true)
    private Output<String> specification;

    /**
     * @return A link to the validation specification. The specification must be hosted on raw.githubusercontent.com.
     * 
     */
    public Output<String> specification() {
        return this.specification;
    }

    /**
     * The type of validation to run against a matching request.
     * 
     */
    @Import(name="validationType")
    private @Nullable Output<Either<String,ValidationType>> validationType;

    /**
     * @return The type of validation to run against a matching request.
     * 
     */
    public Optional<Output<Either<String,ValidationType>>> validationType() {
        return Optional.ofNullable(this.validationType);
    }

    private CustomRPValidationsArgs() {}

    private CustomRPValidationsArgs(CustomRPValidationsArgs $) {
        this.specification = $.specification;
        this.validationType = $.validationType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CustomRPValidationsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CustomRPValidationsArgs $;

        public Builder() {
            $ = new CustomRPValidationsArgs();
        }

        public Builder(CustomRPValidationsArgs defaults) {
            $ = new CustomRPValidationsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param specification A link to the validation specification. The specification must be hosted on raw.githubusercontent.com.
         * 
         * @return builder
         * 
         */
        public Builder specification(Output<String> specification) {
            $.specification = specification;
            return this;
        }

        /**
         * @param specification A link to the validation specification. The specification must be hosted on raw.githubusercontent.com.
         * 
         * @return builder
         * 
         */
        public Builder specification(String specification) {
            return specification(Output.of(specification));
        }

        /**
         * @param validationType The type of validation to run against a matching request.
         * 
         * @return builder
         * 
         */
        public Builder validationType(@Nullable Output<Either<String,ValidationType>> validationType) {
            $.validationType = validationType;
            return this;
        }

        /**
         * @param validationType The type of validation to run against a matching request.
         * 
         * @return builder
         * 
         */
        public Builder validationType(Either<String,ValidationType> validationType) {
            return validationType(Output.of(validationType));
        }

        /**
         * @param validationType The type of validation to run against a matching request.
         * 
         * @return builder
         * 
         */
        public Builder validationType(String validationType) {
            return validationType(Either.ofLeft(validationType));
        }

        /**
         * @param validationType The type of validation to run against a matching request.
         * 
         * @return builder
         * 
         */
        public Builder validationType(ValidationType validationType) {
            return validationType(Either.ofRight(validationType));
        }

        public CustomRPValidationsArgs build() {
            $.specification = Objects.requireNonNull($.specification, "expected parameter 'specification' to be non-null");
            return $;
        }
    }

}
