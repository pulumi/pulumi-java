// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.deviceupdate;

import com.pulumi.azurenative.deviceupdate.inputs.DiagnosticStoragePropertiesArgs;
import com.pulumi.azurenative.deviceupdate.inputs.IotHubSettingsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceArgs Empty = new InstanceArgs();

    /**
     * Account name.
     * 
     */
    @Import(name="accountName", required=true)
    private Output<String> accountName;

    public Output<String> accountName() {
        return this.accountName;
    }

    /**
     * Customer-initiated diagnostic log collection storage properties
     * 
     */
    @Import(name="diagnosticStorageProperties")
    private @Nullable Output<DiagnosticStoragePropertiesArgs> diagnosticStorageProperties;

    public Optional<Output<DiagnosticStoragePropertiesArgs>> diagnosticStorageProperties() {
        return Optional.ofNullable(this.diagnosticStorageProperties);
    }

    /**
     * Enables or Disables the diagnostic logs collection
     * 
     */
    @Import(name="enableDiagnostics")
    private @Nullable Output<Boolean> enableDiagnostics;

    public Optional<Output<Boolean>> enableDiagnostics() {
        return Optional.ofNullable(this.enableDiagnostics);
    }

    /**
     * Instance name.
     * 
     */
    @Import(name="instanceName")
    private @Nullable Output<String> instanceName;

    public Optional<Output<String>> instanceName() {
        return Optional.ofNullable(this.instanceName);
    }

    /**
     * List of IoT Hubs associated with the account.
     * 
     */
    @Import(name="iotHubs")
    private @Nullable Output<List<IotHubSettingsArgs>> iotHubs;

    public Optional<Output<List<IotHubSettingsArgs>>> iotHubs() {
        return Optional.ofNullable(this.iotHubs);
    }

    /**
     * The geo-location where the resource lives
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The resource group name.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private InstanceArgs() {}

    private InstanceArgs(InstanceArgs $) {
        this.accountName = $.accountName;
        this.diagnosticStorageProperties = $.diagnosticStorageProperties;
        this.enableDiagnostics = $.enableDiagnostics;
        this.instanceName = $.instanceName;
        this.iotHubs = $.iotHubs;
        this.location = $.location;
        this.resourceGroupName = $.resourceGroupName;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceArgs $;

        public Builder() {
            $ = new InstanceArgs();
        }

        public Builder(InstanceArgs defaults) {
            $ = new InstanceArgs(Objects.requireNonNull(defaults));
        }

        public Builder accountName(Output<String> accountName) {
            $.accountName = accountName;
            return this;
        }

        public Builder accountName(String accountName) {
            return accountName(Output.of(accountName));
        }

        public Builder diagnosticStorageProperties(@Nullable Output<DiagnosticStoragePropertiesArgs> diagnosticStorageProperties) {
            $.diagnosticStorageProperties = diagnosticStorageProperties;
            return this;
        }

        public Builder diagnosticStorageProperties(DiagnosticStoragePropertiesArgs diagnosticStorageProperties) {
            return diagnosticStorageProperties(Output.of(diagnosticStorageProperties));
        }

        public Builder enableDiagnostics(@Nullable Output<Boolean> enableDiagnostics) {
            $.enableDiagnostics = enableDiagnostics;
            return this;
        }

        public Builder enableDiagnostics(Boolean enableDiagnostics) {
            return enableDiagnostics(Output.of(enableDiagnostics));
        }

        public Builder instanceName(@Nullable Output<String> instanceName) {
            $.instanceName = instanceName;
            return this;
        }

        public Builder instanceName(String instanceName) {
            return instanceName(Output.of(instanceName));
        }

        public Builder iotHubs(@Nullable Output<List<IotHubSettingsArgs>> iotHubs) {
            $.iotHubs = iotHubs;
            return this;
        }

        public Builder iotHubs(List<IotHubSettingsArgs> iotHubs) {
            return iotHubs(Output.of(iotHubs));
        }

        public Builder iotHubs(IotHubSettingsArgs... iotHubs) {
            return iotHubs(List.of(iotHubs));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public InstanceArgs build() {
            $.accountName = Objects.requireNonNull($.accountName, "expected parameter 'accountName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
