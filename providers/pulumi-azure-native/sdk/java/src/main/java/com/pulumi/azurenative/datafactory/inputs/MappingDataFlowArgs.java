// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.azurenative.datafactory.inputs.DataFlowFolderArgs;
import com.pulumi.azurenative.datafactory.inputs.DataFlowSinkArgs;
import com.pulumi.azurenative.datafactory.inputs.DataFlowSourceArgs;
import com.pulumi.azurenative.datafactory.inputs.TransformationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Mapping data flow.
 * 
 */
public final class MappingDataFlowArgs extends com.pulumi.resources.ResourceArgs {

    public static final MappingDataFlowArgs Empty = new MappingDataFlowArgs();

    /**
     * List of tags that can be used for describing the data flow.
     * 
     */
    @Import(name="annotations")
    private @Nullable Output<List<Object>> annotations;

    public Optional<Output<List<Object>>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    /**
     * The description of the data flow.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The folder that this data flow is in. If not specified, Data flow will appear at the root level.
     * 
     */
    @Import(name="folder")
    private @Nullable Output<DataFlowFolderArgs> folder;

    public Optional<Output<DataFlowFolderArgs>> folder() {
        return Optional.ofNullable(this.folder);
    }

    /**
     * DataFlow script.
     * 
     */
    @Import(name="script")
    private @Nullable Output<String> script;

    public Optional<Output<String>> script() {
        return Optional.ofNullable(this.script);
    }

    /**
     * Data flow script lines.
     * 
     */
    @Import(name="scriptLines")
    private @Nullable Output<List<String>> scriptLines;

    public Optional<Output<List<String>>> scriptLines() {
        return Optional.ofNullable(this.scriptLines);
    }

    /**
     * List of sinks in data flow.
     * 
     */
    @Import(name="sinks")
    private @Nullable Output<List<DataFlowSinkArgs>> sinks;

    public Optional<Output<List<DataFlowSinkArgs>>> sinks() {
        return Optional.ofNullable(this.sinks);
    }

    /**
     * List of sources in data flow.
     * 
     */
    @Import(name="sources")
    private @Nullable Output<List<DataFlowSourceArgs>> sources;

    public Optional<Output<List<DataFlowSourceArgs>>> sources() {
        return Optional.ofNullable(this.sources);
    }

    /**
     * List of transformations in data flow.
     * 
     */
    @Import(name="transformations")
    private @Nullable Output<List<TransformationArgs>> transformations;

    public Optional<Output<List<TransformationArgs>>> transformations() {
        return Optional.ofNullable(this.transformations);
    }

    /**
     * Type of data flow.
     * Expected value is &#39;MappingDataFlow&#39;.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    private MappingDataFlowArgs() {}

    private MappingDataFlowArgs(MappingDataFlowArgs $) {
        this.annotations = $.annotations;
        this.description = $.description;
        this.folder = $.folder;
        this.script = $.script;
        this.scriptLines = $.scriptLines;
        this.sinks = $.sinks;
        this.sources = $.sources;
        this.transformations = $.transformations;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MappingDataFlowArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MappingDataFlowArgs $;

        public Builder() {
            $ = new MappingDataFlowArgs();
        }

        public Builder(MappingDataFlowArgs defaults) {
            $ = new MappingDataFlowArgs(Objects.requireNonNull(defaults));
        }

        public Builder annotations(@Nullable Output<List<Object>> annotations) {
            $.annotations = annotations;
            return this;
        }

        public Builder annotations(List<Object> annotations) {
            return annotations(Output.of(annotations));
        }

        public Builder annotations(Object... annotations) {
            return annotations(List.of(annotations));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder folder(@Nullable Output<DataFlowFolderArgs> folder) {
            $.folder = folder;
            return this;
        }

        public Builder folder(DataFlowFolderArgs folder) {
            return folder(Output.of(folder));
        }

        public Builder script(@Nullable Output<String> script) {
            $.script = script;
            return this;
        }

        public Builder script(String script) {
            return script(Output.of(script));
        }

        public Builder scriptLines(@Nullable Output<List<String>> scriptLines) {
            $.scriptLines = scriptLines;
            return this;
        }

        public Builder scriptLines(List<String> scriptLines) {
            return scriptLines(Output.of(scriptLines));
        }

        public Builder scriptLines(String... scriptLines) {
            return scriptLines(List.of(scriptLines));
        }

        public Builder sinks(@Nullable Output<List<DataFlowSinkArgs>> sinks) {
            $.sinks = sinks;
            return this;
        }

        public Builder sinks(List<DataFlowSinkArgs> sinks) {
            return sinks(Output.of(sinks));
        }

        public Builder sinks(DataFlowSinkArgs... sinks) {
            return sinks(List.of(sinks));
        }

        public Builder sources(@Nullable Output<List<DataFlowSourceArgs>> sources) {
            $.sources = sources;
            return this;
        }

        public Builder sources(List<DataFlowSourceArgs> sources) {
            return sources(Output.of(sources));
        }

        public Builder sources(DataFlowSourceArgs... sources) {
            return sources(List.of(sources));
        }

        public Builder transformations(@Nullable Output<List<TransformationArgs>> transformations) {
            $.transformations = transformations;
            return this;
        }

        public Builder transformations(List<TransformationArgs> transformations) {
            return transformations(Output.of(transformations));
        }

        public Builder transformations(TransformationArgs... transformations) {
            return transformations(List.of(transformations));
        }

        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public MappingDataFlowArgs build() {
            $.type = Codegen.stringProp("type").output().arg($.type).require();
            return $;
        }
    }

}
