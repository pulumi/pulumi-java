// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.containerregistry.inputs;

import com.pulumi.azurenative.containerregistry.enums.TriggerStatus;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The properties of a timer trigger.
 * 
 */
public final class TimerTriggerArgs extends com.pulumi.resources.ResourceArgs {

    public static final TimerTriggerArgs Empty = new TimerTriggerArgs();

    /**
     * The name of the trigger.
     * 
     */
    @Import(name="name", required=true)
      private final Output<String> name;

    public Output<String> name() {
        return this.name;
    }

    /**
     * The CRON expression for the task schedule
     * 
     */
    @Import(name="schedule", required=true)
      private final Output<String> schedule;

    public Output<String> schedule() {
        return this.schedule;
    }

    /**
     * The current status of trigger.
     * 
     */
    @Import(name="status")
      private final @Nullable Output<Either<String,TriggerStatus>> status;

    public Output<Either<String,TriggerStatus>> status() {
        return this.status == null ? Codegen.empty() : this.status;
    }

    public TimerTriggerArgs(
        Output<String> name,
        Output<String> schedule,
        @Nullable Output<Either<String,TriggerStatus>> status) {
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.schedule = Objects.requireNonNull(schedule, "expected parameter 'schedule' to be non-null");
        this.status = Codegen.stringProp("status").left(TriggerStatus.class).output().arg(status).def("Enabled").getNullable();
    }

    private TimerTriggerArgs() {
        this.name = Codegen.empty();
        this.schedule = Codegen.empty();
        this.status = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TimerTriggerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> name;
        private Output<String> schedule;
        private @Nullable Output<Either<String,TriggerStatus>> status;

        public Builder() {
    	      // Empty
        }

        public Builder(TimerTriggerArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.name = defaults.name;
    	      this.schedule = defaults.schedule;
    	      this.status = defaults.status;
        }

        public Builder name(Output<String> name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder name(String name) {
            this.name = Output.of(Objects.requireNonNull(name));
            return this;
        }
        public Builder schedule(Output<String> schedule) {
            this.schedule = Objects.requireNonNull(schedule);
            return this;
        }
        public Builder schedule(String schedule) {
            this.schedule = Output.of(Objects.requireNonNull(schedule));
            return this;
        }
        public Builder status(@Nullable Output<Either<String,TriggerStatus>> status) {
            this.status = status;
            return this;
        }
        public Builder status(@Nullable Either<String,TriggerStatus> status) {
            this.status = Codegen.ofNullable(status);
            return this;
        }        public TimerTriggerArgs build() {
            return new TimerTriggerArgs(name, schedule, status);
        }
    }
}
