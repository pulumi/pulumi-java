// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.aad.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Domain Security Settings
 * 
 */
public final class DomainSecuritySettingsResponse extends com.pulumi.resources.InvokeArgs {

    public static final DomainSecuritySettingsResponse Empty = new DomainSecuritySettingsResponse();

    /**
     * A flag to determine whether or not KerberosArmoring is enabled or disabled.
     * 
     */
    @Import(name="kerberosArmoring")
    private @Nullable String kerberosArmoring;

    /**
     * @return A flag to determine whether or not KerberosArmoring is enabled or disabled.
     * 
     */
    public Optional<String> kerberosArmoring() {
        return Optional.ofNullable(this.kerberosArmoring);
    }

    /**
     * A flag to determine whether or not KerberosRc4Encryption is enabled or disabled.
     * 
     */
    @Import(name="kerberosRc4Encryption")
    private @Nullable String kerberosRc4Encryption;

    /**
     * @return A flag to determine whether or not KerberosRc4Encryption is enabled or disabled.
     * 
     */
    public Optional<String> kerberosRc4Encryption() {
        return Optional.ofNullable(this.kerberosRc4Encryption);
    }

    /**
     * A flag to determine whether or not NtlmV1 is enabled or disabled.
     * 
     */
    @Import(name="ntlmV1")
    private @Nullable String ntlmV1;

    /**
     * @return A flag to determine whether or not NtlmV1 is enabled or disabled.
     * 
     */
    public Optional<String> ntlmV1() {
        return Optional.ofNullable(this.ntlmV1);
    }

    /**
     * A flag to determine whether or not SyncKerberosPasswords is enabled or disabled.
     * 
     */
    @Import(name="syncKerberosPasswords")
    private @Nullable String syncKerberosPasswords;

    /**
     * @return A flag to determine whether or not SyncKerberosPasswords is enabled or disabled.
     * 
     */
    public Optional<String> syncKerberosPasswords() {
        return Optional.ofNullable(this.syncKerberosPasswords);
    }

    /**
     * A flag to determine whether or not SyncNtlmPasswords is enabled or disabled.
     * 
     */
    @Import(name="syncNtlmPasswords")
    private @Nullable String syncNtlmPasswords;

    /**
     * @return A flag to determine whether or not SyncNtlmPasswords is enabled or disabled.
     * 
     */
    public Optional<String> syncNtlmPasswords() {
        return Optional.ofNullable(this.syncNtlmPasswords);
    }

    /**
     * A flag to determine whether or not SyncOnPremPasswords is enabled or disabled.
     * 
     */
    @Import(name="syncOnPremPasswords")
    private @Nullable String syncOnPremPasswords;

    /**
     * @return A flag to determine whether or not SyncOnPremPasswords is enabled or disabled.
     * 
     */
    public Optional<String> syncOnPremPasswords() {
        return Optional.ofNullable(this.syncOnPremPasswords);
    }

    /**
     * A flag to determine whether or not TlsV1 is enabled or disabled.
     * 
     */
    @Import(name="tlsV1")
    private @Nullable String tlsV1;

    /**
     * @return A flag to determine whether or not TlsV1 is enabled or disabled.
     * 
     */
    public Optional<String> tlsV1() {
        return Optional.ofNullable(this.tlsV1);
    }

    private DomainSecuritySettingsResponse() {}

    private DomainSecuritySettingsResponse(DomainSecuritySettingsResponse $) {
        this.kerberosArmoring = $.kerberosArmoring;
        this.kerberosRc4Encryption = $.kerberosRc4Encryption;
        this.ntlmV1 = $.ntlmV1;
        this.syncKerberosPasswords = $.syncKerberosPasswords;
        this.syncNtlmPasswords = $.syncNtlmPasswords;
        this.syncOnPremPasswords = $.syncOnPremPasswords;
        this.tlsV1 = $.tlsV1;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainSecuritySettingsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainSecuritySettingsResponse $;

        public Builder() {
            $ = new DomainSecuritySettingsResponse();
        }

        public Builder(DomainSecuritySettingsResponse defaults) {
            $ = new DomainSecuritySettingsResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param kerberosArmoring A flag to determine whether or not KerberosArmoring is enabled or disabled.
         * 
         * @return builder
         * 
         */
        public Builder kerberosArmoring(@Nullable String kerberosArmoring) {
            $.kerberosArmoring = kerberosArmoring;
            return this;
        }

        /**
         * @param kerberosRc4Encryption A flag to determine whether or not KerberosRc4Encryption is enabled or disabled.
         * 
         * @return builder
         * 
         */
        public Builder kerberosRc4Encryption(@Nullable String kerberosRc4Encryption) {
            $.kerberosRc4Encryption = kerberosRc4Encryption;
            return this;
        }

        /**
         * @param ntlmV1 A flag to determine whether or not NtlmV1 is enabled or disabled.
         * 
         * @return builder
         * 
         */
        public Builder ntlmV1(@Nullable String ntlmV1) {
            $.ntlmV1 = ntlmV1;
            return this;
        }

        /**
         * @param syncKerberosPasswords A flag to determine whether or not SyncKerberosPasswords is enabled or disabled.
         * 
         * @return builder
         * 
         */
        public Builder syncKerberosPasswords(@Nullable String syncKerberosPasswords) {
            $.syncKerberosPasswords = syncKerberosPasswords;
            return this;
        }

        /**
         * @param syncNtlmPasswords A flag to determine whether or not SyncNtlmPasswords is enabled or disabled.
         * 
         * @return builder
         * 
         */
        public Builder syncNtlmPasswords(@Nullable String syncNtlmPasswords) {
            $.syncNtlmPasswords = syncNtlmPasswords;
            return this;
        }

        /**
         * @param syncOnPremPasswords A flag to determine whether or not SyncOnPremPasswords is enabled or disabled.
         * 
         * @return builder
         * 
         */
        public Builder syncOnPremPasswords(@Nullable String syncOnPremPasswords) {
            $.syncOnPremPasswords = syncOnPremPasswords;
            return this;
        }

        /**
         * @param tlsV1 A flag to determine whether or not TlsV1 is enabled or disabled.
         * 
         * @return builder
         * 
         */
        public Builder tlsV1(@Nullable String tlsV1) {
            $.tlsV1 = tlsV1;
            return this;
        }

        public DomainSecuritySettingsResponse build() {
            $.kerberosArmoring = Codegen.stringProp("kerberosArmoring").arg($.kerberosArmoring).def("Disabled").getNullable();
            $.kerberosRc4Encryption = Codegen.stringProp("kerberosRc4Encryption").arg($.kerberosRc4Encryption).def("Enabled").getNullable();
            $.ntlmV1 = Codegen.stringProp("ntlmV1").arg($.ntlmV1).def("Enabled").getNullable();
            $.syncKerberosPasswords = Codegen.stringProp("syncKerberosPasswords").arg($.syncKerberosPasswords).def("Enabled").getNullable();
            $.syncNtlmPasswords = Codegen.stringProp("syncNtlmPasswords").arg($.syncNtlmPasswords).def("Enabled").getNullable();
            $.syncOnPremPasswords = Codegen.stringProp("syncOnPremPasswords").arg($.syncOnPremPasswords).def("Enabled").getNullable();
            $.tlsV1 = Codegen.stringProp("tlsV1").arg($.tlsV1).def("Enabled").getNullable();
            return $;
        }
    }

}
