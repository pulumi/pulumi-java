// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.videoanalyzer.inputs;

import com.pulumi.azurenative.videoanalyzer.inputs.PemCertificateListResponse;
import com.pulumi.azurenative.videoanalyzer.inputs.SecureIotDeviceRemoteTunnelResponse;
import com.pulumi.azurenative.videoanalyzer.inputs.TlsValidationOptionsResponse;
import com.pulumi.azurenative.videoanalyzer.inputs.UsernamePasswordCredentialsResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * TLS endpoint describes an endpoint that the pipeline can connect to over TLS transport (data is encrypted in transit).
 * 
 */
public final class TlsEndpointResponse extends com.pulumi.resources.InvokeArgs {

    public static final TlsEndpointResponse Empty = new TlsEndpointResponse();

    /**
     * Credentials to be presented to the endpoint.
     * 
     */
    @Import(name="credentials", required=true)
    private UsernamePasswordCredentialsResponse credentials;

    public UsernamePasswordCredentialsResponse credentials() {
        return this.credentials;
    }

    /**
     * List of trusted certificate authorities when authenticating a TLS connection. A null list designates that Azure Video Analyzer&#39;s list of trusted authorities should be used.
     * 
     */
    @Import(name="trustedCertificates")
    private @Nullable PemCertificateListResponse trustedCertificates;

    public Optional<PemCertificateListResponse> trustedCertificates() {
        return Optional.ofNullable(this.trustedCertificates);
    }

    /**
     * Describes the tunnel through which Video Analyzer can connect to the endpoint URL. This is an optional property, typically used when the endpoint is behind a firewall.
     * 
     */
    @Import(name="tunnel")
    private @Nullable SecureIotDeviceRemoteTunnelResponse tunnel;

    public Optional<SecureIotDeviceRemoteTunnelResponse> tunnel() {
        return Optional.ofNullable(this.tunnel);
    }

    /**
     * The discriminator for derived types.
     * Expected value is &#39;#Microsoft.VideoAnalyzer.TlsEndpoint&#39;.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    public String type() {
        return this.type;
    }

    /**
     * The endpoint URL for Video Analyzer to connect to.
     * 
     */
    @Import(name="url", required=true)
    private String url;

    public String url() {
        return this.url;
    }

    /**
     * Validation options to use when authenticating a TLS connection. By default, strict validation is used.
     * 
     */
    @Import(name="validationOptions")
    private @Nullable TlsValidationOptionsResponse validationOptions;

    public Optional<TlsValidationOptionsResponse> validationOptions() {
        return Optional.ofNullable(this.validationOptions);
    }

    private TlsEndpointResponse() {}

    private TlsEndpointResponse(TlsEndpointResponse $) {
        this.credentials = $.credentials;
        this.trustedCertificates = $.trustedCertificates;
        this.tunnel = $.tunnel;
        this.type = $.type;
        this.url = $.url;
        this.validationOptions = $.validationOptions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TlsEndpointResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TlsEndpointResponse $;

        public Builder() {
            $ = new TlsEndpointResponse();
        }

        public Builder(TlsEndpointResponse defaults) {
            $ = new TlsEndpointResponse(Objects.requireNonNull(defaults));
        }

        public Builder credentials(UsernamePasswordCredentialsResponse credentials) {
            $.credentials = credentials;
            return this;
        }

        public Builder trustedCertificates(@Nullable PemCertificateListResponse trustedCertificates) {
            $.trustedCertificates = trustedCertificates;
            return this;
        }

        public Builder tunnel(@Nullable SecureIotDeviceRemoteTunnelResponse tunnel) {
            $.tunnel = tunnel;
            return this;
        }

        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public Builder url(String url) {
            $.url = url;
            return this;
        }

        public Builder validationOptions(@Nullable TlsValidationOptionsResponse validationOptions) {
            $.validationOptions = validationOptions;
            return this;
        }

        public TlsEndpointResponse build() {
            $.credentials = Objects.requireNonNull($.credentials, "expected parameter 'credentials' to be non-null");
            $.type = Codegen.stringProp("type").arg($.type).require();
            $.url = Objects.requireNonNull($.url, "expected parameter 'url' to be non-null");
            return $;
        }
    }

}
