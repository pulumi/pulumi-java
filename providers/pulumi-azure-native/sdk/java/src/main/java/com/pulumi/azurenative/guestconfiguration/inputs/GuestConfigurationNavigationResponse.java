// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.guestconfiguration.inputs;

import com.pulumi.azurenative.guestconfiguration.inputs.ConfigurationParameterResponse;
import com.pulumi.azurenative.guestconfiguration.inputs.ConfigurationSettingResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Guest configuration is an artifact that encapsulates DSC configuration and its dependencies. The artifact is a zip file containing DSC configuration (as MOF) and dependent resources and other dependencies like modules.
 * 
 */
public final class GuestConfigurationNavigationResponse extends com.pulumi.resources.InvokeArgs {

    public static final GuestConfigurationNavigationResponse Empty = new GuestConfigurationNavigationResponse();

    /**
     * Specifies the assignment type and execution of the configuration. Possible values are Audit, DeployAndAutoCorrect, ApplyAndAutoCorrect and ApplyAndMonitor.
     * 
     */
    @Import(name="assignmentType")
    private @Nullable String assignmentType;

    /**
     * @return Specifies the assignment type and execution of the configuration. Possible values are Audit, DeployAndAutoCorrect, ApplyAndAutoCorrect and ApplyAndMonitor.
     * 
     */
    public Optional<String> assignmentType() {
        return Optional.ofNullable(this.assignmentType);
    }

    /**
     * The configuration parameters for the guest configuration.
     * 
     */
    @Import(name="configurationParameter")
    private @Nullable List<ConfigurationParameterResponse> configurationParameter;

    /**
     * @return The configuration parameters for the guest configuration.
     * 
     */
    public Optional<List<ConfigurationParameterResponse>> configurationParameter() {
        return Optional.ofNullable(this.configurationParameter);
    }

    /**
     * The protected configuration parameters for the guest configuration.
     * 
     */
    @Import(name="configurationProtectedParameter")
    private @Nullable List<ConfigurationParameterResponse> configurationProtectedParameter;

    /**
     * @return The protected configuration parameters for the guest configuration.
     * 
     */
    public Optional<List<ConfigurationParameterResponse>> configurationProtectedParameter() {
        return Optional.ofNullable(this.configurationProtectedParameter);
    }

    /**
     * The configuration setting for the guest configuration.
     * 
     */
    @Import(name="configurationSetting")
    private @Nullable ConfigurationSettingResponse configurationSetting;

    /**
     * @return The configuration setting for the guest configuration.
     * 
     */
    public Optional<ConfigurationSettingResponse> configurationSetting() {
        return Optional.ofNullable(this.configurationSetting);
    }

    /**
     * Combined hash of the guest configuration package and configuration parameters.
     * 
     */
    @Import(name="contentHash")
    private @Nullable String contentHash;

    /**
     * @return Combined hash of the guest configuration package and configuration parameters.
     * 
     */
    public Optional<String> contentHash() {
        return Optional.ofNullable(this.contentHash);
    }

    /**
     * Specifies the content type of the configuration. Possible values could be Builtin or Custom.
     * 
     */
    @Import(name="contentType", required=true)
    private String contentType;

    /**
     * @return Specifies the content type of the configuration. Possible values could be Builtin or Custom.
     * 
     */
    public String contentType() {
        return this.contentType;
    }

    /**
     * Uri of the storage where guest configuration package is uploaded.
     * 
     */
    @Import(name="contentUri")
    private @Nullable String contentUri;

    /**
     * @return Uri of the storage where guest configuration package is uploaded.
     * 
     */
    public Optional<String> contentUri() {
        return Optional.ofNullable(this.contentUri);
    }

    /**
     * Kind of the guest configuration. For example:DSC
     * 
     */
    @Import(name="kind")
    private @Nullable String kind;

    /**
     * @return Kind of the guest configuration. For example:DSC
     * 
     */
    public Optional<String> kind() {
        return Optional.ofNullable(this.kind);
    }

    /**
     * Name of the guest configuration.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return Name of the guest configuration.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Version of the guest configuration.
     * 
     */
    @Import(name="version")
    private @Nullable String version;

    /**
     * @return Version of the guest configuration.
     * 
     */
    public Optional<String> version() {
        return Optional.ofNullable(this.version);
    }

    private GuestConfigurationNavigationResponse() {}

    private GuestConfigurationNavigationResponse(GuestConfigurationNavigationResponse $) {
        this.assignmentType = $.assignmentType;
        this.configurationParameter = $.configurationParameter;
        this.configurationProtectedParameter = $.configurationProtectedParameter;
        this.configurationSetting = $.configurationSetting;
        this.contentHash = $.contentHash;
        this.contentType = $.contentType;
        this.contentUri = $.contentUri;
        this.kind = $.kind;
        this.name = $.name;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GuestConfigurationNavigationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GuestConfigurationNavigationResponse $;

        public Builder() {
            $ = new GuestConfigurationNavigationResponse();
        }

        public Builder(GuestConfigurationNavigationResponse defaults) {
            $ = new GuestConfigurationNavigationResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param assignmentType Specifies the assignment type and execution of the configuration. Possible values are Audit, DeployAndAutoCorrect, ApplyAndAutoCorrect and ApplyAndMonitor.
         * 
         * @return builder
         * 
         */
        public Builder assignmentType(@Nullable String assignmentType) {
            $.assignmentType = assignmentType;
            return this;
        }

        /**
         * @param configurationParameter The configuration parameters for the guest configuration.
         * 
         * @return builder
         * 
         */
        public Builder configurationParameter(@Nullable List<ConfigurationParameterResponse> configurationParameter) {
            $.configurationParameter = configurationParameter;
            return this;
        }

        /**
         * @param configurationParameter The configuration parameters for the guest configuration.
         * 
         * @return builder
         * 
         */
        public Builder configurationParameter(ConfigurationParameterResponse... configurationParameter) {
            return configurationParameter(List.of(configurationParameter));
        }

        /**
         * @param configurationProtectedParameter The protected configuration parameters for the guest configuration.
         * 
         * @return builder
         * 
         */
        public Builder configurationProtectedParameter(@Nullable List<ConfigurationParameterResponse> configurationProtectedParameter) {
            $.configurationProtectedParameter = configurationProtectedParameter;
            return this;
        }

        /**
         * @param configurationProtectedParameter The protected configuration parameters for the guest configuration.
         * 
         * @return builder
         * 
         */
        public Builder configurationProtectedParameter(ConfigurationParameterResponse... configurationProtectedParameter) {
            return configurationProtectedParameter(List.of(configurationProtectedParameter));
        }

        /**
         * @param configurationSetting The configuration setting for the guest configuration.
         * 
         * @return builder
         * 
         */
        public Builder configurationSetting(@Nullable ConfigurationSettingResponse configurationSetting) {
            $.configurationSetting = configurationSetting;
            return this;
        }

        /**
         * @param contentHash Combined hash of the guest configuration package and configuration parameters.
         * 
         * @return builder
         * 
         */
        public Builder contentHash(@Nullable String contentHash) {
            $.contentHash = contentHash;
            return this;
        }

        /**
         * @param contentType Specifies the content type of the configuration. Possible values could be Builtin or Custom.
         * 
         * @return builder
         * 
         */
        public Builder contentType(String contentType) {
            $.contentType = contentType;
            return this;
        }

        /**
         * @param contentUri Uri of the storage where guest configuration package is uploaded.
         * 
         * @return builder
         * 
         */
        public Builder contentUri(@Nullable String contentUri) {
            $.contentUri = contentUri;
            return this;
        }

        /**
         * @param kind Kind of the guest configuration. For example:DSC
         * 
         * @return builder
         * 
         */
        public Builder kind(@Nullable String kind) {
            $.kind = kind;
            return this;
        }

        /**
         * @param name Name of the guest configuration.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param version Version of the guest configuration.
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable String version) {
            $.version = version;
            return this;
        }

        public GuestConfigurationNavigationResponse build() {
            $.contentType = Objects.requireNonNull($.contentType, "expected parameter 'contentType' to be non-null");
            return $;
        }
    }

}
