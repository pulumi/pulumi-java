// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.guestconfiguration.inputs;

import com.pulumi.azurenative.guestconfiguration.inputs.ConfigurationParameterResponse;
import com.pulumi.azurenative.guestconfiguration.inputs.ConfigurationSettingResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Guest configuration is an artifact that encapsulates DSC configuration and its dependencies. The artifact is a zip file containing DSC configuration (as MOF) and dependent resources and other dependencies like modules.
 * 
 */
public final class GuestConfigurationNavigationResponse extends com.pulumi.resources.InvokeArgs {

    public static final GuestConfigurationNavigationResponse Empty = new GuestConfigurationNavigationResponse();

    /**
     * Specifies the assignment type and execution of the configuration. Possible values are Audit, DeployAndAutoCorrect, ApplyAndAutoCorrect and ApplyAndMonitor.
     * 
     */
    @Import(name="assignmentType")
      private final @Nullable String assignmentType;

    public Optional<String> assignmentType() {
        return this.assignmentType == null ? Optional.empty() : Optional.ofNullable(this.assignmentType);
    }

    /**
     * The configuration parameters for the guest configuration.
     * 
     */
    @Import(name="configurationParameter")
      private final @Nullable List<ConfigurationParameterResponse> configurationParameter;

    public List<ConfigurationParameterResponse> configurationParameter() {
        return this.configurationParameter == null ? List.of() : this.configurationParameter;
    }

    /**
     * The protected configuration parameters for the guest configuration.
     * 
     */
    @Import(name="configurationProtectedParameter")
      private final @Nullable List<ConfigurationParameterResponse> configurationProtectedParameter;

    public List<ConfigurationParameterResponse> configurationProtectedParameter() {
        return this.configurationProtectedParameter == null ? List.of() : this.configurationProtectedParameter;
    }

    /**
     * The configuration setting for the guest configuration.
     * 
     */
    @Import(name="configurationSetting")
      private final @Nullable ConfigurationSettingResponse configurationSetting;

    public Optional<ConfigurationSettingResponse> configurationSetting() {
        return this.configurationSetting == null ? Optional.empty() : Optional.ofNullable(this.configurationSetting);
    }

    /**
     * Combined hash of the guest configuration package and configuration parameters.
     * 
     */
    @Import(name="contentHash")
      private final @Nullable String contentHash;

    public Optional<String> contentHash() {
        return this.contentHash == null ? Optional.empty() : Optional.ofNullable(this.contentHash);
    }

    /**
     * Specifies the content type of the configuration. Possible values could be Builtin or Custom.
     * 
     */
    @Import(name="contentType", required=true)
      private final String contentType;

    public String contentType() {
        return this.contentType;
    }

    /**
     * Uri of the storage where guest configuration package is uploaded.
     * 
     */
    @Import(name="contentUri")
      private final @Nullable String contentUri;

    public Optional<String> contentUri() {
        return this.contentUri == null ? Optional.empty() : Optional.ofNullable(this.contentUri);
    }

    /**
     * Kind of the guest configuration. For example:DSC
     * 
     */
    @Import(name="kind")
      private final @Nullable String kind;

    public Optional<String> kind() {
        return this.kind == null ? Optional.empty() : Optional.ofNullable(this.kind);
    }

    /**
     * Name of the guest configuration.
     * 
     */
    @Import(name="name")
      private final @Nullable String name;

    public Optional<String> name() {
        return this.name == null ? Optional.empty() : Optional.ofNullable(this.name);
    }

    /**
     * Version of the guest configuration.
     * 
     */
    @Import(name="version")
      private final @Nullable String version;

    public Optional<String> version() {
        return this.version == null ? Optional.empty() : Optional.ofNullable(this.version);
    }

    public GuestConfigurationNavigationResponse(
        @Nullable String assignmentType,
        @Nullable List<ConfigurationParameterResponse> configurationParameter,
        @Nullable List<ConfigurationParameterResponse> configurationProtectedParameter,
        @Nullable ConfigurationSettingResponse configurationSetting,
        @Nullable String contentHash,
        String contentType,
        @Nullable String contentUri,
        @Nullable String kind,
        @Nullable String name,
        @Nullable String version) {
        this.assignmentType = assignmentType;
        this.configurationParameter = configurationParameter;
        this.configurationProtectedParameter = configurationProtectedParameter;
        this.configurationSetting = configurationSetting;
        this.contentHash = contentHash;
        this.contentType = Objects.requireNonNull(contentType, "expected parameter 'contentType' to be non-null");
        this.contentUri = contentUri;
        this.kind = kind;
        this.name = name;
        this.version = version;
    }

    private GuestConfigurationNavigationResponse() {
        this.assignmentType = null;
        this.configurationParameter = List.of();
        this.configurationProtectedParameter = List.of();
        this.configurationSetting = null;
        this.contentHash = null;
        this.contentType = null;
        this.contentUri = null;
        this.kind = null;
        this.name = null;
        this.version = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GuestConfigurationNavigationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String assignmentType;
        private @Nullable List<ConfigurationParameterResponse> configurationParameter;
        private @Nullable List<ConfigurationParameterResponse> configurationProtectedParameter;
        private @Nullable ConfigurationSettingResponse configurationSetting;
        private @Nullable String contentHash;
        private String contentType;
        private @Nullable String contentUri;
        private @Nullable String kind;
        private @Nullable String name;
        private @Nullable String version;

        public Builder() {
    	      // Empty
        }

        public Builder(GuestConfigurationNavigationResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.assignmentType = defaults.assignmentType;
    	      this.configurationParameter = defaults.configurationParameter;
    	      this.configurationProtectedParameter = defaults.configurationProtectedParameter;
    	      this.configurationSetting = defaults.configurationSetting;
    	      this.contentHash = defaults.contentHash;
    	      this.contentType = defaults.contentType;
    	      this.contentUri = defaults.contentUri;
    	      this.kind = defaults.kind;
    	      this.name = defaults.name;
    	      this.version = defaults.version;
        }

        public Builder assignmentType(@Nullable String assignmentType) {
            this.assignmentType = assignmentType;
            return this;
        }
        public Builder configurationParameter(@Nullable List<ConfigurationParameterResponse> configurationParameter) {
            this.configurationParameter = configurationParameter;
            return this;
        }
        public Builder configurationParameter(ConfigurationParameterResponse... configurationParameter) {
            return configurationParameter(List.of(configurationParameter));
        }
        public Builder configurationProtectedParameter(@Nullable List<ConfigurationParameterResponse> configurationProtectedParameter) {
            this.configurationProtectedParameter = configurationProtectedParameter;
            return this;
        }
        public Builder configurationProtectedParameter(ConfigurationParameterResponse... configurationProtectedParameter) {
            return configurationProtectedParameter(List.of(configurationProtectedParameter));
        }
        public Builder configurationSetting(@Nullable ConfigurationSettingResponse configurationSetting) {
            this.configurationSetting = configurationSetting;
            return this;
        }
        public Builder contentHash(@Nullable String contentHash) {
            this.contentHash = contentHash;
            return this;
        }
        public Builder contentType(String contentType) {
            this.contentType = Objects.requireNonNull(contentType);
            return this;
        }
        public Builder contentUri(@Nullable String contentUri) {
            this.contentUri = contentUri;
            return this;
        }
        public Builder kind(@Nullable String kind) {
            this.kind = kind;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        public Builder version(@Nullable String version) {
            this.version = version;
            return this;
        }        public GuestConfigurationNavigationResponse build() {
            return new GuestConfigurationNavigationResponse(assignmentType, configurationParameter, configurationProtectedParameter, configurationSetting, contentHash, contentType, contentUri, kind, name, version);
        }
    }
}
