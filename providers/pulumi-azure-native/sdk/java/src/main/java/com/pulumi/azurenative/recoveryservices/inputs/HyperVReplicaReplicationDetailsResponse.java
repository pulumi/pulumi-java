// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.recoveryservices.inputs;

import com.pulumi.azurenative.recoveryservices.inputs.DiskDetailsResponse;
import com.pulumi.azurenative.recoveryservices.inputs.InitialReplicationDetailsResponse;
import com.pulumi.azurenative.recoveryservices.inputs.VMNicDetailsResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * HyperV replica 2012 replication details.
 * 
 */
public final class HyperVReplicaReplicationDetailsResponse extends com.pulumi.resources.InvokeArgs {

    public static final HyperVReplicaReplicationDetailsResponse Empty = new HyperVReplicaReplicationDetailsResponse();

    /**
     * Initial replication details.
     * 
     */
    @Import(name="initialReplicationDetails")
    private @Nullable InitialReplicationDetailsResponse initialReplicationDetails;

    /**
     * @return Initial replication details.
     * 
     */
    public Optional<InitialReplicationDetailsResponse> initialReplicationDetails() {
        return Optional.ofNullable(this.initialReplicationDetails);
    }

    /**
     * Gets the Instance type.
     * Expected value is &#39;HyperVReplica2012&#39;.
     * 
     */
    @Import(name="instanceType", required=true)
    private String instanceType;

    /**
     * @return Gets the Instance type.
     * Expected value is &#39;HyperVReplica2012&#39;.
     * 
     */
    public String instanceType() {
        return this.instanceType;
    }

    /**
     * The Last replication time.
     * 
     */
    @Import(name="lastReplicatedTime")
    private @Nullable String lastReplicatedTime;

    /**
     * @return The Last replication time.
     * 
     */
    public Optional<String> lastReplicatedTime() {
        return Optional.ofNullable(this.lastReplicatedTime);
    }

    /**
     * VM disk details.
     * 
     */
    @Import(name="vMDiskDetails")
    private @Nullable List<DiskDetailsResponse> vMDiskDetails;

    /**
     * @return VM disk details.
     * 
     */
    public Optional<List<DiskDetailsResponse>> vMDiskDetails() {
        return Optional.ofNullable(this.vMDiskDetails);
    }

    /**
     * The virtual machine Id.
     * 
     */
    @Import(name="vmId")
    private @Nullable String vmId;

    /**
     * @return The virtual machine Id.
     * 
     */
    public Optional<String> vmId() {
        return Optional.ofNullable(this.vmId);
    }

    /**
     * The PE Network details.
     * 
     */
    @Import(name="vmNics")
    private @Nullable List<VMNicDetailsResponse> vmNics;

    /**
     * @return The PE Network details.
     * 
     */
    public Optional<List<VMNicDetailsResponse>> vmNics() {
        return Optional.ofNullable(this.vmNics);
    }

    /**
     * The protection state for the vm.
     * 
     */
    @Import(name="vmProtectionState")
    private @Nullable String vmProtectionState;

    /**
     * @return The protection state for the vm.
     * 
     */
    public Optional<String> vmProtectionState() {
        return Optional.ofNullable(this.vmProtectionState);
    }

    /**
     * The protection state description for the vm.
     * 
     */
    @Import(name="vmProtectionStateDescription")
    private @Nullable String vmProtectionStateDescription;

    /**
     * @return The protection state description for the vm.
     * 
     */
    public Optional<String> vmProtectionStateDescription() {
        return Optional.ofNullable(this.vmProtectionStateDescription);
    }

    private HyperVReplicaReplicationDetailsResponse() {}

    private HyperVReplicaReplicationDetailsResponse(HyperVReplicaReplicationDetailsResponse $) {
        this.initialReplicationDetails = $.initialReplicationDetails;
        this.instanceType = $.instanceType;
        this.lastReplicatedTime = $.lastReplicatedTime;
        this.vMDiskDetails = $.vMDiskDetails;
        this.vmId = $.vmId;
        this.vmNics = $.vmNics;
        this.vmProtectionState = $.vmProtectionState;
        this.vmProtectionStateDescription = $.vmProtectionStateDescription;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HyperVReplicaReplicationDetailsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HyperVReplicaReplicationDetailsResponse $;

        public Builder() {
            $ = new HyperVReplicaReplicationDetailsResponse();
        }

        public Builder(HyperVReplicaReplicationDetailsResponse defaults) {
            $ = new HyperVReplicaReplicationDetailsResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param initialReplicationDetails Initial replication details.
         * 
         * @return builder
         * 
         */
        public Builder initialReplicationDetails(@Nullable InitialReplicationDetailsResponse initialReplicationDetails) {
            $.initialReplicationDetails = initialReplicationDetails;
            return this;
        }

        /**
         * @param instanceType Gets the Instance type.
         * Expected value is &#39;HyperVReplica2012&#39;.
         * 
         * @return builder
         * 
         */
        public Builder instanceType(String instanceType) {
            $.instanceType = instanceType;
            return this;
        }

        /**
         * @param lastReplicatedTime The Last replication time.
         * 
         * @return builder
         * 
         */
        public Builder lastReplicatedTime(@Nullable String lastReplicatedTime) {
            $.lastReplicatedTime = lastReplicatedTime;
            return this;
        }

        /**
         * @param vMDiskDetails VM disk details.
         * 
         * @return builder
         * 
         */
        public Builder vMDiskDetails(@Nullable List<DiskDetailsResponse> vMDiskDetails) {
            $.vMDiskDetails = vMDiskDetails;
            return this;
        }

        /**
         * @param vMDiskDetails VM disk details.
         * 
         * @return builder
         * 
         */
        public Builder vMDiskDetails(DiskDetailsResponse... vMDiskDetails) {
            return vMDiskDetails(List.of(vMDiskDetails));
        }

        /**
         * @param vmId The virtual machine Id.
         * 
         * @return builder
         * 
         */
        public Builder vmId(@Nullable String vmId) {
            $.vmId = vmId;
            return this;
        }

        /**
         * @param vmNics The PE Network details.
         * 
         * @return builder
         * 
         */
        public Builder vmNics(@Nullable List<VMNicDetailsResponse> vmNics) {
            $.vmNics = vmNics;
            return this;
        }

        /**
         * @param vmNics The PE Network details.
         * 
         * @return builder
         * 
         */
        public Builder vmNics(VMNicDetailsResponse... vmNics) {
            return vmNics(List.of(vmNics));
        }

        /**
         * @param vmProtectionState The protection state for the vm.
         * 
         * @return builder
         * 
         */
        public Builder vmProtectionState(@Nullable String vmProtectionState) {
            $.vmProtectionState = vmProtectionState;
            return this;
        }

        /**
         * @param vmProtectionStateDescription The protection state description for the vm.
         * 
         * @return builder
         * 
         */
        public Builder vmProtectionStateDescription(@Nullable String vmProtectionStateDescription) {
            $.vmProtectionStateDescription = vmProtectionStateDescription;
            return this;
        }

        public HyperVReplicaReplicationDetailsResponse build() {
            $.instanceType = Codegen.stringProp("instanceType").arg($.instanceType).require();
            return $;
        }
    }

}
