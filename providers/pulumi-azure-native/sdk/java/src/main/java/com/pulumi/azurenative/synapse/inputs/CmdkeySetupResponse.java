// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.synapse.inputs;

import com.pulumi.azurenative.synapse.inputs.SecureStringResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;


/**
 * The custom setup of running cmdkey commands.
 * 
 */
public final class CmdkeySetupResponse extends com.pulumi.resources.InvokeArgs {

    public static final CmdkeySetupResponse Empty = new CmdkeySetupResponse();

    /**
     * The password of data source access.
     * 
     */
    @Import(name="password", required=true)
    private SecureStringResponse password;

    /**
     * @return The password of data source access.
     * 
     */
    public SecureStringResponse password() {
        return this.password;
    }

    /**
     * The server name of data source access.
     * 
     */
    @Import(name="targetName", required=true)
    private Object targetName;

    /**
     * @return The server name of data source access.
     * 
     */
    public Object targetName() {
        return this.targetName;
    }

    /**
     * The type of custom setup.
     * Expected value is &#39;CmdkeySetup&#39;.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    /**
     * @return The type of custom setup.
     * Expected value is &#39;CmdkeySetup&#39;.
     * 
     */
    public String type() {
        return this.type;
    }

    /**
     * The user name of data source access.
     * 
     */
    @Import(name="userName", required=true)
    private Object userName;

    /**
     * @return The user name of data source access.
     * 
     */
    public Object userName() {
        return this.userName;
    }

    private CmdkeySetupResponse() {}

    private CmdkeySetupResponse(CmdkeySetupResponse $) {
        this.password = $.password;
        this.targetName = $.targetName;
        this.type = $.type;
        this.userName = $.userName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CmdkeySetupResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CmdkeySetupResponse $;

        public Builder() {
            $ = new CmdkeySetupResponse();
        }

        public Builder(CmdkeySetupResponse defaults) {
            $ = new CmdkeySetupResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param password The password of data source access.
         * 
         * @return builder
         * 
         */
        public Builder password(SecureStringResponse password) {
            $.password = password;
            return this;
        }

        /**
         * @param targetName The server name of data source access.
         * 
         * @return builder
         * 
         */
        public Builder targetName(Object targetName) {
            $.targetName = targetName;
            return this;
        }

        /**
         * @param type The type of custom setup.
         * Expected value is &#39;CmdkeySetup&#39;.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            $.type = type;
            return this;
        }

        /**
         * @param userName The user name of data source access.
         * 
         * @return builder
         * 
         */
        public Builder userName(Object userName) {
            $.userName = userName;
            return this;
        }

        public CmdkeySetupResponse build() {
            $.password = Objects.requireNonNull($.password, "expected parameter 'password' to be non-null");
            $.targetName = Objects.requireNonNull($.targetName, "expected parameter 'targetName' to be non-null");
            $.type = Codegen.stringProp("type").arg($.type).require();
            $.userName = Objects.requireNonNull($.userName, "expected parameter 'userName' to be non-null");
            return $;
        }
    }

}
