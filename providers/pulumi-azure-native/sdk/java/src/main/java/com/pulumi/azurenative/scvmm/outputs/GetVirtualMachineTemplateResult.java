// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.scvmm.outputs;

import com.pulumi.azurenative.scvmm.outputs.ExtendedLocationResponse;
import com.pulumi.azurenative.scvmm.outputs.NetworkInterfacesResponse;
import com.pulumi.azurenative.scvmm.outputs.SystemDataResponse;
import com.pulumi.azurenative.scvmm.outputs.VirtualDiskResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetVirtualMachineTemplateResult {
    /**
     * @return Gets or sets computer name.
     * 
     */
    private final String computerName;
    /**
     * @return Gets or sets the desired number of vCPUs for the vm.
     * 
     */
    private final Integer cpuCount;
    /**
     * @return Gets or sets the disks of the template.
     * 
     */
    private final List<VirtualDiskResponse> disks;
    /**
     * @return Gets or sets a value indicating whether to enable dynamic memory or not.
     * 
     */
    private final String dynamicMemoryEnabled;
    /**
     * @return Gets or sets the max dynamic memory for the vm.
     * 
     */
    private final Integer dynamicMemoryMaxMB;
    /**
     * @return Gets or sets the min dynamic memory for the vm.
     * 
     */
    private final Integer dynamicMemoryMinMB;
    /**
     * @return The extended location.
     * 
     */
    private final ExtendedLocationResponse extendedLocation;
    /**
     * @return Gets or sets the generation for the vm.
     * 
     */
    private final Integer generation;
    /**
     * @return Resource Id
     * 
     */
    private final String id;
    /**
     * @return Gets or sets the inventory Item ID for the resource.
     * 
     */
    private final @Nullable String inventoryItemId;
    /**
     * @return Gets or sets a value indicating whether the vm template is customizable or not.
     * 
     */
    private final String isCustomizable;
    /**
     * @return Gets highly available property.
     * 
     */
    private final String isHighlyAvailable;
    /**
     * @return Gets or sets a value indicating whether to enable processor compatibility mode for live migration of VMs.
     * 
     */
    private final String limitCpuForMigration;
    /**
     * @return Gets or sets the location.
     * 
     */
    private final String location;
    /**
     * @return MemoryMB is the desired size of a virtual machine&#39;s memory, in MB.
     * 
     */
    private final Integer memoryMB;
    /**
     * @return Resource Name
     * 
     */
    private final String name;
    /**
     * @return Gets or sets the network interfaces of the template.
     * 
     */
    private final List<NetworkInterfacesResponse> networkInterfaces;
    /**
     * @return Gets or sets os name.
     * 
     */
    private final String osName;
    /**
     * @return Gets or sets the type of the os.
     * 
     */
    private final String osType;
    /**
     * @return Gets or sets the provisioning state.
     * 
     */
    private final String provisioningState;
    /**
     * @return The system data.
     * 
     */
    private final SystemDataResponse systemData;
    /**
     * @return Resource tags
     * 
     */
    private final @Nullable Map<String,String> tags;
    /**
     * @return Resource Type
     * 
     */
    private final String type;
    /**
     * @return Unique ID of the virtual machine template.
     * 
     */
    private final @Nullable String uuid;
    /**
     * @return ARM Id of the vmmServer resource in which this resource resides.
     * 
     */
    private final @Nullable String vmmServerId;

    @CustomType.Constructor
    private GetVirtualMachineTemplateResult(
        @CustomType.Parameter("computerName") String computerName,
        @CustomType.Parameter("cpuCount") Integer cpuCount,
        @CustomType.Parameter("disks") List<VirtualDiskResponse> disks,
        @CustomType.Parameter("dynamicMemoryEnabled") String dynamicMemoryEnabled,
        @CustomType.Parameter("dynamicMemoryMaxMB") Integer dynamicMemoryMaxMB,
        @CustomType.Parameter("dynamicMemoryMinMB") Integer dynamicMemoryMinMB,
        @CustomType.Parameter("extendedLocation") ExtendedLocationResponse extendedLocation,
        @CustomType.Parameter("generation") Integer generation,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("inventoryItemId") @Nullable String inventoryItemId,
        @CustomType.Parameter("isCustomizable") String isCustomizable,
        @CustomType.Parameter("isHighlyAvailable") String isHighlyAvailable,
        @CustomType.Parameter("limitCpuForMigration") String limitCpuForMigration,
        @CustomType.Parameter("location") String location,
        @CustomType.Parameter("memoryMB") Integer memoryMB,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("networkInterfaces") List<NetworkInterfacesResponse> networkInterfaces,
        @CustomType.Parameter("osName") String osName,
        @CustomType.Parameter("osType") String osType,
        @CustomType.Parameter("provisioningState") String provisioningState,
        @CustomType.Parameter("systemData") SystemDataResponse systemData,
        @CustomType.Parameter("tags") @Nullable Map<String,String> tags,
        @CustomType.Parameter("type") String type,
        @CustomType.Parameter("uuid") @Nullable String uuid,
        @CustomType.Parameter("vmmServerId") @Nullable String vmmServerId) {
        this.computerName = computerName;
        this.cpuCount = cpuCount;
        this.disks = disks;
        this.dynamicMemoryEnabled = dynamicMemoryEnabled;
        this.dynamicMemoryMaxMB = dynamicMemoryMaxMB;
        this.dynamicMemoryMinMB = dynamicMemoryMinMB;
        this.extendedLocation = extendedLocation;
        this.generation = generation;
        this.id = id;
        this.inventoryItemId = inventoryItemId;
        this.isCustomizable = isCustomizable;
        this.isHighlyAvailable = isHighlyAvailable;
        this.limitCpuForMigration = limitCpuForMigration;
        this.location = location;
        this.memoryMB = memoryMB;
        this.name = name;
        this.networkInterfaces = networkInterfaces;
        this.osName = osName;
        this.osType = osType;
        this.provisioningState = provisioningState;
        this.systemData = systemData;
        this.tags = tags;
        this.type = type;
        this.uuid = uuid;
        this.vmmServerId = vmmServerId;
    }

    /**
     * @return Gets or sets computer name.
     * 
     */
    public String computerName() {
        return this.computerName;
    }
    /**
     * @return Gets or sets the desired number of vCPUs for the vm.
     * 
     */
    public Integer cpuCount() {
        return this.cpuCount;
    }
    /**
     * @return Gets or sets the disks of the template.
     * 
     */
    public List<VirtualDiskResponse> disks() {
        return this.disks;
    }
    /**
     * @return Gets or sets a value indicating whether to enable dynamic memory or not.
     * 
     */
    public String dynamicMemoryEnabled() {
        return this.dynamicMemoryEnabled;
    }
    /**
     * @return Gets or sets the max dynamic memory for the vm.
     * 
     */
    public Integer dynamicMemoryMaxMB() {
        return this.dynamicMemoryMaxMB;
    }
    /**
     * @return Gets or sets the min dynamic memory for the vm.
     * 
     */
    public Integer dynamicMemoryMinMB() {
        return this.dynamicMemoryMinMB;
    }
    /**
     * @return The extended location.
     * 
     */
    public ExtendedLocationResponse extendedLocation() {
        return this.extendedLocation;
    }
    /**
     * @return Gets or sets the generation for the vm.
     * 
     */
    public Integer generation() {
        return this.generation;
    }
    /**
     * @return Resource Id
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Gets or sets the inventory Item ID for the resource.
     * 
     */
    public Optional<String> inventoryItemId() {
        return Optional.ofNullable(this.inventoryItemId);
    }
    /**
     * @return Gets or sets a value indicating whether the vm template is customizable or not.
     * 
     */
    public String isCustomizable() {
        return this.isCustomizable;
    }
    /**
     * @return Gets highly available property.
     * 
     */
    public String isHighlyAvailable() {
        return this.isHighlyAvailable;
    }
    /**
     * @return Gets or sets a value indicating whether to enable processor compatibility mode for live migration of VMs.
     * 
     */
    public String limitCpuForMigration() {
        return this.limitCpuForMigration;
    }
    /**
     * @return Gets or sets the location.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return MemoryMB is the desired size of a virtual machine&#39;s memory, in MB.
     * 
     */
    public Integer memoryMB() {
        return this.memoryMB;
    }
    /**
     * @return Resource Name
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Gets or sets the network interfaces of the template.
     * 
     */
    public List<NetworkInterfacesResponse> networkInterfaces() {
        return this.networkInterfaces;
    }
    /**
     * @return Gets or sets os name.
     * 
     */
    public String osName() {
        return this.osName;
    }
    /**
     * @return Gets or sets the type of the os.
     * 
     */
    public String osType() {
        return this.osType;
    }
    /**
     * @return Gets or sets the provisioning state.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return The system data.
     * 
     */
    public SystemDataResponse systemData() {
        return this.systemData;
    }
    /**
     * @return Resource tags
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return Resource Type
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Unique ID of the virtual machine template.
     * 
     */
    public Optional<String> uuid() {
        return Optional.ofNullable(this.uuid);
    }
    /**
     * @return ARM Id of the vmmServer resource in which this resource resides.
     * 
     */
    public Optional<String> vmmServerId() {
        return Optional.ofNullable(this.vmmServerId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVirtualMachineTemplateResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String computerName;
        private Integer cpuCount;
        private List<VirtualDiskResponse> disks;
        private String dynamicMemoryEnabled;
        private Integer dynamicMemoryMaxMB;
        private Integer dynamicMemoryMinMB;
        private ExtendedLocationResponse extendedLocation;
        private Integer generation;
        private String id;
        private @Nullable String inventoryItemId;
        private String isCustomizable;
        private String isHighlyAvailable;
        private String limitCpuForMigration;
        private String location;
        private Integer memoryMB;
        private String name;
        private List<NetworkInterfacesResponse> networkInterfaces;
        private String osName;
        private String osType;
        private String provisioningState;
        private SystemDataResponse systemData;
        private @Nullable Map<String,String> tags;
        private String type;
        private @Nullable String uuid;
        private @Nullable String vmmServerId;

        public Builder() {
    	      // Empty
        }

        public Builder(GetVirtualMachineTemplateResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.computerName = defaults.computerName;
    	      this.cpuCount = defaults.cpuCount;
    	      this.disks = defaults.disks;
    	      this.dynamicMemoryEnabled = defaults.dynamicMemoryEnabled;
    	      this.dynamicMemoryMaxMB = defaults.dynamicMemoryMaxMB;
    	      this.dynamicMemoryMinMB = defaults.dynamicMemoryMinMB;
    	      this.extendedLocation = defaults.extendedLocation;
    	      this.generation = defaults.generation;
    	      this.id = defaults.id;
    	      this.inventoryItemId = defaults.inventoryItemId;
    	      this.isCustomizable = defaults.isCustomizable;
    	      this.isHighlyAvailable = defaults.isHighlyAvailable;
    	      this.limitCpuForMigration = defaults.limitCpuForMigration;
    	      this.location = defaults.location;
    	      this.memoryMB = defaults.memoryMB;
    	      this.name = defaults.name;
    	      this.networkInterfaces = defaults.networkInterfaces;
    	      this.osName = defaults.osName;
    	      this.osType = defaults.osType;
    	      this.provisioningState = defaults.provisioningState;
    	      this.systemData = defaults.systemData;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
    	      this.uuid = defaults.uuid;
    	      this.vmmServerId = defaults.vmmServerId;
        }

        public Builder computerName(String computerName) {
            this.computerName = Objects.requireNonNull(computerName);
            return this;
        }
        public Builder cpuCount(Integer cpuCount) {
            this.cpuCount = Objects.requireNonNull(cpuCount);
            return this;
        }
        public Builder disks(List<VirtualDiskResponse> disks) {
            this.disks = Objects.requireNonNull(disks);
            return this;
        }
        public Builder disks(VirtualDiskResponse... disks) {
            return disks(List.of(disks));
        }
        public Builder dynamicMemoryEnabled(String dynamicMemoryEnabled) {
            this.dynamicMemoryEnabled = Objects.requireNonNull(dynamicMemoryEnabled);
            return this;
        }
        public Builder dynamicMemoryMaxMB(Integer dynamicMemoryMaxMB) {
            this.dynamicMemoryMaxMB = Objects.requireNonNull(dynamicMemoryMaxMB);
            return this;
        }
        public Builder dynamicMemoryMinMB(Integer dynamicMemoryMinMB) {
            this.dynamicMemoryMinMB = Objects.requireNonNull(dynamicMemoryMinMB);
            return this;
        }
        public Builder extendedLocation(ExtendedLocationResponse extendedLocation) {
            this.extendedLocation = Objects.requireNonNull(extendedLocation);
            return this;
        }
        public Builder generation(Integer generation) {
            this.generation = Objects.requireNonNull(generation);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder inventoryItemId(@Nullable String inventoryItemId) {
            this.inventoryItemId = inventoryItemId;
            return this;
        }
        public Builder isCustomizable(String isCustomizable) {
            this.isCustomizable = Objects.requireNonNull(isCustomizable);
            return this;
        }
        public Builder isHighlyAvailable(String isHighlyAvailable) {
            this.isHighlyAvailable = Objects.requireNonNull(isHighlyAvailable);
            return this;
        }
        public Builder limitCpuForMigration(String limitCpuForMigration) {
            this.limitCpuForMigration = Objects.requireNonNull(limitCpuForMigration);
            return this;
        }
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        public Builder memoryMB(Integer memoryMB) {
            this.memoryMB = Objects.requireNonNull(memoryMB);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder networkInterfaces(List<NetworkInterfacesResponse> networkInterfaces) {
            this.networkInterfaces = Objects.requireNonNull(networkInterfaces);
            return this;
        }
        public Builder networkInterfaces(NetworkInterfacesResponse... networkInterfaces) {
            return networkInterfaces(List.of(networkInterfaces));
        }
        public Builder osName(String osName) {
            this.osName = Objects.requireNonNull(osName);
            return this;
        }
        public Builder osType(String osType) {
            this.osType = Objects.requireNonNull(osType);
            return this;
        }
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        public Builder systemData(SystemDataResponse systemData) {
            this.systemData = Objects.requireNonNull(systemData);
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder uuid(@Nullable String uuid) {
            this.uuid = uuid;
            return this;
        }
        public Builder vmmServerId(@Nullable String vmmServerId) {
            this.vmmServerId = vmmServerId;
            return this;
        }        public GetVirtualMachineTemplateResult build() {
            return new GetVirtualMachineTemplateResult(computerName, cpuCount, disks, dynamicMemoryEnabled, dynamicMemoryMaxMB, dynamicMemoryMinMB, extendedLocation, generation, id, inventoryItemId, isCustomizable, isHighlyAvailable, limitCpuForMigration, location, memoryMB, name, networkInterfaces, osName, osType, provisioningState, systemData, tags, type, uuid, vmmServerId);
        }
    }
}
