// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.compute.inputs;

import com.pulumi.azurenative.compute.enums.CachingTypes;
import com.pulumi.azurenative.compute.enums.DiskCreateOptionTypes;
import com.pulumi.azurenative.compute.enums.DiskDeleteOptionTypes;
import com.pulumi.azurenative.compute.enums.OperatingSystemTypes;
import com.pulumi.azurenative.compute.inputs.DiffDiskSettingsArgs;
import com.pulumi.azurenative.compute.inputs.DiskEncryptionSettingsArgs;
import com.pulumi.azurenative.compute.inputs.ManagedDiskParametersArgs;
import com.pulumi.azurenative.compute.inputs.VirtualHardDiskArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Specifies information about the operating system disk used by the virtual machine. &lt;br&gt;&lt;br&gt; For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview).
 * 
 */
public final class OSDiskArgs extends com.pulumi.resources.ResourceArgs {

    public static final OSDiskArgs Empty = new OSDiskArgs();

    /**
     * Specifies the caching requirements. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt; **None** &lt;br&gt;&lt;br&gt; **ReadOnly** &lt;br&gt;&lt;br&gt; **ReadWrite** &lt;br&gt;&lt;br&gt; Default: **None** for Standard storage. **ReadOnly** for Premium storage.
     * 
     */
    @Import(name="caching")
      private final @Nullable Output<CachingTypes> caching;

    public Output<CachingTypes> caching() {
        return this.caching == null ? Codegen.empty() : this.caching;
    }

    /**
     * Specifies how the virtual machine should be created.&lt;br&gt;&lt;br&gt; Possible values are:&lt;br&gt;&lt;br&gt; **Attach** \u2013 This value is used when you are using a specialized disk to create the virtual machine.&lt;br&gt;&lt;br&gt; **FromImage** \u2013 This value is used when you are using an image to create the virtual machine. If you are using a platform image, you also use the imageReference element described above. If you are using a marketplace image, you  also use the plan element previously described.
     * 
     */
    @Import(name="createOption", required=true)
      private final Output<Either<String,DiskCreateOptionTypes>> createOption;

    public Output<Either<String,DiskCreateOptionTypes>> createOption() {
        return this.createOption;
    }

    /**
     * Specifies whether OS Disk should be deleted or detached upon VM deletion. &lt;br&gt;&lt;br&gt; Possible values: &lt;br&gt;&lt;br&gt; **Delete** If this value is used, the OS disk is deleted when VM is deleted.&lt;br&gt;&lt;br&gt; **Detach** If this value is used, the os disk is retained after VM is deleted. &lt;br&gt;&lt;br&gt; The default value is set to **detach**. For an ephemeral OS Disk, the default value is set to **Delete**. User cannot change the delete option for ephemeral OS Disk.
     * 
     */
    @Import(name="deleteOption")
      private final @Nullable Output<Either<String,DiskDeleteOptionTypes>> deleteOption;

    public Output<Either<String,DiskDeleteOptionTypes>> deleteOption() {
        return this.deleteOption == null ? Codegen.empty() : this.deleteOption;
    }

    /**
     * Specifies the ephemeral Disk Settings for the operating system disk used by the virtual machine.
     * 
     */
    @Import(name="diffDiskSettings")
      private final @Nullable Output<DiffDiskSettingsArgs> diffDiskSettings;

    public Output<DiffDiskSettingsArgs> diffDiskSettings() {
        return this.diffDiskSettings == null ? Codegen.empty() : this.diffDiskSettings;
    }

    /**
     * Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. &lt;br&gt;&lt;br&gt; This value cannot be larger than 1023 GB
     * 
     */
    @Import(name="diskSizeGB")
      private final @Nullable Output<Integer> diskSizeGB;

    public Output<Integer> diskSizeGB() {
        return this.diskSizeGB == null ? Codegen.empty() : this.diskSizeGB;
    }

    /**
     * Specifies the encryption settings for the OS Disk. &lt;br&gt;&lt;br&gt; Minimum api-version: 2015-06-15
     * 
     */
    @Import(name="encryptionSettings")
      private final @Nullable Output<DiskEncryptionSettingsArgs> encryptionSettings;

    public Output<DiskEncryptionSettingsArgs> encryptionSettings() {
        return this.encryptionSettings == null ? Codegen.empty() : this.encryptionSettings;
    }

    /**
     * The source user image virtual hard disk. The virtual hard disk will be copied before being attached to the virtual machine. If SourceImage is provided, the destination virtual hard drive must not exist.
     * 
     */
    @Import(name="image")
      private final @Nullable Output<VirtualHardDiskArgs> image;

    public Output<VirtualHardDiskArgs> image() {
        return this.image == null ? Codegen.empty() : this.image;
    }

    /**
     * The managed disk parameters.
     * 
     */
    @Import(name="managedDisk")
      private final @Nullable Output<ManagedDiskParametersArgs> managedDisk;

    public Output<ManagedDiskParametersArgs> managedDisk() {
        return this.managedDisk == null ? Codegen.empty() : this.managedDisk;
    }

    /**
     * The disk name.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * This property allows you to specify the type of the OS that is included in the disk if creating a VM from user-image or a specialized VHD. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt; **Windows** &lt;br&gt;&lt;br&gt; **Linux**
     * 
     */
    @Import(name="osType")
      private final @Nullable Output<OperatingSystemTypes> osType;

    public Output<OperatingSystemTypes> osType() {
        return this.osType == null ? Codegen.empty() : this.osType;
    }

    /**
     * The virtual hard disk.
     * 
     */
    @Import(name="vhd")
      private final @Nullable Output<VirtualHardDiskArgs> vhd;

    public Output<VirtualHardDiskArgs> vhd() {
        return this.vhd == null ? Codegen.empty() : this.vhd;
    }

    /**
     * Specifies whether writeAccelerator should be enabled or disabled on the disk.
     * 
     */
    @Import(name="writeAcceleratorEnabled")
      private final @Nullable Output<Boolean> writeAcceleratorEnabled;

    public Output<Boolean> writeAcceleratorEnabled() {
        return this.writeAcceleratorEnabled == null ? Codegen.empty() : this.writeAcceleratorEnabled;
    }

    public OSDiskArgs(
        @Nullable Output<CachingTypes> caching,
        Output<Either<String,DiskCreateOptionTypes>> createOption,
        @Nullable Output<Either<String,DiskDeleteOptionTypes>> deleteOption,
        @Nullable Output<DiffDiskSettingsArgs> diffDiskSettings,
        @Nullable Output<Integer> diskSizeGB,
        @Nullable Output<DiskEncryptionSettingsArgs> encryptionSettings,
        @Nullable Output<VirtualHardDiskArgs> image,
        @Nullable Output<ManagedDiskParametersArgs> managedDisk,
        @Nullable Output<String> name,
        @Nullable Output<OperatingSystemTypes> osType,
        @Nullable Output<VirtualHardDiskArgs> vhd,
        @Nullable Output<Boolean> writeAcceleratorEnabled) {
        this.caching = caching;
        this.createOption = Objects.requireNonNull(createOption, "expected parameter 'createOption' to be non-null");
        this.deleteOption = deleteOption;
        this.diffDiskSettings = diffDiskSettings;
        this.diskSizeGB = diskSizeGB;
        this.encryptionSettings = encryptionSettings;
        this.image = image;
        this.managedDisk = managedDisk;
        this.name = name;
        this.osType = osType;
        this.vhd = vhd;
        this.writeAcceleratorEnabled = writeAcceleratorEnabled;
    }

    private OSDiskArgs() {
        this.caching = Codegen.empty();
        this.createOption = Codegen.empty();
        this.deleteOption = Codegen.empty();
        this.diffDiskSettings = Codegen.empty();
        this.diskSizeGB = Codegen.empty();
        this.encryptionSettings = Codegen.empty();
        this.image = Codegen.empty();
        this.managedDisk = Codegen.empty();
        this.name = Codegen.empty();
        this.osType = Codegen.empty();
        this.vhd = Codegen.empty();
        this.writeAcceleratorEnabled = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(OSDiskArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<CachingTypes> caching;
        private Output<Either<String,DiskCreateOptionTypes>> createOption;
        private @Nullable Output<Either<String,DiskDeleteOptionTypes>> deleteOption;
        private @Nullable Output<DiffDiskSettingsArgs> diffDiskSettings;
        private @Nullable Output<Integer> diskSizeGB;
        private @Nullable Output<DiskEncryptionSettingsArgs> encryptionSettings;
        private @Nullable Output<VirtualHardDiskArgs> image;
        private @Nullable Output<ManagedDiskParametersArgs> managedDisk;
        private @Nullable Output<String> name;
        private @Nullable Output<OperatingSystemTypes> osType;
        private @Nullable Output<VirtualHardDiskArgs> vhd;
        private @Nullable Output<Boolean> writeAcceleratorEnabled;

        public Builder() {
    	      // Empty
        }

        public Builder(OSDiskArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.caching = defaults.caching;
    	      this.createOption = defaults.createOption;
    	      this.deleteOption = defaults.deleteOption;
    	      this.diffDiskSettings = defaults.diffDiskSettings;
    	      this.diskSizeGB = defaults.diskSizeGB;
    	      this.encryptionSettings = defaults.encryptionSettings;
    	      this.image = defaults.image;
    	      this.managedDisk = defaults.managedDisk;
    	      this.name = defaults.name;
    	      this.osType = defaults.osType;
    	      this.vhd = defaults.vhd;
    	      this.writeAcceleratorEnabled = defaults.writeAcceleratorEnabled;
        }

        public Builder caching(@Nullable Output<CachingTypes> caching) {
            this.caching = caching;
            return this;
        }
        public Builder caching(@Nullable CachingTypes caching) {
            this.caching = Codegen.ofNullable(caching);
            return this;
        }
        public Builder createOption(Output<Either<String,DiskCreateOptionTypes>> createOption) {
            this.createOption = Objects.requireNonNull(createOption);
            return this;
        }
        public Builder createOption(Either<String,DiskCreateOptionTypes> createOption) {
            this.createOption = Output.of(Objects.requireNonNull(createOption));
            return this;
        }
        public Builder deleteOption(@Nullable Output<Either<String,DiskDeleteOptionTypes>> deleteOption) {
            this.deleteOption = deleteOption;
            return this;
        }
        public Builder deleteOption(@Nullable Either<String,DiskDeleteOptionTypes> deleteOption) {
            this.deleteOption = Codegen.ofNullable(deleteOption);
            return this;
        }
        public Builder diffDiskSettings(@Nullable Output<DiffDiskSettingsArgs> diffDiskSettings) {
            this.diffDiskSettings = diffDiskSettings;
            return this;
        }
        public Builder diffDiskSettings(@Nullable DiffDiskSettingsArgs diffDiskSettings) {
            this.diffDiskSettings = Codegen.ofNullable(diffDiskSettings);
            return this;
        }
        public Builder diskSizeGB(@Nullable Output<Integer> diskSizeGB) {
            this.diskSizeGB = diskSizeGB;
            return this;
        }
        public Builder diskSizeGB(@Nullable Integer diskSizeGB) {
            this.diskSizeGB = Codegen.ofNullable(diskSizeGB);
            return this;
        }
        public Builder encryptionSettings(@Nullable Output<DiskEncryptionSettingsArgs> encryptionSettings) {
            this.encryptionSettings = encryptionSettings;
            return this;
        }
        public Builder encryptionSettings(@Nullable DiskEncryptionSettingsArgs encryptionSettings) {
            this.encryptionSettings = Codegen.ofNullable(encryptionSettings);
            return this;
        }
        public Builder image(@Nullable Output<VirtualHardDiskArgs> image) {
            this.image = image;
            return this;
        }
        public Builder image(@Nullable VirtualHardDiskArgs image) {
            this.image = Codegen.ofNullable(image);
            return this;
        }
        public Builder managedDisk(@Nullable Output<ManagedDiskParametersArgs> managedDisk) {
            this.managedDisk = managedDisk;
            return this;
        }
        public Builder managedDisk(@Nullable ManagedDiskParametersArgs managedDisk) {
            this.managedDisk = Codegen.ofNullable(managedDisk);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder osType(@Nullable Output<OperatingSystemTypes> osType) {
            this.osType = osType;
            return this;
        }
        public Builder osType(@Nullable OperatingSystemTypes osType) {
            this.osType = Codegen.ofNullable(osType);
            return this;
        }
        public Builder vhd(@Nullable Output<VirtualHardDiskArgs> vhd) {
            this.vhd = vhd;
            return this;
        }
        public Builder vhd(@Nullable VirtualHardDiskArgs vhd) {
            this.vhd = Codegen.ofNullable(vhd);
            return this;
        }
        public Builder writeAcceleratorEnabled(@Nullable Output<Boolean> writeAcceleratorEnabled) {
            this.writeAcceleratorEnabled = writeAcceleratorEnabled;
            return this;
        }
        public Builder writeAcceleratorEnabled(@Nullable Boolean writeAcceleratorEnabled) {
            this.writeAcceleratorEnabled = Codegen.ofNullable(writeAcceleratorEnabled);
            return this;
        }        public OSDiskArgs build() {
            return new OSDiskArgs(caching, createOption, deleteOption, diffDiskSettings, diskSizeGB, encryptionSettings, image, managedDisk, name, osType, vhd, writeAcceleratorEnabled);
        }
    }
}
