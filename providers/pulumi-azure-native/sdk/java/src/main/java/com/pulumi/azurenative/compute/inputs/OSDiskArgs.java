// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.compute.inputs;

import com.pulumi.azurenative.compute.enums.CachingTypes;
import com.pulumi.azurenative.compute.enums.DiskCreateOptionTypes;
import com.pulumi.azurenative.compute.enums.DiskDeleteOptionTypes;
import com.pulumi.azurenative.compute.enums.OperatingSystemTypes;
import com.pulumi.azurenative.compute.inputs.DiffDiskSettingsArgs;
import com.pulumi.azurenative.compute.inputs.DiskEncryptionSettingsArgs;
import com.pulumi.azurenative.compute.inputs.ManagedDiskParametersArgs;
import com.pulumi.azurenative.compute.inputs.VirtualHardDiskArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Specifies information about the operating system disk used by the virtual machine. &lt;br&gt;&lt;br&gt; For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview).
 * 
 */
public final class OSDiskArgs extends com.pulumi.resources.ResourceArgs {

    public static final OSDiskArgs Empty = new OSDiskArgs();

    /**
     * Specifies the caching requirements. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt; **None** &lt;br&gt;&lt;br&gt; **ReadOnly** &lt;br&gt;&lt;br&gt; **ReadWrite** &lt;br&gt;&lt;br&gt; Default: **None** for Standard storage. **ReadOnly** for Premium storage.
     * 
     */
    @Import(name="caching")
    private @Nullable Output<CachingTypes> caching;

    public Optional<Output<CachingTypes>> caching() {
        return Optional.ofNullable(this.caching);
    }

    /**
     * Specifies how the virtual machine should be created.&lt;br&gt;&lt;br&gt; Possible values are:&lt;br&gt;&lt;br&gt; **Attach** \u2013 This value is used when you are using a specialized disk to create the virtual machine.&lt;br&gt;&lt;br&gt; **FromImage** \u2013 This value is used when you are using an image to create the virtual machine. If you are using a platform image, you also use the imageReference element described above. If you are using a marketplace image, you  also use the plan element previously described.
     * 
     */
    @Import(name="createOption", required=true)
    private Output<Either<String,DiskCreateOptionTypes>> createOption;

    public Output<Either<String,DiskCreateOptionTypes>> createOption() {
        return this.createOption;
    }

    /**
     * Specifies whether OS Disk should be deleted or detached upon VM deletion. &lt;br&gt;&lt;br&gt; Possible values: &lt;br&gt;&lt;br&gt; **Delete** If this value is used, the OS disk is deleted when VM is deleted.&lt;br&gt;&lt;br&gt; **Detach** If this value is used, the os disk is retained after VM is deleted. &lt;br&gt;&lt;br&gt; The default value is set to **detach**. For an ephemeral OS Disk, the default value is set to **Delete**. User cannot change the delete option for ephemeral OS Disk.
     * 
     */
    @Import(name="deleteOption")
    private @Nullable Output<Either<String,DiskDeleteOptionTypes>> deleteOption;

    public Optional<Output<Either<String,DiskDeleteOptionTypes>>> deleteOption() {
        return Optional.ofNullable(this.deleteOption);
    }

    /**
     * Specifies the ephemeral Disk Settings for the operating system disk used by the virtual machine.
     * 
     */
    @Import(name="diffDiskSettings")
    private @Nullable Output<DiffDiskSettingsArgs> diffDiskSettings;

    public Optional<Output<DiffDiskSettingsArgs>> diffDiskSettings() {
        return Optional.ofNullable(this.diffDiskSettings);
    }

    /**
     * Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. &lt;br&gt;&lt;br&gt; This value cannot be larger than 1023 GB
     * 
     */
    @Import(name="diskSizeGB")
    private @Nullable Output<Integer> diskSizeGB;

    public Optional<Output<Integer>> diskSizeGB() {
        return Optional.ofNullable(this.diskSizeGB);
    }

    /**
     * Specifies the encryption settings for the OS Disk. &lt;br&gt;&lt;br&gt; Minimum api-version: 2015-06-15
     * 
     */
    @Import(name="encryptionSettings")
    private @Nullable Output<DiskEncryptionSettingsArgs> encryptionSettings;

    public Optional<Output<DiskEncryptionSettingsArgs>> encryptionSettings() {
        return Optional.ofNullable(this.encryptionSettings);
    }

    /**
     * The source user image virtual hard disk. The virtual hard disk will be copied before being attached to the virtual machine. If SourceImage is provided, the destination virtual hard drive must not exist.
     * 
     */
    @Import(name="image")
    private @Nullable Output<VirtualHardDiskArgs> image;

    public Optional<Output<VirtualHardDiskArgs>> image() {
        return Optional.ofNullable(this.image);
    }

    /**
     * The managed disk parameters.
     * 
     */
    @Import(name="managedDisk")
    private @Nullable Output<ManagedDiskParametersArgs> managedDisk;

    public Optional<Output<ManagedDiskParametersArgs>> managedDisk() {
        return Optional.ofNullable(this.managedDisk);
    }

    /**
     * The disk name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * This property allows you to specify the type of the OS that is included in the disk if creating a VM from user-image or a specialized VHD. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt; **Windows** &lt;br&gt;&lt;br&gt; **Linux**
     * 
     */
    @Import(name="osType")
    private @Nullable Output<OperatingSystemTypes> osType;

    public Optional<Output<OperatingSystemTypes>> osType() {
        return Optional.ofNullable(this.osType);
    }

    /**
     * The virtual hard disk.
     * 
     */
    @Import(name="vhd")
    private @Nullable Output<VirtualHardDiskArgs> vhd;

    public Optional<Output<VirtualHardDiskArgs>> vhd() {
        return Optional.ofNullable(this.vhd);
    }

    /**
     * Specifies whether writeAccelerator should be enabled or disabled on the disk.
     * 
     */
    @Import(name="writeAcceleratorEnabled")
    private @Nullable Output<Boolean> writeAcceleratorEnabled;

    public Optional<Output<Boolean>> writeAcceleratorEnabled() {
        return Optional.ofNullable(this.writeAcceleratorEnabled);
    }

    private OSDiskArgs() {}

    private OSDiskArgs(OSDiskArgs $) {
        this.caching = $.caching;
        this.createOption = $.createOption;
        this.deleteOption = $.deleteOption;
        this.diffDiskSettings = $.diffDiskSettings;
        this.diskSizeGB = $.diskSizeGB;
        this.encryptionSettings = $.encryptionSettings;
        this.image = $.image;
        this.managedDisk = $.managedDisk;
        this.name = $.name;
        this.osType = $.osType;
        this.vhd = $.vhd;
        this.writeAcceleratorEnabled = $.writeAcceleratorEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OSDiskArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OSDiskArgs $;

        public Builder() {
            $ = new OSDiskArgs();
        }

        public Builder(OSDiskArgs defaults) {
            $ = new OSDiskArgs(Objects.requireNonNull(defaults));
        }

        public Builder caching(@Nullable Output<CachingTypes> caching) {
            $.caching = caching;
            return this;
        }

        public Builder caching(CachingTypes caching) {
            return caching(Output.of(caching));
        }

        public Builder createOption(Output<Either<String,DiskCreateOptionTypes>> createOption) {
            $.createOption = createOption;
            return this;
        }

        public Builder createOption(Either<String,DiskCreateOptionTypes> createOption) {
            return createOption(Output.of(createOption));
        }

        public Builder createOption(String createOption) {
            return createOption(Either.ofLeft(createOption));
        }

        public Builder createOption(DiskCreateOptionTypes createOption) {
            return createOption(Either.ofRight(createOption));
        }

        public Builder deleteOption(@Nullable Output<Either<String,DiskDeleteOptionTypes>> deleteOption) {
            $.deleteOption = deleteOption;
            return this;
        }

        public Builder deleteOption(Either<String,DiskDeleteOptionTypes> deleteOption) {
            return deleteOption(Output.of(deleteOption));
        }

        public Builder deleteOption(String deleteOption) {
            return deleteOption(Either.ofLeft(deleteOption));
        }

        public Builder deleteOption(DiskDeleteOptionTypes deleteOption) {
            return deleteOption(Either.ofRight(deleteOption));
        }

        public Builder diffDiskSettings(@Nullable Output<DiffDiskSettingsArgs> diffDiskSettings) {
            $.diffDiskSettings = diffDiskSettings;
            return this;
        }

        public Builder diffDiskSettings(DiffDiskSettingsArgs diffDiskSettings) {
            return diffDiskSettings(Output.of(diffDiskSettings));
        }

        public Builder diskSizeGB(@Nullable Output<Integer> diskSizeGB) {
            $.diskSizeGB = diskSizeGB;
            return this;
        }

        public Builder diskSizeGB(Integer diskSizeGB) {
            return diskSizeGB(Output.of(diskSizeGB));
        }

        public Builder encryptionSettings(@Nullable Output<DiskEncryptionSettingsArgs> encryptionSettings) {
            $.encryptionSettings = encryptionSettings;
            return this;
        }

        public Builder encryptionSettings(DiskEncryptionSettingsArgs encryptionSettings) {
            return encryptionSettings(Output.of(encryptionSettings));
        }

        public Builder image(@Nullable Output<VirtualHardDiskArgs> image) {
            $.image = image;
            return this;
        }

        public Builder image(VirtualHardDiskArgs image) {
            return image(Output.of(image));
        }

        public Builder managedDisk(@Nullable Output<ManagedDiskParametersArgs> managedDisk) {
            $.managedDisk = managedDisk;
            return this;
        }

        public Builder managedDisk(ManagedDiskParametersArgs managedDisk) {
            return managedDisk(Output.of(managedDisk));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder osType(@Nullable Output<OperatingSystemTypes> osType) {
            $.osType = osType;
            return this;
        }

        public Builder osType(OperatingSystemTypes osType) {
            return osType(Output.of(osType));
        }

        public Builder vhd(@Nullable Output<VirtualHardDiskArgs> vhd) {
            $.vhd = vhd;
            return this;
        }

        public Builder vhd(VirtualHardDiskArgs vhd) {
            return vhd(Output.of(vhd));
        }

        public Builder writeAcceleratorEnabled(@Nullable Output<Boolean> writeAcceleratorEnabled) {
            $.writeAcceleratorEnabled = writeAcceleratorEnabled;
            return this;
        }

        public Builder writeAcceleratorEnabled(Boolean writeAcceleratorEnabled) {
            return writeAcceleratorEnabled(Output.of(writeAcceleratorEnabled));
        }

        public OSDiskArgs build() {
            $.createOption = Objects.requireNonNull($.createOption, "expected parameter 'createOption' to be non-null");
            return $;
        }
    }

}
