// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.sql;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkloadGroupArgs extends com.pulumi.resources.ResourceArgs {

    public static final WorkloadGroupArgs Empty = new WorkloadGroupArgs();

    /**
     * The name of the database.
     * 
     */
    @Import(name="databaseName", required=true)
    private Output<String> databaseName;

    public Output<String> databaseName() {
        return this.databaseName;
    }

    /**
     * The workload group importance level.
     * 
     */
    @Import(name="importance")
    private @Nullable Output<String> importance;

    public Optional<Output<String>> importance() {
        return Optional.ofNullable(this.importance);
    }

    /**
     * The workload group cap percentage resource.
     * 
     */
    @Import(name="maxResourcePercent", required=true)
    private Output<Integer> maxResourcePercent;

    public Output<Integer> maxResourcePercent() {
        return this.maxResourcePercent;
    }

    /**
     * The workload group request maximum grant percentage.
     * 
     */
    @Import(name="maxResourcePercentPerRequest")
    private @Nullable Output<Double> maxResourcePercentPerRequest;

    public Optional<Output<Double>> maxResourcePercentPerRequest() {
        return Optional.ofNullable(this.maxResourcePercentPerRequest);
    }

    /**
     * The workload group minimum percentage resource.
     * 
     */
    @Import(name="minResourcePercent", required=true)
    private Output<Integer> minResourcePercent;

    public Output<Integer> minResourcePercent() {
        return this.minResourcePercent;
    }

    /**
     * The workload group request minimum grant percentage.
     * 
     */
    @Import(name="minResourcePercentPerRequest", required=true)
    private Output<Double> minResourcePercentPerRequest;

    public Output<Double> minResourcePercentPerRequest() {
        return this.minResourcePercentPerRequest;
    }

    /**
     * The workload group query execution timeout.
     * 
     */
    @Import(name="queryExecutionTimeout")
    private @Nullable Output<Integer> queryExecutionTimeout;

    public Optional<Output<Integer>> queryExecutionTimeout() {
        return Optional.ofNullable(this.queryExecutionTimeout);
    }

    /**
     * The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The name of the server.
     * 
     */
    @Import(name="serverName", required=true)
    private Output<String> serverName;

    public Output<String> serverName() {
        return this.serverName;
    }

    /**
     * The name of the workload group.
     * 
     */
    @Import(name="workloadGroupName")
    private @Nullable Output<String> workloadGroupName;

    public Optional<Output<String>> workloadGroupName() {
        return Optional.ofNullable(this.workloadGroupName);
    }

    private WorkloadGroupArgs() {}

    private WorkloadGroupArgs(WorkloadGroupArgs $) {
        this.databaseName = $.databaseName;
        this.importance = $.importance;
        this.maxResourcePercent = $.maxResourcePercent;
        this.maxResourcePercentPerRequest = $.maxResourcePercentPerRequest;
        this.minResourcePercent = $.minResourcePercent;
        this.minResourcePercentPerRequest = $.minResourcePercentPerRequest;
        this.queryExecutionTimeout = $.queryExecutionTimeout;
        this.resourceGroupName = $.resourceGroupName;
        this.serverName = $.serverName;
        this.workloadGroupName = $.workloadGroupName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkloadGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkloadGroupArgs $;

        public Builder() {
            $ = new WorkloadGroupArgs();
        }

        public Builder(WorkloadGroupArgs defaults) {
            $ = new WorkloadGroupArgs(Objects.requireNonNull(defaults));
        }

        public Builder databaseName(Output<String> databaseName) {
            $.databaseName = databaseName;
            return this;
        }

        public Builder databaseName(String databaseName) {
            return databaseName(Output.of(databaseName));
        }

        public Builder importance(@Nullable Output<String> importance) {
            $.importance = importance;
            return this;
        }

        public Builder importance(String importance) {
            return importance(Output.of(importance));
        }

        public Builder maxResourcePercent(Output<Integer> maxResourcePercent) {
            $.maxResourcePercent = maxResourcePercent;
            return this;
        }

        public Builder maxResourcePercent(Integer maxResourcePercent) {
            return maxResourcePercent(Output.of(maxResourcePercent));
        }

        public Builder maxResourcePercentPerRequest(@Nullable Output<Double> maxResourcePercentPerRequest) {
            $.maxResourcePercentPerRequest = maxResourcePercentPerRequest;
            return this;
        }

        public Builder maxResourcePercentPerRequest(Double maxResourcePercentPerRequest) {
            return maxResourcePercentPerRequest(Output.of(maxResourcePercentPerRequest));
        }

        public Builder minResourcePercent(Output<Integer> minResourcePercent) {
            $.minResourcePercent = minResourcePercent;
            return this;
        }

        public Builder minResourcePercent(Integer minResourcePercent) {
            return minResourcePercent(Output.of(minResourcePercent));
        }

        public Builder minResourcePercentPerRequest(Output<Double> minResourcePercentPerRequest) {
            $.minResourcePercentPerRequest = minResourcePercentPerRequest;
            return this;
        }

        public Builder minResourcePercentPerRequest(Double minResourcePercentPerRequest) {
            return minResourcePercentPerRequest(Output.of(minResourcePercentPerRequest));
        }

        public Builder queryExecutionTimeout(@Nullable Output<Integer> queryExecutionTimeout) {
            $.queryExecutionTimeout = queryExecutionTimeout;
            return this;
        }

        public Builder queryExecutionTimeout(Integer queryExecutionTimeout) {
            return queryExecutionTimeout(Output.of(queryExecutionTimeout));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder serverName(Output<String> serverName) {
            $.serverName = serverName;
            return this;
        }

        public Builder serverName(String serverName) {
            return serverName(Output.of(serverName));
        }

        public Builder workloadGroupName(@Nullable Output<String> workloadGroupName) {
            $.workloadGroupName = workloadGroupName;
            return this;
        }

        public Builder workloadGroupName(String workloadGroupName) {
            return workloadGroupName(Output.of(workloadGroupName));
        }

        public WorkloadGroupArgs build() {
            $.databaseName = Objects.requireNonNull($.databaseName, "expected parameter 'databaseName' to be non-null");
            $.maxResourcePercent = Objects.requireNonNull($.maxResourcePercent, "expected parameter 'maxResourcePercent' to be non-null");
            $.minResourcePercent = Objects.requireNonNull($.minResourcePercent, "expected parameter 'minResourcePercent' to be non-null");
            $.minResourcePercentPerRequest = Objects.requireNonNull($.minResourcePercentPerRequest, "expected parameter 'minResourcePercentPerRequest' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.serverName = Objects.requireNonNull($.serverName, "expected parameter 'serverName' to be non-null");
            return $;
        }
    }

}
