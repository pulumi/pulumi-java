// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.media.inputs;

import com.pulumi.azurenative.media.inputs.RectangleArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Describes the properties of a video overlay.
 * 
 */
public final class VideoOverlayArgs extends com.pulumi.resources.ResourceArgs {

    public static final VideoOverlayArgs Empty = new VideoOverlayArgs();

    /**
     * The gain level of audio in the overlay. The value should be in the range [0, 1.0]. The default is 1.0.
     * 
     */
    @Import(name="audioGainLevel")
      private final @Nullable Output<Double> audioGainLevel;

    public Output<Double> audioGainLevel() {
        return this.audioGainLevel == null ? Codegen.empty() : this.audioGainLevel;
    }

    /**
     * An optional rectangular window used to crop the overlay image or video.
     * 
     */
    @Import(name="cropRectangle")
      private final @Nullable Output<RectangleArgs> cropRectangle;

    public Output<RectangleArgs> cropRectangle() {
        return this.cropRectangle == null ? Codegen.empty() : this.cropRectangle;
    }

    /**
     * The end position, with reference to the input video, at which the overlay ends. The value should be in ISO 8601 format. For example, PT30S to end the overlay at 30 seconds into the input video. If not specified or the value is greater than the input video duration, the overlay will be applied until the end of the input video if the overlay media duration is greater than the input video duration, else the overlay will last as long as the overlay media duration.
     * 
     */
    @Import(name="end")
      private final @Nullable Output<String> end;

    public Output<String> end() {
        return this.end == null ? Codegen.empty() : this.end;
    }

    /**
     * The duration over which the overlay fades in onto the input video. The value should be in ISO 8601 duration format. If not specified the default behavior is to have no fade in (same as PT0S).
     * 
     */
    @Import(name="fadeInDuration")
      private final @Nullable Output<String> fadeInDuration;

    public Output<String> fadeInDuration() {
        return this.fadeInDuration == null ? Codegen.empty() : this.fadeInDuration;
    }

    /**
     * The duration over which the overlay fades out of the input video. The value should be in ISO 8601 duration format. If not specified the default behavior is to have no fade out (same as PT0S).
     * 
     */
    @Import(name="fadeOutDuration")
      private final @Nullable Output<String> fadeOutDuration;

    public Output<String> fadeOutDuration() {
        return this.fadeOutDuration == null ? Codegen.empty() : this.fadeOutDuration;
    }

    /**
     * The label of the job input which is to be used as an overlay. The Input must specify exactly one file. You can specify an image file in JPG, PNG, GIF or BMP format, or an audio file (such as a WAV, MP3, WMA or M4A file), or a video file. See https://aka.ms/mesformats for the complete list of supported audio and video file formats.
     * 
     */
    @Import(name="inputLabel", required=true)
      private final Output<String> inputLabel;

    public Output<String> inputLabel() {
        return this.inputLabel;
    }

    /**
     * The discriminator for derived types.
     * Expected value is '#Microsoft.Media.VideoOverlay'.
     * 
     */
    @Import(name="odataType", required=true)
      private final Output<String> odataType;

    public Output<String> odataType() {
        return this.odataType;
    }

    /**
     * The opacity of the overlay. This is a value in the range [0 - 1.0]. Default is 1.0 which mean the overlay is opaque.
     * 
     */
    @Import(name="opacity")
      private final @Nullable Output<Double> opacity;

    public Output<Double> opacity() {
        return this.opacity == null ? Codegen.empty() : this.opacity;
    }

    /**
     * The location in the input video where the overlay is applied.
     * 
     */
    @Import(name="position")
      private final @Nullable Output<RectangleArgs> position;

    public Output<RectangleArgs> position() {
        return this.position == null ? Codegen.empty() : this.position;
    }

    /**
     * The start position, with reference to the input video, at which the overlay starts. The value should be in ISO 8601 format. For example, PT05S to start the overlay at 5 seconds into the input video. If not specified the overlay starts from the beginning of the input video.
     * 
     */
    @Import(name="start")
      private final @Nullable Output<String> start;

    public Output<String> start() {
        return this.start == null ? Codegen.empty() : this.start;
    }

    public VideoOverlayArgs(
        @Nullable Output<Double> audioGainLevel,
        @Nullable Output<RectangleArgs> cropRectangle,
        @Nullable Output<String> end,
        @Nullable Output<String> fadeInDuration,
        @Nullable Output<String> fadeOutDuration,
        Output<String> inputLabel,
        Output<String> odataType,
        @Nullable Output<Double> opacity,
        @Nullable Output<RectangleArgs> position,
        @Nullable Output<String> start) {
        this.audioGainLevel = audioGainLevel;
        this.cropRectangle = cropRectangle;
        this.end = end;
        this.fadeInDuration = fadeInDuration;
        this.fadeOutDuration = fadeOutDuration;
        this.inputLabel = Objects.requireNonNull(inputLabel, "expected parameter 'inputLabel' to be non-null");
        this.odataType = Objects.requireNonNull(odataType, "expected parameter 'odataType' to be non-null");
        this.opacity = opacity;
        this.position = position;
        this.start = start;
    }

    private VideoOverlayArgs() {
        this.audioGainLevel = Codegen.empty();
        this.cropRectangle = Codegen.empty();
        this.end = Codegen.empty();
        this.fadeInDuration = Codegen.empty();
        this.fadeOutDuration = Codegen.empty();
        this.inputLabel = Codegen.empty();
        this.odataType = Codegen.empty();
        this.opacity = Codegen.empty();
        this.position = Codegen.empty();
        this.start = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VideoOverlayArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Double> audioGainLevel;
        private @Nullable Output<RectangleArgs> cropRectangle;
        private @Nullable Output<String> end;
        private @Nullable Output<String> fadeInDuration;
        private @Nullable Output<String> fadeOutDuration;
        private Output<String> inputLabel;
        private Output<String> odataType;
        private @Nullable Output<Double> opacity;
        private @Nullable Output<RectangleArgs> position;
        private @Nullable Output<String> start;

        public Builder() {
    	      // Empty
        }

        public Builder(VideoOverlayArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.audioGainLevel = defaults.audioGainLevel;
    	      this.cropRectangle = defaults.cropRectangle;
    	      this.end = defaults.end;
    	      this.fadeInDuration = defaults.fadeInDuration;
    	      this.fadeOutDuration = defaults.fadeOutDuration;
    	      this.inputLabel = defaults.inputLabel;
    	      this.odataType = defaults.odataType;
    	      this.opacity = defaults.opacity;
    	      this.position = defaults.position;
    	      this.start = defaults.start;
        }

        public Builder audioGainLevel(@Nullable Output<Double> audioGainLevel) {
            this.audioGainLevel = audioGainLevel;
            return this;
        }
        public Builder audioGainLevel(@Nullable Double audioGainLevel) {
            this.audioGainLevel = Codegen.ofNullable(audioGainLevel);
            return this;
        }
        public Builder cropRectangle(@Nullable Output<RectangleArgs> cropRectangle) {
            this.cropRectangle = cropRectangle;
            return this;
        }
        public Builder cropRectangle(@Nullable RectangleArgs cropRectangle) {
            this.cropRectangle = Codegen.ofNullable(cropRectangle);
            return this;
        }
        public Builder end(@Nullable Output<String> end) {
            this.end = end;
            return this;
        }
        public Builder end(@Nullable String end) {
            this.end = Codegen.ofNullable(end);
            return this;
        }
        public Builder fadeInDuration(@Nullable Output<String> fadeInDuration) {
            this.fadeInDuration = fadeInDuration;
            return this;
        }
        public Builder fadeInDuration(@Nullable String fadeInDuration) {
            this.fadeInDuration = Codegen.ofNullable(fadeInDuration);
            return this;
        }
        public Builder fadeOutDuration(@Nullable Output<String> fadeOutDuration) {
            this.fadeOutDuration = fadeOutDuration;
            return this;
        }
        public Builder fadeOutDuration(@Nullable String fadeOutDuration) {
            this.fadeOutDuration = Codegen.ofNullable(fadeOutDuration);
            return this;
        }
        public Builder inputLabel(Output<String> inputLabel) {
            this.inputLabel = Objects.requireNonNull(inputLabel);
            return this;
        }
        public Builder inputLabel(String inputLabel) {
            this.inputLabel = Output.of(Objects.requireNonNull(inputLabel));
            return this;
        }
        public Builder odataType(Output<String> odataType) {
            this.odataType = Objects.requireNonNull(odataType);
            return this;
        }
        public Builder odataType(String odataType) {
            this.odataType = Output.of(Objects.requireNonNull(odataType));
            return this;
        }
        public Builder opacity(@Nullable Output<Double> opacity) {
            this.opacity = opacity;
            return this;
        }
        public Builder opacity(@Nullable Double opacity) {
            this.opacity = Codegen.ofNullable(opacity);
            return this;
        }
        public Builder position(@Nullable Output<RectangleArgs> position) {
            this.position = position;
            return this;
        }
        public Builder position(@Nullable RectangleArgs position) {
            this.position = Codegen.ofNullable(position);
            return this;
        }
        public Builder start(@Nullable Output<String> start) {
            this.start = start;
            return this;
        }
        public Builder start(@Nullable String start) {
            this.start = Codegen.ofNullable(start);
            return this;
        }        public VideoOverlayArgs build() {
            return new VideoOverlayArgs(audioGainLevel, cropRectangle, end, fadeInDuration, fadeOutDuration, inputLabel, odataType, opacity, position, start);
        }
    }
}
