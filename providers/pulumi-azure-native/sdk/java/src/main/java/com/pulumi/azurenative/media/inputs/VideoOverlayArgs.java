// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.media.inputs;

import com.pulumi.azurenative.media.inputs.RectangleArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Describes the properties of a video overlay.
 * 
 */
public final class VideoOverlayArgs extends com.pulumi.resources.ResourceArgs {

    public static final VideoOverlayArgs Empty = new VideoOverlayArgs();

    /**
     * The gain level of audio in the overlay. The value should be in the range [0, 1.0]. The default is 1.0.
     * 
     */
    @Import(name="audioGainLevel")
    private @Nullable Output<Double> audioGainLevel;

    public Optional<Output<Double>> audioGainLevel() {
        return Optional.ofNullable(this.audioGainLevel);
    }

    /**
     * An optional rectangular window used to crop the overlay image or video.
     * 
     */
    @Import(name="cropRectangle")
    private @Nullable Output<RectangleArgs> cropRectangle;

    public Optional<Output<RectangleArgs>> cropRectangle() {
        return Optional.ofNullable(this.cropRectangle);
    }

    /**
     * The end position, with reference to the input video, at which the overlay ends. The value should be in ISO 8601 format. For example, PT30S to end the overlay at 30 seconds into the input video. If not specified or the value is greater than the input video duration, the overlay will be applied until the end of the input video if the overlay media duration is greater than the input video duration, else the overlay will last as long as the overlay media duration.
     * 
     */
    @Import(name="end")
    private @Nullable Output<String> end;

    public Optional<Output<String>> end() {
        return Optional.ofNullable(this.end);
    }

    /**
     * The duration over which the overlay fades in onto the input video. The value should be in ISO 8601 duration format. If not specified the default behavior is to have no fade in (same as PT0S).
     * 
     */
    @Import(name="fadeInDuration")
    private @Nullable Output<String> fadeInDuration;

    public Optional<Output<String>> fadeInDuration() {
        return Optional.ofNullable(this.fadeInDuration);
    }

    /**
     * The duration over which the overlay fades out of the input video. The value should be in ISO 8601 duration format. If not specified the default behavior is to have no fade out (same as PT0S).
     * 
     */
    @Import(name="fadeOutDuration")
    private @Nullable Output<String> fadeOutDuration;

    public Optional<Output<String>> fadeOutDuration() {
        return Optional.ofNullable(this.fadeOutDuration);
    }

    /**
     * The label of the job input which is to be used as an overlay. The Input must specify exactly one file. You can specify an image file in JPG, PNG, GIF or BMP format, or an audio file (such as a WAV, MP3, WMA or M4A file), or a video file. See https://aka.ms/mesformats for the complete list of supported audio and video file formats.
     * 
     */
    @Import(name="inputLabel", required=true)
    private Output<String> inputLabel;

    public Output<String> inputLabel() {
        return this.inputLabel;
    }

    /**
     * The discriminator for derived types.
     * Expected value is &#39;#Microsoft.Media.VideoOverlay&#39;.
     * 
     */
    @Import(name="odataType", required=true)
    private Output<String> odataType;

    public Output<String> odataType() {
        return this.odataType;
    }

    /**
     * The opacity of the overlay. This is a value in the range [0 - 1.0]. Default is 1.0 which mean the overlay is opaque.
     * 
     */
    @Import(name="opacity")
    private @Nullable Output<Double> opacity;

    public Optional<Output<Double>> opacity() {
        return Optional.ofNullable(this.opacity);
    }

    /**
     * The location in the input video where the overlay is applied.
     * 
     */
    @Import(name="position")
    private @Nullable Output<RectangleArgs> position;

    public Optional<Output<RectangleArgs>> position() {
        return Optional.ofNullable(this.position);
    }

    /**
     * The start position, with reference to the input video, at which the overlay starts. The value should be in ISO 8601 format. For example, PT05S to start the overlay at 5 seconds into the input video. If not specified the overlay starts from the beginning of the input video.
     * 
     */
    @Import(name="start")
    private @Nullable Output<String> start;

    public Optional<Output<String>> start() {
        return Optional.ofNullable(this.start);
    }

    private VideoOverlayArgs() {}

    private VideoOverlayArgs(VideoOverlayArgs $) {
        this.audioGainLevel = $.audioGainLevel;
        this.cropRectangle = $.cropRectangle;
        this.end = $.end;
        this.fadeInDuration = $.fadeInDuration;
        this.fadeOutDuration = $.fadeOutDuration;
        this.inputLabel = $.inputLabel;
        this.odataType = $.odataType;
        this.opacity = $.opacity;
        this.position = $.position;
        this.start = $.start;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VideoOverlayArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VideoOverlayArgs $;

        public Builder() {
            $ = new VideoOverlayArgs();
        }

        public Builder(VideoOverlayArgs defaults) {
            $ = new VideoOverlayArgs(Objects.requireNonNull(defaults));
        }

        public Builder audioGainLevel(@Nullable Output<Double> audioGainLevel) {
            $.audioGainLevel = audioGainLevel;
            return this;
        }

        public Builder audioGainLevel(Double audioGainLevel) {
            return audioGainLevel(Output.of(audioGainLevel));
        }

        public Builder cropRectangle(@Nullable Output<RectangleArgs> cropRectangle) {
            $.cropRectangle = cropRectangle;
            return this;
        }

        public Builder cropRectangle(RectangleArgs cropRectangle) {
            return cropRectangle(Output.of(cropRectangle));
        }

        public Builder end(@Nullable Output<String> end) {
            $.end = end;
            return this;
        }

        public Builder end(String end) {
            return end(Output.of(end));
        }

        public Builder fadeInDuration(@Nullable Output<String> fadeInDuration) {
            $.fadeInDuration = fadeInDuration;
            return this;
        }

        public Builder fadeInDuration(String fadeInDuration) {
            return fadeInDuration(Output.of(fadeInDuration));
        }

        public Builder fadeOutDuration(@Nullable Output<String> fadeOutDuration) {
            $.fadeOutDuration = fadeOutDuration;
            return this;
        }

        public Builder fadeOutDuration(String fadeOutDuration) {
            return fadeOutDuration(Output.of(fadeOutDuration));
        }

        public Builder inputLabel(Output<String> inputLabel) {
            $.inputLabel = inputLabel;
            return this;
        }

        public Builder inputLabel(String inputLabel) {
            return inputLabel(Output.of(inputLabel));
        }

        public Builder odataType(Output<String> odataType) {
            $.odataType = odataType;
            return this;
        }

        public Builder odataType(String odataType) {
            return odataType(Output.of(odataType));
        }

        public Builder opacity(@Nullable Output<Double> opacity) {
            $.opacity = opacity;
            return this;
        }

        public Builder opacity(Double opacity) {
            return opacity(Output.of(opacity));
        }

        public Builder position(@Nullable Output<RectangleArgs> position) {
            $.position = position;
            return this;
        }

        public Builder position(RectangleArgs position) {
            return position(Output.of(position));
        }

        public Builder start(@Nullable Output<String> start) {
            $.start = start;
            return this;
        }

        public Builder start(String start) {
            return start(Output.of(start));
        }

        public VideoOverlayArgs build() {
            $.inputLabel = Objects.requireNonNull($.inputLabel, "expected parameter 'inputLabel' to be non-null");
            $.odataType = Codegen.stringProp("odataType").output().arg($.odataType).require();
            return $;
        }
    }

}
