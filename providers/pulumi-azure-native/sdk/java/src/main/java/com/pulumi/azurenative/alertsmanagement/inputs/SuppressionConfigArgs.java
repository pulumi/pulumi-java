// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.alertsmanagement.inputs;

import com.pulumi.azurenative.alertsmanagement.enums.SuppressionType;
import com.pulumi.azurenative.alertsmanagement.inputs.SuppressionScheduleArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Suppression logic for a given action rule
 * 
 */
public final class SuppressionConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final SuppressionConfigArgs Empty = new SuppressionConfigArgs();

    /**
     * Specifies when the suppression should be applied
     * 
     */
    @Import(name="recurrenceType", required=true)
    private Output<Either<String,SuppressionType>> recurrenceType;

    /**
     * @return Specifies when the suppression should be applied
     * 
     */
    public Output<Either<String,SuppressionType>> recurrenceType() {
        return this.recurrenceType;
    }

    /**
     * suppression schedule configuration
     * 
     */
    @Import(name="schedule")
    private @Nullable Output<SuppressionScheduleArgs> schedule;

    /**
     * @return suppression schedule configuration
     * 
     */
    public Optional<Output<SuppressionScheduleArgs>> schedule() {
        return Optional.ofNullable(this.schedule);
    }

    private SuppressionConfigArgs() {}

    private SuppressionConfigArgs(SuppressionConfigArgs $) {
        this.recurrenceType = $.recurrenceType;
        this.schedule = $.schedule;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SuppressionConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SuppressionConfigArgs $;

        public Builder() {
            $ = new SuppressionConfigArgs();
        }

        public Builder(SuppressionConfigArgs defaults) {
            $ = new SuppressionConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param recurrenceType Specifies when the suppression should be applied
         * 
         * @return builder
         * 
         */
        public Builder recurrenceType(Output<Either<String,SuppressionType>> recurrenceType) {
            $.recurrenceType = recurrenceType;
            return this;
        }

        /**
         * @param recurrenceType Specifies when the suppression should be applied
         * 
         * @return builder
         * 
         */
        public Builder recurrenceType(Either<String,SuppressionType> recurrenceType) {
            return recurrenceType(Output.of(recurrenceType));
        }

        /**
         * @param recurrenceType Specifies when the suppression should be applied
         * 
         * @return builder
         * 
         */
        public Builder recurrenceType(String recurrenceType) {
            return recurrenceType(Either.ofLeft(recurrenceType));
        }

        /**
         * @param recurrenceType Specifies when the suppression should be applied
         * 
         * @return builder
         * 
         */
        public Builder recurrenceType(SuppressionType recurrenceType) {
            return recurrenceType(Either.ofRight(recurrenceType));
        }

        /**
         * @param schedule suppression schedule configuration
         * 
         * @return builder
         * 
         */
        public Builder schedule(@Nullable Output<SuppressionScheduleArgs> schedule) {
            $.schedule = schedule;
            return this;
        }

        /**
         * @param schedule suppression schedule configuration
         * 
         * @return builder
         * 
         */
        public Builder schedule(SuppressionScheduleArgs schedule) {
            return schedule(Output.of(schedule));
        }

        public SuppressionConfigArgs build() {
            $.recurrenceType = Objects.requireNonNull($.recurrenceType, "expected parameter 'recurrenceType' to be non-null");
            return $;
        }
    }

}
