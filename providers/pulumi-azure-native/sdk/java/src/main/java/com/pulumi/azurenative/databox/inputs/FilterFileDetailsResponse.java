// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.databox.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * Details of the filter files to be used for data transfer.
 * 
 */
public final class FilterFileDetailsResponse extends com.pulumi.resources.InvokeArgs {

    public static final FilterFileDetailsResponse Empty = new FilterFileDetailsResponse();

    /**
     * Path of the file that contains the details of all items to transfer.
     * 
     */
    @Import(name="filterFilePath", required=true)
    private String filterFilePath;

    /**
     * @return Path of the file that contains the details of all items to transfer.
     * 
     */
    public String filterFilePath() {
        return this.filterFilePath;
    }

    /**
     * Type of the filter file.
     * 
     */
    @Import(name="filterFileType", required=true)
    private String filterFileType;

    /**
     * @return Type of the filter file.
     * 
     */
    public String filterFileType() {
        return this.filterFileType;
    }

    private FilterFileDetailsResponse() {}

    private FilterFileDetailsResponse(FilterFileDetailsResponse $) {
        this.filterFilePath = $.filterFilePath;
        this.filterFileType = $.filterFileType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FilterFileDetailsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FilterFileDetailsResponse $;

        public Builder() {
            $ = new FilterFileDetailsResponse();
        }

        public Builder(FilterFileDetailsResponse defaults) {
            $ = new FilterFileDetailsResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param filterFilePath Path of the file that contains the details of all items to transfer.
         * 
         * @return builder
         * 
         */
        public Builder filterFilePath(String filterFilePath) {
            $.filterFilePath = filterFilePath;
            return this;
        }

        /**
         * @param filterFileType Type of the filter file.
         * 
         * @return builder
         * 
         */
        public Builder filterFileType(String filterFileType) {
            $.filterFileType = filterFileType;
            return this;
        }

        public FilterFileDetailsResponse build() {
            $.filterFilePath = Objects.requireNonNull($.filterFilePath, "expected parameter 'filterFilePath' to be non-null");
            $.filterFileType = Objects.requireNonNull($.filterFileType, "expected parameter 'filterFileType' to be non-null");
            return $;
        }
    }

}
