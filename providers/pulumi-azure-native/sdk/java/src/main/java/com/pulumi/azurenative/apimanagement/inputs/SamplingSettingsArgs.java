// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.apimanagement.inputs;

import com.pulumi.azurenative.apimanagement.enums.SamplingType;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Sampling settings for Diagnostic.
 * 
 */
public final class SamplingSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final SamplingSettingsArgs Empty = new SamplingSettingsArgs();

    /**
     * Rate of sampling for fixed-rate sampling.
     * 
     */
    @Import(name="percentage")
    private @Nullable Output<Double> percentage;

    /**
     * @return Rate of sampling for fixed-rate sampling.
     * 
     */
    public Optional<Output<Double>> percentage() {
        return Optional.ofNullable(this.percentage);
    }

    /**
     * Sampling type.
     * 
     */
    @Import(name="samplingType")
    private @Nullable Output<Either<String,SamplingType>> samplingType;

    /**
     * @return Sampling type.
     * 
     */
    public Optional<Output<Either<String,SamplingType>>> samplingType() {
        return Optional.ofNullable(this.samplingType);
    }

    private SamplingSettingsArgs() {}

    private SamplingSettingsArgs(SamplingSettingsArgs $) {
        this.percentage = $.percentage;
        this.samplingType = $.samplingType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SamplingSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SamplingSettingsArgs $;

        public Builder() {
            $ = new SamplingSettingsArgs();
        }

        public Builder(SamplingSettingsArgs defaults) {
            $ = new SamplingSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param percentage Rate of sampling for fixed-rate sampling.
         * 
         * @return builder
         * 
         */
        public Builder percentage(@Nullable Output<Double> percentage) {
            $.percentage = percentage;
            return this;
        }

        /**
         * @param percentage Rate of sampling for fixed-rate sampling.
         * 
         * @return builder
         * 
         */
        public Builder percentage(Double percentage) {
            return percentage(Output.of(percentage));
        }

        /**
         * @param samplingType Sampling type.
         * 
         * @return builder
         * 
         */
        public Builder samplingType(@Nullable Output<Either<String,SamplingType>> samplingType) {
            $.samplingType = samplingType;
            return this;
        }

        /**
         * @param samplingType Sampling type.
         * 
         * @return builder
         * 
         */
        public Builder samplingType(Either<String,SamplingType> samplingType) {
            return samplingType(Output.of(samplingType));
        }

        /**
         * @param samplingType Sampling type.
         * 
         * @return builder
         * 
         */
        public Builder samplingType(String samplingType) {
            return samplingType(Either.ofLeft(samplingType));
        }

        /**
         * @param samplingType Sampling type.
         * 
         * @return builder
         * 
         */
        public Builder samplingType(SamplingType samplingType) {
            return samplingType(Either.ofRight(samplingType));
        }

        public SamplingSettingsArgs build() {
            return $;
        }
    }

}
