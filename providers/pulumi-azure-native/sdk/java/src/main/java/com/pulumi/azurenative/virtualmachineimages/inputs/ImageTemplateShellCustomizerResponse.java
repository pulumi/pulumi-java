// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.virtualmachineimages.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Runs a shell script during the customization phase (Linux). Corresponds to Packer shell provisioner. Exactly one of &#39;scriptUri&#39; or &#39;inline&#39; can be specified.
 * 
 */
public final class ImageTemplateShellCustomizerResponse extends com.pulumi.resources.InvokeArgs {

    public static final ImageTemplateShellCustomizerResponse Empty = new ImageTemplateShellCustomizerResponse();

    /**
     * Array of shell commands to execute
     * 
     */
    @Import(name="inline")
    private @Nullable List<String> inline;

    public Optional<List<String>> inline() {
        return Optional.ofNullable(this.inline);
    }

    /**
     * Friendly Name to provide context on what this customization step does
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * URI of the shell script to be run for customizing. It can be a github link, SAS URI for Azure Storage, etc
     * 
     */
    @Import(name="scriptUri")
    private @Nullable String scriptUri;

    public Optional<String> scriptUri() {
        return Optional.ofNullable(this.scriptUri);
    }

    /**
     * SHA256 checksum of the shell script provided in the scriptUri field
     * 
     */
    @Import(name="sha256Checksum")
    private @Nullable String sha256Checksum;

    public Optional<String> sha256Checksum() {
        return Optional.ofNullable(this.sha256Checksum);
    }

    /**
     * The type of customization tool you want to use on the Image. For example, &#34;Shell&#34; can be shell customizer
     * Expected value is &#39;Shell&#39;.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    public String type() {
        return this.type;
    }

    private ImageTemplateShellCustomizerResponse() {}

    private ImageTemplateShellCustomizerResponse(ImageTemplateShellCustomizerResponse $) {
        this.inline = $.inline;
        this.name = $.name;
        this.scriptUri = $.scriptUri;
        this.sha256Checksum = $.sha256Checksum;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ImageTemplateShellCustomizerResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ImageTemplateShellCustomizerResponse $;

        public Builder() {
            $ = new ImageTemplateShellCustomizerResponse();
        }

        public Builder(ImageTemplateShellCustomizerResponse defaults) {
            $ = new ImageTemplateShellCustomizerResponse(Objects.requireNonNull(defaults));
        }

        public Builder inline(@Nullable List<String> inline) {
            $.inline = inline;
            return this;
        }

        public Builder inline(String... inline) {
            return inline(List.of(inline));
        }

        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        public Builder scriptUri(@Nullable String scriptUri) {
            $.scriptUri = scriptUri;
            return this;
        }

        public Builder sha256Checksum(@Nullable String sha256Checksum) {
            $.sha256Checksum = sha256Checksum;
            return this;
        }

        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public ImageTemplateShellCustomizerResponse build() {
            $.sha256Checksum = Codegen.stringProp("sha256Checksum").arg($.sha256Checksum).def("").getNullable();
            $.type = Codegen.stringProp("type").arg($.type).require();
            return $;
        }
    }

}
