// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.devops.inputs;

import com.pulumi.azurenative.devops.inputs.AuthorizationResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Repository containing the source code for a pipeline.
 * 
 */
public final class CodeRepositoryResponse extends com.pulumi.resources.InvokeArgs {

    public static final CodeRepositoryResponse Empty = new CodeRepositoryResponse();

    /**
     * Authorization info to access the code repository.
     * 
     */
    @Import(name="authorization")
    private @Nullable AuthorizationResponse authorization;

    /**
     * @return Authorization info to access the code repository.
     * 
     */
    public Optional<AuthorizationResponse> authorization() {
        return Optional.ofNullable(this.authorization);
    }

    /**
     * Default branch used to configure Continuous Integration (CI) in the pipeline.
     * 
     */
    @Import(name="defaultBranch", required=true)
    private String defaultBranch;

    /**
     * @return Default branch used to configure Continuous Integration (CI) in the pipeline.
     * 
     */
    public String defaultBranch() {
        return this.defaultBranch;
    }

    /**
     * Unique immutable identifier of the code repository.
     * 
     */
    @Import(name="id", required=true)
    private String id;

    /**
     * @return Unique immutable identifier of the code repository.
     * 
     */
    public String id() {
        return this.id;
    }

    /**
     * Repository-specific properties.
     * 
     */
    @Import(name="properties")
    private @Nullable Map<String,String> properties;

    /**
     * @return Repository-specific properties.
     * 
     */
    public Optional<Map<String,String>> properties() {
        return Optional.ofNullable(this.properties);
    }

    /**
     * Type of code repository.
     * 
     */
    @Import(name="repositoryType", required=true)
    private String repositoryType;

    /**
     * @return Type of code repository.
     * 
     */
    public String repositoryType() {
        return this.repositoryType;
    }

    private CodeRepositoryResponse() {}

    private CodeRepositoryResponse(CodeRepositoryResponse $) {
        this.authorization = $.authorization;
        this.defaultBranch = $.defaultBranch;
        this.id = $.id;
        this.properties = $.properties;
        this.repositoryType = $.repositoryType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CodeRepositoryResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CodeRepositoryResponse $;

        public Builder() {
            $ = new CodeRepositoryResponse();
        }

        public Builder(CodeRepositoryResponse defaults) {
            $ = new CodeRepositoryResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param authorization Authorization info to access the code repository.
         * 
         * @return builder
         * 
         */
        public Builder authorization(@Nullable AuthorizationResponse authorization) {
            $.authorization = authorization;
            return this;
        }

        /**
         * @param defaultBranch Default branch used to configure Continuous Integration (CI) in the pipeline.
         * 
         * @return builder
         * 
         */
        public Builder defaultBranch(String defaultBranch) {
            $.defaultBranch = defaultBranch;
            return this;
        }

        /**
         * @param id Unique immutable identifier of the code repository.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            $.id = id;
            return this;
        }

        /**
         * @param properties Repository-specific properties.
         * 
         * @return builder
         * 
         */
        public Builder properties(@Nullable Map<String,String> properties) {
            $.properties = properties;
            return this;
        }

        /**
         * @param repositoryType Type of code repository.
         * 
         * @return builder
         * 
         */
        public Builder repositoryType(String repositoryType) {
            $.repositoryType = repositoryType;
            return this;
        }

        public CodeRepositoryResponse build() {
            $.defaultBranch = Objects.requireNonNull($.defaultBranch, "expected parameter 'defaultBranch' to be non-null");
            $.id = Objects.requireNonNull($.id, "expected parameter 'id' to be non-null");
            $.repositoryType = Objects.requireNonNull($.repositoryType, "expected parameter 'repositoryType' to be non-null");
            return $;
        }
    }

}
