// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.security.inputs;

import com.pulumi.azurenative.security.inputs.InformationProtectionAwsOfferingInformationProtectionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The information protection for AWS offering configurations
 * 
 */
public final class InformationProtectionAwsOfferingArgs extends com.pulumi.resources.ResourceArgs {

    public static final InformationProtectionAwsOfferingArgs Empty = new InformationProtectionAwsOfferingArgs();

    /**
     * The native cloud connection configuration
     * 
     */
    @Import(name="informationProtection")
    private @Nullable Output<InformationProtectionAwsOfferingInformationProtectionArgs> informationProtection;

    /**
     * @return The native cloud connection configuration
     * 
     */
    public Optional<Output<InformationProtectionAwsOfferingInformationProtectionArgs>> informationProtection() {
        return Optional.ofNullable(this.informationProtection);
    }

    /**
     * The type of the security offering.
     * Expected value is &#39;InformationProtectionAws&#39;.
     * 
     */
    @Import(name="offeringType", required=true)
    private Output<String> offeringType;

    /**
     * @return The type of the security offering.
     * Expected value is &#39;InformationProtectionAws&#39;.
     * 
     */
    public Output<String> offeringType() {
        return this.offeringType;
    }

    private InformationProtectionAwsOfferingArgs() {}

    private InformationProtectionAwsOfferingArgs(InformationProtectionAwsOfferingArgs $) {
        this.informationProtection = $.informationProtection;
        this.offeringType = $.offeringType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InformationProtectionAwsOfferingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InformationProtectionAwsOfferingArgs $;

        public Builder() {
            $ = new InformationProtectionAwsOfferingArgs();
        }

        public Builder(InformationProtectionAwsOfferingArgs defaults) {
            $ = new InformationProtectionAwsOfferingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param informationProtection The native cloud connection configuration
         * 
         * @return builder
         * 
         */
        public Builder informationProtection(@Nullable Output<InformationProtectionAwsOfferingInformationProtectionArgs> informationProtection) {
            $.informationProtection = informationProtection;
            return this;
        }

        /**
         * @param informationProtection The native cloud connection configuration
         * 
         * @return builder
         * 
         */
        public Builder informationProtection(InformationProtectionAwsOfferingInformationProtectionArgs informationProtection) {
            return informationProtection(Output.of(informationProtection));
        }

        /**
         * @param offeringType The type of the security offering.
         * Expected value is &#39;InformationProtectionAws&#39;.
         * 
         * @return builder
         * 
         */
        public Builder offeringType(Output<String> offeringType) {
            $.offeringType = offeringType;
            return this;
        }

        /**
         * @param offeringType The type of the security offering.
         * Expected value is &#39;InformationProtectionAws&#39;.
         * 
         * @return builder
         * 
         */
        public Builder offeringType(String offeringType) {
            return offeringType(Output.of(offeringType));
        }

        public InformationProtectionAwsOfferingArgs build() {
            $.offeringType = Codegen.stringProp("offeringType").output().arg($.offeringType).require();
            return $;
        }
    }

}
