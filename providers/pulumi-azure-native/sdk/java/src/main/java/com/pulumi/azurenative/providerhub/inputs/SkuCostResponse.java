// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.providerhub.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SkuCostResponse extends com.pulumi.resources.InvokeArgs {

    public static final SkuCostResponse Empty = new SkuCostResponse();

    @Import(name="extendedUnit")
    private @Nullable String extendedUnit;

    public Optional<String> extendedUnit() {
        return Optional.ofNullable(this.extendedUnit);
    }

    @Import(name="meterId", required=true)
    private String meterId;

    public String meterId() {
        return this.meterId;
    }

    @Import(name="quantity")
    private @Nullable Integer quantity;

    public Optional<Integer> quantity() {
        return Optional.ofNullable(this.quantity);
    }

    private SkuCostResponse() {}

    private SkuCostResponse(SkuCostResponse $) {
        this.extendedUnit = $.extendedUnit;
        this.meterId = $.meterId;
        this.quantity = $.quantity;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SkuCostResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SkuCostResponse $;

        public Builder() {
            $ = new SkuCostResponse();
        }

        public Builder(SkuCostResponse defaults) {
            $ = new SkuCostResponse(Objects.requireNonNull(defaults));
        }

        public Builder extendedUnit(@Nullable String extendedUnit) {
            $.extendedUnit = extendedUnit;
            return this;
        }

        public Builder meterId(String meterId) {
            $.meterId = meterId;
            return this;
        }

        public Builder quantity(@Nullable Integer quantity) {
            $.quantity = quantity;
            return this;
        }

        public SkuCostResponse build() {
            $.meterId = Objects.requireNonNull($.meterId, "expected parameter 'meterId' to be non-null");
            return $;
        }
    }

}
