// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.devices.inputs;

import com.pulumi.azurenative.devices.enums.AccessRights;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The properties of an IoT hub shared access policy.
 * 
 */
public final class SharedAccessSignatureAuthorizationRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final SharedAccessSignatureAuthorizationRuleArgs Empty = new SharedAccessSignatureAuthorizationRuleArgs();

    /**
     * The name of the shared access policy.
     * 
     */
    @Import(name="keyName", required=true)
    private Output<String> keyName;

    /**
     * @return The name of the shared access policy.
     * 
     */
    public Output<String> keyName() {
        return this.keyName;
    }

    /**
     * The primary key.
     * 
     */
    @Import(name="primaryKey")
    private @Nullable Output<String> primaryKey;

    /**
     * @return The primary key.
     * 
     */
    public Optional<Output<String>> primaryKey() {
        return Optional.ofNullable(this.primaryKey);
    }

    /**
     * The permissions assigned to the shared access policy.
     * 
     */
    @Import(name="rights", required=true)
    private Output<AccessRights> rights;

    /**
     * @return The permissions assigned to the shared access policy.
     * 
     */
    public Output<AccessRights> rights() {
        return this.rights;
    }

    /**
     * The secondary key.
     * 
     */
    @Import(name="secondaryKey")
    private @Nullable Output<String> secondaryKey;

    /**
     * @return The secondary key.
     * 
     */
    public Optional<Output<String>> secondaryKey() {
        return Optional.ofNullable(this.secondaryKey);
    }

    private SharedAccessSignatureAuthorizationRuleArgs() {}

    private SharedAccessSignatureAuthorizationRuleArgs(SharedAccessSignatureAuthorizationRuleArgs $) {
        this.keyName = $.keyName;
        this.primaryKey = $.primaryKey;
        this.rights = $.rights;
        this.secondaryKey = $.secondaryKey;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SharedAccessSignatureAuthorizationRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SharedAccessSignatureAuthorizationRuleArgs $;

        public Builder() {
            $ = new SharedAccessSignatureAuthorizationRuleArgs();
        }

        public Builder(SharedAccessSignatureAuthorizationRuleArgs defaults) {
            $ = new SharedAccessSignatureAuthorizationRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param keyName The name of the shared access policy.
         * 
         * @return builder
         * 
         */
        public Builder keyName(Output<String> keyName) {
            $.keyName = keyName;
            return this;
        }

        /**
         * @param keyName The name of the shared access policy.
         * 
         * @return builder
         * 
         */
        public Builder keyName(String keyName) {
            return keyName(Output.of(keyName));
        }

        /**
         * @param primaryKey The primary key.
         * 
         * @return builder
         * 
         */
        public Builder primaryKey(@Nullable Output<String> primaryKey) {
            $.primaryKey = primaryKey;
            return this;
        }

        /**
         * @param primaryKey The primary key.
         * 
         * @return builder
         * 
         */
        public Builder primaryKey(String primaryKey) {
            return primaryKey(Output.of(primaryKey));
        }

        /**
         * @param rights The permissions assigned to the shared access policy.
         * 
         * @return builder
         * 
         */
        public Builder rights(Output<AccessRights> rights) {
            $.rights = rights;
            return this;
        }

        /**
         * @param rights The permissions assigned to the shared access policy.
         * 
         * @return builder
         * 
         */
        public Builder rights(AccessRights rights) {
            return rights(Output.of(rights));
        }

        /**
         * @param secondaryKey The secondary key.
         * 
         * @return builder
         * 
         */
        public Builder secondaryKey(@Nullable Output<String> secondaryKey) {
            $.secondaryKey = secondaryKey;
            return this;
        }

        /**
         * @param secondaryKey The secondary key.
         * 
         * @return builder
         * 
         */
        public Builder secondaryKey(String secondaryKey) {
            return secondaryKey(Output.of(secondaryKey));
        }

        public SharedAccessSignatureAuthorizationRuleArgs build() {
            $.keyName = Objects.requireNonNull($.keyName, "expected parameter 'keyName' to be non-null");
            $.rights = Objects.requireNonNull($.rights, "expected parameter 'rights' to be non-null");
            return $;
        }
    }

}
