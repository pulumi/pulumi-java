// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.migrate.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Class representing the databases solution summary.
 * 
 */
public final class DatabasesSolutionSummaryResponse extends com.pulumi.resources.InvokeArgs {

    public static final DatabasesSolutionSummaryResponse Empty = new DatabasesSolutionSummaryResponse();

    /**
     * Gets or sets the count of database instances assessed.
     * 
     */
    @Import(name="databaseInstancesAssessedCount")
    private @Nullable Integer databaseInstancesAssessedCount;

    /**
     * @return Gets or sets the count of database instances assessed.
     * 
     */
    public Optional<Integer> databaseInstancesAssessedCount() {
        return Optional.ofNullable(this.databaseInstancesAssessedCount);
    }

    /**
     * Gets or sets the count of databases assessed.
     * 
     */
    @Import(name="databasesAssessedCount")
    private @Nullable Integer databasesAssessedCount;

    /**
     * @return Gets or sets the count of databases assessed.
     * 
     */
    public Optional<Integer> databasesAssessedCount() {
        return Optional.ofNullable(this.databasesAssessedCount);
    }

    /**
     * Gets the Instance type.
     * Expected value is &#39;Databases&#39;.
     * 
     */
    @Import(name="instanceType", required=true)
    private String instanceType;

    /**
     * @return Gets the Instance type.
     * Expected value is &#39;Databases&#39;.
     * 
     */
    public String instanceType() {
        return this.instanceType;
    }

    /**
     * Gets or sets the count of databases ready for migration.
     * 
     */
    @Import(name="migrationReadyCount")
    private @Nullable Integer migrationReadyCount;

    /**
     * @return Gets or sets the count of databases ready for migration.
     * 
     */
    public Optional<Integer> migrationReadyCount() {
        return Optional.ofNullable(this.migrationReadyCount);
    }

    private DatabasesSolutionSummaryResponse() {}

    private DatabasesSolutionSummaryResponse(DatabasesSolutionSummaryResponse $) {
        this.databaseInstancesAssessedCount = $.databaseInstancesAssessedCount;
        this.databasesAssessedCount = $.databasesAssessedCount;
        this.instanceType = $.instanceType;
        this.migrationReadyCount = $.migrationReadyCount;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatabasesSolutionSummaryResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatabasesSolutionSummaryResponse $;

        public Builder() {
            $ = new DatabasesSolutionSummaryResponse();
        }

        public Builder(DatabasesSolutionSummaryResponse defaults) {
            $ = new DatabasesSolutionSummaryResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param databaseInstancesAssessedCount Gets or sets the count of database instances assessed.
         * 
         * @return builder
         * 
         */
        public Builder databaseInstancesAssessedCount(@Nullable Integer databaseInstancesAssessedCount) {
            $.databaseInstancesAssessedCount = databaseInstancesAssessedCount;
            return this;
        }

        /**
         * @param databasesAssessedCount Gets or sets the count of databases assessed.
         * 
         * @return builder
         * 
         */
        public Builder databasesAssessedCount(@Nullable Integer databasesAssessedCount) {
            $.databasesAssessedCount = databasesAssessedCount;
            return this;
        }

        /**
         * @param instanceType Gets the Instance type.
         * Expected value is &#39;Databases&#39;.
         * 
         * @return builder
         * 
         */
        public Builder instanceType(String instanceType) {
            $.instanceType = instanceType;
            return this;
        }

        /**
         * @param migrationReadyCount Gets or sets the count of databases ready for migration.
         * 
         * @return builder
         * 
         */
        public Builder migrationReadyCount(@Nullable Integer migrationReadyCount) {
            $.migrationReadyCount = migrationReadyCount;
            return this;
        }

        public DatabasesSolutionSummaryResponse build() {
            $.instanceType = Codegen.stringProp("instanceType").arg($.instanceType).require();
            return $;
        }
    }

}
