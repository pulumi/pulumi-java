// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Define a match condition
 * 
 */
public final class RulesEngineMatchConditionResponse extends com.pulumi.resources.InvokeArgs {

    public static final RulesEngineMatchConditionResponse Empty = new RulesEngineMatchConditionResponse();

    /**
     * Describes if this is negate condition or not
     * 
     */
    @Import(name="negateCondition")
    private @Nullable Boolean negateCondition;

    public Optional<Boolean> negateCondition() {
        return Optional.ofNullable(this.negateCondition);
    }

    /**
     * Match values to match against. The operator will apply to each value in here with OR semantics. If any of them match the variable with the given operator this match condition is considered a match.
     * 
     */
    @Import(name="rulesEngineMatchValue", required=true)
    private List<String> rulesEngineMatchValue;

    public List<String> rulesEngineMatchValue() {
        return this.rulesEngineMatchValue;
    }

    /**
     * Match Variable
     * 
     */
    @Import(name="rulesEngineMatchVariable", required=true)
    private String rulesEngineMatchVariable;

    public String rulesEngineMatchVariable() {
        return this.rulesEngineMatchVariable;
    }

    /**
     * Describes operator to apply to the match condition.
     * 
     */
    @Import(name="rulesEngineOperator", required=true)
    private String rulesEngineOperator;

    public String rulesEngineOperator() {
        return this.rulesEngineOperator;
    }

    /**
     * Name of selector in RequestHeader or RequestBody to be matched
     * 
     */
    @Import(name="selector")
    private @Nullable String selector;

    public Optional<String> selector() {
        return Optional.ofNullable(this.selector);
    }

    /**
     * List of transforms
     * 
     */
    @Import(name="transforms")
    private @Nullable List<String> transforms;

    public Optional<List<String>> transforms() {
        return Optional.ofNullable(this.transforms);
    }

    private RulesEngineMatchConditionResponse() {}

    private RulesEngineMatchConditionResponse(RulesEngineMatchConditionResponse $) {
        this.negateCondition = $.negateCondition;
        this.rulesEngineMatchValue = $.rulesEngineMatchValue;
        this.rulesEngineMatchVariable = $.rulesEngineMatchVariable;
        this.rulesEngineOperator = $.rulesEngineOperator;
        this.selector = $.selector;
        this.transforms = $.transforms;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RulesEngineMatchConditionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RulesEngineMatchConditionResponse $;

        public Builder() {
            $ = new RulesEngineMatchConditionResponse();
        }

        public Builder(RulesEngineMatchConditionResponse defaults) {
            $ = new RulesEngineMatchConditionResponse(Objects.requireNonNull(defaults));
        }

        public Builder negateCondition(@Nullable Boolean negateCondition) {
            $.negateCondition = negateCondition;
            return this;
        }

        public Builder rulesEngineMatchValue(List<String> rulesEngineMatchValue) {
            $.rulesEngineMatchValue = rulesEngineMatchValue;
            return this;
        }

        public Builder rulesEngineMatchValue(String... rulesEngineMatchValue) {
            return rulesEngineMatchValue(List.of(rulesEngineMatchValue));
        }

        public Builder rulesEngineMatchVariable(String rulesEngineMatchVariable) {
            $.rulesEngineMatchVariable = rulesEngineMatchVariable;
            return this;
        }

        public Builder rulesEngineOperator(String rulesEngineOperator) {
            $.rulesEngineOperator = rulesEngineOperator;
            return this;
        }

        public Builder selector(@Nullable String selector) {
            $.selector = selector;
            return this;
        }

        public Builder transforms(@Nullable List<String> transforms) {
            $.transforms = transforms;
            return this;
        }

        public Builder transforms(String... transforms) {
            return transforms(List.of(transforms));
        }

        public RulesEngineMatchConditionResponse build() {
            $.rulesEngineMatchValue = Objects.requireNonNull($.rulesEngineMatchValue, "expected parameter 'rulesEngineMatchValue' to be non-null");
            $.rulesEngineMatchVariable = Objects.requireNonNull($.rulesEngineMatchVariable, "expected parameter 'rulesEngineMatchVariable' to be non-null");
            $.rulesEngineOperator = Objects.requireNonNull($.rulesEngineOperator, "expected parameter 'rulesEngineOperator' to be non-null");
            return $;
        }
    }

}
