// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.insights.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Specifies a metric dimension.
 * 
 */
public final class MetricDimensionArgs extends com.pulumi.resources.ResourceArgs {

    public static final MetricDimensionArgs Empty = new MetricDimensionArgs();

    /**
     * Name of the dimension.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Name of the dimension.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * the dimension operator. Only &#39;Include&#39; and &#39;Exclude&#39; are supported
     * 
     */
    @Import(name="operator", required=true)
    private Output<String> operator;

    /**
     * @return the dimension operator. Only &#39;Include&#39; and &#39;Exclude&#39; are supported
     * 
     */
    public Output<String> operator() {
        return this.operator;
    }

    /**
     * list of dimension values.
     * 
     */
    @Import(name="values", required=true)
    private Output<List<String>> values;

    /**
     * @return list of dimension values.
     * 
     */
    public Output<List<String>> values() {
        return this.values;
    }

    private MetricDimensionArgs() {}

    private MetricDimensionArgs(MetricDimensionArgs $) {
        this.name = $.name;
        this.operator = $.operator;
        this.values = $.values;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MetricDimensionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MetricDimensionArgs $;

        public Builder() {
            $ = new MetricDimensionArgs();
        }

        public Builder(MetricDimensionArgs defaults) {
            $ = new MetricDimensionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param name Name of the dimension.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the dimension.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param operator the dimension operator. Only &#39;Include&#39; and &#39;Exclude&#39; are supported
         * 
         * @return builder
         * 
         */
        public Builder operator(Output<String> operator) {
            $.operator = operator;
            return this;
        }

        /**
         * @param operator the dimension operator. Only &#39;Include&#39; and &#39;Exclude&#39; are supported
         * 
         * @return builder
         * 
         */
        public Builder operator(String operator) {
            return operator(Output.of(operator));
        }

        /**
         * @param values list of dimension values.
         * 
         * @return builder
         * 
         */
        public Builder values(Output<List<String>> values) {
            $.values = values;
            return this;
        }

        /**
         * @param values list of dimension values.
         * 
         * @return builder
         * 
         */
        public Builder values(List<String> values) {
            return values(Output.of(values));
        }

        /**
         * @param values list of dimension values.
         * 
         * @return builder
         * 
         */
        public Builder values(String... values) {
            return values(List.of(values));
        }

        public MetricDimensionArgs build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.operator = Objects.requireNonNull($.operator, "expected parameter 'operator' to be non-null");
            $.values = Objects.requireNonNull($.values, "expected parameter 'values' to be non-null");
            return $;
        }
    }

}
