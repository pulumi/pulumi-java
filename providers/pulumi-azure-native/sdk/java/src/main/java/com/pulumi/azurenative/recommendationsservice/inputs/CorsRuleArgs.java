// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.recommendationsservice.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * CORS details.
 * 
 */
public final class CorsRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final CorsRuleArgs Empty = new CorsRuleArgs();

    /**
     * The request headers that the origin domain may specify on the CORS request.
     * 
     */
    @Import(name="allowedHeaders")
    private @Nullable Output<List<String>> allowedHeaders;

    /**
     * @return The request headers that the origin domain may specify on the CORS request.
     * 
     */
    public Optional<Output<List<String>>> allowedHeaders() {
        return Optional.ofNullable(this.allowedHeaders);
    }

    /**
     * The methods (HTTP request verbs) that the origin domain may use for a CORS request.
     * 
     */
    @Import(name="allowedMethods")
    private @Nullable Output<List<String>> allowedMethods;

    /**
     * @return The methods (HTTP request verbs) that the origin domain may use for a CORS request.
     * 
     */
    public Optional<Output<List<String>>> allowedMethods() {
        return Optional.ofNullable(this.allowedMethods);
    }

    /**
     * The origin domains that are permitted to make a request against the service via CORS.
     * 
     */
    @Import(name="allowedOrigins", required=true)
    private Output<List<String>> allowedOrigins;

    /**
     * @return The origin domains that are permitted to make a request against the service via CORS.
     * 
     */
    public Output<List<String>> allowedOrigins() {
        return this.allowedOrigins;
    }

    /**
     * The response headers to expose to CORS clients.
     * 
     */
    @Import(name="exposedHeaders")
    private @Nullable Output<List<String>> exposedHeaders;

    /**
     * @return The response headers to expose to CORS clients.
     * 
     */
    public Optional<Output<List<String>>> exposedHeaders() {
        return Optional.ofNullable(this.exposedHeaders);
    }

    /**
     * The number of seconds that the client/browser should cache a preflight response.
     * 
     */
    @Import(name="maxAgeInSeconds")
    private @Nullable Output<Integer> maxAgeInSeconds;

    /**
     * @return The number of seconds that the client/browser should cache a preflight response.
     * 
     */
    public Optional<Output<Integer>> maxAgeInSeconds() {
        return Optional.ofNullable(this.maxAgeInSeconds);
    }

    private CorsRuleArgs() {}

    private CorsRuleArgs(CorsRuleArgs $) {
        this.allowedHeaders = $.allowedHeaders;
        this.allowedMethods = $.allowedMethods;
        this.allowedOrigins = $.allowedOrigins;
        this.exposedHeaders = $.exposedHeaders;
        this.maxAgeInSeconds = $.maxAgeInSeconds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CorsRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CorsRuleArgs $;

        public Builder() {
            $ = new CorsRuleArgs();
        }

        public Builder(CorsRuleArgs defaults) {
            $ = new CorsRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowedHeaders The request headers that the origin domain may specify on the CORS request.
         * 
         * @return builder
         * 
         */
        public Builder allowedHeaders(@Nullable Output<List<String>> allowedHeaders) {
            $.allowedHeaders = allowedHeaders;
            return this;
        }

        /**
         * @param allowedHeaders The request headers that the origin domain may specify on the CORS request.
         * 
         * @return builder
         * 
         */
        public Builder allowedHeaders(List<String> allowedHeaders) {
            return allowedHeaders(Output.of(allowedHeaders));
        }

        /**
         * @param allowedHeaders The request headers that the origin domain may specify on the CORS request.
         * 
         * @return builder
         * 
         */
        public Builder allowedHeaders(String... allowedHeaders) {
            return allowedHeaders(List.of(allowedHeaders));
        }

        /**
         * @param allowedMethods The methods (HTTP request verbs) that the origin domain may use for a CORS request.
         * 
         * @return builder
         * 
         */
        public Builder allowedMethods(@Nullable Output<List<String>> allowedMethods) {
            $.allowedMethods = allowedMethods;
            return this;
        }

        /**
         * @param allowedMethods The methods (HTTP request verbs) that the origin domain may use for a CORS request.
         * 
         * @return builder
         * 
         */
        public Builder allowedMethods(List<String> allowedMethods) {
            return allowedMethods(Output.of(allowedMethods));
        }

        /**
         * @param allowedMethods The methods (HTTP request verbs) that the origin domain may use for a CORS request.
         * 
         * @return builder
         * 
         */
        public Builder allowedMethods(String... allowedMethods) {
            return allowedMethods(List.of(allowedMethods));
        }

        /**
         * @param allowedOrigins The origin domains that are permitted to make a request against the service via CORS.
         * 
         * @return builder
         * 
         */
        public Builder allowedOrigins(Output<List<String>> allowedOrigins) {
            $.allowedOrigins = allowedOrigins;
            return this;
        }

        /**
         * @param allowedOrigins The origin domains that are permitted to make a request against the service via CORS.
         * 
         * @return builder
         * 
         */
        public Builder allowedOrigins(List<String> allowedOrigins) {
            return allowedOrigins(Output.of(allowedOrigins));
        }

        /**
         * @param allowedOrigins The origin domains that are permitted to make a request against the service via CORS.
         * 
         * @return builder
         * 
         */
        public Builder allowedOrigins(String... allowedOrigins) {
            return allowedOrigins(List.of(allowedOrigins));
        }

        /**
         * @param exposedHeaders The response headers to expose to CORS clients.
         * 
         * @return builder
         * 
         */
        public Builder exposedHeaders(@Nullable Output<List<String>> exposedHeaders) {
            $.exposedHeaders = exposedHeaders;
            return this;
        }

        /**
         * @param exposedHeaders The response headers to expose to CORS clients.
         * 
         * @return builder
         * 
         */
        public Builder exposedHeaders(List<String> exposedHeaders) {
            return exposedHeaders(Output.of(exposedHeaders));
        }

        /**
         * @param exposedHeaders The response headers to expose to CORS clients.
         * 
         * @return builder
         * 
         */
        public Builder exposedHeaders(String... exposedHeaders) {
            return exposedHeaders(List.of(exposedHeaders));
        }

        /**
         * @param maxAgeInSeconds The number of seconds that the client/browser should cache a preflight response.
         * 
         * @return builder
         * 
         */
        public Builder maxAgeInSeconds(@Nullable Output<Integer> maxAgeInSeconds) {
            $.maxAgeInSeconds = maxAgeInSeconds;
            return this;
        }

        /**
         * @param maxAgeInSeconds The number of seconds that the client/browser should cache a preflight response.
         * 
         * @return builder
         * 
         */
        public Builder maxAgeInSeconds(Integer maxAgeInSeconds) {
            return maxAgeInSeconds(Output.of(maxAgeInSeconds));
        }

        public CorsRuleArgs build() {
            $.allowedOrigins = Objects.requireNonNull($.allowedOrigins, "expected parameter 'allowedOrigins' to be non-null");
            return $;
        }
    }

}
