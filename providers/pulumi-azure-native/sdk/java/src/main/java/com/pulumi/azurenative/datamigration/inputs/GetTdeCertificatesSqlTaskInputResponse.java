// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datamigration.inputs;

import com.pulumi.azurenative.datamigration.inputs.FileShareResponse;
import com.pulumi.azurenative.datamigration.inputs.SelectedCertificateInputResponse;
import com.pulumi.azurenative.datamigration.inputs.SqlConnectionInfoResponse;
import com.pulumi.core.annotations.Import;
import java.util.List;
import java.util.Objects;


/**
 * Input for the task that gets TDE certificates in Base64 encoded format.
 * 
 */
public final class GetTdeCertificatesSqlTaskInputResponse extends com.pulumi.resources.InvokeArgs {

    public static final GetTdeCertificatesSqlTaskInputResponse Empty = new GetTdeCertificatesSqlTaskInputResponse();

    /**
     * Backup file share information for file share to be used for temporarily storing files.
     * 
     */
    @Import(name="backupFileShare", required=true)
    private FileShareResponse backupFileShare;

    /**
     * @return Backup file share information for file share to be used for temporarily storing files.
     * 
     */
    public FileShareResponse backupFileShare() {
        return this.backupFileShare;
    }

    /**
     * Connection information for SQL Server
     * 
     */
    @Import(name="connectionInfo", required=true)
    private SqlConnectionInfoResponse connectionInfo;

    /**
     * @return Connection information for SQL Server
     * 
     */
    public SqlConnectionInfoResponse connectionInfo() {
        return this.connectionInfo;
    }

    /**
     * List containing certificate names and corresponding password to use for encrypting the exported certificate.
     * 
     */
    @Import(name="selectedCertificates", required=true)
    private List<SelectedCertificateInputResponse> selectedCertificates;

    /**
     * @return List containing certificate names and corresponding password to use for encrypting the exported certificate.
     * 
     */
    public List<SelectedCertificateInputResponse> selectedCertificates() {
        return this.selectedCertificates;
    }

    private GetTdeCertificatesSqlTaskInputResponse() {}

    private GetTdeCertificatesSqlTaskInputResponse(GetTdeCertificatesSqlTaskInputResponse $) {
        this.backupFileShare = $.backupFileShare;
        this.connectionInfo = $.connectionInfo;
        this.selectedCertificates = $.selectedCertificates;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetTdeCertificatesSqlTaskInputResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetTdeCertificatesSqlTaskInputResponse $;

        public Builder() {
            $ = new GetTdeCertificatesSqlTaskInputResponse();
        }

        public Builder(GetTdeCertificatesSqlTaskInputResponse defaults) {
            $ = new GetTdeCertificatesSqlTaskInputResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param backupFileShare Backup file share information for file share to be used for temporarily storing files.
         * 
         * @return builder
         * 
         */
        public Builder backupFileShare(FileShareResponse backupFileShare) {
            $.backupFileShare = backupFileShare;
            return this;
        }

        /**
         * @param connectionInfo Connection information for SQL Server
         * 
         * @return builder
         * 
         */
        public Builder connectionInfo(SqlConnectionInfoResponse connectionInfo) {
            $.connectionInfo = connectionInfo;
            return this;
        }

        /**
         * @param selectedCertificates List containing certificate names and corresponding password to use for encrypting the exported certificate.
         * 
         * @return builder
         * 
         */
        public Builder selectedCertificates(List<SelectedCertificateInputResponse> selectedCertificates) {
            $.selectedCertificates = selectedCertificates;
            return this;
        }

        /**
         * @param selectedCertificates List containing certificate names and corresponding password to use for encrypting the exported certificate.
         * 
         * @return builder
         * 
         */
        public Builder selectedCertificates(SelectedCertificateInputResponse... selectedCertificates) {
            return selectedCertificates(List.of(selectedCertificates));
        }

        public GetTdeCertificatesSqlTaskInputResponse build() {
            $.backupFileShare = Objects.requireNonNull($.backupFileShare, "expected parameter 'backupFileShare' to be non-null");
            $.connectionInfo = Objects.requireNonNull($.connectionInfo, "expected parameter 'connectionInfo' to be non-null");
            $.selectedCertificates = Objects.requireNonNull($.selectedCertificates, "expected parameter 'selectedCertificates' to be non-null");
            return $;
        }
    }

}
