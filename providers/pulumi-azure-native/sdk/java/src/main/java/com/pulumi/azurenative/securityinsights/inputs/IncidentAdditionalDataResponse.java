// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.securityinsights.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Incident additional data property bag.
 * 
 */
public final class IncidentAdditionalDataResponse extends com.pulumi.resources.InvokeArgs {

    public static final IncidentAdditionalDataResponse Empty = new IncidentAdditionalDataResponse();

    /**
     * List of product names of alerts in the incident
     * 
     */
    @Import(name="alertProductNames", required=true)
    private List<String> alertProductNames;

    public List<String> alertProductNames() {
        return this.alertProductNames;
    }

    /**
     * The number of alerts in the incident
     * 
     */
    @Import(name="alertsCount", required=true)
    private Integer alertsCount;

    public Integer alertsCount() {
        return this.alertsCount;
    }

    /**
     * The number of bookmarks in the incident
     * 
     */
    @Import(name="bookmarksCount", required=true)
    private Integer bookmarksCount;

    public Integer bookmarksCount() {
        return this.bookmarksCount;
    }

    /**
     * The number of comments in the incident
     * 
     */
    @Import(name="commentsCount", required=true)
    private Integer commentsCount;

    public Integer commentsCount() {
        return this.commentsCount;
    }

    /**
     * The tactics associated with incident
     * 
     */
    @Import(name="tactics", required=true)
    private List<String> tactics;

    public List<String> tactics() {
        return this.tactics;
    }

    private IncidentAdditionalDataResponse() {}

    private IncidentAdditionalDataResponse(IncidentAdditionalDataResponse $) {
        this.alertProductNames = $.alertProductNames;
        this.alertsCount = $.alertsCount;
        this.bookmarksCount = $.bookmarksCount;
        this.commentsCount = $.commentsCount;
        this.tactics = $.tactics;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IncidentAdditionalDataResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IncidentAdditionalDataResponse $;

        public Builder() {
            $ = new IncidentAdditionalDataResponse();
        }

        public Builder(IncidentAdditionalDataResponse defaults) {
            $ = new IncidentAdditionalDataResponse(Objects.requireNonNull(defaults));
        }

        public Builder alertProductNames(List<String> alertProductNames) {
            $.alertProductNames = alertProductNames;
            return this;
        }

        public Builder alertProductNames(String... alertProductNames) {
            return alertProductNames(List.of(alertProductNames));
        }

        public Builder alertsCount(Integer alertsCount) {
            $.alertsCount = alertsCount;
            return this;
        }

        public Builder bookmarksCount(Integer bookmarksCount) {
            $.bookmarksCount = bookmarksCount;
            return this;
        }

        public Builder commentsCount(Integer commentsCount) {
            $.commentsCount = commentsCount;
            return this;
        }

        public Builder tactics(List<String> tactics) {
            $.tactics = tactics;
            return this;
        }

        public Builder tactics(String... tactics) {
            return tactics(List.of(tactics));
        }

        public IncidentAdditionalDataResponse build() {
            $.alertProductNames = Objects.requireNonNull($.alertProductNames, "expected parameter 'alertProductNames' to be non-null");
            $.alertsCount = Objects.requireNonNull($.alertsCount, "expected parameter 'alertsCount' to be non-null");
            $.bookmarksCount = Objects.requireNonNull($.bookmarksCount, "expected parameter 'bookmarksCount' to be non-null");
            $.commentsCount = Objects.requireNonNull($.commentsCount, "expected parameter 'commentsCount' to be non-null");
            $.tactics = Objects.requireNonNull($.tactics, "expected parameter 'tactics' to be non-null");
            return $;
        }
    }

}
