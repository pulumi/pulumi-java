// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.scvmm.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Defines the resource properties.
 * 
 */
public final class CheckpointArgs extends com.pulumi.resources.ResourceArgs {

    public static final CheckpointArgs Empty = new CheckpointArgs();

    /**
     * Gets ID of the checkpoint.
     * 
     */
    @Import(name="checkpointID")
    private @Nullable Output<String> checkpointID;

    /**
     * @return Gets ID of the checkpoint.
     * 
     */
    public Optional<Output<String>> checkpointID() {
        return Optional.ofNullable(this.checkpointID);
    }

    /**
     * Gets description of the checkpoint.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Gets description of the checkpoint.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Gets name of the checkpoint.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Gets name of the checkpoint.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Gets ID of parent of the checkpoint.
     * 
     */
    @Import(name="parentCheckpointID")
    private @Nullable Output<String> parentCheckpointID;

    /**
     * @return Gets ID of parent of the checkpoint.
     * 
     */
    public Optional<Output<String>> parentCheckpointID() {
        return Optional.ofNullable(this.parentCheckpointID);
    }

    private CheckpointArgs() {}

    private CheckpointArgs(CheckpointArgs $) {
        this.checkpointID = $.checkpointID;
        this.description = $.description;
        this.name = $.name;
        this.parentCheckpointID = $.parentCheckpointID;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CheckpointArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CheckpointArgs $;

        public Builder() {
            $ = new CheckpointArgs();
        }

        public Builder(CheckpointArgs defaults) {
            $ = new CheckpointArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param checkpointID Gets ID of the checkpoint.
         * 
         * @return builder
         * 
         */
        public Builder checkpointID(@Nullable Output<String> checkpointID) {
            $.checkpointID = checkpointID;
            return this;
        }

        /**
         * @param checkpointID Gets ID of the checkpoint.
         * 
         * @return builder
         * 
         */
        public Builder checkpointID(String checkpointID) {
            return checkpointID(Output.of(checkpointID));
        }

        /**
         * @param description Gets description of the checkpoint.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Gets description of the checkpoint.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param name Gets name of the checkpoint.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Gets name of the checkpoint.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param parentCheckpointID Gets ID of parent of the checkpoint.
         * 
         * @return builder
         * 
         */
        public Builder parentCheckpointID(@Nullable Output<String> parentCheckpointID) {
            $.parentCheckpointID = parentCheckpointID;
            return this;
        }

        /**
         * @param parentCheckpointID Gets ID of parent of the checkpoint.
         * 
         * @return builder
         * 
         */
        public Builder parentCheckpointID(String parentCheckpointID) {
            return parentCheckpointID(Output.of(parentCheckpointID));
        }

        public CheckpointArgs build() {
            return $;
        }
    }

}
