// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.logic.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The X12 schema reference.
 * 
 */
public final class X12SchemaReferenceArgs extends com.pulumi.resources.ResourceArgs {

    public static final X12SchemaReferenceArgs Empty = new X12SchemaReferenceArgs();

    /**
     * The message id.
     * 
     */
    @Import(name="messageId", required=true)
    private Output<String> messageId;

    /**
     * @return The message id.
     * 
     */
    public Output<String> messageId() {
        return this.messageId;
    }

    /**
     * The schema name.
     * 
     */
    @Import(name="schemaName", required=true)
    private Output<String> schemaName;

    /**
     * @return The schema name.
     * 
     */
    public Output<String> schemaName() {
        return this.schemaName;
    }

    /**
     * The schema version.
     * 
     */
    @Import(name="schemaVersion", required=true)
    private Output<String> schemaVersion;

    /**
     * @return The schema version.
     * 
     */
    public Output<String> schemaVersion() {
        return this.schemaVersion;
    }

    /**
     * The sender application id.
     * 
     */
    @Import(name="senderApplicationId")
    private @Nullable Output<String> senderApplicationId;

    /**
     * @return The sender application id.
     * 
     */
    public Optional<Output<String>> senderApplicationId() {
        return Optional.ofNullable(this.senderApplicationId);
    }

    private X12SchemaReferenceArgs() {}

    private X12SchemaReferenceArgs(X12SchemaReferenceArgs $) {
        this.messageId = $.messageId;
        this.schemaName = $.schemaName;
        this.schemaVersion = $.schemaVersion;
        this.senderApplicationId = $.senderApplicationId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(X12SchemaReferenceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private X12SchemaReferenceArgs $;

        public Builder() {
            $ = new X12SchemaReferenceArgs();
        }

        public Builder(X12SchemaReferenceArgs defaults) {
            $ = new X12SchemaReferenceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param messageId The message id.
         * 
         * @return builder
         * 
         */
        public Builder messageId(Output<String> messageId) {
            $.messageId = messageId;
            return this;
        }

        /**
         * @param messageId The message id.
         * 
         * @return builder
         * 
         */
        public Builder messageId(String messageId) {
            return messageId(Output.of(messageId));
        }

        /**
         * @param schemaName The schema name.
         * 
         * @return builder
         * 
         */
        public Builder schemaName(Output<String> schemaName) {
            $.schemaName = schemaName;
            return this;
        }

        /**
         * @param schemaName The schema name.
         * 
         * @return builder
         * 
         */
        public Builder schemaName(String schemaName) {
            return schemaName(Output.of(schemaName));
        }

        /**
         * @param schemaVersion The schema version.
         * 
         * @return builder
         * 
         */
        public Builder schemaVersion(Output<String> schemaVersion) {
            $.schemaVersion = schemaVersion;
            return this;
        }

        /**
         * @param schemaVersion The schema version.
         * 
         * @return builder
         * 
         */
        public Builder schemaVersion(String schemaVersion) {
            return schemaVersion(Output.of(schemaVersion));
        }

        /**
         * @param senderApplicationId The sender application id.
         * 
         * @return builder
         * 
         */
        public Builder senderApplicationId(@Nullable Output<String> senderApplicationId) {
            $.senderApplicationId = senderApplicationId;
            return this;
        }

        /**
         * @param senderApplicationId The sender application id.
         * 
         * @return builder
         * 
         */
        public Builder senderApplicationId(String senderApplicationId) {
            return senderApplicationId(Output.of(senderApplicationId));
        }

        public X12SchemaReferenceArgs build() {
            $.messageId = Objects.requireNonNull($.messageId, "expected parameter 'messageId' to be non-null");
            $.schemaName = Objects.requireNonNull($.schemaName, "expected parameter 'schemaName' to be non-null");
            $.schemaVersion = Objects.requireNonNull($.schemaVersion, "expected parameter 'schemaVersion' to be non-null");
            return $;
        }
    }

}
