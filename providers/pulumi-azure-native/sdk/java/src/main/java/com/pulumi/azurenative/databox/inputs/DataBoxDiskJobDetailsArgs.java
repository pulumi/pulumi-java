// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.databox.inputs;

import com.pulumi.azurenative.databox.inputs.ContactDetailsArgs;
import com.pulumi.azurenative.databox.inputs.DataExportDetailsArgs;
import com.pulumi.azurenative.databox.inputs.DataImportDetailsArgs;
import com.pulumi.azurenative.databox.inputs.KeyEncryptionKeyArgs;
import com.pulumi.azurenative.databox.inputs.PreferencesArgs;
import com.pulumi.azurenative.databox.inputs.ShippingAddressArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * DataBox Disk Job Details.
 * 
 */
public final class DataBoxDiskJobDetailsArgs extends com.pulumi.resources.ResourceArgs {

    public static final DataBoxDiskJobDetailsArgs Empty = new DataBoxDiskJobDetailsArgs();

    /**
     * Contact details for notification and shipping.
     * 
     */
    @Import(name="contactDetails", required=true)
    private Output<ContactDetailsArgs> contactDetails;

    public Output<ContactDetailsArgs> contactDetails() {
        return this.contactDetails;
    }

    /**
     * Details of the data to be exported from azure.
     * 
     */
    @Import(name="dataExportDetails")
    private @Nullable Output<List<DataExportDetailsArgs>> dataExportDetails;

    public Optional<Output<List<DataExportDetailsArgs>>> dataExportDetails() {
        return Optional.ofNullable(this.dataExportDetails);
    }

    /**
     * Details of the data to be imported into azure.
     * 
     */
    @Import(name="dataImportDetails")
    private @Nullable Output<List<DataImportDetailsArgs>> dataImportDetails;

    public Optional<Output<List<DataImportDetailsArgs>>> dataImportDetails() {
        return Optional.ofNullable(this.dataImportDetails);
    }

    /**
     * The expected size of the data, which needs to be transferred in this job, in terabytes.
     * 
     */
    @Import(name="expectedDataSizeInTeraBytes")
    private @Nullable Output<Integer> expectedDataSizeInTeraBytes;

    public Optional<Output<Integer>> expectedDataSizeInTeraBytes() {
        return Optional.ofNullable(this.expectedDataSizeInTeraBytes);
    }

    /**
     * Indicates the type of job details.
     * Expected value is &#39;DataBoxDisk&#39;.
     * 
     */
    @Import(name="jobDetailsType", required=true)
    private Output<String> jobDetailsType;

    public Output<String> jobDetailsType() {
        return this.jobDetailsType;
    }

    /**
     * Details about which key encryption type is being used.
     * 
     */
    @Import(name="keyEncryptionKey")
    private @Nullable Output<KeyEncryptionKeyArgs> keyEncryptionKey;

    public Optional<Output<KeyEncryptionKeyArgs>> keyEncryptionKey() {
        return Optional.ofNullable(this.keyEncryptionKey);
    }

    /**
     * User entered passkey for DataBox Disk job.
     * 
     */
    @Import(name="passkey")
    private @Nullable Output<String> passkey;

    public Optional<Output<String>> passkey() {
        return Optional.ofNullable(this.passkey);
    }

    /**
     * Preferences for the order.
     * 
     */
    @Import(name="preferences")
    private @Nullable Output<PreferencesArgs> preferences;

    public Optional<Output<PreferencesArgs>> preferences() {
        return Optional.ofNullable(this.preferences);
    }

    /**
     * User preference on what size disks are needed for the job. The map is from the disk size in TB to the count. Eg. {2,5} means 5 disks of 2 TB size. Key is string but will be checked against an int.
     * 
     */
    @Import(name="preferredDisks")
    private @Nullable Output<Map<String,Integer>> preferredDisks;

    public Optional<Output<Map<String,Integer>>> preferredDisks() {
        return Optional.ofNullable(this.preferredDisks);
    }

    /**
     * Shipping address of the customer.
     * 
     */
    @Import(name="shippingAddress")
    private @Nullable Output<ShippingAddressArgs> shippingAddress;

    public Optional<Output<ShippingAddressArgs>> shippingAddress() {
        return Optional.ofNullable(this.shippingAddress);
    }

    private DataBoxDiskJobDetailsArgs() {}

    private DataBoxDiskJobDetailsArgs(DataBoxDiskJobDetailsArgs $) {
        this.contactDetails = $.contactDetails;
        this.dataExportDetails = $.dataExportDetails;
        this.dataImportDetails = $.dataImportDetails;
        this.expectedDataSizeInTeraBytes = $.expectedDataSizeInTeraBytes;
        this.jobDetailsType = $.jobDetailsType;
        this.keyEncryptionKey = $.keyEncryptionKey;
        this.passkey = $.passkey;
        this.preferences = $.preferences;
        this.preferredDisks = $.preferredDisks;
        this.shippingAddress = $.shippingAddress;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataBoxDiskJobDetailsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataBoxDiskJobDetailsArgs $;

        public Builder() {
            $ = new DataBoxDiskJobDetailsArgs();
        }

        public Builder(DataBoxDiskJobDetailsArgs defaults) {
            $ = new DataBoxDiskJobDetailsArgs(Objects.requireNonNull(defaults));
        }

        public Builder contactDetails(Output<ContactDetailsArgs> contactDetails) {
            $.contactDetails = contactDetails;
            return this;
        }

        public Builder contactDetails(ContactDetailsArgs contactDetails) {
            return contactDetails(Output.of(contactDetails));
        }

        public Builder dataExportDetails(@Nullable Output<List<DataExportDetailsArgs>> dataExportDetails) {
            $.dataExportDetails = dataExportDetails;
            return this;
        }

        public Builder dataExportDetails(List<DataExportDetailsArgs> dataExportDetails) {
            return dataExportDetails(Output.of(dataExportDetails));
        }

        public Builder dataExportDetails(DataExportDetailsArgs... dataExportDetails) {
            return dataExportDetails(List.of(dataExportDetails));
        }

        public Builder dataImportDetails(@Nullable Output<List<DataImportDetailsArgs>> dataImportDetails) {
            $.dataImportDetails = dataImportDetails;
            return this;
        }

        public Builder dataImportDetails(List<DataImportDetailsArgs> dataImportDetails) {
            return dataImportDetails(Output.of(dataImportDetails));
        }

        public Builder dataImportDetails(DataImportDetailsArgs... dataImportDetails) {
            return dataImportDetails(List.of(dataImportDetails));
        }

        public Builder expectedDataSizeInTeraBytes(@Nullable Output<Integer> expectedDataSizeInTeraBytes) {
            $.expectedDataSizeInTeraBytes = expectedDataSizeInTeraBytes;
            return this;
        }

        public Builder expectedDataSizeInTeraBytes(Integer expectedDataSizeInTeraBytes) {
            return expectedDataSizeInTeraBytes(Output.of(expectedDataSizeInTeraBytes));
        }

        public Builder jobDetailsType(Output<String> jobDetailsType) {
            $.jobDetailsType = jobDetailsType;
            return this;
        }

        public Builder jobDetailsType(String jobDetailsType) {
            return jobDetailsType(Output.of(jobDetailsType));
        }

        public Builder keyEncryptionKey(@Nullable Output<KeyEncryptionKeyArgs> keyEncryptionKey) {
            $.keyEncryptionKey = keyEncryptionKey;
            return this;
        }

        public Builder keyEncryptionKey(KeyEncryptionKeyArgs keyEncryptionKey) {
            return keyEncryptionKey(Output.of(keyEncryptionKey));
        }

        public Builder passkey(@Nullable Output<String> passkey) {
            $.passkey = passkey;
            return this;
        }

        public Builder passkey(String passkey) {
            return passkey(Output.of(passkey));
        }

        public Builder preferences(@Nullable Output<PreferencesArgs> preferences) {
            $.preferences = preferences;
            return this;
        }

        public Builder preferences(PreferencesArgs preferences) {
            return preferences(Output.of(preferences));
        }

        public Builder preferredDisks(@Nullable Output<Map<String,Integer>> preferredDisks) {
            $.preferredDisks = preferredDisks;
            return this;
        }

        public Builder preferredDisks(Map<String,Integer> preferredDisks) {
            return preferredDisks(Output.of(preferredDisks));
        }

        public Builder shippingAddress(@Nullable Output<ShippingAddressArgs> shippingAddress) {
            $.shippingAddress = shippingAddress;
            return this;
        }

        public Builder shippingAddress(ShippingAddressArgs shippingAddress) {
            return shippingAddress(Output.of(shippingAddress));
        }

        public DataBoxDiskJobDetailsArgs build() {
            $.contactDetails = Objects.requireNonNull($.contactDetails, "expected parameter 'contactDetails' to be non-null");
            $.jobDetailsType = Codegen.stringProp("jobDetailsType").output().arg($.jobDetailsType).require();
            return $;
        }
    }

}
