// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.databox.inputs;

import com.pulumi.azurenative.databox.inputs.ContactDetailsArgs;
import com.pulumi.azurenative.databox.inputs.DataExportDetailsArgs;
import com.pulumi.azurenative.databox.inputs.DataImportDetailsArgs;
import com.pulumi.azurenative.databox.inputs.KeyEncryptionKeyArgs;
import com.pulumi.azurenative.databox.inputs.PreferencesArgs;
import com.pulumi.azurenative.databox.inputs.ShippingAddressArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * DataBox Disk Job Details.
 * 
 */
public final class DataBoxDiskJobDetailsArgs extends com.pulumi.resources.ResourceArgs {

    public static final DataBoxDiskJobDetailsArgs Empty = new DataBoxDiskJobDetailsArgs();

    /**
     * Contact details for notification and shipping.
     * 
     */
    @Import(name="contactDetails", required=true)
      private final Output<ContactDetailsArgs> contactDetails;

    public Output<ContactDetailsArgs> contactDetails() {
        return this.contactDetails;
    }

    /**
     * Details of the data to be exported from azure.
     * 
     */
    @Import(name="dataExportDetails")
      private final @Nullable Output<List<DataExportDetailsArgs>> dataExportDetails;

    public Output<List<DataExportDetailsArgs>> dataExportDetails() {
        return this.dataExportDetails == null ? Codegen.empty() : this.dataExportDetails;
    }

    /**
     * Details of the data to be imported into azure.
     * 
     */
    @Import(name="dataImportDetails")
      private final @Nullable Output<List<DataImportDetailsArgs>> dataImportDetails;

    public Output<List<DataImportDetailsArgs>> dataImportDetails() {
        return this.dataImportDetails == null ? Codegen.empty() : this.dataImportDetails;
    }

    /**
     * The expected size of the data, which needs to be transferred in this job, in terabytes.
     * 
     */
    @Import(name="expectedDataSizeInTeraBytes")
      private final @Nullable Output<Integer> expectedDataSizeInTeraBytes;

    public Output<Integer> expectedDataSizeInTeraBytes() {
        return this.expectedDataSizeInTeraBytes == null ? Codegen.empty() : this.expectedDataSizeInTeraBytes;
    }

    /**
     * Indicates the type of job details.
     * Expected value is 'DataBoxDisk'.
     * 
     */
    @Import(name="jobDetailsType", required=true)
      private final Output<String> jobDetailsType;

    public Output<String> jobDetailsType() {
        return this.jobDetailsType;
    }

    /**
     * Details about which key encryption type is being used.
     * 
     */
    @Import(name="keyEncryptionKey")
      private final @Nullable Output<KeyEncryptionKeyArgs> keyEncryptionKey;

    public Output<KeyEncryptionKeyArgs> keyEncryptionKey() {
        return this.keyEncryptionKey == null ? Codegen.empty() : this.keyEncryptionKey;
    }

    /**
     * User entered passkey for DataBox Disk job.
     * 
     */
    @Import(name="passkey")
      private final @Nullable Output<String> passkey;

    public Output<String> passkey() {
        return this.passkey == null ? Codegen.empty() : this.passkey;
    }

    /**
     * Preferences for the order.
     * 
     */
    @Import(name="preferences")
      private final @Nullable Output<PreferencesArgs> preferences;

    public Output<PreferencesArgs> preferences() {
        return this.preferences == null ? Codegen.empty() : this.preferences;
    }

    /**
     * User preference on what size disks are needed for the job. The map is from the disk size in TB to the count. Eg. {2,5} means 5 disks of 2 TB size. Key is string but will be checked against an int.
     * 
     */
    @Import(name="preferredDisks")
      private final @Nullable Output<Map<String,Integer>> preferredDisks;

    public Output<Map<String,Integer>> preferredDisks() {
        return this.preferredDisks == null ? Codegen.empty() : this.preferredDisks;
    }

    /**
     * Shipping address of the customer.
     * 
     */
    @Import(name="shippingAddress")
      private final @Nullable Output<ShippingAddressArgs> shippingAddress;

    public Output<ShippingAddressArgs> shippingAddress() {
        return this.shippingAddress == null ? Codegen.empty() : this.shippingAddress;
    }

    public DataBoxDiskJobDetailsArgs(
        Output<ContactDetailsArgs> contactDetails,
        @Nullable Output<List<DataExportDetailsArgs>> dataExportDetails,
        @Nullable Output<List<DataImportDetailsArgs>> dataImportDetails,
        @Nullable Output<Integer> expectedDataSizeInTeraBytes,
        Output<String> jobDetailsType,
        @Nullable Output<KeyEncryptionKeyArgs> keyEncryptionKey,
        @Nullable Output<String> passkey,
        @Nullable Output<PreferencesArgs> preferences,
        @Nullable Output<Map<String,Integer>> preferredDisks,
        @Nullable Output<ShippingAddressArgs> shippingAddress) {
        this.contactDetails = Objects.requireNonNull(contactDetails, "expected parameter 'contactDetails' to be non-null");
        this.dataExportDetails = dataExportDetails;
        this.dataImportDetails = dataImportDetails;
        this.expectedDataSizeInTeraBytes = expectedDataSizeInTeraBytes;
        this.jobDetailsType = Codegen.stringProp("jobDetailsType").output().arg(jobDetailsType).require();
        this.keyEncryptionKey = keyEncryptionKey;
        this.passkey = passkey;
        this.preferences = preferences;
        this.preferredDisks = preferredDisks;
        this.shippingAddress = shippingAddress;
    }

    private DataBoxDiskJobDetailsArgs() {
        this.contactDetails = Codegen.empty();
        this.dataExportDetails = Codegen.empty();
        this.dataImportDetails = Codegen.empty();
        this.expectedDataSizeInTeraBytes = Codegen.empty();
        this.jobDetailsType = Codegen.empty();
        this.keyEncryptionKey = Codegen.empty();
        this.passkey = Codegen.empty();
        this.preferences = Codegen.empty();
        this.preferredDisks = Codegen.empty();
        this.shippingAddress = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DataBoxDiskJobDetailsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<ContactDetailsArgs> contactDetails;
        private @Nullable Output<List<DataExportDetailsArgs>> dataExportDetails;
        private @Nullable Output<List<DataImportDetailsArgs>> dataImportDetails;
        private @Nullable Output<Integer> expectedDataSizeInTeraBytes;
        private Output<String> jobDetailsType;
        private @Nullable Output<KeyEncryptionKeyArgs> keyEncryptionKey;
        private @Nullable Output<String> passkey;
        private @Nullable Output<PreferencesArgs> preferences;
        private @Nullable Output<Map<String,Integer>> preferredDisks;
        private @Nullable Output<ShippingAddressArgs> shippingAddress;

        public Builder() {
    	      // Empty
        }

        public Builder(DataBoxDiskJobDetailsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.contactDetails = defaults.contactDetails;
    	      this.dataExportDetails = defaults.dataExportDetails;
    	      this.dataImportDetails = defaults.dataImportDetails;
    	      this.expectedDataSizeInTeraBytes = defaults.expectedDataSizeInTeraBytes;
    	      this.jobDetailsType = defaults.jobDetailsType;
    	      this.keyEncryptionKey = defaults.keyEncryptionKey;
    	      this.passkey = defaults.passkey;
    	      this.preferences = defaults.preferences;
    	      this.preferredDisks = defaults.preferredDisks;
    	      this.shippingAddress = defaults.shippingAddress;
        }

        public Builder contactDetails(Output<ContactDetailsArgs> contactDetails) {
            this.contactDetails = Objects.requireNonNull(contactDetails);
            return this;
        }
        public Builder contactDetails(ContactDetailsArgs contactDetails) {
            this.contactDetails = Output.of(Objects.requireNonNull(contactDetails));
            return this;
        }
        public Builder dataExportDetails(@Nullable Output<List<DataExportDetailsArgs>> dataExportDetails) {
            this.dataExportDetails = dataExportDetails;
            return this;
        }
        public Builder dataExportDetails(@Nullable List<DataExportDetailsArgs> dataExportDetails) {
            this.dataExportDetails = Codegen.ofNullable(dataExportDetails);
            return this;
        }
        public Builder dataExportDetails(DataExportDetailsArgs... dataExportDetails) {
            return dataExportDetails(List.of(dataExportDetails));
        }
        public Builder dataImportDetails(@Nullable Output<List<DataImportDetailsArgs>> dataImportDetails) {
            this.dataImportDetails = dataImportDetails;
            return this;
        }
        public Builder dataImportDetails(@Nullable List<DataImportDetailsArgs> dataImportDetails) {
            this.dataImportDetails = Codegen.ofNullable(dataImportDetails);
            return this;
        }
        public Builder dataImportDetails(DataImportDetailsArgs... dataImportDetails) {
            return dataImportDetails(List.of(dataImportDetails));
        }
        public Builder expectedDataSizeInTeraBytes(@Nullable Output<Integer> expectedDataSizeInTeraBytes) {
            this.expectedDataSizeInTeraBytes = expectedDataSizeInTeraBytes;
            return this;
        }
        public Builder expectedDataSizeInTeraBytes(@Nullable Integer expectedDataSizeInTeraBytes) {
            this.expectedDataSizeInTeraBytes = Codegen.ofNullable(expectedDataSizeInTeraBytes);
            return this;
        }
        public Builder jobDetailsType(Output<String> jobDetailsType) {
            this.jobDetailsType = Objects.requireNonNull(jobDetailsType);
            return this;
        }
        public Builder jobDetailsType(String jobDetailsType) {
            this.jobDetailsType = Output.of(Objects.requireNonNull(jobDetailsType));
            return this;
        }
        public Builder keyEncryptionKey(@Nullable Output<KeyEncryptionKeyArgs> keyEncryptionKey) {
            this.keyEncryptionKey = keyEncryptionKey;
            return this;
        }
        public Builder keyEncryptionKey(@Nullable KeyEncryptionKeyArgs keyEncryptionKey) {
            this.keyEncryptionKey = Codegen.ofNullable(keyEncryptionKey);
            return this;
        }
        public Builder passkey(@Nullable Output<String> passkey) {
            this.passkey = passkey;
            return this;
        }
        public Builder passkey(@Nullable String passkey) {
            this.passkey = Codegen.ofNullable(passkey);
            return this;
        }
        public Builder preferences(@Nullable Output<PreferencesArgs> preferences) {
            this.preferences = preferences;
            return this;
        }
        public Builder preferences(@Nullable PreferencesArgs preferences) {
            this.preferences = Codegen.ofNullable(preferences);
            return this;
        }
        public Builder preferredDisks(@Nullable Output<Map<String,Integer>> preferredDisks) {
            this.preferredDisks = preferredDisks;
            return this;
        }
        public Builder preferredDisks(@Nullable Map<String,Integer> preferredDisks) {
            this.preferredDisks = Codegen.ofNullable(preferredDisks);
            return this;
        }
        public Builder shippingAddress(@Nullable Output<ShippingAddressArgs> shippingAddress) {
            this.shippingAddress = shippingAddress;
            return this;
        }
        public Builder shippingAddress(@Nullable ShippingAddressArgs shippingAddress) {
            this.shippingAddress = Codegen.ofNullable(shippingAddress);
            return this;
        }        public DataBoxDiskJobDetailsArgs build() {
            return new DataBoxDiskJobDetailsArgs(contactDetails, dataExportDetails, dataImportDetails, expectedDataSizeInTeraBytes, jobDetailsType, keyEncryptionKey, passkey, preferences, preferredDisks, shippingAddress);
        }
    }
}
