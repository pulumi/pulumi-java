// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;


/**
 * BGP peer status details.
 * 
 */
public final class BgpPeerStatusResponse extends com.pulumi.resources.InvokeArgs {

    public static final BgpPeerStatusResponse Empty = new BgpPeerStatusResponse();

    /**
     * The autonomous system number of the remote BGP peer.
     * 
     */
    @Import(name="asn", required=true)
    private Double asn;

    /**
     * @return The autonomous system number of the remote BGP peer.
     * 
     */
    public Double asn() {
        return this.asn;
    }

    /**
     * For how long the peering has been up.
     * 
     */
    @Import(name="connectedDuration", required=true)
    private String connectedDuration;

    /**
     * @return For how long the peering has been up.
     * 
     */
    public String connectedDuration() {
        return this.connectedDuration;
    }

    /**
     * The virtual network gateway&#39;s local address.
     * 
     */
    @Import(name="localAddress", required=true)
    private String localAddress;

    /**
     * @return The virtual network gateway&#39;s local address.
     * 
     */
    public String localAddress() {
        return this.localAddress;
    }

    /**
     * The number of BGP messages received.
     * 
     */
    @Import(name="messagesReceived", required=true)
    private Double messagesReceived;

    /**
     * @return The number of BGP messages received.
     * 
     */
    public Double messagesReceived() {
        return this.messagesReceived;
    }

    /**
     * The number of BGP messages sent.
     * 
     */
    @Import(name="messagesSent", required=true)
    private Double messagesSent;

    /**
     * @return The number of BGP messages sent.
     * 
     */
    public Double messagesSent() {
        return this.messagesSent;
    }

    /**
     * The remote BGP peer.
     * 
     */
    @Import(name="neighbor", required=true)
    private String neighbor;

    /**
     * @return The remote BGP peer.
     * 
     */
    public String neighbor() {
        return this.neighbor;
    }

    /**
     * The number of routes learned from this peer.
     * 
     */
    @Import(name="routesReceived", required=true)
    private Double routesReceived;

    /**
     * @return The number of routes learned from this peer.
     * 
     */
    public Double routesReceived() {
        return this.routesReceived;
    }

    /**
     * The BGP peer state.
     * 
     */
    @Import(name="state", required=true)
    private String state;

    /**
     * @return The BGP peer state.
     * 
     */
    public String state() {
        return this.state;
    }

    private BgpPeerStatusResponse() {}

    private BgpPeerStatusResponse(BgpPeerStatusResponse $) {
        this.asn = $.asn;
        this.connectedDuration = $.connectedDuration;
        this.localAddress = $.localAddress;
        this.messagesReceived = $.messagesReceived;
        this.messagesSent = $.messagesSent;
        this.neighbor = $.neighbor;
        this.routesReceived = $.routesReceived;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BgpPeerStatusResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BgpPeerStatusResponse $;

        public Builder() {
            $ = new BgpPeerStatusResponse();
        }

        public Builder(BgpPeerStatusResponse defaults) {
            $ = new BgpPeerStatusResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param asn The autonomous system number of the remote BGP peer.
         * 
         * @return builder
         * 
         */
        public Builder asn(Double asn) {
            $.asn = asn;
            return this;
        }

        /**
         * @param connectedDuration For how long the peering has been up.
         * 
         * @return builder
         * 
         */
        public Builder connectedDuration(String connectedDuration) {
            $.connectedDuration = connectedDuration;
            return this;
        }

        /**
         * @param localAddress The virtual network gateway&#39;s local address.
         * 
         * @return builder
         * 
         */
        public Builder localAddress(String localAddress) {
            $.localAddress = localAddress;
            return this;
        }

        /**
         * @param messagesReceived The number of BGP messages received.
         * 
         * @return builder
         * 
         */
        public Builder messagesReceived(Double messagesReceived) {
            $.messagesReceived = messagesReceived;
            return this;
        }

        /**
         * @param messagesSent The number of BGP messages sent.
         * 
         * @return builder
         * 
         */
        public Builder messagesSent(Double messagesSent) {
            $.messagesSent = messagesSent;
            return this;
        }

        /**
         * @param neighbor The remote BGP peer.
         * 
         * @return builder
         * 
         */
        public Builder neighbor(String neighbor) {
            $.neighbor = neighbor;
            return this;
        }

        /**
         * @param routesReceived The number of routes learned from this peer.
         * 
         * @return builder
         * 
         */
        public Builder routesReceived(Double routesReceived) {
            $.routesReceived = routesReceived;
            return this;
        }

        /**
         * @param state The BGP peer state.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            $.state = state;
            return this;
        }

        public BgpPeerStatusResponse build() {
            $.asn = Objects.requireNonNull($.asn, "expected parameter 'asn' to be non-null");
            $.connectedDuration = Objects.requireNonNull($.connectedDuration, "expected parameter 'connectedDuration' to be non-null");
            $.localAddress = Objects.requireNonNull($.localAddress, "expected parameter 'localAddress' to be non-null");
            $.messagesReceived = Objects.requireNonNull($.messagesReceived, "expected parameter 'messagesReceived' to be non-null");
            $.messagesSent = Objects.requireNonNull($.messagesSent, "expected parameter 'messagesSent' to be non-null");
            $.neighbor = Objects.requireNonNull($.neighbor, "expected parameter 'neighbor' to be non-null");
            $.routesReceived = Objects.requireNonNull($.routesReceived, "expected parameter 'routesReceived' to be non-null");
            $.state = Objects.requireNonNull($.state, "expected parameter 'state' to be non-null");
            return $;
        }
    }

}
