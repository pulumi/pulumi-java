// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.media.inputs;

import com.pulumi.azurenative.media.inputs.EnabledProtocolsArgs;
import com.pulumi.azurenative.media.inputs.StreamingPolicyContentKeysArgs;
import com.pulumi.azurenative.media.inputs.TrackSelectionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Class for EnvelopeEncryption encryption scheme
 * 
 */
public final class EnvelopeEncryptionArgs extends com.pulumi.resources.ResourceArgs {

    public static final EnvelopeEncryptionArgs Empty = new EnvelopeEncryptionArgs();

    /**
     * Representing which tracks should not be encrypted
     * 
     */
    @Import(name="clearTracks")
      private final @Nullable Output<List<TrackSelectionArgs>> clearTracks;

    public Output<List<TrackSelectionArgs>> clearTracks() {
        return this.clearTracks == null ? Codegen.empty() : this.clearTracks;
    }

    /**
     * Representing default content key for each encryption scheme and separate content keys for specific tracks
     * 
     */
    @Import(name="contentKeys")
      private final @Nullable Output<StreamingPolicyContentKeysArgs> contentKeys;

    public Output<StreamingPolicyContentKeysArgs> contentKeys() {
        return this.contentKeys == null ? Codegen.empty() : this.contentKeys;
    }

    /**
     * Template for the URL of the custom service delivering keys to end user players.  Not required when using Azure Media Services for issuing keys.  The template supports replaceable tokens that the service will update at runtime with the value specific to the request.  The currently supported token values are {AlternativeMediaId}, which is replaced with the value of StreamingLocatorId.AlternativeMediaId, and {ContentKeyId}, which is replaced with the value of identifier of the key being requested.
     * 
     */
    @Import(name="customKeyAcquisitionUrlTemplate")
      private final @Nullable Output<String> customKeyAcquisitionUrlTemplate;

    public Output<String> customKeyAcquisitionUrlTemplate() {
        return this.customKeyAcquisitionUrlTemplate == null ? Codegen.empty() : this.customKeyAcquisitionUrlTemplate;
    }

    /**
     * Representing supported protocols
     * 
     */
    @Import(name="enabledProtocols")
      private final @Nullable Output<EnabledProtocolsArgs> enabledProtocols;

    public Output<EnabledProtocolsArgs> enabledProtocols() {
        return this.enabledProtocols == null ? Codegen.empty() : this.enabledProtocols;
    }

    public EnvelopeEncryptionArgs(
        @Nullable Output<List<TrackSelectionArgs>> clearTracks,
        @Nullable Output<StreamingPolicyContentKeysArgs> contentKeys,
        @Nullable Output<String> customKeyAcquisitionUrlTemplate,
        @Nullable Output<EnabledProtocolsArgs> enabledProtocols) {
        this.clearTracks = clearTracks;
        this.contentKeys = contentKeys;
        this.customKeyAcquisitionUrlTemplate = customKeyAcquisitionUrlTemplate;
        this.enabledProtocols = enabledProtocols;
    }

    private EnvelopeEncryptionArgs() {
        this.clearTracks = Codegen.empty();
        this.contentKeys = Codegen.empty();
        this.customKeyAcquisitionUrlTemplate = Codegen.empty();
        this.enabledProtocols = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EnvelopeEncryptionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<TrackSelectionArgs>> clearTracks;
        private @Nullable Output<StreamingPolicyContentKeysArgs> contentKeys;
        private @Nullable Output<String> customKeyAcquisitionUrlTemplate;
        private @Nullable Output<EnabledProtocolsArgs> enabledProtocols;

        public Builder() {
    	      // Empty
        }

        public Builder(EnvelopeEncryptionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clearTracks = defaults.clearTracks;
    	      this.contentKeys = defaults.contentKeys;
    	      this.customKeyAcquisitionUrlTemplate = defaults.customKeyAcquisitionUrlTemplate;
    	      this.enabledProtocols = defaults.enabledProtocols;
        }

        public Builder clearTracks(@Nullable Output<List<TrackSelectionArgs>> clearTracks) {
            this.clearTracks = clearTracks;
            return this;
        }
        public Builder clearTracks(@Nullable List<TrackSelectionArgs> clearTracks) {
            this.clearTracks = Codegen.ofNullable(clearTracks);
            return this;
        }
        public Builder clearTracks(TrackSelectionArgs... clearTracks) {
            return clearTracks(List.of(clearTracks));
        }
        public Builder contentKeys(@Nullable Output<StreamingPolicyContentKeysArgs> contentKeys) {
            this.contentKeys = contentKeys;
            return this;
        }
        public Builder contentKeys(@Nullable StreamingPolicyContentKeysArgs contentKeys) {
            this.contentKeys = Codegen.ofNullable(contentKeys);
            return this;
        }
        public Builder customKeyAcquisitionUrlTemplate(@Nullable Output<String> customKeyAcquisitionUrlTemplate) {
            this.customKeyAcquisitionUrlTemplate = customKeyAcquisitionUrlTemplate;
            return this;
        }
        public Builder customKeyAcquisitionUrlTemplate(@Nullable String customKeyAcquisitionUrlTemplate) {
            this.customKeyAcquisitionUrlTemplate = Codegen.ofNullable(customKeyAcquisitionUrlTemplate);
            return this;
        }
        public Builder enabledProtocols(@Nullable Output<EnabledProtocolsArgs> enabledProtocols) {
            this.enabledProtocols = enabledProtocols;
            return this;
        }
        public Builder enabledProtocols(@Nullable EnabledProtocolsArgs enabledProtocols) {
            this.enabledProtocols = Codegen.ofNullable(enabledProtocols);
            return this;
        }        public EnvelopeEncryptionArgs build() {
            return new EnvelopeEncryptionArgs(clearTracks, contentKeys, customKeyAcquisitionUrlTemplate, enabledProtocols);
        }
    }
}
