// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.compute.inputs;

import com.pulumi.azurenative.compute.inputs.LoadBalancerFrontendIPConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.List;
import java.util.Objects;


public final class LoadBalancerConfigurationPropertiesArgs extends com.pulumi.resources.ResourceArgs {

    public static final LoadBalancerConfigurationPropertiesArgs Empty = new LoadBalancerConfigurationPropertiesArgs();

    /**
     * Specifies the frontend IP to be used for the load balancer. Only IPv4 frontend IP address is supported. Each load balancer configuration must have exactly one frontend IP configuration.
     * 
     */
    @Import(name="frontendIPConfigurations", required=true)
    private Output<List<LoadBalancerFrontendIPConfigurationArgs>> frontendIPConfigurations;

    /**
     * @return Specifies the frontend IP to be used for the load balancer. Only IPv4 frontend IP address is supported. Each load balancer configuration must have exactly one frontend IP configuration.
     * 
     */
    public Output<List<LoadBalancerFrontendIPConfigurationArgs>> frontendIPConfigurations() {
        return this.frontendIPConfigurations;
    }

    private LoadBalancerConfigurationPropertiesArgs() {}

    private LoadBalancerConfigurationPropertiesArgs(LoadBalancerConfigurationPropertiesArgs $) {
        this.frontendIPConfigurations = $.frontendIPConfigurations;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoadBalancerConfigurationPropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoadBalancerConfigurationPropertiesArgs $;

        public Builder() {
            $ = new LoadBalancerConfigurationPropertiesArgs();
        }

        public Builder(LoadBalancerConfigurationPropertiesArgs defaults) {
            $ = new LoadBalancerConfigurationPropertiesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param frontendIPConfigurations Specifies the frontend IP to be used for the load balancer. Only IPv4 frontend IP address is supported. Each load balancer configuration must have exactly one frontend IP configuration.
         * 
         * @return builder
         * 
         */
        public Builder frontendIPConfigurations(Output<List<LoadBalancerFrontendIPConfigurationArgs>> frontendIPConfigurations) {
            $.frontendIPConfigurations = frontendIPConfigurations;
            return this;
        }

        /**
         * @param frontendIPConfigurations Specifies the frontend IP to be used for the load balancer. Only IPv4 frontend IP address is supported. Each load balancer configuration must have exactly one frontend IP configuration.
         * 
         * @return builder
         * 
         */
        public Builder frontendIPConfigurations(List<LoadBalancerFrontendIPConfigurationArgs> frontendIPConfigurations) {
            return frontendIPConfigurations(Output.of(frontendIPConfigurations));
        }

        /**
         * @param frontendIPConfigurations Specifies the frontend IP to be used for the load balancer. Only IPv4 frontend IP address is supported. Each load balancer configuration must have exactly one frontend IP configuration.
         * 
         * @return builder
         * 
         */
        public Builder frontendIPConfigurations(LoadBalancerFrontendIPConfigurationArgs... frontendIPConfigurations) {
            return frontendIPConfigurations(List.of(frontendIPConfigurations));
        }

        public LoadBalancerConfigurationPropertiesArgs build() {
            $.frontendIPConfigurations = Objects.requireNonNull($.frontendIPConfigurations, "expected parameter 'frontendIPConfigurations' to be non-null");
            return $;
        }
    }

}
