// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.vmwarecloudsimple.inputs;

import com.pulumi.azurenative.vmwarecloudsimple.enums.DiskIndependenceMode;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Virtual disk model
 * 
 */
public final class VirtualDiskArgs extends com.pulumi.resources.ResourceArgs {

    public static final VirtualDiskArgs Empty = new VirtualDiskArgs();

    /**
     * Disk&#39;s Controller id
     * 
     */
    @Import(name="controllerId", required=true)
    private Output<String> controllerId;

    public Output<String> controllerId() {
        return this.controllerId;
    }

    /**
     * Disk&#39;s independence mode type
     * 
     */
    @Import(name="independenceMode", required=true)
    private Output<DiskIndependenceMode> independenceMode;

    public Output<DiskIndependenceMode> independenceMode() {
        return this.independenceMode;
    }

    /**
     * Disk&#39;s total size
     * 
     */
    @Import(name="totalSize", required=true)
    private Output<Integer> totalSize;

    public Output<Integer> totalSize() {
        return this.totalSize;
    }

    /**
     * Disk&#39;s id
     * 
     */
    @Import(name="virtualDiskId")
    private @Nullable Output<String> virtualDiskId;

    public Optional<Output<String>> virtualDiskId() {
        return Optional.ofNullable(this.virtualDiskId);
    }

    private VirtualDiskArgs() {}

    private VirtualDiskArgs(VirtualDiskArgs $) {
        this.controllerId = $.controllerId;
        this.independenceMode = $.independenceMode;
        this.totalSize = $.totalSize;
        this.virtualDiskId = $.virtualDiskId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VirtualDiskArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VirtualDiskArgs $;

        public Builder() {
            $ = new VirtualDiskArgs();
        }

        public Builder(VirtualDiskArgs defaults) {
            $ = new VirtualDiskArgs(Objects.requireNonNull(defaults));
        }

        public Builder controllerId(Output<String> controllerId) {
            $.controllerId = controllerId;
            return this;
        }

        public Builder controllerId(String controllerId) {
            return controllerId(Output.of(controllerId));
        }

        public Builder independenceMode(Output<DiskIndependenceMode> independenceMode) {
            $.independenceMode = independenceMode;
            return this;
        }

        public Builder independenceMode(DiskIndependenceMode independenceMode) {
            return independenceMode(Output.of(independenceMode));
        }

        public Builder totalSize(Output<Integer> totalSize) {
            $.totalSize = totalSize;
            return this;
        }

        public Builder totalSize(Integer totalSize) {
            return totalSize(Output.of(totalSize));
        }

        public Builder virtualDiskId(@Nullable Output<String> virtualDiskId) {
            $.virtualDiskId = virtualDiskId;
            return this;
        }

        public Builder virtualDiskId(String virtualDiskId) {
            return virtualDiskId(Output.of(virtualDiskId));
        }

        public VirtualDiskArgs build() {
            $.controllerId = Objects.requireNonNull($.controllerId, "expected parameter 'controllerId' to be non-null");
            $.independenceMode = Objects.requireNonNull($.independenceMode, "expected parameter 'independenceMode' to be non-null");
            $.totalSize = Objects.requireNonNull($.totalSize, "expected parameter 'totalSize' to be non-null");
            return $;
        }
    }

}
