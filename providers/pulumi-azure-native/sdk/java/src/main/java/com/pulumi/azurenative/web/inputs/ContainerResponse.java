// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.web.inputs;

import com.pulumi.azurenative.web.inputs.ContainerResourcesResponse;
import com.pulumi.azurenative.web.inputs.EnvironmentVarResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Container App container definition.
 * 
 */
public final class ContainerResponse extends com.pulumi.resources.InvokeArgs {

    public static final ContainerResponse Empty = new ContainerResponse();

    /**
     * Container start command arguments.
     * 
     */
    @Import(name="args")
    private @Nullable List<String> args;

    /**
     * @return Container start command arguments.
     * 
     */
    public Optional<List<String>> args() {
        return Optional.ofNullable(this.args);
    }

    /**
     * Container start command.
     * 
     */
    @Import(name="command")
    private @Nullable List<String> command;

    /**
     * @return Container start command.
     * 
     */
    public Optional<List<String>> command() {
        return Optional.ofNullable(this.command);
    }

    /**
     * Container environment variables.
     * 
     */
    @Import(name="env")
    private @Nullable List<EnvironmentVarResponse> env;

    /**
     * @return Container environment variables.
     * 
     */
    public Optional<List<EnvironmentVarResponse>> env() {
        return Optional.ofNullable(this.env);
    }

    /**
     * Container image tag.
     * 
     */
    @Import(name="image")
    private @Nullable String image;

    /**
     * @return Container image tag.
     * 
     */
    public Optional<String> image() {
        return Optional.ofNullable(this.image);
    }

    /**
     * Custom container name.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return Custom container name.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Container resource requirements.
     * 
     */
    @Import(name="resources")
    private @Nullable ContainerResourcesResponse resources;

    /**
     * @return Container resource requirements.
     * 
     */
    public Optional<ContainerResourcesResponse> resources() {
        return Optional.ofNullable(this.resources);
    }

    private ContainerResponse() {}

    private ContainerResponse(ContainerResponse $) {
        this.args = $.args;
        this.command = $.command;
        this.env = $.env;
        this.image = $.image;
        this.name = $.name;
        this.resources = $.resources;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContainerResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContainerResponse $;

        public Builder() {
            $ = new ContainerResponse();
        }

        public Builder(ContainerResponse defaults) {
            $ = new ContainerResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param args Container start command arguments.
         * 
         * @return builder
         * 
         */
        public Builder args(@Nullable List<String> args) {
            $.args = args;
            return this;
        }

        /**
         * @param args Container start command arguments.
         * 
         * @return builder
         * 
         */
        public Builder args(String... args) {
            return args(List.of(args));
        }

        /**
         * @param command Container start command.
         * 
         * @return builder
         * 
         */
        public Builder command(@Nullable List<String> command) {
            $.command = command;
            return this;
        }

        /**
         * @param command Container start command.
         * 
         * @return builder
         * 
         */
        public Builder command(String... command) {
            return command(List.of(command));
        }

        /**
         * @param env Container environment variables.
         * 
         * @return builder
         * 
         */
        public Builder env(@Nullable List<EnvironmentVarResponse> env) {
            $.env = env;
            return this;
        }

        /**
         * @param env Container environment variables.
         * 
         * @return builder
         * 
         */
        public Builder env(EnvironmentVarResponse... env) {
            return env(List.of(env));
        }

        /**
         * @param image Container image tag.
         * 
         * @return builder
         * 
         */
        public Builder image(@Nullable String image) {
            $.image = image;
            return this;
        }

        /**
         * @param name Custom container name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param resources Container resource requirements.
         * 
         * @return builder
         * 
         */
        public Builder resources(@Nullable ContainerResourcesResponse resources) {
            $.resources = resources;
            return this;
        }

        public ContainerResponse build() {
            return $;
        }
    }

}
