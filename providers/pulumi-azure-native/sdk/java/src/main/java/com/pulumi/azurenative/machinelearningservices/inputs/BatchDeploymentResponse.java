// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.machinelearningservices.inputs;

import com.pulumi.azurenative.machinelearningservices.inputs.BatchOutputConfigurationResponse;
import com.pulumi.azurenative.machinelearningservices.inputs.BatchRetrySettingsResponse;
import com.pulumi.azurenative.machinelearningservices.inputs.CodeConfigurationResponse;
import com.pulumi.azurenative.machinelearningservices.inputs.ComputeConfigurationResponse;
import com.pulumi.azurenative.machinelearningservices.inputs.DataPathAssetReferenceResponse;
import com.pulumi.azurenative.machinelearningservices.inputs.IdAssetReferenceResponse;
import com.pulumi.azurenative.machinelearningservices.inputs.OutputPathAssetReferenceResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Batch inference settings per deployment.
 * 
 */
public final class BatchDeploymentResponse extends com.pulumi.resources.InvokeArgs {

    public static final BatchDeploymentResponse Empty = new BatchDeploymentResponse();

    /**
     * Code configuration for the endpoint deployment.
     * 
     */
    @Import(name="codeConfiguration")
    private @Nullable CodeConfigurationResponse codeConfiguration;

    /**
     * @return Code configuration for the endpoint deployment.
     * 
     */
    public Optional<CodeConfigurationResponse> codeConfiguration() {
        return Optional.ofNullable(this.codeConfiguration);
    }

    /**
     * Configuration for compute binding.
     * 
     */
    @Import(name="compute")
    private @Nullable ComputeConfigurationResponse compute;

    /**
     * @return Configuration for compute binding.
     * 
     */
    public Optional<ComputeConfigurationResponse> compute() {
        return Optional.ofNullable(this.compute);
    }

    /**
     * Description of the endpoint deployment.
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    /**
     * @return Description of the endpoint deployment.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * ARM resource ID of the environment specification for the endpoint deployment.
     * 
     */
    @Import(name="environmentId")
    private @Nullable String environmentId;

    /**
     * @return ARM resource ID of the environment specification for the endpoint deployment.
     * 
     */
    public Optional<String> environmentId() {
        return Optional.ofNullable(this.environmentId);
    }

    /**
     * Environment variables configuration for the deployment.
     * 
     */
    @Import(name="environmentVariables")
    private @Nullable Map<String,String> environmentVariables;

    /**
     * @return Environment variables configuration for the deployment.
     * 
     */
    public Optional<Map<String,String>> environmentVariables() {
        return Optional.ofNullable(this.environmentVariables);
    }

    /**
     * Error threshold, if the error count for the entire input goes above this value,
     * the batch inference will be aborted. Range is [-1, int.MaxValue].
     * For FileDataset, this value is the count of file failures.
     * For TabularDataset, this value is the count of record failures.
     * If set to -1 (the lower bound), all failures during batch inference will be ignored.
     * 
     */
    @Import(name="errorThreshold")
    private @Nullable Integer errorThreshold;

    /**
     * @return Error threshold, if the error count for the entire input goes above this value,
     * the batch inference will be aborted. Range is [-1, int.MaxValue].
     * For FileDataset, this value is the count of file failures.
     * For TabularDataset, this value is the count of record failures.
     * If set to -1 (the lower bound), all failures during batch inference will be ignored.
     * 
     */
    public Optional<Integer> errorThreshold() {
        return Optional.ofNullable(this.errorThreshold);
    }

    /**
     * Logging level for batch inference operation.
     * 
     */
    @Import(name="loggingLevel")
    private @Nullable String loggingLevel;

    /**
     * @return Logging level for batch inference operation.
     * 
     */
    public Optional<String> loggingLevel() {
        return Optional.ofNullable(this.loggingLevel);
    }

    /**
     * Size of the mini-batch passed to each batch invocation.
     * For FileDataset, this is the number of files per mini-batch.
     * For TabularDataset, this is the size of the records in bytes, per mini-batch.
     * 
     */
    @Import(name="miniBatchSize")
    private @Nullable Double miniBatchSize;

    /**
     * @return Size of the mini-batch passed to each batch invocation.
     * For FileDataset, this is the number of files per mini-batch.
     * For TabularDataset, this is the size of the records in bytes, per mini-batch.
     * 
     */
    public Optional<Double> miniBatchSize() {
        return Optional.ofNullable(this.miniBatchSize);
    }

    /**
     * Reference to the model asset for the endpoint deployment.
     * 
     */
    @Import(name="model")
    private @Nullable Object model;

    /**
     * @return Reference to the model asset for the endpoint deployment.
     * 
     */
    public Optional<Object> model() {
        return Optional.ofNullable(this.model);
    }

    /**
     * Output configuration for the batch inference operation.
     * 
     */
    @Import(name="outputConfiguration")
    private @Nullable BatchOutputConfigurationResponse outputConfiguration;

    /**
     * @return Output configuration for the batch inference operation.
     * 
     */
    public Optional<BatchOutputConfigurationResponse> outputConfiguration() {
        return Optional.ofNullable(this.outputConfiguration);
    }

    /**
     * Partition keys list used for Named partitioning.
     * 
     */
    @Import(name="partitionKeys")
    private @Nullable List<String> partitionKeys;

    /**
     * @return Partition keys list used for Named partitioning.
     * 
     */
    public Optional<List<String>> partitionKeys() {
        return Optional.ofNullable(this.partitionKeys);
    }

    /**
     * Property dictionary. Properties can be added, but not removed or altered.
     * 
     */
    @Import(name="properties")
    private @Nullable Map<String,String> properties;

    /**
     * @return Property dictionary. Properties can be added, but not removed or altered.
     * 
     */
    public Optional<Map<String,String>> properties() {
        return Optional.ofNullable(this.properties);
    }

    /**
     * Retry Settings for the batch inference operation.
     * 
     */
    @Import(name="retrySettings")
    private @Nullable BatchRetrySettingsResponse retrySettings;

    /**
     * @return Retry Settings for the batch inference operation.
     * 
     */
    public Optional<BatchRetrySettingsResponse> retrySettings() {
        return Optional.ofNullable(this.retrySettings);
    }

    private BatchDeploymentResponse() {}

    private BatchDeploymentResponse(BatchDeploymentResponse $) {
        this.codeConfiguration = $.codeConfiguration;
        this.compute = $.compute;
        this.description = $.description;
        this.environmentId = $.environmentId;
        this.environmentVariables = $.environmentVariables;
        this.errorThreshold = $.errorThreshold;
        this.loggingLevel = $.loggingLevel;
        this.miniBatchSize = $.miniBatchSize;
        this.model = $.model;
        this.outputConfiguration = $.outputConfiguration;
        this.partitionKeys = $.partitionKeys;
        this.properties = $.properties;
        this.retrySettings = $.retrySettings;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BatchDeploymentResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BatchDeploymentResponse $;

        public Builder() {
            $ = new BatchDeploymentResponse();
        }

        public Builder(BatchDeploymentResponse defaults) {
            $ = new BatchDeploymentResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param codeConfiguration Code configuration for the endpoint deployment.
         * 
         * @return builder
         * 
         */
        public Builder codeConfiguration(@Nullable CodeConfigurationResponse codeConfiguration) {
            $.codeConfiguration = codeConfiguration;
            return this;
        }

        /**
         * @param compute Configuration for compute binding.
         * 
         * @return builder
         * 
         */
        public Builder compute(@Nullable ComputeConfigurationResponse compute) {
            $.compute = compute;
            return this;
        }

        /**
         * @param description Description of the endpoint deployment.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        /**
         * @param environmentId ARM resource ID of the environment specification for the endpoint deployment.
         * 
         * @return builder
         * 
         */
        public Builder environmentId(@Nullable String environmentId) {
            $.environmentId = environmentId;
            return this;
        }

        /**
         * @param environmentVariables Environment variables configuration for the deployment.
         * 
         * @return builder
         * 
         */
        public Builder environmentVariables(@Nullable Map<String,String> environmentVariables) {
            $.environmentVariables = environmentVariables;
            return this;
        }

        /**
         * @param errorThreshold Error threshold, if the error count for the entire input goes above this value,
         * the batch inference will be aborted. Range is [-1, int.MaxValue].
         * For FileDataset, this value is the count of file failures.
         * For TabularDataset, this value is the count of record failures.
         * If set to -1 (the lower bound), all failures during batch inference will be ignored.
         * 
         * @return builder
         * 
         */
        public Builder errorThreshold(@Nullable Integer errorThreshold) {
            $.errorThreshold = errorThreshold;
            return this;
        }

        /**
         * @param loggingLevel Logging level for batch inference operation.
         * 
         * @return builder
         * 
         */
        public Builder loggingLevel(@Nullable String loggingLevel) {
            $.loggingLevel = loggingLevel;
            return this;
        }

        /**
         * @param miniBatchSize Size of the mini-batch passed to each batch invocation.
         * For FileDataset, this is the number of files per mini-batch.
         * For TabularDataset, this is the size of the records in bytes, per mini-batch.
         * 
         * @return builder
         * 
         */
        public Builder miniBatchSize(@Nullable Double miniBatchSize) {
            $.miniBatchSize = miniBatchSize;
            return this;
        }

        /**
         * @param model Reference to the model asset for the endpoint deployment.
         * 
         * @return builder
         * 
         */
        public Builder model(@Nullable Object model) {
            $.model = model;
            return this;
        }

        /**
         * @param outputConfiguration Output configuration for the batch inference operation.
         * 
         * @return builder
         * 
         */
        public Builder outputConfiguration(@Nullable BatchOutputConfigurationResponse outputConfiguration) {
            $.outputConfiguration = outputConfiguration;
            return this;
        }

        /**
         * @param partitionKeys Partition keys list used for Named partitioning.
         * 
         * @return builder
         * 
         */
        public Builder partitionKeys(@Nullable List<String> partitionKeys) {
            $.partitionKeys = partitionKeys;
            return this;
        }

        /**
         * @param partitionKeys Partition keys list used for Named partitioning.
         * 
         * @return builder
         * 
         */
        public Builder partitionKeys(String... partitionKeys) {
            return partitionKeys(List.of(partitionKeys));
        }

        /**
         * @param properties Property dictionary. Properties can be added, but not removed or altered.
         * 
         * @return builder
         * 
         */
        public Builder properties(@Nullable Map<String,String> properties) {
            $.properties = properties;
            return this;
        }

        /**
         * @param retrySettings Retry Settings for the batch inference operation.
         * 
         * @return builder
         * 
         */
        public Builder retrySettings(@Nullable BatchRetrySettingsResponse retrySettings) {
            $.retrySettings = retrySettings;
            return this;
        }

        public BatchDeploymentResponse build() {
            return $;
        }
    }

}
