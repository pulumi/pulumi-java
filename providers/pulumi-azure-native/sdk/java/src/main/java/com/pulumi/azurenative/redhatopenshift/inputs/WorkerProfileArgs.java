// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.redhatopenshift.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * WorkerProfile represents a worker profile.
 * 
 */
public final class WorkerProfileArgs extends com.pulumi.resources.ResourceArgs {

    public static final WorkerProfileArgs Empty = new WorkerProfileArgs();

    /**
     * The number of worker VMs.  Must be between 3 and 20 (immutable).
     * 
     */
    @Import(name="count")
    private @Nullable Output<Integer> count;

    public Optional<Output<Integer>> count() {
        return Optional.ofNullable(this.count);
    }

    /**
     * The disk size of the worker VMs.  Must be 128 or greater (immutable).
     * 
     */
    @Import(name="diskSizeGB")
    private @Nullable Output<Integer> diskSizeGB;

    public Optional<Output<Integer>> diskSizeGB() {
        return Optional.ofNullable(this.diskSizeGB);
    }

    /**
     * The worker profile name.  Must be &#34;worker&#34; (immutable).
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The Azure resource ID of the worker subnet (immutable).
     * 
     */
    @Import(name="subnetId")
    private @Nullable Output<String> subnetId;

    public Optional<Output<String>> subnetId() {
        return Optional.ofNullable(this.subnetId);
    }

    /**
     * The size of the worker VMs (immutable).
     * 
     */
    @Import(name="vmSize")
    private @Nullable Output<String> vmSize;

    public Optional<Output<String>> vmSize() {
        return Optional.ofNullable(this.vmSize);
    }

    private WorkerProfileArgs() {}

    private WorkerProfileArgs(WorkerProfileArgs $) {
        this.count = $.count;
        this.diskSizeGB = $.diskSizeGB;
        this.name = $.name;
        this.subnetId = $.subnetId;
        this.vmSize = $.vmSize;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkerProfileArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkerProfileArgs $;

        public Builder() {
            $ = new WorkerProfileArgs();
        }

        public Builder(WorkerProfileArgs defaults) {
            $ = new WorkerProfileArgs(Objects.requireNonNull(defaults));
        }

        public Builder count(@Nullable Output<Integer> count) {
            $.count = count;
            return this;
        }

        public Builder count(Integer count) {
            return count(Output.of(count));
        }

        public Builder diskSizeGB(@Nullable Output<Integer> diskSizeGB) {
            $.diskSizeGB = diskSizeGB;
            return this;
        }

        public Builder diskSizeGB(Integer diskSizeGB) {
            return diskSizeGB(Output.of(diskSizeGB));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder subnetId(@Nullable Output<String> subnetId) {
            $.subnetId = subnetId;
            return this;
        }

        public Builder subnetId(String subnetId) {
            return subnetId(Output.of(subnetId));
        }

        public Builder vmSize(@Nullable Output<String> vmSize) {
            $.vmSize = vmSize;
            return this;
        }

        public Builder vmSize(String vmSize) {
            return vmSize(Output.of(vmSize));
        }

        public WorkerProfileArgs build() {
            return $;
        }
    }

}
