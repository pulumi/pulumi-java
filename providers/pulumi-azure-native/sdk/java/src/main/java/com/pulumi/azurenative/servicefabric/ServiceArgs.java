// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.servicefabric;

import com.pulumi.azurenative.servicefabric.enums.ArmServicePackageActivationMode;
import com.pulumi.azurenative.servicefabric.enums.MoveCost;
import com.pulumi.azurenative.servicefabric.enums.ServiceKind;
import com.pulumi.azurenative.servicefabric.inputs.NamedPartitionSchemeDescriptionArgs;
import com.pulumi.azurenative.servicefabric.inputs.ServiceCorrelationDescriptionArgs;
import com.pulumi.azurenative.servicefabric.inputs.ServiceLoadMetricDescriptionArgs;
import com.pulumi.azurenative.servicefabric.inputs.ServicePlacementPolicyDescriptionArgs;
import com.pulumi.azurenative.servicefabric.inputs.SingletonPartitionSchemeDescriptionArgs;
import com.pulumi.azurenative.servicefabric.inputs.UniformInt64RangePartitionSchemeDescriptionArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceArgs Empty = new ServiceArgs();

    /**
     * The name of the application resource.
     * 
     */
    @Import(name="applicationName", required=true)
    private Output<String> applicationName;

    public Output<String> applicationName() {
        return this.applicationName;
    }

    /**
     * The name of the cluster resource.
     * 
     */
    @Import(name="clusterName", required=true)
    private Output<String> clusterName;

    public Output<String> clusterName() {
        return this.clusterName;
    }

    /**
     * A list that describes the correlation of the service with other services.
     * 
     */
    @Import(name="correlationScheme")
    private @Nullable Output<List<ServiceCorrelationDescriptionArgs>> correlationScheme;

    public Optional<Output<List<ServiceCorrelationDescriptionArgs>>> correlationScheme() {
        return Optional.ofNullable(this.correlationScheme);
    }

    /**
     * Specifies the move cost for the service.
     * 
     */
    @Import(name="defaultMoveCost")
    private @Nullable Output<Either<String,MoveCost>> defaultMoveCost;

    public Optional<Output<Either<String,MoveCost>>> defaultMoveCost() {
        return Optional.ofNullable(this.defaultMoveCost);
    }

    /**
     * It will be deprecated in New API, resource location depends on the parent resource.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Describes how the service is partitioned.
     * 
     */
    @Import(name="partitionDescription")
    private @Nullable Output<Object> partitionDescription;

    public Optional<Output<Object>> partitionDescription() {
        return Optional.ofNullable(this.partitionDescription);
    }

    /**
     * The placement constraints as a string. Placement constraints are boolean expressions on node properties and allow for restricting a service to particular nodes based on the service requirements. For example, to place a service on nodes where NodeType is blue specify the following: &#34;NodeColor == blue)&#34;.
     * 
     */
    @Import(name="placementConstraints")
    private @Nullable Output<String> placementConstraints;

    public Optional<Output<String>> placementConstraints() {
        return Optional.ofNullable(this.placementConstraints);
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Dns name used for the service. If this is specified, then the service can be accessed via its DNS name instead of service name.
     * 
     */
    @Import(name="serviceDnsName")
    private @Nullable Output<String> serviceDnsName;

    public Optional<Output<String>> serviceDnsName() {
        return Optional.ofNullable(this.serviceDnsName);
    }

    /**
     * The kind of service (Stateless or Stateful).
     * 
     */
    @Import(name="serviceKind", required=true)
    private Output<Either<String,ServiceKind>> serviceKind;

    public Output<Either<String,ServiceKind>> serviceKind() {
        return this.serviceKind;
    }

    /**
     * The service load metrics is given as an array of ServiceLoadMetricDescription objects.
     * 
     */
    @Import(name="serviceLoadMetrics")
    private @Nullable Output<List<ServiceLoadMetricDescriptionArgs>> serviceLoadMetrics;

    public Optional<Output<List<ServiceLoadMetricDescriptionArgs>>> serviceLoadMetrics() {
        return Optional.ofNullable(this.serviceLoadMetrics);
    }

    /**
     * The name of the service resource in the format of {applicationName}~{serviceName}.
     * 
     */
    @Import(name="serviceName")
    private @Nullable Output<String> serviceName;

    public Optional<Output<String>> serviceName() {
        return Optional.ofNullable(this.serviceName);
    }

    /**
     * The activation Mode of the service package
     * 
     */
    @Import(name="servicePackageActivationMode")
    private @Nullable Output<Either<String,ArmServicePackageActivationMode>> servicePackageActivationMode;

    public Optional<Output<Either<String,ArmServicePackageActivationMode>>> servicePackageActivationMode() {
        return Optional.ofNullable(this.servicePackageActivationMode);
    }

    /**
     * A list that describes the correlation of the service with other services.
     * 
     */
    @Import(name="servicePlacementPolicies")
    private @Nullable Output<List<ServicePlacementPolicyDescriptionArgs>> servicePlacementPolicies;

    public Optional<Output<List<ServicePlacementPolicyDescriptionArgs>>> servicePlacementPolicies() {
        return Optional.ofNullable(this.servicePlacementPolicies);
    }

    /**
     * The name of the service type
     * 
     */
    @Import(name="serviceTypeName")
    private @Nullable Output<String> serviceTypeName;

    public Optional<Output<String>> serviceTypeName() {
        return Optional.ofNullable(this.serviceTypeName);
    }

    /**
     * Azure resource tags.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private ServiceArgs() {}

    private ServiceArgs(ServiceArgs $) {
        this.applicationName = $.applicationName;
        this.clusterName = $.clusterName;
        this.correlationScheme = $.correlationScheme;
        this.defaultMoveCost = $.defaultMoveCost;
        this.location = $.location;
        this.partitionDescription = $.partitionDescription;
        this.placementConstraints = $.placementConstraints;
        this.resourceGroupName = $.resourceGroupName;
        this.serviceDnsName = $.serviceDnsName;
        this.serviceKind = $.serviceKind;
        this.serviceLoadMetrics = $.serviceLoadMetrics;
        this.serviceName = $.serviceName;
        this.servicePackageActivationMode = $.servicePackageActivationMode;
        this.servicePlacementPolicies = $.servicePlacementPolicies;
        this.serviceTypeName = $.serviceTypeName;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceArgs $;

        public Builder() {
            $ = new ServiceArgs();
        }

        public Builder(ServiceArgs defaults) {
            $ = new ServiceArgs(Objects.requireNonNull(defaults));
        }

        public Builder applicationName(Output<String> applicationName) {
            $.applicationName = applicationName;
            return this;
        }

        public Builder applicationName(String applicationName) {
            return applicationName(Output.of(applicationName));
        }

        public Builder clusterName(Output<String> clusterName) {
            $.clusterName = clusterName;
            return this;
        }

        public Builder clusterName(String clusterName) {
            return clusterName(Output.of(clusterName));
        }

        public Builder correlationScheme(@Nullable Output<List<ServiceCorrelationDescriptionArgs>> correlationScheme) {
            $.correlationScheme = correlationScheme;
            return this;
        }

        public Builder correlationScheme(List<ServiceCorrelationDescriptionArgs> correlationScheme) {
            return correlationScheme(Output.of(correlationScheme));
        }

        public Builder correlationScheme(ServiceCorrelationDescriptionArgs... correlationScheme) {
            return correlationScheme(List.of(correlationScheme));
        }

        public Builder defaultMoveCost(@Nullable Output<Either<String,MoveCost>> defaultMoveCost) {
            $.defaultMoveCost = defaultMoveCost;
            return this;
        }

        public Builder defaultMoveCost(Either<String,MoveCost> defaultMoveCost) {
            return defaultMoveCost(Output.of(defaultMoveCost));
        }

        public Builder defaultMoveCost(String defaultMoveCost) {
            return defaultMoveCost(Either.ofLeft(defaultMoveCost));
        }

        public Builder defaultMoveCost(MoveCost defaultMoveCost) {
            return defaultMoveCost(Either.ofRight(defaultMoveCost));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder partitionDescription(@Nullable Output<Object> partitionDescription) {
            $.partitionDescription = partitionDescription;
            return this;
        }

        public Builder partitionDescription(Object partitionDescription) {
            return partitionDescription(Output.of(partitionDescription));
        }

        public Builder placementConstraints(@Nullable Output<String> placementConstraints) {
            $.placementConstraints = placementConstraints;
            return this;
        }

        public Builder placementConstraints(String placementConstraints) {
            return placementConstraints(Output.of(placementConstraints));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder serviceDnsName(@Nullable Output<String> serviceDnsName) {
            $.serviceDnsName = serviceDnsName;
            return this;
        }

        public Builder serviceDnsName(String serviceDnsName) {
            return serviceDnsName(Output.of(serviceDnsName));
        }

        public Builder serviceKind(Output<Either<String,ServiceKind>> serviceKind) {
            $.serviceKind = serviceKind;
            return this;
        }

        public Builder serviceKind(Either<String,ServiceKind> serviceKind) {
            return serviceKind(Output.of(serviceKind));
        }

        public Builder serviceKind(String serviceKind) {
            return serviceKind(Either.ofLeft(serviceKind));
        }

        public Builder serviceKind(ServiceKind serviceKind) {
            return serviceKind(Either.ofRight(serviceKind));
        }

        public Builder serviceLoadMetrics(@Nullable Output<List<ServiceLoadMetricDescriptionArgs>> serviceLoadMetrics) {
            $.serviceLoadMetrics = serviceLoadMetrics;
            return this;
        }

        public Builder serviceLoadMetrics(List<ServiceLoadMetricDescriptionArgs> serviceLoadMetrics) {
            return serviceLoadMetrics(Output.of(serviceLoadMetrics));
        }

        public Builder serviceLoadMetrics(ServiceLoadMetricDescriptionArgs... serviceLoadMetrics) {
            return serviceLoadMetrics(List.of(serviceLoadMetrics));
        }

        public Builder serviceName(@Nullable Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        public Builder servicePackageActivationMode(@Nullable Output<Either<String,ArmServicePackageActivationMode>> servicePackageActivationMode) {
            $.servicePackageActivationMode = servicePackageActivationMode;
            return this;
        }

        public Builder servicePackageActivationMode(Either<String,ArmServicePackageActivationMode> servicePackageActivationMode) {
            return servicePackageActivationMode(Output.of(servicePackageActivationMode));
        }

        public Builder servicePackageActivationMode(String servicePackageActivationMode) {
            return servicePackageActivationMode(Either.ofLeft(servicePackageActivationMode));
        }

        public Builder servicePackageActivationMode(ArmServicePackageActivationMode servicePackageActivationMode) {
            return servicePackageActivationMode(Either.ofRight(servicePackageActivationMode));
        }

        public Builder servicePlacementPolicies(@Nullable Output<List<ServicePlacementPolicyDescriptionArgs>> servicePlacementPolicies) {
            $.servicePlacementPolicies = servicePlacementPolicies;
            return this;
        }

        public Builder servicePlacementPolicies(List<ServicePlacementPolicyDescriptionArgs> servicePlacementPolicies) {
            return servicePlacementPolicies(Output.of(servicePlacementPolicies));
        }

        public Builder servicePlacementPolicies(ServicePlacementPolicyDescriptionArgs... servicePlacementPolicies) {
            return servicePlacementPolicies(List.of(servicePlacementPolicies));
        }

        public Builder serviceTypeName(@Nullable Output<String> serviceTypeName) {
            $.serviceTypeName = serviceTypeName;
            return this;
        }

        public Builder serviceTypeName(String serviceTypeName) {
            return serviceTypeName(Output.of(serviceTypeName));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public ServiceArgs build() {
            $.applicationName = Objects.requireNonNull($.applicationName, "expected parameter 'applicationName' to be non-null");
            $.clusterName = Objects.requireNonNull($.clusterName, "expected parameter 'clusterName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.serviceKind = Objects.requireNonNull($.serviceKind, "expected parameter 'serviceKind' to be non-null");
            return $;
        }
    }

}
