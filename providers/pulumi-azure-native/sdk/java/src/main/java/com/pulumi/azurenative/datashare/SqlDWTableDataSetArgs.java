// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datashare;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SqlDWTableDataSetArgs extends com.pulumi.resources.ResourceArgs {

    public static final SqlDWTableDataSetArgs Empty = new SqlDWTableDataSetArgs();

    /**
     * The name of the share account.
     * 
     */
    @Import(name="accountName", required=true)
    private Output<String> accountName;

    public Output<String> accountName() {
        return this.accountName;
    }

    /**
     * The name of the dataSet.
     * 
     */
    @Import(name="dataSetName")
    private @Nullable Output<String> dataSetName;

    public Optional<Output<String>> dataSetName() {
        return Optional.ofNullable(this.dataSetName);
    }

    /**
     * DataWarehouse name of the source data set
     * 
     */
    @Import(name="dataWarehouseName", required=true)
    private Output<String> dataWarehouseName;

    public Output<String> dataWarehouseName() {
        return this.dataWarehouseName;
    }

    /**
     * Kind of data set.
     * Expected value is &#39;SqlDWTable&#39;.
     * 
     */
    @Import(name="kind", required=true)
    private Output<String> kind;

    public Output<String> kind() {
        return this.kind;
    }

    /**
     * The resource group name.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Schema of the table. Default value is dbo.
     * 
     */
    @Import(name="schemaName", required=true)
    private Output<String> schemaName;

    public Output<String> schemaName() {
        return this.schemaName;
    }

    /**
     * The name of the share to add the data set to.
     * 
     */
    @Import(name="shareName", required=true)
    private Output<String> shareName;

    public Output<String> shareName() {
        return this.shareName;
    }

    /**
     * Resource id of SQL server
     * 
     */
    @Import(name="sqlServerResourceId", required=true)
    private Output<String> sqlServerResourceId;

    public Output<String> sqlServerResourceId() {
        return this.sqlServerResourceId;
    }

    /**
     * SQL DW table name.
     * 
     */
    @Import(name="tableName", required=true)
    private Output<String> tableName;

    public Output<String> tableName() {
        return this.tableName;
    }

    private SqlDWTableDataSetArgs() {}

    private SqlDWTableDataSetArgs(SqlDWTableDataSetArgs $) {
        this.accountName = $.accountName;
        this.dataSetName = $.dataSetName;
        this.dataWarehouseName = $.dataWarehouseName;
        this.kind = $.kind;
        this.resourceGroupName = $.resourceGroupName;
        this.schemaName = $.schemaName;
        this.shareName = $.shareName;
        this.sqlServerResourceId = $.sqlServerResourceId;
        this.tableName = $.tableName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SqlDWTableDataSetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SqlDWTableDataSetArgs $;

        public Builder() {
            $ = new SqlDWTableDataSetArgs();
        }

        public Builder(SqlDWTableDataSetArgs defaults) {
            $ = new SqlDWTableDataSetArgs(Objects.requireNonNull(defaults));
        }

        public Builder accountName(Output<String> accountName) {
            $.accountName = accountName;
            return this;
        }

        public Builder accountName(String accountName) {
            return accountName(Output.of(accountName));
        }

        public Builder dataSetName(@Nullable Output<String> dataSetName) {
            $.dataSetName = dataSetName;
            return this;
        }

        public Builder dataSetName(String dataSetName) {
            return dataSetName(Output.of(dataSetName));
        }

        public Builder dataWarehouseName(Output<String> dataWarehouseName) {
            $.dataWarehouseName = dataWarehouseName;
            return this;
        }

        public Builder dataWarehouseName(String dataWarehouseName) {
            return dataWarehouseName(Output.of(dataWarehouseName));
        }

        public Builder kind(Output<String> kind) {
            $.kind = kind;
            return this;
        }

        public Builder kind(String kind) {
            return kind(Output.of(kind));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder schemaName(Output<String> schemaName) {
            $.schemaName = schemaName;
            return this;
        }

        public Builder schemaName(String schemaName) {
            return schemaName(Output.of(schemaName));
        }

        public Builder shareName(Output<String> shareName) {
            $.shareName = shareName;
            return this;
        }

        public Builder shareName(String shareName) {
            return shareName(Output.of(shareName));
        }

        public Builder sqlServerResourceId(Output<String> sqlServerResourceId) {
            $.sqlServerResourceId = sqlServerResourceId;
            return this;
        }

        public Builder sqlServerResourceId(String sqlServerResourceId) {
            return sqlServerResourceId(Output.of(sqlServerResourceId));
        }

        public Builder tableName(Output<String> tableName) {
            $.tableName = tableName;
            return this;
        }

        public Builder tableName(String tableName) {
            return tableName(Output.of(tableName));
        }

        public SqlDWTableDataSetArgs build() {
            $.accountName = Objects.requireNonNull($.accountName, "expected parameter 'accountName' to be non-null");
            $.dataWarehouseName = Objects.requireNonNull($.dataWarehouseName, "expected parameter 'dataWarehouseName' to be non-null");
            $.kind = Codegen.stringProp("kind").output().arg($.kind).require();
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.schemaName = Objects.requireNonNull($.schemaName, "expected parameter 'schemaName' to be non-null");
            $.shareName = Objects.requireNonNull($.shareName, "expected parameter 'shareName' to be non-null");
            $.sqlServerResourceId = Objects.requireNonNull($.sqlServerResourceId, "expected parameter 'sqlServerResourceId' to be non-null");
            $.tableName = Objects.requireNonNull($.tableName, "expected parameter 'tableName' to be non-null");
            return $;
        }
    }

}
