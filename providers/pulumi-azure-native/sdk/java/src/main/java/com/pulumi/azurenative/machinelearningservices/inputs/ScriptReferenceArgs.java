// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.machinelearningservices.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Script reference
 * 
 */
public final class ScriptReferenceArgs extends com.pulumi.resources.ResourceArgs {

    public static final ScriptReferenceArgs Empty = new ScriptReferenceArgs();

    /**
     * Optional command line arguments passed to the script to run.
     * 
     */
    @Import(name="scriptArguments")
      private final @Nullable Output<String> scriptArguments;

    public Output<String> scriptArguments() {
        return this.scriptArguments == null ? Codegen.empty() : this.scriptArguments;
    }

    /**
     * The location of scripts in the mounted volume.
     * 
     */
    @Import(name="scriptData")
      private final @Nullable Output<String> scriptData;

    public Output<String> scriptData() {
        return this.scriptData == null ? Codegen.empty() : this.scriptData;
    }

    /**
     * The storage source of the script: inline, workspace.
     * 
     */
    @Import(name="scriptSource")
      private final @Nullable Output<String> scriptSource;

    public Output<String> scriptSource() {
        return this.scriptSource == null ? Codegen.empty() : this.scriptSource;
    }

    /**
     * Optional time period passed to timeout command.
     * 
     */
    @Import(name="timeout")
      private final @Nullable Output<String> timeout;

    public Output<String> timeout() {
        return this.timeout == null ? Codegen.empty() : this.timeout;
    }

    public ScriptReferenceArgs(
        @Nullable Output<String> scriptArguments,
        @Nullable Output<String> scriptData,
        @Nullable Output<String> scriptSource,
        @Nullable Output<String> timeout) {
        this.scriptArguments = scriptArguments;
        this.scriptData = scriptData;
        this.scriptSource = scriptSource;
        this.timeout = timeout;
    }

    private ScriptReferenceArgs() {
        this.scriptArguments = Codegen.empty();
        this.scriptData = Codegen.empty();
        this.scriptSource = Codegen.empty();
        this.timeout = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ScriptReferenceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> scriptArguments;
        private @Nullable Output<String> scriptData;
        private @Nullable Output<String> scriptSource;
        private @Nullable Output<String> timeout;

        public Builder() {
    	      // Empty
        }

        public Builder(ScriptReferenceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.scriptArguments = defaults.scriptArguments;
    	      this.scriptData = defaults.scriptData;
    	      this.scriptSource = defaults.scriptSource;
    	      this.timeout = defaults.timeout;
        }

        public Builder scriptArguments(@Nullable Output<String> scriptArguments) {
            this.scriptArguments = scriptArguments;
            return this;
        }
        public Builder scriptArguments(@Nullable String scriptArguments) {
            this.scriptArguments = Codegen.ofNullable(scriptArguments);
            return this;
        }
        public Builder scriptData(@Nullable Output<String> scriptData) {
            this.scriptData = scriptData;
            return this;
        }
        public Builder scriptData(@Nullable String scriptData) {
            this.scriptData = Codegen.ofNullable(scriptData);
            return this;
        }
        public Builder scriptSource(@Nullable Output<String> scriptSource) {
            this.scriptSource = scriptSource;
            return this;
        }
        public Builder scriptSource(@Nullable String scriptSource) {
            this.scriptSource = Codegen.ofNullable(scriptSource);
            return this;
        }
        public Builder timeout(@Nullable Output<String> timeout) {
            this.timeout = timeout;
            return this;
        }
        public Builder timeout(@Nullable String timeout) {
            this.timeout = Codegen.ofNullable(timeout);
            return this;
        }        public ScriptReferenceArgs build() {
            return new ScriptReferenceArgs(scriptArguments, scriptData, scriptSource, timeout);
        }
    }
}
