// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.machinelearningservices.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Script reference
 * 
 */
public final class ScriptReferenceArgs extends com.pulumi.resources.ResourceArgs {

    public static final ScriptReferenceArgs Empty = new ScriptReferenceArgs();

    /**
     * Optional command line arguments passed to the script to run.
     * 
     */
    @Import(name="scriptArguments")
    private @Nullable Output<String> scriptArguments;

    public Optional<Output<String>> scriptArguments() {
        return Optional.ofNullable(this.scriptArguments);
    }

    /**
     * The location of scripts in the mounted volume.
     * 
     */
    @Import(name="scriptData")
    private @Nullable Output<String> scriptData;

    public Optional<Output<String>> scriptData() {
        return Optional.ofNullable(this.scriptData);
    }

    /**
     * The storage source of the script: inline, workspace.
     * 
     */
    @Import(name="scriptSource")
    private @Nullable Output<String> scriptSource;

    public Optional<Output<String>> scriptSource() {
        return Optional.ofNullable(this.scriptSource);
    }

    /**
     * Optional time period passed to timeout command.
     * 
     */
    @Import(name="timeout")
    private @Nullable Output<String> timeout;

    public Optional<Output<String>> timeout() {
        return Optional.ofNullable(this.timeout);
    }

    private ScriptReferenceArgs() {}

    private ScriptReferenceArgs(ScriptReferenceArgs $) {
        this.scriptArguments = $.scriptArguments;
        this.scriptData = $.scriptData;
        this.scriptSource = $.scriptSource;
        this.timeout = $.timeout;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ScriptReferenceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ScriptReferenceArgs $;

        public Builder() {
            $ = new ScriptReferenceArgs();
        }

        public Builder(ScriptReferenceArgs defaults) {
            $ = new ScriptReferenceArgs(Objects.requireNonNull(defaults));
        }

        public Builder scriptArguments(@Nullable Output<String> scriptArguments) {
            $.scriptArguments = scriptArguments;
            return this;
        }

        public Builder scriptArguments(String scriptArguments) {
            return scriptArguments(Output.of(scriptArguments));
        }

        public Builder scriptData(@Nullable Output<String> scriptData) {
            $.scriptData = scriptData;
            return this;
        }

        public Builder scriptData(String scriptData) {
            return scriptData(Output.of(scriptData));
        }

        public Builder scriptSource(@Nullable Output<String> scriptSource) {
            $.scriptSource = scriptSource;
            return this;
        }

        public Builder scriptSource(String scriptSource) {
            return scriptSource(Output.of(scriptSource));
        }

        public Builder timeout(@Nullable Output<String> timeout) {
            $.timeout = timeout;
            return this;
        }

        public Builder timeout(String timeout) {
            return timeout(Output.of(timeout));
        }

        public ScriptReferenceArgs build() {
            return $;
        }
    }

}
