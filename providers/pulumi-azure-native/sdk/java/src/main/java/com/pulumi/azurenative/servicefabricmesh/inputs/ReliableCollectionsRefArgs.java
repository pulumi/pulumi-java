// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.servicefabricmesh.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Specifying this parameter adds support for reliable collections
 * 
 */
public final class ReliableCollectionsRefArgs extends com.pulumi.resources.ResourceArgs {

    public static final ReliableCollectionsRefArgs Empty = new ReliableCollectionsRefArgs();

    /**
     * False (the default) if ReliableCollections state is persisted to disk as usual. True if you do not want to persist state, in which case replication is still enabled and you can use ReliableCollections as distributed cache.
     * 
     */
    @Import(name="doNotPersistState")
    private @Nullable Output<Boolean> doNotPersistState;

    /**
     * @return False (the default) if ReliableCollections state is persisted to disk as usual. True if you do not want to persist state, in which case replication is still enabled and you can use ReliableCollections as distributed cache.
     * 
     */
    public Optional<Output<Boolean>> doNotPersistState() {
        return Optional.ofNullable(this.doNotPersistState);
    }

    /**
     * Name of ReliableCollection resource. Right now it&#39;s not used and you can use any string.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Name of ReliableCollection resource. Right now it&#39;s not used and you can use any string.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    private ReliableCollectionsRefArgs() {}

    private ReliableCollectionsRefArgs(ReliableCollectionsRefArgs $) {
        this.doNotPersistState = $.doNotPersistState;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ReliableCollectionsRefArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ReliableCollectionsRefArgs $;

        public Builder() {
            $ = new ReliableCollectionsRefArgs();
        }

        public Builder(ReliableCollectionsRefArgs defaults) {
            $ = new ReliableCollectionsRefArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param doNotPersistState False (the default) if ReliableCollections state is persisted to disk as usual. True if you do not want to persist state, in which case replication is still enabled and you can use ReliableCollections as distributed cache.
         * 
         * @return builder
         * 
         */
        public Builder doNotPersistState(@Nullable Output<Boolean> doNotPersistState) {
            $.doNotPersistState = doNotPersistState;
            return this;
        }

        /**
         * @param doNotPersistState False (the default) if ReliableCollections state is persisted to disk as usual. True if you do not want to persist state, in which case replication is still enabled and you can use ReliableCollections as distributed cache.
         * 
         * @return builder
         * 
         */
        public Builder doNotPersistState(Boolean doNotPersistState) {
            return doNotPersistState(Output.of(doNotPersistState));
        }

        /**
         * @param name Name of ReliableCollection resource. Right now it&#39;s not used and you can use any string.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of ReliableCollection resource. Right now it&#39;s not used and you can use any string.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public ReliableCollectionsRefArgs build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            return $;
        }
    }

}
