// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.outputs;

import com.pulumi.azurenative.datafactory.outputs.ActivityDependencyResponse;
import com.pulumi.azurenative.datafactory.outputs.ActivityPolicyResponse;
import com.pulumi.azurenative.datafactory.outputs.LinkedServiceReferenceResponse;
import com.pulumi.azurenative.datafactory.outputs.UserPropertyResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class HDInsightSparkActivityResponse {
    /**
     * @return The user-specified arguments to HDInsightSparkActivity.
     * 
     */
    private final @Nullable List<Object> arguments;
    /**
     * @return The application&#39;s Java/Spark main class.
     * 
     */
    private final @Nullable String className;
    /**
     * @return Activity depends on condition.
     * 
     */
    private final @Nullable List<ActivityDependencyResponse> dependsOn;
    /**
     * @return Activity description.
     * 
     */
    private final @Nullable String description;
    /**
     * @return The relative path to the root folder of the code/package to be executed. Type: string (or Expression with resultType string).
     * 
     */
    private final Object entryFilePath;
    /**
     * @return Debug info option.
     * 
     */
    private final @Nullable String getDebugInfo;
    /**
     * @return Linked service reference.
     * 
     */
    private final @Nullable LinkedServiceReferenceResponse linkedServiceName;
    /**
     * @return Activity name.
     * 
     */
    private final String name;
    /**
     * @return Activity policy.
     * 
     */
    private final @Nullable ActivityPolicyResponse policy;
    /**
     * @return The user to impersonate that will execute the job. Type: string (or Expression with resultType string).
     * 
     */
    private final @Nullable Object proxyUser;
    /**
     * @return The root path in &#39;sparkJobLinkedService&#39; for all the job’s files. Type: string (or Expression with resultType string).
     * 
     */
    private final Object rootPath;
    /**
     * @return Spark configuration property.
     * 
     */
    private final @Nullable Map<String,Object> sparkConfig;
    /**
     * @return The storage linked service for uploading the entry file and dependencies, and for receiving logs.
     * 
     */
    private final @Nullable LinkedServiceReferenceResponse sparkJobLinkedService;
    /**
     * @return Type of activity.
     * Expected value is &#39;HDInsightSpark&#39;.
     * 
     */
    private final String type;
    /**
     * @return Activity user properties.
     * 
     */
    private final @Nullable List<UserPropertyResponse> userProperties;

    @CustomType.Constructor
    private HDInsightSparkActivityResponse(
        @CustomType.Parameter("arguments") @Nullable List<Object> arguments,
        @CustomType.Parameter("className") @Nullable String className,
        @CustomType.Parameter("dependsOn") @Nullable List<ActivityDependencyResponse> dependsOn,
        @CustomType.Parameter("description") @Nullable String description,
        @CustomType.Parameter("entryFilePath") Object entryFilePath,
        @CustomType.Parameter("getDebugInfo") @Nullable String getDebugInfo,
        @CustomType.Parameter("linkedServiceName") @Nullable LinkedServiceReferenceResponse linkedServiceName,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("policy") @Nullable ActivityPolicyResponse policy,
        @CustomType.Parameter("proxyUser") @Nullable Object proxyUser,
        @CustomType.Parameter("rootPath") Object rootPath,
        @CustomType.Parameter("sparkConfig") @Nullable Map<String,Object> sparkConfig,
        @CustomType.Parameter("sparkJobLinkedService") @Nullable LinkedServiceReferenceResponse sparkJobLinkedService,
        @CustomType.Parameter("type") String type,
        @CustomType.Parameter("userProperties") @Nullable List<UserPropertyResponse> userProperties) {
        this.arguments = arguments;
        this.className = className;
        this.dependsOn = dependsOn;
        this.description = description;
        this.entryFilePath = entryFilePath;
        this.getDebugInfo = getDebugInfo;
        this.linkedServiceName = linkedServiceName;
        this.name = name;
        this.policy = policy;
        this.proxyUser = proxyUser;
        this.rootPath = rootPath;
        this.sparkConfig = sparkConfig;
        this.sparkJobLinkedService = sparkJobLinkedService;
        this.type = type;
        this.userProperties = userProperties;
    }

    /**
     * @return The user-specified arguments to HDInsightSparkActivity.
     * 
     */
    public List<Object> arguments() {
        return this.arguments == null ? List.of() : this.arguments;
    }
    /**
     * @return The application&#39;s Java/Spark main class.
     * 
     */
    public Optional<String> className() {
        return Optional.ofNullable(this.className);
    }
    /**
     * @return Activity depends on condition.
     * 
     */
    public List<ActivityDependencyResponse> dependsOn() {
        return this.dependsOn == null ? List.of() : this.dependsOn;
    }
    /**
     * @return Activity description.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return The relative path to the root folder of the code/package to be executed. Type: string (or Expression with resultType string).
     * 
     */
    public Object entryFilePath() {
        return this.entryFilePath;
    }
    /**
     * @return Debug info option.
     * 
     */
    public Optional<String> getDebugInfo() {
        return Optional.ofNullable(this.getDebugInfo);
    }
    /**
     * @return Linked service reference.
     * 
     */
    public Optional<LinkedServiceReferenceResponse> linkedServiceName() {
        return Optional.ofNullable(this.linkedServiceName);
    }
    /**
     * @return Activity name.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Activity policy.
     * 
     */
    public Optional<ActivityPolicyResponse> policy() {
        return Optional.ofNullable(this.policy);
    }
    /**
     * @return The user to impersonate that will execute the job. Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Object> proxyUser() {
        return Optional.ofNullable(this.proxyUser);
    }
    /**
     * @return The root path in &#39;sparkJobLinkedService&#39; for all the job’s files. Type: string (or Expression with resultType string).
     * 
     */
    public Object rootPath() {
        return this.rootPath;
    }
    /**
     * @return Spark configuration property.
     * 
     */
    public Map<String,Object> sparkConfig() {
        return this.sparkConfig == null ? Map.of() : this.sparkConfig;
    }
    /**
     * @return The storage linked service for uploading the entry file and dependencies, and for receiving logs.
     * 
     */
    public Optional<LinkedServiceReferenceResponse> sparkJobLinkedService() {
        return Optional.ofNullable(this.sparkJobLinkedService);
    }
    /**
     * @return Type of activity.
     * Expected value is &#39;HDInsightSpark&#39;.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Activity user properties.
     * 
     */
    public List<UserPropertyResponse> userProperties() {
        return this.userProperties == null ? List.of() : this.userProperties;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(HDInsightSparkActivityResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<Object> arguments;
        private @Nullable String className;
        private @Nullable List<ActivityDependencyResponse> dependsOn;
        private @Nullable String description;
        private Object entryFilePath;
        private @Nullable String getDebugInfo;
        private @Nullable LinkedServiceReferenceResponse linkedServiceName;
        private String name;
        private @Nullable ActivityPolicyResponse policy;
        private @Nullable Object proxyUser;
        private Object rootPath;
        private @Nullable Map<String,Object> sparkConfig;
        private @Nullable LinkedServiceReferenceResponse sparkJobLinkedService;
        private String type;
        private @Nullable List<UserPropertyResponse> userProperties;

        public Builder() {
    	      // Empty
        }

        public Builder(HDInsightSparkActivityResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arguments = defaults.arguments;
    	      this.className = defaults.className;
    	      this.dependsOn = defaults.dependsOn;
    	      this.description = defaults.description;
    	      this.entryFilePath = defaults.entryFilePath;
    	      this.getDebugInfo = defaults.getDebugInfo;
    	      this.linkedServiceName = defaults.linkedServiceName;
    	      this.name = defaults.name;
    	      this.policy = defaults.policy;
    	      this.proxyUser = defaults.proxyUser;
    	      this.rootPath = defaults.rootPath;
    	      this.sparkConfig = defaults.sparkConfig;
    	      this.sparkJobLinkedService = defaults.sparkJobLinkedService;
    	      this.type = defaults.type;
    	      this.userProperties = defaults.userProperties;
        }

        public Builder arguments(@Nullable List<Object> arguments) {
            this.arguments = arguments;
            return this;
        }
        public Builder arguments(Object... arguments) {
            return arguments(List.of(arguments));
        }
        public Builder className(@Nullable String className) {
            this.className = className;
            return this;
        }
        public Builder dependsOn(@Nullable List<ActivityDependencyResponse> dependsOn) {
            this.dependsOn = dependsOn;
            return this;
        }
        public Builder dependsOn(ActivityDependencyResponse... dependsOn) {
            return dependsOn(List.of(dependsOn));
        }
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        public Builder entryFilePath(Object entryFilePath) {
            this.entryFilePath = Objects.requireNonNull(entryFilePath);
            return this;
        }
        public Builder getDebugInfo(@Nullable String getDebugInfo) {
            this.getDebugInfo = getDebugInfo;
            return this;
        }
        public Builder linkedServiceName(@Nullable LinkedServiceReferenceResponse linkedServiceName) {
            this.linkedServiceName = linkedServiceName;
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder policy(@Nullable ActivityPolicyResponse policy) {
            this.policy = policy;
            return this;
        }
        public Builder proxyUser(@Nullable Object proxyUser) {
            this.proxyUser = proxyUser;
            return this;
        }
        public Builder rootPath(Object rootPath) {
            this.rootPath = Objects.requireNonNull(rootPath);
            return this;
        }
        public Builder sparkConfig(@Nullable Map<String,Object> sparkConfig) {
            this.sparkConfig = sparkConfig;
            return this;
        }
        public Builder sparkJobLinkedService(@Nullable LinkedServiceReferenceResponse sparkJobLinkedService) {
            this.sparkJobLinkedService = sparkJobLinkedService;
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder userProperties(@Nullable List<UserPropertyResponse> userProperties) {
            this.userProperties = userProperties;
            return this;
        }
        public Builder userProperties(UserPropertyResponse... userProperties) {
            return userProperties(List.of(userProperties));
        }        public HDInsightSparkActivityResponse build() {
            return new HDInsightSparkActivityResponse(arguments, className, dependsOn, description, entryFilePath, getDebugInfo, linkedServiceName, name, policy, proxyUser, rootPath, sparkConfig, sparkJobLinkedService, type, userProperties);
        }
    }
}
