// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.domainregistration.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Address information for domain registration.
 * 
 */
public final class AddressArgs extends com.pulumi.resources.ResourceArgs {

    public static final AddressArgs Empty = new AddressArgs();

    /**
     * First line of an Address.
     * 
     */
    @Import(name="address1", required=true)
    private Output<String> address1;

    public Output<String> address1() {
        return this.address1;
    }

    /**
     * The second line of the Address. Optional.
     * 
     */
    @Import(name="address2")
    private @Nullable Output<String> address2;

    public Optional<Output<String>> address2() {
        return Optional.ofNullable(this.address2);
    }

    /**
     * The city for the address.
     * 
     */
    @Import(name="city", required=true)
    private Output<String> city;

    public Output<String> city() {
        return this.city;
    }

    /**
     * The country for the address.
     * 
     */
    @Import(name="country", required=true)
    private Output<String> country;

    public Output<String> country() {
        return this.country;
    }

    /**
     * The postal code for the address.
     * 
     */
    @Import(name="postalCode", required=true)
    private Output<String> postalCode;

    public Output<String> postalCode() {
        return this.postalCode;
    }

    /**
     * The state or province for the address.
     * 
     */
    @Import(name="state", required=true)
    private Output<String> state;

    public Output<String> state() {
        return this.state;
    }

    private AddressArgs() {}

    private AddressArgs(AddressArgs $) {
        this.address1 = $.address1;
        this.address2 = $.address2;
        this.city = $.city;
        this.country = $.country;
        this.postalCode = $.postalCode;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AddressArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AddressArgs $;

        public Builder() {
            $ = new AddressArgs();
        }

        public Builder(AddressArgs defaults) {
            $ = new AddressArgs(Objects.requireNonNull(defaults));
        }

        public Builder address1(Output<String> address1) {
            $.address1 = address1;
            return this;
        }

        public Builder address1(String address1) {
            return address1(Output.of(address1));
        }

        public Builder address2(@Nullable Output<String> address2) {
            $.address2 = address2;
            return this;
        }

        public Builder address2(String address2) {
            return address2(Output.of(address2));
        }

        public Builder city(Output<String> city) {
            $.city = city;
            return this;
        }

        public Builder city(String city) {
            return city(Output.of(city));
        }

        public Builder country(Output<String> country) {
            $.country = country;
            return this;
        }

        public Builder country(String country) {
            return country(Output.of(country));
        }

        public Builder postalCode(Output<String> postalCode) {
            $.postalCode = postalCode;
            return this;
        }

        public Builder postalCode(String postalCode) {
            return postalCode(Output.of(postalCode));
        }

        public Builder state(Output<String> state) {
            $.state = state;
            return this;
        }

        public Builder state(String state) {
            return state(Output.of(state));
        }

        public AddressArgs build() {
            $.address1 = Objects.requireNonNull($.address1, "expected parameter 'address1' to be non-null");
            $.city = Objects.requireNonNull($.city, "expected parameter 'city' to be non-null");
            $.country = Objects.requireNonNull($.country, "expected parameter 'country' to be non-null");
            $.postalCode = Objects.requireNonNull($.postalCode, "expected parameter 'postalCode' to be non-null");
            $.state = Objects.requireNonNull($.state, "expected parameter 'state' to be non-null");
            return $;
        }
    }

}
