// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.insights.inputs;

import com.pulumi.azurenative.insights.inputs.RuleManagementEventClaimsDataSourceResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A rule management event data source. The discriminator fields is always RuleManagementEventDataSource in this case.
 * 
 */
public final class RuleManagementEventDataSourceResponse extends com.pulumi.resources.InvokeArgs {

    public static final RuleManagementEventDataSourceResponse Empty = new RuleManagementEventDataSourceResponse();

    /**
     * the claims.
     * 
     */
    @Import(name="claims")
    private @Nullable RuleManagementEventClaimsDataSourceResponse claims;

    public Optional<RuleManagementEventClaimsDataSourceResponse> claims() {
        return Optional.ofNullable(this.claims);
    }

    /**
     * the event name.
     * 
     */
    @Import(name="eventName")
    private @Nullable String eventName;

    public Optional<String> eventName() {
        return Optional.ofNullable(this.eventName);
    }

    /**
     * the event source.
     * 
     */
    @Import(name="eventSource")
    private @Nullable String eventSource;

    public Optional<String> eventSource() {
        return Optional.ofNullable(this.eventSource);
    }

    /**
     * the legacy resource identifier of the resource the rule monitors. **NOTE**: this property cannot be updated for an existing rule.
     * 
     */
    @Import(name="legacyResourceId")
    private @Nullable String legacyResourceId;

    public Optional<String> legacyResourceId() {
        return Optional.ofNullable(this.legacyResourceId);
    }

    /**
     * the level.
     * 
     */
    @Import(name="level")
    private @Nullable String level;

    public Optional<String> level() {
        return Optional.ofNullable(this.level);
    }

    /**
     * the namespace of the metric.
     * 
     */
    @Import(name="metricNamespace")
    private @Nullable String metricNamespace;

    public Optional<String> metricNamespace() {
        return Optional.ofNullable(this.metricNamespace);
    }

    /**
     * specifies the type of data source. There are two types of rule data sources: RuleMetricDataSource and RuleManagementEventDataSource
     * Expected value is &#39;Microsoft.Azure.Management.Insights.Models.RuleManagementEventDataSource&#39;.
     * 
     */
    @Import(name="odataType", required=true)
    private String odataType;

    public String odataType() {
        return this.odataType;
    }

    /**
     * The name of the operation that should be checked for. If no name is provided, any operation will match.
     * 
     */
    @Import(name="operationName")
    private @Nullable String operationName;

    public Optional<String> operationName() {
        return Optional.ofNullable(this.operationName);
    }

    /**
     * the resource group name.
     * 
     */
    @Import(name="resourceGroupName")
    private @Nullable String resourceGroupName;

    public Optional<String> resourceGroupName() {
        return Optional.ofNullable(this.resourceGroupName);
    }

    /**
     * the location of the resource.
     * 
     */
    @Import(name="resourceLocation")
    private @Nullable String resourceLocation;

    public Optional<String> resourceLocation() {
        return Optional.ofNullable(this.resourceLocation);
    }

    /**
     * the resource provider name.
     * 
     */
    @Import(name="resourceProviderName")
    private @Nullable String resourceProviderName;

    public Optional<String> resourceProviderName() {
        return Optional.ofNullable(this.resourceProviderName);
    }

    /**
     * the resource identifier of the resource the rule monitors. **NOTE**: this property cannot be updated for an existing rule.
     * 
     */
    @Import(name="resourceUri")
    private @Nullable String resourceUri;

    public Optional<String> resourceUri() {
        return Optional.ofNullable(this.resourceUri);
    }

    /**
     * The status of the operation that should be checked for. If no status is provided, any status will match.
     * 
     */
    @Import(name="status")
    private @Nullable String status;

    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * the substatus.
     * 
     */
    @Import(name="subStatus")
    private @Nullable String subStatus;

    public Optional<String> subStatus() {
        return Optional.ofNullable(this.subStatus);
    }

    private RuleManagementEventDataSourceResponse() {}

    private RuleManagementEventDataSourceResponse(RuleManagementEventDataSourceResponse $) {
        this.claims = $.claims;
        this.eventName = $.eventName;
        this.eventSource = $.eventSource;
        this.legacyResourceId = $.legacyResourceId;
        this.level = $.level;
        this.metricNamespace = $.metricNamespace;
        this.odataType = $.odataType;
        this.operationName = $.operationName;
        this.resourceGroupName = $.resourceGroupName;
        this.resourceLocation = $.resourceLocation;
        this.resourceProviderName = $.resourceProviderName;
        this.resourceUri = $.resourceUri;
        this.status = $.status;
        this.subStatus = $.subStatus;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RuleManagementEventDataSourceResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RuleManagementEventDataSourceResponse $;

        public Builder() {
            $ = new RuleManagementEventDataSourceResponse();
        }

        public Builder(RuleManagementEventDataSourceResponse defaults) {
            $ = new RuleManagementEventDataSourceResponse(Objects.requireNonNull(defaults));
        }

        public Builder claims(@Nullable RuleManagementEventClaimsDataSourceResponse claims) {
            $.claims = claims;
            return this;
        }

        public Builder eventName(@Nullable String eventName) {
            $.eventName = eventName;
            return this;
        }

        public Builder eventSource(@Nullable String eventSource) {
            $.eventSource = eventSource;
            return this;
        }

        public Builder legacyResourceId(@Nullable String legacyResourceId) {
            $.legacyResourceId = legacyResourceId;
            return this;
        }

        public Builder level(@Nullable String level) {
            $.level = level;
            return this;
        }

        public Builder metricNamespace(@Nullable String metricNamespace) {
            $.metricNamespace = metricNamespace;
            return this;
        }

        public Builder odataType(String odataType) {
            $.odataType = odataType;
            return this;
        }

        public Builder operationName(@Nullable String operationName) {
            $.operationName = operationName;
            return this;
        }

        public Builder resourceGroupName(@Nullable String resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceLocation(@Nullable String resourceLocation) {
            $.resourceLocation = resourceLocation;
            return this;
        }

        public Builder resourceProviderName(@Nullable String resourceProviderName) {
            $.resourceProviderName = resourceProviderName;
            return this;
        }

        public Builder resourceUri(@Nullable String resourceUri) {
            $.resourceUri = resourceUri;
            return this;
        }

        public Builder status(@Nullable String status) {
            $.status = status;
            return this;
        }

        public Builder subStatus(@Nullable String subStatus) {
            $.subStatus = subStatus;
            return this;
        }

        public RuleManagementEventDataSourceResponse build() {
            $.odataType = Codegen.stringProp("odataType").arg($.odataType).require();
            return $;
        }
    }

}
