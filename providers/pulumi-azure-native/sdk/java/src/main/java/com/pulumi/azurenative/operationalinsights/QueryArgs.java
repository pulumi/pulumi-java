// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.operationalinsights;

import com.pulumi.azurenative.operationalinsights.inputs.LogAnalyticsQueryPackQueryPropertiesRelatedArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class QueryArgs extends com.pulumi.resources.ResourceArgs {

    public static final QueryArgs Empty = new QueryArgs();

    /**
     * Body of the query.
     * 
     */
    @Import(name="body", required=true)
      private final Output<String> body;

    public Output<String> body() {
        return this.body;
    }

    /**
     * Description of the query.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> description() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * Unique display name for your query within the Query Pack.
     * 
     */
    @Import(name="displayName", required=true)
      private final Output<String> displayName;

    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * The id of a specific query defined in the Log Analytics QueryPack
     * 
     */
    @Import(name="id")
      private final @Nullable Output<String> id;

    public Output<String> id() {
        return this.id == null ? Codegen.empty() : this.id;
    }

    /**
     * Additional properties that can be set for the query.
     * 
     */
    @Import(name="properties")
      private final @Nullable Output<Object> properties;

    public Output<Object> properties() {
        return this.properties == null ? Codegen.empty() : this.properties;
    }

    /**
     * The name of the Log Analytics QueryPack resource.
     * 
     */
    @Import(name="queryPackName", required=true)
      private final Output<String> queryPackName;

    public Output<String> queryPackName() {
        return this.queryPackName;
    }

    /**
     * The related metadata items for the function.
     * 
     */
    @Import(name="related")
      private final @Nullable Output<LogAnalyticsQueryPackQueryPropertiesRelatedArgs> related;

    public Output<LogAnalyticsQueryPackQueryPropertiesRelatedArgs> related() {
        return this.related == null ? Codegen.empty() : this.related;
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Tags associated with the query.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,List<String>>> tags;

    public Output<Map<String,List<String>>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    public QueryArgs(
        Output<String> body,
        @Nullable Output<String> description,
        Output<String> displayName,
        @Nullable Output<String> id,
        @Nullable Output<Object> properties,
        Output<String> queryPackName,
        @Nullable Output<LogAnalyticsQueryPackQueryPropertiesRelatedArgs> related,
        Output<String> resourceGroupName,
        @Nullable Output<Map<String,List<String>>> tags) {
        this.body = Objects.requireNonNull(body, "expected parameter 'body' to be non-null");
        this.description = description;
        this.displayName = Objects.requireNonNull(displayName, "expected parameter 'displayName' to be non-null");
        this.id = id;
        this.properties = properties;
        this.queryPackName = Objects.requireNonNull(queryPackName, "expected parameter 'queryPackName' to be non-null");
        this.related = related;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.tags = tags;
    }

    private QueryArgs() {
        this.body = Codegen.empty();
        this.description = Codegen.empty();
        this.displayName = Codegen.empty();
        this.id = Codegen.empty();
        this.properties = Codegen.empty();
        this.queryPackName = Codegen.empty();
        this.related = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.tags = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(QueryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> body;
        private @Nullable Output<String> description;
        private Output<String> displayName;
        private @Nullable Output<String> id;
        private @Nullable Output<Object> properties;
        private Output<String> queryPackName;
        private @Nullable Output<LogAnalyticsQueryPackQueryPropertiesRelatedArgs> related;
        private Output<String> resourceGroupName;
        private @Nullable Output<Map<String,List<String>>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(QueryArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.body = defaults.body;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.id = defaults.id;
    	      this.properties = defaults.properties;
    	      this.queryPackName = defaults.queryPackName;
    	      this.related = defaults.related;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.tags = defaults.tags;
        }

        public Builder body(Output<String> body) {
            this.body = Objects.requireNonNull(body);
            return this;
        }
        public Builder body(String body) {
            this.body = Output.of(Objects.requireNonNull(body));
            return this;
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder displayName(Output<String> displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        public Builder displayName(String displayName) {
            this.displayName = Output.of(Objects.requireNonNull(displayName));
            return this;
        }
        public Builder id(@Nullable Output<String> id) {
            this.id = id;
            return this;
        }
        public Builder id(@Nullable String id) {
            this.id = Codegen.ofNullable(id);
            return this;
        }
        public Builder properties(@Nullable Output<Object> properties) {
            this.properties = properties;
            return this;
        }
        public Builder properties(@Nullable Object properties) {
            this.properties = Codegen.ofNullable(properties);
            return this;
        }
        public Builder queryPackName(Output<String> queryPackName) {
            this.queryPackName = Objects.requireNonNull(queryPackName);
            return this;
        }
        public Builder queryPackName(String queryPackName) {
            this.queryPackName = Output.of(Objects.requireNonNull(queryPackName));
            return this;
        }
        public Builder related(@Nullable Output<LogAnalyticsQueryPackQueryPropertiesRelatedArgs> related) {
            this.related = related;
            return this;
        }
        public Builder related(@Nullable LogAnalyticsQueryPackQueryPropertiesRelatedArgs related) {
            this.related = Codegen.ofNullable(related);
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,List<String>>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,List<String>> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }        public QueryArgs build() {
            return new QueryArgs(body, description, displayName, id, properties, queryPackName, related, resourceGroupName, tags);
        }
    }
}
