// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.azurenative.datafactory.inputs.ActivityDependencyResponse;
import com.pulumi.azurenative.datafactory.inputs.AppendVariableActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.AzureDataExplorerCommandActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.AzureFunctionActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.AzureMLBatchExecutionActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.AzureMLExecutePipelineActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.AzureMLUpdateResourceActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.ControlActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.CopyActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.CustomActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.DataLakeAnalyticsUSQLActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.DatabricksNotebookActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.DatabricksSparkJarActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.DatabricksSparkPythonActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.DeleteActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.ExecuteDataFlowActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.ExecutePipelineActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.ExecuteSSISPackageActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.ExecuteWranglingDataflowActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.ExecutionActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.ExpressionResponse;
import com.pulumi.azurenative.datafactory.inputs.FailActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.FilterActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.ForEachActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.GetMetadataActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.HDInsightHiveActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.HDInsightMapReduceActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.HDInsightPigActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.HDInsightSparkActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.HDInsightStreamingActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.LookupActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.SetVariableActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.SqlServerStoredProcedureActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.SwitchActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.UntilActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.UserPropertyResponse;
import com.pulumi.azurenative.datafactory.inputs.ValidationActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.WaitActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.WebActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.WebHookActivityResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * This activity evaluates a boolean expression and executes either the activities under the ifTrueActivities property or the ifFalseActivities property depending on the result of the expression.
 * 
 */
public final class IfConditionActivityResponse extends com.pulumi.resources.InvokeArgs {

    public static final IfConditionActivityResponse Empty = new IfConditionActivityResponse();

    /**
     * Activity depends on condition.
     * 
     */
    @Import(name="dependsOn")
    private @Nullable List<ActivityDependencyResponse> dependsOn;

    /**
     * @return Activity depends on condition.
     * 
     */
    public Optional<List<ActivityDependencyResponse>> dependsOn() {
        return Optional.ofNullable(this.dependsOn);
    }

    /**
     * Activity description.
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    /**
     * @return Activity description.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * An expression that would evaluate to Boolean. This is used to determine the block of activities (ifTrueActivities or ifFalseActivities) that will be executed.
     * 
     */
    @Import(name="expression", required=true)
    private ExpressionResponse expression;

    /**
     * @return An expression that would evaluate to Boolean. This is used to determine the block of activities (ifTrueActivities or ifFalseActivities) that will be executed.
     * 
     */
    public ExpressionResponse expression() {
        return this.expression;
    }

    /**
     * List of activities to execute if expression is evaluated to false. This is an optional property and if not provided, the activity will exit without any action.
     * 
     */
    @Import(name="ifFalseActivities")
    private @Nullable List<Object> ifFalseActivities;

    /**
     * @return List of activities to execute if expression is evaluated to false. This is an optional property and if not provided, the activity will exit without any action.
     * 
     */
    public Optional<List<Object>> ifFalseActivities() {
        return Optional.ofNullable(this.ifFalseActivities);
    }

    /**
     * List of activities to execute if expression is evaluated to true. This is an optional property and if not provided, the activity will exit without any action.
     * 
     */
    @Import(name="ifTrueActivities")
    private @Nullable List<Object> ifTrueActivities;

    /**
     * @return List of activities to execute if expression is evaluated to true. This is an optional property and if not provided, the activity will exit without any action.
     * 
     */
    public Optional<List<Object>> ifTrueActivities() {
        return Optional.ofNullable(this.ifTrueActivities);
    }

    /**
     * Activity name.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return Activity name.
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * Type of activity.
     * Expected value is &#39;IfCondition&#39;.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    /**
     * @return Type of activity.
     * Expected value is &#39;IfCondition&#39;.
     * 
     */
    public String type() {
        return this.type;
    }

    /**
     * Activity user properties.
     * 
     */
    @Import(name="userProperties")
    private @Nullable List<UserPropertyResponse> userProperties;

    /**
     * @return Activity user properties.
     * 
     */
    public Optional<List<UserPropertyResponse>> userProperties() {
        return Optional.ofNullable(this.userProperties);
    }

    private IfConditionActivityResponse() {}

    private IfConditionActivityResponse(IfConditionActivityResponse $) {
        this.dependsOn = $.dependsOn;
        this.description = $.description;
        this.expression = $.expression;
        this.ifFalseActivities = $.ifFalseActivities;
        this.ifTrueActivities = $.ifTrueActivities;
        this.name = $.name;
        this.type = $.type;
        this.userProperties = $.userProperties;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IfConditionActivityResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IfConditionActivityResponse $;

        public Builder() {
            $ = new IfConditionActivityResponse();
        }

        public Builder(IfConditionActivityResponse defaults) {
            $ = new IfConditionActivityResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param dependsOn Activity depends on condition.
         * 
         * @return builder
         * 
         */
        public Builder dependsOn(@Nullable List<ActivityDependencyResponse> dependsOn) {
            $.dependsOn = dependsOn;
            return this;
        }

        /**
         * @param dependsOn Activity depends on condition.
         * 
         * @return builder
         * 
         */
        public Builder dependsOn(ActivityDependencyResponse... dependsOn) {
            return dependsOn(List.of(dependsOn));
        }

        /**
         * @param description Activity description.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        /**
         * @param expression An expression that would evaluate to Boolean. This is used to determine the block of activities (ifTrueActivities or ifFalseActivities) that will be executed.
         * 
         * @return builder
         * 
         */
        public Builder expression(ExpressionResponse expression) {
            $.expression = expression;
            return this;
        }

        /**
         * @param ifFalseActivities List of activities to execute if expression is evaluated to false. This is an optional property and if not provided, the activity will exit without any action.
         * 
         * @return builder
         * 
         */
        public Builder ifFalseActivities(@Nullable List<Object> ifFalseActivities) {
            $.ifFalseActivities = ifFalseActivities;
            return this;
        }

        /**
         * @param ifFalseActivities List of activities to execute if expression is evaluated to false. This is an optional property and if not provided, the activity will exit without any action.
         * 
         * @return builder
         * 
         */
        public Builder ifFalseActivities(Object... ifFalseActivities) {
            return ifFalseActivities(List.of(ifFalseActivities));
        }

        /**
         * @param ifTrueActivities List of activities to execute if expression is evaluated to true. This is an optional property and if not provided, the activity will exit without any action.
         * 
         * @return builder
         * 
         */
        public Builder ifTrueActivities(@Nullable List<Object> ifTrueActivities) {
            $.ifTrueActivities = ifTrueActivities;
            return this;
        }

        /**
         * @param ifTrueActivities List of activities to execute if expression is evaluated to true. This is an optional property and if not provided, the activity will exit without any action.
         * 
         * @return builder
         * 
         */
        public Builder ifTrueActivities(Object... ifTrueActivities) {
            return ifTrueActivities(List.of(ifTrueActivities));
        }

        /**
         * @param name Activity name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param type Type of activity.
         * Expected value is &#39;IfCondition&#39;.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            $.type = type;
            return this;
        }

        /**
         * @param userProperties Activity user properties.
         * 
         * @return builder
         * 
         */
        public Builder userProperties(@Nullable List<UserPropertyResponse> userProperties) {
            $.userProperties = userProperties;
            return this;
        }

        /**
         * @param userProperties Activity user properties.
         * 
         * @return builder
         * 
         */
        public Builder userProperties(UserPropertyResponse... userProperties) {
            return userProperties(List.of(userProperties));
        }

        public IfConditionActivityResponse build() {
            $.expression = Objects.requireNonNull($.expression, "expected parameter 'expression' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.type = Codegen.stringProp("type").arg($.type).require();
            return $;
        }
    }

}
