// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.policyinsights.inputs;

import com.pulumi.azurenative.policyinsights.inputs.ErrorDefinitionResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * Details of a single deployment created by the remediation.
 * 
 */
public final class RemediationDeploymentResponse extends com.pulumi.resources.InvokeArgs {

    public static final RemediationDeploymentResponse Empty = new RemediationDeploymentResponse();

    /**
     * The time at which the remediation was created.
     * 
     */
    @Import(name="createdOn", required=true)
    private String createdOn;

    /**
     * @return The time at which the remediation was created.
     * 
     */
    public String createdOn() {
        return this.createdOn;
    }

    /**
     * Resource ID of the template deployment that will remediate the resource.
     * 
     */
    @Import(name="deploymentId", required=true)
    private String deploymentId;

    /**
     * @return Resource ID of the template deployment that will remediate the resource.
     * 
     */
    public String deploymentId() {
        return this.deploymentId;
    }

    /**
     * Error encountered while remediated the resource.
     * 
     */
    @Import(name="error", required=true)
    private ErrorDefinitionResponse error;

    /**
     * @return Error encountered while remediated the resource.
     * 
     */
    public ErrorDefinitionResponse error() {
        return this.error;
    }

    /**
     * The time at which the remediation deployment was last updated.
     * 
     */
    @Import(name="lastUpdatedOn", required=true)
    private String lastUpdatedOn;

    /**
     * @return The time at which the remediation deployment was last updated.
     * 
     */
    public String lastUpdatedOn() {
        return this.lastUpdatedOn;
    }

    /**
     * Resource ID of the resource that is being remediated by the deployment.
     * 
     */
    @Import(name="remediatedResourceId", required=true)
    private String remediatedResourceId;

    /**
     * @return Resource ID of the resource that is being remediated by the deployment.
     * 
     */
    public String remediatedResourceId() {
        return this.remediatedResourceId;
    }

    /**
     * Location of the resource that is being remediated.
     * 
     */
    @Import(name="resourceLocation", required=true)
    private String resourceLocation;

    /**
     * @return Location of the resource that is being remediated.
     * 
     */
    public String resourceLocation() {
        return this.resourceLocation;
    }

    /**
     * Status of the remediation deployment.
     * 
     */
    @Import(name="status", required=true)
    private String status;

    /**
     * @return Status of the remediation deployment.
     * 
     */
    public String status() {
        return this.status;
    }

    private RemediationDeploymentResponse() {}

    private RemediationDeploymentResponse(RemediationDeploymentResponse $) {
        this.createdOn = $.createdOn;
        this.deploymentId = $.deploymentId;
        this.error = $.error;
        this.lastUpdatedOn = $.lastUpdatedOn;
        this.remediatedResourceId = $.remediatedResourceId;
        this.resourceLocation = $.resourceLocation;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RemediationDeploymentResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RemediationDeploymentResponse $;

        public Builder() {
            $ = new RemediationDeploymentResponse();
        }

        public Builder(RemediationDeploymentResponse defaults) {
            $ = new RemediationDeploymentResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param createdOn The time at which the remediation was created.
         * 
         * @return builder
         * 
         */
        public Builder createdOn(String createdOn) {
            $.createdOn = createdOn;
            return this;
        }

        /**
         * @param deploymentId Resource ID of the template deployment that will remediate the resource.
         * 
         * @return builder
         * 
         */
        public Builder deploymentId(String deploymentId) {
            $.deploymentId = deploymentId;
            return this;
        }

        /**
         * @param error Error encountered while remediated the resource.
         * 
         * @return builder
         * 
         */
        public Builder error(ErrorDefinitionResponse error) {
            $.error = error;
            return this;
        }

        /**
         * @param lastUpdatedOn The time at which the remediation deployment was last updated.
         * 
         * @return builder
         * 
         */
        public Builder lastUpdatedOn(String lastUpdatedOn) {
            $.lastUpdatedOn = lastUpdatedOn;
            return this;
        }

        /**
         * @param remediatedResourceId Resource ID of the resource that is being remediated by the deployment.
         * 
         * @return builder
         * 
         */
        public Builder remediatedResourceId(String remediatedResourceId) {
            $.remediatedResourceId = remediatedResourceId;
            return this;
        }

        /**
         * @param resourceLocation Location of the resource that is being remediated.
         * 
         * @return builder
         * 
         */
        public Builder resourceLocation(String resourceLocation) {
            $.resourceLocation = resourceLocation;
            return this;
        }

        /**
         * @param status Status of the remediation deployment.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            $.status = status;
            return this;
        }

        public RemediationDeploymentResponse build() {
            $.createdOn = Objects.requireNonNull($.createdOn, "expected parameter 'createdOn' to be non-null");
            $.deploymentId = Objects.requireNonNull($.deploymentId, "expected parameter 'deploymentId' to be non-null");
            $.error = Objects.requireNonNull($.error, "expected parameter 'error' to be non-null");
            $.lastUpdatedOn = Objects.requireNonNull($.lastUpdatedOn, "expected parameter 'lastUpdatedOn' to be non-null");
            $.remediatedResourceId = Objects.requireNonNull($.remediatedResourceId, "expected parameter 'remediatedResourceId' to be non-null");
            $.resourceLocation = Objects.requireNonNull($.resourceLocation, "expected parameter 'resourceLocation' to be non-null");
            $.status = Objects.requireNonNull($.status, "expected parameter 'status' to be non-null");
            return $;
        }
    }

}
