// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.policyinsights.inputs;

import com.pulumi.azurenative.policyinsights.inputs.ErrorDefinitionResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * Details of a single deployment created by the remediation.
 * 
 */
public final class RemediationDeploymentResponse extends com.pulumi.resources.InvokeArgs {

    public static final RemediationDeploymentResponse Empty = new RemediationDeploymentResponse();

    /**
     * The time at which the remediation was created.
     * 
     */
    @Import(name="createdOn", required=true)
      private final String createdOn;

    public String createdOn() {
        return this.createdOn;
    }

    /**
     * Resource ID of the template deployment that will remediate the resource.
     * 
     */
    @Import(name="deploymentId", required=true)
      private final String deploymentId;

    public String deploymentId() {
        return this.deploymentId;
    }

    /**
     * Error encountered while remediated the resource.
     * 
     */
    @Import(name="error", required=true)
      private final ErrorDefinitionResponse error;

    public ErrorDefinitionResponse error() {
        return this.error;
    }

    /**
     * The time at which the remediation deployment was last updated.
     * 
     */
    @Import(name="lastUpdatedOn", required=true)
      private final String lastUpdatedOn;

    public String lastUpdatedOn() {
        return this.lastUpdatedOn;
    }

    /**
     * Resource ID of the resource that is being remediated by the deployment.
     * 
     */
    @Import(name="remediatedResourceId", required=true)
      private final String remediatedResourceId;

    public String remediatedResourceId() {
        return this.remediatedResourceId;
    }

    /**
     * Location of the resource that is being remediated.
     * 
     */
    @Import(name="resourceLocation", required=true)
      private final String resourceLocation;

    public String resourceLocation() {
        return this.resourceLocation;
    }

    /**
     * Status of the remediation deployment.
     * 
     */
    @Import(name="status", required=true)
      private final String status;

    public String status() {
        return this.status;
    }

    public RemediationDeploymentResponse(
        String createdOn,
        String deploymentId,
        ErrorDefinitionResponse error,
        String lastUpdatedOn,
        String remediatedResourceId,
        String resourceLocation,
        String status) {
        this.createdOn = Objects.requireNonNull(createdOn, "expected parameter 'createdOn' to be non-null");
        this.deploymentId = Objects.requireNonNull(deploymentId, "expected parameter 'deploymentId' to be non-null");
        this.error = Objects.requireNonNull(error, "expected parameter 'error' to be non-null");
        this.lastUpdatedOn = Objects.requireNonNull(lastUpdatedOn, "expected parameter 'lastUpdatedOn' to be non-null");
        this.remediatedResourceId = Objects.requireNonNull(remediatedResourceId, "expected parameter 'remediatedResourceId' to be non-null");
        this.resourceLocation = Objects.requireNonNull(resourceLocation, "expected parameter 'resourceLocation' to be non-null");
        this.status = Objects.requireNonNull(status, "expected parameter 'status' to be non-null");
    }

    private RemediationDeploymentResponse() {
        this.createdOn = null;
        this.deploymentId = null;
        this.error = null;
        this.lastUpdatedOn = null;
        this.remediatedResourceId = null;
        this.resourceLocation = null;
        this.status = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RemediationDeploymentResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String createdOn;
        private String deploymentId;
        private ErrorDefinitionResponse error;
        private String lastUpdatedOn;
        private String remediatedResourceId;
        private String resourceLocation;
        private String status;

        public Builder() {
    	      // Empty
        }

        public Builder(RemediationDeploymentResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createdOn = defaults.createdOn;
    	      this.deploymentId = defaults.deploymentId;
    	      this.error = defaults.error;
    	      this.lastUpdatedOn = defaults.lastUpdatedOn;
    	      this.remediatedResourceId = defaults.remediatedResourceId;
    	      this.resourceLocation = defaults.resourceLocation;
    	      this.status = defaults.status;
        }

        public Builder createdOn(String createdOn) {
            this.createdOn = Objects.requireNonNull(createdOn);
            return this;
        }
        public Builder deploymentId(String deploymentId) {
            this.deploymentId = Objects.requireNonNull(deploymentId);
            return this;
        }
        public Builder error(ErrorDefinitionResponse error) {
            this.error = Objects.requireNonNull(error);
            return this;
        }
        public Builder lastUpdatedOn(String lastUpdatedOn) {
            this.lastUpdatedOn = Objects.requireNonNull(lastUpdatedOn);
            return this;
        }
        public Builder remediatedResourceId(String remediatedResourceId) {
            this.remediatedResourceId = Objects.requireNonNull(remediatedResourceId);
            return this;
        }
        public Builder resourceLocation(String resourceLocation) {
            this.resourceLocation = Objects.requireNonNull(resourceLocation);
            return this;
        }
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }        public RemediationDeploymentResponse build() {
            return new RemediationDeploymentResponse(createdOn, deploymentId, error, lastUpdatedOn, remediatedResourceId, resourceLocation, status);
        }
    }
}
