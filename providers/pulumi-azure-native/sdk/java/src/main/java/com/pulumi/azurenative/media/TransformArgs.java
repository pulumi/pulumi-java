// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.media;

import com.pulumi.azurenative.media.inputs.TransformOutputArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TransformArgs extends com.pulumi.resources.ResourceArgs {

    public static final TransformArgs Empty = new TransformArgs();

    /**
     * The Media Services account name.
     * 
     */
    @Import(name="accountName", required=true)
    private Output<String> accountName;

    /**
     * @return The Media Services account name.
     * 
     */
    public Output<String> accountName() {
        return this.accountName;
    }

    /**
     * An optional verbose description of the Transform.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return An optional verbose description of the Transform.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * An array of one or more TransformOutputs that the Transform should generate.
     * 
     */
    @Import(name="outputs", required=true)
    private Output<List<TransformOutputArgs>> outputs;

    /**
     * @return An array of one or more TransformOutputs that the Transform should generate.
     * 
     */
    public Output<List<TransformOutputArgs>> outputs() {
        return this.outputs;
    }

    /**
     * The name of the resource group within the Azure subscription.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group within the Azure subscription.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The Transform name.
     * 
     */
    @Import(name="transformName")
    private @Nullable Output<String> transformName;

    /**
     * @return The Transform name.
     * 
     */
    public Optional<Output<String>> transformName() {
        return Optional.ofNullable(this.transformName);
    }

    private TransformArgs() {}

    private TransformArgs(TransformArgs $) {
        this.accountName = $.accountName;
        this.description = $.description;
        this.outputs = $.outputs;
        this.resourceGroupName = $.resourceGroupName;
        this.transformName = $.transformName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TransformArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TransformArgs $;

        public Builder() {
            $ = new TransformArgs();
        }

        public Builder(TransformArgs defaults) {
            $ = new TransformArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountName The Media Services account name.
         * 
         * @return builder
         * 
         */
        public Builder accountName(Output<String> accountName) {
            $.accountName = accountName;
            return this;
        }

        /**
         * @param accountName The Media Services account name.
         * 
         * @return builder
         * 
         */
        public Builder accountName(String accountName) {
            return accountName(Output.of(accountName));
        }

        /**
         * @param description An optional verbose description of the Transform.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description An optional verbose description of the Transform.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param outputs An array of one or more TransformOutputs that the Transform should generate.
         * 
         * @return builder
         * 
         */
        public Builder outputs(Output<List<TransformOutputArgs>> outputs) {
            $.outputs = outputs;
            return this;
        }

        /**
         * @param outputs An array of one or more TransformOutputs that the Transform should generate.
         * 
         * @return builder
         * 
         */
        public Builder outputs(List<TransformOutputArgs> outputs) {
            return outputs(Output.of(outputs));
        }

        /**
         * @param outputs An array of one or more TransformOutputs that the Transform should generate.
         * 
         * @return builder
         * 
         */
        public Builder outputs(TransformOutputArgs... outputs) {
            return outputs(List.of(outputs));
        }

        /**
         * @param resourceGroupName The name of the resource group within the Azure subscription.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group within the Azure subscription.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param transformName The Transform name.
         * 
         * @return builder
         * 
         */
        public Builder transformName(@Nullable Output<String> transformName) {
            $.transformName = transformName;
            return this;
        }

        /**
         * @param transformName The Transform name.
         * 
         * @return builder
         * 
         */
        public Builder transformName(String transformName) {
            return transformName(Output.of(transformName));
        }

        public TransformArgs build() {
            $.accountName = Objects.requireNonNull($.accountName, "expected parameter 'accountName' to be non-null");
            $.outputs = Objects.requireNonNull($.outputs, "expected parameter 'outputs' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
