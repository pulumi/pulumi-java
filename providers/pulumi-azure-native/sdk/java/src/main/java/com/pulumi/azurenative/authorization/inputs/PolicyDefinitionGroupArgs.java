// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.authorization.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The policy definition group.
 * 
 */
public final class PolicyDefinitionGroupArgs extends com.pulumi.resources.ResourceArgs {

    public static final PolicyDefinitionGroupArgs Empty = new PolicyDefinitionGroupArgs();

    /**
     * A resource ID of a resource that contains additional metadata about the group.
     * 
     */
    @Import(name="additionalMetadataId")
    private @Nullable Output<String> additionalMetadataId;

    /**
     * @return A resource ID of a resource that contains additional metadata about the group.
     * 
     */
    public Optional<Output<String>> additionalMetadataId() {
        return Optional.ofNullable(this.additionalMetadataId);
    }

    /**
     * The group&#39;s category.
     * 
     */
    @Import(name="category")
    private @Nullable Output<String> category;

    /**
     * @return The group&#39;s category.
     * 
     */
    public Optional<Output<String>> category() {
        return Optional.ofNullable(this.category);
    }

    /**
     * The group&#39;s description.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The group&#39;s description.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The group&#39;s display name.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return The group&#39;s display name.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * The name of the group.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the group.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    private PolicyDefinitionGroupArgs() {}

    private PolicyDefinitionGroupArgs(PolicyDefinitionGroupArgs $) {
        this.additionalMetadataId = $.additionalMetadataId;
        this.category = $.category;
        this.description = $.description;
        this.displayName = $.displayName;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PolicyDefinitionGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PolicyDefinitionGroupArgs $;

        public Builder() {
            $ = new PolicyDefinitionGroupArgs();
        }

        public Builder(PolicyDefinitionGroupArgs defaults) {
            $ = new PolicyDefinitionGroupArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param additionalMetadataId A resource ID of a resource that contains additional metadata about the group.
         * 
         * @return builder
         * 
         */
        public Builder additionalMetadataId(@Nullable Output<String> additionalMetadataId) {
            $.additionalMetadataId = additionalMetadataId;
            return this;
        }

        /**
         * @param additionalMetadataId A resource ID of a resource that contains additional metadata about the group.
         * 
         * @return builder
         * 
         */
        public Builder additionalMetadataId(String additionalMetadataId) {
            return additionalMetadataId(Output.of(additionalMetadataId));
        }

        /**
         * @param category The group&#39;s category.
         * 
         * @return builder
         * 
         */
        public Builder category(@Nullable Output<String> category) {
            $.category = category;
            return this;
        }

        /**
         * @param category The group&#39;s category.
         * 
         * @return builder
         * 
         */
        public Builder category(String category) {
            return category(Output.of(category));
        }

        /**
         * @param description The group&#39;s description.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The group&#39;s description.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName The group&#39;s display name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The group&#39;s display name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param name The name of the group.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the group.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public PolicyDefinitionGroupArgs build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            return $;
        }
    }

}
