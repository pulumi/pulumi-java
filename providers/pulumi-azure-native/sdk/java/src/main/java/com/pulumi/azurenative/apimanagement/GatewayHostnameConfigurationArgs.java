// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.apimanagement;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GatewayHostnameConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final GatewayHostnameConfigurationArgs Empty = new GatewayHostnameConfigurationArgs();

    /**
     * Identifier of Certificate entity that will be used for TLS connection establishment
     * 
     */
    @Import(name="certificateId")
    private @Nullable Output<String> certificateId;

    public Optional<Output<String>> certificateId() {
        return Optional.ofNullable(this.certificateId);
    }

    /**
     * Gateway entity identifier. Must be unique in the current API Management service instance. Must not have value &#39;managed&#39;
     * 
     */
    @Import(name="gatewayId", required=true)
    private Output<String> gatewayId;

    public Output<String> gatewayId() {
        return this.gatewayId;
    }

    /**
     * Gateway hostname configuration identifier. Must be unique in the scope of parent Gateway entity.
     * 
     */
    @Import(name="hcId")
    private @Nullable Output<String> hcId;

    public Optional<Output<String>> hcId() {
        return Optional.ofNullable(this.hcId);
    }

    /**
     * Hostname value. Supports valid domain name, partial or full wildcard
     * 
     */
    @Import(name="hostname")
    private @Nullable Output<String> hostname;

    public Optional<Output<String>> hostname() {
        return Optional.ofNullable(this.hostname);
    }

    /**
     * Specifies if HTTP/2.0 is supported
     * 
     */
    @Import(name="http2Enabled")
    private @Nullable Output<Boolean> http2Enabled;

    public Optional<Output<Boolean>> http2Enabled() {
        return Optional.ofNullable(this.http2Enabled);
    }

    /**
     * Determines whether gateway requests client certificate
     * 
     */
    @Import(name="negotiateClientCertificate")
    private @Nullable Output<Boolean> negotiateClientCertificate;

    public Optional<Output<Boolean>> negotiateClientCertificate() {
        return Optional.ofNullable(this.negotiateClientCertificate);
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The name of the API Management service.
     * 
     */
    @Import(name="serviceName", required=true)
    private Output<String> serviceName;

    public Output<String> serviceName() {
        return this.serviceName;
    }

    /**
     * Specifies if TLS 1.0 is supported
     * 
     */
    @Import(name="tls10Enabled")
    private @Nullable Output<Boolean> tls10Enabled;

    public Optional<Output<Boolean>> tls10Enabled() {
        return Optional.ofNullable(this.tls10Enabled);
    }

    /**
     * Specifies if TLS 1.1 is supported
     * 
     */
    @Import(name="tls11Enabled")
    private @Nullable Output<Boolean> tls11Enabled;

    public Optional<Output<Boolean>> tls11Enabled() {
        return Optional.ofNullable(this.tls11Enabled);
    }

    private GatewayHostnameConfigurationArgs() {}

    private GatewayHostnameConfigurationArgs(GatewayHostnameConfigurationArgs $) {
        this.certificateId = $.certificateId;
        this.gatewayId = $.gatewayId;
        this.hcId = $.hcId;
        this.hostname = $.hostname;
        this.http2Enabled = $.http2Enabled;
        this.negotiateClientCertificate = $.negotiateClientCertificate;
        this.resourceGroupName = $.resourceGroupName;
        this.serviceName = $.serviceName;
        this.tls10Enabled = $.tls10Enabled;
        this.tls11Enabled = $.tls11Enabled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GatewayHostnameConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GatewayHostnameConfigurationArgs $;

        public Builder() {
            $ = new GatewayHostnameConfigurationArgs();
        }

        public Builder(GatewayHostnameConfigurationArgs defaults) {
            $ = new GatewayHostnameConfigurationArgs(Objects.requireNonNull(defaults));
        }

        public Builder certificateId(@Nullable Output<String> certificateId) {
            $.certificateId = certificateId;
            return this;
        }

        public Builder certificateId(String certificateId) {
            return certificateId(Output.of(certificateId));
        }

        public Builder gatewayId(Output<String> gatewayId) {
            $.gatewayId = gatewayId;
            return this;
        }

        public Builder gatewayId(String gatewayId) {
            return gatewayId(Output.of(gatewayId));
        }

        public Builder hcId(@Nullable Output<String> hcId) {
            $.hcId = hcId;
            return this;
        }

        public Builder hcId(String hcId) {
            return hcId(Output.of(hcId));
        }

        public Builder hostname(@Nullable Output<String> hostname) {
            $.hostname = hostname;
            return this;
        }

        public Builder hostname(String hostname) {
            return hostname(Output.of(hostname));
        }

        public Builder http2Enabled(@Nullable Output<Boolean> http2Enabled) {
            $.http2Enabled = http2Enabled;
            return this;
        }

        public Builder http2Enabled(Boolean http2Enabled) {
            return http2Enabled(Output.of(http2Enabled));
        }

        public Builder negotiateClientCertificate(@Nullable Output<Boolean> negotiateClientCertificate) {
            $.negotiateClientCertificate = negotiateClientCertificate;
            return this;
        }

        public Builder negotiateClientCertificate(Boolean negotiateClientCertificate) {
            return negotiateClientCertificate(Output.of(negotiateClientCertificate));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder serviceName(Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        public Builder tls10Enabled(@Nullable Output<Boolean> tls10Enabled) {
            $.tls10Enabled = tls10Enabled;
            return this;
        }

        public Builder tls10Enabled(Boolean tls10Enabled) {
            return tls10Enabled(Output.of(tls10Enabled));
        }

        public Builder tls11Enabled(@Nullable Output<Boolean> tls11Enabled) {
            $.tls11Enabled = tls11Enabled;
            return this;
        }

        public Builder tls11Enabled(Boolean tls11Enabled) {
            return tls11Enabled(Output.of(tls11Enabled));
        }

        public GatewayHostnameConfigurationArgs build() {
            $.gatewayId = Objects.requireNonNull($.gatewayId, "expected parameter 'gatewayId' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.serviceName = Objects.requireNonNull($.serviceName, "expected parameter 'serviceName' to be non-null");
            return $;
        }
    }

}
