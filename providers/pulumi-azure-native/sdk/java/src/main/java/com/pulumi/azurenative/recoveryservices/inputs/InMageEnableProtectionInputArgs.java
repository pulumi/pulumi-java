// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.recoveryservices.inputs;

import com.pulumi.azurenative.recoveryservices.inputs.InMageDiskExclusionInputArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * VMware Azure specific enable protection input.
 * 
 */
public final class InMageEnableProtectionInputArgs extends com.pulumi.resources.ResourceArgs {

    public static final InMageEnableProtectionInputArgs Empty = new InMageEnableProtectionInputArgs();

    /**
     * The target data store name.
     * 
     */
    @Import(name="datastoreName")
      private final @Nullable Output<String> datastoreName;

    public Output<String> datastoreName() {
        return this.datastoreName == null ? Codegen.empty() : this.datastoreName;
    }

    /**
     * The enable disk exclusion input.
     * 
     */
    @Import(name="diskExclusionInput")
      private final @Nullable Output<InMageDiskExclusionInputArgs> diskExclusionInput;

    public Output<InMageDiskExclusionInputArgs> diskExclusionInput() {
        return this.diskExclusionInput == null ? Codegen.empty() : this.diskExclusionInput;
    }

    /**
     * The disks to include list.
     * 
     */
    @Import(name="disksToInclude")
      private final @Nullable Output<List<String>> disksToInclude;

    public Output<List<String>> disksToInclude() {
        return this.disksToInclude == null ? Codegen.empty() : this.disksToInclude;
    }

    /**
     * The class type.
     * Expected value is 'InMage'.
     * 
     */
    @Import(name="instanceType")
      private final @Nullable Output<String> instanceType;

    public Output<String> instanceType() {
        return this.instanceType == null ? Codegen.empty() : this.instanceType;
    }

    /**
     * The Master Target Id.
     * 
     */
    @Import(name="masterTargetId", required=true)
      private final Output<String> masterTargetId;

    public Output<String> masterTargetId() {
        return this.masterTargetId;
    }

    /**
     * The multi vm group Id.
     * 
     */
    @Import(name="multiVmGroupId", required=true)
      private final Output<String> multiVmGroupId;

    public Output<String> multiVmGroupId() {
        return this.multiVmGroupId;
    }

    /**
     * The multi vm group name.
     * 
     */
    @Import(name="multiVmGroupName", required=true)
      private final Output<String> multiVmGroupName;

    public Output<String> multiVmGroupName() {
        return this.multiVmGroupName;
    }

    /**
     * The Process Server Id.
     * 
     */
    @Import(name="processServerId", required=true)
      private final Output<String> processServerId;

    public Output<String> processServerId() {
        return this.processServerId;
    }

    /**
     * The retention drive to use on the MT.
     * 
     */
    @Import(name="retentionDrive", required=true)
      private final Output<String> retentionDrive;

    public Output<String> retentionDrive() {
        return this.retentionDrive;
    }

    /**
     * The CS account Id.
     * 
     */
    @Import(name="runAsAccountId")
      private final @Nullable Output<String> runAsAccountId;

    public Output<String> runAsAccountId() {
        return this.runAsAccountId == null ? Codegen.empty() : this.runAsAccountId;
    }

    /**
     * The Vm Name.
     * 
     */
    @Import(name="vmFriendlyName")
      private final @Nullable Output<String> vmFriendlyName;

    public Output<String> vmFriendlyName() {
        return this.vmFriendlyName == null ? Codegen.empty() : this.vmFriendlyName;
    }

    public InMageEnableProtectionInputArgs(
        @Nullable Output<String> datastoreName,
        @Nullable Output<InMageDiskExclusionInputArgs> diskExclusionInput,
        @Nullable Output<List<String>> disksToInclude,
        @Nullable Output<String> instanceType,
        Output<String> masterTargetId,
        Output<String> multiVmGroupId,
        Output<String> multiVmGroupName,
        Output<String> processServerId,
        Output<String> retentionDrive,
        @Nullable Output<String> runAsAccountId,
        @Nullable Output<String> vmFriendlyName) {
        this.datastoreName = datastoreName;
        this.diskExclusionInput = diskExclusionInput;
        this.disksToInclude = disksToInclude;
        this.instanceType = Codegen.stringProp("instanceType").output().arg(instanceType).getNullable();
        this.masterTargetId = Objects.requireNonNull(masterTargetId, "expected parameter 'masterTargetId' to be non-null");
        this.multiVmGroupId = Objects.requireNonNull(multiVmGroupId, "expected parameter 'multiVmGroupId' to be non-null");
        this.multiVmGroupName = Objects.requireNonNull(multiVmGroupName, "expected parameter 'multiVmGroupName' to be non-null");
        this.processServerId = Objects.requireNonNull(processServerId, "expected parameter 'processServerId' to be non-null");
        this.retentionDrive = Objects.requireNonNull(retentionDrive, "expected parameter 'retentionDrive' to be non-null");
        this.runAsAccountId = runAsAccountId;
        this.vmFriendlyName = vmFriendlyName;
    }

    private InMageEnableProtectionInputArgs() {
        this.datastoreName = Codegen.empty();
        this.diskExclusionInput = Codegen.empty();
        this.disksToInclude = Codegen.empty();
        this.instanceType = Codegen.empty();
        this.masterTargetId = Codegen.empty();
        this.multiVmGroupId = Codegen.empty();
        this.multiVmGroupName = Codegen.empty();
        this.processServerId = Codegen.empty();
        this.retentionDrive = Codegen.empty();
        this.runAsAccountId = Codegen.empty();
        this.vmFriendlyName = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InMageEnableProtectionInputArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> datastoreName;
        private @Nullable Output<InMageDiskExclusionInputArgs> diskExclusionInput;
        private @Nullable Output<List<String>> disksToInclude;
        private @Nullable Output<String> instanceType;
        private Output<String> masterTargetId;
        private Output<String> multiVmGroupId;
        private Output<String> multiVmGroupName;
        private Output<String> processServerId;
        private Output<String> retentionDrive;
        private @Nullable Output<String> runAsAccountId;
        private @Nullable Output<String> vmFriendlyName;

        public Builder() {
    	      // Empty
        }

        public Builder(InMageEnableProtectionInputArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.datastoreName = defaults.datastoreName;
    	      this.diskExclusionInput = defaults.diskExclusionInput;
    	      this.disksToInclude = defaults.disksToInclude;
    	      this.instanceType = defaults.instanceType;
    	      this.masterTargetId = defaults.masterTargetId;
    	      this.multiVmGroupId = defaults.multiVmGroupId;
    	      this.multiVmGroupName = defaults.multiVmGroupName;
    	      this.processServerId = defaults.processServerId;
    	      this.retentionDrive = defaults.retentionDrive;
    	      this.runAsAccountId = defaults.runAsAccountId;
    	      this.vmFriendlyName = defaults.vmFriendlyName;
        }

        public Builder datastoreName(@Nullable Output<String> datastoreName) {
            this.datastoreName = datastoreName;
            return this;
        }
        public Builder datastoreName(@Nullable String datastoreName) {
            this.datastoreName = Codegen.ofNullable(datastoreName);
            return this;
        }
        public Builder diskExclusionInput(@Nullable Output<InMageDiskExclusionInputArgs> diskExclusionInput) {
            this.diskExclusionInput = diskExclusionInput;
            return this;
        }
        public Builder diskExclusionInput(@Nullable InMageDiskExclusionInputArgs diskExclusionInput) {
            this.diskExclusionInput = Codegen.ofNullable(diskExclusionInput);
            return this;
        }
        public Builder disksToInclude(@Nullable Output<List<String>> disksToInclude) {
            this.disksToInclude = disksToInclude;
            return this;
        }
        public Builder disksToInclude(@Nullable List<String> disksToInclude) {
            this.disksToInclude = Codegen.ofNullable(disksToInclude);
            return this;
        }
        public Builder disksToInclude(String... disksToInclude) {
            return disksToInclude(List.of(disksToInclude));
        }
        public Builder instanceType(@Nullable Output<String> instanceType) {
            this.instanceType = instanceType;
            return this;
        }
        public Builder instanceType(@Nullable String instanceType) {
            this.instanceType = Codegen.ofNullable(instanceType);
            return this;
        }
        public Builder masterTargetId(Output<String> masterTargetId) {
            this.masterTargetId = Objects.requireNonNull(masterTargetId);
            return this;
        }
        public Builder masterTargetId(String masterTargetId) {
            this.masterTargetId = Output.of(Objects.requireNonNull(masterTargetId));
            return this;
        }
        public Builder multiVmGroupId(Output<String> multiVmGroupId) {
            this.multiVmGroupId = Objects.requireNonNull(multiVmGroupId);
            return this;
        }
        public Builder multiVmGroupId(String multiVmGroupId) {
            this.multiVmGroupId = Output.of(Objects.requireNonNull(multiVmGroupId));
            return this;
        }
        public Builder multiVmGroupName(Output<String> multiVmGroupName) {
            this.multiVmGroupName = Objects.requireNonNull(multiVmGroupName);
            return this;
        }
        public Builder multiVmGroupName(String multiVmGroupName) {
            this.multiVmGroupName = Output.of(Objects.requireNonNull(multiVmGroupName));
            return this;
        }
        public Builder processServerId(Output<String> processServerId) {
            this.processServerId = Objects.requireNonNull(processServerId);
            return this;
        }
        public Builder processServerId(String processServerId) {
            this.processServerId = Output.of(Objects.requireNonNull(processServerId));
            return this;
        }
        public Builder retentionDrive(Output<String> retentionDrive) {
            this.retentionDrive = Objects.requireNonNull(retentionDrive);
            return this;
        }
        public Builder retentionDrive(String retentionDrive) {
            this.retentionDrive = Output.of(Objects.requireNonNull(retentionDrive));
            return this;
        }
        public Builder runAsAccountId(@Nullable Output<String> runAsAccountId) {
            this.runAsAccountId = runAsAccountId;
            return this;
        }
        public Builder runAsAccountId(@Nullable String runAsAccountId) {
            this.runAsAccountId = Codegen.ofNullable(runAsAccountId);
            return this;
        }
        public Builder vmFriendlyName(@Nullable Output<String> vmFriendlyName) {
            this.vmFriendlyName = vmFriendlyName;
            return this;
        }
        public Builder vmFriendlyName(@Nullable String vmFriendlyName) {
            this.vmFriendlyName = Codegen.ofNullable(vmFriendlyName);
            return this;
        }        public InMageEnableProtectionInputArgs build() {
            return new InMageEnableProtectionInputArgs(datastoreName, diskExclusionInput, disksToInclude, instanceType, masterTargetId, multiVmGroupId, multiVmGroupName, processServerId, retentionDrive, runAsAccountId, vmFriendlyName);
        }
    }
}
