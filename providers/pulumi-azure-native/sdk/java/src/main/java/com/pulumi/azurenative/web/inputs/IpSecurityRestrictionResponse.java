// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.web.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * IP security restriction on an app.
 * 
 */
public final class IpSecurityRestrictionResponse extends com.pulumi.resources.InvokeArgs {

    public static final IpSecurityRestrictionResponse Empty = new IpSecurityRestrictionResponse();

    /**
     * Allow or Deny access for this IP range.
     * 
     */
    @Import(name="action")
    private @Nullable String action;

    public Optional<String> action() {
        return Optional.ofNullable(this.action);
    }

    /**
     * IP restriction rule description.
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * IP restriction rule headers.
     * X-Forwarded-Host (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-Host#Examples).
     * The matching logic is ..
     * - If the property is null or empty (default), all hosts(or lack of) are allowed.
     * - A value is compared using ordinal-ignore-case (excluding port number).
     * - Subdomain wildcards are permitted but don&#39;t match the root domain. For example, *.contoso.com matches the subdomain foo.contoso.com
     *    but not the root domain contoso.com or multi-level foo.bar.contoso.com
     * - Unicode host names are allowed but are converted to Punycode for matching.
     * 
     * X-Forwarded-For (https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For#Examples).
     * The matching logic is ..
     * - If the property is null or empty (default), any forwarded-for chains (or lack of) are allowed.
     * - If any address (excluding port number) in the chain (comma separated) matches the CIDR defined by the property.
     * 
     * X-Azure-FDID and X-FD-HealthProbe.
     * The matching logic is exact match.
     * 
     */
    @Import(name="headers")
    private @Nullable Map<String,List<String>> headers;

    public Optional<Map<String,List<String>>> headers() {
        return Optional.ofNullable(this.headers);
    }

    /**
     * IP address the security restriction is valid for.
     * It can be in form of pure ipv4 address (required SubnetMask property) or
     * CIDR notation such as ipv4/mask (leading bit match). For CIDR,
     * SubnetMask property must not be specified.
     * 
     */
    @Import(name="ipAddress")
    private @Nullable String ipAddress;

    public Optional<String> ipAddress() {
        return Optional.ofNullable(this.ipAddress);
    }

    /**
     * IP restriction rule name.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Priority of IP restriction rule.
     * 
     */
    @Import(name="priority")
    private @Nullable Integer priority;

    public Optional<Integer> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * Subnet mask for the range of IP addresses the restriction is valid for.
     * 
     */
    @Import(name="subnetMask")
    private @Nullable String subnetMask;

    public Optional<String> subnetMask() {
        return Optional.ofNullable(this.subnetMask);
    }

    /**
     * (internal) Subnet traffic tag
     * 
     */
    @Import(name="subnetTrafficTag")
    private @Nullable Integer subnetTrafficTag;

    public Optional<Integer> subnetTrafficTag() {
        return Optional.ofNullable(this.subnetTrafficTag);
    }

    /**
     * Defines what this IP filter will be used for. This is to support IP filtering on proxies.
     * 
     */
    @Import(name="tag")
    private @Nullable String tag;

    public Optional<String> tag() {
        return Optional.ofNullable(this.tag);
    }

    /**
     * Virtual network resource id
     * 
     */
    @Import(name="vnetSubnetResourceId")
    private @Nullable String vnetSubnetResourceId;

    public Optional<String> vnetSubnetResourceId() {
        return Optional.ofNullable(this.vnetSubnetResourceId);
    }

    /**
     * (internal) Vnet traffic tag
     * 
     */
    @Import(name="vnetTrafficTag")
    private @Nullable Integer vnetTrafficTag;

    public Optional<Integer> vnetTrafficTag() {
        return Optional.ofNullable(this.vnetTrafficTag);
    }

    private IpSecurityRestrictionResponse() {}

    private IpSecurityRestrictionResponse(IpSecurityRestrictionResponse $) {
        this.action = $.action;
        this.description = $.description;
        this.headers = $.headers;
        this.ipAddress = $.ipAddress;
        this.name = $.name;
        this.priority = $.priority;
        this.subnetMask = $.subnetMask;
        this.subnetTrafficTag = $.subnetTrafficTag;
        this.tag = $.tag;
        this.vnetSubnetResourceId = $.vnetSubnetResourceId;
        this.vnetTrafficTag = $.vnetTrafficTag;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IpSecurityRestrictionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IpSecurityRestrictionResponse $;

        public Builder() {
            $ = new IpSecurityRestrictionResponse();
        }

        public Builder(IpSecurityRestrictionResponse defaults) {
            $ = new IpSecurityRestrictionResponse(Objects.requireNonNull(defaults));
        }

        public Builder action(@Nullable String action) {
            $.action = action;
            return this;
        }

        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        public Builder headers(@Nullable Map<String,List<String>> headers) {
            $.headers = headers;
            return this;
        }

        public Builder ipAddress(@Nullable String ipAddress) {
            $.ipAddress = ipAddress;
            return this;
        }

        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        public Builder priority(@Nullable Integer priority) {
            $.priority = priority;
            return this;
        }

        public Builder subnetMask(@Nullable String subnetMask) {
            $.subnetMask = subnetMask;
            return this;
        }

        public Builder subnetTrafficTag(@Nullable Integer subnetTrafficTag) {
            $.subnetTrafficTag = subnetTrafficTag;
            return this;
        }

        public Builder tag(@Nullable String tag) {
            $.tag = tag;
            return this;
        }

        public Builder vnetSubnetResourceId(@Nullable String vnetSubnetResourceId) {
            $.vnetSubnetResourceId = vnetSubnetResourceId;
            return this;
        }

        public Builder vnetTrafficTag(@Nullable Integer vnetTrafficTag) {
            $.vnetTrafficTag = vnetTrafficTag;
            return this;
        }

        public IpSecurityRestrictionResponse build() {
            return $;
        }
    }

}
