// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.sql;

import com.pulumi.azurenative.sql.enums.CatalogCollationType;
import com.pulumi.azurenative.sql.enums.ManagedDatabaseCreateMode;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ManagedDatabaseArgs extends com.pulumi.resources.ResourceArgs {

    public static final ManagedDatabaseArgs Empty = new ManagedDatabaseArgs();

    /**
     * Whether to auto complete restore of this managed database.
     * 
     */
    @Import(name="autoCompleteRestore")
    private @Nullable Output<Boolean> autoCompleteRestore;

    public Optional<Output<Boolean>> autoCompleteRestore() {
        return Optional.ofNullable(this.autoCompleteRestore);
    }

    /**
     * Collation of the metadata catalog.
     * 
     */
    @Import(name="catalogCollation")
    private @Nullable Output<Either<String,CatalogCollationType>> catalogCollation;

    public Optional<Output<Either<String,CatalogCollationType>>> catalogCollation() {
        return Optional.ofNullable(this.catalogCollation);
    }

    /**
     * Collation of the managed database.
     * 
     */
    @Import(name="collation")
    private @Nullable Output<String> collation;

    public Optional<Output<String>> collation() {
        return Optional.ofNullable(this.collation);
    }

    /**
     * Managed database create mode. PointInTimeRestore: Create a database by restoring a point in time backup of an existing database. SourceDatabaseName, SourceManagedInstanceName and PointInTime must be specified. RestoreExternalBackup: Create a database by restoring from external backup files. Collation, StorageContainerUri and StorageContainerSasToken must be specified. Recovery: Creates a database by restoring a geo-replicated backup. RecoverableDatabaseId must be specified as the recoverable database resource ID to restore. RestoreLongTermRetentionBackup: Create a database by restoring from a long term retention backup (longTermRetentionBackupResourceId required).
     * 
     */
    @Import(name="createMode")
    private @Nullable Output<Either<String,ManagedDatabaseCreateMode>> createMode;

    public Optional<Output<Either<String,ManagedDatabaseCreateMode>>> createMode() {
        return Optional.ofNullable(this.createMode);
    }

    /**
     * The name of the database.
     * 
     */
    @Import(name="databaseName")
    private @Nullable Output<String> databaseName;

    public Optional<Output<String>> databaseName() {
        return Optional.ofNullable(this.databaseName);
    }

    /**
     * Last backup file name for restore of this managed database.
     * 
     */
    @Import(name="lastBackupName")
    private @Nullable Output<String> lastBackupName;

    public Optional<Output<String>> lastBackupName() {
        return Optional.ofNullable(this.lastBackupName);
    }

    /**
     * Resource location.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name of the Long Term Retention backup to be used for restore of this managed database.
     * 
     */
    @Import(name="longTermRetentionBackupResourceId")
    private @Nullable Output<String> longTermRetentionBackupResourceId;

    public Optional<Output<String>> longTermRetentionBackupResourceId() {
        return Optional.ofNullable(this.longTermRetentionBackupResourceId);
    }

    /**
     * The name of the managed instance.
     * 
     */
    @Import(name="managedInstanceName", required=true)
    private Output<String> managedInstanceName;

    public Output<String> managedInstanceName() {
        return this.managedInstanceName;
    }

    /**
     * The resource identifier of the recoverable database associated with create operation of this database.
     * 
     */
    @Import(name="recoverableDatabaseId")
    private @Nullable Output<String> recoverableDatabaseId;

    public Optional<Output<String>> recoverableDatabaseId() {
        return Optional.ofNullable(this.recoverableDatabaseId);
    }

    /**
     * The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The restorable dropped database resource id to restore when creating this database.
     * 
     */
    @Import(name="restorableDroppedDatabaseId")
    private @Nullable Output<String> restorableDroppedDatabaseId;

    public Optional<Output<String>> restorableDroppedDatabaseId() {
        return Optional.ofNullable(this.restorableDroppedDatabaseId);
    }

    /**
     * Conditional. If createMode is PointInTimeRestore, this value is required. Specifies the point in time (ISO8601 format) of the source database that will be restored to create the new database.
     * 
     */
    @Import(name="restorePointInTime")
    private @Nullable Output<String> restorePointInTime;

    public Optional<Output<String>> restorePointInTime() {
        return Optional.ofNullable(this.restorePointInTime);
    }

    /**
     * The resource identifier of the source database associated with create operation of this database.
     * 
     */
    @Import(name="sourceDatabaseId")
    private @Nullable Output<String> sourceDatabaseId;

    public Optional<Output<String>> sourceDatabaseId() {
        return Optional.ofNullable(this.sourceDatabaseId);
    }

    /**
     * Conditional. If createMode is RestoreExternalBackup, this value is required. Specifies the storage container sas token.
     * 
     */
    @Import(name="storageContainerSasToken")
    private @Nullable Output<String> storageContainerSasToken;

    public Optional<Output<String>> storageContainerSasToken() {
        return Optional.ofNullable(this.storageContainerSasToken);
    }

    /**
     * Conditional. If createMode is RestoreExternalBackup, this value is required. Specifies the uri of the storage container where backups for this restore are stored.
     * 
     */
    @Import(name="storageContainerUri")
    private @Nullable Output<String> storageContainerUri;

    public Optional<Output<String>> storageContainerUri() {
        return Optional.ofNullable(this.storageContainerUri);
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private ManagedDatabaseArgs() {}

    private ManagedDatabaseArgs(ManagedDatabaseArgs $) {
        this.autoCompleteRestore = $.autoCompleteRestore;
        this.catalogCollation = $.catalogCollation;
        this.collation = $.collation;
        this.createMode = $.createMode;
        this.databaseName = $.databaseName;
        this.lastBackupName = $.lastBackupName;
        this.location = $.location;
        this.longTermRetentionBackupResourceId = $.longTermRetentionBackupResourceId;
        this.managedInstanceName = $.managedInstanceName;
        this.recoverableDatabaseId = $.recoverableDatabaseId;
        this.resourceGroupName = $.resourceGroupName;
        this.restorableDroppedDatabaseId = $.restorableDroppedDatabaseId;
        this.restorePointInTime = $.restorePointInTime;
        this.sourceDatabaseId = $.sourceDatabaseId;
        this.storageContainerSasToken = $.storageContainerSasToken;
        this.storageContainerUri = $.storageContainerUri;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagedDatabaseArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagedDatabaseArgs $;

        public Builder() {
            $ = new ManagedDatabaseArgs();
        }

        public Builder(ManagedDatabaseArgs defaults) {
            $ = new ManagedDatabaseArgs(Objects.requireNonNull(defaults));
        }

        public Builder autoCompleteRestore(@Nullable Output<Boolean> autoCompleteRestore) {
            $.autoCompleteRestore = autoCompleteRestore;
            return this;
        }

        public Builder autoCompleteRestore(Boolean autoCompleteRestore) {
            return autoCompleteRestore(Output.of(autoCompleteRestore));
        }

        public Builder catalogCollation(@Nullable Output<Either<String,CatalogCollationType>> catalogCollation) {
            $.catalogCollation = catalogCollation;
            return this;
        }

        public Builder catalogCollation(Either<String,CatalogCollationType> catalogCollation) {
            return catalogCollation(Output.of(catalogCollation));
        }

        public Builder collation(@Nullable Output<String> collation) {
            $.collation = collation;
            return this;
        }

        public Builder collation(String collation) {
            return collation(Output.of(collation));
        }

        public Builder createMode(@Nullable Output<Either<String,ManagedDatabaseCreateMode>> createMode) {
            $.createMode = createMode;
            return this;
        }

        public Builder createMode(Either<String,ManagedDatabaseCreateMode> createMode) {
            return createMode(Output.of(createMode));
        }

        public Builder databaseName(@Nullable Output<String> databaseName) {
            $.databaseName = databaseName;
            return this;
        }

        public Builder databaseName(String databaseName) {
            return databaseName(Output.of(databaseName));
        }

        public Builder lastBackupName(@Nullable Output<String> lastBackupName) {
            $.lastBackupName = lastBackupName;
            return this;
        }

        public Builder lastBackupName(String lastBackupName) {
            return lastBackupName(Output.of(lastBackupName));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder longTermRetentionBackupResourceId(@Nullable Output<String> longTermRetentionBackupResourceId) {
            $.longTermRetentionBackupResourceId = longTermRetentionBackupResourceId;
            return this;
        }

        public Builder longTermRetentionBackupResourceId(String longTermRetentionBackupResourceId) {
            return longTermRetentionBackupResourceId(Output.of(longTermRetentionBackupResourceId));
        }

        public Builder managedInstanceName(Output<String> managedInstanceName) {
            $.managedInstanceName = managedInstanceName;
            return this;
        }

        public Builder managedInstanceName(String managedInstanceName) {
            return managedInstanceName(Output.of(managedInstanceName));
        }

        public Builder recoverableDatabaseId(@Nullable Output<String> recoverableDatabaseId) {
            $.recoverableDatabaseId = recoverableDatabaseId;
            return this;
        }

        public Builder recoverableDatabaseId(String recoverableDatabaseId) {
            return recoverableDatabaseId(Output.of(recoverableDatabaseId));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder restorableDroppedDatabaseId(@Nullable Output<String> restorableDroppedDatabaseId) {
            $.restorableDroppedDatabaseId = restorableDroppedDatabaseId;
            return this;
        }

        public Builder restorableDroppedDatabaseId(String restorableDroppedDatabaseId) {
            return restorableDroppedDatabaseId(Output.of(restorableDroppedDatabaseId));
        }

        public Builder restorePointInTime(@Nullable Output<String> restorePointInTime) {
            $.restorePointInTime = restorePointInTime;
            return this;
        }

        public Builder restorePointInTime(String restorePointInTime) {
            return restorePointInTime(Output.of(restorePointInTime));
        }

        public Builder sourceDatabaseId(@Nullable Output<String> sourceDatabaseId) {
            $.sourceDatabaseId = sourceDatabaseId;
            return this;
        }

        public Builder sourceDatabaseId(String sourceDatabaseId) {
            return sourceDatabaseId(Output.of(sourceDatabaseId));
        }

        public Builder storageContainerSasToken(@Nullable Output<String> storageContainerSasToken) {
            $.storageContainerSasToken = storageContainerSasToken;
            return this;
        }

        public Builder storageContainerSasToken(String storageContainerSasToken) {
            return storageContainerSasToken(Output.of(storageContainerSasToken));
        }

        public Builder storageContainerUri(@Nullable Output<String> storageContainerUri) {
            $.storageContainerUri = storageContainerUri;
            return this;
        }

        public Builder storageContainerUri(String storageContainerUri) {
            return storageContainerUri(Output.of(storageContainerUri));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public ManagedDatabaseArgs build() {
            $.managedInstanceName = Objects.requireNonNull($.managedInstanceName, "expected parameter 'managedInstanceName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
