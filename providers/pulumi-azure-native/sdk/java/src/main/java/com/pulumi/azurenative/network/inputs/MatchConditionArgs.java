// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.azurenative.network.enums.WebApplicationFirewallOperator;
import com.pulumi.azurenative.network.enums.WebApplicationFirewallTransform;
import com.pulumi.azurenative.network.inputs.MatchVariableArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Define match conditions.
 * 
 */
public final class MatchConditionArgs extends com.pulumi.resources.ResourceArgs {

    public static final MatchConditionArgs Empty = new MatchConditionArgs();

    /**
     * Match value.
     * 
     */
    @Import(name="matchValues", required=true)
    private Output<List<String>> matchValues;

    public Output<List<String>> matchValues() {
        return this.matchValues;
    }

    /**
     * List of match variables.
     * 
     */
    @Import(name="matchVariables", required=true)
    private Output<List<MatchVariableArgs>> matchVariables;

    public Output<List<MatchVariableArgs>> matchVariables() {
        return this.matchVariables;
    }

    /**
     * Whether this is negate condition or not.
     * 
     */
    @Import(name="negationConditon")
    private @Nullable Output<Boolean> negationConditon;

    public Optional<Output<Boolean>> negationConditon() {
        return Optional.ofNullable(this.negationConditon);
    }

    /**
     * The operator to be matched.
     * 
     */
    @Import(name="operator", required=true)
    private Output<Either<String,WebApplicationFirewallOperator>> operator;

    public Output<Either<String,WebApplicationFirewallOperator>> operator() {
        return this.operator;
    }

    /**
     * List of transforms.
     * 
     */
    @Import(name="transforms")
    private @Nullable Output<List<Either<String,WebApplicationFirewallTransform>>> transforms;

    public Optional<Output<List<Either<String,WebApplicationFirewallTransform>>>> transforms() {
        return Optional.ofNullable(this.transforms);
    }

    private MatchConditionArgs() {}

    private MatchConditionArgs(MatchConditionArgs $) {
        this.matchValues = $.matchValues;
        this.matchVariables = $.matchVariables;
        this.negationConditon = $.negationConditon;
        this.operator = $.operator;
        this.transforms = $.transforms;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MatchConditionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MatchConditionArgs $;

        public Builder() {
            $ = new MatchConditionArgs();
        }

        public Builder(MatchConditionArgs defaults) {
            $ = new MatchConditionArgs(Objects.requireNonNull(defaults));
        }

        public Builder matchValues(Output<List<String>> matchValues) {
            $.matchValues = matchValues;
            return this;
        }

        public Builder matchValues(List<String> matchValues) {
            return matchValues(Output.of(matchValues));
        }

        public Builder matchValues(String... matchValues) {
            return matchValues(List.of(matchValues));
        }

        public Builder matchVariables(Output<List<MatchVariableArgs>> matchVariables) {
            $.matchVariables = matchVariables;
            return this;
        }

        public Builder matchVariables(List<MatchVariableArgs> matchVariables) {
            return matchVariables(Output.of(matchVariables));
        }

        public Builder matchVariables(MatchVariableArgs... matchVariables) {
            return matchVariables(List.of(matchVariables));
        }

        public Builder negationConditon(@Nullable Output<Boolean> negationConditon) {
            $.negationConditon = negationConditon;
            return this;
        }

        public Builder negationConditon(Boolean negationConditon) {
            return negationConditon(Output.of(negationConditon));
        }

        public Builder operator(Output<Either<String,WebApplicationFirewallOperator>> operator) {
            $.operator = operator;
            return this;
        }

        public Builder operator(Either<String,WebApplicationFirewallOperator> operator) {
            return operator(Output.of(operator));
        }

        public Builder transforms(@Nullable Output<List<Either<String,WebApplicationFirewallTransform>>> transforms) {
            $.transforms = transforms;
            return this;
        }

        public Builder transforms(List<Either<String,WebApplicationFirewallTransform>> transforms) {
            return transforms(Output.of(transforms));
        }

        public Builder transforms(Either<String,WebApplicationFirewallTransform>... transforms) {
            return transforms(List.of(transforms));
        }

        public MatchConditionArgs build() {
            $.matchValues = Objects.requireNonNull($.matchValues, "expected parameter 'matchValues' to be non-null");
            $.matchVariables = Objects.requireNonNull($.matchVariables, "expected parameter 'matchVariables' to be non-null");
            $.operator = Objects.requireNonNull($.operator, "expected parameter 'operator' to be non-null");
            return $;
        }
    }

}
