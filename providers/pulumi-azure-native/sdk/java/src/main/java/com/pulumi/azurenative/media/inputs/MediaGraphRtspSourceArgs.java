// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.media.inputs;

import com.pulumi.azurenative.media.enums.MediaGraphRtspTransport;
import com.pulumi.azurenative.media.inputs.MediaGraphClearEndpointArgs;
import com.pulumi.azurenative.media.inputs.MediaGraphTlsEndpointArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;


/**
 * RTSP source.
 * 
 */
public final class MediaGraphRtspSourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final MediaGraphRtspSourceArgs Empty = new MediaGraphRtspSourceArgs();

    /**
     * RTSP endpoint of the stream being connected to.
     * 
     */
    @Import(name="endpoint", required=true)
    private Output<Either<MediaGraphClearEndpointArgs,MediaGraphTlsEndpointArgs>> endpoint;

    public Output<Either<MediaGraphClearEndpointArgs,MediaGraphTlsEndpointArgs>> endpoint() {
        return this.endpoint;
    }

    /**
     * Source name.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    public Output<String> name() {
        return this.name;
    }

    /**
     * The discriminator for derived types.
     * Expected value is &#39;#Microsoft.Media.MediaGraphRtspSource&#39;.
     * 
     */
    @Import(name="odataType", required=true)
    private Output<String> odataType;

    public Output<String> odataType() {
        return this.odataType;
    }

    /**
     * Underlying RTSP transport. This can be used to enable or disable HTTP tunneling.
     * 
     */
    @Import(name="transport", required=true)
    private Output<Either<String,MediaGraphRtspTransport>> transport;

    public Output<Either<String,MediaGraphRtspTransport>> transport() {
        return this.transport;
    }

    private MediaGraphRtspSourceArgs() {}

    private MediaGraphRtspSourceArgs(MediaGraphRtspSourceArgs $) {
        this.endpoint = $.endpoint;
        this.name = $.name;
        this.odataType = $.odataType;
        this.transport = $.transport;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MediaGraphRtspSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MediaGraphRtspSourceArgs $;

        public Builder() {
            $ = new MediaGraphRtspSourceArgs();
        }

        public Builder(MediaGraphRtspSourceArgs defaults) {
            $ = new MediaGraphRtspSourceArgs(Objects.requireNonNull(defaults));
        }

        public Builder endpoint(Output<Either<MediaGraphClearEndpointArgs,MediaGraphTlsEndpointArgs>> endpoint) {
            $.endpoint = endpoint;
            return this;
        }

        public Builder endpoint(Either<MediaGraphClearEndpointArgs,MediaGraphTlsEndpointArgs> endpoint) {
            return endpoint(Output.of(endpoint));
        }

        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder odataType(Output<String> odataType) {
            $.odataType = odataType;
            return this;
        }

        public Builder odataType(String odataType) {
            return odataType(Output.of(odataType));
        }

        public Builder transport(Output<Either<String,MediaGraphRtspTransport>> transport) {
            $.transport = transport;
            return this;
        }

        public Builder transport(Either<String,MediaGraphRtspTransport> transport) {
            return transport(Output.of(transport));
        }

        public MediaGraphRtspSourceArgs build() {
            $.endpoint = Objects.requireNonNull($.endpoint, "expected parameter 'endpoint' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.odataType = Codegen.stringProp("odataType").output().arg($.odataType).require();
            $.transport = Objects.requireNonNull($.transport, "expected parameter 'transport' to be non-null");
            return $;
        }
    }

}
