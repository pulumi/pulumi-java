// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.managednetwork.inputs;

import com.pulumi.azurenative.managednetwork.enums.Type;
import com.pulumi.azurenative.managednetwork.inputs.ResourceIdArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Properties of a Managed Network Peering Policy
 * 
 */
public final class ManagedNetworkPeeringPolicyPropertiesArgs extends com.pulumi.resources.ResourceArgs {

    public static final ManagedNetworkPeeringPolicyPropertiesArgs Empty = new ManagedNetworkPeeringPolicyPropertiesArgs();

    /**
     * Gets or sets the hub virtual network ID
     * 
     */
    @Import(name="hub")
    private @Nullable Output<ResourceIdArgs> hub;

    /**
     * @return Gets or sets the hub virtual network ID
     * 
     */
    public Optional<Output<ResourceIdArgs>> hub() {
        return Optional.ofNullable(this.hub);
    }

    /**
     * Gets or sets the mesh group IDs
     * 
     */
    @Import(name="mesh")
    private @Nullable Output<List<ResourceIdArgs>> mesh;

    /**
     * @return Gets or sets the mesh group IDs
     * 
     */
    public Optional<Output<List<ResourceIdArgs>>> mesh() {
        return Optional.ofNullable(this.mesh);
    }

    /**
     * Gets or sets the spokes group IDs
     * 
     */
    @Import(name="spokes")
    private @Nullable Output<List<ResourceIdArgs>> spokes;

    /**
     * @return Gets or sets the spokes group IDs
     * 
     */
    public Optional<Output<List<ResourceIdArgs>>> spokes() {
        return Optional.ofNullable(this.spokes);
    }

    /**
     * Gets or sets the connectivity type of a network structure policy
     * 
     */
    @Import(name="type", required=true)
    private Output<Either<String,Type>> type;

    /**
     * @return Gets or sets the connectivity type of a network structure policy
     * 
     */
    public Output<Either<String,Type>> type() {
        return this.type;
    }

    private ManagedNetworkPeeringPolicyPropertiesArgs() {}

    private ManagedNetworkPeeringPolicyPropertiesArgs(ManagedNetworkPeeringPolicyPropertiesArgs $) {
        this.hub = $.hub;
        this.mesh = $.mesh;
        this.spokes = $.spokes;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagedNetworkPeeringPolicyPropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagedNetworkPeeringPolicyPropertiesArgs $;

        public Builder() {
            $ = new ManagedNetworkPeeringPolicyPropertiesArgs();
        }

        public Builder(ManagedNetworkPeeringPolicyPropertiesArgs defaults) {
            $ = new ManagedNetworkPeeringPolicyPropertiesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param hub Gets or sets the hub virtual network ID
         * 
         * @return builder
         * 
         */
        public Builder hub(@Nullable Output<ResourceIdArgs> hub) {
            $.hub = hub;
            return this;
        }

        /**
         * @param hub Gets or sets the hub virtual network ID
         * 
         * @return builder
         * 
         */
        public Builder hub(ResourceIdArgs hub) {
            return hub(Output.of(hub));
        }

        /**
         * @param mesh Gets or sets the mesh group IDs
         * 
         * @return builder
         * 
         */
        public Builder mesh(@Nullable Output<List<ResourceIdArgs>> mesh) {
            $.mesh = mesh;
            return this;
        }

        /**
         * @param mesh Gets or sets the mesh group IDs
         * 
         * @return builder
         * 
         */
        public Builder mesh(List<ResourceIdArgs> mesh) {
            return mesh(Output.of(mesh));
        }

        /**
         * @param mesh Gets or sets the mesh group IDs
         * 
         * @return builder
         * 
         */
        public Builder mesh(ResourceIdArgs... mesh) {
            return mesh(List.of(mesh));
        }

        /**
         * @param spokes Gets or sets the spokes group IDs
         * 
         * @return builder
         * 
         */
        public Builder spokes(@Nullable Output<List<ResourceIdArgs>> spokes) {
            $.spokes = spokes;
            return this;
        }

        /**
         * @param spokes Gets or sets the spokes group IDs
         * 
         * @return builder
         * 
         */
        public Builder spokes(List<ResourceIdArgs> spokes) {
            return spokes(Output.of(spokes));
        }

        /**
         * @param spokes Gets or sets the spokes group IDs
         * 
         * @return builder
         * 
         */
        public Builder spokes(ResourceIdArgs... spokes) {
            return spokes(List.of(spokes));
        }

        /**
         * @param type Gets or sets the connectivity type of a network structure policy
         * 
         * @return builder
         * 
         */
        public Builder type(Output<Either<String,Type>> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Gets or sets the connectivity type of a network structure policy
         * 
         * @return builder
         * 
         */
        public Builder type(Either<String,Type> type) {
            return type(Output.of(type));
        }

        /**
         * @param type Gets or sets the connectivity type of a network structure policy
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Either.ofLeft(type));
        }

        /**
         * @param type Gets or sets the connectivity type of a network structure policy
         * 
         * @return builder
         * 
         */
        public Builder type(Type type) {
            return type(Either.ofRight(type));
        }

        public ManagedNetworkPeeringPolicyPropertiesArgs build() {
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
