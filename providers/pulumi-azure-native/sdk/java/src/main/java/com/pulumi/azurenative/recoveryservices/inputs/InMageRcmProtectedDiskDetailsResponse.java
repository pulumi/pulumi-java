// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.recoveryservices.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;


/**
 * InMageRcm protected disk details.
 * 
 */
public final class InMageRcmProtectedDiskDetailsResponse extends com.pulumi.resources.InvokeArgs {

    public static final InMageRcmProtectedDiskDetailsResponse Empty = new InMageRcmProtectedDiskDetailsResponse();

    /**
     * The disk capacity in bytes.
     * 
     */
    @Import(name="capacityInBytes", required=true)
    private Double capacityInBytes;

    public Double capacityInBytes() {
        return this.capacityInBytes;
    }

    /**
     * The disk encryption set ARM Id.
     * 
     */
    @Import(name="diskEncryptionSetId", required=true)
    private String diskEncryptionSetId;

    public String diskEncryptionSetId() {
        return this.diskEncryptionSetId;
    }

    /**
     * The disk Id.
     * 
     */
    @Import(name="diskId", required=true)
    private String diskId;

    public String diskId() {
        return this.diskId;
    }

    /**
     * The disk name.
     * 
     */
    @Import(name="diskName", required=true)
    private String diskName;

    public String diskName() {
        return this.diskName;
    }

    /**
     * The disk type.
     * 
     */
    @Import(name="diskType", required=true)
    private String diskType;

    public String diskType() {
        return this.diskType;
    }

    /**
     * A value indicating whether the disk is the OS disk.
     * 
     */
    @Import(name="isOSDisk", required=true)
    private String isOSDisk;

    public String isOSDisk() {
        return this.isOSDisk;
    }

    /**
     * The log storage account ARM Id.
     * 
     */
    @Import(name="logStorageAccountId", required=true)
    private String logStorageAccountId;

    public String logStorageAccountId() {
        return this.logStorageAccountId;
    }

    /**
     * The ARM Id of the seed managed disk.
     * 
     */
    @Import(name="seedManagedDiskId", required=true)
    private String seedManagedDiskId;

    public String seedManagedDiskId() {
        return this.seedManagedDiskId;
    }

    /**
     * The ARM Id of the target managed disk.
     * 
     */
    @Import(name="targetManagedDiskId", required=true)
    private String targetManagedDiskId;

    public String targetManagedDiskId() {
        return this.targetManagedDiskId;
    }

    private InMageRcmProtectedDiskDetailsResponse() {}

    private InMageRcmProtectedDiskDetailsResponse(InMageRcmProtectedDiskDetailsResponse $) {
        this.capacityInBytes = $.capacityInBytes;
        this.diskEncryptionSetId = $.diskEncryptionSetId;
        this.diskId = $.diskId;
        this.diskName = $.diskName;
        this.diskType = $.diskType;
        this.isOSDisk = $.isOSDisk;
        this.logStorageAccountId = $.logStorageAccountId;
        this.seedManagedDiskId = $.seedManagedDiskId;
        this.targetManagedDiskId = $.targetManagedDiskId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InMageRcmProtectedDiskDetailsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InMageRcmProtectedDiskDetailsResponse $;

        public Builder() {
            $ = new InMageRcmProtectedDiskDetailsResponse();
        }

        public Builder(InMageRcmProtectedDiskDetailsResponse defaults) {
            $ = new InMageRcmProtectedDiskDetailsResponse(Objects.requireNonNull(defaults));
        }

        public Builder capacityInBytes(Double capacityInBytes) {
            $.capacityInBytes = capacityInBytes;
            return this;
        }

        public Builder diskEncryptionSetId(String diskEncryptionSetId) {
            $.diskEncryptionSetId = diskEncryptionSetId;
            return this;
        }

        public Builder diskId(String diskId) {
            $.diskId = diskId;
            return this;
        }

        public Builder diskName(String diskName) {
            $.diskName = diskName;
            return this;
        }

        public Builder diskType(String diskType) {
            $.diskType = diskType;
            return this;
        }

        public Builder isOSDisk(String isOSDisk) {
            $.isOSDisk = isOSDisk;
            return this;
        }

        public Builder logStorageAccountId(String logStorageAccountId) {
            $.logStorageAccountId = logStorageAccountId;
            return this;
        }

        public Builder seedManagedDiskId(String seedManagedDiskId) {
            $.seedManagedDiskId = seedManagedDiskId;
            return this;
        }

        public Builder targetManagedDiskId(String targetManagedDiskId) {
            $.targetManagedDiskId = targetManagedDiskId;
            return this;
        }

        public InMageRcmProtectedDiskDetailsResponse build() {
            $.capacityInBytes = Objects.requireNonNull($.capacityInBytes, "expected parameter 'capacityInBytes' to be non-null");
            $.diskEncryptionSetId = Objects.requireNonNull($.diskEncryptionSetId, "expected parameter 'diskEncryptionSetId' to be non-null");
            $.diskId = Objects.requireNonNull($.diskId, "expected parameter 'diskId' to be non-null");
            $.diskName = Objects.requireNonNull($.diskName, "expected parameter 'diskName' to be non-null");
            $.diskType = Objects.requireNonNull($.diskType, "expected parameter 'diskType' to be non-null");
            $.isOSDisk = Objects.requireNonNull($.isOSDisk, "expected parameter 'isOSDisk' to be non-null");
            $.logStorageAccountId = Objects.requireNonNull($.logStorageAccountId, "expected parameter 'logStorageAccountId' to be non-null");
            $.seedManagedDiskId = Objects.requireNonNull($.seedManagedDiskId, "expected parameter 'seedManagedDiskId' to be non-null");
            $.targetManagedDiskId = Objects.requireNonNull($.targetManagedDiskId, "expected parameter 'targetManagedDiskId' to be non-null");
            return $;
        }
    }

}
