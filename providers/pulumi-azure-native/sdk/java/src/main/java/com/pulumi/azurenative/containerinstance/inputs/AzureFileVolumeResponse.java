// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.containerinstance.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The properties of the Azure File volume. Azure File shares are mounted as volumes.
 * 
 */
public final class AzureFileVolumeResponse extends com.pulumi.resources.InvokeArgs {

    public static final AzureFileVolumeResponse Empty = new AzureFileVolumeResponse();

    /**
     * The flag indicating whether the Azure File shared mounted as a volume is read-only.
     * 
     */
    @Import(name="readOnly")
      private final @Nullable Boolean readOnly;

    public Optional<Boolean> readOnly() {
        return this.readOnly == null ? Optional.empty() : Optional.ofNullable(this.readOnly);
    }

    /**
     * The name of the Azure File share to be mounted as a volume.
     * 
     */
    @Import(name="shareName", required=true)
      private final String shareName;

    public String shareName() {
        return this.shareName;
    }

    /**
     * The storage account access key used to access the Azure File share.
     * 
     */
    @Import(name="storageAccountKey")
      private final @Nullable String storageAccountKey;

    public Optional<String> storageAccountKey() {
        return this.storageAccountKey == null ? Optional.empty() : Optional.ofNullable(this.storageAccountKey);
    }

    /**
     * The name of the storage account that contains the Azure File share.
     * 
     */
    @Import(name="storageAccountName", required=true)
      private final String storageAccountName;

    public String storageAccountName() {
        return this.storageAccountName;
    }

    public AzureFileVolumeResponse(
        @Nullable Boolean readOnly,
        String shareName,
        @Nullable String storageAccountKey,
        String storageAccountName) {
        this.readOnly = readOnly;
        this.shareName = Objects.requireNonNull(shareName, "expected parameter 'shareName' to be non-null");
        this.storageAccountKey = storageAccountKey;
        this.storageAccountName = Objects.requireNonNull(storageAccountName, "expected parameter 'storageAccountName' to be non-null");
    }

    private AzureFileVolumeResponse() {
        this.readOnly = null;
        this.shareName = null;
        this.storageAccountKey = null;
        this.storageAccountName = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AzureFileVolumeResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Boolean readOnly;
        private String shareName;
        private @Nullable String storageAccountKey;
        private String storageAccountName;

        public Builder() {
    	      // Empty
        }

        public Builder(AzureFileVolumeResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.readOnly = defaults.readOnly;
    	      this.shareName = defaults.shareName;
    	      this.storageAccountKey = defaults.storageAccountKey;
    	      this.storageAccountName = defaults.storageAccountName;
        }

        public Builder readOnly(@Nullable Boolean readOnly) {
            this.readOnly = readOnly;
            return this;
        }
        public Builder shareName(String shareName) {
            this.shareName = Objects.requireNonNull(shareName);
            return this;
        }
        public Builder storageAccountKey(@Nullable String storageAccountKey) {
            this.storageAccountKey = storageAccountKey;
            return this;
        }
        public Builder storageAccountName(String storageAccountName) {
            this.storageAccountName = Objects.requireNonNull(storageAccountName);
            return this;
        }        public AzureFileVolumeResponse build() {
            return new AzureFileVolumeResponse(readOnly, shareName, storageAccountKey, storageAccountName);
        }
    }
}
