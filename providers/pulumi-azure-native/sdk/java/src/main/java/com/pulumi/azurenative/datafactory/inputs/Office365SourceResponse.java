// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A copy activity source for an Office 365 service.
 * 
 */
public final class Office365SourceResponse extends com.pulumi.resources.InvokeArgs {

    public static final Office365SourceResponse Empty = new Office365SourceResponse();

    /**
     * The groups containing all the users. Type: array of strings (or Expression with resultType array of strings).
     * 
     */
    @Import(name="allowedGroups")
    private @Nullable Object allowedGroups;

    public Optional<Object> allowedGroups() {
        return Optional.ofNullable(this.allowedGroups);
    }

    /**
     * The Column to apply the &lt;paramref name=&#34;StartTime&#34;/&gt; and &lt;paramref name=&#34;EndTime&#34;/&gt;. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="dateFilterColumn")
    private @Nullable Object dateFilterColumn;

    public Optional<Object> dateFilterColumn() {
        return Optional.ofNullable(this.dateFilterColumn);
    }

    /**
     * If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
     * 
     */
    @Import(name="disableMetricsCollection")
    private @Nullable Object disableMetricsCollection;

    public Optional<Object> disableMetricsCollection() {
        return Optional.ofNullable(this.disableMetricsCollection);
    }

    /**
     * End time of the requested range for this dataset. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="endTime")
    private @Nullable Object endTime;

    public Optional<Object> endTime() {
        return Optional.ofNullable(this.endTime);
    }

    /**
     * The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
     * 
     */
    @Import(name="maxConcurrentConnections")
    private @Nullable Object maxConcurrentConnections;

    public Optional<Object> maxConcurrentConnections() {
        return Optional.ofNullable(this.maxConcurrentConnections);
    }

    /**
     * The columns to be read out from the Office 365 table. Type: array of objects (or Expression with resultType array of objects). Example: [ { &#34;name&#34;: &#34;Id&#34; }, { &#34;name&#34;: &#34;CreatedDateTime&#34; } ]
     * 
     */
    @Import(name="outputColumns")
    private @Nullable Object outputColumns;

    public Optional<Object> outputColumns() {
        return Optional.ofNullable(this.outputColumns);
    }

    /**
     * Source retry count. Type: integer (or Expression with resultType integer).
     * 
     */
    @Import(name="sourceRetryCount")
    private @Nullable Object sourceRetryCount;

    public Optional<Object> sourceRetryCount() {
        return Optional.ofNullable(this.sourceRetryCount);
    }

    /**
     * Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     * 
     */
    @Import(name="sourceRetryWait")
    private @Nullable Object sourceRetryWait;

    public Optional<Object> sourceRetryWait() {
        return Optional.ofNullable(this.sourceRetryWait);
    }

    /**
     * Start time of the requested range for this dataset. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="startTime")
    private @Nullable Object startTime;

    public Optional<Object> startTime() {
        return Optional.ofNullable(this.startTime);
    }

    /**
     * Copy source type.
     * Expected value is &#39;Office365Source&#39;.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    public String type() {
        return this.type;
    }

    /**
     * The user scope uri. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="userScopeFilterUri")
    private @Nullable Object userScopeFilterUri;

    public Optional<Object> userScopeFilterUri() {
        return Optional.ofNullable(this.userScopeFilterUri);
    }

    private Office365SourceResponse() {}

    private Office365SourceResponse(Office365SourceResponse $) {
        this.allowedGroups = $.allowedGroups;
        this.dateFilterColumn = $.dateFilterColumn;
        this.disableMetricsCollection = $.disableMetricsCollection;
        this.endTime = $.endTime;
        this.maxConcurrentConnections = $.maxConcurrentConnections;
        this.outputColumns = $.outputColumns;
        this.sourceRetryCount = $.sourceRetryCount;
        this.sourceRetryWait = $.sourceRetryWait;
        this.startTime = $.startTime;
        this.type = $.type;
        this.userScopeFilterUri = $.userScopeFilterUri;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(Office365SourceResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Office365SourceResponse $;

        public Builder() {
            $ = new Office365SourceResponse();
        }

        public Builder(Office365SourceResponse defaults) {
            $ = new Office365SourceResponse(Objects.requireNonNull(defaults));
        }

        public Builder allowedGroups(@Nullable Object allowedGroups) {
            $.allowedGroups = allowedGroups;
            return this;
        }

        public Builder dateFilterColumn(@Nullable Object dateFilterColumn) {
            $.dateFilterColumn = dateFilterColumn;
            return this;
        }

        public Builder disableMetricsCollection(@Nullable Object disableMetricsCollection) {
            $.disableMetricsCollection = disableMetricsCollection;
            return this;
        }

        public Builder endTime(@Nullable Object endTime) {
            $.endTime = endTime;
            return this;
        }

        public Builder maxConcurrentConnections(@Nullable Object maxConcurrentConnections) {
            $.maxConcurrentConnections = maxConcurrentConnections;
            return this;
        }

        public Builder outputColumns(@Nullable Object outputColumns) {
            $.outputColumns = outputColumns;
            return this;
        }

        public Builder sourceRetryCount(@Nullable Object sourceRetryCount) {
            $.sourceRetryCount = sourceRetryCount;
            return this;
        }

        public Builder sourceRetryWait(@Nullable Object sourceRetryWait) {
            $.sourceRetryWait = sourceRetryWait;
            return this;
        }

        public Builder startTime(@Nullable Object startTime) {
            $.startTime = startTime;
            return this;
        }

        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public Builder userScopeFilterUri(@Nullable Object userScopeFilterUri) {
            $.userScopeFilterUri = userScopeFilterUri;
            return this;
        }

        public Office365SourceResponse build() {
            $.type = Codegen.stringProp("type").arg($.type).require();
            return $;
        }
    }

}
