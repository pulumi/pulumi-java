// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;


/**
 * The express custom setup of installing Azure PowerShell.
 * 
 */
public final class AzPowerShellSetupResponse extends com.pulumi.resources.InvokeArgs {

    public static final AzPowerShellSetupResponse Empty = new AzPowerShellSetupResponse();

    /**
     * The type of custom setup.
     * Expected value is &#39;AzPowerShellSetup&#39;.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    public String type() {
        return this.type;
    }

    /**
     * The required version of Azure PowerShell to install.
     * 
     */
    @Import(name="version", required=true)
    private String version;

    public String version() {
        return this.version;
    }

    private AzPowerShellSetupResponse() {}

    private AzPowerShellSetupResponse(AzPowerShellSetupResponse $) {
        this.type = $.type;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AzPowerShellSetupResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AzPowerShellSetupResponse $;

        public Builder() {
            $ = new AzPowerShellSetupResponse();
        }

        public Builder(AzPowerShellSetupResponse defaults) {
            $ = new AzPowerShellSetupResponse(Objects.requireNonNull(defaults));
        }

        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public Builder version(String version) {
            $.version = version;
            return this;
        }

        public AzPowerShellSetupResponse build() {
            $.type = Codegen.stringProp("type").arg($.type).require();
            $.version = Objects.requireNonNull($.version, "expected parameter 'version' to be non-null");
            return $;
        }
    }

}
