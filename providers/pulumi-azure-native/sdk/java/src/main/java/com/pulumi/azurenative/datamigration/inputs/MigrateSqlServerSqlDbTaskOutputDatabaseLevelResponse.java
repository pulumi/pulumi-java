// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datamigration.inputs;

import com.pulumi.azurenative.datamigration.inputs.DataItemMigrationSummaryResultResponse;
import com.pulumi.azurenative.datamigration.inputs.ReportableExceptionResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;


/**
 * Database level result for Sql Server to Azure Sql DB migration.
 * 
 */
public final class MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse extends com.pulumi.resources.InvokeArgs {

    public static final MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse Empty = new MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse();

    /**
     * Name of the item
     * 
     */
    @Import(name="databaseName", required=true)
    private String databaseName;

    /**
     * @return Name of the item
     * 
     */
    public String databaseName() {
        return this.databaseName;
    }

    /**
     * Migration end time
     * 
     */
    @Import(name="endedOn", required=true)
    private String endedOn;

    /**
     * @return Migration end time
     * 
     */
    public String endedOn() {
        return this.endedOn;
    }

    /**
     * Number of database/object errors.
     * 
     */
    @Import(name="errorCount", required=true)
    private Double errorCount;

    /**
     * @return Number of database/object errors.
     * 
     */
    public Double errorCount() {
        return this.errorCount;
    }

    /**
     * Wildcard string prefix to use for querying all errors of the item
     * 
     */
    @Import(name="errorPrefix", required=true)
    private String errorPrefix;

    /**
     * @return Wildcard string prefix to use for querying all errors of the item
     * 
     */
    public String errorPrefix() {
        return this.errorPrefix;
    }

    /**
     * Migration exceptions and warnings.
     * 
     */
    @Import(name="exceptionsAndWarnings", required=true)
    private List<ReportableExceptionResponse> exceptionsAndWarnings;

    /**
     * @return Migration exceptions and warnings.
     * 
     */
    public List<ReportableExceptionResponse> exceptionsAndWarnings() {
        return this.exceptionsAndWarnings;
    }

    /**
     * Result identifier
     * 
     */
    @Import(name="id", required=true)
    private String id;

    /**
     * @return Result identifier
     * 
     */
    public String id() {
        return this.id;
    }

    /**
     * Migration progress message
     * 
     */
    @Import(name="message", required=true)
    private String message;

    /**
     * @return Migration progress message
     * 
     */
    public String message() {
        return this.message;
    }

    /**
     * Number of objects
     * 
     */
    @Import(name="numberOfObjects", required=true)
    private Double numberOfObjects;

    /**
     * @return Number of objects
     * 
     */
    public Double numberOfObjects() {
        return this.numberOfObjects;
    }

    /**
     * Number of successfully completed objects
     * 
     */
    @Import(name="numberOfObjectsCompleted", required=true)
    private Double numberOfObjectsCompleted;

    /**
     * @return Number of successfully completed objects
     * 
     */
    public Double numberOfObjectsCompleted() {
        return this.numberOfObjectsCompleted;
    }

    /**
     * Summary of object results in the migration
     * 
     */
    @Import(name="objectSummary", required=true)
    private Map<String,DataItemMigrationSummaryResultResponse> objectSummary;

    /**
     * @return Summary of object results in the migration
     * 
     */
    public Map<String,DataItemMigrationSummaryResultResponse> objectSummary() {
        return this.objectSummary;
    }

    /**
     * Wildcard string prefix to use for querying all sub-tem results of the item
     * 
     */
    @Import(name="resultPrefix", required=true)
    private String resultPrefix;

    /**
     * @return Wildcard string prefix to use for querying all sub-tem results of the item
     * 
     */
    public String resultPrefix() {
        return this.resultPrefix;
    }

    /**
     * Result type
     * Expected value is &#39;DatabaseLevelOutput&#39;.
     * 
     */
    @Import(name="resultType", required=true)
    private String resultType;

    /**
     * @return Result type
     * Expected value is &#39;DatabaseLevelOutput&#39;.
     * 
     */
    public String resultType() {
        return this.resultType;
    }

    /**
     * Migration stage that this database is in
     * 
     */
    @Import(name="stage", required=true)
    private String stage;

    /**
     * @return Migration stage that this database is in
     * 
     */
    public String stage() {
        return this.stage;
    }

    /**
     * Migration start time
     * 
     */
    @Import(name="startedOn", required=true)
    private String startedOn;

    /**
     * @return Migration start time
     * 
     */
    public String startedOn() {
        return this.startedOn;
    }

    /**
     * Current state of migration
     * 
     */
    @Import(name="state", required=true)
    private String state;

    /**
     * @return Current state of migration
     * 
     */
    public String state() {
        return this.state;
    }

    /**
     * Status message
     * 
     */
    @Import(name="statusMessage", required=true)
    private String statusMessage;

    /**
     * @return Status message
     * 
     */
    public String statusMessage() {
        return this.statusMessage;
    }

    private MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse() {}

    private MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse(MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse $) {
        this.databaseName = $.databaseName;
        this.endedOn = $.endedOn;
        this.errorCount = $.errorCount;
        this.errorPrefix = $.errorPrefix;
        this.exceptionsAndWarnings = $.exceptionsAndWarnings;
        this.id = $.id;
        this.message = $.message;
        this.numberOfObjects = $.numberOfObjects;
        this.numberOfObjectsCompleted = $.numberOfObjectsCompleted;
        this.objectSummary = $.objectSummary;
        this.resultPrefix = $.resultPrefix;
        this.resultType = $.resultType;
        this.stage = $.stage;
        this.startedOn = $.startedOn;
        this.state = $.state;
        this.statusMessage = $.statusMessage;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse $;

        public Builder() {
            $ = new MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse();
        }

        public Builder(MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse defaults) {
            $ = new MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param databaseName Name of the item
         * 
         * @return builder
         * 
         */
        public Builder databaseName(String databaseName) {
            $.databaseName = databaseName;
            return this;
        }

        /**
         * @param endedOn Migration end time
         * 
         * @return builder
         * 
         */
        public Builder endedOn(String endedOn) {
            $.endedOn = endedOn;
            return this;
        }

        /**
         * @param errorCount Number of database/object errors.
         * 
         * @return builder
         * 
         */
        public Builder errorCount(Double errorCount) {
            $.errorCount = errorCount;
            return this;
        }

        /**
         * @param errorPrefix Wildcard string prefix to use for querying all errors of the item
         * 
         * @return builder
         * 
         */
        public Builder errorPrefix(String errorPrefix) {
            $.errorPrefix = errorPrefix;
            return this;
        }

        /**
         * @param exceptionsAndWarnings Migration exceptions and warnings.
         * 
         * @return builder
         * 
         */
        public Builder exceptionsAndWarnings(List<ReportableExceptionResponse> exceptionsAndWarnings) {
            $.exceptionsAndWarnings = exceptionsAndWarnings;
            return this;
        }

        /**
         * @param exceptionsAndWarnings Migration exceptions and warnings.
         * 
         * @return builder
         * 
         */
        public Builder exceptionsAndWarnings(ReportableExceptionResponse... exceptionsAndWarnings) {
            return exceptionsAndWarnings(List.of(exceptionsAndWarnings));
        }

        /**
         * @param id Result identifier
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            $.id = id;
            return this;
        }

        /**
         * @param message Migration progress message
         * 
         * @return builder
         * 
         */
        public Builder message(String message) {
            $.message = message;
            return this;
        }

        /**
         * @param numberOfObjects Number of objects
         * 
         * @return builder
         * 
         */
        public Builder numberOfObjects(Double numberOfObjects) {
            $.numberOfObjects = numberOfObjects;
            return this;
        }

        /**
         * @param numberOfObjectsCompleted Number of successfully completed objects
         * 
         * @return builder
         * 
         */
        public Builder numberOfObjectsCompleted(Double numberOfObjectsCompleted) {
            $.numberOfObjectsCompleted = numberOfObjectsCompleted;
            return this;
        }

        /**
         * @param objectSummary Summary of object results in the migration
         * 
         * @return builder
         * 
         */
        public Builder objectSummary(Map<String,DataItemMigrationSummaryResultResponse> objectSummary) {
            $.objectSummary = objectSummary;
            return this;
        }

        /**
         * @param resultPrefix Wildcard string prefix to use for querying all sub-tem results of the item
         * 
         * @return builder
         * 
         */
        public Builder resultPrefix(String resultPrefix) {
            $.resultPrefix = resultPrefix;
            return this;
        }

        /**
         * @param resultType Result type
         * Expected value is &#39;DatabaseLevelOutput&#39;.
         * 
         * @return builder
         * 
         */
        public Builder resultType(String resultType) {
            $.resultType = resultType;
            return this;
        }

        /**
         * @param stage Migration stage that this database is in
         * 
         * @return builder
         * 
         */
        public Builder stage(String stage) {
            $.stage = stage;
            return this;
        }

        /**
         * @param startedOn Migration start time
         * 
         * @return builder
         * 
         */
        public Builder startedOn(String startedOn) {
            $.startedOn = startedOn;
            return this;
        }

        /**
         * @param state Current state of migration
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            $.state = state;
            return this;
        }

        /**
         * @param statusMessage Status message
         * 
         * @return builder
         * 
         */
        public Builder statusMessage(String statusMessage) {
            $.statusMessage = statusMessage;
            return this;
        }

        public MigrateSqlServerSqlDbTaskOutputDatabaseLevelResponse build() {
            $.databaseName = Objects.requireNonNull($.databaseName, "expected parameter 'databaseName' to be non-null");
            $.endedOn = Objects.requireNonNull($.endedOn, "expected parameter 'endedOn' to be non-null");
            $.errorCount = Objects.requireNonNull($.errorCount, "expected parameter 'errorCount' to be non-null");
            $.errorPrefix = Objects.requireNonNull($.errorPrefix, "expected parameter 'errorPrefix' to be non-null");
            $.exceptionsAndWarnings = Objects.requireNonNull($.exceptionsAndWarnings, "expected parameter 'exceptionsAndWarnings' to be non-null");
            $.id = Objects.requireNonNull($.id, "expected parameter 'id' to be non-null");
            $.message = Objects.requireNonNull($.message, "expected parameter 'message' to be non-null");
            $.numberOfObjects = Objects.requireNonNull($.numberOfObjects, "expected parameter 'numberOfObjects' to be non-null");
            $.numberOfObjectsCompleted = Objects.requireNonNull($.numberOfObjectsCompleted, "expected parameter 'numberOfObjectsCompleted' to be non-null");
            $.objectSummary = Objects.requireNonNull($.objectSummary, "expected parameter 'objectSummary' to be non-null");
            $.resultPrefix = Objects.requireNonNull($.resultPrefix, "expected parameter 'resultPrefix' to be non-null");
            $.resultType = Codegen.stringProp("resultType").arg($.resultType).require();
            $.stage = Objects.requireNonNull($.stage, "expected parameter 'stage' to be non-null");
            $.startedOn = Objects.requireNonNull($.startedOn, "expected parameter 'startedOn' to be non-null");
            $.state = Objects.requireNonNull($.state, "expected parameter 'state' to be non-null");
            $.statusMessage = Objects.requireNonNull($.statusMessage, "expected parameter 'statusMessage' to be non-null");
            return $;
        }
    }

}
