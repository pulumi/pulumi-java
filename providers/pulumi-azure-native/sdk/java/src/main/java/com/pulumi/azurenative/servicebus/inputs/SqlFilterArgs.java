// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.servicebus.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Represents a filter which is a composition of an expression and an action that is executed in the pub/sub pipeline.
 * 
 */
public final class SqlFilterArgs extends com.pulumi.resources.ResourceArgs {

    public static final SqlFilterArgs Empty = new SqlFilterArgs();

    /**
     * This property is reserved for future use. An integer value showing the compatibility level, currently hard-coded to 20.
     * 
     */
    @Import(name="compatibilityLevel")
    private @Nullable Output<Integer> compatibilityLevel;

    /**
     * @return This property is reserved for future use. An integer value showing the compatibility level, currently hard-coded to 20.
     * 
     */
    public Optional<Output<Integer>> compatibilityLevel() {
        return Optional.ofNullable(this.compatibilityLevel);
    }

    /**
     * Value that indicates whether the rule action requires preprocessing.
     * 
     */
    @Import(name="requiresPreprocessing")
    private @Nullable Output<Boolean> requiresPreprocessing;

    /**
     * @return Value that indicates whether the rule action requires preprocessing.
     * 
     */
    public Optional<Output<Boolean>> requiresPreprocessing() {
        return Optional.ofNullable(this.requiresPreprocessing);
    }

    /**
     * The SQL expression. e.g. MyProperty=&#39;ABC&#39;
     * 
     */
    @Import(name="sqlExpression")
    private @Nullable Output<String> sqlExpression;

    /**
     * @return The SQL expression. e.g. MyProperty=&#39;ABC&#39;
     * 
     */
    public Optional<Output<String>> sqlExpression() {
        return Optional.ofNullable(this.sqlExpression);
    }

    private SqlFilterArgs() {}

    private SqlFilterArgs(SqlFilterArgs $) {
        this.compatibilityLevel = $.compatibilityLevel;
        this.requiresPreprocessing = $.requiresPreprocessing;
        this.sqlExpression = $.sqlExpression;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SqlFilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SqlFilterArgs $;

        public Builder() {
            $ = new SqlFilterArgs();
        }

        public Builder(SqlFilterArgs defaults) {
            $ = new SqlFilterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compatibilityLevel This property is reserved for future use. An integer value showing the compatibility level, currently hard-coded to 20.
         * 
         * @return builder
         * 
         */
        public Builder compatibilityLevel(@Nullable Output<Integer> compatibilityLevel) {
            $.compatibilityLevel = compatibilityLevel;
            return this;
        }

        /**
         * @param compatibilityLevel This property is reserved for future use. An integer value showing the compatibility level, currently hard-coded to 20.
         * 
         * @return builder
         * 
         */
        public Builder compatibilityLevel(Integer compatibilityLevel) {
            return compatibilityLevel(Output.of(compatibilityLevel));
        }

        /**
         * @param requiresPreprocessing Value that indicates whether the rule action requires preprocessing.
         * 
         * @return builder
         * 
         */
        public Builder requiresPreprocessing(@Nullable Output<Boolean> requiresPreprocessing) {
            $.requiresPreprocessing = requiresPreprocessing;
            return this;
        }

        /**
         * @param requiresPreprocessing Value that indicates whether the rule action requires preprocessing.
         * 
         * @return builder
         * 
         */
        public Builder requiresPreprocessing(Boolean requiresPreprocessing) {
            return requiresPreprocessing(Output.of(requiresPreprocessing));
        }

        /**
         * @param sqlExpression The SQL expression. e.g. MyProperty=&#39;ABC&#39;
         * 
         * @return builder
         * 
         */
        public Builder sqlExpression(@Nullable Output<String> sqlExpression) {
            $.sqlExpression = sqlExpression;
            return this;
        }

        /**
         * @param sqlExpression The SQL expression. e.g. MyProperty=&#39;ABC&#39;
         * 
         * @return builder
         * 
         */
        public Builder sqlExpression(String sqlExpression) {
            return sqlExpression(Output.of(sqlExpression));
        }

        public SqlFilterArgs build() {
            $.compatibilityLevel = Codegen.integerProp("compatibilityLevel").output().arg($.compatibilityLevel).def(20).getNullable();
            $.requiresPreprocessing = Codegen.booleanProp("requiresPreprocessing").output().arg($.requiresPreprocessing).def(true).getNullable();
            return $;
        }
    }

}
