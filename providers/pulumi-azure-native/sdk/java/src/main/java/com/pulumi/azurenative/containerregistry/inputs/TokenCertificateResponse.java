// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.containerregistry.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The properties of a certificate used for authenticating a token.
 * 
 */
public final class TokenCertificateResponse extends com.pulumi.resources.InvokeArgs {

    public static final TokenCertificateResponse Empty = new TokenCertificateResponse();

    /**
     * Base 64 encoded string of the public certificate1 in PEM format that will be used for authenticating the token.
     * 
     */
    @Import(name="encodedPemCertificate")
    private @Nullable String encodedPemCertificate;

    /**
     * @return Base 64 encoded string of the public certificate1 in PEM format that will be used for authenticating the token.
     * 
     */
    public Optional<String> encodedPemCertificate() {
        return Optional.ofNullable(this.encodedPemCertificate);
    }

    /**
     * The expiry datetime of the certificate.
     * 
     */
    @Import(name="expiry")
    private @Nullable String expiry;

    /**
     * @return The expiry datetime of the certificate.
     * 
     */
    public Optional<String> expiry() {
        return Optional.ofNullable(this.expiry);
    }

    @Import(name="name")
    private @Nullable String name;

    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The thumbprint of the certificate.
     * 
     */
    @Import(name="thumbprint")
    private @Nullable String thumbprint;

    /**
     * @return The thumbprint of the certificate.
     * 
     */
    public Optional<String> thumbprint() {
        return Optional.ofNullable(this.thumbprint);
    }

    private TokenCertificateResponse() {}

    private TokenCertificateResponse(TokenCertificateResponse $) {
        this.encodedPemCertificate = $.encodedPemCertificate;
        this.expiry = $.expiry;
        this.name = $.name;
        this.thumbprint = $.thumbprint;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TokenCertificateResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TokenCertificateResponse $;

        public Builder() {
            $ = new TokenCertificateResponse();
        }

        public Builder(TokenCertificateResponse defaults) {
            $ = new TokenCertificateResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param encodedPemCertificate Base 64 encoded string of the public certificate1 in PEM format that will be used for authenticating the token.
         * 
         * @return builder
         * 
         */
        public Builder encodedPemCertificate(@Nullable String encodedPemCertificate) {
            $.encodedPemCertificate = encodedPemCertificate;
            return this;
        }

        /**
         * @param expiry The expiry datetime of the certificate.
         * 
         * @return builder
         * 
         */
        public Builder expiry(@Nullable String expiry) {
            $.expiry = expiry;
            return this;
        }

        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param thumbprint The thumbprint of the certificate.
         * 
         * @return builder
         * 
         */
        public Builder thumbprint(@Nullable String thumbprint) {
            $.thumbprint = thumbprint;
            return this;
        }

        public TokenCertificateResponse build() {
            return $;
        }
    }

}
