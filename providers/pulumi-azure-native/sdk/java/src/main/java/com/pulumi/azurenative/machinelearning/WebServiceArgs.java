// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.machinelearning;

import com.pulumi.azurenative.machinelearning.inputs.WebServicePropertiesForGraphArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WebServiceArgs extends com.pulumi.resources.ResourceArgs {

    public static final WebServiceArgs Empty = new WebServiceArgs();

    /**
     * Specifies the location of the resource.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Specifies the location of the resource.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Contains the property payload that describes the web service.
     * 
     */
    @Import(name="properties", required=true)
    private Output<WebServicePropertiesForGraphArgs> properties;

    /**
     * @return Contains the property payload that describes the web service.
     * 
     */
    public Output<WebServicePropertiesForGraphArgs> properties() {
        return this.properties;
    }

    /**
     * Name of the resource group in which the web service is located.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return Name of the resource group in which the web service is located.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Contains resource tags defined as key/value pairs.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Contains resource tags defined as key/value pairs.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The name of the web service.
     * 
     */
    @Import(name="webServiceName")
    private @Nullable Output<String> webServiceName;

    /**
     * @return The name of the web service.
     * 
     */
    public Optional<Output<String>> webServiceName() {
        return Optional.ofNullable(this.webServiceName);
    }

    private WebServiceArgs() {}

    private WebServiceArgs(WebServiceArgs $) {
        this.location = $.location;
        this.properties = $.properties;
        this.resourceGroupName = $.resourceGroupName;
        this.tags = $.tags;
        this.webServiceName = $.webServiceName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WebServiceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WebServiceArgs $;

        public Builder() {
            $ = new WebServiceArgs();
        }

        public Builder(WebServiceArgs defaults) {
            $ = new WebServiceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param location Specifies the location of the resource.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Specifies the location of the resource.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param properties Contains the property payload that describes the web service.
         * 
         * @return builder
         * 
         */
        public Builder properties(Output<WebServicePropertiesForGraphArgs> properties) {
            $.properties = properties;
            return this;
        }

        /**
         * @param properties Contains the property payload that describes the web service.
         * 
         * @return builder
         * 
         */
        public Builder properties(WebServicePropertiesForGraphArgs properties) {
            return properties(Output.of(properties));
        }

        /**
         * @param resourceGroupName Name of the resource group in which the web service is located.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName Name of the resource group in which the web service is located.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param tags Contains resource tags defined as key/value pairs.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Contains resource tags defined as key/value pairs.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param webServiceName The name of the web service.
         * 
         * @return builder
         * 
         */
        public Builder webServiceName(@Nullable Output<String> webServiceName) {
            $.webServiceName = webServiceName;
            return this;
        }

        /**
         * @param webServiceName The name of the web service.
         * 
         * @return builder
         * 
         */
        public Builder webServiceName(String webServiceName) {
            return webServiceName(Output.of(webServiceName));
        }

        public WebServiceArgs build() {
            $.properties = Objects.requireNonNull($.properties, "expected parameter 'properties' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
