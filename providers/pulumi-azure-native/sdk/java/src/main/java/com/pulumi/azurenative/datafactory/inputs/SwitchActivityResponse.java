// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.azurenative.datafactory.inputs.ActivityDependencyResponse;
import com.pulumi.azurenative.datafactory.inputs.AppendVariableActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.AzureDataExplorerCommandActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.AzureFunctionActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.AzureMLBatchExecutionActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.AzureMLExecutePipelineActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.AzureMLUpdateResourceActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.ControlActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.CopyActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.CustomActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.DataLakeAnalyticsUSQLActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.DatabricksNotebookActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.DatabricksSparkJarActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.DatabricksSparkPythonActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.DeleteActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.ExecuteDataFlowActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.ExecutePipelineActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.ExecuteSSISPackageActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.ExecuteWranglingDataflowActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.ExecutionActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.ExpressionResponse;
import com.pulumi.azurenative.datafactory.inputs.FailActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.FilterActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.ForEachActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.GetMetadataActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.HDInsightHiveActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.HDInsightMapReduceActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.HDInsightPigActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.HDInsightSparkActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.HDInsightStreamingActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.IfConditionActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.LookupActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.SetVariableActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.SqlServerStoredProcedureActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.SwitchCaseResponse;
import com.pulumi.azurenative.datafactory.inputs.UntilActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.UserPropertyResponse;
import com.pulumi.azurenative.datafactory.inputs.ValidationActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.WaitActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.WebActivityResponse;
import com.pulumi.azurenative.datafactory.inputs.WebHookActivityResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * This activity evaluates an expression and executes activities under the cases property that correspond to the expression evaluation expected in the equals property.
 * 
 */
public final class SwitchActivityResponse extends com.pulumi.resources.InvokeArgs {

    public static final SwitchActivityResponse Empty = new SwitchActivityResponse();

    /**
     * List of cases that correspond to expected values of the &#39;on&#39; property. This is an optional property and if not provided, the activity will execute activities provided in defaultActivities.
     * 
     */
    @Import(name="cases")
    private @Nullable List<SwitchCaseResponse> cases;

    /**
     * @return List of cases that correspond to expected values of the &#39;on&#39; property. This is an optional property and if not provided, the activity will execute activities provided in defaultActivities.
     * 
     */
    public Optional<List<SwitchCaseResponse>> cases() {
        return Optional.ofNullable(this.cases);
    }

    /**
     * List of activities to execute if no case condition is satisfied. This is an optional property and if not provided, the activity will exit without any action.
     * 
     */
    @Import(name="defaultActivities")
    private @Nullable List<Object> defaultActivities;

    /**
     * @return List of activities to execute if no case condition is satisfied. This is an optional property and if not provided, the activity will exit without any action.
     * 
     */
    public Optional<List<Object>> defaultActivities() {
        return Optional.ofNullable(this.defaultActivities);
    }

    /**
     * Activity depends on condition.
     * 
     */
    @Import(name="dependsOn")
    private @Nullable List<ActivityDependencyResponse> dependsOn;

    /**
     * @return Activity depends on condition.
     * 
     */
    public Optional<List<ActivityDependencyResponse>> dependsOn() {
        return Optional.ofNullable(this.dependsOn);
    }

    /**
     * Activity description.
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    /**
     * @return Activity description.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Activity name.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return Activity name.
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * An expression that would evaluate to a string or integer. This is used to determine the block of activities in cases that will be executed.
     * 
     */
    @Import(name="on", required=true)
    private ExpressionResponse on;

    /**
     * @return An expression that would evaluate to a string or integer. This is used to determine the block of activities in cases that will be executed.
     * 
     */
    public ExpressionResponse on() {
        return this.on;
    }

    /**
     * Type of activity.
     * Expected value is &#39;Switch&#39;.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    /**
     * @return Type of activity.
     * Expected value is &#39;Switch&#39;.
     * 
     */
    public String type() {
        return this.type;
    }

    /**
     * Activity user properties.
     * 
     */
    @Import(name="userProperties")
    private @Nullable List<UserPropertyResponse> userProperties;

    /**
     * @return Activity user properties.
     * 
     */
    public Optional<List<UserPropertyResponse>> userProperties() {
        return Optional.ofNullable(this.userProperties);
    }

    private SwitchActivityResponse() {}

    private SwitchActivityResponse(SwitchActivityResponse $) {
        this.cases = $.cases;
        this.defaultActivities = $.defaultActivities;
        this.dependsOn = $.dependsOn;
        this.description = $.description;
        this.name = $.name;
        this.on = $.on;
        this.type = $.type;
        this.userProperties = $.userProperties;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SwitchActivityResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SwitchActivityResponse $;

        public Builder() {
            $ = new SwitchActivityResponse();
        }

        public Builder(SwitchActivityResponse defaults) {
            $ = new SwitchActivityResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param cases List of cases that correspond to expected values of the &#39;on&#39; property. This is an optional property and if not provided, the activity will execute activities provided in defaultActivities.
         * 
         * @return builder
         * 
         */
        public Builder cases(@Nullable List<SwitchCaseResponse> cases) {
            $.cases = cases;
            return this;
        }

        /**
         * @param cases List of cases that correspond to expected values of the &#39;on&#39; property. This is an optional property and if not provided, the activity will execute activities provided in defaultActivities.
         * 
         * @return builder
         * 
         */
        public Builder cases(SwitchCaseResponse... cases) {
            return cases(List.of(cases));
        }

        /**
         * @param defaultActivities List of activities to execute if no case condition is satisfied. This is an optional property and if not provided, the activity will exit without any action.
         * 
         * @return builder
         * 
         */
        public Builder defaultActivities(@Nullable List<Object> defaultActivities) {
            $.defaultActivities = defaultActivities;
            return this;
        }

        /**
         * @param defaultActivities List of activities to execute if no case condition is satisfied. This is an optional property and if not provided, the activity will exit without any action.
         * 
         * @return builder
         * 
         */
        public Builder defaultActivities(Object... defaultActivities) {
            return defaultActivities(List.of(defaultActivities));
        }

        /**
         * @param dependsOn Activity depends on condition.
         * 
         * @return builder
         * 
         */
        public Builder dependsOn(@Nullable List<ActivityDependencyResponse> dependsOn) {
            $.dependsOn = dependsOn;
            return this;
        }

        /**
         * @param dependsOn Activity depends on condition.
         * 
         * @return builder
         * 
         */
        public Builder dependsOn(ActivityDependencyResponse... dependsOn) {
            return dependsOn(List.of(dependsOn));
        }

        /**
         * @param description Activity description.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        /**
         * @param name Activity name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param on An expression that would evaluate to a string or integer. This is used to determine the block of activities in cases that will be executed.
         * 
         * @return builder
         * 
         */
        public Builder on(ExpressionResponse on) {
            $.on = on;
            return this;
        }

        /**
         * @param type Type of activity.
         * Expected value is &#39;Switch&#39;.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            $.type = type;
            return this;
        }

        /**
         * @param userProperties Activity user properties.
         * 
         * @return builder
         * 
         */
        public Builder userProperties(@Nullable List<UserPropertyResponse> userProperties) {
            $.userProperties = userProperties;
            return this;
        }

        /**
         * @param userProperties Activity user properties.
         * 
         * @return builder
         * 
         */
        public Builder userProperties(UserPropertyResponse... userProperties) {
            return userProperties(List.of(userProperties));
        }

        public SwitchActivityResponse build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.on = Objects.requireNonNull($.on, "expected parameter 'on' to be non-null");
            $.type = Codegen.stringProp("type").arg($.type).require();
            return $;
        }
    }

}
