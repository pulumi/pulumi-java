// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.azurenative.datafactory.inputs.IntegrationRuntimeDataFlowPropertiesArgs;
import com.pulumi.azurenative.datafactory.inputs.IntegrationRuntimeVNetPropertiesArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The compute resource properties for managed integration runtime.
 * 
 */
public final class IntegrationRuntimeComputePropertiesArgs extends com.pulumi.resources.ResourceArgs {

    public static final IntegrationRuntimeComputePropertiesArgs Empty = new IntegrationRuntimeComputePropertiesArgs();

    /**
     * Data flow properties for managed integration runtime.
     * 
     */
    @Import(name="dataFlowProperties")
    private @Nullable Output<IntegrationRuntimeDataFlowPropertiesArgs> dataFlowProperties;

    public Optional<Output<IntegrationRuntimeDataFlowPropertiesArgs>> dataFlowProperties() {
        return Optional.ofNullable(this.dataFlowProperties);
    }

    /**
     * The location for managed integration runtime. The supported regions could be found on https://docs.microsoft.com/en-us/azure/data-factory/data-factory-data-movement-activities
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Maximum parallel executions count per node for managed integration runtime.
     * 
     */
    @Import(name="maxParallelExecutionsPerNode")
    private @Nullable Output<Integer> maxParallelExecutionsPerNode;

    public Optional<Output<Integer>> maxParallelExecutionsPerNode() {
        return Optional.ofNullable(this.maxParallelExecutionsPerNode);
    }

    /**
     * The node size requirement to managed integration runtime.
     * 
     */
    @Import(name="nodeSize")
    private @Nullable Output<String> nodeSize;

    public Optional<Output<String>> nodeSize() {
        return Optional.ofNullable(this.nodeSize);
    }

    /**
     * The required number of nodes for managed integration runtime.
     * 
     */
    @Import(name="numberOfNodes")
    private @Nullable Output<Integer> numberOfNodes;

    public Optional<Output<Integer>> numberOfNodes() {
        return Optional.ofNullable(this.numberOfNodes);
    }

    /**
     * VNet properties for managed integration runtime.
     * 
     */
    @Import(name="vNetProperties")
    private @Nullable Output<IntegrationRuntimeVNetPropertiesArgs> vNetProperties;

    public Optional<Output<IntegrationRuntimeVNetPropertiesArgs>> vNetProperties() {
        return Optional.ofNullable(this.vNetProperties);
    }

    private IntegrationRuntimeComputePropertiesArgs() {}

    private IntegrationRuntimeComputePropertiesArgs(IntegrationRuntimeComputePropertiesArgs $) {
        this.dataFlowProperties = $.dataFlowProperties;
        this.location = $.location;
        this.maxParallelExecutionsPerNode = $.maxParallelExecutionsPerNode;
        this.nodeSize = $.nodeSize;
        this.numberOfNodes = $.numberOfNodes;
        this.vNetProperties = $.vNetProperties;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IntegrationRuntimeComputePropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IntegrationRuntimeComputePropertiesArgs $;

        public Builder() {
            $ = new IntegrationRuntimeComputePropertiesArgs();
        }

        public Builder(IntegrationRuntimeComputePropertiesArgs defaults) {
            $ = new IntegrationRuntimeComputePropertiesArgs(Objects.requireNonNull(defaults));
        }

        public Builder dataFlowProperties(@Nullable Output<IntegrationRuntimeDataFlowPropertiesArgs> dataFlowProperties) {
            $.dataFlowProperties = dataFlowProperties;
            return this;
        }

        public Builder dataFlowProperties(IntegrationRuntimeDataFlowPropertiesArgs dataFlowProperties) {
            return dataFlowProperties(Output.of(dataFlowProperties));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder maxParallelExecutionsPerNode(@Nullable Output<Integer> maxParallelExecutionsPerNode) {
            $.maxParallelExecutionsPerNode = maxParallelExecutionsPerNode;
            return this;
        }

        public Builder maxParallelExecutionsPerNode(Integer maxParallelExecutionsPerNode) {
            return maxParallelExecutionsPerNode(Output.of(maxParallelExecutionsPerNode));
        }

        public Builder nodeSize(@Nullable Output<String> nodeSize) {
            $.nodeSize = nodeSize;
            return this;
        }

        public Builder nodeSize(String nodeSize) {
            return nodeSize(Output.of(nodeSize));
        }

        public Builder numberOfNodes(@Nullable Output<Integer> numberOfNodes) {
            $.numberOfNodes = numberOfNodes;
            return this;
        }

        public Builder numberOfNodes(Integer numberOfNodes) {
            return numberOfNodes(Output.of(numberOfNodes));
        }

        public Builder vNetProperties(@Nullable Output<IntegrationRuntimeVNetPropertiesArgs> vNetProperties) {
            $.vNetProperties = vNetProperties;
            return this;
        }

        public Builder vNetProperties(IntegrationRuntimeVNetPropertiesArgs vNetProperties) {
            return vNetProperties(Output.of(vNetProperties));
        }

        public IntegrationRuntimeComputePropertiesArgs build() {
            return $;
        }
    }

}
