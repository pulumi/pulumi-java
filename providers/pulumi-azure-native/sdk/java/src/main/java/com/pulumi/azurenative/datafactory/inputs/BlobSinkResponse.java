// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.azurenative.datafactory.inputs.MetadataItemResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A copy activity Azure Blob sink.
 * 
 */
public final class BlobSinkResponse extends com.pulumi.resources.InvokeArgs {

    public static final BlobSinkResponse Empty = new BlobSinkResponse();

    /**
     * Blob writer add header. Type: boolean (or Expression with resultType boolean).
     * 
     */
    @Import(name="blobWriterAddHeader")
    private @Nullable Object blobWriterAddHeader;

    /**
     * @return Blob writer add header. Type: boolean (or Expression with resultType boolean).
     * 
     */
    public Optional<Object> blobWriterAddHeader() {
        return Optional.ofNullable(this.blobWriterAddHeader);
    }

    /**
     * Blob writer date time format. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="blobWriterDateTimeFormat")
    private @Nullable Object blobWriterDateTimeFormat;

    /**
     * @return Blob writer date time format. Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Object> blobWriterDateTimeFormat() {
        return Optional.ofNullable(this.blobWriterDateTimeFormat);
    }

    /**
     * Blob writer overwrite files. Type: boolean (or Expression with resultType boolean).
     * 
     */
    @Import(name="blobWriterOverwriteFiles")
    private @Nullable Object blobWriterOverwriteFiles;

    /**
     * @return Blob writer overwrite files. Type: boolean (or Expression with resultType boolean).
     * 
     */
    public Optional<Object> blobWriterOverwriteFiles() {
        return Optional.ofNullable(this.blobWriterOverwriteFiles);
    }

    /**
     * The type of copy behavior for copy sink.
     * 
     */
    @Import(name="copyBehavior")
    private @Nullable Object copyBehavior;

    /**
     * @return The type of copy behavior for copy sink.
     * 
     */
    public Optional<Object> copyBehavior() {
        return Optional.ofNullable(this.copyBehavior);
    }

    /**
     * If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
     * 
     */
    @Import(name="disableMetricsCollection")
    private @Nullable Object disableMetricsCollection;

    /**
     * @return If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
     * 
     */
    public Optional<Object> disableMetricsCollection() {
        return Optional.ofNullable(this.disableMetricsCollection);
    }

    /**
     * The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
     * 
     */
    @Import(name="maxConcurrentConnections")
    private @Nullable Object maxConcurrentConnections;

    /**
     * @return The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
     * 
     */
    public Optional<Object> maxConcurrentConnections() {
        return Optional.ofNullable(this.maxConcurrentConnections);
    }

    /**
     * Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects).
     * 
     */
    @Import(name="metadata")
    private @Nullable List<MetadataItemResponse> metadata;

    /**
     * @return Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects).
     * 
     */
    public Optional<List<MetadataItemResponse>> metadata() {
        return Optional.ofNullable(this.metadata);
    }

    /**
     * Sink retry count. Type: integer (or Expression with resultType integer).
     * 
     */
    @Import(name="sinkRetryCount")
    private @Nullable Object sinkRetryCount;

    /**
     * @return Sink retry count. Type: integer (or Expression with resultType integer).
     * 
     */
    public Optional<Object> sinkRetryCount() {
        return Optional.ofNullable(this.sinkRetryCount);
    }

    /**
     * Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     * 
     */
    @Import(name="sinkRetryWait")
    private @Nullable Object sinkRetryWait;

    /**
     * @return Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     * 
     */
    public Optional<Object> sinkRetryWait() {
        return Optional.ofNullable(this.sinkRetryWait);
    }

    /**
     * Copy sink type.
     * Expected value is &#39;BlobSink&#39;.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    /**
     * @return Copy sink type.
     * Expected value is &#39;BlobSink&#39;.
     * 
     */
    public String type() {
        return this.type;
    }

    /**
     * Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
     * 
     */
    @Import(name="writeBatchSize")
    private @Nullable Object writeBatchSize;

    /**
     * @return Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
     * 
     */
    public Optional<Object> writeBatchSize() {
        return Optional.ofNullable(this.writeBatchSize);
    }

    /**
     * Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     * 
     */
    @Import(name="writeBatchTimeout")
    private @Nullable Object writeBatchTimeout;

    /**
     * @return Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     * 
     */
    public Optional<Object> writeBatchTimeout() {
        return Optional.ofNullable(this.writeBatchTimeout);
    }

    private BlobSinkResponse() {}

    private BlobSinkResponse(BlobSinkResponse $) {
        this.blobWriterAddHeader = $.blobWriterAddHeader;
        this.blobWriterDateTimeFormat = $.blobWriterDateTimeFormat;
        this.blobWriterOverwriteFiles = $.blobWriterOverwriteFiles;
        this.copyBehavior = $.copyBehavior;
        this.disableMetricsCollection = $.disableMetricsCollection;
        this.maxConcurrentConnections = $.maxConcurrentConnections;
        this.metadata = $.metadata;
        this.sinkRetryCount = $.sinkRetryCount;
        this.sinkRetryWait = $.sinkRetryWait;
        this.type = $.type;
        this.writeBatchSize = $.writeBatchSize;
        this.writeBatchTimeout = $.writeBatchTimeout;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BlobSinkResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BlobSinkResponse $;

        public Builder() {
            $ = new BlobSinkResponse();
        }

        public Builder(BlobSinkResponse defaults) {
            $ = new BlobSinkResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param blobWriterAddHeader Blob writer add header. Type: boolean (or Expression with resultType boolean).
         * 
         * @return builder
         * 
         */
        public Builder blobWriterAddHeader(@Nullable Object blobWriterAddHeader) {
            $.blobWriterAddHeader = blobWriterAddHeader;
            return this;
        }

        /**
         * @param blobWriterDateTimeFormat Blob writer date time format. Type: string (or Expression with resultType string).
         * 
         * @return builder
         * 
         */
        public Builder blobWriterDateTimeFormat(@Nullable Object blobWriterDateTimeFormat) {
            $.blobWriterDateTimeFormat = blobWriterDateTimeFormat;
            return this;
        }

        /**
         * @param blobWriterOverwriteFiles Blob writer overwrite files. Type: boolean (or Expression with resultType boolean).
         * 
         * @return builder
         * 
         */
        public Builder blobWriterOverwriteFiles(@Nullable Object blobWriterOverwriteFiles) {
            $.blobWriterOverwriteFiles = blobWriterOverwriteFiles;
            return this;
        }

        /**
         * @param copyBehavior The type of copy behavior for copy sink.
         * 
         * @return builder
         * 
         */
        public Builder copyBehavior(@Nullable Object copyBehavior) {
            $.copyBehavior = copyBehavior;
            return this;
        }

        /**
         * @param disableMetricsCollection If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
         * 
         * @return builder
         * 
         */
        public Builder disableMetricsCollection(@Nullable Object disableMetricsCollection) {
            $.disableMetricsCollection = disableMetricsCollection;
            return this;
        }

        /**
         * @param maxConcurrentConnections The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
         * 
         * @return builder
         * 
         */
        public Builder maxConcurrentConnections(@Nullable Object maxConcurrentConnections) {
            $.maxConcurrentConnections = maxConcurrentConnections;
            return this;
        }

        /**
         * @param metadata Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects).
         * 
         * @return builder
         * 
         */
        public Builder metadata(@Nullable List<MetadataItemResponse> metadata) {
            $.metadata = metadata;
            return this;
        }

        /**
         * @param metadata Specify the custom metadata to be added to sink data. Type: array of objects (or Expression with resultType array of objects).
         * 
         * @return builder
         * 
         */
        public Builder metadata(MetadataItemResponse... metadata) {
            return metadata(List.of(metadata));
        }

        /**
         * @param sinkRetryCount Sink retry count. Type: integer (or Expression with resultType integer).
         * 
         * @return builder
         * 
         */
        public Builder sinkRetryCount(@Nullable Object sinkRetryCount) {
            $.sinkRetryCount = sinkRetryCount;
            return this;
        }

        /**
         * @param sinkRetryWait Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
         * 
         * @return builder
         * 
         */
        public Builder sinkRetryWait(@Nullable Object sinkRetryWait) {
            $.sinkRetryWait = sinkRetryWait;
            return this;
        }

        /**
         * @param type Copy sink type.
         * Expected value is &#39;BlobSink&#39;.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            $.type = type;
            return this;
        }

        /**
         * @param writeBatchSize Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
         * 
         * @return builder
         * 
         */
        public Builder writeBatchSize(@Nullable Object writeBatchSize) {
            $.writeBatchSize = writeBatchSize;
            return this;
        }

        /**
         * @param writeBatchTimeout Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
         * 
         * @return builder
         * 
         */
        public Builder writeBatchTimeout(@Nullable Object writeBatchTimeout) {
            $.writeBatchTimeout = writeBatchTimeout;
            return this;
        }

        public BlobSinkResponse build() {
            $.type = Codegen.stringProp("type").arg($.type).require();
            return $;
        }
    }

}
