// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.eventgrid.inputs;

import com.pulumi.azurenative.eventgrid.inputs.EventTypeInfoArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Properties of the corresponding partner topic of a Channel.
 * 
 */
public final class PartnerTopicInfoArgs extends com.pulumi.resources.ResourceArgs {

    public static final PartnerTopicInfoArgs Empty = new PartnerTopicInfoArgs();

    /**
     * Azure subscription ID of the subscriber. The partner topic associated with the channel will be
     * created under this Azure subscription.
     * 
     */
    @Import(name="azureSubscriptionId")
    private @Nullable Output<String> azureSubscriptionId;

    /**
     * @return Azure subscription ID of the subscriber. The partner topic associated with the channel will be
     * created under this Azure subscription.
     * 
     */
    public Optional<Output<String>> azureSubscriptionId() {
        return Optional.ofNullable(this.azureSubscriptionId);
    }

    /**
     * Event Type Information for the partner topic. This information is provided by the publisher and can be used by the
     * subscriber to view different types of events that are published.
     * 
     */
    @Import(name="eventTypeInfo")
    private @Nullable Output<EventTypeInfoArgs> eventTypeInfo;

    /**
     * @return Event Type Information for the partner topic. This information is provided by the publisher and can be used by the
     * subscriber to view different types of events that are published.
     * 
     */
    public Optional<Output<EventTypeInfoArgs>> eventTypeInfo() {
        return Optional.ofNullable(this.eventTypeInfo);
    }

    /**
     * Name of the partner topic associated with the channel.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the partner topic associated with the channel.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Azure Resource Group of the subscriber. The partner topic associated with the channel will be
     * created under this resource group.
     * 
     */
    @Import(name="resourceGroupName")
    private @Nullable Output<String> resourceGroupName;

    /**
     * @return Azure Resource Group of the subscriber. The partner topic associated with the channel will be
     * created under this resource group.
     * 
     */
    public Optional<Output<String>> resourceGroupName() {
        return Optional.ofNullable(this.resourceGroupName);
    }

    /**
     * The source information is provided by the publisher to determine the scope or context from which the events
     * are originating. This information can be used by the subscriber during the approval process of the
     * created partner topic.
     * 
     */
    @Import(name="source")
    private @Nullable Output<String> source;

    /**
     * @return The source information is provided by the publisher to determine the scope or context from which the events
     * are originating. This information can be used by the subscriber during the approval process of the
     * created partner topic.
     * 
     */
    public Optional<Output<String>> source() {
        return Optional.ofNullable(this.source);
    }

    private PartnerTopicInfoArgs() {}

    private PartnerTopicInfoArgs(PartnerTopicInfoArgs $) {
        this.azureSubscriptionId = $.azureSubscriptionId;
        this.eventTypeInfo = $.eventTypeInfo;
        this.name = $.name;
        this.resourceGroupName = $.resourceGroupName;
        this.source = $.source;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PartnerTopicInfoArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PartnerTopicInfoArgs $;

        public Builder() {
            $ = new PartnerTopicInfoArgs();
        }

        public Builder(PartnerTopicInfoArgs defaults) {
            $ = new PartnerTopicInfoArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param azureSubscriptionId Azure subscription ID of the subscriber. The partner topic associated with the channel will be
         * created under this Azure subscription.
         * 
         * @return builder
         * 
         */
        public Builder azureSubscriptionId(@Nullable Output<String> azureSubscriptionId) {
            $.azureSubscriptionId = azureSubscriptionId;
            return this;
        }

        /**
         * @param azureSubscriptionId Azure subscription ID of the subscriber. The partner topic associated with the channel will be
         * created under this Azure subscription.
         * 
         * @return builder
         * 
         */
        public Builder azureSubscriptionId(String azureSubscriptionId) {
            return azureSubscriptionId(Output.of(azureSubscriptionId));
        }

        /**
         * @param eventTypeInfo Event Type Information for the partner topic. This information is provided by the publisher and can be used by the
         * subscriber to view different types of events that are published.
         * 
         * @return builder
         * 
         */
        public Builder eventTypeInfo(@Nullable Output<EventTypeInfoArgs> eventTypeInfo) {
            $.eventTypeInfo = eventTypeInfo;
            return this;
        }

        /**
         * @param eventTypeInfo Event Type Information for the partner topic. This information is provided by the publisher and can be used by the
         * subscriber to view different types of events that are published.
         * 
         * @return builder
         * 
         */
        public Builder eventTypeInfo(EventTypeInfoArgs eventTypeInfo) {
            return eventTypeInfo(Output.of(eventTypeInfo));
        }

        /**
         * @param name Name of the partner topic associated with the channel.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the partner topic associated with the channel.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param resourceGroupName Azure Resource Group of the subscriber. The partner topic associated with the channel will be
         * created under this resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(@Nullable Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName Azure Resource Group of the subscriber. The partner topic associated with the channel will be
         * created under this resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param source The source information is provided by the publisher to determine the scope or context from which the events
         * are originating. This information can be used by the subscriber during the approval process of the
         * created partner topic.
         * 
         * @return builder
         * 
         */
        public Builder source(@Nullable Output<String> source) {
            $.source = source;
            return this;
        }

        /**
         * @param source The source information is provided by the publisher to determine the scope or context from which the events
         * are originating. This information can be used by the subscriber during the approval process of the
         * created partner topic.
         * 
         * @return builder
         * 
         */
        public Builder source(String source) {
            return source(Output.of(source));
        }

        public PartnerTopicInfoArgs build() {
            return $;
        }
    }

}
