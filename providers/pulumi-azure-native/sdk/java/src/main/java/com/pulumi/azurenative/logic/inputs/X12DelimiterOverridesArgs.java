// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.logic.inputs;

import com.pulumi.azurenative.logic.enums.SegmentTerminatorSuffix;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The X12 delimiter override settings.
 * 
 */
public final class X12DelimiterOverridesArgs extends com.pulumi.resources.ResourceArgs {

    public static final X12DelimiterOverridesArgs Empty = new X12DelimiterOverridesArgs();

    /**
     * The component separator.
     * 
     */
    @Import(name="componentSeparator", required=true)
    private Output<Integer> componentSeparator;

    public Output<Integer> componentSeparator() {
        return this.componentSeparator;
    }

    /**
     * The data element separator.
     * 
     */
    @Import(name="dataElementSeparator", required=true)
    private Output<Integer> dataElementSeparator;

    public Output<Integer> dataElementSeparator() {
        return this.dataElementSeparator;
    }

    /**
     * The message id.
     * 
     */
    @Import(name="messageId")
    private @Nullable Output<String> messageId;

    public Optional<Output<String>> messageId() {
        return Optional.ofNullable(this.messageId);
    }

    /**
     * The protocol version.
     * 
     */
    @Import(name="protocolVersion")
    private @Nullable Output<String> protocolVersion;

    public Optional<Output<String>> protocolVersion() {
        return Optional.ofNullable(this.protocolVersion);
    }

    /**
     * The replacement character.
     * 
     */
    @Import(name="replaceCharacter", required=true)
    private Output<Integer> replaceCharacter;

    public Output<Integer> replaceCharacter() {
        return this.replaceCharacter;
    }

    /**
     * The value indicating whether to replace separators in payload.
     * 
     */
    @Import(name="replaceSeparatorsInPayload", required=true)
    private Output<Boolean> replaceSeparatorsInPayload;

    public Output<Boolean> replaceSeparatorsInPayload() {
        return this.replaceSeparatorsInPayload;
    }

    /**
     * The segment terminator.
     * 
     */
    @Import(name="segmentTerminator", required=true)
    private Output<Integer> segmentTerminator;

    public Output<Integer> segmentTerminator() {
        return this.segmentTerminator;
    }

    /**
     * The segment terminator suffix.
     * 
     */
    @Import(name="segmentTerminatorSuffix", required=true)
    private Output<SegmentTerminatorSuffix> segmentTerminatorSuffix;

    public Output<SegmentTerminatorSuffix> segmentTerminatorSuffix() {
        return this.segmentTerminatorSuffix;
    }

    /**
     * The target namespace on which this delimiter settings has to be applied.
     * 
     */
    @Import(name="targetNamespace")
    private @Nullable Output<String> targetNamespace;

    public Optional<Output<String>> targetNamespace() {
        return Optional.ofNullable(this.targetNamespace);
    }

    private X12DelimiterOverridesArgs() {}

    private X12DelimiterOverridesArgs(X12DelimiterOverridesArgs $) {
        this.componentSeparator = $.componentSeparator;
        this.dataElementSeparator = $.dataElementSeparator;
        this.messageId = $.messageId;
        this.protocolVersion = $.protocolVersion;
        this.replaceCharacter = $.replaceCharacter;
        this.replaceSeparatorsInPayload = $.replaceSeparatorsInPayload;
        this.segmentTerminator = $.segmentTerminator;
        this.segmentTerminatorSuffix = $.segmentTerminatorSuffix;
        this.targetNamespace = $.targetNamespace;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(X12DelimiterOverridesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private X12DelimiterOverridesArgs $;

        public Builder() {
            $ = new X12DelimiterOverridesArgs();
        }

        public Builder(X12DelimiterOverridesArgs defaults) {
            $ = new X12DelimiterOverridesArgs(Objects.requireNonNull(defaults));
        }

        public Builder componentSeparator(Output<Integer> componentSeparator) {
            $.componentSeparator = componentSeparator;
            return this;
        }

        public Builder componentSeparator(Integer componentSeparator) {
            return componentSeparator(Output.of(componentSeparator));
        }

        public Builder dataElementSeparator(Output<Integer> dataElementSeparator) {
            $.dataElementSeparator = dataElementSeparator;
            return this;
        }

        public Builder dataElementSeparator(Integer dataElementSeparator) {
            return dataElementSeparator(Output.of(dataElementSeparator));
        }

        public Builder messageId(@Nullable Output<String> messageId) {
            $.messageId = messageId;
            return this;
        }

        public Builder messageId(String messageId) {
            return messageId(Output.of(messageId));
        }

        public Builder protocolVersion(@Nullable Output<String> protocolVersion) {
            $.protocolVersion = protocolVersion;
            return this;
        }

        public Builder protocolVersion(String protocolVersion) {
            return protocolVersion(Output.of(protocolVersion));
        }

        public Builder replaceCharacter(Output<Integer> replaceCharacter) {
            $.replaceCharacter = replaceCharacter;
            return this;
        }

        public Builder replaceCharacter(Integer replaceCharacter) {
            return replaceCharacter(Output.of(replaceCharacter));
        }

        public Builder replaceSeparatorsInPayload(Output<Boolean> replaceSeparatorsInPayload) {
            $.replaceSeparatorsInPayload = replaceSeparatorsInPayload;
            return this;
        }

        public Builder replaceSeparatorsInPayload(Boolean replaceSeparatorsInPayload) {
            return replaceSeparatorsInPayload(Output.of(replaceSeparatorsInPayload));
        }

        public Builder segmentTerminator(Output<Integer> segmentTerminator) {
            $.segmentTerminator = segmentTerminator;
            return this;
        }

        public Builder segmentTerminator(Integer segmentTerminator) {
            return segmentTerminator(Output.of(segmentTerminator));
        }

        public Builder segmentTerminatorSuffix(Output<SegmentTerminatorSuffix> segmentTerminatorSuffix) {
            $.segmentTerminatorSuffix = segmentTerminatorSuffix;
            return this;
        }

        public Builder segmentTerminatorSuffix(SegmentTerminatorSuffix segmentTerminatorSuffix) {
            return segmentTerminatorSuffix(Output.of(segmentTerminatorSuffix));
        }

        public Builder targetNamespace(@Nullable Output<String> targetNamespace) {
            $.targetNamespace = targetNamespace;
            return this;
        }

        public Builder targetNamespace(String targetNamespace) {
            return targetNamespace(Output.of(targetNamespace));
        }

        public X12DelimiterOverridesArgs build() {
            $.componentSeparator = Objects.requireNonNull($.componentSeparator, "expected parameter 'componentSeparator' to be non-null");
            $.dataElementSeparator = Objects.requireNonNull($.dataElementSeparator, "expected parameter 'dataElementSeparator' to be non-null");
            $.replaceCharacter = Objects.requireNonNull($.replaceCharacter, "expected parameter 'replaceCharacter' to be non-null");
            $.replaceSeparatorsInPayload = Objects.requireNonNull($.replaceSeparatorsInPayload, "expected parameter 'replaceSeparatorsInPayload' to be non-null");
            $.segmentTerminator = Objects.requireNonNull($.segmentTerminator, "expected parameter 'segmentTerminator' to be non-null");
            $.segmentTerminatorSuffix = Objects.requireNonNull($.segmentTerminatorSuffix, "expected parameter 'segmentTerminatorSuffix' to be non-null");
            return $;
        }
    }

}
