// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.azurenative.datafactory.inputs.ActivityDependencyArgs;
import com.pulumi.azurenative.datafactory.inputs.DatasetReferenceArgs;
import com.pulumi.azurenative.datafactory.inputs.UserPropertyArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * This activity verifies that an external resource exists.
 * 
 */
public final class ValidationActivityArgs extends com.pulumi.resources.ResourceArgs {

    public static final ValidationActivityArgs Empty = new ValidationActivityArgs();

    /**
     * Can be used if dataset points to a folder. If set to true, the folder must have at least one file. If set to false, the folder must be empty. Type: boolean (or Expression with resultType boolean).
     * 
     */
    @Import(name="childItems")
      private final @Nullable Output<Object> childItems;

    public Output<Object> childItems() {
        return this.childItems == null ? Codegen.empty() : this.childItems;
    }

    /**
     * Validation activity dataset reference.
     * 
     */
    @Import(name="dataset", required=true)
      private final Output<DatasetReferenceArgs> dataset;

    public Output<DatasetReferenceArgs> dataset() {
        return this.dataset;
    }

    /**
     * Activity depends on condition.
     * 
     */
    @Import(name="dependsOn")
      private final @Nullable Output<List<ActivityDependencyArgs>> dependsOn;

    public Output<List<ActivityDependencyArgs>> dependsOn() {
        return this.dependsOn == null ? Codegen.empty() : this.dependsOn;
    }

    /**
     * Activity description.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> description() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * Can be used if dataset points to a file. The file must be greater than or equal in size to the value specified. Type: integer (or Expression with resultType integer).
     * 
     */
    @Import(name="minimumSize")
      private final @Nullable Output<Object> minimumSize;

    public Output<Object> minimumSize() {
        return this.minimumSize == null ? Codegen.empty() : this.minimumSize;
    }

    /**
     * Activity name.
     * 
     */
    @Import(name="name", required=true)
      private final Output<String> name;

    public Output<String> name() {
        return this.name;
    }

    /**
     * A delay in seconds between validation attempts. If no value is specified, 10 seconds will be used as the default. Type: integer (or Expression with resultType integer).
     * 
     */
    @Import(name="sleep")
      private final @Nullable Output<Object> sleep;

    public Output<Object> sleep() {
        return this.sleep == null ? Codegen.empty() : this.sleep;
    }

    /**
     * Specifies the timeout for the activity to run. If there is no value specified, it takes the value of TimeSpan.FromDays(7) which is 1 week as default. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     * 
     */
    @Import(name="timeout")
      private final @Nullable Output<Object> timeout;

    public Output<Object> timeout() {
        return this.timeout == null ? Codegen.empty() : this.timeout;
    }

    /**
     * Type of activity.
     * Expected value is 'Validation'.
     * 
     */
    @Import(name="type", required=true)
      private final Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    /**
     * Activity user properties.
     * 
     */
    @Import(name="userProperties")
      private final @Nullable Output<List<UserPropertyArgs>> userProperties;

    public Output<List<UserPropertyArgs>> userProperties() {
        return this.userProperties == null ? Codegen.empty() : this.userProperties;
    }

    public ValidationActivityArgs(
        @Nullable Output<Object> childItems,
        Output<DatasetReferenceArgs> dataset,
        @Nullable Output<List<ActivityDependencyArgs>> dependsOn,
        @Nullable Output<String> description,
        @Nullable Output<Object> minimumSize,
        Output<String> name,
        @Nullable Output<Object> sleep,
        @Nullable Output<Object> timeout,
        Output<String> type,
        @Nullable Output<List<UserPropertyArgs>> userProperties) {
        this.childItems = childItems;
        this.dataset = Objects.requireNonNull(dataset, "expected parameter 'dataset' to be non-null");
        this.dependsOn = dependsOn;
        this.description = description;
        this.minimumSize = minimumSize;
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.sleep = sleep;
        this.timeout = timeout;
        this.type = Codegen.stringProp("type").output().arg(type).require();
        this.userProperties = userProperties;
    }

    private ValidationActivityArgs() {
        this.childItems = Codegen.empty();
        this.dataset = Codegen.empty();
        this.dependsOn = Codegen.empty();
        this.description = Codegen.empty();
        this.minimumSize = Codegen.empty();
        this.name = Codegen.empty();
        this.sleep = Codegen.empty();
        this.timeout = Codegen.empty();
        this.type = Codegen.empty();
        this.userProperties = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ValidationActivityArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Object> childItems;
        private Output<DatasetReferenceArgs> dataset;
        private @Nullable Output<List<ActivityDependencyArgs>> dependsOn;
        private @Nullable Output<String> description;
        private @Nullable Output<Object> minimumSize;
        private Output<String> name;
        private @Nullable Output<Object> sleep;
        private @Nullable Output<Object> timeout;
        private Output<String> type;
        private @Nullable Output<List<UserPropertyArgs>> userProperties;

        public Builder() {
    	      // Empty
        }

        public Builder(ValidationActivityArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.childItems = defaults.childItems;
    	      this.dataset = defaults.dataset;
    	      this.dependsOn = defaults.dependsOn;
    	      this.description = defaults.description;
    	      this.minimumSize = defaults.minimumSize;
    	      this.name = defaults.name;
    	      this.sleep = defaults.sleep;
    	      this.timeout = defaults.timeout;
    	      this.type = defaults.type;
    	      this.userProperties = defaults.userProperties;
        }

        public Builder childItems(@Nullable Output<Object> childItems) {
            this.childItems = childItems;
            return this;
        }
        public Builder childItems(@Nullable Object childItems) {
            this.childItems = Codegen.ofNullable(childItems);
            return this;
        }
        public Builder dataset(Output<DatasetReferenceArgs> dataset) {
            this.dataset = Objects.requireNonNull(dataset);
            return this;
        }
        public Builder dataset(DatasetReferenceArgs dataset) {
            this.dataset = Output.of(Objects.requireNonNull(dataset));
            return this;
        }
        public Builder dependsOn(@Nullable Output<List<ActivityDependencyArgs>> dependsOn) {
            this.dependsOn = dependsOn;
            return this;
        }
        public Builder dependsOn(@Nullable List<ActivityDependencyArgs> dependsOn) {
            this.dependsOn = Codegen.ofNullable(dependsOn);
            return this;
        }
        public Builder dependsOn(ActivityDependencyArgs... dependsOn) {
            return dependsOn(List.of(dependsOn));
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder minimumSize(@Nullable Output<Object> minimumSize) {
            this.minimumSize = minimumSize;
            return this;
        }
        public Builder minimumSize(@Nullable Object minimumSize) {
            this.minimumSize = Codegen.ofNullable(minimumSize);
            return this;
        }
        public Builder name(Output<String> name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder name(String name) {
            this.name = Output.of(Objects.requireNonNull(name));
            return this;
        }
        public Builder sleep(@Nullable Output<Object> sleep) {
            this.sleep = sleep;
            return this;
        }
        public Builder sleep(@Nullable Object sleep) {
            this.sleep = Codegen.ofNullable(sleep);
            return this;
        }
        public Builder timeout(@Nullable Output<Object> timeout) {
            this.timeout = timeout;
            return this;
        }
        public Builder timeout(@Nullable Object timeout) {
            this.timeout = Codegen.ofNullable(timeout);
            return this;
        }
        public Builder type(Output<String> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder type(String type) {
            this.type = Output.of(Objects.requireNonNull(type));
            return this;
        }
        public Builder userProperties(@Nullable Output<List<UserPropertyArgs>> userProperties) {
            this.userProperties = userProperties;
            return this;
        }
        public Builder userProperties(@Nullable List<UserPropertyArgs> userProperties) {
            this.userProperties = Codegen.ofNullable(userProperties);
            return this;
        }
        public Builder userProperties(UserPropertyArgs... userProperties) {
            return userProperties(List.of(userProperties));
        }        public ValidationActivityArgs build() {
            return new ValidationActivityArgs(childItems, dataset, dependsOn, description, minimumSize, name, sleep, timeout, type, userProperties);
        }
    }
}
