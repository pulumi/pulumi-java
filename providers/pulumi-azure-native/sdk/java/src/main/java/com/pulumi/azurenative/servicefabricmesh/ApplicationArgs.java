// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.servicefabricmesh;

import com.pulumi.azurenative.servicefabricmesh.inputs.DiagnosticsDescriptionArgs;
import com.pulumi.azurenative.servicefabricmesh.inputs.ServiceResourceDescriptionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ApplicationArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApplicationArgs Empty = new ApplicationArgs();

    /**
     * The identity of the application.
     * 
     */
    @Import(name="applicationResourceName")
      private final @Nullable Output<String> applicationResourceName;

    public Output<String> applicationResourceName() {
        return this.applicationResourceName == null ? Codegen.empty() : this.applicationResourceName;
    }

    /**
     * Internal - used by Visual Studio to setup the debugging session on the local development environment.
     * 
     */
    @Import(name="debugParams")
      private final @Nullable Output<String> debugParams;

    public Output<String> debugParams() {
        return this.debugParams == null ? Codegen.empty() : this.debugParams;
    }

    /**
     * User readable description of the application.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> description() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * Describes the diagnostics definition and usage for an application resource.
     * 
     */
    @Import(name="diagnostics")
      private final @Nullable Output<DiagnosticsDescriptionArgs> diagnostics;

    public Output<DiagnosticsDescriptionArgs> diagnostics() {
        return this.diagnostics == null ? Codegen.empty() : this.diagnostics;
    }

    /**
     * The geo-location where the resource lives
     * 
     */
    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> location() {
        return this.location == null ? Codegen.empty() : this.location;
    }

    /**
     * Azure resource group name
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Describes the services in the application. This property is used to create or modify services of the application. On get only the name of the service is returned. The service description can be obtained by querying for the service resource.
     * 
     */
    @Import(name="services")
      private final @Nullable Output<List<ServiceResourceDescriptionArgs>> services;

    public Output<List<ServiceResourceDescriptionArgs>> services() {
        return this.services == null ? Codegen.empty() : this.services;
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    public ApplicationArgs(
        @Nullable Output<String> applicationResourceName,
        @Nullable Output<String> debugParams,
        @Nullable Output<String> description,
        @Nullable Output<DiagnosticsDescriptionArgs> diagnostics,
        @Nullable Output<String> location,
        Output<String> resourceGroupName,
        @Nullable Output<List<ServiceResourceDescriptionArgs>> services,
        @Nullable Output<Map<String,String>> tags) {
        this.applicationResourceName = applicationResourceName;
        this.debugParams = debugParams;
        this.description = description;
        this.diagnostics = diagnostics;
        this.location = location;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.services = services;
        this.tags = tags;
    }

    private ApplicationArgs() {
        this.applicationResourceName = Codegen.empty();
        this.debugParams = Codegen.empty();
        this.description = Codegen.empty();
        this.diagnostics = Codegen.empty();
        this.location = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.services = Codegen.empty();
        this.tags = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ApplicationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> applicationResourceName;
        private @Nullable Output<String> debugParams;
        private @Nullable Output<String> description;
        private @Nullable Output<DiagnosticsDescriptionArgs> diagnostics;
        private @Nullable Output<String> location;
        private Output<String> resourceGroupName;
        private @Nullable Output<List<ServiceResourceDescriptionArgs>> services;
        private @Nullable Output<Map<String,String>> tags;

        public Builder() {
    	      // Empty
        }

        public Builder(ApplicationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicationResourceName = defaults.applicationResourceName;
    	      this.debugParams = defaults.debugParams;
    	      this.description = defaults.description;
    	      this.diagnostics = defaults.diagnostics;
    	      this.location = defaults.location;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.services = defaults.services;
    	      this.tags = defaults.tags;
        }

        public Builder applicationResourceName(@Nullable Output<String> applicationResourceName) {
            this.applicationResourceName = applicationResourceName;
            return this;
        }
        public Builder applicationResourceName(@Nullable String applicationResourceName) {
            this.applicationResourceName = Codegen.ofNullable(applicationResourceName);
            return this;
        }
        public Builder debugParams(@Nullable Output<String> debugParams) {
            this.debugParams = debugParams;
            return this;
        }
        public Builder debugParams(@Nullable String debugParams) {
            this.debugParams = Codegen.ofNullable(debugParams);
            return this;
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder diagnostics(@Nullable Output<DiagnosticsDescriptionArgs> diagnostics) {
            this.diagnostics = diagnostics;
            return this;
        }
        public Builder diagnostics(@Nullable DiagnosticsDescriptionArgs diagnostics) {
            this.diagnostics = Codegen.ofNullable(diagnostics);
            return this;
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Codegen.ofNullable(location);
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder services(@Nullable Output<List<ServiceResourceDescriptionArgs>> services) {
            this.services = services;
            return this;
        }
        public Builder services(@Nullable List<ServiceResourceDescriptionArgs> services) {
            this.services = Codegen.ofNullable(services);
            return this;
        }
        public Builder services(ServiceResourceDescriptionArgs... services) {
            return services(List.of(services));
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }        public ApplicationArgs build() {
            return new ApplicationArgs(applicationResourceName, debugParams, description, diagnostics, location, resourceGroupName, services, tags);
        }
    }
}
