// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.machinelearning.inputs;

import com.pulumi.azurenative.machinelearning.inputs.ModeValueInfoResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Parameter definition for a module asset.
 * 
 */
public final class ModuleAssetParameterResponse extends com.pulumi.resources.InvokeArgs {

    public static final ModuleAssetParameterResponse Empty = new ModuleAssetParameterResponse();

    /**
     * Definitions for nested interface parameters if this is a complex module parameter.
     * 
     */
    @Import(name="modeValuesInfo")
    private @Nullable Map<String,ModeValueInfoResponse> modeValuesInfo;

    /**
     * @return Definitions for nested interface parameters if this is a complex module parameter.
     * 
     */
    public Optional<Map<String,ModeValueInfoResponse>> modeValuesInfo() {
        return Optional.ofNullable(this.modeValuesInfo);
    }

    /**
     * Parameter name.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return Parameter name.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Parameter type.
     * 
     */
    @Import(name="parameterType")
    private @Nullable String parameterType;

    /**
     * @return Parameter type.
     * 
     */
    public Optional<String> parameterType() {
        return Optional.ofNullable(this.parameterType);
    }

    private ModuleAssetParameterResponse() {}

    private ModuleAssetParameterResponse(ModuleAssetParameterResponse $) {
        this.modeValuesInfo = $.modeValuesInfo;
        this.name = $.name;
        this.parameterType = $.parameterType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ModuleAssetParameterResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ModuleAssetParameterResponse $;

        public Builder() {
            $ = new ModuleAssetParameterResponse();
        }

        public Builder(ModuleAssetParameterResponse defaults) {
            $ = new ModuleAssetParameterResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param modeValuesInfo Definitions for nested interface parameters if this is a complex module parameter.
         * 
         * @return builder
         * 
         */
        public Builder modeValuesInfo(@Nullable Map<String,ModeValueInfoResponse> modeValuesInfo) {
            $.modeValuesInfo = modeValuesInfo;
            return this;
        }

        /**
         * @param name Parameter name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param parameterType Parameter type.
         * 
         * @return builder
         * 
         */
        public Builder parameterType(@Nullable String parameterType) {
            $.parameterType = parameterType;
            return this;
        }

        public ModuleAssetParameterResponse build() {
            return $;
        }
    }

}
