// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.peering.inputs;

import com.pulumi.azurenative.peering.inputs.BgpSessionResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The properties that define a direct connection.
 * 
 */
public final class DirectConnectionResponse extends com.pulumi.resources.InvokeArgs {

    public static final DirectConnectionResponse Empty = new DirectConnectionResponse();

    /**
     * The bandwidth of the connection.
     * 
     */
    @Import(name="bandwidthInMbps")
    private @Nullable Integer bandwidthInMbps;

    public Optional<Integer> bandwidthInMbps() {
        return Optional.ofNullable(this.bandwidthInMbps);
    }

    /**
     * The BGP session associated with the connection.
     * 
     */
    @Import(name="bgpSession")
    private @Nullable BgpSessionResponse bgpSession;

    public Optional<BgpSessionResponse> bgpSession() {
        return Optional.ofNullable(this.bgpSession);
    }

    /**
     * The unique identifier (GUID) for the connection.
     * 
     */
    @Import(name="connectionIdentifier")
    private @Nullable String connectionIdentifier;

    public Optional<String> connectionIdentifier() {
        return Optional.ofNullable(this.connectionIdentifier);
    }

    /**
     * The state of the connection.
     * 
     */
    @Import(name="connectionState", required=true)
    private String connectionState;

    public String connectionState() {
        return this.connectionState;
    }

    /**
     * The error message related to the connection state, if any.
     * 
     */
    @Import(name="errorMessage", required=true)
    private String errorMessage;

    public String errorMessage() {
        return this.errorMessage;
    }

    /**
     * The ID used within Microsoft&#39;s peering provisioning system to track the connection
     * 
     */
    @Import(name="microsoftTrackingId", required=true)
    private String microsoftTrackingId;

    public String microsoftTrackingId() {
        return this.microsoftTrackingId;
    }

    /**
     * The PeeringDB.com ID of the facility at which the connection has to be set up.
     * 
     */
    @Import(name="peeringDBFacilityId")
    private @Nullable Integer peeringDBFacilityId;

    public Optional<Integer> peeringDBFacilityId() {
        return Optional.ofNullable(this.peeringDBFacilityId);
    }

    /**
     * The bandwidth that is actually provisioned.
     * 
     */
    @Import(name="provisionedBandwidthInMbps", required=true)
    private Integer provisionedBandwidthInMbps;

    public Integer provisionedBandwidthInMbps() {
        return this.provisionedBandwidthInMbps;
    }

    /**
     * The field indicating if Microsoft provides session ip addresses.
     * 
     */
    @Import(name="sessionAddressProvider")
    private @Nullable String sessionAddressProvider;

    public Optional<String> sessionAddressProvider() {
        return Optional.ofNullable(this.sessionAddressProvider);
    }

    /**
     * The flag that indicates whether or not the connection is used for peering service.
     * 
     */
    @Import(name="useForPeeringService")
    private @Nullable Boolean useForPeeringService;

    public Optional<Boolean> useForPeeringService() {
        return Optional.ofNullable(this.useForPeeringService);
    }

    private DirectConnectionResponse() {}

    private DirectConnectionResponse(DirectConnectionResponse $) {
        this.bandwidthInMbps = $.bandwidthInMbps;
        this.bgpSession = $.bgpSession;
        this.connectionIdentifier = $.connectionIdentifier;
        this.connectionState = $.connectionState;
        this.errorMessage = $.errorMessage;
        this.microsoftTrackingId = $.microsoftTrackingId;
        this.peeringDBFacilityId = $.peeringDBFacilityId;
        this.provisionedBandwidthInMbps = $.provisionedBandwidthInMbps;
        this.sessionAddressProvider = $.sessionAddressProvider;
        this.useForPeeringService = $.useForPeeringService;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DirectConnectionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DirectConnectionResponse $;

        public Builder() {
            $ = new DirectConnectionResponse();
        }

        public Builder(DirectConnectionResponse defaults) {
            $ = new DirectConnectionResponse(Objects.requireNonNull(defaults));
        }

        public Builder bandwidthInMbps(@Nullable Integer bandwidthInMbps) {
            $.bandwidthInMbps = bandwidthInMbps;
            return this;
        }

        public Builder bgpSession(@Nullable BgpSessionResponse bgpSession) {
            $.bgpSession = bgpSession;
            return this;
        }

        public Builder connectionIdentifier(@Nullable String connectionIdentifier) {
            $.connectionIdentifier = connectionIdentifier;
            return this;
        }

        public Builder connectionState(String connectionState) {
            $.connectionState = connectionState;
            return this;
        }

        public Builder errorMessage(String errorMessage) {
            $.errorMessage = errorMessage;
            return this;
        }

        public Builder microsoftTrackingId(String microsoftTrackingId) {
            $.microsoftTrackingId = microsoftTrackingId;
            return this;
        }

        public Builder peeringDBFacilityId(@Nullable Integer peeringDBFacilityId) {
            $.peeringDBFacilityId = peeringDBFacilityId;
            return this;
        }

        public Builder provisionedBandwidthInMbps(Integer provisionedBandwidthInMbps) {
            $.provisionedBandwidthInMbps = provisionedBandwidthInMbps;
            return this;
        }

        public Builder sessionAddressProvider(@Nullable String sessionAddressProvider) {
            $.sessionAddressProvider = sessionAddressProvider;
            return this;
        }

        public Builder useForPeeringService(@Nullable Boolean useForPeeringService) {
            $.useForPeeringService = useForPeeringService;
            return this;
        }

        public DirectConnectionResponse build() {
            $.connectionState = Objects.requireNonNull($.connectionState, "expected parameter 'connectionState' to be non-null");
            $.errorMessage = Objects.requireNonNull($.errorMessage, "expected parameter 'errorMessage' to be non-null");
            $.microsoftTrackingId = Objects.requireNonNull($.microsoftTrackingId, "expected parameter 'microsoftTrackingId' to be non-null");
            $.provisionedBandwidthInMbps = Objects.requireNonNull($.provisionedBandwidthInMbps, "expected parameter 'provisionedBandwidthInMbps' to be non-null");
            return $;
        }
    }

}
