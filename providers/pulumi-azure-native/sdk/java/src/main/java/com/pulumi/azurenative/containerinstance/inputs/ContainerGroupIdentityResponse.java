// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.containerinstance.inputs;

import com.pulumi.azurenative.containerinstance.inputs.ContainerGroupIdentityResponseUserAssignedIdentities;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Identity for the container group.
 * 
 */
public final class ContainerGroupIdentityResponse extends com.pulumi.resources.InvokeArgs {

    public static final ContainerGroupIdentityResponse Empty = new ContainerGroupIdentityResponse();

    /**
     * The principal id of the container group identity. This property will only be provided for a system assigned identity.
     * 
     */
    @Import(name="principalId", required=true)
    private String principalId;

    public String principalId() {
        return this.principalId;
    }

    /**
     * The tenant id associated with the container group. This property will only be provided for a system assigned identity.
     * 
     */
    @Import(name="tenantId", required=true)
    private String tenantId;

    public String tenantId() {
        return this.tenantId;
    }

    /**
     * The type of identity used for the container group. The type &#39;SystemAssigned, UserAssigned&#39; includes both an implicitly created identity and a set of user assigned identities. The type &#39;None&#39; will remove any identities from the container group.
     * 
     */
    @Import(name="type")
    private @Nullable String type;

    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * The list of user identities associated with the container group. The user identity dictionary key references will be ARM resource ids in the form: &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}&#39;.
     * 
     */
    @Import(name="userAssignedIdentities")
    private @Nullable Map<String,ContainerGroupIdentityResponseUserAssignedIdentities> userAssignedIdentities;

    public Optional<Map<String,ContainerGroupIdentityResponseUserAssignedIdentities>> userAssignedIdentities() {
        return Optional.ofNullable(this.userAssignedIdentities);
    }

    private ContainerGroupIdentityResponse() {}

    private ContainerGroupIdentityResponse(ContainerGroupIdentityResponse $) {
        this.principalId = $.principalId;
        this.tenantId = $.tenantId;
        this.type = $.type;
        this.userAssignedIdentities = $.userAssignedIdentities;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContainerGroupIdentityResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContainerGroupIdentityResponse $;

        public Builder() {
            $ = new ContainerGroupIdentityResponse();
        }

        public Builder(ContainerGroupIdentityResponse defaults) {
            $ = new ContainerGroupIdentityResponse(Objects.requireNonNull(defaults));
        }

        public Builder principalId(String principalId) {
            $.principalId = principalId;
            return this;
        }

        public Builder tenantId(String tenantId) {
            $.tenantId = tenantId;
            return this;
        }

        public Builder type(@Nullable String type) {
            $.type = type;
            return this;
        }

        public Builder userAssignedIdentities(@Nullable Map<String,ContainerGroupIdentityResponseUserAssignedIdentities> userAssignedIdentities) {
            $.userAssignedIdentities = userAssignedIdentities;
            return this;
        }

        public ContainerGroupIdentityResponse build() {
            $.principalId = Objects.requireNonNull($.principalId, "expected parameter 'principalId' to be non-null");
            $.tenantId = Objects.requireNonNull($.tenantId, "expected parameter 'tenantId' to be non-null");
            return $;
        }
    }

}
