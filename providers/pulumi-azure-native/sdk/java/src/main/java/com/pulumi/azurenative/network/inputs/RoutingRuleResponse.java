// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.azurenative.network.inputs.ForwardingConfigurationResponse;
import com.pulumi.azurenative.network.inputs.RedirectConfigurationResponse;
import com.pulumi.azurenative.network.inputs.RoutingRuleUpdateParametersResponseWebApplicationFirewallPolicyLink;
import com.pulumi.azurenative.network.inputs.SubResourceResponse;
import com.pulumi.core.Either;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A routing rule represents a specification for traffic to treat and where to send it, along with health probe information.
 * 
 */
public final class RoutingRuleResponse extends com.pulumi.resources.InvokeArgs {

    public static final RoutingRuleResponse Empty = new RoutingRuleResponse();

    /**
     * Protocol schemes to match for this rule
     * 
     */
    @Import(name="acceptedProtocols")
    private @Nullable List<String> acceptedProtocols;

    public Optional<List<String>> acceptedProtocols() {
        return Optional.ofNullable(this.acceptedProtocols);
    }

    /**
     * Whether to enable use of this rule. Permitted values are &#39;Enabled&#39; or &#39;Disabled&#39;
     * 
     */
    @Import(name="enabledState")
    private @Nullable String enabledState;

    public Optional<String> enabledState() {
        return Optional.ofNullable(this.enabledState);
    }

    /**
     * Frontend endpoints associated with this rule
     * 
     */
    @Import(name="frontendEndpoints")
    private @Nullable List<SubResourceResponse> frontendEndpoints;

    public Optional<List<SubResourceResponse>> frontendEndpoints() {
        return Optional.ofNullable(this.frontendEndpoints);
    }

    /**
     * Resource ID.
     * 
     */
    @Import(name="id")
    private @Nullable String id;

    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Resource name.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The route patterns of the rule.
     * 
     */
    @Import(name="patternsToMatch")
    private @Nullable List<String> patternsToMatch;

    public Optional<List<String>> patternsToMatch() {
        return Optional.ofNullable(this.patternsToMatch);
    }

    /**
     * Resource status.
     * 
     */
    @Import(name="resourceState", required=true)
    private String resourceState;

    public String resourceState() {
        return this.resourceState;
    }

    /**
     * A reference to the routing configuration.
     * 
     */
    @Import(name="routeConfiguration")
    private @Nullable Either<ForwardingConfigurationResponse,RedirectConfigurationResponse> routeConfiguration;

    public Optional<Either<ForwardingConfigurationResponse,RedirectConfigurationResponse>> routeConfiguration() {
        return Optional.ofNullable(this.routeConfiguration);
    }

    /**
     * A reference to a specific Rules Engine Configuration to apply to this route.
     * 
     */
    @Import(name="rulesEngine")
    private @Nullable SubResourceResponse rulesEngine;

    public Optional<SubResourceResponse> rulesEngine() {
        return Optional.ofNullable(this.rulesEngine);
    }

    /**
     * Resource type.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    public String type() {
        return this.type;
    }

    /**
     * Defines the Web Application Firewall policy for each routing rule (if applicable)
     * 
     */
    @Import(name="webApplicationFirewallPolicyLink")
    private @Nullable RoutingRuleUpdateParametersResponseWebApplicationFirewallPolicyLink webApplicationFirewallPolicyLink;

    public Optional<RoutingRuleUpdateParametersResponseWebApplicationFirewallPolicyLink> webApplicationFirewallPolicyLink() {
        return Optional.ofNullable(this.webApplicationFirewallPolicyLink);
    }

    private RoutingRuleResponse() {}

    private RoutingRuleResponse(RoutingRuleResponse $) {
        this.acceptedProtocols = $.acceptedProtocols;
        this.enabledState = $.enabledState;
        this.frontendEndpoints = $.frontendEndpoints;
        this.id = $.id;
        this.name = $.name;
        this.patternsToMatch = $.patternsToMatch;
        this.resourceState = $.resourceState;
        this.routeConfiguration = $.routeConfiguration;
        this.rulesEngine = $.rulesEngine;
        this.type = $.type;
        this.webApplicationFirewallPolicyLink = $.webApplicationFirewallPolicyLink;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RoutingRuleResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RoutingRuleResponse $;

        public Builder() {
            $ = new RoutingRuleResponse();
        }

        public Builder(RoutingRuleResponse defaults) {
            $ = new RoutingRuleResponse(Objects.requireNonNull(defaults));
        }

        public Builder acceptedProtocols(@Nullable List<String> acceptedProtocols) {
            $.acceptedProtocols = acceptedProtocols;
            return this;
        }

        public Builder acceptedProtocols(String... acceptedProtocols) {
            return acceptedProtocols(List.of(acceptedProtocols));
        }

        public Builder enabledState(@Nullable String enabledState) {
            $.enabledState = enabledState;
            return this;
        }

        public Builder frontendEndpoints(@Nullable List<SubResourceResponse> frontendEndpoints) {
            $.frontendEndpoints = frontendEndpoints;
            return this;
        }

        public Builder frontendEndpoints(SubResourceResponse... frontendEndpoints) {
            return frontendEndpoints(List.of(frontendEndpoints));
        }

        public Builder id(@Nullable String id) {
            $.id = id;
            return this;
        }

        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        public Builder patternsToMatch(@Nullable List<String> patternsToMatch) {
            $.patternsToMatch = patternsToMatch;
            return this;
        }

        public Builder patternsToMatch(String... patternsToMatch) {
            return patternsToMatch(List.of(patternsToMatch));
        }

        public Builder resourceState(String resourceState) {
            $.resourceState = resourceState;
            return this;
        }

        public Builder routeConfiguration(@Nullable Either<ForwardingConfigurationResponse,RedirectConfigurationResponse> routeConfiguration) {
            $.routeConfiguration = routeConfiguration;
            return this;
        }

        public Builder routeConfiguration(ForwardingConfigurationResponse routeConfiguration) {
            return routeConfiguration(Either.ofLeft(routeConfiguration));
        }

        public Builder routeConfiguration(RedirectConfigurationResponse routeConfiguration) {
            return routeConfiguration(Either.ofRight(routeConfiguration));
        }

        public Builder rulesEngine(@Nullable SubResourceResponse rulesEngine) {
            $.rulesEngine = rulesEngine;
            return this;
        }

        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public Builder webApplicationFirewallPolicyLink(@Nullable RoutingRuleUpdateParametersResponseWebApplicationFirewallPolicyLink webApplicationFirewallPolicyLink) {
            $.webApplicationFirewallPolicyLink = webApplicationFirewallPolicyLink;
            return this;
        }

        public RoutingRuleResponse build() {
            $.resourceState = Objects.requireNonNull($.resourceState, "expected parameter 'resourceState' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
