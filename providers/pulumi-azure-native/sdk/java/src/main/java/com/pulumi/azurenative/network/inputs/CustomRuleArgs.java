// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.azurenative.network.enums.ActionType;
import com.pulumi.azurenative.network.enums.CustomRuleEnabledState;
import com.pulumi.azurenative.network.enums.RuleType;
import com.pulumi.azurenative.network.inputs.FrontDoorMatchConditionArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Defines contents of a web application rule
 * 
 */
public final class CustomRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final CustomRuleArgs Empty = new CustomRuleArgs();

    /**
     * Describes what action to be applied when rule matches.
     * 
     */
    @Import(name="action", required=true)
    private Output<Either<String,ActionType>> action;

    /**
     * @return Describes what action to be applied when rule matches.
     * 
     */
    public Output<Either<String,ActionType>> action() {
        return this.action;
    }

    /**
     * Describes if the custom rule is in enabled or disabled state. Defaults to Enabled if not specified.
     * 
     */
    @Import(name="enabledState")
    private @Nullable Output<Either<String,CustomRuleEnabledState>> enabledState;

    /**
     * @return Describes if the custom rule is in enabled or disabled state. Defaults to Enabled if not specified.
     * 
     */
    public Optional<Output<Either<String,CustomRuleEnabledState>>> enabledState() {
        return Optional.ofNullable(this.enabledState);
    }

    /**
     * List of match conditions.
     * 
     */
    @Import(name="matchConditions", required=true)
    private Output<List<FrontDoorMatchConditionArgs>> matchConditions;

    /**
     * @return List of match conditions.
     * 
     */
    public Output<List<FrontDoorMatchConditionArgs>> matchConditions() {
        return this.matchConditions;
    }

    /**
     * Describes the name of the rule.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Describes the name of the rule.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Describes priority of the rule. Rules with a lower value will be evaluated before rules with a higher value.
     * 
     */
    @Import(name="priority", required=true)
    private Output<Integer> priority;

    /**
     * @return Describes priority of the rule. Rules with a lower value will be evaluated before rules with a higher value.
     * 
     */
    public Output<Integer> priority() {
        return this.priority;
    }

    /**
     * Time window for resetting the rate limit count. Default is 1 minute.
     * 
     */
    @Import(name="rateLimitDurationInMinutes")
    private @Nullable Output<Integer> rateLimitDurationInMinutes;

    /**
     * @return Time window for resetting the rate limit count. Default is 1 minute.
     * 
     */
    public Optional<Output<Integer>> rateLimitDurationInMinutes() {
        return Optional.ofNullable(this.rateLimitDurationInMinutes);
    }

    /**
     * Number of allowed requests per client within the time window.
     * 
     */
    @Import(name="rateLimitThreshold")
    private @Nullable Output<Integer> rateLimitThreshold;

    /**
     * @return Number of allowed requests per client within the time window.
     * 
     */
    public Optional<Output<Integer>> rateLimitThreshold() {
        return Optional.ofNullable(this.rateLimitThreshold);
    }

    /**
     * Describes type of rule.
     * 
     */
    @Import(name="ruleType", required=true)
    private Output<Either<String,RuleType>> ruleType;

    /**
     * @return Describes type of rule.
     * 
     */
    public Output<Either<String,RuleType>> ruleType() {
        return this.ruleType;
    }

    private CustomRuleArgs() {}

    private CustomRuleArgs(CustomRuleArgs $) {
        this.action = $.action;
        this.enabledState = $.enabledState;
        this.matchConditions = $.matchConditions;
        this.name = $.name;
        this.priority = $.priority;
        this.rateLimitDurationInMinutes = $.rateLimitDurationInMinutes;
        this.rateLimitThreshold = $.rateLimitThreshold;
        this.ruleType = $.ruleType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CustomRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CustomRuleArgs $;

        public Builder() {
            $ = new CustomRuleArgs();
        }

        public Builder(CustomRuleArgs defaults) {
            $ = new CustomRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param action Describes what action to be applied when rule matches.
         * 
         * @return builder
         * 
         */
        public Builder action(Output<Either<String,ActionType>> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action Describes what action to be applied when rule matches.
         * 
         * @return builder
         * 
         */
        public Builder action(Either<String,ActionType> action) {
            return action(Output.of(action));
        }

        /**
         * @param action Describes what action to be applied when rule matches.
         * 
         * @return builder
         * 
         */
        public Builder action(String action) {
            return action(Either.ofLeft(action));
        }

        /**
         * @param action Describes what action to be applied when rule matches.
         * 
         * @return builder
         * 
         */
        public Builder action(ActionType action) {
            return action(Either.ofRight(action));
        }

        /**
         * @param enabledState Describes if the custom rule is in enabled or disabled state. Defaults to Enabled if not specified.
         * 
         * @return builder
         * 
         */
        public Builder enabledState(@Nullable Output<Either<String,CustomRuleEnabledState>> enabledState) {
            $.enabledState = enabledState;
            return this;
        }

        /**
         * @param enabledState Describes if the custom rule is in enabled or disabled state. Defaults to Enabled if not specified.
         * 
         * @return builder
         * 
         */
        public Builder enabledState(Either<String,CustomRuleEnabledState> enabledState) {
            return enabledState(Output.of(enabledState));
        }

        /**
         * @param enabledState Describes if the custom rule is in enabled or disabled state. Defaults to Enabled if not specified.
         * 
         * @return builder
         * 
         */
        public Builder enabledState(String enabledState) {
            return enabledState(Either.ofLeft(enabledState));
        }

        /**
         * @param enabledState Describes if the custom rule is in enabled or disabled state. Defaults to Enabled if not specified.
         * 
         * @return builder
         * 
         */
        public Builder enabledState(CustomRuleEnabledState enabledState) {
            return enabledState(Either.ofRight(enabledState));
        }

        /**
         * @param matchConditions List of match conditions.
         * 
         * @return builder
         * 
         */
        public Builder matchConditions(Output<List<FrontDoorMatchConditionArgs>> matchConditions) {
            $.matchConditions = matchConditions;
            return this;
        }

        /**
         * @param matchConditions List of match conditions.
         * 
         * @return builder
         * 
         */
        public Builder matchConditions(List<FrontDoorMatchConditionArgs> matchConditions) {
            return matchConditions(Output.of(matchConditions));
        }

        /**
         * @param matchConditions List of match conditions.
         * 
         * @return builder
         * 
         */
        public Builder matchConditions(FrontDoorMatchConditionArgs... matchConditions) {
            return matchConditions(List.of(matchConditions));
        }

        /**
         * @param name Describes the name of the rule.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Describes the name of the rule.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param priority Describes priority of the rule. Rules with a lower value will be evaluated before rules with a higher value.
         * 
         * @return builder
         * 
         */
        public Builder priority(Output<Integer> priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param priority Describes priority of the rule. Rules with a lower value will be evaluated before rules with a higher value.
         * 
         * @return builder
         * 
         */
        public Builder priority(Integer priority) {
            return priority(Output.of(priority));
        }

        /**
         * @param rateLimitDurationInMinutes Time window for resetting the rate limit count. Default is 1 minute.
         * 
         * @return builder
         * 
         */
        public Builder rateLimitDurationInMinutes(@Nullable Output<Integer> rateLimitDurationInMinutes) {
            $.rateLimitDurationInMinutes = rateLimitDurationInMinutes;
            return this;
        }

        /**
         * @param rateLimitDurationInMinutes Time window for resetting the rate limit count. Default is 1 minute.
         * 
         * @return builder
         * 
         */
        public Builder rateLimitDurationInMinutes(Integer rateLimitDurationInMinutes) {
            return rateLimitDurationInMinutes(Output.of(rateLimitDurationInMinutes));
        }

        /**
         * @param rateLimitThreshold Number of allowed requests per client within the time window.
         * 
         * @return builder
         * 
         */
        public Builder rateLimitThreshold(@Nullable Output<Integer> rateLimitThreshold) {
            $.rateLimitThreshold = rateLimitThreshold;
            return this;
        }

        /**
         * @param rateLimitThreshold Number of allowed requests per client within the time window.
         * 
         * @return builder
         * 
         */
        public Builder rateLimitThreshold(Integer rateLimitThreshold) {
            return rateLimitThreshold(Output.of(rateLimitThreshold));
        }

        /**
         * @param ruleType Describes type of rule.
         * 
         * @return builder
         * 
         */
        public Builder ruleType(Output<Either<String,RuleType>> ruleType) {
            $.ruleType = ruleType;
            return this;
        }

        /**
         * @param ruleType Describes type of rule.
         * 
         * @return builder
         * 
         */
        public Builder ruleType(Either<String,RuleType> ruleType) {
            return ruleType(Output.of(ruleType));
        }

        /**
         * @param ruleType Describes type of rule.
         * 
         * @return builder
         * 
         */
        public Builder ruleType(String ruleType) {
            return ruleType(Either.ofLeft(ruleType));
        }

        /**
         * @param ruleType Describes type of rule.
         * 
         * @return builder
         * 
         */
        public Builder ruleType(RuleType ruleType) {
            return ruleType(Either.ofRight(ruleType));
        }

        public CustomRuleArgs build() {
            $.action = Objects.requireNonNull($.action, "expected parameter 'action' to be non-null");
            $.matchConditions = Objects.requireNonNull($.matchConditions, "expected parameter 'matchConditions' to be non-null");
            $.priority = Objects.requireNonNull($.priority, "expected parameter 'priority' to be non-null");
            $.ruleType = Objects.requireNonNull($.ruleType, "expected parameter 'ruleType' to be non-null");
            return $;
        }
    }

}
