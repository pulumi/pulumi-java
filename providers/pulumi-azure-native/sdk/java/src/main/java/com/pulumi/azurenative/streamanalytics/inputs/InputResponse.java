// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.streamanalytics.inputs;

import com.pulumi.azurenative.streamanalytics.inputs.ReferenceInputPropertiesResponse;
import com.pulumi.azurenative.streamanalytics.inputs.StreamInputPropertiesResponse;
import com.pulumi.core.Either;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * An input object, containing all information associated with the named input. All inputs are contained under a streaming job.
 * 
 */
public final class InputResponse extends com.pulumi.resources.InvokeArgs {

    public static final InputResponse Empty = new InputResponse();

    /**
     * Resource Id
     * 
     */
    @Import(name="id", required=true)
    private String id;

    public String id() {
        return this.id;
    }

    /**
     * Resource name
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The properties that are associated with an input. Required on PUT (CreateOrReplace) requests.
     * 
     */
    @Import(name="properties")
    private @Nullable Either<ReferenceInputPropertiesResponse,StreamInputPropertiesResponse> properties;

    public Optional<Either<ReferenceInputPropertiesResponse,StreamInputPropertiesResponse>> properties() {
        return Optional.ofNullable(this.properties);
    }

    /**
     * Resource type
     * 
     */
    @Import(name="type", required=true)
    private String type;

    public String type() {
        return this.type;
    }

    private InputResponse() {}

    private InputResponse(InputResponse $) {
        this.id = $.id;
        this.name = $.name;
        this.properties = $.properties;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InputResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InputResponse $;

        public Builder() {
            $ = new InputResponse();
        }

        public Builder(InputResponse defaults) {
            $ = new InputResponse(Objects.requireNonNull(defaults));
        }

        public Builder id(String id) {
            $.id = id;
            return this;
        }

        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        public Builder properties(@Nullable Either<ReferenceInputPropertiesResponse,StreamInputPropertiesResponse> properties) {
            $.properties = properties;
            return this;
        }

        public Builder properties(ReferenceInputPropertiesResponse properties) {
            return properties(Either.ofLeft(properties));
        }

        public Builder properties(StreamInputPropertiesResponse properties) {
            return properties(Either.ofRight(properties));
        }

        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public InputResponse build() {
            $.id = Objects.requireNonNull($.id, "expected parameter 'id' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
