// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * VpnClientConnectionHealth properties.
 * 
 */
public final class VpnClientConnectionHealthResponse extends com.pulumi.resources.InvokeArgs {

    public static final VpnClientConnectionHealthResponse Empty = new VpnClientConnectionHealthResponse();

    /**
     * List of allocated ip addresses to the connected p2s vpn clients.
     * 
     */
    @Import(name="allocatedIpAddresses")
    private @Nullable List<String> allocatedIpAddresses;

    /**
     * @return List of allocated ip addresses to the connected p2s vpn clients.
     * 
     */
    public Optional<List<String>> allocatedIpAddresses() {
        return Optional.ofNullable(this.allocatedIpAddresses);
    }

    /**
     * Total of the Egress Bytes Transferred in this connection.
     * 
     */
    @Import(name="totalEgressBytesTransferred", required=true)
    private Double totalEgressBytesTransferred;

    /**
     * @return Total of the Egress Bytes Transferred in this connection.
     * 
     */
    public Double totalEgressBytesTransferred() {
        return this.totalEgressBytesTransferred;
    }

    /**
     * Total of the Ingress Bytes Transferred in this P2S Vpn connection.
     * 
     */
    @Import(name="totalIngressBytesTransferred", required=true)
    private Double totalIngressBytesTransferred;

    /**
     * @return Total of the Ingress Bytes Transferred in this P2S Vpn connection.
     * 
     */
    public Double totalIngressBytesTransferred() {
        return this.totalIngressBytesTransferred;
    }

    /**
     * The total of p2s vpn clients connected at this time to this P2SVpnGateway.
     * 
     */
    @Import(name="vpnClientConnectionsCount")
    private @Nullable Integer vpnClientConnectionsCount;

    /**
     * @return The total of p2s vpn clients connected at this time to this P2SVpnGateway.
     * 
     */
    public Optional<Integer> vpnClientConnectionsCount() {
        return Optional.ofNullable(this.vpnClientConnectionsCount);
    }

    private VpnClientConnectionHealthResponse() {}

    private VpnClientConnectionHealthResponse(VpnClientConnectionHealthResponse $) {
        this.allocatedIpAddresses = $.allocatedIpAddresses;
        this.totalEgressBytesTransferred = $.totalEgressBytesTransferred;
        this.totalIngressBytesTransferred = $.totalIngressBytesTransferred;
        this.vpnClientConnectionsCount = $.vpnClientConnectionsCount;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VpnClientConnectionHealthResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VpnClientConnectionHealthResponse $;

        public Builder() {
            $ = new VpnClientConnectionHealthResponse();
        }

        public Builder(VpnClientConnectionHealthResponse defaults) {
            $ = new VpnClientConnectionHealthResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param allocatedIpAddresses List of allocated ip addresses to the connected p2s vpn clients.
         * 
         * @return builder
         * 
         */
        public Builder allocatedIpAddresses(@Nullable List<String> allocatedIpAddresses) {
            $.allocatedIpAddresses = allocatedIpAddresses;
            return this;
        }

        /**
         * @param allocatedIpAddresses List of allocated ip addresses to the connected p2s vpn clients.
         * 
         * @return builder
         * 
         */
        public Builder allocatedIpAddresses(String... allocatedIpAddresses) {
            return allocatedIpAddresses(List.of(allocatedIpAddresses));
        }

        /**
         * @param totalEgressBytesTransferred Total of the Egress Bytes Transferred in this connection.
         * 
         * @return builder
         * 
         */
        public Builder totalEgressBytesTransferred(Double totalEgressBytesTransferred) {
            $.totalEgressBytesTransferred = totalEgressBytesTransferred;
            return this;
        }

        /**
         * @param totalIngressBytesTransferred Total of the Ingress Bytes Transferred in this P2S Vpn connection.
         * 
         * @return builder
         * 
         */
        public Builder totalIngressBytesTransferred(Double totalIngressBytesTransferred) {
            $.totalIngressBytesTransferred = totalIngressBytesTransferred;
            return this;
        }

        /**
         * @param vpnClientConnectionsCount The total of p2s vpn clients connected at this time to this P2SVpnGateway.
         * 
         * @return builder
         * 
         */
        public Builder vpnClientConnectionsCount(@Nullable Integer vpnClientConnectionsCount) {
            $.vpnClientConnectionsCount = vpnClientConnectionsCount;
            return this;
        }

        public VpnClientConnectionHealthResponse build() {
            $.totalEgressBytesTransferred = Objects.requireNonNull($.totalEgressBytesTransferred, "expected parameter 'totalEgressBytesTransferred' to be non-null");
            $.totalIngressBytesTransferred = Objects.requireNonNull($.totalIngressBytesTransferred, "expected parameter 'totalIngressBytesTransferred' to be non-null");
            return $;
        }
    }

}
