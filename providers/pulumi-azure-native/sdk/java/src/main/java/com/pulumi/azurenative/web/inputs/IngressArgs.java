// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.web.inputs;

import com.pulumi.azurenative.web.enums.IngressTransportMethod;
import com.pulumi.azurenative.web.inputs.TrafficWeightArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Container App Ingress configuration.
 * 
 */
public final class IngressArgs extends com.pulumi.resources.ResourceArgs {

    public static final IngressArgs Empty = new IngressArgs();

    /**
     * Bool indicating if HTTP connections to is allowed. If set to false HTTP connections are automatically redirected to HTTPS connections
     * 
     */
    @Import(name="allowInsecure")
    private @Nullable Output<Boolean> allowInsecure;

    public Optional<Output<Boolean>> allowInsecure() {
        return Optional.ofNullable(this.allowInsecure);
    }

    /**
     * Bool indicating if app exposes an external http endpoint
     * 
     */
    @Import(name="external")
    private @Nullable Output<Boolean> external;

    public Optional<Output<Boolean>> external() {
        return Optional.ofNullable(this.external);
    }

    /**
     * Target Port in containers for traffic from ingress
     * 
     */
    @Import(name="targetPort")
    private @Nullable Output<Integer> targetPort;

    public Optional<Output<Integer>> targetPort() {
        return Optional.ofNullable(this.targetPort);
    }

    @Import(name="traffic")
    private @Nullable Output<List<TrafficWeightArgs>> traffic;

    public Optional<Output<List<TrafficWeightArgs>>> traffic() {
        return Optional.ofNullable(this.traffic);
    }

    /**
     * Ingress transport protocol
     * 
     */
    @Import(name="transport")
    private @Nullable Output<Either<String,IngressTransportMethod>> transport;

    public Optional<Output<Either<String,IngressTransportMethod>>> transport() {
        return Optional.ofNullable(this.transport);
    }

    private IngressArgs() {}

    private IngressArgs(IngressArgs $) {
        this.allowInsecure = $.allowInsecure;
        this.external = $.external;
        this.targetPort = $.targetPort;
        this.traffic = $.traffic;
        this.transport = $.transport;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IngressArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IngressArgs $;

        public Builder() {
            $ = new IngressArgs();
        }

        public Builder(IngressArgs defaults) {
            $ = new IngressArgs(Objects.requireNonNull(defaults));
        }

        public Builder allowInsecure(@Nullable Output<Boolean> allowInsecure) {
            $.allowInsecure = allowInsecure;
            return this;
        }

        public Builder allowInsecure(Boolean allowInsecure) {
            return allowInsecure(Output.of(allowInsecure));
        }

        public Builder external(@Nullable Output<Boolean> external) {
            $.external = external;
            return this;
        }

        public Builder external(Boolean external) {
            return external(Output.of(external));
        }

        public Builder targetPort(@Nullable Output<Integer> targetPort) {
            $.targetPort = targetPort;
            return this;
        }

        public Builder targetPort(Integer targetPort) {
            return targetPort(Output.of(targetPort));
        }

        public Builder traffic(@Nullable Output<List<TrafficWeightArgs>> traffic) {
            $.traffic = traffic;
            return this;
        }

        public Builder traffic(List<TrafficWeightArgs> traffic) {
            return traffic(Output.of(traffic));
        }

        public Builder traffic(TrafficWeightArgs... traffic) {
            return traffic(List.of(traffic));
        }

        public Builder transport(@Nullable Output<Either<String,IngressTransportMethod>> transport) {
            $.transport = transport;
            return this;
        }

        public Builder transport(Either<String,IngressTransportMethod> transport) {
            return transport(Output.of(transport));
        }

        public IngressArgs build() {
            $.external = Codegen.booleanProp("external").output().arg($.external).def(false).getNullable();
            return $;
        }
    }

}
