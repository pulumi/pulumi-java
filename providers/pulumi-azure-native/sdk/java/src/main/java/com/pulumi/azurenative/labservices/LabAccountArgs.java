// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.labservices;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class LabAccountArgs extends com.pulumi.resources.ResourceArgs {

    public static final LabAccountArgs Empty = new LabAccountArgs();

    /**
     * Represents if region selection is enabled
     * 
     */
    @Import(name="enabledRegionSelection")
      private final @Nullable Output<Boolean> enabledRegionSelection;

    public Output<Boolean> enabledRegionSelection() {
        return this.enabledRegionSelection == null ? Codegen.empty() : this.enabledRegionSelection;
    }

    /**
     * The name of the lab Account.
     * 
     */
    @Import(name="labAccountName")
      private final @Nullable Output<String> labAccountName;

    public Output<String> labAccountName() {
        return this.labAccountName == null ? Codegen.empty() : this.labAccountName;
    }

    /**
     * The location of the resource.
     * 
     */
    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> location() {
        return this.location == null ? Codegen.empty() : this.location;
    }

    /**
     * The provisioning status of the resource.
     * 
     */
    @Import(name="provisioningState")
      private final @Nullable Output<String> provisioningState;

    public Output<String> provisioningState() {
        return this.provisioningState == null ? Codegen.empty() : this.provisioningState;
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The tags of the resource.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    /**
     * The unique immutable identifier of a resource (Guid).
     * 
     */
    @Import(name="uniqueIdentifier")
      private final @Nullable Output<String> uniqueIdentifier;

    public Output<String> uniqueIdentifier() {
        return this.uniqueIdentifier == null ? Codegen.empty() : this.uniqueIdentifier;
    }

    public LabAccountArgs(
        @Nullable Output<Boolean> enabledRegionSelection,
        @Nullable Output<String> labAccountName,
        @Nullable Output<String> location,
        @Nullable Output<String> provisioningState,
        Output<String> resourceGroupName,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<String> uniqueIdentifier) {
        this.enabledRegionSelection = enabledRegionSelection;
        this.labAccountName = labAccountName;
        this.location = location;
        this.provisioningState = provisioningState;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.tags = tags;
        this.uniqueIdentifier = uniqueIdentifier;
    }

    private LabAccountArgs() {
        this.enabledRegionSelection = Codegen.empty();
        this.labAccountName = Codegen.empty();
        this.location = Codegen.empty();
        this.provisioningState = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.tags = Codegen.empty();
        this.uniqueIdentifier = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LabAccountArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Boolean> enabledRegionSelection;
        private @Nullable Output<String> labAccountName;
        private @Nullable Output<String> location;
        private @Nullable Output<String> provisioningState;
        private Output<String> resourceGroupName;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<String> uniqueIdentifier;

        public Builder() {
    	      // Empty
        }

        public Builder(LabAccountArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enabledRegionSelection = defaults.enabledRegionSelection;
    	      this.labAccountName = defaults.labAccountName;
    	      this.location = defaults.location;
    	      this.provisioningState = defaults.provisioningState;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.tags = defaults.tags;
    	      this.uniqueIdentifier = defaults.uniqueIdentifier;
        }

        public Builder enabledRegionSelection(@Nullable Output<Boolean> enabledRegionSelection) {
            this.enabledRegionSelection = enabledRegionSelection;
            return this;
        }
        public Builder enabledRegionSelection(@Nullable Boolean enabledRegionSelection) {
            this.enabledRegionSelection = Codegen.ofNullable(enabledRegionSelection);
            return this;
        }
        public Builder labAccountName(@Nullable Output<String> labAccountName) {
            this.labAccountName = labAccountName;
            return this;
        }
        public Builder labAccountName(@Nullable String labAccountName) {
            this.labAccountName = Codegen.ofNullable(labAccountName);
            return this;
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Codegen.ofNullable(location);
            return this;
        }
        public Builder provisioningState(@Nullable Output<String> provisioningState) {
            this.provisioningState = provisioningState;
            return this;
        }
        public Builder provisioningState(@Nullable String provisioningState) {
            this.provisioningState = Codegen.ofNullable(provisioningState);
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder uniqueIdentifier(@Nullable Output<String> uniqueIdentifier) {
            this.uniqueIdentifier = uniqueIdentifier;
            return this;
        }
        public Builder uniqueIdentifier(@Nullable String uniqueIdentifier) {
            this.uniqueIdentifier = Codegen.ofNullable(uniqueIdentifier);
            return this;
        }        public LabAccountArgs build() {
            return new LabAccountArgs(enabledRegionSelection, labAccountName, location, provisioningState, resourceGroupName, tags, uniqueIdentifier);
        }
    }
}
