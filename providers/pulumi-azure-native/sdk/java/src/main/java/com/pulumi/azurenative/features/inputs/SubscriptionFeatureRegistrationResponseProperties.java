// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.features.inputs;

import com.pulumi.azurenative.features.inputs.AuthorizationProfileResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SubscriptionFeatureRegistrationResponseProperties extends com.pulumi.resources.InvokeArgs {

    public static final SubscriptionFeatureRegistrationResponseProperties Empty = new SubscriptionFeatureRegistrationResponseProperties();

    /**
     * The feature approval type.
     * 
     */
    @Import(name="approvalType", required=true)
    private String approvalType;

    /**
     * @return The feature approval type.
     * 
     */
    public String approvalType() {
        return this.approvalType;
    }

    /**
     * Authorization Profile
     * 
     */
    @Import(name="authorizationProfile")
    private @Nullable AuthorizationProfileResponse authorizationProfile;

    /**
     * @return Authorization Profile
     * 
     */
    public Optional<AuthorizationProfileResponse> authorizationProfile() {
        return Optional.ofNullable(this.authorizationProfile);
    }

    /**
     * The feature description.
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    /**
     * @return The feature description.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The featureDisplayName.
     * 
     */
    @Import(name="displayName", required=true)
    private String displayName;

    /**
     * @return The featureDisplayName.
     * 
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * The feature documentation link.
     * 
     */
    @Import(name="documentationLink", required=true)
    private String documentationLink;

    /**
     * @return The feature documentation link.
     * 
     */
    public String documentationLink() {
        return this.documentationLink;
    }

    /**
     * The featureName.
     * 
     */
    @Import(name="featureName", required=true)
    private String featureName;

    /**
     * @return The featureName.
     * 
     */
    public String featureName() {
        return this.featureName;
    }

    /**
     * Key-value pairs for meta data.
     * 
     */
    @Import(name="metadata")
    private @Nullable Map<String,String> metadata;

    /**
     * @return Key-value pairs for meta data.
     * 
     */
    public Optional<Map<String,String>> metadata() {
        return Optional.ofNullable(this.metadata);
    }

    /**
     * The providerNamespace.
     * 
     */
    @Import(name="providerNamespace", required=true)
    private String providerNamespace;

    /**
     * @return The providerNamespace.
     * 
     */
    public String providerNamespace() {
        return this.providerNamespace;
    }

    /**
     * The feature registration date.
     * 
     */
    @Import(name="registrationDate", required=true)
    private String registrationDate;

    /**
     * @return The feature registration date.
     * 
     */
    public String registrationDate() {
        return this.registrationDate;
    }

    /**
     * The feature release date.
     * 
     */
    @Import(name="releaseDate", required=true)
    private String releaseDate;

    /**
     * @return The feature release date.
     * 
     */
    public String releaseDate() {
        return this.releaseDate;
    }

    /**
     * Indicates whether feature should be displayed in Portal.
     * 
     */
    @Import(name="shouldFeatureDisplayInPortal")
    private @Nullable Boolean shouldFeatureDisplayInPortal;

    /**
     * @return Indicates whether feature should be displayed in Portal.
     * 
     */
    public Optional<Boolean> shouldFeatureDisplayInPortal() {
        return Optional.ofNullable(this.shouldFeatureDisplayInPortal);
    }

    /**
     * The state.
     * 
     */
    @Import(name="state")
    private @Nullable String state;

    /**
     * @return The state.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The subscriptionId.
     * 
     */
    @Import(name="subscriptionId", required=true)
    private String subscriptionId;

    /**
     * @return The subscriptionId.
     * 
     */
    public String subscriptionId() {
        return this.subscriptionId;
    }

    /**
     * The tenantId.
     * 
     */
    @Import(name="tenantId", required=true)
    private String tenantId;

    /**
     * @return The tenantId.
     * 
     */
    public String tenantId() {
        return this.tenantId;
    }

    private SubscriptionFeatureRegistrationResponseProperties() {}

    private SubscriptionFeatureRegistrationResponseProperties(SubscriptionFeatureRegistrationResponseProperties $) {
        this.approvalType = $.approvalType;
        this.authorizationProfile = $.authorizationProfile;
        this.description = $.description;
        this.displayName = $.displayName;
        this.documentationLink = $.documentationLink;
        this.featureName = $.featureName;
        this.metadata = $.metadata;
        this.providerNamespace = $.providerNamespace;
        this.registrationDate = $.registrationDate;
        this.releaseDate = $.releaseDate;
        this.shouldFeatureDisplayInPortal = $.shouldFeatureDisplayInPortal;
        this.state = $.state;
        this.subscriptionId = $.subscriptionId;
        this.tenantId = $.tenantId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SubscriptionFeatureRegistrationResponseProperties defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SubscriptionFeatureRegistrationResponseProperties $;

        public Builder() {
            $ = new SubscriptionFeatureRegistrationResponseProperties();
        }

        public Builder(SubscriptionFeatureRegistrationResponseProperties defaults) {
            $ = new SubscriptionFeatureRegistrationResponseProperties(Objects.requireNonNull(defaults));
        }

        /**
         * @param approvalType The feature approval type.
         * 
         * @return builder
         * 
         */
        public Builder approvalType(String approvalType) {
            $.approvalType = approvalType;
            return this;
        }

        /**
         * @param authorizationProfile Authorization Profile
         * 
         * @return builder
         * 
         */
        public Builder authorizationProfile(@Nullable AuthorizationProfileResponse authorizationProfile) {
            $.authorizationProfile = authorizationProfile;
            return this;
        }

        /**
         * @param description The feature description.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        /**
         * @param displayName The featureDisplayName.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param documentationLink The feature documentation link.
         * 
         * @return builder
         * 
         */
        public Builder documentationLink(String documentationLink) {
            $.documentationLink = documentationLink;
            return this;
        }

        /**
         * @param featureName The featureName.
         * 
         * @return builder
         * 
         */
        public Builder featureName(String featureName) {
            $.featureName = featureName;
            return this;
        }

        /**
         * @param metadata Key-value pairs for meta data.
         * 
         * @return builder
         * 
         */
        public Builder metadata(@Nullable Map<String,String> metadata) {
            $.metadata = metadata;
            return this;
        }

        /**
         * @param providerNamespace The providerNamespace.
         * 
         * @return builder
         * 
         */
        public Builder providerNamespace(String providerNamespace) {
            $.providerNamespace = providerNamespace;
            return this;
        }

        /**
         * @param registrationDate The feature registration date.
         * 
         * @return builder
         * 
         */
        public Builder registrationDate(String registrationDate) {
            $.registrationDate = registrationDate;
            return this;
        }

        /**
         * @param releaseDate The feature release date.
         * 
         * @return builder
         * 
         */
        public Builder releaseDate(String releaseDate) {
            $.releaseDate = releaseDate;
            return this;
        }

        /**
         * @param shouldFeatureDisplayInPortal Indicates whether feature should be displayed in Portal.
         * 
         * @return builder
         * 
         */
        public Builder shouldFeatureDisplayInPortal(@Nullable Boolean shouldFeatureDisplayInPortal) {
            $.shouldFeatureDisplayInPortal = shouldFeatureDisplayInPortal;
            return this;
        }

        /**
         * @param state The state.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable String state) {
            $.state = state;
            return this;
        }

        /**
         * @param subscriptionId The subscriptionId.
         * 
         * @return builder
         * 
         */
        public Builder subscriptionId(String subscriptionId) {
            $.subscriptionId = subscriptionId;
            return this;
        }

        /**
         * @param tenantId The tenantId.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(String tenantId) {
            $.tenantId = tenantId;
            return this;
        }

        public SubscriptionFeatureRegistrationResponseProperties build() {
            $.approvalType = Objects.requireNonNull($.approvalType, "expected parameter 'approvalType' to be non-null");
            $.displayName = Objects.requireNonNull($.displayName, "expected parameter 'displayName' to be non-null");
            $.documentationLink = Objects.requireNonNull($.documentationLink, "expected parameter 'documentationLink' to be non-null");
            $.featureName = Objects.requireNonNull($.featureName, "expected parameter 'featureName' to be non-null");
            $.providerNamespace = Objects.requireNonNull($.providerNamespace, "expected parameter 'providerNamespace' to be non-null");
            $.registrationDate = Objects.requireNonNull($.registrationDate, "expected parameter 'registrationDate' to be non-null");
            $.releaseDate = Objects.requireNonNull($.releaseDate, "expected parameter 'releaseDate' to be non-null");
            $.shouldFeatureDisplayInPortal = Codegen.booleanProp("shouldFeatureDisplayInPortal").arg($.shouldFeatureDisplayInPortal).def(false).getNullable();
            $.subscriptionId = Objects.requireNonNull($.subscriptionId, "expected parameter 'subscriptionId' to be non-null");
            $.tenantId = Objects.requireNonNull($.tenantId, "expected parameter 'tenantId' to be non-null");
            return $;
        }
    }

}
