// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.web.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Cross-Origin Resource Sharing (CORS) settings for the app.
 * 
 */
public final class CorsSettingsResponse extends com.pulumi.resources.InvokeArgs {

    public static final CorsSettingsResponse Empty = new CorsSettingsResponse();

    /**
     * Gets or sets the list of origins that should be allowed to make cross-origin
     * calls (for example: http://example.com:12345). Use &#34;*&#34; to allow all.
     * 
     */
    @Import(name="allowedOrigins")
    private @Nullable List<String> allowedOrigins;

    /**
     * @return Gets or sets the list of origins that should be allowed to make cross-origin
     * calls (for example: http://example.com:12345). Use &#34;*&#34; to allow all.
     * 
     */
    public Optional<List<String>> allowedOrigins() {
        return Optional.ofNullable(this.allowedOrigins);
    }

    /**
     * Gets or sets whether CORS requests with credentials are allowed. See
     * https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Requests_with_credentials
     * for more details.
     * 
     */
    @Import(name="supportCredentials")
    private @Nullable Boolean supportCredentials;

    /**
     * @return Gets or sets whether CORS requests with credentials are allowed. See
     * https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Requests_with_credentials
     * for more details.
     * 
     */
    public Optional<Boolean> supportCredentials() {
        return Optional.ofNullable(this.supportCredentials);
    }

    private CorsSettingsResponse() {}

    private CorsSettingsResponse(CorsSettingsResponse $) {
        this.allowedOrigins = $.allowedOrigins;
        this.supportCredentials = $.supportCredentials;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CorsSettingsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CorsSettingsResponse $;

        public Builder() {
            $ = new CorsSettingsResponse();
        }

        public Builder(CorsSettingsResponse defaults) {
            $ = new CorsSettingsResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowedOrigins Gets or sets the list of origins that should be allowed to make cross-origin
         * calls (for example: http://example.com:12345). Use &#34;*&#34; to allow all.
         * 
         * @return builder
         * 
         */
        public Builder allowedOrigins(@Nullable List<String> allowedOrigins) {
            $.allowedOrigins = allowedOrigins;
            return this;
        }

        /**
         * @param allowedOrigins Gets or sets the list of origins that should be allowed to make cross-origin
         * calls (for example: http://example.com:12345). Use &#34;*&#34; to allow all.
         * 
         * @return builder
         * 
         */
        public Builder allowedOrigins(String... allowedOrigins) {
            return allowedOrigins(List.of(allowedOrigins));
        }

        /**
         * @param supportCredentials Gets or sets whether CORS requests with credentials are allowed. See
         * https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Requests_with_credentials
         * for more details.
         * 
         * @return builder
         * 
         */
        public Builder supportCredentials(@Nullable Boolean supportCredentials) {
            $.supportCredentials = supportCredentials;
            return this;
        }

        public CorsSettingsResponse build() {
            return $;
        }
    }

}
