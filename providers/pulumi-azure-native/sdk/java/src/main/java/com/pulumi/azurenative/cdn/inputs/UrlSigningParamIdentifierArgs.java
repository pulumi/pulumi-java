// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.cdn.inputs;

import com.pulumi.azurenative.cdn.enums.ParamIndicator;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;


/**
 * Defines how to identify a parameter for a specific purpose e.g. expires
 * 
 */
public final class UrlSigningParamIdentifierArgs extends com.pulumi.resources.ResourceArgs {

    public static final UrlSigningParamIdentifierArgs Empty = new UrlSigningParamIdentifierArgs();

    /**
     * Indicates the purpose of the parameter
     * 
     */
    @Import(name="paramIndicator", required=true)
      private final Output<Either<String,ParamIndicator>> paramIndicator;

    public Output<Either<String,ParamIndicator>> paramIndicator() {
        return this.paramIndicator;
    }

    /**
     * Parameter name
     * 
     */
    @Import(name="paramName", required=true)
      private final Output<String> paramName;

    public Output<String> paramName() {
        return this.paramName;
    }

    public UrlSigningParamIdentifierArgs(
        Output<Either<String,ParamIndicator>> paramIndicator,
        Output<String> paramName) {
        this.paramIndicator = Objects.requireNonNull(paramIndicator, "expected parameter 'paramIndicator' to be non-null");
        this.paramName = Objects.requireNonNull(paramName, "expected parameter 'paramName' to be non-null");
    }

    private UrlSigningParamIdentifierArgs() {
        this.paramIndicator = Codegen.empty();
        this.paramName = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(UrlSigningParamIdentifierArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<Either<String,ParamIndicator>> paramIndicator;
        private Output<String> paramName;

        public Builder() {
    	      // Empty
        }

        public Builder(UrlSigningParamIdentifierArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.paramIndicator = defaults.paramIndicator;
    	      this.paramName = defaults.paramName;
        }

        public Builder paramIndicator(Output<Either<String,ParamIndicator>> paramIndicator) {
            this.paramIndicator = Objects.requireNonNull(paramIndicator);
            return this;
        }
        public Builder paramIndicator(Either<String,ParamIndicator> paramIndicator) {
            this.paramIndicator = Output.of(Objects.requireNonNull(paramIndicator));
            return this;
        }
        public Builder paramName(Output<String> paramName) {
            this.paramName = Objects.requireNonNull(paramName);
            return this;
        }
        public Builder paramName(String paramName) {
            this.paramName = Output.of(Objects.requireNonNull(paramName));
            return this;
        }        public UrlSigningParamIdentifierArgs build() {
            return new UrlSigningParamIdentifierArgs(paramIndicator, paramName);
        }
    }
}
