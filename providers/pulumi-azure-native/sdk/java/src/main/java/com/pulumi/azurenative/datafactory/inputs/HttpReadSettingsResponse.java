// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Sftp read settings.
 * 
 */
public final class HttpReadSettingsResponse extends com.pulumi.resources.InvokeArgs {

    public static final HttpReadSettingsResponse Empty = new HttpReadSettingsResponse();

    /**
     * The additional HTTP headers in the request to the RESTful API. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="additionalHeaders")
    private @Nullable Object additionalHeaders;

    public Optional<Object> additionalHeaders() {
        return Optional.ofNullable(this.additionalHeaders);
    }

    /**
     * If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
     * 
     */
    @Import(name="disableMetricsCollection")
    private @Nullable Object disableMetricsCollection;

    public Optional<Object> disableMetricsCollection() {
        return Optional.ofNullable(this.disableMetricsCollection);
    }

    /**
     * Indicates whether to enable partition discovery.
     * 
     */
    @Import(name="enablePartitionDiscovery")
    private @Nullable Boolean enablePartitionDiscovery;

    public Optional<Boolean> enablePartitionDiscovery() {
        return Optional.ofNullable(this.enablePartitionDiscovery);
    }

    /**
     * The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
     * 
     */
    @Import(name="maxConcurrentConnections")
    private @Nullable Object maxConcurrentConnections;

    public Optional<Object> maxConcurrentConnections() {
        return Optional.ofNullable(this.maxConcurrentConnections);
    }

    /**
     * Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="partitionRootPath")
    private @Nullable Object partitionRootPath;

    public Optional<Object> partitionRootPath() {
        return Optional.ofNullable(this.partitionRootPath);
    }

    /**
     * The HTTP request body to the RESTful API if requestMethod is POST. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="requestBody")
    private @Nullable Object requestBody;

    public Optional<Object> requestBody() {
        return Optional.ofNullable(this.requestBody);
    }

    /**
     * The HTTP method used to call the RESTful API. The default is GET. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="requestMethod")
    private @Nullable Object requestMethod;

    public Optional<Object> requestMethod() {
        return Optional.ofNullable(this.requestMethod);
    }

    /**
     * Specifies the timeout for a HTTP client to get HTTP response from HTTP server.
     * 
     */
    @Import(name="requestTimeout")
    private @Nullable Object requestTimeout;

    public Optional<Object> requestTimeout() {
        return Optional.ofNullable(this.requestTimeout);
    }

    /**
     * The read setting type.
     * Expected value is &#39;HttpReadSettings&#39;.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    public String type() {
        return this.type;
    }

    private HttpReadSettingsResponse() {}

    private HttpReadSettingsResponse(HttpReadSettingsResponse $) {
        this.additionalHeaders = $.additionalHeaders;
        this.disableMetricsCollection = $.disableMetricsCollection;
        this.enablePartitionDiscovery = $.enablePartitionDiscovery;
        this.maxConcurrentConnections = $.maxConcurrentConnections;
        this.partitionRootPath = $.partitionRootPath;
        this.requestBody = $.requestBody;
        this.requestMethod = $.requestMethod;
        this.requestTimeout = $.requestTimeout;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HttpReadSettingsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HttpReadSettingsResponse $;

        public Builder() {
            $ = new HttpReadSettingsResponse();
        }

        public Builder(HttpReadSettingsResponse defaults) {
            $ = new HttpReadSettingsResponse(Objects.requireNonNull(defaults));
        }

        public Builder additionalHeaders(@Nullable Object additionalHeaders) {
            $.additionalHeaders = additionalHeaders;
            return this;
        }

        public Builder disableMetricsCollection(@Nullable Object disableMetricsCollection) {
            $.disableMetricsCollection = disableMetricsCollection;
            return this;
        }

        public Builder enablePartitionDiscovery(@Nullable Boolean enablePartitionDiscovery) {
            $.enablePartitionDiscovery = enablePartitionDiscovery;
            return this;
        }

        public Builder maxConcurrentConnections(@Nullable Object maxConcurrentConnections) {
            $.maxConcurrentConnections = maxConcurrentConnections;
            return this;
        }

        public Builder partitionRootPath(@Nullable Object partitionRootPath) {
            $.partitionRootPath = partitionRootPath;
            return this;
        }

        public Builder requestBody(@Nullable Object requestBody) {
            $.requestBody = requestBody;
            return this;
        }

        public Builder requestMethod(@Nullable Object requestMethod) {
            $.requestMethod = requestMethod;
            return this;
        }

        public Builder requestTimeout(@Nullable Object requestTimeout) {
            $.requestTimeout = requestTimeout;
            return this;
        }

        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public HttpReadSettingsResponse build() {
            $.type = Codegen.stringProp("type").arg($.type).require();
            return $;
        }
    }

}
