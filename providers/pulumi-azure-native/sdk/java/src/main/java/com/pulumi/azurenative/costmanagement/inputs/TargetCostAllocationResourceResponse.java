// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.costmanagement.inputs;

import com.pulumi.azurenative.costmanagement.inputs.CostAllocationProportionResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Target resources for cost allocation.
 * 
 */
public final class TargetCostAllocationResourceResponse extends com.pulumi.resources.InvokeArgs {

    public static final TargetCostAllocationResourceResponse Empty = new TargetCostAllocationResourceResponse();

    /**
     * If resource type is dimension, this must be either ResourceGroupName or SubscriptionId. If resource type is tag, this must be a valid Azure tag
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return If resource type is dimension, this must be either ResourceGroupName or SubscriptionId. If resource type is tag, this must be a valid Azure tag
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * Method of cost allocation for the rule
     * 
     */
    @Import(name="policyType", required=true)
    private String policyType;

    /**
     * @return Method of cost allocation for the rule
     * 
     */
    public String policyType() {
        return this.policyType;
    }

    /**
     * Type of resources contained in this cost allocation rule
     * 
     */
    @Import(name="resourceType", required=true)
    private String resourceType;

    /**
     * @return Type of resources contained in this cost allocation rule
     * 
     */
    public String resourceType() {
        return this.resourceType;
    }

    /**
     * Target resources for cost allocation. This list cannot contain more than 25 values.
     * 
     */
    @Import(name="values", required=true)
    private List<CostAllocationProportionResponse> values;

    /**
     * @return Target resources for cost allocation. This list cannot contain more than 25 values.
     * 
     */
    public List<CostAllocationProportionResponse> values() {
        return this.values;
    }

    private TargetCostAllocationResourceResponse() {}

    private TargetCostAllocationResourceResponse(TargetCostAllocationResourceResponse $) {
        this.name = $.name;
        this.policyType = $.policyType;
        this.resourceType = $.resourceType;
        this.values = $.values;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TargetCostAllocationResourceResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TargetCostAllocationResourceResponse $;

        public Builder() {
            $ = new TargetCostAllocationResourceResponse();
        }

        public Builder(TargetCostAllocationResourceResponse defaults) {
            $ = new TargetCostAllocationResourceResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param name If resource type is dimension, this must be either ResourceGroupName or SubscriptionId. If resource type is tag, this must be a valid Azure tag
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param policyType Method of cost allocation for the rule
         * 
         * @return builder
         * 
         */
        public Builder policyType(String policyType) {
            $.policyType = policyType;
            return this;
        }

        /**
         * @param resourceType Type of resources contained in this cost allocation rule
         * 
         * @return builder
         * 
         */
        public Builder resourceType(String resourceType) {
            $.resourceType = resourceType;
            return this;
        }

        /**
         * @param values Target resources for cost allocation. This list cannot contain more than 25 values.
         * 
         * @return builder
         * 
         */
        public Builder values(List<CostAllocationProportionResponse> values) {
            $.values = values;
            return this;
        }

        /**
         * @param values Target resources for cost allocation. This list cannot contain more than 25 values.
         * 
         * @return builder
         * 
         */
        public Builder values(CostAllocationProportionResponse... values) {
            return values(List.of(values));
        }

        public TargetCostAllocationResourceResponse build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.policyType = Objects.requireNonNull($.policyType, "expected parameter 'policyType' to be non-null");
            $.resourceType = Objects.requireNonNull($.resourceType, "expected parameter 'resourceType' to be non-null");
            $.values = Objects.requireNonNull($.values, "expected parameter 'values' to be non-null");
            return $;
        }
    }

}
