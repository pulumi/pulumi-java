// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.recoveryservices.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Base class for backup items.
 * 
 */
public final class GenericProtectedItemResponse extends com.pulumi.resources.InvokeArgs {

    public static final GenericProtectedItemResponse Empty = new GenericProtectedItemResponse();

    /**
     * Type of backup management for the backed up item.
     * 
     */
    @Import(name="backupManagementType")
    private @Nullable String backupManagementType;

    public Optional<String> backupManagementType() {
        return Optional.ofNullable(this.backupManagementType);
    }

    /**
     * Name of the backup set the backup item belongs to
     * 
     */
    @Import(name="backupSetName")
    private @Nullable String backupSetName;

    public Optional<String> backupSetName() {
        return Optional.ofNullable(this.backupSetName);
    }

    /**
     * Unique name of container
     * 
     */
    @Import(name="containerName")
    private @Nullable String containerName;

    public Optional<String> containerName() {
        return Optional.ofNullable(this.containerName);
    }

    /**
     * Create mode to indicate recovery of existing soft deleted data source or creation of new data source.
     * 
     */
    @Import(name="createMode")
    private @Nullable String createMode;

    public Optional<String> createMode() {
        return Optional.ofNullable(this.createMode);
    }

    /**
     * Time for deferred deletion in UTC
     * 
     */
    @Import(name="deferredDeleteTimeInUTC")
    private @Nullable String deferredDeleteTimeInUTC;

    public Optional<String> deferredDeleteTimeInUTC() {
        return Optional.ofNullable(this.deferredDeleteTimeInUTC);
    }

    /**
     * Time remaining before the DS marked for deferred delete is permanently deleted
     * 
     */
    @Import(name="deferredDeleteTimeRemaining")
    private @Nullable String deferredDeleteTimeRemaining;

    public Optional<String> deferredDeleteTimeRemaining() {
        return Optional.ofNullable(this.deferredDeleteTimeRemaining);
    }

    /**
     * Name of this backup item&#39;s fabric.
     * 
     */
    @Import(name="fabricName")
    private @Nullable String fabricName;

    public Optional<String> fabricName() {
        return Optional.ofNullable(this.fabricName);
    }

    /**
     * Friendly name of the container.
     * 
     */
    @Import(name="friendlyName")
    private @Nullable String friendlyName;

    public Optional<String> friendlyName() {
        return Optional.ofNullable(this.friendlyName);
    }

    /**
     * Flag to identify whether the deferred deleted DS is to be purged soon
     * 
     */
    @Import(name="isDeferredDeleteScheduleUpcoming")
    private @Nullable Boolean isDeferredDeleteScheduleUpcoming;

    public Optional<Boolean> isDeferredDeleteScheduleUpcoming() {
        return Optional.ofNullable(this.isDeferredDeleteScheduleUpcoming);
    }

    /**
     * Flag to identify that deferred deleted DS is to be moved into Pause state
     * 
     */
    @Import(name="isRehydrate")
    private @Nullable Boolean isRehydrate;

    public Optional<Boolean> isRehydrate() {
        return Optional.ofNullable(this.isRehydrate);
    }

    /**
     * Flag to identify whether the DS is scheduled for deferred delete
     * 
     */
    @Import(name="isScheduledForDeferredDelete")
    private @Nullable Boolean isScheduledForDeferredDelete;

    public Optional<Boolean> isScheduledForDeferredDelete() {
        return Optional.ofNullable(this.isScheduledForDeferredDelete);
    }

    /**
     * Timestamp when the last (latest) backup copy was created for this backup item.
     * 
     */
    @Import(name="lastRecoveryPoint")
    private @Nullable String lastRecoveryPoint;

    public Optional<String> lastRecoveryPoint() {
        return Optional.ofNullable(this.lastRecoveryPoint);
    }

    /**
     * ID of the backup policy with which this item is backed up.
     * 
     */
    @Import(name="policyId")
    private @Nullable String policyId;

    public Optional<String> policyId() {
        return Optional.ofNullable(this.policyId);
    }

    /**
     * Indicates consistency of policy object and policy applied to this backup item.
     * 
     */
    @Import(name="policyState")
    private @Nullable String policyState;

    public Optional<String> policyState() {
        return Optional.ofNullable(this.policyState);
    }

    /**
     * Data Plane Service ID of the protected item.
     * 
     */
    @Import(name="protectedItemId")
    private @Nullable Double protectedItemId;

    public Optional<Double> protectedItemId() {
        return Optional.ofNullable(this.protectedItemId);
    }

    /**
     * backup item type.
     * Expected value is &#39;GenericProtectedItem&#39;.
     * 
     */
    @Import(name="protectedItemType", required=true)
    private String protectedItemType;

    public String protectedItemType() {
        return this.protectedItemType;
    }

    /**
     * Backup state of this backup item.
     * 
     */
    @Import(name="protectionState")
    private @Nullable String protectionState;

    public Optional<String> protectionState() {
        return Optional.ofNullable(this.protectionState);
    }

    /**
     * Loosely coupled (type, value) associations (example - parent of a protected item)
     * 
     */
    @Import(name="sourceAssociations")
    private @Nullable Map<String,String> sourceAssociations;

    public Optional<Map<String,String>> sourceAssociations() {
        return Optional.ofNullable(this.sourceAssociations);
    }

    /**
     * ARM ID of the resource to be backed up.
     * 
     */
    @Import(name="sourceResourceId")
    private @Nullable String sourceResourceId;

    public Optional<String> sourceResourceId() {
        return Optional.ofNullable(this.sourceResourceId);
    }

    /**
     * Type of workload this item represents.
     * 
     */
    @Import(name="workloadType")
    private @Nullable String workloadType;

    public Optional<String> workloadType() {
        return Optional.ofNullable(this.workloadType);
    }

    private GenericProtectedItemResponse() {}

    private GenericProtectedItemResponse(GenericProtectedItemResponse $) {
        this.backupManagementType = $.backupManagementType;
        this.backupSetName = $.backupSetName;
        this.containerName = $.containerName;
        this.createMode = $.createMode;
        this.deferredDeleteTimeInUTC = $.deferredDeleteTimeInUTC;
        this.deferredDeleteTimeRemaining = $.deferredDeleteTimeRemaining;
        this.fabricName = $.fabricName;
        this.friendlyName = $.friendlyName;
        this.isDeferredDeleteScheduleUpcoming = $.isDeferredDeleteScheduleUpcoming;
        this.isRehydrate = $.isRehydrate;
        this.isScheduledForDeferredDelete = $.isScheduledForDeferredDelete;
        this.lastRecoveryPoint = $.lastRecoveryPoint;
        this.policyId = $.policyId;
        this.policyState = $.policyState;
        this.protectedItemId = $.protectedItemId;
        this.protectedItemType = $.protectedItemType;
        this.protectionState = $.protectionState;
        this.sourceAssociations = $.sourceAssociations;
        this.sourceResourceId = $.sourceResourceId;
        this.workloadType = $.workloadType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GenericProtectedItemResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GenericProtectedItemResponse $;

        public Builder() {
            $ = new GenericProtectedItemResponse();
        }

        public Builder(GenericProtectedItemResponse defaults) {
            $ = new GenericProtectedItemResponse(Objects.requireNonNull(defaults));
        }

        public Builder backupManagementType(@Nullable String backupManagementType) {
            $.backupManagementType = backupManagementType;
            return this;
        }

        public Builder backupSetName(@Nullable String backupSetName) {
            $.backupSetName = backupSetName;
            return this;
        }

        public Builder containerName(@Nullable String containerName) {
            $.containerName = containerName;
            return this;
        }

        public Builder createMode(@Nullable String createMode) {
            $.createMode = createMode;
            return this;
        }

        public Builder deferredDeleteTimeInUTC(@Nullable String deferredDeleteTimeInUTC) {
            $.deferredDeleteTimeInUTC = deferredDeleteTimeInUTC;
            return this;
        }

        public Builder deferredDeleteTimeRemaining(@Nullable String deferredDeleteTimeRemaining) {
            $.deferredDeleteTimeRemaining = deferredDeleteTimeRemaining;
            return this;
        }

        public Builder fabricName(@Nullable String fabricName) {
            $.fabricName = fabricName;
            return this;
        }

        public Builder friendlyName(@Nullable String friendlyName) {
            $.friendlyName = friendlyName;
            return this;
        }

        public Builder isDeferredDeleteScheduleUpcoming(@Nullable Boolean isDeferredDeleteScheduleUpcoming) {
            $.isDeferredDeleteScheduleUpcoming = isDeferredDeleteScheduleUpcoming;
            return this;
        }

        public Builder isRehydrate(@Nullable Boolean isRehydrate) {
            $.isRehydrate = isRehydrate;
            return this;
        }

        public Builder isScheduledForDeferredDelete(@Nullable Boolean isScheduledForDeferredDelete) {
            $.isScheduledForDeferredDelete = isScheduledForDeferredDelete;
            return this;
        }

        public Builder lastRecoveryPoint(@Nullable String lastRecoveryPoint) {
            $.lastRecoveryPoint = lastRecoveryPoint;
            return this;
        }

        public Builder policyId(@Nullable String policyId) {
            $.policyId = policyId;
            return this;
        }

        public Builder policyState(@Nullable String policyState) {
            $.policyState = policyState;
            return this;
        }

        public Builder protectedItemId(@Nullable Double protectedItemId) {
            $.protectedItemId = protectedItemId;
            return this;
        }

        public Builder protectedItemType(String protectedItemType) {
            $.protectedItemType = protectedItemType;
            return this;
        }

        public Builder protectionState(@Nullable String protectionState) {
            $.protectionState = protectionState;
            return this;
        }

        public Builder sourceAssociations(@Nullable Map<String,String> sourceAssociations) {
            $.sourceAssociations = sourceAssociations;
            return this;
        }

        public Builder sourceResourceId(@Nullable String sourceResourceId) {
            $.sourceResourceId = sourceResourceId;
            return this;
        }

        public Builder workloadType(@Nullable String workloadType) {
            $.workloadType = workloadType;
            return this;
        }

        public GenericProtectedItemResponse build() {
            $.protectedItemType = Codegen.stringProp("protectedItemType").arg($.protectedItemType).require();
            return $;
        }
    }

}
