// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.outputs;

import com.pulumi.azurenative.network.outputs.ApplicationGatewayCustomErrorResponse;
import com.pulumi.azurenative.network.outputs.SubResourceResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ApplicationGatewayHttpListenerResponse {
    /**
     * Custom error configurations of the HTTP listener.
     * 
     */
    private final @Nullable List<ApplicationGatewayCustomErrorResponse> customErrorConfigurations;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     * 
     */
    private final String etag;
    /**
     * Reference to the FirewallPolicy resource.
     * 
     */
    private final @Nullable SubResourceResponse firewallPolicy;
    /**
     * Frontend IP configuration resource of an application gateway.
     * 
     */
    private final @Nullable SubResourceResponse frontendIPConfiguration;
    /**
     * Frontend port resource of an application gateway.
     * 
     */
    private final @Nullable SubResourceResponse frontendPort;
    /**
     * Host name of HTTP listener.
     * 
     */
    private final @Nullable String hostName;
    /**
     * List of Host names for HTTP Listener that allows special wildcard characters as well.
     * 
     */
    private final @Nullable List<String> hostNames;
    /**
     * Resource ID.
     * 
     */
    private final @Nullable String id;
    /**
     * Name of the HTTP listener that is unique within an Application Gateway.
     * 
     */
    private final @Nullable String name;
    /**
     * Protocol of the HTTP listener.
     * 
     */
    private final @Nullable String protocol;
    /**
     * The provisioning state of the HTTP listener resource.
     * 
     */
    private final String provisioningState;
    /**
     * Applicable only if protocol is https. Enables SNI for multi-hosting.
     * 
     */
    private final @Nullable Boolean requireServerNameIndication;
    /**
     * SSL certificate resource of an application gateway.
     * 
     */
    private final @Nullable SubResourceResponse sslCertificate;
    /**
     * SSL profile resource of the application gateway.
     * 
     */
    private final @Nullable SubResourceResponse sslProfile;
    /**
     * Type of the resource.
     * 
     */
    private final String type;

    @CustomType.Constructor
    private ApplicationGatewayHttpListenerResponse(
        @CustomType.Parameter("customErrorConfigurations") @Nullable List<ApplicationGatewayCustomErrorResponse> customErrorConfigurations,
        @CustomType.Parameter("etag") String etag,
        @CustomType.Parameter("firewallPolicy") @Nullable SubResourceResponse firewallPolicy,
        @CustomType.Parameter("frontendIPConfiguration") @Nullable SubResourceResponse frontendIPConfiguration,
        @CustomType.Parameter("frontendPort") @Nullable SubResourceResponse frontendPort,
        @CustomType.Parameter("hostName") @Nullable String hostName,
        @CustomType.Parameter("hostNames") @Nullable List<String> hostNames,
        @CustomType.Parameter("id") @Nullable String id,
        @CustomType.Parameter("name") @Nullable String name,
        @CustomType.Parameter("protocol") @Nullable String protocol,
        @CustomType.Parameter("provisioningState") String provisioningState,
        @CustomType.Parameter("requireServerNameIndication") @Nullable Boolean requireServerNameIndication,
        @CustomType.Parameter("sslCertificate") @Nullable SubResourceResponse sslCertificate,
        @CustomType.Parameter("sslProfile") @Nullable SubResourceResponse sslProfile,
        @CustomType.Parameter("type") String type) {
        this.customErrorConfigurations = customErrorConfigurations;
        this.etag = etag;
        this.firewallPolicy = firewallPolicy;
        this.frontendIPConfiguration = frontendIPConfiguration;
        this.frontendPort = frontendPort;
        this.hostName = hostName;
        this.hostNames = hostNames;
        this.id = id;
        this.name = name;
        this.protocol = protocol;
        this.provisioningState = provisioningState;
        this.requireServerNameIndication = requireServerNameIndication;
        this.sslCertificate = sslCertificate;
        this.sslProfile = sslProfile;
        this.type = type;
    }

    /**
     * Custom error configurations of the HTTP listener.
     * 
    */
    public List<ApplicationGatewayCustomErrorResponse> customErrorConfigurations() {
        return this.customErrorConfigurations == null ? List.of() : this.customErrorConfigurations;
    }
    /**
     * A unique read-only string that changes whenever the resource is updated.
     * 
    */
    public String etag() {
        return this.etag;
    }
    /**
     * Reference to the FirewallPolicy resource.
     * 
    */
    public Optional<SubResourceResponse> firewallPolicy() {
        return Optional.ofNullable(this.firewallPolicy);
    }
    /**
     * Frontend IP configuration resource of an application gateway.
     * 
    */
    public Optional<SubResourceResponse> frontendIPConfiguration() {
        return Optional.ofNullable(this.frontendIPConfiguration);
    }
    /**
     * Frontend port resource of an application gateway.
     * 
    */
    public Optional<SubResourceResponse> frontendPort() {
        return Optional.ofNullable(this.frontendPort);
    }
    /**
     * Host name of HTTP listener.
     * 
    */
    public Optional<String> hostName() {
        return Optional.ofNullable(this.hostName);
    }
    /**
     * List of Host names for HTTP Listener that allows special wildcard characters as well.
     * 
    */
    public List<String> hostNames() {
        return this.hostNames == null ? List.of() : this.hostNames;
    }
    /**
     * Resource ID.
     * 
    */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * Name of the HTTP listener that is unique within an Application Gateway.
     * 
    */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * Protocol of the HTTP listener.
     * 
    */
    public Optional<String> protocol() {
        return Optional.ofNullable(this.protocol);
    }
    /**
     * The provisioning state of the HTTP listener resource.
     * 
    */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * Applicable only if protocol is https. Enables SNI for multi-hosting.
     * 
    */
    public Optional<Boolean> requireServerNameIndication() {
        return Optional.ofNullable(this.requireServerNameIndication);
    }
    /**
     * SSL certificate resource of an application gateway.
     * 
    */
    public Optional<SubResourceResponse> sslCertificate() {
        return Optional.ofNullable(this.sslCertificate);
    }
    /**
     * SSL profile resource of the application gateway.
     * 
    */
    public Optional<SubResourceResponse> sslProfile() {
        return Optional.ofNullable(this.sslProfile);
    }
    /**
     * Type of the resource.
     * 
    */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ApplicationGatewayHttpListenerResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<ApplicationGatewayCustomErrorResponse> customErrorConfigurations;
        private String etag;
        private @Nullable SubResourceResponse firewallPolicy;
        private @Nullable SubResourceResponse frontendIPConfiguration;
        private @Nullable SubResourceResponse frontendPort;
        private @Nullable String hostName;
        private @Nullable List<String> hostNames;
        private @Nullable String id;
        private @Nullable String name;
        private @Nullable String protocol;
        private String provisioningState;
        private @Nullable Boolean requireServerNameIndication;
        private @Nullable SubResourceResponse sslCertificate;
        private @Nullable SubResourceResponse sslProfile;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(ApplicationGatewayHttpListenerResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.customErrorConfigurations = defaults.customErrorConfigurations;
    	      this.etag = defaults.etag;
    	      this.firewallPolicy = defaults.firewallPolicy;
    	      this.frontendIPConfiguration = defaults.frontendIPConfiguration;
    	      this.frontendPort = defaults.frontendPort;
    	      this.hostName = defaults.hostName;
    	      this.hostNames = defaults.hostNames;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.protocol = defaults.protocol;
    	      this.provisioningState = defaults.provisioningState;
    	      this.requireServerNameIndication = defaults.requireServerNameIndication;
    	      this.sslCertificate = defaults.sslCertificate;
    	      this.sslProfile = defaults.sslProfile;
    	      this.type = defaults.type;
        }

        public Builder customErrorConfigurations(@Nullable List<ApplicationGatewayCustomErrorResponse> customErrorConfigurations) {
            this.customErrorConfigurations = customErrorConfigurations;
            return this;
        }
        public Builder customErrorConfigurations(ApplicationGatewayCustomErrorResponse... customErrorConfigurations) {
            return customErrorConfigurations(List.of(customErrorConfigurations));
        }
        public Builder etag(String etag) {
            this.etag = Objects.requireNonNull(etag);
            return this;
        }
        public Builder firewallPolicy(@Nullable SubResourceResponse firewallPolicy) {
            this.firewallPolicy = firewallPolicy;
            return this;
        }
        public Builder frontendIPConfiguration(@Nullable SubResourceResponse frontendIPConfiguration) {
            this.frontendIPConfiguration = frontendIPConfiguration;
            return this;
        }
        public Builder frontendPort(@Nullable SubResourceResponse frontendPort) {
            this.frontendPort = frontendPort;
            return this;
        }
        public Builder hostName(@Nullable String hostName) {
            this.hostName = hostName;
            return this;
        }
        public Builder hostNames(@Nullable List<String> hostNames) {
            this.hostNames = hostNames;
            return this;
        }
        public Builder hostNames(String... hostNames) {
            return hostNames(List.of(hostNames));
        }
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }
        public Builder protocol(@Nullable String protocol) {
            this.protocol = protocol;
            return this;
        }
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        public Builder requireServerNameIndication(@Nullable Boolean requireServerNameIndication) {
            this.requireServerNameIndication = requireServerNameIndication;
            return this;
        }
        public Builder sslCertificate(@Nullable SubResourceResponse sslCertificate) {
            this.sslCertificate = sslCertificate;
            return this;
        }
        public Builder sslProfile(@Nullable SubResourceResponse sslProfile) {
            this.sslProfile = sslProfile;
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }        public ApplicationGatewayHttpListenerResponse build() {
            return new ApplicationGatewayHttpListenerResponse(customErrorConfigurations, etag, firewallPolicy, frontendIPConfiguration, frontendPort, hostName, hostNames, id, name, protocol, provisioningState, requireServerNameIndication, sslCertificate, sslProfile, type);
        }
    }
}
