// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.servicelinker.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;


/**
 * The authentication info when authType is servicePrincipal certificate
 * 
 */
public final class ServicePrincipalCertificateAuthInfoArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServicePrincipalCertificateAuthInfoArgs Empty = new ServicePrincipalCertificateAuthInfoArgs();

    /**
     * The authentication type.
     * Expected value is &#39;servicePrincipalCertificate&#39;.
     * 
     */
    @Import(name="authType", required=true)
    private Output<String> authType;

    public Output<String> authType() {
        return this.authType;
    }

    /**
     * ServicePrincipal certificate for servicePrincipal auth.
     * 
     */
    @Import(name="certificate", required=true)
    private Output<String> certificate;

    public Output<String> certificate() {
        return this.certificate;
    }

    /**
     * Application clientId for servicePrincipal auth.
     * 
     */
    @Import(name="clientId", required=true)
    private Output<String> clientId;

    public Output<String> clientId() {
        return this.clientId;
    }

    /**
     * Principal Id for servicePrincipal auth.
     * 
     */
    @Import(name="principalId", required=true)
    private Output<String> principalId;

    public Output<String> principalId() {
        return this.principalId;
    }

    private ServicePrincipalCertificateAuthInfoArgs() {}

    private ServicePrincipalCertificateAuthInfoArgs(ServicePrincipalCertificateAuthInfoArgs $) {
        this.authType = $.authType;
        this.certificate = $.certificate;
        this.clientId = $.clientId;
        this.principalId = $.principalId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServicePrincipalCertificateAuthInfoArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServicePrincipalCertificateAuthInfoArgs $;

        public Builder() {
            $ = new ServicePrincipalCertificateAuthInfoArgs();
        }

        public Builder(ServicePrincipalCertificateAuthInfoArgs defaults) {
            $ = new ServicePrincipalCertificateAuthInfoArgs(Objects.requireNonNull(defaults));
        }

        public Builder authType(Output<String> authType) {
            $.authType = authType;
            return this;
        }

        public Builder authType(String authType) {
            return authType(Output.of(authType));
        }

        public Builder certificate(Output<String> certificate) {
            $.certificate = certificate;
            return this;
        }

        public Builder certificate(String certificate) {
            return certificate(Output.of(certificate));
        }

        public Builder clientId(Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        public Builder principalId(Output<String> principalId) {
            $.principalId = principalId;
            return this;
        }

        public Builder principalId(String principalId) {
            return principalId(Output.of(principalId));
        }

        public ServicePrincipalCertificateAuthInfoArgs build() {
            $.authType = Codegen.stringProp("authType").output().arg($.authType).require();
            $.certificate = Objects.requireNonNull($.certificate, "expected parameter 'certificate' to be non-null");
            $.clientId = Objects.requireNonNull($.clientId, "expected parameter 'clientId' to be non-null");
            $.principalId = Objects.requireNonNull($.principalId, "expected parameter 'principalId' to be non-null");
            return $;
        }
    }

}
