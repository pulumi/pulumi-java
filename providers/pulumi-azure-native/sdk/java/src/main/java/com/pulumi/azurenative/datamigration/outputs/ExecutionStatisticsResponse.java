// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datamigration.outputs;

import com.pulumi.azurenative.datamigration.outputs.WaitStatisticsResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class ExecutionStatisticsResponse {
    /**
     * @return CPU Time in millisecond(s) for the query execution
     * 
     */
    private final Double cpuTimeMs;
    /**
     * @return Time taken in millisecond(s) for executing the query
     * 
     */
    private final Double elapsedTimeMs;
    /**
     * @return No. of query executions
     * 
     */
    private final Double executionCount;
    /**
     * @return Indicates whether the query resulted in an error
     * 
     */
    private final Boolean hasErrors;
    /**
     * @return List of sql Errors
     * 
     */
    private final List<String> sqlErrors;
    /**
     * @return Dictionary of sql query execution wait types and the respective statistics
     * 
     */
    private final @Nullable Map<String,WaitStatisticsResponse> waitStats;

    @CustomType.Constructor
    private ExecutionStatisticsResponse(
        @CustomType.Parameter("cpuTimeMs") Double cpuTimeMs,
        @CustomType.Parameter("elapsedTimeMs") Double elapsedTimeMs,
        @CustomType.Parameter("executionCount") Double executionCount,
        @CustomType.Parameter("hasErrors") Boolean hasErrors,
        @CustomType.Parameter("sqlErrors") List<String> sqlErrors,
        @CustomType.Parameter("waitStats") @Nullable Map<String,WaitStatisticsResponse> waitStats) {
        this.cpuTimeMs = cpuTimeMs;
        this.elapsedTimeMs = elapsedTimeMs;
        this.executionCount = executionCount;
        this.hasErrors = hasErrors;
        this.sqlErrors = sqlErrors;
        this.waitStats = waitStats;
    }

    /**
     * @return CPU Time in millisecond(s) for the query execution
     * 
     */
    public Double cpuTimeMs() {
        return this.cpuTimeMs;
    }
    /**
     * @return Time taken in millisecond(s) for executing the query
     * 
     */
    public Double elapsedTimeMs() {
        return this.elapsedTimeMs;
    }
    /**
     * @return No. of query executions
     * 
     */
    public Double executionCount() {
        return this.executionCount;
    }
    /**
     * @return Indicates whether the query resulted in an error
     * 
     */
    public Boolean hasErrors() {
        return this.hasErrors;
    }
    /**
     * @return List of sql Errors
     * 
     */
    public List<String> sqlErrors() {
        return this.sqlErrors;
    }
    /**
     * @return Dictionary of sql query execution wait types and the respective statistics
     * 
     */
    public Map<String,WaitStatisticsResponse> waitStats() {
        return this.waitStats == null ? Map.of() : this.waitStats;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ExecutionStatisticsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Double cpuTimeMs;
        private Double elapsedTimeMs;
        private Double executionCount;
        private Boolean hasErrors;
        private List<String> sqlErrors;
        private @Nullable Map<String,WaitStatisticsResponse> waitStats;

        public Builder() {
    	      // Empty
        }

        public Builder(ExecutionStatisticsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cpuTimeMs = defaults.cpuTimeMs;
    	      this.elapsedTimeMs = defaults.elapsedTimeMs;
    	      this.executionCount = defaults.executionCount;
    	      this.hasErrors = defaults.hasErrors;
    	      this.sqlErrors = defaults.sqlErrors;
    	      this.waitStats = defaults.waitStats;
        }

        public Builder cpuTimeMs(Double cpuTimeMs) {
            this.cpuTimeMs = Objects.requireNonNull(cpuTimeMs);
            return this;
        }
        public Builder elapsedTimeMs(Double elapsedTimeMs) {
            this.elapsedTimeMs = Objects.requireNonNull(elapsedTimeMs);
            return this;
        }
        public Builder executionCount(Double executionCount) {
            this.executionCount = Objects.requireNonNull(executionCount);
            return this;
        }
        public Builder hasErrors(Boolean hasErrors) {
            this.hasErrors = Objects.requireNonNull(hasErrors);
            return this;
        }
        public Builder sqlErrors(List<String> sqlErrors) {
            this.sqlErrors = Objects.requireNonNull(sqlErrors);
            return this;
        }
        public Builder sqlErrors(String... sqlErrors) {
            return sqlErrors(List.of(sqlErrors));
        }
        public Builder waitStats(@Nullable Map<String,WaitStatisticsResponse> waitStats) {
            this.waitStats = waitStats;
            return this;
        }        public ExecutionStatisticsResponse build() {
            return new ExecutionStatisticsResponse(cpuTimeMs, elapsedTimeMs, executionCount, hasErrors, sqlErrors, waitStats);
        }
    }
}
