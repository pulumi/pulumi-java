// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.media.outputs;

import com.pulumi.azurenative.media.outputs.AudioAnalyzerPresetResponse;
import com.pulumi.azurenative.media.outputs.BuiltInStandardEncoderPresetResponse;
import com.pulumi.azurenative.media.outputs.FaceDetectorPresetResponse;
import com.pulumi.azurenative.media.outputs.StandardEncoderPresetResponse;
import com.pulumi.azurenative.media.outputs.VideoAnalyzerPresetResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class TransformOutputResponse {
    /**
     * A Transform can define more than one outputs. This property defines what the service should do when one output fails - either continue to produce other outputs, or, stop the other outputs. The overall Job state will not reflect failures of outputs that are specified with 'ContinueJob'. The default is 'StopProcessingJob'.
     * 
     */
    private final @Nullable String onError;
    /**
     * Preset that describes the operations that will be used to modify, transcode, or extract insights from the source file to generate the output.
     * 
     */
    private final Object preset;
    /**
     * Sets the relative priority of the TransformOutputs within a Transform. This sets the priority that the service uses for processing TransformOutputs. The default priority is Normal.
     * 
     */
    private final @Nullable String relativePriority;

    @CustomType.Constructor
    private TransformOutputResponse(
        @CustomType.Parameter("onError") @Nullable String onError,
        @CustomType.Parameter("preset") Object preset,
        @CustomType.Parameter("relativePriority") @Nullable String relativePriority) {
        this.onError = onError;
        this.preset = preset;
        this.relativePriority = relativePriority;
    }

    /**
     * A Transform can define more than one outputs. This property defines what the service should do when one output fails - either continue to produce other outputs, or, stop the other outputs. The overall Job state will not reflect failures of outputs that are specified with 'ContinueJob'. The default is 'StopProcessingJob'.
     * 
    */
    public Optional<String> onError() {
        return Optional.ofNullable(this.onError);
    }
    /**
     * Preset that describes the operations that will be used to modify, transcode, or extract insights from the source file to generate the output.
     * 
    */
    public Object preset() {
        return this.preset;
    }
    /**
     * Sets the relative priority of the TransformOutputs within a Transform. This sets the priority that the service uses for processing TransformOutputs. The default priority is Normal.
     * 
    */
    public Optional<String> relativePriority() {
        return Optional.ofNullable(this.relativePriority);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TransformOutputResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String onError;
        private Object preset;
        private @Nullable String relativePriority;

        public Builder() {
    	      // Empty
        }

        public Builder(TransformOutputResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.onError = defaults.onError;
    	      this.preset = defaults.preset;
    	      this.relativePriority = defaults.relativePriority;
        }

        public Builder onError(@Nullable String onError) {
            this.onError = onError;
            return this;
        }
        public Builder preset(Object preset) {
            this.preset = Objects.requireNonNull(preset);
            return this;
        }
        public Builder relativePriority(@Nullable String relativePriority) {
            this.relativePriority = relativePriority;
            return this;
        }        public TransformOutputResponse build() {
            return new TransformOutputResponse(onError, preset, relativePriority);
        }
    }
}
