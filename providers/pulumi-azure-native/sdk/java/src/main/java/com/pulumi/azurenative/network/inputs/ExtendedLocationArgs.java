// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.azurenative.network.enums.ExtendedLocationTypes;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * ExtendedLocation complex type.
 * 
 */
public final class ExtendedLocationArgs extends com.pulumi.resources.ResourceArgs {

    public static final ExtendedLocationArgs Empty = new ExtendedLocationArgs();

    /**
     * The name of the extended location.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    public Output<String> name() {
        return this.name;
    }

    /**
     * The type of the extended location.
     * 
     */
    @Import(name="type", required=true)
    private Output<Either<String,ExtendedLocationTypes>> type;

    public Output<Either<String,ExtendedLocationTypes>> type() {
        return this.type;
    }

    private ExtendedLocationArgs() {}

    private ExtendedLocationArgs(ExtendedLocationArgs $) {
        this.name = $.name;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExtendedLocationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExtendedLocationArgs $;

        public Builder() {
            $ = new ExtendedLocationArgs();
        }

        public Builder(ExtendedLocationArgs defaults) {
            $ = new ExtendedLocationArgs(Objects.requireNonNull(defaults));
        }

        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder type(Output<Either<String,ExtendedLocationTypes>> type) {
            $.type = type;
            return this;
        }

        public Builder type(Either<String,ExtendedLocationTypes> type) {
            return type(Output.of(type));
        }

        public Builder type(String type) {
            return type(Either.ofLeft(type));
        }

        public Builder type(ExtendedLocationTypes type) {
            return type(Either.ofRight(type));
        }

        public ExtendedLocationArgs build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
