// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.insights.inputs;

import com.pulumi.azurenative.insights.enums.ConditionOperator;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * How the data that is collected should be combined over time.
 * 
 */
public final class ManagementEventAggregationConditionArgs extends com.pulumi.resources.ResourceArgs {

    public static final ManagementEventAggregationConditionArgs Empty = new ManagementEventAggregationConditionArgs();

    /**
     * the condition operator.
     * 
     */
    @Import(name="operator")
    private @Nullable Output<ConditionOperator> operator;

    /**
     * @return the condition operator.
     * 
     */
    public Optional<Output<ConditionOperator>> operator() {
        return Optional.ofNullable(this.operator);
    }

    /**
     * The threshold value that activates the alert.
     * 
     */
    @Import(name="threshold")
    private @Nullable Output<Double> threshold;

    /**
     * @return The threshold value that activates the alert.
     * 
     */
    public Optional<Output<Double>> threshold() {
        return Optional.ofNullable(this.threshold);
    }

    /**
     * the period of time (in ISO 8601 duration format) that is used to monitor alert activity based on the threshold. If specified then it must be between 5 minutes and 1 day.
     * 
     */
    @Import(name="windowSize")
    private @Nullable Output<String> windowSize;

    /**
     * @return the period of time (in ISO 8601 duration format) that is used to monitor alert activity based on the threshold. If specified then it must be between 5 minutes and 1 day.
     * 
     */
    public Optional<Output<String>> windowSize() {
        return Optional.ofNullable(this.windowSize);
    }

    private ManagementEventAggregationConditionArgs() {}

    private ManagementEventAggregationConditionArgs(ManagementEventAggregationConditionArgs $) {
        this.operator = $.operator;
        this.threshold = $.threshold;
        this.windowSize = $.windowSize;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagementEventAggregationConditionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagementEventAggregationConditionArgs $;

        public Builder() {
            $ = new ManagementEventAggregationConditionArgs();
        }

        public Builder(ManagementEventAggregationConditionArgs defaults) {
            $ = new ManagementEventAggregationConditionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param operator the condition operator.
         * 
         * @return builder
         * 
         */
        public Builder operator(@Nullable Output<ConditionOperator> operator) {
            $.operator = operator;
            return this;
        }

        /**
         * @param operator the condition operator.
         * 
         * @return builder
         * 
         */
        public Builder operator(ConditionOperator operator) {
            return operator(Output.of(operator));
        }

        /**
         * @param threshold The threshold value that activates the alert.
         * 
         * @return builder
         * 
         */
        public Builder threshold(@Nullable Output<Double> threshold) {
            $.threshold = threshold;
            return this;
        }

        /**
         * @param threshold The threshold value that activates the alert.
         * 
         * @return builder
         * 
         */
        public Builder threshold(Double threshold) {
            return threshold(Output.of(threshold));
        }

        /**
         * @param windowSize the period of time (in ISO 8601 duration format) that is used to monitor alert activity based on the threshold. If specified then it must be between 5 minutes and 1 day.
         * 
         * @return builder
         * 
         */
        public Builder windowSize(@Nullable Output<String> windowSize) {
            $.windowSize = windowSize;
            return this;
        }

        /**
         * @param windowSize the period of time (in ISO 8601 duration format) that is used to monitor alert activity based on the threshold. If specified then it must be between 5 minutes and 1 day.
         * 
         * @return builder
         * 
         */
        public Builder windowSize(String windowSize) {
            return windowSize(Output.of(windowSize));
        }

        public ManagementEventAggregationConditionArgs build() {
            return $;
        }
    }

}
