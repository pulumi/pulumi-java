// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.redhatopenshift;

import com.pulumi.azurenative.redhatopenshift.inputs.APIServerProfileArgs;
import com.pulumi.azurenative.redhatopenshift.inputs.ClusterProfileArgs;
import com.pulumi.azurenative.redhatopenshift.inputs.ConsoleProfileArgs;
import com.pulumi.azurenative.redhatopenshift.inputs.IngressProfileArgs;
import com.pulumi.azurenative.redhatopenshift.inputs.MasterProfileArgs;
import com.pulumi.azurenative.redhatopenshift.inputs.NetworkProfileArgs;
import com.pulumi.azurenative.redhatopenshift.inputs.ServicePrincipalProfileArgs;
import com.pulumi.azurenative.redhatopenshift.inputs.WorkerProfileArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OpenShiftClusterArgs extends com.pulumi.resources.ResourceArgs {

    public static final OpenShiftClusterArgs Empty = new OpenShiftClusterArgs();

    /**
     * The cluster API server profile.
     * 
     */
    @Import(name="apiserverProfile")
    private @Nullable Output<APIServerProfileArgs> apiserverProfile;

    public Optional<Output<APIServerProfileArgs>> apiserverProfile() {
        return Optional.ofNullable(this.apiserverProfile);
    }

    /**
     * The cluster profile.
     * 
     */
    @Import(name="clusterProfile")
    private @Nullable Output<ClusterProfileArgs> clusterProfile;

    public Optional<Output<ClusterProfileArgs>> clusterProfile() {
        return Optional.ofNullable(this.clusterProfile);
    }

    /**
     * The console profile.
     * 
     */
    @Import(name="consoleProfile")
    private @Nullable Output<ConsoleProfileArgs> consoleProfile;

    public Optional<Output<ConsoleProfileArgs>> consoleProfile() {
        return Optional.ofNullable(this.consoleProfile);
    }

    /**
     * The cluster ingress profiles.
     * 
     */
    @Import(name="ingressProfiles")
    private @Nullable Output<List<IngressProfileArgs>> ingressProfiles;

    public Optional<Output<List<IngressProfileArgs>>> ingressProfiles() {
        return Optional.ofNullable(this.ingressProfiles);
    }

    /**
     * The geo-location where the resource lives
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The cluster master profile.
     * 
     */
    @Import(name="masterProfile")
    private @Nullable Output<MasterProfileArgs> masterProfile;

    public Optional<Output<MasterProfileArgs>> masterProfile() {
        return Optional.ofNullable(this.masterProfile);
    }

    /**
     * The cluster network profile.
     * 
     */
    @Import(name="networkProfile")
    private @Nullable Output<NetworkProfileArgs> networkProfile;

    public Optional<Output<NetworkProfileArgs>> networkProfile() {
        return Optional.ofNullable(this.networkProfile);
    }

    /**
     * The cluster provisioning state (immutable).
     * 
     */
    @Import(name="provisioningState")
    private @Nullable Output<String> provisioningState;

    public Optional<Output<String>> provisioningState() {
        return Optional.ofNullable(this.provisioningState);
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The name of the OpenShift cluster resource.
     * 
     */
    @Import(name="resourceName")
    private @Nullable Output<String> resourceName;

    public Optional<Output<String>> resourceName() {
        return Optional.ofNullable(this.resourceName);
    }

    /**
     * The cluster service principal profile.
     * 
     */
    @Import(name="servicePrincipalProfile")
    private @Nullable Output<ServicePrincipalProfileArgs> servicePrincipalProfile;

    public Optional<Output<ServicePrincipalProfileArgs>> servicePrincipalProfile() {
        return Optional.ofNullable(this.servicePrincipalProfile);
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The cluster worker profiles.
     * 
     */
    @Import(name="workerProfiles")
    private @Nullable Output<List<WorkerProfileArgs>> workerProfiles;

    public Optional<Output<List<WorkerProfileArgs>>> workerProfiles() {
        return Optional.ofNullable(this.workerProfiles);
    }

    private OpenShiftClusterArgs() {}

    private OpenShiftClusterArgs(OpenShiftClusterArgs $) {
        this.apiserverProfile = $.apiserverProfile;
        this.clusterProfile = $.clusterProfile;
        this.consoleProfile = $.consoleProfile;
        this.ingressProfiles = $.ingressProfiles;
        this.location = $.location;
        this.masterProfile = $.masterProfile;
        this.networkProfile = $.networkProfile;
        this.provisioningState = $.provisioningState;
        this.resourceGroupName = $.resourceGroupName;
        this.resourceName = $.resourceName;
        this.servicePrincipalProfile = $.servicePrincipalProfile;
        this.tags = $.tags;
        this.workerProfiles = $.workerProfiles;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OpenShiftClusterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OpenShiftClusterArgs $;

        public Builder() {
            $ = new OpenShiftClusterArgs();
        }

        public Builder(OpenShiftClusterArgs defaults) {
            $ = new OpenShiftClusterArgs(Objects.requireNonNull(defaults));
        }

        public Builder apiserverProfile(@Nullable Output<APIServerProfileArgs> apiserverProfile) {
            $.apiserverProfile = apiserverProfile;
            return this;
        }

        public Builder apiserverProfile(APIServerProfileArgs apiserverProfile) {
            return apiserverProfile(Output.of(apiserverProfile));
        }

        public Builder clusterProfile(@Nullable Output<ClusterProfileArgs> clusterProfile) {
            $.clusterProfile = clusterProfile;
            return this;
        }

        public Builder clusterProfile(ClusterProfileArgs clusterProfile) {
            return clusterProfile(Output.of(clusterProfile));
        }

        public Builder consoleProfile(@Nullable Output<ConsoleProfileArgs> consoleProfile) {
            $.consoleProfile = consoleProfile;
            return this;
        }

        public Builder consoleProfile(ConsoleProfileArgs consoleProfile) {
            return consoleProfile(Output.of(consoleProfile));
        }

        public Builder ingressProfiles(@Nullable Output<List<IngressProfileArgs>> ingressProfiles) {
            $.ingressProfiles = ingressProfiles;
            return this;
        }

        public Builder ingressProfiles(List<IngressProfileArgs> ingressProfiles) {
            return ingressProfiles(Output.of(ingressProfiles));
        }

        public Builder ingressProfiles(IngressProfileArgs... ingressProfiles) {
            return ingressProfiles(List.of(ingressProfiles));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder masterProfile(@Nullable Output<MasterProfileArgs> masterProfile) {
            $.masterProfile = masterProfile;
            return this;
        }

        public Builder masterProfile(MasterProfileArgs masterProfile) {
            return masterProfile(Output.of(masterProfile));
        }

        public Builder networkProfile(@Nullable Output<NetworkProfileArgs> networkProfile) {
            $.networkProfile = networkProfile;
            return this;
        }

        public Builder networkProfile(NetworkProfileArgs networkProfile) {
            return networkProfile(Output.of(networkProfile));
        }

        public Builder provisioningState(@Nullable Output<String> provisioningState) {
            $.provisioningState = provisioningState;
            return this;
        }

        public Builder provisioningState(String provisioningState) {
            return provisioningState(Output.of(provisioningState));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder resourceName(@Nullable Output<String> resourceName) {
            $.resourceName = resourceName;
            return this;
        }

        public Builder resourceName(String resourceName) {
            return resourceName(Output.of(resourceName));
        }

        public Builder servicePrincipalProfile(@Nullable Output<ServicePrincipalProfileArgs> servicePrincipalProfile) {
            $.servicePrincipalProfile = servicePrincipalProfile;
            return this;
        }

        public Builder servicePrincipalProfile(ServicePrincipalProfileArgs servicePrincipalProfile) {
            return servicePrincipalProfile(Output.of(servicePrincipalProfile));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder workerProfiles(@Nullable Output<List<WorkerProfileArgs>> workerProfiles) {
            $.workerProfiles = workerProfiles;
            return this;
        }

        public Builder workerProfiles(List<WorkerProfileArgs> workerProfiles) {
            return workerProfiles(Output.of(workerProfiles));
        }

        public Builder workerProfiles(WorkerProfileArgs... workerProfiles) {
            return workerProfiles(List.of(workerProfiles));
        }

        public OpenShiftClusterArgs build() {
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
