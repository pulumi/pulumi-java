// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.appconfiguration;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class KeyValueArgs extends com.pulumi.resources.ResourceArgs {

    public static final KeyValueArgs Empty = new KeyValueArgs();

    /**
     * The name of the configuration store.
     * 
     */
    @Import(name="configStoreName", required=true)
    private Output<String> configStoreName;

    public Output<String> configStoreName() {
        return this.configStoreName;
    }

    /**
     * The content type of the key-value&#39;s value.
     * Providing a proper content-type can enable transformations of values when they are retrieved by applications.
     * 
     */
    @Import(name="contentType")
    private @Nullable Output<String> contentType;

    public Optional<Output<String>> contentType() {
        return Optional.ofNullable(this.contentType);
    }

    /**
     * Identifier of key and label combination. Key and label are joined by $ character. Label is optional.
     * 
     */
    @Import(name="keyValueName")
    private @Nullable Output<String> keyValueName;

    public Optional<Output<String>> keyValueName() {
        return Optional.ofNullable(this.keyValueName);
    }

    /**
     * The name of the resource group to which the container registry belongs.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * A dictionary of tags that can help identify what a key-value may be applicable for.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The value of the key-value.
     * 
     */
    @Import(name="value")
    private @Nullable Output<String> value;

    public Optional<Output<String>> value() {
        return Optional.ofNullable(this.value);
    }

    private KeyValueArgs() {}

    private KeyValueArgs(KeyValueArgs $) {
        this.configStoreName = $.configStoreName;
        this.contentType = $.contentType;
        this.keyValueName = $.keyValueName;
        this.resourceGroupName = $.resourceGroupName;
        this.tags = $.tags;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KeyValueArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KeyValueArgs $;

        public Builder() {
            $ = new KeyValueArgs();
        }

        public Builder(KeyValueArgs defaults) {
            $ = new KeyValueArgs(Objects.requireNonNull(defaults));
        }

        public Builder configStoreName(Output<String> configStoreName) {
            $.configStoreName = configStoreName;
            return this;
        }

        public Builder configStoreName(String configStoreName) {
            return configStoreName(Output.of(configStoreName));
        }

        public Builder contentType(@Nullable Output<String> contentType) {
            $.contentType = contentType;
            return this;
        }

        public Builder contentType(String contentType) {
            return contentType(Output.of(contentType));
        }

        public Builder keyValueName(@Nullable Output<String> keyValueName) {
            $.keyValueName = keyValueName;
            return this;
        }

        public Builder keyValueName(String keyValueName) {
            return keyValueName(Output.of(keyValueName));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder value(@Nullable Output<String> value) {
            $.value = value;
            return this;
        }

        public Builder value(String value) {
            return value(Output.of(value));
        }

        public KeyValueArgs build() {
            $.configStoreName = Objects.requireNonNull($.configStoreName, "expected parameter 'configStoreName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
