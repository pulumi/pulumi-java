// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.extendedlocation;

import com.pulumi.azurenative.extendedlocation.enums.HostType;
import com.pulumi.azurenative.extendedlocation.inputs.CustomLocationPropertiesAuthenticationArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CustomLocationArgs extends com.pulumi.resources.ResourceArgs {

    public static final CustomLocationArgs Empty = new CustomLocationArgs();

    /**
     * This is optional input that contains the authentication that should be used to generate the namespace.
     * 
     */
    @Import(name="authentication")
    private @Nullable Output<CustomLocationPropertiesAuthenticationArgs> authentication;

    /**
     * @return This is optional input that contains the authentication that should be used to generate the namespace.
     * 
     */
    public Optional<Output<CustomLocationPropertiesAuthenticationArgs>> authentication() {
        return Optional.ofNullable(this.authentication);
    }

    /**
     * Contains the reference to the add-on that contains charts to deploy CRDs and operators.
     * 
     */
    @Import(name="clusterExtensionIds")
    private @Nullable Output<List<String>> clusterExtensionIds;

    /**
     * @return Contains the reference to the add-on that contains charts to deploy CRDs and operators.
     * 
     */
    public Optional<Output<List<String>>> clusterExtensionIds() {
        return Optional.ofNullable(this.clusterExtensionIds);
    }

    /**
     * Display name for the Custom Locations location.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return Display name for the Custom Locations location.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Connected Cluster or AKS Cluster. The Custom Locations RP will perform a checkAccess API for listAdminCredentials permissions.
     * 
     */
    @Import(name="hostResourceId")
    private @Nullable Output<String> hostResourceId;

    /**
     * @return Connected Cluster or AKS Cluster. The Custom Locations RP will perform a checkAccess API for listAdminCredentials permissions.
     * 
     */
    public Optional<Output<String>> hostResourceId() {
        return Optional.ofNullable(this.hostResourceId);
    }

    /**
     * Type of host the Custom Locations is referencing (Kubernetes, etc...).
     * 
     */
    @Import(name="hostType")
    private @Nullable Output<Either<String,HostType>> hostType;

    /**
     * @return Type of host the Custom Locations is referencing (Kubernetes, etc...).
     * 
     */
    public Optional<Output<Either<String,HostType>>> hostType() {
        return Optional.ofNullable(this.hostType);
    }

    /**
     * The geo-location where the resource lives
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The geo-location where the resource lives
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Kubernetes namespace that will be created on the specified cluster.
     * 
     */
    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    /**
     * @return Kubernetes namespace that will be created on the specified cluster.
     * 
     */
    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * Provisioning State for the Custom Location.
     * 
     */
    @Import(name="provisioningState")
    private @Nullable Output<String> provisioningState;

    /**
     * @return Provisioning State for the Custom Location.
     * 
     */
    public Optional<Output<String>> provisioningState() {
        return Optional.ofNullable(this.provisioningState);
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group. The name is case insensitive.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Custom Locations name.
     * 
     */
    @Import(name="resourceName")
    private @Nullable Output<String> resourceName;

    /**
     * @return Custom Locations name.
     * 
     */
    public Optional<Output<String>> resourceName() {
        return Optional.ofNullable(this.resourceName);
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Resource tags.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private CustomLocationArgs() {}

    private CustomLocationArgs(CustomLocationArgs $) {
        this.authentication = $.authentication;
        this.clusterExtensionIds = $.clusterExtensionIds;
        this.displayName = $.displayName;
        this.hostResourceId = $.hostResourceId;
        this.hostType = $.hostType;
        this.location = $.location;
        this.namespace = $.namespace;
        this.provisioningState = $.provisioningState;
        this.resourceGroupName = $.resourceGroupName;
        this.resourceName = $.resourceName;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CustomLocationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CustomLocationArgs $;

        public Builder() {
            $ = new CustomLocationArgs();
        }

        public Builder(CustomLocationArgs defaults) {
            $ = new CustomLocationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authentication This is optional input that contains the authentication that should be used to generate the namespace.
         * 
         * @return builder
         * 
         */
        public Builder authentication(@Nullable Output<CustomLocationPropertiesAuthenticationArgs> authentication) {
            $.authentication = authentication;
            return this;
        }

        /**
         * @param authentication This is optional input that contains the authentication that should be used to generate the namespace.
         * 
         * @return builder
         * 
         */
        public Builder authentication(CustomLocationPropertiesAuthenticationArgs authentication) {
            return authentication(Output.of(authentication));
        }

        /**
         * @param clusterExtensionIds Contains the reference to the add-on that contains charts to deploy CRDs and operators.
         * 
         * @return builder
         * 
         */
        public Builder clusterExtensionIds(@Nullable Output<List<String>> clusterExtensionIds) {
            $.clusterExtensionIds = clusterExtensionIds;
            return this;
        }

        /**
         * @param clusterExtensionIds Contains the reference to the add-on that contains charts to deploy CRDs and operators.
         * 
         * @return builder
         * 
         */
        public Builder clusterExtensionIds(List<String> clusterExtensionIds) {
            return clusterExtensionIds(Output.of(clusterExtensionIds));
        }

        /**
         * @param clusterExtensionIds Contains the reference to the add-on that contains charts to deploy CRDs and operators.
         * 
         * @return builder
         * 
         */
        public Builder clusterExtensionIds(String... clusterExtensionIds) {
            return clusterExtensionIds(List.of(clusterExtensionIds));
        }

        /**
         * @param displayName Display name for the Custom Locations location.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Display name for the Custom Locations location.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param hostResourceId Connected Cluster or AKS Cluster. The Custom Locations RP will perform a checkAccess API for listAdminCredentials permissions.
         * 
         * @return builder
         * 
         */
        public Builder hostResourceId(@Nullable Output<String> hostResourceId) {
            $.hostResourceId = hostResourceId;
            return this;
        }

        /**
         * @param hostResourceId Connected Cluster or AKS Cluster. The Custom Locations RP will perform a checkAccess API for listAdminCredentials permissions.
         * 
         * @return builder
         * 
         */
        public Builder hostResourceId(String hostResourceId) {
            return hostResourceId(Output.of(hostResourceId));
        }

        /**
         * @param hostType Type of host the Custom Locations is referencing (Kubernetes, etc...).
         * 
         * @return builder
         * 
         */
        public Builder hostType(@Nullable Output<Either<String,HostType>> hostType) {
            $.hostType = hostType;
            return this;
        }

        /**
         * @param hostType Type of host the Custom Locations is referencing (Kubernetes, etc...).
         * 
         * @return builder
         * 
         */
        public Builder hostType(Either<String,HostType> hostType) {
            return hostType(Output.of(hostType));
        }

        /**
         * @param hostType Type of host the Custom Locations is referencing (Kubernetes, etc...).
         * 
         * @return builder
         * 
         */
        public Builder hostType(String hostType) {
            return hostType(Either.ofLeft(hostType));
        }

        /**
         * @param hostType Type of host the Custom Locations is referencing (Kubernetes, etc...).
         * 
         * @return builder
         * 
         */
        public Builder hostType(HostType hostType) {
            return hostType(Either.ofRight(hostType));
        }

        /**
         * @param location The geo-location where the resource lives
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The geo-location where the resource lives
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param namespace Kubernetes namespace that will be created on the specified cluster.
         * 
         * @return builder
         * 
         */
        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        /**
         * @param namespace Kubernetes namespace that will be created on the specified cluster.
         * 
         * @return builder
         * 
         */
        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        /**
         * @param provisioningState Provisioning State for the Custom Location.
         * 
         * @return builder
         * 
         */
        public Builder provisioningState(@Nullable Output<String> provisioningState) {
            $.provisioningState = provisioningState;
            return this;
        }

        /**
         * @param provisioningState Provisioning State for the Custom Location.
         * 
         * @return builder
         * 
         */
        public Builder provisioningState(String provisioningState) {
            return provisioningState(Output.of(provisioningState));
        }

        /**
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param resourceName Custom Locations name.
         * 
         * @return builder
         * 
         */
        public Builder resourceName(@Nullable Output<String> resourceName) {
            $.resourceName = resourceName;
            return this;
        }

        /**
         * @param resourceName Custom Locations name.
         * 
         * @return builder
         * 
         */
        public Builder resourceName(String resourceName) {
            return resourceName(Output.of(resourceName));
        }

        /**
         * @param tags Resource tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Resource tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public CustomLocationArgs build() {
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
