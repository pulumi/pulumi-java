// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.hybridnetwork.inputs;

import com.pulumi.azurenative.hybridnetwork.enums.OperatingSystemTypes;
import com.pulumi.azurenative.hybridnetwork.inputs.VirtualHardDiskArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Specifies information about the operating system disk used by the virtual machine. &lt;br&gt;&lt;br&gt; For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json).
 * 
 */
public final class OsDiskArgs extends com.pulumi.resources.ResourceArgs {

    public static final OsDiskArgs Empty = new OsDiskArgs();

    /**
     * Specifies the size of os disk in gigabytes. This is the fully expanded disk size needed of the VHD image on the ASE. This disk size should be greater than the size of the VHD provided in vhdUri.
     * 
     */
    @Import(name="diskSizeGB")
    private @Nullable Output<Integer> diskSizeGB;

    /**
     * @return Specifies the size of os disk in gigabytes. This is the fully expanded disk size needed of the VHD image on the ASE. This disk size should be greater than the size of the VHD provided in vhdUri.
     * 
     */
    public Optional<Output<Integer>> diskSizeGB() {
        return Optional.ofNullable(this.diskSizeGB);
    }

    /**
     * The VHD name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The VHD name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The OS type.
     * 
     */
    @Import(name="osType")
    private @Nullable Output<Either<String,OperatingSystemTypes>> osType;

    /**
     * @return The OS type.
     * 
     */
    public Optional<Output<Either<String,OperatingSystemTypes>>> osType() {
        return Optional.ofNullable(this.osType);
    }

    /**
     * The virtual hard disk.
     * 
     */
    @Import(name="vhd")
    private @Nullable Output<VirtualHardDiskArgs> vhd;

    /**
     * @return The virtual hard disk.
     * 
     */
    public Optional<Output<VirtualHardDiskArgs>> vhd() {
        return Optional.ofNullable(this.vhd);
    }

    private OsDiskArgs() {}

    private OsDiskArgs(OsDiskArgs $) {
        this.diskSizeGB = $.diskSizeGB;
        this.name = $.name;
        this.osType = $.osType;
        this.vhd = $.vhd;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OsDiskArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OsDiskArgs $;

        public Builder() {
            $ = new OsDiskArgs();
        }

        public Builder(OsDiskArgs defaults) {
            $ = new OsDiskArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param diskSizeGB Specifies the size of os disk in gigabytes. This is the fully expanded disk size needed of the VHD image on the ASE. This disk size should be greater than the size of the VHD provided in vhdUri.
         * 
         * @return builder
         * 
         */
        public Builder diskSizeGB(@Nullable Output<Integer> diskSizeGB) {
            $.diskSizeGB = diskSizeGB;
            return this;
        }

        /**
         * @param diskSizeGB Specifies the size of os disk in gigabytes. This is the fully expanded disk size needed of the VHD image on the ASE. This disk size should be greater than the size of the VHD provided in vhdUri.
         * 
         * @return builder
         * 
         */
        public Builder diskSizeGB(Integer diskSizeGB) {
            return diskSizeGB(Output.of(diskSizeGB));
        }

        /**
         * @param name The VHD name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The VHD name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param osType The OS type.
         * 
         * @return builder
         * 
         */
        public Builder osType(@Nullable Output<Either<String,OperatingSystemTypes>> osType) {
            $.osType = osType;
            return this;
        }

        /**
         * @param osType The OS type.
         * 
         * @return builder
         * 
         */
        public Builder osType(Either<String,OperatingSystemTypes> osType) {
            return osType(Output.of(osType));
        }

        /**
         * @param osType The OS type.
         * 
         * @return builder
         * 
         */
        public Builder osType(String osType) {
            return osType(Either.ofLeft(osType));
        }

        /**
         * @param osType The OS type.
         * 
         * @return builder
         * 
         */
        public Builder osType(OperatingSystemTypes osType) {
            return osType(Either.ofRight(osType));
        }

        /**
         * @param vhd The virtual hard disk.
         * 
         * @return builder
         * 
         */
        public Builder vhd(@Nullable Output<VirtualHardDiskArgs> vhd) {
            $.vhd = vhd;
            return this;
        }

        /**
         * @param vhd The virtual hard disk.
         * 
         * @return builder
         * 
         */
        public Builder vhd(VirtualHardDiskArgs vhd) {
            return vhd(Output.of(vhd));
        }

        public OsDiskArgs build() {
            return $;
        }
    }

}
