// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.azurenative.network.enums.PcProtocol;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Filter that is applied to packet capture request. Multiple filters can be applied.
 * 
 */
public final class PacketCaptureFilterArgs extends com.pulumi.resources.ResourceArgs {

    public static final PacketCaptureFilterArgs Empty = new PacketCaptureFilterArgs();

    /**
     * Local IP Address to be filtered on. Notation: &#34;127.0.0.1&#34; for single address entry. &#34;127.0.0.1-127.0.0.255&#34; for range. &#34;127.0.0.1;127.0.0.5&#34;? for multiple entries. Multiple ranges not currently supported. Mixing ranges with multiple entries not currently supported. Default = null.
     * 
     */
    @Import(name="localIPAddress")
      private final @Nullable Output<String> localIPAddress;

    public Output<String> localIPAddress() {
        return this.localIPAddress == null ? Codegen.empty() : this.localIPAddress;
    }

    /**
     * Local port to be filtered on. Notation: &#34;80&#34; for single port entry.&#34;80-85&#34; for range. &#34;80;443;&#34; for multiple entries. Multiple ranges not currently supported. Mixing ranges with multiple entries not currently supported. Default = null.
     * 
     */
    @Import(name="localPort")
      private final @Nullable Output<String> localPort;

    public Output<String> localPort() {
        return this.localPort == null ? Codegen.empty() : this.localPort;
    }

    /**
     * Protocol to be filtered on.
     * 
     */
    @Import(name="protocol")
      private final @Nullable Output<Either<String,PcProtocol>> protocol;

    public Output<Either<String,PcProtocol>> protocol() {
        return this.protocol == null ? Codegen.empty() : this.protocol;
    }

    /**
     * Local IP Address to be filtered on. Notation: &#34;127.0.0.1&#34; for single address entry. &#34;127.0.0.1-127.0.0.255&#34; for range. &#34;127.0.0.1;127.0.0.5;&#34; for multiple entries. Multiple ranges not currently supported. Mixing ranges with multiple entries not currently supported. Default = null.
     * 
     */
    @Import(name="remoteIPAddress")
      private final @Nullable Output<String> remoteIPAddress;

    public Output<String> remoteIPAddress() {
        return this.remoteIPAddress == null ? Codegen.empty() : this.remoteIPAddress;
    }

    /**
     * Remote port to be filtered on. Notation: &#34;80&#34; for single port entry.&#34;80-85&#34; for range. &#34;80;443;&#34; for multiple entries. Multiple ranges not currently supported. Mixing ranges with multiple entries not currently supported. Default = null.
     * 
     */
    @Import(name="remotePort")
      private final @Nullable Output<String> remotePort;

    public Output<String> remotePort() {
        return this.remotePort == null ? Codegen.empty() : this.remotePort;
    }

    public PacketCaptureFilterArgs(
        @Nullable Output<String> localIPAddress,
        @Nullable Output<String> localPort,
        @Nullable Output<Either<String,PcProtocol>> protocol,
        @Nullable Output<String> remoteIPAddress,
        @Nullable Output<String> remotePort) {
        this.localIPAddress = localIPAddress;
        this.localPort = localPort;
        this.protocol = Codegen.stringProp("protocol").left(PcProtocol.class).output().arg(protocol).def("Any").getNullable();
        this.remoteIPAddress = remoteIPAddress;
        this.remotePort = remotePort;
    }

    private PacketCaptureFilterArgs() {
        this.localIPAddress = Codegen.empty();
        this.localPort = Codegen.empty();
        this.protocol = Codegen.empty();
        this.remoteIPAddress = Codegen.empty();
        this.remotePort = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PacketCaptureFilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> localIPAddress;
        private @Nullable Output<String> localPort;
        private @Nullable Output<Either<String,PcProtocol>> protocol;
        private @Nullable Output<String> remoteIPAddress;
        private @Nullable Output<String> remotePort;

        public Builder() {
    	      // Empty
        }

        public Builder(PacketCaptureFilterArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.localIPAddress = defaults.localIPAddress;
    	      this.localPort = defaults.localPort;
    	      this.protocol = defaults.protocol;
    	      this.remoteIPAddress = defaults.remoteIPAddress;
    	      this.remotePort = defaults.remotePort;
        }

        public Builder localIPAddress(@Nullable Output<String> localIPAddress) {
            this.localIPAddress = localIPAddress;
            return this;
        }
        public Builder localIPAddress(@Nullable String localIPAddress) {
            this.localIPAddress = Codegen.ofNullable(localIPAddress);
            return this;
        }
        public Builder localPort(@Nullable Output<String> localPort) {
            this.localPort = localPort;
            return this;
        }
        public Builder localPort(@Nullable String localPort) {
            this.localPort = Codegen.ofNullable(localPort);
            return this;
        }
        public Builder protocol(@Nullable Output<Either<String,PcProtocol>> protocol) {
            this.protocol = protocol;
            return this;
        }
        public Builder protocol(@Nullable Either<String,PcProtocol> protocol) {
            this.protocol = Codegen.ofNullable(protocol);
            return this;
        }
        public Builder remoteIPAddress(@Nullable Output<String> remoteIPAddress) {
            this.remoteIPAddress = remoteIPAddress;
            return this;
        }
        public Builder remoteIPAddress(@Nullable String remoteIPAddress) {
            this.remoteIPAddress = Codegen.ofNullable(remoteIPAddress);
            return this;
        }
        public Builder remotePort(@Nullable Output<String> remotePort) {
            this.remotePort = remotePort;
            return this;
        }
        public Builder remotePort(@Nullable String remotePort) {
            this.remotePort = Codegen.ofNullable(remotePort);
            return this;
        }        public PacketCaptureFilterArgs build() {
            return new PacketCaptureFilterArgs(localIPAddress, localPort, protocol, remoteIPAddress, remotePort);
        }
    }
}
