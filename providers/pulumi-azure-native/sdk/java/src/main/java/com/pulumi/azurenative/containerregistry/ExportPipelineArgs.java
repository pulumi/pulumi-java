// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.containerregistry;

import com.pulumi.azurenative.containerregistry.enums.PipelineOptions;
import com.pulumi.azurenative.containerregistry.inputs.ExportPipelineTargetPropertiesArgs;
import com.pulumi.azurenative.containerregistry.inputs.IdentityPropertiesArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ExportPipelineArgs extends com.pulumi.resources.ResourceArgs {

    public static final ExportPipelineArgs Empty = new ExportPipelineArgs();

    /**
     * The name of the export pipeline.
     * 
     */
    @Import(name="exportPipelineName")
      private final @Nullable Output<String> exportPipelineName;

    public Output<String> exportPipelineName() {
        return this.exportPipelineName == null ? Codegen.empty() : this.exportPipelineName;
    }

    /**
     * The identity of the export pipeline.
     * 
     */
    @Import(name="identity")
      private final @Nullable Output<IdentityPropertiesArgs> identity;

    public Output<IdentityPropertiesArgs> identity() {
        return this.identity == null ? Codegen.empty() : this.identity;
    }

    /**
     * The location of the export pipeline.
     * 
     */
    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> location() {
        return this.location == null ? Codegen.empty() : this.location;
    }

    /**
     * The list of all options configured for the pipeline.
     * 
     */
    @Import(name="options")
      private final @Nullable Output<List<Either<String,PipelineOptions>>> options;

    public Output<List<Either<String,PipelineOptions>>> options() {
        return this.options == null ? Codegen.empty() : this.options;
    }

    /**
     * The name of the container registry.
     * 
     */
    @Import(name="registryName", required=true)
      private final Output<String> registryName;

    public Output<String> registryName() {
        return this.registryName;
    }

    /**
     * The name of the resource group to which the container registry belongs.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The target properties of the export pipeline.
     * 
     */
    @Import(name="target", required=true)
      private final Output<ExportPipelineTargetPropertiesArgs> target;

    public Output<ExportPipelineTargetPropertiesArgs> target() {
        return this.target;
    }

    public ExportPipelineArgs(
        @Nullable Output<String> exportPipelineName,
        @Nullable Output<IdentityPropertiesArgs> identity,
        @Nullable Output<String> location,
        @Nullable Output<List<Either<String,PipelineOptions>>> options,
        Output<String> registryName,
        Output<String> resourceGroupName,
        Output<ExportPipelineTargetPropertiesArgs> target) {
        this.exportPipelineName = exportPipelineName;
        this.identity = identity;
        this.location = location;
        this.options = options;
        this.registryName = Objects.requireNonNull(registryName, "expected parameter 'registryName' to be non-null");
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.target = Objects.requireNonNull(target, "expected parameter 'target' to be non-null");
    }

    private ExportPipelineArgs() {
        this.exportPipelineName = Codegen.empty();
        this.identity = Codegen.empty();
        this.location = Codegen.empty();
        this.options = Codegen.empty();
        this.registryName = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.target = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ExportPipelineArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> exportPipelineName;
        private @Nullable Output<IdentityPropertiesArgs> identity;
        private @Nullable Output<String> location;
        private @Nullable Output<List<Either<String,PipelineOptions>>> options;
        private Output<String> registryName;
        private Output<String> resourceGroupName;
        private Output<ExportPipelineTargetPropertiesArgs> target;

        public Builder() {
    	      // Empty
        }

        public Builder(ExportPipelineArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.exportPipelineName = defaults.exportPipelineName;
    	      this.identity = defaults.identity;
    	      this.location = defaults.location;
    	      this.options = defaults.options;
    	      this.registryName = defaults.registryName;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.target = defaults.target;
        }

        public Builder exportPipelineName(@Nullable Output<String> exportPipelineName) {
            this.exportPipelineName = exportPipelineName;
            return this;
        }
        public Builder exportPipelineName(@Nullable String exportPipelineName) {
            this.exportPipelineName = Codegen.ofNullable(exportPipelineName);
            return this;
        }
        public Builder identity(@Nullable Output<IdentityPropertiesArgs> identity) {
            this.identity = identity;
            return this;
        }
        public Builder identity(@Nullable IdentityPropertiesArgs identity) {
            this.identity = Codegen.ofNullable(identity);
            return this;
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Codegen.ofNullable(location);
            return this;
        }
        public Builder options(@Nullable Output<List<Either<String,PipelineOptions>>> options) {
            this.options = options;
            return this;
        }
        public Builder options(@Nullable List<Either<String,PipelineOptions>> options) {
            this.options = Codegen.ofNullable(options);
            return this;
        }
        public Builder options(Either<String,PipelineOptions>... options) {
            return options(List.of(options));
        }
        public Builder registryName(Output<String> registryName) {
            this.registryName = Objects.requireNonNull(registryName);
            return this;
        }
        public Builder registryName(String registryName) {
            this.registryName = Output.of(Objects.requireNonNull(registryName));
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder target(Output<ExportPipelineTargetPropertiesArgs> target) {
            this.target = Objects.requireNonNull(target);
            return this;
        }
        public Builder target(ExportPipelineTargetPropertiesArgs target) {
            this.target = Output.of(Objects.requireNonNull(target));
            return this;
        }        public ExportPipelineArgs build() {
            return new ExportPipelineArgs(exportPipelineName, identity, location, options, registryName, resourceGroupName, target);
        }
    }
}
