// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.azurenative.datafactory.inputs.SqlUpsertSettingsArgs;
import com.pulumi.azurenative.datafactory.inputs.StoredProcedureParameterArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A copy activity Azure SQL sink.
 * 
 */
public final class AzureSqlSinkArgs extends com.pulumi.resources.ResourceArgs {

    public static final AzureSqlSinkArgs Empty = new AzureSqlSinkArgs();

    /**
     * If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
     * 
     */
    @Import(name="disableMetricsCollection")
    private @Nullable Output<Object> disableMetricsCollection;

    public Optional<Output<Object>> disableMetricsCollection() {
        return Optional.ofNullable(this.disableMetricsCollection);
    }

    /**
     * The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
     * 
     */
    @Import(name="maxConcurrentConnections")
    private @Nullable Output<Object> maxConcurrentConnections;

    public Optional<Output<Object>> maxConcurrentConnections() {
        return Optional.ofNullable(this.maxConcurrentConnections);
    }

    /**
     * SQL pre-copy script. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="preCopyScript")
    private @Nullable Output<Object> preCopyScript;

    public Optional<Output<Object>> preCopyScript() {
        return Optional.ofNullable(this.preCopyScript);
    }

    /**
     * Sink retry count. Type: integer (or Expression with resultType integer).
     * 
     */
    @Import(name="sinkRetryCount")
    private @Nullable Output<Object> sinkRetryCount;

    public Optional<Output<Object>> sinkRetryCount() {
        return Optional.ofNullable(this.sinkRetryCount);
    }

    /**
     * Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     * 
     */
    @Import(name="sinkRetryWait")
    private @Nullable Output<Object> sinkRetryWait;

    public Optional<Output<Object>> sinkRetryWait() {
        return Optional.ofNullable(this.sinkRetryWait);
    }

    /**
     * SQL writer stored procedure name. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="sqlWriterStoredProcedureName")
    private @Nullable Output<Object> sqlWriterStoredProcedureName;

    public Optional<Output<Object>> sqlWriterStoredProcedureName() {
        return Optional.ofNullable(this.sqlWriterStoredProcedureName);
    }

    /**
     * SQL writer table type. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="sqlWriterTableType")
    private @Nullable Output<Object> sqlWriterTableType;

    public Optional<Output<Object>> sqlWriterTableType() {
        return Optional.ofNullable(this.sqlWriterTableType);
    }

    /**
     * Whether to use table lock during bulk copy. Type: boolean (or Expression with resultType boolean).
     * 
     */
    @Import(name="sqlWriterUseTableLock")
    private @Nullable Output<Object> sqlWriterUseTableLock;

    public Optional<Output<Object>> sqlWriterUseTableLock() {
        return Optional.ofNullable(this.sqlWriterUseTableLock);
    }

    /**
     * SQL stored procedure parameters.
     * 
     */
    @Import(name="storedProcedureParameters")
    private @Nullable Output<Map<String,StoredProcedureParameterArgs>> storedProcedureParameters;

    public Optional<Output<Map<String,StoredProcedureParameterArgs>>> storedProcedureParameters() {
        return Optional.ofNullable(this.storedProcedureParameters);
    }

    /**
     * The stored procedure parameter name of the table type. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="storedProcedureTableTypeParameterName")
    private @Nullable Output<Object> storedProcedureTableTypeParameterName;

    public Optional<Output<Object>> storedProcedureTableTypeParameterName() {
        return Optional.ofNullable(this.storedProcedureTableTypeParameterName);
    }

    /**
     * The option to handle sink table, such as autoCreate. For now only &#39;autoCreate&#39; value is supported. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="tableOption")
    private @Nullable Output<Object> tableOption;

    public Optional<Output<Object>> tableOption() {
        return Optional.ofNullable(this.tableOption);
    }

    /**
     * Copy sink type.
     * Expected value is &#39;AzureSqlSink&#39;.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    /**
     * SQL upsert settings.
     * 
     */
    @Import(name="upsertSettings")
    private @Nullable Output<SqlUpsertSettingsArgs> upsertSettings;

    public Optional<Output<SqlUpsertSettingsArgs>> upsertSettings() {
        return Optional.ofNullable(this.upsertSettings);
    }

    /**
     * Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
     * 
     */
    @Import(name="writeBatchSize")
    private @Nullable Output<Object> writeBatchSize;

    public Optional<Output<Object>> writeBatchSize() {
        return Optional.ofNullable(this.writeBatchSize);
    }

    /**
     * Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     * 
     */
    @Import(name="writeBatchTimeout")
    private @Nullable Output<Object> writeBatchTimeout;

    public Optional<Output<Object>> writeBatchTimeout() {
        return Optional.ofNullable(this.writeBatchTimeout);
    }

    /**
     * Write behavior when copying data into Azure SQL. Type: SqlWriteBehaviorEnum (or Expression with resultType SqlWriteBehaviorEnum)
     * 
     */
    @Import(name="writeBehavior")
    private @Nullable Output<Object> writeBehavior;

    public Optional<Output<Object>> writeBehavior() {
        return Optional.ofNullable(this.writeBehavior);
    }

    private AzureSqlSinkArgs() {}

    private AzureSqlSinkArgs(AzureSqlSinkArgs $) {
        this.disableMetricsCollection = $.disableMetricsCollection;
        this.maxConcurrentConnections = $.maxConcurrentConnections;
        this.preCopyScript = $.preCopyScript;
        this.sinkRetryCount = $.sinkRetryCount;
        this.sinkRetryWait = $.sinkRetryWait;
        this.sqlWriterStoredProcedureName = $.sqlWriterStoredProcedureName;
        this.sqlWriterTableType = $.sqlWriterTableType;
        this.sqlWriterUseTableLock = $.sqlWriterUseTableLock;
        this.storedProcedureParameters = $.storedProcedureParameters;
        this.storedProcedureTableTypeParameterName = $.storedProcedureTableTypeParameterName;
        this.tableOption = $.tableOption;
        this.type = $.type;
        this.upsertSettings = $.upsertSettings;
        this.writeBatchSize = $.writeBatchSize;
        this.writeBatchTimeout = $.writeBatchTimeout;
        this.writeBehavior = $.writeBehavior;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AzureSqlSinkArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AzureSqlSinkArgs $;

        public Builder() {
            $ = new AzureSqlSinkArgs();
        }

        public Builder(AzureSqlSinkArgs defaults) {
            $ = new AzureSqlSinkArgs(Objects.requireNonNull(defaults));
        }

        public Builder disableMetricsCollection(@Nullable Output<Object> disableMetricsCollection) {
            $.disableMetricsCollection = disableMetricsCollection;
            return this;
        }

        public Builder disableMetricsCollection(Object disableMetricsCollection) {
            return disableMetricsCollection(Output.of(disableMetricsCollection));
        }

        public Builder maxConcurrentConnections(@Nullable Output<Object> maxConcurrentConnections) {
            $.maxConcurrentConnections = maxConcurrentConnections;
            return this;
        }

        public Builder maxConcurrentConnections(Object maxConcurrentConnections) {
            return maxConcurrentConnections(Output.of(maxConcurrentConnections));
        }

        public Builder preCopyScript(@Nullable Output<Object> preCopyScript) {
            $.preCopyScript = preCopyScript;
            return this;
        }

        public Builder preCopyScript(Object preCopyScript) {
            return preCopyScript(Output.of(preCopyScript));
        }

        public Builder sinkRetryCount(@Nullable Output<Object> sinkRetryCount) {
            $.sinkRetryCount = sinkRetryCount;
            return this;
        }

        public Builder sinkRetryCount(Object sinkRetryCount) {
            return sinkRetryCount(Output.of(sinkRetryCount));
        }

        public Builder sinkRetryWait(@Nullable Output<Object> sinkRetryWait) {
            $.sinkRetryWait = sinkRetryWait;
            return this;
        }

        public Builder sinkRetryWait(Object sinkRetryWait) {
            return sinkRetryWait(Output.of(sinkRetryWait));
        }

        public Builder sqlWriterStoredProcedureName(@Nullable Output<Object> sqlWriterStoredProcedureName) {
            $.sqlWriterStoredProcedureName = sqlWriterStoredProcedureName;
            return this;
        }

        public Builder sqlWriterStoredProcedureName(Object sqlWriterStoredProcedureName) {
            return sqlWriterStoredProcedureName(Output.of(sqlWriterStoredProcedureName));
        }

        public Builder sqlWriterTableType(@Nullable Output<Object> sqlWriterTableType) {
            $.sqlWriterTableType = sqlWriterTableType;
            return this;
        }

        public Builder sqlWriterTableType(Object sqlWriterTableType) {
            return sqlWriterTableType(Output.of(sqlWriterTableType));
        }

        public Builder sqlWriterUseTableLock(@Nullable Output<Object> sqlWriterUseTableLock) {
            $.sqlWriterUseTableLock = sqlWriterUseTableLock;
            return this;
        }

        public Builder sqlWriterUseTableLock(Object sqlWriterUseTableLock) {
            return sqlWriterUseTableLock(Output.of(sqlWriterUseTableLock));
        }

        public Builder storedProcedureParameters(@Nullable Output<Map<String,StoredProcedureParameterArgs>> storedProcedureParameters) {
            $.storedProcedureParameters = storedProcedureParameters;
            return this;
        }

        public Builder storedProcedureParameters(Map<String,StoredProcedureParameterArgs> storedProcedureParameters) {
            return storedProcedureParameters(Output.of(storedProcedureParameters));
        }

        public Builder storedProcedureTableTypeParameterName(@Nullable Output<Object> storedProcedureTableTypeParameterName) {
            $.storedProcedureTableTypeParameterName = storedProcedureTableTypeParameterName;
            return this;
        }

        public Builder storedProcedureTableTypeParameterName(Object storedProcedureTableTypeParameterName) {
            return storedProcedureTableTypeParameterName(Output.of(storedProcedureTableTypeParameterName));
        }

        public Builder tableOption(@Nullable Output<Object> tableOption) {
            $.tableOption = tableOption;
            return this;
        }

        public Builder tableOption(Object tableOption) {
            return tableOption(Output.of(tableOption));
        }

        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public Builder upsertSettings(@Nullable Output<SqlUpsertSettingsArgs> upsertSettings) {
            $.upsertSettings = upsertSettings;
            return this;
        }

        public Builder upsertSettings(SqlUpsertSettingsArgs upsertSettings) {
            return upsertSettings(Output.of(upsertSettings));
        }

        public Builder writeBatchSize(@Nullable Output<Object> writeBatchSize) {
            $.writeBatchSize = writeBatchSize;
            return this;
        }

        public Builder writeBatchSize(Object writeBatchSize) {
            return writeBatchSize(Output.of(writeBatchSize));
        }

        public Builder writeBatchTimeout(@Nullable Output<Object> writeBatchTimeout) {
            $.writeBatchTimeout = writeBatchTimeout;
            return this;
        }

        public Builder writeBatchTimeout(Object writeBatchTimeout) {
            return writeBatchTimeout(Output.of(writeBatchTimeout));
        }

        public Builder writeBehavior(@Nullable Output<Object> writeBehavior) {
            $.writeBehavior = writeBehavior;
            return this;
        }

        public Builder writeBehavior(Object writeBehavior) {
            return writeBehavior(Output.of(writeBehavior));
        }

        public AzureSqlSinkArgs build() {
            $.type = Codegen.stringProp("type").output().arg($.type).require();
            return $;
        }
    }

}
