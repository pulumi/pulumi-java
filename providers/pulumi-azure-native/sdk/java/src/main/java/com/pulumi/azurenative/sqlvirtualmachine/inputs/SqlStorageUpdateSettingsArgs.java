// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.sqlvirtualmachine.inputs;

import com.pulumi.azurenative.sqlvirtualmachine.enums.DiskConfigurationType;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Set disk storage settings for SQL Server.
 * 
 */
public final class SqlStorageUpdateSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final SqlStorageUpdateSettingsArgs Empty = new SqlStorageUpdateSettingsArgs();

    /**
     * Disk configuration to apply to SQL Server.
     * 
     */
    @Import(name="diskConfigurationType")
    private @Nullable Output<Either<String,DiskConfigurationType>> diskConfigurationType;

    /**
     * @return Disk configuration to apply to SQL Server.
     * 
     */
    public Optional<Output<Either<String,DiskConfigurationType>>> diskConfigurationType() {
        return Optional.ofNullable(this.diskConfigurationType);
    }

    /**
     * Virtual machine disk count.
     * 
     */
    @Import(name="diskCount")
    private @Nullable Output<Integer> diskCount;

    /**
     * @return Virtual machine disk count.
     * 
     */
    public Optional<Output<Integer>> diskCount() {
        return Optional.ofNullable(this.diskCount);
    }

    /**
     * Device id of the first disk to be updated.
     * 
     */
    @Import(name="startingDeviceId")
    private @Nullable Output<Integer> startingDeviceId;

    /**
     * @return Device id of the first disk to be updated.
     * 
     */
    public Optional<Output<Integer>> startingDeviceId() {
        return Optional.ofNullable(this.startingDeviceId);
    }

    private SqlStorageUpdateSettingsArgs() {}

    private SqlStorageUpdateSettingsArgs(SqlStorageUpdateSettingsArgs $) {
        this.diskConfigurationType = $.diskConfigurationType;
        this.diskCount = $.diskCount;
        this.startingDeviceId = $.startingDeviceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SqlStorageUpdateSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SqlStorageUpdateSettingsArgs $;

        public Builder() {
            $ = new SqlStorageUpdateSettingsArgs();
        }

        public Builder(SqlStorageUpdateSettingsArgs defaults) {
            $ = new SqlStorageUpdateSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param diskConfigurationType Disk configuration to apply to SQL Server.
         * 
         * @return builder
         * 
         */
        public Builder diskConfigurationType(@Nullable Output<Either<String,DiskConfigurationType>> diskConfigurationType) {
            $.diskConfigurationType = diskConfigurationType;
            return this;
        }

        /**
         * @param diskConfigurationType Disk configuration to apply to SQL Server.
         * 
         * @return builder
         * 
         */
        public Builder diskConfigurationType(Either<String,DiskConfigurationType> diskConfigurationType) {
            return diskConfigurationType(Output.of(diskConfigurationType));
        }

        /**
         * @param diskConfigurationType Disk configuration to apply to SQL Server.
         * 
         * @return builder
         * 
         */
        public Builder diskConfigurationType(String diskConfigurationType) {
            return diskConfigurationType(Either.ofLeft(diskConfigurationType));
        }

        /**
         * @param diskConfigurationType Disk configuration to apply to SQL Server.
         * 
         * @return builder
         * 
         */
        public Builder diskConfigurationType(DiskConfigurationType diskConfigurationType) {
            return diskConfigurationType(Either.ofRight(diskConfigurationType));
        }

        /**
         * @param diskCount Virtual machine disk count.
         * 
         * @return builder
         * 
         */
        public Builder diskCount(@Nullable Output<Integer> diskCount) {
            $.diskCount = diskCount;
            return this;
        }

        /**
         * @param diskCount Virtual machine disk count.
         * 
         * @return builder
         * 
         */
        public Builder diskCount(Integer diskCount) {
            return diskCount(Output.of(diskCount));
        }

        /**
         * @param startingDeviceId Device id of the first disk to be updated.
         * 
         * @return builder
         * 
         */
        public Builder startingDeviceId(@Nullable Output<Integer> startingDeviceId) {
            $.startingDeviceId = startingDeviceId;
            return this;
        }

        /**
         * @param startingDeviceId Device id of the first disk to be updated.
         * 
         * @return builder
         * 
         */
        public Builder startingDeviceId(Integer startingDeviceId) {
            return startingDeviceId(Output.of(startingDeviceId));
        }

        public SqlStorageUpdateSettingsArgs build() {
            return $;
        }
    }

}
