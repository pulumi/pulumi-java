// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.eventgrid.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Information about the partner.
 * 
 */
public final class PartnerArgs extends com.pulumi.resources.ResourceArgs {

    public static final PartnerArgs Empty = new PartnerArgs();

    /**
     * Expiration time of the partner authorization. If this timer expires, any request from this partner to create, update or delete resources in subscriber&#39;s
     * context will fail. If specified, the allowed values are between 1 to the value of defaultMaximumExpirationTimeInDays specified in PartnerConfiguration.
     * If not specified, the default value will be the value of defaultMaximumExpirationTimeInDays specified in PartnerConfiguration or 7 if this value is not specified.
     * 
     */
    @Import(name="authorizationExpirationTimeInUtc")
    private @Nullable Output<String> authorizationExpirationTimeInUtc;

    /**
     * @return Expiration time of the partner authorization. If this timer expires, any request from this partner to create, update or delete resources in subscriber&#39;s
     * context will fail. If specified, the allowed values are between 1 to the value of defaultMaximumExpirationTimeInDays specified in PartnerConfiguration.
     * If not specified, the default value will be the value of defaultMaximumExpirationTimeInDays specified in PartnerConfiguration or 7 if this value is not specified.
     * 
     */
    public Optional<Output<String>> authorizationExpirationTimeInUtc() {
        return Optional.ofNullable(this.authorizationExpirationTimeInUtc);
    }

    /**
     * The partner name.
     * 
     */
    @Import(name="partnerName")
    private @Nullable Output<String> partnerName;

    /**
     * @return The partner name.
     * 
     */
    public Optional<Output<String>> partnerName() {
        return Optional.ofNullable(this.partnerName);
    }

    /**
     * The immutableId of the corresponding partner registration.
     * 
     */
    @Import(name="partnerRegistrationImmutableId")
    private @Nullable Output<String> partnerRegistrationImmutableId;

    /**
     * @return The immutableId of the corresponding partner registration.
     * 
     */
    public Optional<Output<String>> partnerRegistrationImmutableId() {
        return Optional.ofNullable(this.partnerRegistrationImmutableId);
    }

    private PartnerArgs() {}

    private PartnerArgs(PartnerArgs $) {
        this.authorizationExpirationTimeInUtc = $.authorizationExpirationTimeInUtc;
        this.partnerName = $.partnerName;
        this.partnerRegistrationImmutableId = $.partnerRegistrationImmutableId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PartnerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PartnerArgs $;

        public Builder() {
            $ = new PartnerArgs();
        }

        public Builder(PartnerArgs defaults) {
            $ = new PartnerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authorizationExpirationTimeInUtc Expiration time of the partner authorization. If this timer expires, any request from this partner to create, update or delete resources in subscriber&#39;s
         * context will fail. If specified, the allowed values are between 1 to the value of defaultMaximumExpirationTimeInDays specified in PartnerConfiguration.
         * If not specified, the default value will be the value of defaultMaximumExpirationTimeInDays specified in PartnerConfiguration or 7 if this value is not specified.
         * 
         * @return builder
         * 
         */
        public Builder authorizationExpirationTimeInUtc(@Nullable Output<String> authorizationExpirationTimeInUtc) {
            $.authorizationExpirationTimeInUtc = authorizationExpirationTimeInUtc;
            return this;
        }

        /**
         * @param authorizationExpirationTimeInUtc Expiration time of the partner authorization. If this timer expires, any request from this partner to create, update or delete resources in subscriber&#39;s
         * context will fail. If specified, the allowed values are between 1 to the value of defaultMaximumExpirationTimeInDays specified in PartnerConfiguration.
         * If not specified, the default value will be the value of defaultMaximumExpirationTimeInDays specified in PartnerConfiguration or 7 if this value is not specified.
         * 
         * @return builder
         * 
         */
        public Builder authorizationExpirationTimeInUtc(String authorizationExpirationTimeInUtc) {
            return authorizationExpirationTimeInUtc(Output.of(authorizationExpirationTimeInUtc));
        }

        /**
         * @param partnerName The partner name.
         * 
         * @return builder
         * 
         */
        public Builder partnerName(@Nullable Output<String> partnerName) {
            $.partnerName = partnerName;
            return this;
        }

        /**
         * @param partnerName The partner name.
         * 
         * @return builder
         * 
         */
        public Builder partnerName(String partnerName) {
            return partnerName(Output.of(partnerName));
        }

        /**
         * @param partnerRegistrationImmutableId The immutableId of the corresponding partner registration.
         * 
         * @return builder
         * 
         */
        public Builder partnerRegistrationImmutableId(@Nullable Output<String> partnerRegistrationImmutableId) {
            $.partnerRegistrationImmutableId = partnerRegistrationImmutableId;
            return this;
        }

        /**
         * @param partnerRegistrationImmutableId The immutableId of the corresponding partner registration.
         * 
         * @return builder
         * 
         */
        public Builder partnerRegistrationImmutableId(String partnerRegistrationImmutableId) {
            return partnerRegistrationImmutableId(Output.of(partnerRegistrationImmutableId));
        }

        public PartnerArgs build() {
            return $;
        }
    }

}
