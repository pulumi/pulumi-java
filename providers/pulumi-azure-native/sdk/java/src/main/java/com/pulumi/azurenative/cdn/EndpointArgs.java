// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.cdn;

import com.pulumi.azurenative.cdn.enums.OptimizationType;
import com.pulumi.azurenative.cdn.enums.QueryStringCachingBehavior;
import com.pulumi.azurenative.cdn.inputs.DeepCreatedOriginArgs;
import com.pulumi.azurenative.cdn.inputs.DeepCreatedOriginGroupArgs;
import com.pulumi.azurenative.cdn.inputs.EndpointPropertiesUpdateParametersDeliveryPolicyArgs;
import com.pulumi.azurenative.cdn.inputs.EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLinkArgs;
import com.pulumi.azurenative.cdn.inputs.GeoFilterArgs;
import com.pulumi.azurenative.cdn.inputs.ResourceReferenceArgs;
import com.pulumi.azurenative.cdn.inputs.UrlSigningKeyArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EndpointArgs extends com.pulumi.resources.ResourceArgs {

    public static final EndpointArgs Empty = new EndpointArgs();

    /**
     * List of content types on which compression applies. The value should be a valid MIME type.
     * 
     */
    @Import(name="contentTypesToCompress")
    private @Nullable Output<List<String>> contentTypesToCompress;

    public Optional<Output<List<String>>> contentTypesToCompress() {
        return Optional.ofNullable(this.contentTypesToCompress);
    }

    /**
     * A reference to the origin group.
     * 
     */
    @Import(name="defaultOriginGroup")
    private @Nullable Output<ResourceReferenceArgs> defaultOriginGroup;

    public Optional<Output<ResourceReferenceArgs>> defaultOriginGroup() {
        return Optional.ofNullable(this.defaultOriginGroup);
    }

    /**
     * A policy that specifies the delivery rules to be used for an endpoint.
     * 
     */
    @Import(name="deliveryPolicy")
    private @Nullable Output<EndpointPropertiesUpdateParametersDeliveryPolicyArgs> deliveryPolicy;

    public Optional<Output<EndpointPropertiesUpdateParametersDeliveryPolicyArgs>> deliveryPolicy() {
        return Optional.ofNullable(this.deliveryPolicy);
    }

    /**
     * Name of the endpoint under the profile which is unique globally.
     * 
     */
    @Import(name="endpointName")
    private @Nullable Output<String> endpointName;

    public Optional<Output<String>> endpointName() {
        return Optional.ofNullable(this.endpointName);
    }

    /**
     * List of rules defining the user&#39;s geo access within a CDN endpoint. Each geo filter defines an access rule to a specified path or content, e.g. block APAC for path /pictures/
     * 
     */
    @Import(name="geoFilters")
    private @Nullable Output<List<GeoFilterArgs>> geoFilters;

    public Optional<Output<List<GeoFilterArgs>>> geoFilters() {
        return Optional.ofNullable(this.geoFilters);
    }

    /**
     * Indicates whether content compression is enabled on CDN. Default value is false. If compression is enabled, content will be served as compressed if user requests for a compressed version. Content won&#39;t be compressed on CDN when requested content is smaller than 1 byte or larger than 1 MB.
     * 
     */
    @Import(name="isCompressionEnabled")
    private @Nullable Output<Boolean> isCompressionEnabled;

    public Optional<Output<Boolean>> isCompressionEnabled() {
        return Optional.ofNullable(this.isCompressionEnabled);
    }

    /**
     * Indicates whether HTTP traffic is allowed on the endpoint. Default value is true. At least one protocol (HTTP or HTTPS) must be allowed.
     * 
     */
    @Import(name="isHttpAllowed")
    private @Nullable Output<Boolean> isHttpAllowed;

    public Optional<Output<Boolean>> isHttpAllowed() {
        return Optional.ofNullable(this.isHttpAllowed);
    }

    /**
     * Indicates whether HTTPS traffic is allowed on the endpoint. Default value is true. At least one protocol (HTTP or HTTPS) must be allowed.
     * 
     */
    @Import(name="isHttpsAllowed")
    private @Nullable Output<Boolean> isHttpsAllowed;

    public Optional<Output<Boolean>> isHttpsAllowed() {
        return Optional.ofNullable(this.isHttpsAllowed);
    }

    /**
     * Resource location.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Specifies what scenario the customer wants this CDN endpoint to optimize for, e.g. Download, Media services. With this information, CDN can apply scenario driven optimization.
     * 
     */
    @Import(name="optimizationType")
    private @Nullable Output<Either<String,OptimizationType>> optimizationType;

    public Optional<Output<Either<String,OptimizationType>>> optimizationType() {
        return Optional.ofNullable(this.optimizationType);
    }

    /**
     * The origin groups comprising of origins that are used for load balancing the traffic based on availability.
     * 
     */
    @Import(name="originGroups")
    private @Nullable Output<List<DeepCreatedOriginGroupArgs>> originGroups;

    public Optional<Output<List<DeepCreatedOriginGroupArgs>>> originGroups() {
        return Optional.ofNullable(this.originGroups);
    }

    /**
     * The host header value sent to the origin with each request. This property at Endpoint is only allowed when endpoint uses single origin and can be overridden by the same property specified at origin.If you leave this blank, the request hostname determines this value. Azure CDN origins, such as Web Apps, Blob Storage, and Cloud Services require this host header value to match the origin hostname by default.
     * 
     */
    @Import(name="originHostHeader")
    private @Nullable Output<String> originHostHeader;

    public Optional<Output<String>> originHostHeader() {
        return Optional.ofNullable(this.originHostHeader);
    }

    /**
     * A directory path on the origin that CDN can use to retrieve content from, e.g. contoso.cloudapp.net/originpath.
     * 
     */
    @Import(name="originPath")
    private @Nullable Output<String> originPath;

    public Optional<Output<String>> originPath() {
        return Optional.ofNullable(this.originPath);
    }

    /**
     * The source of the content being delivered via CDN.
     * 
     */
    @Import(name="origins", required=true)
    private Output<List<DeepCreatedOriginArgs>> origins;

    public Output<List<DeepCreatedOriginArgs>> origins() {
        return this.origins;
    }

    /**
     * Path to a file hosted on the origin which helps accelerate delivery of the dynamic content and calculate the most optimal routes for the CDN. This is relative to the origin path. This property is only relevant when using a single origin.
     * 
     */
    @Import(name="probePath")
    private @Nullable Output<String> probePath;

    public Optional<Output<String>> probePath() {
        return Optional.ofNullable(this.probePath);
    }

    /**
     * Name of the CDN profile which is unique within the resource group.
     * 
     */
    @Import(name="profileName", required=true)
    private Output<String> profileName;

    public Output<String> profileName() {
        return this.profileName;
    }

    /**
     * Defines how CDN caches requests that include query strings. You can ignore any query strings when caching, bypass caching to prevent requests that contain query strings from being cached, or cache every request with a unique URL.
     * 
     */
    @Import(name="queryStringCachingBehavior")
    private @Nullable Output<QueryStringCachingBehavior> queryStringCachingBehavior;

    public Optional<Output<QueryStringCachingBehavior>> queryStringCachingBehavior() {
        return Optional.ofNullable(this.queryStringCachingBehavior);
    }

    /**
     * Name of the Resource group within the Azure subscription.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * List of keys used to validate the signed URL hashes.
     * 
     */
    @Import(name="urlSigningKeys")
    private @Nullable Output<List<UrlSigningKeyArgs>> urlSigningKeys;

    public Optional<Output<List<UrlSigningKeyArgs>>> urlSigningKeys() {
        return Optional.ofNullable(this.urlSigningKeys);
    }

    /**
     * Defines the Web Application Firewall policy for the endpoint (if applicable)
     * 
     */
    @Import(name="webApplicationFirewallPolicyLink")
    private @Nullable Output<EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLinkArgs> webApplicationFirewallPolicyLink;

    public Optional<Output<EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLinkArgs>> webApplicationFirewallPolicyLink() {
        return Optional.ofNullable(this.webApplicationFirewallPolicyLink);
    }

    private EndpointArgs() {}

    private EndpointArgs(EndpointArgs $) {
        this.contentTypesToCompress = $.contentTypesToCompress;
        this.defaultOriginGroup = $.defaultOriginGroup;
        this.deliveryPolicy = $.deliveryPolicy;
        this.endpointName = $.endpointName;
        this.geoFilters = $.geoFilters;
        this.isCompressionEnabled = $.isCompressionEnabled;
        this.isHttpAllowed = $.isHttpAllowed;
        this.isHttpsAllowed = $.isHttpsAllowed;
        this.location = $.location;
        this.optimizationType = $.optimizationType;
        this.originGroups = $.originGroups;
        this.originHostHeader = $.originHostHeader;
        this.originPath = $.originPath;
        this.origins = $.origins;
        this.probePath = $.probePath;
        this.profileName = $.profileName;
        this.queryStringCachingBehavior = $.queryStringCachingBehavior;
        this.resourceGroupName = $.resourceGroupName;
        this.tags = $.tags;
        this.urlSigningKeys = $.urlSigningKeys;
        this.webApplicationFirewallPolicyLink = $.webApplicationFirewallPolicyLink;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EndpointArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EndpointArgs $;

        public Builder() {
            $ = new EndpointArgs();
        }

        public Builder(EndpointArgs defaults) {
            $ = new EndpointArgs(Objects.requireNonNull(defaults));
        }

        public Builder contentTypesToCompress(@Nullable Output<List<String>> contentTypesToCompress) {
            $.contentTypesToCompress = contentTypesToCompress;
            return this;
        }

        public Builder contentTypesToCompress(List<String> contentTypesToCompress) {
            return contentTypesToCompress(Output.of(contentTypesToCompress));
        }

        public Builder contentTypesToCompress(String... contentTypesToCompress) {
            return contentTypesToCompress(List.of(contentTypesToCompress));
        }

        public Builder defaultOriginGroup(@Nullable Output<ResourceReferenceArgs> defaultOriginGroup) {
            $.defaultOriginGroup = defaultOriginGroup;
            return this;
        }

        public Builder defaultOriginGroup(ResourceReferenceArgs defaultOriginGroup) {
            return defaultOriginGroup(Output.of(defaultOriginGroup));
        }

        public Builder deliveryPolicy(@Nullable Output<EndpointPropertiesUpdateParametersDeliveryPolicyArgs> deliveryPolicy) {
            $.deliveryPolicy = deliveryPolicy;
            return this;
        }

        public Builder deliveryPolicy(EndpointPropertiesUpdateParametersDeliveryPolicyArgs deliveryPolicy) {
            return deliveryPolicy(Output.of(deliveryPolicy));
        }

        public Builder endpointName(@Nullable Output<String> endpointName) {
            $.endpointName = endpointName;
            return this;
        }

        public Builder endpointName(String endpointName) {
            return endpointName(Output.of(endpointName));
        }

        public Builder geoFilters(@Nullable Output<List<GeoFilterArgs>> geoFilters) {
            $.geoFilters = geoFilters;
            return this;
        }

        public Builder geoFilters(List<GeoFilterArgs> geoFilters) {
            return geoFilters(Output.of(geoFilters));
        }

        public Builder geoFilters(GeoFilterArgs... geoFilters) {
            return geoFilters(List.of(geoFilters));
        }

        public Builder isCompressionEnabled(@Nullable Output<Boolean> isCompressionEnabled) {
            $.isCompressionEnabled = isCompressionEnabled;
            return this;
        }

        public Builder isCompressionEnabled(Boolean isCompressionEnabled) {
            return isCompressionEnabled(Output.of(isCompressionEnabled));
        }

        public Builder isHttpAllowed(@Nullable Output<Boolean> isHttpAllowed) {
            $.isHttpAllowed = isHttpAllowed;
            return this;
        }

        public Builder isHttpAllowed(Boolean isHttpAllowed) {
            return isHttpAllowed(Output.of(isHttpAllowed));
        }

        public Builder isHttpsAllowed(@Nullable Output<Boolean> isHttpsAllowed) {
            $.isHttpsAllowed = isHttpsAllowed;
            return this;
        }

        public Builder isHttpsAllowed(Boolean isHttpsAllowed) {
            return isHttpsAllowed(Output.of(isHttpsAllowed));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder optimizationType(@Nullable Output<Either<String,OptimizationType>> optimizationType) {
            $.optimizationType = optimizationType;
            return this;
        }

        public Builder optimizationType(Either<String,OptimizationType> optimizationType) {
            return optimizationType(Output.of(optimizationType));
        }

        public Builder originGroups(@Nullable Output<List<DeepCreatedOriginGroupArgs>> originGroups) {
            $.originGroups = originGroups;
            return this;
        }

        public Builder originGroups(List<DeepCreatedOriginGroupArgs> originGroups) {
            return originGroups(Output.of(originGroups));
        }

        public Builder originGroups(DeepCreatedOriginGroupArgs... originGroups) {
            return originGroups(List.of(originGroups));
        }

        public Builder originHostHeader(@Nullable Output<String> originHostHeader) {
            $.originHostHeader = originHostHeader;
            return this;
        }

        public Builder originHostHeader(String originHostHeader) {
            return originHostHeader(Output.of(originHostHeader));
        }

        public Builder originPath(@Nullable Output<String> originPath) {
            $.originPath = originPath;
            return this;
        }

        public Builder originPath(String originPath) {
            return originPath(Output.of(originPath));
        }

        public Builder origins(Output<List<DeepCreatedOriginArgs>> origins) {
            $.origins = origins;
            return this;
        }

        public Builder origins(List<DeepCreatedOriginArgs> origins) {
            return origins(Output.of(origins));
        }

        public Builder origins(DeepCreatedOriginArgs... origins) {
            return origins(List.of(origins));
        }

        public Builder probePath(@Nullable Output<String> probePath) {
            $.probePath = probePath;
            return this;
        }

        public Builder probePath(String probePath) {
            return probePath(Output.of(probePath));
        }

        public Builder profileName(Output<String> profileName) {
            $.profileName = profileName;
            return this;
        }

        public Builder profileName(String profileName) {
            return profileName(Output.of(profileName));
        }

        public Builder queryStringCachingBehavior(@Nullable Output<QueryStringCachingBehavior> queryStringCachingBehavior) {
            $.queryStringCachingBehavior = queryStringCachingBehavior;
            return this;
        }

        public Builder queryStringCachingBehavior(QueryStringCachingBehavior queryStringCachingBehavior) {
            return queryStringCachingBehavior(Output.of(queryStringCachingBehavior));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder urlSigningKeys(@Nullable Output<List<UrlSigningKeyArgs>> urlSigningKeys) {
            $.urlSigningKeys = urlSigningKeys;
            return this;
        }

        public Builder urlSigningKeys(List<UrlSigningKeyArgs> urlSigningKeys) {
            return urlSigningKeys(Output.of(urlSigningKeys));
        }

        public Builder urlSigningKeys(UrlSigningKeyArgs... urlSigningKeys) {
            return urlSigningKeys(List.of(urlSigningKeys));
        }

        public Builder webApplicationFirewallPolicyLink(@Nullable Output<EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLinkArgs> webApplicationFirewallPolicyLink) {
            $.webApplicationFirewallPolicyLink = webApplicationFirewallPolicyLink;
            return this;
        }

        public Builder webApplicationFirewallPolicyLink(EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLinkArgs webApplicationFirewallPolicyLink) {
            return webApplicationFirewallPolicyLink(Output.of(webApplicationFirewallPolicyLink));
        }

        public EndpointArgs build() {
            $.origins = Objects.requireNonNull($.origins, "expected parameter 'origins' to be non-null");
            $.profileName = Objects.requireNonNull($.profileName, "expected parameter 'profileName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
