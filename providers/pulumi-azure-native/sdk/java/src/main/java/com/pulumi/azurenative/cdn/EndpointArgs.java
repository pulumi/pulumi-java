// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.cdn;

import com.pulumi.azurenative.cdn.enums.OptimizationType;
import com.pulumi.azurenative.cdn.enums.QueryStringCachingBehavior;
import com.pulumi.azurenative.cdn.inputs.DeepCreatedOriginArgs;
import com.pulumi.azurenative.cdn.inputs.DeepCreatedOriginGroupArgs;
import com.pulumi.azurenative.cdn.inputs.EndpointPropertiesUpdateParametersDeliveryPolicyArgs;
import com.pulumi.azurenative.cdn.inputs.EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLinkArgs;
import com.pulumi.azurenative.cdn.inputs.GeoFilterArgs;
import com.pulumi.azurenative.cdn.inputs.ResourceReferenceArgs;
import com.pulumi.azurenative.cdn.inputs.UrlSigningKeyArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class EndpointArgs extends com.pulumi.resources.ResourceArgs {

    public static final EndpointArgs Empty = new EndpointArgs();

    /**
     * List of content types on which compression applies. The value should be a valid MIME type.
     * 
     */
    @Import(name="contentTypesToCompress")
      private final @Nullable Output<List<String>> contentTypesToCompress;

    public Output<List<String>> contentTypesToCompress() {
        return this.contentTypesToCompress == null ? Codegen.empty() : this.contentTypesToCompress;
    }

    /**
     * A reference to the origin group.
     * 
     */
    @Import(name="defaultOriginGroup")
      private final @Nullable Output<ResourceReferenceArgs> defaultOriginGroup;

    public Output<ResourceReferenceArgs> defaultOriginGroup() {
        return this.defaultOriginGroup == null ? Codegen.empty() : this.defaultOriginGroup;
    }

    /**
     * A policy that specifies the delivery rules to be used for an endpoint.
     * 
     */
    @Import(name="deliveryPolicy")
      private final @Nullable Output<EndpointPropertiesUpdateParametersDeliveryPolicyArgs> deliveryPolicy;

    public Output<EndpointPropertiesUpdateParametersDeliveryPolicyArgs> deliveryPolicy() {
        return this.deliveryPolicy == null ? Codegen.empty() : this.deliveryPolicy;
    }

    /**
     * Name of the endpoint under the profile which is unique globally.
     * 
     */
    @Import(name="endpointName")
      private final @Nullable Output<String> endpointName;

    public Output<String> endpointName() {
        return this.endpointName == null ? Codegen.empty() : this.endpointName;
    }

    /**
     * List of rules defining the user&#39;s geo access within a CDN endpoint. Each geo filter defines an access rule to a specified path or content, e.g. block APAC for path /pictures/
     * 
     */
    @Import(name="geoFilters")
      private final @Nullable Output<List<GeoFilterArgs>> geoFilters;

    public Output<List<GeoFilterArgs>> geoFilters() {
        return this.geoFilters == null ? Codegen.empty() : this.geoFilters;
    }

    /**
     * Indicates whether content compression is enabled on CDN. Default value is false. If compression is enabled, content will be served as compressed if user requests for a compressed version. Content won&#39;t be compressed on CDN when requested content is smaller than 1 byte or larger than 1 MB.
     * 
     */
    @Import(name="isCompressionEnabled")
      private final @Nullable Output<Boolean> isCompressionEnabled;

    public Output<Boolean> isCompressionEnabled() {
        return this.isCompressionEnabled == null ? Codegen.empty() : this.isCompressionEnabled;
    }

    /**
     * Indicates whether HTTP traffic is allowed on the endpoint. Default value is true. At least one protocol (HTTP or HTTPS) must be allowed.
     * 
     */
    @Import(name="isHttpAllowed")
      private final @Nullable Output<Boolean> isHttpAllowed;

    public Output<Boolean> isHttpAllowed() {
        return this.isHttpAllowed == null ? Codegen.empty() : this.isHttpAllowed;
    }

    /**
     * Indicates whether HTTPS traffic is allowed on the endpoint. Default value is true. At least one protocol (HTTP or HTTPS) must be allowed.
     * 
     */
    @Import(name="isHttpsAllowed")
      private final @Nullable Output<Boolean> isHttpsAllowed;

    public Output<Boolean> isHttpsAllowed() {
        return this.isHttpsAllowed == null ? Codegen.empty() : this.isHttpsAllowed;
    }

    /**
     * Resource location.
     * 
     */
    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> location() {
        return this.location == null ? Codegen.empty() : this.location;
    }

    /**
     * Specifies what scenario the customer wants this CDN endpoint to optimize for, e.g. Download, Media services. With this information, CDN can apply scenario driven optimization.
     * 
     */
    @Import(name="optimizationType")
      private final @Nullable Output<Either<String,OptimizationType>> optimizationType;

    public Output<Either<String,OptimizationType>> optimizationType() {
        return this.optimizationType == null ? Codegen.empty() : this.optimizationType;
    }

    /**
     * The origin groups comprising of origins that are used for load balancing the traffic based on availability.
     * 
     */
    @Import(name="originGroups")
      private final @Nullable Output<List<DeepCreatedOriginGroupArgs>> originGroups;

    public Output<List<DeepCreatedOriginGroupArgs>> originGroups() {
        return this.originGroups == null ? Codegen.empty() : this.originGroups;
    }

    /**
     * The host header value sent to the origin with each request. This property at Endpoint is only allowed when endpoint uses single origin and can be overridden by the same property specified at origin.If you leave this blank, the request hostname determines this value. Azure CDN origins, such as Web Apps, Blob Storage, and Cloud Services require this host header value to match the origin hostname by default.
     * 
     */
    @Import(name="originHostHeader")
      private final @Nullable Output<String> originHostHeader;

    public Output<String> originHostHeader() {
        return this.originHostHeader == null ? Codegen.empty() : this.originHostHeader;
    }

    /**
     * A directory path on the origin that CDN can use to retrieve content from, e.g. contoso.cloudapp.net/originpath.
     * 
     */
    @Import(name="originPath")
      private final @Nullable Output<String> originPath;

    public Output<String> originPath() {
        return this.originPath == null ? Codegen.empty() : this.originPath;
    }

    /**
     * The source of the content being delivered via CDN.
     * 
     */
    @Import(name="origins", required=true)
      private final Output<List<DeepCreatedOriginArgs>> origins;

    public Output<List<DeepCreatedOriginArgs>> origins() {
        return this.origins;
    }

    /**
     * Path to a file hosted on the origin which helps accelerate delivery of the dynamic content and calculate the most optimal routes for the CDN. This is relative to the origin path. This property is only relevant when using a single origin.
     * 
     */
    @Import(name="probePath")
      private final @Nullable Output<String> probePath;

    public Output<String> probePath() {
        return this.probePath == null ? Codegen.empty() : this.probePath;
    }

    /**
     * Name of the CDN profile which is unique within the resource group.
     * 
     */
    @Import(name="profileName", required=true)
      private final Output<String> profileName;

    public Output<String> profileName() {
        return this.profileName;
    }

    /**
     * Defines how CDN caches requests that include query strings. You can ignore any query strings when caching, bypass caching to prevent requests that contain query strings from being cached, or cache every request with a unique URL.
     * 
     */
    @Import(name="queryStringCachingBehavior")
      private final @Nullable Output<QueryStringCachingBehavior> queryStringCachingBehavior;

    public Output<QueryStringCachingBehavior> queryStringCachingBehavior() {
        return this.queryStringCachingBehavior == null ? Codegen.empty() : this.queryStringCachingBehavior;
    }

    /**
     * Name of the Resource group within the Azure subscription.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    /**
     * List of keys used to validate the signed URL hashes.
     * 
     */
    @Import(name="urlSigningKeys")
      private final @Nullable Output<List<UrlSigningKeyArgs>> urlSigningKeys;

    public Output<List<UrlSigningKeyArgs>> urlSigningKeys() {
        return this.urlSigningKeys == null ? Codegen.empty() : this.urlSigningKeys;
    }

    /**
     * Defines the Web Application Firewall policy for the endpoint (if applicable)
     * 
     */
    @Import(name="webApplicationFirewallPolicyLink")
      private final @Nullable Output<EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLinkArgs> webApplicationFirewallPolicyLink;

    public Output<EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLinkArgs> webApplicationFirewallPolicyLink() {
        return this.webApplicationFirewallPolicyLink == null ? Codegen.empty() : this.webApplicationFirewallPolicyLink;
    }

    public EndpointArgs(
        @Nullable Output<List<String>> contentTypesToCompress,
        @Nullable Output<ResourceReferenceArgs> defaultOriginGroup,
        @Nullable Output<EndpointPropertiesUpdateParametersDeliveryPolicyArgs> deliveryPolicy,
        @Nullable Output<String> endpointName,
        @Nullable Output<List<GeoFilterArgs>> geoFilters,
        @Nullable Output<Boolean> isCompressionEnabled,
        @Nullable Output<Boolean> isHttpAllowed,
        @Nullable Output<Boolean> isHttpsAllowed,
        @Nullable Output<String> location,
        @Nullable Output<Either<String,OptimizationType>> optimizationType,
        @Nullable Output<List<DeepCreatedOriginGroupArgs>> originGroups,
        @Nullable Output<String> originHostHeader,
        @Nullable Output<String> originPath,
        Output<List<DeepCreatedOriginArgs>> origins,
        @Nullable Output<String> probePath,
        Output<String> profileName,
        @Nullable Output<QueryStringCachingBehavior> queryStringCachingBehavior,
        Output<String> resourceGroupName,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<List<UrlSigningKeyArgs>> urlSigningKeys,
        @Nullable Output<EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLinkArgs> webApplicationFirewallPolicyLink) {
        this.contentTypesToCompress = contentTypesToCompress;
        this.defaultOriginGroup = defaultOriginGroup;
        this.deliveryPolicy = deliveryPolicy;
        this.endpointName = endpointName;
        this.geoFilters = geoFilters;
        this.isCompressionEnabled = isCompressionEnabled;
        this.isHttpAllowed = isHttpAllowed;
        this.isHttpsAllowed = isHttpsAllowed;
        this.location = location;
        this.optimizationType = optimizationType;
        this.originGroups = originGroups;
        this.originHostHeader = originHostHeader;
        this.originPath = originPath;
        this.origins = Objects.requireNonNull(origins, "expected parameter 'origins' to be non-null");
        this.probePath = probePath;
        this.profileName = Objects.requireNonNull(profileName, "expected parameter 'profileName' to be non-null");
        this.queryStringCachingBehavior = queryStringCachingBehavior;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.tags = tags;
        this.urlSigningKeys = urlSigningKeys;
        this.webApplicationFirewallPolicyLink = webApplicationFirewallPolicyLink;
    }

    private EndpointArgs() {
        this.contentTypesToCompress = Codegen.empty();
        this.defaultOriginGroup = Codegen.empty();
        this.deliveryPolicy = Codegen.empty();
        this.endpointName = Codegen.empty();
        this.geoFilters = Codegen.empty();
        this.isCompressionEnabled = Codegen.empty();
        this.isHttpAllowed = Codegen.empty();
        this.isHttpsAllowed = Codegen.empty();
        this.location = Codegen.empty();
        this.optimizationType = Codegen.empty();
        this.originGroups = Codegen.empty();
        this.originHostHeader = Codegen.empty();
        this.originPath = Codegen.empty();
        this.origins = Codegen.empty();
        this.probePath = Codegen.empty();
        this.profileName = Codegen.empty();
        this.queryStringCachingBehavior = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.tags = Codegen.empty();
        this.urlSigningKeys = Codegen.empty();
        this.webApplicationFirewallPolicyLink = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EndpointArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<String>> contentTypesToCompress;
        private @Nullable Output<ResourceReferenceArgs> defaultOriginGroup;
        private @Nullable Output<EndpointPropertiesUpdateParametersDeliveryPolicyArgs> deliveryPolicy;
        private @Nullable Output<String> endpointName;
        private @Nullable Output<List<GeoFilterArgs>> geoFilters;
        private @Nullable Output<Boolean> isCompressionEnabled;
        private @Nullable Output<Boolean> isHttpAllowed;
        private @Nullable Output<Boolean> isHttpsAllowed;
        private @Nullable Output<String> location;
        private @Nullable Output<Either<String,OptimizationType>> optimizationType;
        private @Nullable Output<List<DeepCreatedOriginGroupArgs>> originGroups;
        private @Nullable Output<String> originHostHeader;
        private @Nullable Output<String> originPath;
        private Output<List<DeepCreatedOriginArgs>> origins;
        private @Nullable Output<String> probePath;
        private Output<String> profileName;
        private @Nullable Output<QueryStringCachingBehavior> queryStringCachingBehavior;
        private Output<String> resourceGroupName;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<List<UrlSigningKeyArgs>> urlSigningKeys;
        private @Nullable Output<EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLinkArgs> webApplicationFirewallPolicyLink;

        public Builder() {
    	      // Empty
        }

        public Builder(EndpointArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.contentTypesToCompress = defaults.contentTypesToCompress;
    	      this.defaultOriginGroup = defaults.defaultOriginGroup;
    	      this.deliveryPolicy = defaults.deliveryPolicy;
    	      this.endpointName = defaults.endpointName;
    	      this.geoFilters = defaults.geoFilters;
    	      this.isCompressionEnabled = defaults.isCompressionEnabled;
    	      this.isHttpAllowed = defaults.isHttpAllowed;
    	      this.isHttpsAllowed = defaults.isHttpsAllowed;
    	      this.location = defaults.location;
    	      this.optimizationType = defaults.optimizationType;
    	      this.originGroups = defaults.originGroups;
    	      this.originHostHeader = defaults.originHostHeader;
    	      this.originPath = defaults.originPath;
    	      this.origins = defaults.origins;
    	      this.probePath = defaults.probePath;
    	      this.profileName = defaults.profileName;
    	      this.queryStringCachingBehavior = defaults.queryStringCachingBehavior;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.tags = defaults.tags;
    	      this.urlSigningKeys = defaults.urlSigningKeys;
    	      this.webApplicationFirewallPolicyLink = defaults.webApplicationFirewallPolicyLink;
        }

        public Builder contentTypesToCompress(@Nullable Output<List<String>> contentTypesToCompress) {
            this.contentTypesToCompress = contentTypesToCompress;
            return this;
        }
        public Builder contentTypesToCompress(@Nullable List<String> contentTypesToCompress) {
            this.contentTypesToCompress = Codegen.ofNullable(contentTypesToCompress);
            return this;
        }
        public Builder contentTypesToCompress(String... contentTypesToCompress) {
            return contentTypesToCompress(List.of(contentTypesToCompress));
        }
        public Builder defaultOriginGroup(@Nullable Output<ResourceReferenceArgs> defaultOriginGroup) {
            this.defaultOriginGroup = defaultOriginGroup;
            return this;
        }
        public Builder defaultOriginGroup(@Nullable ResourceReferenceArgs defaultOriginGroup) {
            this.defaultOriginGroup = Codegen.ofNullable(defaultOriginGroup);
            return this;
        }
        public Builder deliveryPolicy(@Nullable Output<EndpointPropertiesUpdateParametersDeliveryPolicyArgs> deliveryPolicy) {
            this.deliveryPolicy = deliveryPolicy;
            return this;
        }
        public Builder deliveryPolicy(@Nullable EndpointPropertiesUpdateParametersDeliveryPolicyArgs deliveryPolicy) {
            this.deliveryPolicy = Codegen.ofNullable(deliveryPolicy);
            return this;
        }
        public Builder endpointName(@Nullable Output<String> endpointName) {
            this.endpointName = endpointName;
            return this;
        }
        public Builder endpointName(@Nullable String endpointName) {
            this.endpointName = Codegen.ofNullable(endpointName);
            return this;
        }
        public Builder geoFilters(@Nullable Output<List<GeoFilterArgs>> geoFilters) {
            this.geoFilters = geoFilters;
            return this;
        }
        public Builder geoFilters(@Nullable List<GeoFilterArgs> geoFilters) {
            this.geoFilters = Codegen.ofNullable(geoFilters);
            return this;
        }
        public Builder geoFilters(GeoFilterArgs... geoFilters) {
            return geoFilters(List.of(geoFilters));
        }
        public Builder isCompressionEnabled(@Nullable Output<Boolean> isCompressionEnabled) {
            this.isCompressionEnabled = isCompressionEnabled;
            return this;
        }
        public Builder isCompressionEnabled(@Nullable Boolean isCompressionEnabled) {
            this.isCompressionEnabled = Codegen.ofNullable(isCompressionEnabled);
            return this;
        }
        public Builder isHttpAllowed(@Nullable Output<Boolean> isHttpAllowed) {
            this.isHttpAllowed = isHttpAllowed;
            return this;
        }
        public Builder isHttpAllowed(@Nullable Boolean isHttpAllowed) {
            this.isHttpAllowed = Codegen.ofNullable(isHttpAllowed);
            return this;
        }
        public Builder isHttpsAllowed(@Nullable Output<Boolean> isHttpsAllowed) {
            this.isHttpsAllowed = isHttpsAllowed;
            return this;
        }
        public Builder isHttpsAllowed(@Nullable Boolean isHttpsAllowed) {
            this.isHttpsAllowed = Codegen.ofNullable(isHttpsAllowed);
            return this;
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Codegen.ofNullable(location);
            return this;
        }
        public Builder optimizationType(@Nullable Output<Either<String,OptimizationType>> optimizationType) {
            this.optimizationType = optimizationType;
            return this;
        }
        public Builder optimizationType(@Nullable Either<String,OptimizationType> optimizationType) {
            this.optimizationType = Codegen.ofNullable(optimizationType);
            return this;
        }
        public Builder originGroups(@Nullable Output<List<DeepCreatedOriginGroupArgs>> originGroups) {
            this.originGroups = originGroups;
            return this;
        }
        public Builder originGroups(@Nullable List<DeepCreatedOriginGroupArgs> originGroups) {
            this.originGroups = Codegen.ofNullable(originGroups);
            return this;
        }
        public Builder originGroups(DeepCreatedOriginGroupArgs... originGroups) {
            return originGroups(List.of(originGroups));
        }
        public Builder originHostHeader(@Nullable Output<String> originHostHeader) {
            this.originHostHeader = originHostHeader;
            return this;
        }
        public Builder originHostHeader(@Nullable String originHostHeader) {
            this.originHostHeader = Codegen.ofNullable(originHostHeader);
            return this;
        }
        public Builder originPath(@Nullable Output<String> originPath) {
            this.originPath = originPath;
            return this;
        }
        public Builder originPath(@Nullable String originPath) {
            this.originPath = Codegen.ofNullable(originPath);
            return this;
        }
        public Builder origins(Output<List<DeepCreatedOriginArgs>> origins) {
            this.origins = Objects.requireNonNull(origins);
            return this;
        }
        public Builder origins(List<DeepCreatedOriginArgs> origins) {
            this.origins = Output.of(Objects.requireNonNull(origins));
            return this;
        }
        public Builder origins(DeepCreatedOriginArgs... origins) {
            return origins(List.of(origins));
        }
        public Builder probePath(@Nullable Output<String> probePath) {
            this.probePath = probePath;
            return this;
        }
        public Builder probePath(@Nullable String probePath) {
            this.probePath = Codegen.ofNullable(probePath);
            return this;
        }
        public Builder profileName(Output<String> profileName) {
            this.profileName = Objects.requireNonNull(profileName);
            return this;
        }
        public Builder profileName(String profileName) {
            this.profileName = Output.of(Objects.requireNonNull(profileName));
            return this;
        }
        public Builder queryStringCachingBehavior(@Nullable Output<QueryStringCachingBehavior> queryStringCachingBehavior) {
            this.queryStringCachingBehavior = queryStringCachingBehavior;
            return this;
        }
        public Builder queryStringCachingBehavior(@Nullable QueryStringCachingBehavior queryStringCachingBehavior) {
            this.queryStringCachingBehavior = Codegen.ofNullable(queryStringCachingBehavior);
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder urlSigningKeys(@Nullable Output<List<UrlSigningKeyArgs>> urlSigningKeys) {
            this.urlSigningKeys = urlSigningKeys;
            return this;
        }
        public Builder urlSigningKeys(@Nullable List<UrlSigningKeyArgs> urlSigningKeys) {
            this.urlSigningKeys = Codegen.ofNullable(urlSigningKeys);
            return this;
        }
        public Builder urlSigningKeys(UrlSigningKeyArgs... urlSigningKeys) {
            return urlSigningKeys(List.of(urlSigningKeys));
        }
        public Builder webApplicationFirewallPolicyLink(@Nullable Output<EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLinkArgs> webApplicationFirewallPolicyLink) {
            this.webApplicationFirewallPolicyLink = webApplicationFirewallPolicyLink;
            return this;
        }
        public Builder webApplicationFirewallPolicyLink(@Nullable EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLinkArgs webApplicationFirewallPolicyLink) {
            this.webApplicationFirewallPolicyLink = Codegen.ofNullable(webApplicationFirewallPolicyLink);
            return this;
        }        public EndpointArgs build() {
            return new EndpointArgs(contentTypesToCompress, defaultOriginGroup, deliveryPolicy, endpointName, geoFilters, isCompressionEnabled, isHttpAllowed, isHttpsAllowed, location, optimizationType, originGroups, originHostHeader, originPath, origins, probePath, profileName, queryStringCachingBehavior, resourceGroupName, tags, urlSigningKeys, webApplicationFirewallPolicyLink);
        }
    }
}
