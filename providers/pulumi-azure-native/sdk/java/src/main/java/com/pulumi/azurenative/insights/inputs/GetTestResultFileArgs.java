// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.insights.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetTestResultFileArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetTestResultFileArgs Empty = new GetTestResultFileArgs();

    /**
     * The continuation token.
     * 
     */
    @Import(name="continuationToken")
    private @Nullable Output<String> continuationToken;

    /**
     * @return The continuation token.
     * 
     */
    public Optional<Output<String>> continuationToken() {
        return Optional.ofNullable(this.continuationToken);
    }

    /**
     * The format to use when returning the webtest result.
     * 
     */
    @Import(name="downloadAs", required=true)
    private Output<String> downloadAs;

    /**
     * @return The format to use when returning the webtest result.
     * 
     */
    public Output<String> downloadAs() {
        return this.downloadAs;
    }

    /**
     * The location ID where the webtest was physically run.
     * 
     */
    @Import(name="geoLocationId", required=true)
    private Output<String> geoLocationId;

    /**
     * @return The location ID where the webtest was physically run.
     * 
     */
    public Output<String> geoLocationId() {
        return this.geoLocationId;
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group. The name is case insensitive.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The success state criteria for the webtest result.
     * 
     */
    @Import(name="testSuccessfulCriteria")
    private @Nullable Output<Boolean> testSuccessfulCriteria;

    /**
     * @return The success state criteria for the webtest result.
     * 
     */
    public Optional<Output<Boolean>> testSuccessfulCriteria() {
        return Optional.ofNullable(this.testSuccessfulCriteria);
    }

    /**
     * The posix (epoch) time stamp for the webtest result.
     * 
     */
    @Import(name="timeStamp", required=true)
    private Output<Integer> timeStamp;

    /**
     * @return The posix (epoch) time stamp for the webtest result.
     * 
     */
    public Output<Integer> timeStamp() {
        return this.timeStamp;
    }

    /**
     * The name of the Application Insights webtest resource.
     * 
     */
    @Import(name="webTestName", required=true)
    private Output<String> webTestName;

    /**
     * @return The name of the Application Insights webtest resource.
     * 
     */
    public Output<String> webTestName() {
        return this.webTestName;
    }

    private GetTestResultFileArgs() {}

    private GetTestResultFileArgs(GetTestResultFileArgs $) {
        this.continuationToken = $.continuationToken;
        this.downloadAs = $.downloadAs;
        this.geoLocationId = $.geoLocationId;
        this.resourceGroupName = $.resourceGroupName;
        this.testSuccessfulCriteria = $.testSuccessfulCriteria;
        this.timeStamp = $.timeStamp;
        this.webTestName = $.webTestName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetTestResultFileArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetTestResultFileArgs $;

        public Builder() {
            $ = new GetTestResultFileArgs();
        }

        public Builder(GetTestResultFileArgs defaults) {
            $ = new GetTestResultFileArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param continuationToken The continuation token.
         * 
         * @return builder
         * 
         */
        public Builder continuationToken(@Nullable Output<String> continuationToken) {
            $.continuationToken = continuationToken;
            return this;
        }

        /**
         * @param continuationToken The continuation token.
         * 
         * @return builder
         * 
         */
        public Builder continuationToken(String continuationToken) {
            return continuationToken(Output.of(continuationToken));
        }

        /**
         * @param downloadAs The format to use when returning the webtest result.
         * 
         * @return builder
         * 
         */
        public Builder downloadAs(Output<String> downloadAs) {
            $.downloadAs = downloadAs;
            return this;
        }

        /**
         * @param downloadAs The format to use when returning the webtest result.
         * 
         * @return builder
         * 
         */
        public Builder downloadAs(String downloadAs) {
            return downloadAs(Output.of(downloadAs));
        }

        /**
         * @param geoLocationId The location ID where the webtest was physically run.
         * 
         * @return builder
         * 
         */
        public Builder geoLocationId(Output<String> geoLocationId) {
            $.geoLocationId = geoLocationId;
            return this;
        }

        /**
         * @param geoLocationId The location ID where the webtest was physically run.
         * 
         * @return builder
         * 
         */
        public Builder geoLocationId(String geoLocationId) {
            return geoLocationId(Output.of(geoLocationId));
        }

        /**
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param testSuccessfulCriteria The success state criteria for the webtest result.
         * 
         * @return builder
         * 
         */
        public Builder testSuccessfulCriteria(@Nullable Output<Boolean> testSuccessfulCriteria) {
            $.testSuccessfulCriteria = testSuccessfulCriteria;
            return this;
        }

        /**
         * @param testSuccessfulCriteria The success state criteria for the webtest result.
         * 
         * @return builder
         * 
         */
        public Builder testSuccessfulCriteria(Boolean testSuccessfulCriteria) {
            return testSuccessfulCriteria(Output.of(testSuccessfulCriteria));
        }

        /**
         * @param timeStamp The posix (epoch) time stamp for the webtest result.
         * 
         * @return builder
         * 
         */
        public Builder timeStamp(Output<Integer> timeStamp) {
            $.timeStamp = timeStamp;
            return this;
        }

        /**
         * @param timeStamp The posix (epoch) time stamp for the webtest result.
         * 
         * @return builder
         * 
         */
        public Builder timeStamp(Integer timeStamp) {
            return timeStamp(Output.of(timeStamp));
        }

        /**
         * @param webTestName The name of the Application Insights webtest resource.
         * 
         * @return builder
         * 
         */
        public Builder webTestName(Output<String> webTestName) {
            $.webTestName = webTestName;
            return this;
        }

        /**
         * @param webTestName The name of the Application Insights webtest resource.
         * 
         * @return builder
         * 
         */
        public Builder webTestName(String webTestName) {
            return webTestName(Output.of(webTestName));
        }

        public GetTestResultFileArgs build() {
            $.downloadAs = Objects.requireNonNull($.downloadAs, "expected parameter 'downloadAs' to be non-null");
            $.geoLocationId = Objects.requireNonNull($.geoLocationId, "expected parameter 'geoLocationId' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.timeStamp = Objects.requireNonNull($.timeStamp, "expected parameter 'timeStamp' to be non-null");
            $.webTestName = Objects.requireNonNull($.webTestName, "expected parameter 'webTestName' to be non-null");
            return $;
        }
    }

}
