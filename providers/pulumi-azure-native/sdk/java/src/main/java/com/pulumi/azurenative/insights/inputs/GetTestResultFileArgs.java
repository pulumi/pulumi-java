// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.insights.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetTestResultFileArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetTestResultFileArgs Empty = new GetTestResultFileArgs();

    /**
     * The continuation token.
     * 
     */
    @Import(name="continuationToken")
      private final @Nullable String continuationToken;

    public Optional<String> continuationToken() {
        return this.continuationToken == null ? Optional.empty() : Optional.ofNullable(this.continuationToken);
    }

    /**
     * The format to use when returning the webtest result.
     * 
     */
    @Import(name="downloadAs", required=true)
      private final String downloadAs;

    public String downloadAs() {
        return this.downloadAs;
    }

    /**
     * The location ID where the webtest was physically run.
     * 
     */
    @Import(name="geoLocationId", required=true)
      private final String geoLocationId;

    public String geoLocationId() {
        return this.geoLocationId;
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final String resourceGroupName;

    public String resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The success state criteria for the webtest result.
     * 
     */
    @Import(name="testSuccessfulCriteria")
      private final @Nullable Boolean testSuccessfulCriteria;

    public Optional<Boolean> testSuccessfulCriteria() {
        return this.testSuccessfulCriteria == null ? Optional.empty() : Optional.ofNullable(this.testSuccessfulCriteria);
    }

    /**
     * The posix (epoch) time stamp for the webtest result.
     * 
     */
    @Import(name="timeStamp", required=true)
      private final Integer timeStamp;

    public Integer timeStamp() {
        return this.timeStamp;
    }

    /**
     * The name of the Application Insights webtest resource.
     * 
     */
    @Import(name="webTestName", required=true)
      private final String webTestName;

    public String webTestName() {
        return this.webTestName;
    }

    public GetTestResultFileArgs(
        @Nullable String continuationToken,
        String downloadAs,
        String geoLocationId,
        String resourceGroupName,
        @Nullable Boolean testSuccessfulCriteria,
        Integer timeStamp,
        String webTestName) {
        this.continuationToken = continuationToken;
        this.downloadAs = Objects.requireNonNull(downloadAs, "expected parameter 'downloadAs' to be non-null");
        this.geoLocationId = Objects.requireNonNull(geoLocationId, "expected parameter 'geoLocationId' to be non-null");
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.testSuccessfulCriteria = testSuccessfulCriteria;
        this.timeStamp = Objects.requireNonNull(timeStamp, "expected parameter 'timeStamp' to be non-null");
        this.webTestName = Objects.requireNonNull(webTestName, "expected parameter 'webTestName' to be non-null");
    }

    private GetTestResultFileArgs() {
        this.continuationToken = null;
        this.downloadAs = null;
        this.geoLocationId = null;
        this.resourceGroupName = null;
        this.testSuccessfulCriteria = null;
        this.timeStamp = null;
        this.webTestName = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTestResultFileArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String continuationToken;
        private String downloadAs;
        private String geoLocationId;
        private String resourceGroupName;
        private @Nullable Boolean testSuccessfulCriteria;
        private Integer timeStamp;
        private String webTestName;

        public Builder() {
    	      // Empty
        }

        public Builder(GetTestResultFileArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.continuationToken = defaults.continuationToken;
    	      this.downloadAs = defaults.downloadAs;
    	      this.geoLocationId = defaults.geoLocationId;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.testSuccessfulCriteria = defaults.testSuccessfulCriteria;
    	      this.timeStamp = defaults.timeStamp;
    	      this.webTestName = defaults.webTestName;
        }

        public Builder continuationToken(@Nullable String continuationToken) {
            this.continuationToken = continuationToken;
            return this;
        }
        public Builder downloadAs(String downloadAs) {
            this.downloadAs = Objects.requireNonNull(downloadAs);
            return this;
        }
        public Builder geoLocationId(String geoLocationId) {
            this.geoLocationId = Objects.requireNonNull(geoLocationId);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder testSuccessfulCriteria(@Nullable Boolean testSuccessfulCriteria) {
            this.testSuccessfulCriteria = testSuccessfulCriteria;
            return this;
        }
        public Builder timeStamp(Integer timeStamp) {
            this.timeStamp = Objects.requireNonNull(timeStamp);
            return this;
        }
        public Builder webTestName(String webTestName) {
            this.webTestName = Objects.requireNonNull(webTestName);
            return this;
        }        public GetTestResultFileArgs build() {
            return new GetTestResultFileArgs(continuationToken, downloadAs, geoLocationId, resourceGroupName, testSuccessfulCriteria, timeStamp, webTestName);
        }
    }
}
