// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.containerregistry.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The target of the event.
 * 
 */
public final class TargetResponse extends com.pulumi.resources.InvokeArgs {

    public static final TargetResponse Empty = new TargetResponse();

    /**
     * The digest of the content, as defined by the Registry V2 HTTP API Specification.
     * 
     */
    @Import(name="digest")
    private @Nullable String digest;

    /**
     * @return The digest of the content, as defined by the Registry V2 HTTP API Specification.
     * 
     */
    public Optional<String> digest() {
        return Optional.ofNullable(this.digest);
    }

    /**
     * The number of bytes of the content. Same as Size field.
     * 
     */
    @Import(name="length")
    private @Nullable Double length;

    /**
     * @return The number of bytes of the content. Same as Size field.
     * 
     */
    public Optional<Double> length() {
        return Optional.ofNullable(this.length);
    }

    /**
     * The MIME type of the referenced object.
     * 
     */
    @Import(name="mediaType")
    private @Nullable String mediaType;

    /**
     * @return The MIME type of the referenced object.
     * 
     */
    public Optional<String> mediaType() {
        return Optional.ofNullable(this.mediaType);
    }

    /**
     * The name of the artifact.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return The name of the artifact.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The repository name.
     * 
     */
    @Import(name="repository")
    private @Nullable String repository;

    /**
     * @return The repository name.
     * 
     */
    public Optional<String> repository() {
        return Optional.ofNullable(this.repository);
    }

    /**
     * The number of bytes of the content. Same as Length field.
     * 
     */
    @Import(name="size")
    private @Nullable Double size;

    /**
     * @return The number of bytes of the content. Same as Length field.
     * 
     */
    public Optional<Double> size() {
        return Optional.ofNullable(this.size);
    }

    /**
     * The tag name.
     * 
     */
    @Import(name="tag")
    private @Nullable String tag;

    /**
     * @return The tag name.
     * 
     */
    public Optional<String> tag() {
        return Optional.ofNullable(this.tag);
    }

    /**
     * The direct URL to the content.
     * 
     */
    @Import(name="url")
    private @Nullable String url;

    /**
     * @return The direct URL to the content.
     * 
     */
    public Optional<String> url() {
        return Optional.ofNullable(this.url);
    }

    /**
     * The version of the artifact.
     * 
     */
    @Import(name="version")
    private @Nullable String version;

    /**
     * @return The version of the artifact.
     * 
     */
    public Optional<String> version() {
        return Optional.ofNullable(this.version);
    }

    private TargetResponse() {}

    private TargetResponse(TargetResponse $) {
        this.digest = $.digest;
        this.length = $.length;
        this.mediaType = $.mediaType;
        this.name = $.name;
        this.repository = $.repository;
        this.size = $.size;
        this.tag = $.tag;
        this.url = $.url;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TargetResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TargetResponse $;

        public Builder() {
            $ = new TargetResponse();
        }

        public Builder(TargetResponse defaults) {
            $ = new TargetResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param digest The digest of the content, as defined by the Registry V2 HTTP API Specification.
         * 
         * @return builder
         * 
         */
        public Builder digest(@Nullable String digest) {
            $.digest = digest;
            return this;
        }

        /**
         * @param length The number of bytes of the content. Same as Size field.
         * 
         * @return builder
         * 
         */
        public Builder length(@Nullable Double length) {
            $.length = length;
            return this;
        }

        /**
         * @param mediaType The MIME type of the referenced object.
         * 
         * @return builder
         * 
         */
        public Builder mediaType(@Nullable String mediaType) {
            $.mediaType = mediaType;
            return this;
        }

        /**
         * @param name The name of the artifact.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param repository The repository name.
         * 
         * @return builder
         * 
         */
        public Builder repository(@Nullable String repository) {
            $.repository = repository;
            return this;
        }

        /**
         * @param size The number of bytes of the content. Same as Length field.
         * 
         * @return builder
         * 
         */
        public Builder size(@Nullable Double size) {
            $.size = size;
            return this;
        }

        /**
         * @param tag The tag name.
         * 
         * @return builder
         * 
         */
        public Builder tag(@Nullable String tag) {
            $.tag = tag;
            return this;
        }

        /**
         * @param url The direct URL to the content.
         * 
         * @return builder
         * 
         */
        public Builder url(@Nullable String url) {
            $.url = url;
            return this;
        }

        /**
         * @param version The version of the artifact.
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable String version) {
            $.version = version;
            return this;
        }

        public TargetResponse build() {
            return $;
        }
    }

}
