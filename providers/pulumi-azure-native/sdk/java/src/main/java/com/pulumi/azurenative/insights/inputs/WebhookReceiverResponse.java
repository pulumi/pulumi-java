// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.insights.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A webhook receiver.
 * 
 */
public final class WebhookReceiverResponse extends com.pulumi.resources.InvokeArgs {

    public static final WebhookReceiverResponse Empty = new WebhookReceiverResponse();

    /**
     * Indicates the identifier uri for aad auth.
     * 
     */
    @Import(name="identifierUri")
    private @Nullable String identifierUri;

    /**
     * @return Indicates the identifier uri for aad auth.
     * 
     */
    public Optional<String> identifierUri() {
        return Optional.ofNullable(this.identifierUri);
    }

    /**
     * The name of the webhook receiver. Names must be unique across all receivers within an action group.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return The name of the webhook receiver. Names must be unique across all receivers within an action group.
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * Indicates the webhook app object Id for aad auth.
     * 
     */
    @Import(name="objectId")
    private @Nullable String objectId;

    /**
     * @return Indicates the webhook app object Id for aad auth.
     * 
     */
    public Optional<String> objectId() {
        return Optional.ofNullable(this.objectId);
    }

    /**
     * The URI where webhooks should be sent.
     * 
     */
    @Import(name="serviceUri", required=true)
    private String serviceUri;

    /**
     * @return The URI where webhooks should be sent.
     * 
     */
    public String serviceUri() {
        return this.serviceUri;
    }

    /**
     * Indicates the tenant id for aad auth.
     * 
     */
    @Import(name="tenantId")
    private @Nullable String tenantId;

    /**
     * @return Indicates the tenant id for aad auth.
     * 
     */
    public Optional<String> tenantId() {
        return Optional.ofNullable(this.tenantId);
    }

    /**
     * Indicates whether or not use AAD authentication.
     * 
     */
    @Import(name="useAadAuth")
    private @Nullable Boolean useAadAuth;

    /**
     * @return Indicates whether or not use AAD authentication.
     * 
     */
    public Optional<Boolean> useAadAuth() {
        return Optional.ofNullable(this.useAadAuth);
    }

    /**
     * Indicates whether to use common alert schema.
     * 
     */
    @Import(name="useCommonAlertSchema")
    private @Nullable Boolean useCommonAlertSchema;

    /**
     * @return Indicates whether to use common alert schema.
     * 
     */
    public Optional<Boolean> useCommonAlertSchema() {
        return Optional.ofNullable(this.useCommonAlertSchema);
    }

    private WebhookReceiverResponse() {}

    private WebhookReceiverResponse(WebhookReceiverResponse $) {
        this.identifierUri = $.identifierUri;
        this.name = $.name;
        this.objectId = $.objectId;
        this.serviceUri = $.serviceUri;
        this.tenantId = $.tenantId;
        this.useAadAuth = $.useAadAuth;
        this.useCommonAlertSchema = $.useCommonAlertSchema;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WebhookReceiverResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WebhookReceiverResponse $;

        public Builder() {
            $ = new WebhookReceiverResponse();
        }

        public Builder(WebhookReceiverResponse defaults) {
            $ = new WebhookReceiverResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param identifierUri Indicates the identifier uri for aad auth.
         * 
         * @return builder
         * 
         */
        public Builder identifierUri(@Nullable String identifierUri) {
            $.identifierUri = identifierUri;
            return this;
        }

        /**
         * @param name The name of the webhook receiver. Names must be unique across all receivers within an action group.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param objectId Indicates the webhook app object Id for aad auth.
         * 
         * @return builder
         * 
         */
        public Builder objectId(@Nullable String objectId) {
            $.objectId = objectId;
            return this;
        }

        /**
         * @param serviceUri The URI where webhooks should be sent.
         * 
         * @return builder
         * 
         */
        public Builder serviceUri(String serviceUri) {
            $.serviceUri = serviceUri;
            return this;
        }

        /**
         * @param tenantId Indicates the tenant id for aad auth.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(@Nullable String tenantId) {
            $.tenantId = tenantId;
            return this;
        }

        /**
         * @param useAadAuth Indicates whether or not use AAD authentication.
         * 
         * @return builder
         * 
         */
        public Builder useAadAuth(@Nullable Boolean useAadAuth) {
            $.useAadAuth = useAadAuth;
            return this;
        }

        /**
         * @param useCommonAlertSchema Indicates whether to use common alert schema.
         * 
         * @return builder
         * 
         */
        public Builder useCommonAlertSchema(@Nullable Boolean useCommonAlertSchema) {
            $.useCommonAlertSchema = useCommonAlertSchema;
            return this;
        }

        public WebhookReceiverResponse build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.serviceUri = Objects.requireNonNull($.serviceUri, "expected parameter 'serviceUri' to be non-null");
            $.useAadAuth = Codegen.booleanProp("useAadAuth").arg($.useAadAuth).def(false).getNullable();
            $.useCommonAlertSchema = Codegen.booleanProp("useCommonAlertSchema").arg($.useCommonAlertSchema).def(false).getNullable();
            return $;
        }
    }

}
