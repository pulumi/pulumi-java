// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.securityinsights;

import com.pulumi.azurenative.securityinsights.enums.EntityType;
import com.pulumi.azurenative.securityinsights.inputs.ActivityEntityQueriesPropertiesQueryDefinitionsArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ActivityCustomEntityQueryArgs extends com.pulumi.resources.ResourceArgs {

    public static final ActivityCustomEntityQueryArgs Empty = new ActivityCustomEntityQueryArgs();

    /**
     * The entity query content to display in timeline
     * 
     */
    @Import(name="content")
    private @Nullable Output<String> content;

    /**
     * @return The entity query content to display in timeline
     * 
     */
    public Optional<Output<String>> content() {
        return Optional.ofNullable(this.content);
    }

    /**
     * The entity query description
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The entity query description
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Determines whether this activity is enabled or disabled.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Determines whether this activity is enabled or disabled.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The query applied only to entities matching to all filters
     * 
     */
    @Import(name="entitiesFilter")
    private @Nullable Output<Map<String,List<String>>> entitiesFilter;

    /**
     * @return The query applied only to entities matching to all filters
     * 
     */
    public Optional<Output<Map<String,List<String>>>> entitiesFilter() {
        return Optional.ofNullable(this.entitiesFilter);
    }

    /**
     * entity query ID
     * 
     */
    @Import(name="entityQueryId")
    private @Nullable Output<String> entityQueryId;

    /**
     * @return entity query ID
     * 
     */
    public Optional<Output<String>> entityQueryId() {
        return Optional.ofNullable(this.entityQueryId);
    }

    /**
     * The type of the query&#39;s source entity
     * 
     */
    @Import(name="inputEntityType")
    private @Nullable Output<Either<String,EntityType>> inputEntityType;

    /**
     * @return The type of the query&#39;s source entity
     * 
     */
    public Optional<Output<Either<String,EntityType>>> inputEntityType() {
        return Optional.ofNullable(this.inputEntityType);
    }

    /**
     * The kind of the entity query that supports put request.
     * Expected value is &#39;Activity&#39;.
     * 
     */
    @Import(name="kind", required=true)
    private Output<String> kind;

    /**
     * @return The kind of the entity query that supports put request.
     * Expected value is &#39;Activity&#39;.
     * 
     */
    public Output<String> kind() {
        return this.kind;
    }

    /**
     * The namespace of workspaces resource provider- Microsoft.OperationalInsights.
     * 
     */
    @Import(name="operationalInsightsResourceProvider", required=true)
    private Output<String> operationalInsightsResourceProvider;

    /**
     * @return The namespace of workspaces resource provider- Microsoft.OperationalInsights.
     * 
     */
    public Output<String> operationalInsightsResourceProvider() {
        return this.operationalInsightsResourceProvider;
    }

    /**
     * The Activity query definitions
     * 
     */
    @Import(name="queryDefinitions")
    private @Nullable Output<ActivityEntityQueriesPropertiesQueryDefinitionsArgs> queryDefinitions;

    /**
     * @return The Activity query definitions
     * 
     */
    public Optional<Output<ActivityEntityQueriesPropertiesQueryDefinitionsArgs>> queryDefinitions() {
        return Optional.ofNullable(this.queryDefinitions);
    }

    /**
     * List of the fields of the source entity that are required to run the query
     * 
     */
    @Import(name="requiredInputFieldsSets")
    private @Nullable Output<List<List<String>>> requiredInputFieldsSets;

    /**
     * @return List of the fields of the source entity that are required to run the query
     * 
     */
    public Optional<Output<List<List<String>>>> requiredInputFieldsSets() {
        return Optional.ofNullable(this.requiredInputFieldsSets);
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group. The name is case insensitive.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The template id this activity was created from
     * 
     */
    @Import(name="templateName")
    private @Nullable Output<String> templateName;

    /**
     * @return The template id this activity was created from
     * 
     */
    public Optional<Output<String>> templateName() {
        return Optional.ofNullable(this.templateName);
    }

    /**
     * The entity query title
     * 
     */
    @Import(name="title")
    private @Nullable Output<String> title;

    /**
     * @return The entity query title
     * 
     */
    public Optional<Output<String>> title() {
        return Optional.ofNullable(this.title);
    }

    /**
     * The name of the workspace.
     * 
     */
    @Import(name="workspaceName", required=true)
    private Output<String> workspaceName;

    /**
     * @return The name of the workspace.
     * 
     */
    public Output<String> workspaceName() {
        return this.workspaceName;
    }

    private ActivityCustomEntityQueryArgs() {}

    private ActivityCustomEntityQueryArgs(ActivityCustomEntityQueryArgs $) {
        this.content = $.content;
        this.description = $.description;
        this.enabled = $.enabled;
        this.entitiesFilter = $.entitiesFilter;
        this.entityQueryId = $.entityQueryId;
        this.inputEntityType = $.inputEntityType;
        this.kind = $.kind;
        this.operationalInsightsResourceProvider = $.operationalInsightsResourceProvider;
        this.queryDefinitions = $.queryDefinitions;
        this.requiredInputFieldsSets = $.requiredInputFieldsSets;
        this.resourceGroupName = $.resourceGroupName;
        this.templateName = $.templateName;
        this.title = $.title;
        this.workspaceName = $.workspaceName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ActivityCustomEntityQueryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ActivityCustomEntityQueryArgs $;

        public Builder() {
            $ = new ActivityCustomEntityQueryArgs();
        }

        public Builder(ActivityCustomEntityQueryArgs defaults) {
            $ = new ActivityCustomEntityQueryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param content The entity query content to display in timeline
         * 
         * @return builder
         * 
         */
        public Builder content(@Nullable Output<String> content) {
            $.content = content;
            return this;
        }

        /**
         * @param content The entity query content to display in timeline
         * 
         * @return builder
         * 
         */
        public Builder content(String content) {
            return content(Output.of(content));
        }

        /**
         * @param description The entity query description
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The entity query description
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param enabled Determines whether this activity is enabled or disabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Determines whether this activity is enabled or disabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param entitiesFilter The query applied only to entities matching to all filters
         * 
         * @return builder
         * 
         */
        public Builder entitiesFilter(@Nullable Output<Map<String,List<String>>> entitiesFilter) {
            $.entitiesFilter = entitiesFilter;
            return this;
        }

        /**
         * @param entitiesFilter The query applied only to entities matching to all filters
         * 
         * @return builder
         * 
         */
        public Builder entitiesFilter(Map<String,List<String>> entitiesFilter) {
            return entitiesFilter(Output.of(entitiesFilter));
        }

        /**
         * @param entityQueryId entity query ID
         * 
         * @return builder
         * 
         */
        public Builder entityQueryId(@Nullable Output<String> entityQueryId) {
            $.entityQueryId = entityQueryId;
            return this;
        }

        /**
         * @param entityQueryId entity query ID
         * 
         * @return builder
         * 
         */
        public Builder entityQueryId(String entityQueryId) {
            return entityQueryId(Output.of(entityQueryId));
        }

        /**
         * @param inputEntityType The type of the query&#39;s source entity
         * 
         * @return builder
         * 
         */
        public Builder inputEntityType(@Nullable Output<Either<String,EntityType>> inputEntityType) {
            $.inputEntityType = inputEntityType;
            return this;
        }

        /**
         * @param inputEntityType The type of the query&#39;s source entity
         * 
         * @return builder
         * 
         */
        public Builder inputEntityType(Either<String,EntityType> inputEntityType) {
            return inputEntityType(Output.of(inputEntityType));
        }

        /**
         * @param inputEntityType The type of the query&#39;s source entity
         * 
         * @return builder
         * 
         */
        public Builder inputEntityType(String inputEntityType) {
            return inputEntityType(Either.ofLeft(inputEntityType));
        }

        /**
         * @param inputEntityType The type of the query&#39;s source entity
         * 
         * @return builder
         * 
         */
        public Builder inputEntityType(EntityType inputEntityType) {
            return inputEntityType(Either.ofRight(inputEntityType));
        }

        /**
         * @param kind The kind of the entity query that supports put request.
         * Expected value is &#39;Activity&#39;.
         * 
         * @return builder
         * 
         */
        public Builder kind(Output<String> kind) {
            $.kind = kind;
            return this;
        }

        /**
         * @param kind The kind of the entity query that supports put request.
         * Expected value is &#39;Activity&#39;.
         * 
         * @return builder
         * 
         */
        public Builder kind(String kind) {
            return kind(Output.of(kind));
        }

        /**
         * @param operationalInsightsResourceProvider The namespace of workspaces resource provider- Microsoft.OperationalInsights.
         * 
         * @return builder
         * 
         */
        public Builder operationalInsightsResourceProvider(Output<String> operationalInsightsResourceProvider) {
            $.operationalInsightsResourceProvider = operationalInsightsResourceProvider;
            return this;
        }

        /**
         * @param operationalInsightsResourceProvider The namespace of workspaces resource provider- Microsoft.OperationalInsights.
         * 
         * @return builder
         * 
         */
        public Builder operationalInsightsResourceProvider(String operationalInsightsResourceProvider) {
            return operationalInsightsResourceProvider(Output.of(operationalInsightsResourceProvider));
        }

        /**
         * @param queryDefinitions The Activity query definitions
         * 
         * @return builder
         * 
         */
        public Builder queryDefinitions(@Nullable Output<ActivityEntityQueriesPropertiesQueryDefinitionsArgs> queryDefinitions) {
            $.queryDefinitions = queryDefinitions;
            return this;
        }

        /**
         * @param queryDefinitions The Activity query definitions
         * 
         * @return builder
         * 
         */
        public Builder queryDefinitions(ActivityEntityQueriesPropertiesQueryDefinitionsArgs queryDefinitions) {
            return queryDefinitions(Output.of(queryDefinitions));
        }

        /**
         * @param requiredInputFieldsSets List of the fields of the source entity that are required to run the query
         * 
         * @return builder
         * 
         */
        public Builder requiredInputFieldsSets(@Nullable Output<List<List<String>>> requiredInputFieldsSets) {
            $.requiredInputFieldsSets = requiredInputFieldsSets;
            return this;
        }

        /**
         * @param requiredInputFieldsSets List of the fields of the source entity that are required to run the query
         * 
         * @return builder
         * 
         */
        public Builder requiredInputFieldsSets(List<List<String>> requiredInputFieldsSets) {
            return requiredInputFieldsSets(Output.of(requiredInputFieldsSets));
        }

        /**
         * @param requiredInputFieldsSets List of the fields of the source entity that are required to run the query
         * 
         * @return builder
         * 
         */
        public Builder requiredInputFieldsSets(List<String>... requiredInputFieldsSets) {
            return requiredInputFieldsSets(List.of(requiredInputFieldsSets));
        }

        /**
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param templateName The template id this activity was created from
         * 
         * @return builder
         * 
         */
        public Builder templateName(@Nullable Output<String> templateName) {
            $.templateName = templateName;
            return this;
        }

        /**
         * @param templateName The template id this activity was created from
         * 
         * @return builder
         * 
         */
        public Builder templateName(String templateName) {
            return templateName(Output.of(templateName));
        }

        /**
         * @param title The entity query title
         * 
         * @return builder
         * 
         */
        public Builder title(@Nullable Output<String> title) {
            $.title = title;
            return this;
        }

        /**
         * @param title The entity query title
         * 
         * @return builder
         * 
         */
        public Builder title(String title) {
            return title(Output.of(title));
        }

        /**
         * @param workspaceName The name of the workspace.
         * 
         * @return builder
         * 
         */
        public Builder workspaceName(Output<String> workspaceName) {
            $.workspaceName = workspaceName;
            return this;
        }

        /**
         * @param workspaceName The name of the workspace.
         * 
         * @return builder
         * 
         */
        public Builder workspaceName(String workspaceName) {
            return workspaceName(Output.of(workspaceName));
        }

        public ActivityCustomEntityQueryArgs build() {
            $.kind = Codegen.stringProp("kind").output().arg($.kind).require();
            $.operationalInsightsResourceProvider = Objects.requireNonNull($.operationalInsightsResourceProvider, "expected parameter 'operationalInsightsResourceProvider' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.workspaceName = Objects.requireNonNull($.workspaceName, "expected parameter 'workspaceName' to be non-null");
            return $;
        }
    }

}
