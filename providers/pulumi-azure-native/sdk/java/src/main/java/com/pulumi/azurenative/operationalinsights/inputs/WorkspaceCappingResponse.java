// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.operationalinsights.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The daily volume cap for ingestion.
 * 
 */
public final class WorkspaceCappingResponse extends com.pulumi.resources.InvokeArgs {

    public static final WorkspaceCappingResponse Empty = new WorkspaceCappingResponse();

    /**
     * The workspace daily quota for ingestion.
     * 
     */
    @Import(name="dailyQuotaGb")
    private @Nullable Double dailyQuotaGb;

    /**
     * @return The workspace daily quota for ingestion.
     * 
     */
    public Optional<Double> dailyQuotaGb() {
        return Optional.ofNullable(this.dailyQuotaGb);
    }

    /**
     * The status of data ingestion for this workspace.
     * 
     */
    @Import(name="dataIngestionStatus", required=true)
    private String dataIngestionStatus;

    /**
     * @return The status of data ingestion for this workspace.
     * 
     */
    public String dataIngestionStatus() {
        return this.dataIngestionStatus;
    }

    /**
     * The time when the quota will be rest.
     * 
     */
    @Import(name="quotaNextResetTime", required=true)
    private String quotaNextResetTime;

    /**
     * @return The time when the quota will be rest.
     * 
     */
    public String quotaNextResetTime() {
        return this.quotaNextResetTime;
    }

    private WorkspaceCappingResponse() {}

    private WorkspaceCappingResponse(WorkspaceCappingResponse $) {
        this.dailyQuotaGb = $.dailyQuotaGb;
        this.dataIngestionStatus = $.dataIngestionStatus;
        this.quotaNextResetTime = $.quotaNextResetTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkspaceCappingResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkspaceCappingResponse $;

        public Builder() {
            $ = new WorkspaceCappingResponse();
        }

        public Builder(WorkspaceCappingResponse defaults) {
            $ = new WorkspaceCappingResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param dailyQuotaGb The workspace daily quota for ingestion.
         * 
         * @return builder
         * 
         */
        public Builder dailyQuotaGb(@Nullable Double dailyQuotaGb) {
            $.dailyQuotaGb = dailyQuotaGb;
            return this;
        }

        /**
         * @param dataIngestionStatus The status of data ingestion for this workspace.
         * 
         * @return builder
         * 
         */
        public Builder dataIngestionStatus(String dataIngestionStatus) {
            $.dataIngestionStatus = dataIngestionStatus;
            return this;
        }

        /**
         * @param quotaNextResetTime The time when the quota will be rest.
         * 
         * @return builder
         * 
         */
        public Builder quotaNextResetTime(String quotaNextResetTime) {
            $.quotaNextResetTime = quotaNextResetTime;
            return this;
        }

        public WorkspaceCappingResponse build() {
            $.dataIngestionStatus = Objects.requireNonNull($.dataIngestionStatus, "expected parameter 'dataIngestionStatus' to be non-null");
            $.quotaNextResetTime = Objects.requireNonNull($.quotaNextResetTime, "expected parameter 'quotaNextResetTime' to be non-null");
            return $;
        }
    }

}
