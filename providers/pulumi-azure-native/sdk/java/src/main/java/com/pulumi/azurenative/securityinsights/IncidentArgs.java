// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.securityinsights;

import com.pulumi.azurenative.securityinsights.enums.IncidentClassification;
import com.pulumi.azurenative.securityinsights.enums.IncidentClassificationReason;
import com.pulumi.azurenative.securityinsights.enums.IncidentSeverity;
import com.pulumi.azurenative.securityinsights.enums.IncidentStatus;
import com.pulumi.azurenative.securityinsights.inputs.IncidentLabelArgs;
import com.pulumi.azurenative.securityinsights.inputs.IncidentOwnerInfoArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IncidentArgs extends com.pulumi.resources.ResourceArgs {

    public static final IncidentArgs Empty = new IncidentArgs();

    /**
     * The reason the incident was closed
     * 
     */
    @Import(name="classification")
    private @Nullable Output<Either<String,IncidentClassification>> classification;

    public Optional<Output<Either<String,IncidentClassification>>> classification() {
        return Optional.ofNullable(this.classification);
    }

    /**
     * Describes the reason the incident was closed
     * 
     */
    @Import(name="classificationComment")
    private @Nullable Output<String> classificationComment;

    public Optional<Output<String>> classificationComment() {
        return Optional.ofNullable(this.classificationComment);
    }

    /**
     * The classification reason the incident was closed with
     * 
     */
    @Import(name="classificationReason")
    private @Nullable Output<Either<String,IncidentClassificationReason>> classificationReason;

    public Optional<Output<Either<String,IncidentClassificationReason>>> classificationReason() {
        return Optional.ofNullable(this.classificationReason);
    }

    /**
     * The description of the incident
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The time of the first activity in the incident
     * 
     */
    @Import(name="firstActivityTimeUtc")
    private @Nullable Output<String> firstActivityTimeUtc;

    public Optional<Output<String>> firstActivityTimeUtc() {
        return Optional.ofNullable(this.firstActivityTimeUtc);
    }

    /**
     * Incident ID
     * 
     */
    @Import(name="incidentId")
    private @Nullable Output<String> incidentId;

    public Optional<Output<String>> incidentId() {
        return Optional.ofNullable(this.incidentId);
    }

    /**
     * List of labels relevant to this incident
     * 
     */
    @Import(name="labels")
    private @Nullable Output<List<IncidentLabelArgs>> labels;

    public Optional<Output<List<IncidentLabelArgs>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The time of the last activity in the incident
     * 
     */
    @Import(name="lastActivityTimeUtc")
    private @Nullable Output<String> lastActivityTimeUtc;

    public Optional<Output<String>> lastActivityTimeUtc() {
        return Optional.ofNullable(this.lastActivityTimeUtc);
    }

    /**
     * Describes a user that the incident is assigned to
     * 
     */
    @Import(name="owner")
    private @Nullable Output<IncidentOwnerInfoArgs> owner;

    public Optional<Output<IncidentOwnerInfoArgs>> owner() {
        return Optional.ofNullable(this.owner);
    }

    /**
     * The name of the resource group within the user&#39;s subscription. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The severity of the incident
     * 
     */
    @Import(name="severity", required=true)
    private Output<Either<String,IncidentSeverity>> severity;

    public Output<Either<String,IncidentSeverity>> severity() {
        return this.severity;
    }

    /**
     * The status of the incident
     * 
     */
    @Import(name="status", required=true)
    private Output<Either<String,IncidentStatus>> status;

    public Output<Either<String,IncidentStatus>> status() {
        return this.status;
    }

    /**
     * The title of the incident
     * 
     */
    @Import(name="title", required=true)
    private Output<String> title;

    public Output<String> title() {
        return this.title;
    }

    /**
     * The name of the workspace.
     * 
     */
    @Import(name="workspaceName", required=true)
    private Output<String> workspaceName;

    public Output<String> workspaceName() {
        return this.workspaceName;
    }

    private IncidentArgs() {}

    private IncidentArgs(IncidentArgs $) {
        this.classification = $.classification;
        this.classificationComment = $.classificationComment;
        this.classificationReason = $.classificationReason;
        this.description = $.description;
        this.firstActivityTimeUtc = $.firstActivityTimeUtc;
        this.incidentId = $.incidentId;
        this.labels = $.labels;
        this.lastActivityTimeUtc = $.lastActivityTimeUtc;
        this.owner = $.owner;
        this.resourceGroupName = $.resourceGroupName;
        this.severity = $.severity;
        this.status = $.status;
        this.title = $.title;
        this.workspaceName = $.workspaceName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IncidentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IncidentArgs $;

        public Builder() {
            $ = new IncidentArgs();
        }

        public Builder(IncidentArgs defaults) {
            $ = new IncidentArgs(Objects.requireNonNull(defaults));
        }

        public Builder classification(@Nullable Output<Either<String,IncidentClassification>> classification) {
            $.classification = classification;
            return this;
        }

        public Builder classification(Either<String,IncidentClassification> classification) {
            return classification(Output.of(classification));
        }

        public Builder classification(String classification) {
            return classification(Either.ofLeft(classification));
        }

        public Builder classification(IncidentClassification classification) {
            return classification(Either.ofRight(classification));
        }

        public Builder classificationComment(@Nullable Output<String> classificationComment) {
            $.classificationComment = classificationComment;
            return this;
        }

        public Builder classificationComment(String classificationComment) {
            return classificationComment(Output.of(classificationComment));
        }

        public Builder classificationReason(@Nullable Output<Either<String,IncidentClassificationReason>> classificationReason) {
            $.classificationReason = classificationReason;
            return this;
        }

        public Builder classificationReason(Either<String,IncidentClassificationReason> classificationReason) {
            return classificationReason(Output.of(classificationReason));
        }

        public Builder classificationReason(String classificationReason) {
            return classificationReason(Either.ofLeft(classificationReason));
        }

        public Builder classificationReason(IncidentClassificationReason classificationReason) {
            return classificationReason(Either.ofRight(classificationReason));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder firstActivityTimeUtc(@Nullable Output<String> firstActivityTimeUtc) {
            $.firstActivityTimeUtc = firstActivityTimeUtc;
            return this;
        }

        public Builder firstActivityTimeUtc(String firstActivityTimeUtc) {
            return firstActivityTimeUtc(Output.of(firstActivityTimeUtc));
        }

        public Builder incidentId(@Nullable Output<String> incidentId) {
            $.incidentId = incidentId;
            return this;
        }

        public Builder incidentId(String incidentId) {
            return incidentId(Output.of(incidentId));
        }

        public Builder labels(@Nullable Output<List<IncidentLabelArgs>> labels) {
            $.labels = labels;
            return this;
        }

        public Builder labels(List<IncidentLabelArgs> labels) {
            return labels(Output.of(labels));
        }

        public Builder labels(IncidentLabelArgs... labels) {
            return labels(List.of(labels));
        }

        public Builder lastActivityTimeUtc(@Nullable Output<String> lastActivityTimeUtc) {
            $.lastActivityTimeUtc = lastActivityTimeUtc;
            return this;
        }

        public Builder lastActivityTimeUtc(String lastActivityTimeUtc) {
            return lastActivityTimeUtc(Output.of(lastActivityTimeUtc));
        }

        public Builder owner(@Nullable Output<IncidentOwnerInfoArgs> owner) {
            $.owner = owner;
            return this;
        }

        public Builder owner(IncidentOwnerInfoArgs owner) {
            return owner(Output.of(owner));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder severity(Output<Either<String,IncidentSeverity>> severity) {
            $.severity = severity;
            return this;
        }

        public Builder severity(Either<String,IncidentSeverity> severity) {
            return severity(Output.of(severity));
        }

        public Builder severity(String severity) {
            return severity(Either.ofLeft(severity));
        }

        public Builder severity(IncidentSeverity severity) {
            return severity(Either.ofRight(severity));
        }

        public Builder status(Output<Either<String,IncidentStatus>> status) {
            $.status = status;
            return this;
        }

        public Builder status(Either<String,IncidentStatus> status) {
            return status(Output.of(status));
        }

        public Builder status(String status) {
            return status(Either.ofLeft(status));
        }

        public Builder status(IncidentStatus status) {
            return status(Either.ofRight(status));
        }

        public Builder title(Output<String> title) {
            $.title = title;
            return this;
        }

        public Builder title(String title) {
            return title(Output.of(title));
        }

        public Builder workspaceName(Output<String> workspaceName) {
            $.workspaceName = workspaceName;
            return this;
        }

        public Builder workspaceName(String workspaceName) {
            return workspaceName(Output.of(workspaceName));
        }

        public IncidentArgs build() {
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.severity = Objects.requireNonNull($.severity, "expected parameter 'severity' to be non-null");
            $.status = Objects.requireNonNull($.status, "expected parameter 'status' to be non-null");
            $.title = Objects.requireNonNull($.title, "expected parameter 'title' to be non-null");
            $.workspaceName = Objects.requireNonNull($.workspaceName, "expected parameter 'workspaceName' to be non-null");
            return $;
        }
    }

}
