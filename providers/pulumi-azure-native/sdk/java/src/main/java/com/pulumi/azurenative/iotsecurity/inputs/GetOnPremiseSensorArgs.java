// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.iotsecurity.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class GetOnPremiseSensorArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetOnPremiseSensorArgs Empty = new GetOnPremiseSensorArgs();

    /**
     * Name of the on-premise IoT sensor
     * 
     */
    @Import(name="onPremiseSensorName", required=true)
    private Output<String> onPremiseSensorName;

    /**
     * @return Name of the on-premise IoT sensor
     * 
     */
    public Output<String> onPremiseSensorName() {
        return this.onPremiseSensorName;
    }

    private GetOnPremiseSensorArgs() {}

    private GetOnPremiseSensorArgs(GetOnPremiseSensorArgs $) {
        this.onPremiseSensorName = $.onPremiseSensorName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetOnPremiseSensorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetOnPremiseSensorArgs $;

        public Builder() {
            $ = new GetOnPremiseSensorArgs();
        }

        public Builder(GetOnPremiseSensorArgs defaults) {
            $ = new GetOnPremiseSensorArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param onPremiseSensorName Name of the on-premise IoT sensor
         * 
         * @return builder
         * 
         */
        public Builder onPremiseSensorName(Output<String> onPremiseSensorName) {
            $.onPremiseSensorName = onPremiseSensorName;
            return this;
        }

        /**
         * @param onPremiseSensorName Name of the on-premise IoT sensor
         * 
         * @return builder
         * 
         */
        public Builder onPremiseSensorName(String onPremiseSensorName) {
            return onPremiseSensorName(Output.of(onPremiseSensorName));
        }

        public GetOnPremiseSensorArgs build() {
            $.onPremiseSensorName = Objects.requireNonNull($.onPremiseSensorName, "expected parameter 'onPremiseSensorName' to be non-null");
            return $;
        }
    }

}
