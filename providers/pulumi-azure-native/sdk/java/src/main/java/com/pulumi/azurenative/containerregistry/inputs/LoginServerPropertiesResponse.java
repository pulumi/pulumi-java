// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.containerregistry.inputs;

import com.pulumi.azurenative.containerregistry.inputs.TlsPropertiesResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * The login server properties of the connected registry.
 * 
 */
public final class LoginServerPropertiesResponse extends com.pulumi.resources.InvokeArgs {

    public static final LoginServerPropertiesResponse Empty = new LoginServerPropertiesResponse();

    /**
     * The host of the connected registry. Can be FQDN or IP.
     * 
     */
    @Import(name="host", required=true)
    private String host;

    /**
     * @return The host of the connected registry. Can be FQDN or IP.
     * 
     */
    public String host() {
        return this.host;
    }

    /**
     * The TLS properties of the connected registry login server.
     * 
     */
    @Import(name="tls", required=true)
    private TlsPropertiesResponse tls;

    /**
     * @return The TLS properties of the connected registry login server.
     * 
     */
    public TlsPropertiesResponse tls() {
        return this.tls;
    }

    private LoginServerPropertiesResponse() {}

    private LoginServerPropertiesResponse(LoginServerPropertiesResponse $) {
        this.host = $.host;
        this.tls = $.tls;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoginServerPropertiesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoginServerPropertiesResponse $;

        public Builder() {
            $ = new LoginServerPropertiesResponse();
        }

        public Builder(LoginServerPropertiesResponse defaults) {
            $ = new LoginServerPropertiesResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param host The host of the connected registry. Can be FQDN or IP.
         * 
         * @return builder
         * 
         */
        public Builder host(String host) {
            $.host = host;
            return this;
        }

        /**
         * @param tls The TLS properties of the connected registry login server.
         * 
         * @return builder
         * 
         */
        public Builder tls(TlsPropertiesResponse tls) {
            $.tls = tls;
            return this;
        }

        public LoginServerPropertiesResponse build() {
            $.host = Objects.requireNonNull($.host, "expected parameter 'host' to be non-null");
            $.tls = Objects.requireNonNull($.tls, "expected parameter 'tls' to be non-null");
            return $;
        }
    }

}
