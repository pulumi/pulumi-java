// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;


/**
 * Properties of Self-hosted integration runtime node.
 * 
 */
public final class SelfHostedIntegrationRuntimeNodeResponse extends com.pulumi.resources.InvokeArgs {

    public static final SelfHostedIntegrationRuntimeNodeResponse Empty = new SelfHostedIntegrationRuntimeNodeResponse();

    /**
     * The integration runtime capabilities dictionary
     * 
     */
    @Import(name="capabilities", required=true)
    private Map<String,String> capabilities;

    public Map<String,String> capabilities() {
        return this.capabilities;
    }

    /**
     * Maximum concurrent jobs on the integration runtime node.
     * 
     */
    @Import(name="concurrentJobsLimit", required=true)
    private Integer concurrentJobsLimit;

    public Integer concurrentJobsLimit() {
        return this.concurrentJobsLimit;
    }

    /**
     * The time at which the integration runtime will expire in ISO8601 format.
     * 
     */
    @Import(name="expiryTime", required=true)
    private String expiryTime;

    public String expiryTime() {
        return this.expiryTime;
    }

    /**
     * URI for the host machine of the integration runtime.
     * 
     */
    @Import(name="hostServiceUri", required=true)
    private String hostServiceUri;

    public String hostServiceUri() {
        return this.hostServiceUri;
    }

    /**
     * Indicates whether this node is the active dispatcher for integration runtime requests.
     * 
     */
    @Import(name="isActiveDispatcher", required=true)
    private Boolean isActiveDispatcher;

    public Boolean isActiveDispatcher() {
        return this.isActiveDispatcher;
    }

    /**
     * The most recent time at which the integration runtime was connected in ISO8601 format.
     * 
     */
    @Import(name="lastConnectTime", required=true)
    private String lastConnectTime;

    public String lastConnectTime() {
        return this.lastConnectTime;
    }

    /**
     * The last time for the integration runtime node update end.
     * 
     */
    @Import(name="lastEndUpdateTime", required=true)
    private String lastEndUpdateTime;

    public String lastEndUpdateTime() {
        return this.lastEndUpdateTime;
    }

    /**
     * The time the node last started up.
     * 
     */
    @Import(name="lastStartTime", required=true)
    private String lastStartTime;

    public String lastStartTime() {
        return this.lastStartTime;
    }

    /**
     * The last time for the integration runtime node update start.
     * 
     */
    @Import(name="lastStartUpdateTime", required=true)
    private String lastStartUpdateTime;

    public String lastStartUpdateTime() {
        return this.lastStartUpdateTime;
    }

    /**
     * The integration runtime node last stop time.
     * 
     */
    @Import(name="lastStopTime", required=true)
    private String lastStopTime;

    public String lastStopTime() {
        return this.lastStopTime;
    }

    /**
     * The result of the last integration runtime node update.
     * 
     */
    @Import(name="lastUpdateResult", required=true)
    private String lastUpdateResult;

    public String lastUpdateResult() {
        return this.lastUpdateResult;
    }

    /**
     * Machine name of the integration runtime node.
     * 
     */
    @Import(name="machineName", required=true)
    private String machineName;

    public String machineName() {
        return this.machineName;
    }

    /**
     * The maximum concurrent jobs in this integration runtime.
     * 
     */
    @Import(name="maxConcurrentJobs", required=true)
    private Integer maxConcurrentJobs;

    public Integer maxConcurrentJobs() {
        return this.maxConcurrentJobs;
    }

    /**
     * Name of the integration runtime node.
     * 
     */
    @Import(name="nodeName", required=true)
    private String nodeName;

    public String nodeName() {
        return this.nodeName;
    }

    /**
     * The time at which the integration runtime node was registered in ISO8601 format.
     * 
     */
    @Import(name="registerTime", required=true)
    private String registerTime;

    public String registerTime() {
        return this.registerTime;
    }

    /**
     * Status of the integration runtime node.
     * 
     */
    @Import(name="status", required=true)
    private String status;

    public String status() {
        return this.status;
    }

    /**
     * Version of the integration runtime node.
     * 
     */
    @Import(name="version", required=true)
    private String version;

    public String version() {
        return this.version;
    }

    /**
     * Status of the integration runtime node version.
     * 
     */
    @Import(name="versionStatus", required=true)
    private String versionStatus;

    public String versionStatus() {
        return this.versionStatus;
    }

    private SelfHostedIntegrationRuntimeNodeResponse() {}

    private SelfHostedIntegrationRuntimeNodeResponse(SelfHostedIntegrationRuntimeNodeResponse $) {
        this.capabilities = $.capabilities;
        this.concurrentJobsLimit = $.concurrentJobsLimit;
        this.expiryTime = $.expiryTime;
        this.hostServiceUri = $.hostServiceUri;
        this.isActiveDispatcher = $.isActiveDispatcher;
        this.lastConnectTime = $.lastConnectTime;
        this.lastEndUpdateTime = $.lastEndUpdateTime;
        this.lastStartTime = $.lastStartTime;
        this.lastStartUpdateTime = $.lastStartUpdateTime;
        this.lastStopTime = $.lastStopTime;
        this.lastUpdateResult = $.lastUpdateResult;
        this.machineName = $.machineName;
        this.maxConcurrentJobs = $.maxConcurrentJobs;
        this.nodeName = $.nodeName;
        this.registerTime = $.registerTime;
        this.status = $.status;
        this.version = $.version;
        this.versionStatus = $.versionStatus;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SelfHostedIntegrationRuntimeNodeResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SelfHostedIntegrationRuntimeNodeResponse $;

        public Builder() {
            $ = new SelfHostedIntegrationRuntimeNodeResponse();
        }

        public Builder(SelfHostedIntegrationRuntimeNodeResponse defaults) {
            $ = new SelfHostedIntegrationRuntimeNodeResponse(Objects.requireNonNull(defaults));
        }

        public Builder capabilities(Map<String,String> capabilities) {
            $.capabilities = capabilities;
            return this;
        }

        public Builder concurrentJobsLimit(Integer concurrentJobsLimit) {
            $.concurrentJobsLimit = concurrentJobsLimit;
            return this;
        }

        public Builder expiryTime(String expiryTime) {
            $.expiryTime = expiryTime;
            return this;
        }

        public Builder hostServiceUri(String hostServiceUri) {
            $.hostServiceUri = hostServiceUri;
            return this;
        }

        public Builder isActiveDispatcher(Boolean isActiveDispatcher) {
            $.isActiveDispatcher = isActiveDispatcher;
            return this;
        }

        public Builder lastConnectTime(String lastConnectTime) {
            $.lastConnectTime = lastConnectTime;
            return this;
        }

        public Builder lastEndUpdateTime(String lastEndUpdateTime) {
            $.lastEndUpdateTime = lastEndUpdateTime;
            return this;
        }

        public Builder lastStartTime(String lastStartTime) {
            $.lastStartTime = lastStartTime;
            return this;
        }

        public Builder lastStartUpdateTime(String lastStartUpdateTime) {
            $.lastStartUpdateTime = lastStartUpdateTime;
            return this;
        }

        public Builder lastStopTime(String lastStopTime) {
            $.lastStopTime = lastStopTime;
            return this;
        }

        public Builder lastUpdateResult(String lastUpdateResult) {
            $.lastUpdateResult = lastUpdateResult;
            return this;
        }

        public Builder machineName(String machineName) {
            $.machineName = machineName;
            return this;
        }

        public Builder maxConcurrentJobs(Integer maxConcurrentJobs) {
            $.maxConcurrentJobs = maxConcurrentJobs;
            return this;
        }

        public Builder nodeName(String nodeName) {
            $.nodeName = nodeName;
            return this;
        }

        public Builder registerTime(String registerTime) {
            $.registerTime = registerTime;
            return this;
        }

        public Builder status(String status) {
            $.status = status;
            return this;
        }

        public Builder version(String version) {
            $.version = version;
            return this;
        }

        public Builder versionStatus(String versionStatus) {
            $.versionStatus = versionStatus;
            return this;
        }

        public SelfHostedIntegrationRuntimeNodeResponse build() {
            $.capabilities = Objects.requireNonNull($.capabilities, "expected parameter 'capabilities' to be non-null");
            $.concurrentJobsLimit = Objects.requireNonNull($.concurrentJobsLimit, "expected parameter 'concurrentJobsLimit' to be non-null");
            $.expiryTime = Objects.requireNonNull($.expiryTime, "expected parameter 'expiryTime' to be non-null");
            $.hostServiceUri = Objects.requireNonNull($.hostServiceUri, "expected parameter 'hostServiceUri' to be non-null");
            $.isActiveDispatcher = Objects.requireNonNull($.isActiveDispatcher, "expected parameter 'isActiveDispatcher' to be non-null");
            $.lastConnectTime = Objects.requireNonNull($.lastConnectTime, "expected parameter 'lastConnectTime' to be non-null");
            $.lastEndUpdateTime = Objects.requireNonNull($.lastEndUpdateTime, "expected parameter 'lastEndUpdateTime' to be non-null");
            $.lastStartTime = Objects.requireNonNull($.lastStartTime, "expected parameter 'lastStartTime' to be non-null");
            $.lastStartUpdateTime = Objects.requireNonNull($.lastStartUpdateTime, "expected parameter 'lastStartUpdateTime' to be non-null");
            $.lastStopTime = Objects.requireNonNull($.lastStopTime, "expected parameter 'lastStopTime' to be non-null");
            $.lastUpdateResult = Objects.requireNonNull($.lastUpdateResult, "expected parameter 'lastUpdateResult' to be non-null");
            $.machineName = Objects.requireNonNull($.machineName, "expected parameter 'machineName' to be non-null");
            $.maxConcurrentJobs = Objects.requireNonNull($.maxConcurrentJobs, "expected parameter 'maxConcurrentJobs' to be non-null");
            $.nodeName = Objects.requireNonNull($.nodeName, "expected parameter 'nodeName' to be non-null");
            $.registerTime = Objects.requireNonNull($.registerTime, "expected parameter 'registerTime' to be non-null");
            $.status = Objects.requireNonNull($.status, "expected parameter 'status' to be non-null");
            $.version = Objects.requireNonNull($.version, "expected parameter 'version' to be non-null");
            $.versionStatus = Objects.requireNonNull($.versionStatus, "expected parameter 'versionStatus' to be non-null");
            return $;
        }
    }

}
