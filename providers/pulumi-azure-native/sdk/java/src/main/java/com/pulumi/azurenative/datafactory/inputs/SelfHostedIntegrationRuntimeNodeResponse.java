// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;


/**
 * Properties of Self-hosted integration runtime node.
 * 
 */
public final class SelfHostedIntegrationRuntimeNodeResponse extends com.pulumi.resources.InvokeArgs {

    public static final SelfHostedIntegrationRuntimeNodeResponse Empty = new SelfHostedIntegrationRuntimeNodeResponse();

    /**
     * The integration runtime capabilities dictionary
     * 
     */
    @Import(name="capabilities", required=true)
      private final Map<String,String> capabilities;

    public Map<String,String> capabilities() {
        return this.capabilities;
    }

    /**
     * Maximum concurrent jobs on the integration runtime node.
     * 
     */
    @Import(name="concurrentJobsLimit", required=true)
      private final Integer concurrentJobsLimit;

    public Integer concurrentJobsLimit() {
        return this.concurrentJobsLimit;
    }

    /**
     * The time at which the integration runtime will expire in ISO8601 format.
     * 
     */
    @Import(name="expiryTime", required=true)
      private final String expiryTime;

    public String expiryTime() {
        return this.expiryTime;
    }

    /**
     * URI for the host machine of the integration runtime.
     * 
     */
    @Import(name="hostServiceUri", required=true)
      private final String hostServiceUri;

    public String hostServiceUri() {
        return this.hostServiceUri;
    }

    /**
     * Indicates whether this node is the active dispatcher for integration runtime requests.
     * 
     */
    @Import(name="isActiveDispatcher", required=true)
      private final Boolean isActiveDispatcher;

    public Boolean isActiveDispatcher() {
        return this.isActiveDispatcher;
    }

    /**
     * The most recent time at which the integration runtime was connected in ISO8601 format.
     * 
     */
    @Import(name="lastConnectTime", required=true)
      private final String lastConnectTime;

    public String lastConnectTime() {
        return this.lastConnectTime;
    }

    /**
     * The last time for the integration runtime node update end.
     * 
     */
    @Import(name="lastEndUpdateTime", required=true)
      private final String lastEndUpdateTime;

    public String lastEndUpdateTime() {
        return this.lastEndUpdateTime;
    }

    /**
     * The time the node last started up.
     * 
     */
    @Import(name="lastStartTime", required=true)
      private final String lastStartTime;

    public String lastStartTime() {
        return this.lastStartTime;
    }

    /**
     * The last time for the integration runtime node update start.
     * 
     */
    @Import(name="lastStartUpdateTime", required=true)
      private final String lastStartUpdateTime;

    public String lastStartUpdateTime() {
        return this.lastStartUpdateTime;
    }

    /**
     * The integration runtime node last stop time.
     * 
     */
    @Import(name="lastStopTime", required=true)
      private final String lastStopTime;

    public String lastStopTime() {
        return this.lastStopTime;
    }

    /**
     * The result of the last integration runtime node update.
     * 
     */
    @Import(name="lastUpdateResult", required=true)
      private final String lastUpdateResult;

    public String lastUpdateResult() {
        return this.lastUpdateResult;
    }

    /**
     * Machine name of the integration runtime node.
     * 
     */
    @Import(name="machineName", required=true)
      private final String machineName;

    public String machineName() {
        return this.machineName;
    }

    /**
     * The maximum concurrent jobs in this integration runtime.
     * 
     */
    @Import(name="maxConcurrentJobs", required=true)
      private final Integer maxConcurrentJobs;

    public Integer maxConcurrentJobs() {
        return this.maxConcurrentJobs;
    }

    /**
     * Name of the integration runtime node.
     * 
     */
    @Import(name="nodeName", required=true)
      private final String nodeName;

    public String nodeName() {
        return this.nodeName;
    }

    /**
     * The time at which the integration runtime node was registered in ISO8601 format.
     * 
     */
    @Import(name="registerTime", required=true)
      private final String registerTime;

    public String registerTime() {
        return this.registerTime;
    }

    /**
     * Status of the integration runtime node.
     * 
     */
    @Import(name="status", required=true)
      private final String status;

    public String status() {
        return this.status;
    }

    /**
     * Version of the integration runtime node.
     * 
     */
    @Import(name="version", required=true)
      private final String version;

    public String version() {
        return this.version;
    }

    /**
     * Status of the integration runtime node version.
     * 
     */
    @Import(name="versionStatus", required=true)
      private final String versionStatus;

    public String versionStatus() {
        return this.versionStatus;
    }

    public SelfHostedIntegrationRuntimeNodeResponse(
        Map<String,String> capabilities,
        Integer concurrentJobsLimit,
        String expiryTime,
        String hostServiceUri,
        Boolean isActiveDispatcher,
        String lastConnectTime,
        String lastEndUpdateTime,
        String lastStartTime,
        String lastStartUpdateTime,
        String lastStopTime,
        String lastUpdateResult,
        String machineName,
        Integer maxConcurrentJobs,
        String nodeName,
        String registerTime,
        String status,
        String version,
        String versionStatus) {
        this.capabilities = Objects.requireNonNull(capabilities, "expected parameter 'capabilities' to be non-null");
        this.concurrentJobsLimit = Objects.requireNonNull(concurrentJobsLimit, "expected parameter 'concurrentJobsLimit' to be non-null");
        this.expiryTime = Objects.requireNonNull(expiryTime, "expected parameter 'expiryTime' to be non-null");
        this.hostServiceUri = Objects.requireNonNull(hostServiceUri, "expected parameter 'hostServiceUri' to be non-null");
        this.isActiveDispatcher = Objects.requireNonNull(isActiveDispatcher, "expected parameter 'isActiveDispatcher' to be non-null");
        this.lastConnectTime = Objects.requireNonNull(lastConnectTime, "expected parameter 'lastConnectTime' to be non-null");
        this.lastEndUpdateTime = Objects.requireNonNull(lastEndUpdateTime, "expected parameter 'lastEndUpdateTime' to be non-null");
        this.lastStartTime = Objects.requireNonNull(lastStartTime, "expected parameter 'lastStartTime' to be non-null");
        this.lastStartUpdateTime = Objects.requireNonNull(lastStartUpdateTime, "expected parameter 'lastStartUpdateTime' to be non-null");
        this.lastStopTime = Objects.requireNonNull(lastStopTime, "expected parameter 'lastStopTime' to be non-null");
        this.lastUpdateResult = Objects.requireNonNull(lastUpdateResult, "expected parameter 'lastUpdateResult' to be non-null");
        this.machineName = Objects.requireNonNull(machineName, "expected parameter 'machineName' to be non-null");
        this.maxConcurrentJobs = Objects.requireNonNull(maxConcurrentJobs, "expected parameter 'maxConcurrentJobs' to be non-null");
        this.nodeName = Objects.requireNonNull(nodeName, "expected parameter 'nodeName' to be non-null");
        this.registerTime = Objects.requireNonNull(registerTime, "expected parameter 'registerTime' to be non-null");
        this.status = Objects.requireNonNull(status, "expected parameter 'status' to be non-null");
        this.version = Objects.requireNonNull(version, "expected parameter 'version' to be non-null");
        this.versionStatus = Objects.requireNonNull(versionStatus, "expected parameter 'versionStatus' to be non-null");
    }

    private SelfHostedIntegrationRuntimeNodeResponse() {
        this.capabilities = Map.of();
        this.concurrentJobsLimit = null;
        this.expiryTime = null;
        this.hostServiceUri = null;
        this.isActiveDispatcher = null;
        this.lastConnectTime = null;
        this.lastEndUpdateTime = null;
        this.lastStartTime = null;
        this.lastStartUpdateTime = null;
        this.lastStopTime = null;
        this.lastUpdateResult = null;
        this.machineName = null;
        this.maxConcurrentJobs = null;
        this.nodeName = null;
        this.registerTime = null;
        this.status = null;
        this.version = null;
        this.versionStatus = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SelfHostedIntegrationRuntimeNodeResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Map<String,String> capabilities;
        private Integer concurrentJobsLimit;
        private String expiryTime;
        private String hostServiceUri;
        private Boolean isActiveDispatcher;
        private String lastConnectTime;
        private String lastEndUpdateTime;
        private String lastStartTime;
        private String lastStartUpdateTime;
        private String lastStopTime;
        private String lastUpdateResult;
        private String machineName;
        private Integer maxConcurrentJobs;
        private String nodeName;
        private String registerTime;
        private String status;
        private String version;
        private String versionStatus;

        public Builder() {
    	      // Empty
        }

        public Builder(SelfHostedIntegrationRuntimeNodeResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.capabilities = defaults.capabilities;
    	      this.concurrentJobsLimit = defaults.concurrentJobsLimit;
    	      this.expiryTime = defaults.expiryTime;
    	      this.hostServiceUri = defaults.hostServiceUri;
    	      this.isActiveDispatcher = defaults.isActiveDispatcher;
    	      this.lastConnectTime = defaults.lastConnectTime;
    	      this.lastEndUpdateTime = defaults.lastEndUpdateTime;
    	      this.lastStartTime = defaults.lastStartTime;
    	      this.lastStartUpdateTime = defaults.lastStartUpdateTime;
    	      this.lastStopTime = defaults.lastStopTime;
    	      this.lastUpdateResult = defaults.lastUpdateResult;
    	      this.machineName = defaults.machineName;
    	      this.maxConcurrentJobs = defaults.maxConcurrentJobs;
    	      this.nodeName = defaults.nodeName;
    	      this.registerTime = defaults.registerTime;
    	      this.status = defaults.status;
    	      this.version = defaults.version;
    	      this.versionStatus = defaults.versionStatus;
        }

        public Builder capabilities(Map<String,String> capabilities) {
            this.capabilities = Objects.requireNonNull(capabilities);
            return this;
        }
        public Builder concurrentJobsLimit(Integer concurrentJobsLimit) {
            this.concurrentJobsLimit = Objects.requireNonNull(concurrentJobsLimit);
            return this;
        }
        public Builder expiryTime(String expiryTime) {
            this.expiryTime = Objects.requireNonNull(expiryTime);
            return this;
        }
        public Builder hostServiceUri(String hostServiceUri) {
            this.hostServiceUri = Objects.requireNonNull(hostServiceUri);
            return this;
        }
        public Builder isActiveDispatcher(Boolean isActiveDispatcher) {
            this.isActiveDispatcher = Objects.requireNonNull(isActiveDispatcher);
            return this;
        }
        public Builder lastConnectTime(String lastConnectTime) {
            this.lastConnectTime = Objects.requireNonNull(lastConnectTime);
            return this;
        }
        public Builder lastEndUpdateTime(String lastEndUpdateTime) {
            this.lastEndUpdateTime = Objects.requireNonNull(lastEndUpdateTime);
            return this;
        }
        public Builder lastStartTime(String lastStartTime) {
            this.lastStartTime = Objects.requireNonNull(lastStartTime);
            return this;
        }
        public Builder lastStartUpdateTime(String lastStartUpdateTime) {
            this.lastStartUpdateTime = Objects.requireNonNull(lastStartUpdateTime);
            return this;
        }
        public Builder lastStopTime(String lastStopTime) {
            this.lastStopTime = Objects.requireNonNull(lastStopTime);
            return this;
        }
        public Builder lastUpdateResult(String lastUpdateResult) {
            this.lastUpdateResult = Objects.requireNonNull(lastUpdateResult);
            return this;
        }
        public Builder machineName(String machineName) {
            this.machineName = Objects.requireNonNull(machineName);
            return this;
        }
        public Builder maxConcurrentJobs(Integer maxConcurrentJobs) {
            this.maxConcurrentJobs = Objects.requireNonNull(maxConcurrentJobs);
            return this;
        }
        public Builder nodeName(String nodeName) {
            this.nodeName = Objects.requireNonNull(nodeName);
            return this;
        }
        public Builder registerTime(String registerTime) {
            this.registerTime = Objects.requireNonNull(registerTime);
            return this;
        }
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        public Builder version(String version) {
            this.version = Objects.requireNonNull(version);
            return this;
        }
        public Builder versionStatus(String versionStatus) {
            this.versionStatus = Objects.requireNonNull(versionStatus);
            return this;
        }        public SelfHostedIntegrationRuntimeNodeResponse build() {
            return new SelfHostedIntegrationRuntimeNodeResponse(capabilities, concurrentJobsLimit, expiryTime, hostServiceUri, isActiveDispatcher, lastConnectTime, lastEndUpdateTime, lastStartTime, lastStartUpdateTime, lastStopTime, lastUpdateResult, machineName, maxConcurrentJobs, nodeName, registerTime, status, version, versionStatus);
        }
    }
}
