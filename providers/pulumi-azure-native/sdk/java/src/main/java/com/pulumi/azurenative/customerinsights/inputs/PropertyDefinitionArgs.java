// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.customerinsights.inputs;

import com.pulumi.azurenative.customerinsights.inputs.ProfileEnumValidValuesFormatArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Property definition.
 * 
 */
public final class PropertyDefinitionArgs extends com.pulumi.resources.ResourceArgs {

    public static final PropertyDefinitionArgs Empty = new PropertyDefinitionArgs();

    /**
     * Array value separator for properties with isArray set.
     * 
     */
    @Import(name="arrayValueSeparator")
    private @Nullable Output<String> arrayValueSeparator;

    /**
     * @return Array value separator for properties with isArray set.
     * 
     */
    public Optional<Output<String>> arrayValueSeparator() {
        return Optional.ofNullable(this.arrayValueSeparator);
    }

    /**
     * Describes valid values for an enum property.
     * 
     */
    @Import(name="enumValidValues")
    private @Nullable Output<List<ProfileEnumValidValuesFormatArgs>> enumValidValues;

    /**
     * @return Describes valid values for an enum property.
     * 
     */
    public Optional<Output<List<ProfileEnumValidValuesFormatArgs>>> enumValidValues() {
        return Optional.ofNullable(this.enumValidValues);
    }

    /**
     * Name of the property.
     * 
     */
    @Import(name="fieldName", required=true)
    private Output<String> fieldName;

    /**
     * @return Name of the property.
     * 
     */
    public Output<String> fieldName() {
        return this.fieldName;
    }

    /**
     * Type of the property.
     * 
     */
    @Import(name="fieldType", required=true)
    private Output<String> fieldType;

    /**
     * @return Type of the property.
     * 
     */
    public Output<String> fieldType() {
        return this.fieldType;
    }

    /**
     * Indicates if the property is actually an array of the fieldType above on the data api.
     * 
     */
    @Import(name="isArray")
    private @Nullable Output<Boolean> isArray;

    /**
     * @return Indicates if the property is actually an array of the fieldType above on the data api.
     * 
     */
    public Optional<Output<Boolean>> isArray() {
        return Optional.ofNullable(this.isArray);
    }

    /**
     * Whether property is available in graph or not.
     * 
     */
    @Import(name="isAvailableInGraph")
    private @Nullable Output<Boolean> isAvailableInGraph;

    /**
     * @return Whether property is available in graph or not.
     * 
     */
    public Optional<Output<Boolean>> isAvailableInGraph() {
        return Optional.ofNullable(this.isAvailableInGraph);
    }

    /**
     * Indicates if the property is an enum.
     * 
     */
    @Import(name="isEnum")
    private @Nullable Output<Boolean> isEnum;

    /**
     * @return Indicates if the property is an enum.
     * 
     */
    public Optional<Output<Boolean>> isEnum() {
        return Optional.ofNullable(this.isEnum);
    }

    /**
     * Indicates if the property is an flag enum.
     * 
     */
    @Import(name="isFlagEnum")
    private @Nullable Output<Boolean> isFlagEnum;

    /**
     * @return Indicates if the property is an flag enum.
     * 
     */
    public Optional<Output<Boolean>> isFlagEnum() {
        return Optional.ofNullable(this.isFlagEnum);
    }

    /**
     * Whether the property is an Image.
     * 
     */
    @Import(name="isImage")
    private @Nullable Output<Boolean> isImage;

    /**
     * @return Whether the property is an Image.
     * 
     */
    public Optional<Output<Boolean>> isImage() {
        return Optional.ofNullable(this.isImage);
    }

    /**
     * Whether the property is a localized string.
     * 
     */
    @Import(name="isLocalizedString")
    private @Nullable Output<Boolean> isLocalizedString;

    /**
     * @return Whether the property is a localized string.
     * 
     */
    public Optional<Output<Boolean>> isLocalizedString() {
        return Optional.ofNullable(this.isLocalizedString);
    }

    /**
     * Whether the property is a name or a part of name.
     * 
     */
    @Import(name="isName")
    private @Nullable Output<Boolean> isName;

    /**
     * @return Whether the property is a name or a part of name.
     * 
     */
    public Optional<Output<Boolean>> isName() {
        return Optional.ofNullable(this.isName);
    }

    /**
     * Whether property value is required on instances, IsRequired field only for Interaction. Profile Instance will not check for required field.
     * 
     */
    @Import(name="isRequired")
    private @Nullable Output<Boolean> isRequired;

    /**
     * @return Whether property value is required on instances, IsRequired field only for Interaction. Profile Instance will not check for required field.
     * 
     */
    public Optional<Output<Boolean>> isRequired() {
        return Optional.ofNullable(this.isRequired);
    }

    /**
     * Max length of string. Used only if type is string.
     * 
     */
    @Import(name="maxLength")
    private @Nullable Output<Integer> maxLength;

    /**
     * @return Max length of string. Used only if type is string.
     * 
     */
    public Optional<Output<Integer>> maxLength() {
        return Optional.ofNullable(this.maxLength);
    }

    /**
     * The ID associated with the property.
     * 
     */
    @Import(name="propertyId")
    private @Nullable Output<String> propertyId;

    /**
     * @return The ID associated with the property.
     * 
     */
    public Optional<Output<String>> propertyId() {
        return Optional.ofNullable(this.propertyId);
    }

    /**
     * URL encoded schema.org item prop link for the property.
     * 
     */
    @Import(name="schemaItemPropLink")
    private @Nullable Output<String> schemaItemPropLink;

    /**
     * @return URL encoded schema.org item prop link for the property.
     * 
     */
    public Optional<Output<String>> schemaItemPropLink() {
        return Optional.ofNullable(this.schemaItemPropLink);
    }

    private PropertyDefinitionArgs() {}

    private PropertyDefinitionArgs(PropertyDefinitionArgs $) {
        this.arrayValueSeparator = $.arrayValueSeparator;
        this.enumValidValues = $.enumValidValues;
        this.fieldName = $.fieldName;
        this.fieldType = $.fieldType;
        this.isArray = $.isArray;
        this.isAvailableInGraph = $.isAvailableInGraph;
        this.isEnum = $.isEnum;
        this.isFlagEnum = $.isFlagEnum;
        this.isImage = $.isImage;
        this.isLocalizedString = $.isLocalizedString;
        this.isName = $.isName;
        this.isRequired = $.isRequired;
        this.maxLength = $.maxLength;
        this.propertyId = $.propertyId;
        this.schemaItemPropLink = $.schemaItemPropLink;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PropertyDefinitionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PropertyDefinitionArgs $;

        public Builder() {
            $ = new PropertyDefinitionArgs();
        }

        public Builder(PropertyDefinitionArgs defaults) {
            $ = new PropertyDefinitionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param arrayValueSeparator Array value separator for properties with isArray set.
         * 
         * @return builder
         * 
         */
        public Builder arrayValueSeparator(@Nullable Output<String> arrayValueSeparator) {
            $.arrayValueSeparator = arrayValueSeparator;
            return this;
        }

        /**
         * @param arrayValueSeparator Array value separator for properties with isArray set.
         * 
         * @return builder
         * 
         */
        public Builder arrayValueSeparator(String arrayValueSeparator) {
            return arrayValueSeparator(Output.of(arrayValueSeparator));
        }

        /**
         * @param enumValidValues Describes valid values for an enum property.
         * 
         * @return builder
         * 
         */
        public Builder enumValidValues(@Nullable Output<List<ProfileEnumValidValuesFormatArgs>> enumValidValues) {
            $.enumValidValues = enumValidValues;
            return this;
        }

        /**
         * @param enumValidValues Describes valid values for an enum property.
         * 
         * @return builder
         * 
         */
        public Builder enumValidValues(List<ProfileEnumValidValuesFormatArgs> enumValidValues) {
            return enumValidValues(Output.of(enumValidValues));
        }

        /**
         * @param enumValidValues Describes valid values for an enum property.
         * 
         * @return builder
         * 
         */
        public Builder enumValidValues(ProfileEnumValidValuesFormatArgs... enumValidValues) {
            return enumValidValues(List.of(enumValidValues));
        }

        /**
         * @param fieldName Name of the property.
         * 
         * @return builder
         * 
         */
        public Builder fieldName(Output<String> fieldName) {
            $.fieldName = fieldName;
            return this;
        }

        /**
         * @param fieldName Name of the property.
         * 
         * @return builder
         * 
         */
        public Builder fieldName(String fieldName) {
            return fieldName(Output.of(fieldName));
        }

        /**
         * @param fieldType Type of the property.
         * 
         * @return builder
         * 
         */
        public Builder fieldType(Output<String> fieldType) {
            $.fieldType = fieldType;
            return this;
        }

        /**
         * @param fieldType Type of the property.
         * 
         * @return builder
         * 
         */
        public Builder fieldType(String fieldType) {
            return fieldType(Output.of(fieldType));
        }

        /**
         * @param isArray Indicates if the property is actually an array of the fieldType above on the data api.
         * 
         * @return builder
         * 
         */
        public Builder isArray(@Nullable Output<Boolean> isArray) {
            $.isArray = isArray;
            return this;
        }

        /**
         * @param isArray Indicates if the property is actually an array of the fieldType above on the data api.
         * 
         * @return builder
         * 
         */
        public Builder isArray(Boolean isArray) {
            return isArray(Output.of(isArray));
        }

        /**
         * @param isAvailableInGraph Whether property is available in graph or not.
         * 
         * @return builder
         * 
         */
        public Builder isAvailableInGraph(@Nullable Output<Boolean> isAvailableInGraph) {
            $.isAvailableInGraph = isAvailableInGraph;
            return this;
        }

        /**
         * @param isAvailableInGraph Whether property is available in graph or not.
         * 
         * @return builder
         * 
         */
        public Builder isAvailableInGraph(Boolean isAvailableInGraph) {
            return isAvailableInGraph(Output.of(isAvailableInGraph));
        }

        /**
         * @param isEnum Indicates if the property is an enum.
         * 
         * @return builder
         * 
         */
        public Builder isEnum(@Nullable Output<Boolean> isEnum) {
            $.isEnum = isEnum;
            return this;
        }

        /**
         * @param isEnum Indicates if the property is an enum.
         * 
         * @return builder
         * 
         */
        public Builder isEnum(Boolean isEnum) {
            return isEnum(Output.of(isEnum));
        }

        /**
         * @param isFlagEnum Indicates if the property is an flag enum.
         * 
         * @return builder
         * 
         */
        public Builder isFlagEnum(@Nullable Output<Boolean> isFlagEnum) {
            $.isFlagEnum = isFlagEnum;
            return this;
        }

        /**
         * @param isFlagEnum Indicates if the property is an flag enum.
         * 
         * @return builder
         * 
         */
        public Builder isFlagEnum(Boolean isFlagEnum) {
            return isFlagEnum(Output.of(isFlagEnum));
        }

        /**
         * @param isImage Whether the property is an Image.
         * 
         * @return builder
         * 
         */
        public Builder isImage(@Nullable Output<Boolean> isImage) {
            $.isImage = isImage;
            return this;
        }

        /**
         * @param isImage Whether the property is an Image.
         * 
         * @return builder
         * 
         */
        public Builder isImage(Boolean isImage) {
            return isImage(Output.of(isImage));
        }

        /**
         * @param isLocalizedString Whether the property is a localized string.
         * 
         * @return builder
         * 
         */
        public Builder isLocalizedString(@Nullable Output<Boolean> isLocalizedString) {
            $.isLocalizedString = isLocalizedString;
            return this;
        }

        /**
         * @param isLocalizedString Whether the property is a localized string.
         * 
         * @return builder
         * 
         */
        public Builder isLocalizedString(Boolean isLocalizedString) {
            return isLocalizedString(Output.of(isLocalizedString));
        }

        /**
         * @param isName Whether the property is a name or a part of name.
         * 
         * @return builder
         * 
         */
        public Builder isName(@Nullable Output<Boolean> isName) {
            $.isName = isName;
            return this;
        }

        /**
         * @param isName Whether the property is a name or a part of name.
         * 
         * @return builder
         * 
         */
        public Builder isName(Boolean isName) {
            return isName(Output.of(isName));
        }

        /**
         * @param isRequired Whether property value is required on instances, IsRequired field only for Interaction. Profile Instance will not check for required field.
         * 
         * @return builder
         * 
         */
        public Builder isRequired(@Nullable Output<Boolean> isRequired) {
            $.isRequired = isRequired;
            return this;
        }

        /**
         * @param isRequired Whether property value is required on instances, IsRequired field only for Interaction. Profile Instance will not check for required field.
         * 
         * @return builder
         * 
         */
        public Builder isRequired(Boolean isRequired) {
            return isRequired(Output.of(isRequired));
        }

        /**
         * @param maxLength Max length of string. Used only if type is string.
         * 
         * @return builder
         * 
         */
        public Builder maxLength(@Nullable Output<Integer> maxLength) {
            $.maxLength = maxLength;
            return this;
        }

        /**
         * @param maxLength Max length of string. Used only if type is string.
         * 
         * @return builder
         * 
         */
        public Builder maxLength(Integer maxLength) {
            return maxLength(Output.of(maxLength));
        }

        /**
         * @param propertyId The ID associated with the property.
         * 
         * @return builder
         * 
         */
        public Builder propertyId(@Nullable Output<String> propertyId) {
            $.propertyId = propertyId;
            return this;
        }

        /**
         * @param propertyId The ID associated with the property.
         * 
         * @return builder
         * 
         */
        public Builder propertyId(String propertyId) {
            return propertyId(Output.of(propertyId));
        }

        /**
         * @param schemaItemPropLink URL encoded schema.org item prop link for the property.
         * 
         * @return builder
         * 
         */
        public Builder schemaItemPropLink(@Nullable Output<String> schemaItemPropLink) {
            $.schemaItemPropLink = schemaItemPropLink;
            return this;
        }

        /**
         * @param schemaItemPropLink URL encoded schema.org item prop link for the property.
         * 
         * @return builder
         * 
         */
        public Builder schemaItemPropLink(String schemaItemPropLink) {
            return schemaItemPropLink(Output.of(schemaItemPropLink));
        }

        public PropertyDefinitionArgs build() {
            $.fieldName = Objects.requireNonNull($.fieldName, "expected parameter 'fieldName' to be non-null");
            $.fieldType = Objects.requireNonNull($.fieldType, "expected parameter 'fieldType' to be non-null");
            return $;
        }
    }

}
