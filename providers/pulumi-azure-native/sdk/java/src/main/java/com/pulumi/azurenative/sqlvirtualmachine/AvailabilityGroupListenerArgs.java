// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.sqlvirtualmachine;

import com.pulumi.azurenative.sqlvirtualmachine.inputs.LoadBalancerConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AvailabilityGroupListenerArgs extends com.pulumi.resources.ResourceArgs {

    public static final AvailabilityGroupListenerArgs Empty = new AvailabilityGroupListenerArgs();

    /**
     * Name of the availability group listener.
     * 
     */
    @Import(name="availabilityGroupListenerName")
    private @Nullable Output<String> availabilityGroupListenerName;

    public Optional<Output<String>> availabilityGroupListenerName() {
        return Optional.ofNullable(this.availabilityGroupListenerName);
    }

    /**
     * Name of the availability group.
     * 
     */
    @Import(name="availabilityGroupName")
    private @Nullable Output<String> availabilityGroupName;

    public Optional<Output<String>> availabilityGroupName() {
        return Optional.ofNullable(this.availabilityGroupName);
    }

    /**
     * Create a default availability group if it does not exist.
     * 
     */
    @Import(name="createDefaultAvailabilityGroupIfNotExist")
    private @Nullable Output<Boolean> createDefaultAvailabilityGroupIfNotExist;

    public Optional<Output<Boolean>> createDefaultAvailabilityGroupIfNotExist() {
        return Optional.ofNullable(this.createDefaultAvailabilityGroupIfNotExist);
    }

    /**
     * List of load balancer configurations for an availability group listener.
     * 
     */
    @Import(name="loadBalancerConfigurations")
    private @Nullable Output<List<LoadBalancerConfigurationArgs>> loadBalancerConfigurations;

    public Optional<Output<List<LoadBalancerConfigurationArgs>>> loadBalancerConfigurations() {
        return Optional.ofNullable(this.loadBalancerConfigurations);
    }

    /**
     * Listener port.
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * Name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Name of the SQL virtual machine group.
     * 
     */
    @Import(name="sqlVirtualMachineGroupName", required=true)
    private Output<String> sqlVirtualMachineGroupName;

    public Output<String> sqlVirtualMachineGroupName() {
        return this.sqlVirtualMachineGroupName;
    }

    private AvailabilityGroupListenerArgs() {}

    private AvailabilityGroupListenerArgs(AvailabilityGroupListenerArgs $) {
        this.availabilityGroupListenerName = $.availabilityGroupListenerName;
        this.availabilityGroupName = $.availabilityGroupName;
        this.createDefaultAvailabilityGroupIfNotExist = $.createDefaultAvailabilityGroupIfNotExist;
        this.loadBalancerConfigurations = $.loadBalancerConfigurations;
        this.port = $.port;
        this.resourceGroupName = $.resourceGroupName;
        this.sqlVirtualMachineGroupName = $.sqlVirtualMachineGroupName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AvailabilityGroupListenerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AvailabilityGroupListenerArgs $;

        public Builder() {
            $ = new AvailabilityGroupListenerArgs();
        }

        public Builder(AvailabilityGroupListenerArgs defaults) {
            $ = new AvailabilityGroupListenerArgs(Objects.requireNonNull(defaults));
        }

        public Builder availabilityGroupListenerName(@Nullable Output<String> availabilityGroupListenerName) {
            $.availabilityGroupListenerName = availabilityGroupListenerName;
            return this;
        }

        public Builder availabilityGroupListenerName(String availabilityGroupListenerName) {
            return availabilityGroupListenerName(Output.of(availabilityGroupListenerName));
        }

        public Builder availabilityGroupName(@Nullable Output<String> availabilityGroupName) {
            $.availabilityGroupName = availabilityGroupName;
            return this;
        }

        public Builder availabilityGroupName(String availabilityGroupName) {
            return availabilityGroupName(Output.of(availabilityGroupName));
        }

        public Builder createDefaultAvailabilityGroupIfNotExist(@Nullable Output<Boolean> createDefaultAvailabilityGroupIfNotExist) {
            $.createDefaultAvailabilityGroupIfNotExist = createDefaultAvailabilityGroupIfNotExist;
            return this;
        }

        public Builder createDefaultAvailabilityGroupIfNotExist(Boolean createDefaultAvailabilityGroupIfNotExist) {
            return createDefaultAvailabilityGroupIfNotExist(Output.of(createDefaultAvailabilityGroupIfNotExist));
        }

        public Builder loadBalancerConfigurations(@Nullable Output<List<LoadBalancerConfigurationArgs>> loadBalancerConfigurations) {
            $.loadBalancerConfigurations = loadBalancerConfigurations;
            return this;
        }

        public Builder loadBalancerConfigurations(List<LoadBalancerConfigurationArgs> loadBalancerConfigurations) {
            return loadBalancerConfigurations(Output.of(loadBalancerConfigurations));
        }

        public Builder loadBalancerConfigurations(LoadBalancerConfigurationArgs... loadBalancerConfigurations) {
            return loadBalancerConfigurations(List.of(loadBalancerConfigurations));
        }

        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder sqlVirtualMachineGroupName(Output<String> sqlVirtualMachineGroupName) {
            $.sqlVirtualMachineGroupName = sqlVirtualMachineGroupName;
            return this;
        }

        public Builder sqlVirtualMachineGroupName(String sqlVirtualMachineGroupName) {
            return sqlVirtualMachineGroupName(Output.of(sqlVirtualMachineGroupName));
        }

        public AvailabilityGroupListenerArgs build() {
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.sqlVirtualMachineGroupName = Objects.requireNonNull($.sqlVirtualMachineGroupName, "expected parameter 'sqlVirtualMachineGroupName' to be non-null");
            return $;
        }
    }

}
