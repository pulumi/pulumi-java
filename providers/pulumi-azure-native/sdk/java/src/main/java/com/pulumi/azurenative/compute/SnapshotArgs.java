// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.compute;

import com.pulumi.azurenative.compute.enums.HyperVGeneration;
import com.pulumi.azurenative.compute.enums.NetworkAccessPolicy;
import com.pulumi.azurenative.compute.enums.OperatingSystemTypes;
import com.pulumi.azurenative.compute.inputs.CreationDataArgs;
import com.pulumi.azurenative.compute.inputs.EncryptionArgs;
import com.pulumi.azurenative.compute.inputs.EncryptionSettingsCollectionArgs;
import com.pulumi.azurenative.compute.inputs.ExtendedLocationArgs;
import com.pulumi.azurenative.compute.inputs.PurchasePlanArgs;
import com.pulumi.azurenative.compute.inputs.SnapshotSkuArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SnapshotArgs extends com.pulumi.resources.ResourceArgs {

    public static final SnapshotArgs Empty = new SnapshotArgs();

    /**
     * Disk source information. CreationData information cannot be changed after the disk has been created.
     * 
     */
    @Import(name="creationData", required=true)
    private Output<CreationDataArgs> creationData;

    public Output<CreationDataArgs> creationData() {
        return this.creationData;
    }

    /**
     * ARM id of the DiskAccess resource for using private endpoints on disks.
     * 
     */
    @Import(name="diskAccessId")
    private @Nullable Output<String> diskAccessId;

    public Optional<Output<String>> diskAccessId() {
        return Optional.ofNullable(this.diskAccessId);
    }

    /**
     * If creationData.createOption is Empty, this field is mandatory and it indicates the size of the disk to create. If this field is present for updates or creation with other options, it indicates a resize. Resizes are only allowed if the disk is not attached to a running VM, and can only increase the disk&#39;s size.
     * 
     */
    @Import(name="diskSizeGB")
    private @Nullable Output<Integer> diskSizeGB;

    public Optional<Output<Integer>> diskSizeGB() {
        return Optional.ofNullable(this.diskSizeGB);
    }

    /**
     * Encryption property can be used to encrypt data at rest with customer managed keys or platform managed keys.
     * 
     */
    @Import(name="encryption")
    private @Nullable Output<EncryptionArgs> encryption;

    public Optional<Output<EncryptionArgs>> encryption() {
        return Optional.ofNullable(this.encryption);
    }

    /**
     * Encryption settings collection used be Azure Disk Encryption, can contain multiple encryption settings per disk or snapshot.
     * 
     */
    @Import(name="encryptionSettingsCollection")
    private @Nullable Output<EncryptionSettingsCollectionArgs> encryptionSettingsCollection;

    public Optional<Output<EncryptionSettingsCollectionArgs>> encryptionSettingsCollection() {
        return Optional.ofNullable(this.encryptionSettingsCollection);
    }

    /**
     * The extended location where the snapshot will be created. Extended location cannot be changed.
     * 
     */
    @Import(name="extendedLocation")
    private @Nullable Output<ExtendedLocationArgs> extendedLocation;

    public Optional<Output<ExtendedLocationArgs>> extendedLocation() {
        return Optional.ofNullable(this.extendedLocation);
    }

    /**
     * The hypervisor generation of the Virtual Machine. Applicable to OS disks only.
     * 
     */
    @Import(name="hyperVGeneration")
    private @Nullable Output<Either<String,HyperVGeneration>> hyperVGeneration;

    public Optional<Output<Either<String,HyperVGeneration>>> hyperVGeneration() {
        return Optional.ofNullable(this.hyperVGeneration);
    }

    /**
     * Whether a snapshot is incremental. Incremental snapshots on the same disk occupy less space than full snapshots and can be diffed.
     * 
     */
    @Import(name="incremental")
    private @Nullable Output<Boolean> incremental;

    public Optional<Output<Boolean>> incremental() {
        return Optional.ofNullable(this.incremental);
    }

    /**
     * Resource location
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Policy for accessing the disk via network.
     * 
     */
    @Import(name="networkAccessPolicy")
    private @Nullable Output<Either<String,NetworkAccessPolicy>> networkAccessPolicy;

    public Optional<Output<Either<String,NetworkAccessPolicy>>> networkAccessPolicy() {
        return Optional.ofNullable(this.networkAccessPolicy);
    }

    /**
     * The Operating System type.
     * 
     */
    @Import(name="osType")
    private @Nullable Output<OperatingSystemTypes> osType;

    public Optional<Output<OperatingSystemTypes>> osType() {
        return Optional.ofNullable(this.osType);
    }

    /**
     * Purchase plan information for the image from which the source disk for the snapshot was originally created.
     * 
     */
    @Import(name="purchasePlan")
    private @Nullable Output<PurchasePlanArgs> purchasePlan;

    public Optional<Output<PurchasePlanArgs>> purchasePlan() {
        return Optional.ofNullable(this.purchasePlan);
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The snapshots sku name. Can be Standard_LRS, Premium_LRS, or Standard_ZRS. This is an optional parameter for incremental snapshot and the default behavior is the SKU will be set to the same sku as the previous snapshot
     * 
     */
    @Import(name="sku")
    private @Nullable Output<SnapshotSkuArgs> sku;

    public Optional<Output<SnapshotSkuArgs>> sku() {
        return Optional.ofNullable(this.sku);
    }

    /**
     * The name of the snapshot that is being created. The name can&#39;t be changed after the snapshot is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The max name length is 80 characters.
     * 
     */
    @Import(name="snapshotName")
    private @Nullable Output<String> snapshotName;

    public Optional<Output<String>> snapshotName() {
        return Optional.ofNullable(this.snapshotName);
    }

    /**
     * Indicates the OS on a snapshot supports hibernation.
     * 
     */
    @Import(name="supportsHibernation")
    private @Nullable Output<Boolean> supportsHibernation;

    public Optional<Output<Boolean>> supportsHibernation() {
        return Optional.ofNullable(this.supportsHibernation);
    }

    /**
     * Resource tags
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private SnapshotArgs() {}

    private SnapshotArgs(SnapshotArgs $) {
        this.creationData = $.creationData;
        this.diskAccessId = $.diskAccessId;
        this.diskSizeGB = $.diskSizeGB;
        this.encryption = $.encryption;
        this.encryptionSettingsCollection = $.encryptionSettingsCollection;
        this.extendedLocation = $.extendedLocation;
        this.hyperVGeneration = $.hyperVGeneration;
        this.incremental = $.incremental;
        this.location = $.location;
        this.networkAccessPolicy = $.networkAccessPolicy;
        this.osType = $.osType;
        this.purchasePlan = $.purchasePlan;
        this.resourceGroupName = $.resourceGroupName;
        this.sku = $.sku;
        this.snapshotName = $.snapshotName;
        this.supportsHibernation = $.supportsHibernation;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SnapshotArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SnapshotArgs $;

        public Builder() {
            $ = new SnapshotArgs();
        }

        public Builder(SnapshotArgs defaults) {
            $ = new SnapshotArgs(Objects.requireNonNull(defaults));
        }

        public Builder creationData(Output<CreationDataArgs> creationData) {
            $.creationData = creationData;
            return this;
        }

        public Builder creationData(CreationDataArgs creationData) {
            return creationData(Output.of(creationData));
        }

        public Builder diskAccessId(@Nullable Output<String> diskAccessId) {
            $.diskAccessId = diskAccessId;
            return this;
        }

        public Builder diskAccessId(String diskAccessId) {
            return diskAccessId(Output.of(diskAccessId));
        }

        public Builder diskSizeGB(@Nullable Output<Integer> diskSizeGB) {
            $.diskSizeGB = diskSizeGB;
            return this;
        }

        public Builder diskSizeGB(Integer diskSizeGB) {
            return diskSizeGB(Output.of(diskSizeGB));
        }

        public Builder encryption(@Nullable Output<EncryptionArgs> encryption) {
            $.encryption = encryption;
            return this;
        }

        public Builder encryption(EncryptionArgs encryption) {
            return encryption(Output.of(encryption));
        }

        public Builder encryptionSettingsCollection(@Nullable Output<EncryptionSettingsCollectionArgs> encryptionSettingsCollection) {
            $.encryptionSettingsCollection = encryptionSettingsCollection;
            return this;
        }

        public Builder encryptionSettingsCollection(EncryptionSettingsCollectionArgs encryptionSettingsCollection) {
            return encryptionSettingsCollection(Output.of(encryptionSettingsCollection));
        }

        public Builder extendedLocation(@Nullable Output<ExtendedLocationArgs> extendedLocation) {
            $.extendedLocation = extendedLocation;
            return this;
        }

        public Builder extendedLocation(ExtendedLocationArgs extendedLocation) {
            return extendedLocation(Output.of(extendedLocation));
        }

        public Builder hyperVGeneration(@Nullable Output<Either<String,HyperVGeneration>> hyperVGeneration) {
            $.hyperVGeneration = hyperVGeneration;
            return this;
        }

        public Builder hyperVGeneration(Either<String,HyperVGeneration> hyperVGeneration) {
            return hyperVGeneration(Output.of(hyperVGeneration));
        }

        public Builder hyperVGeneration(String hyperVGeneration) {
            return hyperVGeneration(Either.ofLeft(hyperVGeneration));
        }

        public Builder hyperVGeneration(HyperVGeneration hyperVGeneration) {
            return hyperVGeneration(Either.ofRight(hyperVGeneration));
        }

        public Builder incremental(@Nullable Output<Boolean> incremental) {
            $.incremental = incremental;
            return this;
        }

        public Builder incremental(Boolean incremental) {
            return incremental(Output.of(incremental));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder networkAccessPolicy(@Nullable Output<Either<String,NetworkAccessPolicy>> networkAccessPolicy) {
            $.networkAccessPolicy = networkAccessPolicy;
            return this;
        }

        public Builder networkAccessPolicy(Either<String,NetworkAccessPolicy> networkAccessPolicy) {
            return networkAccessPolicy(Output.of(networkAccessPolicy));
        }

        public Builder networkAccessPolicy(String networkAccessPolicy) {
            return networkAccessPolicy(Either.ofLeft(networkAccessPolicy));
        }

        public Builder networkAccessPolicy(NetworkAccessPolicy networkAccessPolicy) {
            return networkAccessPolicy(Either.ofRight(networkAccessPolicy));
        }

        public Builder osType(@Nullable Output<OperatingSystemTypes> osType) {
            $.osType = osType;
            return this;
        }

        public Builder osType(OperatingSystemTypes osType) {
            return osType(Output.of(osType));
        }

        public Builder purchasePlan(@Nullable Output<PurchasePlanArgs> purchasePlan) {
            $.purchasePlan = purchasePlan;
            return this;
        }

        public Builder purchasePlan(PurchasePlanArgs purchasePlan) {
            return purchasePlan(Output.of(purchasePlan));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder sku(@Nullable Output<SnapshotSkuArgs> sku) {
            $.sku = sku;
            return this;
        }

        public Builder sku(SnapshotSkuArgs sku) {
            return sku(Output.of(sku));
        }

        public Builder snapshotName(@Nullable Output<String> snapshotName) {
            $.snapshotName = snapshotName;
            return this;
        }

        public Builder snapshotName(String snapshotName) {
            return snapshotName(Output.of(snapshotName));
        }

        public Builder supportsHibernation(@Nullable Output<Boolean> supportsHibernation) {
            $.supportsHibernation = supportsHibernation;
            return this;
        }

        public Builder supportsHibernation(Boolean supportsHibernation) {
            return supportsHibernation(Output.of(supportsHibernation));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public SnapshotArgs build() {
            $.creationData = Objects.requireNonNull($.creationData, "expected parameter 'creationData' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
