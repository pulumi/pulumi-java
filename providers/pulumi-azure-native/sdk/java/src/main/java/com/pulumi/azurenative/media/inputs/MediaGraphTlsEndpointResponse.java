// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.media.inputs;

import com.pulumi.azurenative.media.inputs.MediaGraphPemCertificateListResponse;
import com.pulumi.azurenative.media.inputs.MediaGraphTlsValidationOptionsResponse;
import com.pulumi.azurenative.media.inputs.MediaGraphUsernamePasswordCredentialsResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * An endpoint which must be connected over TLS/SSL.
 * 
 */
public final class MediaGraphTlsEndpointResponse extends com.pulumi.resources.InvokeArgs {

    public static final MediaGraphTlsEndpointResponse Empty = new MediaGraphTlsEndpointResponse();

    /**
     * Polymorphic credentials to present to the endpoint.
     * 
     */
    @Import(name="credentials")
    private @Nullable MediaGraphUsernamePasswordCredentialsResponse credentials;

    public Optional<MediaGraphUsernamePasswordCredentialsResponse> credentials() {
        return Optional.ofNullable(this.credentials);
    }

    /**
     * The discriminator for derived types.
     * Expected value is &#39;#Microsoft.Media.MediaGraphTlsEndpoint&#39;.
     * 
     */
    @Import(name="odataType", required=true)
    private String odataType;

    public String odataType() {
        return this.odataType;
    }

    /**
     * What certificates should be trusted when authenticating a TLS connection. Null designates that Azure Media&#39;s source of trust should be used.
     * 
     */
    @Import(name="trustedCertificates")
    private @Nullable MediaGraphPemCertificateListResponse trustedCertificates;

    public Optional<MediaGraphPemCertificateListResponse> trustedCertificates() {
        return Optional.ofNullable(this.trustedCertificates);
    }

    /**
     * Url for the endpoint.
     * 
     */
    @Import(name="url", required=true)
    private String url;

    public String url() {
        return this.url;
    }

    /**
     * Validation options to use when authenticating a TLS connection. By default, strict validation is used.
     * 
     */
    @Import(name="validationOptions")
    private @Nullable MediaGraphTlsValidationOptionsResponse validationOptions;

    public Optional<MediaGraphTlsValidationOptionsResponse> validationOptions() {
        return Optional.ofNullable(this.validationOptions);
    }

    private MediaGraphTlsEndpointResponse() {}

    private MediaGraphTlsEndpointResponse(MediaGraphTlsEndpointResponse $) {
        this.credentials = $.credentials;
        this.odataType = $.odataType;
        this.trustedCertificates = $.trustedCertificates;
        this.url = $.url;
        this.validationOptions = $.validationOptions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MediaGraphTlsEndpointResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MediaGraphTlsEndpointResponse $;

        public Builder() {
            $ = new MediaGraphTlsEndpointResponse();
        }

        public Builder(MediaGraphTlsEndpointResponse defaults) {
            $ = new MediaGraphTlsEndpointResponse(Objects.requireNonNull(defaults));
        }

        public Builder credentials(@Nullable MediaGraphUsernamePasswordCredentialsResponse credentials) {
            $.credentials = credentials;
            return this;
        }

        public Builder odataType(String odataType) {
            $.odataType = odataType;
            return this;
        }

        public Builder trustedCertificates(@Nullable MediaGraphPemCertificateListResponse trustedCertificates) {
            $.trustedCertificates = trustedCertificates;
            return this;
        }

        public Builder url(String url) {
            $.url = url;
            return this;
        }

        public Builder validationOptions(@Nullable MediaGraphTlsValidationOptionsResponse validationOptions) {
            $.validationOptions = validationOptions;
            return this;
        }

        public MediaGraphTlsEndpointResponse build() {
            $.odataType = Codegen.stringProp("odataType").arg($.odataType).require();
            $.url = Objects.requireNonNull($.url, "expected parameter 'url' to be non-null");
            return $;
        }
    }

}
