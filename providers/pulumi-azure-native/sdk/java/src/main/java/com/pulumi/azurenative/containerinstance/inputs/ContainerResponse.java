// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.containerinstance.inputs;

import com.pulumi.azurenative.containerinstance.inputs.ContainerPortResponse;
import com.pulumi.azurenative.containerinstance.inputs.ContainerProbeResponse;
import com.pulumi.azurenative.containerinstance.inputs.ContainerPropertiesResponseInstanceView;
import com.pulumi.azurenative.containerinstance.inputs.EnvironmentVariableResponse;
import com.pulumi.azurenative.containerinstance.inputs.ResourceRequirementsResponse;
import com.pulumi.azurenative.containerinstance.inputs.VolumeMountResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A container instance.
 * 
 */
public final class ContainerResponse extends com.pulumi.resources.InvokeArgs {

    public static final ContainerResponse Empty = new ContainerResponse();

    /**
     * The commands to execute within the container instance in exec form.
     * 
     */
    @Import(name="command")
      private final @Nullable List<String> command;

    public List<String> command() {
        return this.command == null ? List.of() : this.command;
    }

    /**
     * The environment variables to set in the container instance.
     * 
     */
    @Import(name="environmentVariables")
      private final @Nullable List<EnvironmentVariableResponse> environmentVariables;

    public List<EnvironmentVariableResponse> environmentVariables() {
        return this.environmentVariables == null ? List.of() : this.environmentVariables;
    }

    /**
     * The name of the image used to create the container instance.
     * 
     */
    @Import(name="image", required=true)
      private final String image;

    public String image() {
        return this.image;
    }

    /**
     * The instance view of the container instance. Only valid in response.
     * 
     */
    @Import(name="instanceView", required=true)
      private final ContainerPropertiesResponseInstanceView instanceView;

    public ContainerPropertiesResponseInstanceView instanceView() {
        return this.instanceView;
    }

    /**
     * The liveness probe.
     * 
     */
    @Import(name="livenessProbe")
      private final @Nullable ContainerProbeResponse livenessProbe;

    public Optional<ContainerProbeResponse> livenessProbe() {
        return this.livenessProbe == null ? Optional.empty() : Optional.ofNullable(this.livenessProbe);
    }

    /**
     * The user-provided name of the container instance.
     * 
     */
    @Import(name="name", required=true)
      private final String name;

    public String name() {
        return this.name;
    }

    /**
     * The exposed ports on the container instance.
     * 
     */
    @Import(name="ports")
      private final @Nullable List<ContainerPortResponse> ports;

    public List<ContainerPortResponse> ports() {
        return this.ports == null ? List.of() : this.ports;
    }

    /**
     * The readiness probe.
     * 
     */
    @Import(name="readinessProbe")
      private final @Nullable ContainerProbeResponse readinessProbe;

    public Optional<ContainerProbeResponse> readinessProbe() {
        return this.readinessProbe == null ? Optional.empty() : Optional.ofNullable(this.readinessProbe);
    }

    /**
     * The resource requirements of the container instance.
     * 
     */
    @Import(name="resources", required=true)
      private final ResourceRequirementsResponse resources;

    public ResourceRequirementsResponse resources() {
        return this.resources;
    }

    /**
     * The volume mounts available to the container instance.
     * 
     */
    @Import(name="volumeMounts")
      private final @Nullable List<VolumeMountResponse> volumeMounts;

    public List<VolumeMountResponse> volumeMounts() {
        return this.volumeMounts == null ? List.of() : this.volumeMounts;
    }

    public ContainerResponse(
        @Nullable List<String> command,
        @Nullable List<EnvironmentVariableResponse> environmentVariables,
        String image,
        ContainerPropertiesResponseInstanceView instanceView,
        @Nullable ContainerProbeResponse livenessProbe,
        String name,
        @Nullable List<ContainerPortResponse> ports,
        @Nullable ContainerProbeResponse readinessProbe,
        ResourceRequirementsResponse resources,
        @Nullable List<VolumeMountResponse> volumeMounts) {
        this.command = command;
        this.environmentVariables = environmentVariables;
        this.image = Objects.requireNonNull(image, "expected parameter 'image' to be non-null");
        this.instanceView = Objects.requireNonNull(instanceView, "expected parameter 'instanceView' to be non-null");
        this.livenessProbe = livenessProbe;
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.ports = ports;
        this.readinessProbe = readinessProbe;
        this.resources = Objects.requireNonNull(resources, "expected parameter 'resources' to be non-null");
        this.volumeMounts = volumeMounts;
    }

    private ContainerResponse() {
        this.command = List.of();
        this.environmentVariables = List.of();
        this.image = null;
        this.instanceView = null;
        this.livenessProbe = null;
        this.name = null;
        this.ports = List.of();
        this.readinessProbe = null;
        this.resources = null;
        this.volumeMounts = List.of();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ContainerResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<String> command;
        private @Nullable List<EnvironmentVariableResponse> environmentVariables;
        private String image;
        private ContainerPropertiesResponseInstanceView instanceView;
        private @Nullable ContainerProbeResponse livenessProbe;
        private String name;
        private @Nullable List<ContainerPortResponse> ports;
        private @Nullable ContainerProbeResponse readinessProbe;
        private ResourceRequirementsResponse resources;
        private @Nullable List<VolumeMountResponse> volumeMounts;

        public Builder() {
    	      // Empty
        }

        public Builder(ContainerResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.command = defaults.command;
    	      this.environmentVariables = defaults.environmentVariables;
    	      this.image = defaults.image;
    	      this.instanceView = defaults.instanceView;
    	      this.livenessProbe = defaults.livenessProbe;
    	      this.name = defaults.name;
    	      this.ports = defaults.ports;
    	      this.readinessProbe = defaults.readinessProbe;
    	      this.resources = defaults.resources;
    	      this.volumeMounts = defaults.volumeMounts;
        }

        public Builder command(@Nullable List<String> command) {
            this.command = command;
            return this;
        }
        public Builder command(String... command) {
            return command(List.of(command));
        }
        public Builder environmentVariables(@Nullable List<EnvironmentVariableResponse> environmentVariables) {
            this.environmentVariables = environmentVariables;
            return this;
        }
        public Builder environmentVariables(EnvironmentVariableResponse... environmentVariables) {
            return environmentVariables(List.of(environmentVariables));
        }
        public Builder image(String image) {
            this.image = Objects.requireNonNull(image);
            return this;
        }
        public Builder instanceView(ContainerPropertiesResponseInstanceView instanceView) {
            this.instanceView = Objects.requireNonNull(instanceView);
            return this;
        }
        public Builder livenessProbe(@Nullable ContainerProbeResponse livenessProbe) {
            this.livenessProbe = livenessProbe;
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder ports(@Nullable List<ContainerPortResponse> ports) {
            this.ports = ports;
            return this;
        }
        public Builder ports(ContainerPortResponse... ports) {
            return ports(List.of(ports));
        }
        public Builder readinessProbe(@Nullable ContainerProbeResponse readinessProbe) {
            this.readinessProbe = readinessProbe;
            return this;
        }
        public Builder resources(ResourceRequirementsResponse resources) {
            this.resources = Objects.requireNonNull(resources);
            return this;
        }
        public Builder volumeMounts(@Nullable List<VolumeMountResponse> volumeMounts) {
            this.volumeMounts = volumeMounts;
            return this;
        }
        public Builder volumeMounts(VolumeMountResponse... volumeMounts) {
            return volumeMounts(List.of(volumeMounts));
        }        public ContainerResponse build() {
            return new ContainerResponse(command, environmentVariables, image, instanceView, livenessProbe, name, ports, readinessProbe, resources, volumeMounts);
        }
    }
}
