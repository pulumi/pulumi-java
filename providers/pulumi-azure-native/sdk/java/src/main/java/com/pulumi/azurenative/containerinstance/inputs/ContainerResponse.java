// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.containerinstance.inputs;

import com.pulumi.azurenative.containerinstance.inputs.ContainerPortResponse;
import com.pulumi.azurenative.containerinstance.inputs.ContainerProbeResponse;
import com.pulumi.azurenative.containerinstance.inputs.ContainerPropertiesResponseInstanceView;
import com.pulumi.azurenative.containerinstance.inputs.EnvironmentVariableResponse;
import com.pulumi.azurenative.containerinstance.inputs.ResourceRequirementsResponse;
import com.pulumi.azurenative.containerinstance.inputs.VolumeMountResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A container instance.
 * 
 */
public final class ContainerResponse extends com.pulumi.resources.InvokeArgs {

    public static final ContainerResponse Empty = new ContainerResponse();

    /**
     * The commands to execute within the container instance in exec form.
     * 
     */
    @Import(name="command")
    private @Nullable List<String> command;

    /**
     * @return The commands to execute within the container instance in exec form.
     * 
     */
    public Optional<List<String>> command() {
        return Optional.ofNullable(this.command);
    }

    /**
     * The environment variables to set in the container instance.
     * 
     */
    @Import(name="environmentVariables")
    private @Nullable List<EnvironmentVariableResponse> environmentVariables;

    /**
     * @return The environment variables to set in the container instance.
     * 
     */
    public Optional<List<EnvironmentVariableResponse>> environmentVariables() {
        return Optional.ofNullable(this.environmentVariables);
    }

    /**
     * The name of the image used to create the container instance.
     * 
     */
    @Import(name="image", required=true)
    private String image;

    /**
     * @return The name of the image used to create the container instance.
     * 
     */
    public String image() {
        return this.image;
    }

    /**
     * The instance view of the container instance. Only valid in response.
     * 
     */
    @Import(name="instanceView", required=true)
    private ContainerPropertiesResponseInstanceView instanceView;

    /**
     * @return The instance view of the container instance. Only valid in response.
     * 
     */
    public ContainerPropertiesResponseInstanceView instanceView() {
        return this.instanceView;
    }

    /**
     * The liveness probe.
     * 
     */
    @Import(name="livenessProbe")
    private @Nullable ContainerProbeResponse livenessProbe;

    /**
     * @return The liveness probe.
     * 
     */
    public Optional<ContainerProbeResponse> livenessProbe() {
        return Optional.ofNullable(this.livenessProbe);
    }

    /**
     * The user-provided name of the container instance.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return The user-provided name of the container instance.
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * The exposed ports on the container instance.
     * 
     */
    @Import(name="ports")
    private @Nullable List<ContainerPortResponse> ports;

    /**
     * @return The exposed ports on the container instance.
     * 
     */
    public Optional<List<ContainerPortResponse>> ports() {
        return Optional.ofNullable(this.ports);
    }

    /**
     * The readiness probe.
     * 
     */
    @Import(name="readinessProbe")
    private @Nullable ContainerProbeResponse readinessProbe;

    /**
     * @return The readiness probe.
     * 
     */
    public Optional<ContainerProbeResponse> readinessProbe() {
        return Optional.ofNullable(this.readinessProbe);
    }

    /**
     * The resource requirements of the container instance.
     * 
     */
    @Import(name="resources", required=true)
    private ResourceRequirementsResponse resources;

    /**
     * @return The resource requirements of the container instance.
     * 
     */
    public ResourceRequirementsResponse resources() {
        return this.resources;
    }

    /**
     * The volume mounts available to the container instance.
     * 
     */
    @Import(name="volumeMounts")
    private @Nullable List<VolumeMountResponse> volumeMounts;

    /**
     * @return The volume mounts available to the container instance.
     * 
     */
    public Optional<List<VolumeMountResponse>> volumeMounts() {
        return Optional.ofNullable(this.volumeMounts);
    }

    private ContainerResponse() {}

    private ContainerResponse(ContainerResponse $) {
        this.command = $.command;
        this.environmentVariables = $.environmentVariables;
        this.image = $.image;
        this.instanceView = $.instanceView;
        this.livenessProbe = $.livenessProbe;
        this.name = $.name;
        this.ports = $.ports;
        this.readinessProbe = $.readinessProbe;
        this.resources = $.resources;
        this.volumeMounts = $.volumeMounts;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContainerResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContainerResponse $;

        public Builder() {
            $ = new ContainerResponse();
        }

        public Builder(ContainerResponse defaults) {
            $ = new ContainerResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param command The commands to execute within the container instance in exec form.
         * 
         * @return builder
         * 
         */
        public Builder command(@Nullable List<String> command) {
            $.command = command;
            return this;
        }

        /**
         * @param command The commands to execute within the container instance in exec form.
         * 
         * @return builder
         * 
         */
        public Builder command(String... command) {
            return command(List.of(command));
        }

        /**
         * @param environmentVariables The environment variables to set in the container instance.
         * 
         * @return builder
         * 
         */
        public Builder environmentVariables(@Nullable List<EnvironmentVariableResponse> environmentVariables) {
            $.environmentVariables = environmentVariables;
            return this;
        }

        /**
         * @param environmentVariables The environment variables to set in the container instance.
         * 
         * @return builder
         * 
         */
        public Builder environmentVariables(EnvironmentVariableResponse... environmentVariables) {
            return environmentVariables(List.of(environmentVariables));
        }

        /**
         * @param image The name of the image used to create the container instance.
         * 
         * @return builder
         * 
         */
        public Builder image(String image) {
            $.image = image;
            return this;
        }

        /**
         * @param instanceView The instance view of the container instance. Only valid in response.
         * 
         * @return builder
         * 
         */
        public Builder instanceView(ContainerPropertiesResponseInstanceView instanceView) {
            $.instanceView = instanceView;
            return this;
        }

        /**
         * @param livenessProbe The liveness probe.
         * 
         * @return builder
         * 
         */
        public Builder livenessProbe(@Nullable ContainerProbeResponse livenessProbe) {
            $.livenessProbe = livenessProbe;
            return this;
        }

        /**
         * @param name The user-provided name of the container instance.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param ports The exposed ports on the container instance.
         * 
         * @return builder
         * 
         */
        public Builder ports(@Nullable List<ContainerPortResponse> ports) {
            $.ports = ports;
            return this;
        }

        /**
         * @param ports The exposed ports on the container instance.
         * 
         * @return builder
         * 
         */
        public Builder ports(ContainerPortResponse... ports) {
            return ports(List.of(ports));
        }

        /**
         * @param readinessProbe The readiness probe.
         * 
         * @return builder
         * 
         */
        public Builder readinessProbe(@Nullable ContainerProbeResponse readinessProbe) {
            $.readinessProbe = readinessProbe;
            return this;
        }

        /**
         * @param resources The resource requirements of the container instance.
         * 
         * @return builder
         * 
         */
        public Builder resources(ResourceRequirementsResponse resources) {
            $.resources = resources;
            return this;
        }

        /**
         * @param volumeMounts The volume mounts available to the container instance.
         * 
         * @return builder
         * 
         */
        public Builder volumeMounts(@Nullable List<VolumeMountResponse> volumeMounts) {
            $.volumeMounts = volumeMounts;
            return this;
        }

        /**
         * @param volumeMounts The volume mounts available to the container instance.
         * 
         * @return builder
         * 
         */
        public Builder volumeMounts(VolumeMountResponse... volumeMounts) {
            return volumeMounts(List.of(volumeMounts));
        }

        public ContainerResponse build() {
            $.image = Objects.requireNonNull($.image, "expected parameter 'image' to be non-null");
            $.instanceView = Objects.requireNonNull($.instanceView, "expected parameter 'instanceView' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.resources = Objects.requireNonNull($.resources, "expected parameter 'resources' to be non-null");
            return $;
        }
    }

}
