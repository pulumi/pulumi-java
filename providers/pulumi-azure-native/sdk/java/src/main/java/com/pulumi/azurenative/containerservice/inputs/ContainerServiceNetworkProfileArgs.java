// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.containerservice.inputs;

import com.pulumi.azurenative.containerservice.enums.LoadBalancerSku;
import com.pulumi.azurenative.containerservice.enums.NetworkMode;
import com.pulumi.azurenative.containerservice.enums.NetworkPlugin;
import com.pulumi.azurenative.containerservice.enums.NetworkPolicy;
import com.pulumi.azurenative.containerservice.enums.OutboundType;
import com.pulumi.azurenative.containerservice.inputs.ManagedClusterLoadBalancerProfileArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Profile of network configuration.
 * 
 */
public final class ContainerServiceNetworkProfileArgs extends com.pulumi.resources.ResourceArgs {

    public static final ContainerServiceNetworkProfileArgs Empty = new ContainerServiceNetworkProfileArgs();

    /**
     * An IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified in serviceCidr.
     * 
     */
    @Import(name="dnsServiceIP")
      private final @Nullable Output<String> dnsServiceIP;

    public Output<String> dnsServiceIP() {
        return this.dnsServiceIP == null ? Codegen.empty() : this.dnsServiceIP;
    }

    /**
     * A CIDR notation IP range assigned to the Docker bridge network. It must not overlap with any Subnet IP ranges or the Kubernetes service address range.
     * 
     */
    @Import(name="dockerBridgeCidr")
      private final @Nullable Output<String> dockerBridgeCidr;

    public Output<String> dockerBridgeCidr() {
        return this.dockerBridgeCidr == null ? Codegen.empty() : this.dockerBridgeCidr;
    }

    /**
     * Profile of the cluster load balancer.
     * 
     */
    @Import(name="loadBalancerProfile")
      private final @Nullable Output<ManagedClusterLoadBalancerProfileArgs> loadBalancerProfile;

    public Output<ManagedClusterLoadBalancerProfileArgs> loadBalancerProfile() {
        return this.loadBalancerProfile == null ? Codegen.empty() : this.loadBalancerProfile;
    }

    /**
     * The load balancer sku for the managed cluster.
     * 
     */
    @Import(name="loadBalancerSku")
      private final @Nullable Output<Either<String,LoadBalancerSku>> loadBalancerSku;

    public Output<Either<String,LoadBalancerSku>> loadBalancerSku() {
        return this.loadBalancerSku == null ? Codegen.empty() : this.loadBalancerSku;
    }

    /**
     * Network mode used for building Kubernetes network.
     * 
     */
    @Import(name="networkMode")
      private final @Nullable Output<Either<String,NetworkMode>> networkMode;

    public Output<Either<String,NetworkMode>> networkMode() {
        return this.networkMode == null ? Codegen.empty() : this.networkMode;
    }

    /**
     * Network plugin used for building Kubernetes network.
     * 
     */
    @Import(name="networkPlugin")
      private final @Nullable Output<Either<String,NetworkPlugin>> networkPlugin;

    public Output<Either<String,NetworkPlugin>> networkPlugin() {
        return this.networkPlugin == null ? Codegen.empty() : this.networkPlugin;
    }

    /**
     * Network policy used for building Kubernetes network.
     * 
     */
    @Import(name="networkPolicy")
      private final @Nullable Output<Either<String,NetworkPolicy>> networkPolicy;

    public Output<Either<String,NetworkPolicy>> networkPolicy() {
        return this.networkPolicy == null ? Codegen.empty() : this.networkPolicy;
    }

    /**
     * The outbound (egress) routing method.
     * 
     */
    @Import(name="outboundType")
      private final @Nullable Output<Either<String,OutboundType>> outboundType;

    public Output<Either<String,OutboundType>> outboundType() {
        return this.outboundType == null ? Codegen.empty() : this.outboundType;
    }

    /**
     * A CIDR notation IP range from which to assign pod IPs when kubenet is used.
     * 
     */
    @Import(name="podCidr")
      private final @Nullable Output<String> podCidr;

    public Output<String> podCidr() {
        return this.podCidr == null ? Codegen.empty() : this.podCidr;
    }

    /**
     * A CIDR notation IP range from which to assign service cluster IPs. It must not overlap with any Subnet IP ranges.
     * 
     */
    @Import(name="serviceCidr")
      private final @Nullable Output<String> serviceCidr;

    public Output<String> serviceCidr() {
        return this.serviceCidr == null ? Codegen.empty() : this.serviceCidr;
    }

    public ContainerServiceNetworkProfileArgs(
        @Nullable Output<String> dnsServiceIP,
        @Nullable Output<String> dockerBridgeCidr,
        @Nullable Output<ManagedClusterLoadBalancerProfileArgs> loadBalancerProfile,
        @Nullable Output<Either<String,LoadBalancerSku>> loadBalancerSku,
        @Nullable Output<Either<String,NetworkMode>> networkMode,
        @Nullable Output<Either<String,NetworkPlugin>> networkPlugin,
        @Nullable Output<Either<String,NetworkPolicy>> networkPolicy,
        @Nullable Output<Either<String,OutboundType>> outboundType,
        @Nullable Output<String> podCidr,
        @Nullable Output<String> serviceCidr) {
        this.dnsServiceIP = Codegen.stringProp("dnsServiceIP").output().arg(dnsServiceIP).def("10.0.0.10").getNullable();
        this.dockerBridgeCidr = Codegen.stringProp("dockerBridgeCidr").output().arg(dockerBridgeCidr).def("172.17.0.1/16").getNullable();
        this.loadBalancerProfile = loadBalancerProfile;
        this.loadBalancerSku = loadBalancerSku;
        this.networkMode = networkMode;
        this.networkPlugin = Codegen.stringProp("networkPlugin").left(NetworkPlugin.class).output().arg(networkPlugin).def("kubenet").getNullable();
        this.networkPolicy = networkPolicy;
        this.outboundType = Codegen.stringProp("outboundType").left(OutboundType.class).output().arg(outboundType).def("loadBalancer").getNullable();
        this.podCidr = Codegen.stringProp("podCidr").output().arg(podCidr).def("10.244.0.0/16").getNullable();
        this.serviceCidr = Codegen.stringProp("serviceCidr").output().arg(serviceCidr).def("10.0.0.0/16").getNullable();
    }

    private ContainerServiceNetworkProfileArgs() {
        this.dnsServiceIP = Codegen.empty();
        this.dockerBridgeCidr = Codegen.empty();
        this.loadBalancerProfile = Codegen.empty();
        this.loadBalancerSku = Codegen.empty();
        this.networkMode = Codegen.empty();
        this.networkPlugin = Codegen.empty();
        this.networkPolicy = Codegen.empty();
        this.outboundType = Codegen.empty();
        this.podCidr = Codegen.empty();
        this.serviceCidr = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ContainerServiceNetworkProfileArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> dnsServiceIP;
        private @Nullable Output<String> dockerBridgeCidr;
        private @Nullable Output<ManagedClusterLoadBalancerProfileArgs> loadBalancerProfile;
        private @Nullable Output<Either<String,LoadBalancerSku>> loadBalancerSku;
        private @Nullable Output<Either<String,NetworkMode>> networkMode;
        private @Nullable Output<Either<String,NetworkPlugin>> networkPlugin;
        private @Nullable Output<Either<String,NetworkPolicy>> networkPolicy;
        private @Nullable Output<Either<String,OutboundType>> outboundType;
        private @Nullable Output<String> podCidr;
        private @Nullable Output<String> serviceCidr;

        public Builder() {
    	      // Empty
        }

        public Builder(ContainerServiceNetworkProfileArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dnsServiceIP = defaults.dnsServiceIP;
    	      this.dockerBridgeCidr = defaults.dockerBridgeCidr;
    	      this.loadBalancerProfile = defaults.loadBalancerProfile;
    	      this.loadBalancerSku = defaults.loadBalancerSku;
    	      this.networkMode = defaults.networkMode;
    	      this.networkPlugin = defaults.networkPlugin;
    	      this.networkPolicy = defaults.networkPolicy;
    	      this.outboundType = defaults.outboundType;
    	      this.podCidr = defaults.podCidr;
    	      this.serviceCidr = defaults.serviceCidr;
        }

        public Builder dnsServiceIP(@Nullable Output<String> dnsServiceIP) {
            this.dnsServiceIP = dnsServiceIP;
            return this;
        }
        public Builder dnsServiceIP(@Nullable String dnsServiceIP) {
            this.dnsServiceIP = Codegen.ofNullable(dnsServiceIP);
            return this;
        }
        public Builder dockerBridgeCidr(@Nullable Output<String> dockerBridgeCidr) {
            this.dockerBridgeCidr = dockerBridgeCidr;
            return this;
        }
        public Builder dockerBridgeCidr(@Nullable String dockerBridgeCidr) {
            this.dockerBridgeCidr = Codegen.ofNullable(dockerBridgeCidr);
            return this;
        }
        public Builder loadBalancerProfile(@Nullable Output<ManagedClusterLoadBalancerProfileArgs> loadBalancerProfile) {
            this.loadBalancerProfile = loadBalancerProfile;
            return this;
        }
        public Builder loadBalancerProfile(@Nullable ManagedClusterLoadBalancerProfileArgs loadBalancerProfile) {
            this.loadBalancerProfile = Codegen.ofNullable(loadBalancerProfile);
            return this;
        }
        public Builder loadBalancerSku(@Nullable Output<Either<String,LoadBalancerSku>> loadBalancerSku) {
            this.loadBalancerSku = loadBalancerSku;
            return this;
        }
        public Builder loadBalancerSku(@Nullable Either<String,LoadBalancerSku> loadBalancerSku) {
            this.loadBalancerSku = Codegen.ofNullable(loadBalancerSku);
            return this;
        }
        public Builder networkMode(@Nullable Output<Either<String,NetworkMode>> networkMode) {
            this.networkMode = networkMode;
            return this;
        }
        public Builder networkMode(@Nullable Either<String,NetworkMode> networkMode) {
            this.networkMode = Codegen.ofNullable(networkMode);
            return this;
        }
        public Builder networkPlugin(@Nullable Output<Either<String,NetworkPlugin>> networkPlugin) {
            this.networkPlugin = networkPlugin;
            return this;
        }
        public Builder networkPlugin(@Nullable Either<String,NetworkPlugin> networkPlugin) {
            this.networkPlugin = Codegen.ofNullable(networkPlugin);
            return this;
        }
        public Builder networkPolicy(@Nullable Output<Either<String,NetworkPolicy>> networkPolicy) {
            this.networkPolicy = networkPolicy;
            return this;
        }
        public Builder networkPolicy(@Nullable Either<String,NetworkPolicy> networkPolicy) {
            this.networkPolicy = Codegen.ofNullable(networkPolicy);
            return this;
        }
        public Builder outboundType(@Nullable Output<Either<String,OutboundType>> outboundType) {
            this.outboundType = outboundType;
            return this;
        }
        public Builder outboundType(@Nullable Either<String,OutboundType> outboundType) {
            this.outboundType = Codegen.ofNullable(outboundType);
            return this;
        }
        public Builder podCidr(@Nullable Output<String> podCidr) {
            this.podCidr = podCidr;
            return this;
        }
        public Builder podCidr(@Nullable String podCidr) {
            this.podCidr = Codegen.ofNullable(podCidr);
            return this;
        }
        public Builder serviceCidr(@Nullable Output<String> serviceCidr) {
            this.serviceCidr = serviceCidr;
            return this;
        }
        public Builder serviceCidr(@Nullable String serviceCidr) {
            this.serviceCidr = Codegen.ofNullable(serviceCidr);
            return this;
        }        public ContainerServiceNetworkProfileArgs build() {
            return new ContainerServiceNetworkProfileArgs(dnsServiceIP, dockerBridgeCidr, loadBalancerProfile, loadBalancerSku, networkMode, networkPlugin, networkPolicy, outboundType, podCidr, serviceCidr);
        }
    }
}
