// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.powerplatform.inputs;

import com.pulumi.azurenative.powerplatform.inputs.VirtualNetworkPropertiesListArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Settings concerning network injection.
 * 
 */
public final class PropertiesNetworkInjectionArgs extends com.pulumi.resources.ResourceArgs {

    public static final PropertiesNetworkInjectionArgs Empty = new PropertiesNetworkInjectionArgs();

    /**
     * Network injection configuration
     * 
     */
    @Import(name="virtualNetworks")
    private @Nullable Output<VirtualNetworkPropertiesListArgs> virtualNetworks;

    /**
     * @return Network injection configuration
     * 
     */
    public Optional<Output<VirtualNetworkPropertiesListArgs>> virtualNetworks() {
        return Optional.ofNullable(this.virtualNetworks);
    }

    private PropertiesNetworkInjectionArgs() {}

    private PropertiesNetworkInjectionArgs(PropertiesNetworkInjectionArgs $) {
        this.virtualNetworks = $.virtualNetworks;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PropertiesNetworkInjectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PropertiesNetworkInjectionArgs $;

        public Builder() {
            $ = new PropertiesNetworkInjectionArgs();
        }

        public Builder(PropertiesNetworkInjectionArgs defaults) {
            $ = new PropertiesNetworkInjectionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param virtualNetworks Network injection configuration
         * 
         * @return builder
         * 
         */
        public Builder virtualNetworks(@Nullable Output<VirtualNetworkPropertiesListArgs> virtualNetworks) {
            $.virtualNetworks = virtualNetworks;
            return this;
        }

        /**
         * @param virtualNetworks Network injection configuration
         * 
         * @return builder
         * 
         */
        public Builder virtualNetworks(VirtualNetworkPropertiesListArgs virtualNetworks) {
            return virtualNetworks(Output.of(virtualNetworks));
        }

        public PropertiesNetworkInjectionArgs build() {
            return $;
        }
    }

}
