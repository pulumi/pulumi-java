// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.containerregistry.inputs;

import com.pulumi.azurenative.containerregistry.inputs.OverrideTaskStepPropertiesArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The parameters for a task run request.
 * 
 */
public final class TaskRunRequestArgs extends com.pulumi.resources.ResourceArgs {

    public static final TaskRunRequestArgs Empty = new TaskRunRequestArgs();

    /**
     * The dedicated agent pool for the run.
     * 
     */
    @Import(name="agentPoolName")
    private @Nullable Output<String> agentPoolName;

    /**
     * @return The dedicated agent pool for the run.
     * 
     */
    public Optional<Output<String>> agentPoolName() {
        return Optional.ofNullable(this.agentPoolName);
    }

    /**
     * The value that indicates whether archiving is enabled for the run or not.
     * 
     */
    @Import(name="isArchiveEnabled")
    private @Nullable Output<Boolean> isArchiveEnabled;

    /**
     * @return The value that indicates whether archiving is enabled for the run or not.
     * 
     */
    public Optional<Output<Boolean>> isArchiveEnabled() {
        return Optional.ofNullable(this.isArchiveEnabled);
    }

    /**
     * The template that describes the repository and tag information for run log artifact.
     * 
     */
    @Import(name="logTemplate")
    private @Nullable Output<String> logTemplate;

    /**
     * @return The template that describes the repository and tag information for run log artifact.
     * 
     */
    public Optional<Output<String>> logTemplate() {
        return Optional.ofNullable(this.logTemplate);
    }

    /**
     * Set of overridable parameters that can be passed when running a Task.
     * 
     */
    @Import(name="overrideTaskStepProperties")
    private @Nullable Output<OverrideTaskStepPropertiesArgs> overrideTaskStepProperties;

    /**
     * @return Set of overridable parameters that can be passed when running a Task.
     * 
     */
    public Optional<Output<OverrideTaskStepPropertiesArgs>> overrideTaskStepProperties() {
        return Optional.ofNullable(this.overrideTaskStepProperties);
    }

    /**
     * The resource ID of task against which run has to be queued.
     * 
     */
    @Import(name="taskId", required=true)
    private Output<String> taskId;

    /**
     * @return The resource ID of task against which run has to be queued.
     * 
     */
    public Output<String> taskId() {
        return this.taskId;
    }

    /**
     * The type of the run request.
     * Expected value is &#39;TaskRunRequest&#39;.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The type of the run request.
     * Expected value is &#39;TaskRunRequest&#39;.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private TaskRunRequestArgs() {}

    private TaskRunRequestArgs(TaskRunRequestArgs $) {
        this.agentPoolName = $.agentPoolName;
        this.isArchiveEnabled = $.isArchiveEnabled;
        this.logTemplate = $.logTemplate;
        this.overrideTaskStepProperties = $.overrideTaskStepProperties;
        this.taskId = $.taskId;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TaskRunRequestArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TaskRunRequestArgs $;

        public Builder() {
            $ = new TaskRunRequestArgs();
        }

        public Builder(TaskRunRequestArgs defaults) {
            $ = new TaskRunRequestArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param agentPoolName The dedicated agent pool for the run.
         * 
         * @return builder
         * 
         */
        public Builder agentPoolName(@Nullable Output<String> agentPoolName) {
            $.agentPoolName = agentPoolName;
            return this;
        }

        /**
         * @param agentPoolName The dedicated agent pool for the run.
         * 
         * @return builder
         * 
         */
        public Builder agentPoolName(String agentPoolName) {
            return agentPoolName(Output.of(agentPoolName));
        }

        /**
         * @param isArchiveEnabled The value that indicates whether archiving is enabled for the run or not.
         * 
         * @return builder
         * 
         */
        public Builder isArchiveEnabled(@Nullable Output<Boolean> isArchiveEnabled) {
            $.isArchiveEnabled = isArchiveEnabled;
            return this;
        }

        /**
         * @param isArchiveEnabled The value that indicates whether archiving is enabled for the run or not.
         * 
         * @return builder
         * 
         */
        public Builder isArchiveEnabled(Boolean isArchiveEnabled) {
            return isArchiveEnabled(Output.of(isArchiveEnabled));
        }

        /**
         * @param logTemplate The template that describes the repository and tag information for run log artifact.
         * 
         * @return builder
         * 
         */
        public Builder logTemplate(@Nullable Output<String> logTemplate) {
            $.logTemplate = logTemplate;
            return this;
        }

        /**
         * @param logTemplate The template that describes the repository and tag information for run log artifact.
         * 
         * @return builder
         * 
         */
        public Builder logTemplate(String logTemplate) {
            return logTemplate(Output.of(logTemplate));
        }

        /**
         * @param overrideTaskStepProperties Set of overridable parameters that can be passed when running a Task.
         * 
         * @return builder
         * 
         */
        public Builder overrideTaskStepProperties(@Nullable Output<OverrideTaskStepPropertiesArgs> overrideTaskStepProperties) {
            $.overrideTaskStepProperties = overrideTaskStepProperties;
            return this;
        }

        /**
         * @param overrideTaskStepProperties Set of overridable parameters that can be passed when running a Task.
         * 
         * @return builder
         * 
         */
        public Builder overrideTaskStepProperties(OverrideTaskStepPropertiesArgs overrideTaskStepProperties) {
            return overrideTaskStepProperties(Output.of(overrideTaskStepProperties));
        }

        /**
         * @param taskId The resource ID of task against which run has to be queued.
         * 
         * @return builder
         * 
         */
        public Builder taskId(Output<String> taskId) {
            $.taskId = taskId;
            return this;
        }

        /**
         * @param taskId The resource ID of task against which run has to be queued.
         * 
         * @return builder
         * 
         */
        public Builder taskId(String taskId) {
            return taskId(Output.of(taskId));
        }

        /**
         * @param type The type of the run request.
         * Expected value is &#39;TaskRunRequest&#39;.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of the run request.
         * Expected value is &#39;TaskRunRequest&#39;.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public TaskRunRequestArgs build() {
            $.isArchiveEnabled = Codegen.booleanProp("isArchiveEnabled").output().arg($.isArchiveEnabled).def(false).getNullable();
            $.taskId = Objects.requireNonNull($.taskId, "expected parameter 'taskId' to be non-null");
            $.type = Codegen.stringProp("type").output().arg($.type).require();
            return $;
        }
    }

}
