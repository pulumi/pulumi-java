// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.netapp.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Volume details using the backup policy
 * 
 */
public final class VolumeBackupsArgs extends com.pulumi.resources.ResourceArgs {

    public static final VolumeBackupsArgs Empty = new VolumeBackupsArgs();

    /**
     * Total count of backups for volume
     * 
     */
    @Import(name="backupsCount")
    private @Nullable Output<Integer> backupsCount;

    /**
     * @return Total count of backups for volume
     * 
     */
    public Optional<Output<Integer>> backupsCount() {
        return Optional.ofNullable(this.backupsCount);
    }

    /**
     * Policy enabled
     * 
     */
    @Import(name="policyEnabled")
    private @Nullable Output<Boolean> policyEnabled;

    /**
     * @return Policy enabled
     * 
     */
    public Optional<Output<Boolean>> policyEnabled() {
        return Optional.ofNullable(this.policyEnabled);
    }

    /**
     * Volume name
     * 
     */
    @Import(name="volumeName")
    private @Nullable Output<String> volumeName;

    /**
     * @return Volume name
     * 
     */
    public Optional<Output<String>> volumeName() {
        return Optional.ofNullable(this.volumeName);
    }

    private VolumeBackupsArgs() {}

    private VolumeBackupsArgs(VolumeBackupsArgs $) {
        this.backupsCount = $.backupsCount;
        this.policyEnabled = $.policyEnabled;
        this.volumeName = $.volumeName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VolumeBackupsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VolumeBackupsArgs $;

        public Builder() {
            $ = new VolumeBackupsArgs();
        }

        public Builder(VolumeBackupsArgs defaults) {
            $ = new VolumeBackupsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param backupsCount Total count of backups for volume
         * 
         * @return builder
         * 
         */
        public Builder backupsCount(@Nullable Output<Integer> backupsCount) {
            $.backupsCount = backupsCount;
            return this;
        }

        /**
         * @param backupsCount Total count of backups for volume
         * 
         * @return builder
         * 
         */
        public Builder backupsCount(Integer backupsCount) {
            return backupsCount(Output.of(backupsCount));
        }

        /**
         * @param policyEnabled Policy enabled
         * 
         * @return builder
         * 
         */
        public Builder policyEnabled(@Nullable Output<Boolean> policyEnabled) {
            $.policyEnabled = policyEnabled;
            return this;
        }

        /**
         * @param policyEnabled Policy enabled
         * 
         * @return builder
         * 
         */
        public Builder policyEnabled(Boolean policyEnabled) {
            return policyEnabled(Output.of(policyEnabled));
        }

        /**
         * @param volumeName Volume name
         * 
         * @return builder
         * 
         */
        public Builder volumeName(@Nullable Output<String> volumeName) {
            $.volumeName = volumeName;
            return this;
        }

        /**
         * @param volumeName Volume name
         * 
         * @return builder
         * 
         */
        public Builder volumeName(String volumeName) {
            return volumeName(Output.of(volumeName));
        }

        public VolumeBackupsArgs build() {
            return $;
        }
    }

}
