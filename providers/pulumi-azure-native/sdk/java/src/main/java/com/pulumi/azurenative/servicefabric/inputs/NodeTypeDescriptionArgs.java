// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.servicefabric.inputs;

import com.pulumi.azurenative.servicefabric.inputs.EndpointRangeDescriptionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Describes a node type in the cluster, each node type represents sub set of nodes in the cluster.
 * 
 */
public final class NodeTypeDescriptionArgs extends com.pulumi.resources.ResourceArgs {

    public static final NodeTypeDescriptionArgs Empty = new NodeTypeDescriptionArgs();

    /**
     * The range of ports from which cluster assigned port to Service Fabric applications.
     * 
     */
    @Import(name="applicationPorts")
    private @Nullable Output<EndpointRangeDescriptionArgs> applicationPorts;

    /**
     * @return The range of ports from which cluster assigned port to Service Fabric applications.
     * 
     */
    public Optional<Output<EndpointRangeDescriptionArgs>> applicationPorts() {
        return Optional.ofNullable(this.applicationPorts);
    }

    /**
     * The capacity tags applied to the nodes in the node type, the cluster resource manager uses these tags to understand how much resource a node has.
     * 
     */
    @Import(name="capacities")
    private @Nullable Output<Map<String,String>> capacities;

    /**
     * @return The capacity tags applied to the nodes in the node type, the cluster resource manager uses these tags to understand how much resource a node has.
     * 
     */
    public Optional<Output<Map<String,String>>> capacities() {
        return Optional.ofNullable(this.capacities);
    }

    /**
     * The TCP cluster management endpoint port.
     * 
     */
    @Import(name="clientConnectionEndpointPort", required=true)
    private Output<Integer> clientConnectionEndpointPort;

    /**
     * @return The TCP cluster management endpoint port.
     * 
     */
    public Output<Integer> clientConnectionEndpointPort() {
        return this.clientConnectionEndpointPort;
    }

    /**
     * The durability level of the node type. Learn about [DurabilityLevel](https://docs.microsoft.com/azure/service-fabric/service-fabric-cluster-capacity).
     * 
     *   - Bronze - No privileges. This is the default.
     *   - Silver - The infrastructure jobs can be paused for a duration of 10 minutes per UD.
     *   - Gold - The infrastructure jobs can be paused for a duration of 2 hours per UD. Gold durability can be enabled only on full node VM skus like D15_V2, G5 etc.
     * 
     */
    @Import(name="durabilityLevel")
    private @Nullable Output<String> durabilityLevel;

    /**
     * @return The durability level of the node type. Learn about [DurabilityLevel](https://docs.microsoft.com/azure/service-fabric/service-fabric-cluster-capacity).
     * 
     *   - Bronze - No privileges. This is the default.
     *   - Silver - The infrastructure jobs can be paused for a duration of 10 minutes per UD.
     *   - Gold - The infrastructure jobs can be paused for a duration of 2 hours per UD. Gold durability can be enabled only on full node VM skus like D15_V2, G5 etc.
     * 
     */
    public Optional<Output<String>> durabilityLevel() {
        return Optional.ofNullable(this.durabilityLevel);
    }

    /**
     * The range of ephemeral ports that nodes in this node type should be configured with.
     * 
     */
    @Import(name="ephemeralPorts")
    private @Nullable Output<EndpointRangeDescriptionArgs> ephemeralPorts;

    /**
     * @return The range of ephemeral ports that nodes in this node type should be configured with.
     * 
     */
    public Optional<Output<EndpointRangeDescriptionArgs>> ephemeralPorts() {
        return Optional.ofNullable(this.ephemeralPorts);
    }

    /**
     * The HTTP cluster management endpoint port.
     * 
     */
    @Import(name="httpGatewayEndpointPort", required=true)
    private Output<Integer> httpGatewayEndpointPort;

    /**
     * @return The HTTP cluster management endpoint port.
     * 
     */
    public Output<Integer> httpGatewayEndpointPort() {
        return this.httpGatewayEndpointPort;
    }

    /**
     * The node type on which system services will run. Only one node type should be marked as primary. Primary node type cannot be deleted or changed for existing clusters.
     * 
     */
    @Import(name="isPrimary", required=true)
    private Output<Boolean> isPrimary;

    /**
     * @return The node type on which system services will run. Only one node type should be marked as primary. Primary node type cannot be deleted or changed for existing clusters.
     * 
     */
    public Output<Boolean> isPrimary() {
        return this.isPrimary;
    }

    /**
     * The name of the node type.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the node type.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The placement tags applied to nodes in the node type, which can be used to indicate where certain services (workload) should run.
     * 
     */
    @Import(name="placementProperties")
    private @Nullable Output<Map<String,String>> placementProperties;

    /**
     * @return The placement tags applied to nodes in the node type, which can be used to indicate where certain services (workload) should run.
     * 
     */
    public Optional<Output<Map<String,String>>> placementProperties() {
        return Optional.ofNullable(this.placementProperties);
    }

    /**
     * The endpoint used by reverse proxy.
     * 
     */
    @Import(name="reverseProxyEndpointPort")
    private @Nullable Output<Integer> reverseProxyEndpointPort;

    /**
     * @return The endpoint used by reverse proxy.
     * 
     */
    public Optional<Output<Integer>> reverseProxyEndpointPort() {
        return Optional.ofNullable(this.reverseProxyEndpointPort);
    }

    /**
     * The number of nodes in the node type. This count should match the capacity property in the corresponding VirtualMachineScaleSet resource.
     * 
     */
    @Import(name="vmInstanceCount", required=true)
    private Output<Integer> vmInstanceCount;

    /**
     * @return The number of nodes in the node type. This count should match the capacity property in the corresponding VirtualMachineScaleSet resource.
     * 
     */
    public Output<Integer> vmInstanceCount() {
        return this.vmInstanceCount;
    }

    private NodeTypeDescriptionArgs() {}

    private NodeTypeDescriptionArgs(NodeTypeDescriptionArgs $) {
        this.applicationPorts = $.applicationPorts;
        this.capacities = $.capacities;
        this.clientConnectionEndpointPort = $.clientConnectionEndpointPort;
        this.durabilityLevel = $.durabilityLevel;
        this.ephemeralPorts = $.ephemeralPorts;
        this.httpGatewayEndpointPort = $.httpGatewayEndpointPort;
        this.isPrimary = $.isPrimary;
        this.name = $.name;
        this.placementProperties = $.placementProperties;
        this.reverseProxyEndpointPort = $.reverseProxyEndpointPort;
        this.vmInstanceCount = $.vmInstanceCount;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NodeTypeDescriptionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NodeTypeDescriptionArgs $;

        public Builder() {
            $ = new NodeTypeDescriptionArgs();
        }

        public Builder(NodeTypeDescriptionArgs defaults) {
            $ = new NodeTypeDescriptionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param applicationPorts The range of ports from which cluster assigned port to Service Fabric applications.
         * 
         * @return builder
         * 
         */
        public Builder applicationPorts(@Nullable Output<EndpointRangeDescriptionArgs> applicationPorts) {
            $.applicationPorts = applicationPorts;
            return this;
        }

        /**
         * @param applicationPorts The range of ports from which cluster assigned port to Service Fabric applications.
         * 
         * @return builder
         * 
         */
        public Builder applicationPorts(EndpointRangeDescriptionArgs applicationPorts) {
            return applicationPorts(Output.of(applicationPorts));
        }

        /**
         * @param capacities The capacity tags applied to the nodes in the node type, the cluster resource manager uses these tags to understand how much resource a node has.
         * 
         * @return builder
         * 
         */
        public Builder capacities(@Nullable Output<Map<String,String>> capacities) {
            $.capacities = capacities;
            return this;
        }

        /**
         * @param capacities The capacity tags applied to the nodes in the node type, the cluster resource manager uses these tags to understand how much resource a node has.
         * 
         * @return builder
         * 
         */
        public Builder capacities(Map<String,String> capacities) {
            return capacities(Output.of(capacities));
        }

        /**
         * @param clientConnectionEndpointPort The TCP cluster management endpoint port.
         * 
         * @return builder
         * 
         */
        public Builder clientConnectionEndpointPort(Output<Integer> clientConnectionEndpointPort) {
            $.clientConnectionEndpointPort = clientConnectionEndpointPort;
            return this;
        }

        /**
         * @param clientConnectionEndpointPort The TCP cluster management endpoint port.
         * 
         * @return builder
         * 
         */
        public Builder clientConnectionEndpointPort(Integer clientConnectionEndpointPort) {
            return clientConnectionEndpointPort(Output.of(clientConnectionEndpointPort));
        }

        /**
         * @param durabilityLevel The durability level of the node type. Learn about [DurabilityLevel](https://docs.microsoft.com/azure/service-fabric/service-fabric-cluster-capacity).
         * 
         *   - Bronze - No privileges. This is the default.
         *   - Silver - The infrastructure jobs can be paused for a duration of 10 minutes per UD.
         *   - Gold - The infrastructure jobs can be paused for a duration of 2 hours per UD. Gold durability can be enabled only on full node VM skus like D15_V2, G5 etc.
         * 
         * @return builder
         * 
         */
        public Builder durabilityLevel(@Nullable Output<String> durabilityLevel) {
            $.durabilityLevel = durabilityLevel;
            return this;
        }

        /**
         * @param durabilityLevel The durability level of the node type. Learn about [DurabilityLevel](https://docs.microsoft.com/azure/service-fabric/service-fabric-cluster-capacity).
         * 
         *   - Bronze - No privileges. This is the default.
         *   - Silver - The infrastructure jobs can be paused for a duration of 10 minutes per UD.
         *   - Gold - The infrastructure jobs can be paused for a duration of 2 hours per UD. Gold durability can be enabled only on full node VM skus like D15_V2, G5 etc.
         * 
         * @return builder
         * 
         */
        public Builder durabilityLevel(String durabilityLevel) {
            return durabilityLevel(Output.of(durabilityLevel));
        }

        /**
         * @param ephemeralPorts The range of ephemeral ports that nodes in this node type should be configured with.
         * 
         * @return builder
         * 
         */
        public Builder ephemeralPorts(@Nullable Output<EndpointRangeDescriptionArgs> ephemeralPorts) {
            $.ephemeralPorts = ephemeralPorts;
            return this;
        }

        /**
         * @param ephemeralPorts The range of ephemeral ports that nodes in this node type should be configured with.
         * 
         * @return builder
         * 
         */
        public Builder ephemeralPorts(EndpointRangeDescriptionArgs ephemeralPorts) {
            return ephemeralPorts(Output.of(ephemeralPorts));
        }

        /**
         * @param httpGatewayEndpointPort The HTTP cluster management endpoint port.
         * 
         * @return builder
         * 
         */
        public Builder httpGatewayEndpointPort(Output<Integer> httpGatewayEndpointPort) {
            $.httpGatewayEndpointPort = httpGatewayEndpointPort;
            return this;
        }

        /**
         * @param httpGatewayEndpointPort The HTTP cluster management endpoint port.
         * 
         * @return builder
         * 
         */
        public Builder httpGatewayEndpointPort(Integer httpGatewayEndpointPort) {
            return httpGatewayEndpointPort(Output.of(httpGatewayEndpointPort));
        }

        /**
         * @param isPrimary The node type on which system services will run. Only one node type should be marked as primary. Primary node type cannot be deleted or changed for existing clusters.
         * 
         * @return builder
         * 
         */
        public Builder isPrimary(Output<Boolean> isPrimary) {
            $.isPrimary = isPrimary;
            return this;
        }

        /**
         * @param isPrimary The node type on which system services will run. Only one node type should be marked as primary. Primary node type cannot be deleted or changed for existing clusters.
         * 
         * @return builder
         * 
         */
        public Builder isPrimary(Boolean isPrimary) {
            return isPrimary(Output.of(isPrimary));
        }

        /**
         * @param name The name of the node type.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the node type.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param placementProperties The placement tags applied to nodes in the node type, which can be used to indicate where certain services (workload) should run.
         * 
         * @return builder
         * 
         */
        public Builder placementProperties(@Nullable Output<Map<String,String>> placementProperties) {
            $.placementProperties = placementProperties;
            return this;
        }

        /**
         * @param placementProperties The placement tags applied to nodes in the node type, which can be used to indicate where certain services (workload) should run.
         * 
         * @return builder
         * 
         */
        public Builder placementProperties(Map<String,String> placementProperties) {
            return placementProperties(Output.of(placementProperties));
        }

        /**
         * @param reverseProxyEndpointPort The endpoint used by reverse proxy.
         * 
         * @return builder
         * 
         */
        public Builder reverseProxyEndpointPort(@Nullable Output<Integer> reverseProxyEndpointPort) {
            $.reverseProxyEndpointPort = reverseProxyEndpointPort;
            return this;
        }

        /**
         * @param reverseProxyEndpointPort The endpoint used by reverse proxy.
         * 
         * @return builder
         * 
         */
        public Builder reverseProxyEndpointPort(Integer reverseProxyEndpointPort) {
            return reverseProxyEndpointPort(Output.of(reverseProxyEndpointPort));
        }

        /**
         * @param vmInstanceCount The number of nodes in the node type. This count should match the capacity property in the corresponding VirtualMachineScaleSet resource.
         * 
         * @return builder
         * 
         */
        public Builder vmInstanceCount(Output<Integer> vmInstanceCount) {
            $.vmInstanceCount = vmInstanceCount;
            return this;
        }

        /**
         * @param vmInstanceCount The number of nodes in the node type. This count should match the capacity property in the corresponding VirtualMachineScaleSet resource.
         * 
         * @return builder
         * 
         */
        public Builder vmInstanceCount(Integer vmInstanceCount) {
            return vmInstanceCount(Output.of(vmInstanceCount));
        }

        public NodeTypeDescriptionArgs build() {
            $.clientConnectionEndpointPort = Objects.requireNonNull($.clientConnectionEndpointPort, "expected parameter 'clientConnectionEndpointPort' to be non-null");
            $.httpGatewayEndpointPort = Objects.requireNonNull($.httpGatewayEndpointPort, "expected parameter 'httpGatewayEndpointPort' to be non-null");
            $.isPrimary = Objects.requireNonNull($.isPrimary, "expected parameter 'isPrimary' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.vmInstanceCount = Objects.requireNonNull($.vmInstanceCount, "expected parameter 'vmInstanceCount' to be non-null");
            return $;
        }
    }

}
