// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.streamanalytics.inputs;

import com.pulumi.azurenative.streamanalytics.inputs.AzureMachineLearningWebServiceFunctionBindingArgs;
import com.pulumi.azurenative.streamanalytics.inputs.FunctionInputArgs;
import com.pulumi.azurenative.streamanalytics.inputs.FunctionOutputArgs;
import com.pulumi.azurenative.streamanalytics.inputs.JavaScriptFunctionBindingArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The properties that are associated with a scalar function.
 * 
 */
public final class ScalarFunctionPropertiesArgs extends com.pulumi.resources.ResourceArgs {

    public static final ScalarFunctionPropertiesArgs Empty = new ScalarFunctionPropertiesArgs();

    /**
     * The physical binding of the function. For example, in the Azure Machine Learning web serviceâ€™s case, this describes the endpoint.
     * 
     */
    @Import(name="binding")
    private @Nullable Output<Either<AzureMachineLearningWebServiceFunctionBindingArgs,JavaScriptFunctionBindingArgs>> binding;

    public Optional<Output<Either<AzureMachineLearningWebServiceFunctionBindingArgs,JavaScriptFunctionBindingArgs>>> binding() {
        return Optional.ofNullable(this.binding);
    }

    /**
     * A list of inputs describing the parameters of the function.
     * 
     */
    @Import(name="inputs")
    private @Nullable Output<List<FunctionInputArgs>> inputs;

    public Optional<Output<List<FunctionInputArgs>>> inputs() {
        return Optional.ofNullable(this.inputs);
    }

    /**
     * The output of the function.
     * 
     */
    @Import(name="output")
    private @Nullable Output<FunctionOutputArgs> output;

    public Optional<Output<FunctionOutputArgs>> output() {
        return Optional.ofNullable(this.output);
    }

    /**
     * Indicates the type of function.
     * Expected value is &#39;Scalar&#39;.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    private ScalarFunctionPropertiesArgs() {}

    private ScalarFunctionPropertiesArgs(ScalarFunctionPropertiesArgs $) {
        this.binding = $.binding;
        this.inputs = $.inputs;
        this.output = $.output;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ScalarFunctionPropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ScalarFunctionPropertiesArgs $;

        public Builder() {
            $ = new ScalarFunctionPropertiesArgs();
        }

        public Builder(ScalarFunctionPropertiesArgs defaults) {
            $ = new ScalarFunctionPropertiesArgs(Objects.requireNonNull(defaults));
        }

        public Builder binding(@Nullable Output<Either<AzureMachineLearningWebServiceFunctionBindingArgs,JavaScriptFunctionBindingArgs>> binding) {
            $.binding = binding;
            return this;
        }

        public Builder binding(Either<AzureMachineLearningWebServiceFunctionBindingArgs,JavaScriptFunctionBindingArgs> binding) {
            return binding(Output.of(binding));
        }

        public Builder inputs(@Nullable Output<List<FunctionInputArgs>> inputs) {
            $.inputs = inputs;
            return this;
        }

        public Builder inputs(List<FunctionInputArgs> inputs) {
            return inputs(Output.of(inputs));
        }

        public Builder inputs(FunctionInputArgs... inputs) {
            return inputs(List.of(inputs));
        }

        public Builder output(@Nullable Output<FunctionOutputArgs> output) {
            $.output = output;
            return this;
        }

        public Builder output(FunctionOutputArgs output) {
            return output(Output.of(output));
        }

        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public ScalarFunctionPropertiesArgs build() {
            $.type = Codegen.stringProp("type").output().arg($.type).require();
            return $;
        }
    }

}
