// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.azurenative.network.inputs.SubnetResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The private link service ip configuration.
 * 
 */
public final class PrivateLinkServiceIpConfigurationResponse extends com.pulumi.resources.InvokeArgs {

    public static final PrivateLinkServiceIpConfigurationResponse Empty = new PrivateLinkServiceIpConfigurationResponse();

    /**
     * A unique read-only string that changes whenever the resource is updated.
     * 
     */
    @Import(name="etag", required=true)
    private String etag;

    public String etag() {
        return this.etag;
    }

    /**
     * Resource ID.
     * 
     */
    @Import(name="id")
    private @Nullable String id;

    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The name of private link service ip configuration.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Whether the ip configuration is primary or not.
     * 
     */
    @Import(name="primary")
    private @Nullable Boolean primary;

    public Optional<Boolean> primary() {
        return Optional.ofNullable(this.primary);
    }

    /**
     * The private IP address of the IP configuration.
     * 
     */
    @Import(name="privateIPAddress")
    private @Nullable String privateIPAddress;

    public Optional<String> privateIPAddress() {
        return Optional.ofNullable(this.privateIPAddress);
    }

    /**
     * Whether the specific IP configuration is IPv4 or IPv6. Default is IPv4.
     * 
     */
    @Import(name="privateIPAddressVersion")
    private @Nullable String privateIPAddressVersion;

    public Optional<String> privateIPAddressVersion() {
        return Optional.ofNullable(this.privateIPAddressVersion);
    }

    /**
     * The private IP address allocation method.
     * 
     */
    @Import(name="privateIPAllocationMethod")
    private @Nullable String privateIPAllocationMethod;

    public Optional<String> privateIPAllocationMethod() {
        return Optional.ofNullable(this.privateIPAllocationMethod);
    }

    /**
     * The provisioning state of the private link service IP configuration resource.
     * 
     */
    @Import(name="provisioningState", required=true)
    private String provisioningState;

    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * The reference to the subnet resource.
     * 
     */
    @Import(name="subnet")
    private @Nullable SubnetResponse subnet;

    public Optional<SubnetResponse> subnet() {
        return Optional.ofNullable(this.subnet);
    }

    /**
     * The resource type.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    public String type() {
        return this.type;
    }

    private PrivateLinkServiceIpConfigurationResponse() {}

    private PrivateLinkServiceIpConfigurationResponse(PrivateLinkServiceIpConfigurationResponse $) {
        this.etag = $.etag;
        this.id = $.id;
        this.name = $.name;
        this.primary = $.primary;
        this.privateIPAddress = $.privateIPAddress;
        this.privateIPAddressVersion = $.privateIPAddressVersion;
        this.privateIPAllocationMethod = $.privateIPAllocationMethod;
        this.provisioningState = $.provisioningState;
        this.subnet = $.subnet;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PrivateLinkServiceIpConfigurationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PrivateLinkServiceIpConfigurationResponse $;

        public Builder() {
            $ = new PrivateLinkServiceIpConfigurationResponse();
        }

        public Builder(PrivateLinkServiceIpConfigurationResponse defaults) {
            $ = new PrivateLinkServiceIpConfigurationResponse(Objects.requireNonNull(defaults));
        }

        public Builder etag(String etag) {
            $.etag = etag;
            return this;
        }

        public Builder id(@Nullable String id) {
            $.id = id;
            return this;
        }

        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        public Builder primary(@Nullable Boolean primary) {
            $.primary = primary;
            return this;
        }

        public Builder privateIPAddress(@Nullable String privateIPAddress) {
            $.privateIPAddress = privateIPAddress;
            return this;
        }

        public Builder privateIPAddressVersion(@Nullable String privateIPAddressVersion) {
            $.privateIPAddressVersion = privateIPAddressVersion;
            return this;
        }

        public Builder privateIPAllocationMethod(@Nullable String privateIPAllocationMethod) {
            $.privateIPAllocationMethod = privateIPAllocationMethod;
            return this;
        }

        public Builder provisioningState(String provisioningState) {
            $.provisioningState = provisioningState;
            return this;
        }

        public Builder subnet(@Nullable SubnetResponse subnet) {
            $.subnet = subnet;
            return this;
        }

        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public PrivateLinkServiceIpConfigurationResponse build() {
            $.etag = Objects.requireNonNull($.etag, "expected parameter 'etag' to be non-null");
            $.provisioningState = Objects.requireNonNull($.provisioningState, "expected parameter 'provisioningState' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
