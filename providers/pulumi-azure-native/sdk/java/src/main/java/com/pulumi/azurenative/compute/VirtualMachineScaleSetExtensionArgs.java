// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.compute;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class VirtualMachineScaleSetExtensionArgs extends com.pulumi.resources.ResourceArgs {

    public static final VirtualMachineScaleSetExtensionArgs Empty = new VirtualMachineScaleSetExtensionArgs();

    /**
     * Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true.
     * 
     */
    @Import(name="autoUpgradeMinorVersion")
      private final @Nullable Output<Boolean> autoUpgradeMinorVersion;

    public Output<Boolean> autoUpgradeMinorVersion() {
        return this.autoUpgradeMinorVersion == null ? Codegen.empty() : this.autoUpgradeMinorVersion;
    }

    /**
     * Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available.
     * 
     */
    @Import(name="enableAutomaticUpgrade")
      private final @Nullable Output<Boolean> enableAutomaticUpgrade;

    public Output<Boolean> enableAutomaticUpgrade() {
        return this.enableAutomaticUpgrade == null ? Codegen.empty() : this.enableAutomaticUpgrade;
    }

    /**
     * If a value is provided and is different from the previous value, the extension handler will be forced to update even if the extension configuration has not changed.
     * 
     */
    @Import(name="forceUpdateTag")
      private final @Nullable Output<String> forceUpdateTag;

    public Output<String> forceUpdateTag() {
        return this.forceUpdateTag == null ? Codegen.empty() : this.forceUpdateTag;
    }

    /**
     * The name of the extension.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all.
     * 
     */
    @Import(name="protectedSettings")
      private final @Nullable Output<Object> protectedSettings;

    public Output<Object> protectedSettings() {
        return this.protectedSettings == null ? Codegen.empty() : this.protectedSettings;
    }

    /**
     * Collection of extension names after which this extension needs to be provisioned.
     * 
     */
    @Import(name="provisionAfterExtensions")
      private final @Nullable Output<List<String>> provisionAfterExtensions;

    public Output<List<String>> provisionAfterExtensions() {
        return this.provisionAfterExtensions == null ? Codegen.empty() : this.provisionAfterExtensions;
    }

    /**
     * The name of the extension handler publisher.
     * 
     */
    @Import(name="publisher")
      private final @Nullable Output<String> publisher;

    public Output<String> publisher() {
        return this.publisher == null ? Codegen.empty() : this.publisher;
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Json formatted public settings for the extension.
     * 
     */
    @Import(name="settings")
      private final @Nullable Output<Object> settings;

    public Output<Object> settings() {
        return this.settings == null ? Codegen.empty() : this.settings;
    }

    /**
     * Specifies the type of the extension; an example is "CustomScriptExtension".
     * 
     */
    @Import(name="type")
      private final @Nullable Output<String> type;

    public Output<String> type() {
        return this.type == null ? Codegen.empty() : this.type;
    }

    /**
     * Specifies the version of the script handler.
     * 
     */
    @Import(name="typeHandlerVersion")
      private final @Nullable Output<String> typeHandlerVersion;

    public Output<String> typeHandlerVersion() {
        return this.typeHandlerVersion == null ? Codegen.empty() : this.typeHandlerVersion;
    }

    /**
     * The name of the VM scale set where the extension should be create or updated.
     * 
     */
    @Import(name="vmScaleSetName", required=true)
      private final Output<String> vmScaleSetName;

    public Output<String> vmScaleSetName() {
        return this.vmScaleSetName;
    }

    /**
     * The name of the VM scale set extension.
     * 
     */
    @Import(name="vmssExtensionName")
      private final @Nullable Output<String> vmssExtensionName;

    public Output<String> vmssExtensionName() {
        return this.vmssExtensionName == null ? Codegen.empty() : this.vmssExtensionName;
    }

    public VirtualMachineScaleSetExtensionArgs(
        @Nullable Output<Boolean> autoUpgradeMinorVersion,
        @Nullable Output<Boolean> enableAutomaticUpgrade,
        @Nullable Output<String> forceUpdateTag,
        @Nullable Output<String> name,
        @Nullable Output<Object> protectedSettings,
        @Nullable Output<List<String>> provisionAfterExtensions,
        @Nullable Output<String> publisher,
        Output<String> resourceGroupName,
        @Nullable Output<Object> settings,
        @Nullable Output<String> type,
        @Nullable Output<String> typeHandlerVersion,
        Output<String> vmScaleSetName,
        @Nullable Output<String> vmssExtensionName) {
        this.autoUpgradeMinorVersion = autoUpgradeMinorVersion;
        this.enableAutomaticUpgrade = enableAutomaticUpgrade;
        this.forceUpdateTag = forceUpdateTag;
        this.name = name;
        this.protectedSettings = protectedSettings;
        this.provisionAfterExtensions = provisionAfterExtensions;
        this.publisher = publisher;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.settings = settings;
        this.type = type;
        this.typeHandlerVersion = typeHandlerVersion;
        this.vmScaleSetName = Objects.requireNonNull(vmScaleSetName, "expected parameter 'vmScaleSetName' to be non-null");
        this.vmssExtensionName = vmssExtensionName;
    }

    private VirtualMachineScaleSetExtensionArgs() {
        this.autoUpgradeMinorVersion = Codegen.empty();
        this.enableAutomaticUpgrade = Codegen.empty();
        this.forceUpdateTag = Codegen.empty();
        this.name = Codegen.empty();
        this.protectedSettings = Codegen.empty();
        this.provisionAfterExtensions = Codegen.empty();
        this.publisher = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.settings = Codegen.empty();
        this.type = Codegen.empty();
        this.typeHandlerVersion = Codegen.empty();
        this.vmScaleSetName = Codegen.empty();
        this.vmssExtensionName = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VirtualMachineScaleSetExtensionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Boolean> autoUpgradeMinorVersion;
        private @Nullable Output<Boolean> enableAutomaticUpgrade;
        private @Nullable Output<String> forceUpdateTag;
        private @Nullable Output<String> name;
        private @Nullable Output<Object> protectedSettings;
        private @Nullable Output<List<String>> provisionAfterExtensions;
        private @Nullable Output<String> publisher;
        private Output<String> resourceGroupName;
        private @Nullable Output<Object> settings;
        private @Nullable Output<String> type;
        private @Nullable Output<String> typeHandlerVersion;
        private Output<String> vmScaleSetName;
        private @Nullable Output<String> vmssExtensionName;

        public Builder() {
    	      // Empty
        }

        public Builder(VirtualMachineScaleSetExtensionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoUpgradeMinorVersion = defaults.autoUpgradeMinorVersion;
    	      this.enableAutomaticUpgrade = defaults.enableAutomaticUpgrade;
    	      this.forceUpdateTag = defaults.forceUpdateTag;
    	      this.name = defaults.name;
    	      this.protectedSettings = defaults.protectedSettings;
    	      this.provisionAfterExtensions = defaults.provisionAfterExtensions;
    	      this.publisher = defaults.publisher;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.settings = defaults.settings;
    	      this.type = defaults.type;
    	      this.typeHandlerVersion = defaults.typeHandlerVersion;
    	      this.vmScaleSetName = defaults.vmScaleSetName;
    	      this.vmssExtensionName = defaults.vmssExtensionName;
        }

        public Builder autoUpgradeMinorVersion(@Nullable Output<Boolean> autoUpgradeMinorVersion) {
            this.autoUpgradeMinorVersion = autoUpgradeMinorVersion;
            return this;
        }
        public Builder autoUpgradeMinorVersion(@Nullable Boolean autoUpgradeMinorVersion) {
            this.autoUpgradeMinorVersion = Codegen.ofNullable(autoUpgradeMinorVersion);
            return this;
        }
        public Builder enableAutomaticUpgrade(@Nullable Output<Boolean> enableAutomaticUpgrade) {
            this.enableAutomaticUpgrade = enableAutomaticUpgrade;
            return this;
        }
        public Builder enableAutomaticUpgrade(@Nullable Boolean enableAutomaticUpgrade) {
            this.enableAutomaticUpgrade = Codegen.ofNullable(enableAutomaticUpgrade);
            return this;
        }
        public Builder forceUpdateTag(@Nullable Output<String> forceUpdateTag) {
            this.forceUpdateTag = forceUpdateTag;
            return this;
        }
        public Builder forceUpdateTag(@Nullable String forceUpdateTag) {
            this.forceUpdateTag = Codegen.ofNullable(forceUpdateTag);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder protectedSettings(@Nullable Output<Object> protectedSettings) {
            this.protectedSettings = protectedSettings;
            return this;
        }
        public Builder protectedSettings(@Nullable Object protectedSettings) {
            this.protectedSettings = Codegen.ofNullable(protectedSettings);
            return this;
        }
        public Builder provisionAfterExtensions(@Nullable Output<List<String>> provisionAfterExtensions) {
            this.provisionAfterExtensions = provisionAfterExtensions;
            return this;
        }
        public Builder provisionAfterExtensions(@Nullable List<String> provisionAfterExtensions) {
            this.provisionAfterExtensions = Codegen.ofNullable(provisionAfterExtensions);
            return this;
        }
        public Builder provisionAfterExtensions(String... provisionAfterExtensions) {
            return provisionAfterExtensions(List.of(provisionAfterExtensions));
        }
        public Builder publisher(@Nullable Output<String> publisher) {
            this.publisher = publisher;
            return this;
        }
        public Builder publisher(@Nullable String publisher) {
            this.publisher = Codegen.ofNullable(publisher);
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder settings(@Nullable Output<Object> settings) {
            this.settings = settings;
            return this;
        }
        public Builder settings(@Nullable Object settings) {
            this.settings = Codegen.ofNullable(settings);
            return this;
        }
        public Builder type(@Nullable Output<String> type) {
            this.type = type;
            return this;
        }
        public Builder type(@Nullable String type) {
            this.type = Codegen.ofNullable(type);
            return this;
        }
        public Builder typeHandlerVersion(@Nullable Output<String> typeHandlerVersion) {
            this.typeHandlerVersion = typeHandlerVersion;
            return this;
        }
        public Builder typeHandlerVersion(@Nullable String typeHandlerVersion) {
            this.typeHandlerVersion = Codegen.ofNullable(typeHandlerVersion);
            return this;
        }
        public Builder vmScaleSetName(Output<String> vmScaleSetName) {
            this.vmScaleSetName = Objects.requireNonNull(vmScaleSetName);
            return this;
        }
        public Builder vmScaleSetName(String vmScaleSetName) {
            this.vmScaleSetName = Output.of(Objects.requireNonNull(vmScaleSetName));
            return this;
        }
        public Builder vmssExtensionName(@Nullable Output<String> vmssExtensionName) {
            this.vmssExtensionName = vmssExtensionName;
            return this;
        }
        public Builder vmssExtensionName(@Nullable String vmssExtensionName) {
            this.vmssExtensionName = Codegen.ofNullable(vmssExtensionName);
            return this;
        }        public VirtualMachineScaleSetExtensionArgs build() {
            return new VirtualMachineScaleSetExtensionArgs(autoUpgradeMinorVersion, enableAutomaticUpgrade, forceUpdateTag, name, protectedSettings, provisionAfterExtensions, publisher, resourceGroupName, settings, type, typeHandlerVersion, vmScaleSetName, vmssExtensionName);
        }
    }
}
