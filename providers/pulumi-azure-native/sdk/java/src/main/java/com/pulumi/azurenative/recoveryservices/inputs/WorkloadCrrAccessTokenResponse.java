// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.recoveryservices.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkloadCrrAccessTokenResponse extends com.pulumi.resources.InvokeArgs {

    public static final WorkloadCrrAccessTokenResponse Empty = new WorkloadCrrAccessTokenResponse();

    /**
     * Access token used for authentication
     * 
     */
    @Import(name="accessTokenString")
    private @Nullable String accessTokenString;

    /**
     * @return Access token used for authentication
     * 
     */
    public Optional<String> accessTokenString() {
        return Optional.ofNullable(this.accessTokenString);
    }

    /**
     * Active region name of BMS Stamp
     * 
     */
    @Import(name="bMSActiveRegion")
    private @Nullable String bMSActiveRegion;

    /**
     * @return Active region name of BMS Stamp
     * 
     */
    public Optional<String> bMSActiveRegion() {
        return Optional.ofNullable(this.bMSActiveRegion);
    }

    /**
     * Backup Management Type
     * 
     */
    @Import(name="backupManagementType")
    private @Nullable String backupManagementType;

    /**
     * @return Backup Management Type
     * 
     */
    public Optional<String> backupManagementType() {
        return Optional.ofNullable(this.backupManagementType);
    }

    /**
     * Container Id
     * 
     */
    @Import(name="containerId")
    private @Nullable String containerId;

    /**
     * @return Container Id
     * 
     */
    public Optional<String> containerId() {
        return Optional.ofNullable(this.containerId);
    }

    /**
     * Container Unique name
     * 
     */
    @Import(name="containerName")
    private @Nullable String containerName;

    /**
     * @return Container Unique name
     * 
     */
    public Optional<String> containerName() {
        return Optional.ofNullable(this.containerName);
    }

    /**
     * Container Type
     * 
     */
    @Import(name="containerType")
    private @Nullable String containerType;

    /**
     * @return Container Type
     * 
     */
    public Optional<String> containerType() {
        return Optional.ofNullable(this.containerType);
    }

    /**
     * CoordinatorServiceStampId to be used by BCM in restore call
     * 
     */
    @Import(name="coordinatorServiceStampId")
    private @Nullable String coordinatorServiceStampId;

    /**
     * @return CoordinatorServiceStampId to be used by BCM in restore call
     * 
     */
    public Optional<String> coordinatorServiceStampId() {
        return Optional.ofNullable(this.coordinatorServiceStampId);
    }

    /**
     * CoordinatorServiceStampUri to be used by BCM in restore call
     * 
     */
    @Import(name="coordinatorServiceStampUri")
    private @Nullable String coordinatorServiceStampUri;

    /**
     * @return CoordinatorServiceStampUri to be used by BCM in restore call
     * 
     */
    public Optional<String> coordinatorServiceStampUri() {
        return Optional.ofNullable(this.coordinatorServiceStampUri);
    }

    /**
     * Datasource Container Unique Name
     * 
     */
    @Import(name="datasourceContainerName")
    private @Nullable String datasourceContainerName;

    /**
     * @return Datasource Container Unique Name
     * 
     */
    public Optional<String> datasourceContainerName() {
        return Optional.ofNullable(this.datasourceContainerName);
    }

    /**
     * Datasource Id
     * 
     */
    @Import(name="datasourceId")
    private @Nullable String datasourceId;

    /**
     * @return Datasource Id
     * 
     */
    public Optional<String> datasourceId() {
        return Optional.ofNullable(this.datasourceId);
    }

    /**
     * Datasource Friendly Name
     * 
     */
    @Import(name="datasourceName")
    private @Nullable String datasourceName;

    /**
     * @return Datasource Friendly Name
     * 
     */
    public Optional<String> datasourceName() {
        return Optional.ofNullable(this.datasourceName);
    }

    /**
     * Datasource Type
     * 
     */
    @Import(name="datasourceType")
    private @Nullable String datasourceType;

    /**
     * @return Datasource Type
     * 
     */
    public Optional<String> datasourceType() {
        return Optional.ofNullable(this.datasourceType);
    }

    /**
     * Type of the specific object - used for deserializing
     * Expected value is &#39;WorkloadCrrAccessToken&#39;.
     * 
     */
    @Import(name="objectType", required=true)
    private String objectType;

    /**
     * @return Type of the specific object - used for deserializing
     * Expected value is &#39;WorkloadCrrAccessToken&#39;.
     * 
     */
    public String objectType() {
        return this.objectType;
    }

    /**
     * Policy Id
     * 
     */
    @Import(name="policyId")
    private @Nullable String policyId;

    /**
     * @return Policy Id
     * 
     */
    public Optional<String> policyId() {
        return Optional.ofNullable(this.policyId);
    }

    /**
     * Policy Name
     * 
     */
    @Import(name="policyName")
    private @Nullable String policyName;

    /**
     * @return Policy Name
     * 
     */
    public Optional<String> policyName() {
        return Optional.ofNullable(this.policyName);
    }

    @Import(name="protectableObjectContainerHostOsName")
    private @Nullable String protectableObjectContainerHostOsName;

    public Optional<String> protectableObjectContainerHostOsName() {
        return Optional.ofNullable(this.protectableObjectContainerHostOsName);
    }

    @Import(name="protectableObjectFriendlyName")
    private @Nullable String protectableObjectFriendlyName;

    public Optional<String> protectableObjectFriendlyName() {
        return Optional.ofNullable(this.protectableObjectFriendlyName);
    }

    @Import(name="protectableObjectParentLogicalContainerName")
    private @Nullable String protectableObjectParentLogicalContainerName;

    public Optional<String> protectableObjectParentLogicalContainerName() {
        return Optional.ofNullable(this.protectableObjectParentLogicalContainerName);
    }

    @Import(name="protectableObjectProtectionState")
    private @Nullable String protectableObjectProtectionState;

    public Optional<String> protectableObjectProtectionState() {
        return Optional.ofNullable(this.protectableObjectProtectionState);
    }

    @Import(name="protectableObjectUniqueName")
    private @Nullable String protectableObjectUniqueName;

    public Optional<String> protectableObjectUniqueName() {
        return Optional.ofNullable(this.protectableObjectUniqueName);
    }

    @Import(name="protectableObjectWorkloadType")
    private @Nullable String protectableObjectWorkloadType;

    public Optional<String> protectableObjectWorkloadType() {
        return Optional.ofNullable(this.protectableObjectWorkloadType);
    }

    /**
     * Protected item container id
     * 
     */
    @Import(name="protectionContainerId")
    private @Nullable Double protectionContainerId;

    /**
     * @return Protected item container id
     * 
     */
    public Optional<Double> protectionContainerId() {
        return Optional.ofNullable(this.protectionContainerId);
    }

    /**
     * ProtectionServiceStampId to be used by BCM in restore call
     * 
     */
    @Import(name="protectionServiceStampId")
    private @Nullable String protectionServiceStampId;

    /**
     * @return ProtectionServiceStampId to be used by BCM in restore call
     * 
     */
    public Optional<String> protectionServiceStampId() {
        return Optional.ofNullable(this.protectionServiceStampId);
    }

    /**
     * ProtectionServiceStampUri to be used by BCM in restore call
     * 
     */
    @Import(name="protectionServiceStampUri")
    private @Nullable String protectionServiceStampUri;

    /**
     * @return ProtectionServiceStampUri to be used by BCM in restore call
     * 
     */
    public Optional<String> protectionServiceStampUri() {
        return Optional.ofNullable(this.protectionServiceStampUri);
    }

    /**
     * Recovery Point Id
     * 
     */
    @Import(name="recoveryPointId")
    private @Nullable String recoveryPointId;

    /**
     * @return Recovery Point Id
     * 
     */
    public Optional<String> recoveryPointId() {
        return Optional.ofNullable(this.recoveryPointId);
    }

    /**
     * Recovery Point Time
     * 
     */
    @Import(name="recoveryPointTime")
    private @Nullable String recoveryPointTime;

    /**
     * @return Recovery Point Time
     * 
     */
    public Optional<String> recoveryPointTime() {
        return Optional.ofNullable(this.recoveryPointTime);
    }

    /**
     * Resource Group name of the source vault
     * 
     */
    @Import(name="resourceGroupName")
    private @Nullable String resourceGroupName;

    /**
     * @return Resource Group name of the source vault
     * 
     */
    public Optional<String> resourceGroupName() {
        return Optional.ofNullable(this.resourceGroupName);
    }

    /**
     * Resource Id of the source vault
     * 
     */
    @Import(name="resourceId")
    private @Nullable String resourceId;

    /**
     * @return Resource Id of the source vault
     * 
     */
    public Optional<String> resourceId() {
        return Optional.ofNullable(this.resourceId);
    }

    /**
     * Resource Name of the source vault
     * 
     */
    @Import(name="resourceName")
    private @Nullable String resourceName;

    /**
     * @return Resource Name of the source vault
     * 
     */
    public Optional<String> resourceName() {
        return Optional.ofNullable(this.resourceName);
    }

    /**
     * Recovery point information: Managed virtual machine
     * 
     */
    @Import(name="rpIsManagedVirtualMachine")
    private @Nullable Boolean rpIsManagedVirtualMachine;

    /**
     * @return Recovery point information: Managed virtual machine
     * 
     */
    public Optional<Boolean> rpIsManagedVirtualMachine() {
        return Optional.ofNullable(this.rpIsManagedVirtualMachine);
    }

    /**
     * Recovery point information: Original SA option
     * 
     */
    @Import(name="rpOriginalSAOption")
    private @Nullable Boolean rpOriginalSAOption;

    /**
     * @return Recovery point information: Original SA option
     * 
     */
    public Optional<Boolean> rpOriginalSAOption() {
        return Optional.ofNullable(this.rpOriginalSAOption);
    }

    /**
     * Recovery point Tier Information
     * 
     */
    @Import(name="rpTierInformation")
    private @Nullable Map<String,String> rpTierInformation;

    /**
     * @return Recovery point Tier Information
     * 
     */
    public Optional<Map<String,String>> rpTierInformation() {
        return Optional.ofNullable(this.rpTierInformation);
    }

    /**
     * Recovery point information: VM size description
     * 
     */
    @Import(name="rpVMSizeDescription")
    private @Nullable String rpVMSizeDescription;

    /**
     * @return Recovery point information: VM size description
     * 
     */
    public Optional<String> rpVMSizeDescription() {
        return Optional.ofNullable(this.rpVMSizeDescription);
    }

    /**
     * Subscription Id of the source vault
     * 
     */
    @Import(name="subscriptionId")
    private @Nullable String subscriptionId;

    /**
     * @return Subscription Id of the source vault
     * 
     */
    public Optional<String> subscriptionId() {
        return Optional.ofNullable(this.subscriptionId);
    }

    /**
     * Extended Information about the token like FileSpec etc.
     * 
     */
    @Import(name="tokenExtendedInformation")
    private @Nullable String tokenExtendedInformation;

    /**
     * @return Extended Information about the token like FileSpec etc.
     * 
     */
    public Optional<String> tokenExtendedInformation() {
        return Optional.ofNullable(this.tokenExtendedInformation);
    }

    private WorkloadCrrAccessTokenResponse() {}

    private WorkloadCrrAccessTokenResponse(WorkloadCrrAccessTokenResponse $) {
        this.accessTokenString = $.accessTokenString;
        this.bMSActiveRegion = $.bMSActiveRegion;
        this.backupManagementType = $.backupManagementType;
        this.containerId = $.containerId;
        this.containerName = $.containerName;
        this.containerType = $.containerType;
        this.coordinatorServiceStampId = $.coordinatorServiceStampId;
        this.coordinatorServiceStampUri = $.coordinatorServiceStampUri;
        this.datasourceContainerName = $.datasourceContainerName;
        this.datasourceId = $.datasourceId;
        this.datasourceName = $.datasourceName;
        this.datasourceType = $.datasourceType;
        this.objectType = $.objectType;
        this.policyId = $.policyId;
        this.policyName = $.policyName;
        this.protectableObjectContainerHostOsName = $.protectableObjectContainerHostOsName;
        this.protectableObjectFriendlyName = $.protectableObjectFriendlyName;
        this.protectableObjectParentLogicalContainerName = $.protectableObjectParentLogicalContainerName;
        this.protectableObjectProtectionState = $.protectableObjectProtectionState;
        this.protectableObjectUniqueName = $.protectableObjectUniqueName;
        this.protectableObjectWorkloadType = $.protectableObjectWorkloadType;
        this.protectionContainerId = $.protectionContainerId;
        this.protectionServiceStampId = $.protectionServiceStampId;
        this.protectionServiceStampUri = $.protectionServiceStampUri;
        this.recoveryPointId = $.recoveryPointId;
        this.recoveryPointTime = $.recoveryPointTime;
        this.resourceGroupName = $.resourceGroupName;
        this.resourceId = $.resourceId;
        this.resourceName = $.resourceName;
        this.rpIsManagedVirtualMachine = $.rpIsManagedVirtualMachine;
        this.rpOriginalSAOption = $.rpOriginalSAOption;
        this.rpTierInformation = $.rpTierInformation;
        this.rpVMSizeDescription = $.rpVMSizeDescription;
        this.subscriptionId = $.subscriptionId;
        this.tokenExtendedInformation = $.tokenExtendedInformation;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkloadCrrAccessTokenResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkloadCrrAccessTokenResponse $;

        public Builder() {
            $ = new WorkloadCrrAccessTokenResponse();
        }

        public Builder(WorkloadCrrAccessTokenResponse defaults) {
            $ = new WorkloadCrrAccessTokenResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessTokenString Access token used for authentication
         * 
         * @return builder
         * 
         */
        public Builder accessTokenString(@Nullable String accessTokenString) {
            $.accessTokenString = accessTokenString;
            return this;
        }

        /**
         * @param bMSActiveRegion Active region name of BMS Stamp
         * 
         * @return builder
         * 
         */
        public Builder bMSActiveRegion(@Nullable String bMSActiveRegion) {
            $.bMSActiveRegion = bMSActiveRegion;
            return this;
        }

        /**
         * @param backupManagementType Backup Management Type
         * 
         * @return builder
         * 
         */
        public Builder backupManagementType(@Nullable String backupManagementType) {
            $.backupManagementType = backupManagementType;
            return this;
        }

        /**
         * @param containerId Container Id
         * 
         * @return builder
         * 
         */
        public Builder containerId(@Nullable String containerId) {
            $.containerId = containerId;
            return this;
        }

        /**
         * @param containerName Container Unique name
         * 
         * @return builder
         * 
         */
        public Builder containerName(@Nullable String containerName) {
            $.containerName = containerName;
            return this;
        }

        /**
         * @param containerType Container Type
         * 
         * @return builder
         * 
         */
        public Builder containerType(@Nullable String containerType) {
            $.containerType = containerType;
            return this;
        }

        /**
         * @param coordinatorServiceStampId CoordinatorServiceStampId to be used by BCM in restore call
         * 
         * @return builder
         * 
         */
        public Builder coordinatorServiceStampId(@Nullable String coordinatorServiceStampId) {
            $.coordinatorServiceStampId = coordinatorServiceStampId;
            return this;
        }

        /**
         * @param coordinatorServiceStampUri CoordinatorServiceStampUri to be used by BCM in restore call
         * 
         * @return builder
         * 
         */
        public Builder coordinatorServiceStampUri(@Nullable String coordinatorServiceStampUri) {
            $.coordinatorServiceStampUri = coordinatorServiceStampUri;
            return this;
        }

        /**
         * @param datasourceContainerName Datasource Container Unique Name
         * 
         * @return builder
         * 
         */
        public Builder datasourceContainerName(@Nullable String datasourceContainerName) {
            $.datasourceContainerName = datasourceContainerName;
            return this;
        }

        /**
         * @param datasourceId Datasource Id
         * 
         * @return builder
         * 
         */
        public Builder datasourceId(@Nullable String datasourceId) {
            $.datasourceId = datasourceId;
            return this;
        }

        /**
         * @param datasourceName Datasource Friendly Name
         * 
         * @return builder
         * 
         */
        public Builder datasourceName(@Nullable String datasourceName) {
            $.datasourceName = datasourceName;
            return this;
        }

        /**
         * @param datasourceType Datasource Type
         * 
         * @return builder
         * 
         */
        public Builder datasourceType(@Nullable String datasourceType) {
            $.datasourceType = datasourceType;
            return this;
        }

        /**
         * @param objectType Type of the specific object - used for deserializing
         * Expected value is &#39;WorkloadCrrAccessToken&#39;.
         * 
         * @return builder
         * 
         */
        public Builder objectType(String objectType) {
            $.objectType = objectType;
            return this;
        }

        /**
         * @param policyId Policy Id
         * 
         * @return builder
         * 
         */
        public Builder policyId(@Nullable String policyId) {
            $.policyId = policyId;
            return this;
        }

        /**
         * @param policyName Policy Name
         * 
         * @return builder
         * 
         */
        public Builder policyName(@Nullable String policyName) {
            $.policyName = policyName;
            return this;
        }

        public Builder protectableObjectContainerHostOsName(@Nullable String protectableObjectContainerHostOsName) {
            $.protectableObjectContainerHostOsName = protectableObjectContainerHostOsName;
            return this;
        }

        public Builder protectableObjectFriendlyName(@Nullable String protectableObjectFriendlyName) {
            $.protectableObjectFriendlyName = protectableObjectFriendlyName;
            return this;
        }

        public Builder protectableObjectParentLogicalContainerName(@Nullable String protectableObjectParentLogicalContainerName) {
            $.protectableObjectParentLogicalContainerName = protectableObjectParentLogicalContainerName;
            return this;
        }

        public Builder protectableObjectProtectionState(@Nullable String protectableObjectProtectionState) {
            $.protectableObjectProtectionState = protectableObjectProtectionState;
            return this;
        }

        public Builder protectableObjectUniqueName(@Nullable String protectableObjectUniqueName) {
            $.protectableObjectUniqueName = protectableObjectUniqueName;
            return this;
        }

        public Builder protectableObjectWorkloadType(@Nullable String protectableObjectWorkloadType) {
            $.protectableObjectWorkloadType = protectableObjectWorkloadType;
            return this;
        }

        /**
         * @param protectionContainerId Protected item container id
         * 
         * @return builder
         * 
         */
        public Builder protectionContainerId(@Nullable Double protectionContainerId) {
            $.protectionContainerId = protectionContainerId;
            return this;
        }

        /**
         * @param protectionServiceStampId ProtectionServiceStampId to be used by BCM in restore call
         * 
         * @return builder
         * 
         */
        public Builder protectionServiceStampId(@Nullable String protectionServiceStampId) {
            $.protectionServiceStampId = protectionServiceStampId;
            return this;
        }

        /**
         * @param protectionServiceStampUri ProtectionServiceStampUri to be used by BCM in restore call
         * 
         * @return builder
         * 
         */
        public Builder protectionServiceStampUri(@Nullable String protectionServiceStampUri) {
            $.protectionServiceStampUri = protectionServiceStampUri;
            return this;
        }

        /**
         * @param recoveryPointId Recovery Point Id
         * 
         * @return builder
         * 
         */
        public Builder recoveryPointId(@Nullable String recoveryPointId) {
            $.recoveryPointId = recoveryPointId;
            return this;
        }

        /**
         * @param recoveryPointTime Recovery Point Time
         * 
         * @return builder
         * 
         */
        public Builder recoveryPointTime(@Nullable String recoveryPointTime) {
            $.recoveryPointTime = recoveryPointTime;
            return this;
        }

        /**
         * @param resourceGroupName Resource Group name of the source vault
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(@Nullable String resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceId Resource Id of the source vault
         * 
         * @return builder
         * 
         */
        public Builder resourceId(@Nullable String resourceId) {
            $.resourceId = resourceId;
            return this;
        }

        /**
         * @param resourceName Resource Name of the source vault
         * 
         * @return builder
         * 
         */
        public Builder resourceName(@Nullable String resourceName) {
            $.resourceName = resourceName;
            return this;
        }

        /**
         * @param rpIsManagedVirtualMachine Recovery point information: Managed virtual machine
         * 
         * @return builder
         * 
         */
        public Builder rpIsManagedVirtualMachine(@Nullable Boolean rpIsManagedVirtualMachine) {
            $.rpIsManagedVirtualMachine = rpIsManagedVirtualMachine;
            return this;
        }

        /**
         * @param rpOriginalSAOption Recovery point information: Original SA option
         * 
         * @return builder
         * 
         */
        public Builder rpOriginalSAOption(@Nullable Boolean rpOriginalSAOption) {
            $.rpOriginalSAOption = rpOriginalSAOption;
            return this;
        }

        /**
         * @param rpTierInformation Recovery point Tier Information
         * 
         * @return builder
         * 
         */
        public Builder rpTierInformation(@Nullable Map<String,String> rpTierInformation) {
            $.rpTierInformation = rpTierInformation;
            return this;
        }

        /**
         * @param rpVMSizeDescription Recovery point information: VM size description
         * 
         * @return builder
         * 
         */
        public Builder rpVMSizeDescription(@Nullable String rpVMSizeDescription) {
            $.rpVMSizeDescription = rpVMSizeDescription;
            return this;
        }

        /**
         * @param subscriptionId Subscription Id of the source vault
         * 
         * @return builder
         * 
         */
        public Builder subscriptionId(@Nullable String subscriptionId) {
            $.subscriptionId = subscriptionId;
            return this;
        }

        /**
         * @param tokenExtendedInformation Extended Information about the token like FileSpec etc.
         * 
         * @return builder
         * 
         */
        public Builder tokenExtendedInformation(@Nullable String tokenExtendedInformation) {
            $.tokenExtendedInformation = tokenExtendedInformation;
            return this;
        }

        public WorkloadCrrAccessTokenResponse build() {
            $.objectType = Codegen.stringProp("objectType").arg($.objectType).require();
            return $;
        }
    }

}
