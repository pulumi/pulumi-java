// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.containerregistry.inputs;

import com.pulumi.azurenative.containerregistry.inputs.AgentPropertiesArgs;
import com.pulumi.azurenative.containerregistry.inputs.ArgumentArgs;
import com.pulumi.azurenative.containerregistry.inputs.CredentialsArgs;
import com.pulumi.azurenative.containerregistry.inputs.PlatformPropertiesArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The parameters for a docker quick build.
 * 
 */
public final class DockerBuildRequestArgs extends com.pulumi.resources.ResourceArgs {

    public static final DockerBuildRequestArgs Empty = new DockerBuildRequestArgs();

    /**
     * The machine configuration of the run agent.
     * 
     */
    @Import(name="agentConfiguration")
    private @Nullable Output<AgentPropertiesArgs> agentConfiguration;

    public Optional<Output<AgentPropertiesArgs>> agentConfiguration() {
        return Optional.ofNullable(this.agentConfiguration);
    }

    /**
     * The dedicated agent pool for the run.
     * 
     */
    @Import(name="agentPoolName")
    private @Nullable Output<String> agentPoolName;

    public Optional<Output<String>> agentPoolName() {
        return Optional.ofNullable(this.agentPoolName);
    }

    /**
     * The collection of override arguments to be used when executing the run.
     * 
     */
    @Import(name="arguments")
    private @Nullable Output<List<ArgumentArgs>> arguments;

    public Optional<Output<List<ArgumentArgs>>> arguments() {
        return Optional.ofNullable(this.arguments);
    }

    /**
     * The properties that describes a set of credentials that will be used when this run is invoked.
     * 
     */
    @Import(name="credentials")
    private @Nullable Output<CredentialsArgs> credentials;

    public Optional<Output<CredentialsArgs>> credentials() {
        return Optional.ofNullable(this.credentials);
    }

    /**
     * The Docker file path relative to the source location.
     * 
     */
    @Import(name="dockerFilePath", required=true)
    private Output<String> dockerFilePath;

    public Output<String> dockerFilePath() {
        return this.dockerFilePath;
    }

    /**
     * The fully qualified image names including the repository and tag.
     * 
     */
    @Import(name="imageNames")
    private @Nullable Output<List<String>> imageNames;

    public Optional<Output<List<String>>> imageNames() {
        return Optional.ofNullable(this.imageNames);
    }

    /**
     * The value that indicates whether archiving is enabled for the run or not.
     * 
     */
    @Import(name="isArchiveEnabled")
    private @Nullable Output<Boolean> isArchiveEnabled;

    public Optional<Output<Boolean>> isArchiveEnabled() {
        return Optional.ofNullable(this.isArchiveEnabled);
    }

    /**
     * The value of this property indicates whether the image built should be pushed to the registry or not.
     * 
     */
    @Import(name="isPushEnabled")
    private @Nullable Output<Boolean> isPushEnabled;

    public Optional<Output<Boolean>> isPushEnabled() {
        return Optional.ofNullable(this.isPushEnabled);
    }

    /**
     * The template that describes the repository and tag information for run log artifact.
     * 
     */
    @Import(name="logTemplate")
    private @Nullable Output<String> logTemplate;

    public Optional<Output<String>> logTemplate() {
        return Optional.ofNullable(this.logTemplate);
    }

    /**
     * The value of this property indicates whether the image cache is enabled or not.
     * 
     */
    @Import(name="noCache")
    private @Nullable Output<Boolean> noCache;

    public Optional<Output<Boolean>> noCache() {
        return Optional.ofNullable(this.noCache);
    }

    /**
     * The platform properties against which the run has to happen.
     * 
     */
    @Import(name="platform", required=true)
    private Output<PlatformPropertiesArgs> platform;

    public Output<PlatformPropertiesArgs> platform() {
        return this.platform;
    }

    /**
     * The URL(absolute or relative) of the source context. It can be an URL to a tar or git repository.
     * If it is relative URL, the relative path should be obtained from calling listBuildSourceUploadUrl API.
     * 
     */
    @Import(name="sourceLocation")
    private @Nullable Output<String> sourceLocation;

    public Optional<Output<String>> sourceLocation() {
        return Optional.ofNullable(this.sourceLocation);
    }

    /**
     * The name of the target build stage for the docker build.
     * 
     */
    @Import(name="target")
    private @Nullable Output<String> target;

    public Optional<Output<String>> target() {
        return Optional.ofNullable(this.target);
    }

    /**
     * Run timeout in seconds.
     * 
     */
    @Import(name="timeout")
    private @Nullable Output<Integer> timeout;

    public Optional<Output<Integer>> timeout() {
        return Optional.ofNullable(this.timeout);
    }

    /**
     * The type of the run request.
     * Expected value is &#39;DockerBuildRequest&#39;.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    private DockerBuildRequestArgs() {}

    private DockerBuildRequestArgs(DockerBuildRequestArgs $) {
        this.agentConfiguration = $.agentConfiguration;
        this.agentPoolName = $.agentPoolName;
        this.arguments = $.arguments;
        this.credentials = $.credentials;
        this.dockerFilePath = $.dockerFilePath;
        this.imageNames = $.imageNames;
        this.isArchiveEnabled = $.isArchiveEnabled;
        this.isPushEnabled = $.isPushEnabled;
        this.logTemplate = $.logTemplate;
        this.noCache = $.noCache;
        this.platform = $.platform;
        this.sourceLocation = $.sourceLocation;
        this.target = $.target;
        this.timeout = $.timeout;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DockerBuildRequestArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DockerBuildRequestArgs $;

        public Builder() {
            $ = new DockerBuildRequestArgs();
        }

        public Builder(DockerBuildRequestArgs defaults) {
            $ = new DockerBuildRequestArgs(Objects.requireNonNull(defaults));
        }

        public Builder agentConfiguration(@Nullable Output<AgentPropertiesArgs> agentConfiguration) {
            $.agentConfiguration = agentConfiguration;
            return this;
        }

        public Builder agentConfiguration(AgentPropertiesArgs agentConfiguration) {
            return agentConfiguration(Output.of(agentConfiguration));
        }

        public Builder agentPoolName(@Nullable Output<String> agentPoolName) {
            $.agentPoolName = agentPoolName;
            return this;
        }

        public Builder agentPoolName(String agentPoolName) {
            return agentPoolName(Output.of(agentPoolName));
        }

        public Builder arguments(@Nullable Output<List<ArgumentArgs>> arguments) {
            $.arguments = arguments;
            return this;
        }

        public Builder arguments(List<ArgumentArgs> arguments) {
            return arguments(Output.of(arguments));
        }

        public Builder arguments(ArgumentArgs... arguments) {
            return arguments(List.of(arguments));
        }

        public Builder credentials(@Nullable Output<CredentialsArgs> credentials) {
            $.credentials = credentials;
            return this;
        }

        public Builder credentials(CredentialsArgs credentials) {
            return credentials(Output.of(credentials));
        }

        public Builder dockerFilePath(Output<String> dockerFilePath) {
            $.dockerFilePath = dockerFilePath;
            return this;
        }

        public Builder dockerFilePath(String dockerFilePath) {
            return dockerFilePath(Output.of(dockerFilePath));
        }

        public Builder imageNames(@Nullable Output<List<String>> imageNames) {
            $.imageNames = imageNames;
            return this;
        }

        public Builder imageNames(List<String> imageNames) {
            return imageNames(Output.of(imageNames));
        }

        public Builder imageNames(String... imageNames) {
            return imageNames(List.of(imageNames));
        }

        public Builder isArchiveEnabled(@Nullable Output<Boolean> isArchiveEnabled) {
            $.isArchiveEnabled = isArchiveEnabled;
            return this;
        }

        public Builder isArchiveEnabled(Boolean isArchiveEnabled) {
            return isArchiveEnabled(Output.of(isArchiveEnabled));
        }

        public Builder isPushEnabled(@Nullable Output<Boolean> isPushEnabled) {
            $.isPushEnabled = isPushEnabled;
            return this;
        }

        public Builder isPushEnabled(Boolean isPushEnabled) {
            return isPushEnabled(Output.of(isPushEnabled));
        }

        public Builder logTemplate(@Nullable Output<String> logTemplate) {
            $.logTemplate = logTemplate;
            return this;
        }

        public Builder logTemplate(String logTemplate) {
            return logTemplate(Output.of(logTemplate));
        }

        public Builder noCache(@Nullable Output<Boolean> noCache) {
            $.noCache = noCache;
            return this;
        }

        public Builder noCache(Boolean noCache) {
            return noCache(Output.of(noCache));
        }

        public Builder platform(Output<PlatformPropertiesArgs> platform) {
            $.platform = platform;
            return this;
        }

        public Builder platform(PlatformPropertiesArgs platform) {
            return platform(Output.of(platform));
        }

        public Builder sourceLocation(@Nullable Output<String> sourceLocation) {
            $.sourceLocation = sourceLocation;
            return this;
        }

        public Builder sourceLocation(String sourceLocation) {
            return sourceLocation(Output.of(sourceLocation));
        }

        public Builder target(@Nullable Output<String> target) {
            $.target = target;
            return this;
        }

        public Builder target(String target) {
            return target(Output.of(target));
        }

        public Builder timeout(@Nullable Output<Integer> timeout) {
            $.timeout = timeout;
            return this;
        }

        public Builder timeout(Integer timeout) {
            return timeout(Output.of(timeout));
        }

        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public DockerBuildRequestArgs build() {
            $.dockerFilePath = Objects.requireNonNull($.dockerFilePath, "expected parameter 'dockerFilePath' to be non-null");
            $.isArchiveEnabled = Codegen.booleanProp("isArchiveEnabled").output().arg($.isArchiveEnabled).def(false).getNullable();
            $.isPushEnabled = Codegen.booleanProp("isPushEnabled").output().arg($.isPushEnabled).def(true).getNullable();
            $.noCache = Codegen.booleanProp("noCache").output().arg($.noCache).def(false).getNullable();
            $.platform = Objects.requireNonNull($.platform, "expected parameter 'platform' to be non-null");
            $.timeout = Codegen.integerProp("timeout").output().arg($.timeout).def(3600).getNullable();
            $.type = Codegen.stringProp("type").output().arg($.type).require();
            return $;
        }
    }

}
