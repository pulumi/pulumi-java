// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.customerinsights;

import com.pulumi.azurenative.customerinsights.enums.EntityTypes;
import com.pulumi.azurenative.customerinsights.inputs.PropertyDefinitionArgs;
import com.pulumi.azurenative.customerinsights.inputs.StrongIdArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProfileArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProfileArgs Empty = new ProfileArgs();

    /**
     * The api entity set name. This becomes the odata entity set name for the entity Type being referred in this object.
     * 
     */
    @Import(name="apiEntitySetName")
    private @Nullable Output<String> apiEntitySetName;

    public Optional<Output<String>> apiEntitySetName() {
        return Optional.ofNullable(this.apiEntitySetName);
    }

    /**
     * The attributes for the Type.
     * 
     */
    @Import(name="attributes")
    private @Nullable Output<Map<String,List<String>>> attributes;

    public Optional<Output<Map<String,List<String>>>> attributes() {
        return Optional.ofNullable(this.attributes);
    }

    /**
     * Localized descriptions for the property.
     * 
     */
    @Import(name="description")
    private @Nullable Output<Map<String,String>> description;

    public Optional<Output<Map<String,String>>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Localized display names for the property.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<Map<String,String>> displayName;

    public Optional<Output<Map<String,String>>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Type of entity.
     * 
     */
    @Import(name="entityType")
    private @Nullable Output<EntityTypes> entityType;

    public Optional<Output<EntityTypes>> entityType() {
        return Optional.ofNullable(this.entityType);
    }

    /**
     * The properties of the Profile.
     * 
     */
    @Import(name="fields")
    private @Nullable Output<List<PropertyDefinitionArgs>> fields;

    public Optional<Output<List<PropertyDefinitionArgs>>> fields() {
        return Optional.ofNullable(this.fields);
    }

    /**
     * The name of the hub.
     * 
     */
    @Import(name="hubName", required=true)
    private Output<String> hubName;

    public Output<String> hubName() {
        return this.hubName;
    }

    /**
     * The instance count.
     * 
     */
    @Import(name="instancesCount")
    private @Nullable Output<Integer> instancesCount;

    public Optional<Output<Integer>> instancesCount() {
        return Optional.ofNullable(this.instancesCount);
    }

    /**
     * Large Image associated with the Property or EntityType.
     * 
     */
    @Import(name="largeImage")
    private @Nullable Output<String> largeImage;

    public Optional<Output<String>> largeImage() {
        return Optional.ofNullable(this.largeImage);
    }

    /**
     * Any custom localized attributes for the Type.
     * 
     */
    @Import(name="localizedAttributes")
    private @Nullable Output<Map<String,Map<String,String>>> localizedAttributes;

    public Optional<Output<Map<String,Map<String,String>>>> localizedAttributes() {
        return Optional.ofNullable(this.localizedAttributes);
    }

    /**
     * Medium Image associated with the Property or EntityType.
     * 
     */
    @Import(name="mediumImage")
    private @Nullable Output<String> mediumImage;

    public Optional<Output<String>> mediumImage() {
        return Optional.ofNullable(this.mediumImage);
    }

    /**
     * The name of the profile.
     * 
     */
    @Import(name="profileName")
    private @Nullable Output<String> profileName;

    public Optional<Output<String>> profileName() {
        return Optional.ofNullable(this.profileName);
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The schema org link. This helps ACI identify and suggest semantic models.
     * 
     */
    @Import(name="schemaItemTypeLink")
    private @Nullable Output<String> schemaItemTypeLink;

    public Optional<Output<String>> schemaItemTypeLink() {
        return Optional.ofNullable(this.schemaItemTypeLink);
    }

    /**
     * Small Image associated with the Property or EntityType.
     * 
     */
    @Import(name="smallImage")
    private @Nullable Output<String> smallImage;

    public Optional<Output<String>> smallImage() {
        return Optional.ofNullable(this.smallImage);
    }

    /**
     * The strong IDs.
     * 
     */
    @Import(name="strongIds")
    private @Nullable Output<List<StrongIdArgs>> strongIds;

    public Optional<Output<List<StrongIdArgs>>> strongIds() {
        return Optional.ofNullable(this.strongIds);
    }

    /**
     * The timestamp property name. Represents the time when the interaction or profile update happened.
     * 
     */
    @Import(name="timestampFieldName")
    private @Nullable Output<String> timestampFieldName;

    public Optional<Output<String>> timestampFieldName() {
        return Optional.ofNullable(this.timestampFieldName);
    }

    /**
     * The name of the entity.
     * 
     */
    @Import(name="typeName")
    private @Nullable Output<String> typeName;

    public Optional<Output<String>> typeName() {
        return Optional.ofNullable(this.typeName);
    }

    private ProfileArgs() {}

    private ProfileArgs(ProfileArgs $) {
        this.apiEntitySetName = $.apiEntitySetName;
        this.attributes = $.attributes;
        this.description = $.description;
        this.displayName = $.displayName;
        this.entityType = $.entityType;
        this.fields = $.fields;
        this.hubName = $.hubName;
        this.instancesCount = $.instancesCount;
        this.largeImage = $.largeImage;
        this.localizedAttributes = $.localizedAttributes;
        this.mediumImage = $.mediumImage;
        this.profileName = $.profileName;
        this.resourceGroupName = $.resourceGroupName;
        this.schemaItemTypeLink = $.schemaItemTypeLink;
        this.smallImage = $.smallImage;
        this.strongIds = $.strongIds;
        this.timestampFieldName = $.timestampFieldName;
        this.typeName = $.typeName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProfileArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProfileArgs $;

        public Builder() {
            $ = new ProfileArgs();
        }

        public Builder(ProfileArgs defaults) {
            $ = new ProfileArgs(Objects.requireNonNull(defaults));
        }

        public Builder apiEntitySetName(@Nullable Output<String> apiEntitySetName) {
            $.apiEntitySetName = apiEntitySetName;
            return this;
        }

        public Builder apiEntitySetName(String apiEntitySetName) {
            return apiEntitySetName(Output.of(apiEntitySetName));
        }

        public Builder attributes(@Nullable Output<Map<String,List<String>>> attributes) {
            $.attributes = attributes;
            return this;
        }

        public Builder attributes(Map<String,List<String>> attributes) {
            return attributes(Output.of(attributes));
        }

        public Builder description(@Nullable Output<Map<String,String>> description) {
            $.description = description;
            return this;
        }

        public Builder description(Map<String,String> description) {
            return description(Output.of(description));
        }

        public Builder displayName(@Nullable Output<Map<String,String>> displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder displayName(Map<String,String> displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder entityType(@Nullable Output<EntityTypes> entityType) {
            $.entityType = entityType;
            return this;
        }

        public Builder entityType(EntityTypes entityType) {
            return entityType(Output.of(entityType));
        }

        public Builder fields(@Nullable Output<List<PropertyDefinitionArgs>> fields) {
            $.fields = fields;
            return this;
        }

        public Builder fields(List<PropertyDefinitionArgs> fields) {
            return fields(Output.of(fields));
        }

        public Builder fields(PropertyDefinitionArgs... fields) {
            return fields(List.of(fields));
        }

        public Builder hubName(Output<String> hubName) {
            $.hubName = hubName;
            return this;
        }

        public Builder hubName(String hubName) {
            return hubName(Output.of(hubName));
        }

        public Builder instancesCount(@Nullable Output<Integer> instancesCount) {
            $.instancesCount = instancesCount;
            return this;
        }

        public Builder instancesCount(Integer instancesCount) {
            return instancesCount(Output.of(instancesCount));
        }

        public Builder largeImage(@Nullable Output<String> largeImage) {
            $.largeImage = largeImage;
            return this;
        }

        public Builder largeImage(String largeImage) {
            return largeImage(Output.of(largeImage));
        }

        public Builder localizedAttributes(@Nullable Output<Map<String,Map<String,String>>> localizedAttributes) {
            $.localizedAttributes = localizedAttributes;
            return this;
        }

        public Builder localizedAttributes(Map<String,Map<String,String>> localizedAttributes) {
            return localizedAttributes(Output.of(localizedAttributes));
        }

        public Builder mediumImage(@Nullable Output<String> mediumImage) {
            $.mediumImage = mediumImage;
            return this;
        }

        public Builder mediumImage(String mediumImage) {
            return mediumImage(Output.of(mediumImage));
        }

        public Builder profileName(@Nullable Output<String> profileName) {
            $.profileName = profileName;
            return this;
        }

        public Builder profileName(String profileName) {
            return profileName(Output.of(profileName));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder schemaItemTypeLink(@Nullable Output<String> schemaItemTypeLink) {
            $.schemaItemTypeLink = schemaItemTypeLink;
            return this;
        }

        public Builder schemaItemTypeLink(String schemaItemTypeLink) {
            return schemaItemTypeLink(Output.of(schemaItemTypeLink));
        }

        public Builder smallImage(@Nullable Output<String> smallImage) {
            $.smallImage = smallImage;
            return this;
        }

        public Builder smallImage(String smallImage) {
            return smallImage(Output.of(smallImage));
        }

        public Builder strongIds(@Nullable Output<List<StrongIdArgs>> strongIds) {
            $.strongIds = strongIds;
            return this;
        }

        public Builder strongIds(List<StrongIdArgs> strongIds) {
            return strongIds(Output.of(strongIds));
        }

        public Builder strongIds(StrongIdArgs... strongIds) {
            return strongIds(List.of(strongIds));
        }

        public Builder timestampFieldName(@Nullable Output<String> timestampFieldName) {
            $.timestampFieldName = timestampFieldName;
            return this;
        }

        public Builder timestampFieldName(String timestampFieldName) {
            return timestampFieldName(Output.of(timestampFieldName));
        }

        public Builder typeName(@Nullable Output<String> typeName) {
            $.typeName = typeName;
            return this;
        }

        public Builder typeName(String typeName) {
            return typeName(Output.of(typeName));
        }

        public ProfileArgs build() {
            $.hubName = Objects.requireNonNull($.hubName, "expected parameter 'hubName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
