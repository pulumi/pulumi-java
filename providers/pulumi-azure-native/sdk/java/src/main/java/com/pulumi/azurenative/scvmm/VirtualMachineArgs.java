// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.scvmm;

import com.pulumi.azurenative.scvmm.inputs.CheckpointArgs;
import com.pulumi.azurenative.scvmm.inputs.ExtendedLocationArgs;
import com.pulumi.azurenative.scvmm.inputs.HardwareProfileArgs;
import com.pulumi.azurenative.scvmm.inputs.NetworkProfileArgs;
import com.pulumi.azurenative.scvmm.inputs.OsProfileArgs;
import com.pulumi.azurenative.scvmm.inputs.StorageProfileArgs;
import com.pulumi.azurenative.scvmm.inputs.VirtualMachinePropertiesAvailabilitySetsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VirtualMachineArgs extends com.pulumi.resources.ResourceArgs {

    public static final VirtualMachineArgs Empty = new VirtualMachineArgs();

    /**
     * Availability Sets in vm.
     * 
     */
    @Import(name="availabilitySets")
    private @Nullable Output<List<VirtualMachinePropertiesAvailabilitySetsArgs>> availabilitySets;

    /**
     * @return Availability Sets in vm.
     * 
     */
    public Optional<Output<List<VirtualMachinePropertiesAvailabilitySetsArgs>>> availabilitySets() {
        return Optional.ofNullable(this.availabilitySets);
    }

    /**
     * Type of checkpoint supported for the vm.
     * 
     */
    @Import(name="checkpointType")
    private @Nullable Output<String> checkpointType;

    /**
     * @return Type of checkpoint supported for the vm.
     * 
     */
    public Optional<Output<String>> checkpointType() {
        return Optional.ofNullable(this.checkpointType);
    }

    /**
     * Checkpoints in the vm.
     * 
     */
    @Import(name="checkpoints")
    private @Nullable Output<List<CheckpointArgs>> checkpoints;

    /**
     * @return Checkpoints in the vm.
     * 
     */
    public Optional<Output<List<CheckpointArgs>>> checkpoints() {
        return Optional.ofNullable(this.checkpoints);
    }

    /**
     * ARM Id of the cloud resource to use for deploying the vm.
     * 
     */
    @Import(name="cloudId")
    private @Nullable Output<String> cloudId;

    /**
     * @return ARM Id of the cloud resource to use for deploying the vm.
     * 
     */
    public Optional<Output<String>> cloudId() {
        return Optional.ofNullable(this.cloudId);
    }

    /**
     * The extended location.
     * 
     */
    @Import(name="extendedLocation", required=true)
    private Output<ExtendedLocationArgs> extendedLocation;

    /**
     * @return The extended location.
     * 
     */
    public Output<ExtendedLocationArgs> extendedLocation() {
        return this.extendedLocation;
    }

    /**
     * Gets or sets the generation for the vm.
     * 
     */
    @Import(name="generation")
    private @Nullable Output<Integer> generation;

    /**
     * @return Gets or sets the generation for the vm.
     * 
     */
    public Optional<Output<Integer>> generation() {
        return Optional.ofNullable(this.generation);
    }

    /**
     * Hardware properties.
     * 
     */
    @Import(name="hardwareProfile")
    private @Nullable Output<HardwareProfileArgs> hardwareProfile;

    /**
     * @return Hardware properties.
     * 
     */
    public Optional<Output<HardwareProfileArgs>> hardwareProfile() {
        return Optional.ofNullable(this.hardwareProfile);
    }

    /**
     * Gets or sets the inventory Item ID for the resource.
     * 
     */
    @Import(name="inventoryItemId")
    private @Nullable Output<String> inventoryItemId;

    /**
     * @return Gets or sets the inventory Item ID for the resource.
     * 
     */
    public Optional<Output<String>> inventoryItemId() {
        return Optional.ofNullable(this.inventoryItemId);
    }

    /**
     * Gets or sets the location.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Gets or sets the location.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Network properties.
     * 
     */
    @Import(name="networkProfile")
    private @Nullable Output<NetworkProfileArgs> networkProfile;

    /**
     * @return Network properties.
     * 
     */
    public Optional<Output<NetworkProfileArgs>> networkProfile() {
        return Optional.ofNullable(this.networkProfile);
    }

    /**
     * OS properties.
     * 
     */
    @Import(name="osProfile")
    private @Nullable Output<OsProfileArgs> osProfile;

    /**
     * @return OS properties.
     * 
     */
    public Optional<Output<OsProfileArgs>> osProfile() {
        return Optional.ofNullable(this.osProfile);
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Storage properties.
     * 
     */
    @Import(name="storageProfile")
    private @Nullable Output<StorageProfileArgs> storageProfile;

    /**
     * @return Storage properties.
     * 
     */
    public Optional<Output<StorageProfileArgs>> storageProfile() {
        return Optional.ofNullable(this.storageProfile);
    }

    /**
     * Resource tags
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Resource tags
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * ARM Id of the template resource to use for deploying the vm.
     * 
     */
    @Import(name="templateId")
    private @Nullable Output<String> templateId;

    /**
     * @return ARM Id of the template resource to use for deploying the vm.
     * 
     */
    public Optional<Output<String>> templateId() {
        return Optional.ofNullable(this.templateId);
    }

    /**
     * Unique ID of the virtual machine.
     * 
     */
    @Import(name="uuid")
    private @Nullable Output<String> uuid;

    /**
     * @return Unique ID of the virtual machine.
     * 
     */
    public Optional<Output<String>> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    /**
     * Name of the VirtualMachine.
     * 
     */
    @Import(name="virtualMachineName")
    private @Nullable Output<String> virtualMachineName;

    /**
     * @return Name of the VirtualMachine.
     * 
     */
    public Optional<Output<String>> virtualMachineName() {
        return Optional.ofNullable(this.virtualMachineName);
    }

    /**
     * VMName is the name of VM on the SCVMM server.
     * 
     */
    @Import(name="vmName")
    private @Nullable Output<String> vmName;

    /**
     * @return VMName is the name of VM on the SCVMM server.
     * 
     */
    public Optional<Output<String>> vmName() {
        return Optional.ofNullable(this.vmName);
    }

    /**
     * ARM Id of the vmmServer resource in which this resource resides.
     * 
     */
    @Import(name="vmmServerId")
    private @Nullable Output<String> vmmServerId;

    /**
     * @return ARM Id of the vmmServer resource in which this resource resides.
     * 
     */
    public Optional<Output<String>> vmmServerId() {
        return Optional.ofNullable(this.vmmServerId);
    }

    private VirtualMachineArgs() {}

    private VirtualMachineArgs(VirtualMachineArgs $) {
        this.availabilitySets = $.availabilitySets;
        this.checkpointType = $.checkpointType;
        this.checkpoints = $.checkpoints;
        this.cloudId = $.cloudId;
        this.extendedLocation = $.extendedLocation;
        this.generation = $.generation;
        this.hardwareProfile = $.hardwareProfile;
        this.inventoryItemId = $.inventoryItemId;
        this.location = $.location;
        this.networkProfile = $.networkProfile;
        this.osProfile = $.osProfile;
        this.resourceGroupName = $.resourceGroupName;
        this.storageProfile = $.storageProfile;
        this.tags = $.tags;
        this.templateId = $.templateId;
        this.uuid = $.uuid;
        this.virtualMachineName = $.virtualMachineName;
        this.vmName = $.vmName;
        this.vmmServerId = $.vmmServerId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VirtualMachineArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VirtualMachineArgs $;

        public Builder() {
            $ = new VirtualMachineArgs();
        }

        public Builder(VirtualMachineArgs defaults) {
            $ = new VirtualMachineArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param availabilitySets Availability Sets in vm.
         * 
         * @return builder
         * 
         */
        public Builder availabilitySets(@Nullable Output<List<VirtualMachinePropertiesAvailabilitySetsArgs>> availabilitySets) {
            $.availabilitySets = availabilitySets;
            return this;
        }

        /**
         * @param availabilitySets Availability Sets in vm.
         * 
         * @return builder
         * 
         */
        public Builder availabilitySets(List<VirtualMachinePropertiesAvailabilitySetsArgs> availabilitySets) {
            return availabilitySets(Output.of(availabilitySets));
        }

        /**
         * @param availabilitySets Availability Sets in vm.
         * 
         * @return builder
         * 
         */
        public Builder availabilitySets(VirtualMachinePropertiesAvailabilitySetsArgs... availabilitySets) {
            return availabilitySets(List.of(availabilitySets));
        }

        /**
         * @param checkpointType Type of checkpoint supported for the vm.
         * 
         * @return builder
         * 
         */
        public Builder checkpointType(@Nullable Output<String> checkpointType) {
            $.checkpointType = checkpointType;
            return this;
        }

        /**
         * @param checkpointType Type of checkpoint supported for the vm.
         * 
         * @return builder
         * 
         */
        public Builder checkpointType(String checkpointType) {
            return checkpointType(Output.of(checkpointType));
        }

        /**
         * @param checkpoints Checkpoints in the vm.
         * 
         * @return builder
         * 
         */
        public Builder checkpoints(@Nullable Output<List<CheckpointArgs>> checkpoints) {
            $.checkpoints = checkpoints;
            return this;
        }

        /**
         * @param checkpoints Checkpoints in the vm.
         * 
         * @return builder
         * 
         */
        public Builder checkpoints(List<CheckpointArgs> checkpoints) {
            return checkpoints(Output.of(checkpoints));
        }

        /**
         * @param checkpoints Checkpoints in the vm.
         * 
         * @return builder
         * 
         */
        public Builder checkpoints(CheckpointArgs... checkpoints) {
            return checkpoints(List.of(checkpoints));
        }

        /**
         * @param cloudId ARM Id of the cloud resource to use for deploying the vm.
         * 
         * @return builder
         * 
         */
        public Builder cloudId(@Nullable Output<String> cloudId) {
            $.cloudId = cloudId;
            return this;
        }

        /**
         * @param cloudId ARM Id of the cloud resource to use for deploying the vm.
         * 
         * @return builder
         * 
         */
        public Builder cloudId(String cloudId) {
            return cloudId(Output.of(cloudId));
        }

        /**
         * @param extendedLocation The extended location.
         * 
         * @return builder
         * 
         */
        public Builder extendedLocation(Output<ExtendedLocationArgs> extendedLocation) {
            $.extendedLocation = extendedLocation;
            return this;
        }

        /**
         * @param extendedLocation The extended location.
         * 
         * @return builder
         * 
         */
        public Builder extendedLocation(ExtendedLocationArgs extendedLocation) {
            return extendedLocation(Output.of(extendedLocation));
        }

        /**
         * @param generation Gets or sets the generation for the vm.
         * 
         * @return builder
         * 
         */
        public Builder generation(@Nullable Output<Integer> generation) {
            $.generation = generation;
            return this;
        }

        /**
         * @param generation Gets or sets the generation for the vm.
         * 
         * @return builder
         * 
         */
        public Builder generation(Integer generation) {
            return generation(Output.of(generation));
        }

        /**
         * @param hardwareProfile Hardware properties.
         * 
         * @return builder
         * 
         */
        public Builder hardwareProfile(@Nullable Output<HardwareProfileArgs> hardwareProfile) {
            $.hardwareProfile = hardwareProfile;
            return this;
        }

        /**
         * @param hardwareProfile Hardware properties.
         * 
         * @return builder
         * 
         */
        public Builder hardwareProfile(HardwareProfileArgs hardwareProfile) {
            return hardwareProfile(Output.of(hardwareProfile));
        }

        /**
         * @param inventoryItemId Gets or sets the inventory Item ID for the resource.
         * 
         * @return builder
         * 
         */
        public Builder inventoryItemId(@Nullable Output<String> inventoryItemId) {
            $.inventoryItemId = inventoryItemId;
            return this;
        }

        /**
         * @param inventoryItemId Gets or sets the inventory Item ID for the resource.
         * 
         * @return builder
         * 
         */
        public Builder inventoryItemId(String inventoryItemId) {
            return inventoryItemId(Output.of(inventoryItemId));
        }

        /**
         * @param location Gets or sets the location.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Gets or sets the location.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param networkProfile Network properties.
         * 
         * @return builder
         * 
         */
        public Builder networkProfile(@Nullable Output<NetworkProfileArgs> networkProfile) {
            $.networkProfile = networkProfile;
            return this;
        }

        /**
         * @param networkProfile Network properties.
         * 
         * @return builder
         * 
         */
        public Builder networkProfile(NetworkProfileArgs networkProfile) {
            return networkProfile(Output.of(networkProfile));
        }

        /**
         * @param osProfile OS properties.
         * 
         * @return builder
         * 
         */
        public Builder osProfile(@Nullable Output<OsProfileArgs> osProfile) {
            $.osProfile = osProfile;
            return this;
        }

        /**
         * @param osProfile OS properties.
         * 
         * @return builder
         * 
         */
        public Builder osProfile(OsProfileArgs osProfile) {
            return osProfile(Output.of(osProfile));
        }

        /**
         * @param resourceGroupName The name of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param storageProfile Storage properties.
         * 
         * @return builder
         * 
         */
        public Builder storageProfile(@Nullable Output<StorageProfileArgs> storageProfile) {
            $.storageProfile = storageProfile;
            return this;
        }

        /**
         * @param storageProfile Storage properties.
         * 
         * @return builder
         * 
         */
        public Builder storageProfile(StorageProfileArgs storageProfile) {
            return storageProfile(Output.of(storageProfile));
        }

        /**
         * @param tags Resource tags
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Resource tags
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param templateId ARM Id of the template resource to use for deploying the vm.
         * 
         * @return builder
         * 
         */
        public Builder templateId(@Nullable Output<String> templateId) {
            $.templateId = templateId;
            return this;
        }

        /**
         * @param templateId ARM Id of the template resource to use for deploying the vm.
         * 
         * @return builder
         * 
         */
        public Builder templateId(String templateId) {
            return templateId(Output.of(templateId));
        }

        /**
         * @param uuid Unique ID of the virtual machine.
         * 
         * @return builder
         * 
         */
        public Builder uuid(@Nullable Output<String> uuid) {
            $.uuid = uuid;
            return this;
        }

        /**
         * @param uuid Unique ID of the virtual machine.
         * 
         * @return builder
         * 
         */
        public Builder uuid(String uuid) {
            return uuid(Output.of(uuid));
        }

        /**
         * @param virtualMachineName Name of the VirtualMachine.
         * 
         * @return builder
         * 
         */
        public Builder virtualMachineName(@Nullable Output<String> virtualMachineName) {
            $.virtualMachineName = virtualMachineName;
            return this;
        }

        /**
         * @param virtualMachineName Name of the VirtualMachine.
         * 
         * @return builder
         * 
         */
        public Builder virtualMachineName(String virtualMachineName) {
            return virtualMachineName(Output.of(virtualMachineName));
        }

        /**
         * @param vmName VMName is the name of VM on the SCVMM server.
         * 
         * @return builder
         * 
         */
        public Builder vmName(@Nullable Output<String> vmName) {
            $.vmName = vmName;
            return this;
        }

        /**
         * @param vmName VMName is the name of VM on the SCVMM server.
         * 
         * @return builder
         * 
         */
        public Builder vmName(String vmName) {
            return vmName(Output.of(vmName));
        }

        /**
         * @param vmmServerId ARM Id of the vmmServer resource in which this resource resides.
         * 
         * @return builder
         * 
         */
        public Builder vmmServerId(@Nullable Output<String> vmmServerId) {
            $.vmmServerId = vmmServerId;
            return this;
        }

        /**
         * @param vmmServerId ARM Id of the vmmServer resource in which this resource resides.
         * 
         * @return builder
         * 
         */
        public Builder vmmServerId(String vmmServerId) {
            return vmmServerId(Output.of(vmmServerId));
        }

        public VirtualMachineArgs build() {
            $.extendedLocation = Objects.requireNonNull($.extendedLocation, "expected parameter 'extendedLocation' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
