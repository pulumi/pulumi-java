// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.documentdb;

import com.pulumi.azurenative.documentdb.enums.RoleDefinitionType;
import com.pulumi.azurenative.documentdb.inputs.PermissionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SqlResourceSqlRoleDefinitionArgs extends com.pulumi.resources.ResourceArgs {

    public static final SqlResourceSqlRoleDefinitionArgs Empty = new SqlResourceSqlRoleDefinitionArgs();

    /**
     * Cosmos DB database account name.
     * 
     */
    @Import(name="accountName", required=true)
    private Output<String> accountName;

    public Output<String> accountName() {
        return this.accountName;
    }

    /**
     * A set of fully qualified Scopes at or below which Role Assignments may be created using this Role Definition. This will allow application of this Role Definition on the entire database account or any underlying Database / Collection. Must have at least one element. Scopes higher than Database account are not enforceable as assignable Scopes. Note that resources referenced in assignable Scopes need not exist.
     * 
     */
    @Import(name="assignableScopes")
    private @Nullable Output<List<String>> assignableScopes;

    public Optional<Output<List<String>>> assignableScopes() {
        return Optional.ofNullable(this.assignableScopes);
    }

    /**
     * The set of operations allowed through this Role Definition.
     * 
     */
    @Import(name="permissions")
    private @Nullable Output<List<PermissionArgs>> permissions;

    public Optional<Output<List<PermissionArgs>>> permissions() {
        return Optional.ofNullable(this.permissions);
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The GUID for the Role Definition.
     * 
     */
    @Import(name="roleDefinitionId")
    private @Nullable Output<String> roleDefinitionId;

    public Optional<Output<String>> roleDefinitionId() {
        return Optional.ofNullable(this.roleDefinitionId);
    }

    /**
     * A user-friendly name for the Role Definition. Must be unique for the database account.
     * 
     */
    @Import(name="roleName")
    private @Nullable Output<String> roleName;

    public Optional<Output<String>> roleName() {
        return Optional.ofNullable(this.roleName);
    }

    /**
     * Indicates whether the Role Definition was built-in or user created.
     * 
     */
    @Import(name="type")
    private @Nullable Output<RoleDefinitionType> type;

    public Optional<Output<RoleDefinitionType>> type() {
        return Optional.ofNullable(this.type);
    }

    private SqlResourceSqlRoleDefinitionArgs() {}

    private SqlResourceSqlRoleDefinitionArgs(SqlResourceSqlRoleDefinitionArgs $) {
        this.accountName = $.accountName;
        this.assignableScopes = $.assignableScopes;
        this.permissions = $.permissions;
        this.resourceGroupName = $.resourceGroupName;
        this.roleDefinitionId = $.roleDefinitionId;
        this.roleName = $.roleName;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SqlResourceSqlRoleDefinitionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SqlResourceSqlRoleDefinitionArgs $;

        public Builder() {
            $ = new SqlResourceSqlRoleDefinitionArgs();
        }

        public Builder(SqlResourceSqlRoleDefinitionArgs defaults) {
            $ = new SqlResourceSqlRoleDefinitionArgs(Objects.requireNonNull(defaults));
        }

        public Builder accountName(Output<String> accountName) {
            $.accountName = accountName;
            return this;
        }

        public Builder accountName(String accountName) {
            return accountName(Output.of(accountName));
        }

        public Builder assignableScopes(@Nullable Output<List<String>> assignableScopes) {
            $.assignableScopes = assignableScopes;
            return this;
        }

        public Builder assignableScopes(List<String> assignableScopes) {
            return assignableScopes(Output.of(assignableScopes));
        }

        public Builder assignableScopes(String... assignableScopes) {
            return assignableScopes(List.of(assignableScopes));
        }

        public Builder permissions(@Nullable Output<List<PermissionArgs>> permissions) {
            $.permissions = permissions;
            return this;
        }

        public Builder permissions(List<PermissionArgs> permissions) {
            return permissions(Output.of(permissions));
        }

        public Builder permissions(PermissionArgs... permissions) {
            return permissions(List.of(permissions));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder roleDefinitionId(@Nullable Output<String> roleDefinitionId) {
            $.roleDefinitionId = roleDefinitionId;
            return this;
        }

        public Builder roleDefinitionId(String roleDefinitionId) {
            return roleDefinitionId(Output.of(roleDefinitionId));
        }

        public Builder roleName(@Nullable Output<String> roleName) {
            $.roleName = roleName;
            return this;
        }

        public Builder roleName(String roleName) {
            return roleName(Output.of(roleName));
        }

        public Builder type(@Nullable Output<RoleDefinitionType> type) {
            $.type = type;
            return this;
        }

        public Builder type(RoleDefinitionType type) {
            return type(Output.of(type));
        }

        public SqlResourceSqlRoleDefinitionArgs build() {
            $.accountName = Objects.requireNonNull($.accountName, "expected parameter 'accountName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
