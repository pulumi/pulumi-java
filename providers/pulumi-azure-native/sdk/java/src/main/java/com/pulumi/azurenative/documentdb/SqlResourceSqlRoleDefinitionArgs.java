// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.documentdb;

import com.pulumi.azurenative.documentdb.enums.RoleDefinitionType;
import com.pulumi.azurenative.documentdb.inputs.PermissionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class SqlResourceSqlRoleDefinitionArgs extends com.pulumi.resources.ResourceArgs {

    public static final SqlResourceSqlRoleDefinitionArgs Empty = new SqlResourceSqlRoleDefinitionArgs();

    /**
     * Cosmos DB database account name.
     * 
     */
    @Import(name="accountName", required=true)
      private final Output<String> accountName;

    public Output<String> accountName() {
        return this.accountName;
    }

    /**
     * A set of fully qualified Scopes at or below which Role Assignments may be created using this Role Definition. This will allow application of this Role Definition on the entire database account or any underlying Database / Collection. Must have at least one element. Scopes higher than Database account are not enforceable as assignable Scopes. Note that resources referenced in assignable Scopes need not exist.
     * 
     */
    @Import(name="assignableScopes")
      private final @Nullable Output<List<String>> assignableScopes;

    public Output<List<String>> assignableScopes() {
        return this.assignableScopes == null ? Codegen.empty() : this.assignableScopes;
    }

    /**
     * The set of operations allowed through this Role Definition.
     * 
     */
    @Import(name="permissions")
      private final @Nullable Output<List<PermissionArgs>> permissions;

    public Output<List<PermissionArgs>> permissions() {
        return this.permissions == null ? Codegen.empty() : this.permissions;
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The GUID for the Role Definition.
     * 
     */
    @Import(name="roleDefinitionId")
      private final @Nullable Output<String> roleDefinitionId;

    public Output<String> roleDefinitionId() {
        return this.roleDefinitionId == null ? Codegen.empty() : this.roleDefinitionId;
    }

    /**
     * A user-friendly name for the Role Definition. Must be unique for the database account.
     * 
     */
    @Import(name="roleName")
      private final @Nullable Output<String> roleName;

    public Output<String> roleName() {
        return this.roleName == null ? Codegen.empty() : this.roleName;
    }

    /**
     * Indicates whether the Role Definition was built-in or user created.
     * 
     */
    @Import(name="type")
      private final @Nullable Output<RoleDefinitionType> type;

    public Output<RoleDefinitionType> type() {
        return this.type == null ? Codegen.empty() : this.type;
    }

    public SqlResourceSqlRoleDefinitionArgs(
        Output<String> accountName,
        @Nullable Output<List<String>> assignableScopes,
        @Nullable Output<List<PermissionArgs>> permissions,
        Output<String> resourceGroupName,
        @Nullable Output<String> roleDefinitionId,
        @Nullable Output<String> roleName,
        @Nullable Output<RoleDefinitionType> type) {
        this.accountName = Objects.requireNonNull(accountName, "expected parameter 'accountName' to be non-null");
        this.assignableScopes = assignableScopes;
        this.permissions = permissions;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.roleDefinitionId = roleDefinitionId;
        this.roleName = roleName;
        this.type = type;
    }

    private SqlResourceSqlRoleDefinitionArgs() {
        this.accountName = Codegen.empty();
        this.assignableScopes = Codegen.empty();
        this.permissions = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.roleDefinitionId = Codegen.empty();
        this.roleName = Codegen.empty();
        this.type = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SqlResourceSqlRoleDefinitionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> accountName;
        private @Nullable Output<List<String>> assignableScopes;
        private @Nullable Output<List<PermissionArgs>> permissions;
        private Output<String> resourceGroupName;
        private @Nullable Output<String> roleDefinitionId;
        private @Nullable Output<String> roleName;
        private @Nullable Output<RoleDefinitionType> type;

        public Builder() {
    	      // Empty
        }

        public Builder(SqlResourceSqlRoleDefinitionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountName = defaults.accountName;
    	      this.assignableScopes = defaults.assignableScopes;
    	      this.permissions = defaults.permissions;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.roleDefinitionId = defaults.roleDefinitionId;
    	      this.roleName = defaults.roleName;
    	      this.type = defaults.type;
        }

        public Builder accountName(Output<String> accountName) {
            this.accountName = Objects.requireNonNull(accountName);
            return this;
        }
        public Builder accountName(String accountName) {
            this.accountName = Output.of(Objects.requireNonNull(accountName));
            return this;
        }
        public Builder assignableScopes(@Nullable Output<List<String>> assignableScopes) {
            this.assignableScopes = assignableScopes;
            return this;
        }
        public Builder assignableScopes(@Nullable List<String> assignableScopes) {
            this.assignableScopes = Codegen.ofNullable(assignableScopes);
            return this;
        }
        public Builder assignableScopes(String... assignableScopes) {
            return assignableScopes(List.of(assignableScopes));
        }
        public Builder permissions(@Nullable Output<List<PermissionArgs>> permissions) {
            this.permissions = permissions;
            return this;
        }
        public Builder permissions(@Nullable List<PermissionArgs> permissions) {
            this.permissions = Codegen.ofNullable(permissions);
            return this;
        }
        public Builder permissions(PermissionArgs... permissions) {
            return permissions(List.of(permissions));
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder roleDefinitionId(@Nullable Output<String> roleDefinitionId) {
            this.roleDefinitionId = roleDefinitionId;
            return this;
        }
        public Builder roleDefinitionId(@Nullable String roleDefinitionId) {
            this.roleDefinitionId = Codegen.ofNullable(roleDefinitionId);
            return this;
        }
        public Builder roleName(@Nullable Output<String> roleName) {
            this.roleName = roleName;
            return this;
        }
        public Builder roleName(@Nullable String roleName) {
            this.roleName = Codegen.ofNullable(roleName);
            return this;
        }
        public Builder type(@Nullable Output<RoleDefinitionType> type) {
            this.type = type;
            return this;
        }
        public Builder type(@Nullable RoleDefinitionType type) {
            this.type = Codegen.ofNullable(type);
            return this;
        }        public SqlResourceSqlRoleDefinitionArgs build() {
            return new SqlResourceSqlRoleDefinitionArgs(accountName, assignableScopes, permissions, resourceGroupName, roleDefinitionId, roleName, type);
        }
    }
}
