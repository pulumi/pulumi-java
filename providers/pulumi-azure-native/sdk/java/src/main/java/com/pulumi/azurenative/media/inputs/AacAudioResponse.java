// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.media.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Describes Advanced Audio Codec (AAC) audio encoding settings.
 * 
 */
public final class AacAudioResponse extends com.pulumi.resources.InvokeArgs {

    public static final AacAudioResponse Empty = new AacAudioResponse();

    /**
     * The bitrate, in bits per second, of the output encoded audio.
     * 
     */
    @Import(name="bitrate")
    private @Nullable Integer bitrate;

    /**
     * @return The bitrate, in bits per second, of the output encoded audio.
     * 
     */
    public Optional<Integer> bitrate() {
        return Optional.ofNullable(this.bitrate);
    }

    /**
     * The number of channels in the audio.
     * 
     */
    @Import(name="channels")
    private @Nullable Integer channels;

    /**
     * @return The number of channels in the audio.
     * 
     */
    public Optional<Integer> channels() {
        return Optional.ofNullable(this.channels);
    }

    /**
     * An optional label for the codec. The label can be used to control muxing behavior.
     * 
     */
    @Import(name="label")
    private @Nullable String label;

    /**
     * @return An optional label for the codec. The label can be used to control muxing behavior.
     * 
     */
    public Optional<String> label() {
        return Optional.ofNullable(this.label);
    }

    /**
     * The discriminator for derived types.
     * Expected value is &#39;#Microsoft.Media.AacAudio&#39;.
     * 
     */
    @Import(name="odataType", required=true)
    private String odataType;

    /**
     * @return The discriminator for derived types.
     * Expected value is &#39;#Microsoft.Media.AacAudio&#39;.
     * 
     */
    public String odataType() {
        return this.odataType;
    }

    /**
     * The encoding profile to be used when encoding audio with AAC.
     * 
     */
    @Import(name="profile")
    private @Nullable String profile;

    /**
     * @return The encoding profile to be used when encoding audio with AAC.
     * 
     */
    public Optional<String> profile() {
        return Optional.ofNullable(this.profile);
    }

    /**
     * The sampling rate to use for encoding in hertz.
     * 
     */
    @Import(name="samplingRate")
    private @Nullable Integer samplingRate;

    /**
     * @return The sampling rate to use for encoding in hertz.
     * 
     */
    public Optional<Integer> samplingRate() {
        return Optional.ofNullable(this.samplingRate);
    }

    private AacAudioResponse() {}

    private AacAudioResponse(AacAudioResponse $) {
        this.bitrate = $.bitrate;
        this.channels = $.channels;
        this.label = $.label;
        this.odataType = $.odataType;
        this.profile = $.profile;
        this.samplingRate = $.samplingRate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AacAudioResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AacAudioResponse $;

        public Builder() {
            $ = new AacAudioResponse();
        }

        public Builder(AacAudioResponse defaults) {
            $ = new AacAudioResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param bitrate The bitrate, in bits per second, of the output encoded audio.
         * 
         * @return builder
         * 
         */
        public Builder bitrate(@Nullable Integer bitrate) {
            $.bitrate = bitrate;
            return this;
        }

        /**
         * @param channels The number of channels in the audio.
         * 
         * @return builder
         * 
         */
        public Builder channels(@Nullable Integer channels) {
            $.channels = channels;
            return this;
        }

        /**
         * @param label An optional label for the codec. The label can be used to control muxing behavior.
         * 
         * @return builder
         * 
         */
        public Builder label(@Nullable String label) {
            $.label = label;
            return this;
        }

        /**
         * @param odataType The discriminator for derived types.
         * Expected value is &#39;#Microsoft.Media.AacAudio&#39;.
         * 
         * @return builder
         * 
         */
        public Builder odataType(String odataType) {
            $.odataType = odataType;
            return this;
        }

        /**
         * @param profile The encoding profile to be used when encoding audio with AAC.
         * 
         * @return builder
         * 
         */
        public Builder profile(@Nullable String profile) {
            $.profile = profile;
            return this;
        }

        /**
         * @param samplingRate The sampling rate to use for encoding in hertz.
         * 
         * @return builder
         * 
         */
        public Builder samplingRate(@Nullable Integer samplingRate) {
            $.samplingRate = samplingRate;
            return this;
        }

        public AacAudioResponse build() {
            $.odataType = Codegen.stringProp("odataType").arg($.odataType).require();
            return $;
        }
    }

}
