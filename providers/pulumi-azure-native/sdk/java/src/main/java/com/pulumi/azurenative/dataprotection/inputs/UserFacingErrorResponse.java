// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.dataprotection.inputs;

import com.pulumi.azurenative.dataprotection.inputs.InnerErrorResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Error object used by layers that have access to localized content, and propagate that to user
 * 
 */
public final class UserFacingErrorResponse extends com.pulumi.resources.InvokeArgs {

    public static final UserFacingErrorResponse Empty = new UserFacingErrorResponse();

    /**
     * Unique code for this error
     * 
     */
    @Import(name="code")
    private @Nullable String code;

    /**
     * @return Unique code for this error
     * 
     */
    public Optional<String> code() {
        return Optional.ofNullable(this.code);
    }

    /**
     * Additional related Errors
     * 
     */
    @Import(name="details")
    private @Nullable List<UserFacingErrorResponse> details;

    /**
     * @return Additional related Errors
     * 
     */
    public Optional<List<UserFacingErrorResponse>> details() {
        return Optional.ofNullable(this.details);
    }

    /**
     * Inner Error
     * 
     */
    @Import(name="innerError")
    private @Nullable InnerErrorResponse innerError;

    /**
     * @return Inner Error
     * 
     */
    public Optional<InnerErrorResponse> innerError() {
        return Optional.ofNullable(this.innerError);
    }

    /**
     * Whether the operation will be retryable or not
     * 
     */
    @Import(name="isRetryable")
    private @Nullable Boolean isRetryable;

    /**
     * @return Whether the operation will be retryable or not
     * 
     */
    public Optional<Boolean> isRetryable() {
        return Optional.ofNullable(this.isRetryable);
    }

    /**
     * Whether the operation is due to a user error or service error
     * 
     */
    @Import(name="isUserError")
    private @Nullable Boolean isUserError;

    /**
     * @return Whether the operation is due to a user error or service error
     * 
     */
    public Optional<Boolean> isUserError() {
        return Optional.ofNullable(this.isUserError);
    }

    @Import(name="message")
    private @Nullable String message;

    public Optional<String> message() {
        return Optional.ofNullable(this.message);
    }

    /**
     * Any key value pairs that can be injected inside error object
     * 
     */
    @Import(name="properties")
    private @Nullable Map<String,String> properties;

    /**
     * @return Any key value pairs that can be injected inside error object
     * 
     */
    public Optional<Map<String,String>> properties() {
        return Optional.ofNullable(this.properties);
    }

    /**
     * RecommendedAction � localized.
     * 
     */
    @Import(name="recommendedAction")
    private @Nullable List<String> recommendedAction;

    /**
     * @return RecommendedAction � localized.
     * 
     */
    public Optional<List<String>> recommendedAction() {
        return Optional.ofNullable(this.recommendedAction);
    }

    /**
     * Target of the error.
     * 
     */
    @Import(name="target")
    private @Nullable String target;

    /**
     * @return Target of the error.
     * 
     */
    public Optional<String> target() {
        return Optional.ofNullable(this.target);
    }

    private UserFacingErrorResponse() {}

    private UserFacingErrorResponse(UserFacingErrorResponse $) {
        this.code = $.code;
        this.details = $.details;
        this.innerError = $.innerError;
        this.isRetryable = $.isRetryable;
        this.isUserError = $.isUserError;
        this.message = $.message;
        this.properties = $.properties;
        this.recommendedAction = $.recommendedAction;
        this.target = $.target;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserFacingErrorResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserFacingErrorResponse $;

        public Builder() {
            $ = new UserFacingErrorResponse();
        }

        public Builder(UserFacingErrorResponse defaults) {
            $ = new UserFacingErrorResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param code Unique code for this error
         * 
         * @return builder
         * 
         */
        public Builder code(@Nullable String code) {
            $.code = code;
            return this;
        }

        /**
         * @param details Additional related Errors
         * 
         * @return builder
         * 
         */
        public Builder details(@Nullable List<UserFacingErrorResponse> details) {
            $.details = details;
            return this;
        }

        /**
         * @param details Additional related Errors
         * 
         * @return builder
         * 
         */
        public Builder details(UserFacingErrorResponse... details) {
            return details(List.of(details));
        }

        /**
         * @param innerError Inner Error
         * 
         * @return builder
         * 
         */
        public Builder innerError(@Nullable InnerErrorResponse innerError) {
            $.innerError = innerError;
            return this;
        }

        /**
         * @param isRetryable Whether the operation will be retryable or not
         * 
         * @return builder
         * 
         */
        public Builder isRetryable(@Nullable Boolean isRetryable) {
            $.isRetryable = isRetryable;
            return this;
        }

        /**
         * @param isUserError Whether the operation is due to a user error or service error
         * 
         * @return builder
         * 
         */
        public Builder isUserError(@Nullable Boolean isUserError) {
            $.isUserError = isUserError;
            return this;
        }

        public Builder message(@Nullable String message) {
            $.message = message;
            return this;
        }

        /**
         * @param properties Any key value pairs that can be injected inside error object
         * 
         * @return builder
         * 
         */
        public Builder properties(@Nullable Map<String,String> properties) {
            $.properties = properties;
            return this;
        }

        /**
         * @param recommendedAction RecommendedAction � localized.
         * 
         * @return builder
         * 
         */
        public Builder recommendedAction(@Nullable List<String> recommendedAction) {
            $.recommendedAction = recommendedAction;
            return this;
        }

        /**
         * @param recommendedAction RecommendedAction � localized.
         * 
         * @return builder
         * 
         */
        public Builder recommendedAction(String... recommendedAction) {
            return recommendedAction(List.of(recommendedAction));
        }

        /**
         * @param target Target of the error.
         * 
         * @return builder
         * 
         */
        public Builder target(@Nullable String target) {
            $.target = target;
            return this;
        }

        public UserFacingErrorResponse build() {
            return $;
        }
    }

}
