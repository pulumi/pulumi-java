// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.azurenative.network.inputs.RulesEngineActionResponse;
import com.pulumi.azurenative.network.inputs.RulesEngineMatchConditionResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Contains a list of match conditions, and an action on how to modify the request/response. If multiple rules match, the actions from one rule that conflict with a previous rule overwrite for a singular action, or append in the case of headers manipulation.
 * 
 */
public final class RulesEngineRuleResponse extends com.pulumi.resources.InvokeArgs {

    public static final RulesEngineRuleResponse Empty = new RulesEngineRuleResponse();

    /**
     * Actions to perform on the request and response if all of the match conditions are met.
     * 
     */
    @Import(name="action", required=true)
    private RulesEngineActionResponse action;

    public RulesEngineActionResponse action() {
        return this.action;
    }

    /**
     * A list of match conditions that must meet in order for the actions of this rule to run. Having no match conditions means the actions will always run.
     * 
     */
    @Import(name="matchConditions")
    private @Nullable List<RulesEngineMatchConditionResponse> matchConditions;

    public Optional<List<RulesEngineMatchConditionResponse>> matchConditions() {
        return Optional.ofNullable(this.matchConditions);
    }

    /**
     * If this rule is a match should the rules engine continue running the remaining rules or stop. If not present, defaults to Continue.
     * 
     */
    @Import(name="matchProcessingBehavior")
    private @Nullable String matchProcessingBehavior;

    public Optional<String> matchProcessingBehavior() {
        return Optional.ofNullable(this.matchProcessingBehavior);
    }

    /**
     * A name to refer to this specific rule.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    public String name() {
        return this.name;
    }

    /**
     * A priority assigned to this rule.
     * 
     */
    @Import(name="priority", required=true)
    private Integer priority;

    public Integer priority() {
        return this.priority;
    }

    private RulesEngineRuleResponse() {}

    private RulesEngineRuleResponse(RulesEngineRuleResponse $) {
        this.action = $.action;
        this.matchConditions = $.matchConditions;
        this.matchProcessingBehavior = $.matchProcessingBehavior;
        this.name = $.name;
        this.priority = $.priority;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RulesEngineRuleResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RulesEngineRuleResponse $;

        public Builder() {
            $ = new RulesEngineRuleResponse();
        }

        public Builder(RulesEngineRuleResponse defaults) {
            $ = new RulesEngineRuleResponse(Objects.requireNonNull(defaults));
        }

        public Builder action(RulesEngineActionResponse action) {
            $.action = action;
            return this;
        }

        public Builder matchConditions(@Nullable List<RulesEngineMatchConditionResponse> matchConditions) {
            $.matchConditions = matchConditions;
            return this;
        }

        public Builder matchConditions(RulesEngineMatchConditionResponse... matchConditions) {
            return matchConditions(List.of(matchConditions));
        }

        public Builder matchProcessingBehavior(@Nullable String matchProcessingBehavior) {
            $.matchProcessingBehavior = matchProcessingBehavior;
            return this;
        }

        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public Builder priority(Integer priority) {
            $.priority = priority;
            return this;
        }

        public RulesEngineRuleResponse build() {
            $.action = Objects.requireNonNull($.action, "expected parameter 'action' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.priority = Objects.requireNonNull($.priority, "expected parameter 'priority' to be non-null");
            return $;
        }
    }

}
