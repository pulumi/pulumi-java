// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.kubernetes.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;


/**
 * Contains the REP (rendezvous endpoint) and “Sender” access token.
 * 
 */
public final class HybridConnectionConfigResponse extends com.pulumi.resources.InvokeArgs {

    public static final HybridConnectionConfigResponse Empty = new HybridConnectionConfigResponse();

    /**
     * Timestamp when this token will be expired.
     * 
     */
    @Import(name="expirationTime", required=true)
    private Double expirationTime;

    /**
     * @return Timestamp when this token will be expired.
     * 
     */
    public Double expirationTime() {
        return this.expirationTime;
    }

    /**
     * Name of the connection
     * 
     */
    @Import(name="hybridConnectionName", required=true)
    private String hybridConnectionName;

    /**
     * @return Name of the connection
     * 
     */
    public String hybridConnectionName() {
        return this.hybridConnectionName;
    }

    /**
     * Name of the relay.
     * 
     */
    @Import(name="relay", required=true)
    private String relay;

    /**
     * @return Name of the relay.
     * 
     */
    public String relay() {
        return this.relay;
    }

    /**
     * Sender access token
     * 
     */
    @Import(name="token", required=true)
    private String token;

    /**
     * @return Sender access token
     * 
     */
    public String token() {
        return this.token;
    }

    private HybridConnectionConfigResponse() {}

    private HybridConnectionConfigResponse(HybridConnectionConfigResponse $) {
        this.expirationTime = $.expirationTime;
        this.hybridConnectionName = $.hybridConnectionName;
        this.relay = $.relay;
        this.token = $.token;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HybridConnectionConfigResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HybridConnectionConfigResponse $;

        public Builder() {
            $ = new HybridConnectionConfigResponse();
        }

        public Builder(HybridConnectionConfigResponse defaults) {
            $ = new HybridConnectionConfigResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param expirationTime Timestamp when this token will be expired.
         * 
         * @return builder
         * 
         */
        public Builder expirationTime(Double expirationTime) {
            $.expirationTime = expirationTime;
            return this;
        }

        /**
         * @param hybridConnectionName Name of the connection
         * 
         * @return builder
         * 
         */
        public Builder hybridConnectionName(String hybridConnectionName) {
            $.hybridConnectionName = hybridConnectionName;
            return this;
        }

        /**
         * @param relay Name of the relay.
         * 
         * @return builder
         * 
         */
        public Builder relay(String relay) {
            $.relay = relay;
            return this;
        }

        /**
         * @param token Sender access token
         * 
         * @return builder
         * 
         */
        public Builder token(String token) {
            $.token = token;
            return this;
        }

        public HybridConnectionConfigResponse build() {
            $.expirationTime = Objects.requireNonNull($.expirationTime, "expected parameter 'expirationTime' to be non-null");
            $.hybridConnectionName = Objects.requireNonNull($.hybridConnectionName, "expected parameter 'hybridConnectionName' to be non-null");
            $.relay = Objects.requireNonNull($.relay, "expected parameter 'relay' to be non-null");
            $.token = Objects.requireNonNull($.token, "expected parameter 'token' to be non-null");
            return $;
        }
    }

}
