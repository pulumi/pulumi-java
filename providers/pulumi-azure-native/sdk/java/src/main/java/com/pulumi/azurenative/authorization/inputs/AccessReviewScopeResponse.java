// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.authorization.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Descriptor for what needs to be reviewed
 * 
 */
public final class AccessReviewScopeResponse extends com.pulumi.resources.InvokeArgs {

    public static final AccessReviewScopeResponse Empty = new AccessReviewScopeResponse();

    /**
     * The role assignment state eligible/active to review
     * 
     */
    @Import(name="assignmentState", required=true)
    private String assignmentState;

    public String assignmentState() {
        return this.assignmentState;
    }

    /**
     * Flag to indicate whether to expand nested memberships or not.
     * 
     */
    @Import(name="expandNestedMemberships")
    private @Nullable Boolean expandNestedMemberships;

    public Optional<Boolean> expandNestedMemberships() {
        return Optional.ofNullable(this.expandNestedMemberships);
    }

    /**
     * Duration users are inactive for. The value should be in ISO  8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations).This code can be used to convert TimeSpan to a valid interval string: XmlConvert.ToString(new TimeSpan(hours, minutes, seconds))
     * 
     */
    @Import(name="inactiveDuration")
    private @Nullable String inactiveDuration;

    public Optional<String> inactiveDuration() {
        return Optional.ofNullable(this.inactiveDuration);
    }

    /**
     * The identity type user/servicePrincipal to review
     * 
     */
    @Import(name="principalType", required=true)
    private String principalType;

    public String principalType() {
        return this.principalType;
    }

    /**
     * ResourceId in which this review is getting created
     * 
     */
    @Import(name="resourceId", required=true)
    private String resourceId;

    public String resourceId() {
        return this.resourceId;
    }

    /**
     * This is used to indicate the role being reviewed
     * 
     */
    @Import(name="roleDefinitionId", required=true)
    private String roleDefinitionId;

    public String roleDefinitionId() {
        return this.roleDefinitionId;
    }

    private AccessReviewScopeResponse() {}

    private AccessReviewScopeResponse(AccessReviewScopeResponse $) {
        this.assignmentState = $.assignmentState;
        this.expandNestedMemberships = $.expandNestedMemberships;
        this.inactiveDuration = $.inactiveDuration;
        this.principalType = $.principalType;
        this.resourceId = $.resourceId;
        this.roleDefinitionId = $.roleDefinitionId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AccessReviewScopeResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AccessReviewScopeResponse $;

        public Builder() {
            $ = new AccessReviewScopeResponse();
        }

        public Builder(AccessReviewScopeResponse defaults) {
            $ = new AccessReviewScopeResponse(Objects.requireNonNull(defaults));
        }

        public Builder assignmentState(String assignmentState) {
            $.assignmentState = assignmentState;
            return this;
        }

        public Builder expandNestedMemberships(@Nullable Boolean expandNestedMemberships) {
            $.expandNestedMemberships = expandNestedMemberships;
            return this;
        }

        public Builder inactiveDuration(@Nullable String inactiveDuration) {
            $.inactiveDuration = inactiveDuration;
            return this;
        }

        public Builder principalType(String principalType) {
            $.principalType = principalType;
            return this;
        }

        public Builder resourceId(String resourceId) {
            $.resourceId = resourceId;
            return this;
        }

        public Builder roleDefinitionId(String roleDefinitionId) {
            $.roleDefinitionId = roleDefinitionId;
            return this;
        }

        public AccessReviewScopeResponse build() {
            $.assignmentState = Objects.requireNonNull($.assignmentState, "expected parameter 'assignmentState' to be non-null");
            $.principalType = Objects.requireNonNull($.principalType, "expected parameter 'principalType' to be non-null");
            $.resourceId = Objects.requireNonNull($.resourceId, "expected parameter 'resourceId' to be non-null");
            $.roleDefinitionId = Objects.requireNonNull($.roleDefinitionId, "expected parameter 'roleDefinitionId' to be non-null");
            return $;
        }
    }

}
