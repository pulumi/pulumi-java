// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.web.inputs;

import com.pulumi.azurenative.web.inputs.ArmIdWrapperResponse;
import com.pulumi.azurenative.web.inputs.PrivateLinkConnectionStateResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A remote private endpoint connection
 * 
 */
public final class RemotePrivateEndpointConnectionResponse extends com.pulumi.resources.InvokeArgs {

    public static final RemotePrivateEndpointConnectionResponse Empty = new RemotePrivateEndpointConnectionResponse();

    /**
     * Resource Id.
     * 
     */
    @Import(name="id", required=true)
    private String id;

    /**
     * @return Resource Id.
     * 
     */
    public String id() {
        return this.id;
    }

    /**
     * Private IPAddresses mapped to the remote private endpoint
     * 
     */
    @Import(name="ipAddresses")
    private @Nullable List<String> ipAddresses;

    /**
     * @return Private IPAddresses mapped to the remote private endpoint
     * 
     */
    public Optional<List<String>> ipAddresses() {
        return Optional.ofNullable(this.ipAddresses);
    }

    /**
     * Kind of resource.
     * 
     */
    @Import(name="kind")
    private @Nullable String kind;

    /**
     * @return Kind of resource.
     * 
     */
    public Optional<String> kind() {
        return Optional.ofNullable(this.kind);
    }

    /**
     * Resource Name.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return Resource Name.
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * PrivateEndpoint of a remote private endpoint connection
     * 
     */
    @Import(name="privateEndpoint")
    private @Nullable ArmIdWrapperResponse privateEndpoint;

    /**
     * @return PrivateEndpoint of a remote private endpoint connection
     * 
     */
    public Optional<ArmIdWrapperResponse> privateEndpoint() {
        return Optional.ofNullable(this.privateEndpoint);
    }

    /**
     * The state of a private link connection
     * 
     */
    @Import(name="privateLinkServiceConnectionState")
    private @Nullable PrivateLinkConnectionStateResponse privateLinkServiceConnectionState;

    /**
     * @return The state of a private link connection
     * 
     */
    public Optional<PrivateLinkConnectionStateResponse> privateLinkServiceConnectionState() {
        return Optional.ofNullable(this.privateLinkServiceConnectionState);
    }

    @Import(name="provisioningState", required=true)
    private String provisioningState;

    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Resource type.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    /**
     * @return Resource type.
     * 
     */
    public String type() {
        return this.type;
    }

    private RemotePrivateEndpointConnectionResponse() {}

    private RemotePrivateEndpointConnectionResponse(RemotePrivateEndpointConnectionResponse $) {
        this.id = $.id;
        this.ipAddresses = $.ipAddresses;
        this.kind = $.kind;
        this.name = $.name;
        this.privateEndpoint = $.privateEndpoint;
        this.privateLinkServiceConnectionState = $.privateLinkServiceConnectionState;
        this.provisioningState = $.provisioningState;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RemotePrivateEndpointConnectionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RemotePrivateEndpointConnectionResponse $;

        public Builder() {
            $ = new RemotePrivateEndpointConnectionResponse();
        }

        public Builder(RemotePrivateEndpointConnectionResponse defaults) {
            $ = new RemotePrivateEndpointConnectionResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param id Resource Id.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            $.id = id;
            return this;
        }

        /**
         * @param ipAddresses Private IPAddresses mapped to the remote private endpoint
         * 
         * @return builder
         * 
         */
        public Builder ipAddresses(@Nullable List<String> ipAddresses) {
            $.ipAddresses = ipAddresses;
            return this;
        }

        /**
         * @param ipAddresses Private IPAddresses mapped to the remote private endpoint
         * 
         * @return builder
         * 
         */
        public Builder ipAddresses(String... ipAddresses) {
            return ipAddresses(List.of(ipAddresses));
        }

        /**
         * @param kind Kind of resource.
         * 
         * @return builder
         * 
         */
        public Builder kind(@Nullable String kind) {
            $.kind = kind;
            return this;
        }

        /**
         * @param name Resource Name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param privateEndpoint PrivateEndpoint of a remote private endpoint connection
         * 
         * @return builder
         * 
         */
        public Builder privateEndpoint(@Nullable ArmIdWrapperResponse privateEndpoint) {
            $.privateEndpoint = privateEndpoint;
            return this;
        }

        /**
         * @param privateLinkServiceConnectionState The state of a private link connection
         * 
         * @return builder
         * 
         */
        public Builder privateLinkServiceConnectionState(@Nullable PrivateLinkConnectionStateResponse privateLinkServiceConnectionState) {
            $.privateLinkServiceConnectionState = privateLinkServiceConnectionState;
            return this;
        }

        public Builder provisioningState(String provisioningState) {
            $.provisioningState = provisioningState;
            return this;
        }

        /**
         * @param type Resource type.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public RemotePrivateEndpointConnectionResponse build() {
            $.id = Objects.requireNonNull($.id, "expected parameter 'id' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.provisioningState = Objects.requireNonNull($.provisioningState, "expected parameter 'provisioningState' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
