// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network;

import com.pulumi.azurenative.network.enums.EndpointMonitorStatus;
import com.pulumi.azurenative.network.enums.EndpointStatus;
import com.pulumi.azurenative.network.inputs.EndpointPropertiesCustomHeadersArgs;
import com.pulumi.azurenative.network.inputs.EndpointPropertiesSubnetsArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EndpointArgs extends com.pulumi.resources.ResourceArgs {

    public static final EndpointArgs Empty = new EndpointArgs();

    /**
     * List of custom headers.
     * 
     */
    @Import(name="customHeaders")
    private @Nullable Output<List<EndpointPropertiesCustomHeadersArgs>> customHeaders;

    public Optional<Output<List<EndpointPropertiesCustomHeadersArgs>>> customHeaders() {
        return Optional.ofNullable(this.customHeaders);
    }

    /**
     * Specifies the location of the external or nested endpoints when using the &#39;Performance&#39; traffic routing method.
     * 
     */
    @Import(name="endpointLocation")
    private @Nullable Output<String> endpointLocation;

    public Optional<Output<String>> endpointLocation() {
        return Optional.ofNullable(this.endpointLocation);
    }

    /**
     * The monitoring status of the endpoint.
     * 
     */
    @Import(name="endpointMonitorStatus")
    private @Nullable Output<Either<String,EndpointMonitorStatus>> endpointMonitorStatus;

    public Optional<Output<Either<String,EndpointMonitorStatus>>> endpointMonitorStatus() {
        return Optional.ofNullable(this.endpointMonitorStatus);
    }

    /**
     * The name of the Traffic Manager endpoint to be created or updated.
     * 
     */
    @Import(name="endpointName")
    private @Nullable Output<String> endpointName;

    public Optional<Output<String>> endpointName() {
        return Optional.ofNullable(this.endpointName);
    }

    /**
     * The status of the endpoint. If the endpoint is Enabled, it is probed for endpoint health and is included in the traffic routing method.
     * 
     */
    @Import(name="endpointStatus")
    private @Nullable Output<Either<String,EndpointStatus>> endpointStatus;

    public Optional<Output<Either<String,EndpointStatus>>> endpointStatus() {
        return Optional.ofNullable(this.endpointStatus);
    }

    /**
     * The type of the Traffic Manager endpoint to be created or updated.
     * 
     */
    @Import(name="endpointType", required=true)
    private Output<String> endpointType;

    public Output<String> endpointType() {
        return this.endpointType;
    }

    /**
     * The list of countries/regions mapped to this endpoint when using the &#39;Geographic&#39; traffic routing method. Please consult Traffic Manager Geographic documentation for a full list of accepted values.
     * 
     */
    @Import(name="geoMapping")
    private @Nullable Output<List<String>> geoMapping;

    public Optional<Output<List<String>>> geoMapping() {
        return Optional.ofNullable(this.geoMapping);
    }

    /**
     * Fully qualified resource Id for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficManagerProfiles/{resourceName}
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The minimum number of endpoints that must be available in the child profile in order for the parent profile to be considered available. Only applicable to endpoint of type &#39;NestedEndpoints&#39;.
     * 
     */
    @Import(name="minChildEndpoints")
    private @Nullable Output<Double> minChildEndpoints;

    public Optional<Output<Double>> minChildEndpoints() {
        return Optional.ofNullable(this.minChildEndpoints);
    }

    /**
     * The minimum number of IPv4 (DNS record type A) endpoints that must be available in the child profile in order for the parent profile to be considered available. Only applicable to endpoint of type &#39;NestedEndpoints&#39;.
     * 
     */
    @Import(name="minChildEndpointsIPv4")
    private @Nullable Output<Double> minChildEndpointsIPv4;

    public Optional<Output<Double>> minChildEndpointsIPv4() {
        return Optional.ofNullable(this.minChildEndpointsIPv4);
    }

    /**
     * The minimum number of IPv6 (DNS record type AAAA) endpoints that must be available in the child profile in order for the parent profile to be considered available. Only applicable to endpoint of type &#39;NestedEndpoints&#39;.
     * 
     */
    @Import(name="minChildEndpointsIPv6")
    private @Nullable Output<Double> minChildEndpointsIPv6;

    public Optional<Output<Double>> minChildEndpointsIPv6() {
        return Optional.ofNullable(this.minChildEndpointsIPv6);
    }

    /**
     * The name of the resource
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The priority of this endpoint when using the &#39;Priority&#39; traffic routing method. Possible values are from 1 to 1000, lower values represent higher priority. This is an optional parameter.  If specified, it must be specified on all endpoints, and no two endpoints can share the same priority value.
     * 
     */
    @Import(name="priority")
    private @Nullable Output<Double> priority;

    public Optional<Output<Double>> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * The name of the Traffic Manager profile.
     * 
     */
    @Import(name="profileName", required=true)
    private Output<String> profileName;

    public Output<String> profileName() {
        return this.profileName;
    }

    /**
     * The name of the resource group containing the Traffic Manager endpoint to be created or updated.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The list of subnets, IP addresses, and/or address ranges mapped to this endpoint when using the &#39;Subnet&#39; traffic routing method. An empty list will match all ranges not covered by other endpoints.
     * 
     */
    @Import(name="subnets")
    private @Nullable Output<List<EndpointPropertiesSubnetsArgs>> subnets;

    public Optional<Output<List<EndpointPropertiesSubnetsArgs>>> subnets() {
        return Optional.ofNullable(this.subnets);
    }

    /**
     * The fully-qualified DNS name or IP address of the endpoint. Traffic Manager returns this value in DNS responses to direct traffic to this endpoint.
     * 
     */
    @Import(name="target")
    private @Nullable Output<String> target;

    public Optional<Output<String>> target() {
        return Optional.ofNullable(this.target);
    }

    /**
     * The Azure Resource URI of the of the endpoint. Not applicable to endpoints of type &#39;ExternalEndpoints&#39;.
     * 
     */
    @Import(name="targetResourceId")
    private @Nullable Output<String> targetResourceId;

    public Optional<Output<String>> targetResourceId() {
        return Optional.ofNullable(this.targetResourceId);
    }

    /**
     * The type of the resource. Ex- Microsoft.Network/trafficManagerProfiles.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * The weight of this endpoint when using the &#39;Weighted&#39; traffic routing method. Possible values are from 1 to 1000.
     * 
     */
    @Import(name="weight")
    private @Nullable Output<Double> weight;

    public Optional<Output<Double>> weight() {
        return Optional.ofNullable(this.weight);
    }

    private EndpointArgs() {}

    private EndpointArgs(EndpointArgs $) {
        this.customHeaders = $.customHeaders;
        this.endpointLocation = $.endpointLocation;
        this.endpointMonitorStatus = $.endpointMonitorStatus;
        this.endpointName = $.endpointName;
        this.endpointStatus = $.endpointStatus;
        this.endpointType = $.endpointType;
        this.geoMapping = $.geoMapping;
        this.id = $.id;
        this.minChildEndpoints = $.minChildEndpoints;
        this.minChildEndpointsIPv4 = $.minChildEndpointsIPv4;
        this.minChildEndpointsIPv6 = $.minChildEndpointsIPv6;
        this.name = $.name;
        this.priority = $.priority;
        this.profileName = $.profileName;
        this.resourceGroupName = $.resourceGroupName;
        this.subnets = $.subnets;
        this.target = $.target;
        this.targetResourceId = $.targetResourceId;
        this.type = $.type;
        this.weight = $.weight;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EndpointArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EndpointArgs $;

        public Builder() {
            $ = new EndpointArgs();
        }

        public Builder(EndpointArgs defaults) {
            $ = new EndpointArgs(Objects.requireNonNull(defaults));
        }

        public Builder customHeaders(@Nullable Output<List<EndpointPropertiesCustomHeadersArgs>> customHeaders) {
            $.customHeaders = customHeaders;
            return this;
        }

        public Builder customHeaders(List<EndpointPropertiesCustomHeadersArgs> customHeaders) {
            return customHeaders(Output.of(customHeaders));
        }

        public Builder customHeaders(EndpointPropertiesCustomHeadersArgs... customHeaders) {
            return customHeaders(List.of(customHeaders));
        }

        public Builder endpointLocation(@Nullable Output<String> endpointLocation) {
            $.endpointLocation = endpointLocation;
            return this;
        }

        public Builder endpointLocation(String endpointLocation) {
            return endpointLocation(Output.of(endpointLocation));
        }

        public Builder endpointMonitorStatus(@Nullable Output<Either<String,EndpointMonitorStatus>> endpointMonitorStatus) {
            $.endpointMonitorStatus = endpointMonitorStatus;
            return this;
        }

        public Builder endpointMonitorStatus(Either<String,EndpointMonitorStatus> endpointMonitorStatus) {
            return endpointMonitorStatus(Output.of(endpointMonitorStatus));
        }

        public Builder endpointName(@Nullable Output<String> endpointName) {
            $.endpointName = endpointName;
            return this;
        }

        public Builder endpointName(String endpointName) {
            return endpointName(Output.of(endpointName));
        }

        public Builder endpointStatus(@Nullable Output<Either<String,EndpointStatus>> endpointStatus) {
            $.endpointStatus = endpointStatus;
            return this;
        }

        public Builder endpointStatus(Either<String,EndpointStatus> endpointStatus) {
            return endpointStatus(Output.of(endpointStatus));
        }

        public Builder endpointType(Output<String> endpointType) {
            $.endpointType = endpointType;
            return this;
        }

        public Builder endpointType(String endpointType) {
            return endpointType(Output.of(endpointType));
        }

        public Builder geoMapping(@Nullable Output<List<String>> geoMapping) {
            $.geoMapping = geoMapping;
            return this;
        }

        public Builder geoMapping(List<String> geoMapping) {
            return geoMapping(Output.of(geoMapping));
        }

        public Builder geoMapping(String... geoMapping) {
            return geoMapping(List.of(geoMapping));
        }

        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        public Builder id(String id) {
            return id(Output.of(id));
        }

        public Builder minChildEndpoints(@Nullable Output<Double> minChildEndpoints) {
            $.minChildEndpoints = minChildEndpoints;
            return this;
        }

        public Builder minChildEndpoints(Double minChildEndpoints) {
            return minChildEndpoints(Output.of(minChildEndpoints));
        }

        public Builder minChildEndpointsIPv4(@Nullable Output<Double> minChildEndpointsIPv4) {
            $.minChildEndpointsIPv4 = minChildEndpointsIPv4;
            return this;
        }

        public Builder minChildEndpointsIPv4(Double minChildEndpointsIPv4) {
            return minChildEndpointsIPv4(Output.of(minChildEndpointsIPv4));
        }

        public Builder minChildEndpointsIPv6(@Nullable Output<Double> minChildEndpointsIPv6) {
            $.minChildEndpointsIPv6 = minChildEndpointsIPv6;
            return this;
        }

        public Builder minChildEndpointsIPv6(Double minChildEndpointsIPv6) {
            return minChildEndpointsIPv6(Output.of(minChildEndpointsIPv6));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder priority(@Nullable Output<Double> priority) {
            $.priority = priority;
            return this;
        }

        public Builder priority(Double priority) {
            return priority(Output.of(priority));
        }

        public Builder profileName(Output<String> profileName) {
            $.profileName = profileName;
            return this;
        }

        public Builder profileName(String profileName) {
            return profileName(Output.of(profileName));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder subnets(@Nullable Output<List<EndpointPropertiesSubnetsArgs>> subnets) {
            $.subnets = subnets;
            return this;
        }

        public Builder subnets(List<EndpointPropertiesSubnetsArgs> subnets) {
            return subnets(Output.of(subnets));
        }

        public Builder subnets(EndpointPropertiesSubnetsArgs... subnets) {
            return subnets(List.of(subnets));
        }

        public Builder target(@Nullable Output<String> target) {
            $.target = target;
            return this;
        }

        public Builder target(String target) {
            return target(Output.of(target));
        }

        public Builder targetResourceId(@Nullable Output<String> targetResourceId) {
            $.targetResourceId = targetResourceId;
            return this;
        }

        public Builder targetResourceId(String targetResourceId) {
            return targetResourceId(Output.of(targetResourceId));
        }

        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public Builder weight(@Nullable Output<Double> weight) {
            $.weight = weight;
            return this;
        }

        public Builder weight(Double weight) {
            return weight(Output.of(weight));
        }

        public EndpointArgs build() {
            $.endpointType = Objects.requireNonNull($.endpointType, "expected parameter 'endpointType' to be non-null");
            $.profileName = Objects.requireNonNull($.profileName, "expected parameter 'profileName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
