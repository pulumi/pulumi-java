// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.web.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The GitHub action container configuration.
 * 
 */
public final class GitHubActionContainerConfigurationResponse extends com.pulumi.resources.InvokeArgs {

    public static final GitHubActionContainerConfigurationResponse Empty = new GitHubActionContainerConfigurationResponse();

    /**
     * The image name for the build.
     * 
     */
    @Import(name="imageName")
    private @Nullable String imageName;

    public Optional<String> imageName() {
        return Optional.ofNullable(this.imageName);
    }

    /**
     * The password used to upload the image to the container registry.
     * 
     */
    @Import(name="password")
    private @Nullable String password;

    public Optional<String> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * The server URL for the container registry where the build will be hosted.
     * 
     */
    @Import(name="serverUrl")
    private @Nullable String serverUrl;

    public Optional<String> serverUrl() {
        return Optional.ofNullable(this.serverUrl);
    }

    /**
     * The username used to upload the image to the container registry.
     * 
     */
    @Import(name="username")
    private @Nullable String username;

    public Optional<String> username() {
        return Optional.ofNullable(this.username);
    }

    private GitHubActionContainerConfigurationResponse() {}

    private GitHubActionContainerConfigurationResponse(GitHubActionContainerConfigurationResponse $) {
        this.imageName = $.imageName;
        this.password = $.password;
        this.serverUrl = $.serverUrl;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GitHubActionContainerConfigurationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GitHubActionContainerConfigurationResponse $;

        public Builder() {
            $ = new GitHubActionContainerConfigurationResponse();
        }

        public Builder(GitHubActionContainerConfigurationResponse defaults) {
            $ = new GitHubActionContainerConfigurationResponse(Objects.requireNonNull(defaults));
        }

        public Builder imageName(@Nullable String imageName) {
            $.imageName = imageName;
            return this;
        }

        public Builder password(@Nullable String password) {
            $.password = password;
            return this;
        }

        public Builder serverUrl(@Nullable String serverUrl) {
            $.serverUrl = serverUrl;
            return this;
        }

        public Builder username(@Nullable String username) {
            $.username = username;
            return this;
        }

        public GitHubActionContainerConfigurationResponse build() {
            return $;
        }
    }

}
