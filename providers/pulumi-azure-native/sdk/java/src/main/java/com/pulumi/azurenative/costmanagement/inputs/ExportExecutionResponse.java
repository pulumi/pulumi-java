// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.costmanagement.inputs;

import com.pulumi.azurenative.costmanagement.inputs.CommonExportPropertiesResponse;
import com.pulumi.azurenative.costmanagement.inputs.ErrorDetailsResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * An export execution.
 * 
 */
public final class ExportExecutionResponse extends com.pulumi.resources.InvokeArgs {

    public static final ExportExecutionResponse Empty = new ExportExecutionResponse();

    /**
     * eTag of the resource. To handle concurrent update scenario, this field will be used to determine whether the user is updating the latest version or not.
     * 
     */
    @Import(name="eTag")
    private @Nullable String eTag;

    public Optional<String> eTag() {
        return Optional.ofNullable(this.eTag);
    }

    /**
     * The details of any error.
     * 
     */
    @Import(name="error")
    private @Nullable ErrorDetailsResponse error;

    public Optional<ErrorDetailsResponse> error() {
        return Optional.ofNullable(this.error);
    }

    /**
     * The type of the export execution.
     * 
     */
    @Import(name="executionType")
    private @Nullable String executionType;

    public Optional<String> executionType() {
        return Optional.ofNullable(this.executionType);
    }

    /**
     * The name of the exported file.
     * 
     */
    @Import(name="fileName")
    private @Nullable String fileName;

    public Optional<String> fileName() {
        return Optional.ofNullable(this.fileName);
    }

    /**
     * Resource Id.
     * 
     */
    @Import(name="id", required=true)
    private String id;

    public String id() {
        return this.id;
    }

    /**
     * Resource name.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    public String name() {
        return this.name;
    }

    /**
     * The time when the export execution finished.
     * 
     */
    @Import(name="processingEndTime")
    private @Nullable String processingEndTime;

    public Optional<String> processingEndTime() {
        return Optional.ofNullable(this.processingEndTime);
    }

    /**
     * The time when export was picked up to be executed.
     * 
     */
    @Import(name="processingStartTime")
    private @Nullable String processingStartTime;

    public Optional<String> processingStartTime() {
        return Optional.ofNullable(this.processingStartTime);
    }

    /**
     * The export settings that were in effect for this execution.
     * 
     */
    @Import(name="runSettings")
    private @Nullable CommonExportPropertiesResponse runSettings;

    public Optional<CommonExportPropertiesResponse> runSettings() {
        return Optional.ofNullable(this.runSettings);
    }

    /**
     * The last known status of the export execution.
     * 
     */
    @Import(name="status")
    private @Nullable String status;

    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The identifier for the entity that executed the export. For OnDemand executions it is the user email. For scheduled executions it is &#39;System&#39;.
     * 
     */
    @Import(name="submittedBy")
    private @Nullable String submittedBy;

    public Optional<String> submittedBy() {
        return Optional.ofNullable(this.submittedBy);
    }

    /**
     * The time when export was queued to be executed.
     * 
     */
    @Import(name="submittedTime")
    private @Nullable String submittedTime;

    public Optional<String> submittedTime() {
        return Optional.ofNullable(this.submittedTime);
    }

    /**
     * Resource type.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    public String type() {
        return this.type;
    }

    private ExportExecutionResponse() {}

    private ExportExecutionResponse(ExportExecutionResponse $) {
        this.eTag = $.eTag;
        this.error = $.error;
        this.executionType = $.executionType;
        this.fileName = $.fileName;
        this.id = $.id;
        this.name = $.name;
        this.processingEndTime = $.processingEndTime;
        this.processingStartTime = $.processingStartTime;
        this.runSettings = $.runSettings;
        this.status = $.status;
        this.submittedBy = $.submittedBy;
        this.submittedTime = $.submittedTime;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExportExecutionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExportExecutionResponse $;

        public Builder() {
            $ = new ExportExecutionResponse();
        }

        public Builder(ExportExecutionResponse defaults) {
            $ = new ExportExecutionResponse(Objects.requireNonNull(defaults));
        }

        public Builder eTag(@Nullable String eTag) {
            $.eTag = eTag;
            return this;
        }

        public Builder error(@Nullable ErrorDetailsResponse error) {
            $.error = error;
            return this;
        }

        public Builder executionType(@Nullable String executionType) {
            $.executionType = executionType;
            return this;
        }

        public Builder fileName(@Nullable String fileName) {
            $.fileName = fileName;
            return this;
        }

        public Builder id(String id) {
            $.id = id;
            return this;
        }

        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public Builder processingEndTime(@Nullable String processingEndTime) {
            $.processingEndTime = processingEndTime;
            return this;
        }

        public Builder processingStartTime(@Nullable String processingStartTime) {
            $.processingStartTime = processingStartTime;
            return this;
        }

        public Builder runSettings(@Nullable CommonExportPropertiesResponse runSettings) {
            $.runSettings = runSettings;
            return this;
        }

        public Builder status(@Nullable String status) {
            $.status = status;
            return this;
        }

        public Builder submittedBy(@Nullable String submittedBy) {
            $.submittedBy = submittedBy;
            return this;
        }

        public Builder submittedTime(@Nullable String submittedTime) {
            $.submittedTime = submittedTime;
            return this;
        }

        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public ExportExecutionResponse build() {
            $.id = Objects.requireNonNull($.id, "expected parameter 'id' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
