// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.machinelearningservices.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;


/**
 * Compute node information related to a AmlCompute.
 * 
 */
public final class AmlComputeNodeInformationResponse extends com.pulumi.resources.InvokeArgs {

    public static final AmlComputeNodeInformationResponse Empty = new AmlComputeNodeInformationResponse();

    /**
     * ID of the compute node.
     * 
     */
    @Import(name="nodeId", required=true)
    private String nodeId;

    /**
     * @return ID of the compute node.
     * 
     */
    public String nodeId() {
        return this.nodeId;
    }

    /**
     * State of the compute node. Values are idle, running, preparing, unusable, leaving and preempted.
     * 
     */
    @Import(name="nodeState", required=true)
    private String nodeState;

    /**
     * @return State of the compute node. Values are idle, running, preparing, unusable, leaving and preempted.
     * 
     */
    public String nodeState() {
        return this.nodeState;
    }

    /**
     * SSH port number of the node.
     * 
     */
    @Import(name="port", required=true)
    private Double port;

    /**
     * @return SSH port number of the node.
     * 
     */
    public Double port() {
        return this.port;
    }

    /**
     * Private IP address of the compute node.
     * 
     */
    @Import(name="privateIpAddress", required=true)
    private String privateIpAddress;

    /**
     * @return Private IP address of the compute node.
     * 
     */
    public String privateIpAddress() {
        return this.privateIpAddress;
    }

    /**
     * Public IP address of the compute node.
     * 
     */
    @Import(name="publicIpAddress", required=true)
    private String publicIpAddress;

    /**
     * @return Public IP address of the compute node.
     * 
     */
    public String publicIpAddress() {
        return this.publicIpAddress;
    }

    /**
     * ID of the Experiment running on the node, if any else null.
     * 
     */
    @Import(name="runId", required=true)
    private String runId;

    /**
     * @return ID of the Experiment running on the node, if any else null.
     * 
     */
    public String runId() {
        return this.runId;
    }

    private AmlComputeNodeInformationResponse() {}

    private AmlComputeNodeInformationResponse(AmlComputeNodeInformationResponse $) {
        this.nodeId = $.nodeId;
        this.nodeState = $.nodeState;
        this.port = $.port;
        this.privateIpAddress = $.privateIpAddress;
        this.publicIpAddress = $.publicIpAddress;
        this.runId = $.runId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AmlComputeNodeInformationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AmlComputeNodeInformationResponse $;

        public Builder() {
            $ = new AmlComputeNodeInformationResponse();
        }

        public Builder(AmlComputeNodeInformationResponse defaults) {
            $ = new AmlComputeNodeInformationResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param nodeId ID of the compute node.
         * 
         * @return builder
         * 
         */
        public Builder nodeId(String nodeId) {
            $.nodeId = nodeId;
            return this;
        }

        /**
         * @param nodeState State of the compute node. Values are idle, running, preparing, unusable, leaving and preempted.
         * 
         * @return builder
         * 
         */
        public Builder nodeState(String nodeState) {
            $.nodeState = nodeState;
            return this;
        }

        /**
         * @param port SSH port number of the node.
         * 
         * @return builder
         * 
         */
        public Builder port(Double port) {
            $.port = port;
            return this;
        }

        /**
         * @param privateIpAddress Private IP address of the compute node.
         * 
         * @return builder
         * 
         */
        public Builder privateIpAddress(String privateIpAddress) {
            $.privateIpAddress = privateIpAddress;
            return this;
        }

        /**
         * @param publicIpAddress Public IP address of the compute node.
         * 
         * @return builder
         * 
         */
        public Builder publicIpAddress(String publicIpAddress) {
            $.publicIpAddress = publicIpAddress;
            return this;
        }

        /**
         * @param runId ID of the Experiment running on the node, if any else null.
         * 
         * @return builder
         * 
         */
        public Builder runId(String runId) {
            $.runId = runId;
            return this;
        }

        public AmlComputeNodeInformationResponse build() {
            $.nodeId = Objects.requireNonNull($.nodeId, "expected parameter 'nodeId' to be non-null");
            $.nodeState = Objects.requireNonNull($.nodeState, "expected parameter 'nodeState' to be non-null");
            $.port = Objects.requireNonNull($.port, "expected parameter 'port' to be non-null");
            $.privateIpAddress = Objects.requireNonNull($.privateIpAddress, "expected parameter 'privateIpAddress' to be non-null");
            $.publicIpAddress = Objects.requireNonNull($.publicIpAddress, "expected parameter 'publicIpAddress' to be non-null");
            $.runId = Objects.requireNonNull($.runId, "expected parameter 'runId' to be non-null");
            return $;
        }
    }

}
