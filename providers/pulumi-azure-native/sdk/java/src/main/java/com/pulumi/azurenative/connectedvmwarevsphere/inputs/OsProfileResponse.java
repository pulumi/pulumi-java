// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.connectedvmwarevsphere.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Defines the resource properties.
 * 
 */
public final class OsProfileResponse extends com.pulumi.resources.InvokeArgs {

    public static final OsProfileResponse Empty = new OsProfileResponse();

    /**
     * Gets or sets administrator username.
     * 
     */
    @Import(name="adminUsername")
    private @Nullable String adminUsername;

    public Optional<String> adminUsername() {
        return Optional.ofNullable(this.adminUsername);
    }

    /**
     * Gets or sets computer name.
     * 
     */
    @Import(name="computerName")
    private @Nullable String computerName;

    public Optional<String> computerName() {
        return Optional.ofNullable(this.computerName);
    }

    /**
     * Gets or sets os name.
     * 
     */
    @Import(name="osName", required=true)
    private String osName;

    public String osName() {
        return this.osName;
    }

    /**
     * Gets or sets the type of the os.
     * 
     */
    @Import(name="osType")
    private @Nullable String osType;

    public Optional<String> osType() {
        return Optional.ofNullable(this.osType);
    }

    /**
     * Gets or sets the current running status of VMware Tools running in the guest operating system.
     * 
     */
    @Import(name="toolsRunningStatus", required=true)
    private String toolsRunningStatus;

    public String toolsRunningStatus() {
        return this.toolsRunningStatus;
    }

    /**
     * Gets or sets the current version of VMware Tools.
     * 
     */
    @Import(name="toolsVersion", required=true)
    private String toolsVersion;

    public String toolsVersion() {
        return this.toolsVersion;
    }

    /**
     * Gets or sets the current version status of VMware Tools installed in the guest operating system.
     * 
     */
    @Import(name="toolsVersionStatus", required=true)
    private String toolsVersionStatus;

    public String toolsVersionStatus() {
        return this.toolsVersionStatus;
    }

    private OsProfileResponse() {}

    private OsProfileResponse(OsProfileResponse $) {
        this.adminUsername = $.adminUsername;
        this.computerName = $.computerName;
        this.osName = $.osName;
        this.osType = $.osType;
        this.toolsRunningStatus = $.toolsRunningStatus;
        this.toolsVersion = $.toolsVersion;
        this.toolsVersionStatus = $.toolsVersionStatus;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OsProfileResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OsProfileResponse $;

        public Builder() {
            $ = new OsProfileResponse();
        }

        public Builder(OsProfileResponse defaults) {
            $ = new OsProfileResponse(Objects.requireNonNull(defaults));
        }

        public Builder adminUsername(@Nullable String adminUsername) {
            $.adminUsername = adminUsername;
            return this;
        }

        public Builder computerName(@Nullable String computerName) {
            $.computerName = computerName;
            return this;
        }

        public Builder osName(String osName) {
            $.osName = osName;
            return this;
        }

        public Builder osType(@Nullable String osType) {
            $.osType = osType;
            return this;
        }

        public Builder toolsRunningStatus(String toolsRunningStatus) {
            $.toolsRunningStatus = toolsRunningStatus;
            return this;
        }

        public Builder toolsVersion(String toolsVersion) {
            $.toolsVersion = toolsVersion;
            return this;
        }

        public Builder toolsVersionStatus(String toolsVersionStatus) {
            $.toolsVersionStatus = toolsVersionStatus;
            return this;
        }

        public OsProfileResponse build() {
            $.osName = Objects.requireNonNull($.osName, "expected parameter 'osName' to be non-null");
            $.toolsRunningStatus = Objects.requireNonNull($.toolsRunningStatus, "expected parameter 'toolsRunningStatus' to be non-null");
            $.toolsVersion = Objects.requireNonNull($.toolsVersion, "expected parameter 'toolsVersion' to be non-null");
            $.toolsVersionStatus = Objects.requireNonNull($.toolsVersionStatus, "expected parameter 'toolsVersionStatus' to be non-null");
            return $;
        }
    }

}
