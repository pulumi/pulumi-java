// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.azurenative.datafactory.enums.ScriptActivityLogDestination;
import com.pulumi.azurenative.datafactory.inputs.LogLocationSettingsArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Log settings of script activity.
 * 
 */
public final class ScriptActivityTypePropertiesLogSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final ScriptActivityTypePropertiesLogSettingsArgs Empty = new ScriptActivityTypePropertiesLogSettingsArgs();

    /**
     * The destination of logs. Type: string.
     * 
     */
    @Import(name="logDestination", required=true)
    private Output<Either<String,ScriptActivityLogDestination>> logDestination;

    /**
     * @return The destination of logs. Type: string.
     * 
     */
    public Output<Either<String,ScriptActivityLogDestination>> logDestination() {
        return this.logDestination;
    }

    /**
     * Log location settings customer needs to provide when enabling log.
     * 
     */
    @Import(name="logLocationSettings")
    private @Nullable Output<LogLocationSettingsArgs> logLocationSettings;

    /**
     * @return Log location settings customer needs to provide when enabling log.
     * 
     */
    public Optional<Output<LogLocationSettingsArgs>> logLocationSettings() {
        return Optional.ofNullable(this.logLocationSettings);
    }

    private ScriptActivityTypePropertiesLogSettingsArgs() {}

    private ScriptActivityTypePropertiesLogSettingsArgs(ScriptActivityTypePropertiesLogSettingsArgs $) {
        this.logDestination = $.logDestination;
        this.logLocationSettings = $.logLocationSettings;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ScriptActivityTypePropertiesLogSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ScriptActivityTypePropertiesLogSettingsArgs $;

        public Builder() {
            $ = new ScriptActivityTypePropertiesLogSettingsArgs();
        }

        public Builder(ScriptActivityTypePropertiesLogSettingsArgs defaults) {
            $ = new ScriptActivityTypePropertiesLogSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param logDestination The destination of logs. Type: string.
         * 
         * @return builder
         * 
         */
        public Builder logDestination(Output<Either<String,ScriptActivityLogDestination>> logDestination) {
            $.logDestination = logDestination;
            return this;
        }

        /**
         * @param logDestination The destination of logs. Type: string.
         * 
         * @return builder
         * 
         */
        public Builder logDestination(Either<String,ScriptActivityLogDestination> logDestination) {
            return logDestination(Output.of(logDestination));
        }

        /**
         * @param logDestination The destination of logs. Type: string.
         * 
         * @return builder
         * 
         */
        public Builder logDestination(String logDestination) {
            return logDestination(Either.ofLeft(logDestination));
        }

        /**
         * @param logDestination The destination of logs. Type: string.
         * 
         * @return builder
         * 
         */
        public Builder logDestination(ScriptActivityLogDestination logDestination) {
            return logDestination(Either.ofRight(logDestination));
        }

        /**
         * @param logLocationSettings Log location settings customer needs to provide when enabling log.
         * 
         * @return builder
         * 
         */
        public Builder logLocationSettings(@Nullable Output<LogLocationSettingsArgs> logLocationSettings) {
            $.logLocationSettings = logLocationSettings;
            return this;
        }

        /**
         * @param logLocationSettings Log location settings customer needs to provide when enabling log.
         * 
         * @return builder
         * 
         */
        public Builder logLocationSettings(LogLocationSettingsArgs logLocationSettings) {
            return logLocationSettings(Output.of(logLocationSettings));
        }

        public ScriptActivityTypePropertiesLogSettingsArgs build() {
            $.logDestination = Objects.requireNonNull($.logDestination, "expected parameter 'logDestination' to be non-null");
            return $;
        }
    }

}
