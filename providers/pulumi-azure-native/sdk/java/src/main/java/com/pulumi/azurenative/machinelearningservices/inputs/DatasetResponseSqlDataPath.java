// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.machinelearningservices.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;


/**
 * Sql Query/Table/Stored Procedure details.
 * 
 */
public final class DatasetResponseSqlDataPath extends com.pulumi.resources.InvokeArgs {

    public static final DatasetResponseSqlDataPath Empty = new DatasetResponseSqlDataPath();

    /**
     * SQL query timeout. Unit in seconds.
     * 
     */
    @Import(name="queryTimeout", required=true)
    private Double queryTimeout;

    public Double queryTimeout() {
        return this.queryTimeout;
    }

    /**
     * SQL query
     * 
     */
    @Import(name="sqlQuery", required=true)
    private String sqlQuery;

    public String sqlQuery() {
        return this.sqlQuery;
    }

    /**
     * SQL storedProcedure name
     * 
     */
    @Import(name="sqlStoredProcedureName", required=true)
    private String sqlStoredProcedureName;

    public String sqlStoredProcedureName() {
        return this.sqlStoredProcedureName;
    }

    /**
     * SQL table name
     * 
     */
    @Import(name="sqlTableName", required=true)
    private String sqlTableName;

    public String sqlTableName() {
        return this.sqlTableName;
    }

    private DatasetResponseSqlDataPath() {}

    private DatasetResponseSqlDataPath(DatasetResponseSqlDataPath $) {
        this.queryTimeout = $.queryTimeout;
        this.sqlQuery = $.sqlQuery;
        this.sqlStoredProcedureName = $.sqlStoredProcedureName;
        this.sqlTableName = $.sqlTableName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatasetResponseSqlDataPath defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatasetResponseSqlDataPath $;

        public Builder() {
            $ = new DatasetResponseSqlDataPath();
        }

        public Builder(DatasetResponseSqlDataPath defaults) {
            $ = new DatasetResponseSqlDataPath(Objects.requireNonNull(defaults));
        }

        public Builder queryTimeout(Double queryTimeout) {
            $.queryTimeout = queryTimeout;
            return this;
        }

        public Builder sqlQuery(String sqlQuery) {
            $.sqlQuery = sqlQuery;
            return this;
        }

        public Builder sqlStoredProcedureName(String sqlStoredProcedureName) {
            $.sqlStoredProcedureName = sqlStoredProcedureName;
            return this;
        }

        public Builder sqlTableName(String sqlTableName) {
            $.sqlTableName = sqlTableName;
            return this;
        }

        public DatasetResponseSqlDataPath build() {
            $.queryTimeout = Objects.requireNonNull($.queryTimeout, "expected parameter 'queryTimeout' to be non-null");
            $.sqlQuery = Objects.requireNonNull($.sqlQuery, "expected parameter 'sqlQuery' to be non-null");
            $.sqlStoredProcedureName = Objects.requireNonNull($.sqlStoredProcedureName, "expected parameter 'sqlStoredProcedureName' to be non-null");
            $.sqlTableName = Objects.requireNonNull($.sqlTableName, "expected parameter 'sqlTableName' to be non-null");
            return $;
        }
    }

}
