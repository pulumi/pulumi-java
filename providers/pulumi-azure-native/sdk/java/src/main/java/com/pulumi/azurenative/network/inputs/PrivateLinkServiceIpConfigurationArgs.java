// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.azurenative.network.enums.IPAllocationMethod;
import com.pulumi.azurenative.network.enums.IPVersion;
import com.pulumi.azurenative.network.inputs.SubnetArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The private link service ip configuration.
 * 
 */
public final class PrivateLinkServiceIpConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final PrivateLinkServiceIpConfigurationArgs Empty = new PrivateLinkServiceIpConfigurationArgs();

    /**
     * Resource ID.
     * 
     */
    @Import(name="id")
      private final @Nullable Output<String> id;

    public Output<String> id() {
        return this.id == null ? Codegen.empty() : this.id;
    }

    /**
     * The name of private link service ip configuration.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * Whether the ip configuration is primary or not.
     * 
     */
    @Import(name="primary")
      private final @Nullable Output<Boolean> primary;

    public Output<Boolean> primary() {
        return this.primary == null ? Codegen.empty() : this.primary;
    }

    /**
     * The private IP address of the IP configuration.
     * 
     */
    @Import(name="privateIPAddress")
      private final @Nullable Output<String> privateIPAddress;

    public Output<String> privateIPAddress() {
        return this.privateIPAddress == null ? Codegen.empty() : this.privateIPAddress;
    }

    /**
     * Whether the specific IP configuration is IPv4 or IPv6. Default is IPv4.
     * 
     */
    @Import(name="privateIPAddressVersion")
      private final @Nullable Output<Either<String,IPVersion>> privateIPAddressVersion;

    public Output<Either<String,IPVersion>> privateIPAddressVersion() {
        return this.privateIPAddressVersion == null ? Codegen.empty() : this.privateIPAddressVersion;
    }

    /**
     * The private IP address allocation method.
     * 
     */
    @Import(name="privateIPAllocationMethod")
      private final @Nullable Output<Either<String,IPAllocationMethod>> privateIPAllocationMethod;

    public Output<Either<String,IPAllocationMethod>> privateIPAllocationMethod() {
        return this.privateIPAllocationMethod == null ? Codegen.empty() : this.privateIPAllocationMethod;
    }

    /**
     * The reference to the subnet resource.
     * 
     */
    @Import(name="subnet")
      private final @Nullable Output<SubnetArgs> subnet;

    public Output<SubnetArgs> subnet() {
        return this.subnet == null ? Codegen.empty() : this.subnet;
    }

    public PrivateLinkServiceIpConfigurationArgs(
        @Nullable Output<String> id,
        @Nullable Output<String> name,
        @Nullable Output<Boolean> primary,
        @Nullable Output<String> privateIPAddress,
        @Nullable Output<Either<String,IPVersion>> privateIPAddressVersion,
        @Nullable Output<Either<String,IPAllocationMethod>> privateIPAllocationMethod,
        @Nullable Output<SubnetArgs> subnet) {
        this.id = id;
        this.name = name;
        this.primary = primary;
        this.privateIPAddress = privateIPAddress;
        this.privateIPAddressVersion = privateIPAddressVersion;
        this.privateIPAllocationMethod = privateIPAllocationMethod;
        this.subnet = subnet;
    }

    private PrivateLinkServiceIpConfigurationArgs() {
        this.id = Codegen.empty();
        this.name = Codegen.empty();
        this.primary = Codegen.empty();
        this.privateIPAddress = Codegen.empty();
        this.privateIPAddressVersion = Codegen.empty();
        this.privateIPAllocationMethod = Codegen.empty();
        this.subnet = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PrivateLinkServiceIpConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> id;
        private @Nullable Output<String> name;
        private @Nullable Output<Boolean> primary;
        private @Nullable Output<String> privateIPAddress;
        private @Nullable Output<Either<String,IPVersion>> privateIPAddressVersion;
        private @Nullable Output<Either<String,IPAllocationMethod>> privateIPAllocationMethod;
        private @Nullable Output<SubnetArgs> subnet;

        public Builder() {
    	      // Empty
        }

        public Builder(PrivateLinkServiceIpConfigurationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.primary = defaults.primary;
    	      this.privateIPAddress = defaults.privateIPAddress;
    	      this.privateIPAddressVersion = defaults.privateIPAddressVersion;
    	      this.privateIPAllocationMethod = defaults.privateIPAllocationMethod;
    	      this.subnet = defaults.subnet;
        }

        public Builder id(@Nullable Output<String> id) {
            this.id = id;
            return this;
        }
        public Builder id(@Nullable String id) {
            this.id = Codegen.ofNullable(id);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder primary(@Nullable Output<Boolean> primary) {
            this.primary = primary;
            return this;
        }
        public Builder primary(@Nullable Boolean primary) {
            this.primary = Codegen.ofNullable(primary);
            return this;
        }
        public Builder privateIPAddress(@Nullable Output<String> privateIPAddress) {
            this.privateIPAddress = privateIPAddress;
            return this;
        }
        public Builder privateIPAddress(@Nullable String privateIPAddress) {
            this.privateIPAddress = Codegen.ofNullable(privateIPAddress);
            return this;
        }
        public Builder privateIPAddressVersion(@Nullable Output<Either<String,IPVersion>> privateIPAddressVersion) {
            this.privateIPAddressVersion = privateIPAddressVersion;
            return this;
        }
        public Builder privateIPAddressVersion(@Nullable Either<String,IPVersion> privateIPAddressVersion) {
            this.privateIPAddressVersion = Codegen.ofNullable(privateIPAddressVersion);
            return this;
        }
        public Builder privateIPAllocationMethod(@Nullable Output<Either<String,IPAllocationMethod>> privateIPAllocationMethod) {
            this.privateIPAllocationMethod = privateIPAllocationMethod;
            return this;
        }
        public Builder privateIPAllocationMethod(@Nullable Either<String,IPAllocationMethod> privateIPAllocationMethod) {
            this.privateIPAllocationMethod = Codegen.ofNullable(privateIPAllocationMethod);
            return this;
        }
        public Builder subnet(@Nullable Output<SubnetArgs> subnet) {
            this.subnet = subnet;
            return this;
        }
        public Builder subnet(@Nullable SubnetArgs subnet) {
            this.subnet = Codegen.ofNullable(subnet);
            return this;
        }        public PrivateLinkServiceIpConfigurationArgs build() {
            return new PrivateLinkServiceIpConfigurationArgs(id, name, primary, privateIPAddress, privateIPAddressVersion, privateIPAllocationMethod, subnet);
        }
    }
}
