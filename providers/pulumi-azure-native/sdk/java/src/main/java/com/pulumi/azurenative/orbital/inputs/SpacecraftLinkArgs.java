// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.orbital.inputs;

import com.pulumi.azurenative.orbital.enums.Direction;
import com.pulumi.azurenative.orbital.enums.Polarization;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;


/**
 * Spacecraft Link
 * 
 */
public final class SpacecraftLinkArgs extends com.pulumi.resources.ResourceArgs {

    public static final SpacecraftLinkArgs Empty = new SpacecraftLinkArgs();

    /**
     * Bandwidth in MHz
     * 
     */
    @Import(name="bandwidthMHz", required=true)
    private Output<Double> bandwidthMHz;

    /**
     * @return Bandwidth in MHz
     * 
     */
    public Output<Double> bandwidthMHz() {
        return this.bandwidthMHz;
    }

    /**
     * Center Frequency in MHz
     * 
     */
    @Import(name="centerFrequencyMHz", required=true)
    private Output<Double> centerFrequencyMHz;

    /**
     * @return Center Frequency in MHz
     * 
     */
    public Output<Double> centerFrequencyMHz() {
        return this.centerFrequencyMHz;
    }

    /**
     * Direction (uplink or downlink)
     * 
     */
    @Import(name="direction", required=true)
    private Output<Either<String,Direction>> direction;

    /**
     * @return Direction (uplink or downlink)
     * 
     */
    public Output<Either<String,Direction>> direction() {
        return this.direction;
    }

    /**
     * polarization. eg (RHCP, LHCP)
     * 
     */
    @Import(name="polarization", required=true)
    private Output<Either<String,Polarization>> polarization;

    /**
     * @return polarization. eg (RHCP, LHCP)
     * 
     */
    public Output<Either<String,Polarization>> polarization() {
        return this.polarization;
    }

    private SpacecraftLinkArgs() {}

    private SpacecraftLinkArgs(SpacecraftLinkArgs $) {
        this.bandwidthMHz = $.bandwidthMHz;
        this.centerFrequencyMHz = $.centerFrequencyMHz;
        this.direction = $.direction;
        this.polarization = $.polarization;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SpacecraftLinkArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SpacecraftLinkArgs $;

        public Builder() {
            $ = new SpacecraftLinkArgs();
        }

        public Builder(SpacecraftLinkArgs defaults) {
            $ = new SpacecraftLinkArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bandwidthMHz Bandwidth in MHz
         * 
         * @return builder
         * 
         */
        public Builder bandwidthMHz(Output<Double> bandwidthMHz) {
            $.bandwidthMHz = bandwidthMHz;
            return this;
        }

        /**
         * @param bandwidthMHz Bandwidth in MHz
         * 
         * @return builder
         * 
         */
        public Builder bandwidthMHz(Double bandwidthMHz) {
            return bandwidthMHz(Output.of(bandwidthMHz));
        }

        /**
         * @param centerFrequencyMHz Center Frequency in MHz
         * 
         * @return builder
         * 
         */
        public Builder centerFrequencyMHz(Output<Double> centerFrequencyMHz) {
            $.centerFrequencyMHz = centerFrequencyMHz;
            return this;
        }

        /**
         * @param centerFrequencyMHz Center Frequency in MHz
         * 
         * @return builder
         * 
         */
        public Builder centerFrequencyMHz(Double centerFrequencyMHz) {
            return centerFrequencyMHz(Output.of(centerFrequencyMHz));
        }

        /**
         * @param direction Direction (uplink or downlink)
         * 
         * @return builder
         * 
         */
        public Builder direction(Output<Either<String,Direction>> direction) {
            $.direction = direction;
            return this;
        }

        /**
         * @param direction Direction (uplink or downlink)
         * 
         * @return builder
         * 
         */
        public Builder direction(Either<String,Direction> direction) {
            return direction(Output.of(direction));
        }

        /**
         * @param direction Direction (uplink or downlink)
         * 
         * @return builder
         * 
         */
        public Builder direction(String direction) {
            return direction(Either.ofLeft(direction));
        }

        /**
         * @param direction Direction (uplink or downlink)
         * 
         * @return builder
         * 
         */
        public Builder direction(Direction direction) {
            return direction(Either.ofRight(direction));
        }

        /**
         * @param polarization polarization. eg (RHCP, LHCP)
         * 
         * @return builder
         * 
         */
        public Builder polarization(Output<Either<String,Polarization>> polarization) {
            $.polarization = polarization;
            return this;
        }

        /**
         * @param polarization polarization. eg (RHCP, LHCP)
         * 
         * @return builder
         * 
         */
        public Builder polarization(Either<String,Polarization> polarization) {
            return polarization(Output.of(polarization));
        }

        /**
         * @param polarization polarization. eg (RHCP, LHCP)
         * 
         * @return builder
         * 
         */
        public Builder polarization(String polarization) {
            return polarization(Either.ofLeft(polarization));
        }

        /**
         * @param polarization polarization. eg (RHCP, LHCP)
         * 
         * @return builder
         * 
         */
        public Builder polarization(Polarization polarization) {
            return polarization(Either.ofRight(polarization));
        }

        public SpacecraftLinkArgs build() {
            $.bandwidthMHz = Objects.requireNonNull($.bandwidthMHz, "expected parameter 'bandwidthMHz' to be non-null");
            $.centerFrequencyMHz = Objects.requireNonNull($.centerFrequencyMHz, "expected parameter 'centerFrequencyMHz' to be non-null");
            $.direction = Objects.requireNonNull($.direction, "expected parameter 'direction' to be non-null");
            $.polarization = Objects.requireNonNull($.polarization, "expected parameter 'polarization' to be non-null");
            return $;
        }
    }

}
