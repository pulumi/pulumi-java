// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.synapse;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class KeyArgs extends com.pulumi.resources.ResourceArgs {

    public static final KeyArgs Empty = new KeyArgs();

    /**
     * Used to activate the workspace after a customer managed key is provided.
     * 
     */
    @Import(name="isActiveCMK")
    private @Nullable Output<Boolean> isActiveCMK;

    /**
     * @return Used to activate the workspace after a customer managed key is provided.
     * 
     */
    public Optional<Output<Boolean>> isActiveCMK() {
        return Optional.ofNullable(this.isActiveCMK);
    }

    /**
     * The name of the workspace key
     * 
     */
    @Import(name="keyName")
    private @Nullable Output<String> keyName;

    /**
     * @return The name of the workspace key
     * 
     */
    public Optional<Output<String>> keyName() {
        return Optional.ofNullable(this.keyName);
    }

    /**
     * The Key Vault Url of the workspace key.
     * 
     */
    @Import(name="keyVaultUrl")
    private @Nullable Output<String> keyVaultUrl;

    /**
     * @return The Key Vault Url of the workspace key.
     * 
     */
    public Optional<Output<String>> keyVaultUrl() {
        return Optional.ofNullable(this.keyVaultUrl);
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group. The name is case insensitive.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The name of the workspace
     * 
     */
    @Import(name="workspaceName", required=true)
    private Output<String> workspaceName;

    /**
     * @return The name of the workspace
     * 
     */
    public Output<String> workspaceName() {
        return this.workspaceName;
    }

    private KeyArgs() {}

    private KeyArgs(KeyArgs $) {
        this.isActiveCMK = $.isActiveCMK;
        this.keyName = $.keyName;
        this.keyVaultUrl = $.keyVaultUrl;
        this.resourceGroupName = $.resourceGroupName;
        this.workspaceName = $.workspaceName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KeyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KeyArgs $;

        public Builder() {
            $ = new KeyArgs();
        }

        public Builder(KeyArgs defaults) {
            $ = new KeyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param isActiveCMK Used to activate the workspace after a customer managed key is provided.
         * 
         * @return builder
         * 
         */
        public Builder isActiveCMK(@Nullable Output<Boolean> isActiveCMK) {
            $.isActiveCMK = isActiveCMK;
            return this;
        }

        /**
         * @param isActiveCMK Used to activate the workspace after a customer managed key is provided.
         * 
         * @return builder
         * 
         */
        public Builder isActiveCMK(Boolean isActiveCMK) {
            return isActiveCMK(Output.of(isActiveCMK));
        }

        /**
         * @param keyName The name of the workspace key
         * 
         * @return builder
         * 
         */
        public Builder keyName(@Nullable Output<String> keyName) {
            $.keyName = keyName;
            return this;
        }

        /**
         * @param keyName The name of the workspace key
         * 
         * @return builder
         * 
         */
        public Builder keyName(String keyName) {
            return keyName(Output.of(keyName));
        }

        /**
         * @param keyVaultUrl The Key Vault Url of the workspace key.
         * 
         * @return builder
         * 
         */
        public Builder keyVaultUrl(@Nullable Output<String> keyVaultUrl) {
            $.keyVaultUrl = keyVaultUrl;
            return this;
        }

        /**
         * @param keyVaultUrl The Key Vault Url of the workspace key.
         * 
         * @return builder
         * 
         */
        public Builder keyVaultUrl(String keyVaultUrl) {
            return keyVaultUrl(Output.of(keyVaultUrl));
        }

        /**
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param workspaceName The name of the workspace
         * 
         * @return builder
         * 
         */
        public Builder workspaceName(Output<String> workspaceName) {
            $.workspaceName = workspaceName;
            return this;
        }

        /**
         * @param workspaceName The name of the workspace
         * 
         * @return builder
         * 
         */
        public Builder workspaceName(String workspaceName) {
            return workspaceName(Output.of(workspaceName));
        }

        public KeyArgs build() {
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.workspaceName = Objects.requireNonNull($.workspaceName, "expected parameter 'workspaceName' to be non-null");
            return $;
        }
    }

}
