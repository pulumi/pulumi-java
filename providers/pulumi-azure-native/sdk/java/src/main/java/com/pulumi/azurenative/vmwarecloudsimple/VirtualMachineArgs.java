// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.vmwarecloudsimple;

import com.pulumi.azurenative.vmwarecloudsimple.inputs.GuestOSCustomizationArgs;
import com.pulumi.azurenative.vmwarecloudsimple.inputs.ResourcePoolArgs;
import com.pulumi.azurenative.vmwarecloudsimple.inputs.VirtualDiskArgs;
import com.pulumi.azurenative.vmwarecloudsimple.inputs.VirtualNicArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class VirtualMachineArgs extends com.pulumi.resources.ResourceArgs {

    public static final VirtualMachineArgs Empty = new VirtualMachineArgs();

    /**
     * The amount of memory
     * 
     */
    @Import(name="amountOfRam", required=true)
      private final Output<Integer> amountOfRam;

    public Output<Integer> amountOfRam() {
        return this.amountOfRam;
    }

    /**
     * Virtual machine properties
     * 
     */
    @Import(name="customization")
      private final @Nullable Output<GuestOSCustomizationArgs> customization;

    public Output<GuestOSCustomizationArgs> customization() {
        return this.customization == null ? Codegen.empty() : this.customization;
    }

    /**
     * The list of Virtual Disks
     * 
     */
    @Import(name="disks")
      private final @Nullable Output<List<VirtualDiskArgs>> disks;

    public Output<List<VirtualDiskArgs>> disks() {
        return this.disks == null ? Codegen.empty() : this.disks;
    }

    /**
     * Expose Guest OS or not
     * 
     */
    @Import(name="exposeToGuestVM")
      private final @Nullable Output<Boolean> exposeToGuestVM;

    public Output<Boolean> exposeToGuestVM() {
        return this.exposeToGuestVM == null ? Codegen.empty() : this.exposeToGuestVM;
    }

    /**
     * Azure region
     * 
     */
    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> location() {
        return this.location == null ? Codegen.empty() : this.location;
    }

    /**
     * The list of Virtual NICs
     * 
     */
    @Import(name="nics")
      private final @Nullable Output<List<VirtualNicArgs>> nics;

    public Output<List<VirtualNicArgs>> nics() {
        return this.nics == null ? Codegen.empty() : this.nics;
    }

    /**
     * The number of CPU cores
     * 
     */
    @Import(name="numberOfCores", required=true)
      private final Output<Integer> numberOfCores;

    public Output<Integer> numberOfCores() {
        return this.numberOfCores;
    }

    /**
     * Password for login. Deprecated - use customization property
     * 
     */
    @Import(name="password")
      private final @Nullable Output<String> password;

    public Output<String> password() {
        return this.password == null ? Codegen.empty() : this.password;
    }

    /**
     * Private Cloud Id
     * 
     */
    @Import(name="privateCloudId", required=true)
      private final Output<String> privateCloudId;

    public Output<String> privateCloudId() {
        return this.privateCloudId;
    }

    /**
     * The name of the resource group
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Virtual Machines Resource Pool
     * 
     */
    @Import(name="resourcePool")
      private final @Nullable Output<ResourcePoolArgs> resourcePool;

    public Output<ResourcePoolArgs> resourcePool() {
        return this.resourcePool == null ? Codegen.empty() : this.resourcePool;
    }

    /**
     * The list of tags
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    /**
     * Virtual Machine Template Id
     * 
     */
    @Import(name="templateId")
      private final @Nullable Output<String> templateId;

    public Output<String> templateId() {
        return this.templateId == null ? Codegen.empty() : this.templateId;
    }

    /**
     * Username for login. Deprecated - use customization property
     * 
     */
    @Import(name="username")
      private final @Nullable Output<String> username;

    public Output<String> username() {
        return this.username == null ? Codegen.empty() : this.username;
    }

    /**
     * The list of Virtual VSphere Networks
     * 
     */
    @Import(name="vSphereNetworks")
      private final @Nullable Output<List<String>> vSphereNetworks;

    public Output<List<String>> vSphereNetworks() {
        return this.vSphereNetworks == null ? Codegen.empty() : this.vSphereNetworks;
    }

    /**
     * virtual machine name
     * 
     */
    @Import(name="virtualMachineName")
      private final @Nullable Output<String> virtualMachineName;

    public Output<String> virtualMachineName() {
        return this.virtualMachineName == null ? Codegen.empty() : this.virtualMachineName;
    }

    public VirtualMachineArgs(
        Output<Integer> amountOfRam,
        @Nullable Output<GuestOSCustomizationArgs> customization,
        @Nullable Output<List<VirtualDiskArgs>> disks,
        @Nullable Output<Boolean> exposeToGuestVM,
        @Nullable Output<String> location,
        @Nullable Output<List<VirtualNicArgs>> nics,
        Output<Integer> numberOfCores,
        @Nullable Output<String> password,
        Output<String> privateCloudId,
        Output<String> resourceGroupName,
        @Nullable Output<ResourcePoolArgs> resourcePool,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<String> templateId,
        @Nullable Output<String> username,
        @Nullable Output<List<String>> vSphereNetworks,
        @Nullable Output<String> virtualMachineName) {
        this.amountOfRam = Objects.requireNonNull(amountOfRam, "expected parameter 'amountOfRam' to be non-null");
        this.customization = customization;
        this.disks = disks;
        this.exposeToGuestVM = exposeToGuestVM;
        this.location = location;
        this.nics = nics;
        this.numberOfCores = Objects.requireNonNull(numberOfCores, "expected parameter 'numberOfCores' to be non-null");
        this.password = password;
        this.privateCloudId = Objects.requireNonNull(privateCloudId, "expected parameter 'privateCloudId' to be non-null");
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.resourcePool = resourcePool;
        this.tags = tags;
        this.templateId = templateId;
        this.username = username;
        this.vSphereNetworks = vSphereNetworks;
        this.virtualMachineName = virtualMachineName;
    }

    private VirtualMachineArgs() {
        this.amountOfRam = Codegen.empty();
        this.customization = Codegen.empty();
        this.disks = Codegen.empty();
        this.exposeToGuestVM = Codegen.empty();
        this.location = Codegen.empty();
        this.nics = Codegen.empty();
        this.numberOfCores = Codegen.empty();
        this.password = Codegen.empty();
        this.privateCloudId = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.resourcePool = Codegen.empty();
        this.tags = Codegen.empty();
        this.templateId = Codegen.empty();
        this.username = Codegen.empty();
        this.vSphereNetworks = Codegen.empty();
        this.virtualMachineName = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VirtualMachineArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<Integer> amountOfRam;
        private @Nullable Output<GuestOSCustomizationArgs> customization;
        private @Nullable Output<List<VirtualDiskArgs>> disks;
        private @Nullable Output<Boolean> exposeToGuestVM;
        private @Nullable Output<String> location;
        private @Nullable Output<List<VirtualNicArgs>> nics;
        private Output<Integer> numberOfCores;
        private @Nullable Output<String> password;
        private Output<String> privateCloudId;
        private Output<String> resourceGroupName;
        private @Nullable Output<ResourcePoolArgs> resourcePool;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<String> templateId;
        private @Nullable Output<String> username;
        private @Nullable Output<List<String>> vSphereNetworks;
        private @Nullable Output<String> virtualMachineName;

        public Builder() {
    	      // Empty
        }

        public Builder(VirtualMachineArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.amountOfRam = defaults.amountOfRam;
    	      this.customization = defaults.customization;
    	      this.disks = defaults.disks;
    	      this.exposeToGuestVM = defaults.exposeToGuestVM;
    	      this.location = defaults.location;
    	      this.nics = defaults.nics;
    	      this.numberOfCores = defaults.numberOfCores;
    	      this.password = defaults.password;
    	      this.privateCloudId = defaults.privateCloudId;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.resourcePool = defaults.resourcePool;
    	      this.tags = defaults.tags;
    	      this.templateId = defaults.templateId;
    	      this.username = defaults.username;
    	      this.vSphereNetworks = defaults.vSphereNetworks;
    	      this.virtualMachineName = defaults.virtualMachineName;
        }

        public Builder amountOfRam(Output<Integer> amountOfRam) {
            this.amountOfRam = Objects.requireNonNull(amountOfRam);
            return this;
        }
        public Builder amountOfRam(Integer amountOfRam) {
            this.amountOfRam = Output.of(Objects.requireNonNull(amountOfRam));
            return this;
        }
        public Builder customization(@Nullable Output<GuestOSCustomizationArgs> customization) {
            this.customization = customization;
            return this;
        }
        public Builder customization(@Nullable GuestOSCustomizationArgs customization) {
            this.customization = Codegen.ofNullable(customization);
            return this;
        }
        public Builder disks(@Nullable Output<List<VirtualDiskArgs>> disks) {
            this.disks = disks;
            return this;
        }
        public Builder disks(@Nullable List<VirtualDiskArgs> disks) {
            this.disks = Codegen.ofNullable(disks);
            return this;
        }
        public Builder disks(VirtualDiskArgs... disks) {
            return disks(List.of(disks));
        }
        public Builder exposeToGuestVM(@Nullable Output<Boolean> exposeToGuestVM) {
            this.exposeToGuestVM = exposeToGuestVM;
            return this;
        }
        public Builder exposeToGuestVM(@Nullable Boolean exposeToGuestVM) {
            this.exposeToGuestVM = Codegen.ofNullable(exposeToGuestVM);
            return this;
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Codegen.ofNullable(location);
            return this;
        }
        public Builder nics(@Nullable Output<List<VirtualNicArgs>> nics) {
            this.nics = nics;
            return this;
        }
        public Builder nics(@Nullable List<VirtualNicArgs> nics) {
            this.nics = Codegen.ofNullable(nics);
            return this;
        }
        public Builder nics(VirtualNicArgs... nics) {
            return nics(List.of(nics));
        }
        public Builder numberOfCores(Output<Integer> numberOfCores) {
            this.numberOfCores = Objects.requireNonNull(numberOfCores);
            return this;
        }
        public Builder numberOfCores(Integer numberOfCores) {
            this.numberOfCores = Output.of(Objects.requireNonNull(numberOfCores));
            return this;
        }
        public Builder password(@Nullable Output<String> password) {
            this.password = password;
            return this;
        }
        public Builder password(@Nullable String password) {
            this.password = Codegen.ofNullable(password);
            return this;
        }
        public Builder privateCloudId(Output<String> privateCloudId) {
            this.privateCloudId = Objects.requireNonNull(privateCloudId);
            return this;
        }
        public Builder privateCloudId(String privateCloudId) {
            this.privateCloudId = Output.of(Objects.requireNonNull(privateCloudId));
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder resourcePool(@Nullable Output<ResourcePoolArgs> resourcePool) {
            this.resourcePool = resourcePool;
            return this;
        }
        public Builder resourcePool(@Nullable ResourcePoolArgs resourcePool) {
            this.resourcePool = Codegen.ofNullable(resourcePool);
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder templateId(@Nullable Output<String> templateId) {
            this.templateId = templateId;
            return this;
        }
        public Builder templateId(@Nullable String templateId) {
            this.templateId = Codegen.ofNullable(templateId);
            return this;
        }
        public Builder username(@Nullable Output<String> username) {
            this.username = username;
            return this;
        }
        public Builder username(@Nullable String username) {
            this.username = Codegen.ofNullable(username);
            return this;
        }
        public Builder vSphereNetworks(@Nullable Output<List<String>> vSphereNetworks) {
            this.vSphereNetworks = vSphereNetworks;
            return this;
        }
        public Builder vSphereNetworks(@Nullable List<String> vSphereNetworks) {
            this.vSphereNetworks = Codegen.ofNullable(vSphereNetworks);
            return this;
        }
        public Builder vSphereNetworks(String... vSphereNetworks) {
            return vSphereNetworks(List.of(vSphereNetworks));
        }
        public Builder virtualMachineName(@Nullable Output<String> virtualMachineName) {
            this.virtualMachineName = virtualMachineName;
            return this;
        }
        public Builder virtualMachineName(@Nullable String virtualMachineName) {
            this.virtualMachineName = Codegen.ofNullable(virtualMachineName);
            return this;
        }        public VirtualMachineArgs build() {
            return new VirtualMachineArgs(amountOfRam, customization, disks, exposeToGuestVM, location, nics, numberOfCores, password, privateCloudId, resourceGroupName, resourcePool, tags, templateId, username, vSphereNetworks, virtualMachineName);
        }
    }
}
