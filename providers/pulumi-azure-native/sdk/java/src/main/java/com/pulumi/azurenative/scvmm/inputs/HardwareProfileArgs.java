// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.scvmm.inputs;

import com.pulumi.azurenative.scvmm.enums.DynamicMemoryEnabled;
import com.pulumi.azurenative.scvmm.enums.LimitCpuForMigration;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Defines the resource properties.
 * 
 */
public final class HardwareProfileArgs extends com.pulumi.resources.ResourceArgs {

    public static final HardwareProfileArgs Empty = new HardwareProfileArgs();

    /**
     * Gets or sets the number of vCPUs for the vm.
     * 
     */
    @Import(name="cpuCount")
    private @Nullable Output<Integer> cpuCount;

    /**
     * @return Gets or sets the number of vCPUs for the vm.
     * 
     */
    public Optional<Output<Integer>> cpuCount() {
        return Optional.ofNullable(this.cpuCount);
    }

    /**
     * Gets or sets a value indicating whether to enable dynamic memory or not.
     * 
     */
    @Import(name="dynamicMemoryEnabled")
    private @Nullable Output<Either<String,DynamicMemoryEnabled>> dynamicMemoryEnabled;

    /**
     * @return Gets or sets a value indicating whether to enable dynamic memory or not.
     * 
     */
    public Optional<Output<Either<String,DynamicMemoryEnabled>>> dynamicMemoryEnabled() {
        return Optional.ofNullable(this.dynamicMemoryEnabled);
    }

    /**
     * Gets or sets the max dynamic memory for the vm.
     * 
     */
    @Import(name="dynamicMemoryMaxMB")
    private @Nullable Output<Integer> dynamicMemoryMaxMB;

    /**
     * @return Gets or sets the max dynamic memory for the vm.
     * 
     */
    public Optional<Output<Integer>> dynamicMemoryMaxMB() {
        return Optional.ofNullable(this.dynamicMemoryMaxMB);
    }

    /**
     * Gets or sets the min dynamic memory for the vm.
     * 
     */
    @Import(name="dynamicMemoryMinMB")
    private @Nullable Output<Integer> dynamicMemoryMinMB;

    /**
     * @return Gets or sets the min dynamic memory for the vm.
     * 
     */
    public Optional<Output<Integer>> dynamicMemoryMinMB() {
        return Optional.ofNullable(this.dynamicMemoryMinMB);
    }

    /**
     * Gets highly available property.
     * 
     */
    @Import(name="isHighlyAvailable")
    private @Nullable Output<String> isHighlyAvailable;

    /**
     * @return Gets highly available property.
     * 
     */
    public Optional<Output<String>> isHighlyAvailable() {
        return Optional.ofNullable(this.isHighlyAvailable);
    }

    /**
     * Gets or sets a value indicating whether to enable processor compatibility mode for live migration of VMs.
     * 
     */
    @Import(name="limitCpuForMigration")
    private @Nullable Output<Either<String,LimitCpuForMigration>> limitCpuForMigration;

    /**
     * @return Gets or sets a value indicating whether to enable processor compatibility mode for live migration of VMs.
     * 
     */
    public Optional<Output<Either<String,LimitCpuForMigration>>> limitCpuForMigration() {
        return Optional.ofNullable(this.limitCpuForMigration);
    }

    /**
     * MemoryMB is the size of a virtual machine&#39;s memory, in MB.
     * 
     */
    @Import(name="memoryMB")
    private @Nullable Output<Integer> memoryMB;

    /**
     * @return MemoryMB is the size of a virtual machine&#39;s memory, in MB.
     * 
     */
    public Optional<Output<Integer>> memoryMB() {
        return Optional.ofNullable(this.memoryMB);
    }

    private HardwareProfileArgs() {}

    private HardwareProfileArgs(HardwareProfileArgs $) {
        this.cpuCount = $.cpuCount;
        this.dynamicMemoryEnabled = $.dynamicMemoryEnabled;
        this.dynamicMemoryMaxMB = $.dynamicMemoryMaxMB;
        this.dynamicMemoryMinMB = $.dynamicMemoryMinMB;
        this.isHighlyAvailable = $.isHighlyAvailable;
        this.limitCpuForMigration = $.limitCpuForMigration;
        this.memoryMB = $.memoryMB;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HardwareProfileArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HardwareProfileArgs $;

        public Builder() {
            $ = new HardwareProfileArgs();
        }

        public Builder(HardwareProfileArgs defaults) {
            $ = new HardwareProfileArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cpuCount Gets or sets the number of vCPUs for the vm.
         * 
         * @return builder
         * 
         */
        public Builder cpuCount(@Nullable Output<Integer> cpuCount) {
            $.cpuCount = cpuCount;
            return this;
        }

        /**
         * @param cpuCount Gets or sets the number of vCPUs for the vm.
         * 
         * @return builder
         * 
         */
        public Builder cpuCount(Integer cpuCount) {
            return cpuCount(Output.of(cpuCount));
        }

        /**
         * @param dynamicMemoryEnabled Gets or sets a value indicating whether to enable dynamic memory or not.
         * 
         * @return builder
         * 
         */
        public Builder dynamicMemoryEnabled(@Nullable Output<Either<String,DynamicMemoryEnabled>> dynamicMemoryEnabled) {
            $.dynamicMemoryEnabled = dynamicMemoryEnabled;
            return this;
        }

        /**
         * @param dynamicMemoryEnabled Gets or sets a value indicating whether to enable dynamic memory or not.
         * 
         * @return builder
         * 
         */
        public Builder dynamicMemoryEnabled(Either<String,DynamicMemoryEnabled> dynamicMemoryEnabled) {
            return dynamicMemoryEnabled(Output.of(dynamicMemoryEnabled));
        }

        /**
         * @param dynamicMemoryEnabled Gets or sets a value indicating whether to enable dynamic memory or not.
         * 
         * @return builder
         * 
         */
        public Builder dynamicMemoryEnabled(String dynamicMemoryEnabled) {
            return dynamicMemoryEnabled(Either.ofLeft(dynamicMemoryEnabled));
        }

        /**
         * @param dynamicMemoryEnabled Gets or sets a value indicating whether to enable dynamic memory or not.
         * 
         * @return builder
         * 
         */
        public Builder dynamicMemoryEnabled(DynamicMemoryEnabled dynamicMemoryEnabled) {
            return dynamicMemoryEnabled(Either.ofRight(dynamicMemoryEnabled));
        }

        /**
         * @param dynamicMemoryMaxMB Gets or sets the max dynamic memory for the vm.
         * 
         * @return builder
         * 
         */
        public Builder dynamicMemoryMaxMB(@Nullable Output<Integer> dynamicMemoryMaxMB) {
            $.dynamicMemoryMaxMB = dynamicMemoryMaxMB;
            return this;
        }

        /**
         * @param dynamicMemoryMaxMB Gets or sets the max dynamic memory for the vm.
         * 
         * @return builder
         * 
         */
        public Builder dynamicMemoryMaxMB(Integer dynamicMemoryMaxMB) {
            return dynamicMemoryMaxMB(Output.of(dynamicMemoryMaxMB));
        }

        /**
         * @param dynamicMemoryMinMB Gets or sets the min dynamic memory for the vm.
         * 
         * @return builder
         * 
         */
        public Builder dynamicMemoryMinMB(@Nullable Output<Integer> dynamicMemoryMinMB) {
            $.dynamicMemoryMinMB = dynamicMemoryMinMB;
            return this;
        }

        /**
         * @param dynamicMemoryMinMB Gets or sets the min dynamic memory for the vm.
         * 
         * @return builder
         * 
         */
        public Builder dynamicMemoryMinMB(Integer dynamicMemoryMinMB) {
            return dynamicMemoryMinMB(Output.of(dynamicMemoryMinMB));
        }

        /**
         * @param isHighlyAvailable Gets highly available property.
         * 
         * @return builder
         * 
         */
        public Builder isHighlyAvailable(@Nullable Output<String> isHighlyAvailable) {
            $.isHighlyAvailable = isHighlyAvailable;
            return this;
        }

        /**
         * @param isHighlyAvailable Gets highly available property.
         * 
         * @return builder
         * 
         */
        public Builder isHighlyAvailable(String isHighlyAvailable) {
            return isHighlyAvailable(Output.of(isHighlyAvailable));
        }

        /**
         * @param limitCpuForMigration Gets or sets a value indicating whether to enable processor compatibility mode for live migration of VMs.
         * 
         * @return builder
         * 
         */
        public Builder limitCpuForMigration(@Nullable Output<Either<String,LimitCpuForMigration>> limitCpuForMigration) {
            $.limitCpuForMigration = limitCpuForMigration;
            return this;
        }

        /**
         * @param limitCpuForMigration Gets or sets a value indicating whether to enable processor compatibility mode for live migration of VMs.
         * 
         * @return builder
         * 
         */
        public Builder limitCpuForMigration(Either<String,LimitCpuForMigration> limitCpuForMigration) {
            return limitCpuForMigration(Output.of(limitCpuForMigration));
        }

        /**
         * @param limitCpuForMigration Gets or sets a value indicating whether to enable processor compatibility mode for live migration of VMs.
         * 
         * @return builder
         * 
         */
        public Builder limitCpuForMigration(String limitCpuForMigration) {
            return limitCpuForMigration(Either.ofLeft(limitCpuForMigration));
        }

        /**
         * @param limitCpuForMigration Gets or sets a value indicating whether to enable processor compatibility mode for live migration of VMs.
         * 
         * @return builder
         * 
         */
        public Builder limitCpuForMigration(LimitCpuForMigration limitCpuForMigration) {
            return limitCpuForMigration(Either.ofRight(limitCpuForMigration));
        }

        /**
         * @param memoryMB MemoryMB is the size of a virtual machine&#39;s memory, in MB.
         * 
         * @return builder
         * 
         */
        public Builder memoryMB(@Nullable Output<Integer> memoryMB) {
            $.memoryMB = memoryMB;
            return this;
        }

        /**
         * @param memoryMB MemoryMB is the size of a virtual machine&#39;s memory, in MB.
         * 
         * @return builder
         * 
         */
        public Builder memoryMB(Integer memoryMB) {
            return memoryMB(Output.of(memoryMB));
        }

        public HardwareProfileArgs build() {
            return $;
        }
    }

}
