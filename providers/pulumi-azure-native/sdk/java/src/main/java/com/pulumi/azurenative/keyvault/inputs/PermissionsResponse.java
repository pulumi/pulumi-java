// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.keyvault.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Permissions the identity has for keys, secrets, certificates and storage.
 * 
 */
public final class PermissionsResponse extends com.pulumi.resources.InvokeArgs {

    public static final PermissionsResponse Empty = new PermissionsResponse();

    /**
     * Permissions to certificates
     * 
     */
    @Import(name="certificates")
    private @Nullable List<String> certificates;

    /**
     * @return Permissions to certificates
     * 
     */
    public Optional<List<String>> certificates() {
        return Optional.ofNullable(this.certificates);
    }

    /**
     * Permissions to keys
     * 
     */
    @Import(name="keys")
    private @Nullable List<String> keys;

    /**
     * @return Permissions to keys
     * 
     */
    public Optional<List<String>> keys() {
        return Optional.ofNullable(this.keys);
    }

    /**
     * Permissions to secrets
     * 
     */
    @Import(name="secrets")
    private @Nullable List<String> secrets;

    /**
     * @return Permissions to secrets
     * 
     */
    public Optional<List<String>> secrets() {
        return Optional.ofNullable(this.secrets);
    }

    /**
     * Permissions to storage accounts
     * 
     */
    @Import(name="storage")
    private @Nullable List<String> storage;

    /**
     * @return Permissions to storage accounts
     * 
     */
    public Optional<List<String>> storage() {
        return Optional.ofNullable(this.storage);
    }

    private PermissionsResponse() {}

    private PermissionsResponse(PermissionsResponse $) {
        this.certificates = $.certificates;
        this.keys = $.keys;
        this.secrets = $.secrets;
        this.storage = $.storage;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PermissionsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PermissionsResponse $;

        public Builder() {
            $ = new PermissionsResponse();
        }

        public Builder(PermissionsResponse defaults) {
            $ = new PermissionsResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificates Permissions to certificates
         * 
         * @return builder
         * 
         */
        public Builder certificates(@Nullable List<String> certificates) {
            $.certificates = certificates;
            return this;
        }

        /**
         * @param certificates Permissions to certificates
         * 
         * @return builder
         * 
         */
        public Builder certificates(String... certificates) {
            return certificates(List.of(certificates));
        }

        /**
         * @param keys Permissions to keys
         * 
         * @return builder
         * 
         */
        public Builder keys(@Nullable List<String> keys) {
            $.keys = keys;
            return this;
        }

        /**
         * @param keys Permissions to keys
         * 
         * @return builder
         * 
         */
        public Builder keys(String... keys) {
            return keys(List.of(keys));
        }

        /**
         * @param secrets Permissions to secrets
         * 
         * @return builder
         * 
         */
        public Builder secrets(@Nullable List<String> secrets) {
            $.secrets = secrets;
            return this;
        }

        /**
         * @param secrets Permissions to secrets
         * 
         * @return builder
         * 
         */
        public Builder secrets(String... secrets) {
            return secrets(List.of(secrets));
        }

        /**
         * @param storage Permissions to storage accounts
         * 
         * @return builder
         * 
         */
        public Builder storage(@Nullable List<String> storage) {
            $.storage = storage;
            return this;
        }

        /**
         * @param storage Permissions to storage accounts
         * 
         * @return builder
         * 
         */
        public Builder storage(String... storage) {
            return storage(List.of(storage));
        }

        public PermissionsResponse build() {
            return $;
        }
    }

}
