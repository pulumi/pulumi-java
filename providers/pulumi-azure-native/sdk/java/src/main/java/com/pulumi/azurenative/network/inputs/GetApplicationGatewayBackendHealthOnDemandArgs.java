// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.azurenative.network.enums.ApplicationGatewayProtocol;
import com.pulumi.azurenative.network.inputs.ApplicationGatewayProbeHealthResponseMatch;
import com.pulumi.azurenative.network.inputs.SubResource;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class GetApplicationGatewayBackendHealthOnDemandArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetApplicationGatewayBackendHealthOnDemandArgs Empty = new GetApplicationGatewayBackendHealthOnDemandArgs();

    /**
     * The name of the application gateway.
     * 
     */
    @Import(name="applicationGatewayName", required=true)
    private Output<String> applicationGatewayName;

    /**
     * @return The name of the application gateway.
     * 
     */
    public Output<String> applicationGatewayName() {
        return this.applicationGatewayName;
    }

    /**
     * Reference to backend pool of application gateway to which probe request will be sent.
     * 
     */
    @Import(name="backendAddressPool")
    private Output</* @Nullable */ SubResource> backendAddressPool;

    /**
     * @return Reference to backend pool of application gateway to which probe request will be sent.
     * 
     */
    public Output</* @Nullable */ SubResource> backendAddressPool() {
        return this.backendAddressPool;
    }

    /**
     * Reference to backend http setting of application gateway to be used for test probe.
     * 
     */
    @Import(name="backendHttpSettings")
    private Output</* @Nullable */ SubResource> backendHttpSettings;

    /**
     * @return Reference to backend http setting of application gateway to be used for test probe.
     * 
     */
    public Output</* @Nullable */ SubResource> backendHttpSettings() {
        return this.backendHttpSettings;
    }

    /**
     * Expands BackendAddressPool and BackendHttpSettings referenced in backend health.
     * 
     */
    @Import(name="expand")
    private Output</* @Nullable */ String> expand;

    /**
     * @return Expands BackendAddressPool and BackendHttpSettings referenced in backend health.
     * 
     */
    public Output</* @Nullable */ String> expand() {
        return this.expand;
    }

    /**
     * Host name to send the probe to.
     * 
     */
    @Import(name="host")
    private Output</* @Nullable */ String> host;

    /**
     * @return Host name to send the probe to.
     * 
     */
    public Output</* @Nullable */ String> host() {
        return this.host;
    }

    /**
     * Criterion for classifying a healthy probe response.
     * 
     */
    @Import(name="match")
    private Output</* @Nullable */ ApplicationGatewayProbeHealthResponseMatch> match;

    /**
     * @return Criterion for classifying a healthy probe response.
     * 
     */
    public Output</* @Nullable */ ApplicationGatewayProbeHealthResponseMatch> match() {
        return this.match;
    }

    /**
     * Relative path of probe. Valid path starts from &#39;/&#39;. Probe is sent to &lt;Protocol&gt;://&lt;host&gt;:&lt;port&gt;&lt;path&gt;.
     * 
     */
    @Import(name="path")
    private Output</* @Nullable */ String> path;

    /**
     * @return Relative path of probe. Valid path starts from &#39;/&#39;. Probe is sent to &lt;Protocol&gt;://&lt;host&gt;:&lt;port&gt;&lt;path&gt;.
     * 
     */
    public Output</* @Nullable */ String> path() {
        return this.path;
    }

    /**
     * Whether the host header should be picked from the backend http settings. Default value is false.
     * 
     */
    @Import(name="pickHostNameFromBackendHttpSettings")
    private Output</* @Nullable */ Boolean> pickHostNameFromBackendHttpSettings;

    /**
     * @return Whether the host header should be picked from the backend http settings. Default value is false.
     * 
     */
    public Output</* @Nullable */ Boolean> pickHostNameFromBackendHttpSettings() {
        return this.pickHostNameFromBackendHttpSettings;
    }

    /**
     * The protocol used for the probe.
     * 
     */
    @Import(name="protocol")
    private Output</* @Nullable */ Either<String,ApplicationGatewayProtocol>> protocol;

    /**
     * @return The protocol used for the probe.
     * 
     */
    public Output</* @Nullable */ Either<String,ApplicationGatewayProtocol>> protocol() {
        return this.protocol;
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The probe timeout in seconds. Probe marked as failed if valid response is not received with this timeout period. Acceptable values are from 1 second to 86400 seconds.
     * 
     */
    @Import(name="timeout")
    private Output</* @Nullable */ Integer> timeout;

    /**
     * @return The probe timeout in seconds. Probe marked as failed if valid response is not received with this timeout period. Acceptable values are from 1 second to 86400 seconds.
     * 
     */
    public Output</* @Nullable */ Integer> timeout() {
        return this.timeout;
    }

    private GetApplicationGatewayBackendHealthOnDemandArgs() {}

    private GetApplicationGatewayBackendHealthOnDemandArgs(GetApplicationGatewayBackendHealthOnDemandArgs $) {
        this.applicationGatewayName = $.applicationGatewayName;
        this.backendAddressPool = $.backendAddressPool;
        this.backendHttpSettings = $.backendHttpSettings;
        this.expand = $.expand;
        this.host = $.host;
        this.match = $.match;
        this.path = $.path;
        this.pickHostNameFromBackendHttpSettings = $.pickHostNameFromBackendHttpSettings;
        this.protocol = $.protocol;
        this.resourceGroupName = $.resourceGroupName;
        this.timeout = $.timeout;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetApplicationGatewayBackendHealthOnDemandArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetApplicationGatewayBackendHealthOnDemandArgs $;

        public Builder() {
            $ = new GetApplicationGatewayBackendHealthOnDemandArgs();
        }

        public Builder(GetApplicationGatewayBackendHealthOnDemandArgs defaults) {
            $ = new GetApplicationGatewayBackendHealthOnDemandArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param applicationGatewayName The name of the application gateway.
         * 
         * @return builder
         * 
         */
        public Builder applicationGatewayName(Output<String> applicationGatewayName) {
            $.applicationGatewayName = applicationGatewayName;
            return this;
        }

        /**
         * @param applicationGatewayName The name of the application gateway.
         * 
         * @return builder
         * 
         */
        public Builder applicationGatewayName(String applicationGatewayName) {
            return applicationGatewayName(Output.of(applicationGatewayName));
        }

        /**
         * @param backendAddressPool Reference to backend pool of application gateway to which probe request will be sent.
         * 
         * @return builder
         * 
         */
        public Builder backendAddressPool(Output</* @Nullable */ SubResource> backendAddressPool) {
            $.backendAddressPool = backendAddressPool;
            return this;
        }

        /**
         * @param backendAddressPool Reference to backend pool of application gateway to which probe request will be sent.
         * 
         * @return builder
         * 
         */
        public Builder backendAddressPool(@Nullable SubResource backendAddressPool) {
            return backendAddressPool(Output.of(backendAddressPool));
        }

        /**
         * @param backendHttpSettings Reference to backend http setting of application gateway to be used for test probe.
         * 
         * @return builder
         * 
         */
        public Builder backendHttpSettings(Output</* @Nullable */ SubResource> backendHttpSettings) {
            $.backendHttpSettings = backendHttpSettings;
            return this;
        }

        /**
         * @param backendHttpSettings Reference to backend http setting of application gateway to be used for test probe.
         * 
         * @return builder
         * 
         */
        public Builder backendHttpSettings(@Nullable SubResource backendHttpSettings) {
            return backendHttpSettings(Output.of(backendHttpSettings));
        }

        /**
         * @param expand Expands BackendAddressPool and BackendHttpSettings referenced in backend health.
         * 
         * @return builder
         * 
         */
        public Builder expand(Output</* @Nullable */ String> expand) {
            $.expand = expand;
            return this;
        }

        /**
         * @param expand Expands BackendAddressPool and BackendHttpSettings referenced in backend health.
         * 
         * @return builder
         * 
         */
        public Builder expand(@Nullable String expand) {
            return expand(Output.of(expand));
        }

        /**
         * @param host Host name to send the probe to.
         * 
         * @return builder
         * 
         */
        public Builder host(Output</* @Nullable */ String> host) {
            $.host = host;
            return this;
        }

        /**
         * @param host Host name to send the probe to.
         * 
         * @return builder
         * 
         */
        public Builder host(@Nullable String host) {
            return host(Output.of(host));
        }

        /**
         * @param match Criterion for classifying a healthy probe response.
         * 
         * @return builder
         * 
         */
        public Builder match(Output</* @Nullable */ ApplicationGatewayProbeHealthResponseMatch> match) {
            $.match = match;
            return this;
        }

        /**
         * @param match Criterion for classifying a healthy probe response.
         * 
         * @return builder
         * 
         */
        public Builder match(@Nullable ApplicationGatewayProbeHealthResponseMatch match) {
            return match(Output.of(match));
        }

        /**
         * @param path Relative path of probe. Valid path starts from &#39;/&#39;. Probe is sent to &lt;Protocol&gt;://&lt;host&gt;:&lt;port&gt;&lt;path&gt;.
         * 
         * @return builder
         * 
         */
        public Builder path(Output</* @Nullable */ String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path Relative path of probe. Valid path starts from &#39;/&#39;. Probe is sent to &lt;Protocol&gt;://&lt;host&gt;:&lt;port&gt;&lt;path&gt;.
         * 
         * @return builder
         * 
         */
        public Builder path(@Nullable String path) {
            return path(Output.of(path));
        }

        /**
         * @param pickHostNameFromBackendHttpSettings Whether the host header should be picked from the backend http settings. Default value is false.
         * 
         * @return builder
         * 
         */
        public Builder pickHostNameFromBackendHttpSettings(Output</* @Nullable */ Boolean> pickHostNameFromBackendHttpSettings) {
            $.pickHostNameFromBackendHttpSettings = pickHostNameFromBackendHttpSettings;
            return this;
        }

        /**
         * @param pickHostNameFromBackendHttpSettings Whether the host header should be picked from the backend http settings. Default value is false.
         * 
         * @return builder
         * 
         */
        public Builder pickHostNameFromBackendHttpSettings(@Nullable Boolean pickHostNameFromBackendHttpSettings) {
            return pickHostNameFromBackendHttpSettings(Output.of(pickHostNameFromBackendHttpSettings));
        }

        /**
         * @param protocol The protocol used for the probe.
         * 
         * @return builder
         * 
         */
        public Builder protocol(Output</* @Nullable */ Either<String,ApplicationGatewayProtocol>> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol The protocol used for the probe.
         * 
         * @return builder
         * 
         */
        public Builder protocol(@Nullable Either<String,ApplicationGatewayProtocol> protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param protocol The protocol used for the probe.
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Either.ofLeft(protocol));
        }

        /**
         * @param protocol The protocol used for the probe.
         * 
         * @return builder
         * 
         */
        public Builder protocol(ApplicationGatewayProtocol protocol) {
            return protocol(Either.ofRight(protocol));
        }

        /**
         * @param resourceGroupName The name of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param timeout The probe timeout in seconds. Probe marked as failed if valid response is not received with this timeout period. Acceptable values are from 1 second to 86400 seconds.
         * 
         * @return builder
         * 
         */
        public Builder timeout(Output</* @Nullable */ Integer> timeout) {
            $.timeout = timeout;
            return this;
        }

        /**
         * @param timeout The probe timeout in seconds. Probe marked as failed if valid response is not received with this timeout period. Acceptable values are from 1 second to 86400 seconds.
         * 
         * @return builder
         * 
         */
        public Builder timeout(@Nullable Integer timeout) {
            return timeout(Output.of(timeout));
        }

        public GetApplicationGatewayBackendHealthOnDemandArgs build() {
            $.applicationGatewayName = Objects.requireNonNull($.applicationGatewayName, "expected parameter 'applicationGatewayName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
