// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.machinelearningservices.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * An Image asset.
 * 
 */
public final class ImageAssetArgs extends com.pulumi.resources.ResourceArgs {

    public static final ImageAssetArgs Empty = new ImageAssetArgs();

    /**
     * The Asset Id.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return The Asset Id.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The mime type.
     * 
     */
    @Import(name="mimeType")
    private @Nullable Output<String> mimeType;

    /**
     * @return The mime type.
     * 
     */
    public Optional<Output<String>> mimeType() {
        return Optional.ofNullable(this.mimeType);
    }

    /**
     * Whether the Asset is unpacked.
     * 
     */
    @Import(name="unpack")
    private @Nullable Output<Boolean> unpack;

    /**
     * @return Whether the Asset is unpacked.
     * 
     */
    public Optional<Output<Boolean>> unpack() {
        return Optional.ofNullable(this.unpack);
    }

    /**
     * The Url of the Asset.
     * 
     */
    @Import(name="url")
    private @Nullable Output<String> url;

    /**
     * @return The Url of the Asset.
     * 
     */
    public Optional<Output<String>> url() {
        return Optional.ofNullable(this.url);
    }

    private ImageAssetArgs() {}

    private ImageAssetArgs(ImageAssetArgs $) {
        this.id = $.id;
        this.mimeType = $.mimeType;
        this.unpack = $.unpack;
        this.url = $.url;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ImageAssetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ImageAssetArgs $;

        public Builder() {
            $ = new ImageAssetArgs();
        }

        public Builder(ImageAssetArgs defaults) {
            $ = new ImageAssetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param id The Asset Id.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The Asset Id.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param mimeType The mime type.
         * 
         * @return builder
         * 
         */
        public Builder mimeType(@Nullable Output<String> mimeType) {
            $.mimeType = mimeType;
            return this;
        }

        /**
         * @param mimeType The mime type.
         * 
         * @return builder
         * 
         */
        public Builder mimeType(String mimeType) {
            return mimeType(Output.of(mimeType));
        }

        /**
         * @param unpack Whether the Asset is unpacked.
         * 
         * @return builder
         * 
         */
        public Builder unpack(@Nullable Output<Boolean> unpack) {
            $.unpack = unpack;
            return this;
        }

        /**
         * @param unpack Whether the Asset is unpacked.
         * 
         * @return builder
         * 
         */
        public Builder unpack(Boolean unpack) {
            return unpack(Output.of(unpack));
        }

        /**
         * @param url The Url of the Asset.
         * 
         * @return builder
         * 
         */
        public Builder url(@Nullable Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url The Url of the Asset.
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        public ImageAssetArgs build() {
            return $;
        }
    }

}
