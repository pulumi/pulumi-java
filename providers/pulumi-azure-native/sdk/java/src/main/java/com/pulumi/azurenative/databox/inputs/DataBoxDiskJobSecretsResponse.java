// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.databox.inputs;

import com.pulumi.azurenative.databox.inputs.CloudErrorResponse;
import com.pulumi.azurenative.databox.inputs.DcAccessSecurityCodeResponse;
import com.pulumi.azurenative.databox.inputs.DiskSecretResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * The secrets related to disk job.
 * 
 */
public final class DataBoxDiskJobSecretsResponse extends com.pulumi.resources.InvokeArgs {

    public static final DataBoxDiskJobSecretsResponse Empty = new DataBoxDiskJobSecretsResponse();

    /**
     * Dc Access Security Code for Customer Managed Shipping
     * 
     */
    @Import(name="dcAccessSecurityCode", required=true)
    private DcAccessSecurityCodeResponse dcAccessSecurityCode;

    /**
     * @return Dc Access Security Code for Customer Managed Shipping
     * 
     */
    public DcAccessSecurityCodeResponse dcAccessSecurityCode() {
        return this.dcAccessSecurityCode;
    }

    /**
     * Contains the list of secrets object for that device.
     * 
     */
    @Import(name="diskSecrets", required=true)
    private List<DiskSecretResponse> diskSecrets;

    /**
     * @return Contains the list of secrets object for that device.
     * 
     */
    public List<DiskSecretResponse> diskSecrets() {
        return this.diskSecrets;
    }

    /**
     * Error while fetching the secrets.
     * 
     */
    @Import(name="error", required=true)
    private CloudErrorResponse error;

    /**
     * @return Error while fetching the secrets.
     * 
     */
    public CloudErrorResponse error() {
        return this.error;
    }

    /**
     * Whether passkey was provided by user.
     * 
     */
    @Import(name="isPasskeyUserDefined", required=true)
    private Boolean isPasskeyUserDefined;

    /**
     * @return Whether passkey was provided by user.
     * 
     */
    public Boolean isPasskeyUserDefined() {
        return this.isPasskeyUserDefined;
    }

    /**
     * Used to indicate what type of job secrets object.
     * Expected value is &#39;DataBoxDisk&#39;.
     * 
     */
    @Import(name="jobSecretsType", required=true)
    private String jobSecretsType;

    /**
     * @return Used to indicate what type of job secrets object.
     * Expected value is &#39;DataBoxDisk&#39;.
     * 
     */
    public String jobSecretsType() {
        return this.jobSecretsType;
    }

    /**
     * PassKey for the disk Job.
     * 
     */
    @Import(name="passKey", required=true)
    private String passKey;

    /**
     * @return PassKey for the disk Job.
     * 
     */
    public String passKey() {
        return this.passKey;
    }

    private DataBoxDiskJobSecretsResponse() {}

    private DataBoxDiskJobSecretsResponse(DataBoxDiskJobSecretsResponse $) {
        this.dcAccessSecurityCode = $.dcAccessSecurityCode;
        this.diskSecrets = $.diskSecrets;
        this.error = $.error;
        this.isPasskeyUserDefined = $.isPasskeyUserDefined;
        this.jobSecretsType = $.jobSecretsType;
        this.passKey = $.passKey;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataBoxDiskJobSecretsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataBoxDiskJobSecretsResponse $;

        public Builder() {
            $ = new DataBoxDiskJobSecretsResponse();
        }

        public Builder(DataBoxDiskJobSecretsResponse defaults) {
            $ = new DataBoxDiskJobSecretsResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param dcAccessSecurityCode Dc Access Security Code for Customer Managed Shipping
         * 
         * @return builder
         * 
         */
        public Builder dcAccessSecurityCode(DcAccessSecurityCodeResponse dcAccessSecurityCode) {
            $.dcAccessSecurityCode = dcAccessSecurityCode;
            return this;
        }

        /**
         * @param diskSecrets Contains the list of secrets object for that device.
         * 
         * @return builder
         * 
         */
        public Builder diskSecrets(List<DiskSecretResponse> diskSecrets) {
            $.diskSecrets = diskSecrets;
            return this;
        }

        /**
         * @param diskSecrets Contains the list of secrets object for that device.
         * 
         * @return builder
         * 
         */
        public Builder diskSecrets(DiskSecretResponse... diskSecrets) {
            return diskSecrets(List.of(diskSecrets));
        }

        /**
         * @param error Error while fetching the secrets.
         * 
         * @return builder
         * 
         */
        public Builder error(CloudErrorResponse error) {
            $.error = error;
            return this;
        }

        /**
         * @param isPasskeyUserDefined Whether passkey was provided by user.
         * 
         * @return builder
         * 
         */
        public Builder isPasskeyUserDefined(Boolean isPasskeyUserDefined) {
            $.isPasskeyUserDefined = isPasskeyUserDefined;
            return this;
        }

        /**
         * @param jobSecretsType Used to indicate what type of job secrets object.
         * Expected value is &#39;DataBoxDisk&#39;.
         * 
         * @return builder
         * 
         */
        public Builder jobSecretsType(String jobSecretsType) {
            $.jobSecretsType = jobSecretsType;
            return this;
        }

        /**
         * @param passKey PassKey for the disk Job.
         * 
         * @return builder
         * 
         */
        public Builder passKey(String passKey) {
            $.passKey = passKey;
            return this;
        }

        public DataBoxDiskJobSecretsResponse build() {
            $.dcAccessSecurityCode = Objects.requireNonNull($.dcAccessSecurityCode, "expected parameter 'dcAccessSecurityCode' to be non-null");
            $.diskSecrets = Objects.requireNonNull($.diskSecrets, "expected parameter 'diskSecrets' to be non-null");
            $.error = Objects.requireNonNull($.error, "expected parameter 'error' to be non-null");
            $.isPasskeyUserDefined = Objects.requireNonNull($.isPasskeyUserDefined, "expected parameter 'isPasskeyUserDefined' to be non-null");
            $.jobSecretsType = Codegen.stringProp("jobSecretsType").arg($.jobSecretsType).require();
            $.passKey = Objects.requireNonNull($.passKey, "expected parameter 'passKey' to be non-null");
            return $;
        }
    }

}
