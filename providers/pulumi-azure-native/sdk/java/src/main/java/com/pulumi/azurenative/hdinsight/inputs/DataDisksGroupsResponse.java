// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.hdinsight.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The data disks groups for the role.
 * 
 */
public final class DataDisksGroupsResponse extends com.pulumi.resources.InvokeArgs {

    public static final DataDisksGroupsResponse Empty = new DataDisksGroupsResponse();

    /**
     * ReadOnly. The DiskSize in GB. Do not set this value.
     * 
     */
    @Import(name="diskSizeGB", required=true)
    private Integer diskSizeGB;

    public Integer diskSizeGB() {
        return this.diskSizeGB;
    }

    /**
     * The number of disks per node.
     * 
     */
    @Import(name="disksPerNode")
    private @Nullable Integer disksPerNode;

    public Optional<Integer> disksPerNode() {
        return Optional.ofNullable(this.disksPerNode);
    }

    /**
     * ReadOnly. The storage account type. Do not set this value.
     * 
     */
    @Import(name="storageAccountType", required=true)
    private String storageAccountType;

    public String storageAccountType() {
        return this.storageAccountType;
    }

    private DataDisksGroupsResponse() {}

    private DataDisksGroupsResponse(DataDisksGroupsResponse $) {
        this.diskSizeGB = $.diskSizeGB;
        this.disksPerNode = $.disksPerNode;
        this.storageAccountType = $.storageAccountType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataDisksGroupsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataDisksGroupsResponse $;

        public Builder() {
            $ = new DataDisksGroupsResponse();
        }

        public Builder(DataDisksGroupsResponse defaults) {
            $ = new DataDisksGroupsResponse(Objects.requireNonNull(defaults));
        }

        public Builder diskSizeGB(Integer diskSizeGB) {
            $.diskSizeGB = diskSizeGB;
            return this;
        }

        public Builder disksPerNode(@Nullable Integer disksPerNode) {
            $.disksPerNode = disksPerNode;
            return this;
        }

        public Builder storageAccountType(String storageAccountType) {
            $.storageAccountType = storageAccountType;
            return this;
        }

        public DataDisksGroupsResponse build() {
            $.diskSizeGB = Objects.requireNonNull($.diskSizeGB, "expected parameter 'diskSizeGB' to be non-null");
            $.storageAccountType = Objects.requireNonNull($.storageAccountType, "expected parameter 'storageAccountType' to be non-null");
            return $;
        }
    }

}
