// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datamigration.inputs;

import com.pulumi.azurenative.datamigration.inputs.FileShareArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Database specific information for SQL to Azure SQL DB Managed Instance migration task inputs
 * 
 */
public final class MigrateSqlServerSqlMIDatabaseInputArgs extends com.pulumi.resources.ResourceArgs {

    public static final MigrateSqlServerSqlMIDatabaseInputArgs Empty = new MigrateSqlServerSqlMIDatabaseInputArgs();

    /**
     * The list of backup files to be used in case of existing backups.
     * 
     */
    @Import(name="backupFilePaths")
    private @Nullable Output<List<String>> backupFilePaths;

    public Optional<Output<List<String>>> backupFilePaths() {
        return Optional.ofNullable(this.backupFilePaths);
    }

    /**
     * Backup file share information for backing up this database.
     * 
     */
    @Import(name="backupFileShare")
    private @Nullable Output<FileShareArgs> backupFileShare;

    public Optional<Output<FileShareArgs>> backupFileShare() {
        return Optional.ofNullable(this.backupFileShare);
    }

    /**
     * Name of the database
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    public Output<String> name() {
        return this.name;
    }

    /**
     * Name of the database at destination
     * 
     */
    @Import(name="restoreDatabaseName", required=true)
    private Output<String> restoreDatabaseName;

    public Output<String> restoreDatabaseName() {
        return this.restoreDatabaseName;
    }

    private MigrateSqlServerSqlMIDatabaseInputArgs() {}

    private MigrateSqlServerSqlMIDatabaseInputArgs(MigrateSqlServerSqlMIDatabaseInputArgs $) {
        this.backupFilePaths = $.backupFilePaths;
        this.backupFileShare = $.backupFileShare;
        this.name = $.name;
        this.restoreDatabaseName = $.restoreDatabaseName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MigrateSqlServerSqlMIDatabaseInputArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MigrateSqlServerSqlMIDatabaseInputArgs $;

        public Builder() {
            $ = new MigrateSqlServerSqlMIDatabaseInputArgs();
        }

        public Builder(MigrateSqlServerSqlMIDatabaseInputArgs defaults) {
            $ = new MigrateSqlServerSqlMIDatabaseInputArgs(Objects.requireNonNull(defaults));
        }

        public Builder backupFilePaths(@Nullable Output<List<String>> backupFilePaths) {
            $.backupFilePaths = backupFilePaths;
            return this;
        }

        public Builder backupFilePaths(List<String> backupFilePaths) {
            return backupFilePaths(Output.of(backupFilePaths));
        }

        public Builder backupFilePaths(String... backupFilePaths) {
            return backupFilePaths(List.of(backupFilePaths));
        }

        public Builder backupFileShare(@Nullable Output<FileShareArgs> backupFileShare) {
            $.backupFileShare = backupFileShare;
            return this;
        }

        public Builder backupFileShare(FileShareArgs backupFileShare) {
            return backupFileShare(Output.of(backupFileShare));
        }

        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder restoreDatabaseName(Output<String> restoreDatabaseName) {
            $.restoreDatabaseName = restoreDatabaseName;
            return this;
        }

        public Builder restoreDatabaseName(String restoreDatabaseName) {
            return restoreDatabaseName(Output.of(restoreDatabaseName));
        }

        public MigrateSqlServerSqlMIDatabaseInputArgs build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.restoreDatabaseName = Objects.requireNonNull($.restoreDatabaseName, "expected parameter 'restoreDatabaseName' to be non-null");
            return $;
        }
    }

}
