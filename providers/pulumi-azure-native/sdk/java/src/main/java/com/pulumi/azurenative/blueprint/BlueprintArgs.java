// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.blueprint;

import com.pulumi.azurenative.blueprint.enums.BlueprintTargetScope;
import com.pulumi.azurenative.blueprint.inputs.ParameterDefinitionArgs;
import com.pulumi.azurenative.blueprint.inputs.ResourceGroupDefinitionArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BlueprintArgs extends com.pulumi.resources.ResourceArgs {

    public static final BlueprintArgs Empty = new BlueprintArgs();

    /**
     * Name of the blueprint definition.
     * 
     */
    @Import(name="blueprintName")
    private @Nullable Output<String> blueprintName;

    public Optional<Output<String>> blueprintName() {
        return Optional.ofNullable(this.blueprintName);
    }

    /**
     * Multi-line explain this resource.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * One-liner string explain this resource.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Parameters required by this blueprint definition.
     * 
     */
    @Import(name="parameters")
    private @Nullable Output<Map<String,ParameterDefinitionArgs>> parameters;

    public Optional<Output<Map<String,ParameterDefinitionArgs>>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    /**
     * Resource group placeholders defined by this blueprint definition.
     * 
     */
    @Import(name="resourceGroups")
    private @Nullable Output<Map<String,ResourceGroupDefinitionArgs>> resourceGroups;

    public Optional<Output<Map<String,ResourceGroupDefinitionArgs>>> resourceGroups() {
        return Optional.ofNullable(this.resourceGroups);
    }

    /**
     * The scope of the resource. Valid scopes are: management group (format: &#39;/providers/Microsoft.Management/managementGroups/{managementGroup}&#39;), subscription (format: &#39;/subscriptions/{subscriptionId}&#39;).
     * 
     */
    @Import(name="resourceScope", required=true)
    private Output<String> resourceScope;

    public Output<String> resourceScope() {
        return this.resourceScope;
    }

    /**
     * The scope where this blueprint definition can be assigned.
     * 
     */
    @Import(name="targetScope", required=true)
    private Output<Either<String,BlueprintTargetScope>> targetScope;

    public Output<Either<String,BlueprintTargetScope>> targetScope() {
        return this.targetScope;
    }

    /**
     * Published versions of this blueprint definition.
     * 
     */
    @Import(name="versions")
    private @Nullable Output<Object> versions;

    public Optional<Output<Object>> versions() {
        return Optional.ofNullable(this.versions);
    }

    private BlueprintArgs() {}

    private BlueprintArgs(BlueprintArgs $) {
        this.blueprintName = $.blueprintName;
        this.description = $.description;
        this.displayName = $.displayName;
        this.parameters = $.parameters;
        this.resourceGroups = $.resourceGroups;
        this.resourceScope = $.resourceScope;
        this.targetScope = $.targetScope;
        this.versions = $.versions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BlueprintArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BlueprintArgs $;

        public Builder() {
            $ = new BlueprintArgs();
        }

        public Builder(BlueprintArgs defaults) {
            $ = new BlueprintArgs(Objects.requireNonNull(defaults));
        }

        public Builder blueprintName(@Nullable Output<String> blueprintName) {
            $.blueprintName = blueprintName;
            return this;
        }

        public Builder blueprintName(String blueprintName) {
            return blueprintName(Output.of(blueprintName));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder parameters(@Nullable Output<Map<String,ParameterDefinitionArgs>> parameters) {
            $.parameters = parameters;
            return this;
        }

        public Builder parameters(Map<String,ParameterDefinitionArgs> parameters) {
            return parameters(Output.of(parameters));
        }

        public Builder resourceGroups(@Nullable Output<Map<String,ResourceGroupDefinitionArgs>> resourceGroups) {
            $.resourceGroups = resourceGroups;
            return this;
        }

        public Builder resourceGroups(Map<String,ResourceGroupDefinitionArgs> resourceGroups) {
            return resourceGroups(Output.of(resourceGroups));
        }

        public Builder resourceScope(Output<String> resourceScope) {
            $.resourceScope = resourceScope;
            return this;
        }

        public Builder resourceScope(String resourceScope) {
            return resourceScope(Output.of(resourceScope));
        }

        public Builder targetScope(Output<Either<String,BlueprintTargetScope>> targetScope) {
            $.targetScope = targetScope;
            return this;
        }

        public Builder targetScope(Either<String,BlueprintTargetScope> targetScope) {
            return targetScope(Output.of(targetScope));
        }

        public Builder targetScope(String targetScope) {
            return targetScope(Either.ofLeft(targetScope));
        }

        public Builder targetScope(BlueprintTargetScope targetScope) {
            return targetScope(Either.ofRight(targetScope));
        }

        public Builder versions(@Nullable Output<Object> versions) {
            $.versions = versions;
            return this;
        }

        public Builder versions(Object versions) {
            return versions(Output.of(versions));
        }

        public BlueprintArgs build() {
            $.resourceScope = Objects.requireNonNull($.resourceScope, "expected parameter 'resourceScope' to be non-null");
            $.targetScope = Objects.requireNonNull($.targetScope, "expected parameter 'targetScope' to be non-null");
            return $;
        }
    }

}
