// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.mixedreality;

import com.pulumi.azurenative.mixedreality.inputs.IdentityArgs;
import com.pulumi.azurenative.mixedreality.inputs.SkuArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SpatialAnchorsAccountArgs extends com.pulumi.resources.ResourceArgs {

    public static final SpatialAnchorsAccountArgs Empty = new SpatialAnchorsAccountArgs();

    /**
     * Name of an Mixed Reality Account.
     * 
     */
    @Import(name="accountName")
    private @Nullable Output<String> accountName;

    public Optional<Output<String>> accountName() {
        return Optional.ofNullable(this.accountName);
    }

    /**
     * The identity associated with this account
     * 
     */
    @Import(name="identity")
    private @Nullable Output<IdentityArgs> identity;

    public Optional<Output<IdentityArgs>> identity() {
        return Optional.ofNullable(this.identity);
    }

    /**
     * The kind of account, if supported
     * 
     */
    @Import(name="kind")
    private @Nullable Output<SkuArgs> kind;

    public Optional<Output<SkuArgs>> kind() {
        return Optional.ofNullable(this.kind);
    }

    /**
     * The geo-location where the resource lives
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The plan associated with this account
     * 
     */
    @Import(name="plan")
    private @Nullable Output<IdentityArgs> plan;

    public Optional<Output<IdentityArgs>> plan() {
        return Optional.ofNullable(this.plan);
    }

    /**
     * Name of an Azure resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The sku associated with this account
     * 
     */
    @Import(name="sku")
    private @Nullable Output<SkuArgs> sku;

    public Optional<Output<SkuArgs>> sku() {
        return Optional.ofNullable(this.sku);
    }

    /**
     * The name of the storage account associated with this accountId
     * 
     */
    @Import(name="storageAccountName")
    private @Nullable Output<String> storageAccountName;

    public Optional<Output<String>> storageAccountName() {
        return Optional.ofNullable(this.storageAccountName);
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private SpatialAnchorsAccountArgs() {}

    private SpatialAnchorsAccountArgs(SpatialAnchorsAccountArgs $) {
        this.accountName = $.accountName;
        this.identity = $.identity;
        this.kind = $.kind;
        this.location = $.location;
        this.plan = $.plan;
        this.resourceGroupName = $.resourceGroupName;
        this.sku = $.sku;
        this.storageAccountName = $.storageAccountName;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SpatialAnchorsAccountArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SpatialAnchorsAccountArgs $;

        public Builder() {
            $ = new SpatialAnchorsAccountArgs();
        }

        public Builder(SpatialAnchorsAccountArgs defaults) {
            $ = new SpatialAnchorsAccountArgs(Objects.requireNonNull(defaults));
        }

        public Builder accountName(@Nullable Output<String> accountName) {
            $.accountName = accountName;
            return this;
        }

        public Builder accountName(String accountName) {
            return accountName(Output.of(accountName));
        }

        public Builder identity(@Nullable Output<IdentityArgs> identity) {
            $.identity = identity;
            return this;
        }

        public Builder identity(IdentityArgs identity) {
            return identity(Output.of(identity));
        }

        public Builder kind(@Nullable Output<SkuArgs> kind) {
            $.kind = kind;
            return this;
        }

        public Builder kind(SkuArgs kind) {
            return kind(Output.of(kind));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder plan(@Nullable Output<IdentityArgs> plan) {
            $.plan = plan;
            return this;
        }

        public Builder plan(IdentityArgs plan) {
            return plan(Output.of(plan));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder sku(@Nullable Output<SkuArgs> sku) {
            $.sku = sku;
            return this;
        }

        public Builder sku(SkuArgs sku) {
            return sku(Output.of(sku));
        }

        public Builder storageAccountName(@Nullable Output<String> storageAccountName) {
            $.storageAccountName = storageAccountName;
            return this;
        }

        public Builder storageAccountName(String storageAccountName) {
            return storageAccountName(Output.of(storageAccountName));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public SpatialAnchorsAccountArgs build() {
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
