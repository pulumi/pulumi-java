// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.servicefabric.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;


/**
 * Describes the partition scheme of a singleton-partitioned, or non-partitioned service.
 * 
 */
public final class SingletonPartitionSchemeDescriptionArgs extends com.pulumi.resources.ResourceArgs {

    public static final SingletonPartitionSchemeDescriptionArgs Empty = new SingletonPartitionSchemeDescriptionArgs();

    /**
     * Enumerates the ways that a service can be partitioned.
     * Expected value is &#39;Singleton&#39;.
     * 
     */
    @Import(name="partitionScheme", required=true)
    private Output<String> partitionScheme;

    /**
     * @return Enumerates the ways that a service can be partitioned.
     * Expected value is &#39;Singleton&#39;.
     * 
     */
    public Output<String> partitionScheme() {
        return this.partitionScheme;
    }

    private SingletonPartitionSchemeDescriptionArgs() {}

    private SingletonPartitionSchemeDescriptionArgs(SingletonPartitionSchemeDescriptionArgs $) {
        this.partitionScheme = $.partitionScheme;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SingletonPartitionSchemeDescriptionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SingletonPartitionSchemeDescriptionArgs $;

        public Builder() {
            $ = new SingletonPartitionSchemeDescriptionArgs();
        }

        public Builder(SingletonPartitionSchemeDescriptionArgs defaults) {
            $ = new SingletonPartitionSchemeDescriptionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param partitionScheme Enumerates the ways that a service can be partitioned.
         * Expected value is &#39;Singleton&#39;.
         * 
         * @return builder
         * 
         */
        public Builder partitionScheme(Output<String> partitionScheme) {
            $.partitionScheme = partitionScheme;
            return this;
        }

        /**
         * @param partitionScheme Enumerates the ways that a service can be partitioned.
         * Expected value is &#39;Singleton&#39;.
         * 
         * @return builder
         * 
         */
        public Builder partitionScheme(String partitionScheme) {
            return partitionScheme(Output.of(partitionScheme));
        }

        public SingletonPartitionSchemeDescriptionArgs build() {
            $.partitionScheme = Codegen.stringProp("partitionScheme").output().arg($.partitionScheme).require();
            return $;
        }
    }

}
