// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.deploymentmanager.inputs;

import com.pulumi.azurenative.deploymentmanager.inputs.CloudErrorBodyResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


/**
 * Detailed runtime information of the rollout.
 * 
 */
public final class RolloutOperationInfoResponse extends com.pulumi.resources.InvokeArgs {

    public static final RolloutOperationInfoResponse Empty = new RolloutOperationInfoResponse();

    /**
     * The start time of the rollout in UTC. This property will not be set if the rollout has not completed yet.
     * 
     */
    @Import(name="endTime", required=true)
    private String endTime;

    /**
     * @return The start time of the rollout in UTC. This property will not be set if the rollout has not completed yet.
     * 
     */
    public String endTime() {
        return this.endTime;
    }

    /**
     * The detailed error information for any failure.
     * 
     */
    @Import(name="error", required=true)
    private CloudErrorBodyResponse error;

    /**
     * @return The detailed error information for any failure.
     * 
     */
    public CloudErrorBodyResponse error() {
        return this.error;
    }

    /**
     * The ordinal count of the number of retry attempts on a rollout. 0 if no retries of the rollout have been performed. If the rollout is updated with a PUT, this count is reset to 0.
     * 
     */
    @Import(name="retryAttempt", required=true)
    private Integer retryAttempt;

    /**
     * @return The ordinal count of the number of retry attempts on a rollout. 0 if no retries of the rollout have been performed. If the rollout is updated with a PUT, this count is reset to 0.
     * 
     */
    public Integer retryAttempt() {
        return this.retryAttempt;
    }

    /**
     * True, if all steps that succeeded on the previous run/attempt were chosen to be skipped in this retry attempt. False, otherwise.
     * 
     */
    @Import(name="skipSucceededOnRetry", required=true)
    private Boolean skipSucceededOnRetry;

    /**
     * @return True, if all steps that succeeded on the previous run/attempt were chosen to be skipped in this retry attempt. False, otherwise.
     * 
     */
    public Boolean skipSucceededOnRetry() {
        return this.skipSucceededOnRetry;
    }

    /**
     * The start time of the rollout in UTC.
     * 
     */
    @Import(name="startTime", required=true)
    private String startTime;

    /**
     * @return The start time of the rollout in UTC.
     * 
     */
    public String startTime() {
        return this.startTime;
    }

    private RolloutOperationInfoResponse() {}

    private RolloutOperationInfoResponse(RolloutOperationInfoResponse $) {
        this.endTime = $.endTime;
        this.error = $.error;
        this.retryAttempt = $.retryAttempt;
        this.skipSucceededOnRetry = $.skipSucceededOnRetry;
        this.startTime = $.startTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RolloutOperationInfoResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RolloutOperationInfoResponse $;

        public Builder() {
            $ = new RolloutOperationInfoResponse();
        }

        public Builder(RolloutOperationInfoResponse defaults) {
            $ = new RolloutOperationInfoResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param endTime The start time of the rollout in UTC. This property will not be set if the rollout has not completed yet.
         * 
         * @return builder
         * 
         */
        public Builder endTime(String endTime) {
            $.endTime = endTime;
            return this;
        }

        /**
         * @param error The detailed error information for any failure.
         * 
         * @return builder
         * 
         */
        public Builder error(CloudErrorBodyResponse error) {
            $.error = error;
            return this;
        }

        /**
         * @param retryAttempt The ordinal count of the number of retry attempts on a rollout. 0 if no retries of the rollout have been performed. If the rollout is updated with a PUT, this count is reset to 0.
         * 
         * @return builder
         * 
         */
        public Builder retryAttempt(Integer retryAttempt) {
            $.retryAttempt = retryAttempt;
            return this;
        }

        /**
         * @param skipSucceededOnRetry True, if all steps that succeeded on the previous run/attempt were chosen to be skipped in this retry attempt. False, otherwise.
         * 
         * @return builder
         * 
         */
        public Builder skipSucceededOnRetry(Boolean skipSucceededOnRetry) {
            $.skipSucceededOnRetry = skipSucceededOnRetry;
            return this;
        }

        /**
         * @param startTime The start time of the rollout in UTC.
         * 
         * @return builder
         * 
         */
        public Builder startTime(String startTime) {
            $.startTime = startTime;
            return this;
        }

        public RolloutOperationInfoResponse build() {
            $.endTime = Objects.requireNonNull($.endTime, "expected parameter 'endTime' to be non-null");
            $.error = Objects.requireNonNull($.error, "expected parameter 'error' to be non-null");
            $.retryAttempt = Objects.requireNonNull($.retryAttempt, "expected parameter 'retryAttempt' to be non-null");
            $.skipSucceededOnRetry = Objects.requireNonNull($.skipSucceededOnRetry, "expected parameter 'skipSucceededOnRetry' to be non-null");
            $.startTime = Objects.requireNonNull($.startTime, "expected parameter 'startTime' to be non-null");
            return $;
        }
    }

}
