// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.machinelearningservices.inputs;

import com.pulumi.azurenative.machinelearningservices.inputs.SparkMavenPackageArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The configuration for a Spark environment.
 * 
 */
public final class ModelEnvironmentDefinitionSparkArgs extends com.pulumi.resources.ResourceArgs {

    public static final ModelEnvironmentDefinitionSparkArgs Empty = new ModelEnvironmentDefinitionSparkArgs();

    /**
     * The Spark packages to use.
     * 
     */
    @Import(name="packages")
    private @Nullable Output<List<SparkMavenPackageArgs>> packages;

    /**
     * @return The Spark packages to use.
     * 
     */
    public Optional<Output<List<SparkMavenPackageArgs>>> packages() {
        return Optional.ofNullable(this.packages);
    }

    /**
     * Whether to precache the packages.
     * 
     */
    @Import(name="precachePackages")
    private @Nullable Output<Boolean> precachePackages;

    /**
     * @return Whether to precache the packages.
     * 
     */
    public Optional<Output<Boolean>> precachePackages() {
        return Optional.ofNullable(this.precachePackages);
    }

    /**
     * The list of spark repositories.
     * 
     */
    @Import(name="repositories")
    private @Nullable Output<List<String>> repositories;

    /**
     * @return The list of spark repositories.
     * 
     */
    public Optional<Output<List<String>>> repositories() {
        return Optional.ofNullable(this.repositories);
    }

    private ModelEnvironmentDefinitionSparkArgs() {}

    private ModelEnvironmentDefinitionSparkArgs(ModelEnvironmentDefinitionSparkArgs $) {
        this.packages = $.packages;
        this.precachePackages = $.precachePackages;
        this.repositories = $.repositories;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ModelEnvironmentDefinitionSparkArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ModelEnvironmentDefinitionSparkArgs $;

        public Builder() {
            $ = new ModelEnvironmentDefinitionSparkArgs();
        }

        public Builder(ModelEnvironmentDefinitionSparkArgs defaults) {
            $ = new ModelEnvironmentDefinitionSparkArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param packages The Spark packages to use.
         * 
         * @return builder
         * 
         */
        public Builder packages(@Nullable Output<List<SparkMavenPackageArgs>> packages) {
            $.packages = packages;
            return this;
        }

        /**
         * @param packages The Spark packages to use.
         * 
         * @return builder
         * 
         */
        public Builder packages(List<SparkMavenPackageArgs> packages) {
            return packages(Output.of(packages));
        }

        /**
         * @param packages The Spark packages to use.
         * 
         * @return builder
         * 
         */
        public Builder packages(SparkMavenPackageArgs... packages) {
            return packages(List.of(packages));
        }

        /**
         * @param precachePackages Whether to precache the packages.
         * 
         * @return builder
         * 
         */
        public Builder precachePackages(@Nullable Output<Boolean> precachePackages) {
            $.precachePackages = precachePackages;
            return this;
        }

        /**
         * @param precachePackages Whether to precache the packages.
         * 
         * @return builder
         * 
         */
        public Builder precachePackages(Boolean precachePackages) {
            return precachePackages(Output.of(precachePackages));
        }

        /**
         * @param repositories The list of spark repositories.
         * 
         * @return builder
         * 
         */
        public Builder repositories(@Nullable Output<List<String>> repositories) {
            $.repositories = repositories;
            return this;
        }

        /**
         * @param repositories The list of spark repositories.
         * 
         * @return builder
         * 
         */
        public Builder repositories(List<String> repositories) {
            return repositories(Output.of(repositories));
        }

        /**
         * @param repositories The list of spark repositories.
         * 
         * @return builder
         * 
         */
        public Builder repositories(String... repositories) {
            return repositories(List.of(repositories));
        }

        public ModelEnvironmentDefinitionSparkArgs build() {
            return $;
        }
    }

}
