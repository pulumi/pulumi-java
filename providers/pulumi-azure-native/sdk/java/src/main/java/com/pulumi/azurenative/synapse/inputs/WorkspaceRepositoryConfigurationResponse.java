// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.synapse.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Git integration settings
 * 
 */
public final class WorkspaceRepositoryConfigurationResponse extends com.pulumi.resources.InvokeArgs {

    public static final WorkspaceRepositoryConfigurationResponse Empty = new WorkspaceRepositoryConfigurationResponse();

    /**
     * Account name
     * 
     */
    @Import(name="accountName")
    private @Nullable String accountName;

    /**
     * @return Account name
     * 
     */
    public Optional<String> accountName() {
        return Optional.ofNullable(this.accountName);
    }

    /**
     * Collaboration branch
     * 
     */
    @Import(name="collaborationBranch")
    private @Nullable String collaborationBranch;

    /**
     * @return Collaboration branch
     * 
     */
    public Optional<String> collaborationBranch() {
        return Optional.ofNullable(this.collaborationBranch);
    }

    /**
     * GitHub Enterprise host name. For example: https://github.mydomain.com
     * 
     */
    @Import(name="hostName")
    private @Nullable String hostName;

    /**
     * @return GitHub Enterprise host name. For example: https://github.mydomain.com
     * 
     */
    public Optional<String> hostName() {
        return Optional.ofNullable(this.hostName);
    }

    /**
     * The last commit ID
     * 
     */
    @Import(name="lastCommitId")
    private @Nullable String lastCommitId;

    /**
     * @return The last commit ID
     * 
     */
    public Optional<String> lastCommitId() {
        return Optional.ofNullable(this.lastCommitId);
    }

    /**
     * VSTS project name
     * 
     */
    @Import(name="projectName")
    private @Nullable String projectName;

    /**
     * @return VSTS project name
     * 
     */
    public Optional<String> projectName() {
        return Optional.ofNullable(this.projectName);
    }

    /**
     * Repository name
     * 
     */
    @Import(name="repositoryName")
    private @Nullable String repositoryName;

    /**
     * @return Repository name
     * 
     */
    public Optional<String> repositoryName() {
        return Optional.ofNullable(this.repositoryName);
    }

    /**
     * Root folder to use in the repository
     * 
     */
    @Import(name="rootFolder")
    private @Nullable String rootFolder;

    /**
     * @return Root folder to use in the repository
     * 
     */
    public Optional<String> rootFolder() {
        return Optional.ofNullable(this.rootFolder);
    }

    /**
     * The VSTS tenant ID
     * 
     */
    @Import(name="tenantId")
    private @Nullable String tenantId;

    /**
     * @return The VSTS tenant ID
     * 
     */
    public Optional<String> tenantId() {
        return Optional.ofNullable(this.tenantId);
    }

    /**
     * Type of workspace repositoryID configuration. Example WorkspaceVSTSConfiguration, WorkspaceGitHubConfiguration
     * 
     */
    @Import(name="type")
    private @Nullable String type;

    /**
     * @return Type of workspace repositoryID configuration. Example WorkspaceVSTSConfiguration, WorkspaceGitHubConfiguration
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    private WorkspaceRepositoryConfigurationResponse() {}

    private WorkspaceRepositoryConfigurationResponse(WorkspaceRepositoryConfigurationResponse $) {
        this.accountName = $.accountName;
        this.collaborationBranch = $.collaborationBranch;
        this.hostName = $.hostName;
        this.lastCommitId = $.lastCommitId;
        this.projectName = $.projectName;
        this.repositoryName = $.repositoryName;
        this.rootFolder = $.rootFolder;
        this.tenantId = $.tenantId;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkspaceRepositoryConfigurationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkspaceRepositoryConfigurationResponse $;

        public Builder() {
            $ = new WorkspaceRepositoryConfigurationResponse();
        }

        public Builder(WorkspaceRepositoryConfigurationResponse defaults) {
            $ = new WorkspaceRepositoryConfigurationResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountName Account name
         * 
         * @return builder
         * 
         */
        public Builder accountName(@Nullable String accountName) {
            $.accountName = accountName;
            return this;
        }

        /**
         * @param collaborationBranch Collaboration branch
         * 
         * @return builder
         * 
         */
        public Builder collaborationBranch(@Nullable String collaborationBranch) {
            $.collaborationBranch = collaborationBranch;
            return this;
        }

        /**
         * @param hostName GitHub Enterprise host name. For example: https://github.mydomain.com
         * 
         * @return builder
         * 
         */
        public Builder hostName(@Nullable String hostName) {
            $.hostName = hostName;
            return this;
        }

        /**
         * @param lastCommitId The last commit ID
         * 
         * @return builder
         * 
         */
        public Builder lastCommitId(@Nullable String lastCommitId) {
            $.lastCommitId = lastCommitId;
            return this;
        }

        /**
         * @param projectName VSTS project name
         * 
         * @return builder
         * 
         */
        public Builder projectName(@Nullable String projectName) {
            $.projectName = projectName;
            return this;
        }

        /**
         * @param repositoryName Repository name
         * 
         * @return builder
         * 
         */
        public Builder repositoryName(@Nullable String repositoryName) {
            $.repositoryName = repositoryName;
            return this;
        }

        /**
         * @param rootFolder Root folder to use in the repository
         * 
         * @return builder
         * 
         */
        public Builder rootFolder(@Nullable String rootFolder) {
            $.rootFolder = rootFolder;
            return this;
        }

        /**
         * @param tenantId The VSTS tenant ID
         * 
         * @return builder
         * 
         */
        public Builder tenantId(@Nullable String tenantId) {
            $.tenantId = tenantId;
            return this;
        }

        /**
         * @param type Type of workspace repositoryID configuration. Example WorkspaceVSTSConfiguration, WorkspaceGitHubConfiguration
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable String type) {
            $.type = type;
            return this;
        }

        public WorkspaceRepositoryConfigurationResponse build() {
            return $;
        }
    }

}
