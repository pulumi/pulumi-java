// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.appconfiguration;

import com.pulumi.azurenative.appconfiguration.enums.PublicNetworkAccess;
import com.pulumi.azurenative.appconfiguration.inputs.EncryptionPropertiesArgs;
import com.pulumi.azurenative.appconfiguration.inputs.ResourceIdentityArgs;
import com.pulumi.azurenative.appconfiguration.inputs.SkuArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConfigurationStoreArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConfigurationStoreArgs Empty = new ConfigurationStoreArgs();

    /**
     * The name of the configuration store.
     * 
     */
    @Import(name="configStoreName")
    private @Nullable Output<String> configStoreName;

    public Optional<Output<String>> configStoreName() {
        return Optional.ofNullable(this.configStoreName);
    }

    /**
     * The encryption settings of the configuration store.
     * 
     */
    @Import(name="encryption")
    private @Nullable Output<EncryptionPropertiesArgs> encryption;

    public Optional<Output<EncryptionPropertiesArgs>> encryption() {
        return Optional.ofNullable(this.encryption);
    }

    /**
     * The managed identity information, if configured.
     * 
     */
    @Import(name="identity")
    private @Nullable Output<ResourceIdentityArgs> identity;

    public Optional<Output<ResourceIdentityArgs>> identity() {
        return Optional.ofNullable(this.identity);
    }

    /**
     * The location of the resource. This cannot be changed after the resource is created.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Control permission for data plane traffic coming from public networks while private endpoint is enabled.
     * 
     */
    @Import(name="publicNetworkAccess")
    private @Nullable Output<Either<String,PublicNetworkAccess>> publicNetworkAccess;

    public Optional<Output<Either<String,PublicNetworkAccess>>> publicNetworkAccess() {
        return Optional.ofNullable(this.publicNetworkAccess);
    }

    /**
     * The name of the resource group to which the container registry belongs.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The sku of the configuration store.
     * 
     */
    @Import(name="sku", required=true)
    private Output<SkuArgs> sku;

    public Output<SkuArgs> sku() {
        return this.sku;
    }

    /**
     * The tags of the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private ConfigurationStoreArgs() {}

    private ConfigurationStoreArgs(ConfigurationStoreArgs $) {
        this.configStoreName = $.configStoreName;
        this.encryption = $.encryption;
        this.identity = $.identity;
        this.location = $.location;
        this.publicNetworkAccess = $.publicNetworkAccess;
        this.resourceGroupName = $.resourceGroupName;
        this.sku = $.sku;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConfigurationStoreArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConfigurationStoreArgs $;

        public Builder() {
            $ = new ConfigurationStoreArgs();
        }

        public Builder(ConfigurationStoreArgs defaults) {
            $ = new ConfigurationStoreArgs(Objects.requireNonNull(defaults));
        }

        public Builder configStoreName(@Nullable Output<String> configStoreName) {
            $.configStoreName = configStoreName;
            return this;
        }

        public Builder configStoreName(String configStoreName) {
            return configStoreName(Output.of(configStoreName));
        }

        public Builder encryption(@Nullable Output<EncryptionPropertiesArgs> encryption) {
            $.encryption = encryption;
            return this;
        }

        public Builder encryption(EncryptionPropertiesArgs encryption) {
            return encryption(Output.of(encryption));
        }

        public Builder identity(@Nullable Output<ResourceIdentityArgs> identity) {
            $.identity = identity;
            return this;
        }

        public Builder identity(ResourceIdentityArgs identity) {
            return identity(Output.of(identity));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder publicNetworkAccess(@Nullable Output<Either<String,PublicNetworkAccess>> publicNetworkAccess) {
            $.publicNetworkAccess = publicNetworkAccess;
            return this;
        }

        public Builder publicNetworkAccess(Either<String,PublicNetworkAccess> publicNetworkAccess) {
            return publicNetworkAccess(Output.of(publicNetworkAccess));
        }

        public Builder publicNetworkAccess(String publicNetworkAccess) {
            return publicNetworkAccess(Either.ofLeft(publicNetworkAccess));
        }

        public Builder publicNetworkAccess(PublicNetworkAccess publicNetworkAccess) {
            return publicNetworkAccess(Either.ofRight(publicNetworkAccess));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder sku(Output<SkuArgs> sku) {
            $.sku = sku;
            return this;
        }

        public Builder sku(SkuArgs sku) {
            return sku(Output.of(sku));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public ConfigurationStoreArgs build() {
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.sku = Objects.requireNonNull($.sku, "expected parameter 'sku' to be non-null");
            return $;
        }
    }

}
