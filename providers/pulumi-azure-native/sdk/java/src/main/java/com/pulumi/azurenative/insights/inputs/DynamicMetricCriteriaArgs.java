// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.insights.inputs;

import com.pulumi.azurenative.insights.enums.AggregationTypeEnum;
import com.pulumi.azurenative.insights.enums.DynamicThresholdOperator;
import com.pulumi.azurenative.insights.enums.DynamicThresholdSensitivity;
import com.pulumi.azurenative.insights.inputs.DynamicThresholdFailingPeriodsArgs;
import com.pulumi.azurenative.insights.inputs.MetricDimensionArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Criterion for dynamic threshold.
 * 
 */
public final class DynamicMetricCriteriaArgs extends com.pulumi.resources.ResourceArgs {

    public static final DynamicMetricCriteriaArgs Empty = new DynamicMetricCriteriaArgs();

    /**
     * The extent of deviation required to trigger an alert. This will affect how tight the threshold is to the metric series pattern.
     * 
     */
    @Import(name="alertSensitivity", required=true)
    private Output<Either<String,DynamicThresholdSensitivity>> alertSensitivity;

    public Output<Either<String,DynamicThresholdSensitivity>> alertSensitivity() {
        return this.alertSensitivity;
    }

    /**
     * Specifies the type of threshold criteria
     * Expected value is &#39;DynamicThresholdCriterion&#39;.
     * 
     */
    @Import(name="criterionType", required=true)
    private Output<String> criterionType;

    public Output<String> criterionType() {
        return this.criterionType;
    }

    /**
     * List of dimension conditions.
     * 
     */
    @Import(name="dimensions")
    private @Nullable Output<List<MetricDimensionArgs>> dimensions;

    public Optional<Output<List<MetricDimensionArgs>>> dimensions() {
        return Optional.ofNullable(this.dimensions);
    }

    /**
     * The minimum number of violations required within the selected lookback time window required to raise an alert.
     * 
     */
    @Import(name="failingPeriods", required=true)
    private Output<DynamicThresholdFailingPeriodsArgs> failingPeriods;

    public Output<DynamicThresholdFailingPeriodsArgs> failingPeriods() {
        return this.failingPeriods;
    }

    /**
     * Use this option to set the date from which to start learning the metric historical data and calculate the dynamic thresholds (in ISO8601 format)
     * 
     */
    @Import(name="ignoreDataBefore")
    private @Nullable Output<String> ignoreDataBefore;

    public Optional<Output<String>> ignoreDataBefore() {
        return Optional.ofNullable(this.ignoreDataBefore);
    }

    /**
     * Name of the metric.
     * 
     */
    @Import(name="metricName", required=true)
    private Output<String> metricName;

    public Output<String> metricName() {
        return this.metricName;
    }

    /**
     * Namespace of the metric.
     * 
     */
    @Import(name="metricNamespace")
    private @Nullable Output<String> metricNamespace;

    public Optional<Output<String>> metricNamespace() {
        return Optional.ofNullable(this.metricNamespace);
    }

    /**
     * Name of the criteria.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    public Output<String> name() {
        return this.name;
    }

    /**
     * The operator used to compare the metric value against the threshold.
     * 
     */
    @Import(name="operator", required=true)
    private Output<Either<String,DynamicThresholdOperator>> operator;

    public Output<Either<String,DynamicThresholdOperator>> operator() {
        return this.operator;
    }

    /**
     * Allows creating an alert rule on a custom metric that isn&#39;t yet emitted, by causing the metric validation to be skipped.
     * 
     */
    @Import(name="skipMetricValidation")
    private @Nullable Output<Boolean> skipMetricValidation;

    public Optional<Output<Boolean>> skipMetricValidation() {
        return Optional.ofNullable(this.skipMetricValidation);
    }

    /**
     * the criteria time aggregation types.
     * 
     */
    @Import(name="timeAggregation", required=true)
    private Output<Either<String,AggregationTypeEnum>> timeAggregation;

    public Output<Either<String,AggregationTypeEnum>> timeAggregation() {
        return this.timeAggregation;
    }

    private DynamicMetricCriteriaArgs() {}

    private DynamicMetricCriteriaArgs(DynamicMetricCriteriaArgs $) {
        this.alertSensitivity = $.alertSensitivity;
        this.criterionType = $.criterionType;
        this.dimensions = $.dimensions;
        this.failingPeriods = $.failingPeriods;
        this.ignoreDataBefore = $.ignoreDataBefore;
        this.metricName = $.metricName;
        this.metricNamespace = $.metricNamespace;
        this.name = $.name;
        this.operator = $.operator;
        this.skipMetricValidation = $.skipMetricValidation;
        this.timeAggregation = $.timeAggregation;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DynamicMetricCriteriaArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DynamicMetricCriteriaArgs $;

        public Builder() {
            $ = new DynamicMetricCriteriaArgs();
        }

        public Builder(DynamicMetricCriteriaArgs defaults) {
            $ = new DynamicMetricCriteriaArgs(Objects.requireNonNull(defaults));
        }

        public Builder alertSensitivity(Output<Either<String,DynamicThresholdSensitivity>> alertSensitivity) {
            $.alertSensitivity = alertSensitivity;
            return this;
        }

        public Builder alertSensitivity(Either<String,DynamicThresholdSensitivity> alertSensitivity) {
            return alertSensitivity(Output.of(alertSensitivity));
        }

        public Builder criterionType(Output<String> criterionType) {
            $.criterionType = criterionType;
            return this;
        }

        public Builder criterionType(String criterionType) {
            return criterionType(Output.of(criterionType));
        }

        public Builder dimensions(@Nullable Output<List<MetricDimensionArgs>> dimensions) {
            $.dimensions = dimensions;
            return this;
        }

        public Builder dimensions(List<MetricDimensionArgs> dimensions) {
            return dimensions(Output.of(dimensions));
        }

        public Builder dimensions(MetricDimensionArgs... dimensions) {
            return dimensions(List.of(dimensions));
        }

        public Builder failingPeriods(Output<DynamicThresholdFailingPeriodsArgs> failingPeriods) {
            $.failingPeriods = failingPeriods;
            return this;
        }

        public Builder failingPeriods(DynamicThresholdFailingPeriodsArgs failingPeriods) {
            return failingPeriods(Output.of(failingPeriods));
        }

        public Builder ignoreDataBefore(@Nullable Output<String> ignoreDataBefore) {
            $.ignoreDataBefore = ignoreDataBefore;
            return this;
        }

        public Builder ignoreDataBefore(String ignoreDataBefore) {
            return ignoreDataBefore(Output.of(ignoreDataBefore));
        }

        public Builder metricName(Output<String> metricName) {
            $.metricName = metricName;
            return this;
        }

        public Builder metricName(String metricName) {
            return metricName(Output.of(metricName));
        }

        public Builder metricNamespace(@Nullable Output<String> metricNamespace) {
            $.metricNamespace = metricNamespace;
            return this;
        }

        public Builder metricNamespace(String metricNamespace) {
            return metricNamespace(Output.of(metricNamespace));
        }

        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder operator(Output<Either<String,DynamicThresholdOperator>> operator) {
            $.operator = operator;
            return this;
        }

        public Builder operator(Either<String,DynamicThresholdOperator> operator) {
            return operator(Output.of(operator));
        }

        public Builder skipMetricValidation(@Nullable Output<Boolean> skipMetricValidation) {
            $.skipMetricValidation = skipMetricValidation;
            return this;
        }

        public Builder skipMetricValidation(Boolean skipMetricValidation) {
            return skipMetricValidation(Output.of(skipMetricValidation));
        }

        public Builder timeAggregation(Output<Either<String,AggregationTypeEnum>> timeAggregation) {
            $.timeAggregation = timeAggregation;
            return this;
        }

        public Builder timeAggregation(Either<String,AggregationTypeEnum> timeAggregation) {
            return timeAggregation(Output.of(timeAggregation));
        }

        public DynamicMetricCriteriaArgs build() {
            $.alertSensitivity = Objects.requireNonNull($.alertSensitivity, "expected parameter 'alertSensitivity' to be non-null");
            $.criterionType = Codegen.stringProp("criterionType").output().arg($.criterionType).require();
            $.failingPeriods = Objects.requireNonNull($.failingPeriods, "expected parameter 'failingPeriods' to be non-null");
            $.metricName = Objects.requireNonNull($.metricName, "expected parameter 'metricName' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.operator = Objects.requireNonNull($.operator, "expected parameter 'operator' to be non-null");
            $.timeAggregation = Objects.requireNonNull($.timeAggregation, "expected parameter 'timeAggregation' to be non-null");
            return $;
        }
    }

}
