// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.hdinsight.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Describes a script action on a running cluster.
 * 
 */
public final class RuntimeScriptActionResponse extends com.pulumi.resources.InvokeArgs {

    public static final RuntimeScriptActionResponse Empty = new RuntimeScriptActionResponse();

    /**
     * The application name of the script action, if any.
     * 
     */
    @Import(name="applicationName", required=true)
    private String applicationName;

    /**
     * @return The application name of the script action, if any.
     * 
     */
    public String applicationName() {
        return this.applicationName;
    }

    /**
     * The name of the script action.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return The name of the script action.
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * The parameters for the script
     * 
     */
    @Import(name="parameters")
    private @Nullable String parameters;

    /**
     * @return The parameters for the script
     * 
     */
    public Optional<String> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    /**
     * The list of roles where script will be executed.
     * 
     */
    @Import(name="roles", required=true)
    private List<String> roles;

    /**
     * @return The list of roles where script will be executed.
     * 
     */
    public List<String> roles() {
        return this.roles;
    }

    /**
     * The URI to the script.
     * 
     */
    @Import(name="uri", required=true)
    private String uri;

    /**
     * @return The URI to the script.
     * 
     */
    public String uri() {
        return this.uri;
    }

    private RuntimeScriptActionResponse() {}

    private RuntimeScriptActionResponse(RuntimeScriptActionResponse $) {
        this.applicationName = $.applicationName;
        this.name = $.name;
        this.parameters = $.parameters;
        this.roles = $.roles;
        this.uri = $.uri;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RuntimeScriptActionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RuntimeScriptActionResponse $;

        public Builder() {
            $ = new RuntimeScriptActionResponse();
        }

        public Builder(RuntimeScriptActionResponse defaults) {
            $ = new RuntimeScriptActionResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param applicationName The application name of the script action, if any.
         * 
         * @return builder
         * 
         */
        public Builder applicationName(String applicationName) {
            $.applicationName = applicationName;
            return this;
        }

        /**
         * @param name The name of the script action.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param parameters The parameters for the script
         * 
         * @return builder
         * 
         */
        public Builder parameters(@Nullable String parameters) {
            $.parameters = parameters;
            return this;
        }

        /**
         * @param roles The list of roles where script will be executed.
         * 
         * @return builder
         * 
         */
        public Builder roles(List<String> roles) {
            $.roles = roles;
            return this;
        }

        /**
         * @param roles The list of roles where script will be executed.
         * 
         * @return builder
         * 
         */
        public Builder roles(String... roles) {
            return roles(List.of(roles));
        }

        /**
         * @param uri The URI to the script.
         * 
         * @return builder
         * 
         */
        public Builder uri(String uri) {
            $.uri = uri;
            return this;
        }

        public RuntimeScriptActionResponse build() {
            $.applicationName = Objects.requireNonNull($.applicationName, "expected parameter 'applicationName' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.roles = Objects.requireNonNull($.roles, "expected parameter 'roles' to be non-null");
            $.uri = Objects.requireNonNull($.uri, "expected parameter 'uri' to be non-null");
            return $;
        }
    }

}
