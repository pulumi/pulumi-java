// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.costmanagement.inputs;

import com.pulumi.azurenative.costmanagement.inputs.ReportAggregationResponse;
import com.pulumi.azurenative.costmanagement.inputs.ReportDatasetConfigurationResponse;
import com.pulumi.azurenative.costmanagement.inputs.ReportFilterResponse;
import com.pulumi.azurenative.costmanagement.inputs.ReportGroupingResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The definition of data present in the report.
 * 
 */
public final class ReportDatasetResponse extends com.pulumi.resources.InvokeArgs {

    public static final ReportDatasetResponse Empty = new ReportDatasetResponse();

    /**
     * Dictionary of aggregation expression to use in the report. The key of each item in the dictionary is the alias for the aggregated column. Report can have up to 2 aggregation clauses.
     * 
     */
    @Import(name="aggregation")
    private @Nullable Map<String,ReportAggregationResponse> aggregation;

    public Optional<Map<String,ReportAggregationResponse>> aggregation() {
        return Optional.ofNullable(this.aggregation);
    }

    /**
     * Has configuration information for the data in the report. The configuration will be ignored if aggregation and grouping are provided.
     * 
     */
    @Import(name="configuration")
    private @Nullable ReportDatasetConfigurationResponse configuration;

    public Optional<ReportDatasetConfigurationResponse> configuration() {
        return Optional.ofNullable(this.configuration);
    }

    /**
     * Has filter expression to use in the report.
     * 
     */
    @Import(name="filter")
    private @Nullable ReportFilterResponse filter;

    public Optional<ReportFilterResponse> filter() {
        return Optional.ofNullable(this.filter);
    }

    /**
     * The granularity of rows in the report.
     * 
     */
    @Import(name="granularity")
    private @Nullable String granularity;

    public Optional<String> granularity() {
        return Optional.ofNullable(this.granularity);
    }

    /**
     * Array of group by expression to use in the report. Report can have up to 2 group by clauses.
     * 
     */
    @Import(name="grouping")
    private @Nullable List<ReportGroupingResponse> grouping;

    public Optional<List<ReportGroupingResponse>> grouping() {
        return Optional.ofNullable(this.grouping);
    }

    private ReportDatasetResponse() {}

    private ReportDatasetResponse(ReportDatasetResponse $) {
        this.aggregation = $.aggregation;
        this.configuration = $.configuration;
        this.filter = $.filter;
        this.granularity = $.granularity;
        this.grouping = $.grouping;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ReportDatasetResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ReportDatasetResponse $;

        public Builder() {
            $ = new ReportDatasetResponse();
        }

        public Builder(ReportDatasetResponse defaults) {
            $ = new ReportDatasetResponse(Objects.requireNonNull(defaults));
        }

        public Builder aggregation(@Nullable Map<String,ReportAggregationResponse> aggregation) {
            $.aggregation = aggregation;
            return this;
        }

        public Builder configuration(@Nullable ReportDatasetConfigurationResponse configuration) {
            $.configuration = configuration;
            return this;
        }

        public Builder filter(@Nullable ReportFilterResponse filter) {
            $.filter = filter;
            return this;
        }

        public Builder granularity(@Nullable String granularity) {
            $.granularity = granularity;
            return this;
        }

        public Builder grouping(@Nullable List<ReportGroupingResponse> grouping) {
            $.grouping = grouping;
            return this;
        }

        public Builder grouping(ReportGroupingResponse... grouping) {
            return grouping(List.of(grouping));
        }

        public ReportDatasetResponse build() {
            return $;
        }
    }

}
