// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.machinelearningservices.inputs;

import com.pulumi.azurenative.machinelearningservices.inputs.ClientCredentialsResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AzureStorageSectionResponse extends com.pulumi.resources.InvokeArgs {

    public static final AzureStorageSectionResponse Empty = new AzureStorageSectionResponse();

    /**
     *  Storage Account Key (Deprecated).
     * 
     */
    @Import(name="accountKey")
    private @Nullable String accountKey;

    /**
     * @return  Storage Account Key (Deprecated).
     * 
     */
    public Optional<String> accountKey() {
        return Optional.ofNullable(this.accountKey);
    }

    /**
     * Storage Account Name.
     * 
     */
    @Import(name="accountName")
    private @Nullable String accountName;

    /**
     * @return Storage Account Name.
     * 
     */
    public Optional<String> accountName() {
        return Optional.ofNullable(this.accountName);
    }

    /**
     * Indicate if we are using Workspace ManagedIdentities/MSI token (Deprecated).
     * 
     */
    @Import(name="areWorkspaceManagedIdentitiesAllowed")
    private @Nullable Boolean areWorkspaceManagedIdentitiesAllowed;

    /**
     * @return Indicate if we are using Workspace ManagedIdentities/MSI token (Deprecated).
     * 
     */
    public Optional<Boolean> areWorkspaceManagedIdentitiesAllowed() {
        return Optional.ofNullable(this.areWorkspaceManagedIdentitiesAllowed);
    }

    /**
     *  If this is an &#34;DataStoreType.AzureBlob&#34;, the length of time (in seconds) to cache files locally after they are accessed (downloaded).
     * 
     */
    @Import(name="blobCacheTimeout")
    private @Nullable Integer blobCacheTimeout;

    /**
     * @return  If this is an &#34;DataStoreType.AzureBlob&#34;, the length of time (in seconds) to cache files locally after they are accessed (downloaded).
     * 
     */
    public Optional<Integer> blobCacheTimeout() {
        return Optional.ofNullable(this.blobCacheTimeout);
    }

    @Import(name="clientCredentials")
    private @Nullable ClientCredentialsResponse clientCredentials;

    public Optional<ClientCredentialsResponse> clientCredentials() {
        return Optional.ofNullable(this.clientCredentials);
    }

    /**
     * The storage container name.
     * 
     */
    @Import(name="containerName")
    private @Nullable String containerName;

    /**
     * @return The storage container name.
     * 
     */
    public Optional<String> containerName() {
        return Optional.ofNullable(this.containerName);
    }

    /**
     * The credential.
     * 
     */
    @Import(name="credential")
    private @Nullable String credential;

    /**
     * @return The credential.
     * 
     */
    public Optional<String> credential() {
        return Optional.ofNullable(this.credential);
    }

    /**
     *  The credential type.
     * 
     */
    @Import(name="credentialType")
    private @Nullable String credentialType;

    /**
     * @return  The credential type.
     * 
     */
    public Optional<String> credentialType() {
        return Optional.ofNullable(this.credentialType);
    }

    /**
     * The host of the container.
     * 
     */
    @Import(name="endpoint")
    private @Nullable String endpoint;

    /**
     * @return The host of the container.
     * 
     */
    public Optional<String> endpoint() {
        return Optional.ofNullable(this.endpoint);
    }

    /**
     * Indicate if we are using SAS token or Account Key (Deprecated).
     * 
     */
    @Import(name="isSas")
    private @Nullable Boolean isSas;

    /**
     * @return Indicate if we are using SAS token or Account Key (Deprecated).
     * 
     */
    public Optional<Boolean> isSas() {
        return Optional.ofNullable(this.isSas);
    }

    /**
     * The protocol to use. Defaults to https.
     * 
     */
    @Import(name="protocol")
    private @Nullable String protocol;

    /**
     * @return The protocol to use. Defaults to https.
     * 
     */
    public Optional<String> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    /**
     * Resource Group.
     * 
     */
    @Import(name="resourceGroup")
    private @Nullable String resourceGroup;

    /**
     * @return Resource Group.
     * 
     */
    public Optional<String> resourceGroup() {
        return Optional.ofNullable(this.resourceGroup);
    }

    /**
     *  SAS Token for the container (Deprecated).
     * 
     */
    @Import(name="sasToken")
    private @Nullable String sasToken;

    /**
     * @return  SAS Token for the container (Deprecated).
     * 
     */
    public Optional<String> sasToken() {
        return Optional.ofNullable(this.sasToken);
    }

    /**
     * Indicates which identity to use to authenticate service data access to customer&#39;s storage.
     * 
     */
    @Import(name="serviceDataAccessAuthIdentity")
    private @Nullable String serviceDataAccessAuthIdentity;

    /**
     * @return Indicates which identity to use to authenticate service data access to customer&#39;s storage.
     * 
     */
    public Optional<String> serviceDataAccessAuthIdentity() {
        return Optional.ofNullable(this.serviceDataAccessAuthIdentity);
    }

    /**
     * Subscription ID.
     * 
     */
    @Import(name="subscriptionId")
    private @Nullable String subscriptionId;

    /**
     * @return Subscription ID.
     * 
     */
    public Optional<String> subscriptionId() {
        return Optional.ofNullable(this.subscriptionId);
    }

    private AzureStorageSectionResponse() {}

    private AzureStorageSectionResponse(AzureStorageSectionResponse $) {
        this.accountKey = $.accountKey;
        this.accountName = $.accountName;
        this.areWorkspaceManagedIdentitiesAllowed = $.areWorkspaceManagedIdentitiesAllowed;
        this.blobCacheTimeout = $.blobCacheTimeout;
        this.clientCredentials = $.clientCredentials;
        this.containerName = $.containerName;
        this.credential = $.credential;
        this.credentialType = $.credentialType;
        this.endpoint = $.endpoint;
        this.isSas = $.isSas;
        this.protocol = $.protocol;
        this.resourceGroup = $.resourceGroup;
        this.sasToken = $.sasToken;
        this.serviceDataAccessAuthIdentity = $.serviceDataAccessAuthIdentity;
        this.subscriptionId = $.subscriptionId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AzureStorageSectionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AzureStorageSectionResponse $;

        public Builder() {
            $ = new AzureStorageSectionResponse();
        }

        public Builder(AzureStorageSectionResponse defaults) {
            $ = new AzureStorageSectionResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountKey  Storage Account Key (Deprecated).
         * 
         * @return builder
         * 
         */
        public Builder accountKey(@Nullable String accountKey) {
            $.accountKey = accountKey;
            return this;
        }

        /**
         * @param accountName Storage Account Name.
         * 
         * @return builder
         * 
         */
        public Builder accountName(@Nullable String accountName) {
            $.accountName = accountName;
            return this;
        }

        /**
         * @param areWorkspaceManagedIdentitiesAllowed Indicate if we are using Workspace ManagedIdentities/MSI token (Deprecated).
         * 
         * @return builder
         * 
         */
        public Builder areWorkspaceManagedIdentitiesAllowed(@Nullable Boolean areWorkspaceManagedIdentitiesAllowed) {
            $.areWorkspaceManagedIdentitiesAllowed = areWorkspaceManagedIdentitiesAllowed;
            return this;
        }

        /**
         * @param blobCacheTimeout  If this is an &#34;DataStoreType.AzureBlob&#34;, the length of time (in seconds) to cache files locally after they are accessed (downloaded).
         * 
         * @return builder
         * 
         */
        public Builder blobCacheTimeout(@Nullable Integer blobCacheTimeout) {
            $.blobCacheTimeout = blobCacheTimeout;
            return this;
        }

        public Builder clientCredentials(@Nullable ClientCredentialsResponse clientCredentials) {
            $.clientCredentials = clientCredentials;
            return this;
        }

        /**
         * @param containerName The storage container name.
         * 
         * @return builder
         * 
         */
        public Builder containerName(@Nullable String containerName) {
            $.containerName = containerName;
            return this;
        }

        /**
         * @param credential The credential.
         * 
         * @return builder
         * 
         */
        public Builder credential(@Nullable String credential) {
            $.credential = credential;
            return this;
        }

        /**
         * @param credentialType  The credential type.
         * 
         * @return builder
         * 
         */
        public Builder credentialType(@Nullable String credentialType) {
            $.credentialType = credentialType;
            return this;
        }

        /**
         * @param endpoint The host of the container.
         * 
         * @return builder
         * 
         */
        public Builder endpoint(@Nullable String endpoint) {
            $.endpoint = endpoint;
            return this;
        }

        /**
         * @param isSas Indicate if we are using SAS token or Account Key (Deprecated).
         * 
         * @return builder
         * 
         */
        public Builder isSas(@Nullable Boolean isSas) {
            $.isSas = isSas;
            return this;
        }

        /**
         * @param protocol The protocol to use. Defaults to https.
         * 
         * @return builder
         * 
         */
        public Builder protocol(@Nullable String protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param resourceGroup Resource Group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroup(@Nullable String resourceGroup) {
            $.resourceGroup = resourceGroup;
            return this;
        }

        /**
         * @param sasToken  SAS Token for the container (Deprecated).
         * 
         * @return builder
         * 
         */
        public Builder sasToken(@Nullable String sasToken) {
            $.sasToken = sasToken;
            return this;
        }

        /**
         * @param serviceDataAccessAuthIdentity Indicates which identity to use to authenticate service data access to customer&#39;s storage.
         * 
         * @return builder
         * 
         */
        public Builder serviceDataAccessAuthIdentity(@Nullable String serviceDataAccessAuthIdentity) {
            $.serviceDataAccessAuthIdentity = serviceDataAccessAuthIdentity;
            return this;
        }

        /**
         * @param subscriptionId Subscription ID.
         * 
         * @return builder
         * 
         */
        public Builder subscriptionId(@Nullable String subscriptionId) {
            $.subscriptionId = subscriptionId;
            return this;
        }

        public AzureStorageSectionResponse build() {
            return $;
        }
    }

}
