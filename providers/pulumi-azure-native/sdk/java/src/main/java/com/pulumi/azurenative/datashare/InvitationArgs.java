// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datashare;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InvitationArgs extends com.pulumi.resources.ResourceArgs {

    public static final InvitationArgs Empty = new InvitationArgs();

    /**
     * The name of the share account.
     * 
     */
    @Import(name="accountName", required=true)
    private Output<String> accountName;

    /**
     * @return The name of the share account.
     * 
     */
    public Output<String> accountName() {
        return this.accountName;
    }

    /**
     * The expiration date for the invitation and share subscription.
     * 
     */
    @Import(name="expirationDate")
    private @Nullable Output<String> expirationDate;

    /**
     * @return The expiration date for the invitation and share subscription.
     * 
     */
    public Optional<Output<String>> expirationDate() {
        return Optional.ofNullable(this.expirationDate);
    }

    /**
     * The name of the invitation.
     * 
     */
    @Import(name="invitationName")
    private @Nullable Output<String> invitationName;

    /**
     * @return The name of the invitation.
     * 
     */
    public Optional<Output<String>> invitationName() {
        return Optional.ofNullable(this.invitationName);
    }

    /**
     * The resource group name.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The resource group name.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The name of the share to send the invitation for.
     * 
     */
    @Import(name="shareName", required=true)
    private Output<String> shareName;

    /**
     * @return The name of the share to send the invitation for.
     * 
     */
    public Output<String> shareName() {
        return this.shareName;
    }

    /**
     * The target Azure AD Id. Can&#39;t be combined with email.
     * 
     */
    @Import(name="targetActiveDirectoryId")
    private @Nullable Output<String> targetActiveDirectoryId;

    /**
     * @return The target Azure AD Id. Can&#39;t be combined with email.
     * 
     */
    public Optional<Output<String>> targetActiveDirectoryId() {
        return Optional.ofNullable(this.targetActiveDirectoryId);
    }

    /**
     * The email the invitation is directed to.
     * 
     */
    @Import(name="targetEmail")
    private @Nullable Output<String> targetEmail;

    /**
     * @return The email the invitation is directed to.
     * 
     */
    public Optional<Output<String>> targetEmail() {
        return Optional.ofNullable(this.targetEmail);
    }

    /**
     * The target user or application Id that invitation is being sent to.
     * Must be specified along TargetActiveDirectoryId. This enables sending
     * invitations to specific users or applications in an AD tenant.
     * 
     */
    @Import(name="targetObjectId")
    private @Nullable Output<String> targetObjectId;

    /**
     * @return The target user or application Id that invitation is being sent to.
     * Must be specified along TargetActiveDirectoryId. This enables sending
     * invitations to specific users or applications in an AD tenant.
     * 
     */
    public Optional<Output<String>> targetObjectId() {
        return Optional.ofNullable(this.targetObjectId);
    }

    private InvitationArgs() {}

    private InvitationArgs(InvitationArgs $) {
        this.accountName = $.accountName;
        this.expirationDate = $.expirationDate;
        this.invitationName = $.invitationName;
        this.resourceGroupName = $.resourceGroupName;
        this.shareName = $.shareName;
        this.targetActiveDirectoryId = $.targetActiveDirectoryId;
        this.targetEmail = $.targetEmail;
        this.targetObjectId = $.targetObjectId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InvitationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InvitationArgs $;

        public Builder() {
            $ = new InvitationArgs();
        }

        public Builder(InvitationArgs defaults) {
            $ = new InvitationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountName The name of the share account.
         * 
         * @return builder
         * 
         */
        public Builder accountName(Output<String> accountName) {
            $.accountName = accountName;
            return this;
        }

        /**
         * @param accountName The name of the share account.
         * 
         * @return builder
         * 
         */
        public Builder accountName(String accountName) {
            return accountName(Output.of(accountName));
        }

        /**
         * @param expirationDate The expiration date for the invitation and share subscription.
         * 
         * @return builder
         * 
         */
        public Builder expirationDate(@Nullable Output<String> expirationDate) {
            $.expirationDate = expirationDate;
            return this;
        }

        /**
         * @param expirationDate The expiration date for the invitation and share subscription.
         * 
         * @return builder
         * 
         */
        public Builder expirationDate(String expirationDate) {
            return expirationDate(Output.of(expirationDate));
        }

        /**
         * @param invitationName The name of the invitation.
         * 
         * @return builder
         * 
         */
        public Builder invitationName(@Nullable Output<String> invitationName) {
            $.invitationName = invitationName;
            return this;
        }

        /**
         * @param invitationName The name of the invitation.
         * 
         * @return builder
         * 
         */
        public Builder invitationName(String invitationName) {
            return invitationName(Output.of(invitationName));
        }

        /**
         * @param resourceGroupName The resource group name.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The resource group name.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param shareName The name of the share to send the invitation for.
         * 
         * @return builder
         * 
         */
        public Builder shareName(Output<String> shareName) {
            $.shareName = shareName;
            return this;
        }

        /**
         * @param shareName The name of the share to send the invitation for.
         * 
         * @return builder
         * 
         */
        public Builder shareName(String shareName) {
            return shareName(Output.of(shareName));
        }

        /**
         * @param targetActiveDirectoryId The target Azure AD Id. Can&#39;t be combined with email.
         * 
         * @return builder
         * 
         */
        public Builder targetActiveDirectoryId(@Nullable Output<String> targetActiveDirectoryId) {
            $.targetActiveDirectoryId = targetActiveDirectoryId;
            return this;
        }

        /**
         * @param targetActiveDirectoryId The target Azure AD Id. Can&#39;t be combined with email.
         * 
         * @return builder
         * 
         */
        public Builder targetActiveDirectoryId(String targetActiveDirectoryId) {
            return targetActiveDirectoryId(Output.of(targetActiveDirectoryId));
        }

        /**
         * @param targetEmail The email the invitation is directed to.
         * 
         * @return builder
         * 
         */
        public Builder targetEmail(@Nullable Output<String> targetEmail) {
            $.targetEmail = targetEmail;
            return this;
        }

        /**
         * @param targetEmail The email the invitation is directed to.
         * 
         * @return builder
         * 
         */
        public Builder targetEmail(String targetEmail) {
            return targetEmail(Output.of(targetEmail));
        }

        /**
         * @param targetObjectId The target user or application Id that invitation is being sent to.
         * Must be specified along TargetActiveDirectoryId. This enables sending
         * invitations to specific users or applications in an AD tenant.
         * 
         * @return builder
         * 
         */
        public Builder targetObjectId(@Nullable Output<String> targetObjectId) {
            $.targetObjectId = targetObjectId;
            return this;
        }

        /**
         * @param targetObjectId The target user or application Id that invitation is being sent to.
         * Must be specified along TargetActiveDirectoryId. This enables sending
         * invitations to specific users or applications in an AD tenant.
         * 
         * @return builder
         * 
         */
        public Builder targetObjectId(String targetObjectId) {
            return targetObjectId(Output.of(targetObjectId));
        }

        public InvitationArgs build() {
            $.accountName = Objects.requireNonNull($.accountName, "expected parameter 'accountName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.shareName = Objects.requireNonNull($.shareName, "expected parameter 'shareName' to be non-null");
            return $;
        }
    }

}
