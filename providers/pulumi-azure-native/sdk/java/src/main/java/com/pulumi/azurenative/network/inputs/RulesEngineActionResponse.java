// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.azurenative.network.inputs.ForwardingConfigurationResponse;
import com.pulumi.azurenative.network.inputs.HeaderActionResponse;
import com.pulumi.azurenative.network.inputs.RedirectConfigurationResponse;
import com.pulumi.core.Either;
import com.pulumi.core.annotations.Import;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * One or more actions that will execute, modifying the request and/or response.
 * 
 */
public final class RulesEngineActionResponse extends com.pulumi.resources.InvokeArgs {

    public static final RulesEngineActionResponse Empty = new RulesEngineActionResponse();

    /**
     * A list of header actions to apply from the request from AFD to the origin.
     * 
     */
    @Import(name="requestHeaderActions")
    private @Nullable List<HeaderActionResponse> requestHeaderActions;

    public Optional<List<HeaderActionResponse>> requestHeaderActions() {
        return Optional.ofNullable(this.requestHeaderActions);
    }

    /**
     * A list of header actions to apply from the response from AFD to the client.
     * 
     */
    @Import(name="responseHeaderActions")
    private @Nullable List<HeaderActionResponse> responseHeaderActions;

    public Optional<List<HeaderActionResponse>> responseHeaderActions() {
        return Optional.ofNullable(this.responseHeaderActions);
    }

    /**
     * Override the route configuration.
     * 
     */
    @Import(name="routeConfigurationOverride")
    private @Nullable Either<ForwardingConfigurationResponse,RedirectConfigurationResponse> routeConfigurationOverride;

    public Optional<Either<ForwardingConfigurationResponse,RedirectConfigurationResponse>> routeConfigurationOverride() {
        return Optional.ofNullable(this.routeConfigurationOverride);
    }

    private RulesEngineActionResponse() {}

    private RulesEngineActionResponse(RulesEngineActionResponse $) {
        this.requestHeaderActions = $.requestHeaderActions;
        this.responseHeaderActions = $.responseHeaderActions;
        this.routeConfigurationOverride = $.routeConfigurationOverride;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RulesEngineActionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RulesEngineActionResponse $;

        public Builder() {
            $ = new RulesEngineActionResponse();
        }

        public Builder(RulesEngineActionResponse defaults) {
            $ = new RulesEngineActionResponse(Objects.requireNonNull(defaults));
        }

        public Builder requestHeaderActions(@Nullable List<HeaderActionResponse> requestHeaderActions) {
            $.requestHeaderActions = requestHeaderActions;
            return this;
        }

        public Builder requestHeaderActions(HeaderActionResponse... requestHeaderActions) {
            return requestHeaderActions(List.of(requestHeaderActions));
        }

        public Builder responseHeaderActions(@Nullable List<HeaderActionResponse> responseHeaderActions) {
            $.responseHeaderActions = responseHeaderActions;
            return this;
        }

        public Builder responseHeaderActions(HeaderActionResponse... responseHeaderActions) {
            return responseHeaderActions(List.of(responseHeaderActions));
        }

        public Builder routeConfigurationOverride(@Nullable Either<ForwardingConfigurationResponse,RedirectConfigurationResponse> routeConfigurationOverride) {
            $.routeConfigurationOverride = routeConfigurationOverride;
            return this;
        }

        public RulesEngineActionResponse build() {
            return $;
        }
    }

}
