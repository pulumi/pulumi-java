// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.azurenative.datafactory.inputs.ActivityDependencyResponse;
import com.pulumi.azurenative.datafactory.inputs.ActivityPolicyResponse;
import com.pulumi.azurenative.datafactory.inputs.CustomActivityReferenceObjectResponse;
import com.pulumi.azurenative.datafactory.inputs.LinkedServiceReferenceResponse;
import com.pulumi.azurenative.datafactory.inputs.UserPropertyResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Custom activity type.
 * 
 */
public final class CustomActivityResponse extends com.pulumi.resources.InvokeArgs {

    public static final CustomActivityResponse Empty = new CustomActivityResponse();

    /**
     * Elevation level and scope for the user, default is nonadmin task. Type: string (or Expression with resultType double).
     * 
     */
    @Import(name="autoUserSpecification")
    private @Nullable Object autoUserSpecification;

    /**
     * @return Elevation level and scope for the user, default is nonadmin task. Type: string (or Expression with resultType double).
     * 
     */
    public Optional<Object> autoUserSpecification() {
        return Optional.ofNullable(this.autoUserSpecification);
    }

    /**
     * Command for custom activity Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="command", required=true)
    private Object command;

    /**
     * @return Command for custom activity Type: string (or Expression with resultType string).
     * 
     */
    public Object command() {
        return this.command;
    }

    /**
     * Activity depends on condition.
     * 
     */
    @Import(name="dependsOn")
    private @Nullable List<ActivityDependencyResponse> dependsOn;

    /**
     * @return Activity depends on condition.
     * 
     */
    public Optional<List<ActivityDependencyResponse>> dependsOn() {
        return Optional.ofNullable(this.dependsOn);
    }

    /**
     * Activity description.
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    /**
     * @return Activity description.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * User defined property bag. There is no restriction on the keys or values that can be used. The user specified custom activity has the full responsibility to consume and interpret the content defined.
     * 
     */
    @Import(name="extendedProperties")
    private @Nullable Map<String,Object> extendedProperties;

    /**
     * @return User defined property bag. There is no restriction on the keys or values that can be used. The user specified custom activity has the full responsibility to consume and interpret the content defined.
     * 
     */
    public Optional<Map<String,Object>> extendedProperties() {
        return Optional.ofNullable(this.extendedProperties);
    }

    /**
     * Folder path for resource files Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="folderPath")
    private @Nullable Object folderPath;

    /**
     * @return Folder path for resource files Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Object> folderPath() {
        return Optional.ofNullable(this.folderPath);
    }

    /**
     * Linked service reference.
     * 
     */
    @Import(name="linkedServiceName")
    private @Nullable LinkedServiceReferenceResponse linkedServiceName;

    /**
     * @return Linked service reference.
     * 
     */
    public Optional<LinkedServiceReferenceResponse> linkedServiceName() {
        return Optional.ofNullable(this.linkedServiceName);
    }

    /**
     * Activity name.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return Activity name.
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * Activity policy.
     * 
     */
    @Import(name="policy")
    private @Nullable ActivityPolicyResponse policy;

    /**
     * @return Activity policy.
     * 
     */
    public Optional<ActivityPolicyResponse> policy() {
        return Optional.ofNullable(this.policy);
    }

    /**
     * Reference objects
     * 
     */
    @Import(name="referenceObjects")
    private @Nullable CustomActivityReferenceObjectResponse referenceObjects;

    /**
     * @return Reference objects
     * 
     */
    public Optional<CustomActivityReferenceObjectResponse> referenceObjects() {
        return Optional.ofNullable(this.referenceObjects);
    }

    /**
     * Resource linked service reference.
     * 
     */
    @Import(name="resourceLinkedService")
    private @Nullable LinkedServiceReferenceResponse resourceLinkedService;

    /**
     * @return Resource linked service reference.
     * 
     */
    public Optional<LinkedServiceReferenceResponse> resourceLinkedService() {
        return Optional.ofNullable(this.resourceLinkedService);
    }

    /**
     * The retention time for the files submitted for custom activity. Type: double (or Expression with resultType double).
     * 
     */
    @Import(name="retentionTimeInDays")
    private @Nullable Object retentionTimeInDays;

    /**
     * @return The retention time for the files submitted for custom activity. Type: double (or Expression with resultType double).
     * 
     */
    public Optional<Object> retentionTimeInDays() {
        return Optional.ofNullable(this.retentionTimeInDays);
    }

    /**
     * Type of activity.
     * Expected value is &#39;Custom&#39;.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    /**
     * @return Type of activity.
     * Expected value is &#39;Custom&#39;.
     * 
     */
    public String type() {
        return this.type;
    }

    /**
     * Activity user properties.
     * 
     */
    @Import(name="userProperties")
    private @Nullable List<UserPropertyResponse> userProperties;

    /**
     * @return Activity user properties.
     * 
     */
    public Optional<List<UserPropertyResponse>> userProperties() {
        return Optional.ofNullable(this.userProperties);
    }

    private CustomActivityResponse() {}

    private CustomActivityResponse(CustomActivityResponse $) {
        this.autoUserSpecification = $.autoUserSpecification;
        this.command = $.command;
        this.dependsOn = $.dependsOn;
        this.description = $.description;
        this.extendedProperties = $.extendedProperties;
        this.folderPath = $.folderPath;
        this.linkedServiceName = $.linkedServiceName;
        this.name = $.name;
        this.policy = $.policy;
        this.referenceObjects = $.referenceObjects;
        this.resourceLinkedService = $.resourceLinkedService;
        this.retentionTimeInDays = $.retentionTimeInDays;
        this.type = $.type;
        this.userProperties = $.userProperties;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CustomActivityResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CustomActivityResponse $;

        public Builder() {
            $ = new CustomActivityResponse();
        }

        public Builder(CustomActivityResponse defaults) {
            $ = new CustomActivityResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoUserSpecification Elevation level and scope for the user, default is nonadmin task. Type: string (or Expression with resultType double).
         * 
         * @return builder
         * 
         */
        public Builder autoUserSpecification(@Nullable Object autoUserSpecification) {
            $.autoUserSpecification = autoUserSpecification;
            return this;
        }

        /**
         * @param command Command for custom activity Type: string (or Expression with resultType string).
         * 
         * @return builder
         * 
         */
        public Builder command(Object command) {
            $.command = command;
            return this;
        }

        /**
         * @param dependsOn Activity depends on condition.
         * 
         * @return builder
         * 
         */
        public Builder dependsOn(@Nullable List<ActivityDependencyResponse> dependsOn) {
            $.dependsOn = dependsOn;
            return this;
        }

        /**
         * @param dependsOn Activity depends on condition.
         * 
         * @return builder
         * 
         */
        public Builder dependsOn(ActivityDependencyResponse... dependsOn) {
            return dependsOn(List.of(dependsOn));
        }

        /**
         * @param description Activity description.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        /**
         * @param extendedProperties User defined property bag. There is no restriction on the keys or values that can be used. The user specified custom activity has the full responsibility to consume and interpret the content defined.
         * 
         * @return builder
         * 
         */
        public Builder extendedProperties(@Nullable Map<String,Object> extendedProperties) {
            $.extendedProperties = extendedProperties;
            return this;
        }

        /**
         * @param folderPath Folder path for resource files Type: string (or Expression with resultType string).
         * 
         * @return builder
         * 
         */
        public Builder folderPath(@Nullable Object folderPath) {
            $.folderPath = folderPath;
            return this;
        }

        /**
         * @param linkedServiceName Linked service reference.
         * 
         * @return builder
         * 
         */
        public Builder linkedServiceName(@Nullable LinkedServiceReferenceResponse linkedServiceName) {
            $.linkedServiceName = linkedServiceName;
            return this;
        }

        /**
         * @param name Activity name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param policy Activity policy.
         * 
         * @return builder
         * 
         */
        public Builder policy(@Nullable ActivityPolicyResponse policy) {
            $.policy = policy;
            return this;
        }

        /**
         * @param referenceObjects Reference objects
         * 
         * @return builder
         * 
         */
        public Builder referenceObjects(@Nullable CustomActivityReferenceObjectResponse referenceObjects) {
            $.referenceObjects = referenceObjects;
            return this;
        }

        /**
         * @param resourceLinkedService Resource linked service reference.
         * 
         * @return builder
         * 
         */
        public Builder resourceLinkedService(@Nullable LinkedServiceReferenceResponse resourceLinkedService) {
            $.resourceLinkedService = resourceLinkedService;
            return this;
        }

        /**
         * @param retentionTimeInDays The retention time for the files submitted for custom activity. Type: double (or Expression with resultType double).
         * 
         * @return builder
         * 
         */
        public Builder retentionTimeInDays(@Nullable Object retentionTimeInDays) {
            $.retentionTimeInDays = retentionTimeInDays;
            return this;
        }

        /**
         * @param type Type of activity.
         * Expected value is &#39;Custom&#39;.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            $.type = type;
            return this;
        }

        /**
         * @param userProperties Activity user properties.
         * 
         * @return builder
         * 
         */
        public Builder userProperties(@Nullable List<UserPropertyResponse> userProperties) {
            $.userProperties = userProperties;
            return this;
        }

        /**
         * @param userProperties Activity user properties.
         * 
         * @return builder
         * 
         */
        public Builder userProperties(UserPropertyResponse... userProperties) {
            return userProperties(List.of(userProperties));
        }

        public CustomActivityResponse build() {
            $.command = Objects.requireNonNull($.command, "expected parameter 'command' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.type = Codegen.stringProp("type").arg($.type).require();
            return $;
        }
    }

}
