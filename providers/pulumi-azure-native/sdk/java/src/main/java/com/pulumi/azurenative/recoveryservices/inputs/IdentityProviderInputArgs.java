// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.recoveryservices.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * Identity provider input.
 * 
 */
public final class IdentityProviderInputArgs extends com.pulumi.resources.ResourceArgs {

    public static final IdentityProviderInputArgs Empty = new IdentityProviderInputArgs();

    /**
     * The base authority for Azure Active Directory authentication.
     * 
     */
    @Import(name="aadAuthority", required=true)
    private Output<String> aadAuthority;

    public Output<String> aadAuthority() {
        return this.aadAuthority;
    }

    /**
     * The application/client Id for the service principal with which the on-premise management/data plane components would communicate with our Azure services.
     * 
     */
    @Import(name="applicationId", required=true)
    private Output<String> applicationId;

    public Output<String> applicationId() {
        return this.applicationId;
    }

    /**
     * The intended Audience of the service principal with which the on-premise management/data plane components would communicate with our Azure services.
     * 
     */
    @Import(name="audience", required=true)
    private Output<String> audience;

    public Output<String> audience() {
        return this.audience;
    }

    /**
     * The object Id of the service principal with which the on-premise management/data plane components would communicate with our Azure services.
     * 
     */
    @Import(name="objectId", required=true)
    private Output<String> objectId;

    public Output<String> objectId() {
        return this.objectId;
    }

    /**
     * The tenant Id for the service principal with which the on-premise management/data plane components would communicate with our Azure services.
     * 
     */
    @Import(name="tenantId", required=true)
    private Output<String> tenantId;

    public Output<String> tenantId() {
        return this.tenantId;
    }

    private IdentityProviderInputArgs() {}

    private IdentityProviderInputArgs(IdentityProviderInputArgs $) {
        this.aadAuthority = $.aadAuthority;
        this.applicationId = $.applicationId;
        this.audience = $.audience;
        this.objectId = $.objectId;
        this.tenantId = $.tenantId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IdentityProviderInputArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IdentityProviderInputArgs $;

        public Builder() {
            $ = new IdentityProviderInputArgs();
        }

        public Builder(IdentityProviderInputArgs defaults) {
            $ = new IdentityProviderInputArgs(Objects.requireNonNull(defaults));
        }

        public Builder aadAuthority(Output<String> aadAuthority) {
            $.aadAuthority = aadAuthority;
            return this;
        }

        public Builder aadAuthority(String aadAuthority) {
            return aadAuthority(Output.of(aadAuthority));
        }

        public Builder applicationId(Output<String> applicationId) {
            $.applicationId = applicationId;
            return this;
        }

        public Builder applicationId(String applicationId) {
            return applicationId(Output.of(applicationId));
        }

        public Builder audience(Output<String> audience) {
            $.audience = audience;
            return this;
        }

        public Builder audience(String audience) {
            return audience(Output.of(audience));
        }

        public Builder objectId(Output<String> objectId) {
            $.objectId = objectId;
            return this;
        }

        public Builder objectId(String objectId) {
            return objectId(Output.of(objectId));
        }

        public Builder tenantId(Output<String> tenantId) {
            $.tenantId = tenantId;
            return this;
        }

        public Builder tenantId(String tenantId) {
            return tenantId(Output.of(tenantId));
        }

        public IdentityProviderInputArgs build() {
            $.aadAuthority = Objects.requireNonNull($.aadAuthority, "expected parameter 'aadAuthority' to be non-null");
            $.applicationId = Objects.requireNonNull($.applicationId, "expected parameter 'applicationId' to be non-null");
            $.audience = Objects.requireNonNull($.audience, "expected parameter 'audience' to be non-null");
            $.objectId = Objects.requireNonNull($.objectId, "expected parameter 'objectId' to be non-null");
            $.tenantId = Objects.requireNonNull($.tenantId, "expected parameter 'tenantId' to be non-null");
            return $;
        }
    }

}
