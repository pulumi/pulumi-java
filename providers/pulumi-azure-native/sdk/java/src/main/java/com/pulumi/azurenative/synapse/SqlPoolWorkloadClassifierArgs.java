// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.synapse;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SqlPoolWorkloadClassifierArgs extends com.pulumi.resources.ResourceArgs {

    public static final SqlPoolWorkloadClassifierArgs Empty = new SqlPoolWorkloadClassifierArgs();

    /**
     * The workload classifier context.
     * 
     */
    @Import(name="context")
    private @Nullable Output<String> context;

    public Optional<Output<String>> context() {
        return Optional.ofNullable(this.context);
    }

    /**
     * The workload classifier end time for classification.
     * 
     */
    @Import(name="endTime")
    private @Nullable Output<String> endTime;

    public Optional<Output<String>> endTime() {
        return Optional.ofNullable(this.endTime);
    }

    /**
     * The workload classifier importance.
     * 
     */
    @Import(name="importance")
    private @Nullable Output<String> importance;

    public Optional<Output<String>> importance() {
        return Optional.ofNullable(this.importance);
    }

    /**
     * The workload classifier label.
     * 
     */
    @Import(name="label")
    private @Nullable Output<String> label;

    public Optional<Output<String>> label() {
        return Optional.ofNullable(this.label);
    }

    /**
     * The workload classifier member name.
     * 
     */
    @Import(name="memberName", required=true)
    private Output<String> memberName;

    public Output<String> memberName() {
        return this.memberName;
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * SQL pool name
     * 
     */
    @Import(name="sqlPoolName", required=true)
    private Output<String> sqlPoolName;

    public Output<String> sqlPoolName() {
        return this.sqlPoolName;
    }

    /**
     * The workload classifier start time for classification.
     * 
     */
    @Import(name="startTime")
    private @Nullable Output<String> startTime;

    public Optional<Output<String>> startTime() {
        return Optional.ofNullable(this.startTime);
    }

    /**
     * The name of the workload classifier.
     * 
     */
    @Import(name="workloadClassifierName")
    private @Nullable Output<String> workloadClassifierName;

    public Optional<Output<String>> workloadClassifierName() {
        return Optional.ofNullable(this.workloadClassifierName);
    }

    /**
     * The name of the workload group.
     * 
     */
    @Import(name="workloadGroupName", required=true)
    private Output<String> workloadGroupName;

    public Output<String> workloadGroupName() {
        return this.workloadGroupName;
    }

    /**
     * The name of the workspace
     * 
     */
    @Import(name="workspaceName", required=true)
    private Output<String> workspaceName;

    public Output<String> workspaceName() {
        return this.workspaceName;
    }

    private SqlPoolWorkloadClassifierArgs() {}

    private SqlPoolWorkloadClassifierArgs(SqlPoolWorkloadClassifierArgs $) {
        this.context = $.context;
        this.endTime = $.endTime;
        this.importance = $.importance;
        this.label = $.label;
        this.memberName = $.memberName;
        this.resourceGroupName = $.resourceGroupName;
        this.sqlPoolName = $.sqlPoolName;
        this.startTime = $.startTime;
        this.workloadClassifierName = $.workloadClassifierName;
        this.workloadGroupName = $.workloadGroupName;
        this.workspaceName = $.workspaceName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SqlPoolWorkloadClassifierArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SqlPoolWorkloadClassifierArgs $;

        public Builder() {
            $ = new SqlPoolWorkloadClassifierArgs();
        }

        public Builder(SqlPoolWorkloadClassifierArgs defaults) {
            $ = new SqlPoolWorkloadClassifierArgs(Objects.requireNonNull(defaults));
        }

        public Builder context(@Nullable Output<String> context) {
            $.context = context;
            return this;
        }

        public Builder context(String context) {
            return context(Output.of(context));
        }

        public Builder endTime(@Nullable Output<String> endTime) {
            $.endTime = endTime;
            return this;
        }

        public Builder endTime(String endTime) {
            return endTime(Output.of(endTime));
        }

        public Builder importance(@Nullable Output<String> importance) {
            $.importance = importance;
            return this;
        }

        public Builder importance(String importance) {
            return importance(Output.of(importance));
        }

        public Builder label(@Nullable Output<String> label) {
            $.label = label;
            return this;
        }

        public Builder label(String label) {
            return label(Output.of(label));
        }

        public Builder memberName(Output<String> memberName) {
            $.memberName = memberName;
            return this;
        }

        public Builder memberName(String memberName) {
            return memberName(Output.of(memberName));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder sqlPoolName(Output<String> sqlPoolName) {
            $.sqlPoolName = sqlPoolName;
            return this;
        }

        public Builder sqlPoolName(String sqlPoolName) {
            return sqlPoolName(Output.of(sqlPoolName));
        }

        public Builder startTime(@Nullable Output<String> startTime) {
            $.startTime = startTime;
            return this;
        }

        public Builder startTime(String startTime) {
            return startTime(Output.of(startTime));
        }

        public Builder workloadClassifierName(@Nullable Output<String> workloadClassifierName) {
            $.workloadClassifierName = workloadClassifierName;
            return this;
        }

        public Builder workloadClassifierName(String workloadClassifierName) {
            return workloadClassifierName(Output.of(workloadClassifierName));
        }

        public Builder workloadGroupName(Output<String> workloadGroupName) {
            $.workloadGroupName = workloadGroupName;
            return this;
        }

        public Builder workloadGroupName(String workloadGroupName) {
            return workloadGroupName(Output.of(workloadGroupName));
        }

        public Builder workspaceName(Output<String> workspaceName) {
            $.workspaceName = workspaceName;
            return this;
        }

        public Builder workspaceName(String workspaceName) {
            return workspaceName(Output.of(workspaceName));
        }

        public SqlPoolWorkloadClassifierArgs build() {
            $.memberName = Objects.requireNonNull($.memberName, "expected parameter 'memberName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.sqlPoolName = Objects.requireNonNull($.sqlPoolName, "expected parameter 'sqlPoolName' to be non-null");
            $.workloadGroupName = Objects.requireNonNull($.workloadGroupName, "expected parameter 'workloadGroupName' to be non-null");
            $.workspaceName = Objects.requireNonNull($.workspaceName, "expected parameter 'workspaceName' to be non-null");
            return $;
        }
    }

}
