// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.sql;

import com.pulumi.azurenative.sql.enums.AdministratorType;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServerAzureADAdministratorArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServerAzureADAdministratorArgs Empty = new ServerAzureADAdministratorArgs();

    /**
     * The name of server active directory administrator.
     * 
     */
    @Import(name="administratorName")
    private @Nullable Output<String> administratorName;

    /**
     * @return The name of server active directory administrator.
     * 
     */
    public Optional<Output<String>> administratorName() {
        return Optional.ofNullable(this.administratorName);
    }

    /**
     * Type of the sever administrator.
     * 
     */
    @Import(name="administratorType", required=true)
    private Output<Either<String,AdministratorType>> administratorType;

    /**
     * @return Type of the sever administrator.
     * 
     */
    public Output<Either<String,AdministratorType>> administratorType() {
        return this.administratorType;
    }

    /**
     * Login name of the server administrator.
     * 
     */
    @Import(name="login", required=true)
    private Output<String> login;

    /**
     * @return Login name of the server administrator.
     * 
     */
    public Output<String> login() {
        return this.login;
    }

    /**
     * The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The name of the server.
     * 
     */
    @Import(name="serverName", required=true)
    private Output<String> serverName;

    /**
     * @return The name of the server.
     * 
     */
    public Output<String> serverName() {
        return this.serverName;
    }

    /**
     * SID (object ID) of the server administrator.
     * 
     */
    @Import(name="sid", required=true)
    private Output<String> sid;

    /**
     * @return SID (object ID) of the server administrator.
     * 
     */
    public Output<String> sid() {
        return this.sid;
    }

    /**
     * Tenant ID of the administrator.
     * 
     */
    @Import(name="tenantId")
    private @Nullable Output<String> tenantId;

    /**
     * @return Tenant ID of the administrator.
     * 
     */
    public Optional<Output<String>> tenantId() {
        return Optional.ofNullable(this.tenantId);
    }

    private ServerAzureADAdministratorArgs() {}

    private ServerAzureADAdministratorArgs(ServerAzureADAdministratorArgs $) {
        this.administratorName = $.administratorName;
        this.administratorType = $.administratorType;
        this.login = $.login;
        this.resourceGroupName = $.resourceGroupName;
        this.serverName = $.serverName;
        this.sid = $.sid;
        this.tenantId = $.tenantId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServerAzureADAdministratorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServerAzureADAdministratorArgs $;

        public Builder() {
            $ = new ServerAzureADAdministratorArgs();
        }

        public Builder(ServerAzureADAdministratorArgs defaults) {
            $ = new ServerAzureADAdministratorArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param administratorName The name of server active directory administrator.
         * 
         * @return builder
         * 
         */
        public Builder administratorName(@Nullable Output<String> administratorName) {
            $.administratorName = administratorName;
            return this;
        }

        /**
         * @param administratorName The name of server active directory administrator.
         * 
         * @return builder
         * 
         */
        public Builder administratorName(String administratorName) {
            return administratorName(Output.of(administratorName));
        }

        /**
         * @param administratorType Type of the sever administrator.
         * 
         * @return builder
         * 
         */
        public Builder administratorType(Output<Either<String,AdministratorType>> administratorType) {
            $.administratorType = administratorType;
            return this;
        }

        /**
         * @param administratorType Type of the sever administrator.
         * 
         * @return builder
         * 
         */
        public Builder administratorType(Either<String,AdministratorType> administratorType) {
            return administratorType(Output.of(administratorType));
        }

        /**
         * @param administratorType Type of the sever administrator.
         * 
         * @return builder
         * 
         */
        public Builder administratorType(String administratorType) {
            return administratorType(Either.ofLeft(administratorType));
        }

        /**
         * @param administratorType Type of the sever administrator.
         * 
         * @return builder
         * 
         */
        public Builder administratorType(AdministratorType administratorType) {
            return administratorType(Either.ofRight(administratorType));
        }

        /**
         * @param login Login name of the server administrator.
         * 
         * @return builder
         * 
         */
        public Builder login(Output<String> login) {
            $.login = login;
            return this;
        }

        /**
         * @param login Login name of the server administrator.
         * 
         * @return builder
         * 
         */
        public Builder login(String login) {
            return login(Output.of(login));
        }

        /**
         * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param serverName The name of the server.
         * 
         * @return builder
         * 
         */
        public Builder serverName(Output<String> serverName) {
            $.serverName = serverName;
            return this;
        }

        /**
         * @param serverName The name of the server.
         * 
         * @return builder
         * 
         */
        public Builder serverName(String serverName) {
            return serverName(Output.of(serverName));
        }

        /**
         * @param sid SID (object ID) of the server administrator.
         * 
         * @return builder
         * 
         */
        public Builder sid(Output<String> sid) {
            $.sid = sid;
            return this;
        }

        /**
         * @param sid SID (object ID) of the server administrator.
         * 
         * @return builder
         * 
         */
        public Builder sid(String sid) {
            return sid(Output.of(sid));
        }

        /**
         * @param tenantId Tenant ID of the administrator.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(@Nullable Output<String> tenantId) {
            $.tenantId = tenantId;
            return this;
        }

        /**
         * @param tenantId Tenant ID of the administrator.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(String tenantId) {
            return tenantId(Output.of(tenantId));
        }

        public ServerAzureADAdministratorArgs build() {
            $.administratorType = Objects.requireNonNull($.administratorType, "expected parameter 'administratorType' to be non-null");
            $.login = Objects.requireNonNull($.login, "expected parameter 'login' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.serverName = Objects.requireNonNull($.serverName, "expected parameter 'serverName' to be non-null");
            $.sid = Objects.requireNonNull($.sid, "expected parameter 'sid' to be non-null");
            return $;
        }
    }

}
