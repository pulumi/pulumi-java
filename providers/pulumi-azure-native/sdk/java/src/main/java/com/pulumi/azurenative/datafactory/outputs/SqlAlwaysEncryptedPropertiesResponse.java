// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.outputs;

import com.pulumi.azurenative.datafactory.outputs.AzureKeyVaultSecretReferenceResponse;
import com.pulumi.azurenative.datafactory.outputs.CredentialReferenceResponse;
import com.pulumi.azurenative.datafactory.outputs.SecureStringResponse;
import com.pulumi.core.Either;
import com.pulumi.core.annotations.CustomType;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SqlAlwaysEncryptedPropertiesResponse {
    /**
     * @return Sql always encrypted AKV authentication type. Type: string (or Expression with resultType string).
     * 
     */
    private final String alwaysEncryptedAkvAuthType;
    /**
     * @return The credential reference containing authentication information.
     * 
     */
    private final @Nullable CredentialReferenceResponse credential;
    /**
     * @return The client ID of the application in Azure Active Directory used for Azure Key Vault authentication. Type: string (or Expression with resultType string).
     * 
     */
    private final @Nullable Object servicePrincipalId;
    /**
     * @return The key of the service principal used to authenticate against Azure Key Vault.
     * 
     */
    private final @Nullable Either<AzureKeyVaultSecretReferenceResponse,SecureStringResponse> servicePrincipalKey;

    @CustomType.Constructor
    private SqlAlwaysEncryptedPropertiesResponse(
        @CustomType.Parameter("alwaysEncryptedAkvAuthType") String alwaysEncryptedAkvAuthType,
        @CustomType.Parameter("credential") @Nullable CredentialReferenceResponse credential,
        @CustomType.Parameter("servicePrincipalId") @Nullable Object servicePrincipalId,
        @CustomType.Parameter("servicePrincipalKey") @Nullable Either<AzureKeyVaultSecretReferenceResponse,SecureStringResponse> servicePrincipalKey) {
        this.alwaysEncryptedAkvAuthType = alwaysEncryptedAkvAuthType;
        this.credential = credential;
        this.servicePrincipalId = servicePrincipalId;
        this.servicePrincipalKey = servicePrincipalKey;
    }

    /**
     * @return Sql always encrypted AKV authentication type. Type: string (or Expression with resultType string).
     * 
     */
    public String alwaysEncryptedAkvAuthType() {
        return this.alwaysEncryptedAkvAuthType;
    }
    /**
     * @return The credential reference containing authentication information.
     * 
     */
    public Optional<CredentialReferenceResponse> credential() {
        return Optional.ofNullable(this.credential);
    }
    /**
     * @return The client ID of the application in Azure Active Directory used for Azure Key Vault authentication. Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Object> servicePrincipalId() {
        return Optional.ofNullable(this.servicePrincipalId);
    }
    /**
     * @return The key of the service principal used to authenticate against Azure Key Vault.
     * 
     */
    public Optional<Either<AzureKeyVaultSecretReferenceResponse,SecureStringResponse>> servicePrincipalKey() {
        return Optional.ofNullable(this.servicePrincipalKey);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SqlAlwaysEncryptedPropertiesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String alwaysEncryptedAkvAuthType;
        private @Nullable CredentialReferenceResponse credential;
        private @Nullable Object servicePrincipalId;
        private @Nullable Either<AzureKeyVaultSecretReferenceResponse,SecureStringResponse> servicePrincipalKey;

        public Builder() {
    	      // Empty
        }

        public Builder(SqlAlwaysEncryptedPropertiesResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.alwaysEncryptedAkvAuthType = defaults.alwaysEncryptedAkvAuthType;
    	      this.credential = defaults.credential;
    	      this.servicePrincipalId = defaults.servicePrincipalId;
    	      this.servicePrincipalKey = defaults.servicePrincipalKey;
        }

        public Builder alwaysEncryptedAkvAuthType(String alwaysEncryptedAkvAuthType) {
            this.alwaysEncryptedAkvAuthType = Objects.requireNonNull(alwaysEncryptedAkvAuthType);
            return this;
        }
        public Builder credential(@Nullable CredentialReferenceResponse credential) {
            this.credential = credential;
            return this;
        }
        public Builder servicePrincipalId(@Nullable Object servicePrincipalId) {
            this.servicePrincipalId = servicePrincipalId;
            return this;
        }
        public Builder servicePrincipalKey(@Nullable Either<AzureKeyVaultSecretReferenceResponse,SecureStringResponse> servicePrincipalKey) {
            this.servicePrincipalKey = servicePrincipalKey;
            return this;
        }        public SqlAlwaysEncryptedPropertiesResponse build() {
            return new SqlAlwaysEncryptedPropertiesResponse(alwaysEncryptedAkvAuthType, credential, servicePrincipalId, servicePrincipalKey);
        }
    }
}
