// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network;

import com.pulumi.azurenative.network.inputs.AddressSpaceArgs;
import com.pulumi.azurenative.network.inputs.DhcpOptionsArgs;
import com.pulumi.azurenative.network.inputs.ExtendedLocationArgs;
import com.pulumi.azurenative.network.inputs.SubResourceArgs;
import com.pulumi.azurenative.network.inputs.SubnetArgs;
import com.pulumi.azurenative.network.inputs.VirtualNetworkBgpCommunitiesArgs;
import com.pulumi.azurenative.network.inputs.VirtualNetworkPeeringArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VirtualNetworkArgs extends com.pulumi.resources.ResourceArgs {

    public static final VirtualNetworkArgs Empty = new VirtualNetworkArgs();

    /**
     * The AddressSpace that contains an array of IP address ranges that can be used by subnets.
     * 
     */
    @Import(name="addressSpace")
    private @Nullable Output<AddressSpaceArgs> addressSpace;

    /**
     * @return The AddressSpace that contains an array of IP address ranges that can be used by subnets.
     * 
     */
    public Optional<Output<AddressSpaceArgs>> addressSpace() {
        return Optional.ofNullable(this.addressSpace);
    }

    /**
     * Bgp Communities sent over ExpressRoute with each route corresponding to a prefix in this VNET.
     * 
     */
    @Import(name="bgpCommunities")
    private @Nullable Output<VirtualNetworkBgpCommunitiesArgs> bgpCommunities;

    /**
     * @return Bgp Communities sent over ExpressRoute with each route corresponding to a prefix in this VNET.
     * 
     */
    public Optional<Output<VirtualNetworkBgpCommunitiesArgs>> bgpCommunities() {
        return Optional.ofNullable(this.bgpCommunities);
    }

    /**
     * The DDoS protection plan associated with the virtual network.
     * 
     */
    @Import(name="ddosProtectionPlan")
    private @Nullable Output<SubResourceArgs> ddosProtectionPlan;

    /**
     * @return The DDoS protection plan associated with the virtual network.
     * 
     */
    public Optional<Output<SubResourceArgs>> ddosProtectionPlan() {
        return Optional.ofNullable(this.ddosProtectionPlan);
    }

    /**
     * The dhcpOptions that contains an array of DNS servers available to VMs deployed in the virtual network.
     * 
     */
    @Import(name="dhcpOptions")
    private @Nullable Output<DhcpOptionsArgs> dhcpOptions;

    /**
     * @return The dhcpOptions that contains an array of DNS servers available to VMs deployed in the virtual network.
     * 
     */
    public Optional<Output<DhcpOptionsArgs>> dhcpOptions() {
        return Optional.ofNullable(this.dhcpOptions);
    }

    /**
     * Indicates if DDoS protection is enabled for all the protected resources in the virtual network. It requires a DDoS protection plan associated with the resource.
     * 
     */
    @Import(name="enableDdosProtection")
    private @Nullable Output<Boolean> enableDdosProtection;

    /**
     * @return Indicates if DDoS protection is enabled for all the protected resources in the virtual network. It requires a DDoS protection plan associated with the resource.
     * 
     */
    public Optional<Output<Boolean>> enableDdosProtection() {
        return Optional.ofNullable(this.enableDdosProtection);
    }

    /**
     * Indicates if VM protection is enabled for all the subnets in the virtual network.
     * 
     */
    @Import(name="enableVmProtection")
    private @Nullable Output<Boolean> enableVmProtection;

    /**
     * @return Indicates if VM protection is enabled for all the subnets in the virtual network.
     * 
     */
    public Optional<Output<Boolean>> enableVmProtection() {
        return Optional.ofNullable(this.enableVmProtection);
    }

    /**
     * The extended location of the virtual network.
     * 
     */
    @Import(name="extendedLocation")
    private @Nullable Output<ExtendedLocationArgs> extendedLocation;

    /**
     * @return The extended location of the virtual network.
     * 
     */
    public Optional<Output<ExtendedLocationArgs>> extendedLocation() {
        return Optional.ofNullable(this.extendedLocation);
    }

    /**
     * Resource ID.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return Resource ID.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Array of IpAllocation which reference this VNET.
     * 
     */
    @Import(name="ipAllocations")
    private @Nullable Output<List<SubResourceArgs>> ipAllocations;

    /**
     * @return Array of IpAllocation which reference this VNET.
     * 
     */
    public Optional<Output<List<SubResourceArgs>>> ipAllocations() {
        return Optional.ofNullable(this.ipAllocations);
    }

    /**
     * Resource location.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Resource location.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * A list of subnets in a Virtual Network.
     * 
     */
    @Import(name="subnets")
    private @Nullable Output<List<SubnetArgs>> subnets;

    /**
     * @return A list of subnets in a Virtual Network.
     * 
     */
    public Optional<Output<List<SubnetArgs>>> subnets() {
        return Optional.ofNullable(this.subnets);
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Resource tags.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The name of the virtual network.
     * 
     */
    @Import(name="virtualNetworkName")
    private @Nullable Output<String> virtualNetworkName;

    /**
     * @return The name of the virtual network.
     * 
     */
    public Optional<Output<String>> virtualNetworkName() {
        return Optional.ofNullable(this.virtualNetworkName);
    }

    /**
     * A list of peerings in a Virtual Network.
     * 
     */
    @Import(name="virtualNetworkPeerings")
    private @Nullable Output<List<VirtualNetworkPeeringArgs>> virtualNetworkPeerings;

    /**
     * @return A list of peerings in a Virtual Network.
     * 
     */
    public Optional<Output<List<VirtualNetworkPeeringArgs>>> virtualNetworkPeerings() {
        return Optional.ofNullable(this.virtualNetworkPeerings);
    }

    private VirtualNetworkArgs() {}

    private VirtualNetworkArgs(VirtualNetworkArgs $) {
        this.addressSpace = $.addressSpace;
        this.bgpCommunities = $.bgpCommunities;
        this.ddosProtectionPlan = $.ddosProtectionPlan;
        this.dhcpOptions = $.dhcpOptions;
        this.enableDdosProtection = $.enableDdosProtection;
        this.enableVmProtection = $.enableVmProtection;
        this.extendedLocation = $.extendedLocation;
        this.id = $.id;
        this.ipAllocations = $.ipAllocations;
        this.location = $.location;
        this.resourceGroupName = $.resourceGroupName;
        this.subnets = $.subnets;
        this.tags = $.tags;
        this.virtualNetworkName = $.virtualNetworkName;
        this.virtualNetworkPeerings = $.virtualNetworkPeerings;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VirtualNetworkArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VirtualNetworkArgs $;

        public Builder() {
            $ = new VirtualNetworkArgs();
        }

        public Builder(VirtualNetworkArgs defaults) {
            $ = new VirtualNetworkArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param addressSpace The AddressSpace that contains an array of IP address ranges that can be used by subnets.
         * 
         * @return builder
         * 
         */
        public Builder addressSpace(@Nullable Output<AddressSpaceArgs> addressSpace) {
            $.addressSpace = addressSpace;
            return this;
        }

        /**
         * @param addressSpace The AddressSpace that contains an array of IP address ranges that can be used by subnets.
         * 
         * @return builder
         * 
         */
        public Builder addressSpace(AddressSpaceArgs addressSpace) {
            return addressSpace(Output.of(addressSpace));
        }

        /**
         * @param bgpCommunities Bgp Communities sent over ExpressRoute with each route corresponding to a prefix in this VNET.
         * 
         * @return builder
         * 
         */
        public Builder bgpCommunities(@Nullable Output<VirtualNetworkBgpCommunitiesArgs> bgpCommunities) {
            $.bgpCommunities = bgpCommunities;
            return this;
        }

        /**
         * @param bgpCommunities Bgp Communities sent over ExpressRoute with each route corresponding to a prefix in this VNET.
         * 
         * @return builder
         * 
         */
        public Builder bgpCommunities(VirtualNetworkBgpCommunitiesArgs bgpCommunities) {
            return bgpCommunities(Output.of(bgpCommunities));
        }

        /**
         * @param ddosProtectionPlan The DDoS protection plan associated with the virtual network.
         * 
         * @return builder
         * 
         */
        public Builder ddosProtectionPlan(@Nullable Output<SubResourceArgs> ddosProtectionPlan) {
            $.ddosProtectionPlan = ddosProtectionPlan;
            return this;
        }

        /**
         * @param ddosProtectionPlan The DDoS protection plan associated with the virtual network.
         * 
         * @return builder
         * 
         */
        public Builder ddosProtectionPlan(SubResourceArgs ddosProtectionPlan) {
            return ddosProtectionPlan(Output.of(ddosProtectionPlan));
        }

        /**
         * @param dhcpOptions The dhcpOptions that contains an array of DNS servers available to VMs deployed in the virtual network.
         * 
         * @return builder
         * 
         */
        public Builder dhcpOptions(@Nullable Output<DhcpOptionsArgs> dhcpOptions) {
            $.dhcpOptions = dhcpOptions;
            return this;
        }

        /**
         * @param dhcpOptions The dhcpOptions that contains an array of DNS servers available to VMs deployed in the virtual network.
         * 
         * @return builder
         * 
         */
        public Builder dhcpOptions(DhcpOptionsArgs dhcpOptions) {
            return dhcpOptions(Output.of(dhcpOptions));
        }

        /**
         * @param enableDdosProtection Indicates if DDoS protection is enabled for all the protected resources in the virtual network. It requires a DDoS protection plan associated with the resource.
         * 
         * @return builder
         * 
         */
        public Builder enableDdosProtection(@Nullable Output<Boolean> enableDdosProtection) {
            $.enableDdosProtection = enableDdosProtection;
            return this;
        }

        /**
         * @param enableDdosProtection Indicates if DDoS protection is enabled for all the protected resources in the virtual network. It requires a DDoS protection plan associated with the resource.
         * 
         * @return builder
         * 
         */
        public Builder enableDdosProtection(Boolean enableDdosProtection) {
            return enableDdosProtection(Output.of(enableDdosProtection));
        }

        /**
         * @param enableVmProtection Indicates if VM protection is enabled for all the subnets in the virtual network.
         * 
         * @return builder
         * 
         */
        public Builder enableVmProtection(@Nullable Output<Boolean> enableVmProtection) {
            $.enableVmProtection = enableVmProtection;
            return this;
        }

        /**
         * @param enableVmProtection Indicates if VM protection is enabled for all the subnets in the virtual network.
         * 
         * @return builder
         * 
         */
        public Builder enableVmProtection(Boolean enableVmProtection) {
            return enableVmProtection(Output.of(enableVmProtection));
        }

        /**
         * @param extendedLocation The extended location of the virtual network.
         * 
         * @return builder
         * 
         */
        public Builder extendedLocation(@Nullable Output<ExtendedLocationArgs> extendedLocation) {
            $.extendedLocation = extendedLocation;
            return this;
        }

        /**
         * @param extendedLocation The extended location of the virtual network.
         * 
         * @return builder
         * 
         */
        public Builder extendedLocation(ExtendedLocationArgs extendedLocation) {
            return extendedLocation(Output.of(extendedLocation));
        }

        /**
         * @param id Resource ID.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id Resource ID.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param ipAllocations Array of IpAllocation which reference this VNET.
         * 
         * @return builder
         * 
         */
        public Builder ipAllocations(@Nullable Output<List<SubResourceArgs>> ipAllocations) {
            $.ipAllocations = ipAllocations;
            return this;
        }

        /**
         * @param ipAllocations Array of IpAllocation which reference this VNET.
         * 
         * @return builder
         * 
         */
        public Builder ipAllocations(List<SubResourceArgs> ipAllocations) {
            return ipAllocations(Output.of(ipAllocations));
        }

        /**
         * @param ipAllocations Array of IpAllocation which reference this VNET.
         * 
         * @return builder
         * 
         */
        public Builder ipAllocations(SubResourceArgs... ipAllocations) {
            return ipAllocations(List.of(ipAllocations));
        }

        /**
         * @param location Resource location.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Resource location.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param resourceGroupName The name of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param subnets A list of subnets in a Virtual Network.
         * 
         * @return builder
         * 
         */
        public Builder subnets(@Nullable Output<List<SubnetArgs>> subnets) {
            $.subnets = subnets;
            return this;
        }

        /**
         * @param subnets A list of subnets in a Virtual Network.
         * 
         * @return builder
         * 
         */
        public Builder subnets(List<SubnetArgs> subnets) {
            return subnets(Output.of(subnets));
        }

        /**
         * @param subnets A list of subnets in a Virtual Network.
         * 
         * @return builder
         * 
         */
        public Builder subnets(SubnetArgs... subnets) {
            return subnets(List.of(subnets));
        }

        /**
         * @param tags Resource tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Resource tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param virtualNetworkName The name of the virtual network.
         * 
         * @return builder
         * 
         */
        public Builder virtualNetworkName(@Nullable Output<String> virtualNetworkName) {
            $.virtualNetworkName = virtualNetworkName;
            return this;
        }

        /**
         * @param virtualNetworkName The name of the virtual network.
         * 
         * @return builder
         * 
         */
        public Builder virtualNetworkName(String virtualNetworkName) {
            return virtualNetworkName(Output.of(virtualNetworkName));
        }

        /**
         * @param virtualNetworkPeerings A list of peerings in a Virtual Network.
         * 
         * @return builder
         * 
         */
        public Builder virtualNetworkPeerings(@Nullable Output<List<VirtualNetworkPeeringArgs>> virtualNetworkPeerings) {
            $.virtualNetworkPeerings = virtualNetworkPeerings;
            return this;
        }

        /**
         * @param virtualNetworkPeerings A list of peerings in a Virtual Network.
         * 
         * @return builder
         * 
         */
        public Builder virtualNetworkPeerings(List<VirtualNetworkPeeringArgs> virtualNetworkPeerings) {
            return virtualNetworkPeerings(Output.of(virtualNetworkPeerings));
        }

        /**
         * @param virtualNetworkPeerings A list of peerings in a Virtual Network.
         * 
         * @return builder
         * 
         */
        public Builder virtualNetworkPeerings(VirtualNetworkPeeringArgs... virtualNetworkPeerings) {
            return virtualNetworkPeerings(List.of(virtualNetworkPeerings));
        }

        public VirtualNetworkArgs build() {
            $.enableDdosProtection = Codegen.booleanProp("enableDdosProtection").output().arg($.enableDdosProtection).def(false).getNullable();
            $.enableVmProtection = Codegen.booleanProp("enableVmProtection").output().arg($.enableVmProtection).def(false).getNullable();
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
