// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.hybridcompute.inputs;

import com.pulumi.azurenative.hybridcompute.inputs.MachineExtensionInstanceViewResponseStatus;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The machine extension instance view.
 * 
 */
public final class MachineExtensionPropertiesResponseInstanceView extends com.pulumi.resources.InvokeArgs {

    public static final MachineExtensionPropertiesResponseInstanceView Empty = new MachineExtensionPropertiesResponseInstanceView();

    /**
     * The machine extension name.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    public String name() {
        return this.name;
    }

    /**
     * Instance view status.
     * 
     */
    @Import(name="status")
    private @Nullable MachineExtensionInstanceViewResponseStatus status;

    public Optional<MachineExtensionInstanceViewResponseStatus> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Specifies the type of the extension; an example is &#34;CustomScriptExtension&#34;.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    public String type() {
        return this.type;
    }

    /**
     * Specifies the version of the script handler.
     * 
     */
    @Import(name="typeHandlerVersion", required=true)
    private String typeHandlerVersion;

    public String typeHandlerVersion() {
        return this.typeHandlerVersion;
    }

    private MachineExtensionPropertiesResponseInstanceView() {}

    private MachineExtensionPropertiesResponseInstanceView(MachineExtensionPropertiesResponseInstanceView $) {
        this.name = $.name;
        this.status = $.status;
        this.type = $.type;
        this.typeHandlerVersion = $.typeHandlerVersion;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MachineExtensionPropertiesResponseInstanceView defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MachineExtensionPropertiesResponseInstanceView $;

        public Builder() {
            $ = new MachineExtensionPropertiesResponseInstanceView();
        }

        public Builder(MachineExtensionPropertiesResponseInstanceView defaults) {
            $ = new MachineExtensionPropertiesResponseInstanceView(Objects.requireNonNull(defaults));
        }

        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public Builder status(@Nullable MachineExtensionInstanceViewResponseStatus status) {
            $.status = status;
            return this;
        }

        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public Builder typeHandlerVersion(String typeHandlerVersion) {
            $.typeHandlerVersion = typeHandlerVersion;
            return this;
        }

        public MachineExtensionPropertiesResponseInstanceView build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            $.typeHandlerVersion = Objects.requireNonNull($.typeHandlerVersion, "expected parameter 'typeHandlerVersion' to be non-null");
            return $;
        }
    }

}
