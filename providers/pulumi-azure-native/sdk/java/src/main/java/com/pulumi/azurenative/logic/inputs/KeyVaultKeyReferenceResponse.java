// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.logic.inputs;

import com.pulumi.azurenative.logic.inputs.KeyVaultKeyReferenceResponseKeyVault;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The reference to the key vault key.
 * 
 */
public final class KeyVaultKeyReferenceResponse extends com.pulumi.resources.InvokeArgs {

    public static final KeyVaultKeyReferenceResponse Empty = new KeyVaultKeyReferenceResponse();

    /**
     * The private key name in key vault.
     * 
     */
    @Import(name="keyName", required=true)
    private String keyName;

    /**
     * @return The private key name in key vault.
     * 
     */
    public String keyName() {
        return this.keyName;
    }

    /**
     * The key vault reference.
     * 
     */
    @Import(name="keyVault", required=true)
    private KeyVaultKeyReferenceResponseKeyVault keyVault;

    /**
     * @return The key vault reference.
     * 
     */
    public KeyVaultKeyReferenceResponseKeyVault keyVault() {
        return this.keyVault;
    }

    /**
     * The private key version in key vault.
     * 
     */
    @Import(name="keyVersion")
    private @Nullable String keyVersion;

    /**
     * @return The private key version in key vault.
     * 
     */
    public Optional<String> keyVersion() {
        return Optional.ofNullable(this.keyVersion);
    }

    private KeyVaultKeyReferenceResponse() {}

    private KeyVaultKeyReferenceResponse(KeyVaultKeyReferenceResponse $) {
        this.keyName = $.keyName;
        this.keyVault = $.keyVault;
        this.keyVersion = $.keyVersion;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KeyVaultKeyReferenceResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KeyVaultKeyReferenceResponse $;

        public Builder() {
            $ = new KeyVaultKeyReferenceResponse();
        }

        public Builder(KeyVaultKeyReferenceResponse defaults) {
            $ = new KeyVaultKeyReferenceResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param keyName The private key name in key vault.
         * 
         * @return builder
         * 
         */
        public Builder keyName(String keyName) {
            $.keyName = keyName;
            return this;
        }

        /**
         * @param keyVault The key vault reference.
         * 
         * @return builder
         * 
         */
        public Builder keyVault(KeyVaultKeyReferenceResponseKeyVault keyVault) {
            $.keyVault = keyVault;
            return this;
        }

        /**
         * @param keyVersion The private key version in key vault.
         * 
         * @return builder
         * 
         */
        public Builder keyVersion(@Nullable String keyVersion) {
            $.keyVersion = keyVersion;
            return this;
        }

        public KeyVaultKeyReferenceResponse build() {
            $.keyName = Objects.requireNonNull($.keyName, "expected parameter 'keyName' to be non-null");
            $.keyVault = Objects.requireNonNull($.keyVault, "expected parameter 'keyVault' to be non-null");
            return $;
        }
    }

}
