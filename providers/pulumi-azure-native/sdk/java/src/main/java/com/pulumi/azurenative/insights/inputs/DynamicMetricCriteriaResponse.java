// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.insights.inputs;

import com.pulumi.azurenative.insights.inputs.DynamicThresholdFailingPeriodsResponse;
import com.pulumi.azurenative.insights.inputs.MetricDimensionResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Criterion for dynamic threshold.
 * 
 */
public final class DynamicMetricCriteriaResponse extends com.pulumi.resources.InvokeArgs {

    public static final DynamicMetricCriteriaResponse Empty = new DynamicMetricCriteriaResponse();

    /**
     * The extent of deviation required to trigger an alert. This will affect how tight the threshold is to the metric series pattern.
     * 
     */
    @Import(name="alertSensitivity", required=true)
    private String alertSensitivity;

    /**
     * @return The extent of deviation required to trigger an alert. This will affect how tight the threshold is to the metric series pattern.
     * 
     */
    public String alertSensitivity() {
        return this.alertSensitivity;
    }

    /**
     * Specifies the type of threshold criteria
     * Expected value is &#39;DynamicThresholdCriterion&#39;.
     * 
     */
    @Import(name="criterionType", required=true)
    private String criterionType;

    /**
     * @return Specifies the type of threshold criteria
     * Expected value is &#39;DynamicThresholdCriterion&#39;.
     * 
     */
    public String criterionType() {
        return this.criterionType;
    }

    /**
     * List of dimension conditions.
     * 
     */
    @Import(name="dimensions")
    private @Nullable List<MetricDimensionResponse> dimensions;

    /**
     * @return List of dimension conditions.
     * 
     */
    public Optional<List<MetricDimensionResponse>> dimensions() {
        return Optional.ofNullable(this.dimensions);
    }

    /**
     * The minimum number of violations required within the selected lookback time window required to raise an alert.
     * 
     */
    @Import(name="failingPeriods", required=true)
    private DynamicThresholdFailingPeriodsResponse failingPeriods;

    /**
     * @return The minimum number of violations required within the selected lookback time window required to raise an alert.
     * 
     */
    public DynamicThresholdFailingPeriodsResponse failingPeriods() {
        return this.failingPeriods;
    }

    /**
     * Use this option to set the date from which to start learning the metric historical data and calculate the dynamic thresholds (in ISO8601 format)
     * 
     */
    @Import(name="ignoreDataBefore")
    private @Nullable String ignoreDataBefore;

    /**
     * @return Use this option to set the date from which to start learning the metric historical data and calculate the dynamic thresholds (in ISO8601 format)
     * 
     */
    public Optional<String> ignoreDataBefore() {
        return Optional.ofNullable(this.ignoreDataBefore);
    }

    /**
     * Name of the metric.
     * 
     */
    @Import(name="metricName", required=true)
    private String metricName;

    /**
     * @return Name of the metric.
     * 
     */
    public String metricName() {
        return this.metricName;
    }

    /**
     * Namespace of the metric.
     * 
     */
    @Import(name="metricNamespace")
    private @Nullable String metricNamespace;

    /**
     * @return Namespace of the metric.
     * 
     */
    public Optional<String> metricNamespace() {
        return Optional.ofNullable(this.metricNamespace);
    }

    /**
     * Name of the criteria.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return Name of the criteria.
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * The operator used to compare the metric value against the threshold.
     * 
     */
    @Import(name="operator", required=true)
    private String operator;

    /**
     * @return The operator used to compare the metric value against the threshold.
     * 
     */
    public String operator() {
        return this.operator;
    }

    /**
     * Allows creating an alert rule on a custom metric that isn&#39;t yet emitted, by causing the metric validation to be skipped.
     * 
     */
    @Import(name="skipMetricValidation")
    private @Nullable Boolean skipMetricValidation;

    /**
     * @return Allows creating an alert rule on a custom metric that isn&#39;t yet emitted, by causing the metric validation to be skipped.
     * 
     */
    public Optional<Boolean> skipMetricValidation() {
        return Optional.ofNullable(this.skipMetricValidation);
    }

    /**
     * the criteria time aggregation types.
     * 
     */
    @Import(name="timeAggregation", required=true)
    private String timeAggregation;

    /**
     * @return the criteria time aggregation types.
     * 
     */
    public String timeAggregation() {
        return this.timeAggregation;
    }

    private DynamicMetricCriteriaResponse() {}

    private DynamicMetricCriteriaResponse(DynamicMetricCriteriaResponse $) {
        this.alertSensitivity = $.alertSensitivity;
        this.criterionType = $.criterionType;
        this.dimensions = $.dimensions;
        this.failingPeriods = $.failingPeriods;
        this.ignoreDataBefore = $.ignoreDataBefore;
        this.metricName = $.metricName;
        this.metricNamespace = $.metricNamespace;
        this.name = $.name;
        this.operator = $.operator;
        this.skipMetricValidation = $.skipMetricValidation;
        this.timeAggregation = $.timeAggregation;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DynamicMetricCriteriaResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DynamicMetricCriteriaResponse $;

        public Builder() {
            $ = new DynamicMetricCriteriaResponse();
        }

        public Builder(DynamicMetricCriteriaResponse defaults) {
            $ = new DynamicMetricCriteriaResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param alertSensitivity The extent of deviation required to trigger an alert. This will affect how tight the threshold is to the metric series pattern.
         * 
         * @return builder
         * 
         */
        public Builder alertSensitivity(String alertSensitivity) {
            $.alertSensitivity = alertSensitivity;
            return this;
        }

        /**
         * @param criterionType Specifies the type of threshold criteria
         * Expected value is &#39;DynamicThresholdCriterion&#39;.
         * 
         * @return builder
         * 
         */
        public Builder criterionType(String criterionType) {
            $.criterionType = criterionType;
            return this;
        }

        /**
         * @param dimensions List of dimension conditions.
         * 
         * @return builder
         * 
         */
        public Builder dimensions(@Nullable List<MetricDimensionResponse> dimensions) {
            $.dimensions = dimensions;
            return this;
        }

        /**
         * @param dimensions List of dimension conditions.
         * 
         * @return builder
         * 
         */
        public Builder dimensions(MetricDimensionResponse... dimensions) {
            return dimensions(List.of(dimensions));
        }

        /**
         * @param failingPeriods The minimum number of violations required within the selected lookback time window required to raise an alert.
         * 
         * @return builder
         * 
         */
        public Builder failingPeriods(DynamicThresholdFailingPeriodsResponse failingPeriods) {
            $.failingPeriods = failingPeriods;
            return this;
        }

        /**
         * @param ignoreDataBefore Use this option to set the date from which to start learning the metric historical data and calculate the dynamic thresholds (in ISO8601 format)
         * 
         * @return builder
         * 
         */
        public Builder ignoreDataBefore(@Nullable String ignoreDataBefore) {
            $.ignoreDataBefore = ignoreDataBefore;
            return this;
        }

        /**
         * @param metricName Name of the metric.
         * 
         * @return builder
         * 
         */
        public Builder metricName(String metricName) {
            $.metricName = metricName;
            return this;
        }

        /**
         * @param metricNamespace Namespace of the metric.
         * 
         * @return builder
         * 
         */
        public Builder metricNamespace(@Nullable String metricNamespace) {
            $.metricNamespace = metricNamespace;
            return this;
        }

        /**
         * @param name Name of the criteria.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param operator The operator used to compare the metric value against the threshold.
         * 
         * @return builder
         * 
         */
        public Builder operator(String operator) {
            $.operator = operator;
            return this;
        }

        /**
         * @param skipMetricValidation Allows creating an alert rule on a custom metric that isn&#39;t yet emitted, by causing the metric validation to be skipped.
         * 
         * @return builder
         * 
         */
        public Builder skipMetricValidation(@Nullable Boolean skipMetricValidation) {
            $.skipMetricValidation = skipMetricValidation;
            return this;
        }

        /**
         * @param timeAggregation the criteria time aggregation types.
         * 
         * @return builder
         * 
         */
        public Builder timeAggregation(String timeAggregation) {
            $.timeAggregation = timeAggregation;
            return this;
        }

        public DynamicMetricCriteriaResponse build() {
            $.alertSensitivity = Objects.requireNonNull($.alertSensitivity, "expected parameter 'alertSensitivity' to be non-null");
            $.criterionType = Codegen.stringProp("criterionType").arg($.criterionType).require();
            $.failingPeriods = Objects.requireNonNull($.failingPeriods, "expected parameter 'failingPeriods' to be non-null");
            $.metricName = Objects.requireNonNull($.metricName, "expected parameter 'metricName' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.operator = Objects.requireNonNull($.operator, "expected parameter 'operator' to be non-null");
            $.timeAggregation = Objects.requireNonNull($.timeAggregation, "expected parameter 'timeAggregation' to be non-null");
            return $;
        }
    }

}
