// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.azurenative.datafactory.inputs.AzureKeyVaultSecretReferenceResponse;
import com.pulumi.azurenative.datafactory.inputs.CredentialReferenceResponse;
import com.pulumi.azurenative.datafactory.inputs.IntegrationRuntimeReferenceResponse;
import com.pulumi.azurenative.datafactory.inputs.ParameterSpecificationResponse;
import com.pulumi.azurenative.datafactory.inputs.SecureStringResponse;
import com.pulumi.core.Either;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Azure Data Lake Store linked service.
 * 
 */
public final class AzureDataLakeStoreLinkedServiceResponse extends com.pulumi.resources.InvokeArgs {

    public static final AzureDataLakeStoreLinkedServiceResponse Empty = new AzureDataLakeStoreLinkedServiceResponse();

    /**
     * Data Lake Store account name. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="accountName")
    private @Nullable Object accountName;

    /**
     * @return Data Lake Store account name. Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Object> accountName() {
        return Optional.ofNullable(this.accountName);
    }

    /**
     * List of tags that can be used for describing the linked service.
     * 
     */
    @Import(name="annotations")
    private @Nullable List<Object> annotations;

    /**
     * @return List of tags that can be used for describing the linked service.
     * 
     */
    public Optional<List<Object>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    /**
     * Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="azureCloudType")
    private @Nullable Object azureCloudType;

    /**
     * @return Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Object> azureCloudType() {
        return Optional.ofNullable(this.azureCloudType);
    }

    /**
     * The integration runtime reference.
     * 
     */
    @Import(name="connectVia")
    private @Nullable IntegrationRuntimeReferenceResponse connectVia;

    /**
     * @return The integration runtime reference.
     * 
     */
    public Optional<IntegrationRuntimeReferenceResponse> connectVia() {
        return Optional.ofNullable(this.connectVia);
    }

    /**
     * The credential reference containing authentication information.
     * 
     */
    @Import(name="credential")
    private @Nullable CredentialReferenceResponse credential;

    /**
     * @return The credential reference containing authentication information.
     * 
     */
    public Optional<CredentialReferenceResponse> credential() {
        return Optional.ofNullable(this.credential);
    }

    /**
     * Data Lake Store service URI. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="dataLakeStoreUri", required=true)
    private Object dataLakeStoreUri;

    /**
     * @return Data Lake Store service URI. Type: string (or Expression with resultType string).
     * 
     */
    public Object dataLakeStoreUri() {
        return this.dataLakeStoreUri;
    }

    /**
     * Linked service description.
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    /**
     * @return Linked service description.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="encryptedCredential")
    private @Nullable Object encryptedCredential;

    /**
     * @return The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Object> encryptedCredential() {
        return Optional.ofNullable(this.encryptedCredential);
    }

    /**
     * Parameters for linked service.
     * 
     */
    @Import(name="parameters")
    private @Nullable Map<String,ParameterSpecificationResponse> parameters;

    /**
     * @return Parameters for linked service.
     * 
     */
    public Optional<Map<String,ParameterSpecificationResponse>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    /**
     * Data Lake Store account resource group name (if different from Data Factory account). Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="resourceGroupName")
    private @Nullable Object resourceGroupName;

    /**
     * @return Data Lake Store account resource group name (if different from Data Factory account). Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Object> resourceGroupName() {
        return Optional.ofNullable(this.resourceGroupName);
    }

    /**
     * The ID of the application used to authenticate against the Azure Data Lake Store account. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="servicePrincipalId")
    private @Nullable Object servicePrincipalId;

    /**
     * @return The ID of the application used to authenticate against the Azure Data Lake Store account. Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Object> servicePrincipalId() {
        return Optional.ofNullable(this.servicePrincipalId);
    }

    /**
     * The Key of the application used to authenticate against the Azure Data Lake Store account.
     * 
     */
    @Import(name="servicePrincipalKey")
    private @Nullable Either<AzureKeyVaultSecretReferenceResponse,SecureStringResponse> servicePrincipalKey;

    /**
     * @return The Key of the application used to authenticate against the Azure Data Lake Store account.
     * 
     */
    public Optional<Either<AzureKeyVaultSecretReferenceResponse,SecureStringResponse>> servicePrincipalKey() {
        return Optional.ofNullable(this.servicePrincipalKey);
    }

    /**
     * Data Lake Store account subscription ID (if different from Data Factory account). Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="subscriptionId")
    private @Nullable Object subscriptionId;

    /**
     * @return Data Lake Store account subscription ID (if different from Data Factory account). Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Object> subscriptionId() {
        return Optional.ofNullable(this.subscriptionId);
    }

    /**
     * The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="tenant")
    private @Nullable Object tenant;

    /**
     * @return The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Object> tenant() {
        return Optional.ofNullable(this.tenant);
    }

    /**
     * Type of linked service.
     * Expected value is &#39;AzureDataLakeStore&#39;.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    /**
     * @return Type of linked service.
     * Expected value is &#39;AzureDataLakeStore&#39;.
     * 
     */
    public String type() {
        return this.type;
    }

    private AzureDataLakeStoreLinkedServiceResponse() {}

    private AzureDataLakeStoreLinkedServiceResponse(AzureDataLakeStoreLinkedServiceResponse $) {
        this.accountName = $.accountName;
        this.annotations = $.annotations;
        this.azureCloudType = $.azureCloudType;
        this.connectVia = $.connectVia;
        this.credential = $.credential;
        this.dataLakeStoreUri = $.dataLakeStoreUri;
        this.description = $.description;
        this.encryptedCredential = $.encryptedCredential;
        this.parameters = $.parameters;
        this.resourceGroupName = $.resourceGroupName;
        this.servicePrincipalId = $.servicePrincipalId;
        this.servicePrincipalKey = $.servicePrincipalKey;
        this.subscriptionId = $.subscriptionId;
        this.tenant = $.tenant;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AzureDataLakeStoreLinkedServiceResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AzureDataLakeStoreLinkedServiceResponse $;

        public Builder() {
            $ = new AzureDataLakeStoreLinkedServiceResponse();
        }

        public Builder(AzureDataLakeStoreLinkedServiceResponse defaults) {
            $ = new AzureDataLakeStoreLinkedServiceResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountName Data Lake Store account name. Type: string (or Expression with resultType string).
         * 
         * @return builder
         * 
         */
        public Builder accountName(@Nullable Object accountName) {
            $.accountName = accountName;
            return this;
        }

        /**
         * @param annotations List of tags that can be used for describing the linked service.
         * 
         * @return builder
         * 
         */
        public Builder annotations(@Nullable List<Object> annotations) {
            $.annotations = annotations;
            return this;
        }

        /**
         * @param annotations List of tags that can be used for describing the linked service.
         * 
         * @return builder
         * 
         */
        public Builder annotations(Object... annotations) {
            return annotations(List.of(annotations));
        }

        /**
         * @param azureCloudType Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regions’ cloud type. Type: string (or Expression with resultType string).
         * 
         * @return builder
         * 
         */
        public Builder azureCloudType(@Nullable Object azureCloudType) {
            $.azureCloudType = azureCloudType;
            return this;
        }

        /**
         * @param connectVia The integration runtime reference.
         * 
         * @return builder
         * 
         */
        public Builder connectVia(@Nullable IntegrationRuntimeReferenceResponse connectVia) {
            $.connectVia = connectVia;
            return this;
        }

        /**
         * @param credential The credential reference containing authentication information.
         * 
         * @return builder
         * 
         */
        public Builder credential(@Nullable CredentialReferenceResponse credential) {
            $.credential = credential;
            return this;
        }

        /**
         * @param dataLakeStoreUri Data Lake Store service URI. Type: string (or Expression with resultType string).
         * 
         * @return builder
         * 
         */
        public Builder dataLakeStoreUri(Object dataLakeStoreUri) {
            $.dataLakeStoreUri = dataLakeStoreUri;
            return this;
        }

        /**
         * @param description Linked service description.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        /**
         * @param encryptedCredential The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
         * 
         * @return builder
         * 
         */
        public Builder encryptedCredential(@Nullable Object encryptedCredential) {
            $.encryptedCredential = encryptedCredential;
            return this;
        }

        /**
         * @param parameters Parameters for linked service.
         * 
         * @return builder
         * 
         */
        public Builder parameters(@Nullable Map<String,ParameterSpecificationResponse> parameters) {
            $.parameters = parameters;
            return this;
        }

        /**
         * @param resourceGroupName Data Lake Store account resource group name (if different from Data Factory account). Type: string (or Expression with resultType string).
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(@Nullable Object resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param servicePrincipalId The ID of the application used to authenticate against the Azure Data Lake Store account. Type: string (or Expression with resultType string).
         * 
         * @return builder
         * 
         */
        public Builder servicePrincipalId(@Nullable Object servicePrincipalId) {
            $.servicePrincipalId = servicePrincipalId;
            return this;
        }

        /**
         * @param servicePrincipalKey The Key of the application used to authenticate against the Azure Data Lake Store account.
         * 
         * @return builder
         * 
         */
        public Builder servicePrincipalKey(@Nullable Either<AzureKeyVaultSecretReferenceResponse,SecureStringResponse> servicePrincipalKey) {
            $.servicePrincipalKey = servicePrincipalKey;
            return this;
        }

        /**
         * @param servicePrincipalKey The Key of the application used to authenticate against the Azure Data Lake Store account.
         * 
         * @return builder
         * 
         */
        public Builder servicePrincipalKey(AzureKeyVaultSecretReferenceResponse servicePrincipalKey) {
            return servicePrincipalKey(Either.ofLeft(servicePrincipalKey));
        }

        /**
         * @param servicePrincipalKey The Key of the application used to authenticate against the Azure Data Lake Store account.
         * 
         * @return builder
         * 
         */
        public Builder servicePrincipalKey(SecureStringResponse servicePrincipalKey) {
            return servicePrincipalKey(Either.ofRight(servicePrincipalKey));
        }

        /**
         * @param subscriptionId Data Lake Store account subscription ID (if different from Data Factory account). Type: string (or Expression with resultType string).
         * 
         * @return builder
         * 
         */
        public Builder subscriptionId(@Nullable Object subscriptionId) {
            $.subscriptionId = subscriptionId;
            return this;
        }

        /**
         * @param tenant The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
         * 
         * @return builder
         * 
         */
        public Builder tenant(@Nullable Object tenant) {
            $.tenant = tenant;
            return this;
        }

        /**
         * @param type Type of linked service.
         * Expected value is &#39;AzureDataLakeStore&#39;.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public AzureDataLakeStoreLinkedServiceResponse build() {
            $.dataLakeStoreUri = Objects.requireNonNull($.dataLakeStoreUri, "expected parameter 'dataLakeStoreUri' to be non-null");
            $.type = Codegen.stringProp("type").arg($.type).require();
            return $;
        }
    }

}
