// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.videoanalyzer.inputs;

import com.pulumi.azurenative.videoanalyzer.enums.VideoScaleMode;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The video scaling information.
 * 
 */
public final class VideoScaleArgs extends com.pulumi.resources.ResourceArgs {

    public static final VideoScaleArgs Empty = new VideoScaleArgs();

    /**
     * The desired output video height.
     * 
     */
    @Import(name="height")
      private final @Nullable Output<String> height;

    public Output<String> height() {
        return this.height == null ? Codegen.empty() : this.height;
    }

    /**
     * Describes the video scaling mode to be applied. Default mode is &#39;Pad&#39;. If the mode is &#39;Pad&#39; or &#39;Stretch&#39; then both width and height must be specified. Else if the mode is &#39;PreserveAspectRatio&#39; then only one of width or height need be provided.
     * 
     */
    @Import(name="mode")
      private final @Nullable Output<Either<String,VideoScaleMode>> mode;

    public Output<Either<String,VideoScaleMode>> mode() {
        return this.mode == null ? Codegen.empty() : this.mode;
    }

    /**
     * The desired output video width.
     * 
     */
    @Import(name="width")
      private final @Nullable Output<String> width;

    public Output<String> width() {
        return this.width == null ? Codegen.empty() : this.width;
    }

    public VideoScaleArgs(
        @Nullable Output<String> height,
        @Nullable Output<Either<String,VideoScaleMode>> mode,
        @Nullable Output<String> width) {
        this.height = height;
        this.mode = mode;
        this.width = width;
    }

    private VideoScaleArgs() {
        this.height = Codegen.empty();
        this.mode = Codegen.empty();
        this.width = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VideoScaleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> height;
        private @Nullable Output<Either<String,VideoScaleMode>> mode;
        private @Nullable Output<String> width;

        public Builder() {
    	      // Empty
        }

        public Builder(VideoScaleArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.height = defaults.height;
    	      this.mode = defaults.mode;
    	      this.width = defaults.width;
        }

        public Builder height(@Nullable Output<String> height) {
            this.height = height;
            return this;
        }
        public Builder height(@Nullable String height) {
            this.height = Codegen.ofNullable(height);
            return this;
        }
        public Builder mode(@Nullable Output<Either<String,VideoScaleMode>> mode) {
            this.mode = mode;
            return this;
        }
        public Builder mode(@Nullable Either<String,VideoScaleMode> mode) {
            this.mode = Codegen.ofNullable(mode);
            return this;
        }
        public Builder width(@Nullable Output<String> width) {
            this.width = width;
            return this;
        }
        public Builder width(@Nullable String width) {
            this.width = Codegen.ofNullable(width);
            return this;
        }        public VideoScaleArgs build() {
            return new VideoScaleArgs(height, mode, width);
        }
    }
}
