// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.portal;

import com.pulumi.azurenative.portal.inputs.ConsoleCreatePropertiesArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConsoleArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConsoleArgs Empty = new ConsoleArgs();

    /**
     * The name of the console
     * 
     */
    @Import(name="consoleName")
    private @Nullable Output<String> consoleName;

    /**
     * @return The name of the console
     * 
     */
    public Optional<Output<String>> consoleName() {
        return Optional.ofNullable(this.consoleName);
    }

    /**
     * Cloud shell properties for creating a console.
     * 
     */
    @Import(name="properties", required=true)
    private Output<ConsoleCreatePropertiesArgs> properties;

    /**
     * @return Cloud shell properties for creating a console.
     * 
     */
    public Output<ConsoleCreatePropertiesArgs> properties() {
        return this.properties;
    }

    private ConsoleArgs() {}

    private ConsoleArgs(ConsoleArgs $) {
        this.consoleName = $.consoleName;
        this.properties = $.properties;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConsoleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConsoleArgs $;

        public Builder() {
            $ = new ConsoleArgs();
        }

        public Builder(ConsoleArgs defaults) {
            $ = new ConsoleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param consoleName The name of the console
         * 
         * @return builder
         * 
         */
        public Builder consoleName(@Nullable Output<String> consoleName) {
            $.consoleName = consoleName;
            return this;
        }

        /**
         * @param consoleName The name of the console
         * 
         * @return builder
         * 
         */
        public Builder consoleName(String consoleName) {
            return consoleName(Output.of(consoleName));
        }

        /**
         * @param properties Cloud shell properties for creating a console.
         * 
         * @return builder
         * 
         */
        public Builder properties(Output<ConsoleCreatePropertiesArgs> properties) {
            $.properties = properties;
            return this;
        }

        /**
         * @param properties Cloud shell properties for creating a console.
         * 
         * @return builder
         * 
         */
        public Builder properties(ConsoleCreatePropertiesArgs properties) {
            return properties(Output.of(properties));
        }

        public ConsoleArgs build() {
            $.properties = Objects.requireNonNull($.properties, "expected parameter 'properties' to be non-null");
            return $;
        }
    }

}
