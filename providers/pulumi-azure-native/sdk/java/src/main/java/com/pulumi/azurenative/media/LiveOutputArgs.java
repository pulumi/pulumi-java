// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.media;

import com.pulumi.azurenative.media.inputs.HlsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LiveOutputArgs extends com.pulumi.resources.ResourceArgs {

    public static final LiveOutputArgs Empty = new LiveOutputArgs();

    /**
     * The Media Services account name.
     * 
     */
    @Import(name="accountName", required=true)
    private Output<String> accountName;

    public Output<String> accountName() {
        return this.accountName;
    }

    /**
     * ISO 8601 time between 1 minute to 25 hours to indicate the maximum content length that can be archived in the asset for this live output. This also sets the maximum content length for the rewind window. For example, use PT1H30M to indicate 1 hour and 30 minutes of archive window.
     * 
     */
    @Import(name="archiveWindowLength", required=true)
    private Output<String> archiveWindowLength;

    public Output<String> archiveWindowLength() {
        return this.archiveWindowLength;
    }

    /**
     * The asset that the live output will write to.
     * 
     */
    @Import(name="assetName", required=true)
    private Output<String> assetName;

    public Output<String> assetName() {
        return this.assetName;
    }

    /**
     * The description of the live output.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * HTTP Live Streaming (HLS) packing setting for the live output.
     * 
     */
    @Import(name="hls")
    private @Nullable Output<HlsArgs> hls;

    public Optional<Output<HlsArgs>> hls() {
        return Optional.ofNullable(this.hls);
    }

    /**
     * The name of the live event, maximum length is 32.
     * 
     */
    @Import(name="liveEventName", required=true)
    private Output<String> liveEventName;

    public Output<String> liveEventName() {
        return this.liveEventName;
    }

    /**
     * The name of the live output.
     * 
     */
    @Import(name="liveOutputName")
    private @Nullable Output<String> liveOutputName;

    public Optional<Output<String>> liveOutputName() {
        return Optional.ofNullable(this.liveOutputName);
    }

    /**
     * The manifest file name. If not provided, the service will generate one automatically.
     * 
     */
    @Import(name="manifestName")
    private @Nullable Output<String> manifestName;

    public Optional<Output<String>> manifestName() {
        return Optional.ofNullable(this.manifestName);
    }

    /**
     * The initial timestamp that the live output will start at, any content before this value will not be archived.
     * 
     */
    @Import(name="outputSnapTime")
    private @Nullable Output<Double> outputSnapTime;

    public Optional<Output<Double>> outputSnapTime() {
        return Optional.ofNullable(this.outputSnapTime);
    }

    /**
     * The name of the resource group within the Azure subscription.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    private LiveOutputArgs() {}

    private LiveOutputArgs(LiveOutputArgs $) {
        this.accountName = $.accountName;
        this.archiveWindowLength = $.archiveWindowLength;
        this.assetName = $.assetName;
        this.description = $.description;
        this.hls = $.hls;
        this.liveEventName = $.liveEventName;
        this.liveOutputName = $.liveOutputName;
        this.manifestName = $.manifestName;
        this.outputSnapTime = $.outputSnapTime;
        this.resourceGroupName = $.resourceGroupName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LiveOutputArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LiveOutputArgs $;

        public Builder() {
            $ = new LiveOutputArgs();
        }

        public Builder(LiveOutputArgs defaults) {
            $ = new LiveOutputArgs(Objects.requireNonNull(defaults));
        }

        public Builder accountName(Output<String> accountName) {
            $.accountName = accountName;
            return this;
        }

        public Builder accountName(String accountName) {
            return accountName(Output.of(accountName));
        }

        public Builder archiveWindowLength(Output<String> archiveWindowLength) {
            $.archiveWindowLength = archiveWindowLength;
            return this;
        }

        public Builder archiveWindowLength(String archiveWindowLength) {
            return archiveWindowLength(Output.of(archiveWindowLength));
        }

        public Builder assetName(Output<String> assetName) {
            $.assetName = assetName;
            return this;
        }

        public Builder assetName(String assetName) {
            return assetName(Output.of(assetName));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder hls(@Nullable Output<HlsArgs> hls) {
            $.hls = hls;
            return this;
        }

        public Builder hls(HlsArgs hls) {
            return hls(Output.of(hls));
        }

        public Builder liveEventName(Output<String> liveEventName) {
            $.liveEventName = liveEventName;
            return this;
        }

        public Builder liveEventName(String liveEventName) {
            return liveEventName(Output.of(liveEventName));
        }

        public Builder liveOutputName(@Nullable Output<String> liveOutputName) {
            $.liveOutputName = liveOutputName;
            return this;
        }

        public Builder liveOutputName(String liveOutputName) {
            return liveOutputName(Output.of(liveOutputName));
        }

        public Builder manifestName(@Nullable Output<String> manifestName) {
            $.manifestName = manifestName;
            return this;
        }

        public Builder manifestName(String manifestName) {
            return manifestName(Output.of(manifestName));
        }

        public Builder outputSnapTime(@Nullable Output<Double> outputSnapTime) {
            $.outputSnapTime = outputSnapTime;
            return this;
        }

        public Builder outputSnapTime(Double outputSnapTime) {
            return outputSnapTime(Output.of(outputSnapTime));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public LiveOutputArgs build() {
            $.accountName = Objects.requireNonNull($.accountName, "expected parameter 'accountName' to be non-null");
            $.archiveWindowLength = Objects.requireNonNull($.archiveWindowLength, "expected parameter 'archiveWindowLength' to be non-null");
            $.assetName = Objects.requireNonNull($.assetName, "expected parameter 'assetName' to be non-null");
            $.liveEventName = Objects.requireNonNull($.liveEventName, "expected parameter 'liveEventName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
