// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.testbase.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The command used in the test
 * 
 */
public final class CommandResponse extends com.pulumi.resources.InvokeArgs {

    public static final CommandResponse Empty = new CommandResponse();

    /**
     * The action of the command.
     * 
     */
    @Import(name="action", required=true)
    private String action;

    public String action() {
        return this.action;
    }

    /**
     * Specifies whether to run the command even if a previous command is failed.
     * 
     */
    @Import(name="alwaysRun")
    private @Nullable Boolean alwaysRun;

    public Optional<Boolean> alwaysRun() {
        return Optional.ofNullable(this.alwaysRun);
    }

    /**
     * Specifies whether to apply update before the command.
     * 
     */
    @Import(name="applyUpdateBefore")
    private @Nullable Boolean applyUpdateBefore;

    public Optional<Boolean> applyUpdateBefore() {
        return Optional.ofNullable(this.applyUpdateBefore);
    }

    /**
     * The content of the command. The content depends on source type.
     * 
     */
    @Import(name="content", required=true)
    private String content;

    public String content() {
        return this.content;
    }

    /**
     * The type of command content.
     * 
     */
    @Import(name="contentType", required=true)
    private String contentType;

    public String contentType() {
        return this.contentType;
    }

    /**
     * Specifies the max run time of the command.
     * 
     */
    @Import(name="maxRunTime")
    private @Nullable Integer maxRunTime;

    public Optional<Integer> maxRunTime() {
        return Optional.ofNullable(this.maxRunTime);
    }

    /**
     * The name of the command.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    public String name() {
        return this.name;
    }

    /**
     * Specifies whether to restart the VM after the command executed.
     * 
     */
    @Import(name="restartAfter")
    private @Nullable Boolean restartAfter;

    public Optional<Boolean> restartAfter() {
        return Optional.ofNullable(this.restartAfter);
    }

    /**
     * Specifies whether to run the command in interactive mode.
     * 
     */
    @Import(name="runAsInteractive")
    private @Nullable Boolean runAsInteractive;

    public Optional<Boolean> runAsInteractive() {
        return Optional.ofNullable(this.runAsInteractive);
    }

    /**
     * Specifies whether to run the command as administrator.
     * 
     */
    @Import(name="runElevated")
    private @Nullable Boolean runElevated;

    public Optional<Boolean> runElevated() {
        return Optional.ofNullable(this.runElevated);
    }

    private CommandResponse() {}

    private CommandResponse(CommandResponse $) {
        this.action = $.action;
        this.alwaysRun = $.alwaysRun;
        this.applyUpdateBefore = $.applyUpdateBefore;
        this.content = $.content;
        this.contentType = $.contentType;
        this.maxRunTime = $.maxRunTime;
        this.name = $.name;
        this.restartAfter = $.restartAfter;
        this.runAsInteractive = $.runAsInteractive;
        this.runElevated = $.runElevated;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CommandResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CommandResponse $;

        public Builder() {
            $ = new CommandResponse();
        }

        public Builder(CommandResponse defaults) {
            $ = new CommandResponse(Objects.requireNonNull(defaults));
        }

        public Builder action(String action) {
            $.action = action;
            return this;
        }

        public Builder alwaysRun(@Nullable Boolean alwaysRun) {
            $.alwaysRun = alwaysRun;
            return this;
        }

        public Builder applyUpdateBefore(@Nullable Boolean applyUpdateBefore) {
            $.applyUpdateBefore = applyUpdateBefore;
            return this;
        }

        public Builder content(String content) {
            $.content = content;
            return this;
        }

        public Builder contentType(String contentType) {
            $.contentType = contentType;
            return this;
        }

        public Builder maxRunTime(@Nullable Integer maxRunTime) {
            $.maxRunTime = maxRunTime;
            return this;
        }

        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public Builder restartAfter(@Nullable Boolean restartAfter) {
            $.restartAfter = restartAfter;
            return this;
        }

        public Builder runAsInteractive(@Nullable Boolean runAsInteractive) {
            $.runAsInteractive = runAsInteractive;
            return this;
        }

        public Builder runElevated(@Nullable Boolean runElevated) {
            $.runElevated = runElevated;
            return this;
        }

        public CommandResponse build() {
            $.action = Objects.requireNonNull($.action, "expected parameter 'action' to be non-null");
            $.content = Objects.requireNonNull($.content, "expected parameter 'content' to be non-null");
            $.contentType = Objects.requireNonNull($.contentType, "expected parameter 'contentType' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            return $;
        }
    }

}
