// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.maintenance;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConfigurationAssignmentParentArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConfigurationAssignmentParentArgs Empty = new ConfigurationAssignmentParentArgs();

    /**
     * Configuration assignment name
     * 
     */
    @Import(name="configurationAssignmentName")
    private @Nullable Output<String> configurationAssignmentName;

    /**
     * @return Configuration assignment name
     * 
     */
    public Optional<Output<String>> configurationAssignmentName() {
        return Optional.ofNullable(this.configurationAssignmentName);
    }

    /**
     * Location of the resource
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Location of the resource
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The maintenance configuration Id
     * 
     */
    @Import(name="maintenanceConfigurationId")
    private @Nullable Output<String> maintenanceConfigurationId;

    /**
     * @return The maintenance configuration Id
     * 
     */
    public Optional<Output<String>> maintenanceConfigurationId() {
        return Optional.ofNullable(this.maintenanceConfigurationId);
    }

    /**
     * Resource provider name
     * 
     */
    @Import(name="providerName", required=true)
    private Output<String> providerName;

    /**
     * @return Resource provider name
     * 
     */
    public Output<String> providerName() {
        return this.providerName;
    }

    /**
     * Resource group name
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return Resource group name
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The unique resourceId
     * 
     */
    @Import(name="resourceId")
    private @Nullable Output<String> resourceId;

    /**
     * @return The unique resourceId
     * 
     */
    public Optional<Output<String>> resourceId() {
        return Optional.ofNullable(this.resourceId);
    }

    /**
     * Resource identifier
     * 
     */
    @Import(name="resourceName", required=true)
    private Output<String> resourceName;

    /**
     * @return Resource identifier
     * 
     */
    public Output<String> resourceName() {
        return this.resourceName;
    }

    /**
     * Resource parent identifier
     * 
     */
    @Import(name="resourceParentName", required=true)
    private Output<String> resourceParentName;

    /**
     * @return Resource parent identifier
     * 
     */
    public Output<String> resourceParentName() {
        return this.resourceParentName;
    }

    /**
     * Resource parent type
     * 
     */
    @Import(name="resourceParentType", required=true)
    private Output<String> resourceParentType;

    /**
     * @return Resource parent type
     * 
     */
    public Output<String> resourceParentType() {
        return this.resourceParentType;
    }

    /**
     * Resource type
     * 
     */
    @Import(name="resourceType", required=true)
    private Output<String> resourceType;

    /**
     * @return Resource type
     * 
     */
    public Output<String> resourceType() {
        return this.resourceType;
    }

    private ConfigurationAssignmentParentArgs() {}

    private ConfigurationAssignmentParentArgs(ConfigurationAssignmentParentArgs $) {
        this.configurationAssignmentName = $.configurationAssignmentName;
        this.location = $.location;
        this.maintenanceConfigurationId = $.maintenanceConfigurationId;
        this.providerName = $.providerName;
        this.resourceGroupName = $.resourceGroupName;
        this.resourceId = $.resourceId;
        this.resourceName = $.resourceName;
        this.resourceParentName = $.resourceParentName;
        this.resourceParentType = $.resourceParentType;
        this.resourceType = $.resourceType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConfigurationAssignmentParentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConfigurationAssignmentParentArgs $;

        public Builder() {
            $ = new ConfigurationAssignmentParentArgs();
        }

        public Builder(ConfigurationAssignmentParentArgs defaults) {
            $ = new ConfigurationAssignmentParentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param configurationAssignmentName Configuration assignment name
         * 
         * @return builder
         * 
         */
        public Builder configurationAssignmentName(@Nullable Output<String> configurationAssignmentName) {
            $.configurationAssignmentName = configurationAssignmentName;
            return this;
        }

        /**
         * @param configurationAssignmentName Configuration assignment name
         * 
         * @return builder
         * 
         */
        public Builder configurationAssignmentName(String configurationAssignmentName) {
            return configurationAssignmentName(Output.of(configurationAssignmentName));
        }

        /**
         * @param location Location of the resource
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Location of the resource
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param maintenanceConfigurationId The maintenance configuration Id
         * 
         * @return builder
         * 
         */
        public Builder maintenanceConfigurationId(@Nullable Output<String> maintenanceConfigurationId) {
            $.maintenanceConfigurationId = maintenanceConfigurationId;
            return this;
        }

        /**
         * @param maintenanceConfigurationId The maintenance configuration Id
         * 
         * @return builder
         * 
         */
        public Builder maintenanceConfigurationId(String maintenanceConfigurationId) {
            return maintenanceConfigurationId(Output.of(maintenanceConfigurationId));
        }

        /**
         * @param providerName Resource provider name
         * 
         * @return builder
         * 
         */
        public Builder providerName(Output<String> providerName) {
            $.providerName = providerName;
            return this;
        }

        /**
         * @param providerName Resource provider name
         * 
         * @return builder
         * 
         */
        public Builder providerName(String providerName) {
            return providerName(Output.of(providerName));
        }

        /**
         * @param resourceGroupName Resource group name
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName Resource group name
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param resourceId The unique resourceId
         * 
         * @return builder
         * 
         */
        public Builder resourceId(@Nullable Output<String> resourceId) {
            $.resourceId = resourceId;
            return this;
        }

        /**
         * @param resourceId The unique resourceId
         * 
         * @return builder
         * 
         */
        public Builder resourceId(String resourceId) {
            return resourceId(Output.of(resourceId));
        }

        /**
         * @param resourceName Resource identifier
         * 
         * @return builder
         * 
         */
        public Builder resourceName(Output<String> resourceName) {
            $.resourceName = resourceName;
            return this;
        }

        /**
         * @param resourceName Resource identifier
         * 
         * @return builder
         * 
         */
        public Builder resourceName(String resourceName) {
            return resourceName(Output.of(resourceName));
        }

        /**
         * @param resourceParentName Resource parent identifier
         * 
         * @return builder
         * 
         */
        public Builder resourceParentName(Output<String> resourceParentName) {
            $.resourceParentName = resourceParentName;
            return this;
        }

        /**
         * @param resourceParentName Resource parent identifier
         * 
         * @return builder
         * 
         */
        public Builder resourceParentName(String resourceParentName) {
            return resourceParentName(Output.of(resourceParentName));
        }

        /**
         * @param resourceParentType Resource parent type
         * 
         * @return builder
         * 
         */
        public Builder resourceParentType(Output<String> resourceParentType) {
            $.resourceParentType = resourceParentType;
            return this;
        }

        /**
         * @param resourceParentType Resource parent type
         * 
         * @return builder
         * 
         */
        public Builder resourceParentType(String resourceParentType) {
            return resourceParentType(Output.of(resourceParentType));
        }

        /**
         * @param resourceType Resource type
         * 
         * @return builder
         * 
         */
        public Builder resourceType(Output<String> resourceType) {
            $.resourceType = resourceType;
            return this;
        }

        /**
         * @param resourceType Resource type
         * 
         * @return builder
         * 
         */
        public Builder resourceType(String resourceType) {
            return resourceType(Output.of(resourceType));
        }

        public ConfigurationAssignmentParentArgs build() {
            $.providerName = Objects.requireNonNull($.providerName, "expected parameter 'providerName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.resourceName = Objects.requireNonNull($.resourceName, "expected parameter 'resourceName' to be non-null");
            $.resourceParentName = Objects.requireNonNull($.resourceParentName, "expected parameter 'resourceParentName' to be non-null");
            $.resourceParentType = Objects.requireNonNull($.resourceParentType, "expected parameter 'resourceParentType' to be non-null");
            $.resourceType = Objects.requireNonNull($.resourceType, "expected parameter 'resourceType' to be non-null");
            return $;
        }
    }

}
