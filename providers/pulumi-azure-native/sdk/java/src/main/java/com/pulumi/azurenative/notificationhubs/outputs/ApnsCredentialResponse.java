// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.notificationhubs.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ApnsCredentialResponse {
    /**
     * @return The APNS certificate. Specify if using Certificate Authentication Mode.
     * 
     */
    private final @Nullable String apnsCertificate;
    /**
     * @return The issuer (iss) registered claim key. The value is a 10-character TeamId, obtained from your developer account. Specify if using Token Authentication Mode.
     * 
     */
    private final @Nullable String appId;
    /**
     * @return The name of the application or BundleId. Specify if using Token Authentication Mode.
     * 
     */
    private final @Nullable String appName;
    /**
     * @return The APNS certificate password if it exists.
     * 
     */
    private final @Nullable String certificateKey;
    /**
     * @return The APNS endpoint of this credential. If using Certificate Authentication Mode and Sandbox specify &#39;gateway.sandbox.push.apple.com&#39;. If using Certificate Authentication Mode and Production specify &#39;gateway.push.apple.com&#39;. If using Token Authentication Mode and Sandbox specify &#39;https://api.development.push.apple.com:443/3/device&#39;. If using Token Authentication Mode and Production specify &#39;https://api.push.apple.com:443/3/device&#39;.
     * 
     */
    private final @Nullable String endpoint;
    /**
     * @return A 10-character key identifier (kid) key, obtained from your developer account. Specify if using Token Authentication Mode.
     * 
     */
    private final @Nullable String keyId;
    /**
     * @return The APNS certificate thumbprint. Specify if using Certificate Authentication Mode.
     * 
     */
    private final @Nullable String thumbprint;
    /**
     * @return Provider Authentication Token, obtained through your developer account. Specify if using Token Authentication Mode.
     * 
     */
    private final @Nullable String token;

    @CustomType.Constructor
    private ApnsCredentialResponse(
        @CustomType.Parameter("apnsCertificate") @Nullable String apnsCertificate,
        @CustomType.Parameter("appId") @Nullable String appId,
        @CustomType.Parameter("appName") @Nullable String appName,
        @CustomType.Parameter("certificateKey") @Nullable String certificateKey,
        @CustomType.Parameter("endpoint") @Nullable String endpoint,
        @CustomType.Parameter("keyId") @Nullable String keyId,
        @CustomType.Parameter("thumbprint") @Nullable String thumbprint,
        @CustomType.Parameter("token") @Nullable String token) {
        this.apnsCertificate = apnsCertificate;
        this.appId = appId;
        this.appName = appName;
        this.certificateKey = certificateKey;
        this.endpoint = endpoint;
        this.keyId = keyId;
        this.thumbprint = thumbprint;
        this.token = token;
    }

    /**
     * @return The APNS certificate. Specify if using Certificate Authentication Mode.
     * 
     */
    public Optional<String> apnsCertificate() {
        return Optional.ofNullable(this.apnsCertificate);
    }
    /**
     * @return The issuer (iss) registered claim key. The value is a 10-character TeamId, obtained from your developer account. Specify if using Token Authentication Mode.
     * 
     */
    public Optional<String> appId() {
        return Optional.ofNullable(this.appId);
    }
    /**
     * @return The name of the application or BundleId. Specify if using Token Authentication Mode.
     * 
     */
    public Optional<String> appName() {
        return Optional.ofNullable(this.appName);
    }
    /**
     * @return The APNS certificate password if it exists.
     * 
     */
    public Optional<String> certificateKey() {
        return Optional.ofNullable(this.certificateKey);
    }
    /**
     * @return The APNS endpoint of this credential. If using Certificate Authentication Mode and Sandbox specify &#39;gateway.sandbox.push.apple.com&#39;. If using Certificate Authentication Mode and Production specify &#39;gateway.push.apple.com&#39;. If using Token Authentication Mode and Sandbox specify &#39;https://api.development.push.apple.com:443/3/device&#39;. If using Token Authentication Mode and Production specify &#39;https://api.push.apple.com:443/3/device&#39;.
     * 
     */
    public Optional<String> endpoint() {
        return Optional.ofNullable(this.endpoint);
    }
    /**
     * @return A 10-character key identifier (kid) key, obtained from your developer account. Specify if using Token Authentication Mode.
     * 
     */
    public Optional<String> keyId() {
        return Optional.ofNullable(this.keyId);
    }
    /**
     * @return The APNS certificate thumbprint. Specify if using Certificate Authentication Mode.
     * 
     */
    public Optional<String> thumbprint() {
        return Optional.ofNullable(this.thumbprint);
    }
    /**
     * @return Provider Authentication Token, obtained through your developer account. Specify if using Token Authentication Mode.
     * 
     */
    public Optional<String> token() {
        return Optional.ofNullable(this.token);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ApnsCredentialResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String apnsCertificate;
        private @Nullable String appId;
        private @Nullable String appName;
        private @Nullable String certificateKey;
        private @Nullable String endpoint;
        private @Nullable String keyId;
        private @Nullable String thumbprint;
        private @Nullable String token;

        public Builder() {
    	      // Empty
        }

        public Builder(ApnsCredentialResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.apnsCertificate = defaults.apnsCertificate;
    	      this.appId = defaults.appId;
    	      this.appName = defaults.appName;
    	      this.certificateKey = defaults.certificateKey;
    	      this.endpoint = defaults.endpoint;
    	      this.keyId = defaults.keyId;
    	      this.thumbprint = defaults.thumbprint;
    	      this.token = defaults.token;
        }

        public Builder apnsCertificate(@Nullable String apnsCertificate) {
            this.apnsCertificate = apnsCertificate;
            return this;
        }
        public Builder appId(@Nullable String appId) {
            this.appId = appId;
            return this;
        }
        public Builder appName(@Nullable String appName) {
            this.appName = appName;
            return this;
        }
        public Builder certificateKey(@Nullable String certificateKey) {
            this.certificateKey = certificateKey;
            return this;
        }
        public Builder endpoint(@Nullable String endpoint) {
            this.endpoint = endpoint;
            return this;
        }
        public Builder keyId(@Nullable String keyId) {
            this.keyId = keyId;
            return this;
        }
        public Builder thumbprint(@Nullable String thumbprint) {
            this.thumbprint = thumbprint;
            return this;
        }
        public Builder token(@Nullable String token) {
            this.token = token;
            return this;
        }        public ApnsCredentialResponse build() {
            return new ApnsCredentialResponse(apnsCertificate, appId, appName, certificateKey, endpoint, keyId, thumbprint, token);
        }
    }
}
