// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.outputs;

import com.pulumi.azurenative.network.outputs.BgpSettingsResponse;
import com.pulumi.azurenative.network.outputs.SubResourceResponse;
import com.pulumi.azurenative.network.outputs.VpnConnectionResponse;
import com.pulumi.azurenative.network.outputs.VpnGatewayIpConfigurationResponse;
import com.pulumi.azurenative.network.outputs.VpnGatewayNatRuleResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetVpnGatewayResult {
    /**
     * Local network gateway's BGP speaker settings.
     * 
     */
    private final @Nullable BgpSettingsResponse bgpSettings;
    /**
     * List of all vpn connections to the gateway.
     * 
     */
    private final @Nullable List<VpnConnectionResponse> connections;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     * 
     */
    private final String etag;
    /**
     * Resource ID.
     * 
     */
    private final @Nullable String id;
    /**
     * List of all IPs configured on the gateway.
     * 
     */
    private final List<VpnGatewayIpConfigurationResponse> ipConfigurations;
    /**
     * Enable Routing Preference property for the Public IP Interface of the VpnGateway.
     * 
     */
    private final @Nullable Boolean isRoutingPreferenceInternet;
    /**
     * Resource location.
     * 
     */
    private final String location;
    /**
     * Resource name.
     * 
     */
    private final String name;
    /**
     * List of all the nat Rules associated with the gateway.
     * 
     */
    private final @Nullable List<VpnGatewayNatRuleResponse> natRules;
    /**
     * The provisioning state of the VPN gateway resource.
     * 
     */
    private final String provisioningState;
    /**
     * Resource tags.
     * 
     */
    private final @Nullable Map<String,String> tags;
    /**
     * Resource type.
     * 
     */
    private final String type;
    /**
     * The VirtualHub to which the gateway belongs.
     * 
     */
    private final @Nullable SubResourceResponse virtualHub;
    /**
     * The scale unit for this vpn gateway.
     * 
     */
    private final @Nullable Integer vpnGatewayScaleUnit;

    @CustomType.Constructor
    private GetVpnGatewayResult(
        @CustomType.Parameter("bgpSettings") @Nullable BgpSettingsResponse bgpSettings,
        @CustomType.Parameter("connections") @Nullable List<VpnConnectionResponse> connections,
        @CustomType.Parameter("etag") String etag,
        @CustomType.Parameter("id") @Nullable String id,
        @CustomType.Parameter("ipConfigurations") List<VpnGatewayIpConfigurationResponse> ipConfigurations,
        @CustomType.Parameter("isRoutingPreferenceInternet") @Nullable Boolean isRoutingPreferenceInternet,
        @CustomType.Parameter("location") String location,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("natRules") @Nullable List<VpnGatewayNatRuleResponse> natRules,
        @CustomType.Parameter("provisioningState") String provisioningState,
        @CustomType.Parameter("tags") @Nullable Map<String,String> tags,
        @CustomType.Parameter("type") String type,
        @CustomType.Parameter("virtualHub") @Nullable SubResourceResponse virtualHub,
        @CustomType.Parameter("vpnGatewayScaleUnit") @Nullable Integer vpnGatewayScaleUnit) {
        this.bgpSettings = bgpSettings;
        this.connections = connections;
        this.etag = etag;
        this.id = id;
        this.ipConfigurations = ipConfigurations;
        this.isRoutingPreferenceInternet = isRoutingPreferenceInternet;
        this.location = location;
        this.name = name;
        this.natRules = natRules;
        this.provisioningState = provisioningState;
        this.tags = tags;
        this.type = type;
        this.virtualHub = virtualHub;
        this.vpnGatewayScaleUnit = vpnGatewayScaleUnit;
    }

    /**
     * Local network gateway's BGP speaker settings.
     * 
    */
    public Optional<BgpSettingsResponse> bgpSettings() {
        return Optional.ofNullable(this.bgpSettings);
    }
    /**
     * List of all vpn connections to the gateway.
     * 
    */
    public List<VpnConnectionResponse> connections() {
        return this.connections == null ? List.of() : this.connections;
    }
    /**
     * A unique read-only string that changes whenever the resource is updated.
     * 
    */
    public String etag() {
        return this.etag;
    }
    /**
     * Resource ID.
     * 
    */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }
    /**
     * List of all IPs configured on the gateway.
     * 
    */
    public List<VpnGatewayIpConfigurationResponse> ipConfigurations() {
        return this.ipConfigurations;
    }
    /**
     * Enable Routing Preference property for the Public IP Interface of the VpnGateway.
     * 
    */
    public Optional<Boolean> isRoutingPreferenceInternet() {
        return Optional.ofNullable(this.isRoutingPreferenceInternet);
    }
    /**
     * Resource location.
     * 
    */
    public String location() {
        return this.location;
    }
    /**
     * Resource name.
     * 
    */
    public String name() {
        return this.name;
    }
    /**
     * List of all the nat Rules associated with the gateway.
     * 
    */
    public List<VpnGatewayNatRuleResponse> natRules() {
        return this.natRules == null ? List.of() : this.natRules;
    }
    /**
     * The provisioning state of the VPN gateway resource.
     * 
    */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * Resource tags.
     * 
    */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * Resource type.
     * 
    */
    public String type() {
        return this.type;
    }
    /**
     * The VirtualHub to which the gateway belongs.
     * 
    */
    public Optional<SubResourceResponse> virtualHub() {
        return Optional.ofNullable(this.virtualHub);
    }
    /**
     * The scale unit for this vpn gateway.
     * 
    */
    public Optional<Integer> vpnGatewayScaleUnit() {
        return Optional.ofNullable(this.vpnGatewayScaleUnit);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVpnGatewayResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable BgpSettingsResponse bgpSettings;
        private @Nullable List<VpnConnectionResponse> connections;
        private String etag;
        private @Nullable String id;
        private List<VpnGatewayIpConfigurationResponse> ipConfigurations;
        private @Nullable Boolean isRoutingPreferenceInternet;
        private String location;
        private String name;
        private @Nullable List<VpnGatewayNatRuleResponse> natRules;
        private String provisioningState;
        private @Nullable Map<String,String> tags;
        private String type;
        private @Nullable SubResourceResponse virtualHub;
        private @Nullable Integer vpnGatewayScaleUnit;

        public Builder() {
    	      // Empty
        }

        public Builder(GetVpnGatewayResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bgpSettings = defaults.bgpSettings;
    	      this.connections = defaults.connections;
    	      this.etag = defaults.etag;
    	      this.id = defaults.id;
    	      this.ipConfigurations = defaults.ipConfigurations;
    	      this.isRoutingPreferenceInternet = defaults.isRoutingPreferenceInternet;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.natRules = defaults.natRules;
    	      this.provisioningState = defaults.provisioningState;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
    	      this.virtualHub = defaults.virtualHub;
    	      this.vpnGatewayScaleUnit = defaults.vpnGatewayScaleUnit;
        }

        public Builder bgpSettings(@Nullable BgpSettingsResponse bgpSettings) {
            this.bgpSettings = bgpSettings;
            return this;
        }
        public Builder connections(@Nullable List<VpnConnectionResponse> connections) {
            this.connections = connections;
            return this;
        }
        public Builder connections(VpnConnectionResponse... connections) {
            return connections(List.of(connections));
        }
        public Builder etag(String etag) {
            this.etag = Objects.requireNonNull(etag);
            return this;
        }
        public Builder id(@Nullable String id) {
            this.id = id;
            return this;
        }
        public Builder ipConfigurations(List<VpnGatewayIpConfigurationResponse> ipConfigurations) {
            this.ipConfigurations = Objects.requireNonNull(ipConfigurations);
            return this;
        }
        public Builder ipConfigurations(VpnGatewayIpConfigurationResponse... ipConfigurations) {
            return ipConfigurations(List.of(ipConfigurations));
        }
        public Builder isRoutingPreferenceInternet(@Nullable Boolean isRoutingPreferenceInternet) {
            this.isRoutingPreferenceInternet = isRoutingPreferenceInternet;
            return this;
        }
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder natRules(@Nullable List<VpnGatewayNatRuleResponse> natRules) {
            this.natRules = natRules;
            return this;
        }
        public Builder natRules(VpnGatewayNatRuleResponse... natRules) {
            return natRules(List.of(natRules));
        }
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder virtualHub(@Nullable SubResourceResponse virtualHub) {
            this.virtualHub = virtualHub;
            return this;
        }
        public Builder vpnGatewayScaleUnit(@Nullable Integer vpnGatewayScaleUnit) {
            this.vpnGatewayScaleUnit = vpnGatewayScaleUnit;
            return this;
        }        public GetVpnGatewayResult build() {
            return new GetVpnGatewayResult(bgpSettings, connections, etag, id, ipConfigurations, isRoutingPreferenceInternet, location, name, natRules, provisioningState, tags, type, virtualHub, vpnGatewayScaleUnit);
        }
    }
}
