// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.synapse;

import com.pulumi.azurenative.synapse.enums.WorkspacePublicNetworkAccess;
import com.pulumi.azurenative.synapse.inputs.DataLakeStorageAccountDetailsArgs;
import com.pulumi.azurenative.synapse.inputs.EncryptionDetailsArgs;
import com.pulumi.azurenative.synapse.inputs.ManagedIdentityArgs;
import com.pulumi.azurenative.synapse.inputs.ManagedVirtualNetworkSettingsArgs;
import com.pulumi.azurenative.synapse.inputs.PrivateEndpointConnectionArgs;
import com.pulumi.azurenative.synapse.inputs.PurviewConfigurationArgs;
import com.pulumi.azurenative.synapse.inputs.VirtualNetworkProfileArgs;
import com.pulumi.azurenative.synapse.inputs.WorkspaceRepositoryConfigurationArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkspaceArgs extends com.pulumi.resources.ResourceArgs {

    public static final WorkspaceArgs Empty = new WorkspaceArgs();

    /**
     * Connectivity endpoints
     * 
     */
    @Import(name="connectivityEndpoints")
    private @Nullable Output<Map<String,String>> connectivityEndpoints;

    public Optional<Output<Map<String,String>>> connectivityEndpoints() {
        return Optional.ofNullable(this.connectivityEndpoints);
    }

    /**
     * Workspace default data lake storage account details
     * 
     */
    @Import(name="defaultDataLakeStorage")
    private @Nullable Output<DataLakeStorageAccountDetailsArgs> defaultDataLakeStorage;

    public Optional<Output<DataLakeStorageAccountDetailsArgs>> defaultDataLakeStorage() {
        return Optional.ofNullable(this.defaultDataLakeStorage);
    }

    /**
     * The encryption details of the workspace
     * 
     */
    @Import(name="encryption")
    private @Nullable Output<EncryptionDetailsArgs> encryption;

    public Optional<Output<EncryptionDetailsArgs>> encryption() {
        return Optional.ofNullable(this.encryption);
    }

    /**
     * Identity of the workspace
     * 
     */
    @Import(name="identity")
    private @Nullable Output<ManagedIdentityArgs> identity;

    public Optional<Output<ManagedIdentityArgs>> identity() {
        return Optional.ofNullable(this.identity);
    }

    /**
     * The geo-location where the resource lives
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Workspace managed resource group. The resource group name uniquely identifies the resource group within the user subscriptionId. The resource group name must be no longer than 90 characters long, and must be alphanumeric characters (Char.IsLetterOrDigit()) and &#39;-&#39;, &#39;_&#39;, &#39;(&#39;, &#39;)&#39; and&#39;.&#39;. Note that the name cannot end with &#39;.&#39;
     * 
     */
    @Import(name="managedResourceGroupName")
    private @Nullable Output<String> managedResourceGroupName;

    public Optional<Output<String>> managedResourceGroupName() {
        return Optional.ofNullable(this.managedResourceGroupName);
    }

    /**
     * Setting this to &#39;default&#39; will ensure that all compute for this workspace is in a virtual network managed on behalf of the user.
     * 
     */
    @Import(name="managedVirtualNetwork")
    private @Nullable Output<String> managedVirtualNetwork;

    public Optional<Output<String>> managedVirtualNetwork() {
        return Optional.ofNullable(this.managedVirtualNetwork);
    }

    /**
     * Managed Virtual Network Settings
     * 
     */
    @Import(name="managedVirtualNetworkSettings")
    private @Nullable Output<ManagedVirtualNetworkSettingsArgs> managedVirtualNetworkSettings;

    public Optional<Output<ManagedVirtualNetworkSettingsArgs>> managedVirtualNetworkSettings() {
        return Optional.ofNullable(this.managedVirtualNetworkSettings);
    }

    /**
     * Private endpoint connections to the workspace
     * 
     */
    @Import(name="privateEndpointConnections")
    private @Nullable Output<List<PrivateEndpointConnectionArgs>> privateEndpointConnections;

    public Optional<Output<List<PrivateEndpointConnectionArgs>>> privateEndpointConnections() {
        return Optional.ofNullable(this.privateEndpointConnections);
    }

    /**
     * Enable or Disable public network access to workspace
     * 
     */
    @Import(name="publicNetworkAccess")
    private @Nullable Output<Either<String,WorkspacePublicNetworkAccess>> publicNetworkAccess;

    public Optional<Output<Either<String,WorkspacePublicNetworkAccess>>> publicNetworkAccess() {
        return Optional.ofNullable(this.publicNetworkAccess);
    }

    /**
     * Purview Configuration
     * 
     */
    @Import(name="purviewConfiguration")
    private @Nullable Output<PurviewConfigurationArgs> purviewConfiguration;

    public Optional<Output<PurviewConfigurationArgs>> purviewConfiguration() {
        return Optional.ofNullable(this.purviewConfiguration);
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Login for workspace SQL active directory administrator
     * 
     */
    @Import(name="sqlAdministratorLogin")
    private @Nullable Output<String> sqlAdministratorLogin;

    public Optional<Output<String>> sqlAdministratorLogin() {
        return Optional.ofNullable(this.sqlAdministratorLogin);
    }

    /**
     * SQL administrator login password
     * 
     */
    @Import(name="sqlAdministratorLoginPassword")
    private @Nullable Output<String> sqlAdministratorLoginPassword;

    public Optional<Output<String>> sqlAdministratorLoginPassword() {
        return Optional.ofNullable(this.sqlAdministratorLoginPassword);
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Virtual Network profile
     * 
     */
    @Import(name="virtualNetworkProfile")
    private @Nullable Output<VirtualNetworkProfileArgs> virtualNetworkProfile;

    public Optional<Output<VirtualNetworkProfileArgs>> virtualNetworkProfile() {
        return Optional.ofNullable(this.virtualNetworkProfile);
    }

    /**
     * The name of the workspace
     * 
     */
    @Import(name="workspaceName")
    private @Nullable Output<String> workspaceName;

    public Optional<Output<String>> workspaceName() {
        return Optional.ofNullable(this.workspaceName);
    }

    /**
     * Git integration settings
     * 
     */
    @Import(name="workspaceRepositoryConfiguration")
    private @Nullable Output<WorkspaceRepositoryConfigurationArgs> workspaceRepositoryConfiguration;

    public Optional<Output<WorkspaceRepositoryConfigurationArgs>> workspaceRepositoryConfiguration() {
        return Optional.ofNullable(this.workspaceRepositoryConfiguration);
    }

    private WorkspaceArgs() {}

    private WorkspaceArgs(WorkspaceArgs $) {
        this.connectivityEndpoints = $.connectivityEndpoints;
        this.defaultDataLakeStorage = $.defaultDataLakeStorage;
        this.encryption = $.encryption;
        this.identity = $.identity;
        this.location = $.location;
        this.managedResourceGroupName = $.managedResourceGroupName;
        this.managedVirtualNetwork = $.managedVirtualNetwork;
        this.managedVirtualNetworkSettings = $.managedVirtualNetworkSettings;
        this.privateEndpointConnections = $.privateEndpointConnections;
        this.publicNetworkAccess = $.publicNetworkAccess;
        this.purviewConfiguration = $.purviewConfiguration;
        this.resourceGroupName = $.resourceGroupName;
        this.sqlAdministratorLogin = $.sqlAdministratorLogin;
        this.sqlAdministratorLoginPassword = $.sqlAdministratorLoginPassword;
        this.tags = $.tags;
        this.virtualNetworkProfile = $.virtualNetworkProfile;
        this.workspaceName = $.workspaceName;
        this.workspaceRepositoryConfiguration = $.workspaceRepositoryConfiguration;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkspaceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkspaceArgs $;

        public Builder() {
            $ = new WorkspaceArgs();
        }

        public Builder(WorkspaceArgs defaults) {
            $ = new WorkspaceArgs(Objects.requireNonNull(defaults));
        }

        public Builder connectivityEndpoints(@Nullable Output<Map<String,String>> connectivityEndpoints) {
            $.connectivityEndpoints = connectivityEndpoints;
            return this;
        }

        public Builder connectivityEndpoints(Map<String,String> connectivityEndpoints) {
            return connectivityEndpoints(Output.of(connectivityEndpoints));
        }

        public Builder defaultDataLakeStorage(@Nullable Output<DataLakeStorageAccountDetailsArgs> defaultDataLakeStorage) {
            $.defaultDataLakeStorage = defaultDataLakeStorage;
            return this;
        }

        public Builder defaultDataLakeStorage(DataLakeStorageAccountDetailsArgs defaultDataLakeStorage) {
            return defaultDataLakeStorage(Output.of(defaultDataLakeStorage));
        }

        public Builder encryption(@Nullable Output<EncryptionDetailsArgs> encryption) {
            $.encryption = encryption;
            return this;
        }

        public Builder encryption(EncryptionDetailsArgs encryption) {
            return encryption(Output.of(encryption));
        }

        public Builder identity(@Nullable Output<ManagedIdentityArgs> identity) {
            $.identity = identity;
            return this;
        }

        public Builder identity(ManagedIdentityArgs identity) {
            return identity(Output.of(identity));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder managedResourceGroupName(@Nullable Output<String> managedResourceGroupName) {
            $.managedResourceGroupName = managedResourceGroupName;
            return this;
        }

        public Builder managedResourceGroupName(String managedResourceGroupName) {
            return managedResourceGroupName(Output.of(managedResourceGroupName));
        }

        public Builder managedVirtualNetwork(@Nullable Output<String> managedVirtualNetwork) {
            $.managedVirtualNetwork = managedVirtualNetwork;
            return this;
        }

        public Builder managedVirtualNetwork(String managedVirtualNetwork) {
            return managedVirtualNetwork(Output.of(managedVirtualNetwork));
        }

        public Builder managedVirtualNetworkSettings(@Nullable Output<ManagedVirtualNetworkSettingsArgs> managedVirtualNetworkSettings) {
            $.managedVirtualNetworkSettings = managedVirtualNetworkSettings;
            return this;
        }

        public Builder managedVirtualNetworkSettings(ManagedVirtualNetworkSettingsArgs managedVirtualNetworkSettings) {
            return managedVirtualNetworkSettings(Output.of(managedVirtualNetworkSettings));
        }

        public Builder privateEndpointConnections(@Nullable Output<List<PrivateEndpointConnectionArgs>> privateEndpointConnections) {
            $.privateEndpointConnections = privateEndpointConnections;
            return this;
        }

        public Builder privateEndpointConnections(List<PrivateEndpointConnectionArgs> privateEndpointConnections) {
            return privateEndpointConnections(Output.of(privateEndpointConnections));
        }

        public Builder privateEndpointConnections(PrivateEndpointConnectionArgs... privateEndpointConnections) {
            return privateEndpointConnections(List.of(privateEndpointConnections));
        }

        public Builder publicNetworkAccess(@Nullable Output<Either<String,WorkspacePublicNetworkAccess>> publicNetworkAccess) {
            $.publicNetworkAccess = publicNetworkAccess;
            return this;
        }

        public Builder publicNetworkAccess(Either<String,WorkspacePublicNetworkAccess> publicNetworkAccess) {
            return publicNetworkAccess(Output.of(publicNetworkAccess));
        }

        public Builder publicNetworkAccess(String publicNetworkAccess) {
            return publicNetworkAccess(Either.ofLeft(publicNetworkAccess));
        }

        public Builder publicNetworkAccess(WorkspacePublicNetworkAccess publicNetworkAccess) {
            return publicNetworkAccess(Either.ofRight(publicNetworkAccess));
        }

        public Builder purviewConfiguration(@Nullable Output<PurviewConfigurationArgs> purviewConfiguration) {
            $.purviewConfiguration = purviewConfiguration;
            return this;
        }

        public Builder purviewConfiguration(PurviewConfigurationArgs purviewConfiguration) {
            return purviewConfiguration(Output.of(purviewConfiguration));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder sqlAdministratorLogin(@Nullable Output<String> sqlAdministratorLogin) {
            $.sqlAdministratorLogin = sqlAdministratorLogin;
            return this;
        }

        public Builder sqlAdministratorLogin(String sqlAdministratorLogin) {
            return sqlAdministratorLogin(Output.of(sqlAdministratorLogin));
        }

        public Builder sqlAdministratorLoginPassword(@Nullable Output<String> sqlAdministratorLoginPassword) {
            $.sqlAdministratorLoginPassword = sqlAdministratorLoginPassword;
            return this;
        }

        public Builder sqlAdministratorLoginPassword(String sqlAdministratorLoginPassword) {
            return sqlAdministratorLoginPassword(Output.of(sqlAdministratorLoginPassword));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder virtualNetworkProfile(@Nullable Output<VirtualNetworkProfileArgs> virtualNetworkProfile) {
            $.virtualNetworkProfile = virtualNetworkProfile;
            return this;
        }

        public Builder virtualNetworkProfile(VirtualNetworkProfileArgs virtualNetworkProfile) {
            return virtualNetworkProfile(Output.of(virtualNetworkProfile));
        }

        public Builder workspaceName(@Nullable Output<String> workspaceName) {
            $.workspaceName = workspaceName;
            return this;
        }

        public Builder workspaceName(String workspaceName) {
            return workspaceName(Output.of(workspaceName));
        }

        public Builder workspaceRepositoryConfiguration(@Nullable Output<WorkspaceRepositoryConfigurationArgs> workspaceRepositoryConfiguration) {
            $.workspaceRepositoryConfiguration = workspaceRepositoryConfiguration;
            return this;
        }

        public Builder workspaceRepositoryConfiguration(WorkspaceRepositoryConfigurationArgs workspaceRepositoryConfiguration) {
            return workspaceRepositoryConfiguration(Output.of(workspaceRepositoryConfiguration));
        }

        public WorkspaceArgs build() {
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
