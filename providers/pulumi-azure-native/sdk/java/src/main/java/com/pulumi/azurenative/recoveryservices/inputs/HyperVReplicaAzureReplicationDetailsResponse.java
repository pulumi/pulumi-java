// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.recoveryservices.inputs;

import com.pulumi.azurenative.recoveryservices.inputs.AzureVmDiskDetailsResponse;
import com.pulumi.azurenative.recoveryservices.inputs.InitialReplicationDetailsResponse;
import com.pulumi.azurenative.recoveryservices.inputs.OSDetailsResponse;
import com.pulumi.azurenative.recoveryservices.inputs.VMNicDetailsResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Hyper V Replica Azure provider specific settings.
 * 
 */
public final class HyperVReplicaAzureReplicationDetailsResponse extends com.pulumi.resources.InvokeArgs {

    public static final HyperVReplicaAzureReplicationDetailsResponse Empty = new HyperVReplicaAzureReplicationDetailsResponse();

    /**
     * Azure VM Disk details.
     * 
     */
    @Import(name="azureVmDiskDetails")
    private @Nullable List<AzureVmDiskDetailsResponse> azureVmDiskDetails;

    /**
     * @return Azure VM Disk details.
     * 
     */
    public Optional<List<AzureVmDiskDetailsResponse>> azureVmDiskDetails() {
        return Optional.ofNullable(this.azureVmDiskDetails);
    }

    /**
     * The selected option to enable RDP\SSH on target vm after failover. String value of {SrsDataContract.EnableRDPOnTargetOption} enum.
     * 
     */
    @Import(name="enableRdpOnTargetOption")
    private @Nullable String enableRdpOnTargetOption;

    /**
     * @return The selected option to enable RDP\SSH on target vm after failover. String value of {SrsDataContract.EnableRDPOnTargetOption} enum.
     * 
     */
    public Optional<String> enableRdpOnTargetOption() {
        return Optional.ofNullable(this.enableRdpOnTargetOption);
    }

    /**
     * The encryption info.
     * 
     */
    @Import(name="encryption")
    private @Nullable String encryption;

    /**
     * @return The encryption info.
     * 
     */
    public Optional<String> encryption() {
        return Optional.ofNullable(this.encryption);
    }

    /**
     * Initial replication details.
     * 
     */
    @Import(name="initialReplicationDetails")
    private @Nullable InitialReplicationDetailsResponse initialReplicationDetails;

    /**
     * @return Initial replication details.
     * 
     */
    public Optional<InitialReplicationDetailsResponse> initialReplicationDetails() {
        return Optional.ofNullable(this.initialReplicationDetails);
    }

    /**
     * Gets the Instance type.
     * Expected value is &#39;HyperVReplicaAzure&#39;.
     * 
     */
    @Import(name="instanceType", required=true)
    private String instanceType;

    /**
     * @return Gets the Instance type.
     * Expected value is &#39;HyperVReplicaAzure&#39;.
     * 
     */
    public String instanceType() {
        return this.instanceType;
    }

    /**
     * The Last replication time.
     * 
     */
    @Import(name="lastReplicatedTime")
    private @Nullable String lastReplicatedTime;

    /**
     * @return The Last replication time.
     * 
     */
    public Optional<String> lastReplicatedTime() {
        return Optional.ofNullable(this.lastReplicatedTime);
    }

    /**
     * The last RPO calculated time.
     * 
     */
    @Import(name="lastRpoCalculatedTime")
    private @Nullable String lastRpoCalculatedTime;

    /**
     * @return The last RPO calculated time.
     * 
     */
    public Optional<String> lastRpoCalculatedTime() {
        return Optional.ofNullable(this.lastRpoCalculatedTime);
    }

    /**
     * License Type of the VM to be used.
     * 
     */
    @Import(name="licenseType")
    private @Nullable String licenseType;

    /**
     * @return License Type of the VM to be used.
     * 
     */
    public Optional<String> licenseType() {
        return Optional.ofNullable(this.licenseType);
    }

    /**
     * The operating system info.
     * 
     */
    @Import(name="oSDetails")
    private @Nullable OSDetailsResponse oSDetails;

    /**
     * @return The operating system info.
     * 
     */
    public Optional<OSDetailsResponse> oSDetails() {
        return Optional.ofNullable(this.oSDetails);
    }

    /**
     * The recovery availability set Id.
     * 
     */
    @Import(name="recoveryAvailabilitySetId")
    private @Nullable String recoveryAvailabilitySetId;

    /**
     * @return The recovery availability set Id.
     * 
     */
    public Optional<String> recoveryAvailabilitySetId() {
        return Optional.ofNullable(this.recoveryAvailabilitySetId);
    }

    /**
     * The ARM id of the log storage account used for replication. This will be set to null if no log storage account was provided during enable protection.
     * 
     */
    @Import(name="recoveryAzureLogStorageAccountId")
    private @Nullable String recoveryAzureLogStorageAccountId;

    /**
     * @return The ARM id of the log storage account used for replication. This will be set to null if no log storage account was provided during enable protection.
     * 
     */
    public Optional<String> recoveryAzureLogStorageAccountId() {
        return Optional.ofNullable(this.recoveryAzureLogStorageAccountId);
    }

    /**
     * The target resource group Id.
     * 
     */
    @Import(name="recoveryAzureResourceGroupId")
    private @Nullable String recoveryAzureResourceGroupId;

    /**
     * @return The target resource group Id.
     * 
     */
    public Optional<String> recoveryAzureResourceGroupId() {
        return Optional.ofNullable(this.recoveryAzureResourceGroupId);
    }

    /**
     * The recovery Azure storage account.
     * 
     */
    @Import(name="recoveryAzureStorageAccount")
    private @Nullable String recoveryAzureStorageAccount;

    /**
     * @return The recovery Azure storage account.
     * 
     */
    public Optional<String> recoveryAzureStorageAccount() {
        return Optional.ofNullable(this.recoveryAzureStorageAccount);
    }

    /**
     * The Recovery Azure VM size.
     * 
     */
    @Import(name="recoveryAzureVMSize")
    private @Nullable String recoveryAzureVMSize;

    /**
     * @return The Recovery Azure VM size.
     * 
     */
    public Optional<String> recoveryAzureVMSize() {
        return Optional.ofNullable(this.recoveryAzureVMSize);
    }

    /**
     * Recovery Azure given name.
     * 
     */
    @Import(name="recoveryAzureVmName")
    private @Nullable String recoveryAzureVmName;

    /**
     * @return Recovery Azure given name.
     * 
     */
    public Optional<String> recoveryAzureVmName() {
        return Optional.ofNullable(this.recoveryAzureVmName);
    }

    /**
     * Last RPO value.
     * 
     */
    @Import(name="rpoInSeconds")
    private @Nullable Double rpoInSeconds;

    /**
     * @return Last RPO value.
     * 
     */
    public Optional<Double> rpoInSeconds() {
        return Optional.ofNullable(this.rpoInSeconds);
    }

    /**
     * The selected recovery azure network Id.
     * 
     */
    @Import(name="selectedRecoveryAzureNetworkId")
    private @Nullable String selectedRecoveryAzureNetworkId;

    /**
     * @return The selected recovery azure network Id.
     * 
     */
    public Optional<String> selectedRecoveryAzureNetworkId() {
        return Optional.ofNullable(this.selectedRecoveryAzureNetworkId);
    }

    /**
     * The selected source nic Id which will be used as the primary nic during failover.
     * 
     */
    @Import(name="selectedSourceNicId")
    private @Nullable String selectedSourceNicId;

    /**
     * @return The selected source nic Id which will be used as the primary nic during failover.
     * 
     */
    public Optional<String> selectedSourceNicId() {
        return Optional.ofNullable(this.selectedSourceNicId);
    }

    /**
     * The CPU count of the VM on the primary side.
     * 
     */
    @Import(name="sourceVmCpuCount")
    private @Nullable Integer sourceVmCpuCount;

    /**
     * @return The CPU count of the VM on the primary side.
     * 
     */
    public Optional<Integer> sourceVmCpuCount() {
        return Optional.ofNullable(this.sourceVmCpuCount);
    }

    /**
     * The RAM size of the VM on the primary side.
     * 
     */
    @Import(name="sourceVmRamSizeInMB")
    private @Nullable Integer sourceVmRamSizeInMB;

    /**
     * @return The RAM size of the VM on the primary side.
     * 
     */
    public Optional<Integer> sourceVmRamSizeInMB() {
        return Optional.ofNullable(this.sourceVmRamSizeInMB);
    }

    /**
     * The target availability zone.
     * 
     */
    @Import(name="targetAvailabilityZone")
    private @Nullable String targetAvailabilityZone;

    /**
     * @return The target availability zone.
     * 
     */
    public Optional<String> targetAvailabilityZone() {
        return Optional.ofNullable(this.targetAvailabilityZone);
    }

    /**
     * The target proximity placement group Id.
     * 
     */
    @Import(name="targetProximityPlacementGroupId")
    private @Nullable String targetProximityPlacementGroupId;

    /**
     * @return The target proximity placement group Id.
     * 
     */
    public Optional<String> targetProximityPlacementGroupId() {
        return Optional.ofNullable(this.targetProximityPlacementGroupId);
    }

    /**
     * A value indicating whether managed disks should be used during failover.
     * 
     */
    @Import(name="useManagedDisks")
    private @Nullable String useManagedDisks;

    /**
     * @return A value indicating whether managed disks should be used during failover.
     * 
     */
    public Optional<String> useManagedDisks() {
        return Optional.ofNullable(this.useManagedDisks);
    }

    /**
     * The virtual machine Id.
     * 
     */
    @Import(name="vmId")
    private @Nullable String vmId;

    /**
     * @return The virtual machine Id.
     * 
     */
    public Optional<String> vmId() {
        return Optional.ofNullable(this.vmId);
    }

    /**
     * The PE Network details.
     * 
     */
    @Import(name="vmNics")
    private @Nullable List<VMNicDetailsResponse> vmNics;

    /**
     * @return The PE Network details.
     * 
     */
    public Optional<List<VMNicDetailsResponse>> vmNics() {
        return Optional.ofNullable(this.vmNics);
    }

    /**
     * The protection state for the vm.
     * 
     */
    @Import(name="vmProtectionState")
    private @Nullable String vmProtectionState;

    /**
     * @return The protection state for the vm.
     * 
     */
    public Optional<String> vmProtectionState() {
        return Optional.ofNullable(this.vmProtectionState);
    }

    /**
     * The protection state description for the vm.
     * 
     */
    @Import(name="vmProtectionStateDescription")
    private @Nullable String vmProtectionStateDescription;

    /**
     * @return The protection state description for the vm.
     * 
     */
    public Optional<String> vmProtectionStateDescription() {
        return Optional.ofNullable(this.vmProtectionStateDescription);
    }

    private HyperVReplicaAzureReplicationDetailsResponse() {}

    private HyperVReplicaAzureReplicationDetailsResponse(HyperVReplicaAzureReplicationDetailsResponse $) {
        this.azureVmDiskDetails = $.azureVmDiskDetails;
        this.enableRdpOnTargetOption = $.enableRdpOnTargetOption;
        this.encryption = $.encryption;
        this.initialReplicationDetails = $.initialReplicationDetails;
        this.instanceType = $.instanceType;
        this.lastReplicatedTime = $.lastReplicatedTime;
        this.lastRpoCalculatedTime = $.lastRpoCalculatedTime;
        this.licenseType = $.licenseType;
        this.oSDetails = $.oSDetails;
        this.recoveryAvailabilitySetId = $.recoveryAvailabilitySetId;
        this.recoveryAzureLogStorageAccountId = $.recoveryAzureLogStorageAccountId;
        this.recoveryAzureResourceGroupId = $.recoveryAzureResourceGroupId;
        this.recoveryAzureStorageAccount = $.recoveryAzureStorageAccount;
        this.recoveryAzureVMSize = $.recoveryAzureVMSize;
        this.recoveryAzureVmName = $.recoveryAzureVmName;
        this.rpoInSeconds = $.rpoInSeconds;
        this.selectedRecoveryAzureNetworkId = $.selectedRecoveryAzureNetworkId;
        this.selectedSourceNicId = $.selectedSourceNicId;
        this.sourceVmCpuCount = $.sourceVmCpuCount;
        this.sourceVmRamSizeInMB = $.sourceVmRamSizeInMB;
        this.targetAvailabilityZone = $.targetAvailabilityZone;
        this.targetProximityPlacementGroupId = $.targetProximityPlacementGroupId;
        this.useManagedDisks = $.useManagedDisks;
        this.vmId = $.vmId;
        this.vmNics = $.vmNics;
        this.vmProtectionState = $.vmProtectionState;
        this.vmProtectionStateDescription = $.vmProtectionStateDescription;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HyperVReplicaAzureReplicationDetailsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HyperVReplicaAzureReplicationDetailsResponse $;

        public Builder() {
            $ = new HyperVReplicaAzureReplicationDetailsResponse();
        }

        public Builder(HyperVReplicaAzureReplicationDetailsResponse defaults) {
            $ = new HyperVReplicaAzureReplicationDetailsResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param azureVmDiskDetails Azure VM Disk details.
         * 
         * @return builder
         * 
         */
        public Builder azureVmDiskDetails(@Nullable List<AzureVmDiskDetailsResponse> azureVmDiskDetails) {
            $.azureVmDiskDetails = azureVmDiskDetails;
            return this;
        }

        /**
         * @param azureVmDiskDetails Azure VM Disk details.
         * 
         * @return builder
         * 
         */
        public Builder azureVmDiskDetails(AzureVmDiskDetailsResponse... azureVmDiskDetails) {
            return azureVmDiskDetails(List.of(azureVmDiskDetails));
        }

        /**
         * @param enableRdpOnTargetOption The selected option to enable RDP\SSH on target vm after failover. String value of {SrsDataContract.EnableRDPOnTargetOption} enum.
         * 
         * @return builder
         * 
         */
        public Builder enableRdpOnTargetOption(@Nullable String enableRdpOnTargetOption) {
            $.enableRdpOnTargetOption = enableRdpOnTargetOption;
            return this;
        }

        /**
         * @param encryption The encryption info.
         * 
         * @return builder
         * 
         */
        public Builder encryption(@Nullable String encryption) {
            $.encryption = encryption;
            return this;
        }

        /**
         * @param initialReplicationDetails Initial replication details.
         * 
         * @return builder
         * 
         */
        public Builder initialReplicationDetails(@Nullable InitialReplicationDetailsResponse initialReplicationDetails) {
            $.initialReplicationDetails = initialReplicationDetails;
            return this;
        }

        /**
         * @param instanceType Gets the Instance type.
         * Expected value is &#39;HyperVReplicaAzure&#39;.
         * 
         * @return builder
         * 
         */
        public Builder instanceType(String instanceType) {
            $.instanceType = instanceType;
            return this;
        }

        /**
         * @param lastReplicatedTime The Last replication time.
         * 
         * @return builder
         * 
         */
        public Builder lastReplicatedTime(@Nullable String lastReplicatedTime) {
            $.lastReplicatedTime = lastReplicatedTime;
            return this;
        }

        /**
         * @param lastRpoCalculatedTime The last RPO calculated time.
         * 
         * @return builder
         * 
         */
        public Builder lastRpoCalculatedTime(@Nullable String lastRpoCalculatedTime) {
            $.lastRpoCalculatedTime = lastRpoCalculatedTime;
            return this;
        }

        /**
         * @param licenseType License Type of the VM to be used.
         * 
         * @return builder
         * 
         */
        public Builder licenseType(@Nullable String licenseType) {
            $.licenseType = licenseType;
            return this;
        }

        /**
         * @param oSDetails The operating system info.
         * 
         * @return builder
         * 
         */
        public Builder oSDetails(@Nullable OSDetailsResponse oSDetails) {
            $.oSDetails = oSDetails;
            return this;
        }

        /**
         * @param recoveryAvailabilitySetId The recovery availability set Id.
         * 
         * @return builder
         * 
         */
        public Builder recoveryAvailabilitySetId(@Nullable String recoveryAvailabilitySetId) {
            $.recoveryAvailabilitySetId = recoveryAvailabilitySetId;
            return this;
        }

        /**
         * @param recoveryAzureLogStorageAccountId The ARM id of the log storage account used for replication. This will be set to null if no log storage account was provided during enable protection.
         * 
         * @return builder
         * 
         */
        public Builder recoveryAzureLogStorageAccountId(@Nullable String recoveryAzureLogStorageAccountId) {
            $.recoveryAzureLogStorageAccountId = recoveryAzureLogStorageAccountId;
            return this;
        }

        /**
         * @param recoveryAzureResourceGroupId The target resource group Id.
         * 
         * @return builder
         * 
         */
        public Builder recoveryAzureResourceGroupId(@Nullable String recoveryAzureResourceGroupId) {
            $.recoveryAzureResourceGroupId = recoveryAzureResourceGroupId;
            return this;
        }

        /**
         * @param recoveryAzureStorageAccount The recovery Azure storage account.
         * 
         * @return builder
         * 
         */
        public Builder recoveryAzureStorageAccount(@Nullable String recoveryAzureStorageAccount) {
            $.recoveryAzureStorageAccount = recoveryAzureStorageAccount;
            return this;
        }

        /**
         * @param recoveryAzureVMSize The Recovery Azure VM size.
         * 
         * @return builder
         * 
         */
        public Builder recoveryAzureVMSize(@Nullable String recoveryAzureVMSize) {
            $.recoveryAzureVMSize = recoveryAzureVMSize;
            return this;
        }

        /**
         * @param recoveryAzureVmName Recovery Azure given name.
         * 
         * @return builder
         * 
         */
        public Builder recoveryAzureVmName(@Nullable String recoveryAzureVmName) {
            $.recoveryAzureVmName = recoveryAzureVmName;
            return this;
        }

        /**
         * @param rpoInSeconds Last RPO value.
         * 
         * @return builder
         * 
         */
        public Builder rpoInSeconds(@Nullable Double rpoInSeconds) {
            $.rpoInSeconds = rpoInSeconds;
            return this;
        }

        /**
         * @param selectedRecoveryAzureNetworkId The selected recovery azure network Id.
         * 
         * @return builder
         * 
         */
        public Builder selectedRecoveryAzureNetworkId(@Nullable String selectedRecoveryAzureNetworkId) {
            $.selectedRecoveryAzureNetworkId = selectedRecoveryAzureNetworkId;
            return this;
        }

        /**
         * @param selectedSourceNicId The selected source nic Id which will be used as the primary nic during failover.
         * 
         * @return builder
         * 
         */
        public Builder selectedSourceNicId(@Nullable String selectedSourceNicId) {
            $.selectedSourceNicId = selectedSourceNicId;
            return this;
        }

        /**
         * @param sourceVmCpuCount The CPU count of the VM on the primary side.
         * 
         * @return builder
         * 
         */
        public Builder sourceVmCpuCount(@Nullable Integer sourceVmCpuCount) {
            $.sourceVmCpuCount = sourceVmCpuCount;
            return this;
        }

        /**
         * @param sourceVmRamSizeInMB The RAM size of the VM on the primary side.
         * 
         * @return builder
         * 
         */
        public Builder sourceVmRamSizeInMB(@Nullable Integer sourceVmRamSizeInMB) {
            $.sourceVmRamSizeInMB = sourceVmRamSizeInMB;
            return this;
        }

        /**
         * @param targetAvailabilityZone The target availability zone.
         * 
         * @return builder
         * 
         */
        public Builder targetAvailabilityZone(@Nullable String targetAvailabilityZone) {
            $.targetAvailabilityZone = targetAvailabilityZone;
            return this;
        }

        /**
         * @param targetProximityPlacementGroupId The target proximity placement group Id.
         * 
         * @return builder
         * 
         */
        public Builder targetProximityPlacementGroupId(@Nullable String targetProximityPlacementGroupId) {
            $.targetProximityPlacementGroupId = targetProximityPlacementGroupId;
            return this;
        }

        /**
         * @param useManagedDisks A value indicating whether managed disks should be used during failover.
         * 
         * @return builder
         * 
         */
        public Builder useManagedDisks(@Nullable String useManagedDisks) {
            $.useManagedDisks = useManagedDisks;
            return this;
        }

        /**
         * @param vmId The virtual machine Id.
         * 
         * @return builder
         * 
         */
        public Builder vmId(@Nullable String vmId) {
            $.vmId = vmId;
            return this;
        }

        /**
         * @param vmNics The PE Network details.
         * 
         * @return builder
         * 
         */
        public Builder vmNics(@Nullable List<VMNicDetailsResponse> vmNics) {
            $.vmNics = vmNics;
            return this;
        }

        /**
         * @param vmNics The PE Network details.
         * 
         * @return builder
         * 
         */
        public Builder vmNics(VMNicDetailsResponse... vmNics) {
            return vmNics(List.of(vmNics));
        }

        /**
         * @param vmProtectionState The protection state for the vm.
         * 
         * @return builder
         * 
         */
        public Builder vmProtectionState(@Nullable String vmProtectionState) {
            $.vmProtectionState = vmProtectionState;
            return this;
        }

        /**
         * @param vmProtectionStateDescription The protection state description for the vm.
         * 
         * @return builder
         * 
         */
        public Builder vmProtectionStateDescription(@Nullable String vmProtectionStateDescription) {
            $.vmProtectionStateDescription = vmProtectionStateDescription;
            return this;
        }

        public HyperVReplicaAzureReplicationDetailsResponse build() {
            $.instanceType = Codegen.stringProp("instanceType").arg($.instanceType).require();
            return $;
        }
    }

}
