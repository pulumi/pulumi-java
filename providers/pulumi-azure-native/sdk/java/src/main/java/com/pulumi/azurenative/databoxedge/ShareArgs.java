// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.databoxedge;

import com.pulumi.azurenative.databoxedge.enums.DataPolicy;
import com.pulumi.azurenative.databoxedge.enums.MonitoringStatus;
import com.pulumi.azurenative.databoxedge.enums.ShareAccessProtocol;
import com.pulumi.azurenative.databoxedge.enums.ShareStatus;
import com.pulumi.azurenative.databoxedge.inputs.AzureContainerInfoArgs;
import com.pulumi.azurenative.databoxedge.inputs.ClientAccessRightArgs;
import com.pulumi.azurenative.databoxedge.inputs.RefreshDetailsArgs;
import com.pulumi.azurenative.databoxedge.inputs.UserAccessRightArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ShareArgs extends com.pulumi.resources.ResourceArgs {

    public static final ShareArgs Empty = new ShareArgs();

    /**
     * Access protocol to be used by the share.
     * 
     */
    @Import(name="accessProtocol", required=true)
    private Output<Either<String,ShareAccessProtocol>> accessProtocol;

    /**
     * @return Access protocol to be used by the share.
     * 
     */
    public Output<Either<String,ShareAccessProtocol>> accessProtocol() {
        return this.accessProtocol;
    }

    /**
     * Azure container mapping for the share.
     * 
     */
    @Import(name="azureContainerInfo")
    private @Nullable Output<AzureContainerInfoArgs> azureContainerInfo;

    /**
     * @return Azure container mapping for the share.
     * 
     */
    public Optional<Output<AzureContainerInfoArgs>> azureContainerInfo() {
        return Optional.ofNullable(this.azureContainerInfo);
    }

    /**
     * List of IP addresses and corresponding access rights on the share(required for NFS protocol).
     * 
     */
    @Import(name="clientAccessRights")
    private @Nullable Output<List<ClientAccessRightArgs>> clientAccessRights;

    /**
     * @return List of IP addresses and corresponding access rights on the share(required for NFS protocol).
     * 
     */
    public Optional<Output<List<ClientAccessRightArgs>>> clientAccessRights() {
        return Optional.ofNullable(this.clientAccessRights);
    }

    /**
     * Data policy of the share.
     * 
     */
    @Import(name="dataPolicy")
    private @Nullable Output<Either<String,DataPolicy>> dataPolicy;

    /**
     * @return Data policy of the share.
     * 
     */
    public Optional<Output<Either<String,DataPolicy>>> dataPolicy() {
        return Optional.ofNullable(this.dataPolicy);
    }

    /**
     * Description for the share.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description for the share.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The device name.
     * 
     */
    @Import(name="deviceName", required=true)
    private Output<String> deviceName;

    /**
     * @return The device name.
     * 
     */
    public Output<String> deviceName() {
        return this.deviceName;
    }

    /**
     * Current monitoring status of the share.
     * 
     */
    @Import(name="monitoringStatus", required=true)
    private Output<Either<String,MonitoringStatus>> monitoringStatus;

    /**
     * @return Current monitoring status of the share.
     * 
     */
    public Output<Either<String,MonitoringStatus>> monitoringStatus() {
        return this.monitoringStatus;
    }

    /**
     * The share name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The share name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Details of the refresh job on this share.
     * 
     */
    @Import(name="refreshDetails")
    private @Nullable Output<RefreshDetailsArgs> refreshDetails;

    /**
     * @return Details of the refresh job on this share.
     * 
     */
    public Optional<Output<RefreshDetailsArgs>> refreshDetails() {
        return Optional.ofNullable(this.refreshDetails);
    }

    /**
     * The resource group name.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The resource group name.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Current status of the share.
     * 
     */
    @Import(name="shareStatus", required=true)
    private Output<Either<String,ShareStatus>> shareStatus;

    /**
     * @return Current status of the share.
     * 
     */
    public Output<Either<String,ShareStatus>> shareStatus() {
        return this.shareStatus;
    }

    /**
     * Mapping of users and corresponding access rights on the share (required for SMB protocol).
     * 
     */
    @Import(name="userAccessRights")
    private @Nullable Output<List<UserAccessRightArgs>> userAccessRights;

    /**
     * @return Mapping of users and corresponding access rights on the share (required for SMB protocol).
     * 
     */
    public Optional<Output<List<UserAccessRightArgs>>> userAccessRights() {
        return Optional.ofNullable(this.userAccessRights);
    }

    private ShareArgs() {}

    private ShareArgs(ShareArgs $) {
        this.accessProtocol = $.accessProtocol;
        this.azureContainerInfo = $.azureContainerInfo;
        this.clientAccessRights = $.clientAccessRights;
        this.dataPolicy = $.dataPolicy;
        this.description = $.description;
        this.deviceName = $.deviceName;
        this.monitoringStatus = $.monitoringStatus;
        this.name = $.name;
        this.refreshDetails = $.refreshDetails;
        this.resourceGroupName = $.resourceGroupName;
        this.shareStatus = $.shareStatus;
        this.userAccessRights = $.userAccessRights;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ShareArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ShareArgs $;

        public Builder() {
            $ = new ShareArgs();
        }

        public Builder(ShareArgs defaults) {
            $ = new ShareArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessProtocol Access protocol to be used by the share.
         * 
         * @return builder
         * 
         */
        public Builder accessProtocol(Output<Either<String,ShareAccessProtocol>> accessProtocol) {
            $.accessProtocol = accessProtocol;
            return this;
        }

        /**
         * @param accessProtocol Access protocol to be used by the share.
         * 
         * @return builder
         * 
         */
        public Builder accessProtocol(Either<String,ShareAccessProtocol> accessProtocol) {
            return accessProtocol(Output.of(accessProtocol));
        }

        /**
         * @param accessProtocol Access protocol to be used by the share.
         * 
         * @return builder
         * 
         */
        public Builder accessProtocol(String accessProtocol) {
            return accessProtocol(Either.ofLeft(accessProtocol));
        }

        /**
         * @param accessProtocol Access protocol to be used by the share.
         * 
         * @return builder
         * 
         */
        public Builder accessProtocol(ShareAccessProtocol accessProtocol) {
            return accessProtocol(Either.ofRight(accessProtocol));
        }

        /**
         * @param azureContainerInfo Azure container mapping for the share.
         * 
         * @return builder
         * 
         */
        public Builder azureContainerInfo(@Nullable Output<AzureContainerInfoArgs> azureContainerInfo) {
            $.azureContainerInfo = azureContainerInfo;
            return this;
        }

        /**
         * @param azureContainerInfo Azure container mapping for the share.
         * 
         * @return builder
         * 
         */
        public Builder azureContainerInfo(AzureContainerInfoArgs azureContainerInfo) {
            return azureContainerInfo(Output.of(azureContainerInfo));
        }

        /**
         * @param clientAccessRights List of IP addresses and corresponding access rights on the share(required for NFS protocol).
         * 
         * @return builder
         * 
         */
        public Builder clientAccessRights(@Nullable Output<List<ClientAccessRightArgs>> clientAccessRights) {
            $.clientAccessRights = clientAccessRights;
            return this;
        }

        /**
         * @param clientAccessRights List of IP addresses and corresponding access rights on the share(required for NFS protocol).
         * 
         * @return builder
         * 
         */
        public Builder clientAccessRights(List<ClientAccessRightArgs> clientAccessRights) {
            return clientAccessRights(Output.of(clientAccessRights));
        }

        /**
         * @param clientAccessRights List of IP addresses and corresponding access rights on the share(required for NFS protocol).
         * 
         * @return builder
         * 
         */
        public Builder clientAccessRights(ClientAccessRightArgs... clientAccessRights) {
            return clientAccessRights(List.of(clientAccessRights));
        }

        /**
         * @param dataPolicy Data policy of the share.
         * 
         * @return builder
         * 
         */
        public Builder dataPolicy(@Nullable Output<Either<String,DataPolicy>> dataPolicy) {
            $.dataPolicy = dataPolicy;
            return this;
        }

        /**
         * @param dataPolicy Data policy of the share.
         * 
         * @return builder
         * 
         */
        public Builder dataPolicy(Either<String,DataPolicy> dataPolicy) {
            return dataPolicy(Output.of(dataPolicy));
        }

        /**
         * @param dataPolicy Data policy of the share.
         * 
         * @return builder
         * 
         */
        public Builder dataPolicy(String dataPolicy) {
            return dataPolicy(Either.ofLeft(dataPolicy));
        }

        /**
         * @param dataPolicy Data policy of the share.
         * 
         * @return builder
         * 
         */
        public Builder dataPolicy(DataPolicy dataPolicy) {
            return dataPolicy(Either.ofRight(dataPolicy));
        }

        /**
         * @param description Description for the share.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description for the share.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param deviceName The device name.
         * 
         * @return builder
         * 
         */
        public Builder deviceName(Output<String> deviceName) {
            $.deviceName = deviceName;
            return this;
        }

        /**
         * @param deviceName The device name.
         * 
         * @return builder
         * 
         */
        public Builder deviceName(String deviceName) {
            return deviceName(Output.of(deviceName));
        }

        /**
         * @param monitoringStatus Current monitoring status of the share.
         * 
         * @return builder
         * 
         */
        public Builder monitoringStatus(Output<Either<String,MonitoringStatus>> monitoringStatus) {
            $.monitoringStatus = monitoringStatus;
            return this;
        }

        /**
         * @param monitoringStatus Current monitoring status of the share.
         * 
         * @return builder
         * 
         */
        public Builder monitoringStatus(Either<String,MonitoringStatus> monitoringStatus) {
            return monitoringStatus(Output.of(monitoringStatus));
        }

        /**
         * @param monitoringStatus Current monitoring status of the share.
         * 
         * @return builder
         * 
         */
        public Builder monitoringStatus(String monitoringStatus) {
            return monitoringStatus(Either.ofLeft(monitoringStatus));
        }

        /**
         * @param monitoringStatus Current monitoring status of the share.
         * 
         * @return builder
         * 
         */
        public Builder monitoringStatus(MonitoringStatus monitoringStatus) {
            return monitoringStatus(Either.ofRight(monitoringStatus));
        }

        /**
         * @param name The share name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The share name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param refreshDetails Details of the refresh job on this share.
         * 
         * @return builder
         * 
         */
        public Builder refreshDetails(@Nullable Output<RefreshDetailsArgs> refreshDetails) {
            $.refreshDetails = refreshDetails;
            return this;
        }

        /**
         * @param refreshDetails Details of the refresh job on this share.
         * 
         * @return builder
         * 
         */
        public Builder refreshDetails(RefreshDetailsArgs refreshDetails) {
            return refreshDetails(Output.of(refreshDetails));
        }

        /**
         * @param resourceGroupName The resource group name.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The resource group name.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param shareStatus Current status of the share.
         * 
         * @return builder
         * 
         */
        public Builder shareStatus(Output<Either<String,ShareStatus>> shareStatus) {
            $.shareStatus = shareStatus;
            return this;
        }

        /**
         * @param shareStatus Current status of the share.
         * 
         * @return builder
         * 
         */
        public Builder shareStatus(Either<String,ShareStatus> shareStatus) {
            return shareStatus(Output.of(shareStatus));
        }

        /**
         * @param shareStatus Current status of the share.
         * 
         * @return builder
         * 
         */
        public Builder shareStatus(String shareStatus) {
            return shareStatus(Either.ofLeft(shareStatus));
        }

        /**
         * @param shareStatus Current status of the share.
         * 
         * @return builder
         * 
         */
        public Builder shareStatus(ShareStatus shareStatus) {
            return shareStatus(Either.ofRight(shareStatus));
        }

        /**
         * @param userAccessRights Mapping of users and corresponding access rights on the share (required for SMB protocol).
         * 
         * @return builder
         * 
         */
        public Builder userAccessRights(@Nullable Output<List<UserAccessRightArgs>> userAccessRights) {
            $.userAccessRights = userAccessRights;
            return this;
        }

        /**
         * @param userAccessRights Mapping of users and corresponding access rights on the share (required for SMB protocol).
         * 
         * @return builder
         * 
         */
        public Builder userAccessRights(List<UserAccessRightArgs> userAccessRights) {
            return userAccessRights(Output.of(userAccessRights));
        }

        /**
         * @param userAccessRights Mapping of users and corresponding access rights on the share (required for SMB protocol).
         * 
         * @return builder
         * 
         */
        public Builder userAccessRights(UserAccessRightArgs... userAccessRights) {
            return userAccessRights(List.of(userAccessRights));
        }

        public ShareArgs build() {
            $.accessProtocol = Objects.requireNonNull($.accessProtocol, "expected parameter 'accessProtocol' to be non-null");
            $.deviceName = Objects.requireNonNull($.deviceName, "expected parameter 'deviceName' to be non-null");
            $.monitoringStatus = Objects.requireNonNull($.monitoringStatus, "expected parameter 'monitoringStatus' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.shareStatus = Objects.requireNonNull($.shareStatus, "expected parameter 'shareStatus' to be non-null");
            return $;
        }
    }

}
