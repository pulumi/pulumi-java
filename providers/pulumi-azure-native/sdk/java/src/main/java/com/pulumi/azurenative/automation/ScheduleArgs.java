// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.automation;

import com.pulumi.azurenative.automation.enums.ScheduleFrequency;
import com.pulumi.azurenative.automation.inputs.AdvancedScheduleArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ScheduleArgs extends com.pulumi.resources.ResourceArgs {

    public static final ScheduleArgs Empty = new ScheduleArgs();

    /**
     * Gets or sets the AdvancedSchedule.
     * 
     */
    @Import(name="advancedSchedule")
    private @Nullable Output<AdvancedScheduleArgs> advancedSchedule;

    public Optional<Output<AdvancedScheduleArgs>> advancedSchedule() {
        return Optional.ofNullable(this.advancedSchedule);
    }

    /**
     * The name of the automation account.
     * 
     */
    @Import(name="automationAccountName", required=true)
    private Output<String> automationAccountName;

    public Output<String> automationAccountName() {
        return this.automationAccountName;
    }

    /**
     * Gets or sets the description of the schedule.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Gets or sets the end time of the schedule.
     * 
     */
    @Import(name="expiryTime")
    private @Nullable Output<String> expiryTime;

    public Optional<Output<String>> expiryTime() {
        return Optional.ofNullable(this.expiryTime);
    }

    /**
     * Gets or sets the frequency of the schedule.
     * 
     */
    @Import(name="frequency", required=true)
    private Output<Either<String,ScheduleFrequency>> frequency;

    public Output<Either<String,ScheduleFrequency>> frequency() {
        return this.frequency;
    }

    /**
     * Gets or sets the interval of the schedule.
     * 
     */
    @Import(name="interval")
    private @Nullable Output<Object> interval;

    public Optional<Output<Object>> interval() {
        return Optional.ofNullable(this.interval);
    }

    /**
     * Gets or sets the name of the Schedule.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    public Output<String> name() {
        return this.name;
    }

    /**
     * Name of an Azure Resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The schedule name.
     * 
     */
    @Import(name="scheduleName")
    private @Nullable Output<String> scheduleName;

    public Optional<Output<String>> scheduleName() {
        return Optional.ofNullable(this.scheduleName);
    }

    /**
     * Gets or sets the start time of the schedule.
     * 
     */
    @Import(name="startTime", required=true)
    private Output<String> startTime;

    public Output<String> startTime() {
        return this.startTime;
    }

    /**
     * Gets or sets the time zone of the schedule.
     * 
     */
    @Import(name="timeZone")
    private @Nullable Output<String> timeZone;

    public Optional<Output<String>> timeZone() {
        return Optional.ofNullable(this.timeZone);
    }

    private ScheduleArgs() {}

    private ScheduleArgs(ScheduleArgs $) {
        this.advancedSchedule = $.advancedSchedule;
        this.automationAccountName = $.automationAccountName;
        this.description = $.description;
        this.expiryTime = $.expiryTime;
        this.frequency = $.frequency;
        this.interval = $.interval;
        this.name = $.name;
        this.resourceGroupName = $.resourceGroupName;
        this.scheduleName = $.scheduleName;
        this.startTime = $.startTime;
        this.timeZone = $.timeZone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ScheduleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ScheduleArgs $;

        public Builder() {
            $ = new ScheduleArgs();
        }

        public Builder(ScheduleArgs defaults) {
            $ = new ScheduleArgs(Objects.requireNonNull(defaults));
        }

        public Builder advancedSchedule(@Nullable Output<AdvancedScheduleArgs> advancedSchedule) {
            $.advancedSchedule = advancedSchedule;
            return this;
        }

        public Builder advancedSchedule(AdvancedScheduleArgs advancedSchedule) {
            return advancedSchedule(Output.of(advancedSchedule));
        }

        public Builder automationAccountName(Output<String> automationAccountName) {
            $.automationAccountName = automationAccountName;
            return this;
        }

        public Builder automationAccountName(String automationAccountName) {
            return automationAccountName(Output.of(automationAccountName));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder expiryTime(@Nullable Output<String> expiryTime) {
            $.expiryTime = expiryTime;
            return this;
        }

        public Builder expiryTime(String expiryTime) {
            return expiryTime(Output.of(expiryTime));
        }

        public Builder frequency(Output<Either<String,ScheduleFrequency>> frequency) {
            $.frequency = frequency;
            return this;
        }

        public Builder frequency(Either<String,ScheduleFrequency> frequency) {
            return frequency(Output.of(frequency));
        }

        public Builder interval(@Nullable Output<Object> interval) {
            $.interval = interval;
            return this;
        }

        public Builder interval(Object interval) {
            return interval(Output.of(interval));
        }

        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder scheduleName(@Nullable Output<String> scheduleName) {
            $.scheduleName = scheduleName;
            return this;
        }

        public Builder scheduleName(String scheduleName) {
            return scheduleName(Output.of(scheduleName));
        }

        public Builder startTime(Output<String> startTime) {
            $.startTime = startTime;
            return this;
        }

        public Builder startTime(String startTime) {
            return startTime(Output.of(startTime));
        }

        public Builder timeZone(@Nullable Output<String> timeZone) {
            $.timeZone = timeZone;
            return this;
        }

        public Builder timeZone(String timeZone) {
            return timeZone(Output.of(timeZone));
        }

        public ScheduleArgs build() {
            $.automationAccountName = Objects.requireNonNull($.automationAccountName, "expected parameter 'automationAccountName' to be non-null");
            $.frequency = Objects.requireNonNull($.frequency, "expected parameter 'frequency' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.startTime = Objects.requireNonNull($.startTime, "expected parameter 'startTime' to be non-null");
            return $;
        }
    }

}
