// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.storagecache.inputs;

import com.pulumi.azurenative.storagecache.inputs.ConditionResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * An indication of Cache health. Gives more information about health than just that related to provisioning.
 * 
 */
public final class CacheHealthResponse extends com.pulumi.resources.InvokeArgs {

    public static final CacheHealthResponse Empty = new CacheHealthResponse();

    /**
     * Outstanding conditions that need to be investigated and resolved.
     * 
     */
    @Import(name="conditions", required=true)
    private List<ConditionResponse> conditions;

    public List<ConditionResponse> conditions() {
        return this.conditions;
    }

    /**
     * List of Cache health states.
     * 
     */
    @Import(name="state")
    private @Nullable String state;

    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * Describes explanation of state.
     * 
     */
    @Import(name="statusDescription")
    private @Nullable String statusDescription;

    public Optional<String> statusDescription() {
        return Optional.ofNullable(this.statusDescription);
    }

    private CacheHealthResponse() {}

    private CacheHealthResponse(CacheHealthResponse $) {
        this.conditions = $.conditions;
        this.state = $.state;
        this.statusDescription = $.statusDescription;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CacheHealthResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CacheHealthResponse $;

        public Builder() {
            $ = new CacheHealthResponse();
        }

        public Builder(CacheHealthResponse defaults) {
            $ = new CacheHealthResponse(Objects.requireNonNull(defaults));
        }

        public Builder conditions(List<ConditionResponse> conditions) {
            $.conditions = conditions;
            return this;
        }

        public Builder conditions(ConditionResponse... conditions) {
            return conditions(List.of(conditions));
        }

        public Builder state(@Nullable String state) {
            $.state = state;
            return this;
        }

        public Builder statusDescription(@Nullable String statusDescription) {
            $.statusDescription = statusDescription;
            return this;
        }

        public CacheHealthResponse build() {
            $.conditions = Objects.requireNonNull($.conditions, "expected parameter 'conditions' to be non-null");
            return $;
        }
    }

}
