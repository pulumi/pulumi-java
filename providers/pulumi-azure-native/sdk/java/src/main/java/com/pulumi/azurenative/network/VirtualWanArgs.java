// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VirtualWanArgs extends com.pulumi.resources.ResourceArgs {

    public static final VirtualWanArgs Empty = new VirtualWanArgs();

    /**
     * True if branch to branch traffic is allowed.
     * 
     */
    @Import(name="allowBranchToBranchTraffic")
    private @Nullable Output<Boolean> allowBranchToBranchTraffic;

    /**
     * @return True if branch to branch traffic is allowed.
     * 
     */
    public Optional<Output<Boolean>> allowBranchToBranchTraffic() {
        return Optional.ofNullable(this.allowBranchToBranchTraffic);
    }

    /**
     * True if Vnet to Vnet traffic is allowed.
     * 
     */
    @Import(name="allowVnetToVnetTraffic")
    private @Nullable Output<Boolean> allowVnetToVnetTraffic;

    /**
     * @return True if Vnet to Vnet traffic is allowed.
     * 
     */
    public Optional<Output<Boolean>> allowVnetToVnetTraffic() {
        return Optional.ofNullable(this.allowVnetToVnetTraffic);
    }

    /**
     * Vpn encryption to be disabled or not.
     * 
     */
    @Import(name="disableVpnEncryption")
    private @Nullable Output<Boolean> disableVpnEncryption;

    /**
     * @return Vpn encryption to be disabled or not.
     * 
     */
    public Optional<Output<Boolean>> disableVpnEncryption() {
        return Optional.ofNullable(this.disableVpnEncryption);
    }

    /**
     * Resource ID.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return Resource ID.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Resource location.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Resource location.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The resource group name of the VirtualWan.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The resource group name of the VirtualWan.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Resource tags.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The type of the VirtualWAN.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The type of the VirtualWAN.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * The name of the VirtualWAN being created or updated.
     * 
     */
    @Import(name="virtualWANName")
    private @Nullable Output<String> virtualWANName;

    /**
     * @return The name of the VirtualWAN being created or updated.
     * 
     */
    public Optional<Output<String>> virtualWANName() {
        return Optional.ofNullable(this.virtualWANName);
    }

    private VirtualWanArgs() {}

    private VirtualWanArgs(VirtualWanArgs $) {
        this.allowBranchToBranchTraffic = $.allowBranchToBranchTraffic;
        this.allowVnetToVnetTraffic = $.allowVnetToVnetTraffic;
        this.disableVpnEncryption = $.disableVpnEncryption;
        this.id = $.id;
        this.location = $.location;
        this.resourceGroupName = $.resourceGroupName;
        this.tags = $.tags;
        this.type = $.type;
        this.virtualWANName = $.virtualWANName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VirtualWanArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VirtualWanArgs $;

        public Builder() {
            $ = new VirtualWanArgs();
        }

        public Builder(VirtualWanArgs defaults) {
            $ = new VirtualWanArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowBranchToBranchTraffic True if branch to branch traffic is allowed.
         * 
         * @return builder
         * 
         */
        public Builder allowBranchToBranchTraffic(@Nullable Output<Boolean> allowBranchToBranchTraffic) {
            $.allowBranchToBranchTraffic = allowBranchToBranchTraffic;
            return this;
        }

        /**
         * @param allowBranchToBranchTraffic True if branch to branch traffic is allowed.
         * 
         * @return builder
         * 
         */
        public Builder allowBranchToBranchTraffic(Boolean allowBranchToBranchTraffic) {
            return allowBranchToBranchTraffic(Output.of(allowBranchToBranchTraffic));
        }

        /**
         * @param allowVnetToVnetTraffic True if Vnet to Vnet traffic is allowed.
         * 
         * @return builder
         * 
         */
        public Builder allowVnetToVnetTraffic(@Nullable Output<Boolean> allowVnetToVnetTraffic) {
            $.allowVnetToVnetTraffic = allowVnetToVnetTraffic;
            return this;
        }

        /**
         * @param allowVnetToVnetTraffic True if Vnet to Vnet traffic is allowed.
         * 
         * @return builder
         * 
         */
        public Builder allowVnetToVnetTraffic(Boolean allowVnetToVnetTraffic) {
            return allowVnetToVnetTraffic(Output.of(allowVnetToVnetTraffic));
        }

        /**
         * @param disableVpnEncryption Vpn encryption to be disabled or not.
         * 
         * @return builder
         * 
         */
        public Builder disableVpnEncryption(@Nullable Output<Boolean> disableVpnEncryption) {
            $.disableVpnEncryption = disableVpnEncryption;
            return this;
        }

        /**
         * @param disableVpnEncryption Vpn encryption to be disabled or not.
         * 
         * @return builder
         * 
         */
        public Builder disableVpnEncryption(Boolean disableVpnEncryption) {
            return disableVpnEncryption(Output.of(disableVpnEncryption));
        }

        /**
         * @param id Resource ID.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id Resource ID.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param location Resource location.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Resource location.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param resourceGroupName The resource group name of the VirtualWan.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The resource group name of the VirtualWan.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param tags Resource tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Resource tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param type The type of the VirtualWAN.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of the VirtualWAN.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param virtualWANName The name of the VirtualWAN being created or updated.
         * 
         * @return builder
         * 
         */
        public Builder virtualWANName(@Nullable Output<String> virtualWANName) {
            $.virtualWANName = virtualWANName;
            return this;
        }

        /**
         * @param virtualWANName The name of the VirtualWAN being created or updated.
         * 
         * @return builder
         * 
         */
        public Builder virtualWANName(String virtualWANName) {
            return virtualWANName(Output.of(virtualWANName));
        }

        public VirtualWanArgs build() {
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
