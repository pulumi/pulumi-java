// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class VirtualWanArgs extends com.pulumi.resources.ResourceArgs {

    public static final VirtualWanArgs Empty = new VirtualWanArgs();

    /**
     * True if branch to branch traffic is allowed.
     * 
     */
    @Import(name="allowBranchToBranchTraffic")
      private final @Nullable Output<Boolean> allowBranchToBranchTraffic;

    public Output<Boolean> allowBranchToBranchTraffic() {
        return this.allowBranchToBranchTraffic == null ? Codegen.empty() : this.allowBranchToBranchTraffic;
    }

    /**
     * True if Vnet to Vnet traffic is allowed.
     * 
     */
    @Import(name="allowVnetToVnetTraffic")
      private final @Nullable Output<Boolean> allowVnetToVnetTraffic;

    public Output<Boolean> allowVnetToVnetTraffic() {
        return this.allowVnetToVnetTraffic == null ? Codegen.empty() : this.allowVnetToVnetTraffic;
    }

    /**
     * Vpn encryption to be disabled or not.
     * 
     */
    @Import(name="disableVpnEncryption")
      private final @Nullable Output<Boolean> disableVpnEncryption;

    public Output<Boolean> disableVpnEncryption() {
        return this.disableVpnEncryption == null ? Codegen.empty() : this.disableVpnEncryption;
    }

    /**
     * Resource ID.
     * 
     */
    @Import(name="id")
      private final @Nullable Output<String> id;

    public Output<String> id() {
        return this.id == null ? Codegen.empty() : this.id;
    }

    /**
     * Resource location.
     * 
     */
    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> location() {
        return this.location == null ? Codegen.empty() : this.location;
    }

    /**
     * The resource group name of the VirtualWan.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    /**
     * The type of the VirtualWAN.
     * 
     */
    @Import(name="type")
      private final @Nullable Output<String> type;

    public Output<String> type() {
        return this.type == null ? Codegen.empty() : this.type;
    }

    /**
     * The name of the VirtualWAN being created or updated.
     * 
     */
    @Import(name="virtualWANName")
      private final @Nullable Output<String> virtualWANName;

    public Output<String> virtualWANName() {
        return this.virtualWANName == null ? Codegen.empty() : this.virtualWANName;
    }

    public VirtualWanArgs(
        @Nullable Output<Boolean> allowBranchToBranchTraffic,
        @Nullable Output<Boolean> allowVnetToVnetTraffic,
        @Nullable Output<Boolean> disableVpnEncryption,
        @Nullable Output<String> id,
        @Nullable Output<String> location,
        Output<String> resourceGroupName,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<String> type,
        @Nullable Output<String> virtualWANName) {
        this.allowBranchToBranchTraffic = allowBranchToBranchTraffic;
        this.allowVnetToVnetTraffic = allowVnetToVnetTraffic;
        this.disableVpnEncryption = disableVpnEncryption;
        this.id = id;
        this.location = location;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.tags = tags;
        this.type = type;
        this.virtualWANName = virtualWANName;
    }

    private VirtualWanArgs() {
        this.allowBranchToBranchTraffic = Codegen.empty();
        this.allowVnetToVnetTraffic = Codegen.empty();
        this.disableVpnEncryption = Codegen.empty();
        this.id = Codegen.empty();
        this.location = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.tags = Codegen.empty();
        this.type = Codegen.empty();
        this.virtualWANName = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VirtualWanArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Boolean> allowBranchToBranchTraffic;
        private @Nullable Output<Boolean> allowVnetToVnetTraffic;
        private @Nullable Output<Boolean> disableVpnEncryption;
        private @Nullable Output<String> id;
        private @Nullable Output<String> location;
        private Output<String> resourceGroupName;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<String> type;
        private @Nullable Output<String> virtualWANName;

        public Builder() {
    	      // Empty
        }

        public Builder(VirtualWanArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowBranchToBranchTraffic = defaults.allowBranchToBranchTraffic;
    	      this.allowVnetToVnetTraffic = defaults.allowVnetToVnetTraffic;
    	      this.disableVpnEncryption = defaults.disableVpnEncryption;
    	      this.id = defaults.id;
    	      this.location = defaults.location;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
    	      this.virtualWANName = defaults.virtualWANName;
        }

        public Builder allowBranchToBranchTraffic(@Nullable Output<Boolean> allowBranchToBranchTraffic) {
            this.allowBranchToBranchTraffic = allowBranchToBranchTraffic;
            return this;
        }
        public Builder allowBranchToBranchTraffic(@Nullable Boolean allowBranchToBranchTraffic) {
            this.allowBranchToBranchTraffic = Codegen.ofNullable(allowBranchToBranchTraffic);
            return this;
        }
        public Builder allowVnetToVnetTraffic(@Nullable Output<Boolean> allowVnetToVnetTraffic) {
            this.allowVnetToVnetTraffic = allowVnetToVnetTraffic;
            return this;
        }
        public Builder allowVnetToVnetTraffic(@Nullable Boolean allowVnetToVnetTraffic) {
            this.allowVnetToVnetTraffic = Codegen.ofNullable(allowVnetToVnetTraffic);
            return this;
        }
        public Builder disableVpnEncryption(@Nullable Output<Boolean> disableVpnEncryption) {
            this.disableVpnEncryption = disableVpnEncryption;
            return this;
        }
        public Builder disableVpnEncryption(@Nullable Boolean disableVpnEncryption) {
            this.disableVpnEncryption = Codegen.ofNullable(disableVpnEncryption);
            return this;
        }
        public Builder id(@Nullable Output<String> id) {
            this.id = id;
            return this;
        }
        public Builder id(@Nullable String id) {
            this.id = Codegen.ofNullable(id);
            return this;
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Codegen.ofNullable(location);
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder type(@Nullable Output<String> type) {
            this.type = type;
            return this;
        }
        public Builder type(@Nullable String type) {
            this.type = Codegen.ofNullable(type);
            return this;
        }
        public Builder virtualWANName(@Nullable Output<String> virtualWANName) {
            this.virtualWANName = virtualWANName;
            return this;
        }
        public Builder virtualWANName(@Nullable String virtualWANName) {
            this.virtualWANName = Codegen.ofNullable(virtualWANName);
            return this;
        }        public VirtualWanArgs build() {
            return new VirtualWanArgs(allowBranchToBranchTraffic, allowVnetToVnetTraffic, disableVpnEncryption, id, location, resourceGroupName, tags, type, virtualWANName);
        }
    }
}
