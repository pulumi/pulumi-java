// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.hybridnetwork.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Network interface IP configuration properties.
 * 
 */
public final class NetworkInterfaceIPConfigurationResponse extends com.pulumi.resources.InvokeArgs {

    public static final NetworkInterfaceIPConfigurationResponse Empty = new NetworkInterfaceIPConfigurationResponse();

    /**
     * The list of DNS servers IP addresses.
     * 
     */
    @Import(name="dnsServers")
    private @Nullable List<String> dnsServers;

    public Optional<List<String>> dnsServers() {
        return Optional.ofNullable(this.dnsServers);
    }

    /**
     * The value of the gateway.
     * 
     */
    @Import(name="gateway")
    private @Nullable String gateway;

    public Optional<String> gateway() {
        return Optional.ofNullable(this.gateway);
    }

    /**
     * The value of the IP address.
     * 
     */
    @Import(name="ipAddress")
    private @Nullable String ipAddress;

    public Optional<String> ipAddress() {
        return Optional.ofNullable(this.ipAddress);
    }

    /**
     * IP address allocation method.
     * 
     */
    @Import(name="ipAllocationMethod")
    private @Nullable String ipAllocationMethod;

    public Optional<String> ipAllocationMethod() {
        return Optional.ofNullable(this.ipAllocationMethod);
    }

    /**
     * IP address version.
     * 
     */
    @Import(name="ipVersion")
    private @Nullable String ipVersion;

    public Optional<String> ipVersion() {
        return Optional.ofNullable(this.ipVersion);
    }

    /**
     * The value of the subnet.
     * 
     */
    @Import(name="subnet")
    private @Nullable String subnet;

    public Optional<String> subnet() {
        return Optional.ofNullable(this.subnet);
    }

    private NetworkInterfaceIPConfigurationResponse() {}

    private NetworkInterfaceIPConfigurationResponse(NetworkInterfaceIPConfigurationResponse $) {
        this.dnsServers = $.dnsServers;
        this.gateway = $.gateway;
        this.ipAddress = $.ipAddress;
        this.ipAllocationMethod = $.ipAllocationMethod;
        this.ipVersion = $.ipVersion;
        this.subnet = $.subnet;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkInterfaceIPConfigurationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkInterfaceIPConfigurationResponse $;

        public Builder() {
            $ = new NetworkInterfaceIPConfigurationResponse();
        }

        public Builder(NetworkInterfaceIPConfigurationResponse defaults) {
            $ = new NetworkInterfaceIPConfigurationResponse(Objects.requireNonNull(defaults));
        }

        public Builder dnsServers(@Nullable List<String> dnsServers) {
            $.dnsServers = dnsServers;
            return this;
        }

        public Builder dnsServers(String... dnsServers) {
            return dnsServers(List.of(dnsServers));
        }

        public Builder gateway(@Nullable String gateway) {
            $.gateway = gateway;
            return this;
        }

        public Builder ipAddress(@Nullable String ipAddress) {
            $.ipAddress = ipAddress;
            return this;
        }

        public Builder ipAllocationMethod(@Nullable String ipAllocationMethod) {
            $.ipAllocationMethod = ipAllocationMethod;
            return this;
        }

        public Builder ipVersion(@Nullable String ipVersion) {
            $.ipVersion = ipVersion;
            return this;
        }

        public Builder subnet(@Nullable String subnet) {
            $.subnet = subnet;
            return this;
        }

        public NetworkInterfaceIPConfigurationResponse build() {
            return $;
        }
    }

}
