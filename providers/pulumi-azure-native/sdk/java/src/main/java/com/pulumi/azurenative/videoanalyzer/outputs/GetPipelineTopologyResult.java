// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.videoanalyzer.outputs;

import com.pulumi.azurenative.videoanalyzer.outputs.EncoderProcessorResponse;
import com.pulumi.azurenative.videoanalyzer.outputs.ParameterDeclarationResponse;
import com.pulumi.azurenative.videoanalyzer.outputs.RtspSourceResponse;
import com.pulumi.azurenative.videoanalyzer.outputs.SkuResponse;
import com.pulumi.azurenative.videoanalyzer.outputs.SystemDataResponse;
import com.pulumi.azurenative.videoanalyzer.outputs.VideoSinkResponse;
import com.pulumi.azurenative.videoanalyzer.outputs.VideoSourceResponse;
import com.pulumi.core.Either;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetPipelineTopologyResult {
    /**
     * An optional description of the pipeline topology. It is recommended that the expected use of the topology to be described here.
     * 
     */
    private final @Nullable String description;
    /**
     * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * 
     */
    private final String id;
    /**
     * Topology kind.
     * 
     */
    private final String kind;
    /**
     * The name of the resource
     * 
     */
    private final String name;
    /**
     * List of the topology parameter declarations. Parameters declared here can be referenced throughout the topology nodes through the use of "${PARAMETER_NAME}" string pattern. Parameters can have optional default values and can later be defined in individual instances of the pipeline.
     * 
     */
    private final @Nullable List<ParameterDeclarationResponse> parameters;
    /**
     * List of the topology processor nodes. Processor nodes enable pipeline data to be analyzed, processed or transformed.
     * 
     */
    private final @Nullable List<EncoderProcessorResponse> processors;
    /**
     * List of the topology sink nodes. Sink nodes allow pipeline data to be stored or exported.
     * 
     */
    private final List<VideoSinkResponse> sinks;
    /**
     * Describes the properties of a SKU.
     * 
     */
    private final SkuResponse sku;
    /**
     * List of the topology source nodes. Source nodes enable external data to be ingested by the pipeline.
     * 
     */
    private final List<Either<RtspSourceResponse,VideoSourceResponse>> sources;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     */
    private final SystemDataResponse systemData;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     * 
     */
    private final String type;

    @CustomType.Constructor
    private GetPipelineTopologyResult(
        @CustomType.Parameter("description") @Nullable String description,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("kind") String kind,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("parameters") @Nullable List<ParameterDeclarationResponse> parameters,
        @CustomType.Parameter("processors") @Nullable List<EncoderProcessorResponse> processors,
        @CustomType.Parameter("sinks") List<VideoSinkResponse> sinks,
        @CustomType.Parameter("sku") SkuResponse sku,
        @CustomType.Parameter("sources") List<Either<RtspSourceResponse,VideoSourceResponse>> sources,
        @CustomType.Parameter("systemData") SystemDataResponse systemData,
        @CustomType.Parameter("type") String type) {
        this.description = description;
        this.id = id;
        this.kind = kind;
        this.name = name;
        this.parameters = parameters;
        this.processors = processors;
        this.sinks = sinks;
        this.sku = sku;
        this.sources = sources;
        this.systemData = systemData;
        this.type = type;
    }

    /**
     * An optional description of the pipeline topology. It is recommended that the expected use of the topology to be described here.
     * 
    */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * 
    */
    public String id() {
        return this.id;
    }
    /**
     * Topology kind.
     * 
    */
    public String kind() {
        return this.kind;
    }
    /**
     * The name of the resource
     * 
    */
    public String name() {
        return this.name;
    }
    /**
     * List of the topology parameter declarations. Parameters declared here can be referenced throughout the topology nodes through the use of "${PARAMETER_NAME}" string pattern. Parameters can have optional default values and can later be defined in individual instances of the pipeline.
     * 
    */
    public List<ParameterDeclarationResponse> parameters() {
        return this.parameters == null ? List.of() : this.parameters;
    }
    /**
     * List of the topology processor nodes. Processor nodes enable pipeline data to be analyzed, processed or transformed.
     * 
    */
    public List<EncoderProcessorResponse> processors() {
        return this.processors == null ? List.of() : this.processors;
    }
    /**
     * List of the topology sink nodes. Sink nodes allow pipeline data to be stored or exported.
     * 
    */
    public List<VideoSinkResponse> sinks() {
        return this.sinks;
    }
    /**
     * Describes the properties of a SKU.
     * 
    */
    public SkuResponse sku() {
        return this.sku;
    }
    /**
     * List of the topology source nodes. Source nodes enable external data to be ingested by the pipeline.
     * 
    */
    public List<Either<RtspSourceResponse,VideoSourceResponse>> sources() {
        return this.sources;
    }
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
    */
    public SystemDataResponse systemData() {
        return this.systemData;
    }
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     * 
    */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPipelineTopologyResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String description;
        private String id;
        private String kind;
        private String name;
        private @Nullable List<ParameterDeclarationResponse> parameters;
        private @Nullable List<EncoderProcessorResponse> processors;
        private List<VideoSinkResponse> sinks;
        private SkuResponse sku;
        private List<Either<RtspSourceResponse,VideoSourceResponse>> sources;
        private SystemDataResponse systemData;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(GetPipelineTopologyResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.kind = defaults.kind;
    	      this.name = defaults.name;
    	      this.parameters = defaults.parameters;
    	      this.processors = defaults.processors;
    	      this.sinks = defaults.sinks;
    	      this.sku = defaults.sku;
    	      this.sources = defaults.sources;
    	      this.systemData = defaults.systemData;
    	      this.type = defaults.type;
        }

        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder kind(String kind) {
            this.kind = Objects.requireNonNull(kind);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder parameters(@Nullable List<ParameterDeclarationResponse> parameters) {
            this.parameters = parameters;
            return this;
        }
        public Builder parameters(ParameterDeclarationResponse... parameters) {
            return parameters(List.of(parameters));
        }
        public Builder processors(@Nullable List<EncoderProcessorResponse> processors) {
            this.processors = processors;
            return this;
        }
        public Builder processors(EncoderProcessorResponse... processors) {
            return processors(List.of(processors));
        }
        public Builder sinks(List<VideoSinkResponse> sinks) {
            this.sinks = Objects.requireNonNull(sinks);
            return this;
        }
        public Builder sinks(VideoSinkResponse... sinks) {
            return sinks(List.of(sinks));
        }
        public Builder sku(SkuResponse sku) {
            this.sku = Objects.requireNonNull(sku);
            return this;
        }
        public Builder sources(List<Either<RtspSourceResponse,VideoSourceResponse>> sources) {
            this.sources = Objects.requireNonNull(sources);
            return this;
        }
        public Builder sources(Either<RtspSourceResponse,VideoSourceResponse>... sources) {
            return sources(List.of(sources));
        }
        public Builder systemData(SystemDataResponse systemData) {
            this.systemData = Objects.requireNonNull(systemData);
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }        public GetPipelineTopologyResult build() {
            return new GetPipelineTopologyResult(description, id, kind, name, parameters, processors, sinks, sku, sources, systemData, type);
        }
    }
}
