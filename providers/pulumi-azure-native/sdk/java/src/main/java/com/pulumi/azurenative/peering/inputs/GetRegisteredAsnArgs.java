// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.peering.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class GetRegisteredAsnArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetRegisteredAsnArgs Empty = new GetRegisteredAsnArgs();

    /**
     * The name of the peering.
     * 
     */
    @Import(name="peeringName", required=true)
    private Output<String> peeringName;

    /**
     * @return The name of the peering.
     * 
     */
    public Output<String> peeringName() {
        return this.peeringName;
    }

    /**
     * The name of the registered ASN.
     * 
     */
    @Import(name="registeredAsnName", required=true)
    private Output<String> registeredAsnName;

    /**
     * @return The name of the registered ASN.
     * 
     */
    public Output<String> registeredAsnName() {
        return this.registeredAsnName;
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    private GetRegisteredAsnArgs() {}

    private GetRegisteredAsnArgs(GetRegisteredAsnArgs $) {
        this.peeringName = $.peeringName;
        this.registeredAsnName = $.registeredAsnName;
        this.resourceGroupName = $.resourceGroupName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetRegisteredAsnArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetRegisteredAsnArgs $;

        public Builder() {
            $ = new GetRegisteredAsnArgs();
        }

        public Builder(GetRegisteredAsnArgs defaults) {
            $ = new GetRegisteredAsnArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param peeringName The name of the peering.
         * 
         * @return builder
         * 
         */
        public Builder peeringName(Output<String> peeringName) {
            $.peeringName = peeringName;
            return this;
        }

        /**
         * @param peeringName The name of the peering.
         * 
         * @return builder
         * 
         */
        public Builder peeringName(String peeringName) {
            return peeringName(Output.of(peeringName));
        }

        /**
         * @param registeredAsnName The name of the registered ASN.
         * 
         * @return builder
         * 
         */
        public Builder registeredAsnName(Output<String> registeredAsnName) {
            $.registeredAsnName = registeredAsnName;
            return this;
        }

        /**
         * @param registeredAsnName The name of the registered ASN.
         * 
         * @return builder
         * 
         */
        public Builder registeredAsnName(String registeredAsnName) {
            return registeredAsnName(Output.of(registeredAsnName));
        }

        /**
         * @param resourceGroupName The name of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public GetRegisteredAsnArgs build() {
            $.peeringName = Objects.requireNonNull($.peeringName, "expected parameter 'peeringName' to be non-null");
            $.registeredAsnName = Objects.requireNonNull($.registeredAsnName, "expected parameter 'registeredAsnName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
