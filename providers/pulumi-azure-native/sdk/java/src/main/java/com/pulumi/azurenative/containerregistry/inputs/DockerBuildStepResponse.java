// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.containerregistry.inputs;

import com.pulumi.azurenative.containerregistry.inputs.ArgumentResponse;
import com.pulumi.azurenative.containerregistry.inputs.BaseImageDependencyResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The Docker build step.
 * 
 */
public final class DockerBuildStepResponse extends com.pulumi.resources.InvokeArgs {

    public static final DockerBuildStepResponse Empty = new DockerBuildStepResponse();

    /**
     * The collection of override arguments to be used when executing this build step.
     * 
     */
    @Import(name="arguments")
    private @Nullable List<ArgumentResponse> arguments;

    public Optional<List<ArgumentResponse>> arguments() {
        return Optional.ofNullable(this.arguments);
    }

    /**
     * List of base image dependencies for a step.
     * 
     */
    @Import(name="baseImageDependencies", required=true)
    private List<BaseImageDependencyResponse> baseImageDependencies;

    public List<BaseImageDependencyResponse> baseImageDependencies() {
        return this.baseImageDependencies;
    }

    /**
     * The token (git PAT or SAS token of storage account blob) associated with the context for a step.
     * 
     */
    @Import(name="contextAccessToken")
    private @Nullable String contextAccessToken;

    public Optional<String> contextAccessToken() {
        return Optional.ofNullable(this.contextAccessToken);
    }

    /**
     * The URL(absolute or relative) of the source context for the task step.
     * 
     */
    @Import(name="contextPath")
    private @Nullable String contextPath;

    public Optional<String> contextPath() {
        return Optional.ofNullable(this.contextPath);
    }

    /**
     * The Docker file path relative to the source context.
     * 
     */
    @Import(name="dockerFilePath", required=true)
    private String dockerFilePath;

    public String dockerFilePath() {
        return this.dockerFilePath;
    }

    /**
     * The fully qualified image names including the repository and tag.
     * 
     */
    @Import(name="imageNames")
    private @Nullable List<String> imageNames;

    public Optional<List<String>> imageNames() {
        return Optional.ofNullable(this.imageNames);
    }

    /**
     * The value of this property indicates whether the image built should be pushed to the registry or not.
     * 
     */
    @Import(name="isPushEnabled")
    private @Nullable Boolean isPushEnabled;

    public Optional<Boolean> isPushEnabled() {
        return Optional.ofNullable(this.isPushEnabled);
    }

    /**
     * The value of this property indicates whether the image cache is enabled or not.
     * 
     */
    @Import(name="noCache")
    private @Nullable Boolean noCache;

    public Optional<Boolean> noCache() {
        return Optional.ofNullable(this.noCache);
    }

    /**
     * The name of the target build stage for the docker build.
     * 
     */
    @Import(name="target")
    private @Nullable String target;

    public Optional<String> target() {
        return Optional.ofNullable(this.target);
    }

    /**
     * The type of the step.
     * Expected value is &#39;Docker&#39;.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    public String type() {
        return this.type;
    }

    private DockerBuildStepResponse() {}

    private DockerBuildStepResponse(DockerBuildStepResponse $) {
        this.arguments = $.arguments;
        this.baseImageDependencies = $.baseImageDependencies;
        this.contextAccessToken = $.contextAccessToken;
        this.contextPath = $.contextPath;
        this.dockerFilePath = $.dockerFilePath;
        this.imageNames = $.imageNames;
        this.isPushEnabled = $.isPushEnabled;
        this.noCache = $.noCache;
        this.target = $.target;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DockerBuildStepResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DockerBuildStepResponse $;

        public Builder() {
            $ = new DockerBuildStepResponse();
        }

        public Builder(DockerBuildStepResponse defaults) {
            $ = new DockerBuildStepResponse(Objects.requireNonNull(defaults));
        }

        public Builder arguments(@Nullable List<ArgumentResponse> arguments) {
            $.arguments = arguments;
            return this;
        }

        public Builder arguments(ArgumentResponse... arguments) {
            return arguments(List.of(arguments));
        }

        public Builder baseImageDependencies(List<BaseImageDependencyResponse> baseImageDependencies) {
            $.baseImageDependencies = baseImageDependencies;
            return this;
        }

        public Builder baseImageDependencies(BaseImageDependencyResponse... baseImageDependencies) {
            return baseImageDependencies(List.of(baseImageDependencies));
        }

        public Builder contextAccessToken(@Nullable String contextAccessToken) {
            $.contextAccessToken = contextAccessToken;
            return this;
        }

        public Builder contextPath(@Nullable String contextPath) {
            $.contextPath = contextPath;
            return this;
        }

        public Builder dockerFilePath(String dockerFilePath) {
            $.dockerFilePath = dockerFilePath;
            return this;
        }

        public Builder imageNames(@Nullable List<String> imageNames) {
            $.imageNames = imageNames;
            return this;
        }

        public Builder imageNames(String... imageNames) {
            return imageNames(List.of(imageNames));
        }

        public Builder isPushEnabled(@Nullable Boolean isPushEnabled) {
            $.isPushEnabled = isPushEnabled;
            return this;
        }

        public Builder noCache(@Nullable Boolean noCache) {
            $.noCache = noCache;
            return this;
        }

        public Builder target(@Nullable String target) {
            $.target = target;
            return this;
        }

        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public DockerBuildStepResponse build() {
            $.baseImageDependencies = Objects.requireNonNull($.baseImageDependencies, "expected parameter 'baseImageDependencies' to be non-null");
            $.dockerFilePath = Objects.requireNonNull($.dockerFilePath, "expected parameter 'dockerFilePath' to be non-null");
            $.isPushEnabled = Codegen.booleanProp("isPushEnabled").arg($.isPushEnabled).def(true).getNullable();
            $.noCache = Codegen.booleanProp("noCache").arg($.noCache).def(false).getNullable();
            $.type = Codegen.stringProp("type").arg($.type).require();
            return $;
        }
    }

}
