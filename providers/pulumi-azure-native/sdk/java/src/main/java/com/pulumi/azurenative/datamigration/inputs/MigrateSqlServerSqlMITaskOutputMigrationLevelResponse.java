// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datamigration.inputs;

import com.pulumi.azurenative.datamigration.inputs.OrphanedUserInfoResponse;
import com.pulumi.azurenative.datamigration.inputs.ReportableExceptionResponse;
import com.pulumi.azurenative.datamigration.inputs.StartMigrationScenarioServerRoleResultResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;


public final class MigrateSqlServerSqlMITaskOutputMigrationLevelResponse extends com.pulumi.resources.InvokeArgs {

    public static final MigrateSqlServerSqlMITaskOutputMigrationLevelResponse Empty = new MigrateSqlServerSqlMITaskOutputMigrationLevelResponse();

    /**
     * Selected agent jobs as a map from name to id
     * 
     */
    @Import(name="agentJobs", required=true)
    private Map<String,String> agentJobs;

    /**
     * @return Selected agent jobs as a map from name to id
     * 
     */
    public Map<String,String> agentJobs() {
        return this.agentJobs;
    }

    /**
     * Selected databases as a map from database name to database id
     * 
     */
    @Import(name="databases", required=true)
    private Map<String,String> databases;

    /**
     * @return Selected databases as a map from database name to database id
     * 
     */
    public Map<String,String> databases() {
        return this.databases;
    }

    /**
     * Migration end time
     * 
     */
    @Import(name="endedOn", required=true)
    private String endedOn;

    /**
     * @return Migration end time
     * 
     */
    public String endedOn() {
        return this.endedOn;
    }

    /**
     * Migration exceptions and warnings.
     * 
     */
    @Import(name="exceptionsAndWarnings", required=true)
    private List<ReportableExceptionResponse> exceptionsAndWarnings;

    /**
     * @return Migration exceptions and warnings.
     * 
     */
    public List<ReportableExceptionResponse> exceptionsAndWarnings() {
        return this.exceptionsAndWarnings;
    }

    /**
     * Result identifier
     * 
     */
    @Import(name="id", required=true)
    private String id;

    /**
     * @return Result identifier
     * 
     */
    public String id() {
        return this.id;
    }

    /**
     * Selected logins as a map from name to id
     * 
     */
    @Import(name="logins", required=true)
    private Map<String,String> logins;

    /**
     * @return Selected logins as a map from name to id
     * 
     */
    public Map<String,String> logins() {
        return this.logins;
    }

    /**
     * Migration progress message
     * 
     */
    @Import(name="message", required=true)
    private String message;

    /**
     * @return Migration progress message
     * 
     */
    public String message() {
        return this.message;
    }

    /**
     * List of orphaned users.
     * 
     */
    @Import(name="orphanedUsersInfo", required=true)
    private List<OrphanedUserInfoResponse> orphanedUsersInfo;

    /**
     * @return List of orphaned users.
     * 
     */
    public List<OrphanedUserInfoResponse> orphanedUsersInfo() {
        return this.orphanedUsersInfo;
    }

    /**
     * Result type
     * Expected value is &#39;MigrationLevelOutput&#39;.
     * 
     */
    @Import(name="resultType", required=true)
    private String resultType;

    /**
     * @return Result type
     * Expected value is &#39;MigrationLevelOutput&#39;.
     * 
     */
    public String resultType() {
        return this.resultType;
    }

    /**
     * Map of server role migration results.
     * 
     */
    @Import(name="serverRoleResults", required=true)
    private Map<String,StartMigrationScenarioServerRoleResultResponse> serverRoleResults;

    /**
     * @return Map of server role migration results.
     * 
     */
    public Map<String,StartMigrationScenarioServerRoleResultResponse> serverRoleResults() {
        return this.serverRoleResults;
    }

    /**
     * Source server brand version
     * 
     */
    @Import(name="sourceServerBrandVersion", required=true)
    private String sourceServerBrandVersion;

    /**
     * @return Source server brand version
     * 
     */
    public String sourceServerBrandVersion() {
        return this.sourceServerBrandVersion;
    }

    /**
     * Source server version
     * 
     */
    @Import(name="sourceServerVersion", required=true)
    private String sourceServerVersion;

    /**
     * @return Source server version
     * 
     */
    public String sourceServerVersion() {
        return this.sourceServerVersion;
    }

    /**
     * Migration start time
     * 
     */
    @Import(name="startedOn", required=true)
    private String startedOn;

    /**
     * @return Migration start time
     * 
     */
    public String startedOn() {
        return this.startedOn;
    }

    /**
     * Current state of migration
     * 
     */
    @Import(name="state", required=true)
    private String state;

    /**
     * @return Current state of migration
     * 
     */
    public String state() {
        return this.state;
    }

    /**
     * Current status of migration
     * 
     */
    @Import(name="status", required=true)
    private String status;

    /**
     * @return Current status of migration
     * 
     */
    public String status() {
        return this.status;
    }

    /**
     * Target server brand version
     * 
     */
    @Import(name="targetServerBrandVersion", required=true)
    private String targetServerBrandVersion;

    /**
     * @return Target server brand version
     * 
     */
    public String targetServerBrandVersion() {
        return this.targetServerBrandVersion;
    }

    /**
     * Target server version
     * 
     */
    @Import(name="targetServerVersion", required=true)
    private String targetServerVersion;

    /**
     * @return Target server version
     * 
     */
    public String targetServerVersion() {
        return this.targetServerVersion;
    }

    private MigrateSqlServerSqlMITaskOutputMigrationLevelResponse() {}

    private MigrateSqlServerSqlMITaskOutputMigrationLevelResponse(MigrateSqlServerSqlMITaskOutputMigrationLevelResponse $) {
        this.agentJobs = $.agentJobs;
        this.databases = $.databases;
        this.endedOn = $.endedOn;
        this.exceptionsAndWarnings = $.exceptionsAndWarnings;
        this.id = $.id;
        this.logins = $.logins;
        this.message = $.message;
        this.orphanedUsersInfo = $.orphanedUsersInfo;
        this.resultType = $.resultType;
        this.serverRoleResults = $.serverRoleResults;
        this.sourceServerBrandVersion = $.sourceServerBrandVersion;
        this.sourceServerVersion = $.sourceServerVersion;
        this.startedOn = $.startedOn;
        this.state = $.state;
        this.status = $.status;
        this.targetServerBrandVersion = $.targetServerBrandVersion;
        this.targetServerVersion = $.targetServerVersion;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MigrateSqlServerSqlMITaskOutputMigrationLevelResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MigrateSqlServerSqlMITaskOutputMigrationLevelResponse $;

        public Builder() {
            $ = new MigrateSqlServerSqlMITaskOutputMigrationLevelResponse();
        }

        public Builder(MigrateSqlServerSqlMITaskOutputMigrationLevelResponse defaults) {
            $ = new MigrateSqlServerSqlMITaskOutputMigrationLevelResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param agentJobs Selected agent jobs as a map from name to id
         * 
         * @return builder
         * 
         */
        public Builder agentJobs(Map<String,String> agentJobs) {
            $.agentJobs = agentJobs;
            return this;
        }

        /**
         * @param databases Selected databases as a map from database name to database id
         * 
         * @return builder
         * 
         */
        public Builder databases(Map<String,String> databases) {
            $.databases = databases;
            return this;
        }

        /**
         * @param endedOn Migration end time
         * 
         * @return builder
         * 
         */
        public Builder endedOn(String endedOn) {
            $.endedOn = endedOn;
            return this;
        }

        /**
         * @param exceptionsAndWarnings Migration exceptions and warnings.
         * 
         * @return builder
         * 
         */
        public Builder exceptionsAndWarnings(List<ReportableExceptionResponse> exceptionsAndWarnings) {
            $.exceptionsAndWarnings = exceptionsAndWarnings;
            return this;
        }

        /**
         * @param exceptionsAndWarnings Migration exceptions and warnings.
         * 
         * @return builder
         * 
         */
        public Builder exceptionsAndWarnings(ReportableExceptionResponse... exceptionsAndWarnings) {
            return exceptionsAndWarnings(List.of(exceptionsAndWarnings));
        }

        /**
         * @param id Result identifier
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            $.id = id;
            return this;
        }

        /**
         * @param logins Selected logins as a map from name to id
         * 
         * @return builder
         * 
         */
        public Builder logins(Map<String,String> logins) {
            $.logins = logins;
            return this;
        }

        /**
         * @param message Migration progress message
         * 
         * @return builder
         * 
         */
        public Builder message(String message) {
            $.message = message;
            return this;
        }

        /**
         * @param orphanedUsersInfo List of orphaned users.
         * 
         * @return builder
         * 
         */
        public Builder orphanedUsersInfo(List<OrphanedUserInfoResponse> orphanedUsersInfo) {
            $.orphanedUsersInfo = orphanedUsersInfo;
            return this;
        }

        /**
         * @param orphanedUsersInfo List of orphaned users.
         * 
         * @return builder
         * 
         */
        public Builder orphanedUsersInfo(OrphanedUserInfoResponse... orphanedUsersInfo) {
            return orphanedUsersInfo(List.of(orphanedUsersInfo));
        }

        /**
         * @param resultType Result type
         * Expected value is &#39;MigrationLevelOutput&#39;.
         * 
         * @return builder
         * 
         */
        public Builder resultType(String resultType) {
            $.resultType = resultType;
            return this;
        }

        /**
         * @param serverRoleResults Map of server role migration results.
         * 
         * @return builder
         * 
         */
        public Builder serverRoleResults(Map<String,StartMigrationScenarioServerRoleResultResponse> serverRoleResults) {
            $.serverRoleResults = serverRoleResults;
            return this;
        }

        /**
         * @param sourceServerBrandVersion Source server brand version
         * 
         * @return builder
         * 
         */
        public Builder sourceServerBrandVersion(String sourceServerBrandVersion) {
            $.sourceServerBrandVersion = sourceServerBrandVersion;
            return this;
        }

        /**
         * @param sourceServerVersion Source server version
         * 
         * @return builder
         * 
         */
        public Builder sourceServerVersion(String sourceServerVersion) {
            $.sourceServerVersion = sourceServerVersion;
            return this;
        }

        /**
         * @param startedOn Migration start time
         * 
         * @return builder
         * 
         */
        public Builder startedOn(String startedOn) {
            $.startedOn = startedOn;
            return this;
        }

        /**
         * @param state Current state of migration
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            $.state = state;
            return this;
        }

        /**
         * @param status Current status of migration
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            $.status = status;
            return this;
        }

        /**
         * @param targetServerBrandVersion Target server brand version
         * 
         * @return builder
         * 
         */
        public Builder targetServerBrandVersion(String targetServerBrandVersion) {
            $.targetServerBrandVersion = targetServerBrandVersion;
            return this;
        }

        /**
         * @param targetServerVersion Target server version
         * 
         * @return builder
         * 
         */
        public Builder targetServerVersion(String targetServerVersion) {
            $.targetServerVersion = targetServerVersion;
            return this;
        }

        public MigrateSqlServerSqlMITaskOutputMigrationLevelResponse build() {
            $.agentJobs = Objects.requireNonNull($.agentJobs, "expected parameter 'agentJobs' to be non-null");
            $.databases = Objects.requireNonNull($.databases, "expected parameter 'databases' to be non-null");
            $.endedOn = Objects.requireNonNull($.endedOn, "expected parameter 'endedOn' to be non-null");
            $.exceptionsAndWarnings = Objects.requireNonNull($.exceptionsAndWarnings, "expected parameter 'exceptionsAndWarnings' to be non-null");
            $.id = Objects.requireNonNull($.id, "expected parameter 'id' to be non-null");
            $.logins = Objects.requireNonNull($.logins, "expected parameter 'logins' to be non-null");
            $.message = Objects.requireNonNull($.message, "expected parameter 'message' to be non-null");
            $.orphanedUsersInfo = Objects.requireNonNull($.orphanedUsersInfo, "expected parameter 'orphanedUsersInfo' to be non-null");
            $.resultType = Codegen.stringProp("resultType").arg($.resultType).require();
            $.serverRoleResults = Objects.requireNonNull($.serverRoleResults, "expected parameter 'serverRoleResults' to be non-null");
            $.sourceServerBrandVersion = Objects.requireNonNull($.sourceServerBrandVersion, "expected parameter 'sourceServerBrandVersion' to be non-null");
            $.sourceServerVersion = Objects.requireNonNull($.sourceServerVersion, "expected parameter 'sourceServerVersion' to be non-null");
            $.startedOn = Objects.requireNonNull($.startedOn, "expected parameter 'startedOn' to be non-null");
            $.state = Objects.requireNonNull($.state, "expected parameter 'state' to be non-null");
            $.status = Objects.requireNonNull($.status, "expected parameter 'status' to be non-null");
            $.targetServerBrandVersion = Objects.requireNonNull($.targetServerBrandVersion, "expected parameter 'targetServerBrandVersion' to be non-null");
            $.targetServerVersion = Objects.requireNonNull($.targetServerVersion, "expected parameter 'targetServerVersion' to be non-null");
            return $;
        }
    }

}
