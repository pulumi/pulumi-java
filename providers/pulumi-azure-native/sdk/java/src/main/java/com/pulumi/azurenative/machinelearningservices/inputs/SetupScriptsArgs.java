// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.machinelearningservices.inputs;

import com.pulumi.azurenative.machinelearningservices.inputs.ScriptsToExecuteArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Details of customized scripts to execute for setting up the cluster.
 * 
 */
public final class SetupScriptsArgs extends com.pulumi.resources.ResourceArgs {

    public static final SetupScriptsArgs Empty = new SetupScriptsArgs();

    /**
     * Customized setup scripts
     * 
     */
    @Import(name="scripts")
    private @Nullable Output<ScriptsToExecuteArgs> scripts;

    /**
     * @return Customized setup scripts
     * 
     */
    public Optional<Output<ScriptsToExecuteArgs>> scripts() {
        return Optional.ofNullable(this.scripts);
    }

    private SetupScriptsArgs() {}

    private SetupScriptsArgs(SetupScriptsArgs $) {
        this.scripts = $.scripts;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SetupScriptsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SetupScriptsArgs $;

        public Builder() {
            $ = new SetupScriptsArgs();
        }

        public Builder(SetupScriptsArgs defaults) {
            $ = new SetupScriptsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param scripts Customized setup scripts
         * 
         * @return builder
         * 
         */
        public Builder scripts(@Nullable Output<ScriptsToExecuteArgs> scripts) {
            $.scripts = scripts;
            return this;
        }

        /**
         * @param scripts Customized setup scripts
         * 
         * @return builder
         * 
         */
        public Builder scripts(ScriptsToExecuteArgs scripts) {
            return scripts(Output.of(scripts));
        }

        public SetupScriptsArgs build() {
            return $;
        }
    }

}
