// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.certificateregistration.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


/**
 * SSL certificate details.
 * 
 */
public final class CertificateDetailsResponse extends com.pulumi.resources.InvokeArgs {

    public static final CertificateDetailsResponse Empty = new CertificateDetailsResponse();

    /**
     * Certificate Issuer.
     * 
     */
    @Import(name="issuer", required=true)
    private String issuer;

    public String issuer() {
        return this.issuer;
    }

    /**
     * Date Certificate is valid to.
     * 
     */
    @Import(name="notAfter", required=true)
    private String notAfter;

    public String notAfter() {
        return this.notAfter;
    }

    /**
     * Date Certificate is valid from.
     * 
     */
    @Import(name="notBefore", required=true)
    private String notBefore;

    public String notBefore() {
        return this.notBefore;
    }

    /**
     * Raw certificate data.
     * 
     */
    @Import(name="rawData", required=true)
    private String rawData;

    public String rawData() {
        return this.rawData;
    }

    /**
     * Certificate Serial Number.
     * 
     */
    @Import(name="serialNumber", required=true)
    private String serialNumber;

    public String serialNumber() {
        return this.serialNumber;
    }

    /**
     * Certificate Signature algorithm.
     * 
     */
    @Import(name="signatureAlgorithm", required=true)
    private String signatureAlgorithm;

    public String signatureAlgorithm() {
        return this.signatureAlgorithm;
    }

    /**
     * Certificate Subject.
     * 
     */
    @Import(name="subject", required=true)
    private String subject;

    public String subject() {
        return this.subject;
    }

    /**
     * Certificate Thumbprint.
     * 
     */
    @Import(name="thumbprint", required=true)
    private String thumbprint;

    public String thumbprint() {
        return this.thumbprint;
    }

    /**
     * Certificate Version.
     * 
     */
    @Import(name="version", required=true)
    private Integer version;

    public Integer version() {
        return this.version;
    }

    private CertificateDetailsResponse() {}

    private CertificateDetailsResponse(CertificateDetailsResponse $) {
        this.issuer = $.issuer;
        this.notAfter = $.notAfter;
        this.notBefore = $.notBefore;
        this.rawData = $.rawData;
        this.serialNumber = $.serialNumber;
        this.signatureAlgorithm = $.signatureAlgorithm;
        this.subject = $.subject;
        this.thumbprint = $.thumbprint;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CertificateDetailsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CertificateDetailsResponse $;

        public Builder() {
            $ = new CertificateDetailsResponse();
        }

        public Builder(CertificateDetailsResponse defaults) {
            $ = new CertificateDetailsResponse(Objects.requireNonNull(defaults));
        }

        public Builder issuer(String issuer) {
            $.issuer = issuer;
            return this;
        }

        public Builder notAfter(String notAfter) {
            $.notAfter = notAfter;
            return this;
        }

        public Builder notBefore(String notBefore) {
            $.notBefore = notBefore;
            return this;
        }

        public Builder rawData(String rawData) {
            $.rawData = rawData;
            return this;
        }

        public Builder serialNumber(String serialNumber) {
            $.serialNumber = serialNumber;
            return this;
        }

        public Builder signatureAlgorithm(String signatureAlgorithm) {
            $.signatureAlgorithm = signatureAlgorithm;
            return this;
        }

        public Builder subject(String subject) {
            $.subject = subject;
            return this;
        }

        public Builder thumbprint(String thumbprint) {
            $.thumbprint = thumbprint;
            return this;
        }

        public Builder version(Integer version) {
            $.version = version;
            return this;
        }

        public CertificateDetailsResponse build() {
            $.issuer = Objects.requireNonNull($.issuer, "expected parameter 'issuer' to be non-null");
            $.notAfter = Objects.requireNonNull($.notAfter, "expected parameter 'notAfter' to be non-null");
            $.notBefore = Objects.requireNonNull($.notBefore, "expected parameter 'notBefore' to be non-null");
            $.rawData = Objects.requireNonNull($.rawData, "expected parameter 'rawData' to be non-null");
            $.serialNumber = Objects.requireNonNull($.serialNumber, "expected parameter 'serialNumber' to be non-null");
            $.signatureAlgorithm = Objects.requireNonNull($.signatureAlgorithm, "expected parameter 'signatureAlgorithm' to be non-null");
            $.subject = Objects.requireNonNull($.subject, "expected parameter 'subject' to be non-null");
            $.thumbprint = Objects.requireNonNull($.thumbprint, "expected parameter 'thumbprint' to be non-null");
            $.version = Objects.requireNonNull($.version, "expected parameter 'version' to be non-null");
            return $;
        }
    }

}
