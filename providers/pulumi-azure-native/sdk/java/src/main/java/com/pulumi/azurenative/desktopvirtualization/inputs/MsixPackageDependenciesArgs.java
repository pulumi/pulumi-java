// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.desktopvirtualization.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Schema for MSIX Package Dependencies properties.
 * 
 */
public final class MsixPackageDependenciesArgs extends com.pulumi.resources.ResourceArgs {

    public static final MsixPackageDependenciesArgs Empty = new MsixPackageDependenciesArgs();

    /**
     * Name of package dependency.
     * 
     */
    @Import(name="dependencyName")
    private @Nullable Output<String> dependencyName;

    /**
     * @return Name of package dependency.
     * 
     */
    public Optional<Output<String>> dependencyName() {
        return Optional.ofNullable(this.dependencyName);
    }

    /**
     * Dependency version required.
     * 
     */
    @Import(name="minVersion")
    private @Nullable Output<String> minVersion;

    /**
     * @return Dependency version required.
     * 
     */
    public Optional<Output<String>> minVersion() {
        return Optional.ofNullable(this.minVersion);
    }

    /**
     * Name of dependency publisher.
     * 
     */
    @Import(name="publisher")
    private @Nullable Output<String> publisher;

    /**
     * @return Name of dependency publisher.
     * 
     */
    public Optional<Output<String>> publisher() {
        return Optional.ofNullable(this.publisher);
    }

    private MsixPackageDependenciesArgs() {}

    private MsixPackageDependenciesArgs(MsixPackageDependenciesArgs $) {
        this.dependencyName = $.dependencyName;
        this.minVersion = $.minVersion;
        this.publisher = $.publisher;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MsixPackageDependenciesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MsixPackageDependenciesArgs $;

        public Builder() {
            $ = new MsixPackageDependenciesArgs();
        }

        public Builder(MsixPackageDependenciesArgs defaults) {
            $ = new MsixPackageDependenciesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dependencyName Name of package dependency.
         * 
         * @return builder
         * 
         */
        public Builder dependencyName(@Nullable Output<String> dependencyName) {
            $.dependencyName = dependencyName;
            return this;
        }

        /**
         * @param dependencyName Name of package dependency.
         * 
         * @return builder
         * 
         */
        public Builder dependencyName(String dependencyName) {
            return dependencyName(Output.of(dependencyName));
        }

        /**
         * @param minVersion Dependency version required.
         * 
         * @return builder
         * 
         */
        public Builder minVersion(@Nullable Output<String> minVersion) {
            $.minVersion = minVersion;
            return this;
        }

        /**
         * @param minVersion Dependency version required.
         * 
         * @return builder
         * 
         */
        public Builder minVersion(String minVersion) {
            return minVersion(Output.of(minVersion));
        }

        /**
         * @param publisher Name of dependency publisher.
         * 
         * @return builder
         * 
         */
        public Builder publisher(@Nullable Output<String> publisher) {
            $.publisher = publisher;
            return this;
        }

        /**
         * @param publisher Name of dependency publisher.
         * 
         * @return builder
         * 
         */
        public Builder publisher(String publisher) {
            return publisher(Output.of(publisher));
        }

        public MsixPackageDependenciesArgs build() {
            return $;
        }
    }

}
