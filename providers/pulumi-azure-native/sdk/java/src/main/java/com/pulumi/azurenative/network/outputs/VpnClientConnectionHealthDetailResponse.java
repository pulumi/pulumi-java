// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class VpnClientConnectionHealthDetailResponse {
    /**
     * The egress bytes per second.
     * 
     */
    private final Double egressBytesTransferred;
    /**
     * The egress packets per second.
     * 
     */
    private final Double egressPacketsTransferred;
    /**
     * The ingress bytes per second.
     * 
     */
    private final Double ingressBytesTransferred;
    /**
     * The ingress packets per second.
     * 
     */
    private final Double ingressPacketsTransferred;
    /**
     * The max band width.
     * 
     */
    private final Double maxBandwidth;
    /**
     * The max packets transferred per second.
     * 
     */
    private final Double maxPacketsPerSecond;
    /**
     * The assigned private Ip of a connected vpn client.
     * 
     */
    private final String privateIpAddress;
    /**
     * The public Ip of a connected vpn client.
     * 
     */
    private final String publicIpAddress;
    /**
     * The duration time of a connected vpn client.
     * 
     */
    private final Double vpnConnectionDuration;
    /**
     * The vpn client Id.
     * 
     */
    private final String vpnConnectionId;
    /**
     * The start time of a connected vpn client.
     * 
     */
    private final String vpnConnectionTime;
    /**
     * The user name of a connected vpn client.
     * 
     */
    private final String vpnUserName;

    @CustomType.Constructor
    private VpnClientConnectionHealthDetailResponse(
        @CustomType.Parameter("egressBytesTransferred") Double egressBytesTransferred,
        @CustomType.Parameter("egressPacketsTransferred") Double egressPacketsTransferred,
        @CustomType.Parameter("ingressBytesTransferred") Double ingressBytesTransferred,
        @CustomType.Parameter("ingressPacketsTransferred") Double ingressPacketsTransferred,
        @CustomType.Parameter("maxBandwidth") Double maxBandwidth,
        @CustomType.Parameter("maxPacketsPerSecond") Double maxPacketsPerSecond,
        @CustomType.Parameter("privateIpAddress") String privateIpAddress,
        @CustomType.Parameter("publicIpAddress") String publicIpAddress,
        @CustomType.Parameter("vpnConnectionDuration") Double vpnConnectionDuration,
        @CustomType.Parameter("vpnConnectionId") String vpnConnectionId,
        @CustomType.Parameter("vpnConnectionTime") String vpnConnectionTime,
        @CustomType.Parameter("vpnUserName") String vpnUserName) {
        this.egressBytesTransferred = egressBytesTransferred;
        this.egressPacketsTransferred = egressPacketsTransferred;
        this.ingressBytesTransferred = ingressBytesTransferred;
        this.ingressPacketsTransferred = ingressPacketsTransferred;
        this.maxBandwidth = maxBandwidth;
        this.maxPacketsPerSecond = maxPacketsPerSecond;
        this.privateIpAddress = privateIpAddress;
        this.publicIpAddress = publicIpAddress;
        this.vpnConnectionDuration = vpnConnectionDuration;
        this.vpnConnectionId = vpnConnectionId;
        this.vpnConnectionTime = vpnConnectionTime;
        this.vpnUserName = vpnUserName;
    }

    /**
     * The egress bytes per second.
     * 
    */
    public Double egressBytesTransferred() {
        return this.egressBytesTransferred;
    }
    /**
     * The egress packets per second.
     * 
    */
    public Double egressPacketsTransferred() {
        return this.egressPacketsTransferred;
    }
    /**
     * The ingress bytes per second.
     * 
    */
    public Double ingressBytesTransferred() {
        return this.ingressBytesTransferred;
    }
    /**
     * The ingress packets per second.
     * 
    */
    public Double ingressPacketsTransferred() {
        return this.ingressPacketsTransferred;
    }
    /**
     * The max band width.
     * 
    */
    public Double maxBandwidth() {
        return this.maxBandwidth;
    }
    /**
     * The max packets transferred per second.
     * 
    */
    public Double maxPacketsPerSecond() {
        return this.maxPacketsPerSecond;
    }
    /**
     * The assigned private Ip of a connected vpn client.
     * 
    */
    public String privateIpAddress() {
        return this.privateIpAddress;
    }
    /**
     * The public Ip of a connected vpn client.
     * 
    */
    public String publicIpAddress() {
        return this.publicIpAddress;
    }
    /**
     * The duration time of a connected vpn client.
     * 
    */
    public Double vpnConnectionDuration() {
        return this.vpnConnectionDuration;
    }
    /**
     * The vpn client Id.
     * 
    */
    public String vpnConnectionId() {
        return this.vpnConnectionId;
    }
    /**
     * The start time of a connected vpn client.
     * 
    */
    public String vpnConnectionTime() {
        return this.vpnConnectionTime;
    }
    /**
     * The user name of a connected vpn client.
     * 
    */
    public String vpnUserName() {
        return this.vpnUserName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VpnClientConnectionHealthDetailResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Double egressBytesTransferred;
        private Double egressPacketsTransferred;
        private Double ingressBytesTransferred;
        private Double ingressPacketsTransferred;
        private Double maxBandwidth;
        private Double maxPacketsPerSecond;
        private String privateIpAddress;
        private String publicIpAddress;
        private Double vpnConnectionDuration;
        private String vpnConnectionId;
        private String vpnConnectionTime;
        private String vpnUserName;

        public Builder() {
    	      // Empty
        }

        public Builder(VpnClientConnectionHealthDetailResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.egressBytesTransferred = defaults.egressBytesTransferred;
    	      this.egressPacketsTransferred = defaults.egressPacketsTransferred;
    	      this.ingressBytesTransferred = defaults.ingressBytesTransferred;
    	      this.ingressPacketsTransferred = defaults.ingressPacketsTransferred;
    	      this.maxBandwidth = defaults.maxBandwidth;
    	      this.maxPacketsPerSecond = defaults.maxPacketsPerSecond;
    	      this.privateIpAddress = defaults.privateIpAddress;
    	      this.publicIpAddress = defaults.publicIpAddress;
    	      this.vpnConnectionDuration = defaults.vpnConnectionDuration;
    	      this.vpnConnectionId = defaults.vpnConnectionId;
    	      this.vpnConnectionTime = defaults.vpnConnectionTime;
    	      this.vpnUserName = defaults.vpnUserName;
        }

        public Builder egressBytesTransferred(Double egressBytesTransferred) {
            this.egressBytesTransferred = Objects.requireNonNull(egressBytesTransferred);
            return this;
        }
        public Builder egressPacketsTransferred(Double egressPacketsTransferred) {
            this.egressPacketsTransferred = Objects.requireNonNull(egressPacketsTransferred);
            return this;
        }
        public Builder ingressBytesTransferred(Double ingressBytesTransferred) {
            this.ingressBytesTransferred = Objects.requireNonNull(ingressBytesTransferred);
            return this;
        }
        public Builder ingressPacketsTransferred(Double ingressPacketsTransferred) {
            this.ingressPacketsTransferred = Objects.requireNonNull(ingressPacketsTransferred);
            return this;
        }
        public Builder maxBandwidth(Double maxBandwidth) {
            this.maxBandwidth = Objects.requireNonNull(maxBandwidth);
            return this;
        }
        public Builder maxPacketsPerSecond(Double maxPacketsPerSecond) {
            this.maxPacketsPerSecond = Objects.requireNonNull(maxPacketsPerSecond);
            return this;
        }
        public Builder privateIpAddress(String privateIpAddress) {
            this.privateIpAddress = Objects.requireNonNull(privateIpAddress);
            return this;
        }
        public Builder publicIpAddress(String publicIpAddress) {
            this.publicIpAddress = Objects.requireNonNull(publicIpAddress);
            return this;
        }
        public Builder vpnConnectionDuration(Double vpnConnectionDuration) {
            this.vpnConnectionDuration = Objects.requireNonNull(vpnConnectionDuration);
            return this;
        }
        public Builder vpnConnectionId(String vpnConnectionId) {
            this.vpnConnectionId = Objects.requireNonNull(vpnConnectionId);
            return this;
        }
        public Builder vpnConnectionTime(String vpnConnectionTime) {
            this.vpnConnectionTime = Objects.requireNonNull(vpnConnectionTime);
            return this;
        }
        public Builder vpnUserName(String vpnUserName) {
            this.vpnUserName = Objects.requireNonNull(vpnUserName);
            return this;
        }        public VpnClientConnectionHealthDetailResponse build() {
            return new VpnClientConnectionHealthDetailResponse(egressBytesTransferred, egressPacketsTransferred, ingressBytesTransferred, ingressPacketsTransferred, maxBandwidth, maxPacketsPerSecond, privateIpAddress, publicIpAddress, vpnConnectionDuration, vpnConnectionId, vpnConnectionTime, vpnUserName);
        }
    }
}
