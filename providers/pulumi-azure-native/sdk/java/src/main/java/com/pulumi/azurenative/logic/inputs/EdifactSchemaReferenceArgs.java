// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.logic.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The Edifact schema reference.
 * 
 */
public final class EdifactSchemaReferenceArgs extends com.pulumi.resources.ResourceArgs {

    public static final EdifactSchemaReferenceArgs Empty = new EdifactSchemaReferenceArgs();

    /**
     * The association assigned code.
     * 
     */
    @Import(name="associationAssignedCode")
    private @Nullable Output<String> associationAssignedCode;

    public Optional<Output<String>> associationAssignedCode() {
        return Optional.ofNullable(this.associationAssignedCode);
    }

    /**
     * The message id.
     * 
     */
    @Import(name="messageId", required=true)
    private Output<String> messageId;

    public Output<String> messageId() {
        return this.messageId;
    }

    /**
     * The message release version.
     * 
     */
    @Import(name="messageRelease", required=true)
    private Output<String> messageRelease;

    public Output<String> messageRelease() {
        return this.messageRelease;
    }

    /**
     * The message version.
     * 
     */
    @Import(name="messageVersion", required=true)
    private Output<String> messageVersion;

    public Output<String> messageVersion() {
        return this.messageVersion;
    }

    /**
     * The schema name.
     * 
     */
    @Import(name="schemaName", required=true)
    private Output<String> schemaName;

    public Output<String> schemaName() {
        return this.schemaName;
    }

    /**
     * The sender application id.
     * 
     */
    @Import(name="senderApplicationId")
    private @Nullable Output<String> senderApplicationId;

    public Optional<Output<String>> senderApplicationId() {
        return Optional.ofNullable(this.senderApplicationId);
    }

    /**
     * The sender application qualifier.
     * 
     */
    @Import(name="senderApplicationQualifier")
    private @Nullable Output<String> senderApplicationQualifier;

    public Optional<Output<String>> senderApplicationQualifier() {
        return Optional.ofNullable(this.senderApplicationQualifier);
    }

    private EdifactSchemaReferenceArgs() {}

    private EdifactSchemaReferenceArgs(EdifactSchemaReferenceArgs $) {
        this.associationAssignedCode = $.associationAssignedCode;
        this.messageId = $.messageId;
        this.messageRelease = $.messageRelease;
        this.messageVersion = $.messageVersion;
        this.schemaName = $.schemaName;
        this.senderApplicationId = $.senderApplicationId;
        this.senderApplicationQualifier = $.senderApplicationQualifier;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EdifactSchemaReferenceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EdifactSchemaReferenceArgs $;

        public Builder() {
            $ = new EdifactSchemaReferenceArgs();
        }

        public Builder(EdifactSchemaReferenceArgs defaults) {
            $ = new EdifactSchemaReferenceArgs(Objects.requireNonNull(defaults));
        }

        public Builder associationAssignedCode(@Nullable Output<String> associationAssignedCode) {
            $.associationAssignedCode = associationAssignedCode;
            return this;
        }

        public Builder associationAssignedCode(String associationAssignedCode) {
            return associationAssignedCode(Output.of(associationAssignedCode));
        }

        public Builder messageId(Output<String> messageId) {
            $.messageId = messageId;
            return this;
        }

        public Builder messageId(String messageId) {
            return messageId(Output.of(messageId));
        }

        public Builder messageRelease(Output<String> messageRelease) {
            $.messageRelease = messageRelease;
            return this;
        }

        public Builder messageRelease(String messageRelease) {
            return messageRelease(Output.of(messageRelease));
        }

        public Builder messageVersion(Output<String> messageVersion) {
            $.messageVersion = messageVersion;
            return this;
        }

        public Builder messageVersion(String messageVersion) {
            return messageVersion(Output.of(messageVersion));
        }

        public Builder schemaName(Output<String> schemaName) {
            $.schemaName = schemaName;
            return this;
        }

        public Builder schemaName(String schemaName) {
            return schemaName(Output.of(schemaName));
        }

        public Builder senderApplicationId(@Nullable Output<String> senderApplicationId) {
            $.senderApplicationId = senderApplicationId;
            return this;
        }

        public Builder senderApplicationId(String senderApplicationId) {
            return senderApplicationId(Output.of(senderApplicationId));
        }

        public Builder senderApplicationQualifier(@Nullable Output<String> senderApplicationQualifier) {
            $.senderApplicationQualifier = senderApplicationQualifier;
            return this;
        }

        public Builder senderApplicationQualifier(String senderApplicationQualifier) {
            return senderApplicationQualifier(Output.of(senderApplicationQualifier));
        }

        public EdifactSchemaReferenceArgs build() {
            $.messageId = Objects.requireNonNull($.messageId, "expected parameter 'messageId' to be non-null");
            $.messageRelease = Objects.requireNonNull($.messageRelease, "expected parameter 'messageRelease' to be non-null");
            $.messageVersion = Objects.requireNonNull($.messageVersion, "expected parameter 'messageVersion' to be non-null");
            $.schemaName = Objects.requireNonNull($.schemaName, "expected parameter 'schemaName' to be non-null");
            return $;
        }
    }

}
