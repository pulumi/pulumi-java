// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network;

import com.pulumi.azurenative.network.enums.FrontDoorEnabledState;
import com.pulumi.azurenative.network.inputs.BackendPoolArgs;
import com.pulumi.azurenative.network.inputs.BackendPoolsSettingsArgs;
import com.pulumi.azurenative.network.inputs.FrontendEndpointArgs;
import com.pulumi.azurenative.network.inputs.HealthProbeSettingsModelArgs;
import com.pulumi.azurenative.network.inputs.LoadBalancingSettingsModelArgs;
import com.pulumi.azurenative.network.inputs.RoutingRuleArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FrontDoorArgs extends com.pulumi.resources.ResourceArgs {

    public static final FrontDoorArgs Empty = new FrontDoorArgs();

    /**
     * Backend pools available to routing rules.
     * 
     */
    @Import(name="backendPools")
    private @Nullable Output<List<BackendPoolArgs>> backendPools;

    public Optional<Output<List<BackendPoolArgs>>> backendPools() {
        return Optional.ofNullable(this.backendPools);
    }

    /**
     * Settings for all backendPools
     * 
     */
    @Import(name="backendPoolsSettings")
    private @Nullable Output<BackendPoolsSettingsArgs> backendPoolsSettings;

    public Optional<Output<BackendPoolsSettingsArgs>> backendPoolsSettings() {
        return Optional.ofNullable(this.backendPoolsSettings);
    }

    /**
     * Operational status of the Front Door load balancer. Permitted values are &#39;Enabled&#39; or &#39;Disabled&#39;
     * 
     */
    @Import(name="enabledState")
    private @Nullable Output<Either<String,FrontDoorEnabledState>> enabledState;

    public Optional<Output<Either<String,FrontDoorEnabledState>>> enabledState() {
        return Optional.ofNullable(this.enabledState);
    }

    /**
     * A friendly name for the frontDoor
     * 
     */
    @Import(name="friendlyName")
    private @Nullable Output<String> friendlyName;

    public Optional<Output<String>> friendlyName() {
        return Optional.ofNullable(this.friendlyName);
    }

    /**
     * Name of the Front Door which is globally unique.
     * 
     */
    @Import(name="frontDoorName")
    private @Nullable Output<String> frontDoorName;

    public Optional<Output<String>> frontDoorName() {
        return Optional.ofNullable(this.frontDoorName);
    }

    /**
     * Frontend endpoints available to routing rules.
     * 
     */
    @Import(name="frontendEndpoints")
    private @Nullable Output<List<FrontendEndpointArgs>> frontendEndpoints;

    public Optional<Output<List<FrontendEndpointArgs>>> frontendEndpoints() {
        return Optional.ofNullable(this.frontendEndpoints);
    }

    /**
     * Health probe settings associated with this Front Door instance.
     * 
     */
    @Import(name="healthProbeSettings")
    private @Nullable Output<List<HealthProbeSettingsModelArgs>> healthProbeSettings;

    public Optional<Output<List<HealthProbeSettingsModelArgs>>> healthProbeSettings() {
        return Optional.ofNullable(this.healthProbeSettings);
    }

    /**
     * Load balancing settings associated with this Front Door instance.
     * 
     */
    @Import(name="loadBalancingSettings")
    private @Nullable Output<List<LoadBalancingSettingsModelArgs>> loadBalancingSettings;

    public Optional<Output<List<LoadBalancingSettingsModelArgs>>> loadBalancingSettings() {
        return Optional.ofNullable(this.loadBalancingSettings);
    }

    /**
     * Resource location.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Name of the Resource group within the Azure subscription.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Routing rules associated with this Front Door.
     * 
     */
    @Import(name="routingRules")
    private @Nullable Output<List<RoutingRuleArgs>> routingRules;

    public Optional<Output<List<RoutingRuleArgs>>> routingRules() {
        return Optional.ofNullable(this.routingRules);
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private FrontDoorArgs() {}

    private FrontDoorArgs(FrontDoorArgs $) {
        this.backendPools = $.backendPools;
        this.backendPoolsSettings = $.backendPoolsSettings;
        this.enabledState = $.enabledState;
        this.friendlyName = $.friendlyName;
        this.frontDoorName = $.frontDoorName;
        this.frontendEndpoints = $.frontendEndpoints;
        this.healthProbeSettings = $.healthProbeSettings;
        this.loadBalancingSettings = $.loadBalancingSettings;
        this.location = $.location;
        this.resourceGroupName = $.resourceGroupName;
        this.routingRules = $.routingRules;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FrontDoorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FrontDoorArgs $;

        public Builder() {
            $ = new FrontDoorArgs();
        }

        public Builder(FrontDoorArgs defaults) {
            $ = new FrontDoorArgs(Objects.requireNonNull(defaults));
        }

        public Builder backendPools(@Nullable Output<List<BackendPoolArgs>> backendPools) {
            $.backendPools = backendPools;
            return this;
        }

        public Builder backendPools(List<BackendPoolArgs> backendPools) {
            return backendPools(Output.of(backendPools));
        }

        public Builder backendPools(BackendPoolArgs... backendPools) {
            return backendPools(List.of(backendPools));
        }

        public Builder backendPoolsSettings(@Nullable Output<BackendPoolsSettingsArgs> backendPoolsSettings) {
            $.backendPoolsSettings = backendPoolsSettings;
            return this;
        }

        public Builder backendPoolsSettings(BackendPoolsSettingsArgs backendPoolsSettings) {
            return backendPoolsSettings(Output.of(backendPoolsSettings));
        }

        public Builder enabledState(@Nullable Output<Either<String,FrontDoorEnabledState>> enabledState) {
            $.enabledState = enabledState;
            return this;
        }

        public Builder enabledState(Either<String,FrontDoorEnabledState> enabledState) {
            return enabledState(Output.of(enabledState));
        }

        public Builder enabledState(String enabledState) {
            return enabledState(Either.ofLeft(enabledState));
        }

        public Builder enabledState(FrontDoorEnabledState enabledState) {
            return enabledState(Either.ofRight(enabledState));
        }

        public Builder friendlyName(@Nullable Output<String> friendlyName) {
            $.friendlyName = friendlyName;
            return this;
        }

        public Builder friendlyName(String friendlyName) {
            return friendlyName(Output.of(friendlyName));
        }

        public Builder frontDoorName(@Nullable Output<String> frontDoorName) {
            $.frontDoorName = frontDoorName;
            return this;
        }

        public Builder frontDoorName(String frontDoorName) {
            return frontDoorName(Output.of(frontDoorName));
        }

        public Builder frontendEndpoints(@Nullable Output<List<FrontendEndpointArgs>> frontendEndpoints) {
            $.frontendEndpoints = frontendEndpoints;
            return this;
        }

        public Builder frontendEndpoints(List<FrontendEndpointArgs> frontendEndpoints) {
            return frontendEndpoints(Output.of(frontendEndpoints));
        }

        public Builder frontendEndpoints(FrontendEndpointArgs... frontendEndpoints) {
            return frontendEndpoints(List.of(frontendEndpoints));
        }

        public Builder healthProbeSettings(@Nullable Output<List<HealthProbeSettingsModelArgs>> healthProbeSettings) {
            $.healthProbeSettings = healthProbeSettings;
            return this;
        }

        public Builder healthProbeSettings(List<HealthProbeSettingsModelArgs> healthProbeSettings) {
            return healthProbeSettings(Output.of(healthProbeSettings));
        }

        public Builder healthProbeSettings(HealthProbeSettingsModelArgs... healthProbeSettings) {
            return healthProbeSettings(List.of(healthProbeSettings));
        }

        public Builder loadBalancingSettings(@Nullable Output<List<LoadBalancingSettingsModelArgs>> loadBalancingSettings) {
            $.loadBalancingSettings = loadBalancingSettings;
            return this;
        }

        public Builder loadBalancingSettings(List<LoadBalancingSettingsModelArgs> loadBalancingSettings) {
            return loadBalancingSettings(Output.of(loadBalancingSettings));
        }

        public Builder loadBalancingSettings(LoadBalancingSettingsModelArgs... loadBalancingSettings) {
            return loadBalancingSettings(List.of(loadBalancingSettings));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder routingRules(@Nullable Output<List<RoutingRuleArgs>> routingRules) {
            $.routingRules = routingRules;
            return this;
        }

        public Builder routingRules(List<RoutingRuleArgs> routingRules) {
            return routingRules(Output.of(routingRules));
        }

        public Builder routingRules(RoutingRuleArgs... routingRules) {
            return routingRules(List.of(routingRules));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public FrontDoorArgs build() {
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
