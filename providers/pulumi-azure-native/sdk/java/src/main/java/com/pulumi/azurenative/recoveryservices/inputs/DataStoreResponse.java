// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.recoveryservices.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The data store details of the MT.
 * 
 */
public final class DataStoreResponse extends com.pulumi.resources.InvokeArgs {

    public static final DataStoreResponse Empty = new DataStoreResponse();

    /**
     * The capacity of data store in GBs.
     * 
     */
    @Import(name="capacity")
    private @Nullable String capacity;

    /**
     * @return The capacity of data store in GBs.
     * 
     */
    public Optional<String> capacity() {
        return Optional.ofNullable(this.capacity);
    }

    /**
     * The free space of data store in GBs.
     * 
     */
    @Import(name="freeSpace")
    private @Nullable String freeSpace;

    /**
     * @return The free space of data store in GBs.
     * 
     */
    public Optional<String> freeSpace() {
        return Optional.ofNullable(this.freeSpace);
    }

    /**
     * The symbolic name of data store.
     * 
     */
    @Import(name="symbolicName")
    private @Nullable String symbolicName;

    /**
     * @return The symbolic name of data store.
     * 
     */
    public Optional<String> symbolicName() {
        return Optional.ofNullable(this.symbolicName);
    }

    /**
     * The type of data store.
     * 
     */
    @Import(name="type")
    private @Nullable String type;

    /**
     * @return The type of data store.
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * The uuid of data store.
     * 
     */
    @Import(name="uuid")
    private @Nullable String uuid;

    /**
     * @return The uuid of data store.
     * 
     */
    public Optional<String> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    private DataStoreResponse() {}

    private DataStoreResponse(DataStoreResponse $) {
        this.capacity = $.capacity;
        this.freeSpace = $.freeSpace;
        this.symbolicName = $.symbolicName;
        this.type = $.type;
        this.uuid = $.uuid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataStoreResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataStoreResponse $;

        public Builder() {
            $ = new DataStoreResponse();
        }

        public Builder(DataStoreResponse defaults) {
            $ = new DataStoreResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param capacity The capacity of data store in GBs.
         * 
         * @return builder
         * 
         */
        public Builder capacity(@Nullable String capacity) {
            $.capacity = capacity;
            return this;
        }

        /**
         * @param freeSpace The free space of data store in GBs.
         * 
         * @return builder
         * 
         */
        public Builder freeSpace(@Nullable String freeSpace) {
            $.freeSpace = freeSpace;
            return this;
        }

        /**
         * @param symbolicName The symbolic name of data store.
         * 
         * @return builder
         * 
         */
        public Builder symbolicName(@Nullable String symbolicName) {
            $.symbolicName = symbolicName;
            return this;
        }

        /**
         * @param type The type of data store.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable String type) {
            $.type = type;
            return this;
        }

        /**
         * @param uuid The uuid of data store.
         * 
         * @return builder
         * 
         */
        public Builder uuid(@Nullable String uuid) {
            $.uuid = uuid;
            return this;
        }

        public DataStoreResponse build() {
            return $;
        }
    }

}
