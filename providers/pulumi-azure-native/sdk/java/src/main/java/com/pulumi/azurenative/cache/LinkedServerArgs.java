// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.cache;

import com.pulumi.azurenative.cache.enums.ReplicationRole;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LinkedServerArgs extends com.pulumi.resources.ResourceArgs {

    public static final LinkedServerArgs Empty = new LinkedServerArgs();

    /**
     * Fully qualified resourceId of the linked redis cache.
     * 
     */
    @Import(name="linkedRedisCacheId", required=true)
    private Output<String> linkedRedisCacheId;

    public Output<String> linkedRedisCacheId() {
        return this.linkedRedisCacheId;
    }

    /**
     * Location of the linked redis cache.
     * 
     */
    @Import(name="linkedRedisCacheLocation", required=true)
    private Output<String> linkedRedisCacheLocation;

    public Output<String> linkedRedisCacheLocation() {
        return this.linkedRedisCacheLocation;
    }

    /**
     * The name of the linked server that is being added to the Redis cache.
     * 
     */
    @Import(name="linkedServerName")
    private @Nullable Output<String> linkedServerName;

    public Optional<Output<String>> linkedServerName() {
        return Optional.ofNullable(this.linkedServerName);
    }

    /**
     * The name of the Redis cache.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    public Output<String> name() {
        return this.name;
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Role of the linked server.
     * 
     */
    @Import(name="serverRole", required=true)
    private Output<ReplicationRole> serverRole;

    public Output<ReplicationRole> serverRole() {
        return this.serverRole;
    }

    private LinkedServerArgs() {}

    private LinkedServerArgs(LinkedServerArgs $) {
        this.linkedRedisCacheId = $.linkedRedisCacheId;
        this.linkedRedisCacheLocation = $.linkedRedisCacheLocation;
        this.linkedServerName = $.linkedServerName;
        this.name = $.name;
        this.resourceGroupName = $.resourceGroupName;
        this.serverRole = $.serverRole;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LinkedServerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LinkedServerArgs $;

        public Builder() {
            $ = new LinkedServerArgs();
        }

        public Builder(LinkedServerArgs defaults) {
            $ = new LinkedServerArgs(Objects.requireNonNull(defaults));
        }

        public Builder linkedRedisCacheId(Output<String> linkedRedisCacheId) {
            $.linkedRedisCacheId = linkedRedisCacheId;
            return this;
        }

        public Builder linkedRedisCacheId(String linkedRedisCacheId) {
            return linkedRedisCacheId(Output.of(linkedRedisCacheId));
        }

        public Builder linkedRedisCacheLocation(Output<String> linkedRedisCacheLocation) {
            $.linkedRedisCacheLocation = linkedRedisCacheLocation;
            return this;
        }

        public Builder linkedRedisCacheLocation(String linkedRedisCacheLocation) {
            return linkedRedisCacheLocation(Output.of(linkedRedisCacheLocation));
        }

        public Builder linkedServerName(@Nullable Output<String> linkedServerName) {
            $.linkedServerName = linkedServerName;
            return this;
        }

        public Builder linkedServerName(String linkedServerName) {
            return linkedServerName(Output.of(linkedServerName));
        }

        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder serverRole(Output<ReplicationRole> serverRole) {
            $.serverRole = serverRole;
            return this;
        }

        public Builder serverRole(ReplicationRole serverRole) {
            return serverRole(Output.of(serverRole));
        }

        public LinkedServerArgs build() {
            $.linkedRedisCacheId = Objects.requireNonNull($.linkedRedisCacheId, "expected parameter 'linkedRedisCacheId' to be non-null");
            $.linkedRedisCacheLocation = Objects.requireNonNull($.linkedRedisCacheLocation, "expected parameter 'linkedRedisCacheLocation' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.serverRole = Objects.requireNonNull($.serverRole, "expected parameter 'serverRole' to be non-null");
            return $;
        }
    }

}
