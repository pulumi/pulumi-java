// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.storagesync.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;


/**
 * Sync Session status object.
 * 
 */
public final class ServerEndpointSyncActivityStatusResponse extends com.pulumi.resources.InvokeArgs {

    public static final ServerEndpointSyncActivityStatusResponse Empty = new ServerEndpointSyncActivityStatusResponse();

    /**
     * Applied bytes
     * 
     */
    @Import(name="appliedBytes", required=true)
    private Double appliedBytes;

    /**
     * @return Applied bytes
     * 
     */
    public Double appliedBytes() {
        return this.appliedBytes;
    }

    /**
     * Applied item count.
     * 
     */
    @Import(name="appliedItemCount", required=true)
    private Double appliedItemCount;

    /**
     * @return Applied item count.
     * 
     */
    public Double appliedItemCount() {
        return this.appliedItemCount;
    }

    /**
     * Per item error count
     * 
     */
    @Import(name="perItemErrorCount", required=true)
    private Double perItemErrorCount;

    /**
     * @return Per item error count
     * 
     */
    public Double perItemErrorCount() {
        return this.perItemErrorCount;
    }

    /**
     * Sync mode
     * 
     */
    @Import(name="syncMode", required=true)
    private String syncMode;

    /**
     * @return Sync mode
     * 
     */
    public String syncMode() {
        return this.syncMode;
    }

    /**
     * Timestamp when properties were updated
     * 
     */
    @Import(name="timestamp", required=true)
    private String timestamp;

    /**
     * @return Timestamp when properties were updated
     * 
     */
    public String timestamp() {
        return this.timestamp;
    }

    /**
     * Total bytes (if available)
     * 
     */
    @Import(name="totalBytes", required=true)
    private Double totalBytes;

    /**
     * @return Total bytes (if available)
     * 
     */
    public Double totalBytes() {
        return this.totalBytes;
    }

    /**
     * Total item count (if available)
     * 
     */
    @Import(name="totalItemCount", required=true)
    private Double totalItemCount;

    /**
     * @return Total item count (if available)
     * 
     */
    public Double totalItemCount() {
        return this.totalItemCount;
    }

    private ServerEndpointSyncActivityStatusResponse() {}

    private ServerEndpointSyncActivityStatusResponse(ServerEndpointSyncActivityStatusResponse $) {
        this.appliedBytes = $.appliedBytes;
        this.appliedItemCount = $.appliedItemCount;
        this.perItemErrorCount = $.perItemErrorCount;
        this.syncMode = $.syncMode;
        this.timestamp = $.timestamp;
        this.totalBytes = $.totalBytes;
        this.totalItemCount = $.totalItemCount;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServerEndpointSyncActivityStatusResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServerEndpointSyncActivityStatusResponse $;

        public Builder() {
            $ = new ServerEndpointSyncActivityStatusResponse();
        }

        public Builder(ServerEndpointSyncActivityStatusResponse defaults) {
            $ = new ServerEndpointSyncActivityStatusResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param appliedBytes Applied bytes
         * 
         * @return builder
         * 
         */
        public Builder appliedBytes(Double appliedBytes) {
            $.appliedBytes = appliedBytes;
            return this;
        }

        /**
         * @param appliedItemCount Applied item count.
         * 
         * @return builder
         * 
         */
        public Builder appliedItemCount(Double appliedItemCount) {
            $.appliedItemCount = appliedItemCount;
            return this;
        }

        /**
         * @param perItemErrorCount Per item error count
         * 
         * @return builder
         * 
         */
        public Builder perItemErrorCount(Double perItemErrorCount) {
            $.perItemErrorCount = perItemErrorCount;
            return this;
        }

        /**
         * @param syncMode Sync mode
         * 
         * @return builder
         * 
         */
        public Builder syncMode(String syncMode) {
            $.syncMode = syncMode;
            return this;
        }

        /**
         * @param timestamp Timestamp when properties were updated
         * 
         * @return builder
         * 
         */
        public Builder timestamp(String timestamp) {
            $.timestamp = timestamp;
            return this;
        }

        /**
         * @param totalBytes Total bytes (if available)
         * 
         * @return builder
         * 
         */
        public Builder totalBytes(Double totalBytes) {
            $.totalBytes = totalBytes;
            return this;
        }

        /**
         * @param totalItemCount Total item count (if available)
         * 
         * @return builder
         * 
         */
        public Builder totalItemCount(Double totalItemCount) {
            $.totalItemCount = totalItemCount;
            return this;
        }

        public ServerEndpointSyncActivityStatusResponse build() {
            $.appliedBytes = Objects.requireNonNull($.appliedBytes, "expected parameter 'appliedBytes' to be non-null");
            $.appliedItemCount = Objects.requireNonNull($.appliedItemCount, "expected parameter 'appliedItemCount' to be non-null");
            $.perItemErrorCount = Objects.requireNonNull($.perItemErrorCount, "expected parameter 'perItemErrorCount' to be non-null");
            $.syncMode = Objects.requireNonNull($.syncMode, "expected parameter 'syncMode' to be non-null");
            $.timestamp = Objects.requireNonNull($.timestamp, "expected parameter 'timestamp' to be non-null");
            $.totalBytes = Objects.requireNonNull($.totalBytes, "expected parameter 'totalBytes' to be non-null");
            $.totalItemCount = Objects.requireNonNull($.totalItemCount, "expected parameter 'totalItemCount' to be non-null");
            return $;
        }
    }

}
