// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.operationalinsights.inputs;

import com.pulumi.azurenative.operationalinsights.inputs.ColumnArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Table&#39;s schema.
 * 
 */
public final class SchemaArgs extends com.pulumi.resources.ResourceArgs {

    public static final SchemaArgs Empty = new SchemaArgs();

    /**
     * A list of table custom columns.
     * 
     */
    @Import(name="columns")
    private @Nullable Output<List<ColumnArgs>> columns;

    /**
     * @return A list of table custom columns.
     * 
     */
    public Optional<Output<List<ColumnArgs>>> columns() {
        return Optional.ofNullable(this.columns);
    }

    /**
     * Table description.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Table description.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Table display name.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return Table display name.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Table name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Table name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private SchemaArgs() {}

    private SchemaArgs(SchemaArgs $) {
        this.columns = $.columns;
        this.description = $.description;
        this.displayName = $.displayName;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SchemaArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SchemaArgs $;

        public Builder() {
            $ = new SchemaArgs();
        }

        public Builder(SchemaArgs defaults) {
            $ = new SchemaArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param columns A list of table custom columns.
         * 
         * @return builder
         * 
         */
        public Builder columns(@Nullable Output<List<ColumnArgs>> columns) {
            $.columns = columns;
            return this;
        }

        /**
         * @param columns A list of table custom columns.
         * 
         * @return builder
         * 
         */
        public Builder columns(List<ColumnArgs> columns) {
            return columns(Output.of(columns));
        }

        /**
         * @param columns A list of table custom columns.
         * 
         * @return builder
         * 
         */
        public Builder columns(ColumnArgs... columns) {
            return columns(List.of(columns));
        }

        /**
         * @param description Table description.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Table description.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName Table display name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Table display name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param name Table name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Table name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public SchemaArgs build() {
            return $;
        }
    }

}
