// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.devops;

import com.pulumi.azurenative.devops.enums.PipelineTypeEnum;
import com.pulumi.azurenative.devops.inputs.BootstrapConfigurationArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PipelineArgs extends com.pulumi.resources.ResourceArgs {

    public static final PipelineArgs Empty = new PipelineArgs();

    /**
     * Configuration used to bootstrap the Pipeline.
     * 
     */
    @Import(name="bootstrapConfiguration", required=true)
    private Output<BootstrapConfigurationArgs> bootstrapConfiguration;

    public Output<BootstrapConfigurationArgs> bootstrapConfiguration() {
        return this.bootstrapConfiguration;
    }

    /**
     * Resource Location
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name of the Pipeline resource in ARM.
     * 
     */
    @Import(name="pipelineName")
    private @Nullable Output<String> pipelineName;

    public Optional<Output<String>> pipelineName() {
        return Optional.ofNullable(this.pipelineName);
    }

    /**
     * Specifies which CI/CD provider to use. Valid options are &#39;azurePipeline&#39;, &#39;githubWorkflow&#39;.
     * 
     */
    @Import(name="pipelineType", required=true)
    private Output<Either<String,PipelineTypeEnum>> pipelineType;

    public Output<Either<String,PipelineTypeEnum>> pipelineType() {
        return this.pipelineType;
    }

    /**
     * Name of the resource group within the Azure subscription.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Resource Tags
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private PipelineArgs() {}

    private PipelineArgs(PipelineArgs $) {
        this.bootstrapConfiguration = $.bootstrapConfiguration;
        this.location = $.location;
        this.pipelineName = $.pipelineName;
        this.pipelineType = $.pipelineType;
        this.resourceGroupName = $.resourceGroupName;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PipelineArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PipelineArgs $;

        public Builder() {
            $ = new PipelineArgs();
        }

        public Builder(PipelineArgs defaults) {
            $ = new PipelineArgs(Objects.requireNonNull(defaults));
        }

        public Builder bootstrapConfiguration(Output<BootstrapConfigurationArgs> bootstrapConfiguration) {
            $.bootstrapConfiguration = bootstrapConfiguration;
            return this;
        }

        public Builder bootstrapConfiguration(BootstrapConfigurationArgs bootstrapConfiguration) {
            return bootstrapConfiguration(Output.of(bootstrapConfiguration));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder pipelineName(@Nullable Output<String> pipelineName) {
            $.pipelineName = pipelineName;
            return this;
        }

        public Builder pipelineName(String pipelineName) {
            return pipelineName(Output.of(pipelineName));
        }

        public Builder pipelineType(Output<Either<String,PipelineTypeEnum>> pipelineType) {
            $.pipelineType = pipelineType;
            return this;
        }

        public Builder pipelineType(Either<String,PipelineTypeEnum> pipelineType) {
            return pipelineType(Output.of(pipelineType));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public PipelineArgs build() {
            $.bootstrapConfiguration = Objects.requireNonNull($.bootstrapConfiguration, "expected parameter 'bootstrapConfiguration' to be non-null");
            $.pipelineType = Objects.requireNonNull($.pipelineType, "expected parameter 'pipelineType' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
