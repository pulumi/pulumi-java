// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.containerservice.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Sysctl settings for Linux agent nodes.
 * 
 */
public final class SysctlConfigResponse extends com.pulumi.resources.InvokeArgs {

    public static final SysctlConfigResponse Empty = new SysctlConfigResponse();

    /**
     * Sysctl setting fs.aio-max-nr.
     * 
     */
    @Import(name="fsAioMaxNr")
    private @Nullable Integer fsAioMaxNr;

    public Optional<Integer> fsAioMaxNr() {
        return Optional.ofNullable(this.fsAioMaxNr);
    }

    /**
     * Sysctl setting fs.file-max.
     * 
     */
    @Import(name="fsFileMax")
    private @Nullable Integer fsFileMax;

    public Optional<Integer> fsFileMax() {
        return Optional.ofNullable(this.fsFileMax);
    }

    /**
     * Sysctl setting fs.inotify.max_user_watches.
     * 
     */
    @Import(name="fsInotifyMaxUserWatches")
    private @Nullable Integer fsInotifyMaxUserWatches;

    public Optional<Integer> fsInotifyMaxUserWatches() {
        return Optional.ofNullable(this.fsInotifyMaxUserWatches);
    }

    /**
     * Sysctl setting fs.nr_open.
     * 
     */
    @Import(name="fsNrOpen")
    private @Nullable Integer fsNrOpen;

    public Optional<Integer> fsNrOpen() {
        return Optional.ofNullable(this.fsNrOpen);
    }

    /**
     * Sysctl setting kernel.threads-max.
     * 
     */
    @Import(name="kernelThreadsMax")
    private @Nullable Integer kernelThreadsMax;

    public Optional<Integer> kernelThreadsMax() {
        return Optional.ofNullable(this.kernelThreadsMax);
    }

    /**
     * Sysctl setting net.core.netdev_max_backlog.
     * 
     */
    @Import(name="netCoreNetdevMaxBacklog")
    private @Nullable Integer netCoreNetdevMaxBacklog;

    public Optional<Integer> netCoreNetdevMaxBacklog() {
        return Optional.ofNullable(this.netCoreNetdevMaxBacklog);
    }

    /**
     * Sysctl setting net.core.optmem_max.
     * 
     */
    @Import(name="netCoreOptmemMax")
    private @Nullable Integer netCoreOptmemMax;

    public Optional<Integer> netCoreOptmemMax() {
        return Optional.ofNullable(this.netCoreOptmemMax);
    }

    /**
     * Sysctl setting net.core.rmem_default.
     * 
     */
    @Import(name="netCoreRmemDefault")
    private @Nullable Integer netCoreRmemDefault;

    public Optional<Integer> netCoreRmemDefault() {
        return Optional.ofNullable(this.netCoreRmemDefault);
    }

    /**
     * Sysctl setting net.core.rmem_max.
     * 
     */
    @Import(name="netCoreRmemMax")
    private @Nullable Integer netCoreRmemMax;

    public Optional<Integer> netCoreRmemMax() {
        return Optional.ofNullable(this.netCoreRmemMax);
    }

    /**
     * Sysctl setting net.core.somaxconn.
     * 
     */
    @Import(name="netCoreSomaxconn")
    private @Nullable Integer netCoreSomaxconn;

    public Optional<Integer> netCoreSomaxconn() {
        return Optional.ofNullable(this.netCoreSomaxconn);
    }

    /**
     * Sysctl setting net.core.wmem_default.
     * 
     */
    @Import(name="netCoreWmemDefault")
    private @Nullable Integer netCoreWmemDefault;

    public Optional<Integer> netCoreWmemDefault() {
        return Optional.ofNullable(this.netCoreWmemDefault);
    }

    /**
     * Sysctl setting net.core.wmem_max.
     * 
     */
    @Import(name="netCoreWmemMax")
    private @Nullable Integer netCoreWmemMax;

    public Optional<Integer> netCoreWmemMax() {
        return Optional.ofNullable(this.netCoreWmemMax);
    }

    /**
     * Sysctl setting net.ipv4.ip_local_port_range.
     * 
     */
    @Import(name="netIpv4IpLocalPortRange")
    private @Nullable String netIpv4IpLocalPortRange;

    public Optional<String> netIpv4IpLocalPortRange() {
        return Optional.ofNullable(this.netIpv4IpLocalPortRange);
    }

    /**
     * Sysctl setting net.ipv4.neigh.default.gc_thresh1.
     * 
     */
    @Import(name="netIpv4NeighDefaultGcThresh1")
    private @Nullable Integer netIpv4NeighDefaultGcThresh1;

    public Optional<Integer> netIpv4NeighDefaultGcThresh1() {
        return Optional.ofNullable(this.netIpv4NeighDefaultGcThresh1);
    }

    /**
     * Sysctl setting net.ipv4.neigh.default.gc_thresh2.
     * 
     */
    @Import(name="netIpv4NeighDefaultGcThresh2")
    private @Nullable Integer netIpv4NeighDefaultGcThresh2;

    public Optional<Integer> netIpv4NeighDefaultGcThresh2() {
        return Optional.ofNullable(this.netIpv4NeighDefaultGcThresh2);
    }

    /**
     * Sysctl setting net.ipv4.neigh.default.gc_thresh3.
     * 
     */
    @Import(name="netIpv4NeighDefaultGcThresh3")
    private @Nullable Integer netIpv4NeighDefaultGcThresh3;

    public Optional<Integer> netIpv4NeighDefaultGcThresh3() {
        return Optional.ofNullable(this.netIpv4NeighDefaultGcThresh3);
    }

    /**
     * Sysctl setting net.ipv4.tcp_fin_timeout.
     * 
     */
    @Import(name="netIpv4TcpFinTimeout")
    private @Nullable Integer netIpv4TcpFinTimeout;

    public Optional<Integer> netIpv4TcpFinTimeout() {
        return Optional.ofNullable(this.netIpv4TcpFinTimeout);
    }

    /**
     * Sysctl setting net.ipv4.tcp_keepalive_probes.
     * 
     */
    @Import(name="netIpv4TcpKeepaliveProbes")
    private @Nullable Integer netIpv4TcpKeepaliveProbes;

    public Optional<Integer> netIpv4TcpKeepaliveProbes() {
        return Optional.ofNullable(this.netIpv4TcpKeepaliveProbes);
    }

    /**
     * Sysctl setting net.ipv4.tcp_keepalive_time.
     * 
     */
    @Import(name="netIpv4TcpKeepaliveTime")
    private @Nullable Integer netIpv4TcpKeepaliveTime;

    public Optional<Integer> netIpv4TcpKeepaliveTime() {
        return Optional.ofNullable(this.netIpv4TcpKeepaliveTime);
    }

    /**
     * Sysctl setting net.ipv4.tcp_max_syn_backlog.
     * 
     */
    @Import(name="netIpv4TcpMaxSynBacklog")
    private @Nullable Integer netIpv4TcpMaxSynBacklog;

    public Optional<Integer> netIpv4TcpMaxSynBacklog() {
        return Optional.ofNullable(this.netIpv4TcpMaxSynBacklog);
    }

    /**
     * Sysctl setting net.ipv4.tcp_max_tw_buckets.
     * 
     */
    @Import(name="netIpv4TcpMaxTwBuckets")
    private @Nullable Integer netIpv4TcpMaxTwBuckets;

    public Optional<Integer> netIpv4TcpMaxTwBuckets() {
        return Optional.ofNullable(this.netIpv4TcpMaxTwBuckets);
    }

    /**
     * Sysctl setting net.ipv4.tcp_tw_reuse.
     * 
     */
    @Import(name="netIpv4TcpTwReuse")
    private @Nullable Boolean netIpv4TcpTwReuse;

    public Optional<Boolean> netIpv4TcpTwReuse() {
        return Optional.ofNullable(this.netIpv4TcpTwReuse);
    }

    /**
     * Sysctl setting net.ipv4.tcp_keepalive_intvl.
     * 
     */
    @Import(name="netIpv4TcpkeepaliveIntvl")
    private @Nullable Integer netIpv4TcpkeepaliveIntvl;

    public Optional<Integer> netIpv4TcpkeepaliveIntvl() {
        return Optional.ofNullable(this.netIpv4TcpkeepaliveIntvl);
    }

    /**
     * Sysctl setting net.netfilter.nf_conntrack_buckets.
     * 
     */
    @Import(name="netNetfilterNfConntrackBuckets")
    private @Nullable Integer netNetfilterNfConntrackBuckets;

    public Optional<Integer> netNetfilterNfConntrackBuckets() {
        return Optional.ofNullable(this.netNetfilterNfConntrackBuckets);
    }

    /**
     * Sysctl setting net.netfilter.nf_conntrack_max.
     * 
     */
    @Import(name="netNetfilterNfConntrackMax")
    private @Nullable Integer netNetfilterNfConntrackMax;

    public Optional<Integer> netNetfilterNfConntrackMax() {
        return Optional.ofNullable(this.netNetfilterNfConntrackMax);
    }

    /**
     * Sysctl setting vm.max_map_count.
     * 
     */
    @Import(name="vmMaxMapCount")
    private @Nullable Integer vmMaxMapCount;

    public Optional<Integer> vmMaxMapCount() {
        return Optional.ofNullable(this.vmMaxMapCount);
    }

    /**
     * Sysctl setting vm.swappiness.
     * 
     */
    @Import(name="vmSwappiness")
    private @Nullable Integer vmSwappiness;

    public Optional<Integer> vmSwappiness() {
        return Optional.ofNullable(this.vmSwappiness);
    }

    /**
     * Sysctl setting vm.vfs_cache_pressure.
     * 
     */
    @Import(name="vmVfsCachePressure")
    private @Nullable Integer vmVfsCachePressure;

    public Optional<Integer> vmVfsCachePressure() {
        return Optional.ofNullable(this.vmVfsCachePressure);
    }

    private SysctlConfigResponse() {}

    private SysctlConfigResponse(SysctlConfigResponse $) {
        this.fsAioMaxNr = $.fsAioMaxNr;
        this.fsFileMax = $.fsFileMax;
        this.fsInotifyMaxUserWatches = $.fsInotifyMaxUserWatches;
        this.fsNrOpen = $.fsNrOpen;
        this.kernelThreadsMax = $.kernelThreadsMax;
        this.netCoreNetdevMaxBacklog = $.netCoreNetdevMaxBacklog;
        this.netCoreOptmemMax = $.netCoreOptmemMax;
        this.netCoreRmemDefault = $.netCoreRmemDefault;
        this.netCoreRmemMax = $.netCoreRmemMax;
        this.netCoreSomaxconn = $.netCoreSomaxconn;
        this.netCoreWmemDefault = $.netCoreWmemDefault;
        this.netCoreWmemMax = $.netCoreWmemMax;
        this.netIpv4IpLocalPortRange = $.netIpv4IpLocalPortRange;
        this.netIpv4NeighDefaultGcThresh1 = $.netIpv4NeighDefaultGcThresh1;
        this.netIpv4NeighDefaultGcThresh2 = $.netIpv4NeighDefaultGcThresh2;
        this.netIpv4NeighDefaultGcThresh3 = $.netIpv4NeighDefaultGcThresh3;
        this.netIpv4TcpFinTimeout = $.netIpv4TcpFinTimeout;
        this.netIpv4TcpKeepaliveProbes = $.netIpv4TcpKeepaliveProbes;
        this.netIpv4TcpKeepaliveTime = $.netIpv4TcpKeepaliveTime;
        this.netIpv4TcpMaxSynBacklog = $.netIpv4TcpMaxSynBacklog;
        this.netIpv4TcpMaxTwBuckets = $.netIpv4TcpMaxTwBuckets;
        this.netIpv4TcpTwReuse = $.netIpv4TcpTwReuse;
        this.netIpv4TcpkeepaliveIntvl = $.netIpv4TcpkeepaliveIntvl;
        this.netNetfilterNfConntrackBuckets = $.netNetfilterNfConntrackBuckets;
        this.netNetfilterNfConntrackMax = $.netNetfilterNfConntrackMax;
        this.vmMaxMapCount = $.vmMaxMapCount;
        this.vmSwappiness = $.vmSwappiness;
        this.vmVfsCachePressure = $.vmVfsCachePressure;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SysctlConfigResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SysctlConfigResponse $;

        public Builder() {
            $ = new SysctlConfigResponse();
        }

        public Builder(SysctlConfigResponse defaults) {
            $ = new SysctlConfigResponse(Objects.requireNonNull(defaults));
        }

        public Builder fsAioMaxNr(@Nullable Integer fsAioMaxNr) {
            $.fsAioMaxNr = fsAioMaxNr;
            return this;
        }

        public Builder fsFileMax(@Nullable Integer fsFileMax) {
            $.fsFileMax = fsFileMax;
            return this;
        }

        public Builder fsInotifyMaxUserWatches(@Nullable Integer fsInotifyMaxUserWatches) {
            $.fsInotifyMaxUserWatches = fsInotifyMaxUserWatches;
            return this;
        }

        public Builder fsNrOpen(@Nullable Integer fsNrOpen) {
            $.fsNrOpen = fsNrOpen;
            return this;
        }

        public Builder kernelThreadsMax(@Nullable Integer kernelThreadsMax) {
            $.kernelThreadsMax = kernelThreadsMax;
            return this;
        }

        public Builder netCoreNetdevMaxBacklog(@Nullable Integer netCoreNetdevMaxBacklog) {
            $.netCoreNetdevMaxBacklog = netCoreNetdevMaxBacklog;
            return this;
        }

        public Builder netCoreOptmemMax(@Nullable Integer netCoreOptmemMax) {
            $.netCoreOptmemMax = netCoreOptmemMax;
            return this;
        }

        public Builder netCoreRmemDefault(@Nullable Integer netCoreRmemDefault) {
            $.netCoreRmemDefault = netCoreRmemDefault;
            return this;
        }

        public Builder netCoreRmemMax(@Nullable Integer netCoreRmemMax) {
            $.netCoreRmemMax = netCoreRmemMax;
            return this;
        }

        public Builder netCoreSomaxconn(@Nullable Integer netCoreSomaxconn) {
            $.netCoreSomaxconn = netCoreSomaxconn;
            return this;
        }

        public Builder netCoreWmemDefault(@Nullable Integer netCoreWmemDefault) {
            $.netCoreWmemDefault = netCoreWmemDefault;
            return this;
        }

        public Builder netCoreWmemMax(@Nullable Integer netCoreWmemMax) {
            $.netCoreWmemMax = netCoreWmemMax;
            return this;
        }

        public Builder netIpv4IpLocalPortRange(@Nullable String netIpv4IpLocalPortRange) {
            $.netIpv4IpLocalPortRange = netIpv4IpLocalPortRange;
            return this;
        }

        public Builder netIpv4NeighDefaultGcThresh1(@Nullable Integer netIpv4NeighDefaultGcThresh1) {
            $.netIpv4NeighDefaultGcThresh1 = netIpv4NeighDefaultGcThresh1;
            return this;
        }

        public Builder netIpv4NeighDefaultGcThresh2(@Nullable Integer netIpv4NeighDefaultGcThresh2) {
            $.netIpv4NeighDefaultGcThresh2 = netIpv4NeighDefaultGcThresh2;
            return this;
        }

        public Builder netIpv4NeighDefaultGcThresh3(@Nullable Integer netIpv4NeighDefaultGcThresh3) {
            $.netIpv4NeighDefaultGcThresh3 = netIpv4NeighDefaultGcThresh3;
            return this;
        }

        public Builder netIpv4TcpFinTimeout(@Nullable Integer netIpv4TcpFinTimeout) {
            $.netIpv4TcpFinTimeout = netIpv4TcpFinTimeout;
            return this;
        }

        public Builder netIpv4TcpKeepaliveProbes(@Nullable Integer netIpv4TcpKeepaliveProbes) {
            $.netIpv4TcpKeepaliveProbes = netIpv4TcpKeepaliveProbes;
            return this;
        }

        public Builder netIpv4TcpKeepaliveTime(@Nullable Integer netIpv4TcpKeepaliveTime) {
            $.netIpv4TcpKeepaliveTime = netIpv4TcpKeepaliveTime;
            return this;
        }

        public Builder netIpv4TcpMaxSynBacklog(@Nullable Integer netIpv4TcpMaxSynBacklog) {
            $.netIpv4TcpMaxSynBacklog = netIpv4TcpMaxSynBacklog;
            return this;
        }

        public Builder netIpv4TcpMaxTwBuckets(@Nullable Integer netIpv4TcpMaxTwBuckets) {
            $.netIpv4TcpMaxTwBuckets = netIpv4TcpMaxTwBuckets;
            return this;
        }

        public Builder netIpv4TcpTwReuse(@Nullable Boolean netIpv4TcpTwReuse) {
            $.netIpv4TcpTwReuse = netIpv4TcpTwReuse;
            return this;
        }

        public Builder netIpv4TcpkeepaliveIntvl(@Nullable Integer netIpv4TcpkeepaliveIntvl) {
            $.netIpv4TcpkeepaliveIntvl = netIpv4TcpkeepaliveIntvl;
            return this;
        }

        public Builder netNetfilterNfConntrackBuckets(@Nullable Integer netNetfilterNfConntrackBuckets) {
            $.netNetfilterNfConntrackBuckets = netNetfilterNfConntrackBuckets;
            return this;
        }

        public Builder netNetfilterNfConntrackMax(@Nullable Integer netNetfilterNfConntrackMax) {
            $.netNetfilterNfConntrackMax = netNetfilterNfConntrackMax;
            return this;
        }

        public Builder vmMaxMapCount(@Nullable Integer vmMaxMapCount) {
            $.vmMaxMapCount = vmMaxMapCount;
            return this;
        }

        public Builder vmSwappiness(@Nullable Integer vmSwappiness) {
            $.vmSwappiness = vmSwappiness;
            return this;
        }

        public Builder vmVfsCachePressure(@Nullable Integer vmVfsCachePressure) {
            $.vmVfsCachePressure = vmVfsCachePressure;
            return this;
        }

        public SysctlConfigResponse build() {
            return $;
        }
    }

}
