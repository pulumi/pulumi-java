// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datamigration.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Base class for file properties.
 * 
 */
public final class ProjectFilePropertiesResponse extends com.pulumi.resources.InvokeArgs {

    public static final ProjectFilePropertiesResponse Empty = new ProjectFilePropertiesResponse();

    /**
     * Optional File extension. If submitted it should not have a leading period and must match the extension from filePath.
     * 
     */
    @Import(name="extension")
    private @Nullable String extension;

    public Optional<String> extension() {
        return Optional.ofNullable(this.extension);
    }

    /**
     * Relative path of this file resource. This property can be set when creating or updating the file resource.
     * 
     */
    @Import(name="filePath")
    private @Nullable String filePath;

    public Optional<String> filePath() {
        return Optional.ofNullable(this.filePath);
    }

    /**
     * Modification DateTime.
     * 
     */
    @Import(name="lastModified", required=true)
    private String lastModified;

    public String lastModified() {
        return this.lastModified;
    }

    /**
     * File content type. This property can be modified to reflect the file content type.
     * 
     */
    @Import(name="mediaType")
    private @Nullable String mediaType;

    public Optional<String> mediaType() {
        return Optional.ofNullable(this.mediaType);
    }

    /**
     * File size.
     * 
     */
    @Import(name="size", required=true)
    private Double size;

    public Double size() {
        return this.size;
    }

    private ProjectFilePropertiesResponse() {}

    private ProjectFilePropertiesResponse(ProjectFilePropertiesResponse $) {
        this.extension = $.extension;
        this.filePath = $.filePath;
        this.lastModified = $.lastModified;
        this.mediaType = $.mediaType;
        this.size = $.size;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectFilePropertiesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectFilePropertiesResponse $;

        public Builder() {
            $ = new ProjectFilePropertiesResponse();
        }

        public Builder(ProjectFilePropertiesResponse defaults) {
            $ = new ProjectFilePropertiesResponse(Objects.requireNonNull(defaults));
        }

        public Builder extension(@Nullable String extension) {
            $.extension = extension;
            return this;
        }

        public Builder filePath(@Nullable String filePath) {
            $.filePath = filePath;
            return this;
        }

        public Builder lastModified(String lastModified) {
            $.lastModified = lastModified;
            return this;
        }

        public Builder mediaType(@Nullable String mediaType) {
            $.mediaType = mediaType;
            return this;
        }

        public Builder size(Double size) {
            $.size = size;
            return this;
        }

        public ProjectFilePropertiesResponse build() {
            $.lastModified = Objects.requireNonNull($.lastModified, "expected parameter 'lastModified' to be non-null");
            $.size = Objects.requireNonNull($.size, "expected parameter 'size' to be non-null");
            return $;
        }
    }

}
