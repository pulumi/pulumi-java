// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.compute.inputs;

import com.pulumi.azurenative.compute.inputs.CloudServiceExtensionProfileResponse;
import com.pulumi.azurenative.compute.inputs.CloudServiceNetworkProfileResponse;
import com.pulumi.azurenative.compute.inputs.CloudServiceOsProfileResponse;
import com.pulumi.azurenative.compute.inputs.CloudServiceRoleProfileResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Cloud service properties
 * 
 */
public final class CloudServicePropertiesResponse extends com.pulumi.resources.InvokeArgs {

    public static final CloudServicePropertiesResponse Empty = new CloudServicePropertiesResponse();

    /**
     * (Optional) Indicates whether the role sku properties (roleProfile.roles.sku) specified in the model/template should override the role instance count and vm size specified in the .cscfg and .csdef respectively.
     * The default value is `false`.
     * 
     */
    @Import(name="allowModelOverride")
    private @Nullable Boolean allowModelOverride;

    public Optional<Boolean> allowModelOverride() {
        return Optional.ofNullable(this.allowModelOverride);
    }

    /**
     * Specifies the XML service configuration (.cscfg) for the cloud service.
     * 
     */
    @Import(name="configuration")
    private @Nullable String configuration;

    public Optional<String> configuration() {
        return Optional.ofNullable(this.configuration);
    }

    /**
     * Specifies a URL that refers to the location of the service configuration in the Blob service. The service package URL  can be Shared Access Signature (SAS) URI from any storage account.
     * This is a write-only property and is not returned in GET calls.
     * 
     */
    @Import(name="configurationUrl")
    private @Nullable String configurationUrl;

    public Optional<String> configurationUrl() {
        return Optional.ofNullable(this.configurationUrl);
    }

    /**
     * Describes a cloud service extension profile.
     * 
     */
    @Import(name="extensionProfile")
    private @Nullable CloudServiceExtensionProfileResponse extensionProfile;

    public Optional<CloudServiceExtensionProfileResponse> extensionProfile() {
        return Optional.ofNullable(this.extensionProfile);
    }

    /**
     * Network Profile for the cloud service.
     * 
     */
    @Import(name="networkProfile")
    private @Nullable CloudServiceNetworkProfileResponse networkProfile;

    public Optional<CloudServiceNetworkProfileResponse> networkProfile() {
        return Optional.ofNullable(this.networkProfile);
    }

    /**
     * Describes the OS profile for the cloud service.
     * 
     */
    @Import(name="osProfile")
    private @Nullable CloudServiceOsProfileResponse osProfile;

    public Optional<CloudServiceOsProfileResponse> osProfile() {
        return Optional.ofNullable(this.osProfile);
    }

    /**
     * Specifies a URL that refers to the location of the service package in the Blob service. The service package URL can be Shared Access Signature (SAS) URI from any storage account.
     * This is a write-only property and is not returned in GET calls.
     * 
     */
    @Import(name="packageUrl")
    private @Nullable String packageUrl;

    public Optional<String> packageUrl() {
        return Optional.ofNullable(this.packageUrl);
    }

    /**
     * The provisioning state, which only appears in the response.
     * 
     */
    @Import(name="provisioningState", required=true)
    private String provisioningState;

    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Describes the role profile for the cloud service.
     * 
     */
    @Import(name="roleProfile")
    private @Nullable CloudServiceRoleProfileResponse roleProfile;

    public Optional<CloudServiceRoleProfileResponse> roleProfile() {
        return Optional.ofNullable(this.roleProfile);
    }

    /**
     * (Optional) Indicates whether to start the cloud service immediately after it is created. The default value is `true`.
     * If false, the service model is still deployed, but the code is not run immediately. Instead, the service is PoweredOff until you call Start, at which time the service will be started. A deployed service still incurs charges, even if it is poweredoff.
     * 
     */
    @Import(name="startCloudService")
    private @Nullable Boolean startCloudService;

    public Optional<Boolean> startCloudService() {
        return Optional.ofNullable(this.startCloudService);
    }

    /**
     * The unique identifier for the cloud service.
     * 
     */
    @Import(name="uniqueId", required=true)
    private String uniqueId;

    public String uniqueId() {
        return this.uniqueId;
    }

    /**
     * Update mode for the cloud service. Role instances are allocated to update domains when the service is deployed. Updates can be initiated manually in each update domain or initiated automatically in all update domains.
     * Possible Values are &lt;br /&gt;&lt;br /&gt;**Auto**&lt;br /&gt;&lt;br /&gt;**Manual** &lt;br /&gt;&lt;br /&gt;**Simultaneous**&lt;br /&gt;&lt;br /&gt;
     * If not specified, the default value is Auto. If set to Manual, PUT UpdateDomain must be called to apply the update. If set to Auto, the update is automatically applied to each update domain in sequence.
     * 
     */
    @Import(name="upgradeMode")
    private @Nullable String upgradeMode;

    public Optional<String> upgradeMode() {
        return Optional.ofNullable(this.upgradeMode);
    }

    private CloudServicePropertiesResponse() {}

    private CloudServicePropertiesResponse(CloudServicePropertiesResponse $) {
        this.allowModelOverride = $.allowModelOverride;
        this.configuration = $.configuration;
        this.configurationUrl = $.configurationUrl;
        this.extensionProfile = $.extensionProfile;
        this.networkProfile = $.networkProfile;
        this.osProfile = $.osProfile;
        this.packageUrl = $.packageUrl;
        this.provisioningState = $.provisioningState;
        this.roleProfile = $.roleProfile;
        this.startCloudService = $.startCloudService;
        this.uniqueId = $.uniqueId;
        this.upgradeMode = $.upgradeMode;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CloudServicePropertiesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CloudServicePropertiesResponse $;

        public Builder() {
            $ = new CloudServicePropertiesResponse();
        }

        public Builder(CloudServicePropertiesResponse defaults) {
            $ = new CloudServicePropertiesResponse(Objects.requireNonNull(defaults));
        }

        public Builder allowModelOverride(@Nullable Boolean allowModelOverride) {
            $.allowModelOverride = allowModelOverride;
            return this;
        }

        public Builder configuration(@Nullable String configuration) {
            $.configuration = configuration;
            return this;
        }

        public Builder configurationUrl(@Nullable String configurationUrl) {
            $.configurationUrl = configurationUrl;
            return this;
        }

        public Builder extensionProfile(@Nullable CloudServiceExtensionProfileResponse extensionProfile) {
            $.extensionProfile = extensionProfile;
            return this;
        }

        public Builder networkProfile(@Nullable CloudServiceNetworkProfileResponse networkProfile) {
            $.networkProfile = networkProfile;
            return this;
        }

        public Builder osProfile(@Nullable CloudServiceOsProfileResponse osProfile) {
            $.osProfile = osProfile;
            return this;
        }

        public Builder packageUrl(@Nullable String packageUrl) {
            $.packageUrl = packageUrl;
            return this;
        }

        public Builder provisioningState(String provisioningState) {
            $.provisioningState = provisioningState;
            return this;
        }

        public Builder roleProfile(@Nullable CloudServiceRoleProfileResponse roleProfile) {
            $.roleProfile = roleProfile;
            return this;
        }

        public Builder startCloudService(@Nullable Boolean startCloudService) {
            $.startCloudService = startCloudService;
            return this;
        }

        public Builder uniqueId(String uniqueId) {
            $.uniqueId = uniqueId;
            return this;
        }

        public Builder upgradeMode(@Nullable String upgradeMode) {
            $.upgradeMode = upgradeMode;
            return this;
        }

        public CloudServicePropertiesResponse build() {
            $.provisioningState = Objects.requireNonNull($.provisioningState, "expected parameter 'provisioningState' to be non-null");
            $.uniqueId = Objects.requireNonNull($.uniqueId, "expected parameter 'uniqueId' to be non-null");
            return $;
        }
    }

}
