// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.authorization;

import com.pulumi.azurenative.authorization.inputs.PermissionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class RoleDefinitionArgs extends com.pulumi.resources.ResourceArgs {

    public static final RoleDefinitionArgs Empty = new RoleDefinitionArgs();

    /**
     * Role definition assignable scopes.
     * 
     */
    @Import(name="assignableScopes")
      private final @Nullable Output<List<String>> assignableScopes;

    public Output<List<String>> assignableScopes() {
        return this.assignableScopes == null ? Codegen.empty() : this.assignableScopes;
    }

    /**
     * The role definition description.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> description() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * Role definition permissions.
     * 
     */
    @Import(name="permissions")
      private final @Nullable Output<List<PermissionArgs>> permissions;

    public Output<List<PermissionArgs>> permissions() {
        return this.permissions == null ? Codegen.empty() : this.permissions;
    }

    /**
     * The ID of the role definition.
     * 
     */
    @Import(name="roleDefinitionId")
      private final @Nullable Output<String> roleDefinitionId;

    public Output<String> roleDefinitionId() {
        return this.roleDefinitionId == null ? Codegen.empty() : this.roleDefinitionId;
    }

    /**
     * The role name.
     * 
     */
    @Import(name="roleName")
      private final @Nullable Output<String> roleName;

    public Output<String> roleName() {
        return this.roleName == null ? Codegen.empty() : this.roleName;
    }

    /**
     * The role type.
     * 
     */
    @Import(name="roleType")
      private final @Nullable Output<String> roleType;

    public Output<String> roleType() {
        return this.roleType == null ? Codegen.empty() : this.roleType;
    }

    /**
     * The scope of the role definition.
     * 
     */
    @Import(name="scope", required=true)
      private final Output<String> scope;

    public Output<String> scope() {
        return this.scope;
    }

    public RoleDefinitionArgs(
        @Nullable Output<List<String>> assignableScopes,
        @Nullable Output<String> description,
        @Nullable Output<List<PermissionArgs>> permissions,
        @Nullable Output<String> roleDefinitionId,
        @Nullable Output<String> roleName,
        @Nullable Output<String> roleType,
        Output<String> scope) {
        this.assignableScopes = assignableScopes;
        this.description = description;
        this.permissions = permissions;
        this.roleDefinitionId = roleDefinitionId;
        this.roleName = roleName;
        this.roleType = roleType;
        this.scope = Objects.requireNonNull(scope, "expected parameter 'scope' to be non-null");
    }

    private RoleDefinitionArgs() {
        this.assignableScopes = Codegen.empty();
        this.description = Codegen.empty();
        this.permissions = Codegen.empty();
        this.roleDefinitionId = Codegen.empty();
        this.roleName = Codegen.empty();
        this.roleType = Codegen.empty();
        this.scope = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RoleDefinitionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<String>> assignableScopes;
        private @Nullable Output<String> description;
        private @Nullable Output<List<PermissionArgs>> permissions;
        private @Nullable Output<String> roleDefinitionId;
        private @Nullable Output<String> roleName;
        private @Nullable Output<String> roleType;
        private Output<String> scope;

        public Builder() {
    	      // Empty
        }

        public Builder(RoleDefinitionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.assignableScopes = defaults.assignableScopes;
    	      this.description = defaults.description;
    	      this.permissions = defaults.permissions;
    	      this.roleDefinitionId = defaults.roleDefinitionId;
    	      this.roleName = defaults.roleName;
    	      this.roleType = defaults.roleType;
    	      this.scope = defaults.scope;
        }

        public Builder assignableScopes(@Nullable Output<List<String>> assignableScopes) {
            this.assignableScopes = assignableScopes;
            return this;
        }
        public Builder assignableScopes(@Nullable List<String> assignableScopes) {
            this.assignableScopes = Codegen.ofNullable(assignableScopes);
            return this;
        }
        public Builder assignableScopes(String... assignableScopes) {
            return assignableScopes(List.of(assignableScopes));
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder permissions(@Nullable Output<List<PermissionArgs>> permissions) {
            this.permissions = permissions;
            return this;
        }
        public Builder permissions(@Nullable List<PermissionArgs> permissions) {
            this.permissions = Codegen.ofNullable(permissions);
            return this;
        }
        public Builder permissions(PermissionArgs... permissions) {
            return permissions(List.of(permissions));
        }
        public Builder roleDefinitionId(@Nullable Output<String> roleDefinitionId) {
            this.roleDefinitionId = roleDefinitionId;
            return this;
        }
        public Builder roleDefinitionId(@Nullable String roleDefinitionId) {
            this.roleDefinitionId = Codegen.ofNullable(roleDefinitionId);
            return this;
        }
        public Builder roleName(@Nullable Output<String> roleName) {
            this.roleName = roleName;
            return this;
        }
        public Builder roleName(@Nullable String roleName) {
            this.roleName = Codegen.ofNullable(roleName);
            return this;
        }
        public Builder roleType(@Nullable Output<String> roleType) {
            this.roleType = roleType;
            return this;
        }
        public Builder roleType(@Nullable String roleType) {
            this.roleType = Codegen.ofNullable(roleType);
            return this;
        }
        public Builder scope(Output<String> scope) {
            this.scope = Objects.requireNonNull(scope);
            return this;
        }
        public Builder scope(String scope) {
            this.scope = Output.of(Objects.requireNonNull(scope));
            return this;
        }        public RoleDefinitionArgs build() {
            return new RoleDefinitionArgs(assignableScopes, description, permissions, roleDefinitionId, roleName, roleType, scope);
        }
    }
}
