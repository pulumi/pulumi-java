// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.azurenative.network.inputs.LoadBalancerBackendAddressResponse;
import com.pulumi.azurenative.network.inputs.NetworkInterfaceIPConfigurationResponse;
import com.pulumi.azurenative.network.inputs.SubResourceResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Pool of backend IP addresses.
 * 
 */
public final class BackendAddressPoolResponse extends com.pulumi.resources.InvokeArgs {

    public static final BackendAddressPoolResponse Empty = new BackendAddressPoolResponse();

    /**
     * An array of references to IP addresses defined in network interfaces.
     * 
     */
    @Import(name="backendIPConfigurations", required=true)
    private List<NetworkInterfaceIPConfigurationResponse> backendIPConfigurations;

    public List<NetworkInterfaceIPConfigurationResponse> backendIPConfigurations() {
        return this.backendIPConfigurations;
    }

    /**
     * A unique read-only string that changes whenever the resource is updated.
     * 
     */
    @Import(name="etag", required=true)
    private String etag;

    public String etag() {
        return this.etag;
    }

    /**
     * Resource ID.
     * 
     */
    @Import(name="id")
    private @Nullable String id;

    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * An array of backend addresses.
     * 
     */
    @Import(name="loadBalancerBackendAddresses")
    private @Nullable List<LoadBalancerBackendAddressResponse> loadBalancerBackendAddresses;

    public Optional<List<LoadBalancerBackendAddressResponse>> loadBalancerBackendAddresses() {
        return Optional.ofNullable(this.loadBalancerBackendAddresses);
    }

    /**
     * An array of references to load balancing rules that use this backend address pool.
     * 
     */
    @Import(name="loadBalancingRules", required=true)
    private List<SubResourceResponse> loadBalancingRules;

    public List<SubResourceResponse> loadBalancingRules() {
        return this.loadBalancingRules;
    }

    /**
     * The location of the backend address pool.
     * 
     */
    @Import(name="location")
    private @Nullable String location;

    public Optional<String> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name of the resource that is unique within the set of backend address pools used by the load balancer. This name can be used to access the resource.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * A reference to an outbound rule that uses this backend address pool.
     * 
     */
    @Import(name="outboundRule", required=true)
    private SubResourceResponse outboundRule;

    public SubResourceResponse outboundRule() {
        return this.outboundRule;
    }

    /**
     * An array of references to outbound rules that use this backend address pool.
     * 
     */
    @Import(name="outboundRules", required=true)
    private List<SubResourceResponse> outboundRules;

    public List<SubResourceResponse> outboundRules() {
        return this.outboundRules;
    }

    /**
     * The provisioning state of the backend address pool resource.
     * 
     */
    @Import(name="provisioningState", required=true)
    private String provisioningState;

    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Type of the resource.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    public String type() {
        return this.type;
    }

    private BackendAddressPoolResponse() {}

    private BackendAddressPoolResponse(BackendAddressPoolResponse $) {
        this.backendIPConfigurations = $.backendIPConfigurations;
        this.etag = $.etag;
        this.id = $.id;
        this.loadBalancerBackendAddresses = $.loadBalancerBackendAddresses;
        this.loadBalancingRules = $.loadBalancingRules;
        this.location = $.location;
        this.name = $.name;
        this.outboundRule = $.outboundRule;
        this.outboundRules = $.outboundRules;
        this.provisioningState = $.provisioningState;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BackendAddressPoolResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BackendAddressPoolResponse $;

        public Builder() {
            $ = new BackendAddressPoolResponse();
        }

        public Builder(BackendAddressPoolResponse defaults) {
            $ = new BackendAddressPoolResponse(Objects.requireNonNull(defaults));
        }

        public Builder backendIPConfigurations(List<NetworkInterfaceIPConfigurationResponse> backendIPConfigurations) {
            $.backendIPConfigurations = backendIPConfigurations;
            return this;
        }

        public Builder backendIPConfigurations(NetworkInterfaceIPConfigurationResponse... backendIPConfigurations) {
            return backendIPConfigurations(List.of(backendIPConfigurations));
        }

        public Builder etag(String etag) {
            $.etag = etag;
            return this;
        }

        public Builder id(@Nullable String id) {
            $.id = id;
            return this;
        }

        public Builder loadBalancerBackendAddresses(@Nullable List<LoadBalancerBackendAddressResponse> loadBalancerBackendAddresses) {
            $.loadBalancerBackendAddresses = loadBalancerBackendAddresses;
            return this;
        }

        public Builder loadBalancerBackendAddresses(LoadBalancerBackendAddressResponse... loadBalancerBackendAddresses) {
            return loadBalancerBackendAddresses(List.of(loadBalancerBackendAddresses));
        }

        public Builder loadBalancingRules(List<SubResourceResponse> loadBalancingRules) {
            $.loadBalancingRules = loadBalancingRules;
            return this;
        }

        public Builder loadBalancingRules(SubResourceResponse... loadBalancingRules) {
            return loadBalancingRules(List.of(loadBalancingRules));
        }

        public Builder location(@Nullable String location) {
            $.location = location;
            return this;
        }

        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        public Builder outboundRule(SubResourceResponse outboundRule) {
            $.outboundRule = outboundRule;
            return this;
        }

        public Builder outboundRules(List<SubResourceResponse> outboundRules) {
            $.outboundRules = outboundRules;
            return this;
        }

        public Builder outboundRules(SubResourceResponse... outboundRules) {
            return outboundRules(List.of(outboundRules));
        }

        public Builder provisioningState(String provisioningState) {
            $.provisioningState = provisioningState;
            return this;
        }

        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public BackendAddressPoolResponse build() {
            $.backendIPConfigurations = Objects.requireNonNull($.backendIPConfigurations, "expected parameter 'backendIPConfigurations' to be non-null");
            $.etag = Objects.requireNonNull($.etag, "expected parameter 'etag' to be non-null");
            $.loadBalancingRules = Objects.requireNonNull($.loadBalancingRules, "expected parameter 'loadBalancingRules' to be non-null");
            $.outboundRule = Objects.requireNonNull($.outboundRule, "expected parameter 'outboundRule' to be non-null");
            $.outboundRules = Objects.requireNonNull($.outboundRules, "expected parameter 'outboundRules' to be non-null");
            $.provisioningState = Objects.requireNonNull($.provisioningState, "expected parameter 'provisioningState' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
