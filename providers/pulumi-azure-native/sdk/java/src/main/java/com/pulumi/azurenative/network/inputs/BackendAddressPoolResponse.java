// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.azurenative.network.inputs.LoadBalancerBackendAddressResponse;
import com.pulumi.azurenative.network.inputs.NetworkInterfaceIPConfigurationResponse;
import com.pulumi.azurenative.network.inputs.SubResourceResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Pool of backend IP addresses.
 * 
 */
public final class BackendAddressPoolResponse extends com.pulumi.resources.InvokeArgs {

    public static final BackendAddressPoolResponse Empty = new BackendAddressPoolResponse();

    /**
     * An array of references to IP addresses defined in network interfaces.
     * 
     */
    @Import(name="backendIPConfigurations", required=true)
    private List<NetworkInterfaceIPConfigurationResponse> backendIPConfigurations;

    /**
     * @return An array of references to IP addresses defined in network interfaces.
     * 
     */
    public List<NetworkInterfaceIPConfigurationResponse> backendIPConfigurations() {
        return this.backendIPConfigurations;
    }

    /**
     * A unique read-only string that changes whenever the resource is updated.
     * 
     */
    @Import(name="etag", required=true)
    private String etag;

    /**
     * @return A unique read-only string that changes whenever the resource is updated.
     * 
     */
    public String etag() {
        return this.etag;
    }

    /**
     * Resource ID.
     * 
     */
    @Import(name="id")
    private @Nullable String id;

    /**
     * @return Resource ID.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * An array of backend addresses.
     * 
     */
    @Import(name="loadBalancerBackendAddresses")
    private @Nullable List<LoadBalancerBackendAddressResponse> loadBalancerBackendAddresses;

    /**
     * @return An array of backend addresses.
     * 
     */
    public Optional<List<LoadBalancerBackendAddressResponse>> loadBalancerBackendAddresses() {
        return Optional.ofNullable(this.loadBalancerBackendAddresses);
    }

    /**
     * An array of references to load balancing rules that use this backend address pool.
     * 
     */
    @Import(name="loadBalancingRules", required=true)
    private List<SubResourceResponse> loadBalancingRules;

    /**
     * @return An array of references to load balancing rules that use this backend address pool.
     * 
     */
    public List<SubResourceResponse> loadBalancingRules() {
        return this.loadBalancingRules;
    }

    /**
     * The location of the backend address pool.
     * 
     */
    @Import(name="location")
    private @Nullable String location;

    /**
     * @return The location of the backend address pool.
     * 
     */
    public Optional<String> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name of the resource that is unique within the set of backend address pools used by the load balancer. This name can be used to access the resource.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return The name of the resource that is unique within the set of backend address pools used by the load balancer. This name can be used to access the resource.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * A reference to an outbound rule that uses this backend address pool.
     * 
     */
    @Import(name="outboundRule", required=true)
    private SubResourceResponse outboundRule;

    /**
     * @return A reference to an outbound rule that uses this backend address pool.
     * 
     */
    public SubResourceResponse outboundRule() {
        return this.outboundRule;
    }

    /**
     * An array of references to outbound rules that use this backend address pool.
     * 
     */
    @Import(name="outboundRules", required=true)
    private List<SubResourceResponse> outboundRules;

    /**
     * @return An array of references to outbound rules that use this backend address pool.
     * 
     */
    public List<SubResourceResponse> outboundRules() {
        return this.outboundRules;
    }

    /**
     * The provisioning state of the backend address pool resource.
     * 
     */
    @Import(name="provisioningState", required=true)
    private String provisioningState;

    /**
     * @return The provisioning state of the backend address pool resource.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Type of the resource.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    /**
     * @return Type of the resource.
     * 
     */
    public String type() {
        return this.type;
    }

    private BackendAddressPoolResponse() {}

    private BackendAddressPoolResponse(BackendAddressPoolResponse $) {
        this.backendIPConfigurations = $.backendIPConfigurations;
        this.etag = $.etag;
        this.id = $.id;
        this.loadBalancerBackendAddresses = $.loadBalancerBackendAddresses;
        this.loadBalancingRules = $.loadBalancingRules;
        this.location = $.location;
        this.name = $.name;
        this.outboundRule = $.outboundRule;
        this.outboundRules = $.outboundRules;
        this.provisioningState = $.provisioningState;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BackendAddressPoolResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BackendAddressPoolResponse $;

        public Builder() {
            $ = new BackendAddressPoolResponse();
        }

        public Builder(BackendAddressPoolResponse defaults) {
            $ = new BackendAddressPoolResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param backendIPConfigurations An array of references to IP addresses defined in network interfaces.
         * 
         * @return builder
         * 
         */
        public Builder backendIPConfigurations(List<NetworkInterfaceIPConfigurationResponse> backendIPConfigurations) {
            $.backendIPConfigurations = backendIPConfigurations;
            return this;
        }

        /**
         * @param backendIPConfigurations An array of references to IP addresses defined in network interfaces.
         * 
         * @return builder
         * 
         */
        public Builder backendIPConfigurations(NetworkInterfaceIPConfigurationResponse... backendIPConfigurations) {
            return backendIPConfigurations(List.of(backendIPConfigurations));
        }

        /**
         * @param etag A unique read-only string that changes whenever the resource is updated.
         * 
         * @return builder
         * 
         */
        public Builder etag(String etag) {
            $.etag = etag;
            return this;
        }

        /**
         * @param id Resource ID.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable String id) {
            $.id = id;
            return this;
        }

        /**
         * @param loadBalancerBackendAddresses An array of backend addresses.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerBackendAddresses(@Nullable List<LoadBalancerBackendAddressResponse> loadBalancerBackendAddresses) {
            $.loadBalancerBackendAddresses = loadBalancerBackendAddresses;
            return this;
        }

        /**
         * @param loadBalancerBackendAddresses An array of backend addresses.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerBackendAddresses(LoadBalancerBackendAddressResponse... loadBalancerBackendAddresses) {
            return loadBalancerBackendAddresses(List.of(loadBalancerBackendAddresses));
        }

        /**
         * @param loadBalancingRules An array of references to load balancing rules that use this backend address pool.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancingRules(List<SubResourceResponse> loadBalancingRules) {
            $.loadBalancingRules = loadBalancingRules;
            return this;
        }

        /**
         * @param loadBalancingRules An array of references to load balancing rules that use this backend address pool.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancingRules(SubResourceResponse... loadBalancingRules) {
            return loadBalancingRules(List.of(loadBalancingRules));
        }

        /**
         * @param location The location of the backend address pool.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable String location) {
            $.location = location;
            return this;
        }

        /**
         * @param name The name of the resource that is unique within the set of backend address pools used by the load balancer. This name can be used to access the resource.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param outboundRule A reference to an outbound rule that uses this backend address pool.
         * 
         * @return builder
         * 
         */
        public Builder outboundRule(SubResourceResponse outboundRule) {
            $.outboundRule = outboundRule;
            return this;
        }

        /**
         * @param outboundRules An array of references to outbound rules that use this backend address pool.
         * 
         * @return builder
         * 
         */
        public Builder outboundRules(List<SubResourceResponse> outboundRules) {
            $.outboundRules = outboundRules;
            return this;
        }

        /**
         * @param outboundRules An array of references to outbound rules that use this backend address pool.
         * 
         * @return builder
         * 
         */
        public Builder outboundRules(SubResourceResponse... outboundRules) {
            return outboundRules(List.of(outboundRules));
        }

        /**
         * @param provisioningState The provisioning state of the backend address pool resource.
         * 
         * @return builder
         * 
         */
        public Builder provisioningState(String provisioningState) {
            $.provisioningState = provisioningState;
            return this;
        }

        /**
         * @param type Type of the resource.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public BackendAddressPoolResponse build() {
            $.backendIPConfigurations = Objects.requireNonNull($.backendIPConfigurations, "expected parameter 'backendIPConfigurations' to be non-null");
            $.etag = Objects.requireNonNull($.etag, "expected parameter 'etag' to be non-null");
            $.loadBalancingRules = Objects.requireNonNull($.loadBalancingRules, "expected parameter 'loadBalancingRules' to be non-null");
            $.outboundRule = Objects.requireNonNull($.outboundRule, "expected parameter 'outboundRule' to be non-null");
            $.outboundRules = Objects.requireNonNull($.outboundRules, "expected parameter 'outboundRules' to be non-null");
            $.provisioningState = Objects.requireNonNull($.provisioningState, "expected parameter 'provisioningState' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
