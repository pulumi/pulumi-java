// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.recoveryservices.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * This is used to represent the various nodes of the distributed container.
 * 
 */
public final class DistributedNodesInfoArgs extends com.pulumi.resources.ResourceArgs {

    public static final DistributedNodesInfoArgs Empty = new DistributedNodesInfoArgs();

    /**
     * Name of the node under a distributed container.
     * 
     */
    @Import(name="nodeName")
    private @Nullable Output<String> nodeName;

    /**
     * @return Name of the node under a distributed container.
     * 
     */
    public Optional<Output<String>> nodeName() {
        return Optional.ofNullable(this.nodeName);
    }

    /**
     * Status of this Node.
     * Failed | Succeeded
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Status of this Node.
     * Failed | Succeeded
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private DistributedNodesInfoArgs() {}

    private DistributedNodesInfoArgs(DistributedNodesInfoArgs $) {
        this.nodeName = $.nodeName;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DistributedNodesInfoArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DistributedNodesInfoArgs $;

        public Builder() {
            $ = new DistributedNodesInfoArgs();
        }

        public Builder(DistributedNodesInfoArgs defaults) {
            $ = new DistributedNodesInfoArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param nodeName Name of the node under a distributed container.
         * 
         * @return builder
         * 
         */
        public Builder nodeName(@Nullable Output<String> nodeName) {
            $.nodeName = nodeName;
            return this;
        }

        /**
         * @param nodeName Name of the node under a distributed container.
         * 
         * @return builder
         * 
         */
        public Builder nodeName(String nodeName) {
            return nodeName(Output.of(nodeName));
        }

        /**
         * @param status Status of this Node.
         * Failed | Succeeded
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Status of this Node.
         * Failed | Succeeded
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public DistributedNodesInfoArgs build() {
            return $;
        }
    }

}
