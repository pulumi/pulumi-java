// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.aad.outputs;

import com.pulumi.azurenative.aad.outputs.HealthAlertResponse;
import com.pulumi.azurenative.aad.outputs.HealthMonitorResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ReplicaSetResponse {
    /**
     * @return List of Domain Controller IP Address
     * 
     */
    private final List<String> domainControllerIpAddress;
    /**
     * @return External access ip address.
     * 
     */
    private final String externalAccessIpAddress;
    /**
     * @return List of Domain Health Alerts
     * 
     */
    private final List<HealthAlertResponse> healthAlerts;
    /**
     * @return Last domain evaluation run DateTime
     * 
     */
    private final String healthLastEvaluated;
    /**
     * @return List of Domain Health Monitors
     * 
     */
    private final List<HealthMonitorResponse> healthMonitors;
    /**
     * @return Virtual network location
     * 
     */
    private final @Nullable String location;
    /**
     * @return ReplicaSet Id
     * 
     */
    private final String replicaSetId;
    /**
     * @return Status of Domain Service instance
     * 
     */
    private final String serviceStatus;
    /**
     * @return The name of the virtual network that Domain Services will be deployed on. The id of the subnet that Domain Services will be deployed on. /virtualNetwork/vnetName/subnets/subnetName.
     * 
     */
    private final @Nullable String subnetId;
    /**
     * @return Virtual network site id
     * 
     */
    private final String vnetSiteId;

    @CustomType.Constructor
    private ReplicaSetResponse(
        @CustomType.Parameter("domainControllerIpAddress") List<String> domainControllerIpAddress,
        @CustomType.Parameter("externalAccessIpAddress") String externalAccessIpAddress,
        @CustomType.Parameter("healthAlerts") List<HealthAlertResponse> healthAlerts,
        @CustomType.Parameter("healthLastEvaluated") String healthLastEvaluated,
        @CustomType.Parameter("healthMonitors") List<HealthMonitorResponse> healthMonitors,
        @CustomType.Parameter("location") @Nullable String location,
        @CustomType.Parameter("replicaSetId") String replicaSetId,
        @CustomType.Parameter("serviceStatus") String serviceStatus,
        @CustomType.Parameter("subnetId") @Nullable String subnetId,
        @CustomType.Parameter("vnetSiteId") String vnetSiteId) {
        this.domainControllerIpAddress = domainControllerIpAddress;
        this.externalAccessIpAddress = externalAccessIpAddress;
        this.healthAlerts = healthAlerts;
        this.healthLastEvaluated = healthLastEvaluated;
        this.healthMonitors = healthMonitors;
        this.location = location;
        this.replicaSetId = replicaSetId;
        this.serviceStatus = serviceStatus;
        this.subnetId = subnetId;
        this.vnetSiteId = vnetSiteId;
    }

    /**
     * @return List of Domain Controller IP Address
     * 
     */
    public List<String> domainControllerIpAddress() {
        return this.domainControllerIpAddress;
    }
    /**
     * @return External access ip address.
     * 
     */
    public String externalAccessIpAddress() {
        return this.externalAccessIpAddress;
    }
    /**
     * @return List of Domain Health Alerts
     * 
     */
    public List<HealthAlertResponse> healthAlerts() {
        return this.healthAlerts;
    }
    /**
     * @return Last domain evaluation run DateTime
     * 
     */
    public String healthLastEvaluated() {
        return this.healthLastEvaluated;
    }
    /**
     * @return List of Domain Health Monitors
     * 
     */
    public List<HealthMonitorResponse> healthMonitors() {
        return this.healthMonitors;
    }
    /**
     * @return Virtual network location
     * 
     */
    public Optional<String> location() {
        return Optional.ofNullable(this.location);
    }
    /**
     * @return ReplicaSet Id
     * 
     */
    public String replicaSetId() {
        return this.replicaSetId;
    }
    /**
     * @return Status of Domain Service instance
     * 
     */
    public String serviceStatus() {
        return this.serviceStatus;
    }
    /**
     * @return The name of the virtual network that Domain Services will be deployed on. The id of the subnet that Domain Services will be deployed on. /virtualNetwork/vnetName/subnets/subnetName.
     * 
     */
    public Optional<String> subnetId() {
        return Optional.ofNullable(this.subnetId);
    }
    /**
     * @return Virtual network site id
     * 
     */
    public String vnetSiteId() {
        return this.vnetSiteId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ReplicaSetResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<String> domainControllerIpAddress;
        private String externalAccessIpAddress;
        private List<HealthAlertResponse> healthAlerts;
        private String healthLastEvaluated;
        private List<HealthMonitorResponse> healthMonitors;
        private @Nullable String location;
        private String replicaSetId;
        private String serviceStatus;
        private @Nullable String subnetId;
        private String vnetSiteId;

        public Builder() {
    	      // Empty
        }

        public Builder(ReplicaSetResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.domainControllerIpAddress = defaults.domainControllerIpAddress;
    	      this.externalAccessIpAddress = defaults.externalAccessIpAddress;
    	      this.healthAlerts = defaults.healthAlerts;
    	      this.healthLastEvaluated = defaults.healthLastEvaluated;
    	      this.healthMonitors = defaults.healthMonitors;
    	      this.location = defaults.location;
    	      this.replicaSetId = defaults.replicaSetId;
    	      this.serviceStatus = defaults.serviceStatus;
    	      this.subnetId = defaults.subnetId;
    	      this.vnetSiteId = defaults.vnetSiteId;
        }

        public Builder domainControllerIpAddress(List<String> domainControllerIpAddress) {
            this.domainControllerIpAddress = Objects.requireNonNull(domainControllerIpAddress);
            return this;
        }
        public Builder domainControllerIpAddress(String... domainControllerIpAddress) {
            return domainControllerIpAddress(List.of(domainControllerIpAddress));
        }
        public Builder externalAccessIpAddress(String externalAccessIpAddress) {
            this.externalAccessIpAddress = Objects.requireNonNull(externalAccessIpAddress);
            return this;
        }
        public Builder healthAlerts(List<HealthAlertResponse> healthAlerts) {
            this.healthAlerts = Objects.requireNonNull(healthAlerts);
            return this;
        }
        public Builder healthAlerts(HealthAlertResponse... healthAlerts) {
            return healthAlerts(List.of(healthAlerts));
        }
        public Builder healthLastEvaluated(String healthLastEvaluated) {
            this.healthLastEvaluated = Objects.requireNonNull(healthLastEvaluated);
            return this;
        }
        public Builder healthMonitors(List<HealthMonitorResponse> healthMonitors) {
            this.healthMonitors = Objects.requireNonNull(healthMonitors);
            return this;
        }
        public Builder healthMonitors(HealthMonitorResponse... healthMonitors) {
            return healthMonitors(List.of(healthMonitors));
        }
        public Builder location(@Nullable String location) {
            this.location = location;
            return this;
        }
        public Builder replicaSetId(String replicaSetId) {
            this.replicaSetId = Objects.requireNonNull(replicaSetId);
            return this;
        }
        public Builder serviceStatus(String serviceStatus) {
            this.serviceStatus = Objects.requireNonNull(serviceStatus);
            return this;
        }
        public Builder subnetId(@Nullable String subnetId) {
            this.subnetId = subnetId;
            return this;
        }
        public Builder vnetSiteId(String vnetSiteId) {
            this.vnetSiteId = Objects.requireNonNull(vnetSiteId);
            return this;
        }        public ReplicaSetResponse build() {
            return new ReplicaSetResponse(domainControllerIpAddress, externalAccessIpAddress, healthAlerts, healthLastEvaluated, healthMonitors, location, replicaSetId, serviceStatus, subnetId, vnetSiteId);
        }
    }
}
