// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.app;

import com.pulumi.azurenative.app.inputs.AuthPlatformArgs;
import com.pulumi.azurenative.app.inputs.GlobalValidationArgs;
import com.pulumi.azurenative.app.inputs.HttpSettingsArgs;
import com.pulumi.azurenative.app.inputs.IdentityProvidersArgs;
import com.pulumi.azurenative.app.inputs.LoginArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ContainerAppsAuthConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final ContainerAppsAuthConfigArgs Empty = new ContainerAppsAuthConfigArgs();

    /**
     * Name of the Container App.
     * 
     */
    @Import(name="containerAppName", required=true)
    private Output<String> containerAppName;

    /**
     * @return Name of the Container App.
     * 
     */
    public Output<String> containerAppName() {
        return this.containerAppName;
    }

    /**
     * The configuration settings that determines the validation flow of users using  Service Authentication/Authorization.
     * 
     */
    @Import(name="globalValidation")
    private @Nullable Output<GlobalValidationArgs> globalValidation;

    /**
     * @return The configuration settings that determines the validation flow of users using  Service Authentication/Authorization.
     * 
     */
    public Optional<Output<GlobalValidationArgs>> globalValidation() {
        return Optional.ofNullable(this.globalValidation);
    }

    /**
     * The configuration settings of the HTTP requests for authentication and authorization requests made against ContainerApp Service Authentication/Authorization.
     * 
     */
    @Import(name="httpSettings")
    private @Nullable Output<HttpSettingsArgs> httpSettings;

    /**
     * @return The configuration settings of the HTTP requests for authentication and authorization requests made against ContainerApp Service Authentication/Authorization.
     * 
     */
    public Optional<Output<HttpSettingsArgs>> httpSettings() {
        return Optional.ofNullable(this.httpSettings);
    }

    /**
     * The configuration settings of each of the identity providers used to configure ContainerApp Service Authentication/Authorization.
     * 
     */
    @Import(name="identityProviders")
    private @Nullable Output<IdentityProvidersArgs> identityProviders;

    /**
     * @return The configuration settings of each of the identity providers used to configure ContainerApp Service Authentication/Authorization.
     * 
     */
    public Optional<Output<IdentityProvidersArgs>> identityProviders() {
        return Optional.ofNullable(this.identityProviders);
    }

    /**
     * The configuration settings of the login flow of users using ContainerApp Service Authentication/Authorization.
     * 
     */
    @Import(name="login")
    private @Nullable Output<LoginArgs> login;

    /**
     * @return The configuration settings of the login flow of users using ContainerApp Service Authentication/Authorization.
     * 
     */
    public Optional<Output<LoginArgs>> login() {
        return Optional.ofNullable(this.login);
    }

    /**
     * Name of the Container App AuthConfig.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the Container App AuthConfig.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The configuration settings of the platform of ContainerApp Service Authentication/Authorization.
     * 
     */
    @Import(name="platform")
    private @Nullable Output<AuthPlatformArgs> platform;

    /**
     * @return The configuration settings of the platform of ContainerApp Service Authentication/Authorization.
     * 
     */
    public Optional<Output<AuthPlatformArgs>> platform() {
        return Optional.ofNullable(this.platform);
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group. The name is case insensitive.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    private ContainerAppsAuthConfigArgs() {}

    private ContainerAppsAuthConfigArgs(ContainerAppsAuthConfigArgs $) {
        this.containerAppName = $.containerAppName;
        this.globalValidation = $.globalValidation;
        this.httpSettings = $.httpSettings;
        this.identityProviders = $.identityProviders;
        this.login = $.login;
        this.name = $.name;
        this.platform = $.platform;
        this.resourceGroupName = $.resourceGroupName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContainerAppsAuthConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContainerAppsAuthConfigArgs $;

        public Builder() {
            $ = new ContainerAppsAuthConfigArgs();
        }

        public Builder(ContainerAppsAuthConfigArgs defaults) {
            $ = new ContainerAppsAuthConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param containerAppName Name of the Container App.
         * 
         * @return builder
         * 
         */
        public Builder containerAppName(Output<String> containerAppName) {
            $.containerAppName = containerAppName;
            return this;
        }

        /**
         * @param containerAppName Name of the Container App.
         * 
         * @return builder
         * 
         */
        public Builder containerAppName(String containerAppName) {
            return containerAppName(Output.of(containerAppName));
        }

        /**
         * @param globalValidation The configuration settings that determines the validation flow of users using  Service Authentication/Authorization.
         * 
         * @return builder
         * 
         */
        public Builder globalValidation(@Nullable Output<GlobalValidationArgs> globalValidation) {
            $.globalValidation = globalValidation;
            return this;
        }

        /**
         * @param globalValidation The configuration settings that determines the validation flow of users using  Service Authentication/Authorization.
         * 
         * @return builder
         * 
         */
        public Builder globalValidation(GlobalValidationArgs globalValidation) {
            return globalValidation(Output.of(globalValidation));
        }

        /**
         * @param httpSettings The configuration settings of the HTTP requests for authentication and authorization requests made against ContainerApp Service Authentication/Authorization.
         * 
         * @return builder
         * 
         */
        public Builder httpSettings(@Nullable Output<HttpSettingsArgs> httpSettings) {
            $.httpSettings = httpSettings;
            return this;
        }

        /**
         * @param httpSettings The configuration settings of the HTTP requests for authentication and authorization requests made against ContainerApp Service Authentication/Authorization.
         * 
         * @return builder
         * 
         */
        public Builder httpSettings(HttpSettingsArgs httpSettings) {
            return httpSettings(Output.of(httpSettings));
        }

        /**
         * @param identityProviders The configuration settings of each of the identity providers used to configure ContainerApp Service Authentication/Authorization.
         * 
         * @return builder
         * 
         */
        public Builder identityProviders(@Nullable Output<IdentityProvidersArgs> identityProviders) {
            $.identityProviders = identityProviders;
            return this;
        }

        /**
         * @param identityProviders The configuration settings of each of the identity providers used to configure ContainerApp Service Authentication/Authorization.
         * 
         * @return builder
         * 
         */
        public Builder identityProviders(IdentityProvidersArgs identityProviders) {
            return identityProviders(Output.of(identityProviders));
        }

        /**
         * @param login The configuration settings of the login flow of users using ContainerApp Service Authentication/Authorization.
         * 
         * @return builder
         * 
         */
        public Builder login(@Nullable Output<LoginArgs> login) {
            $.login = login;
            return this;
        }

        /**
         * @param login The configuration settings of the login flow of users using ContainerApp Service Authentication/Authorization.
         * 
         * @return builder
         * 
         */
        public Builder login(LoginArgs login) {
            return login(Output.of(login));
        }

        /**
         * @param name Name of the Container App AuthConfig.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the Container App AuthConfig.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param platform The configuration settings of the platform of ContainerApp Service Authentication/Authorization.
         * 
         * @return builder
         * 
         */
        public Builder platform(@Nullable Output<AuthPlatformArgs> platform) {
            $.platform = platform;
            return this;
        }

        /**
         * @param platform The configuration settings of the platform of ContainerApp Service Authentication/Authorization.
         * 
         * @return builder
         * 
         */
        public Builder platform(AuthPlatformArgs platform) {
            return platform(Output.of(platform));
        }

        /**
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public ContainerAppsAuthConfigArgs build() {
            $.containerAppName = Objects.requireNonNull($.containerAppName, "expected parameter 'containerAppName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
