// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VirtualRouterPeeringArgs extends com.pulumi.resources.ResourceArgs {

    public static final VirtualRouterPeeringArgs Empty = new VirtualRouterPeeringArgs();

    /**
     * Resource ID.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return Resource ID.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Name of the virtual router peering that is unique within a virtual router.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the virtual router peering that is unique within a virtual router.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Peer ASN.
     * 
     */
    @Import(name="peerAsn")
    private @Nullable Output<Double> peerAsn;

    /**
     * @return Peer ASN.
     * 
     */
    public Optional<Output<Double>> peerAsn() {
        return Optional.ofNullable(this.peerAsn);
    }

    /**
     * Peer IP.
     * 
     */
    @Import(name="peerIp")
    private @Nullable Output<String> peerIp;

    /**
     * @return Peer IP.
     * 
     */
    public Optional<Output<String>> peerIp() {
        return Optional.ofNullable(this.peerIp);
    }

    /**
     * The name of the Virtual Router Peering.
     * 
     */
    @Import(name="peeringName")
    private @Nullable Output<String> peeringName;

    /**
     * @return The name of the Virtual Router Peering.
     * 
     */
    public Optional<Output<String>> peeringName() {
        return Optional.ofNullable(this.peeringName);
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The name of the Virtual Router.
     * 
     */
    @Import(name="virtualRouterName", required=true)
    private Output<String> virtualRouterName;

    /**
     * @return The name of the Virtual Router.
     * 
     */
    public Output<String> virtualRouterName() {
        return this.virtualRouterName;
    }

    private VirtualRouterPeeringArgs() {}

    private VirtualRouterPeeringArgs(VirtualRouterPeeringArgs $) {
        this.id = $.id;
        this.name = $.name;
        this.peerAsn = $.peerAsn;
        this.peerIp = $.peerIp;
        this.peeringName = $.peeringName;
        this.resourceGroupName = $.resourceGroupName;
        this.virtualRouterName = $.virtualRouterName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VirtualRouterPeeringArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VirtualRouterPeeringArgs $;

        public Builder() {
            $ = new VirtualRouterPeeringArgs();
        }

        public Builder(VirtualRouterPeeringArgs defaults) {
            $ = new VirtualRouterPeeringArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param id Resource ID.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id Resource ID.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param name Name of the virtual router peering that is unique within a virtual router.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the virtual router peering that is unique within a virtual router.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param peerAsn Peer ASN.
         * 
         * @return builder
         * 
         */
        public Builder peerAsn(@Nullable Output<Double> peerAsn) {
            $.peerAsn = peerAsn;
            return this;
        }

        /**
         * @param peerAsn Peer ASN.
         * 
         * @return builder
         * 
         */
        public Builder peerAsn(Double peerAsn) {
            return peerAsn(Output.of(peerAsn));
        }

        /**
         * @param peerIp Peer IP.
         * 
         * @return builder
         * 
         */
        public Builder peerIp(@Nullable Output<String> peerIp) {
            $.peerIp = peerIp;
            return this;
        }

        /**
         * @param peerIp Peer IP.
         * 
         * @return builder
         * 
         */
        public Builder peerIp(String peerIp) {
            return peerIp(Output.of(peerIp));
        }

        /**
         * @param peeringName The name of the Virtual Router Peering.
         * 
         * @return builder
         * 
         */
        public Builder peeringName(@Nullable Output<String> peeringName) {
            $.peeringName = peeringName;
            return this;
        }

        /**
         * @param peeringName The name of the Virtual Router Peering.
         * 
         * @return builder
         * 
         */
        public Builder peeringName(String peeringName) {
            return peeringName(Output.of(peeringName));
        }

        /**
         * @param resourceGroupName The name of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param virtualRouterName The name of the Virtual Router.
         * 
         * @return builder
         * 
         */
        public Builder virtualRouterName(Output<String> virtualRouterName) {
            $.virtualRouterName = virtualRouterName;
            return this;
        }

        /**
         * @param virtualRouterName The name of the Virtual Router.
         * 
         * @return builder
         * 
         */
        public Builder virtualRouterName(String virtualRouterName) {
            return virtualRouterName(Output.of(virtualRouterName));
        }

        public VirtualRouterPeeringArgs build() {
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.virtualRouterName = Objects.requireNonNull($.virtualRouterName, "expected parameter 'virtualRouterName' to be non-null");
            return $;
        }
    }

}
