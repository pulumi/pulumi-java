// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.servicefabric.inputs;

import com.pulumi.azurenative.servicefabric.enums.RollingUpgradeMode;
import com.pulumi.azurenative.servicefabric.inputs.ArmApplicationHealthPolicyArgs;
import com.pulumi.azurenative.servicefabric.inputs.ArmRollingUpgradeMonitoringPolicyArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Describes the policy for a monitored application upgrade.
 * 
 */
public final class ApplicationUpgradePolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApplicationUpgradePolicyArgs Empty = new ApplicationUpgradePolicyArgs();

    /**
     * Defines a health policy used to evaluate the health of an application or one of its children entities.
     * 
     */
    @Import(name="applicationHealthPolicy")
      private final @Nullable Output<ArmApplicationHealthPolicyArgs> applicationHealthPolicy;

    public Output<ArmApplicationHealthPolicyArgs> applicationHealthPolicy() {
        return this.applicationHealthPolicy == null ? Codegen.empty() : this.applicationHealthPolicy;
    }

    /**
     * If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).
     * 
     */
    @Import(name="forceRestart")
      private final @Nullable Output<Boolean> forceRestart;

    public Output<Boolean> forceRestart() {
        return this.forceRestart == null ? Codegen.empty() : this.forceRestart;
    }

    /**
     * Determines whether the application should be recreated on update. If value=true, the rest of the upgrade policy parameters are not allowed and it will result in availability loss.
     * 
     */
    @Import(name="recreateApplication")
      private final @Nullable Output<Boolean> recreateApplication;

    public Output<Boolean> recreateApplication() {
        return this.recreateApplication == null ? Codegen.empty() : this.recreateApplication;
    }

    /**
     * The policy used for monitoring the application upgrade
     * 
     */
    @Import(name="rollingUpgradeMonitoringPolicy")
      private final @Nullable Output<ArmRollingUpgradeMonitoringPolicyArgs> rollingUpgradeMonitoringPolicy;

    public Output<ArmRollingUpgradeMonitoringPolicyArgs> rollingUpgradeMonitoringPolicy() {
        return this.rollingUpgradeMonitoringPolicy == null ? Codegen.empty() : this.rollingUpgradeMonitoringPolicy;
    }

    /**
     * The mode used to monitor health during a rolling upgrade. The values are UnmonitoredAuto, UnmonitoredManual, and Monitored.
     * 
     */
    @Import(name="upgradeMode")
      private final @Nullable Output<Either<String,RollingUpgradeMode>> upgradeMode;

    public Output<Either<String,RollingUpgradeMode>> upgradeMode() {
        return this.upgradeMode == null ? Codegen.empty() : this.upgradeMode;
    }

    /**
     * The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. Valid values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer).
     * 
     */
    @Import(name="upgradeReplicaSetCheckTimeout")
      private final @Nullable Output<String> upgradeReplicaSetCheckTimeout;

    public Output<String> upgradeReplicaSetCheckTimeout() {
        return this.upgradeReplicaSetCheckTimeout == null ? Codegen.empty() : this.upgradeReplicaSetCheckTimeout;
    }

    public ApplicationUpgradePolicyArgs(
        @Nullable Output<ArmApplicationHealthPolicyArgs> applicationHealthPolicy,
        @Nullable Output<Boolean> forceRestart,
        @Nullable Output<Boolean> recreateApplication,
        @Nullable Output<ArmRollingUpgradeMonitoringPolicyArgs> rollingUpgradeMonitoringPolicy,
        @Nullable Output<Either<String,RollingUpgradeMode>> upgradeMode,
        @Nullable Output<String> upgradeReplicaSetCheckTimeout) {
        this.applicationHealthPolicy = applicationHealthPolicy;
        this.forceRestart = forceRestart;
        this.recreateApplication = recreateApplication;
        this.rollingUpgradeMonitoringPolicy = rollingUpgradeMonitoringPolicy;
        this.upgradeMode = upgradeMode;
        this.upgradeReplicaSetCheckTimeout = upgradeReplicaSetCheckTimeout;
    }

    private ApplicationUpgradePolicyArgs() {
        this.applicationHealthPolicy = Codegen.empty();
        this.forceRestart = Codegen.empty();
        this.recreateApplication = Codegen.empty();
        this.rollingUpgradeMonitoringPolicy = Codegen.empty();
        this.upgradeMode = Codegen.empty();
        this.upgradeReplicaSetCheckTimeout = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ApplicationUpgradePolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<ArmApplicationHealthPolicyArgs> applicationHealthPolicy;
        private @Nullable Output<Boolean> forceRestart;
        private @Nullable Output<Boolean> recreateApplication;
        private @Nullable Output<ArmRollingUpgradeMonitoringPolicyArgs> rollingUpgradeMonitoringPolicy;
        private @Nullable Output<Either<String,RollingUpgradeMode>> upgradeMode;
        private @Nullable Output<String> upgradeReplicaSetCheckTimeout;

        public Builder() {
    	      // Empty
        }

        public Builder(ApplicationUpgradePolicyArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicationHealthPolicy = defaults.applicationHealthPolicy;
    	      this.forceRestart = defaults.forceRestart;
    	      this.recreateApplication = defaults.recreateApplication;
    	      this.rollingUpgradeMonitoringPolicy = defaults.rollingUpgradeMonitoringPolicy;
    	      this.upgradeMode = defaults.upgradeMode;
    	      this.upgradeReplicaSetCheckTimeout = defaults.upgradeReplicaSetCheckTimeout;
        }

        public Builder applicationHealthPolicy(@Nullable Output<ArmApplicationHealthPolicyArgs> applicationHealthPolicy) {
            this.applicationHealthPolicy = applicationHealthPolicy;
            return this;
        }
        public Builder applicationHealthPolicy(@Nullable ArmApplicationHealthPolicyArgs applicationHealthPolicy) {
            this.applicationHealthPolicy = Codegen.ofNullable(applicationHealthPolicy);
            return this;
        }
        public Builder forceRestart(@Nullable Output<Boolean> forceRestart) {
            this.forceRestart = forceRestart;
            return this;
        }
        public Builder forceRestart(@Nullable Boolean forceRestart) {
            this.forceRestart = Codegen.ofNullable(forceRestart);
            return this;
        }
        public Builder recreateApplication(@Nullable Output<Boolean> recreateApplication) {
            this.recreateApplication = recreateApplication;
            return this;
        }
        public Builder recreateApplication(@Nullable Boolean recreateApplication) {
            this.recreateApplication = Codegen.ofNullable(recreateApplication);
            return this;
        }
        public Builder rollingUpgradeMonitoringPolicy(@Nullable Output<ArmRollingUpgradeMonitoringPolicyArgs> rollingUpgradeMonitoringPolicy) {
            this.rollingUpgradeMonitoringPolicy = rollingUpgradeMonitoringPolicy;
            return this;
        }
        public Builder rollingUpgradeMonitoringPolicy(@Nullable ArmRollingUpgradeMonitoringPolicyArgs rollingUpgradeMonitoringPolicy) {
            this.rollingUpgradeMonitoringPolicy = Codegen.ofNullable(rollingUpgradeMonitoringPolicy);
            return this;
        }
        public Builder upgradeMode(@Nullable Output<Either<String,RollingUpgradeMode>> upgradeMode) {
            this.upgradeMode = upgradeMode;
            return this;
        }
        public Builder upgradeMode(@Nullable Either<String,RollingUpgradeMode> upgradeMode) {
            this.upgradeMode = Codegen.ofNullable(upgradeMode);
            return this;
        }
        public Builder upgradeReplicaSetCheckTimeout(@Nullable Output<String> upgradeReplicaSetCheckTimeout) {
            this.upgradeReplicaSetCheckTimeout = upgradeReplicaSetCheckTimeout;
            return this;
        }
        public Builder upgradeReplicaSetCheckTimeout(@Nullable String upgradeReplicaSetCheckTimeout) {
            this.upgradeReplicaSetCheckTimeout = Codegen.ofNullable(upgradeReplicaSetCheckTimeout);
            return this;
        }        public ApplicationUpgradePolicyArgs build() {
            return new ApplicationUpgradePolicyArgs(applicationHealthPolicy, forceRestart, recreateApplication, rollingUpgradeMonitoringPolicy, upgradeMode, upgradeReplicaSetCheckTimeout);
        }
    }
}
