// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datamigration.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * Description about the errors happen while performing migration validation
 * 
 */
public final class SchemaComparisonValidationResultTypeResponse extends com.pulumi.resources.InvokeArgs {

    public static final SchemaComparisonValidationResultTypeResponse Empty = new SchemaComparisonValidationResultTypeResponse();

    /**
     * Name of the object that has the difference
     * 
     */
    @Import(name="objectName", required=true)
    private String objectName;

    /**
     * @return Name of the object that has the difference
     * 
     */
    public String objectName() {
        return this.objectName;
    }

    /**
     * Type of the object that has the difference. e.g (Table/View/StoredProcedure)
     * 
     */
    @Import(name="objectType", required=true)
    private String objectType;

    /**
     * @return Type of the object that has the difference. e.g (Table/View/StoredProcedure)
     * 
     */
    public String objectType() {
        return this.objectType;
    }

    /**
     * Update action type with respect to target
     * 
     */
    @Import(name="updateAction", required=true)
    private String updateAction;

    /**
     * @return Update action type with respect to target
     * 
     */
    public String updateAction() {
        return this.updateAction;
    }

    private SchemaComparisonValidationResultTypeResponse() {}

    private SchemaComparisonValidationResultTypeResponse(SchemaComparisonValidationResultTypeResponse $) {
        this.objectName = $.objectName;
        this.objectType = $.objectType;
        this.updateAction = $.updateAction;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SchemaComparisonValidationResultTypeResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SchemaComparisonValidationResultTypeResponse $;

        public Builder() {
            $ = new SchemaComparisonValidationResultTypeResponse();
        }

        public Builder(SchemaComparisonValidationResultTypeResponse defaults) {
            $ = new SchemaComparisonValidationResultTypeResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param objectName Name of the object that has the difference
         * 
         * @return builder
         * 
         */
        public Builder objectName(String objectName) {
            $.objectName = objectName;
            return this;
        }

        /**
         * @param objectType Type of the object that has the difference. e.g (Table/View/StoredProcedure)
         * 
         * @return builder
         * 
         */
        public Builder objectType(String objectType) {
            $.objectType = objectType;
            return this;
        }

        /**
         * @param updateAction Update action type with respect to target
         * 
         * @return builder
         * 
         */
        public Builder updateAction(String updateAction) {
            $.updateAction = updateAction;
            return this;
        }

        public SchemaComparisonValidationResultTypeResponse build() {
            $.objectName = Objects.requireNonNull($.objectName, "expected parameter 'objectName' to be non-null");
            $.objectType = Objects.requireNonNull($.objectType, "expected parameter 'objectType' to be non-null");
            $.updateAction = Objects.requireNonNull($.updateAction, "expected parameter 'updateAction' to be non-null");
            return $;
        }
    }

}
