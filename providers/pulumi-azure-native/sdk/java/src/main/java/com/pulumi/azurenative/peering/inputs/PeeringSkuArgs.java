// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.peering.inputs;

import com.pulumi.azurenative.peering.enums.Family;
import com.pulumi.azurenative.peering.enums.Size;
import com.pulumi.azurenative.peering.enums.Tier;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The SKU that defines the tier and kind of the peering.
 * 
 */
public final class PeeringSkuArgs extends com.pulumi.resources.ResourceArgs {

    public static final PeeringSkuArgs Empty = new PeeringSkuArgs();

    /**
     * The family of the peering SKU.
     * 
     */
    @Import(name="family")
    private @Nullable Output<Either<String,Family>> family;

    /**
     * @return The family of the peering SKU.
     * 
     */
    public Optional<Output<Either<String,Family>>> family() {
        return Optional.ofNullable(this.family);
    }

    /**
     * The name of the peering SKU.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the peering SKU.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The size of the peering SKU.
     * 
     */
    @Import(name="size")
    private @Nullable Output<Either<String,Size>> size;

    /**
     * @return The size of the peering SKU.
     * 
     */
    public Optional<Output<Either<String,Size>>> size() {
        return Optional.ofNullable(this.size);
    }

    /**
     * The tier of the peering SKU.
     * 
     */
    @Import(name="tier")
    private @Nullable Output<Either<String,Tier>> tier;

    /**
     * @return The tier of the peering SKU.
     * 
     */
    public Optional<Output<Either<String,Tier>>> tier() {
        return Optional.ofNullable(this.tier);
    }

    private PeeringSkuArgs() {}

    private PeeringSkuArgs(PeeringSkuArgs $) {
        this.family = $.family;
        this.name = $.name;
        this.size = $.size;
        this.tier = $.tier;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PeeringSkuArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PeeringSkuArgs $;

        public Builder() {
            $ = new PeeringSkuArgs();
        }

        public Builder(PeeringSkuArgs defaults) {
            $ = new PeeringSkuArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param family The family of the peering SKU.
         * 
         * @return builder
         * 
         */
        public Builder family(@Nullable Output<Either<String,Family>> family) {
            $.family = family;
            return this;
        }

        /**
         * @param family The family of the peering SKU.
         * 
         * @return builder
         * 
         */
        public Builder family(Either<String,Family> family) {
            return family(Output.of(family));
        }

        /**
         * @param family The family of the peering SKU.
         * 
         * @return builder
         * 
         */
        public Builder family(String family) {
            return family(Either.ofLeft(family));
        }

        /**
         * @param family The family of the peering SKU.
         * 
         * @return builder
         * 
         */
        public Builder family(Family family) {
            return family(Either.ofRight(family));
        }

        /**
         * @param name The name of the peering SKU.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the peering SKU.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param size The size of the peering SKU.
         * 
         * @return builder
         * 
         */
        public Builder size(@Nullable Output<Either<String,Size>> size) {
            $.size = size;
            return this;
        }

        /**
         * @param size The size of the peering SKU.
         * 
         * @return builder
         * 
         */
        public Builder size(Either<String,Size> size) {
            return size(Output.of(size));
        }

        /**
         * @param size The size of the peering SKU.
         * 
         * @return builder
         * 
         */
        public Builder size(String size) {
            return size(Either.ofLeft(size));
        }

        /**
         * @param size The size of the peering SKU.
         * 
         * @return builder
         * 
         */
        public Builder size(Size size) {
            return size(Either.ofRight(size));
        }

        /**
         * @param tier The tier of the peering SKU.
         * 
         * @return builder
         * 
         */
        public Builder tier(@Nullable Output<Either<String,Tier>> tier) {
            $.tier = tier;
            return this;
        }

        /**
         * @param tier The tier of the peering SKU.
         * 
         * @return builder
         * 
         */
        public Builder tier(Either<String,Tier> tier) {
            return tier(Output.of(tier));
        }

        /**
         * @param tier The tier of the peering SKU.
         * 
         * @return builder
         * 
         */
        public Builder tier(String tier) {
            return tier(Either.ofLeft(tier));
        }

        /**
         * @param tier The tier of the peering SKU.
         * 
         * @return builder
         * 
         */
        public Builder tier(Tier tier) {
            return tier(Either.ofRight(tier));
        }

        public PeeringSkuArgs build() {
            return $;
        }
    }

}
