// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.recoveryservices.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A2A protected managed disk details.
 * 
 */
public final class A2AProtectedManagedDiskDetailsResponse extends com.pulumi.resources.InvokeArgs {

    public static final A2AProtectedManagedDiskDetailsResponse Empty = new A2AProtectedManagedDiskDetailsResponse();

    /**
     * The disk level operations list.
     * 
     */
    @Import(name="allowedDiskLevelOperation")
    private @Nullable List<String> allowedDiskLevelOperation;

    public Optional<List<String>> allowedDiskLevelOperation() {
        return Optional.ofNullable(this.allowedDiskLevelOperation);
    }

    /**
     * The data pending at source virtual machine in MB.
     * 
     */
    @Import(name="dataPendingAtSourceAgentInMB")
    private @Nullable Double dataPendingAtSourceAgentInMB;

    public Optional<Double> dataPendingAtSourceAgentInMB() {
        return Optional.ofNullable(this.dataPendingAtSourceAgentInMB);
    }

    /**
     * The data pending for replication in MB at staging account.
     * 
     */
    @Import(name="dataPendingInStagingStorageAccountInMB")
    private @Nullable Double dataPendingInStagingStorageAccountInMB;

    public Optional<Double> dataPendingInStagingStorageAccountInMB() {
        return Optional.ofNullable(this.dataPendingInStagingStorageAccountInMB);
    }

    /**
     * The KeyVault resource id for secret (BEK).
     * 
     */
    @Import(name="dekKeyVaultArmId")
    private @Nullable String dekKeyVaultArmId;

    public Optional<String> dekKeyVaultArmId() {
        return Optional.ofNullable(this.dekKeyVaultArmId);
    }

    /**
     * The disk capacity in bytes.
     * 
     */
    @Import(name="diskCapacityInBytes")
    private @Nullable Double diskCapacityInBytes;

    public Optional<Double> diskCapacityInBytes() {
        return Optional.ofNullable(this.diskCapacityInBytes);
    }

    /**
     * The managed disk Arm id.
     * 
     */
    @Import(name="diskId")
    private @Nullable String diskId;

    public Optional<String> diskId() {
        return Optional.ofNullable(this.diskId);
    }

    /**
     * The disk name.
     * 
     */
    @Import(name="diskName")
    private @Nullable String diskName;

    public Optional<String> diskName() {
        return Optional.ofNullable(this.diskName);
    }

    /**
     * The disk state.
     * 
     */
    @Import(name="diskState")
    private @Nullable String diskState;

    public Optional<String> diskState() {
        return Optional.ofNullable(this.diskState);
    }

    /**
     * The type of disk.
     * 
     */
    @Import(name="diskType")
    private @Nullable String diskType;

    public Optional<String> diskType() {
        return Optional.ofNullable(this.diskType);
    }

    /**
     * The failover name for the managed disk.
     * 
     */
    @Import(name="failoverDiskName")
    private @Nullable String failoverDiskName;

    public Optional<String> failoverDiskName() {
        return Optional.ofNullable(this.failoverDiskName);
    }

    /**
     * A value indicating whether vm has encrypted os disk or not.
     * 
     */
    @Import(name="isDiskEncrypted")
    private @Nullable Boolean isDiskEncrypted;

    public Optional<Boolean> isDiskEncrypted() {
        return Optional.ofNullable(this.isDiskEncrypted);
    }

    /**
     * A value indicating whether disk key got encrypted or not.
     * 
     */
    @Import(name="isDiskKeyEncrypted")
    private @Nullable Boolean isDiskKeyEncrypted;

    public Optional<Boolean> isDiskKeyEncrypted() {
        return Optional.ofNullable(this.isDiskKeyEncrypted);
    }

    /**
     * The KeyVault resource id for key (KEK).
     * 
     */
    @Import(name="kekKeyVaultArmId")
    private @Nullable String kekKeyVaultArmId;

    public Optional<String> kekKeyVaultArmId() {
        return Optional.ofNullable(this.kekKeyVaultArmId);
    }

    /**
     * The key URL / identifier (KEK).
     * 
     */
    @Import(name="keyIdentifier")
    private @Nullable String keyIdentifier;

    public Optional<String> keyIdentifier() {
        return Optional.ofNullable(this.keyIdentifier);
    }

    /**
     * The type of the monitoring job. The progress is contained in MonitoringPercentageCompletion property.
     * 
     */
    @Import(name="monitoringJobType")
    private @Nullable String monitoringJobType;

    public Optional<String> monitoringJobType() {
        return Optional.ofNullable(this.monitoringJobType);
    }

    /**
     * The percentage of the monitoring job. The type of the monitoring job is defined by MonitoringJobType property.
     * 
     */
    @Import(name="monitoringPercentageCompletion")
    private @Nullable Integer monitoringPercentageCompletion;

    public Optional<Integer> monitoringPercentageCompletion() {
        return Optional.ofNullable(this.monitoringPercentageCompletion);
    }

    /**
     * The primary staging storage account.
     * 
     */
    @Import(name="primaryStagingAzureStorageAccountId")
    private @Nullable String primaryStagingAzureStorageAccountId;

    public Optional<String> primaryStagingAzureStorageAccountId() {
        return Optional.ofNullable(this.primaryStagingAzureStorageAccountId);
    }

    /**
     * The recovery disk encryption set Id.
     * 
     */
    @Import(name="recoveryDiskEncryptionSetId")
    private @Nullable String recoveryDiskEncryptionSetId;

    public Optional<String> recoveryDiskEncryptionSetId() {
        return Optional.ofNullable(this.recoveryDiskEncryptionSetId);
    }

    /**
     * The replica disk type. Its an optional value and will be same as source disk type if not user provided.
     * 
     */
    @Import(name="recoveryReplicaDiskAccountType")
    private @Nullable String recoveryReplicaDiskAccountType;

    public Optional<String> recoveryReplicaDiskAccountType() {
        return Optional.ofNullable(this.recoveryReplicaDiskAccountType);
    }

    /**
     * Recovery replica disk Arm Id.
     * 
     */
    @Import(name="recoveryReplicaDiskId")
    private @Nullable String recoveryReplicaDiskId;

    public Optional<String> recoveryReplicaDiskId() {
        return Optional.ofNullable(this.recoveryReplicaDiskId);
    }

    /**
     * The recovery disk resource group Arm Id.
     * 
     */
    @Import(name="recoveryResourceGroupId")
    private @Nullable String recoveryResourceGroupId;

    public Optional<String> recoveryResourceGroupId() {
        return Optional.ofNullable(this.recoveryResourceGroupId);
    }

    /**
     * The target disk type after failover. Its an optional value and will be same as source disk type if not user provided.
     * 
     */
    @Import(name="recoveryTargetDiskAccountType")
    private @Nullable String recoveryTargetDiskAccountType;

    public Optional<String> recoveryTargetDiskAccountType() {
        return Optional.ofNullable(this.recoveryTargetDiskAccountType);
    }

    /**
     * Recovery target disk Arm Id.
     * 
     */
    @Import(name="recoveryTargetDiskId")
    private @Nullable String recoveryTargetDiskId;

    public Optional<String> recoveryTargetDiskId() {
        return Optional.ofNullable(this.recoveryTargetDiskId);
    }

    /**
     * A value indicating whether resync is required for this disk.
     * 
     */
    @Import(name="resyncRequired")
    private @Nullable Boolean resyncRequired;

    public Optional<Boolean> resyncRequired() {
        return Optional.ofNullable(this.resyncRequired);
    }

    /**
     * The secret URL / identifier (BEK).
     * 
     */
    @Import(name="secretIdentifier")
    private @Nullable String secretIdentifier;

    public Optional<String> secretIdentifier() {
        return Optional.ofNullable(this.secretIdentifier);
    }

    /**
     * The test failover name for the managed disk.
     * 
     */
    @Import(name="tfoDiskName")
    private @Nullable String tfoDiskName;

    public Optional<String> tfoDiskName() {
        return Optional.ofNullable(this.tfoDiskName);
    }

    private A2AProtectedManagedDiskDetailsResponse() {}

    private A2AProtectedManagedDiskDetailsResponse(A2AProtectedManagedDiskDetailsResponse $) {
        this.allowedDiskLevelOperation = $.allowedDiskLevelOperation;
        this.dataPendingAtSourceAgentInMB = $.dataPendingAtSourceAgentInMB;
        this.dataPendingInStagingStorageAccountInMB = $.dataPendingInStagingStorageAccountInMB;
        this.dekKeyVaultArmId = $.dekKeyVaultArmId;
        this.diskCapacityInBytes = $.diskCapacityInBytes;
        this.diskId = $.diskId;
        this.diskName = $.diskName;
        this.diskState = $.diskState;
        this.diskType = $.diskType;
        this.failoverDiskName = $.failoverDiskName;
        this.isDiskEncrypted = $.isDiskEncrypted;
        this.isDiskKeyEncrypted = $.isDiskKeyEncrypted;
        this.kekKeyVaultArmId = $.kekKeyVaultArmId;
        this.keyIdentifier = $.keyIdentifier;
        this.monitoringJobType = $.monitoringJobType;
        this.monitoringPercentageCompletion = $.monitoringPercentageCompletion;
        this.primaryStagingAzureStorageAccountId = $.primaryStagingAzureStorageAccountId;
        this.recoveryDiskEncryptionSetId = $.recoveryDiskEncryptionSetId;
        this.recoveryReplicaDiskAccountType = $.recoveryReplicaDiskAccountType;
        this.recoveryReplicaDiskId = $.recoveryReplicaDiskId;
        this.recoveryResourceGroupId = $.recoveryResourceGroupId;
        this.recoveryTargetDiskAccountType = $.recoveryTargetDiskAccountType;
        this.recoveryTargetDiskId = $.recoveryTargetDiskId;
        this.resyncRequired = $.resyncRequired;
        this.secretIdentifier = $.secretIdentifier;
        this.tfoDiskName = $.tfoDiskName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(A2AProtectedManagedDiskDetailsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private A2AProtectedManagedDiskDetailsResponse $;

        public Builder() {
            $ = new A2AProtectedManagedDiskDetailsResponse();
        }

        public Builder(A2AProtectedManagedDiskDetailsResponse defaults) {
            $ = new A2AProtectedManagedDiskDetailsResponse(Objects.requireNonNull(defaults));
        }

        public Builder allowedDiskLevelOperation(@Nullable List<String> allowedDiskLevelOperation) {
            $.allowedDiskLevelOperation = allowedDiskLevelOperation;
            return this;
        }

        public Builder allowedDiskLevelOperation(String... allowedDiskLevelOperation) {
            return allowedDiskLevelOperation(List.of(allowedDiskLevelOperation));
        }

        public Builder dataPendingAtSourceAgentInMB(@Nullable Double dataPendingAtSourceAgentInMB) {
            $.dataPendingAtSourceAgentInMB = dataPendingAtSourceAgentInMB;
            return this;
        }

        public Builder dataPendingInStagingStorageAccountInMB(@Nullable Double dataPendingInStagingStorageAccountInMB) {
            $.dataPendingInStagingStorageAccountInMB = dataPendingInStagingStorageAccountInMB;
            return this;
        }

        public Builder dekKeyVaultArmId(@Nullable String dekKeyVaultArmId) {
            $.dekKeyVaultArmId = dekKeyVaultArmId;
            return this;
        }

        public Builder diskCapacityInBytes(@Nullable Double diskCapacityInBytes) {
            $.diskCapacityInBytes = diskCapacityInBytes;
            return this;
        }

        public Builder diskId(@Nullable String diskId) {
            $.diskId = diskId;
            return this;
        }

        public Builder diskName(@Nullable String diskName) {
            $.diskName = diskName;
            return this;
        }

        public Builder diskState(@Nullable String diskState) {
            $.diskState = diskState;
            return this;
        }

        public Builder diskType(@Nullable String diskType) {
            $.diskType = diskType;
            return this;
        }

        public Builder failoverDiskName(@Nullable String failoverDiskName) {
            $.failoverDiskName = failoverDiskName;
            return this;
        }

        public Builder isDiskEncrypted(@Nullable Boolean isDiskEncrypted) {
            $.isDiskEncrypted = isDiskEncrypted;
            return this;
        }

        public Builder isDiskKeyEncrypted(@Nullable Boolean isDiskKeyEncrypted) {
            $.isDiskKeyEncrypted = isDiskKeyEncrypted;
            return this;
        }

        public Builder kekKeyVaultArmId(@Nullable String kekKeyVaultArmId) {
            $.kekKeyVaultArmId = kekKeyVaultArmId;
            return this;
        }

        public Builder keyIdentifier(@Nullable String keyIdentifier) {
            $.keyIdentifier = keyIdentifier;
            return this;
        }

        public Builder monitoringJobType(@Nullable String monitoringJobType) {
            $.monitoringJobType = monitoringJobType;
            return this;
        }

        public Builder monitoringPercentageCompletion(@Nullable Integer monitoringPercentageCompletion) {
            $.monitoringPercentageCompletion = monitoringPercentageCompletion;
            return this;
        }

        public Builder primaryStagingAzureStorageAccountId(@Nullable String primaryStagingAzureStorageAccountId) {
            $.primaryStagingAzureStorageAccountId = primaryStagingAzureStorageAccountId;
            return this;
        }

        public Builder recoveryDiskEncryptionSetId(@Nullable String recoveryDiskEncryptionSetId) {
            $.recoveryDiskEncryptionSetId = recoveryDiskEncryptionSetId;
            return this;
        }

        public Builder recoveryReplicaDiskAccountType(@Nullable String recoveryReplicaDiskAccountType) {
            $.recoveryReplicaDiskAccountType = recoveryReplicaDiskAccountType;
            return this;
        }

        public Builder recoveryReplicaDiskId(@Nullable String recoveryReplicaDiskId) {
            $.recoveryReplicaDiskId = recoveryReplicaDiskId;
            return this;
        }

        public Builder recoveryResourceGroupId(@Nullable String recoveryResourceGroupId) {
            $.recoveryResourceGroupId = recoveryResourceGroupId;
            return this;
        }

        public Builder recoveryTargetDiskAccountType(@Nullable String recoveryTargetDiskAccountType) {
            $.recoveryTargetDiskAccountType = recoveryTargetDiskAccountType;
            return this;
        }

        public Builder recoveryTargetDiskId(@Nullable String recoveryTargetDiskId) {
            $.recoveryTargetDiskId = recoveryTargetDiskId;
            return this;
        }

        public Builder resyncRequired(@Nullable Boolean resyncRequired) {
            $.resyncRequired = resyncRequired;
            return this;
        }

        public Builder secretIdentifier(@Nullable String secretIdentifier) {
            $.secretIdentifier = secretIdentifier;
            return this;
        }

        public Builder tfoDiskName(@Nullable String tfoDiskName) {
            $.tfoDiskName = tfoDiskName;
            return this;
        }

        public A2AProtectedManagedDiskDetailsResponse build() {
            return $;
        }
    }

}
