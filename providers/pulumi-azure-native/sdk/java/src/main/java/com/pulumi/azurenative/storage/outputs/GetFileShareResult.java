// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.storage.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetFileShareResult {
    /**
     * @return Access tier for specific share. GpV2 account can choose between TransactionOptimized (default), Hot, and Cool. FileStorage account can choose Premium.
     * 
     */
    private final @Nullable String accessTier;
    /**
     * @return Indicates the last modification time for share access tier.
     * 
     */
    private final String accessTierChangeTime;
    /**
     * @return Indicates if there is a pending transition for access tier.
     * 
     */
    private final String accessTierStatus;
    /**
     * @return Indicates whether the share was deleted.
     * 
     */
    private final Boolean deleted;
    /**
     * @return The deleted time if the share was deleted.
     * 
     */
    private final String deletedTime;
    /**
     * @return The authentication protocol that is used for the file share. Can only be specified when creating a share.
     * 
     */
    private final @Nullable String enabledProtocols;
    /**
     * @return Resource Etag.
     * 
     */
    private final String etag;
    /**
     * @return Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * 
     */
    private final String id;
    /**
     * @return Returns the date and time the share was last modified.
     * 
     */
    private final String lastModifiedTime;
    /**
     * @return A name-value pair to associate with the share as metadata.
     * 
     */
    private final @Nullable Map<String,String> metadata;
    /**
     * @return The name of the resource
     * 
     */
    private final String name;
    /**
     * @return Remaining retention days for share that was soft deleted.
     * 
     */
    private final Integer remainingRetentionDays;
    /**
     * @return The property is for NFS share only. The default is NoRootSquash.
     * 
     */
    private final @Nullable String rootSquash;
    /**
     * @return The maximum size of the share, in gigabytes. Must be greater than 0, and less than or equal to 5TB (5120). For Large File Shares, the maximum size is 102400.
     * 
     */
    private final @Nullable Integer shareQuota;
    /**
     * @return The approximate size of the data stored on the share. Note that this value may not include all recently created or recently resized files.
     * 
     */
    private final Double shareUsageBytes;
    /**
     * @return Creation time of share snapshot returned in the response of list shares with expand param &#34;snapshots&#34;.
     * 
     */
    private final String snapshotTime;
    /**
     * @return The type of the resource. E.g. &#34;Microsoft.Compute/virtualMachines&#34; or &#34;Microsoft.Storage/storageAccounts&#34;
     * 
     */
    private final String type;
    /**
     * @return The version of the share.
     * 
     */
    private final String version;

    @CustomType.Constructor
    private GetFileShareResult(
        @CustomType.Parameter("accessTier") @Nullable String accessTier,
        @CustomType.Parameter("accessTierChangeTime") String accessTierChangeTime,
        @CustomType.Parameter("accessTierStatus") String accessTierStatus,
        @CustomType.Parameter("deleted") Boolean deleted,
        @CustomType.Parameter("deletedTime") String deletedTime,
        @CustomType.Parameter("enabledProtocols") @Nullable String enabledProtocols,
        @CustomType.Parameter("etag") String etag,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("lastModifiedTime") String lastModifiedTime,
        @CustomType.Parameter("metadata") @Nullable Map<String,String> metadata,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("remainingRetentionDays") Integer remainingRetentionDays,
        @CustomType.Parameter("rootSquash") @Nullable String rootSquash,
        @CustomType.Parameter("shareQuota") @Nullable Integer shareQuota,
        @CustomType.Parameter("shareUsageBytes") Double shareUsageBytes,
        @CustomType.Parameter("snapshotTime") String snapshotTime,
        @CustomType.Parameter("type") String type,
        @CustomType.Parameter("version") String version) {
        this.accessTier = accessTier;
        this.accessTierChangeTime = accessTierChangeTime;
        this.accessTierStatus = accessTierStatus;
        this.deleted = deleted;
        this.deletedTime = deletedTime;
        this.enabledProtocols = enabledProtocols;
        this.etag = etag;
        this.id = id;
        this.lastModifiedTime = lastModifiedTime;
        this.metadata = metadata;
        this.name = name;
        this.remainingRetentionDays = remainingRetentionDays;
        this.rootSquash = rootSquash;
        this.shareQuota = shareQuota;
        this.shareUsageBytes = shareUsageBytes;
        this.snapshotTime = snapshotTime;
        this.type = type;
        this.version = version;
    }

    /**
     * @return Access tier for specific share. GpV2 account can choose between TransactionOptimized (default), Hot, and Cool. FileStorage account can choose Premium.
     * 
     */
    public Optional<String> accessTier() {
        return Optional.ofNullable(this.accessTier);
    }
    /**
     * @return Indicates the last modification time for share access tier.
     * 
     */
    public String accessTierChangeTime() {
        return this.accessTierChangeTime;
    }
    /**
     * @return Indicates if there is a pending transition for access tier.
     * 
     */
    public String accessTierStatus() {
        return this.accessTierStatus;
    }
    /**
     * @return Indicates whether the share was deleted.
     * 
     */
    public Boolean deleted() {
        return this.deleted;
    }
    /**
     * @return The deleted time if the share was deleted.
     * 
     */
    public String deletedTime() {
        return this.deletedTime;
    }
    /**
     * @return The authentication protocol that is used for the file share. Can only be specified when creating a share.
     * 
     */
    public Optional<String> enabledProtocols() {
        return Optional.ofNullable(this.enabledProtocols);
    }
    /**
     * @return Resource Etag.
     * 
     */
    public String etag() {
        return this.etag;
    }
    /**
     * @return Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Returns the date and time the share was last modified.
     * 
     */
    public String lastModifiedTime() {
        return this.lastModifiedTime;
    }
    /**
     * @return A name-value pair to associate with the share as metadata.
     * 
     */
    public Map<String,String> metadata() {
        return this.metadata == null ? Map.of() : this.metadata;
    }
    /**
     * @return The name of the resource
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Remaining retention days for share that was soft deleted.
     * 
     */
    public Integer remainingRetentionDays() {
        return this.remainingRetentionDays;
    }
    /**
     * @return The property is for NFS share only. The default is NoRootSquash.
     * 
     */
    public Optional<String> rootSquash() {
        return Optional.ofNullable(this.rootSquash);
    }
    /**
     * @return The maximum size of the share, in gigabytes. Must be greater than 0, and less than or equal to 5TB (5120). For Large File Shares, the maximum size is 102400.
     * 
     */
    public Optional<Integer> shareQuota() {
        return Optional.ofNullable(this.shareQuota);
    }
    /**
     * @return The approximate size of the data stored on the share. Note that this value may not include all recently created or recently resized files.
     * 
     */
    public Double shareUsageBytes() {
        return this.shareUsageBytes;
    }
    /**
     * @return Creation time of share snapshot returned in the response of list shares with expand param &#34;snapshots&#34;.
     * 
     */
    public String snapshotTime() {
        return this.snapshotTime;
    }
    /**
     * @return The type of the resource. E.g. &#34;Microsoft.Compute/virtualMachines&#34; or &#34;Microsoft.Storage/storageAccounts&#34;
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return The version of the share.
     * 
     */
    public String version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetFileShareResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String accessTier;
        private String accessTierChangeTime;
        private String accessTierStatus;
        private Boolean deleted;
        private String deletedTime;
        private @Nullable String enabledProtocols;
        private String etag;
        private String id;
        private String lastModifiedTime;
        private @Nullable Map<String,String> metadata;
        private String name;
        private Integer remainingRetentionDays;
        private @Nullable String rootSquash;
        private @Nullable Integer shareQuota;
        private Double shareUsageBytes;
        private String snapshotTime;
        private String type;
        private String version;

        public Builder() {
    	      // Empty
        }

        public Builder(GetFileShareResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessTier = defaults.accessTier;
    	      this.accessTierChangeTime = defaults.accessTierChangeTime;
    	      this.accessTierStatus = defaults.accessTierStatus;
    	      this.deleted = defaults.deleted;
    	      this.deletedTime = defaults.deletedTime;
    	      this.enabledProtocols = defaults.enabledProtocols;
    	      this.etag = defaults.etag;
    	      this.id = defaults.id;
    	      this.lastModifiedTime = defaults.lastModifiedTime;
    	      this.metadata = defaults.metadata;
    	      this.name = defaults.name;
    	      this.remainingRetentionDays = defaults.remainingRetentionDays;
    	      this.rootSquash = defaults.rootSquash;
    	      this.shareQuota = defaults.shareQuota;
    	      this.shareUsageBytes = defaults.shareUsageBytes;
    	      this.snapshotTime = defaults.snapshotTime;
    	      this.type = defaults.type;
    	      this.version = defaults.version;
        }

        public Builder accessTier(@Nullable String accessTier) {
            this.accessTier = accessTier;
            return this;
        }
        public Builder accessTierChangeTime(String accessTierChangeTime) {
            this.accessTierChangeTime = Objects.requireNonNull(accessTierChangeTime);
            return this;
        }
        public Builder accessTierStatus(String accessTierStatus) {
            this.accessTierStatus = Objects.requireNonNull(accessTierStatus);
            return this;
        }
        public Builder deleted(Boolean deleted) {
            this.deleted = Objects.requireNonNull(deleted);
            return this;
        }
        public Builder deletedTime(String deletedTime) {
            this.deletedTime = Objects.requireNonNull(deletedTime);
            return this;
        }
        public Builder enabledProtocols(@Nullable String enabledProtocols) {
            this.enabledProtocols = enabledProtocols;
            return this;
        }
        public Builder etag(String etag) {
            this.etag = Objects.requireNonNull(etag);
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder lastModifiedTime(String lastModifiedTime) {
            this.lastModifiedTime = Objects.requireNonNull(lastModifiedTime);
            return this;
        }
        public Builder metadata(@Nullable Map<String,String> metadata) {
            this.metadata = metadata;
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder remainingRetentionDays(Integer remainingRetentionDays) {
            this.remainingRetentionDays = Objects.requireNonNull(remainingRetentionDays);
            return this;
        }
        public Builder rootSquash(@Nullable String rootSquash) {
            this.rootSquash = rootSquash;
            return this;
        }
        public Builder shareQuota(@Nullable Integer shareQuota) {
            this.shareQuota = shareQuota;
            return this;
        }
        public Builder shareUsageBytes(Double shareUsageBytes) {
            this.shareUsageBytes = Objects.requireNonNull(shareUsageBytes);
            return this;
        }
        public Builder snapshotTime(String snapshotTime) {
            this.snapshotTime = Objects.requireNonNull(snapshotTime);
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder version(String version) {
            this.version = Objects.requireNonNull(version);
            return this;
        }        public GetFileShareResult build() {
            return new GetFileShareResult(accessTier, accessTierChangeTime, accessTierStatus, deleted, deletedTime, enabledProtocols, etag, id, lastModifiedTime, metadata, name, remainingRetentionDays, rootSquash, shareQuota, shareUsageBytes, snapshotTime, type, version);
        }
    }
}
