// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.azurenative.datafactory.inputs.DWCopyCommandSettingsResponse;
import com.pulumi.azurenative.datafactory.inputs.PolybaseSettingsResponse;
import com.pulumi.azurenative.datafactory.inputs.SqlDWUpsertSettingsResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A copy activity SQL Data Warehouse sink.
 * 
 */
public final class SqlDWSinkResponse extends com.pulumi.resources.InvokeArgs {

    public static final SqlDWSinkResponse Empty = new SqlDWSinkResponse();

    /**
     * Indicates to use Copy Command to copy data into SQL Data Warehouse. Type: boolean (or Expression with resultType boolean).
     * 
     */
    @Import(name="allowCopyCommand")
    private @Nullable Object allowCopyCommand;

    public Optional<Object> allowCopyCommand() {
        return Optional.ofNullable(this.allowCopyCommand);
    }

    /**
     * Indicates to use PolyBase to copy data into SQL Data Warehouse when applicable. Type: boolean (or Expression with resultType boolean).
     * 
     */
    @Import(name="allowPolyBase")
    private @Nullable Object allowPolyBase;

    public Optional<Object> allowPolyBase() {
        return Optional.ofNullable(this.allowPolyBase);
    }

    /**
     * Specifies Copy Command related settings when allowCopyCommand is true.
     * 
     */
    @Import(name="copyCommandSettings")
    private @Nullable DWCopyCommandSettingsResponse copyCommandSettings;

    public Optional<DWCopyCommandSettingsResponse> copyCommandSettings() {
        return Optional.ofNullable(this.copyCommandSettings);
    }

    /**
     * If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
     * 
     */
    @Import(name="disableMetricsCollection")
    private @Nullable Object disableMetricsCollection;

    public Optional<Object> disableMetricsCollection() {
        return Optional.ofNullable(this.disableMetricsCollection);
    }

    /**
     * The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
     * 
     */
    @Import(name="maxConcurrentConnections")
    private @Nullable Object maxConcurrentConnections;

    public Optional<Object> maxConcurrentConnections() {
        return Optional.ofNullable(this.maxConcurrentConnections);
    }

    /**
     * Specifies PolyBase-related settings when allowPolyBase is true.
     * 
     */
    @Import(name="polyBaseSettings")
    private @Nullable PolybaseSettingsResponse polyBaseSettings;

    public Optional<PolybaseSettingsResponse> polyBaseSettings() {
        return Optional.ofNullable(this.polyBaseSettings);
    }

    /**
     * SQL pre-copy script. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="preCopyScript")
    private @Nullable Object preCopyScript;

    public Optional<Object> preCopyScript() {
        return Optional.ofNullable(this.preCopyScript);
    }

    /**
     * Sink retry count. Type: integer (or Expression with resultType integer).
     * 
     */
    @Import(name="sinkRetryCount")
    private @Nullable Object sinkRetryCount;

    public Optional<Object> sinkRetryCount() {
        return Optional.ofNullable(this.sinkRetryCount);
    }

    /**
     * Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     * 
     */
    @Import(name="sinkRetryWait")
    private @Nullable Object sinkRetryWait;

    public Optional<Object> sinkRetryWait() {
        return Optional.ofNullable(this.sinkRetryWait);
    }

    /**
     * Whether to use table lock during bulk copy. Type: boolean (or Expression with resultType boolean).
     * 
     */
    @Import(name="sqlWriterUseTableLock")
    private @Nullable Object sqlWriterUseTableLock;

    public Optional<Object> sqlWriterUseTableLock() {
        return Optional.ofNullable(this.sqlWriterUseTableLock);
    }

    /**
     * The option to handle sink table, such as autoCreate. For now only &#39;autoCreate&#39; value is supported. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="tableOption")
    private @Nullable Object tableOption;

    public Optional<Object> tableOption() {
        return Optional.ofNullable(this.tableOption);
    }

    /**
     * Copy sink type.
     * Expected value is &#39;SqlDWSink&#39;.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    public String type() {
        return this.type;
    }

    /**
     * SQL DW upsert settings.
     * 
     */
    @Import(name="upsertSettings")
    private @Nullable SqlDWUpsertSettingsResponse upsertSettings;

    public Optional<SqlDWUpsertSettingsResponse> upsertSettings() {
        return Optional.ofNullable(this.upsertSettings);
    }

    /**
     * Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
     * 
     */
    @Import(name="writeBatchSize")
    private @Nullable Object writeBatchSize;

    public Optional<Object> writeBatchSize() {
        return Optional.ofNullable(this.writeBatchSize);
    }

    /**
     * Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     * 
     */
    @Import(name="writeBatchTimeout")
    private @Nullable Object writeBatchTimeout;

    public Optional<Object> writeBatchTimeout() {
        return Optional.ofNullable(this.writeBatchTimeout);
    }

    /**
     * Write behavior when copying data into azure SQL DW. Type: SqlDWWriteBehaviorEnum (or Expression with resultType SqlDWWriteBehaviorEnum)
     * 
     */
    @Import(name="writeBehavior")
    private @Nullable Object writeBehavior;

    public Optional<Object> writeBehavior() {
        return Optional.ofNullable(this.writeBehavior);
    }

    private SqlDWSinkResponse() {}

    private SqlDWSinkResponse(SqlDWSinkResponse $) {
        this.allowCopyCommand = $.allowCopyCommand;
        this.allowPolyBase = $.allowPolyBase;
        this.copyCommandSettings = $.copyCommandSettings;
        this.disableMetricsCollection = $.disableMetricsCollection;
        this.maxConcurrentConnections = $.maxConcurrentConnections;
        this.polyBaseSettings = $.polyBaseSettings;
        this.preCopyScript = $.preCopyScript;
        this.sinkRetryCount = $.sinkRetryCount;
        this.sinkRetryWait = $.sinkRetryWait;
        this.sqlWriterUseTableLock = $.sqlWriterUseTableLock;
        this.tableOption = $.tableOption;
        this.type = $.type;
        this.upsertSettings = $.upsertSettings;
        this.writeBatchSize = $.writeBatchSize;
        this.writeBatchTimeout = $.writeBatchTimeout;
        this.writeBehavior = $.writeBehavior;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SqlDWSinkResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SqlDWSinkResponse $;

        public Builder() {
            $ = new SqlDWSinkResponse();
        }

        public Builder(SqlDWSinkResponse defaults) {
            $ = new SqlDWSinkResponse(Objects.requireNonNull(defaults));
        }

        public Builder allowCopyCommand(@Nullable Object allowCopyCommand) {
            $.allowCopyCommand = allowCopyCommand;
            return this;
        }

        public Builder allowPolyBase(@Nullable Object allowPolyBase) {
            $.allowPolyBase = allowPolyBase;
            return this;
        }

        public Builder copyCommandSettings(@Nullable DWCopyCommandSettingsResponse copyCommandSettings) {
            $.copyCommandSettings = copyCommandSettings;
            return this;
        }

        public Builder disableMetricsCollection(@Nullable Object disableMetricsCollection) {
            $.disableMetricsCollection = disableMetricsCollection;
            return this;
        }

        public Builder maxConcurrentConnections(@Nullable Object maxConcurrentConnections) {
            $.maxConcurrentConnections = maxConcurrentConnections;
            return this;
        }

        public Builder polyBaseSettings(@Nullable PolybaseSettingsResponse polyBaseSettings) {
            $.polyBaseSettings = polyBaseSettings;
            return this;
        }

        public Builder preCopyScript(@Nullable Object preCopyScript) {
            $.preCopyScript = preCopyScript;
            return this;
        }

        public Builder sinkRetryCount(@Nullable Object sinkRetryCount) {
            $.sinkRetryCount = sinkRetryCount;
            return this;
        }

        public Builder sinkRetryWait(@Nullable Object sinkRetryWait) {
            $.sinkRetryWait = sinkRetryWait;
            return this;
        }

        public Builder sqlWriterUseTableLock(@Nullable Object sqlWriterUseTableLock) {
            $.sqlWriterUseTableLock = sqlWriterUseTableLock;
            return this;
        }

        public Builder tableOption(@Nullable Object tableOption) {
            $.tableOption = tableOption;
            return this;
        }

        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public Builder upsertSettings(@Nullable SqlDWUpsertSettingsResponse upsertSettings) {
            $.upsertSettings = upsertSettings;
            return this;
        }

        public Builder writeBatchSize(@Nullable Object writeBatchSize) {
            $.writeBatchSize = writeBatchSize;
            return this;
        }

        public Builder writeBatchTimeout(@Nullable Object writeBatchTimeout) {
            $.writeBatchTimeout = writeBatchTimeout;
            return this;
        }

        public Builder writeBehavior(@Nullable Object writeBehavior) {
            $.writeBehavior = writeBehavior;
            return this;
        }

        public SqlDWSinkResponse build() {
            $.type = Codegen.stringProp("type").arg($.type).require();
            return $;
        }
    }

}
