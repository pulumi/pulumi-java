// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.azurenative.datafactory.inputs.ActivityDependencyResponse;
import com.pulumi.azurenative.datafactory.inputs.ActivityPolicyResponse;
import com.pulumi.azurenative.datafactory.inputs.LinkedServiceReferenceResponse;
import com.pulumi.azurenative.datafactory.inputs.UserPropertyResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Data Lake Analytics U-SQL activity.
 * 
 */
public final class DataLakeAnalyticsUSQLActivityResponse extends com.pulumi.resources.InvokeArgs {

    public static final DataLakeAnalyticsUSQLActivityResponse Empty = new DataLakeAnalyticsUSQLActivityResponse();

    /**
     * Compilation mode of U-SQL. Must be one of these values : Semantic, Full and SingleBox. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="compilationMode")
    private @Nullable Object compilationMode;

    public Optional<Object> compilationMode() {
        return Optional.ofNullable(this.compilationMode);
    }

    /**
     * The maximum number of nodes simultaneously used to run the job. Default value is 1. Type: integer (or Expression with resultType integer), minimum: 1.
     * 
     */
    @Import(name="degreeOfParallelism")
    private @Nullable Object degreeOfParallelism;

    public Optional<Object> degreeOfParallelism() {
        return Optional.ofNullable(this.degreeOfParallelism);
    }

    /**
     * Activity depends on condition.
     * 
     */
    @Import(name="dependsOn")
    private @Nullable List<ActivityDependencyResponse> dependsOn;

    public Optional<List<ActivityDependencyResponse>> dependsOn() {
        return Optional.ofNullable(this.dependsOn);
    }

    /**
     * Activity description.
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Linked service reference.
     * 
     */
    @Import(name="linkedServiceName")
    private @Nullable LinkedServiceReferenceResponse linkedServiceName;

    public Optional<LinkedServiceReferenceResponse> linkedServiceName() {
        return Optional.ofNullable(this.linkedServiceName);
    }

    /**
     * Activity name.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    public String name() {
        return this.name;
    }

    /**
     * Parameters for U-SQL job request.
     * 
     */
    @Import(name="parameters")
    private @Nullable Map<String,Object> parameters;

    public Optional<Map<String,Object>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    /**
     * Activity policy.
     * 
     */
    @Import(name="policy")
    private @Nullable ActivityPolicyResponse policy;

    public Optional<ActivityPolicyResponse> policy() {
        return Optional.ofNullable(this.policy);
    }

    /**
     * Determines which jobs out of all that are queued should be selected to run first. The lower the number, the higher the priority. Default value is 1000. Type: integer (or Expression with resultType integer), minimum: 1.
     * 
     */
    @Import(name="priority")
    private @Nullable Object priority;

    public Optional<Object> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * Runtime version of the U-SQL engine to use. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="runtimeVersion")
    private @Nullable Object runtimeVersion;

    public Optional<Object> runtimeVersion() {
        return Optional.ofNullable(this.runtimeVersion);
    }

    /**
     * Script linked service reference.
     * 
     */
    @Import(name="scriptLinkedService", required=true)
    private LinkedServiceReferenceResponse scriptLinkedService;

    public LinkedServiceReferenceResponse scriptLinkedService() {
        return this.scriptLinkedService;
    }

    /**
     * Case-sensitive path to folder that contains the U-SQL script. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="scriptPath", required=true)
    private Object scriptPath;

    public Object scriptPath() {
        return this.scriptPath;
    }

    /**
     * Type of activity.
     * Expected value is &#39;DataLakeAnalyticsU-SQL&#39;.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    public String type() {
        return this.type;
    }

    /**
     * Activity user properties.
     * 
     */
    @Import(name="userProperties")
    private @Nullable List<UserPropertyResponse> userProperties;

    public Optional<List<UserPropertyResponse>> userProperties() {
        return Optional.ofNullable(this.userProperties);
    }

    private DataLakeAnalyticsUSQLActivityResponse() {}

    private DataLakeAnalyticsUSQLActivityResponse(DataLakeAnalyticsUSQLActivityResponse $) {
        this.compilationMode = $.compilationMode;
        this.degreeOfParallelism = $.degreeOfParallelism;
        this.dependsOn = $.dependsOn;
        this.description = $.description;
        this.linkedServiceName = $.linkedServiceName;
        this.name = $.name;
        this.parameters = $.parameters;
        this.policy = $.policy;
        this.priority = $.priority;
        this.runtimeVersion = $.runtimeVersion;
        this.scriptLinkedService = $.scriptLinkedService;
        this.scriptPath = $.scriptPath;
        this.type = $.type;
        this.userProperties = $.userProperties;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataLakeAnalyticsUSQLActivityResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataLakeAnalyticsUSQLActivityResponse $;

        public Builder() {
            $ = new DataLakeAnalyticsUSQLActivityResponse();
        }

        public Builder(DataLakeAnalyticsUSQLActivityResponse defaults) {
            $ = new DataLakeAnalyticsUSQLActivityResponse(Objects.requireNonNull(defaults));
        }

        public Builder compilationMode(@Nullable Object compilationMode) {
            $.compilationMode = compilationMode;
            return this;
        }

        public Builder degreeOfParallelism(@Nullable Object degreeOfParallelism) {
            $.degreeOfParallelism = degreeOfParallelism;
            return this;
        }

        public Builder dependsOn(@Nullable List<ActivityDependencyResponse> dependsOn) {
            $.dependsOn = dependsOn;
            return this;
        }

        public Builder dependsOn(ActivityDependencyResponse... dependsOn) {
            return dependsOn(List.of(dependsOn));
        }

        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        public Builder linkedServiceName(@Nullable LinkedServiceReferenceResponse linkedServiceName) {
            $.linkedServiceName = linkedServiceName;
            return this;
        }

        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public Builder parameters(@Nullable Map<String,Object> parameters) {
            $.parameters = parameters;
            return this;
        }

        public Builder policy(@Nullable ActivityPolicyResponse policy) {
            $.policy = policy;
            return this;
        }

        public Builder priority(@Nullable Object priority) {
            $.priority = priority;
            return this;
        }

        public Builder runtimeVersion(@Nullable Object runtimeVersion) {
            $.runtimeVersion = runtimeVersion;
            return this;
        }

        public Builder scriptLinkedService(LinkedServiceReferenceResponse scriptLinkedService) {
            $.scriptLinkedService = scriptLinkedService;
            return this;
        }

        public Builder scriptPath(Object scriptPath) {
            $.scriptPath = scriptPath;
            return this;
        }

        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public Builder userProperties(@Nullable List<UserPropertyResponse> userProperties) {
            $.userProperties = userProperties;
            return this;
        }

        public Builder userProperties(UserPropertyResponse... userProperties) {
            return userProperties(List.of(userProperties));
        }

        public DataLakeAnalyticsUSQLActivityResponse build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.scriptLinkedService = Objects.requireNonNull($.scriptLinkedService, "expected parameter 'scriptLinkedService' to be non-null");
            $.scriptPath = Objects.requireNonNull($.scriptPath, "expected parameter 'scriptPath' to be non-null");
            $.type = Codegen.stringProp("type").arg($.type).require();
            return $;
        }
    }

}
