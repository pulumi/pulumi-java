// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.kusto.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * A class representing follower database request.
 * 
 */
public final class FollowerDatabaseDefinitionResponse extends com.pulumi.resources.InvokeArgs {

    public static final FollowerDatabaseDefinitionResponse Empty = new FollowerDatabaseDefinitionResponse();

    /**
     * Resource name of the attached database configuration in the follower cluster.
     * 
     */
    @Import(name="attachedDatabaseConfigurationName", required=true)
    private String attachedDatabaseConfigurationName;

    /**
     * @return Resource name of the attached database configuration in the follower cluster.
     * 
     */
    public String attachedDatabaseConfigurationName() {
        return this.attachedDatabaseConfigurationName;
    }

    /**
     * Resource id of the cluster that follows a database owned by this cluster.
     * 
     */
    @Import(name="clusterResourceId", required=true)
    private String clusterResourceId;

    /**
     * @return Resource id of the cluster that follows a database owned by this cluster.
     * 
     */
    public String clusterResourceId() {
        return this.clusterResourceId;
    }

    /**
     * The database name owned by this cluster that was followed. * in case following all databases.
     * 
     */
    @Import(name="databaseName", required=true)
    private String databaseName;

    /**
     * @return The database name owned by this cluster that was followed. * in case following all databases.
     * 
     */
    public String databaseName() {
        return this.databaseName;
    }

    private FollowerDatabaseDefinitionResponse() {}

    private FollowerDatabaseDefinitionResponse(FollowerDatabaseDefinitionResponse $) {
        this.attachedDatabaseConfigurationName = $.attachedDatabaseConfigurationName;
        this.clusterResourceId = $.clusterResourceId;
        this.databaseName = $.databaseName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FollowerDatabaseDefinitionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FollowerDatabaseDefinitionResponse $;

        public Builder() {
            $ = new FollowerDatabaseDefinitionResponse();
        }

        public Builder(FollowerDatabaseDefinitionResponse defaults) {
            $ = new FollowerDatabaseDefinitionResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param attachedDatabaseConfigurationName Resource name of the attached database configuration in the follower cluster.
         * 
         * @return builder
         * 
         */
        public Builder attachedDatabaseConfigurationName(String attachedDatabaseConfigurationName) {
            $.attachedDatabaseConfigurationName = attachedDatabaseConfigurationName;
            return this;
        }

        /**
         * @param clusterResourceId Resource id of the cluster that follows a database owned by this cluster.
         * 
         * @return builder
         * 
         */
        public Builder clusterResourceId(String clusterResourceId) {
            $.clusterResourceId = clusterResourceId;
            return this;
        }

        /**
         * @param databaseName The database name owned by this cluster that was followed. * in case following all databases.
         * 
         * @return builder
         * 
         */
        public Builder databaseName(String databaseName) {
            $.databaseName = databaseName;
            return this;
        }

        public FollowerDatabaseDefinitionResponse build() {
            $.attachedDatabaseConfigurationName = Objects.requireNonNull($.attachedDatabaseConfigurationName, "expected parameter 'attachedDatabaseConfigurationName' to be non-null");
            $.clusterResourceId = Objects.requireNonNull($.clusterResourceId, "expected parameter 'clusterResourceId' to be non-null");
            $.databaseName = Objects.requireNonNull($.databaseName, "expected parameter 'databaseName' to be non-null");
            return $;
        }
    }

}
