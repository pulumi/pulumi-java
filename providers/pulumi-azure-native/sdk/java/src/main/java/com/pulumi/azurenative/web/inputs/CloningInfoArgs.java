// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.web.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Information needed for cloning operation.
 * 
 */
public final class CloningInfoArgs extends com.pulumi.resources.ResourceArgs {

    public static final CloningInfoArgs Empty = new CloningInfoArgs();

    /**
     * Application setting overrides for cloned app. If specified, these settings override the settings cloned
     * from source app. Otherwise, application settings from source app are retained.
     * 
     */
    @Import(name="appSettingsOverrides")
      private final @Nullable Output<Map<String,String>> appSettingsOverrides;

    public Output<Map<String,String>> appSettingsOverrides() {
        return this.appSettingsOverrides == null ? Codegen.empty() : this.appSettingsOverrides;
    }

    /**
     * &lt;code&gt;true&lt;/code&gt; to clone custom hostnames from source app; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    @Import(name="cloneCustomHostNames")
      private final @Nullable Output<Boolean> cloneCustomHostNames;

    public Output<Boolean> cloneCustomHostNames() {
        return this.cloneCustomHostNames == null ? Codegen.empty() : this.cloneCustomHostNames;
    }

    /**
     * &lt;code&gt;true&lt;/code&gt; to clone source control from source app; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    @Import(name="cloneSourceControl")
      private final @Nullable Output<Boolean> cloneSourceControl;

    public Output<Boolean> cloneSourceControl() {
        return this.cloneSourceControl == null ? Codegen.empty() : this.cloneSourceControl;
    }

    /**
     * &lt;code&gt;true&lt;/code&gt; to configure load balancing for source and destination app.
     * 
     */
    @Import(name="configureLoadBalancing")
      private final @Nullable Output<Boolean> configureLoadBalancing;

    public Output<Boolean> configureLoadBalancing() {
        return this.configureLoadBalancing == null ? Codegen.empty() : this.configureLoadBalancing;
    }

    /**
     * Correlation ID of cloning operation. This ID ties multiple cloning operations
     * together to use the same snapshot.
     * 
     */
    @Import(name="correlationId")
      private final @Nullable Output<String> correlationId;

    public Output<String> correlationId() {
        return this.correlationId == null ? Codegen.empty() : this.correlationId;
    }

    /**
     * App Service Environment.
     * 
     */
    @Import(name="hostingEnvironment")
      private final @Nullable Output<String> hostingEnvironment;

    public Output<String> hostingEnvironment() {
        return this.hostingEnvironment == null ? Codegen.empty() : this.hostingEnvironment;
    }

    /**
     * &lt;code&gt;true&lt;/code&gt; to overwrite destination app; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    @Import(name="overwrite")
      private final @Nullable Output<Boolean> overwrite;

    public Output<Boolean> overwrite() {
        return this.overwrite == null ? Codegen.empty() : this.overwrite;
    }

    /**
     * ARM resource ID of the source app. App resource ID is of the form
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName} for production slots and
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slotName} for other slots.
     * 
     */
    @Import(name="sourceWebAppId", required=true)
      private final Output<String> sourceWebAppId;

    public Output<String> sourceWebAppId() {
        return this.sourceWebAppId;
    }

    /**
     * Location of source app ex: West US or North Europe
     * 
     */
    @Import(name="sourceWebAppLocation")
      private final @Nullable Output<String> sourceWebAppLocation;

    public Output<String> sourceWebAppLocation() {
        return this.sourceWebAppLocation == null ? Codegen.empty() : this.sourceWebAppLocation;
    }

    /**
     * ARM resource ID of the Traffic Manager profile to use, if it exists. Traffic Manager resource ID is of the form
     * /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficManagerProfiles/{profileName}.
     * 
     */
    @Import(name="trafficManagerProfileId")
      private final @Nullable Output<String> trafficManagerProfileId;

    public Output<String> trafficManagerProfileId() {
        return this.trafficManagerProfileId == null ? Codegen.empty() : this.trafficManagerProfileId;
    }

    /**
     * Name of Traffic Manager profile to create. This is only needed if Traffic Manager profile does not already exist.
     * 
     */
    @Import(name="trafficManagerProfileName")
      private final @Nullable Output<String> trafficManagerProfileName;

    public Output<String> trafficManagerProfileName() {
        return this.trafficManagerProfileName == null ? Codegen.empty() : this.trafficManagerProfileName;
    }

    public CloningInfoArgs(
        @Nullable Output<Map<String,String>> appSettingsOverrides,
        @Nullable Output<Boolean> cloneCustomHostNames,
        @Nullable Output<Boolean> cloneSourceControl,
        @Nullable Output<Boolean> configureLoadBalancing,
        @Nullable Output<String> correlationId,
        @Nullable Output<String> hostingEnvironment,
        @Nullable Output<Boolean> overwrite,
        Output<String> sourceWebAppId,
        @Nullable Output<String> sourceWebAppLocation,
        @Nullable Output<String> trafficManagerProfileId,
        @Nullable Output<String> trafficManagerProfileName) {
        this.appSettingsOverrides = appSettingsOverrides;
        this.cloneCustomHostNames = cloneCustomHostNames;
        this.cloneSourceControl = cloneSourceControl;
        this.configureLoadBalancing = configureLoadBalancing;
        this.correlationId = correlationId;
        this.hostingEnvironment = hostingEnvironment;
        this.overwrite = overwrite;
        this.sourceWebAppId = Objects.requireNonNull(sourceWebAppId, "expected parameter 'sourceWebAppId' to be non-null");
        this.sourceWebAppLocation = sourceWebAppLocation;
        this.trafficManagerProfileId = trafficManagerProfileId;
        this.trafficManagerProfileName = trafficManagerProfileName;
    }

    private CloningInfoArgs() {
        this.appSettingsOverrides = Codegen.empty();
        this.cloneCustomHostNames = Codegen.empty();
        this.cloneSourceControl = Codegen.empty();
        this.configureLoadBalancing = Codegen.empty();
        this.correlationId = Codegen.empty();
        this.hostingEnvironment = Codegen.empty();
        this.overwrite = Codegen.empty();
        this.sourceWebAppId = Codegen.empty();
        this.sourceWebAppLocation = Codegen.empty();
        this.trafficManagerProfileId = Codegen.empty();
        this.trafficManagerProfileName = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CloningInfoArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Map<String,String>> appSettingsOverrides;
        private @Nullable Output<Boolean> cloneCustomHostNames;
        private @Nullable Output<Boolean> cloneSourceControl;
        private @Nullable Output<Boolean> configureLoadBalancing;
        private @Nullable Output<String> correlationId;
        private @Nullable Output<String> hostingEnvironment;
        private @Nullable Output<Boolean> overwrite;
        private Output<String> sourceWebAppId;
        private @Nullable Output<String> sourceWebAppLocation;
        private @Nullable Output<String> trafficManagerProfileId;
        private @Nullable Output<String> trafficManagerProfileName;

        public Builder() {
    	      // Empty
        }

        public Builder(CloningInfoArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appSettingsOverrides = defaults.appSettingsOverrides;
    	      this.cloneCustomHostNames = defaults.cloneCustomHostNames;
    	      this.cloneSourceControl = defaults.cloneSourceControl;
    	      this.configureLoadBalancing = defaults.configureLoadBalancing;
    	      this.correlationId = defaults.correlationId;
    	      this.hostingEnvironment = defaults.hostingEnvironment;
    	      this.overwrite = defaults.overwrite;
    	      this.sourceWebAppId = defaults.sourceWebAppId;
    	      this.sourceWebAppLocation = defaults.sourceWebAppLocation;
    	      this.trafficManagerProfileId = defaults.trafficManagerProfileId;
    	      this.trafficManagerProfileName = defaults.trafficManagerProfileName;
        }

        public Builder appSettingsOverrides(@Nullable Output<Map<String,String>> appSettingsOverrides) {
            this.appSettingsOverrides = appSettingsOverrides;
            return this;
        }
        public Builder appSettingsOverrides(@Nullable Map<String,String> appSettingsOverrides) {
            this.appSettingsOverrides = Codegen.ofNullable(appSettingsOverrides);
            return this;
        }
        public Builder cloneCustomHostNames(@Nullable Output<Boolean> cloneCustomHostNames) {
            this.cloneCustomHostNames = cloneCustomHostNames;
            return this;
        }
        public Builder cloneCustomHostNames(@Nullable Boolean cloneCustomHostNames) {
            this.cloneCustomHostNames = Codegen.ofNullable(cloneCustomHostNames);
            return this;
        }
        public Builder cloneSourceControl(@Nullable Output<Boolean> cloneSourceControl) {
            this.cloneSourceControl = cloneSourceControl;
            return this;
        }
        public Builder cloneSourceControl(@Nullable Boolean cloneSourceControl) {
            this.cloneSourceControl = Codegen.ofNullable(cloneSourceControl);
            return this;
        }
        public Builder configureLoadBalancing(@Nullable Output<Boolean> configureLoadBalancing) {
            this.configureLoadBalancing = configureLoadBalancing;
            return this;
        }
        public Builder configureLoadBalancing(@Nullable Boolean configureLoadBalancing) {
            this.configureLoadBalancing = Codegen.ofNullable(configureLoadBalancing);
            return this;
        }
        public Builder correlationId(@Nullable Output<String> correlationId) {
            this.correlationId = correlationId;
            return this;
        }
        public Builder correlationId(@Nullable String correlationId) {
            this.correlationId = Codegen.ofNullable(correlationId);
            return this;
        }
        public Builder hostingEnvironment(@Nullable Output<String> hostingEnvironment) {
            this.hostingEnvironment = hostingEnvironment;
            return this;
        }
        public Builder hostingEnvironment(@Nullable String hostingEnvironment) {
            this.hostingEnvironment = Codegen.ofNullable(hostingEnvironment);
            return this;
        }
        public Builder overwrite(@Nullable Output<Boolean> overwrite) {
            this.overwrite = overwrite;
            return this;
        }
        public Builder overwrite(@Nullable Boolean overwrite) {
            this.overwrite = Codegen.ofNullable(overwrite);
            return this;
        }
        public Builder sourceWebAppId(Output<String> sourceWebAppId) {
            this.sourceWebAppId = Objects.requireNonNull(sourceWebAppId);
            return this;
        }
        public Builder sourceWebAppId(String sourceWebAppId) {
            this.sourceWebAppId = Output.of(Objects.requireNonNull(sourceWebAppId));
            return this;
        }
        public Builder sourceWebAppLocation(@Nullable Output<String> sourceWebAppLocation) {
            this.sourceWebAppLocation = sourceWebAppLocation;
            return this;
        }
        public Builder sourceWebAppLocation(@Nullable String sourceWebAppLocation) {
            this.sourceWebAppLocation = Codegen.ofNullable(sourceWebAppLocation);
            return this;
        }
        public Builder trafficManagerProfileId(@Nullable Output<String> trafficManagerProfileId) {
            this.trafficManagerProfileId = trafficManagerProfileId;
            return this;
        }
        public Builder trafficManagerProfileId(@Nullable String trafficManagerProfileId) {
            this.trafficManagerProfileId = Codegen.ofNullable(trafficManagerProfileId);
            return this;
        }
        public Builder trafficManagerProfileName(@Nullable Output<String> trafficManagerProfileName) {
            this.trafficManagerProfileName = trafficManagerProfileName;
            return this;
        }
        public Builder trafficManagerProfileName(@Nullable String trafficManagerProfileName) {
            this.trafficManagerProfileName = Codegen.ofNullable(trafficManagerProfileName);
            return this;
        }        public CloningInfoArgs build() {
            return new CloningInfoArgs(appSettingsOverrides, cloneCustomHostNames, cloneSourceControl, configureLoadBalancing, correlationId, hostingEnvironment, overwrite, sourceWebAppId, sourceWebAppLocation, trafficManagerProfileId, trafficManagerProfileName);
        }
    }
}
