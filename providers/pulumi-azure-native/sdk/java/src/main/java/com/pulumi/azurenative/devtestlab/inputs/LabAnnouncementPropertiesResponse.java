// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.devtestlab.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Properties of a lab&#39;s announcement banner
 * 
 */
public final class LabAnnouncementPropertiesResponse extends com.pulumi.resources.InvokeArgs {

    public static final LabAnnouncementPropertiesResponse Empty = new LabAnnouncementPropertiesResponse();

    /**
     * Is the lab announcement active/enabled at this time?
     * 
     */
    @Import(name="enabled")
    private @Nullable String enabled;

    public Optional<String> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The time at which the announcement expires (null for never)
     * 
     */
    @Import(name="expirationDate")
    private @Nullable String expirationDate;

    public Optional<String> expirationDate() {
        return Optional.ofNullable(this.expirationDate);
    }

    /**
     * Has this announcement expired?
     * 
     */
    @Import(name="expired")
    private @Nullable Boolean expired;

    public Optional<Boolean> expired() {
        return Optional.ofNullable(this.expired);
    }

    /**
     * The markdown text (if any) that this lab displays in the UI. If left empty/null, nothing will be shown.
     * 
     */
    @Import(name="markdown")
    private @Nullable String markdown;

    public Optional<String> markdown() {
        return Optional.ofNullable(this.markdown);
    }

    /**
     * The provisioning status of the resource.
     * 
     */
    @Import(name="provisioningState", required=true)
    private String provisioningState;

    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * The plain text title for the lab announcement
     * 
     */
    @Import(name="title")
    private @Nullable String title;

    public Optional<String> title() {
        return Optional.ofNullable(this.title);
    }

    /**
     * The unique immutable identifier of a resource (Guid).
     * 
     */
    @Import(name="uniqueIdentifier", required=true)
    private String uniqueIdentifier;

    public String uniqueIdentifier() {
        return this.uniqueIdentifier;
    }

    private LabAnnouncementPropertiesResponse() {}

    private LabAnnouncementPropertiesResponse(LabAnnouncementPropertiesResponse $) {
        this.enabled = $.enabled;
        this.expirationDate = $.expirationDate;
        this.expired = $.expired;
        this.markdown = $.markdown;
        this.provisioningState = $.provisioningState;
        this.title = $.title;
        this.uniqueIdentifier = $.uniqueIdentifier;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LabAnnouncementPropertiesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LabAnnouncementPropertiesResponse $;

        public Builder() {
            $ = new LabAnnouncementPropertiesResponse();
        }

        public Builder(LabAnnouncementPropertiesResponse defaults) {
            $ = new LabAnnouncementPropertiesResponse(Objects.requireNonNull(defaults));
        }

        public Builder enabled(@Nullable String enabled) {
            $.enabled = enabled;
            return this;
        }

        public Builder expirationDate(@Nullable String expirationDate) {
            $.expirationDate = expirationDate;
            return this;
        }

        public Builder expired(@Nullable Boolean expired) {
            $.expired = expired;
            return this;
        }

        public Builder markdown(@Nullable String markdown) {
            $.markdown = markdown;
            return this;
        }

        public Builder provisioningState(String provisioningState) {
            $.provisioningState = provisioningState;
            return this;
        }

        public Builder title(@Nullable String title) {
            $.title = title;
            return this;
        }

        public Builder uniqueIdentifier(String uniqueIdentifier) {
            $.uniqueIdentifier = uniqueIdentifier;
            return this;
        }

        public LabAnnouncementPropertiesResponse build() {
            $.provisioningState = Objects.requireNonNull($.provisioningState, "expected parameter 'provisioningState' to be non-null");
            $.uniqueIdentifier = Objects.requireNonNull($.uniqueIdentifier, "expected parameter 'uniqueIdentifier' to be non-null");
            return $;
        }
    }

}
