// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.signalrservice;

import com.pulumi.azurenative.signalrservice.enums.ServiceKind;
import com.pulumi.azurenative.signalrservice.inputs.ResourceSkuArgs;
import com.pulumi.azurenative.signalrservice.inputs.ServerlessUpstreamSettingsArgs;
import com.pulumi.azurenative.signalrservice.inputs.SignalRCorsSettingsArgs;
import com.pulumi.azurenative.signalrservice.inputs.SignalRFeatureArgs;
import com.pulumi.azurenative.signalrservice.inputs.SignalRNetworkACLsArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SignalRArgs extends com.pulumi.resources.ResourceArgs {

    public static final SignalRArgs Empty = new SignalRArgs();

    /**
     * Cross-Origin Resource Sharing (CORS) settings.
     * 
     */
    @Import(name="cors")
    private @Nullable Output<SignalRCorsSettingsArgs> cors;

    public Optional<Output<SignalRCorsSettingsArgs>> cors() {
        return Optional.ofNullable(this.cors);
    }

    /**
     * List of SignalR featureFlags. e.g. ServiceMode.
     * 
     * FeatureFlags that are not included in the parameters for the update operation will not be modified.
     * And the response will only include featureFlags that are explicitly set.
     * When a featureFlag is not explicitly set, SignalR service will use its globally default value.
     * But keep in mind, the default value doesn&#39;t mean &#34;false&#34;. It varies in terms of different FeatureFlags.
     * 
     */
    @Import(name="features")
    private @Nullable Output<List<SignalRFeatureArgs>> features;

    public Optional<Output<List<SignalRFeatureArgs>>> features() {
        return Optional.ofNullable(this.features);
    }

    /**
     * The kind of the service - e.g. &#34;SignalR&#34;, or &#34;RawWebSockets&#34; for &#34;Microsoft.SignalRService/SignalR&#34;
     * 
     */
    @Import(name="kind")
    private @Nullable Output<Either<String,ServiceKind>> kind;

    public Optional<Output<Either<String,ServiceKind>>> kind() {
        return Optional.ofNullable(this.kind);
    }

    /**
     * The GEO location of the SignalR service. e.g. West US | East US | North Central US | South Central US.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Network ACLs
     * 
     */
    @Import(name="networkACLs")
    private @Nullable Output<SignalRNetworkACLsArgs> networkACLs;

    public Optional<Output<SignalRNetworkACLsArgs>> networkACLs() {
        return Optional.ofNullable(this.networkACLs);
    }

    /**
     * The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The name of the SignalR resource.
     * 
     */
    @Import(name="resourceName")
    private @Nullable Output<String> resourceName;

    public Optional<Output<String>> resourceName() {
        return Optional.ofNullable(this.resourceName);
    }

    /**
     * The billing information of the resource.(e.g. Free, Standard)
     * 
     */
    @Import(name="sku")
    private @Nullable Output<ResourceSkuArgs> sku;

    public Optional<Output<ResourceSkuArgs>> sku() {
        return Optional.ofNullable(this.sku);
    }

    /**
     * Tags of the service which is a list of key value pairs that describe the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Upstream settings when the Azure SignalR is in server-less mode.
     * 
     */
    @Import(name="upstream")
    private @Nullable Output<ServerlessUpstreamSettingsArgs> upstream;

    public Optional<Output<ServerlessUpstreamSettingsArgs>> upstream() {
        return Optional.ofNullable(this.upstream);
    }

    private SignalRArgs() {}

    private SignalRArgs(SignalRArgs $) {
        this.cors = $.cors;
        this.features = $.features;
        this.kind = $.kind;
        this.location = $.location;
        this.networkACLs = $.networkACLs;
        this.resourceGroupName = $.resourceGroupName;
        this.resourceName = $.resourceName;
        this.sku = $.sku;
        this.tags = $.tags;
        this.upstream = $.upstream;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SignalRArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SignalRArgs $;

        public Builder() {
            $ = new SignalRArgs();
        }

        public Builder(SignalRArgs defaults) {
            $ = new SignalRArgs(Objects.requireNonNull(defaults));
        }

        public Builder cors(@Nullable Output<SignalRCorsSettingsArgs> cors) {
            $.cors = cors;
            return this;
        }

        public Builder cors(SignalRCorsSettingsArgs cors) {
            return cors(Output.of(cors));
        }

        public Builder features(@Nullable Output<List<SignalRFeatureArgs>> features) {
            $.features = features;
            return this;
        }

        public Builder features(List<SignalRFeatureArgs> features) {
            return features(Output.of(features));
        }

        public Builder features(SignalRFeatureArgs... features) {
            return features(List.of(features));
        }

        public Builder kind(@Nullable Output<Either<String,ServiceKind>> kind) {
            $.kind = kind;
            return this;
        }

        public Builder kind(Either<String,ServiceKind> kind) {
            return kind(Output.of(kind));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder networkACLs(@Nullable Output<SignalRNetworkACLsArgs> networkACLs) {
            $.networkACLs = networkACLs;
            return this;
        }

        public Builder networkACLs(SignalRNetworkACLsArgs networkACLs) {
            return networkACLs(Output.of(networkACLs));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder resourceName(@Nullable Output<String> resourceName) {
            $.resourceName = resourceName;
            return this;
        }

        public Builder resourceName(String resourceName) {
            return resourceName(Output.of(resourceName));
        }

        public Builder sku(@Nullable Output<ResourceSkuArgs> sku) {
            $.sku = sku;
            return this;
        }

        public Builder sku(ResourceSkuArgs sku) {
            return sku(Output.of(sku));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder upstream(@Nullable Output<ServerlessUpstreamSettingsArgs> upstream) {
            $.upstream = upstream;
            return this;
        }

        public Builder upstream(ServerlessUpstreamSettingsArgs upstream) {
            return upstream(Output.of(upstream));
        }

        public SignalRArgs build() {
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
