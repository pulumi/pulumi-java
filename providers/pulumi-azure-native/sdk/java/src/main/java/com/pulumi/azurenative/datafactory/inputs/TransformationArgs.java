// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.azurenative.datafactory.inputs.DataFlowReferenceArgs;
import com.pulumi.azurenative.datafactory.inputs.DatasetReferenceArgs;
import com.pulumi.azurenative.datafactory.inputs.LinkedServiceReferenceArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * A data flow transformation.
 * 
 */
public final class TransformationArgs extends com.pulumi.resources.ResourceArgs {

    public static final TransformationArgs Empty = new TransformationArgs();

    /**
     * Dataset reference.
     * 
     */
    @Import(name="dataset")
      private final @Nullable Output<DatasetReferenceArgs> dataset;

    public Output<DatasetReferenceArgs> dataset() {
        return this.dataset == null ? Codegen.empty() : this.dataset;
    }

    /**
     * Transformation description.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> description() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * Flowlet Reference
     * 
     */
    @Import(name="flowlet")
      private final @Nullable Output<DataFlowReferenceArgs> flowlet;

    public Output<DataFlowReferenceArgs> flowlet() {
        return this.flowlet == null ? Codegen.empty() : this.flowlet;
    }

    /**
     * Linked service reference.
     * 
     */
    @Import(name="linkedService")
      private final @Nullable Output<LinkedServiceReferenceArgs> linkedService;

    public Output<LinkedServiceReferenceArgs> linkedService() {
        return this.linkedService == null ? Codegen.empty() : this.linkedService;
    }

    /**
     * Transformation name.
     * 
     */
    @Import(name="name", required=true)
      private final Output<String> name;

    public Output<String> name() {
        return this.name;
    }

    public TransformationArgs(
        @Nullable Output<DatasetReferenceArgs> dataset,
        @Nullable Output<String> description,
        @Nullable Output<DataFlowReferenceArgs> flowlet,
        @Nullable Output<LinkedServiceReferenceArgs> linkedService,
        Output<String> name) {
        this.dataset = dataset;
        this.description = description;
        this.flowlet = flowlet;
        this.linkedService = linkedService;
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
    }

    private TransformationArgs() {
        this.dataset = Codegen.empty();
        this.description = Codegen.empty();
        this.flowlet = Codegen.empty();
        this.linkedService = Codegen.empty();
        this.name = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TransformationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<DatasetReferenceArgs> dataset;
        private @Nullable Output<String> description;
        private @Nullable Output<DataFlowReferenceArgs> flowlet;
        private @Nullable Output<LinkedServiceReferenceArgs> linkedService;
        private Output<String> name;

        public Builder() {
    	      // Empty
        }

        public Builder(TransformationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dataset = defaults.dataset;
    	      this.description = defaults.description;
    	      this.flowlet = defaults.flowlet;
    	      this.linkedService = defaults.linkedService;
    	      this.name = defaults.name;
        }

        public Builder dataset(@Nullable Output<DatasetReferenceArgs> dataset) {
            this.dataset = dataset;
            return this;
        }
        public Builder dataset(@Nullable DatasetReferenceArgs dataset) {
            this.dataset = Codegen.ofNullable(dataset);
            return this;
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder flowlet(@Nullable Output<DataFlowReferenceArgs> flowlet) {
            this.flowlet = flowlet;
            return this;
        }
        public Builder flowlet(@Nullable DataFlowReferenceArgs flowlet) {
            this.flowlet = Codegen.ofNullable(flowlet);
            return this;
        }
        public Builder linkedService(@Nullable Output<LinkedServiceReferenceArgs> linkedService) {
            this.linkedService = linkedService;
            return this;
        }
        public Builder linkedService(@Nullable LinkedServiceReferenceArgs linkedService) {
            this.linkedService = Codegen.ofNullable(linkedService);
            return this;
        }
        public Builder name(Output<String> name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder name(String name) {
            this.name = Output.of(Objects.requireNonNull(name));
            return this;
        }        public TransformationArgs build() {
            return new TransformationArgs(dataset, description, flowlet, linkedService, name);
        }
    }
}
