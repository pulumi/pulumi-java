// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.web.inputs;

import com.pulumi.azurenative.web.inputs.BlobStorageTokenStoreArgs;
import com.pulumi.azurenative.web.inputs.FileSystemTokenStoreArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The configuration settings of the token store.
 * 
 */
public final class TokenStoreArgs extends com.pulumi.resources.ResourceArgs {

    public static final TokenStoreArgs Empty = new TokenStoreArgs();

    /**
     * The configuration settings of the storage of the tokens if blob storage is used.
     * 
     */
    @Import(name="azureBlobStorage")
    private @Nullable Output<BlobStorageTokenStoreArgs> azureBlobStorage;

    /**
     * @return The configuration settings of the storage of the tokens if blob storage is used.
     * 
     */
    public Optional<Output<BlobStorageTokenStoreArgs>> azureBlobStorage() {
        return Optional.ofNullable(this.azureBlobStorage);
    }

    /**
     * &lt;code&gt;true&lt;/code&gt; to durably store platform-specific security tokens that are obtained during login flows; otherwise, &lt;code&gt;false&lt;/code&gt;.
     *  The default is &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return &lt;code&gt;true&lt;/code&gt; to durably store platform-specific security tokens that are obtained during login flows; otherwise, &lt;code&gt;false&lt;/code&gt;.
     *  The default is &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The configuration settings of the storage of the tokens if a file system is used.
     * 
     */
    @Import(name="fileSystem")
    private @Nullable Output<FileSystemTokenStoreArgs> fileSystem;

    /**
     * @return The configuration settings of the storage of the tokens if a file system is used.
     * 
     */
    public Optional<Output<FileSystemTokenStoreArgs>> fileSystem() {
        return Optional.ofNullable(this.fileSystem);
    }

    /**
     * The number of hours after session token expiration that a session token can be used to
     * call the token refresh API. The default is 72 hours.
     * 
     */
    @Import(name="tokenRefreshExtensionHours")
    private @Nullable Output<Double> tokenRefreshExtensionHours;

    /**
     * @return The number of hours after session token expiration that a session token can be used to
     * call the token refresh API. The default is 72 hours.
     * 
     */
    public Optional<Output<Double>> tokenRefreshExtensionHours() {
        return Optional.ofNullable(this.tokenRefreshExtensionHours);
    }

    private TokenStoreArgs() {}

    private TokenStoreArgs(TokenStoreArgs $) {
        this.azureBlobStorage = $.azureBlobStorage;
        this.enabled = $.enabled;
        this.fileSystem = $.fileSystem;
        this.tokenRefreshExtensionHours = $.tokenRefreshExtensionHours;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TokenStoreArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TokenStoreArgs $;

        public Builder() {
            $ = new TokenStoreArgs();
        }

        public Builder(TokenStoreArgs defaults) {
            $ = new TokenStoreArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param azureBlobStorage The configuration settings of the storage of the tokens if blob storage is used.
         * 
         * @return builder
         * 
         */
        public Builder azureBlobStorage(@Nullable Output<BlobStorageTokenStoreArgs> azureBlobStorage) {
            $.azureBlobStorage = azureBlobStorage;
            return this;
        }

        /**
         * @param azureBlobStorage The configuration settings of the storage of the tokens if blob storage is used.
         * 
         * @return builder
         * 
         */
        public Builder azureBlobStorage(BlobStorageTokenStoreArgs azureBlobStorage) {
            return azureBlobStorage(Output.of(azureBlobStorage));
        }

        /**
         * @param enabled &lt;code&gt;true&lt;/code&gt; to durably store platform-specific security tokens that are obtained during login flows; otherwise, &lt;code&gt;false&lt;/code&gt;.
         *  The default is &lt;code&gt;false&lt;/code&gt;.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled &lt;code&gt;true&lt;/code&gt; to durably store platform-specific security tokens that are obtained during login flows; otherwise, &lt;code&gt;false&lt;/code&gt;.
         *  The default is &lt;code&gt;false&lt;/code&gt;.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param fileSystem The configuration settings of the storage of the tokens if a file system is used.
         * 
         * @return builder
         * 
         */
        public Builder fileSystem(@Nullable Output<FileSystemTokenStoreArgs> fileSystem) {
            $.fileSystem = fileSystem;
            return this;
        }

        /**
         * @param fileSystem The configuration settings of the storage of the tokens if a file system is used.
         * 
         * @return builder
         * 
         */
        public Builder fileSystem(FileSystemTokenStoreArgs fileSystem) {
            return fileSystem(Output.of(fileSystem));
        }

        /**
         * @param tokenRefreshExtensionHours The number of hours after session token expiration that a session token can be used to
         * call the token refresh API. The default is 72 hours.
         * 
         * @return builder
         * 
         */
        public Builder tokenRefreshExtensionHours(@Nullable Output<Double> tokenRefreshExtensionHours) {
            $.tokenRefreshExtensionHours = tokenRefreshExtensionHours;
            return this;
        }

        /**
         * @param tokenRefreshExtensionHours The number of hours after session token expiration that a session token can be used to
         * call the token refresh API. The default is 72 hours.
         * 
         * @return builder
         * 
         */
        public Builder tokenRefreshExtensionHours(Double tokenRefreshExtensionHours) {
            return tokenRefreshExtensionHours(Output.of(tokenRefreshExtensionHours));
        }

        public TokenStoreArgs build() {
            return $;
        }
    }

}
