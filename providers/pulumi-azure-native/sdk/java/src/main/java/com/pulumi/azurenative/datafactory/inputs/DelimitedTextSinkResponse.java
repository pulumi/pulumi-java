// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.azurenative.datafactory.inputs.AzureBlobFSWriteSettingsResponse;
import com.pulumi.azurenative.datafactory.inputs.AzureBlobStorageWriteSettingsResponse;
import com.pulumi.azurenative.datafactory.inputs.AzureDataLakeStoreWriteSettingsResponse;
import com.pulumi.azurenative.datafactory.inputs.AzureFileStorageWriteSettingsResponse;
import com.pulumi.azurenative.datafactory.inputs.DelimitedTextWriteSettingsResponse;
import com.pulumi.azurenative.datafactory.inputs.FileServerWriteSettingsResponse;
import com.pulumi.azurenative.datafactory.inputs.SftpWriteSettingsResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A copy activity DelimitedText sink.
 * 
 */
public final class DelimitedTextSinkResponse extends com.pulumi.resources.InvokeArgs {

    public static final DelimitedTextSinkResponse Empty = new DelimitedTextSinkResponse();

    /**
     * If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
     * 
     */
    @Import(name="disableMetricsCollection")
    private @Nullable Object disableMetricsCollection;

    /**
     * @return If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
     * 
     */
    public Optional<Object> disableMetricsCollection() {
        return Optional.ofNullable(this.disableMetricsCollection);
    }

    /**
     * DelimitedText format settings.
     * 
     */
    @Import(name="formatSettings")
    private @Nullable DelimitedTextWriteSettingsResponse formatSettings;

    /**
     * @return DelimitedText format settings.
     * 
     */
    public Optional<DelimitedTextWriteSettingsResponse> formatSettings() {
        return Optional.ofNullable(this.formatSettings);
    }

    /**
     * The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
     * 
     */
    @Import(name="maxConcurrentConnections")
    private @Nullable Object maxConcurrentConnections;

    /**
     * @return The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
     * 
     */
    public Optional<Object> maxConcurrentConnections() {
        return Optional.ofNullable(this.maxConcurrentConnections);
    }

    /**
     * Sink retry count. Type: integer (or Expression with resultType integer).
     * 
     */
    @Import(name="sinkRetryCount")
    private @Nullable Object sinkRetryCount;

    /**
     * @return Sink retry count. Type: integer (or Expression with resultType integer).
     * 
     */
    public Optional<Object> sinkRetryCount() {
        return Optional.ofNullable(this.sinkRetryCount);
    }

    /**
     * Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     * 
     */
    @Import(name="sinkRetryWait")
    private @Nullable Object sinkRetryWait;

    /**
     * @return Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     * 
     */
    public Optional<Object> sinkRetryWait() {
        return Optional.ofNullable(this.sinkRetryWait);
    }

    /**
     * DelimitedText store settings.
     * 
     */
    @Import(name="storeSettings")
    private @Nullable Object storeSettings;

    /**
     * @return DelimitedText store settings.
     * 
     */
    public Optional<Object> storeSettings() {
        return Optional.ofNullable(this.storeSettings);
    }

    /**
     * Copy sink type.
     * Expected value is &#39;DelimitedTextSink&#39;.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    /**
     * @return Copy sink type.
     * Expected value is &#39;DelimitedTextSink&#39;.
     * 
     */
    public String type() {
        return this.type;
    }

    /**
     * Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
     * 
     */
    @Import(name="writeBatchSize")
    private @Nullable Object writeBatchSize;

    /**
     * @return Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
     * 
     */
    public Optional<Object> writeBatchSize() {
        return Optional.ofNullable(this.writeBatchSize);
    }

    /**
     * Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     * 
     */
    @Import(name="writeBatchTimeout")
    private @Nullable Object writeBatchTimeout;

    /**
     * @return Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
     * 
     */
    public Optional<Object> writeBatchTimeout() {
        return Optional.ofNullable(this.writeBatchTimeout);
    }

    private DelimitedTextSinkResponse() {}

    private DelimitedTextSinkResponse(DelimitedTextSinkResponse $) {
        this.disableMetricsCollection = $.disableMetricsCollection;
        this.formatSettings = $.formatSettings;
        this.maxConcurrentConnections = $.maxConcurrentConnections;
        this.sinkRetryCount = $.sinkRetryCount;
        this.sinkRetryWait = $.sinkRetryWait;
        this.storeSettings = $.storeSettings;
        this.type = $.type;
        this.writeBatchSize = $.writeBatchSize;
        this.writeBatchTimeout = $.writeBatchTimeout;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DelimitedTextSinkResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DelimitedTextSinkResponse $;

        public Builder() {
            $ = new DelimitedTextSinkResponse();
        }

        public Builder(DelimitedTextSinkResponse defaults) {
            $ = new DelimitedTextSinkResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param disableMetricsCollection If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
         * 
         * @return builder
         * 
         */
        public Builder disableMetricsCollection(@Nullable Object disableMetricsCollection) {
            $.disableMetricsCollection = disableMetricsCollection;
            return this;
        }

        /**
         * @param formatSettings DelimitedText format settings.
         * 
         * @return builder
         * 
         */
        public Builder formatSettings(@Nullable DelimitedTextWriteSettingsResponse formatSettings) {
            $.formatSettings = formatSettings;
            return this;
        }

        /**
         * @param maxConcurrentConnections The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
         * 
         * @return builder
         * 
         */
        public Builder maxConcurrentConnections(@Nullable Object maxConcurrentConnections) {
            $.maxConcurrentConnections = maxConcurrentConnections;
            return this;
        }

        /**
         * @param sinkRetryCount Sink retry count. Type: integer (or Expression with resultType integer).
         * 
         * @return builder
         * 
         */
        public Builder sinkRetryCount(@Nullable Object sinkRetryCount) {
            $.sinkRetryCount = sinkRetryCount;
            return this;
        }

        /**
         * @param sinkRetryWait Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
         * 
         * @return builder
         * 
         */
        public Builder sinkRetryWait(@Nullable Object sinkRetryWait) {
            $.sinkRetryWait = sinkRetryWait;
            return this;
        }

        /**
         * @param storeSettings DelimitedText store settings.
         * 
         * @return builder
         * 
         */
        public Builder storeSettings(@Nullable Object storeSettings) {
            $.storeSettings = storeSettings;
            return this;
        }

        /**
         * @param type Copy sink type.
         * Expected value is &#39;DelimitedTextSink&#39;.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            $.type = type;
            return this;
        }

        /**
         * @param writeBatchSize Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
         * 
         * @return builder
         * 
         */
        public Builder writeBatchSize(@Nullable Object writeBatchSize) {
            $.writeBatchSize = writeBatchSize;
            return this;
        }

        /**
         * @param writeBatchTimeout Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+)\.)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
         * 
         * @return builder
         * 
         */
        public Builder writeBatchTimeout(@Nullable Object writeBatchTimeout) {
            $.writeBatchTimeout = writeBatchTimeout;
            return this;
        }

        public DelimitedTextSinkResponse build() {
            $.type = Codegen.stringProp("type").arg($.type).require();
            return $;
        }
    }

}
