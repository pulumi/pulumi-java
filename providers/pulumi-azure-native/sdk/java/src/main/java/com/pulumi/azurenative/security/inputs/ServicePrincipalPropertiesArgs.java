// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.security.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Details of the service principal.
 * 
 */
public final class ServicePrincipalPropertiesArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServicePrincipalPropertiesArgs Empty = new ServicePrincipalPropertiesArgs();

    /**
     * Application ID of service principal.
     * 
     */
    @Import(name="applicationId")
    private @Nullable Output<String> applicationId;

    /**
     * @return Application ID of service principal.
     * 
     */
    public Optional<Output<String>> applicationId() {
        return Optional.ofNullable(this.applicationId);
    }

    /**
     * A secret string that the application uses to prove its identity, also can be referred to as application password (write only).
     * 
     */
    @Import(name="secret")
    private @Nullable Output<String> secret;

    /**
     * @return A secret string that the application uses to prove its identity, also can be referred to as application password (write only).
     * 
     */
    public Optional<Output<String>> secret() {
        return Optional.ofNullable(this.secret);
    }

    private ServicePrincipalPropertiesArgs() {}

    private ServicePrincipalPropertiesArgs(ServicePrincipalPropertiesArgs $) {
        this.applicationId = $.applicationId;
        this.secret = $.secret;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServicePrincipalPropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServicePrincipalPropertiesArgs $;

        public Builder() {
            $ = new ServicePrincipalPropertiesArgs();
        }

        public Builder(ServicePrincipalPropertiesArgs defaults) {
            $ = new ServicePrincipalPropertiesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param applicationId Application ID of service principal.
         * 
         * @return builder
         * 
         */
        public Builder applicationId(@Nullable Output<String> applicationId) {
            $.applicationId = applicationId;
            return this;
        }

        /**
         * @param applicationId Application ID of service principal.
         * 
         * @return builder
         * 
         */
        public Builder applicationId(String applicationId) {
            return applicationId(Output.of(applicationId));
        }

        /**
         * @param secret A secret string that the application uses to prove its identity, also can be referred to as application password (write only).
         * 
         * @return builder
         * 
         */
        public Builder secret(@Nullable Output<String> secret) {
            $.secret = secret;
            return this;
        }

        /**
         * @param secret A secret string that the application uses to prove its identity, also can be referred to as application password (write only).
         * 
         * @return builder
         * 
         */
        public Builder secret(String secret) {
            return secret(Output.of(secret));
        }

        public ServicePrincipalPropertiesArgs build() {
            return $;
        }
    }

}
