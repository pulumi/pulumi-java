// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.eventgrid.outputs;

import com.pulumi.azurenative.eventgrid.outputs.EventTypeInfoResponse;
import com.pulumi.azurenative.eventgrid.outputs.IdentityInfoResponse;
import com.pulumi.azurenative.eventgrid.outputs.SystemDataResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetPartnerTopicResult {
    /**
     * @return Activation state of the partner topic.
     * 
     */
    private final @Nullable String activationState;
    /**
     * @return Event Type information from the corresponding event channel.
     * 
     */
    private final @Nullable EventTypeInfoResponse eventTypeInfo;
    /**
     * @return Expiration time of the partner topic. If this timer expires while the partner topic is still never activated,
     * the partner topic and corresponding event channel are deleted.
     * 
     */
    private final @Nullable String expirationTimeIfNotActivatedUtc;
    /**
     * @return Fully qualified identifier of the resource.
     * 
     */
    private final String id;
    /**
     * @return Identity information for the Partner Topic resource.
     * 
     */
    private final @Nullable IdentityInfoResponse identity;
    /**
     * @return Location of the resource.
     * 
     */
    private final String location;
    /**
     * @return Context or helpful message that can be used during the approval process by the subscriber.
     * 
     */
    private final @Nullable String messageForActivation;
    /**
     * @return Name of the resource.
     * 
     */
    private final String name;
    /**
     * @return The immutableId of the corresponding partner registration.
     * 
     */
    private final @Nullable String partnerRegistrationImmutableId;
    /**
     * @return Friendly description about the topic. This can be set by the publisher/partner to show custom description for the customer partner topic.
     * This will be helpful to remove any ambiguity of the origin of creation of the partner topic for the customer.
     * 
     */
    private final @Nullable String partnerTopicFriendlyDescription;
    /**
     * @return Provisioning state of the partner topic.
     * 
     */
    private final String provisioningState;
    /**
     * @return Source associated with this partner topic. This represents a unique partner resource.
     * 
     */
    private final @Nullable String source;
    /**
     * @return The system metadata relating to Partner Topic resource.
     * 
     */
    private final SystemDataResponse systemData;
    /**
     * @return Tags of the resource.
     * 
     */
    private final @Nullable Map<String,String> tags;
    /**
     * @return Type of the resource.
     * 
     */
    private final String type;

    @CustomType.Constructor
    private GetPartnerTopicResult(
        @CustomType.Parameter("activationState") @Nullable String activationState,
        @CustomType.Parameter("eventTypeInfo") @Nullable EventTypeInfoResponse eventTypeInfo,
        @CustomType.Parameter("expirationTimeIfNotActivatedUtc") @Nullable String expirationTimeIfNotActivatedUtc,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("identity") @Nullable IdentityInfoResponse identity,
        @CustomType.Parameter("location") String location,
        @CustomType.Parameter("messageForActivation") @Nullable String messageForActivation,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("partnerRegistrationImmutableId") @Nullable String partnerRegistrationImmutableId,
        @CustomType.Parameter("partnerTopicFriendlyDescription") @Nullable String partnerTopicFriendlyDescription,
        @CustomType.Parameter("provisioningState") String provisioningState,
        @CustomType.Parameter("source") @Nullable String source,
        @CustomType.Parameter("systemData") SystemDataResponse systemData,
        @CustomType.Parameter("tags") @Nullable Map<String,String> tags,
        @CustomType.Parameter("type") String type) {
        this.activationState = activationState;
        this.eventTypeInfo = eventTypeInfo;
        this.expirationTimeIfNotActivatedUtc = expirationTimeIfNotActivatedUtc;
        this.id = id;
        this.identity = identity;
        this.location = location;
        this.messageForActivation = messageForActivation;
        this.name = name;
        this.partnerRegistrationImmutableId = partnerRegistrationImmutableId;
        this.partnerTopicFriendlyDescription = partnerTopicFriendlyDescription;
        this.provisioningState = provisioningState;
        this.source = source;
        this.systemData = systemData;
        this.tags = tags;
        this.type = type;
    }

    /**
     * @return Activation state of the partner topic.
     * 
     */
    public Optional<String> activationState() {
        return Optional.ofNullable(this.activationState);
    }
    /**
     * @return Event Type information from the corresponding event channel.
     * 
     */
    public Optional<EventTypeInfoResponse> eventTypeInfo() {
        return Optional.ofNullable(this.eventTypeInfo);
    }
    /**
     * @return Expiration time of the partner topic. If this timer expires while the partner topic is still never activated,
     * the partner topic and corresponding event channel are deleted.
     * 
     */
    public Optional<String> expirationTimeIfNotActivatedUtc() {
        return Optional.ofNullable(this.expirationTimeIfNotActivatedUtc);
    }
    /**
     * @return Fully qualified identifier of the resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Identity information for the Partner Topic resource.
     * 
     */
    public Optional<IdentityInfoResponse> identity() {
        return Optional.ofNullable(this.identity);
    }
    /**
     * @return Location of the resource.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return Context or helpful message that can be used during the approval process by the subscriber.
     * 
     */
    public Optional<String> messageForActivation() {
        return Optional.ofNullable(this.messageForActivation);
    }
    /**
     * @return Name of the resource.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The immutableId of the corresponding partner registration.
     * 
     */
    public Optional<String> partnerRegistrationImmutableId() {
        return Optional.ofNullable(this.partnerRegistrationImmutableId);
    }
    /**
     * @return Friendly description about the topic. This can be set by the publisher/partner to show custom description for the customer partner topic.
     * This will be helpful to remove any ambiguity of the origin of creation of the partner topic for the customer.
     * 
     */
    public Optional<String> partnerTopicFriendlyDescription() {
        return Optional.ofNullable(this.partnerTopicFriendlyDescription);
    }
    /**
     * @return Provisioning state of the partner topic.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return Source associated with this partner topic. This represents a unique partner resource.
     * 
     */
    public Optional<String> source() {
        return Optional.ofNullable(this.source);
    }
    /**
     * @return The system metadata relating to Partner Topic resource.
     * 
     */
    public SystemDataResponse systemData() {
        return this.systemData;
    }
    /**
     * @return Tags of the resource.
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return Type of the resource.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPartnerTopicResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String activationState;
        private @Nullable EventTypeInfoResponse eventTypeInfo;
        private @Nullable String expirationTimeIfNotActivatedUtc;
        private String id;
        private @Nullable IdentityInfoResponse identity;
        private String location;
        private @Nullable String messageForActivation;
        private String name;
        private @Nullable String partnerRegistrationImmutableId;
        private @Nullable String partnerTopicFriendlyDescription;
        private String provisioningState;
        private @Nullable String source;
        private SystemDataResponse systemData;
        private @Nullable Map<String,String> tags;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(GetPartnerTopicResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activationState = defaults.activationState;
    	      this.eventTypeInfo = defaults.eventTypeInfo;
    	      this.expirationTimeIfNotActivatedUtc = defaults.expirationTimeIfNotActivatedUtc;
    	      this.id = defaults.id;
    	      this.identity = defaults.identity;
    	      this.location = defaults.location;
    	      this.messageForActivation = defaults.messageForActivation;
    	      this.name = defaults.name;
    	      this.partnerRegistrationImmutableId = defaults.partnerRegistrationImmutableId;
    	      this.partnerTopicFriendlyDescription = defaults.partnerTopicFriendlyDescription;
    	      this.provisioningState = defaults.provisioningState;
    	      this.source = defaults.source;
    	      this.systemData = defaults.systemData;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
        }

        public Builder activationState(@Nullable String activationState) {
            this.activationState = activationState;
            return this;
        }
        public Builder eventTypeInfo(@Nullable EventTypeInfoResponse eventTypeInfo) {
            this.eventTypeInfo = eventTypeInfo;
            return this;
        }
        public Builder expirationTimeIfNotActivatedUtc(@Nullable String expirationTimeIfNotActivatedUtc) {
            this.expirationTimeIfNotActivatedUtc = expirationTimeIfNotActivatedUtc;
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder identity(@Nullable IdentityInfoResponse identity) {
            this.identity = identity;
            return this;
        }
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        public Builder messageForActivation(@Nullable String messageForActivation) {
            this.messageForActivation = messageForActivation;
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder partnerRegistrationImmutableId(@Nullable String partnerRegistrationImmutableId) {
            this.partnerRegistrationImmutableId = partnerRegistrationImmutableId;
            return this;
        }
        public Builder partnerTopicFriendlyDescription(@Nullable String partnerTopicFriendlyDescription) {
            this.partnerTopicFriendlyDescription = partnerTopicFriendlyDescription;
            return this;
        }
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        public Builder source(@Nullable String source) {
            this.source = source;
            return this;
        }
        public Builder systemData(SystemDataResponse systemData) {
            this.systemData = Objects.requireNonNull(systemData);
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }        public GetPartnerTopicResult build() {
            return new GetPartnerTopicResult(activationState, eventTypeInfo, expirationTimeIfNotActivatedUtc, id, identity, location, messageForActivation, name, partnerRegistrationImmutableId, partnerTopicFriendlyDescription, provisioningState, source, systemData, tags, type);
        }
    }
}
