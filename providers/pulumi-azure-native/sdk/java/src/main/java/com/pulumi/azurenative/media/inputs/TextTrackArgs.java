// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.media.inputs;

import com.pulumi.azurenative.media.enums.Visibility;
import com.pulumi.azurenative.media.inputs.HlsSettingsArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Represents a text track in an asset. A text track is usually used for sparse data related to the audio or video tracks.
 * 
 */
public final class TextTrackArgs extends com.pulumi.resources.ResourceArgs {

    public static final TextTrackArgs Empty = new TextTrackArgs();

    /**
     * The display name of the text track on a video player. In HLS, this maps to the NAME attribute of EXT-X-MEDIA.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return The display name of the text track on a video player. In HLS, this maps to the NAME attribute of EXT-X-MEDIA.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * The file name to the source file. This file is located in the storage container of the asset.
     * 
     */
    @Import(name="fileName")
    private @Nullable Output<String> fileName;

    /**
     * @return The file name to the source file. This file is located in the storage container of the asset.
     * 
     */
    public Optional<Output<String>> fileName() {
        return Optional.ofNullable(this.fileName);
    }

    /**
     * The HLS specific setting for the text track.
     * 
     */
    @Import(name="hlsSettings")
    private @Nullable Output<HlsSettingsArgs> hlsSettings;

    /**
     * @return The HLS specific setting for the text track.
     * 
     */
    public Optional<Output<HlsSettingsArgs>> hlsSettings() {
        return Optional.ofNullable(this.hlsSettings);
    }

    /**
     * The discriminator for derived types.
     * Expected value is &#39;#Microsoft.Media.TextTrack&#39;.
     * 
     */
    @Import(name="odataType", required=true)
    private Output<String> odataType;

    /**
     * @return The discriminator for derived types.
     * Expected value is &#39;#Microsoft.Media.TextTrack&#39;.
     * 
     */
    public Output<String> odataType() {
        return this.odataType;
    }

    /**
     * When PlayerVisibility is set to &#34;Visible&#34;, the text track will be present in the DASH manifest or HLS playlist when requested by a client. When the PlayerVisibility is set to &#34;Hidden&#34;, the text will not be available to the client. The default value is &#34;Visible&#34;.
     * 
     */
    @Import(name="playerVisibility")
    private @Nullable Output<Either<String,Visibility>> playerVisibility;

    /**
     * @return When PlayerVisibility is set to &#34;Visible&#34;, the text track will be present in the DASH manifest or HLS playlist when requested by a client. When the PlayerVisibility is set to &#34;Hidden&#34;, the text will not be available to the client. The default value is &#34;Visible&#34;.
     * 
     */
    public Optional<Output<Either<String,Visibility>>> playerVisibility() {
        return Optional.ofNullable(this.playerVisibility);
    }

    private TextTrackArgs() {}

    private TextTrackArgs(TextTrackArgs $) {
        this.displayName = $.displayName;
        this.fileName = $.fileName;
        this.hlsSettings = $.hlsSettings;
        this.odataType = $.odataType;
        this.playerVisibility = $.playerVisibility;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TextTrackArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TextTrackArgs $;

        public Builder() {
            $ = new TextTrackArgs();
        }

        public Builder(TextTrackArgs defaults) {
            $ = new TextTrackArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param displayName The display name of the text track on a video player. In HLS, this maps to the NAME attribute of EXT-X-MEDIA.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The display name of the text track on a video player. In HLS, this maps to the NAME attribute of EXT-X-MEDIA.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param fileName The file name to the source file. This file is located in the storage container of the asset.
         * 
         * @return builder
         * 
         */
        public Builder fileName(@Nullable Output<String> fileName) {
            $.fileName = fileName;
            return this;
        }

        /**
         * @param fileName The file name to the source file. This file is located in the storage container of the asset.
         * 
         * @return builder
         * 
         */
        public Builder fileName(String fileName) {
            return fileName(Output.of(fileName));
        }

        /**
         * @param hlsSettings The HLS specific setting for the text track.
         * 
         * @return builder
         * 
         */
        public Builder hlsSettings(@Nullable Output<HlsSettingsArgs> hlsSettings) {
            $.hlsSettings = hlsSettings;
            return this;
        }

        /**
         * @param hlsSettings The HLS specific setting for the text track.
         * 
         * @return builder
         * 
         */
        public Builder hlsSettings(HlsSettingsArgs hlsSettings) {
            return hlsSettings(Output.of(hlsSettings));
        }

        /**
         * @param odataType The discriminator for derived types.
         * Expected value is &#39;#Microsoft.Media.TextTrack&#39;.
         * 
         * @return builder
         * 
         */
        public Builder odataType(Output<String> odataType) {
            $.odataType = odataType;
            return this;
        }

        /**
         * @param odataType The discriminator for derived types.
         * Expected value is &#39;#Microsoft.Media.TextTrack&#39;.
         * 
         * @return builder
         * 
         */
        public Builder odataType(String odataType) {
            return odataType(Output.of(odataType));
        }

        /**
         * @param playerVisibility When PlayerVisibility is set to &#34;Visible&#34;, the text track will be present in the DASH manifest or HLS playlist when requested by a client. When the PlayerVisibility is set to &#34;Hidden&#34;, the text will not be available to the client. The default value is &#34;Visible&#34;.
         * 
         * @return builder
         * 
         */
        public Builder playerVisibility(@Nullable Output<Either<String,Visibility>> playerVisibility) {
            $.playerVisibility = playerVisibility;
            return this;
        }

        /**
         * @param playerVisibility When PlayerVisibility is set to &#34;Visible&#34;, the text track will be present in the DASH manifest or HLS playlist when requested by a client. When the PlayerVisibility is set to &#34;Hidden&#34;, the text will not be available to the client. The default value is &#34;Visible&#34;.
         * 
         * @return builder
         * 
         */
        public Builder playerVisibility(Either<String,Visibility> playerVisibility) {
            return playerVisibility(Output.of(playerVisibility));
        }

        /**
         * @param playerVisibility When PlayerVisibility is set to &#34;Visible&#34;, the text track will be present in the DASH manifest or HLS playlist when requested by a client. When the PlayerVisibility is set to &#34;Hidden&#34;, the text will not be available to the client. The default value is &#34;Visible&#34;.
         * 
         * @return builder
         * 
         */
        public Builder playerVisibility(String playerVisibility) {
            return playerVisibility(Either.ofLeft(playerVisibility));
        }

        /**
         * @param playerVisibility When PlayerVisibility is set to &#34;Visible&#34;, the text track will be present in the DASH manifest or HLS playlist when requested by a client. When the PlayerVisibility is set to &#34;Hidden&#34;, the text will not be available to the client. The default value is &#34;Visible&#34;.
         * 
         * @return builder
         * 
         */
        public Builder playerVisibility(Visibility playerVisibility) {
            return playerVisibility(Either.ofRight(playerVisibility));
        }

        public TextTrackArgs build() {
            $.odataType = Codegen.stringProp("odataType").output().arg($.odataType).require();
            return $;
        }
    }

}
