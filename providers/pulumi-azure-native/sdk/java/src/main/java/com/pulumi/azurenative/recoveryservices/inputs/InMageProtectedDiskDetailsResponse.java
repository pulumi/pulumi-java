// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.recoveryservices.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * InMage protected disk details.
 * 
 */
public final class InMageProtectedDiskDetailsResponse extends com.pulumi.resources.InvokeArgs {

    public static final InMageProtectedDiskDetailsResponse Empty = new InMageProtectedDiskDetailsResponse();

    /**
     * The disk capacity in bytes.
     * 
     */
    @Import(name="diskCapacityInBytes")
    private @Nullable Double diskCapacityInBytes;

    /**
     * @return The disk capacity in bytes.
     * 
     */
    public Optional<Double> diskCapacityInBytes() {
        return Optional.ofNullable(this.diskCapacityInBytes);
    }

    /**
     * The disk id.
     * 
     */
    @Import(name="diskId")
    private @Nullable String diskId;

    /**
     * @return The disk id.
     * 
     */
    public Optional<String> diskId() {
        return Optional.ofNullable(this.diskId);
    }

    /**
     * The disk name.
     * 
     */
    @Import(name="diskName")
    private @Nullable String diskName;

    /**
     * @return The disk name.
     * 
     */
    public Optional<String> diskName() {
        return Optional.ofNullable(this.diskName);
    }

    /**
     * A value indicating whether disk is resized.
     * 
     */
    @Import(name="diskResized")
    private @Nullable String diskResized;

    /**
     * @return A value indicating whether disk is resized.
     * 
     */
    public Optional<String> diskResized() {
        return Optional.ofNullable(this.diskResized);
    }

    /**
     * The file system capacity in bytes.
     * 
     */
    @Import(name="fileSystemCapacityInBytes")
    private @Nullable Double fileSystemCapacityInBytes;

    /**
     * @return The file system capacity in bytes.
     * 
     */
    public Optional<Double> fileSystemCapacityInBytes() {
        return Optional.ofNullable(this.fileSystemCapacityInBytes);
    }

    /**
     * The health error code for the disk.
     * 
     */
    @Import(name="healthErrorCode")
    private @Nullable String healthErrorCode;

    /**
     * @return The health error code for the disk.
     * 
     */
    public Optional<String> healthErrorCode() {
        return Optional.ofNullable(this.healthErrorCode);
    }

    /**
     * The last RPO calculated time.
     * 
     */
    @Import(name="lastRpoCalculatedTime")
    private @Nullable String lastRpoCalculatedTime;

    /**
     * @return The last RPO calculated time.
     * 
     */
    public Optional<String> lastRpoCalculatedTime() {
        return Optional.ofNullable(this.lastRpoCalculatedTime);
    }

    /**
     * The protection stage.
     * 
     */
    @Import(name="protectionStage")
    private @Nullable String protectionStage;

    /**
     * @return The protection stage.
     * 
     */
    public Optional<String> protectionStage() {
        return Optional.ofNullable(this.protectionStage);
    }

    /**
     * The PS data transit in MB.
     * 
     */
    @Import(name="psDataInMB")
    private @Nullable Double psDataInMB;

    /**
     * @return The PS data transit in MB.
     * 
     */
    public Optional<Double> psDataInMB() {
        return Optional.ofNullable(this.psDataInMB);
    }

    /**
     * The resync duration in seconds.
     * 
     */
    @Import(name="resyncDurationInSeconds")
    private @Nullable Double resyncDurationInSeconds;

    /**
     * @return The resync duration in seconds.
     * 
     */
    public Optional<Double> resyncDurationInSeconds() {
        return Optional.ofNullable(this.resyncDurationInSeconds);
    }

    /**
     * The resync progress percentage.
     * 
     */
    @Import(name="resyncProgressPercentage")
    private @Nullable Integer resyncProgressPercentage;

    /**
     * @return The resync progress percentage.
     * 
     */
    public Optional<Integer> resyncProgressPercentage() {
        return Optional.ofNullable(this.resyncProgressPercentage);
    }

    /**
     * A value indicating whether resync is required for this disk.
     * 
     */
    @Import(name="resyncRequired")
    private @Nullable String resyncRequired;

    /**
     * @return A value indicating whether resync is required for this disk.
     * 
     */
    public Optional<String> resyncRequired() {
        return Optional.ofNullable(this.resyncRequired);
    }

    /**
     * The RPO in seconds.
     * 
     */
    @Import(name="rpoInSeconds")
    private @Nullable Double rpoInSeconds;

    /**
     * @return The RPO in seconds.
     * 
     */
    public Optional<Double> rpoInSeconds() {
        return Optional.ofNullable(this.rpoInSeconds);
    }

    /**
     * The source data transit in MB.
     * 
     */
    @Import(name="sourceDataInMB")
    private @Nullable Double sourceDataInMB;

    /**
     * @return The source data transit in MB.
     * 
     */
    public Optional<Double> sourceDataInMB() {
        return Optional.ofNullable(this.sourceDataInMB);
    }

    /**
     * The target data transit in MB.
     * 
     */
    @Import(name="targetDataInMB")
    private @Nullable Double targetDataInMB;

    /**
     * @return The target data transit in MB.
     * 
     */
    public Optional<Double> targetDataInMB() {
        return Optional.ofNullable(this.targetDataInMB);
    }

    private InMageProtectedDiskDetailsResponse() {}

    private InMageProtectedDiskDetailsResponse(InMageProtectedDiskDetailsResponse $) {
        this.diskCapacityInBytes = $.diskCapacityInBytes;
        this.diskId = $.diskId;
        this.diskName = $.diskName;
        this.diskResized = $.diskResized;
        this.fileSystemCapacityInBytes = $.fileSystemCapacityInBytes;
        this.healthErrorCode = $.healthErrorCode;
        this.lastRpoCalculatedTime = $.lastRpoCalculatedTime;
        this.protectionStage = $.protectionStage;
        this.psDataInMB = $.psDataInMB;
        this.resyncDurationInSeconds = $.resyncDurationInSeconds;
        this.resyncProgressPercentage = $.resyncProgressPercentage;
        this.resyncRequired = $.resyncRequired;
        this.rpoInSeconds = $.rpoInSeconds;
        this.sourceDataInMB = $.sourceDataInMB;
        this.targetDataInMB = $.targetDataInMB;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InMageProtectedDiskDetailsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InMageProtectedDiskDetailsResponse $;

        public Builder() {
            $ = new InMageProtectedDiskDetailsResponse();
        }

        public Builder(InMageProtectedDiskDetailsResponse defaults) {
            $ = new InMageProtectedDiskDetailsResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param diskCapacityInBytes The disk capacity in bytes.
         * 
         * @return builder
         * 
         */
        public Builder diskCapacityInBytes(@Nullable Double diskCapacityInBytes) {
            $.diskCapacityInBytes = diskCapacityInBytes;
            return this;
        }

        /**
         * @param diskId The disk id.
         * 
         * @return builder
         * 
         */
        public Builder diskId(@Nullable String diskId) {
            $.diskId = diskId;
            return this;
        }

        /**
         * @param diskName The disk name.
         * 
         * @return builder
         * 
         */
        public Builder diskName(@Nullable String diskName) {
            $.diskName = diskName;
            return this;
        }

        /**
         * @param diskResized A value indicating whether disk is resized.
         * 
         * @return builder
         * 
         */
        public Builder diskResized(@Nullable String diskResized) {
            $.diskResized = diskResized;
            return this;
        }

        /**
         * @param fileSystemCapacityInBytes The file system capacity in bytes.
         * 
         * @return builder
         * 
         */
        public Builder fileSystemCapacityInBytes(@Nullable Double fileSystemCapacityInBytes) {
            $.fileSystemCapacityInBytes = fileSystemCapacityInBytes;
            return this;
        }

        /**
         * @param healthErrorCode The health error code for the disk.
         * 
         * @return builder
         * 
         */
        public Builder healthErrorCode(@Nullable String healthErrorCode) {
            $.healthErrorCode = healthErrorCode;
            return this;
        }

        /**
         * @param lastRpoCalculatedTime The last RPO calculated time.
         * 
         * @return builder
         * 
         */
        public Builder lastRpoCalculatedTime(@Nullable String lastRpoCalculatedTime) {
            $.lastRpoCalculatedTime = lastRpoCalculatedTime;
            return this;
        }

        /**
         * @param protectionStage The protection stage.
         * 
         * @return builder
         * 
         */
        public Builder protectionStage(@Nullable String protectionStage) {
            $.protectionStage = protectionStage;
            return this;
        }

        /**
         * @param psDataInMB The PS data transit in MB.
         * 
         * @return builder
         * 
         */
        public Builder psDataInMB(@Nullable Double psDataInMB) {
            $.psDataInMB = psDataInMB;
            return this;
        }

        /**
         * @param resyncDurationInSeconds The resync duration in seconds.
         * 
         * @return builder
         * 
         */
        public Builder resyncDurationInSeconds(@Nullable Double resyncDurationInSeconds) {
            $.resyncDurationInSeconds = resyncDurationInSeconds;
            return this;
        }

        /**
         * @param resyncProgressPercentage The resync progress percentage.
         * 
         * @return builder
         * 
         */
        public Builder resyncProgressPercentage(@Nullable Integer resyncProgressPercentage) {
            $.resyncProgressPercentage = resyncProgressPercentage;
            return this;
        }

        /**
         * @param resyncRequired A value indicating whether resync is required for this disk.
         * 
         * @return builder
         * 
         */
        public Builder resyncRequired(@Nullable String resyncRequired) {
            $.resyncRequired = resyncRequired;
            return this;
        }

        /**
         * @param rpoInSeconds The RPO in seconds.
         * 
         * @return builder
         * 
         */
        public Builder rpoInSeconds(@Nullable Double rpoInSeconds) {
            $.rpoInSeconds = rpoInSeconds;
            return this;
        }

        /**
         * @param sourceDataInMB The source data transit in MB.
         * 
         * @return builder
         * 
         */
        public Builder sourceDataInMB(@Nullable Double sourceDataInMB) {
            $.sourceDataInMB = sourceDataInMB;
            return this;
        }

        /**
         * @param targetDataInMB The target data transit in MB.
         * 
         * @return builder
         * 
         */
        public Builder targetDataInMB(@Nullable Double targetDataInMB) {
            $.targetDataInMB = targetDataInMB;
            return this;
        }

        public InMageProtectedDiskDetailsResponse build() {
            return $;
        }
    }

}
