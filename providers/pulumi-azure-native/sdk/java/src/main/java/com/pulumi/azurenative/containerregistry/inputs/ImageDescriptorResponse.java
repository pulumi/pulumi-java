// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.containerregistry.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Properties for a registry image.
 * 
 */
public final class ImageDescriptorResponse extends com.pulumi.resources.InvokeArgs {

    public static final ImageDescriptorResponse Empty = new ImageDescriptorResponse();

    /**
     * The sha256-based digest of the image manifest.
     * 
     */
    @Import(name="digest")
    private @Nullable String digest;

    public Optional<String> digest() {
        return Optional.ofNullable(this.digest);
    }

    /**
     * The registry login server.
     * 
     */
    @Import(name="registry")
    private @Nullable String registry;

    public Optional<String> registry() {
        return Optional.ofNullable(this.registry);
    }

    /**
     * The repository name.
     * 
     */
    @Import(name="repository")
    private @Nullable String repository;

    public Optional<String> repository() {
        return Optional.ofNullable(this.repository);
    }

    /**
     * The tag name.
     * 
     */
    @Import(name="tag")
    private @Nullable String tag;

    public Optional<String> tag() {
        return Optional.ofNullable(this.tag);
    }

    private ImageDescriptorResponse() {}

    private ImageDescriptorResponse(ImageDescriptorResponse $) {
        this.digest = $.digest;
        this.registry = $.registry;
        this.repository = $.repository;
        this.tag = $.tag;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ImageDescriptorResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ImageDescriptorResponse $;

        public Builder() {
            $ = new ImageDescriptorResponse();
        }

        public Builder(ImageDescriptorResponse defaults) {
            $ = new ImageDescriptorResponse(Objects.requireNonNull(defaults));
        }

        public Builder digest(@Nullable String digest) {
            $.digest = digest;
            return this;
        }

        public Builder registry(@Nullable String registry) {
            $.registry = registry;
            return this;
        }

        public Builder repository(@Nullable String repository) {
            $.repository = repository;
            return this;
        }

        public Builder tag(@Nullable String tag) {
            $.tag = tag;
            return this;
        }

        public ImageDescriptorResponse build() {
            return $;
        }
    }

}
