// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.connectedvmwarevsphere.inputs;

import com.pulumi.azurenative.connectedvmwarevsphere.inputs.NicIPSettingsResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Network Interface model
 * 
 */
public final class NetworkInterfaceResponse extends com.pulumi.resources.InvokeArgs {

    public static final NetworkInterfaceResponse Empty = new NetworkInterfaceResponse();

    /**
     * Gets or sets the device key value.
     * 
     */
    @Import(name="deviceKey")
    private @Nullable Integer deviceKey;

    public Optional<Integer> deviceKey() {
        return Optional.ofNullable(this.deviceKey);
    }

    /**
     * Gets or sets the nic ip addresses.
     * 
     */
    @Import(name="ipAddresses", required=true)
    private List<String> ipAddresses;

    public List<String> ipAddresses() {
        return this.ipAddresses;
    }

    /**
     * Gets or sets the ipsettings.
     * 
     */
    @Import(name="ipSettings")
    private @Nullable NicIPSettingsResponse ipSettings;

    public Optional<NicIPSettingsResponse> ipSettings() {
        return Optional.ofNullable(this.ipSettings);
    }

    /**
     * Gets or sets the label of the virtual network in vCenter that the nic is connected to.
     * 
     */
    @Import(name="label", required=true)
    private String label;

    public String label() {
        return this.label;
    }

    /**
     * Gets or sets the NIC MAC address.
     * 
     */
    @Import(name="macAddress", required=true)
    private String macAddress;

    public String macAddress() {
        return this.macAddress;
    }

    /**
     * Gets or sets the name of the network interface.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Gets or sets the ARM Id of the network resource to connect the virtual machine.
     * 
     */
    @Import(name="networkId")
    private @Nullable String networkId;

    public Optional<String> networkId() {
        return Optional.ofNullable(this.networkId);
    }

    /**
     * Gets or sets the name of the virtual network in vCenter that the nic is connected to.
     * 
     */
    @Import(name="networkMoName", required=true)
    private String networkMoName;

    public String networkMoName() {
        return this.networkMoName;
    }

    /**
     * Gets or sets the vCenter MoRef (Managed Object Reference) ID of the virtual network
     * that the nic is connected to.
     * 
     */
    @Import(name="networkMoRefId", required=true)
    private String networkMoRefId;

    public String networkMoRefId() {
        return this.networkMoRefId;
    }

    /**
     * NIC type
     * 
     */
    @Import(name="nicType")
    private @Nullable String nicType;

    public Optional<String> nicType() {
        return Optional.ofNullable(this.nicType);
    }

    /**
     * Gets or sets the power on boot.
     * 
     */
    @Import(name="powerOnBoot")
    private @Nullable String powerOnBoot;

    public Optional<String> powerOnBoot() {
        return Optional.ofNullable(this.powerOnBoot);
    }

    private NetworkInterfaceResponse() {}

    private NetworkInterfaceResponse(NetworkInterfaceResponse $) {
        this.deviceKey = $.deviceKey;
        this.ipAddresses = $.ipAddresses;
        this.ipSettings = $.ipSettings;
        this.label = $.label;
        this.macAddress = $.macAddress;
        this.name = $.name;
        this.networkId = $.networkId;
        this.networkMoName = $.networkMoName;
        this.networkMoRefId = $.networkMoRefId;
        this.nicType = $.nicType;
        this.powerOnBoot = $.powerOnBoot;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkInterfaceResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkInterfaceResponse $;

        public Builder() {
            $ = new NetworkInterfaceResponse();
        }

        public Builder(NetworkInterfaceResponse defaults) {
            $ = new NetworkInterfaceResponse(Objects.requireNonNull(defaults));
        }

        public Builder deviceKey(@Nullable Integer deviceKey) {
            $.deviceKey = deviceKey;
            return this;
        }

        public Builder ipAddresses(List<String> ipAddresses) {
            $.ipAddresses = ipAddresses;
            return this;
        }

        public Builder ipAddresses(String... ipAddresses) {
            return ipAddresses(List.of(ipAddresses));
        }

        public Builder ipSettings(@Nullable NicIPSettingsResponse ipSettings) {
            $.ipSettings = ipSettings;
            return this;
        }

        public Builder label(String label) {
            $.label = label;
            return this;
        }

        public Builder macAddress(String macAddress) {
            $.macAddress = macAddress;
            return this;
        }

        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        public Builder networkId(@Nullable String networkId) {
            $.networkId = networkId;
            return this;
        }

        public Builder networkMoName(String networkMoName) {
            $.networkMoName = networkMoName;
            return this;
        }

        public Builder networkMoRefId(String networkMoRefId) {
            $.networkMoRefId = networkMoRefId;
            return this;
        }

        public Builder nicType(@Nullable String nicType) {
            $.nicType = nicType;
            return this;
        }

        public Builder powerOnBoot(@Nullable String powerOnBoot) {
            $.powerOnBoot = powerOnBoot;
            return this;
        }

        public NetworkInterfaceResponse build() {
            $.ipAddresses = Objects.requireNonNull($.ipAddresses, "expected parameter 'ipAddresses' to be non-null");
            $.label = Objects.requireNonNull($.label, "expected parameter 'label' to be non-null");
            $.macAddress = Objects.requireNonNull($.macAddress, "expected parameter 'macAddress' to be non-null");
            $.networkMoName = Objects.requireNonNull($.networkMoName, "expected parameter 'networkMoName' to be non-null");
            $.networkMoRefId = Objects.requireNonNull($.networkMoRefId, "expected parameter 'networkMoRefId' to be non-null");
            return $;
        }
    }

}
