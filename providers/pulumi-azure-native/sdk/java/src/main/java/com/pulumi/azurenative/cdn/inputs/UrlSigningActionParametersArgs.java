// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.cdn.inputs;

import com.pulumi.azurenative.cdn.enums.Algorithm;
import com.pulumi.azurenative.cdn.inputs.UrlSigningParamIdentifierArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Defines the parameters for the Url Signing action.
 * 
 */
public final class UrlSigningActionParametersArgs extends com.pulumi.resources.ResourceArgs {

    public static final UrlSigningActionParametersArgs Empty = new UrlSigningActionParametersArgs();

    /**
     * Algorithm to use for URL signing
     * 
     */
    @Import(name="algorithm")
    private @Nullable Output<Either<String,Algorithm>> algorithm;

    /**
     * @return Algorithm to use for URL signing
     * 
     */
    public Optional<Output<Either<String,Algorithm>>> algorithm() {
        return Optional.ofNullable(this.algorithm);
    }

    @Import(name="odataType", required=true)
    private Output<String> odataType;

    public Output<String> odataType() {
        return this.odataType;
    }

    /**
     * Defines which query string parameters in the url to be considered for expires, key id etc.
     * 
     */
    @Import(name="parameterNameOverride")
    private @Nullable Output<List<UrlSigningParamIdentifierArgs>> parameterNameOverride;

    /**
     * @return Defines which query string parameters in the url to be considered for expires, key id etc.
     * 
     */
    public Optional<Output<List<UrlSigningParamIdentifierArgs>>> parameterNameOverride() {
        return Optional.ofNullable(this.parameterNameOverride);
    }

    private UrlSigningActionParametersArgs() {}

    private UrlSigningActionParametersArgs(UrlSigningActionParametersArgs $) {
        this.algorithm = $.algorithm;
        this.odataType = $.odataType;
        this.parameterNameOverride = $.parameterNameOverride;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UrlSigningActionParametersArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UrlSigningActionParametersArgs $;

        public Builder() {
            $ = new UrlSigningActionParametersArgs();
        }

        public Builder(UrlSigningActionParametersArgs defaults) {
            $ = new UrlSigningActionParametersArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param algorithm Algorithm to use for URL signing
         * 
         * @return builder
         * 
         */
        public Builder algorithm(@Nullable Output<Either<String,Algorithm>> algorithm) {
            $.algorithm = algorithm;
            return this;
        }

        /**
         * @param algorithm Algorithm to use for URL signing
         * 
         * @return builder
         * 
         */
        public Builder algorithm(Either<String,Algorithm> algorithm) {
            return algorithm(Output.of(algorithm));
        }

        /**
         * @param algorithm Algorithm to use for URL signing
         * 
         * @return builder
         * 
         */
        public Builder algorithm(String algorithm) {
            return algorithm(Either.ofLeft(algorithm));
        }

        /**
         * @param algorithm Algorithm to use for URL signing
         * 
         * @return builder
         * 
         */
        public Builder algorithm(Algorithm algorithm) {
            return algorithm(Either.ofRight(algorithm));
        }

        public Builder odataType(Output<String> odataType) {
            $.odataType = odataType;
            return this;
        }

        public Builder odataType(String odataType) {
            return odataType(Output.of(odataType));
        }

        /**
         * @param parameterNameOverride Defines which query string parameters in the url to be considered for expires, key id etc.
         * 
         * @return builder
         * 
         */
        public Builder parameterNameOverride(@Nullable Output<List<UrlSigningParamIdentifierArgs>> parameterNameOverride) {
            $.parameterNameOverride = parameterNameOverride;
            return this;
        }

        /**
         * @param parameterNameOverride Defines which query string parameters in the url to be considered for expires, key id etc.
         * 
         * @return builder
         * 
         */
        public Builder parameterNameOverride(List<UrlSigningParamIdentifierArgs> parameterNameOverride) {
            return parameterNameOverride(Output.of(parameterNameOverride));
        }

        /**
         * @param parameterNameOverride Defines which query string parameters in the url to be considered for expires, key id etc.
         * 
         * @return builder
         * 
         */
        public Builder parameterNameOverride(UrlSigningParamIdentifierArgs... parameterNameOverride) {
            return parameterNameOverride(List.of(parameterNameOverride));
        }

        public UrlSigningActionParametersArgs build() {
            $.odataType = Objects.requireNonNull($.odataType, "expected parameter 'odataType' to be non-null");
            return $;
        }
    }

}
