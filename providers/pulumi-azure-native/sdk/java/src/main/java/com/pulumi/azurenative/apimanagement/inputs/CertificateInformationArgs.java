// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.apimanagement.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * SSL certificate information.
 * 
 */
public final class CertificateInformationArgs extends com.pulumi.resources.ResourceArgs {

    public static final CertificateInformationArgs Empty = new CertificateInformationArgs();

    /**
     * Expiration date of the certificate. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
     * 
     */
    @Import(name="expiry", required=true)
    private Output<String> expiry;

    /**
     * @return Expiration date of the certificate. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
     * 
     */
    public Output<String> expiry() {
        return this.expiry;
    }

    /**
     * Subject of the certificate.
     * 
     */
    @Import(name="subject", required=true)
    private Output<String> subject;

    /**
     * @return Subject of the certificate.
     * 
     */
    public Output<String> subject() {
        return this.subject;
    }

    /**
     * Thumbprint of the certificate.
     * 
     */
    @Import(name="thumbprint", required=true)
    private Output<String> thumbprint;

    /**
     * @return Thumbprint of the certificate.
     * 
     */
    public Output<String> thumbprint() {
        return this.thumbprint;
    }

    private CertificateInformationArgs() {}

    private CertificateInformationArgs(CertificateInformationArgs $) {
        this.expiry = $.expiry;
        this.subject = $.subject;
        this.thumbprint = $.thumbprint;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CertificateInformationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CertificateInformationArgs $;

        public Builder() {
            $ = new CertificateInformationArgs();
        }

        public Builder(CertificateInformationArgs defaults) {
            $ = new CertificateInformationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param expiry Expiration date of the certificate. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
         * 
         * @return builder
         * 
         */
        public Builder expiry(Output<String> expiry) {
            $.expiry = expiry;
            return this;
        }

        /**
         * @param expiry Expiration date of the certificate. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
         * 
         * @return builder
         * 
         */
        public Builder expiry(String expiry) {
            return expiry(Output.of(expiry));
        }

        /**
         * @param subject Subject of the certificate.
         * 
         * @return builder
         * 
         */
        public Builder subject(Output<String> subject) {
            $.subject = subject;
            return this;
        }

        /**
         * @param subject Subject of the certificate.
         * 
         * @return builder
         * 
         */
        public Builder subject(String subject) {
            return subject(Output.of(subject));
        }

        /**
         * @param thumbprint Thumbprint of the certificate.
         * 
         * @return builder
         * 
         */
        public Builder thumbprint(Output<String> thumbprint) {
            $.thumbprint = thumbprint;
            return this;
        }

        /**
         * @param thumbprint Thumbprint of the certificate.
         * 
         * @return builder
         * 
         */
        public Builder thumbprint(String thumbprint) {
            return thumbprint(Output.of(thumbprint));
        }

        public CertificateInformationArgs build() {
            $.expiry = Objects.requireNonNull($.expiry, "expected parameter 'expiry' to be non-null");
            $.subject = Objects.requireNonNull($.subject, "expected parameter 'subject' to be non-null");
            $.thumbprint = Objects.requireNonNull($.thumbprint, "expected parameter 'thumbprint' to be non-null");
            return $;
        }
    }

}
