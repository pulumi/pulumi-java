// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.containerregistry.inputs;

import com.pulumi.azurenative.containerregistry.enums.SecretObjectType;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Describes the properties of a secret object value.
 * 
 */
public final class SecretObjectArgs extends com.pulumi.resources.ResourceArgs {

    public static final SecretObjectArgs Empty = new SecretObjectArgs();

    /**
     * The type of the secret object which determines how the value of the secret object has to be
     * interpreted.
     * 
     */
    @Import(name="type")
    private @Nullable Output<Either<String,SecretObjectType>> type;

    /**
     * @return The type of the secret object which determines how the value of the secret object has to be
     * interpreted.
     * 
     */
    public Optional<Output<Either<String,SecretObjectType>>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * The value of the secret. The format of this value will be determined
     * based on the type of the secret object. If the type is Opaque, the value will be
     * used as is without any modification.
     * 
     */
    @Import(name="value")
    private @Nullable Output<String> value;

    /**
     * @return The value of the secret. The format of this value will be determined
     * based on the type of the secret object. If the type is Opaque, the value will be
     * used as is without any modification.
     * 
     */
    public Optional<Output<String>> value() {
        return Optional.ofNullable(this.value);
    }

    private SecretObjectArgs() {}

    private SecretObjectArgs(SecretObjectArgs $) {
        this.type = $.type;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecretObjectArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecretObjectArgs $;

        public Builder() {
            $ = new SecretObjectArgs();
        }

        public Builder(SecretObjectArgs defaults) {
            $ = new SecretObjectArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param type The type of the secret object which determines how the value of the secret object has to be
         * interpreted.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<Either<String,SecretObjectType>> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of the secret object which determines how the value of the secret object has to be
         * interpreted.
         * 
         * @return builder
         * 
         */
        public Builder type(Either<String,SecretObjectType> type) {
            return type(Output.of(type));
        }

        /**
         * @param type The type of the secret object which determines how the value of the secret object has to be
         * interpreted.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Either.ofLeft(type));
        }

        /**
         * @param type The type of the secret object which determines how the value of the secret object has to be
         * interpreted.
         * 
         * @return builder
         * 
         */
        public Builder type(SecretObjectType type) {
            return type(Either.ofRight(type));
        }

        /**
         * @param value The value of the secret. The format of this value will be determined
         * based on the type of the secret object. If the type is Opaque, the value will be
         * used as is without any modification.
         * 
         * @return builder
         * 
         */
        public Builder value(@Nullable Output<String> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value The value of the secret. The format of this value will be determined
         * based on the type of the secret object. If the type is Opaque, the value will be
         * used as is without any modification.
         * 
         * @return builder
         * 
         */
        public Builder value(String value) {
            return value(Output.of(value));
        }

        public SecretObjectArgs build() {
            return $;
        }
    }

}
