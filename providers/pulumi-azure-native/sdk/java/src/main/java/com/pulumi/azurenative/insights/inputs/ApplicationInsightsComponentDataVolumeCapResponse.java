// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.insights.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * An Application Insights component daily data volume cap
 * 
 */
public final class ApplicationInsightsComponentDataVolumeCapResponse extends com.pulumi.resources.InvokeArgs {

    public static final ApplicationInsightsComponentDataVolumeCapResponse Empty = new ApplicationInsightsComponentDataVolumeCapResponse();

    /**
     * Daily data volume cap in GB.
     * 
     */
    @Import(name="cap")
    private @Nullable Double cap;

    public Optional<Double> cap() {
        return Optional.ofNullable(this.cap);
    }

    /**
     * Maximum daily data volume cap that the user can set for this component.
     * 
     */
    @Import(name="maxHistoryCap", required=true)
    private Double maxHistoryCap;

    public Double maxHistoryCap() {
        return this.maxHistoryCap;
    }

    /**
     * Daily data volume cap UTC reset hour.
     * 
     */
    @Import(name="resetTime", required=true)
    private Integer resetTime;

    public Integer resetTime() {
        return this.resetTime;
    }

    /**
     * Do not send a notification email when the daily data volume cap is met.
     * 
     */
    @Import(name="stopSendNotificationWhenHitCap")
    private @Nullable Boolean stopSendNotificationWhenHitCap;

    public Optional<Boolean> stopSendNotificationWhenHitCap() {
        return Optional.ofNullable(this.stopSendNotificationWhenHitCap);
    }

    /**
     * Reserved, not used for now.
     * 
     */
    @Import(name="stopSendNotificationWhenHitThreshold")
    private @Nullable Boolean stopSendNotificationWhenHitThreshold;

    public Optional<Boolean> stopSendNotificationWhenHitThreshold() {
        return Optional.ofNullable(this.stopSendNotificationWhenHitThreshold);
    }

    /**
     * Reserved, not used for now.
     * 
     */
    @Import(name="warningThreshold")
    private @Nullable Integer warningThreshold;

    public Optional<Integer> warningThreshold() {
        return Optional.ofNullable(this.warningThreshold);
    }

    private ApplicationInsightsComponentDataVolumeCapResponse() {}

    private ApplicationInsightsComponentDataVolumeCapResponse(ApplicationInsightsComponentDataVolumeCapResponse $) {
        this.cap = $.cap;
        this.maxHistoryCap = $.maxHistoryCap;
        this.resetTime = $.resetTime;
        this.stopSendNotificationWhenHitCap = $.stopSendNotificationWhenHitCap;
        this.stopSendNotificationWhenHitThreshold = $.stopSendNotificationWhenHitThreshold;
        this.warningThreshold = $.warningThreshold;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplicationInsightsComponentDataVolumeCapResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplicationInsightsComponentDataVolumeCapResponse $;

        public Builder() {
            $ = new ApplicationInsightsComponentDataVolumeCapResponse();
        }

        public Builder(ApplicationInsightsComponentDataVolumeCapResponse defaults) {
            $ = new ApplicationInsightsComponentDataVolumeCapResponse(Objects.requireNonNull(defaults));
        }

        public Builder cap(@Nullable Double cap) {
            $.cap = cap;
            return this;
        }

        public Builder maxHistoryCap(Double maxHistoryCap) {
            $.maxHistoryCap = maxHistoryCap;
            return this;
        }

        public Builder resetTime(Integer resetTime) {
            $.resetTime = resetTime;
            return this;
        }

        public Builder stopSendNotificationWhenHitCap(@Nullable Boolean stopSendNotificationWhenHitCap) {
            $.stopSendNotificationWhenHitCap = stopSendNotificationWhenHitCap;
            return this;
        }

        public Builder stopSendNotificationWhenHitThreshold(@Nullable Boolean stopSendNotificationWhenHitThreshold) {
            $.stopSendNotificationWhenHitThreshold = stopSendNotificationWhenHitThreshold;
            return this;
        }

        public Builder warningThreshold(@Nullable Integer warningThreshold) {
            $.warningThreshold = warningThreshold;
            return this;
        }

        public ApplicationInsightsComponentDataVolumeCapResponse build() {
            $.maxHistoryCap = Objects.requireNonNull($.maxHistoryCap, "expected parameter 'maxHistoryCap' to be non-null");
            $.resetTime = Objects.requireNonNull($.resetTime, "expected parameter 'resetTime' to be non-null");
            return $;
        }
    }

}
