// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.extendedlocation;

import com.pulumi.azurenative.extendedlocation.inputs.ResourceSyncRulePropertiesSelectorArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ResourceSyncRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final ResourceSyncRuleArgs Empty = new ResourceSyncRuleArgs();

    /**
     * Resource Sync Rule name.
     * 
     */
    @Import(name="childResourceName")
    private @Nullable Output<String> childResourceName;

    /**
     * @return Resource Sync Rule name.
     * 
     */
    public Optional<Output<String>> childResourceName() {
        return Optional.ofNullable(this.childResourceName);
    }

    /**
     * The geo-location where the resource lives
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The geo-location where the resource lives
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Priority represents a priority of the Resource Sync Rule
     * 
     */
    @Import(name="priority")
    private @Nullable Output<Integer> priority;

    /**
     * @return Priority represents a priority of the Resource Sync Rule
     * 
     */
    public Optional<Output<Integer>> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group. The name is case insensitive.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Custom Locations name.
     * 
     */
    @Import(name="resourceName", required=true)
    private Output<String> resourceName;

    /**
     * @return Custom Locations name.
     * 
     */
    public Output<String> resourceName() {
        return this.resourceName;
    }

    /**
     * A label selector is composed of two parts, matchLabels and matchExpressions. The first part, matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is &#39;key&#39;, the operator is &#39;In&#39;, and the values array contains only &#39;value&#39;. The second part, matchExpressions is a list of resource selector requirements. Valid operators include In, NotIn, Exists, and DoesNotExist. The values set must be non-empty in the case of In and NotIn. The values set must be empty in the case of Exists and DoesNotExist. All of the requirements, from both matchLabels and matchExpressions must all be satisfied in order to match.
     * 
     */
    @Import(name="selector")
    private @Nullable Output<ResourceSyncRulePropertiesSelectorArgs> selector;

    /**
     * @return A label selector is composed of two parts, matchLabels and matchExpressions. The first part, matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is &#39;key&#39;, the operator is &#39;In&#39;, and the values array contains only &#39;value&#39;. The second part, matchExpressions is a list of resource selector requirements. Valid operators include In, NotIn, Exists, and DoesNotExist. The values set must be non-empty in the case of In and NotIn. The values set must be empty in the case of Exists and DoesNotExist. All of the requirements, from both matchLabels and matchExpressions must all be satisfied in order to match.
     * 
     */
    public Optional<Output<ResourceSyncRulePropertiesSelectorArgs>> selector() {
        return Optional.ofNullable(this.selector);
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Resource tags.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * For an unmapped custom resource, its labels will be used to find matching resource sync rules. If this resource sync rule is one of the matching rules with highest priority, then the unmapped custom resource will be projected to the target resource group associated with this resource sync rule. The user creating this resource sync rule should have write permissions on the target resource group and this write permission will be validated when creating the resource sync rule.
     * 
     */
    @Import(name="targetResourceGroup")
    private @Nullable Output<String> targetResourceGroup;

    /**
     * @return For an unmapped custom resource, its labels will be used to find matching resource sync rules. If this resource sync rule is one of the matching rules with highest priority, then the unmapped custom resource will be projected to the target resource group associated with this resource sync rule. The user creating this resource sync rule should have write permissions on the target resource group and this write permission will be validated when creating the resource sync rule.
     * 
     */
    public Optional<Output<String>> targetResourceGroup() {
        return Optional.ofNullable(this.targetResourceGroup);
    }

    private ResourceSyncRuleArgs() {}

    private ResourceSyncRuleArgs(ResourceSyncRuleArgs $) {
        this.childResourceName = $.childResourceName;
        this.location = $.location;
        this.priority = $.priority;
        this.resourceGroupName = $.resourceGroupName;
        this.resourceName = $.resourceName;
        this.selector = $.selector;
        this.tags = $.tags;
        this.targetResourceGroup = $.targetResourceGroup;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ResourceSyncRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ResourceSyncRuleArgs $;

        public Builder() {
            $ = new ResourceSyncRuleArgs();
        }

        public Builder(ResourceSyncRuleArgs defaults) {
            $ = new ResourceSyncRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param childResourceName Resource Sync Rule name.
         * 
         * @return builder
         * 
         */
        public Builder childResourceName(@Nullable Output<String> childResourceName) {
            $.childResourceName = childResourceName;
            return this;
        }

        /**
         * @param childResourceName Resource Sync Rule name.
         * 
         * @return builder
         * 
         */
        public Builder childResourceName(String childResourceName) {
            return childResourceName(Output.of(childResourceName));
        }

        /**
         * @param location The geo-location where the resource lives
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The geo-location where the resource lives
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param priority Priority represents a priority of the Resource Sync Rule
         * 
         * @return builder
         * 
         */
        public Builder priority(@Nullable Output<Integer> priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param priority Priority represents a priority of the Resource Sync Rule
         * 
         * @return builder
         * 
         */
        public Builder priority(Integer priority) {
            return priority(Output.of(priority));
        }

        /**
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param resourceName Custom Locations name.
         * 
         * @return builder
         * 
         */
        public Builder resourceName(Output<String> resourceName) {
            $.resourceName = resourceName;
            return this;
        }

        /**
         * @param resourceName Custom Locations name.
         * 
         * @return builder
         * 
         */
        public Builder resourceName(String resourceName) {
            return resourceName(Output.of(resourceName));
        }

        /**
         * @param selector A label selector is composed of two parts, matchLabels and matchExpressions. The first part, matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is &#39;key&#39;, the operator is &#39;In&#39;, and the values array contains only &#39;value&#39;. The second part, matchExpressions is a list of resource selector requirements. Valid operators include In, NotIn, Exists, and DoesNotExist. The values set must be non-empty in the case of In and NotIn. The values set must be empty in the case of Exists and DoesNotExist. All of the requirements, from both matchLabels and matchExpressions must all be satisfied in order to match.
         * 
         * @return builder
         * 
         */
        public Builder selector(@Nullable Output<ResourceSyncRulePropertiesSelectorArgs> selector) {
            $.selector = selector;
            return this;
        }

        /**
         * @param selector A label selector is composed of two parts, matchLabels and matchExpressions. The first part, matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is &#39;key&#39;, the operator is &#39;In&#39;, and the values array contains only &#39;value&#39;. The second part, matchExpressions is a list of resource selector requirements. Valid operators include In, NotIn, Exists, and DoesNotExist. The values set must be non-empty in the case of In and NotIn. The values set must be empty in the case of Exists and DoesNotExist. All of the requirements, from both matchLabels and matchExpressions must all be satisfied in order to match.
         * 
         * @return builder
         * 
         */
        public Builder selector(ResourceSyncRulePropertiesSelectorArgs selector) {
            return selector(Output.of(selector));
        }

        /**
         * @param tags Resource tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Resource tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param targetResourceGroup For an unmapped custom resource, its labels will be used to find matching resource sync rules. If this resource sync rule is one of the matching rules with highest priority, then the unmapped custom resource will be projected to the target resource group associated with this resource sync rule. The user creating this resource sync rule should have write permissions on the target resource group and this write permission will be validated when creating the resource sync rule.
         * 
         * @return builder
         * 
         */
        public Builder targetResourceGroup(@Nullable Output<String> targetResourceGroup) {
            $.targetResourceGroup = targetResourceGroup;
            return this;
        }

        /**
         * @param targetResourceGroup For an unmapped custom resource, its labels will be used to find matching resource sync rules. If this resource sync rule is one of the matching rules with highest priority, then the unmapped custom resource will be projected to the target resource group associated with this resource sync rule. The user creating this resource sync rule should have write permissions on the target resource group and this write permission will be validated when creating the resource sync rule.
         * 
         * @return builder
         * 
         */
        public Builder targetResourceGroup(String targetResourceGroup) {
            return targetResourceGroup(Output.of(targetResourceGroup));
        }

        public ResourceSyncRuleArgs build() {
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.resourceName = Objects.requireNonNull($.resourceName, "expected parameter 'resourceName' to be non-null");
            return $;
        }
    }

}
