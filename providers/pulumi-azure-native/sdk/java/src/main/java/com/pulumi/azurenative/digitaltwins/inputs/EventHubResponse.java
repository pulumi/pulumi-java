// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.digitaltwins.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Properties related to EventHub.
 * 
 */
public final class EventHubResponse extends com.pulumi.resources.InvokeArgs {

    public static final EventHubResponse Empty = new EventHubResponse();

    /**
     * Specifies the authentication type being used for connecting to the endpoint.
     * 
     */
    @Import(name="authenticationType")
    private @Nullable String authenticationType;

    /**
     * @return Specifies the authentication type being used for connecting to the endpoint.
     * 
     */
    public Optional<String> authenticationType() {
        return Optional.ofNullable(this.authenticationType);
    }

    /**
     * PrimaryConnectionString of the endpoint for key-based authentication. Will be obfuscated during read.
     * 
     */
    @Import(name="connectionStringPrimaryKey")
    private @Nullable String connectionStringPrimaryKey;

    /**
     * @return PrimaryConnectionString of the endpoint for key-based authentication. Will be obfuscated during read.
     * 
     */
    public Optional<String> connectionStringPrimaryKey() {
        return Optional.ofNullable(this.connectionStringPrimaryKey);
    }

    /**
     * SecondaryConnectionString of the endpoint for key-based authentication. Will be obfuscated during read.
     * 
     */
    @Import(name="connectionStringSecondaryKey")
    private @Nullable String connectionStringSecondaryKey;

    /**
     * @return SecondaryConnectionString of the endpoint for key-based authentication. Will be obfuscated during read.
     * 
     */
    public Optional<String> connectionStringSecondaryKey() {
        return Optional.ofNullable(this.connectionStringSecondaryKey);
    }

    /**
     * Time when the Endpoint was added to DigitalTwinsInstance.
     * 
     */
    @Import(name="createdTime", required=true)
    private String createdTime;

    /**
     * @return Time when the Endpoint was added to DigitalTwinsInstance.
     * 
     */
    public String createdTime() {
        return this.createdTime;
    }

    /**
     * Dead letter storage secret for key-based authentication. Will be obfuscated during read.
     * 
     */
    @Import(name="deadLetterSecret")
    private @Nullable String deadLetterSecret;

    /**
     * @return Dead letter storage secret for key-based authentication. Will be obfuscated during read.
     * 
     */
    public Optional<String> deadLetterSecret() {
        return Optional.ofNullable(this.deadLetterSecret);
    }

    /**
     * Dead letter storage URL for identity-based authentication.
     * 
     */
    @Import(name="deadLetterUri")
    private @Nullable String deadLetterUri;

    /**
     * @return Dead letter storage URL for identity-based authentication.
     * 
     */
    public Optional<String> deadLetterUri() {
        return Optional.ofNullable(this.deadLetterUri);
    }

    /**
     * The type of Digital Twins endpoint
     * Expected value is &#39;EventHub&#39;.
     * 
     */
    @Import(name="endpointType", required=true)
    private String endpointType;

    /**
     * @return The type of Digital Twins endpoint
     * Expected value is &#39;EventHub&#39;.
     * 
     */
    public String endpointType() {
        return this.endpointType;
    }

    /**
     * The URL of the EventHub namespace for identity-based authentication. It must include the protocol sb://
     * 
     */
    @Import(name="endpointUri")
    private @Nullable String endpointUri;

    /**
     * @return The URL of the EventHub namespace for identity-based authentication. It must include the protocol sb://
     * 
     */
    public Optional<String> endpointUri() {
        return Optional.ofNullable(this.endpointUri);
    }

    /**
     * The EventHub name in the EventHub namespace for identity-based authentication.
     * 
     */
    @Import(name="entityPath")
    private @Nullable String entityPath;

    /**
     * @return The EventHub name in the EventHub namespace for identity-based authentication.
     * 
     */
    public Optional<String> entityPath() {
        return Optional.ofNullable(this.entityPath);
    }

    /**
     * The provisioning state.
     * 
     */
    @Import(name="provisioningState", required=true)
    private String provisioningState;

    /**
     * @return The provisioning state.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    private EventHubResponse() {}

    private EventHubResponse(EventHubResponse $) {
        this.authenticationType = $.authenticationType;
        this.connectionStringPrimaryKey = $.connectionStringPrimaryKey;
        this.connectionStringSecondaryKey = $.connectionStringSecondaryKey;
        this.createdTime = $.createdTime;
        this.deadLetterSecret = $.deadLetterSecret;
        this.deadLetterUri = $.deadLetterUri;
        this.endpointType = $.endpointType;
        this.endpointUri = $.endpointUri;
        this.entityPath = $.entityPath;
        this.provisioningState = $.provisioningState;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EventHubResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EventHubResponse $;

        public Builder() {
            $ = new EventHubResponse();
        }

        public Builder(EventHubResponse defaults) {
            $ = new EventHubResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param authenticationType Specifies the authentication type being used for connecting to the endpoint.
         * 
         * @return builder
         * 
         */
        public Builder authenticationType(@Nullable String authenticationType) {
            $.authenticationType = authenticationType;
            return this;
        }

        /**
         * @param connectionStringPrimaryKey PrimaryConnectionString of the endpoint for key-based authentication. Will be obfuscated during read.
         * 
         * @return builder
         * 
         */
        public Builder connectionStringPrimaryKey(@Nullable String connectionStringPrimaryKey) {
            $.connectionStringPrimaryKey = connectionStringPrimaryKey;
            return this;
        }

        /**
         * @param connectionStringSecondaryKey SecondaryConnectionString of the endpoint for key-based authentication. Will be obfuscated during read.
         * 
         * @return builder
         * 
         */
        public Builder connectionStringSecondaryKey(@Nullable String connectionStringSecondaryKey) {
            $.connectionStringSecondaryKey = connectionStringSecondaryKey;
            return this;
        }

        /**
         * @param createdTime Time when the Endpoint was added to DigitalTwinsInstance.
         * 
         * @return builder
         * 
         */
        public Builder createdTime(String createdTime) {
            $.createdTime = createdTime;
            return this;
        }

        /**
         * @param deadLetterSecret Dead letter storage secret for key-based authentication. Will be obfuscated during read.
         * 
         * @return builder
         * 
         */
        public Builder deadLetterSecret(@Nullable String deadLetterSecret) {
            $.deadLetterSecret = deadLetterSecret;
            return this;
        }

        /**
         * @param deadLetterUri Dead letter storage URL for identity-based authentication.
         * 
         * @return builder
         * 
         */
        public Builder deadLetterUri(@Nullable String deadLetterUri) {
            $.deadLetterUri = deadLetterUri;
            return this;
        }

        /**
         * @param endpointType The type of Digital Twins endpoint
         * Expected value is &#39;EventHub&#39;.
         * 
         * @return builder
         * 
         */
        public Builder endpointType(String endpointType) {
            $.endpointType = endpointType;
            return this;
        }

        /**
         * @param endpointUri The URL of the EventHub namespace for identity-based authentication. It must include the protocol sb://
         * 
         * @return builder
         * 
         */
        public Builder endpointUri(@Nullable String endpointUri) {
            $.endpointUri = endpointUri;
            return this;
        }

        /**
         * @param entityPath The EventHub name in the EventHub namespace for identity-based authentication.
         * 
         * @return builder
         * 
         */
        public Builder entityPath(@Nullable String entityPath) {
            $.entityPath = entityPath;
            return this;
        }

        /**
         * @param provisioningState The provisioning state.
         * 
         * @return builder
         * 
         */
        public Builder provisioningState(String provisioningState) {
            $.provisioningState = provisioningState;
            return this;
        }

        public EventHubResponse build() {
            $.createdTime = Objects.requireNonNull($.createdTime, "expected parameter 'createdTime' to be non-null");
            $.endpointType = Codegen.stringProp("endpointType").arg($.endpointType).require();
            $.provisioningState = Objects.requireNonNull($.provisioningState, "expected parameter 'provisioningState' to be non-null");
            return $;
        }
    }

}
