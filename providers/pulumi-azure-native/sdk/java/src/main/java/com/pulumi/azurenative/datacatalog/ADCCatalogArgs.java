// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datacatalog;

import com.pulumi.azurenative.datacatalog.enums.SkuType;
import com.pulumi.azurenative.datacatalog.inputs.PrincipalsArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ADCCatalogArgs extends com.pulumi.resources.ResourceArgs {

    public static final ADCCatalogArgs Empty = new ADCCatalogArgs();

    /**
     * Azure data catalog admin list.
     * 
     */
    @Import(name="admins")
    private @Nullable Output<List<PrincipalsArgs>> admins;

    public Optional<Output<List<PrincipalsArgs>>> admins() {
        return Optional.ofNullable(this.admins);
    }

    /**
     * The name of the data catalog in the specified subscription and resource group.
     * 
     */
    @Import(name="catalogName")
    private @Nullable Output<String> catalogName;

    public Optional<Output<String>> catalogName() {
        return Optional.ofNullable(this.catalogName);
    }

    /**
     * Automatic unit adjustment enabled or not.
     * 
     */
    @Import(name="enableAutomaticUnitAdjustment")
    private @Nullable Output<Boolean> enableAutomaticUnitAdjustment;

    public Optional<Output<Boolean>> enableAutomaticUnitAdjustment() {
        return Optional.ofNullable(this.enableAutomaticUnitAdjustment);
    }

    /**
     * Resource location
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name of the resource group within the user&#39;s subscription. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Azure data catalog SKU.
     * 
     */
    @Import(name="sku")
    private @Nullable Output<Either<String,SkuType>> sku;

    public Optional<Output<Either<String,SkuType>>> sku() {
        return Optional.ofNullable(this.sku);
    }

    /**
     * Azure data catalog provision status.
     * 
     */
    @Import(name="successfullyProvisioned")
    private @Nullable Output<Boolean> successfullyProvisioned;

    public Optional<Output<Boolean>> successfullyProvisioned() {
        return Optional.ofNullable(this.successfullyProvisioned);
    }

    /**
     * Resource tags
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Azure data catalog units.
     * 
     */
    @Import(name="units")
    private @Nullable Output<Integer> units;

    public Optional<Output<Integer>> units() {
        return Optional.ofNullable(this.units);
    }

    /**
     * Azure data catalog user list.
     * 
     */
    @Import(name="users")
    private @Nullable Output<List<PrincipalsArgs>> users;

    public Optional<Output<List<PrincipalsArgs>>> users() {
        return Optional.ofNullable(this.users);
    }

    private ADCCatalogArgs() {}

    private ADCCatalogArgs(ADCCatalogArgs $) {
        this.admins = $.admins;
        this.catalogName = $.catalogName;
        this.enableAutomaticUnitAdjustment = $.enableAutomaticUnitAdjustment;
        this.location = $.location;
        this.resourceGroupName = $.resourceGroupName;
        this.sku = $.sku;
        this.successfullyProvisioned = $.successfullyProvisioned;
        this.tags = $.tags;
        this.units = $.units;
        this.users = $.users;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ADCCatalogArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ADCCatalogArgs $;

        public Builder() {
            $ = new ADCCatalogArgs();
        }

        public Builder(ADCCatalogArgs defaults) {
            $ = new ADCCatalogArgs(Objects.requireNonNull(defaults));
        }

        public Builder admins(@Nullable Output<List<PrincipalsArgs>> admins) {
            $.admins = admins;
            return this;
        }

        public Builder admins(List<PrincipalsArgs> admins) {
            return admins(Output.of(admins));
        }

        public Builder admins(PrincipalsArgs... admins) {
            return admins(List.of(admins));
        }

        public Builder catalogName(@Nullable Output<String> catalogName) {
            $.catalogName = catalogName;
            return this;
        }

        public Builder catalogName(String catalogName) {
            return catalogName(Output.of(catalogName));
        }

        public Builder enableAutomaticUnitAdjustment(@Nullable Output<Boolean> enableAutomaticUnitAdjustment) {
            $.enableAutomaticUnitAdjustment = enableAutomaticUnitAdjustment;
            return this;
        }

        public Builder enableAutomaticUnitAdjustment(Boolean enableAutomaticUnitAdjustment) {
            return enableAutomaticUnitAdjustment(Output.of(enableAutomaticUnitAdjustment));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder sku(@Nullable Output<Either<String,SkuType>> sku) {
            $.sku = sku;
            return this;
        }

        public Builder sku(Either<String,SkuType> sku) {
            return sku(Output.of(sku));
        }

        public Builder sku(String sku) {
            return sku(Either.ofLeft(sku));
        }

        public Builder sku(SkuType sku) {
            return sku(Either.ofRight(sku));
        }

        public Builder successfullyProvisioned(@Nullable Output<Boolean> successfullyProvisioned) {
            $.successfullyProvisioned = successfullyProvisioned;
            return this;
        }

        public Builder successfullyProvisioned(Boolean successfullyProvisioned) {
            return successfullyProvisioned(Output.of(successfullyProvisioned));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder units(@Nullable Output<Integer> units) {
            $.units = units;
            return this;
        }

        public Builder units(Integer units) {
            return units(Output.of(units));
        }

        public Builder users(@Nullable Output<List<PrincipalsArgs>> users) {
            $.users = users;
            return this;
        }

        public Builder users(List<PrincipalsArgs> users) {
            return users(Output.of(users));
        }

        public Builder users(PrincipalsArgs... users) {
            return users(List.of(users));
        }

        public ADCCatalogArgs build() {
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
