// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.azurenative.datafactory.inputs.GitHubClientSecretArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Factory&#39;s GitHub repo information.
 * 
 */
public final class FactoryGitHubConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final FactoryGitHubConfigurationArgs Empty = new FactoryGitHubConfigurationArgs();

    /**
     * Account name.
     * 
     */
    @Import(name="accountName", required=true)
    private Output<String> accountName;

    public Output<String> accountName() {
        return this.accountName;
    }

    /**
     * GitHub bring your own app client id.
     * 
     */
    @Import(name="clientId")
    private @Nullable Output<String> clientId;

    public Optional<Output<String>> clientId() {
        return Optional.ofNullable(this.clientId);
    }

    /**
     * GitHub bring your own app client secret information.
     * 
     */
    @Import(name="clientSecret")
    private @Nullable Output<GitHubClientSecretArgs> clientSecret;

    public Optional<Output<GitHubClientSecretArgs>> clientSecret() {
        return Optional.ofNullable(this.clientSecret);
    }

    /**
     * Collaboration branch.
     * 
     */
    @Import(name="collaborationBranch", required=true)
    private Output<String> collaborationBranch;

    public Output<String> collaborationBranch() {
        return this.collaborationBranch;
    }

    /**
     * GitHub Enterprise host name. For example: https://github.mydomain.com
     * 
     */
    @Import(name="hostName")
    private @Nullable Output<String> hostName;

    public Optional<Output<String>> hostName() {
        return Optional.ofNullable(this.hostName);
    }

    /**
     * Last commit id.
     * 
     */
    @Import(name="lastCommitId")
    private @Nullable Output<String> lastCommitId;

    public Optional<Output<String>> lastCommitId() {
        return Optional.ofNullable(this.lastCommitId);
    }

    /**
     * Repository name.
     * 
     */
    @Import(name="repositoryName", required=true)
    private Output<String> repositoryName;

    public Output<String> repositoryName() {
        return this.repositoryName;
    }

    /**
     * Root folder.
     * 
     */
    @Import(name="rootFolder", required=true)
    private Output<String> rootFolder;

    public Output<String> rootFolder() {
        return this.rootFolder;
    }

    /**
     * Type of repo configuration.
     * Expected value is &#39;FactoryGitHubConfiguration&#39;.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    private FactoryGitHubConfigurationArgs() {}

    private FactoryGitHubConfigurationArgs(FactoryGitHubConfigurationArgs $) {
        this.accountName = $.accountName;
        this.clientId = $.clientId;
        this.clientSecret = $.clientSecret;
        this.collaborationBranch = $.collaborationBranch;
        this.hostName = $.hostName;
        this.lastCommitId = $.lastCommitId;
        this.repositoryName = $.repositoryName;
        this.rootFolder = $.rootFolder;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FactoryGitHubConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FactoryGitHubConfigurationArgs $;

        public Builder() {
            $ = new FactoryGitHubConfigurationArgs();
        }

        public Builder(FactoryGitHubConfigurationArgs defaults) {
            $ = new FactoryGitHubConfigurationArgs(Objects.requireNonNull(defaults));
        }

        public Builder accountName(Output<String> accountName) {
            $.accountName = accountName;
            return this;
        }

        public Builder accountName(String accountName) {
            return accountName(Output.of(accountName));
        }

        public Builder clientId(@Nullable Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        public Builder clientSecret(@Nullable Output<GitHubClientSecretArgs> clientSecret) {
            $.clientSecret = clientSecret;
            return this;
        }

        public Builder clientSecret(GitHubClientSecretArgs clientSecret) {
            return clientSecret(Output.of(clientSecret));
        }

        public Builder collaborationBranch(Output<String> collaborationBranch) {
            $.collaborationBranch = collaborationBranch;
            return this;
        }

        public Builder collaborationBranch(String collaborationBranch) {
            return collaborationBranch(Output.of(collaborationBranch));
        }

        public Builder hostName(@Nullable Output<String> hostName) {
            $.hostName = hostName;
            return this;
        }

        public Builder hostName(String hostName) {
            return hostName(Output.of(hostName));
        }

        public Builder lastCommitId(@Nullable Output<String> lastCommitId) {
            $.lastCommitId = lastCommitId;
            return this;
        }

        public Builder lastCommitId(String lastCommitId) {
            return lastCommitId(Output.of(lastCommitId));
        }

        public Builder repositoryName(Output<String> repositoryName) {
            $.repositoryName = repositoryName;
            return this;
        }

        public Builder repositoryName(String repositoryName) {
            return repositoryName(Output.of(repositoryName));
        }

        public Builder rootFolder(Output<String> rootFolder) {
            $.rootFolder = rootFolder;
            return this;
        }

        public Builder rootFolder(String rootFolder) {
            return rootFolder(Output.of(rootFolder));
        }

        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public FactoryGitHubConfigurationArgs build() {
            $.accountName = Objects.requireNonNull($.accountName, "expected parameter 'accountName' to be non-null");
            $.collaborationBranch = Objects.requireNonNull($.collaborationBranch, "expected parameter 'collaborationBranch' to be non-null");
            $.repositoryName = Objects.requireNonNull($.repositoryName, "expected parameter 'repositoryName' to be non-null");
            $.rootFolder = Objects.requireNonNull($.rootFolder, "expected parameter 'rootFolder' to be non-null");
            $.type = Codegen.stringProp("type").output().arg($.type).require();
            return $;
        }
    }

}
