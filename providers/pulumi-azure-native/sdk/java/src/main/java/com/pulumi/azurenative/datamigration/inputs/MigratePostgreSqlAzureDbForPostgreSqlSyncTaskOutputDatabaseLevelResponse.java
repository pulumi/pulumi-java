// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datamigration.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;


public final class MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse extends com.pulumi.resources.InvokeArgs {

    public static final MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse Empty = new MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse();

    /**
     * Number of applied changes
     * 
     */
    @Import(name="appliedChanges", required=true)
    private Double appliedChanges;

    /**
     * @return Number of applied changes
     * 
     */
    public Double appliedChanges() {
        return this.appliedChanges;
    }

    /**
     * Number of cdc deletes
     * 
     */
    @Import(name="cdcDeleteCounter", required=true)
    private Double cdcDeleteCounter;

    /**
     * @return Number of cdc deletes
     * 
     */
    public Double cdcDeleteCounter() {
        return this.cdcDeleteCounter;
    }

    /**
     * Number of cdc inserts
     * 
     */
    @Import(name="cdcInsertCounter", required=true)
    private Double cdcInsertCounter;

    /**
     * @return Number of cdc inserts
     * 
     */
    public Double cdcInsertCounter() {
        return this.cdcInsertCounter;
    }

    /**
     * Number of cdc updates
     * 
     */
    @Import(name="cdcUpdateCounter", required=true)
    private Double cdcUpdateCounter;

    /**
     * @return Number of cdc updates
     * 
     */
    public Double cdcUpdateCounter() {
        return this.cdcUpdateCounter;
    }

    /**
     * Name of the database
     * 
     */
    @Import(name="databaseName", required=true)
    private String databaseName;

    /**
     * @return Name of the database
     * 
     */
    public String databaseName() {
        return this.databaseName;
    }

    /**
     * Migration end time
     * 
     */
    @Import(name="endedOn", required=true)
    private String endedOn;

    /**
     * @return Migration end time
     * 
     */
    public String endedOn() {
        return this.endedOn;
    }

    /**
     * Number of tables completed in full load
     * 
     */
    @Import(name="fullLoadCompletedTables", required=true)
    private Double fullLoadCompletedTables;

    /**
     * @return Number of tables completed in full load
     * 
     */
    public Double fullLoadCompletedTables() {
        return this.fullLoadCompletedTables;
    }

    /**
     * Number of tables errored in full load
     * 
     */
    @Import(name="fullLoadErroredTables", required=true)
    private Double fullLoadErroredTables;

    /**
     * @return Number of tables errored in full load
     * 
     */
    public Double fullLoadErroredTables() {
        return this.fullLoadErroredTables;
    }

    /**
     * Number of tables loading in full load
     * 
     */
    @Import(name="fullLoadLoadingTables", required=true)
    private Double fullLoadLoadingTables;

    /**
     * @return Number of tables loading in full load
     * 
     */
    public Double fullLoadLoadingTables() {
        return this.fullLoadLoadingTables;
    }

    /**
     * Number of tables queued in full load
     * 
     */
    @Import(name="fullLoadQueuedTables", required=true)
    private Double fullLoadQueuedTables;

    /**
     * @return Number of tables queued in full load
     * 
     */
    public Double fullLoadQueuedTables() {
        return this.fullLoadQueuedTables;
    }

    /**
     * Result identifier
     * 
     */
    @Import(name="id", required=true)
    private String id;

    /**
     * @return Result identifier
     * 
     */
    public String id() {
        return this.id;
    }

    /**
     * Number of incoming changes
     * 
     */
    @Import(name="incomingChanges", required=true)
    private Double incomingChanges;

    /**
     * @return Number of incoming changes
     * 
     */
    public Double incomingChanges() {
        return this.incomingChanges;
    }

    /**
     * Indicates if initial load (full load) has been completed
     * 
     */
    @Import(name="initializationCompleted", required=true)
    private Boolean initializationCompleted;

    /**
     * @return Indicates if initial load (full load) has been completed
     * 
     */
    public Boolean initializationCompleted() {
        return this.initializationCompleted;
    }

    /**
     * CDC apply latency
     * 
     */
    @Import(name="latency", required=true)
    private Double latency;

    /**
     * @return CDC apply latency
     * 
     */
    public Double latency() {
        return this.latency;
    }

    /**
     * Migration state that this database is in
     * 
     */
    @Import(name="migrationState", required=true)
    private String migrationState;

    /**
     * @return Migration state that this database is in
     * 
     */
    public String migrationState() {
        return this.migrationState;
    }

    /**
     * Result type
     * Expected value is &#39;DatabaseLevelOutput&#39;.
     * 
     */
    @Import(name="resultType", required=true)
    private String resultType;

    /**
     * @return Result type
     * Expected value is &#39;DatabaseLevelOutput&#39;.
     * 
     */
    public String resultType() {
        return this.resultType;
    }

    /**
     * Migration start time
     * 
     */
    @Import(name="startedOn", required=true)
    private String startedOn;

    /**
     * @return Migration start time
     * 
     */
    public String startedOn() {
        return this.startedOn;
    }

    private MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse() {}

    private MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse $) {
        this.appliedChanges = $.appliedChanges;
        this.cdcDeleteCounter = $.cdcDeleteCounter;
        this.cdcInsertCounter = $.cdcInsertCounter;
        this.cdcUpdateCounter = $.cdcUpdateCounter;
        this.databaseName = $.databaseName;
        this.endedOn = $.endedOn;
        this.fullLoadCompletedTables = $.fullLoadCompletedTables;
        this.fullLoadErroredTables = $.fullLoadErroredTables;
        this.fullLoadLoadingTables = $.fullLoadLoadingTables;
        this.fullLoadQueuedTables = $.fullLoadQueuedTables;
        this.id = $.id;
        this.incomingChanges = $.incomingChanges;
        this.initializationCompleted = $.initializationCompleted;
        this.latency = $.latency;
        this.migrationState = $.migrationState;
        this.resultType = $.resultType;
        this.startedOn = $.startedOn;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse $;

        public Builder() {
            $ = new MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse();
        }

        public Builder(MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse defaults) {
            $ = new MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param appliedChanges Number of applied changes
         * 
         * @return builder
         * 
         */
        public Builder appliedChanges(Double appliedChanges) {
            $.appliedChanges = appliedChanges;
            return this;
        }

        /**
         * @param cdcDeleteCounter Number of cdc deletes
         * 
         * @return builder
         * 
         */
        public Builder cdcDeleteCounter(Double cdcDeleteCounter) {
            $.cdcDeleteCounter = cdcDeleteCounter;
            return this;
        }

        /**
         * @param cdcInsertCounter Number of cdc inserts
         * 
         * @return builder
         * 
         */
        public Builder cdcInsertCounter(Double cdcInsertCounter) {
            $.cdcInsertCounter = cdcInsertCounter;
            return this;
        }

        /**
         * @param cdcUpdateCounter Number of cdc updates
         * 
         * @return builder
         * 
         */
        public Builder cdcUpdateCounter(Double cdcUpdateCounter) {
            $.cdcUpdateCounter = cdcUpdateCounter;
            return this;
        }

        /**
         * @param databaseName Name of the database
         * 
         * @return builder
         * 
         */
        public Builder databaseName(String databaseName) {
            $.databaseName = databaseName;
            return this;
        }

        /**
         * @param endedOn Migration end time
         * 
         * @return builder
         * 
         */
        public Builder endedOn(String endedOn) {
            $.endedOn = endedOn;
            return this;
        }

        /**
         * @param fullLoadCompletedTables Number of tables completed in full load
         * 
         * @return builder
         * 
         */
        public Builder fullLoadCompletedTables(Double fullLoadCompletedTables) {
            $.fullLoadCompletedTables = fullLoadCompletedTables;
            return this;
        }

        /**
         * @param fullLoadErroredTables Number of tables errored in full load
         * 
         * @return builder
         * 
         */
        public Builder fullLoadErroredTables(Double fullLoadErroredTables) {
            $.fullLoadErroredTables = fullLoadErroredTables;
            return this;
        }

        /**
         * @param fullLoadLoadingTables Number of tables loading in full load
         * 
         * @return builder
         * 
         */
        public Builder fullLoadLoadingTables(Double fullLoadLoadingTables) {
            $.fullLoadLoadingTables = fullLoadLoadingTables;
            return this;
        }

        /**
         * @param fullLoadQueuedTables Number of tables queued in full load
         * 
         * @return builder
         * 
         */
        public Builder fullLoadQueuedTables(Double fullLoadQueuedTables) {
            $.fullLoadQueuedTables = fullLoadQueuedTables;
            return this;
        }

        /**
         * @param id Result identifier
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            $.id = id;
            return this;
        }

        /**
         * @param incomingChanges Number of incoming changes
         * 
         * @return builder
         * 
         */
        public Builder incomingChanges(Double incomingChanges) {
            $.incomingChanges = incomingChanges;
            return this;
        }

        /**
         * @param initializationCompleted Indicates if initial load (full load) has been completed
         * 
         * @return builder
         * 
         */
        public Builder initializationCompleted(Boolean initializationCompleted) {
            $.initializationCompleted = initializationCompleted;
            return this;
        }

        /**
         * @param latency CDC apply latency
         * 
         * @return builder
         * 
         */
        public Builder latency(Double latency) {
            $.latency = latency;
            return this;
        }

        /**
         * @param migrationState Migration state that this database is in
         * 
         * @return builder
         * 
         */
        public Builder migrationState(String migrationState) {
            $.migrationState = migrationState;
            return this;
        }

        /**
         * @param resultType Result type
         * Expected value is &#39;DatabaseLevelOutput&#39;.
         * 
         * @return builder
         * 
         */
        public Builder resultType(String resultType) {
            $.resultType = resultType;
            return this;
        }

        /**
         * @param startedOn Migration start time
         * 
         * @return builder
         * 
         */
        public Builder startedOn(String startedOn) {
            $.startedOn = startedOn;
            return this;
        }

        public MigratePostgreSqlAzureDbForPostgreSqlSyncTaskOutputDatabaseLevelResponse build() {
            $.appliedChanges = Objects.requireNonNull($.appliedChanges, "expected parameter 'appliedChanges' to be non-null");
            $.cdcDeleteCounter = Objects.requireNonNull($.cdcDeleteCounter, "expected parameter 'cdcDeleteCounter' to be non-null");
            $.cdcInsertCounter = Objects.requireNonNull($.cdcInsertCounter, "expected parameter 'cdcInsertCounter' to be non-null");
            $.cdcUpdateCounter = Objects.requireNonNull($.cdcUpdateCounter, "expected parameter 'cdcUpdateCounter' to be non-null");
            $.databaseName = Objects.requireNonNull($.databaseName, "expected parameter 'databaseName' to be non-null");
            $.endedOn = Objects.requireNonNull($.endedOn, "expected parameter 'endedOn' to be non-null");
            $.fullLoadCompletedTables = Objects.requireNonNull($.fullLoadCompletedTables, "expected parameter 'fullLoadCompletedTables' to be non-null");
            $.fullLoadErroredTables = Objects.requireNonNull($.fullLoadErroredTables, "expected parameter 'fullLoadErroredTables' to be non-null");
            $.fullLoadLoadingTables = Objects.requireNonNull($.fullLoadLoadingTables, "expected parameter 'fullLoadLoadingTables' to be non-null");
            $.fullLoadQueuedTables = Objects.requireNonNull($.fullLoadQueuedTables, "expected parameter 'fullLoadQueuedTables' to be non-null");
            $.id = Objects.requireNonNull($.id, "expected parameter 'id' to be non-null");
            $.incomingChanges = Objects.requireNonNull($.incomingChanges, "expected parameter 'incomingChanges' to be non-null");
            $.initializationCompleted = Objects.requireNonNull($.initializationCompleted, "expected parameter 'initializationCompleted' to be non-null");
            $.latency = Objects.requireNonNull($.latency, "expected parameter 'latency' to be non-null");
            $.migrationState = Objects.requireNonNull($.migrationState, "expected parameter 'migrationState' to be non-null");
            $.resultType = Codegen.stringProp("resultType").arg($.resultType).require();
            $.startedOn = Objects.requireNonNull($.startedOn, "expected parameter 'startedOn' to be non-null");
            return $;
        }
    }

}
