// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.hybridcompute.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * Specifies the operating system settings for the hybrid machine.
 * 
 */
public final class MachinePropertiesResponseOsProfile extends com.pulumi.resources.InvokeArgs {

    public static final MachinePropertiesResponseOsProfile Empty = new MachinePropertiesResponseOsProfile();

    /**
     * Specifies the host OS name of the hybrid machine.
     * 
     */
    @Import(name="computerName", required=true)
    private String computerName;

    /**
     * @return Specifies the host OS name of the hybrid machine.
     * 
     */
    public String computerName() {
        return this.computerName;
    }

    private MachinePropertiesResponseOsProfile() {}

    private MachinePropertiesResponseOsProfile(MachinePropertiesResponseOsProfile $) {
        this.computerName = $.computerName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MachinePropertiesResponseOsProfile defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MachinePropertiesResponseOsProfile $;

        public Builder() {
            $ = new MachinePropertiesResponseOsProfile();
        }

        public Builder(MachinePropertiesResponseOsProfile defaults) {
            $ = new MachinePropertiesResponseOsProfile(Objects.requireNonNull(defaults));
        }

        /**
         * @param computerName Specifies the host OS name of the hybrid machine.
         * 
         * @return builder
         * 
         */
        public Builder computerName(String computerName) {
            $.computerName = computerName;
            return this;
        }

        public MachinePropertiesResponseOsProfile build() {
            $.computerName = Objects.requireNonNull($.computerName, "expected parameter 'computerName' to be non-null");
            return $;
        }
    }

}
