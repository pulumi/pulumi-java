// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.notificationhubs.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Description of a NotificationHub MpnsCredential.
 * 
 */
public final class MpnsCredentialArgs extends com.pulumi.resources.ResourceArgs {

    public static final MpnsCredentialArgs Empty = new MpnsCredentialArgs();

    /**
     * The certificate key for this credential.
     * 
     */
    @Import(name="certificateKey")
    private @Nullable Output<String> certificateKey;

    /**
     * @return The certificate key for this credential.
     * 
     */
    public Optional<Output<String>> certificateKey() {
        return Optional.ofNullable(this.certificateKey);
    }

    /**
     * The MPNS certificate.
     * 
     */
    @Import(name="mpnsCertificate")
    private @Nullable Output<String> mpnsCertificate;

    /**
     * @return The MPNS certificate.
     * 
     */
    public Optional<Output<String>> mpnsCertificate() {
        return Optional.ofNullable(this.mpnsCertificate);
    }

    /**
     * The MPNS certificate Thumbprint
     * 
     */
    @Import(name="thumbprint")
    private @Nullable Output<String> thumbprint;

    /**
     * @return The MPNS certificate Thumbprint
     * 
     */
    public Optional<Output<String>> thumbprint() {
        return Optional.ofNullable(this.thumbprint);
    }

    private MpnsCredentialArgs() {}

    private MpnsCredentialArgs(MpnsCredentialArgs $) {
        this.certificateKey = $.certificateKey;
        this.mpnsCertificate = $.mpnsCertificate;
        this.thumbprint = $.thumbprint;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MpnsCredentialArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MpnsCredentialArgs $;

        public Builder() {
            $ = new MpnsCredentialArgs();
        }

        public Builder(MpnsCredentialArgs defaults) {
            $ = new MpnsCredentialArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificateKey The certificate key for this credential.
         * 
         * @return builder
         * 
         */
        public Builder certificateKey(@Nullable Output<String> certificateKey) {
            $.certificateKey = certificateKey;
            return this;
        }

        /**
         * @param certificateKey The certificate key for this credential.
         * 
         * @return builder
         * 
         */
        public Builder certificateKey(String certificateKey) {
            return certificateKey(Output.of(certificateKey));
        }

        /**
         * @param mpnsCertificate The MPNS certificate.
         * 
         * @return builder
         * 
         */
        public Builder mpnsCertificate(@Nullable Output<String> mpnsCertificate) {
            $.mpnsCertificate = mpnsCertificate;
            return this;
        }

        /**
         * @param mpnsCertificate The MPNS certificate.
         * 
         * @return builder
         * 
         */
        public Builder mpnsCertificate(String mpnsCertificate) {
            return mpnsCertificate(Output.of(mpnsCertificate));
        }

        /**
         * @param thumbprint The MPNS certificate Thumbprint
         * 
         * @return builder
         * 
         */
        public Builder thumbprint(@Nullable Output<String> thumbprint) {
            $.thumbprint = thumbprint;
            return this;
        }

        /**
         * @param thumbprint The MPNS certificate Thumbprint
         * 
         * @return builder
         * 
         */
        public Builder thumbprint(String thumbprint) {
            return thumbprint(Output.of(thumbprint));
        }

        public MpnsCredentialArgs build() {
            return $;
        }
    }

}
