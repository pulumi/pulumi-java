// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.costmanagement.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;


/**
 * Target resources and allocation
 * 
 */
public final class CostAllocationProportionResponse extends com.pulumi.resources.InvokeArgs {

    public static final CostAllocationProportionResponse Empty = new CostAllocationProportionResponse();

    /**
     * Target resource for cost allocation
     * 
     */
    @Import(name="name", required=true)
      private final String name;

    public String name() {
        return this.name;
    }

    /**
     * Percentage of source cost to allocate to this resource. This value can be specified to two decimal places and the total percentage of all resources in this rule must sum to 100.00.
     * 
     */
    @Import(name="percentage", required=true)
      private final Double percentage;

    public Double percentage() {
        return this.percentage;
    }

    public CostAllocationProportionResponse(
        String name,
        Double percentage) {
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.percentage = Objects.requireNonNull(percentage, "expected parameter 'percentage' to be non-null");
    }

    private CostAllocationProportionResponse() {
        this.name = null;
        this.percentage = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CostAllocationProportionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String name;
        private Double percentage;

        public Builder() {
    	      // Empty
        }

        public Builder(CostAllocationProportionResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.name = defaults.name;
    	      this.percentage = defaults.percentage;
        }

        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder percentage(Double percentage) {
            this.percentage = Objects.requireNonNull(percentage);
            return this;
        }        public CostAllocationProportionResponse build() {
            return new CostAllocationProportionResponse(name, percentage);
        }
    }
}
