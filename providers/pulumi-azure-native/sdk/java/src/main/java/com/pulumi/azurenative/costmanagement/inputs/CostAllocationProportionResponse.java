// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.costmanagement.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;


/**
 * Target resources and allocation
 * 
 */
public final class CostAllocationProportionResponse extends com.pulumi.resources.InvokeArgs {

    public static final CostAllocationProportionResponse Empty = new CostAllocationProportionResponse();

    /**
     * Target resource for cost allocation
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return Target resource for cost allocation
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * Percentage of source cost to allocate to this resource. This value can be specified to two decimal places and the total percentage of all resources in this rule must sum to 100.00.
     * 
     */
    @Import(name="percentage", required=true)
    private Double percentage;

    /**
     * @return Percentage of source cost to allocate to this resource. This value can be specified to two decimal places and the total percentage of all resources in this rule must sum to 100.00.
     * 
     */
    public Double percentage() {
        return this.percentage;
    }

    private CostAllocationProportionResponse() {}

    private CostAllocationProportionResponse(CostAllocationProportionResponse $) {
        this.name = $.name;
        this.percentage = $.percentage;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CostAllocationProportionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CostAllocationProportionResponse $;

        public Builder() {
            $ = new CostAllocationProportionResponse();
        }

        public Builder(CostAllocationProportionResponse defaults) {
            $ = new CostAllocationProportionResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param name Target resource for cost allocation
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param percentage Percentage of source cost to allocate to this resource. This value can be specified to two decimal places and the total percentage of all resources in this rule must sum to 100.00.
         * 
         * @return builder
         * 
         */
        public Builder percentage(Double percentage) {
            $.percentage = percentage;
            return this;
        }

        public CostAllocationProportionResponse build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.percentage = Objects.requireNonNull($.percentage, "expected parameter 'percentage' to be non-null");
            return $;
        }
    }

}
