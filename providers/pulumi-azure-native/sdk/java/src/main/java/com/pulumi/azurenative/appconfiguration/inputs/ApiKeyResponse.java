// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.appconfiguration.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


/**
 * An API key used for authenticating with a configuration store endpoint.
 * 
 */
public final class ApiKeyResponse extends com.pulumi.resources.InvokeArgs {

    public static final ApiKeyResponse Empty = new ApiKeyResponse();

    /**
     * A connection string that can be used by supporting clients for authentication.
     * 
     */
    @Import(name="connectionString", required=true)
    private String connectionString;

    public String connectionString() {
        return this.connectionString;
    }

    /**
     * The key ID.
     * 
     */
    @Import(name="id", required=true)
    private String id;

    public String id() {
        return this.id;
    }

    /**
     * The last time any of the key&#39;s properties were modified.
     * 
     */
    @Import(name="lastModified", required=true)
    private String lastModified;

    public String lastModified() {
        return this.lastModified;
    }

    /**
     * A name for the key describing its usage.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    public String name() {
        return this.name;
    }

    /**
     * Whether this key can only be used for read operations.
     * 
     */
    @Import(name="readOnly", required=true)
    private Boolean readOnly;

    public Boolean readOnly() {
        return this.readOnly;
    }

    /**
     * The value of the key that is used for authentication purposes.
     * 
     */
    @Import(name="value", required=true)
    private String value;

    public String value() {
        return this.value;
    }

    private ApiKeyResponse() {}

    private ApiKeyResponse(ApiKeyResponse $) {
        this.connectionString = $.connectionString;
        this.id = $.id;
        this.lastModified = $.lastModified;
        this.name = $.name;
        this.readOnly = $.readOnly;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApiKeyResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApiKeyResponse $;

        public Builder() {
            $ = new ApiKeyResponse();
        }

        public Builder(ApiKeyResponse defaults) {
            $ = new ApiKeyResponse(Objects.requireNonNull(defaults));
        }

        public Builder connectionString(String connectionString) {
            $.connectionString = connectionString;
            return this;
        }

        public Builder id(String id) {
            $.id = id;
            return this;
        }

        public Builder lastModified(String lastModified) {
            $.lastModified = lastModified;
            return this;
        }

        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public Builder readOnly(Boolean readOnly) {
            $.readOnly = readOnly;
            return this;
        }

        public Builder value(String value) {
            $.value = value;
            return this;
        }

        public ApiKeyResponse build() {
            $.connectionString = Objects.requireNonNull($.connectionString, "expected parameter 'connectionString' to be non-null");
            $.id = Objects.requireNonNull($.id, "expected parameter 'id' to be non-null");
            $.lastModified = Objects.requireNonNull($.lastModified, "expected parameter 'lastModified' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.readOnly = Objects.requireNonNull($.readOnly, "expected parameter 'readOnly' to be non-null");
            $.value = Objects.requireNonNull($.value, "expected parameter 'value' to be non-null");
            return $;
        }
    }

}
