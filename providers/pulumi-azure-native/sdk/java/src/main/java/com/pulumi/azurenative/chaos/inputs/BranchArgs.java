// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.chaos.inputs;

import com.pulumi.azurenative.chaos.inputs.ContinuousActionArgs;
import com.pulumi.azurenative.chaos.inputs.DelayActionArgs;
import com.pulumi.azurenative.chaos.inputs.DiscreteActionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Model that represents a branch in the step.
 * 
 */
public final class BranchArgs extends com.pulumi.resources.ResourceArgs {

    public static final BranchArgs Empty = new BranchArgs();

    /**
     * List of actions.
     * 
     */
    @Import(name="actions", required=true)
    private Output<List<Object>> actions;

    /**
     * @return List of actions.
     * 
     */
    public Output<List<Object>> actions() {
        return this.actions;
    }

    /**
     * String of the branch name.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return String of the branch name.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    private BranchArgs() {}

    private BranchArgs(BranchArgs $) {
        this.actions = $.actions;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BranchArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BranchArgs $;

        public Builder() {
            $ = new BranchArgs();
        }

        public Builder(BranchArgs defaults) {
            $ = new BranchArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param actions List of actions.
         * 
         * @return builder
         * 
         */
        public Builder actions(Output<List<Object>> actions) {
            $.actions = actions;
            return this;
        }

        /**
         * @param actions List of actions.
         * 
         * @return builder
         * 
         */
        public Builder actions(List<Object> actions) {
            return actions(Output.of(actions));
        }

        /**
         * @param actions List of actions.
         * 
         * @return builder
         * 
         */
        public Builder actions(Object... actions) {
            return actions(List.of(actions));
        }

        /**
         * @param name String of the branch name.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name String of the branch name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public BranchArgs build() {
            $.actions = Objects.requireNonNull($.actions, "expected parameter 'actions' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            return $;
        }
    }

}
