// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.azurenative.datafactory.enums.GlobalParameterType;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;


/**
 * Definition of a single parameter for an entity.
 * 
 */
public final class GlobalParameterSpecificationArgs extends com.pulumi.resources.ResourceArgs {

    public static final GlobalParameterSpecificationArgs Empty = new GlobalParameterSpecificationArgs();

    /**
     * Global Parameter type.
     * 
     */
    @Import(name="type", required=true)
    private Output<Either<String,GlobalParameterType>> type;

    /**
     * @return Global Parameter type.
     * 
     */
    public Output<Either<String,GlobalParameterType>> type() {
        return this.type;
    }

    /**
     * Value of parameter.
     * 
     */
    @Import(name="value", required=true)
    private Output<Object> value;

    /**
     * @return Value of parameter.
     * 
     */
    public Output<Object> value() {
        return this.value;
    }

    private GlobalParameterSpecificationArgs() {}

    private GlobalParameterSpecificationArgs(GlobalParameterSpecificationArgs $) {
        this.type = $.type;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GlobalParameterSpecificationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GlobalParameterSpecificationArgs $;

        public Builder() {
            $ = new GlobalParameterSpecificationArgs();
        }

        public Builder(GlobalParameterSpecificationArgs defaults) {
            $ = new GlobalParameterSpecificationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param type Global Parameter type.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<Either<String,GlobalParameterType>> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Global Parameter type.
         * 
         * @return builder
         * 
         */
        public Builder type(Either<String,GlobalParameterType> type) {
            return type(Output.of(type));
        }

        /**
         * @param type Global Parameter type.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Either.ofLeft(type));
        }

        /**
         * @param type Global Parameter type.
         * 
         * @return builder
         * 
         */
        public Builder type(GlobalParameterType type) {
            return type(Either.ofRight(type));
        }

        /**
         * @param value Value of parameter.
         * 
         * @return builder
         * 
         */
        public Builder value(Output<Object> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value Value of parameter.
         * 
         * @return builder
         * 
         */
        public Builder value(Object value) {
            return value(Output.of(value));
        }

        public GlobalParameterSpecificationArgs build() {
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            $.value = Objects.requireNonNull($.value, "expected parameter 'value' to be non-null");
            return $;
        }
    }

}
