// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.batch.inputs;

import com.pulumi.azurenative.batch.inputs.ResizeErrorResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Describes either the current operation (if the pool AllocationState is Resizing) or the previously completed operation (if the AllocationState is Steady).
 * 
 */
public final class ResizeOperationStatusResponse extends com.pulumi.resources.InvokeArgs {

    public static final ResizeOperationStatusResponse Empty = new ResizeOperationStatusResponse();

    /**
     * This property is set only if an error occurred during the last pool resize, and only when the pool allocationState is Steady.
     * 
     */
    @Import(name="errors")
    private @Nullable List<ResizeErrorResponse> errors;

    public Optional<List<ResizeErrorResponse>> errors() {
        return Optional.ofNullable(this.errors);
    }

    /**
     * The default value is requeue.
     * 
     */
    @Import(name="nodeDeallocationOption")
    private @Nullable String nodeDeallocationOption;

    public Optional<String> nodeDeallocationOption() {
        return Optional.ofNullable(this.nodeDeallocationOption);
    }

    /**
     * The default value is 15 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service returns an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).
     * 
     */
    @Import(name="resizeTimeout")
    private @Nullable String resizeTimeout;

    public Optional<String> resizeTimeout() {
        return Optional.ofNullable(this.resizeTimeout);
    }

    @Import(name="startTime")
    private @Nullable String startTime;

    public Optional<String> startTime() {
        return Optional.ofNullable(this.startTime);
    }

    @Import(name="targetDedicatedNodes")
    private @Nullable Integer targetDedicatedNodes;

    public Optional<Integer> targetDedicatedNodes() {
        return Optional.ofNullable(this.targetDedicatedNodes);
    }

    @Import(name="targetLowPriorityNodes")
    private @Nullable Integer targetLowPriorityNodes;

    public Optional<Integer> targetLowPriorityNodes() {
        return Optional.ofNullable(this.targetLowPriorityNodes);
    }

    private ResizeOperationStatusResponse() {}

    private ResizeOperationStatusResponse(ResizeOperationStatusResponse $) {
        this.errors = $.errors;
        this.nodeDeallocationOption = $.nodeDeallocationOption;
        this.resizeTimeout = $.resizeTimeout;
        this.startTime = $.startTime;
        this.targetDedicatedNodes = $.targetDedicatedNodes;
        this.targetLowPriorityNodes = $.targetLowPriorityNodes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ResizeOperationStatusResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ResizeOperationStatusResponse $;

        public Builder() {
            $ = new ResizeOperationStatusResponse();
        }

        public Builder(ResizeOperationStatusResponse defaults) {
            $ = new ResizeOperationStatusResponse(Objects.requireNonNull(defaults));
        }

        public Builder errors(@Nullable List<ResizeErrorResponse> errors) {
            $.errors = errors;
            return this;
        }

        public Builder errors(ResizeErrorResponse... errors) {
            return errors(List.of(errors));
        }

        public Builder nodeDeallocationOption(@Nullable String nodeDeallocationOption) {
            $.nodeDeallocationOption = nodeDeallocationOption;
            return this;
        }

        public Builder resizeTimeout(@Nullable String resizeTimeout) {
            $.resizeTimeout = resizeTimeout;
            return this;
        }

        public Builder startTime(@Nullable String startTime) {
            $.startTime = startTime;
            return this;
        }

        public Builder targetDedicatedNodes(@Nullable Integer targetDedicatedNodes) {
            $.targetDedicatedNodes = targetDedicatedNodes;
            return this;
        }

        public Builder targetLowPriorityNodes(@Nullable Integer targetLowPriorityNodes) {
            $.targetLowPriorityNodes = targetLowPriorityNodes;
            return this;
        }

        public ResizeOperationStatusResponse build() {
            return $;
        }
    }

}
