// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.machinelearningservices.inputs;

import com.pulumi.azurenative.machinelearningservices.inputs.AzureDataLakeSectionResponse;
import com.pulumi.azurenative.machinelearningservices.inputs.AzureMySqlSectionResponse;
import com.pulumi.azurenative.machinelearningservices.inputs.AzurePostgreSqlSectionResponse;
import com.pulumi.azurenative.machinelearningservices.inputs.AzureSqlDatabaseSectionResponse;
import com.pulumi.azurenative.machinelearningservices.inputs.AzureStorageSectionResponse;
import com.pulumi.azurenative.machinelearningservices.inputs.GlusterFsSectionResponse;
import com.pulumi.azurenative.machinelearningservices.inputs.LinkedInfoResponse;
import com.pulumi.azurenative.machinelearningservices.inputs.UserInfoResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Machine Learning datastore object.
 * 
 */
public final class DatastoreResponse extends com.pulumi.resources.InvokeArgs {

    public static final DatastoreResponse Empty = new DatastoreResponse();

    @Import(name="azureDataLakeSection")
    private @Nullable AzureDataLakeSectionResponse azureDataLakeSection;

    public Optional<AzureDataLakeSectionResponse> azureDataLakeSection() {
        return Optional.ofNullable(this.azureDataLakeSection);
    }

    @Import(name="azureMySqlSection")
    private @Nullable AzureMySqlSectionResponse azureMySqlSection;

    public Optional<AzureMySqlSectionResponse> azureMySqlSection() {
        return Optional.ofNullable(this.azureMySqlSection);
    }

    @Import(name="azurePostgreSqlSection")
    private @Nullable AzurePostgreSqlSectionResponse azurePostgreSqlSection;

    public Optional<AzurePostgreSqlSectionResponse> azurePostgreSqlSection() {
        return Optional.ofNullable(this.azurePostgreSqlSection);
    }

    @Import(name="azureSqlDatabaseSection")
    private @Nullable AzureSqlDatabaseSectionResponse azureSqlDatabaseSection;

    public Optional<AzureSqlDatabaseSectionResponse> azureSqlDatabaseSection() {
        return Optional.ofNullable(this.azureSqlDatabaseSection);
    }

    @Import(name="azureStorageSection")
    private @Nullable AzureStorageSectionResponse azureStorageSection;

    public Optional<AzureStorageSectionResponse> azureStorageSection() {
        return Optional.ofNullable(this.azureStorageSection);
    }

    /**
     * The User who created the datastore.
     * 
     */
    @Import(name="createdBy", required=true)
    private UserInfoResponse createdBy;

    /**
     * @return The User who created the datastore.
     * 
     */
    public UserInfoResponse createdBy() {
        return this.createdBy;
    }

    /**
     * The date and time when the datastore was created.
     * 
     */
    @Import(name="createdTime", required=true)
    private String createdTime;

    /**
     * @return The date and time when the datastore was created.
     * 
     */
    public String createdTime() {
        return this.createdTime;
    }

    /**
     * The datastore type.
     * 
     */
    @Import(name="dataStoreType")
    private @Nullable String dataStoreType;

    /**
     * @return The datastore type.
     * 
     */
    public Optional<String> dataStoreType() {
        return Optional.ofNullable(this.dataStoreType);
    }

    /**
     * Description of the datastore.
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    /**
     * @return Description of the datastore.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Data specific to GlusterFS.
     * 
     */
    @Import(name="glusterFsSection")
    private @Nullable GlusterFsSectionResponse glusterFsSection;

    /**
     * @return Data specific to GlusterFS.
     * 
     */
    public Optional<GlusterFsSectionResponse> glusterFsSection() {
        return Optional.ofNullable(this.glusterFsSection);
    }

    /**
     * A read only property that denotes whether the service datastore has been validated with credentials.
     * 
     */
    @Import(name="hasBeenValidated")
    private @Nullable Boolean hasBeenValidated;

    /**
     * @return A read only property that denotes whether the service datastore has been validated with credentials.
     * 
     */
    public Optional<Boolean> hasBeenValidated() {
        return Optional.ofNullable(this.hasBeenValidated);
    }

    /**
     * Info about origin if it is linked.
     * 
     */
    @Import(name="linkedInfo")
    private @Nullable LinkedInfoResponse linkedInfo;

    /**
     * @return Info about origin if it is linked.
     * 
     */
    public Optional<LinkedInfoResponse> linkedInfo() {
        return Optional.ofNullable(this.linkedInfo);
    }

    /**
     * The User who modified the datastore.
     * 
     */
    @Import(name="modifiedBy", required=true)
    private UserInfoResponse modifiedBy;

    /**
     * @return The User who modified the datastore.
     * 
     */
    public UserInfoResponse modifiedBy() {
        return this.modifiedBy;
    }

    /**
     * The date and time when the datastore was last modified.
     * 
     */
    @Import(name="modifiedTime", required=true)
    private String modifiedTime;

    /**
     * @return The date and time when the datastore was last modified.
     * 
     */
    public String modifiedTime() {
        return this.modifiedTime;
    }

    /**
     * Name of the datastore.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return Name of the datastore.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Tags for this datastore.
     * 
     */
    @Import(name="tags", required=true)
    private Map<String,String> tags;

    /**
     * @return Tags for this datastore.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }

    private DatastoreResponse() {}

    private DatastoreResponse(DatastoreResponse $) {
        this.azureDataLakeSection = $.azureDataLakeSection;
        this.azureMySqlSection = $.azureMySqlSection;
        this.azurePostgreSqlSection = $.azurePostgreSqlSection;
        this.azureSqlDatabaseSection = $.azureSqlDatabaseSection;
        this.azureStorageSection = $.azureStorageSection;
        this.createdBy = $.createdBy;
        this.createdTime = $.createdTime;
        this.dataStoreType = $.dataStoreType;
        this.description = $.description;
        this.glusterFsSection = $.glusterFsSection;
        this.hasBeenValidated = $.hasBeenValidated;
        this.linkedInfo = $.linkedInfo;
        this.modifiedBy = $.modifiedBy;
        this.modifiedTime = $.modifiedTime;
        this.name = $.name;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatastoreResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatastoreResponse $;

        public Builder() {
            $ = new DatastoreResponse();
        }

        public Builder(DatastoreResponse defaults) {
            $ = new DatastoreResponse(Objects.requireNonNull(defaults));
        }

        public Builder azureDataLakeSection(@Nullable AzureDataLakeSectionResponse azureDataLakeSection) {
            $.azureDataLakeSection = azureDataLakeSection;
            return this;
        }

        public Builder azureMySqlSection(@Nullable AzureMySqlSectionResponse azureMySqlSection) {
            $.azureMySqlSection = azureMySqlSection;
            return this;
        }

        public Builder azurePostgreSqlSection(@Nullable AzurePostgreSqlSectionResponse azurePostgreSqlSection) {
            $.azurePostgreSqlSection = azurePostgreSqlSection;
            return this;
        }

        public Builder azureSqlDatabaseSection(@Nullable AzureSqlDatabaseSectionResponse azureSqlDatabaseSection) {
            $.azureSqlDatabaseSection = azureSqlDatabaseSection;
            return this;
        }

        public Builder azureStorageSection(@Nullable AzureStorageSectionResponse azureStorageSection) {
            $.azureStorageSection = azureStorageSection;
            return this;
        }

        /**
         * @param createdBy The User who created the datastore.
         * 
         * @return builder
         * 
         */
        public Builder createdBy(UserInfoResponse createdBy) {
            $.createdBy = createdBy;
            return this;
        }

        /**
         * @param createdTime The date and time when the datastore was created.
         * 
         * @return builder
         * 
         */
        public Builder createdTime(String createdTime) {
            $.createdTime = createdTime;
            return this;
        }

        /**
         * @param dataStoreType The datastore type.
         * 
         * @return builder
         * 
         */
        public Builder dataStoreType(@Nullable String dataStoreType) {
            $.dataStoreType = dataStoreType;
            return this;
        }

        /**
         * @param description Description of the datastore.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        /**
         * @param glusterFsSection Data specific to GlusterFS.
         * 
         * @return builder
         * 
         */
        public Builder glusterFsSection(@Nullable GlusterFsSectionResponse glusterFsSection) {
            $.glusterFsSection = glusterFsSection;
            return this;
        }

        /**
         * @param hasBeenValidated A read only property that denotes whether the service datastore has been validated with credentials.
         * 
         * @return builder
         * 
         */
        public Builder hasBeenValidated(@Nullable Boolean hasBeenValidated) {
            $.hasBeenValidated = hasBeenValidated;
            return this;
        }

        /**
         * @param linkedInfo Info about origin if it is linked.
         * 
         * @return builder
         * 
         */
        public Builder linkedInfo(@Nullable LinkedInfoResponse linkedInfo) {
            $.linkedInfo = linkedInfo;
            return this;
        }

        /**
         * @param modifiedBy The User who modified the datastore.
         * 
         * @return builder
         * 
         */
        public Builder modifiedBy(UserInfoResponse modifiedBy) {
            $.modifiedBy = modifiedBy;
            return this;
        }

        /**
         * @param modifiedTime The date and time when the datastore was last modified.
         * 
         * @return builder
         * 
         */
        public Builder modifiedTime(String modifiedTime) {
            $.modifiedTime = modifiedTime;
            return this;
        }

        /**
         * @param name Name of the datastore.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param tags Tags for this datastore.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            $.tags = tags;
            return this;
        }

        public DatastoreResponse build() {
            $.createdBy = Objects.requireNonNull($.createdBy, "expected parameter 'createdBy' to be non-null");
            $.createdTime = Objects.requireNonNull($.createdTime, "expected parameter 'createdTime' to be non-null");
            $.hasBeenValidated = Codegen.booleanProp("hasBeenValidated").arg($.hasBeenValidated).def(false).getNullable();
            $.modifiedBy = Objects.requireNonNull($.modifiedBy, "expected parameter 'modifiedBy' to be non-null");
            $.modifiedTime = Objects.requireNonNull($.modifiedTime, "expected parameter 'modifiedTime' to be non-null");
            $.tags = Objects.requireNonNull($.tags, "expected parameter 'tags' to be non-null");
            return $;
        }
    }

}
