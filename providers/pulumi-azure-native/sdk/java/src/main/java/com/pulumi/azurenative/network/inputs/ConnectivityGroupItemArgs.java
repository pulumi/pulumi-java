// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.azurenative.network.enums.GroupConnectivity;
import com.pulumi.azurenative.network.enums.IsGlobal;
import com.pulumi.azurenative.network.enums.UseHubGateway;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectivityGroupItemArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectivityGroupItemArgs Empty = new ConnectivityGroupItemArgs();

    /**
     * Group connectivity type.
     * 
     */
    @Import(name="groupConnectivity")
    private @Nullable Output<Either<String,GroupConnectivity>> groupConnectivity;

    /**
     * @return Group connectivity type.
     * 
     */
    public Optional<Output<Either<String,GroupConnectivity>>> groupConnectivity() {
        return Optional.ofNullable(this.groupConnectivity);
    }

    /**
     * Flag if global is supported.
     * 
     */
    @Import(name="isGlobal")
    private @Nullable Output<Either<String,IsGlobal>> isGlobal;

    /**
     * @return Flag if global is supported.
     * 
     */
    public Optional<Output<Either<String,IsGlobal>>> isGlobal() {
        return Optional.ofNullable(this.isGlobal);
    }

    /**
     * Network group Id.
     * 
     */
    @Import(name="networkGroupId")
    private @Nullable Output<String> networkGroupId;

    /**
     * @return Network group Id.
     * 
     */
    public Optional<Output<String>> networkGroupId() {
        return Optional.ofNullable(this.networkGroupId);
    }

    /**
     * Flag if need to use hub gateway.
     * 
     */
    @Import(name="useHubGateway")
    private @Nullable Output<Either<String,UseHubGateway>> useHubGateway;

    /**
     * @return Flag if need to use hub gateway.
     * 
     */
    public Optional<Output<Either<String,UseHubGateway>>> useHubGateway() {
        return Optional.ofNullable(this.useHubGateway);
    }

    private ConnectivityGroupItemArgs() {}

    private ConnectivityGroupItemArgs(ConnectivityGroupItemArgs $) {
        this.groupConnectivity = $.groupConnectivity;
        this.isGlobal = $.isGlobal;
        this.networkGroupId = $.networkGroupId;
        this.useHubGateway = $.useHubGateway;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectivityGroupItemArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectivityGroupItemArgs $;

        public Builder() {
            $ = new ConnectivityGroupItemArgs();
        }

        public Builder(ConnectivityGroupItemArgs defaults) {
            $ = new ConnectivityGroupItemArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param groupConnectivity Group connectivity type.
         * 
         * @return builder
         * 
         */
        public Builder groupConnectivity(@Nullable Output<Either<String,GroupConnectivity>> groupConnectivity) {
            $.groupConnectivity = groupConnectivity;
            return this;
        }

        /**
         * @param groupConnectivity Group connectivity type.
         * 
         * @return builder
         * 
         */
        public Builder groupConnectivity(Either<String,GroupConnectivity> groupConnectivity) {
            return groupConnectivity(Output.of(groupConnectivity));
        }

        /**
         * @param groupConnectivity Group connectivity type.
         * 
         * @return builder
         * 
         */
        public Builder groupConnectivity(String groupConnectivity) {
            return groupConnectivity(Either.ofLeft(groupConnectivity));
        }

        /**
         * @param groupConnectivity Group connectivity type.
         * 
         * @return builder
         * 
         */
        public Builder groupConnectivity(GroupConnectivity groupConnectivity) {
            return groupConnectivity(Either.ofRight(groupConnectivity));
        }

        /**
         * @param isGlobal Flag if global is supported.
         * 
         * @return builder
         * 
         */
        public Builder isGlobal(@Nullable Output<Either<String,IsGlobal>> isGlobal) {
            $.isGlobal = isGlobal;
            return this;
        }

        /**
         * @param isGlobal Flag if global is supported.
         * 
         * @return builder
         * 
         */
        public Builder isGlobal(Either<String,IsGlobal> isGlobal) {
            return isGlobal(Output.of(isGlobal));
        }

        /**
         * @param isGlobal Flag if global is supported.
         * 
         * @return builder
         * 
         */
        public Builder isGlobal(String isGlobal) {
            return isGlobal(Either.ofLeft(isGlobal));
        }

        /**
         * @param isGlobal Flag if global is supported.
         * 
         * @return builder
         * 
         */
        public Builder isGlobal(IsGlobal isGlobal) {
            return isGlobal(Either.ofRight(isGlobal));
        }

        /**
         * @param networkGroupId Network group Id.
         * 
         * @return builder
         * 
         */
        public Builder networkGroupId(@Nullable Output<String> networkGroupId) {
            $.networkGroupId = networkGroupId;
            return this;
        }

        /**
         * @param networkGroupId Network group Id.
         * 
         * @return builder
         * 
         */
        public Builder networkGroupId(String networkGroupId) {
            return networkGroupId(Output.of(networkGroupId));
        }

        /**
         * @param useHubGateway Flag if need to use hub gateway.
         * 
         * @return builder
         * 
         */
        public Builder useHubGateway(@Nullable Output<Either<String,UseHubGateway>> useHubGateway) {
            $.useHubGateway = useHubGateway;
            return this;
        }

        /**
         * @param useHubGateway Flag if need to use hub gateway.
         * 
         * @return builder
         * 
         */
        public Builder useHubGateway(Either<String,UseHubGateway> useHubGateway) {
            return useHubGateway(Output.of(useHubGateway));
        }

        /**
         * @param useHubGateway Flag if need to use hub gateway.
         * 
         * @return builder
         * 
         */
        public Builder useHubGateway(String useHubGateway) {
            return useHubGateway(Either.ofLeft(useHubGateway));
        }

        /**
         * @param useHubGateway Flag if need to use hub gateway.
         * 
         * @return builder
         * 
         */
        public Builder useHubGateway(UseHubGateway useHubGateway) {
            return useHubGateway(Either.ofRight(useHubGateway));
        }

        public ConnectivityGroupItemArgs build() {
            return $;
        }
    }

}
