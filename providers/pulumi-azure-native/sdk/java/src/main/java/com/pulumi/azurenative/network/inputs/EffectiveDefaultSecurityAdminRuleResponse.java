// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.azurenative.network.inputs.AddressPrefixItemResponse;
import com.pulumi.azurenative.network.inputs.ConfigurationGroupResponse;
import com.pulumi.azurenative.network.inputs.NetworkManagerSecurityGroupItemResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Network default admin rule.
 * 
 */
public final class EffectiveDefaultSecurityAdminRuleResponse extends com.pulumi.resources.InvokeArgs {

    public static final EffectiveDefaultSecurityAdminRuleResponse Empty = new EffectiveDefaultSecurityAdminRuleResponse();

    /**
     * Indicates the access allowed for this particular rule
     * 
     */
    @Import(name="access", required=true)
    private String access;

    public String access() {
        return this.access;
    }

    /**
     * A description of the security admin configuration.
     * 
     */
    @Import(name="configurationDescription")
    private @Nullable String configurationDescription;

    public Optional<String> configurationDescription() {
        return Optional.ofNullable(this.configurationDescription);
    }

    /**
     * A display name of the security admin configuration.
     * 
     */
    @Import(name="configurationDisplayName")
    private @Nullable String configurationDisplayName;

    public Optional<String> configurationDisplayName() {
        return Optional.ofNullable(this.configurationDisplayName);
    }

    /**
     * A description for this rule. Restricted to 140 chars.
     * 
     */
    @Import(name="description", required=true)
    private String description;

    public String description() {
        return this.description;
    }

    /**
     * The destination port ranges.
     * 
     */
    @Import(name="destinationPortRanges", required=true)
    private List<String> destinationPortRanges;

    public List<String> destinationPortRanges() {
        return this.destinationPortRanges;
    }

    /**
     * The destination address prefixes. CIDR or destination IP ranges.
     * 
     */
    @Import(name="destinations", required=true)
    private List<AddressPrefixItemResponse> destinations;

    public List<AddressPrefixItemResponse> destinations() {
        return this.destinations;
    }

    /**
     * Indicates if the traffic matched against the rule in inbound or outbound.
     * 
     */
    @Import(name="direction", required=true)
    private String direction;

    public String direction() {
        return this.direction;
    }

    /**
     * A friendly name for the rule.
     * 
     */
    @Import(name="displayName", required=true)
    private String displayName;

    public String displayName() {
        return this.displayName;
    }

    /**
     * Default rule flag.
     * 
     */
    @Import(name="flag")
    private @Nullable String flag;

    public Optional<String> flag() {
        return Optional.ofNullable(this.flag);
    }

    /**
     * Resource ID.
     * 
     */
    @Import(name="id")
    private @Nullable String id;

    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Whether the rule is custom or default.
     * Expected value is &#39;Default&#39;.
     * 
     */
    @Import(name="kind", required=true)
    private String kind;

    public String kind() {
        return this.kind;
    }

    /**
     * The priority of the rule. The value can be between 1 and 4096. The priority number must be unique for each rule in the collection. The lower the priority number, the higher the priority of the rule.
     * 
     */
    @Import(name="priority", required=true)
    private Integer priority;

    public Integer priority() {
        return this.priority;
    }

    /**
     * Network protocol this rule applies to.
     * 
     */
    @Import(name="protocol", required=true)
    private String protocol;

    public String protocol() {
        return this.protocol;
    }

    /**
     * The provisioning state of the resource.
     * 
     */
    @Import(name="provisioningState", required=true)
    private String provisioningState;

    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Groups for rule collection
     * 
     */
    @Import(name="ruleCollectionAppliesToGroups")
    private @Nullable List<NetworkManagerSecurityGroupItemResponse> ruleCollectionAppliesToGroups;

    public Optional<List<NetworkManagerSecurityGroupItemResponse>> ruleCollectionAppliesToGroups() {
        return Optional.ofNullable(this.ruleCollectionAppliesToGroups);
    }

    /**
     * A description of the rule collection.
     * 
     */
    @Import(name="ruleCollectionDescription")
    private @Nullable String ruleCollectionDescription;

    public Optional<String> ruleCollectionDescription() {
        return Optional.ofNullable(this.ruleCollectionDescription);
    }

    /**
     * A display name of the rule collection.
     * 
     */
    @Import(name="ruleCollectionDisplayName")
    private @Nullable String ruleCollectionDisplayName;

    public Optional<String> ruleCollectionDisplayName() {
        return Optional.ofNullable(this.ruleCollectionDisplayName);
    }

    /**
     * Effective configuration groups.
     * 
     */
    @Import(name="ruleGroups")
    private @Nullable List<ConfigurationGroupResponse> ruleGroups;

    public Optional<List<ConfigurationGroupResponse>> ruleGroups() {
        return Optional.ofNullable(this.ruleGroups);
    }

    /**
     * The source port ranges.
     * 
     */
    @Import(name="sourcePortRanges", required=true)
    private List<String> sourcePortRanges;

    public List<String> sourcePortRanges() {
        return this.sourcePortRanges;
    }

    /**
     * The CIDR or source IP ranges.
     * 
     */
    @Import(name="sources", required=true)
    private List<AddressPrefixItemResponse> sources;

    public List<AddressPrefixItemResponse> sources() {
        return this.sources;
    }

    private EffectiveDefaultSecurityAdminRuleResponse() {}

    private EffectiveDefaultSecurityAdminRuleResponse(EffectiveDefaultSecurityAdminRuleResponse $) {
        this.access = $.access;
        this.configurationDescription = $.configurationDescription;
        this.configurationDisplayName = $.configurationDisplayName;
        this.description = $.description;
        this.destinationPortRanges = $.destinationPortRanges;
        this.destinations = $.destinations;
        this.direction = $.direction;
        this.displayName = $.displayName;
        this.flag = $.flag;
        this.id = $.id;
        this.kind = $.kind;
        this.priority = $.priority;
        this.protocol = $.protocol;
        this.provisioningState = $.provisioningState;
        this.ruleCollectionAppliesToGroups = $.ruleCollectionAppliesToGroups;
        this.ruleCollectionDescription = $.ruleCollectionDescription;
        this.ruleCollectionDisplayName = $.ruleCollectionDisplayName;
        this.ruleGroups = $.ruleGroups;
        this.sourcePortRanges = $.sourcePortRanges;
        this.sources = $.sources;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EffectiveDefaultSecurityAdminRuleResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EffectiveDefaultSecurityAdminRuleResponse $;

        public Builder() {
            $ = new EffectiveDefaultSecurityAdminRuleResponse();
        }

        public Builder(EffectiveDefaultSecurityAdminRuleResponse defaults) {
            $ = new EffectiveDefaultSecurityAdminRuleResponse(Objects.requireNonNull(defaults));
        }

        public Builder access(String access) {
            $.access = access;
            return this;
        }

        public Builder configurationDescription(@Nullable String configurationDescription) {
            $.configurationDescription = configurationDescription;
            return this;
        }

        public Builder configurationDisplayName(@Nullable String configurationDisplayName) {
            $.configurationDisplayName = configurationDisplayName;
            return this;
        }

        public Builder description(String description) {
            $.description = description;
            return this;
        }

        public Builder destinationPortRanges(List<String> destinationPortRanges) {
            $.destinationPortRanges = destinationPortRanges;
            return this;
        }

        public Builder destinationPortRanges(String... destinationPortRanges) {
            return destinationPortRanges(List.of(destinationPortRanges));
        }

        public Builder destinations(List<AddressPrefixItemResponse> destinations) {
            $.destinations = destinations;
            return this;
        }

        public Builder destinations(AddressPrefixItemResponse... destinations) {
            return destinations(List.of(destinations));
        }

        public Builder direction(String direction) {
            $.direction = direction;
            return this;
        }

        public Builder displayName(String displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder flag(@Nullable String flag) {
            $.flag = flag;
            return this;
        }

        public Builder id(@Nullable String id) {
            $.id = id;
            return this;
        }

        public Builder kind(String kind) {
            $.kind = kind;
            return this;
        }

        public Builder priority(Integer priority) {
            $.priority = priority;
            return this;
        }

        public Builder protocol(String protocol) {
            $.protocol = protocol;
            return this;
        }

        public Builder provisioningState(String provisioningState) {
            $.provisioningState = provisioningState;
            return this;
        }

        public Builder ruleCollectionAppliesToGroups(@Nullable List<NetworkManagerSecurityGroupItemResponse> ruleCollectionAppliesToGroups) {
            $.ruleCollectionAppliesToGroups = ruleCollectionAppliesToGroups;
            return this;
        }

        public Builder ruleCollectionAppliesToGroups(NetworkManagerSecurityGroupItemResponse... ruleCollectionAppliesToGroups) {
            return ruleCollectionAppliesToGroups(List.of(ruleCollectionAppliesToGroups));
        }

        public Builder ruleCollectionDescription(@Nullable String ruleCollectionDescription) {
            $.ruleCollectionDescription = ruleCollectionDescription;
            return this;
        }

        public Builder ruleCollectionDisplayName(@Nullable String ruleCollectionDisplayName) {
            $.ruleCollectionDisplayName = ruleCollectionDisplayName;
            return this;
        }

        public Builder ruleGroups(@Nullable List<ConfigurationGroupResponse> ruleGroups) {
            $.ruleGroups = ruleGroups;
            return this;
        }

        public Builder ruleGroups(ConfigurationGroupResponse... ruleGroups) {
            return ruleGroups(List.of(ruleGroups));
        }

        public Builder sourcePortRanges(List<String> sourcePortRanges) {
            $.sourcePortRanges = sourcePortRanges;
            return this;
        }

        public Builder sourcePortRanges(String... sourcePortRanges) {
            return sourcePortRanges(List.of(sourcePortRanges));
        }

        public Builder sources(List<AddressPrefixItemResponse> sources) {
            $.sources = sources;
            return this;
        }

        public Builder sources(AddressPrefixItemResponse... sources) {
            return sources(List.of(sources));
        }

        public EffectiveDefaultSecurityAdminRuleResponse build() {
            $.access = Objects.requireNonNull($.access, "expected parameter 'access' to be non-null");
            $.description = Objects.requireNonNull($.description, "expected parameter 'description' to be non-null");
            $.destinationPortRanges = Objects.requireNonNull($.destinationPortRanges, "expected parameter 'destinationPortRanges' to be non-null");
            $.destinations = Objects.requireNonNull($.destinations, "expected parameter 'destinations' to be non-null");
            $.direction = Objects.requireNonNull($.direction, "expected parameter 'direction' to be non-null");
            $.displayName = Objects.requireNonNull($.displayName, "expected parameter 'displayName' to be non-null");
            $.kind = Codegen.stringProp("kind").arg($.kind).require();
            $.priority = Objects.requireNonNull($.priority, "expected parameter 'priority' to be non-null");
            $.protocol = Objects.requireNonNull($.protocol, "expected parameter 'protocol' to be non-null");
            $.provisioningState = Objects.requireNonNull($.provisioningState, "expected parameter 'provisioningState' to be non-null");
            $.sourcePortRanges = Objects.requireNonNull($.sourcePortRanges, "expected parameter 'sourcePortRanges' to be non-null");
            $.sources = Objects.requireNonNull($.sources, "expected parameter 'sources' to be non-null");
            return $;
        }
    }

}
