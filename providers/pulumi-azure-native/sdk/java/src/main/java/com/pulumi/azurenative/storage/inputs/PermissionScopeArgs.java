// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.storage.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class PermissionScopeArgs extends com.pulumi.resources.ResourceArgs {

    public static final PermissionScopeArgs Empty = new PermissionScopeArgs();

    /**
     * The permissions for the local user. Possible values include: Read (r), Write (w), Delete (d), List (l), and Create (c).
     * 
     */
    @Import(name="permissions", required=true)
    private Output<String> permissions;

    /**
     * @return The permissions for the local user. Possible values include: Read (r), Write (w), Delete (d), List (l), and Create (c).
     * 
     */
    public Output<String> permissions() {
        return this.permissions;
    }

    /**
     * The name of resource, normally the container name or the file share name, used by the local user.
     * 
     */
    @Import(name="resourceName", required=true)
    private Output<String> resourceName;

    /**
     * @return The name of resource, normally the container name or the file share name, used by the local user.
     * 
     */
    public Output<String> resourceName() {
        return this.resourceName;
    }

    /**
     * The service used by the local user, e.g. blob, file.
     * 
     */
    @Import(name="service", required=true)
    private Output<String> service;

    /**
     * @return The service used by the local user, e.g. blob, file.
     * 
     */
    public Output<String> service() {
        return this.service;
    }

    private PermissionScopeArgs() {}

    private PermissionScopeArgs(PermissionScopeArgs $) {
        this.permissions = $.permissions;
        this.resourceName = $.resourceName;
        this.service = $.service;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PermissionScopeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PermissionScopeArgs $;

        public Builder() {
            $ = new PermissionScopeArgs();
        }

        public Builder(PermissionScopeArgs defaults) {
            $ = new PermissionScopeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param permissions The permissions for the local user. Possible values include: Read (r), Write (w), Delete (d), List (l), and Create (c).
         * 
         * @return builder
         * 
         */
        public Builder permissions(Output<String> permissions) {
            $.permissions = permissions;
            return this;
        }

        /**
         * @param permissions The permissions for the local user. Possible values include: Read (r), Write (w), Delete (d), List (l), and Create (c).
         * 
         * @return builder
         * 
         */
        public Builder permissions(String permissions) {
            return permissions(Output.of(permissions));
        }

        /**
         * @param resourceName The name of resource, normally the container name or the file share name, used by the local user.
         * 
         * @return builder
         * 
         */
        public Builder resourceName(Output<String> resourceName) {
            $.resourceName = resourceName;
            return this;
        }

        /**
         * @param resourceName The name of resource, normally the container name or the file share name, used by the local user.
         * 
         * @return builder
         * 
         */
        public Builder resourceName(String resourceName) {
            return resourceName(Output.of(resourceName));
        }

        /**
         * @param service The service used by the local user, e.g. blob, file.
         * 
         * @return builder
         * 
         */
        public Builder service(Output<String> service) {
            $.service = service;
            return this;
        }

        /**
         * @param service The service used by the local user, e.g. blob, file.
         * 
         * @return builder
         * 
         */
        public Builder service(String service) {
            return service(Output.of(service));
        }

        public PermissionScopeArgs build() {
            $.permissions = Objects.requireNonNull($.permissions, "expected parameter 'permissions' to be non-null");
            $.resourceName = Objects.requireNonNull($.resourceName, "expected parameter 'resourceName' to be non-null");
            $.service = Objects.requireNonNull($.service, "expected parameter 'service' to be non-null");
            return $;
        }
    }

}
