// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.cdn.inputs;

import com.pulumi.azurenative.cdn.inputs.ResourceReferenceResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Customer Certificate used for https
 * 
 */
public final class CustomerCertificateParametersResponse extends com.pulumi.resources.InvokeArgs {

    public static final CustomerCertificateParametersResponse Empty = new CustomerCertificateParametersResponse();

    /**
     * Certificate issuing authority.
     * 
     */
    @Import(name="certificateAuthority")
    private @Nullable String certificateAuthority;

    public Optional<String> certificateAuthority() {
        return Optional.ofNullable(this.certificateAuthority);
    }

    /**
     * Resource reference to the KV secret
     * 
     */
    @Import(name="secretSource", required=true)
    private ResourceReferenceResponse secretSource;

    public ResourceReferenceResponse secretSource() {
        return this.secretSource;
    }

    /**
     * Version of the secret to be used
     * 
     */
    @Import(name="secretVersion")
    private @Nullable String secretVersion;

    public Optional<String> secretVersion() {
        return Optional.ofNullable(this.secretVersion);
    }

    /**
     * The list of SANs.
     * 
     */
    @Import(name="subjectAlternativeNames")
    private @Nullable List<String> subjectAlternativeNames;

    public Optional<List<String>> subjectAlternativeNames() {
        return Optional.ofNullable(this.subjectAlternativeNames);
    }

    /**
     * The type of the Secret to create.
     * Expected value is &#39;CustomerCertificate&#39;.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    public String type() {
        return this.type;
    }

    /**
     * Whether to use the latest version for the certificate
     * 
     */
    @Import(name="useLatestVersion")
    private @Nullable Boolean useLatestVersion;

    public Optional<Boolean> useLatestVersion() {
        return Optional.ofNullable(this.useLatestVersion);
    }

    private CustomerCertificateParametersResponse() {}

    private CustomerCertificateParametersResponse(CustomerCertificateParametersResponse $) {
        this.certificateAuthority = $.certificateAuthority;
        this.secretSource = $.secretSource;
        this.secretVersion = $.secretVersion;
        this.subjectAlternativeNames = $.subjectAlternativeNames;
        this.type = $.type;
        this.useLatestVersion = $.useLatestVersion;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CustomerCertificateParametersResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CustomerCertificateParametersResponse $;

        public Builder() {
            $ = new CustomerCertificateParametersResponse();
        }

        public Builder(CustomerCertificateParametersResponse defaults) {
            $ = new CustomerCertificateParametersResponse(Objects.requireNonNull(defaults));
        }

        public Builder certificateAuthority(@Nullable String certificateAuthority) {
            $.certificateAuthority = certificateAuthority;
            return this;
        }

        public Builder secretSource(ResourceReferenceResponse secretSource) {
            $.secretSource = secretSource;
            return this;
        }

        public Builder secretVersion(@Nullable String secretVersion) {
            $.secretVersion = secretVersion;
            return this;
        }

        public Builder subjectAlternativeNames(@Nullable List<String> subjectAlternativeNames) {
            $.subjectAlternativeNames = subjectAlternativeNames;
            return this;
        }

        public Builder subjectAlternativeNames(String... subjectAlternativeNames) {
            return subjectAlternativeNames(List.of(subjectAlternativeNames));
        }

        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public Builder useLatestVersion(@Nullable Boolean useLatestVersion) {
            $.useLatestVersion = useLatestVersion;
            return this;
        }

        public CustomerCertificateParametersResponse build() {
            $.secretSource = Objects.requireNonNull($.secretSource, "expected parameter 'secretSource' to be non-null");
            $.type = Codegen.stringProp("type").arg($.type).require();
            return $;
        }
    }

}
