// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.managedservices.inputs;

import com.pulumi.azurenative.managedservices.inputs.AuthorizationResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Properties of registration definition inside registration assignment.
 * 
 */
public final class RegistrationAssignmentPropertiesResponseProperties extends com.pulumi.resources.InvokeArgs {

    public static final RegistrationAssignmentPropertiesResponseProperties Empty = new RegistrationAssignmentPropertiesResponseProperties();

    /**
     * Authorization tuple containing principal id of the user/security group or service principal and id of the build-in role.
     * 
     */
    @Import(name="authorizations")
    private @Nullable List<AuthorizationResponse> authorizations;

    public Optional<List<AuthorizationResponse>> authorizations() {
        return Optional.ofNullable(this.authorizations);
    }

    /**
     * Description of the registration definition.
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Id of the managedBy tenant.
     * 
     */
    @Import(name="managedByTenantId")
    private @Nullable String managedByTenantId;

    public Optional<String> managedByTenantId() {
        return Optional.ofNullable(this.managedByTenantId);
    }

    /**
     * Name of the managedBy tenant.
     * 
     */
    @Import(name="managedByTenantName")
    private @Nullable String managedByTenantName;

    public Optional<String> managedByTenantName() {
        return Optional.ofNullable(this.managedByTenantName);
    }

    /**
     * Id of the home tenant.
     * 
     */
    @Import(name="manageeTenantId")
    private @Nullable String manageeTenantId;

    public Optional<String> manageeTenantId() {
        return Optional.ofNullable(this.manageeTenantId);
    }

    /**
     * Name of the home tenant.
     * 
     */
    @Import(name="manageeTenantName")
    private @Nullable String manageeTenantName;

    public Optional<String> manageeTenantName() {
        return Optional.ofNullable(this.manageeTenantName);
    }

    /**
     * Current state of the registration definition.
     * 
     */
    @Import(name="provisioningState")
    private @Nullable String provisioningState;

    public Optional<String> provisioningState() {
        return Optional.ofNullable(this.provisioningState);
    }

    /**
     * Name of the registration definition.
     * 
     */
    @Import(name="registrationDefinitionName")
    private @Nullable String registrationDefinitionName;

    public Optional<String> registrationDefinitionName() {
        return Optional.ofNullable(this.registrationDefinitionName);
    }

    private RegistrationAssignmentPropertiesResponseProperties() {}

    private RegistrationAssignmentPropertiesResponseProperties(RegistrationAssignmentPropertiesResponseProperties $) {
        this.authorizations = $.authorizations;
        this.description = $.description;
        this.managedByTenantId = $.managedByTenantId;
        this.managedByTenantName = $.managedByTenantName;
        this.manageeTenantId = $.manageeTenantId;
        this.manageeTenantName = $.manageeTenantName;
        this.provisioningState = $.provisioningState;
        this.registrationDefinitionName = $.registrationDefinitionName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RegistrationAssignmentPropertiesResponseProperties defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RegistrationAssignmentPropertiesResponseProperties $;

        public Builder() {
            $ = new RegistrationAssignmentPropertiesResponseProperties();
        }

        public Builder(RegistrationAssignmentPropertiesResponseProperties defaults) {
            $ = new RegistrationAssignmentPropertiesResponseProperties(Objects.requireNonNull(defaults));
        }

        public Builder authorizations(@Nullable List<AuthorizationResponse> authorizations) {
            $.authorizations = authorizations;
            return this;
        }

        public Builder authorizations(AuthorizationResponse... authorizations) {
            return authorizations(List.of(authorizations));
        }

        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        public Builder managedByTenantId(@Nullable String managedByTenantId) {
            $.managedByTenantId = managedByTenantId;
            return this;
        }

        public Builder managedByTenantName(@Nullable String managedByTenantName) {
            $.managedByTenantName = managedByTenantName;
            return this;
        }

        public Builder manageeTenantId(@Nullable String manageeTenantId) {
            $.manageeTenantId = manageeTenantId;
            return this;
        }

        public Builder manageeTenantName(@Nullable String manageeTenantName) {
            $.manageeTenantName = manageeTenantName;
            return this;
        }

        public Builder provisioningState(@Nullable String provisioningState) {
            $.provisioningState = provisioningState;
            return this;
        }

        public Builder registrationDefinitionName(@Nullable String registrationDefinitionName) {
            $.registrationDefinitionName = registrationDefinitionName;
            return this;
        }

        public RegistrationAssignmentPropertiesResponseProperties build() {
            return $;
        }
    }

}
