// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.storage;

import com.pulumi.azurenative.storage.enums.EncryptionScopeSource;
import com.pulumi.azurenative.storage.enums.EncryptionScopeState;
import com.pulumi.azurenative.storage.inputs.EncryptionScopeKeyVaultPropertiesArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class EncryptionScopeArgs extends com.pulumi.resources.ResourceArgs {

    public static final EncryptionScopeArgs Empty = new EncryptionScopeArgs();

    /**
     * The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
     * 
     */
    @Import(name="accountName", required=true)
      private final Output<String> accountName;

    public Output<String> accountName() {
        return this.accountName;
    }

    /**
     * The name of the encryption scope within the specified storage account. Encryption scope names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number.
     * 
     */
    @Import(name="encryptionScopeName")
      private final @Nullable Output<String> encryptionScopeName;

    public Output<String> encryptionScopeName() {
        return this.encryptionScopeName == null ? Codegen.empty() : this.encryptionScopeName;
    }

    /**
     * The key vault properties for the encryption scope. This is a required field if encryption scope 'source' attribute is set to 'Microsoft.KeyVault'.
     * 
     */
    @Import(name="keyVaultProperties")
      private final @Nullable Output<EncryptionScopeKeyVaultPropertiesArgs> keyVaultProperties;

    public Output<EncryptionScopeKeyVaultPropertiesArgs> keyVaultProperties() {
        return this.keyVaultProperties == null ? Codegen.empty() : this.keyVaultProperties;
    }

    /**
     * A boolean indicating whether or not the service applies a secondary layer of encryption with platform managed keys for data at rest.
     * 
     */
    @Import(name="requireInfrastructureEncryption")
      private final @Nullable Output<Boolean> requireInfrastructureEncryption;

    public Output<Boolean> requireInfrastructureEncryption() {
        return this.requireInfrastructureEncryption == null ? Codegen.empty() : this.requireInfrastructureEncryption;
    }

    /**
     * The name of the resource group within the user's subscription. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The provider for the encryption scope. Possible values (case-insensitive):  Microsoft.Storage, Microsoft.KeyVault.
     * 
     */
    @Import(name="source")
      private final @Nullable Output<Either<String,EncryptionScopeSource>> source;

    public Output<Either<String,EncryptionScopeSource>> source() {
        return this.source == null ? Codegen.empty() : this.source;
    }

    /**
     * The state of the encryption scope. Possible values (case-insensitive):  Enabled, Disabled.
     * 
     */
    @Import(name="state")
      private final @Nullable Output<Either<String,EncryptionScopeState>> state;

    public Output<Either<String,EncryptionScopeState>> state() {
        return this.state == null ? Codegen.empty() : this.state;
    }

    public EncryptionScopeArgs(
        Output<String> accountName,
        @Nullable Output<String> encryptionScopeName,
        @Nullable Output<EncryptionScopeKeyVaultPropertiesArgs> keyVaultProperties,
        @Nullable Output<Boolean> requireInfrastructureEncryption,
        Output<String> resourceGroupName,
        @Nullable Output<Either<String,EncryptionScopeSource>> source,
        @Nullable Output<Either<String,EncryptionScopeState>> state) {
        this.accountName = Objects.requireNonNull(accountName, "expected parameter 'accountName' to be non-null");
        this.encryptionScopeName = encryptionScopeName;
        this.keyVaultProperties = keyVaultProperties;
        this.requireInfrastructureEncryption = requireInfrastructureEncryption;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.source = source;
        this.state = state;
    }

    private EncryptionScopeArgs() {
        this.accountName = Codegen.empty();
        this.encryptionScopeName = Codegen.empty();
        this.keyVaultProperties = Codegen.empty();
        this.requireInfrastructureEncryption = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.source = Codegen.empty();
        this.state = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EncryptionScopeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> accountName;
        private @Nullable Output<String> encryptionScopeName;
        private @Nullable Output<EncryptionScopeKeyVaultPropertiesArgs> keyVaultProperties;
        private @Nullable Output<Boolean> requireInfrastructureEncryption;
        private Output<String> resourceGroupName;
        private @Nullable Output<Either<String,EncryptionScopeSource>> source;
        private @Nullable Output<Either<String,EncryptionScopeState>> state;

        public Builder() {
    	      // Empty
        }

        public Builder(EncryptionScopeArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountName = defaults.accountName;
    	      this.encryptionScopeName = defaults.encryptionScopeName;
    	      this.keyVaultProperties = defaults.keyVaultProperties;
    	      this.requireInfrastructureEncryption = defaults.requireInfrastructureEncryption;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.source = defaults.source;
    	      this.state = defaults.state;
        }

        public Builder accountName(Output<String> accountName) {
            this.accountName = Objects.requireNonNull(accountName);
            return this;
        }
        public Builder accountName(String accountName) {
            this.accountName = Output.of(Objects.requireNonNull(accountName));
            return this;
        }
        public Builder encryptionScopeName(@Nullable Output<String> encryptionScopeName) {
            this.encryptionScopeName = encryptionScopeName;
            return this;
        }
        public Builder encryptionScopeName(@Nullable String encryptionScopeName) {
            this.encryptionScopeName = Codegen.ofNullable(encryptionScopeName);
            return this;
        }
        public Builder keyVaultProperties(@Nullable Output<EncryptionScopeKeyVaultPropertiesArgs> keyVaultProperties) {
            this.keyVaultProperties = keyVaultProperties;
            return this;
        }
        public Builder keyVaultProperties(@Nullable EncryptionScopeKeyVaultPropertiesArgs keyVaultProperties) {
            this.keyVaultProperties = Codegen.ofNullable(keyVaultProperties);
            return this;
        }
        public Builder requireInfrastructureEncryption(@Nullable Output<Boolean> requireInfrastructureEncryption) {
            this.requireInfrastructureEncryption = requireInfrastructureEncryption;
            return this;
        }
        public Builder requireInfrastructureEncryption(@Nullable Boolean requireInfrastructureEncryption) {
            this.requireInfrastructureEncryption = Codegen.ofNullable(requireInfrastructureEncryption);
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder source(@Nullable Output<Either<String,EncryptionScopeSource>> source) {
            this.source = source;
            return this;
        }
        public Builder source(@Nullable Either<String,EncryptionScopeSource> source) {
            this.source = Codegen.ofNullable(source);
            return this;
        }
        public Builder state(@Nullable Output<Either<String,EncryptionScopeState>> state) {
            this.state = state;
            return this;
        }
        public Builder state(@Nullable Either<String,EncryptionScopeState> state) {
            this.state = Codegen.ofNullable(state);
            return this;
        }        public EncryptionScopeArgs build() {
            return new EncryptionScopeArgs(accountName, encryptionScopeName, keyVaultProperties, requireInfrastructureEncryption, resourceGroupName, source, state);
        }
    }
}
