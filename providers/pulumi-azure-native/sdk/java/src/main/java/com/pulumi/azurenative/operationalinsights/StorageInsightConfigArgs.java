// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.operationalinsights;

import com.pulumi.azurenative.operationalinsights.inputs.StorageAccountArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StorageInsightConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final StorageInsightConfigArgs Empty = new StorageInsightConfigArgs();

    /**
     * The names of the blob containers that the workspace should read
     * 
     */
    @Import(name="containers")
    private @Nullable Output<List<String>> containers;

    public Optional<Output<List<String>>> containers() {
        return Optional.ofNullable(this.containers);
    }

    /**
     * The ETag of the storage insight.
     * 
     */
    @Import(name="eTag")
    private @Nullable Output<String> eTag;

    public Optional<Output<String>> eTag() {
        return Optional.ofNullable(this.eTag);
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The storage account connection details
     * 
     */
    @Import(name="storageAccount", required=true)
    private Output<StorageAccountArgs> storageAccount;

    public Output<StorageAccountArgs> storageAccount() {
        return this.storageAccount;
    }

    /**
     * Name of the storageInsightsConfigs resource
     * 
     */
    @Import(name="storageInsightName")
    private @Nullable Output<String> storageInsightName;

    public Optional<Output<String>> storageInsightName() {
        return Optional.ofNullable(this.storageInsightName);
    }

    /**
     * The names of the Azure tables that the workspace should read
     * 
     */
    @Import(name="tables")
    private @Nullable Output<List<String>> tables;

    public Optional<Output<List<String>>> tables() {
        return Optional.ofNullable(this.tables);
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The name of the workspace.
     * 
     */
    @Import(name="workspaceName", required=true)
    private Output<String> workspaceName;

    public Output<String> workspaceName() {
        return this.workspaceName;
    }

    private StorageInsightConfigArgs() {}

    private StorageInsightConfigArgs(StorageInsightConfigArgs $) {
        this.containers = $.containers;
        this.eTag = $.eTag;
        this.resourceGroupName = $.resourceGroupName;
        this.storageAccount = $.storageAccount;
        this.storageInsightName = $.storageInsightName;
        this.tables = $.tables;
        this.tags = $.tags;
        this.workspaceName = $.workspaceName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StorageInsightConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StorageInsightConfigArgs $;

        public Builder() {
            $ = new StorageInsightConfigArgs();
        }

        public Builder(StorageInsightConfigArgs defaults) {
            $ = new StorageInsightConfigArgs(Objects.requireNonNull(defaults));
        }

        public Builder containers(@Nullable Output<List<String>> containers) {
            $.containers = containers;
            return this;
        }

        public Builder containers(List<String> containers) {
            return containers(Output.of(containers));
        }

        public Builder containers(String... containers) {
            return containers(List.of(containers));
        }

        public Builder eTag(@Nullable Output<String> eTag) {
            $.eTag = eTag;
            return this;
        }

        public Builder eTag(String eTag) {
            return eTag(Output.of(eTag));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder storageAccount(Output<StorageAccountArgs> storageAccount) {
            $.storageAccount = storageAccount;
            return this;
        }

        public Builder storageAccount(StorageAccountArgs storageAccount) {
            return storageAccount(Output.of(storageAccount));
        }

        public Builder storageInsightName(@Nullable Output<String> storageInsightName) {
            $.storageInsightName = storageInsightName;
            return this;
        }

        public Builder storageInsightName(String storageInsightName) {
            return storageInsightName(Output.of(storageInsightName));
        }

        public Builder tables(@Nullable Output<List<String>> tables) {
            $.tables = tables;
            return this;
        }

        public Builder tables(List<String> tables) {
            return tables(Output.of(tables));
        }

        public Builder tables(String... tables) {
            return tables(List.of(tables));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder workspaceName(Output<String> workspaceName) {
            $.workspaceName = workspaceName;
            return this;
        }

        public Builder workspaceName(String workspaceName) {
            return workspaceName(Output.of(workspaceName));
        }

        public StorageInsightConfigArgs build() {
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.storageAccount = Objects.requireNonNull($.storageAccount, "expected parameter 'storageAccount' to be non-null");
            $.workspaceName = Objects.requireNonNull($.workspaceName, "expected parameter 'workspaceName' to be non-null");
            return $;
        }
    }

}
