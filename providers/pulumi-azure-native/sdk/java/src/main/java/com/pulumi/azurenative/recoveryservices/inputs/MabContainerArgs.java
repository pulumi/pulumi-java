// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.recoveryservices.inputs;

import com.pulumi.azurenative.recoveryservices.enums.BackupManagementType;
import com.pulumi.azurenative.recoveryservices.inputs.MABContainerHealthDetailsArgs;
import com.pulumi.azurenative.recoveryservices.inputs.MabContainerExtendedInfoArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Container with items backed up using MAB backup engine.
 * 
 */
public final class MabContainerArgs extends com.pulumi.resources.ResourceArgs {

    public static final MabContainerArgs Empty = new MabContainerArgs();

    /**
     * Agent version of this container.
     * 
     */
    @Import(name="agentVersion")
      private final @Nullable Output<String> agentVersion;

    public Output<String> agentVersion() {
        return this.agentVersion == null ? Codegen.empty() : this.agentVersion;
    }

    /**
     * Type of backup management for the container.
     * 
     */
    @Import(name="backupManagementType")
      private final @Nullable Output<Either<String,BackupManagementType>> backupManagementType;

    public Output<Either<String,BackupManagementType>> backupManagementType() {
        return this.backupManagementType == null ? Codegen.empty() : this.backupManagementType;
    }

    /**
     * Can the container be registered one more time.
     * 
     */
    @Import(name="canReRegister")
      private final @Nullable Output<Boolean> canReRegister;

    public Output<Boolean> canReRegister() {
        return this.canReRegister == null ? Codegen.empty() : this.canReRegister;
    }

    /**
     * Health state of mab container.
     * 
     */
    @Import(name="containerHealthState")
      private final @Nullable Output<String> containerHealthState;

    public Output<String> containerHealthState() {
        return this.containerHealthState == null ? Codegen.empty() : this.containerHealthState;
    }

    /**
     * ContainerID represents the container.
     * 
     */
    @Import(name="containerId")
      private final @Nullable Output<Double> containerId;

    public Output<Double> containerId() {
        return this.containerId == null ? Codegen.empty() : this.containerId;
    }

    /**
     * Type of the container. The value of this property for: 1. Compute Azure VM is Microsoft.Compute/virtualMachines 2.
     * Classic Compute Azure VM is Microsoft.ClassicCompute/virtualMachines 3. Windows machines (like MAB, DPM etc) is
     * Windows 4. Azure SQL instance is AzureSqlContainer. 5. Storage containers is StorageContainer. 6. Azure workload
     * Backup is VMAppContainer
     * Expected value is &#39;Windows&#39;.
     * 
     */
    @Import(name="containerType", required=true)
      private final Output<String> containerType;

    public Output<String> containerType() {
        return this.containerType;
    }

    /**
     * Additional information for this container
     * 
     */
    @Import(name="extendedInfo")
      private final @Nullable Output<MabContainerExtendedInfoArgs> extendedInfo;

    public Output<MabContainerExtendedInfoArgs> extendedInfo() {
        return this.extendedInfo == null ? Codegen.empty() : this.extendedInfo;
    }

    /**
     * Friendly name of the container.
     * 
     */
    @Import(name="friendlyName")
      private final @Nullable Output<String> friendlyName;

    public Output<String> friendlyName() {
        return this.friendlyName == null ? Codegen.empty() : this.friendlyName;
    }

    /**
     * Status of health of the container.
     * 
     */
    @Import(name="healthStatus")
      private final @Nullable Output<String> healthStatus;

    public Output<String> healthStatus() {
        return this.healthStatus == null ? Codegen.empty() : this.healthStatus;
    }

    /**
     * Health details on this mab container.
     * 
     */
    @Import(name="mabContainerHealthDetails")
      private final @Nullable Output<List<MABContainerHealthDetailsArgs>> mabContainerHealthDetails;

    public Output<List<MABContainerHealthDetailsArgs>> mabContainerHealthDetails() {
        return this.mabContainerHealthDetails == null ? Codegen.empty() : this.mabContainerHealthDetails;
    }

    /**
     * Number of items backed up in this container.
     * 
     */
    @Import(name="protectedItemCount")
      private final @Nullable Output<Double> protectedItemCount;

    public Output<Double> protectedItemCount() {
        return this.protectedItemCount == null ? Codegen.empty() : this.protectedItemCount;
    }

    /**
     * Status of registration of the container with the Recovery Services Vault.
     * 
     */
    @Import(name="registrationStatus")
      private final @Nullable Output<String> registrationStatus;

    public Output<String> registrationStatus() {
        return this.registrationStatus == null ? Codegen.empty() : this.registrationStatus;
    }

    public MabContainerArgs(
        @Nullable Output<String> agentVersion,
        @Nullable Output<Either<String,BackupManagementType>> backupManagementType,
        @Nullable Output<Boolean> canReRegister,
        @Nullable Output<String> containerHealthState,
        @Nullable Output<Double> containerId,
        Output<String> containerType,
        @Nullable Output<MabContainerExtendedInfoArgs> extendedInfo,
        @Nullable Output<String> friendlyName,
        @Nullable Output<String> healthStatus,
        @Nullable Output<List<MABContainerHealthDetailsArgs>> mabContainerHealthDetails,
        @Nullable Output<Double> protectedItemCount,
        @Nullable Output<String> registrationStatus) {
        this.agentVersion = agentVersion;
        this.backupManagementType = backupManagementType;
        this.canReRegister = canReRegister;
        this.containerHealthState = containerHealthState;
        this.containerId = containerId;
        this.containerType = Codegen.stringProp("containerType").output().arg(containerType).require();
        this.extendedInfo = extendedInfo;
        this.friendlyName = friendlyName;
        this.healthStatus = healthStatus;
        this.mabContainerHealthDetails = mabContainerHealthDetails;
        this.protectedItemCount = protectedItemCount;
        this.registrationStatus = registrationStatus;
    }

    private MabContainerArgs() {
        this.agentVersion = Codegen.empty();
        this.backupManagementType = Codegen.empty();
        this.canReRegister = Codegen.empty();
        this.containerHealthState = Codegen.empty();
        this.containerId = Codegen.empty();
        this.containerType = Codegen.empty();
        this.extendedInfo = Codegen.empty();
        this.friendlyName = Codegen.empty();
        this.healthStatus = Codegen.empty();
        this.mabContainerHealthDetails = Codegen.empty();
        this.protectedItemCount = Codegen.empty();
        this.registrationStatus = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MabContainerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> agentVersion;
        private @Nullable Output<Either<String,BackupManagementType>> backupManagementType;
        private @Nullable Output<Boolean> canReRegister;
        private @Nullable Output<String> containerHealthState;
        private @Nullable Output<Double> containerId;
        private Output<String> containerType;
        private @Nullable Output<MabContainerExtendedInfoArgs> extendedInfo;
        private @Nullable Output<String> friendlyName;
        private @Nullable Output<String> healthStatus;
        private @Nullable Output<List<MABContainerHealthDetailsArgs>> mabContainerHealthDetails;
        private @Nullable Output<Double> protectedItemCount;
        private @Nullable Output<String> registrationStatus;

        public Builder() {
    	      // Empty
        }

        public Builder(MabContainerArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.agentVersion = defaults.agentVersion;
    	      this.backupManagementType = defaults.backupManagementType;
    	      this.canReRegister = defaults.canReRegister;
    	      this.containerHealthState = defaults.containerHealthState;
    	      this.containerId = defaults.containerId;
    	      this.containerType = defaults.containerType;
    	      this.extendedInfo = defaults.extendedInfo;
    	      this.friendlyName = defaults.friendlyName;
    	      this.healthStatus = defaults.healthStatus;
    	      this.mabContainerHealthDetails = defaults.mabContainerHealthDetails;
    	      this.protectedItemCount = defaults.protectedItemCount;
    	      this.registrationStatus = defaults.registrationStatus;
        }

        public Builder agentVersion(@Nullable Output<String> agentVersion) {
            this.agentVersion = agentVersion;
            return this;
        }
        public Builder agentVersion(@Nullable String agentVersion) {
            this.agentVersion = Codegen.ofNullable(agentVersion);
            return this;
        }
        public Builder backupManagementType(@Nullable Output<Either<String,BackupManagementType>> backupManagementType) {
            this.backupManagementType = backupManagementType;
            return this;
        }
        public Builder backupManagementType(@Nullable Either<String,BackupManagementType> backupManagementType) {
            this.backupManagementType = Codegen.ofNullable(backupManagementType);
            return this;
        }
        public Builder canReRegister(@Nullable Output<Boolean> canReRegister) {
            this.canReRegister = canReRegister;
            return this;
        }
        public Builder canReRegister(@Nullable Boolean canReRegister) {
            this.canReRegister = Codegen.ofNullable(canReRegister);
            return this;
        }
        public Builder containerHealthState(@Nullable Output<String> containerHealthState) {
            this.containerHealthState = containerHealthState;
            return this;
        }
        public Builder containerHealthState(@Nullable String containerHealthState) {
            this.containerHealthState = Codegen.ofNullable(containerHealthState);
            return this;
        }
        public Builder containerId(@Nullable Output<Double> containerId) {
            this.containerId = containerId;
            return this;
        }
        public Builder containerId(@Nullable Double containerId) {
            this.containerId = Codegen.ofNullable(containerId);
            return this;
        }
        public Builder containerType(Output<String> containerType) {
            this.containerType = Objects.requireNonNull(containerType);
            return this;
        }
        public Builder containerType(String containerType) {
            this.containerType = Output.of(Objects.requireNonNull(containerType));
            return this;
        }
        public Builder extendedInfo(@Nullable Output<MabContainerExtendedInfoArgs> extendedInfo) {
            this.extendedInfo = extendedInfo;
            return this;
        }
        public Builder extendedInfo(@Nullable MabContainerExtendedInfoArgs extendedInfo) {
            this.extendedInfo = Codegen.ofNullable(extendedInfo);
            return this;
        }
        public Builder friendlyName(@Nullable Output<String> friendlyName) {
            this.friendlyName = friendlyName;
            return this;
        }
        public Builder friendlyName(@Nullable String friendlyName) {
            this.friendlyName = Codegen.ofNullable(friendlyName);
            return this;
        }
        public Builder healthStatus(@Nullable Output<String> healthStatus) {
            this.healthStatus = healthStatus;
            return this;
        }
        public Builder healthStatus(@Nullable String healthStatus) {
            this.healthStatus = Codegen.ofNullable(healthStatus);
            return this;
        }
        public Builder mabContainerHealthDetails(@Nullable Output<List<MABContainerHealthDetailsArgs>> mabContainerHealthDetails) {
            this.mabContainerHealthDetails = mabContainerHealthDetails;
            return this;
        }
        public Builder mabContainerHealthDetails(@Nullable List<MABContainerHealthDetailsArgs> mabContainerHealthDetails) {
            this.mabContainerHealthDetails = Codegen.ofNullable(mabContainerHealthDetails);
            return this;
        }
        public Builder mabContainerHealthDetails(MABContainerHealthDetailsArgs... mabContainerHealthDetails) {
            return mabContainerHealthDetails(List.of(mabContainerHealthDetails));
        }
        public Builder protectedItemCount(@Nullable Output<Double> protectedItemCount) {
            this.protectedItemCount = protectedItemCount;
            return this;
        }
        public Builder protectedItemCount(@Nullable Double protectedItemCount) {
            this.protectedItemCount = Codegen.ofNullable(protectedItemCount);
            return this;
        }
        public Builder registrationStatus(@Nullable Output<String> registrationStatus) {
            this.registrationStatus = registrationStatus;
            return this;
        }
        public Builder registrationStatus(@Nullable String registrationStatus) {
            this.registrationStatus = Codegen.ofNullable(registrationStatus);
            return this;
        }        public MabContainerArgs build() {
            return new MabContainerArgs(agentVersion, backupManagementType, canReRegister, containerHealthState, containerId, containerType, extendedInfo, friendlyName, healthStatus, mabContainerHealthDetails, protectedItemCount, registrationStatus);
        }
    }
}
