// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.databoxedge.inputs;

import com.pulumi.azurenative.databoxedge.inputs.MetricCounterSetResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Metric configuration.
 * 
 */
public final class MetricConfigurationResponse extends com.pulumi.resources.InvokeArgs {

    public static final MetricConfigurationResponse Empty = new MetricConfigurationResponse();

    /**
     * Host name for the IoT hub associated to the device.
     * 
     */
    @Import(name="counterSets", required=true)
    private List<MetricCounterSetResponse> counterSets;

    public List<MetricCounterSetResponse> counterSets() {
        return this.counterSets;
    }

    /**
     * The MDM account to which the counters should be pushed.
     * 
     */
    @Import(name="mdmAccount")
    private @Nullable String mdmAccount;

    public Optional<String> mdmAccount() {
        return Optional.ofNullable(this.mdmAccount);
    }

    /**
     * The MDM namespace to which the counters should be pushed. This is required if MDMAccount is specified
     * 
     */
    @Import(name="metricNameSpace")
    private @Nullable String metricNameSpace;

    public Optional<String> metricNameSpace() {
        return Optional.ofNullable(this.metricNameSpace);
    }

    /**
     * The Resource ID on which the metrics should be pushed.
     * 
     */
    @Import(name="resourceId", required=true)
    private String resourceId;

    public String resourceId() {
        return this.resourceId;
    }

    private MetricConfigurationResponse() {}

    private MetricConfigurationResponse(MetricConfigurationResponse $) {
        this.counterSets = $.counterSets;
        this.mdmAccount = $.mdmAccount;
        this.metricNameSpace = $.metricNameSpace;
        this.resourceId = $.resourceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MetricConfigurationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MetricConfigurationResponse $;

        public Builder() {
            $ = new MetricConfigurationResponse();
        }

        public Builder(MetricConfigurationResponse defaults) {
            $ = new MetricConfigurationResponse(Objects.requireNonNull(defaults));
        }

        public Builder counterSets(List<MetricCounterSetResponse> counterSets) {
            $.counterSets = counterSets;
            return this;
        }

        public Builder counterSets(MetricCounterSetResponse... counterSets) {
            return counterSets(List.of(counterSets));
        }

        public Builder mdmAccount(@Nullable String mdmAccount) {
            $.mdmAccount = mdmAccount;
            return this;
        }

        public Builder metricNameSpace(@Nullable String metricNameSpace) {
            $.metricNameSpace = metricNameSpace;
            return this;
        }

        public Builder resourceId(String resourceId) {
            $.resourceId = resourceId;
            return this;
        }

        public MetricConfigurationResponse build() {
            $.counterSets = Objects.requireNonNull($.counterSets, "expected parameter 'counterSets' to be non-null");
            $.resourceId = Objects.requireNonNull($.resourceId, "expected parameter 'resourceId' to be non-null");
            return $;
        }
    }

}
