// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.eventgrid;

import com.pulumi.azurenative.eventgrid.enums.PartnerDestinationActivationState;
import com.pulumi.azurenative.eventgrid.enums.PartnerDestinationProvisioningState;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PartnerDestinationArgs extends com.pulumi.resources.ResourceArgs {

    public static final PartnerDestinationArgs Empty = new PartnerDestinationArgs();

    /**
     * Activation state of the partner destination.
     * 
     */
    @Import(name="activationState")
    private @Nullable Output<Either<String,PartnerDestinationActivationState>> activationState;

    /**
     * @return Activation state of the partner destination.
     * 
     */
    public Optional<Output<Either<String,PartnerDestinationActivationState>>> activationState() {
        return Optional.ofNullable(this.activationState);
    }

    /**
     * Endpoint Base URL of the partner destination
     * 
     */
    @Import(name="endpointBaseUrl")
    private @Nullable Output<String> endpointBaseUrl;

    /**
     * @return Endpoint Base URL of the partner destination
     * 
     */
    public Optional<Output<String>> endpointBaseUrl() {
        return Optional.ofNullable(this.endpointBaseUrl);
    }

    /**
     * Endpoint context associated with this partner destination.
     * 
     */
    @Import(name="endpointServiceContext")
    private @Nullable Output<String> endpointServiceContext;

    /**
     * @return Endpoint context associated with this partner destination.
     * 
     */
    public Optional<Output<String>> endpointServiceContext() {
        return Optional.ofNullable(this.endpointServiceContext);
    }

    /**
     * Expiration time of the partner destination. If this timer expires and the partner destination was never activated,
     * the partner destination and corresponding channel are deleted.
     * 
     */
    @Import(name="expirationTimeIfNotActivatedUtc")
    private @Nullable Output<String> expirationTimeIfNotActivatedUtc;

    /**
     * @return Expiration time of the partner destination. If this timer expires and the partner destination was never activated,
     * the partner destination and corresponding channel are deleted.
     * 
     */
    public Optional<Output<String>> expirationTimeIfNotActivatedUtc() {
        return Optional.ofNullable(this.expirationTimeIfNotActivatedUtc);
    }

    /**
     * Location of the resource.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Location of the resource.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Context or helpful message that can be used during the approval process.
     * 
     */
    @Import(name="messageForActivation")
    private @Nullable Output<String> messageForActivation;

    /**
     * @return Context or helpful message that can be used during the approval process.
     * 
     */
    public Optional<Output<String>> messageForActivation() {
        return Optional.ofNullable(this.messageForActivation);
    }

    /**
     * Name of the partner destination.
     * 
     */
    @Import(name="partnerDestinationName")
    private @Nullable Output<String> partnerDestinationName;

    /**
     * @return Name of the partner destination.
     * 
     */
    public Optional<Output<String>> partnerDestinationName() {
        return Optional.ofNullable(this.partnerDestinationName);
    }

    /**
     * The immutable Id of the corresponding partner registration.
     * 
     */
    @Import(name="partnerRegistrationImmutableId")
    private @Nullable Output<String> partnerRegistrationImmutableId;

    /**
     * @return The immutable Id of the corresponding partner registration.
     * 
     */
    public Optional<Output<String>> partnerRegistrationImmutableId() {
        return Optional.ofNullable(this.partnerRegistrationImmutableId);
    }

    /**
     * Provisioning state of the partner destination.
     * 
     */
    @Import(name="provisioningState")
    private @Nullable Output<Either<String,PartnerDestinationProvisioningState>> provisioningState;

    /**
     * @return Provisioning state of the partner destination.
     * 
     */
    public Optional<Output<Either<String,PartnerDestinationProvisioningState>>> provisioningState() {
        return Optional.ofNullable(this.provisioningState);
    }

    /**
     * The name of the resource group within the user&#39;s subscription.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group within the user&#39;s subscription.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Tags of the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Tags of the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private PartnerDestinationArgs() {}

    private PartnerDestinationArgs(PartnerDestinationArgs $) {
        this.activationState = $.activationState;
        this.endpointBaseUrl = $.endpointBaseUrl;
        this.endpointServiceContext = $.endpointServiceContext;
        this.expirationTimeIfNotActivatedUtc = $.expirationTimeIfNotActivatedUtc;
        this.location = $.location;
        this.messageForActivation = $.messageForActivation;
        this.partnerDestinationName = $.partnerDestinationName;
        this.partnerRegistrationImmutableId = $.partnerRegistrationImmutableId;
        this.provisioningState = $.provisioningState;
        this.resourceGroupName = $.resourceGroupName;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PartnerDestinationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PartnerDestinationArgs $;

        public Builder() {
            $ = new PartnerDestinationArgs();
        }

        public Builder(PartnerDestinationArgs defaults) {
            $ = new PartnerDestinationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param activationState Activation state of the partner destination.
         * 
         * @return builder
         * 
         */
        public Builder activationState(@Nullable Output<Either<String,PartnerDestinationActivationState>> activationState) {
            $.activationState = activationState;
            return this;
        }

        /**
         * @param activationState Activation state of the partner destination.
         * 
         * @return builder
         * 
         */
        public Builder activationState(Either<String,PartnerDestinationActivationState> activationState) {
            return activationState(Output.of(activationState));
        }

        /**
         * @param activationState Activation state of the partner destination.
         * 
         * @return builder
         * 
         */
        public Builder activationState(String activationState) {
            return activationState(Either.ofLeft(activationState));
        }

        /**
         * @param activationState Activation state of the partner destination.
         * 
         * @return builder
         * 
         */
        public Builder activationState(PartnerDestinationActivationState activationState) {
            return activationState(Either.ofRight(activationState));
        }

        /**
         * @param endpointBaseUrl Endpoint Base URL of the partner destination
         * 
         * @return builder
         * 
         */
        public Builder endpointBaseUrl(@Nullable Output<String> endpointBaseUrl) {
            $.endpointBaseUrl = endpointBaseUrl;
            return this;
        }

        /**
         * @param endpointBaseUrl Endpoint Base URL of the partner destination
         * 
         * @return builder
         * 
         */
        public Builder endpointBaseUrl(String endpointBaseUrl) {
            return endpointBaseUrl(Output.of(endpointBaseUrl));
        }

        /**
         * @param endpointServiceContext Endpoint context associated with this partner destination.
         * 
         * @return builder
         * 
         */
        public Builder endpointServiceContext(@Nullable Output<String> endpointServiceContext) {
            $.endpointServiceContext = endpointServiceContext;
            return this;
        }

        /**
         * @param endpointServiceContext Endpoint context associated with this partner destination.
         * 
         * @return builder
         * 
         */
        public Builder endpointServiceContext(String endpointServiceContext) {
            return endpointServiceContext(Output.of(endpointServiceContext));
        }

        /**
         * @param expirationTimeIfNotActivatedUtc Expiration time of the partner destination. If this timer expires and the partner destination was never activated,
         * the partner destination and corresponding channel are deleted.
         * 
         * @return builder
         * 
         */
        public Builder expirationTimeIfNotActivatedUtc(@Nullable Output<String> expirationTimeIfNotActivatedUtc) {
            $.expirationTimeIfNotActivatedUtc = expirationTimeIfNotActivatedUtc;
            return this;
        }

        /**
         * @param expirationTimeIfNotActivatedUtc Expiration time of the partner destination. If this timer expires and the partner destination was never activated,
         * the partner destination and corresponding channel are deleted.
         * 
         * @return builder
         * 
         */
        public Builder expirationTimeIfNotActivatedUtc(String expirationTimeIfNotActivatedUtc) {
            return expirationTimeIfNotActivatedUtc(Output.of(expirationTimeIfNotActivatedUtc));
        }

        /**
         * @param location Location of the resource.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Location of the resource.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param messageForActivation Context or helpful message that can be used during the approval process.
         * 
         * @return builder
         * 
         */
        public Builder messageForActivation(@Nullable Output<String> messageForActivation) {
            $.messageForActivation = messageForActivation;
            return this;
        }

        /**
         * @param messageForActivation Context or helpful message that can be used during the approval process.
         * 
         * @return builder
         * 
         */
        public Builder messageForActivation(String messageForActivation) {
            return messageForActivation(Output.of(messageForActivation));
        }

        /**
         * @param partnerDestinationName Name of the partner destination.
         * 
         * @return builder
         * 
         */
        public Builder partnerDestinationName(@Nullable Output<String> partnerDestinationName) {
            $.partnerDestinationName = partnerDestinationName;
            return this;
        }

        /**
         * @param partnerDestinationName Name of the partner destination.
         * 
         * @return builder
         * 
         */
        public Builder partnerDestinationName(String partnerDestinationName) {
            return partnerDestinationName(Output.of(partnerDestinationName));
        }

        /**
         * @param partnerRegistrationImmutableId The immutable Id of the corresponding partner registration.
         * 
         * @return builder
         * 
         */
        public Builder partnerRegistrationImmutableId(@Nullable Output<String> partnerRegistrationImmutableId) {
            $.partnerRegistrationImmutableId = partnerRegistrationImmutableId;
            return this;
        }

        /**
         * @param partnerRegistrationImmutableId The immutable Id of the corresponding partner registration.
         * 
         * @return builder
         * 
         */
        public Builder partnerRegistrationImmutableId(String partnerRegistrationImmutableId) {
            return partnerRegistrationImmutableId(Output.of(partnerRegistrationImmutableId));
        }

        /**
         * @param provisioningState Provisioning state of the partner destination.
         * 
         * @return builder
         * 
         */
        public Builder provisioningState(@Nullable Output<Either<String,PartnerDestinationProvisioningState>> provisioningState) {
            $.provisioningState = provisioningState;
            return this;
        }

        /**
         * @param provisioningState Provisioning state of the partner destination.
         * 
         * @return builder
         * 
         */
        public Builder provisioningState(Either<String,PartnerDestinationProvisioningState> provisioningState) {
            return provisioningState(Output.of(provisioningState));
        }

        /**
         * @param provisioningState Provisioning state of the partner destination.
         * 
         * @return builder
         * 
         */
        public Builder provisioningState(String provisioningState) {
            return provisioningState(Either.ofLeft(provisioningState));
        }

        /**
         * @param provisioningState Provisioning state of the partner destination.
         * 
         * @return builder
         * 
         */
        public Builder provisioningState(PartnerDestinationProvisioningState provisioningState) {
            return provisioningState(Either.ofRight(provisioningState));
        }

        /**
         * @param resourceGroupName The name of the resource group within the user&#39;s subscription.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group within the user&#39;s subscription.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param tags Tags of the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Tags of the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public PartnerDestinationArgs build() {
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
