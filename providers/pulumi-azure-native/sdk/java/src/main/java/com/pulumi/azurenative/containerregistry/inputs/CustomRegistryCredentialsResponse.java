// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.containerregistry.inputs;

import com.pulumi.azurenative.containerregistry.inputs.SecretObjectResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Describes the credentials that will be used to access a custom registry during a run.
 * 
 */
public final class CustomRegistryCredentialsResponse extends com.pulumi.resources.InvokeArgs {

    public static final CustomRegistryCredentialsResponse Empty = new CustomRegistryCredentialsResponse();

    /**
     * Indicates the managed identity assigned to the custom credential. If a user-assigned identity
     * this value is the Client ID. If a system-assigned identity, the value will be `system`. In
     * the case of a system-assigned identity, the Client ID will be determined by the runner. This
     * identity may be used to authenticate to key vault to retrieve credentials or it may be the only
     * source of authentication used for accessing the registry.
     * 
     */
    @Import(name="identity")
    private @Nullable String identity;

    public Optional<String> identity() {
        return Optional.ofNullable(this.identity);
    }

    /**
     * The password for logging into the custom registry. The password is a secret
     * object that allows multiple ways of providing the value for it.
     * 
     */
    @Import(name="password")
    private @Nullable SecretObjectResponse password;

    public Optional<SecretObjectResponse> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * The username for logging into the custom registry.
     * 
     */
    @Import(name="userName")
    private @Nullable SecretObjectResponse userName;

    public Optional<SecretObjectResponse> userName() {
        return Optional.ofNullable(this.userName);
    }

    private CustomRegistryCredentialsResponse() {}

    private CustomRegistryCredentialsResponse(CustomRegistryCredentialsResponse $) {
        this.identity = $.identity;
        this.password = $.password;
        this.userName = $.userName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CustomRegistryCredentialsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CustomRegistryCredentialsResponse $;

        public Builder() {
            $ = new CustomRegistryCredentialsResponse();
        }

        public Builder(CustomRegistryCredentialsResponse defaults) {
            $ = new CustomRegistryCredentialsResponse(Objects.requireNonNull(defaults));
        }

        public Builder identity(@Nullable String identity) {
            $.identity = identity;
            return this;
        }

        public Builder password(@Nullable SecretObjectResponse password) {
            $.password = password;
            return this;
        }

        public Builder userName(@Nullable SecretObjectResponse userName) {
            $.userName = userName;
            return this;
        }

        public CustomRegistryCredentialsResponse build() {
            return $;
        }
    }

}
