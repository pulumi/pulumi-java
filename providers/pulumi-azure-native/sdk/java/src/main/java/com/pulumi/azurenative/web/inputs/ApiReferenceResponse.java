// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.web.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApiReferenceResponse extends com.pulumi.resources.InvokeArgs {

    public static final ApiReferenceResponse Empty = new ApiReferenceResponse();

    /**
     * Brand color
     * 
     */
    @Import(name="brandColor")
    private @Nullable String brandColor;

    /**
     * @return Brand color
     * 
     */
    public Optional<String> brandColor() {
        return Optional.ofNullable(this.brandColor);
    }

    /**
     * The custom API description
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    /**
     * @return The custom API description
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The display name
     * 
     */
    @Import(name="displayName")
    private @Nullable String displayName;

    /**
     * @return The display name
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * The icon URI
     * 
     */
    @Import(name="iconUri")
    private @Nullable String iconUri;

    /**
     * @return The icon URI
     * 
     */
    public Optional<String> iconUri() {
        return Optional.ofNullable(this.iconUri);
    }

    /**
     * Resource reference id
     * 
     */
    @Import(name="id")
    private @Nullable String id;

    /**
     * @return Resource reference id
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The name of the API
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return The name of the API
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The JSON representation of the swagger
     * 
     */
    @Import(name="swagger")
    private @Nullable Object swagger;

    /**
     * @return The JSON representation of the swagger
     * 
     */
    public Optional<Object> swagger() {
        return Optional.ofNullable(this.swagger);
    }

    /**
     * Resource reference type
     * 
     */
    @Import(name="type")
    private @Nullable String type;

    /**
     * @return Resource reference type
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    private ApiReferenceResponse() {}

    private ApiReferenceResponse(ApiReferenceResponse $) {
        this.brandColor = $.brandColor;
        this.description = $.description;
        this.displayName = $.displayName;
        this.iconUri = $.iconUri;
        this.id = $.id;
        this.name = $.name;
        this.swagger = $.swagger;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApiReferenceResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApiReferenceResponse $;

        public Builder() {
            $ = new ApiReferenceResponse();
        }

        public Builder(ApiReferenceResponse defaults) {
            $ = new ApiReferenceResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param brandColor Brand color
         * 
         * @return builder
         * 
         */
        public Builder brandColor(@Nullable String brandColor) {
            $.brandColor = brandColor;
            return this;
        }

        /**
         * @param description The custom API description
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        /**
         * @param displayName The display name
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable String displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param iconUri The icon URI
         * 
         * @return builder
         * 
         */
        public Builder iconUri(@Nullable String iconUri) {
            $.iconUri = iconUri;
            return this;
        }

        /**
         * @param id Resource reference id
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable String id) {
            $.id = id;
            return this;
        }

        /**
         * @param name The name of the API
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param swagger The JSON representation of the swagger
         * 
         * @return builder
         * 
         */
        public Builder swagger(@Nullable Object swagger) {
            $.swagger = swagger;
            return this;
        }

        /**
         * @param type Resource reference type
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable String type) {
            $.type = type;
            return this;
        }

        public ApiReferenceResponse build() {
            return $;
        }
    }

}
