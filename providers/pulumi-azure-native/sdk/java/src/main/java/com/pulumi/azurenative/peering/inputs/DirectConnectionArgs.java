// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.peering.inputs;

import com.pulumi.azurenative.peering.enums.SessionAddressProvider;
import com.pulumi.azurenative.peering.inputs.BgpSessionArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The properties that define a direct connection.
 * 
 */
public final class DirectConnectionArgs extends com.pulumi.resources.ResourceArgs {

    public static final DirectConnectionArgs Empty = new DirectConnectionArgs();

    /**
     * The bandwidth of the connection.
     * 
     */
    @Import(name="bandwidthInMbps")
    private @Nullable Output<Integer> bandwidthInMbps;

    public Optional<Output<Integer>> bandwidthInMbps() {
        return Optional.ofNullable(this.bandwidthInMbps);
    }

    /**
     * The BGP session associated with the connection.
     * 
     */
    @Import(name="bgpSession")
    private @Nullable Output<BgpSessionArgs> bgpSession;

    public Optional<Output<BgpSessionArgs>> bgpSession() {
        return Optional.ofNullable(this.bgpSession);
    }

    /**
     * The unique identifier (GUID) for the connection.
     * 
     */
    @Import(name="connectionIdentifier")
    private @Nullable Output<String> connectionIdentifier;

    public Optional<Output<String>> connectionIdentifier() {
        return Optional.ofNullable(this.connectionIdentifier);
    }

    /**
     * The PeeringDB.com ID of the facility at which the connection has to be set up.
     * 
     */
    @Import(name="peeringDBFacilityId")
    private @Nullable Output<Integer> peeringDBFacilityId;

    public Optional<Output<Integer>> peeringDBFacilityId() {
        return Optional.ofNullable(this.peeringDBFacilityId);
    }

    /**
     * The field indicating if Microsoft provides session ip addresses.
     * 
     */
    @Import(name="sessionAddressProvider")
    private @Nullable Output<Either<String,SessionAddressProvider>> sessionAddressProvider;

    public Optional<Output<Either<String,SessionAddressProvider>>> sessionAddressProvider() {
        return Optional.ofNullable(this.sessionAddressProvider);
    }

    /**
     * The flag that indicates whether or not the connection is used for peering service.
     * 
     */
    @Import(name="useForPeeringService")
    private @Nullable Output<Boolean> useForPeeringService;

    public Optional<Output<Boolean>> useForPeeringService() {
        return Optional.ofNullable(this.useForPeeringService);
    }

    private DirectConnectionArgs() {}

    private DirectConnectionArgs(DirectConnectionArgs $) {
        this.bandwidthInMbps = $.bandwidthInMbps;
        this.bgpSession = $.bgpSession;
        this.connectionIdentifier = $.connectionIdentifier;
        this.peeringDBFacilityId = $.peeringDBFacilityId;
        this.sessionAddressProvider = $.sessionAddressProvider;
        this.useForPeeringService = $.useForPeeringService;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DirectConnectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DirectConnectionArgs $;

        public Builder() {
            $ = new DirectConnectionArgs();
        }

        public Builder(DirectConnectionArgs defaults) {
            $ = new DirectConnectionArgs(Objects.requireNonNull(defaults));
        }

        public Builder bandwidthInMbps(@Nullable Output<Integer> bandwidthInMbps) {
            $.bandwidthInMbps = bandwidthInMbps;
            return this;
        }

        public Builder bandwidthInMbps(Integer bandwidthInMbps) {
            return bandwidthInMbps(Output.of(bandwidthInMbps));
        }

        public Builder bgpSession(@Nullable Output<BgpSessionArgs> bgpSession) {
            $.bgpSession = bgpSession;
            return this;
        }

        public Builder bgpSession(BgpSessionArgs bgpSession) {
            return bgpSession(Output.of(bgpSession));
        }

        public Builder connectionIdentifier(@Nullable Output<String> connectionIdentifier) {
            $.connectionIdentifier = connectionIdentifier;
            return this;
        }

        public Builder connectionIdentifier(String connectionIdentifier) {
            return connectionIdentifier(Output.of(connectionIdentifier));
        }

        public Builder peeringDBFacilityId(@Nullable Output<Integer> peeringDBFacilityId) {
            $.peeringDBFacilityId = peeringDBFacilityId;
            return this;
        }

        public Builder peeringDBFacilityId(Integer peeringDBFacilityId) {
            return peeringDBFacilityId(Output.of(peeringDBFacilityId));
        }

        public Builder sessionAddressProvider(@Nullable Output<Either<String,SessionAddressProvider>> sessionAddressProvider) {
            $.sessionAddressProvider = sessionAddressProvider;
            return this;
        }

        public Builder sessionAddressProvider(Either<String,SessionAddressProvider> sessionAddressProvider) {
            return sessionAddressProvider(Output.of(sessionAddressProvider));
        }

        public Builder sessionAddressProvider(String sessionAddressProvider) {
            return sessionAddressProvider(Either.ofLeft(sessionAddressProvider));
        }

        public Builder sessionAddressProvider(SessionAddressProvider sessionAddressProvider) {
            return sessionAddressProvider(Either.ofRight(sessionAddressProvider));
        }

        public Builder useForPeeringService(@Nullable Output<Boolean> useForPeeringService) {
            $.useForPeeringService = useForPeeringService;
            return this;
        }

        public Builder useForPeeringService(Boolean useForPeeringService) {
            return useForPeeringService(Output.of(useForPeeringService));
        }

        public DirectConnectionArgs build() {
            return $;
        }
    }

}
