// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datamigration.inputs;

import com.pulumi.azurenative.datamigration.inputs.ValidationErrorResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;


/**
 * Results for checksum based Data Integrity validation results
 * 
 */
public final class DataIntegrityValidationResultResponse extends com.pulumi.resources.InvokeArgs {

    public static final DataIntegrityValidationResultResponse Empty = new DataIntegrityValidationResultResponse();

    /**
     * List of failed table names of source and target pair
     * 
     */
    @Import(name="failedObjects", required=true)
    private Map<String,String> failedObjects;

    /**
     * @return List of failed table names of source and target pair
     * 
     */
    public Map<String,String> failedObjects() {
        return this.failedObjects;
    }

    /**
     * List of errors that happened while performing data integrity validation
     * 
     */
    @Import(name="validationErrors", required=true)
    private ValidationErrorResponse validationErrors;

    /**
     * @return List of errors that happened while performing data integrity validation
     * 
     */
    public ValidationErrorResponse validationErrors() {
        return this.validationErrors;
    }

    private DataIntegrityValidationResultResponse() {}

    private DataIntegrityValidationResultResponse(DataIntegrityValidationResultResponse $) {
        this.failedObjects = $.failedObjects;
        this.validationErrors = $.validationErrors;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataIntegrityValidationResultResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataIntegrityValidationResultResponse $;

        public Builder() {
            $ = new DataIntegrityValidationResultResponse();
        }

        public Builder(DataIntegrityValidationResultResponse defaults) {
            $ = new DataIntegrityValidationResultResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param failedObjects List of failed table names of source and target pair
         * 
         * @return builder
         * 
         */
        public Builder failedObjects(Map<String,String> failedObjects) {
            $.failedObjects = failedObjects;
            return this;
        }

        /**
         * @param validationErrors List of errors that happened while performing data integrity validation
         * 
         * @return builder
         * 
         */
        public Builder validationErrors(ValidationErrorResponse validationErrors) {
            $.validationErrors = validationErrors;
            return this;
        }

        public DataIntegrityValidationResultResponse build() {
            $.failedObjects = Objects.requireNonNull($.failedObjects, "expected parameter 'failedObjects' to be non-null");
            $.validationErrors = Objects.requireNonNull($.validationErrors, "expected parameter 'validationErrors' to be non-null");
            return $;
        }
    }

}
