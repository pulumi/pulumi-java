// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.storage.inputs;

import com.pulumi.azurenative.storage.inputs.EncryptionIdentityResponse;
import com.pulumi.azurenative.storage.inputs.EncryptionServicesResponse;
import com.pulumi.azurenative.storage.inputs.KeyVaultPropertiesResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The encryption settings on the storage account.
 * 
 */
public final class EncryptionResponse extends com.pulumi.resources.InvokeArgs {

    public static final EncryptionResponse Empty = new EncryptionResponse();

    /**
     * The identity to be used with service-side encryption at rest.
     * 
     */
    @Import(name="encryptionIdentity")
    private @Nullable EncryptionIdentityResponse encryptionIdentity;

    /**
     * @return The identity to be used with service-side encryption at rest.
     * 
     */
    public Optional<EncryptionIdentityResponse> encryptionIdentity() {
        return Optional.ofNullable(this.encryptionIdentity);
    }

    /**
     * The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.Storage, Microsoft.Keyvault
     * 
     */
    @Import(name="keySource", required=true)
    private String keySource;

    /**
     * @return The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.Storage, Microsoft.Keyvault
     * 
     */
    public String keySource() {
        return this.keySource;
    }

    /**
     * Properties provided by key vault.
     * 
     */
    @Import(name="keyVaultProperties")
    private @Nullable KeyVaultPropertiesResponse keyVaultProperties;

    /**
     * @return Properties provided by key vault.
     * 
     */
    public Optional<KeyVaultPropertiesResponse> keyVaultProperties() {
        return Optional.ofNullable(this.keyVaultProperties);
    }

    /**
     * A boolean indicating whether or not the service applies a secondary layer of encryption with platform managed keys for data at rest.
     * 
     */
    @Import(name="requireInfrastructureEncryption")
    private @Nullable Boolean requireInfrastructureEncryption;

    /**
     * @return A boolean indicating whether or not the service applies a secondary layer of encryption with platform managed keys for data at rest.
     * 
     */
    public Optional<Boolean> requireInfrastructureEncryption() {
        return Optional.ofNullable(this.requireInfrastructureEncryption);
    }

    /**
     * List of services which support encryption.
     * 
     */
    @Import(name="services")
    private @Nullable EncryptionServicesResponse services;

    /**
     * @return List of services which support encryption.
     * 
     */
    public Optional<EncryptionServicesResponse> services() {
        return Optional.ofNullable(this.services);
    }

    private EncryptionResponse() {}

    private EncryptionResponse(EncryptionResponse $) {
        this.encryptionIdentity = $.encryptionIdentity;
        this.keySource = $.keySource;
        this.keyVaultProperties = $.keyVaultProperties;
        this.requireInfrastructureEncryption = $.requireInfrastructureEncryption;
        this.services = $.services;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EncryptionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EncryptionResponse $;

        public Builder() {
            $ = new EncryptionResponse();
        }

        public Builder(EncryptionResponse defaults) {
            $ = new EncryptionResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param encryptionIdentity The identity to be used with service-side encryption at rest.
         * 
         * @return builder
         * 
         */
        public Builder encryptionIdentity(@Nullable EncryptionIdentityResponse encryptionIdentity) {
            $.encryptionIdentity = encryptionIdentity;
            return this;
        }

        /**
         * @param keySource The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.Storage, Microsoft.Keyvault
         * 
         * @return builder
         * 
         */
        public Builder keySource(String keySource) {
            $.keySource = keySource;
            return this;
        }

        /**
         * @param keyVaultProperties Properties provided by key vault.
         * 
         * @return builder
         * 
         */
        public Builder keyVaultProperties(@Nullable KeyVaultPropertiesResponse keyVaultProperties) {
            $.keyVaultProperties = keyVaultProperties;
            return this;
        }

        /**
         * @param requireInfrastructureEncryption A boolean indicating whether or not the service applies a secondary layer of encryption with platform managed keys for data at rest.
         * 
         * @return builder
         * 
         */
        public Builder requireInfrastructureEncryption(@Nullable Boolean requireInfrastructureEncryption) {
            $.requireInfrastructureEncryption = requireInfrastructureEncryption;
            return this;
        }

        /**
         * @param services List of services which support encryption.
         * 
         * @return builder
         * 
         */
        public Builder services(@Nullable EncryptionServicesResponse services) {
            $.services = services;
            return this;
        }

        public EncryptionResponse build() {
            $.keySource = Codegen.stringProp("keySource").arg($.keySource).def("Microsoft.Storage").require();
            return $;
        }
    }

}
