// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.servicefabric.inputs;

import com.pulumi.azurenative.servicefabric.inputs.SubResourceArgs;
import com.pulumi.azurenative.servicefabric.inputs.VaultCertificateArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.util.List;
import java.util.Objects;


/**
 * Specifies set of certificates that should be installed onto the virtual machines.
 * 
 */
public final class VaultSecretGroupArgs extends com.pulumi.resources.ResourceArgs {

    public static final VaultSecretGroupArgs Empty = new VaultSecretGroupArgs();

    /**
     * The relative URL of the Key Vault containing all of the certificates in VaultCertificates.
     * 
     */
    @Import(name="sourceVault", required=true)
      private final Output<SubResourceArgs> sourceVault;

    public Output<SubResourceArgs> sourceVault() {
        return this.sourceVault;
    }

    /**
     * The list of key vault references in SourceVault which contain certificates.
     * 
     */
    @Import(name="vaultCertificates", required=true)
      private final Output<List<VaultCertificateArgs>> vaultCertificates;

    public Output<List<VaultCertificateArgs>> vaultCertificates() {
        return this.vaultCertificates;
    }

    public VaultSecretGroupArgs(
        Output<SubResourceArgs> sourceVault,
        Output<List<VaultCertificateArgs>> vaultCertificates) {
        this.sourceVault = Objects.requireNonNull(sourceVault, "expected parameter 'sourceVault' to be non-null");
        this.vaultCertificates = Objects.requireNonNull(vaultCertificates, "expected parameter 'vaultCertificates' to be non-null");
    }

    private VaultSecretGroupArgs() {
        this.sourceVault = Codegen.empty();
        this.vaultCertificates = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VaultSecretGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<SubResourceArgs> sourceVault;
        private Output<List<VaultCertificateArgs>> vaultCertificates;

        public Builder() {
    	      // Empty
        }

        public Builder(VaultSecretGroupArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.sourceVault = defaults.sourceVault;
    	      this.vaultCertificates = defaults.vaultCertificates;
        }

        public Builder sourceVault(Output<SubResourceArgs> sourceVault) {
            this.sourceVault = Objects.requireNonNull(sourceVault);
            return this;
        }
        public Builder sourceVault(SubResourceArgs sourceVault) {
            this.sourceVault = Output.of(Objects.requireNonNull(sourceVault));
            return this;
        }
        public Builder vaultCertificates(Output<List<VaultCertificateArgs>> vaultCertificates) {
            this.vaultCertificates = Objects.requireNonNull(vaultCertificates);
            return this;
        }
        public Builder vaultCertificates(List<VaultCertificateArgs> vaultCertificates) {
            this.vaultCertificates = Output.of(Objects.requireNonNull(vaultCertificates));
            return this;
        }
        public Builder vaultCertificates(VaultCertificateArgs... vaultCertificates) {
            return vaultCertificates(List.of(vaultCertificates));
        }        public VaultSecretGroupArgs build() {
            return new VaultSecretGroupArgs(sourceVault, vaultCertificates);
        }
    }
}
