// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.media.inputs;

import com.pulumi.azurenative.media.inputs.JobErrorResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Represents an Asset used as a JobOutput.
 * 
 */
public final class JobOutputAssetResponse extends com.pulumi.resources.InvokeArgs {

    public static final JobOutputAssetResponse Empty = new JobOutputAssetResponse();

    /**
     * The name of the output Asset.
     * 
     */
    @Import(name="assetName", required=true)
    private String assetName;

    public String assetName() {
        return this.assetName;
    }

    /**
     * The UTC date and time at which this Job Output finished processing.
     * 
     */
    @Import(name="endTime", required=true)
    private String endTime;

    public String endTime() {
        return this.endTime;
    }

    /**
     * If the JobOutput is in the Error state, it contains the details of the error.
     * 
     */
    @Import(name="error", required=true)
    private JobErrorResponse error;

    public JobErrorResponse error() {
        return this.error;
    }

    /**
     * A label that is assigned to a JobOutput in order to help uniquely identify it. This is useful when your Transform has more than one TransformOutput, whereby your Job has more than one JobOutput. In such cases, when you submit the Job, you will add two or more JobOutputs, in the same order as TransformOutputs in the Transform. Subsequently, when you retrieve the Job, either through events or on a GET request, you can use the label to easily identify the JobOutput. If a label is not provided, a default value of &#39;{presetName}_{outputIndex}&#39; will be used, where the preset name is the name of the preset in the corresponding TransformOutput and the output index is the relative index of the this JobOutput within the Job. Note that this index is the same as the relative index of the corresponding TransformOutput within its Transform.
     * 
     */
    @Import(name="label")
    private @Nullable String label;

    public Optional<String> label() {
        return Optional.ofNullable(this.label);
    }

    /**
     * The discriminator for derived types.
     * Expected value is &#39;#Microsoft.Media.JobOutputAsset&#39;.
     * 
     */
    @Import(name="odataType", required=true)
    private String odataType;

    public String odataType() {
        return this.odataType;
    }

    /**
     * If the JobOutput is in a Processing state, this contains the Job completion percentage. The value is an estimate and not intended to be used to predict Job completion times. To determine if the JobOutput is complete, use the State property.
     * 
     */
    @Import(name="progress", required=true)
    private Integer progress;

    public Integer progress() {
        return this.progress;
    }

    /**
     * The UTC date and time at which this Job Output began processing.
     * 
     */
    @Import(name="startTime", required=true)
    private String startTime;

    public String startTime() {
        return this.startTime;
    }

    /**
     * Describes the state of the JobOutput.
     * 
     */
    @Import(name="state", required=true)
    private String state;

    public String state() {
        return this.state;
    }

    private JobOutputAssetResponse() {}

    private JobOutputAssetResponse(JobOutputAssetResponse $) {
        this.assetName = $.assetName;
        this.endTime = $.endTime;
        this.error = $.error;
        this.label = $.label;
        this.odataType = $.odataType;
        this.progress = $.progress;
        this.startTime = $.startTime;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(JobOutputAssetResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private JobOutputAssetResponse $;

        public Builder() {
            $ = new JobOutputAssetResponse();
        }

        public Builder(JobOutputAssetResponse defaults) {
            $ = new JobOutputAssetResponse(Objects.requireNonNull(defaults));
        }

        public Builder assetName(String assetName) {
            $.assetName = assetName;
            return this;
        }

        public Builder endTime(String endTime) {
            $.endTime = endTime;
            return this;
        }

        public Builder error(JobErrorResponse error) {
            $.error = error;
            return this;
        }

        public Builder label(@Nullable String label) {
            $.label = label;
            return this;
        }

        public Builder odataType(String odataType) {
            $.odataType = odataType;
            return this;
        }

        public Builder progress(Integer progress) {
            $.progress = progress;
            return this;
        }

        public Builder startTime(String startTime) {
            $.startTime = startTime;
            return this;
        }

        public Builder state(String state) {
            $.state = state;
            return this;
        }

        public JobOutputAssetResponse build() {
            $.assetName = Objects.requireNonNull($.assetName, "expected parameter 'assetName' to be non-null");
            $.endTime = Objects.requireNonNull($.endTime, "expected parameter 'endTime' to be non-null");
            $.error = Objects.requireNonNull($.error, "expected parameter 'error' to be non-null");
            $.odataType = Codegen.stringProp("odataType").arg($.odataType).require();
            $.progress = Objects.requireNonNull($.progress, "expected parameter 'progress' to be non-null");
            $.startTime = Objects.requireNonNull($.startTime, "expected parameter 'startTime' to be non-null");
            $.state = Objects.requireNonNull($.state, "expected parameter 'state' to be non-null");
            return $;
        }
    }

}
