// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Delimited text write settings.
 * 
 */
public final class DelimitedTextWriteSettingsResponse extends com.pulumi.resources.InvokeArgs {

    public static final DelimitedTextWriteSettingsResponse Empty = new DelimitedTextWriteSettingsResponse();

    /**
     * The file extension used to create the files. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="fileExtension", required=true)
      private final Object fileExtension;

    public Object fileExtension() {
        return this.fileExtension;
    }

    /**
     * Specifies the file name pattern &lt;fileNamePrefix&gt;_&lt;fileIndex&gt;.&lt;fileExtension&gt; when copy from non-file based store without partitionOptions. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="fileNamePrefix")
      private final @Nullable Object fileNamePrefix;

    public Optional<Object> fileNamePrefix() {
        return this.fileNamePrefix == null ? Optional.empty() : Optional.ofNullable(this.fileNamePrefix);
    }

    /**
     * Limit the written file&#39;s row count to be smaller than or equal to the specified count. Type: integer (or Expression with resultType integer).
     * 
     */
    @Import(name="maxRowsPerFile")
      private final @Nullable Object maxRowsPerFile;

    public Optional<Object> maxRowsPerFile() {
        return this.maxRowsPerFile == null ? Optional.empty() : Optional.ofNullable(this.maxRowsPerFile);
    }

    /**
     * Indicates whether string values should always be enclosed with quotes. Type: boolean (or Expression with resultType boolean).
     * 
     */
    @Import(name="quoteAllText")
      private final @Nullable Object quoteAllText;

    public Optional<Object> quoteAllText() {
        return this.quoteAllText == null ? Optional.empty() : Optional.ofNullable(this.quoteAllText);
    }

    /**
     * The write setting type.
     * Expected value is &#39;DelimitedTextWriteSettings&#39;.
     * 
     */
    @Import(name="type", required=true)
      private final String type;

    public String type() {
        return this.type;
    }

    public DelimitedTextWriteSettingsResponse(
        Object fileExtension,
        @Nullable Object fileNamePrefix,
        @Nullable Object maxRowsPerFile,
        @Nullable Object quoteAllText,
        String type) {
        this.fileExtension = Objects.requireNonNull(fileExtension, "expected parameter 'fileExtension' to be non-null");
        this.fileNamePrefix = fileNamePrefix;
        this.maxRowsPerFile = maxRowsPerFile;
        this.quoteAllText = quoteAllText;
        this.type = Codegen.stringProp("type").arg(type).require();
    }

    private DelimitedTextWriteSettingsResponse() {
        this.fileExtension = null;
        this.fileNamePrefix = null;
        this.maxRowsPerFile = null;
        this.quoteAllText = null;
        this.type = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DelimitedTextWriteSettingsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Object fileExtension;
        private @Nullable Object fileNamePrefix;
        private @Nullable Object maxRowsPerFile;
        private @Nullable Object quoteAllText;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(DelimitedTextWriteSettingsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.fileExtension = defaults.fileExtension;
    	      this.fileNamePrefix = defaults.fileNamePrefix;
    	      this.maxRowsPerFile = defaults.maxRowsPerFile;
    	      this.quoteAllText = defaults.quoteAllText;
    	      this.type = defaults.type;
        }

        public Builder fileExtension(Object fileExtension) {
            this.fileExtension = Objects.requireNonNull(fileExtension);
            return this;
        }
        public Builder fileNamePrefix(@Nullable Object fileNamePrefix) {
            this.fileNamePrefix = fileNamePrefix;
            return this;
        }
        public Builder maxRowsPerFile(@Nullable Object maxRowsPerFile) {
            this.maxRowsPerFile = maxRowsPerFile;
            return this;
        }
        public Builder quoteAllText(@Nullable Object quoteAllText) {
            this.quoteAllText = quoteAllText;
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }        public DelimitedTextWriteSettingsResponse build() {
            return new DelimitedTextWriteSettingsResponse(fileExtension, fileNamePrefix, maxRowsPerFile, quoteAllText, type);
        }
    }
}
