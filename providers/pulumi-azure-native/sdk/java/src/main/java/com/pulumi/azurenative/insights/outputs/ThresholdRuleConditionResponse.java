// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.insights.outputs;

import com.pulumi.azurenative.insights.outputs.RuleManagementEventDataSourceResponse;
import com.pulumi.azurenative.insights.outputs.RuleMetricDataSourceResponse;
import com.pulumi.core.Either;
import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ThresholdRuleConditionResponse {
    /**
     * @return the resource from which the rule collects its data. For this type dataSource will always be of type RuleMetricDataSource.
     * 
     */
    private final @Nullable Either<RuleManagementEventDataSourceResponse,RuleMetricDataSourceResponse> dataSource;
    /**
     * @return specifies the type of condition. This can be one of three types: ManagementEventRuleCondition (occurrences of management events), LocationThresholdRuleCondition (based on the number of failures of a web test), and ThresholdRuleCondition (based on the threshold of a metric).
     * Expected value is &#39;Microsoft.Azure.Management.Insights.Models.ThresholdRuleCondition&#39;.
     * 
     */
    private final String odataType;
    /**
     * @return the operator used to compare the data and the threshold.
     * 
     */
    private final String operator;
    /**
     * @return the threshold value that activates the alert.
     * 
     */
    private final Double threshold;
    /**
     * @return the time aggregation operator. How the data that are collected should be combined over time. The default value is the PrimaryAggregationType of the Metric.
     * 
     */
    private final @Nullable String timeAggregation;
    /**
     * @return the period of time (in ISO 8601 duration format) that is used to monitor alert activity based on the threshold. If specified then it must be between 5 minutes and 1 day.
     * 
     */
    private final @Nullable String windowSize;

    @CustomType.Constructor
    private ThresholdRuleConditionResponse(
        @CustomType.Parameter("dataSource") @Nullable Either<RuleManagementEventDataSourceResponse,RuleMetricDataSourceResponse> dataSource,
        @CustomType.Parameter("odataType") String odataType,
        @CustomType.Parameter("operator") String operator,
        @CustomType.Parameter("threshold") Double threshold,
        @CustomType.Parameter("timeAggregation") @Nullable String timeAggregation,
        @CustomType.Parameter("windowSize") @Nullable String windowSize) {
        this.dataSource = dataSource;
        this.odataType = odataType;
        this.operator = operator;
        this.threshold = threshold;
        this.timeAggregation = timeAggregation;
        this.windowSize = windowSize;
    }

    /**
     * @return the resource from which the rule collects its data. For this type dataSource will always be of type RuleMetricDataSource.
     * 
     */
    public Optional<Either<RuleManagementEventDataSourceResponse,RuleMetricDataSourceResponse>> dataSource() {
        return Optional.ofNullable(this.dataSource);
    }
    /**
     * @return specifies the type of condition. This can be one of three types: ManagementEventRuleCondition (occurrences of management events), LocationThresholdRuleCondition (based on the number of failures of a web test), and ThresholdRuleCondition (based on the threshold of a metric).
     * Expected value is &#39;Microsoft.Azure.Management.Insights.Models.ThresholdRuleCondition&#39;.
     * 
     */
    public String odataType() {
        return this.odataType;
    }
    /**
     * @return the operator used to compare the data and the threshold.
     * 
     */
    public String operator() {
        return this.operator;
    }
    /**
     * @return the threshold value that activates the alert.
     * 
     */
    public Double threshold() {
        return this.threshold;
    }
    /**
     * @return the time aggregation operator. How the data that are collected should be combined over time. The default value is the PrimaryAggregationType of the Metric.
     * 
     */
    public Optional<String> timeAggregation() {
        return Optional.ofNullable(this.timeAggregation);
    }
    /**
     * @return the period of time (in ISO 8601 duration format) that is used to monitor alert activity based on the threshold. If specified then it must be between 5 minutes and 1 day.
     * 
     */
    public Optional<String> windowSize() {
        return Optional.ofNullable(this.windowSize);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ThresholdRuleConditionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Either<RuleManagementEventDataSourceResponse,RuleMetricDataSourceResponse> dataSource;
        private String odataType;
        private String operator;
        private Double threshold;
        private @Nullable String timeAggregation;
        private @Nullable String windowSize;

        public Builder() {
    	      // Empty
        }

        public Builder(ThresholdRuleConditionResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dataSource = defaults.dataSource;
    	      this.odataType = defaults.odataType;
    	      this.operator = defaults.operator;
    	      this.threshold = defaults.threshold;
    	      this.timeAggregation = defaults.timeAggregation;
    	      this.windowSize = defaults.windowSize;
        }

        public Builder dataSource(@Nullable Either<RuleManagementEventDataSourceResponse,RuleMetricDataSourceResponse> dataSource) {
            this.dataSource = dataSource;
            return this;
        }
        public Builder odataType(String odataType) {
            this.odataType = Objects.requireNonNull(odataType);
            return this;
        }
        public Builder operator(String operator) {
            this.operator = Objects.requireNonNull(operator);
            return this;
        }
        public Builder threshold(Double threshold) {
            this.threshold = Objects.requireNonNull(threshold);
            return this;
        }
        public Builder timeAggregation(@Nullable String timeAggregation) {
            this.timeAggregation = timeAggregation;
            return this;
        }
        public Builder windowSize(@Nullable String windowSize) {
            this.windowSize = windowSize;
            return this;
        }        public ThresholdRuleConditionResponse build() {
            return new ThresholdRuleConditionResponse(dataSource, odataType, operator, threshold, timeAggregation, windowSize);
        }
    }
}
