// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.web.inputs;

import com.pulumi.azurenative.web.enums.FtpsState;
import com.pulumi.azurenative.web.enums.ManagedPipelineMode;
import com.pulumi.azurenative.web.enums.ScmType;
import com.pulumi.azurenative.web.enums.SiteLoadBalancing;
import com.pulumi.azurenative.web.enums.SupportedTlsVersions;
import com.pulumi.azurenative.web.inputs.ApiDefinitionInfoArgs;
import com.pulumi.azurenative.web.inputs.ApiManagementConfigArgs;
import com.pulumi.azurenative.web.inputs.AutoHealRulesArgs;
import com.pulumi.azurenative.web.inputs.AzureStorageInfoValueArgs;
import com.pulumi.azurenative.web.inputs.ConnStringInfoArgs;
import com.pulumi.azurenative.web.inputs.CorsSettingsArgs;
import com.pulumi.azurenative.web.inputs.ExperimentsArgs;
import com.pulumi.azurenative.web.inputs.HandlerMappingArgs;
import com.pulumi.azurenative.web.inputs.IpSecurityRestrictionArgs;
import com.pulumi.azurenative.web.inputs.NameValuePairArgs;
import com.pulumi.azurenative.web.inputs.PushSettingsArgs;
import com.pulumi.azurenative.web.inputs.SiteLimitsArgs;
import com.pulumi.azurenative.web.inputs.VirtualApplicationArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Configuration of an App Service app.
 * 
 */
public final class SiteConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final SiteConfigArgs Empty = new SiteConfigArgs();

    /**
     * Flag to use Managed Identity Creds for ACR pull
     * 
     */
    @Import(name="acrUseManagedIdentityCreds")
      private final @Nullable Output<Boolean> acrUseManagedIdentityCreds;

    public Output<Boolean> acrUseManagedIdentityCreds() {
        return this.acrUseManagedIdentityCreds == null ? Codegen.empty() : this.acrUseManagedIdentityCreds;
    }

    /**
     * If using user managed identity, the user managed identity ClientId
     * 
     */
    @Import(name="acrUserManagedIdentityID")
      private final @Nullable Output<String> acrUserManagedIdentityID;

    public Output<String> acrUserManagedIdentityID() {
        return this.acrUserManagedIdentityID == null ? Codegen.empty() : this.acrUserManagedIdentityID;
    }

    /**
     * <code>true</code> if Always On is enabled; otherwise, <code>false</code>.
     * 
     */
    @Import(name="alwaysOn")
      private final @Nullable Output<Boolean> alwaysOn;

    public Output<Boolean> alwaysOn() {
        return this.alwaysOn == null ? Codegen.empty() : this.alwaysOn;
    }

    /**
     * Information about the formal API definition for the app.
     * 
     */
    @Import(name="apiDefinition")
      private final @Nullable Output<ApiDefinitionInfoArgs> apiDefinition;

    public Output<ApiDefinitionInfoArgs> apiDefinition() {
        return this.apiDefinition == null ? Codegen.empty() : this.apiDefinition;
    }

    /**
     * Azure API management settings linked to the app.
     * 
     */
    @Import(name="apiManagementConfig")
      private final @Nullable Output<ApiManagementConfigArgs> apiManagementConfig;

    public Output<ApiManagementConfigArgs> apiManagementConfig() {
        return this.apiManagementConfig == null ? Codegen.empty() : this.apiManagementConfig;
    }

    /**
     * App command line to launch.
     * 
     */
    @Import(name="appCommandLine")
      private final @Nullable Output<String> appCommandLine;

    public Output<String> appCommandLine() {
        return this.appCommandLine == null ? Codegen.empty() : this.appCommandLine;
    }

    /**
     * Application settings.
     * 
     */
    @Import(name="appSettings")
      private final @Nullable Output<List<NameValuePairArgs>> appSettings;

    public Output<List<NameValuePairArgs>> appSettings() {
        return this.appSettings == null ? Codegen.empty() : this.appSettings;
    }

    /**
     * <code>true</code> if Auto Heal is enabled; otherwise, <code>false</code>.
     * 
     */
    @Import(name="autoHealEnabled")
      private final @Nullable Output<Boolean> autoHealEnabled;

    public Output<Boolean> autoHealEnabled() {
        return this.autoHealEnabled == null ? Codegen.empty() : this.autoHealEnabled;
    }

    /**
     * Auto Heal rules.
     * 
     */
    @Import(name="autoHealRules")
      private final @Nullable Output<AutoHealRulesArgs> autoHealRules;

    public Output<AutoHealRulesArgs> autoHealRules() {
        return this.autoHealRules == null ? Codegen.empty() : this.autoHealRules;
    }

    /**
     * Auto-swap slot name.
     * 
     */
    @Import(name="autoSwapSlotName")
      private final @Nullable Output<String> autoSwapSlotName;

    public Output<String> autoSwapSlotName() {
        return this.autoSwapSlotName == null ? Codegen.empty() : this.autoSwapSlotName;
    }

    /**
     * List of Azure Storage Accounts.
     * 
     */
    @Import(name="azureStorageAccounts")
      private final @Nullable Output<Map<String,AzureStorageInfoValueArgs>> azureStorageAccounts;

    public Output<Map<String,AzureStorageInfoValueArgs>> azureStorageAccounts() {
        return this.azureStorageAccounts == null ? Codegen.empty() : this.azureStorageAccounts;
    }

    /**
     * Connection strings.
     * 
     */
    @Import(name="connectionStrings")
      private final @Nullable Output<List<ConnStringInfoArgs>> connectionStrings;

    public Output<List<ConnStringInfoArgs>> connectionStrings() {
        return this.connectionStrings == null ? Codegen.empty() : this.connectionStrings;
    }

    /**
     * Cross-Origin Resource Sharing (CORS) settings.
     * 
     */
    @Import(name="cors")
      private final @Nullable Output<CorsSettingsArgs> cors;

    public Output<CorsSettingsArgs> cors() {
        return this.cors == null ? Codegen.empty() : this.cors;
    }

    /**
     * Default documents.
     * 
     */
    @Import(name="defaultDocuments")
      private final @Nullable Output<List<String>> defaultDocuments;

    public Output<List<String>> defaultDocuments() {
        return this.defaultDocuments == null ? Codegen.empty() : this.defaultDocuments;
    }

    /**
     * <code>true</code> if detailed error logging is enabled; otherwise, <code>false</code>.
     * 
     */
    @Import(name="detailedErrorLoggingEnabled")
      private final @Nullable Output<Boolean> detailedErrorLoggingEnabled;

    public Output<Boolean> detailedErrorLoggingEnabled() {
        return this.detailedErrorLoggingEnabled == null ? Codegen.empty() : this.detailedErrorLoggingEnabled;
    }

    /**
     * Document root.
     * 
     */
    @Import(name="documentRoot")
      private final @Nullable Output<String> documentRoot;

    public Output<String> documentRoot() {
        return this.documentRoot == null ? Codegen.empty() : this.documentRoot;
    }

    /**
     * This is work around for polymorphic types.
     * 
     */
    @Import(name="experiments")
      private final @Nullable Output<ExperimentsArgs> experiments;

    public Output<ExperimentsArgs> experiments() {
        return this.experiments == null ? Codegen.empty() : this.experiments;
    }

    /**
     * State of FTP / FTPS service
     * 
     */
    @Import(name="ftpsState")
      private final @Nullable Output<Either<String,FtpsState>> ftpsState;

    public Output<Either<String,FtpsState>> ftpsState() {
        return this.ftpsState == null ? Codegen.empty() : this.ftpsState;
    }

    /**
     * Maximum number of workers that a site can scale out to.
     * This setting only applies to the Consumption and Elastic Premium Plans
     * 
     */
    @Import(name="functionAppScaleLimit")
      private final @Nullable Output<Integer> functionAppScaleLimit;

    public Output<Integer> functionAppScaleLimit() {
        return this.functionAppScaleLimit == null ? Codegen.empty() : this.functionAppScaleLimit;
    }

    /**
     * Gets or sets a value indicating whether functions runtime scale monitoring is enabled. When enabled,
     * the ScaleController will not monitor event sources directly, but will instead call to the
     * runtime to get scale status.
     * 
     */
    @Import(name="functionsRuntimeScaleMonitoringEnabled")
      private final @Nullable Output<Boolean> functionsRuntimeScaleMonitoringEnabled;

    public Output<Boolean> functionsRuntimeScaleMonitoringEnabled() {
        return this.functionsRuntimeScaleMonitoringEnabled == null ? Codegen.empty() : this.functionsRuntimeScaleMonitoringEnabled;
    }

    /**
     * Handler mappings.
     * 
     */
    @Import(name="handlerMappings")
      private final @Nullable Output<List<HandlerMappingArgs>> handlerMappings;

    public Output<List<HandlerMappingArgs>> handlerMappings() {
        return this.handlerMappings == null ? Codegen.empty() : this.handlerMappings;
    }

    /**
     * Health check path
     * 
     */
    @Import(name="healthCheckPath")
      private final @Nullable Output<String> healthCheckPath;

    public Output<String> healthCheckPath() {
        return this.healthCheckPath == null ? Codegen.empty() : this.healthCheckPath;
    }

    /**
     * Http20Enabled: configures a web site to allow clients to connect over http2.0
     * 
     */
    @Import(name="http20Enabled")
      private final @Nullable Output<Boolean> http20Enabled;

    public Output<Boolean> http20Enabled() {
        return this.http20Enabled == null ? Codegen.empty() : this.http20Enabled;
    }

    /**
     * <code>true</code> if HTTP logging is enabled; otherwise, <code>false</code>.
     * 
     */
    @Import(name="httpLoggingEnabled")
      private final @Nullable Output<Boolean> httpLoggingEnabled;

    public Output<Boolean> httpLoggingEnabled() {
        return this.httpLoggingEnabled == null ? Codegen.empty() : this.httpLoggingEnabled;
    }

    /**
     * IP security restrictions for main.
     * 
     */
    @Import(name="ipSecurityRestrictions")
      private final @Nullable Output<List<IpSecurityRestrictionArgs>> ipSecurityRestrictions;

    public Output<List<IpSecurityRestrictionArgs>> ipSecurityRestrictions() {
        return this.ipSecurityRestrictions == null ? Codegen.empty() : this.ipSecurityRestrictions;
    }

    /**
     * Java container.
     * 
     */
    @Import(name="javaContainer")
      private final @Nullable Output<String> javaContainer;

    public Output<String> javaContainer() {
        return this.javaContainer == null ? Codegen.empty() : this.javaContainer;
    }

    /**
     * Java container version.
     * 
     */
    @Import(name="javaContainerVersion")
      private final @Nullable Output<String> javaContainerVersion;

    public Output<String> javaContainerVersion() {
        return this.javaContainerVersion == null ? Codegen.empty() : this.javaContainerVersion;
    }

    /**
     * Java version.
     * 
     */
    @Import(name="javaVersion")
      private final @Nullable Output<String> javaVersion;

    public Output<String> javaVersion() {
        return this.javaVersion == null ? Codegen.empty() : this.javaVersion;
    }

    /**
     * Identity to use for Key Vault Reference authentication.
     * 
     */
    @Import(name="keyVaultReferenceIdentity")
      private final @Nullable Output<String> keyVaultReferenceIdentity;

    public Output<String> keyVaultReferenceIdentity() {
        return this.keyVaultReferenceIdentity == null ? Codegen.empty() : this.keyVaultReferenceIdentity;
    }

    /**
     * Site limits.
     * 
     */
    @Import(name="limits")
      private final @Nullable Output<SiteLimitsArgs> limits;

    public Output<SiteLimitsArgs> limits() {
        return this.limits == null ? Codegen.empty() : this.limits;
    }

    /**
     * Linux App Framework and version
     * 
     */
    @Import(name="linuxFxVersion")
      private final @Nullable Output<String> linuxFxVersion;

    public Output<String> linuxFxVersion() {
        return this.linuxFxVersion == null ? Codegen.empty() : this.linuxFxVersion;
    }

    /**
     * Site load balancing.
     * 
     */
    @Import(name="loadBalancing")
      private final @Nullable Output<SiteLoadBalancing> loadBalancing;

    public Output<SiteLoadBalancing> loadBalancing() {
        return this.loadBalancing == null ? Codegen.empty() : this.loadBalancing;
    }

    /**
     * <code>true</code> to enable local MySQL; otherwise, <code>false</code>.
     * 
     */
    @Import(name="localMySqlEnabled")
      private final @Nullable Output<Boolean> localMySqlEnabled;

    public Output<Boolean> localMySqlEnabled() {
        return this.localMySqlEnabled == null ? Codegen.empty() : this.localMySqlEnabled;
    }

    /**
     * HTTP logs directory size limit.
     * 
     */
    @Import(name="logsDirectorySizeLimit")
      private final @Nullable Output<Integer> logsDirectorySizeLimit;

    public Output<Integer> logsDirectorySizeLimit() {
        return this.logsDirectorySizeLimit == null ? Codegen.empty() : this.logsDirectorySizeLimit;
    }

    /**
     * Managed pipeline mode.
     * 
     */
    @Import(name="managedPipelineMode")
      private final @Nullable Output<ManagedPipelineMode> managedPipelineMode;

    public Output<ManagedPipelineMode> managedPipelineMode() {
        return this.managedPipelineMode == null ? Codegen.empty() : this.managedPipelineMode;
    }

    /**
     * Managed Service Identity Id
     * 
     */
    @Import(name="managedServiceIdentityId")
      private final @Nullable Output<Integer> managedServiceIdentityId;

    public Output<Integer> managedServiceIdentityId() {
        return this.managedServiceIdentityId == null ? Codegen.empty() : this.managedServiceIdentityId;
    }

    /**
     * MinTlsVersion: configures the minimum version of TLS required for SSL requests
     * 
     */
    @Import(name="minTlsVersion")
      private final @Nullable Output<Either<String,SupportedTlsVersions>> minTlsVersion;

    public Output<Either<String,SupportedTlsVersions>> minTlsVersion() {
        return this.minTlsVersion == null ? Codegen.empty() : this.minTlsVersion;
    }

    /**
     * Number of minimum instance count for a site
     * This setting only applies to the Elastic Plans
     * 
     */
    @Import(name="minimumElasticInstanceCount")
      private final @Nullable Output<Integer> minimumElasticInstanceCount;

    public Output<Integer> minimumElasticInstanceCount() {
        return this.minimumElasticInstanceCount == null ? Codegen.empty() : this.minimumElasticInstanceCount;
    }

    /**
     * .NET Framework version.
     * 
     */
    @Import(name="netFrameworkVersion")
      private final @Nullable Output<String> netFrameworkVersion;

    public Output<String> netFrameworkVersion() {
        return this.netFrameworkVersion == null ? Codegen.empty() : this.netFrameworkVersion;
    }

    /**
     * Version of Node.js.
     * 
     */
    @Import(name="nodeVersion")
      private final @Nullable Output<String> nodeVersion;

    public Output<String> nodeVersion() {
        return this.nodeVersion == null ? Codegen.empty() : this.nodeVersion;
    }

    /**
     * Number of workers.
     * 
     */
    @Import(name="numberOfWorkers")
      private final @Nullable Output<Integer> numberOfWorkers;

    public Output<Integer> numberOfWorkers() {
        return this.numberOfWorkers == null ? Codegen.empty() : this.numberOfWorkers;
    }

    /**
     * Version of PHP.
     * 
     */
    @Import(name="phpVersion")
      private final @Nullable Output<String> phpVersion;

    public Output<String> phpVersion() {
        return this.phpVersion == null ? Codegen.empty() : this.phpVersion;
    }

    /**
     * Version of PowerShell.
     * 
     */
    @Import(name="powerShellVersion")
      private final @Nullable Output<String> powerShellVersion;

    public Output<String> powerShellVersion() {
        return this.powerShellVersion == null ? Codegen.empty() : this.powerShellVersion;
    }

    /**
     * Number of preWarmed instances.
     * This setting only applies to the Consumption and Elastic Plans
     * 
     */
    @Import(name="preWarmedInstanceCount")
      private final @Nullable Output<Integer> preWarmedInstanceCount;

    public Output<Integer> preWarmedInstanceCount() {
        return this.preWarmedInstanceCount == null ? Codegen.empty() : this.preWarmedInstanceCount;
    }

    /**
     * Property to allow or block all public traffic.
     * 
     */
    @Import(name="publicNetworkAccess")
      private final @Nullable Output<String> publicNetworkAccess;

    public Output<String> publicNetworkAccess() {
        return this.publicNetworkAccess == null ? Codegen.empty() : this.publicNetworkAccess;
    }

    /**
     * Publishing user name.
     * 
     */
    @Import(name="publishingUsername")
      private final @Nullable Output<String> publishingUsername;

    public Output<String> publishingUsername() {
        return this.publishingUsername == null ? Codegen.empty() : this.publishingUsername;
    }

    /**
     * Push endpoint settings.
     * 
     */
    @Import(name="push")
      private final @Nullable Output<PushSettingsArgs> push;

    public Output<PushSettingsArgs> push() {
        return this.push == null ? Codegen.empty() : this.push;
    }

    /**
     * Version of Python.
     * 
     */
    @Import(name="pythonVersion")
      private final @Nullable Output<String> pythonVersion;

    public Output<String> pythonVersion() {
        return this.pythonVersion == null ? Codegen.empty() : this.pythonVersion;
    }

    /**
     * <code>true</code> if remote debugging is enabled; otherwise, <code>false</code>.
     * 
     */
    @Import(name="remoteDebuggingEnabled")
      private final @Nullable Output<Boolean> remoteDebuggingEnabled;

    public Output<Boolean> remoteDebuggingEnabled() {
        return this.remoteDebuggingEnabled == null ? Codegen.empty() : this.remoteDebuggingEnabled;
    }

    /**
     * Remote debugging version.
     * 
     */
    @Import(name="remoteDebuggingVersion")
      private final @Nullable Output<String> remoteDebuggingVersion;

    public Output<String> remoteDebuggingVersion() {
        return this.remoteDebuggingVersion == null ? Codegen.empty() : this.remoteDebuggingVersion;
    }

    /**
     * <code>true</code> if request tracing is enabled; otherwise, <code>false</code>.
     * 
     */
    @Import(name="requestTracingEnabled")
      private final @Nullable Output<Boolean> requestTracingEnabled;

    public Output<Boolean> requestTracingEnabled() {
        return this.requestTracingEnabled == null ? Codegen.empty() : this.requestTracingEnabled;
    }

    /**
     * Request tracing expiration time.
     * 
     */
    @Import(name="requestTracingExpirationTime")
      private final @Nullable Output<String> requestTracingExpirationTime;

    public Output<String> requestTracingExpirationTime() {
        return this.requestTracingExpirationTime == null ? Codegen.empty() : this.requestTracingExpirationTime;
    }

    /**
     * IP security restrictions for scm.
     * 
     */
    @Import(name="scmIpSecurityRestrictions")
      private final @Nullable Output<List<IpSecurityRestrictionArgs>> scmIpSecurityRestrictions;

    public Output<List<IpSecurityRestrictionArgs>> scmIpSecurityRestrictions() {
        return this.scmIpSecurityRestrictions == null ? Codegen.empty() : this.scmIpSecurityRestrictions;
    }

    /**
     * IP security restrictions for scm to use main.
     * 
     */
    @Import(name="scmIpSecurityRestrictionsUseMain")
      private final @Nullable Output<Boolean> scmIpSecurityRestrictionsUseMain;

    public Output<Boolean> scmIpSecurityRestrictionsUseMain() {
        return this.scmIpSecurityRestrictionsUseMain == null ? Codegen.empty() : this.scmIpSecurityRestrictionsUseMain;
    }

    /**
     * ScmMinTlsVersion: configures the minimum version of TLS required for SSL requests for SCM site
     * 
     */
    @Import(name="scmMinTlsVersion")
      private final @Nullable Output<Either<String,SupportedTlsVersions>> scmMinTlsVersion;

    public Output<Either<String,SupportedTlsVersions>> scmMinTlsVersion() {
        return this.scmMinTlsVersion == null ? Codegen.empty() : this.scmMinTlsVersion;
    }

    /**
     * SCM type.
     * 
     */
    @Import(name="scmType")
      private final @Nullable Output<Either<String,ScmType>> scmType;

    public Output<Either<String,ScmType>> scmType() {
        return this.scmType == null ? Codegen.empty() : this.scmType;
    }

    /**
     * Tracing options.
     * 
     */
    @Import(name="tracingOptions")
      private final @Nullable Output<String> tracingOptions;

    public Output<String> tracingOptions() {
        return this.tracingOptions == null ? Codegen.empty() : this.tracingOptions;
    }

    /**
     * <code>true</code> to use 32-bit worker process; otherwise, <code>false</code>.
     * 
     */
    @Import(name="use32BitWorkerProcess")
      private final @Nullable Output<Boolean> use32BitWorkerProcess;

    public Output<Boolean> use32BitWorkerProcess() {
        return this.use32BitWorkerProcess == null ? Codegen.empty() : this.use32BitWorkerProcess;
    }

    /**
     * Virtual applications.
     * 
     */
    @Import(name="virtualApplications")
      private final @Nullable Output<List<VirtualApplicationArgs>> virtualApplications;

    public Output<List<VirtualApplicationArgs>> virtualApplications() {
        return this.virtualApplications == null ? Codegen.empty() : this.virtualApplications;
    }

    /**
     * Virtual Network name.
     * 
     */
    @Import(name="vnetName")
      private final @Nullable Output<String> vnetName;

    public Output<String> vnetName() {
        return this.vnetName == null ? Codegen.empty() : this.vnetName;
    }

    /**
     * The number of private ports assigned to this app. These will be assigned dynamically on runtime.
     * 
     */
    @Import(name="vnetPrivatePortsCount")
      private final @Nullable Output<Integer> vnetPrivatePortsCount;

    public Output<Integer> vnetPrivatePortsCount() {
        return this.vnetPrivatePortsCount == null ? Codegen.empty() : this.vnetPrivatePortsCount;
    }

    /**
     * Virtual Network Route All enabled. This causes all outbound traffic to have Virtual Network Security Groups and User Defined Routes applied.
     * 
     */
    @Import(name="vnetRouteAllEnabled")
      private final @Nullable Output<Boolean> vnetRouteAllEnabled;

    public Output<Boolean> vnetRouteAllEnabled() {
        return this.vnetRouteAllEnabled == null ? Codegen.empty() : this.vnetRouteAllEnabled;
    }

    /**
     * <code>true</code> if WebSocket is enabled; otherwise, <code>false</code>.
     * 
     */
    @Import(name="webSocketsEnabled")
      private final @Nullable Output<Boolean> webSocketsEnabled;

    public Output<Boolean> webSocketsEnabled() {
        return this.webSocketsEnabled == null ? Codegen.empty() : this.webSocketsEnabled;
    }

    /**
     * Sets the time zone a site uses for generating timestamps. Compatible with Linux and Windows App Service. Setting the WEBSITE_TIME_ZONE app setting takes precedence over this config. For Linux, expects tz database values https://www.iana.org/time-zones (for a quick reference see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones). For Windows, expects one of the time zones listed under HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Time Zones
     * 
     */
    @Import(name="websiteTimeZone")
      private final @Nullable Output<String> websiteTimeZone;

    public Output<String> websiteTimeZone() {
        return this.websiteTimeZone == null ? Codegen.empty() : this.websiteTimeZone;
    }

    /**
     * Xenon App Framework and version
     * 
     */
    @Import(name="windowsFxVersion")
      private final @Nullable Output<String> windowsFxVersion;

    public Output<String> windowsFxVersion() {
        return this.windowsFxVersion == null ? Codegen.empty() : this.windowsFxVersion;
    }

    /**
     * Explicit Managed Service Identity Id
     * 
     */
    @Import(name="xManagedServiceIdentityId")
      private final @Nullable Output<Integer> xManagedServiceIdentityId;

    public Output<Integer> xManagedServiceIdentityId() {
        return this.xManagedServiceIdentityId == null ? Codegen.empty() : this.xManagedServiceIdentityId;
    }

    public SiteConfigArgs(
        @Nullable Output<Boolean> acrUseManagedIdentityCreds,
        @Nullable Output<String> acrUserManagedIdentityID,
        @Nullable Output<Boolean> alwaysOn,
        @Nullable Output<ApiDefinitionInfoArgs> apiDefinition,
        @Nullable Output<ApiManagementConfigArgs> apiManagementConfig,
        @Nullable Output<String> appCommandLine,
        @Nullable Output<List<NameValuePairArgs>> appSettings,
        @Nullable Output<Boolean> autoHealEnabled,
        @Nullable Output<AutoHealRulesArgs> autoHealRules,
        @Nullable Output<String> autoSwapSlotName,
        @Nullable Output<Map<String,AzureStorageInfoValueArgs>> azureStorageAccounts,
        @Nullable Output<List<ConnStringInfoArgs>> connectionStrings,
        @Nullable Output<CorsSettingsArgs> cors,
        @Nullable Output<List<String>> defaultDocuments,
        @Nullable Output<Boolean> detailedErrorLoggingEnabled,
        @Nullable Output<String> documentRoot,
        @Nullable Output<ExperimentsArgs> experiments,
        @Nullable Output<Either<String,FtpsState>> ftpsState,
        @Nullable Output<Integer> functionAppScaleLimit,
        @Nullable Output<Boolean> functionsRuntimeScaleMonitoringEnabled,
        @Nullable Output<List<HandlerMappingArgs>> handlerMappings,
        @Nullable Output<String> healthCheckPath,
        @Nullable Output<Boolean> http20Enabled,
        @Nullable Output<Boolean> httpLoggingEnabled,
        @Nullable Output<List<IpSecurityRestrictionArgs>> ipSecurityRestrictions,
        @Nullable Output<String> javaContainer,
        @Nullable Output<String> javaContainerVersion,
        @Nullable Output<String> javaVersion,
        @Nullable Output<String> keyVaultReferenceIdentity,
        @Nullable Output<SiteLimitsArgs> limits,
        @Nullable Output<String> linuxFxVersion,
        @Nullable Output<SiteLoadBalancing> loadBalancing,
        @Nullable Output<Boolean> localMySqlEnabled,
        @Nullable Output<Integer> logsDirectorySizeLimit,
        @Nullable Output<ManagedPipelineMode> managedPipelineMode,
        @Nullable Output<Integer> managedServiceIdentityId,
        @Nullable Output<Either<String,SupportedTlsVersions>> minTlsVersion,
        @Nullable Output<Integer> minimumElasticInstanceCount,
        @Nullable Output<String> netFrameworkVersion,
        @Nullable Output<String> nodeVersion,
        @Nullable Output<Integer> numberOfWorkers,
        @Nullable Output<String> phpVersion,
        @Nullable Output<String> powerShellVersion,
        @Nullable Output<Integer> preWarmedInstanceCount,
        @Nullable Output<String> publicNetworkAccess,
        @Nullable Output<String> publishingUsername,
        @Nullable Output<PushSettingsArgs> push,
        @Nullable Output<String> pythonVersion,
        @Nullable Output<Boolean> remoteDebuggingEnabled,
        @Nullable Output<String> remoteDebuggingVersion,
        @Nullable Output<Boolean> requestTracingEnabled,
        @Nullable Output<String> requestTracingExpirationTime,
        @Nullable Output<List<IpSecurityRestrictionArgs>> scmIpSecurityRestrictions,
        @Nullable Output<Boolean> scmIpSecurityRestrictionsUseMain,
        @Nullable Output<Either<String,SupportedTlsVersions>> scmMinTlsVersion,
        @Nullable Output<Either<String,ScmType>> scmType,
        @Nullable Output<String> tracingOptions,
        @Nullable Output<Boolean> use32BitWorkerProcess,
        @Nullable Output<List<VirtualApplicationArgs>> virtualApplications,
        @Nullable Output<String> vnetName,
        @Nullable Output<Integer> vnetPrivatePortsCount,
        @Nullable Output<Boolean> vnetRouteAllEnabled,
        @Nullable Output<Boolean> webSocketsEnabled,
        @Nullable Output<String> websiteTimeZone,
        @Nullable Output<String> windowsFxVersion,
        @Nullable Output<Integer> xManagedServiceIdentityId) {
        this.acrUseManagedIdentityCreds = acrUseManagedIdentityCreds;
        this.acrUserManagedIdentityID = acrUserManagedIdentityID;
        this.alwaysOn = alwaysOn;
        this.apiDefinition = apiDefinition;
        this.apiManagementConfig = apiManagementConfig;
        this.appCommandLine = appCommandLine;
        this.appSettings = appSettings;
        this.autoHealEnabled = autoHealEnabled;
        this.autoHealRules = autoHealRules;
        this.autoSwapSlotName = autoSwapSlotName;
        this.azureStorageAccounts = azureStorageAccounts;
        this.connectionStrings = connectionStrings;
        this.cors = cors;
        this.defaultDocuments = defaultDocuments;
        this.detailedErrorLoggingEnabled = detailedErrorLoggingEnabled;
        this.documentRoot = documentRoot;
        this.experiments = experiments;
        this.ftpsState = ftpsState;
        this.functionAppScaleLimit = functionAppScaleLimit;
        this.functionsRuntimeScaleMonitoringEnabled = functionsRuntimeScaleMonitoringEnabled;
        this.handlerMappings = handlerMappings;
        this.healthCheckPath = healthCheckPath;
        this.http20Enabled = http20Enabled == null ? Codegen.ofNullable(true) : http20Enabled;
        this.httpLoggingEnabled = httpLoggingEnabled;
        this.ipSecurityRestrictions = ipSecurityRestrictions;
        this.javaContainer = javaContainer;
        this.javaContainerVersion = javaContainerVersion;
        this.javaVersion = javaVersion;
        this.keyVaultReferenceIdentity = keyVaultReferenceIdentity;
        this.limits = limits;
        this.linuxFxVersion = linuxFxVersion;
        this.loadBalancing = loadBalancing;
        this.localMySqlEnabled = localMySqlEnabled == null ? Codegen.ofNullable(false) : localMySqlEnabled;
        this.logsDirectorySizeLimit = logsDirectorySizeLimit;
        this.managedPipelineMode = managedPipelineMode;
        this.managedServiceIdentityId = managedServiceIdentityId;
        this.minTlsVersion = minTlsVersion;
        this.minimumElasticInstanceCount = minimumElasticInstanceCount;
        this.netFrameworkVersion = netFrameworkVersion == null ? Codegen.ofNullable("v4.6") : netFrameworkVersion;
        this.nodeVersion = nodeVersion;
        this.numberOfWorkers = numberOfWorkers;
        this.phpVersion = phpVersion;
        this.powerShellVersion = powerShellVersion;
        this.preWarmedInstanceCount = preWarmedInstanceCount;
        this.publicNetworkAccess = publicNetworkAccess;
        this.publishingUsername = publishingUsername;
        this.push = push;
        this.pythonVersion = pythonVersion;
        this.remoteDebuggingEnabled = remoteDebuggingEnabled;
        this.remoteDebuggingVersion = remoteDebuggingVersion;
        this.requestTracingEnabled = requestTracingEnabled;
        this.requestTracingExpirationTime = requestTracingExpirationTime;
        this.scmIpSecurityRestrictions = scmIpSecurityRestrictions;
        this.scmIpSecurityRestrictionsUseMain = scmIpSecurityRestrictionsUseMain;
        this.scmMinTlsVersion = scmMinTlsVersion;
        this.scmType = scmType;
        this.tracingOptions = tracingOptions;
        this.use32BitWorkerProcess = use32BitWorkerProcess;
        this.virtualApplications = virtualApplications;
        this.vnetName = vnetName;
        this.vnetPrivatePortsCount = vnetPrivatePortsCount;
        this.vnetRouteAllEnabled = vnetRouteAllEnabled;
        this.webSocketsEnabled = webSocketsEnabled;
        this.websiteTimeZone = websiteTimeZone;
        this.windowsFxVersion = windowsFxVersion;
        this.xManagedServiceIdentityId = xManagedServiceIdentityId;
    }

    private SiteConfigArgs() {
        this.acrUseManagedIdentityCreds = Codegen.empty();
        this.acrUserManagedIdentityID = Codegen.empty();
        this.alwaysOn = Codegen.empty();
        this.apiDefinition = Codegen.empty();
        this.apiManagementConfig = Codegen.empty();
        this.appCommandLine = Codegen.empty();
        this.appSettings = Codegen.empty();
        this.autoHealEnabled = Codegen.empty();
        this.autoHealRules = Codegen.empty();
        this.autoSwapSlotName = Codegen.empty();
        this.azureStorageAccounts = Codegen.empty();
        this.connectionStrings = Codegen.empty();
        this.cors = Codegen.empty();
        this.defaultDocuments = Codegen.empty();
        this.detailedErrorLoggingEnabled = Codegen.empty();
        this.documentRoot = Codegen.empty();
        this.experiments = Codegen.empty();
        this.ftpsState = Codegen.empty();
        this.functionAppScaleLimit = Codegen.empty();
        this.functionsRuntimeScaleMonitoringEnabled = Codegen.empty();
        this.handlerMappings = Codegen.empty();
        this.healthCheckPath = Codegen.empty();
        this.http20Enabled = Codegen.empty();
        this.httpLoggingEnabled = Codegen.empty();
        this.ipSecurityRestrictions = Codegen.empty();
        this.javaContainer = Codegen.empty();
        this.javaContainerVersion = Codegen.empty();
        this.javaVersion = Codegen.empty();
        this.keyVaultReferenceIdentity = Codegen.empty();
        this.limits = Codegen.empty();
        this.linuxFxVersion = Codegen.empty();
        this.loadBalancing = Codegen.empty();
        this.localMySqlEnabled = Codegen.empty();
        this.logsDirectorySizeLimit = Codegen.empty();
        this.managedPipelineMode = Codegen.empty();
        this.managedServiceIdentityId = Codegen.empty();
        this.minTlsVersion = Codegen.empty();
        this.minimumElasticInstanceCount = Codegen.empty();
        this.netFrameworkVersion = Codegen.empty();
        this.nodeVersion = Codegen.empty();
        this.numberOfWorkers = Codegen.empty();
        this.phpVersion = Codegen.empty();
        this.powerShellVersion = Codegen.empty();
        this.preWarmedInstanceCount = Codegen.empty();
        this.publicNetworkAccess = Codegen.empty();
        this.publishingUsername = Codegen.empty();
        this.push = Codegen.empty();
        this.pythonVersion = Codegen.empty();
        this.remoteDebuggingEnabled = Codegen.empty();
        this.remoteDebuggingVersion = Codegen.empty();
        this.requestTracingEnabled = Codegen.empty();
        this.requestTracingExpirationTime = Codegen.empty();
        this.scmIpSecurityRestrictions = Codegen.empty();
        this.scmIpSecurityRestrictionsUseMain = Codegen.empty();
        this.scmMinTlsVersion = Codegen.empty();
        this.scmType = Codegen.empty();
        this.tracingOptions = Codegen.empty();
        this.use32BitWorkerProcess = Codegen.empty();
        this.virtualApplications = Codegen.empty();
        this.vnetName = Codegen.empty();
        this.vnetPrivatePortsCount = Codegen.empty();
        this.vnetRouteAllEnabled = Codegen.empty();
        this.webSocketsEnabled = Codegen.empty();
        this.websiteTimeZone = Codegen.empty();
        this.windowsFxVersion = Codegen.empty();
        this.xManagedServiceIdentityId = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SiteConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Boolean> acrUseManagedIdentityCreds;
        private @Nullable Output<String> acrUserManagedIdentityID;
        private @Nullable Output<Boolean> alwaysOn;
        private @Nullable Output<ApiDefinitionInfoArgs> apiDefinition;
        private @Nullable Output<ApiManagementConfigArgs> apiManagementConfig;
        private @Nullable Output<String> appCommandLine;
        private @Nullable Output<List<NameValuePairArgs>> appSettings;
        private @Nullable Output<Boolean> autoHealEnabled;
        private @Nullable Output<AutoHealRulesArgs> autoHealRules;
        private @Nullable Output<String> autoSwapSlotName;
        private @Nullable Output<Map<String,AzureStorageInfoValueArgs>> azureStorageAccounts;
        private @Nullable Output<List<ConnStringInfoArgs>> connectionStrings;
        private @Nullable Output<CorsSettingsArgs> cors;
        private @Nullable Output<List<String>> defaultDocuments;
        private @Nullable Output<Boolean> detailedErrorLoggingEnabled;
        private @Nullable Output<String> documentRoot;
        private @Nullable Output<ExperimentsArgs> experiments;
        private @Nullable Output<Either<String,FtpsState>> ftpsState;
        private @Nullable Output<Integer> functionAppScaleLimit;
        private @Nullable Output<Boolean> functionsRuntimeScaleMonitoringEnabled;
        private @Nullable Output<List<HandlerMappingArgs>> handlerMappings;
        private @Nullable Output<String> healthCheckPath;
        private @Nullable Output<Boolean> http20Enabled;
        private @Nullable Output<Boolean> httpLoggingEnabled;
        private @Nullable Output<List<IpSecurityRestrictionArgs>> ipSecurityRestrictions;
        private @Nullable Output<String> javaContainer;
        private @Nullable Output<String> javaContainerVersion;
        private @Nullable Output<String> javaVersion;
        private @Nullable Output<String> keyVaultReferenceIdentity;
        private @Nullable Output<SiteLimitsArgs> limits;
        private @Nullable Output<String> linuxFxVersion;
        private @Nullable Output<SiteLoadBalancing> loadBalancing;
        private @Nullable Output<Boolean> localMySqlEnabled;
        private @Nullable Output<Integer> logsDirectorySizeLimit;
        private @Nullable Output<ManagedPipelineMode> managedPipelineMode;
        private @Nullable Output<Integer> managedServiceIdentityId;
        private @Nullable Output<Either<String,SupportedTlsVersions>> minTlsVersion;
        private @Nullable Output<Integer> minimumElasticInstanceCount;
        private @Nullable Output<String> netFrameworkVersion;
        private @Nullable Output<String> nodeVersion;
        private @Nullable Output<Integer> numberOfWorkers;
        private @Nullable Output<String> phpVersion;
        private @Nullable Output<String> powerShellVersion;
        private @Nullable Output<Integer> preWarmedInstanceCount;
        private @Nullable Output<String> publicNetworkAccess;
        private @Nullable Output<String> publishingUsername;
        private @Nullable Output<PushSettingsArgs> push;
        private @Nullable Output<String> pythonVersion;
        private @Nullable Output<Boolean> remoteDebuggingEnabled;
        private @Nullable Output<String> remoteDebuggingVersion;
        private @Nullable Output<Boolean> requestTracingEnabled;
        private @Nullable Output<String> requestTracingExpirationTime;
        private @Nullable Output<List<IpSecurityRestrictionArgs>> scmIpSecurityRestrictions;
        private @Nullable Output<Boolean> scmIpSecurityRestrictionsUseMain;
        private @Nullable Output<Either<String,SupportedTlsVersions>> scmMinTlsVersion;
        private @Nullable Output<Either<String,ScmType>> scmType;
        private @Nullable Output<String> tracingOptions;
        private @Nullable Output<Boolean> use32BitWorkerProcess;
        private @Nullable Output<List<VirtualApplicationArgs>> virtualApplications;
        private @Nullable Output<String> vnetName;
        private @Nullable Output<Integer> vnetPrivatePortsCount;
        private @Nullable Output<Boolean> vnetRouteAllEnabled;
        private @Nullable Output<Boolean> webSocketsEnabled;
        private @Nullable Output<String> websiteTimeZone;
        private @Nullable Output<String> windowsFxVersion;
        private @Nullable Output<Integer> xManagedServiceIdentityId;

        public Builder() {
    	      // Empty
        }

        public Builder(SiteConfigArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.acrUseManagedIdentityCreds = defaults.acrUseManagedIdentityCreds;
    	      this.acrUserManagedIdentityID = defaults.acrUserManagedIdentityID;
    	      this.alwaysOn = defaults.alwaysOn;
    	      this.apiDefinition = defaults.apiDefinition;
    	      this.apiManagementConfig = defaults.apiManagementConfig;
    	      this.appCommandLine = defaults.appCommandLine;
    	      this.appSettings = defaults.appSettings;
    	      this.autoHealEnabled = defaults.autoHealEnabled;
    	      this.autoHealRules = defaults.autoHealRules;
    	      this.autoSwapSlotName = defaults.autoSwapSlotName;
    	      this.azureStorageAccounts = defaults.azureStorageAccounts;
    	      this.connectionStrings = defaults.connectionStrings;
    	      this.cors = defaults.cors;
    	      this.defaultDocuments = defaults.defaultDocuments;
    	      this.detailedErrorLoggingEnabled = defaults.detailedErrorLoggingEnabled;
    	      this.documentRoot = defaults.documentRoot;
    	      this.experiments = defaults.experiments;
    	      this.ftpsState = defaults.ftpsState;
    	      this.functionAppScaleLimit = defaults.functionAppScaleLimit;
    	      this.functionsRuntimeScaleMonitoringEnabled = defaults.functionsRuntimeScaleMonitoringEnabled;
    	      this.handlerMappings = defaults.handlerMappings;
    	      this.healthCheckPath = defaults.healthCheckPath;
    	      this.http20Enabled = defaults.http20Enabled;
    	      this.httpLoggingEnabled = defaults.httpLoggingEnabled;
    	      this.ipSecurityRestrictions = defaults.ipSecurityRestrictions;
    	      this.javaContainer = defaults.javaContainer;
    	      this.javaContainerVersion = defaults.javaContainerVersion;
    	      this.javaVersion = defaults.javaVersion;
    	      this.keyVaultReferenceIdentity = defaults.keyVaultReferenceIdentity;
    	      this.limits = defaults.limits;
    	      this.linuxFxVersion = defaults.linuxFxVersion;
    	      this.loadBalancing = defaults.loadBalancing;
    	      this.localMySqlEnabled = defaults.localMySqlEnabled;
    	      this.logsDirectorySizeLimit = defaults.logsDirectorySizeLimit;
    	      this.managedPipelineMode = defaults.managedPipelineMode;
    	      this.managedServiceIdentityId = defaults.managedServiceIdentityId;
    	      this.minTlsVersion = defaults.minTlsVersion;
    	      this.minimumElasticInstanceCount = defaults.minimumElasticInstanceCount;
    	      this.netFrameworkVersion = defaults.netFrameworkVersion;
    	      this.nodeVersion = defaults.nodeVersion;
    	      this.numberOfWorkers = defaults.numberOfWorkers;
    	      this.phpVersion = defaults.phpVersion;
    	      this.powerShellVersion = defaults.powerShellVersion;
    	      this.preWarmedInstanceCount = defaults.preWarmedInstanceCount;
    	      this.publicNetworkAccess = defaults.publicNetworkAccess;
    	      this.publishingUsername = defaults.publishingUsername;
    	      this.push = defaults.push;
    	      this.pythonVersion = defaults.pythonVersion;
    	      this.remoteDebuggingEnabled = defaults.remoteDebuggingEnabled;
    	      this.remoteDebuggingVersion = defaults.remoteDebuggingVersion;
    	      this.requestTracingEnabled = defaults.requestTracingEnabled;
    	      this.requestTracingExpirationTime = defaults.requestTracingExpirationTime;
    	      this.scmIpSecurityRestrictions = defaults.scmIpSecurityRestrictions;
    	      this.scmIpSecurityRestrictionsUseMain = defaults.scmIpSecurityRestrictionsUseMain;
    	      this.scmMinTlsVersion = defaults.scmMinTlsVersion;
    	      this.scmType = defaults.scmType;
    	      this.tracingOptions = defaults.tracingOptions;
    	      this.use32BitWorkerProcess = defaults.use32BitWorkerProcess;
    	      this.virtualApplications = defaults.virtualApplications;
    	      this.vnetName = defaults.vnetName;
    	      this.vnetPrivatePortsCount = defaults.vnetPrivatePortsCount;
    	      this.vnetRouteAllEnabled = defaults.vnetRouteAllEnabled;
    	      this.webSocketsEnabled = defaults.webSocketsEnabled;
    	      this.websiteTimeZone = defaults.websiteTimeZone;
    	      this.windowsFxVersion = defaults.windowsFxVersion;
    	      this.xManagedServiceIdentityId = defaults.xManagedServiceIdentityId;
        }

        public Builder acrUseManagedIdentityCreds(@Nullable Output<Boolean> acrUseManagedIdentityCreds) {
            this.acrUseManagedIdentityCreds = acrUseManagedIdentityCreds;
            return this;
        }
        public Builder acrUseManagedIdentityCreds(@Nullable Boolean acrUseManagedIdentityCreds) {
            this.acrUseManagedIdentityCreds = Codegen.ofNullable(acrUseManagedIdentityCreds);
            return this;
        }
        public Builder acrUserManagedIdentityID(@Nullable Output<String> acrUserManagedIdentityID) {
            this.acrUserManagedIdentityID = acrUserManagedIdentityID;
            return this;
        }
        public Builder acrUserManagedIdentityID(@Nullable String acrUserManagedIdentityID) {
            this.acrUserManagedIdentityID = Codegen.ofNullable(acrUserManagedIdentityID);
            return this;
        }
        public Builder alwaysOn(@Nullable Output<Boolean> alwaysOn) {
            this.alwaysOn = alwaysOn;
            return this;
        }
        public Builder alwaysOn(@Nullable Boolean alwaysOn) {
            this.alwaysOn = Codegen.ofNullable(alwaysOn);
            return this;
        }
        public Builder apiDefinition(@Nullable Output<ApiDefinitionInfoArgs> apiDefinition) {
            this.apiDefinition = apiDefinition;
            return this;
        }
        public Builder apiDefinition(@Nullable ApiDefinitionInfoArgs apiDefinition) {
            this.apiDefinition = Codegen.ofNullable(apiDefinition);
            return this;
        }
        public Builder apiManagementConfig(@Nullable Output<ApiManagementConfigArgs> apiManagementConfig) {
            this.apiManagementConfig = apiManagementConfig;
            return this;
        }
        public Builder apiManagementConfig(@Nullable ApiManagementConfigArgs apiManagementConfig) {
            this.apiManagementConfig = Codegen.ofNullable(apiManagementConfig);
            return this;
        }
        public Builder appCommandLine(@Nullable Output<String> appCommandLine) {
            this.appCommandLine = appCommandLine;
            return this;
        }
        public Builder appCommandLine(@Nullable String appCommandLine) {
            this.appCommandLine = Codegen.ofNullable(appCommandLine);
            return this;
        }
        public Builder appSettings(@Nullable Output<List<NameValuePairArgs>> appSettings) {
            this.appSettings = appSettings;
            return this;
        }
        public Builder appSettings(@Nullable List<NameValuePairArgs> appSettings) {
            this.appSettings = Codegen.ofNullable(appSettings);
            return this;
        }
        public Builder appSettings(NameValuePairArgs... appSettings) {
            return appSettings(List.of(appSettings));
        }
        public Builder autoHealEnabled(@Nullable Output<Boolean> autoHealEnabled) {
            this.autoHealEnabled = autoHealEnabled;
            return this;
        }
        public Builder autoHealEnabled(@Nullable Boolean autoHealEnabled) {
            this.autoHealEnabled = Codegen.ofNullable(autoHealEnabled);
            return this;
        }
        public Builder autoHealRules(@Nullable Output<AutoHealRulesArgs> autoHealRules) {
            this.autoHealRules = autoHealRules;
            return this;
        }
        public Builder autoHealRules(@Nullable AutoHealRulesArgs autoHealRules) {
            this.autoHealRules = Codegen.ofNullable(autoHealRules);
            return this;
        }
        public Builder autoSwapSlotName(@Nullable Output<String> autoSwapSlotName) {
            this.autoSwapSlotName = autoSwapSlotName;
            return this;
        }
        public Builder autoSwapSlotName(@Nullable String autoSwapSlotName) {
            this.autoSwapSlotName = Codegen.ofNullable(autoSwapSlotName);
            return this;
        }
        public Builder azureStorageAccounts(@Nullable Output<Map<String,AzureStorageInfoValueArgs>> azureStorageAccounts) {
            this.azureStorageAccounts = azureStorageAccounts;
            return this;
        }
        public Builder azureStorageAccounts(@Nullable Map<String,AzureStorageInfoValueArgs> azureStorageAccounts) {
            this.azureStorageAccounts = Codegen.ofNullable(azureStorageAccounts);
            return this;
        }
        public Builder connectionStrings(@Nullable Output<List<ConnStringInfoArgs>> connectionStrings) {
            this.connectionStrings = connectionStrings;
            return this;
        }
        public Builder connectionStrings(@Nullable List<ConnStringInfoArgs> connectionStrings) {
            this.connectionStrings = Codegen.ofNullable(connectionStrings);
            return this;
        }
        public Builder connectionStrings(ConnStringInfoArgs... connectionStrings) {
            return connectionStrings(List.of(connectionStrings));
        }
        public Builder cors(@Nullable Output<CorsSettingsArgs> cors) {
            this.cors = cors;
            return this;
        }
        public Builder cors(@Nullable CorsSettingsArgs cors) {
            this.cors = Codegen.ofNullable(cors);
            return this;
        }
        public Builder defaultDocuments(@Nullable Output<List<String>> defaultDocuments) {
            this.defaultDocuments = defaultDocuments;
            return this;
        }
        public Builder defaultDocuments(@Nullable List<String> defaultDocuments) {
            this.defaultDocuments = Codegen.ofNullable(defaultDocuments);
            return this;
        }
        public Builder defaultDocuments(String... defaultDocuments) {
            return defaultDocuments(List.of(defaultDocuments));
        }
        public Builder detailedErrorLoggingEnabled(@Nullable Output<Boolean> detailedErrorLoggingEnabled) {
            this.detailedErrorLoggingEnabled = detailedErrorLoggingEnabled;
            return this;
        }
        public Builder detailedErrorLoggingEnabled(@Nullable Boolean detailedErrorLoggingEnabled) {
            this.detailedErrorLoggingEnabled = Codegen.ofNullable(detailedErrorLoggingEnabled);
            return this;
        }
        public Builder documentRoot(@Nullable Output<String> documentRoot) {
            this.documentRoot = documentRoot;
            return this;
        }
        public Builder documentRoot(@Nullable String documentRoot) {
            this.documentRoot = Codegen.ofNullable(documentRoot);
            return this;
        }
        public Builder experiments(@Nullable Output<ExperimentsArgs> experiments) {
            this.experiments = experiments;
            return this;
        }
        public Builder experiments(@Nullable ExperimentsArgs experiments) {
            this.experiments = Codegen.ofNullable(experiments);
            return this;
        }
        public Builder ftpsState(@Nullable Output<Either<String,FtpsState>> ftpsState) {
            this.ftpsState = ftpsState;
            return this;
        }
        public Builder ftpsState(@Nullable Either<String,FtpsState> ftpsState) {
            this.ftpsState = Codegen.ofNullable(ftpsState);
            return this;
        }
        public Builder functionAppScaleLimit(@Nullable Output<Integer> functionAppScaleLimit) {
            this.functionAppScaleLimit = functionAppScaleLimit;
            return this;
        }
        public Builder functionAppScaleLimit(@Nullable Integer functionAppScaleLimit) {
            this.functionAppScaleLimit = Codegen.ofNullable(functionAppScaleLimit);
            return this;
        }
        public Builder functionsRuntimeScaleMonitoringEnabled(@Nullable Output<Boolean> functionsRuntimeScaleMonitoringEnabled) {
            this.functionsRuntimeScaleMonitoringEnabled = functionsRuntimeScaleMonitoringEnabled;
            return this;
        }
        public Builder functionsRuntimeScaleMonitoringEnabled(@Nullable Boolean functionsRuntimeScaleMonitoringEnabled) {
            this.functionsRuntimeScaleMonitoringEnabled = Codegen.ofNullable(functionsRuntimeScaleMonitoringEnabled);
            return this;
        }
        public Builder handlerMappings(@Nullable Output<List<HandlerMappingArgs>> handlerMappings) {
            this.handlerMappings = handlerMappings;
            return this;
        }
        public Builder handlerMappings(@Nullable List<HandlerMappingArgs> handlerMappings) {
            this.handlerMappings = Codegen.ofNullable(handlerMappings);
            return this;
        }
        public Builder handlerMappings(HandlerMappingArgs... handlerMappings) {
            return handlerMappings(List.of(handlerMappings));
        }
        public Builder healthCheckPath(@Nullable Output<String> healthCheckPath) {
            this.healthCheckPath = healthCheckPath;
            return this;
        }
        public Builder healthCheckPath(@Nullable String healthCheckPath) {
            this.healthCheckPath = Codegen.ofNullable(healthCheckPath);
            return this;
        }
        public Builder http20Enabled(@Nullable Output<Boolean> http20Enabled) {
            this.http20Enabled = http20Enabled;
            return this;
        }
        public Builder http20Enabled(@Nullable Boolean http20Enabled) {
            this.http20Enabled = Codegen.ofNullable(http20Enabled);
            return this;
        }
        public Builder httpLoggingEnabled(@Nullable Output<Boolean> httpLoggingEnabled) {
            this.httpLoggingEnabled = httpLoggingEnabled;
            return this;
        }
        public Builder httpLoggingEnabled(@Nullable Boolean httpLoggingEnabled) {
            this.httpLoggingEnabled = Codegen.ofNullable(httpLoggingEnabled);
            return this;
        }
        public Builder ipSecurityRestrictions(@Nullable Output<List<IpSecurityRestrictionArgs>> ipSecurityRestrictions) {
            this.ipSecurityRestrictions = ipSecurityRestrictions;
            return this;
        }
        public Builder ipSecurityRestrictions(@Nullable List<IpSecurityRestrictionArgs> ipSecurityRestrictions) {
            this.ipSecurityRestrictions = Codegen.ofNullable(ipSecurityRestrictions);
            return this;
        }
        public Builder ipSecurityRestrictions(IpSecurityRestrictionArgs... ipSecurityRestrictions) {
            return ipSecurityRestrictions(List.of(ipSecurityRestrictions));
        }
        public Builder javaContainer(@Nullable Output<String> javaContainer) {
            this.javaContainer = javaContainer;
            return this;
        }
        public Builder javaContainer(@Nullable String javaContainer) {
            this.javaContainer = Codegen.ofNullable(javaContainer);
            return this;
        }
        public Builder javaContainerVersion(@Nullable Output<String> javaContainerVersion) {
            this.javaContainerVersion = javaContainerVersion;
            return this;
        }
        public Builder javaContainerVersion(@Nullable String javaContainerVersion) {
            this.javaContainerVersion = Codegen.ofNullable(javaContainerVersion);
            return this;
        }
        public Builder javaVersion(@Nullable Output<String> javaVersion) {
            this.javaVersion = javaVersion;
            return this;
        }
        public Builder javaVersion(@Nullable String javaVersion) {
            this.javaVersion = Codegen.ofNullable(javaVersion);
            return this;
        }
        public Builder keyVaultReferenceIdentity(@Nullable Output<String> keyVaultReferenceIdentity) {
            this.keyVaultReferenceIdentity = keyVaultReferenceIdentity;
            return this;
        }
        public Builder keyVaultReferenceIdentity(@Nullable String keyVaultReferenceIdentity) {
            this.keyVaultReferenceIdentity = Codegen.ofNullable(keyVaultReferenceIdentity);
            return this;
        }
        public Builder limits(@Nullable Output<SiteLimitsArgs> limits) {
            this.limits = limits;
            return this;
        }
        public Builder limits(@Nullable SiteLimitsArgs limits) {
            this.limits = Codegen.ofNullable(limits);
            return this;
        }
        public Builder linuxFxVersion(@Nullable Output<String> linuxFxVersion) {
            this.linuxFxVersion = linuxFxVersion;
            return this;
        }
        public Builder linuxFxVersion(@Nullable String linuxFxVersion) {
            this.linuxFxVersion = Codegen.ofNullable(linuxFxVersion);
            return this;
        }
        public Builder loadBalancing(@Nullable Output<SiteLoadBalancing> loadBalancing) {
            this.loadBalancing = loadBalancing;
            return this;
        }
        public Builder loadBalancing(@Nullable SiteLoadBalancing loadBalancing) {
            this.loadBalancing = Codegen.ofNullable(loadBalancing);
            return this;
        }
        public Builder localMySqlEnabled(@Nullable Output<Boolean> localMySqlEnabled) {
            this.localMySqlEnabled = localMySqlEnabled;
            return this;
        }
        public Builder localMySqlEnabled(@Nullable Boolean localMySqlEnabled) {
            this.localMySqlEnabled = Codegen.ofNullable(localMySqlEnabled);
            return this;
        }
        public Builder logsDirectorySizeLimit(@Nullable Output<Integer> logsDirectorySizeLimit) {
            this.logsDirectorySizeLimit = logsDirectorySizeLimit;
            return this;
        }
        public Builder logsDirectorySizeLimit(@Nullable Integer logsDirectorySizeLimit) {
            this.logsDirectorySizeLimit = Codegen.ofNullable(logsDirectorySizeLimit);
            return this;
        }
        public Builder managedPipelineMode(@Nullable Output<ManagedPipelineMode> managedPipelineMode) {
            this.managedPipelineMode = managedPipelineMode;
            return this;
        }
        public Builder managedPipelineMode(@Nullable ManagedPipelineMode managedPipelineMode) {
            this.managedPipelineMode = Codegen.ofNullable(managedPipelineMode);
            return this;
        }
        public Builder managedServiceIdentityId(@Nullable Output<Integer> managedServiceIdentityId) {
            this.managedServiceIdentityId = managedServiceIdentityId;
            return this;
        }
        public Builder managedServiceIdentityId(@Nullable Integer managedServiceIdentityId) {
            this.managedServiceIdentityId = Codegen.ofNullable(managedServiceIdentityId);
            return this;
        }
        public Builder minTlsVersion(@Nullable Output<Either<String,SupportedTlsVersions>> minTlsVersion) {
            this.minTlsVersion = minTlsVersion;
            return this;
        }
        public Builder minTlsVersion(@Nullable Either<String,SupportedTlsVersions> minTlsVersion) {
            this.minTlsVersion = Codegen.ofNullable(minTlsVersion);
            return this;
        }
        public Builder minimumElasticInstanceCount(@Nullable Output<Integer> minimumElasticInstanceCount) {
            this.minimumElasticInstanceCount = minimumElasticInstanceCount;
            return this;
        }
        public Builder minimumElasticInstanceCount(@Nullable Integer minimumElasticInstanceCount) {
            this.minimumElasticInstanceCount = Codegen.ofNullable(minimumElasticInstanceCount);
            return this;
        }
        public Builder netFrameworkVersion(@Nullable Output<String> netFrameworkVersion) {
            this.netFrameworkVersion = netFrameworkVersion;
            return this;
        }
        public Builder netFrameworkVersion(@Nullable String netFrameworkVersion) {
            this.netFrameworkVersion = Codegen.ofNullable(netFrameworkVersion);
            return this;
        }
        public Builder nodeVersion(@Nullable Output<String> nodeVersion) {
            this.nodeVersion = nodeVersion;
            return this;
        }
        public Builder nodeVersion(@Nullable String nodeVersion) {
            this.nodeVersion = Codegen.ofNullable(nodeVersion);
            return this;
        }
        public Builder numberOfWorkers(@Nullable Output<Integer> numberOfWorkers) {
            this.numberOfWorkers = numberOfWorkers;
            return this;
        }
        public Builder numberOfWorkers(@Nullable Integer numberOfWorkers) {
            this.numberOfWorkers = Codegen.ofNullable(numberOfWorkers);
            return this;
        }
        public Builder phpVersion(@Nullable Output<String> phpVersion) {
            this.phpVersion = phpVersion;
            return this;
        }
        public Builder phpVersion(@Nullable String phpVersion) {
            this.phpVersion = Codegen.ofNullable(phpVersion);
            return this;
        }
        public Builder powerShellVersion(@Nullable Output<String> powerShellVersion) {
            this.powerShellVersion = powerShellVersion;
            return this;
        }
        public Builder powerShellVersion(@Nullable String powerShellVersion) {
            this.powerShellVersion = Codegen.ofNullable(powerShellVersion);
            return this;
        }
        public Builder preWarmedInstanceCount(@Nullable Output<Integer> preWarmedInstanceCount) {
            this.preWarmedInstanceCount = preWarmedInstanceCount;
            return this;
        }
        public Builder preWarmedInstanceCount(@Nullable Integer preWarmedInstanceCount) {
            this.preWarmedInstanceCount = Codegen.ofNullable(preWarmedInstanceCount);
            return this;
        }
        public Builder publicNetworkAccess(@Nullable Output<String> publicNetworkAccess) {
            this.publicNetworkAccess = publicNetworkAccess;
            return this;
        }
        public Builder publicNetworkAccess(@Nullable String publicNetworkAccess) {
            this.publicNetworkAccess = Codegen.ofNullable(publicNetworkAccess);
            return this;
        }
        public Builder publishingUsername(@Nullable Output<String> publishingUsername) {
            this.publishingUsername = publishingUsername;
            return this;
        }
        public Builder publishingUsername(@Nullable String publishingUsername) {
            this.publishingUsername = Codegen.ofNullable(publishingUsername);
            return this;
        }
        public Builder push(@Nullable Output<PushSettingsArgs> push) {
            this.push = push;
            return this;
        }
        public Builder push(@Nullable PushSettingsArgs push) {
            this.push = Codegen.ofNullable(push);
            return this;
        }
        public Builder pythonVersion(@Nullable Output<String> pythonVersion) {
            this.pythonVersion = pythonVersion;
            return this;
        }
        public Builder pythonVersion(@Nullable String pythonVersion) {
            this.pythonVersion = Codegen.ofNullable(pythonVersion);
            return this;
        }
        public Builder remoteDebuggingEnabled(@Nullable Output<Boolean> remoteDebuggingEnabled) {
            this.remoteDebuggingEnabled = remoteDebuggingEnabled;
            return this;
        }
        public Builder remoteDebuggingEnabled(@Nullable Boolean remoteDebuggingEnabled) {
            this.remoteDebuggingEnabled = Codegen.ofNullable(remoteDebuggingEnabled);
            return this;
        }
        public Builder remoteDebuggingVersion(@Nullable Output<String> remoteDebuggingVersion) {
            this.remoteDebuggingVersion = remoteDebuggingVersion;
            return this;
        }
        public Builder remoteDebuggingVersion(@Nullable String remoteDebuggingVersion) {
            this.remoteDebuggingVersion = Codegen.ofNullable(remoteDebuggingVersion);
            return this;
        }
        public Builder requestTracingEnabled(@Nullable Output<Boolean> requestTracingEnabled) {
            this.requestTracingEnabled = requestTracingEnabled;
            return this;
        }
        public Builder requestTracingEnabled(@Nullable Boolean requestTracingEnabled) {
            this.requestTracingEnabled = Codegen.ofNullable(requestTracingEnabled);
            return this;
        }
        public Builder requestTracingExpirationTime(@Nullable Output<String> requestTracingExpirationTime) {
            this.requestTracingExpirationTime = requestTracingExpirationTime;
            return this;
        }
        public Builder requestTracingExpirationTime(@Nullable String requestTracingExpirationTime) {
            this.requestTracingExpirationTime = Codegen.ofNullable(requestTracingExpirationTime);
            return this;
        }
        public Builder scmIpSecurityRestrictions(@Nullable Output<List<IpSecurityRestrictionArgs>> scmIpSecurityRestrictions) {
            this.scmIpSecurityRestrictions = scmIpSecurityRestrictions;
            return this;
        }
        public Builder scmIpSecurityRestrictions(@Nullable List<IpSecurityRestrictionArgs> scmIpSecurityRestrictions) {
            this.scmIpSecurityRestrictions = Codegen.ofNullable(scmIpSecurityRestrictions);
            return this;
        }
        public Builder scmIpSecurityRestrictions(IpSecurityRestrictionArgs... scmIpSecurityRestrictions) {
            return scmIpSecurityRestrictions(List.of(scmIpSecurityRestrictions));
        }
        public Builder scmIpSecurityRestrictionsUseMain(@Nullable Output<Boolean> scmIpSecurityRestrictionsUseMain) {
            this.scmIpSecurityRestrictionsUseMain = scmIpSecurityRestrictionsUseMain;
            return this;
        }
        public Builder scmIpSecurityRestrictionsUseMain(@Nullable Boolean scmIpSecurityRestrictionsUseMain) {
            this.scmIpSecurityRestrictionsUseMain = Codegen.ofNullable(scmIpSecurityRestrictionsUseMain);
            return this;
        }
        public Builder scmMinTlsVersion(@Nullable Output<Either<String,SupportedTlsVersions>> scmMinTlsVersion) {
            this.scmMinTlsVersion = scmMinTlsVersion;
            return this;
        }
        public Builder scmMinTlsVersion(@Nullable Either<String,SupportedTlsVersions> scmMinTlsVersion) {
            this.scmMinTlsVersion = Codegen.ofNullable(scmMinTlsVersion);
            return this;
        }
        public Builder scmType(@Nullable Output<Either<String,ScmType>> scmType) {
            this.scmType = scmType;
            return this;
        }
        public Builder scmType(@Nullable Either<String,ScmType> scmType) {
            this.scmType = Codegen.ofNullable(scmType);
            return this;
        }
        public Builder tracingOptions(@Nullable Output<String> tracingOptions) {
            this.tracingOptions = tracingOptions;
            return this;
        }
        public Builder tracingOptions(@Nullable String tracingOptions) {
            this.tracingOptions = Codegen.ofNullable(tracingOptions);
            return this;
        }
        public Builder use32BitWorkerProcess(@Nullable Output<Boolean> use32BitWorkerProcess) {
            this.use32BitWorkerProcess = use32BitWorkerProcess;
            return this;
        }
        public Builder use32BitWorkerProcess(@Nullable Boolean use32BitWorkerProcess) {
            this.use32BitWorkerProcess = Codegen.ofNullable(use32BitWorkerProcess);
            return this;
        }
        public Builder virtualApplications(@Nullable Output<List<VirtualApplicationArgs>> virtualApplications) {
            this.virtualApplications = virtualApplications;
            return this;
        }
        public Builder virtualApplications(@Nullable List<VirtualApplicationArgs> virtualApplications) {
            this.virtualApplications = Codegen.ofNullable(virtualApplications);
            return this;
        }
        public Builder virtualApplications(VirtualApplicationArgs... virtualApplications) {
            return virtualApplications(List.of(virtualApplications));
        }
        public Builder vnetName(@Nullable Output<String> vnetName) {
            this.vnetName = vnetName;
            return this;
        }
        public Builder vnetName(@Nullable String vnetName) {
            this.vnetName = Codegen.ofNullable(vnetName);
            return this;
        }
        public Builder vnetPrivatePortsCount(@Nullable Output<Integer> vnetPrivatePortsCount) {
            this.vnetPrivatePortsCount = vnetPrivatePortsCount;
            return this;
        }
        public Builder vnetPrivatePortsCount(@Nullable Integer vnetPrivatePortsCount) {
            this.vnetPrivatePortsCount = Codegen.ofNullable(vnetPrivatePortsCount);
            return this;
        }
        public Builder vnetRouteAllEnabled(@Nullable Output<Boolean> vnetRouteAllEnabled) {
            this.vnetRouteAllEnabled = vnetRouteAllEnabled;
            return this;
        }
        public Builder vnetRouteAllEnabled(@Nullable Boolean vnetRouteAllEnabled) {
            this.vnetRouteAllEnabled = Codegen.ofNullable(vnetRouteAllEnabled);
            return this;
        }
        public Builder webSocketsEnabled(@Nullable Output<Boolean> webSocketsEnabled) {
            this.webSocketsEnabled = webSocketsEnabled;
            return this;
        }
        public Builder webSocketsEnabled(@Nullable Boolean webSocketsEnabled) {
            this.webSocketsEnabled = Codegen.ofNullable(webSocketsEnabled);
            return this;
        }
        public Builder websiteTimeZone(@Nullable Output<String> websiteTimeZone) {
            this.websiteTimeZone = websiteTimeZone;
            return this;
        }
        public Builder websiteTimeZone(@Nullable String websiteTimeZone) {
            this.websiteTimeZone = Codegen.ofNullable(websiteTimeZone);
            return this;
        }
        public Builder windowsFxVersion(@Nullable Output<String> windowsFxVersion) {
            this.windowsFxVersion = windowsFxVersion;
            return this;
        }
        public Builder windowsFxVersion(@Nullable String windowsFxVersion) {
            this.windowsFxVersion = Codegen.ofNullable(windowsFxVersion);
            return this;
        }
        public Builder xManagedServiceIdentityId(@Nullable Output<Integer> xManagedServiceIdentityId) {
            this.xManagedServiceIdentityId = xManagedServiceIdentityId;
            return this;
        }
        public Builder xManagedServiceIdentityId(@Nullable Integer xManagedServiceIdentityId) {
            this.xManagedServiceIdentityId = Codegen.ofNullable(xManagedServiceIdentityId);
            return this;
        }        public SiteConfigArgs build() {
            return new SiteConfigArgs(acrUseManagedIdentityCreds, acrUserManagedIdentityID, alwaysOn, apiDefinition, apiManagementConfig, appCommandLine, appSettings, autoHealEnabled, autoHealRules, autoSwapSlotName, azureStorageAccounts, connectionStrings, cors, defaultDocuments, detailedErrorLoggingEnabled, documentRoot, experiments, ftpsState, functionAppScaleLimit, functionsRuntimeScaleMonitoringEnabled, handlerMappings, healthCheckPath, http20Enabled, httpLoggingEnabled, ipSecurityRestrictions, javaContainer, javaContainerVersion, javaVersion, keyVaultReferenceIdentity, limits, linuxFxVersion, loadBalancing, localMySqlEnabled, logsDirectorySizeLimit, managedPipelineMode, managedServiceIdentityId, minTlsVersion, minimumElasticInstanceCount, netFrameworkVersion, nodeVersion, numberOfWorkers, phpVersion, powerShellVersion, preWarmedInstanceCount, publicNetworkAccess, publishingUsername, push, pythonVersion, remoteDebuggingEnabled, remoteDebuggingVersion, requestTracingEnabled, requestTracingExpirationTime, scmIpSecurityRestrictions, scmIpSecurityRestrictionsUseMain, scmMinTlsVersion, scmType, tracingOptions, use32BitWorkerProcess, virtualApplications, vnetName, vnetPrivatePortsCount, vnetRouteAllEnabled, webSocketsEnabled, websiteTimeZone, windowsFxVersion, xManagedServiceIdentityId);
        }
    }
}
