// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.web.inputs;

import com.pulumi.azurenative.web.enums.FtpsState;
import com.pulumi.azurenative.web.enums.ManagedPipelineMode;
import com.pulumi.azurenative.web.enums.ScmType;
import com.pulumi.azurenative.web.enums.SiteLoadBalancing;
import com.pulumi.azurenative.web.enums.SupportedTlsVersions;
import com.pulumi.azurenative.web.inputs.ApiDefinitionInfoArgs;
import com.pulumi.azurenative.web.inputs.ApiManagementConfigArgs;
import com.pulumi.azurenative.web.inputs.AutoHealRulesArgs;
import com.pulumi.azurenative.web.inputs.AzureStorageInfoValueArgs;
import com.pulumi.azurenative.web.inputs.ConnStringInfoArgs;
import com.pulumi.azurenative.web.inputs.CorsSettingsArgs;
import com.pulumi.azurenative.web.inputs.ExperimentsArgs;
import com.pulumi.azurenative.web.inputs.HandlerMappingArgs;
import com.pulumi.azurenative.web.inputs.IpSecurityRestrictionArgs;
import com.pulumi.azurenative.web.inputs.NameValuePairArgs;
import com.pulumi.azurenative.web.inputs.PushSettingsArgs;
import com.pulumi.azurenative.web.inputs.SiteLimitsArgs;
import com.pulumi.azurenative.web.inputs.VirtualApplicationArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Configuration of an App Service app.
 * 
 */
public final class SiteConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final SiteConfigArgs Empty = new SiteConfigArgs();

    /**
     * Flag to use Managed Identity Creds for ACR pull
     * 
     */
    @Import(name="acrUseManagedIdentityCreds")
    private @Nullable Output<Boolean> acrUseManagedIdentityCreds;

    public Optional<Output<Boolean>> acrUseManagedIdentityCreds() {
        return Optional.ofNullable(this.acrUseManagedIdentityCreds);
    }

    /**
     * If using user managed identity, the user managed identity ClientId
     * 
     */
    @Import(name="acrUserManagedIdentityID")
    private @Nullable Output<String> acrUserManagedIdentityID;

    public Optional<Output<String>> acrUserManagedIdentityID() {
        return Optional.ofNullable(this.acrUserManagedIdentityID);
    }

    /**
     * &lt;code&gt;true&lt;/code&gt; if Always On is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    @Import(name="alwaysOn")
    private @Nullable Output<Boolean> alwaysOn;

    public Optional<Output<Boolean>> alwaysOn() {
        return Optional.ofNullable(this.alwaysOn);
    }

    /**
     * Information about the formal API definition for the app.
     * 
     */
    @Import(name="apiDefinition")
    private @Nullable Output<ApiDefinitionInfoArgs> apiDefinition;

    public Optional<Output<ApiDefinitionInfoArgs>> apiDefinition() {
        return Optional.ofNullable(this.apiDefinition);
    }

    /**
     * Azure API management settings linked to the app.
     * 
     */
    @Import(name="apiManagementConfig")
    private @Nullable Output<ApiManagementConfigArgs> apiManagementConfig;

    public Optional<Output<ApiManagementConfigArgs>> apiManagementConfig() {
        return Optional.ofNullable(this.apiManagementConfig);
    }

    /**
     * App command line to launch.
     * 
     */
    @Import(name="appCommandLine")
    private @Nullable Output<String> appCommandLine;

    public Optional<Output<String>> appCommandLine() {
        return Optional.ofNullable(this.appCommandLine);
    }

    /**
     * Application settings.
     * 
     */
    @Import(name="appSettings")
    private @Nullable Output<List<NameValuePairArgs>> appSettings;

    public Optional<Output<List<NameValuePairArgs>>> appSettings() {
        return Optional.ofNullable(this.appSettings);
    }

    /**
     * &lt;code&gt;true&lt;/code&gt; if Auto Heal is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    @Import(name="autoHealEnabled")
    private @Nullable Output<Boolean> autoHealEnabled;

    public Optional<Output<Boolean>> autoHealEnabled() {
        return Optional.ofNullable(this.autoHealEnabled);
    }

    /**
     * Auto Heal rules.
     * 
     */
    @Import(name="autoHealRules")
    private @Nullable Output<AutoHealRulesArgs> autoHealRules;

    public Optional<Output<AutoHealRulesArgs>> autoHealRules() {
        return Optional.ofNullable(this.autoHealRules);
    }

    /**
     * Auto-swap slot name.
     * 
     */
    @Import(name="autoSwapSlotName")
    private @Nullable Output<String> autoSwapSlotName;

    public Optional<Output<String>> autoSwapSlotName() {
        return Optional.ofNullable(this.autoSwapSlotName);
    }

    /**
     * List of Azure Storage Accounts.
     * 
     */
    @Import(name="azureStorageAccounts")
    private @Nullable Output<Map<String,AzureStorageInfoValueArgs>> azureStorageAccounts;

    public Optional<Output<Map<String,AzureStorageInfoValueArgs>>> azureStorageAccounts() {
        return Optional.ofNullable(this.azureStorageAccounts);
    }

    /**
     * Connection strings.
     * 
     */
    @Import(name="connectionStrings")
    private @Nullable Output<List<ConnStringInfoArgs>> connectionStrings;

    public Optional<Output<List<ConnStringInfoArgs>>> connectionStrings() {
        return Optional.ofNullable(this.connectionStrings);
    }

    /**
     * Cross-Origin Resource Sharing (CORS) settings.
     * 
     */
    @Import(name="cors")
    private @Nullable Output<CorsSettingsArgs> cors;

    public Optional<Output<CorsSettingsArgs>> cors() {
        return Optional.ofNullable(this.cors);
    }

    /**
     * Default documents.
     * 
     */
    @Import(name="defaultDocuments")
    private @Nullable Output<List<String>> defaultDocuments;

    public Optional<Output<List<String>>> defaultDocuments() {
        return Optional.ofNullable(this.defaultDocuments);
    }

    /**
     * &lt;code&gt;true&lt;/code&gt; if detailed error logging is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    @Import(name="detailedErrorLoggingEnabled")
    private @Nullable Output<Boolean> detailedErrorLoggingEnabled;

    public Optional<Output<Boolean>> detailedErrorLoggingEnabled() {
        return Optional.ofNullable(this.detailedErrorLoggingEnabled);
    }

    /**
     * Document root.
     * 
     */
    @Import(name="documentRoot")
    private @Nullable Output<String> documentRoot;

    public Optional<Output<String>> documentRoot() {
        return Optional.ofNullable(this.documentRoot);
    }

    /**
     * This is work around for polymorphic types.
     * 
     */
    @Import(name="experiments")
    private @Nullable Output<ExperimentsArgs> experiments;

    public Optional<Output<ExperimentsArgs>> experiments() {
        return Optional.ofNullable(this.experiments);
    }

    /**
     * State of FTP / FTPS service
     * 
     */
    @Import(name="ftpsState")
    private @Nullable Output<Either<String,FtpsState>> ftpsState;

    public Optional<Output<Either<String,FtpsState>>> ftpsState() {
        return Optional.ofNullable(this.ftpsState);
    }

    /**
     * Maximum number of workers that a site can scale out to.
     * This setting only applies to the Consumption and Elastic Premium Plans
     * 
     */
    @Import(name="functionAppScaleLimit")
    private @Nullable Output<Integer> functionAppScaleLimit;

    public Optional<Output<Integer>> functionAppScaleLimit() {
        return Optional.ofNullable(this.functionAppScaleLimit);
    }

    /**
     * Gets or sets a value indicating whether functions runtime scale monitoring is enabled. When enabled,
     * the ScaleController will not monitor event sources directly, but will instead call to the
     * runtime to get scale status.
     * 
     */
    @Import(name="functionsRuntimeScaleMonitoringEnabled")
    private @Nullable Output<Boolean> functionsRuntimeScaleMonitoringEnabled;

    public Optional<Output<Boolean>> functionsRuntimeScaleMonitoringEnabled() {
        return Optional.ofNullable(this.functionsRuntimeScaleMonitoringEnabled);
    }

    /**
     * Handler mappings.
     * 
     */
    @Import(name="handlerMappings")
    private @Nullable Output<List<HandlerMappingArgs>> handlerMappings;

    public Optional<Output<List<HandlerMappingArgs>>> handlerMappings() {
        return Optional.ofNullable(this.handlerMappings);
    }

    /**
     * Health check path
     * 
     */
    @Import(name="healthCheckPath")
    private @Nullable Output<String> healthCheckPath;

    public Optional<Output<String>> healthCheckPath() {
        return Optional.ofNullable(this.healthCheckPath);
    }

    /**
     * Http20Enabled: configures a web site to allow clients to connect over http2.0
     * 
     */
    @Import(name="http20Enabled")
    private @Nullable Output<Boolean> http20Enabled;

    public Optional<Output<Boolean>> http20Enabled() {
        return Optional.ofNullable(this.http20Enabled);
    }

    /**
     * &lt;code&gt;true&lt;/code&gt; if HTTP logging is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    @Import(name="httpLoggingEnabled")
    private @Nullable Output<Boolean> httpLoggingEnabled;

    public Optional<Output<Boolean>> httpLoggingEnabled() {
        return Optional.ofNullable(this.httpLoggingEnabled);
    }

    /**
     * IP security restrictions for main.
     * 
     */
    @Import(name="ipSecurityRestrictions")
    private @Nullable Output<List<IpSecurityRestrictionArgs>> ipSecurityRestrictions;

    public Optional<Output<List<IpSecurityRestrictionArgs>>> ipSecurityRestrictions() {
        return Optional.ofNullable(this.ipSecurityRestrictions);
    }

    /**
     * Java container.
     * 
     */
    @Import(name="javaContainer")
    private @Nullable Output<String> javaContainer;

    public Optional<Output<String>> javaContainer() {
        return Optional.ofNullable(this.javaContainer);
    }

    /**
     * Java container version.
     * 
     */
    @Import(name="javaContainerVersion")
    private @Nullable Output<String> javaContainerVersion;

    public Optional<Output<String>> javaContainerVersion() {
        return Optional.ofNullable(this.javaContainerVersion);
    }

    /**
     * Java version.
     * 
     */
    @Import(name="javaVersion")
    private @Nullable Output<String> javaVersion;

    public Optional<Output<String>> javaVersion() {
        return Optional.ofNullable(this.javaVersion);
    }

    /**
     * Identity to use for Key Vault Reference authentication.
     * 
     */
    @Import(name="keyVaultReferenceIdentity")
    private @Nullable Output<String> keyVaultReferenceIdentity;

    public Optional<Output<String>> keyVaultReferenceIdentity() {
        return Optional.ofNullable(this.keyVaultReferenceIdentity);
    }

    /**
     * Site limits.
     * 
     */
    @Import(name="limits")
    private @Nullable Output<SiteLimitsArgs> limits;

    public Optional<Output<SiteLimitsArgs>> limits() {
        return Optional.ofNullable(this.limits);
    }

    /**
     * Linux App Framework and version
     * 
     */
    @Import(name="linuxFxVersion")
    private @Nullable Output<String> linuxFxVersion;

    public Optional<Output<String>> linuxFxVersion() {
        return Optional.ofNullable(this.linuxFxVersion);
    }

    /**
     * Site load balancing.
     * 
     */
    @Import(name="loadBalancing")
    private @Nullable Output<SiteLoadBalancing> loadBalancing;

    public Optional<Output<SiteLoadBalancing>> loadBalancing() {
        return Optional.ofNullable(this.loadBalancing);
    }

    /**
     * &lt;code&gt;true&lt;/code&gt; to enable local MySQL; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    @Import(name="localMySqlEnabled")
    private @Nullable Output<Boolean> localMySqlEnabled;

    public Optional<Output<Boolean>> localMySqlEnabled() {
        return Optional.ofNullable(this.localMySqlEnabled);
    }

    /**
     * HTTP logs directory size limit.
     * 
     */
    @Import(name="logsDirectorySizeLimit")
    private @Nullable Output<Integer> logsDirectorySizeLimit;

    public Optional<Output<Integer>> logsDirectorySizeLimit() {
        return Optional.ofNullable(this.logsDirectorySizeLimit);
    }

    /**
     * Managed pipeline mode.
     * 
     */
    @Import(name="managedPipelineMode")
    private @Nullable Output<ManagedPipelineMode> managedPipelineMode;

    public Optional<Output<ManagedPipelineMode>> managedPipelineMode() {
        return Optional.ofNullable(this.managedPipelineMode);
    }

    /**
     * Managed Service Identity Id
     * 
     */
    @Import(name="managedServiceIdentityId")
    private @Nullable Output<Integer> managedServiceIdentityId;

    public Optional<Output<Integer>> managedServiceIdentityId() {
        return Optional.ofNullable(this.managedServiceIdentityId);
    }

    /**
     * MinTlsVersion: configures the minimum version of TLS required for SSL requests
     * 
     */
    @Import(name="minTlsVersion")
    private @Nullable Output<Either<String,SupportedTlsVersions>> minTlsVersion;

    public Optional<Output<Either<String,SupportedTlsVersions>>> minTlsVersion() {
        return Optional.ofNullable(this.minTlsVersion);
    }

    /**
     * Number of minimum instance count for a site
     * This setting only applies to the Elastic Plans
     * 
     */
    @Import(name="minimumElasticInstanceCount")
    private @Nullable Output<Integer> minimumElasticInstanceCount;

    public Optional<Output<Integer>> minimumElasticInstanceCount() {
        return Optional.ofNullable(this.minimumElasticInstanceCount);
    }

    /**
     * .NET Framework version.
     * 
     */
    @Import(name="netFrameworkVersion")
    private @Nullable Output<String> netFrameworkVersion;

    public Optional<Output<String>> netFrameworkVersion() {
        return Optional.ofNullable(this.netFrameworkVersion);
    }

    /**
     * Version of Node.js.
     * 
     */
    @Import(name="nodeVersion")
    private @Nullable Output<String> nodeVersion;

    public Optional<Output<String>> nodeVersion() {
        return Optional.ofNullable(this.nodeVersion);
    }

    /**
     * Number of workers.
     * 
     */
    @Import(name="numberOfWorkers")
    private @Nullable Output<Integer> numberOfWorkers;

    public Optional<Output<Integer>> numberOfWorkers() {
        return Optional.ofNullable(this.numberOfWorkers);
    }

    /**
     * Version of PHP.
     * 
     */
    @Import(name="phpVersion")
    private @Nullable Output<String> phpVersion;

    public Optional<Output<String>> phpVersion() {
        return Optional.ofNullable(this.phpVersion);
    }

    /**
     * Version of PowerShell.
     * 
     */
    @Import(name="powerShellVersion")
    private @Nullable Output<String> powerShellVersion;

    public Optional<Output<String>> powerShellVersion() {
        return Optional.ofNullable(this.powerShellVersion);
    }

    /**
     * Number of preWarmed instances.
     * This setting only applies to the Consumption and Elastic Plans
     * 
     */
    @Import(name="preWarmedInstanceCount")
    private @Nullable Output<Integer> preWarmedInstanceCount;

    public Optional<Output<Integer>> preWarmedInstanceCount() {
        return Optional.ofNullable(this.preWarmedInstanceCount);
    }

    /**
     * Property to allow or block all public traffic.
     * 
     */
    @Import(name="publicNetworkAccess")
    private @Nullable Output<String> publicNetworkAccess;

    public Optional<Output<String>> publicNetworkAccess() {
        return Optional.ofNullable(this.publicNetworkAccess);
    }

    /**
     * Publishing user name.
     * 
     */
    @Import(name="publishingUsername")
    private @Nullable Output<String> publishingUsername;

    public Optional<Output<String>> publishingUsername() {
        return Optional.ofNullable(this.publishingUsername);
    }

    /**
     * Push endpoint settings.
     * 
     */
    @Import(name="push")
    private @Nullable Output<PushSettingsArgs> push;

    public Optional<Output<PushSettingsArgs>> push() {
        return Optional.ofNullable(this.push);
    }

    /**
     * Version of Python.
     * 
     */
    @Import(name="pythonVersion")
    private @Nullable Output<String> pythonVersion;

    public Optional<Output<String>> pythonVersion() {
        return Optional.ofNullable(this.pythonVersion);
    }

    /**
     * &lt;code&gt;true&lt;/code&gt; if remote debugging is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    @Import(name="remoteDebuggingEnabled")
    private @Nullable Output<Boolean> remoteDebuggingEnabled;

    public Optional<Output<Boolean>> remoteDebuggingEnabled() {
        return Optional.ofNullable(this.remoteDebuggingEnabled);
    }

    /**
     * Remote debugging version.
     * 
     */
    @Import(name="remoteDebuggingVersion")
    private @Nullable Output<String> remoteDebuggingVersion;

    public Optional<Output<String>> remoteDebuggingVersion() {
        return Optional.ofNullable(this.remoteDebuggingVersion);
    }

    /**
     * &lt;code&gt;true&lt;/code&gt; if request tracing is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    @Import(name="requestTracingEnabled")
    private @Nullable Output<Boolean> requestTracingEnabled;

    public Optional<Output<Boolean>> requestTracingEnabled() {
        return Optional.ofNullable(this.requestTracingEnabled);
    }

    /**
     * Request tracing expiration time.
     * 
     */
    @Import(name="requestTracingExpirationTime")
    private @Nullable Output<String> requestTracingExpirationTime;

    public Optional<Output<String>> requestTracingExpirationTime() {
        return Optional.ofNullable(this.requestTracingExpirationTime);
    }

    /**
     * IP security restrictions for scm.
     * 
     */
    @Import(name="scmIpSecurityRestrictions")
    private @Nullable Output<List<IpSecurityRestrictionArgs>> scmIpSecurityRestrictions;

    public Optional<Output<List<IpSecurityRestrictionArgs>>> scmIpSecurityRestrictions() {
        return Optional.ofNullable(this.scmIpSecurityRestrictions);
    }

    /**
     * IP security restrictions for scm to use main.
     * 
     */
    @Import(name="scmIpSecurityRestrictionsUseMain")
    private @Nullable Output<Boolean> scmIpSecurityRestrictionsUseMain;

    public Optional<Output<Boolean>> scmIpSecurityRestrictionsUseMain() {
        return Optional.ofNullable(this.scmIpSecurityRestrictionsUseMain);
    }

    /**
     * ScmMinTlsVersion: configures the minimum version of TLS required for SSL requests for SCM site
     * 
     */
    @Import(name="scmMinTlsVersion")
    private @Nullable Output<Either<String,SupportedTlsVersions>> scmMinTlsVersion;

    public Optional<Output<Either<String,SupportedTlsVersions>>> scmMinTlsVersion() {
        return Optional.ofNullable(this.scmMinTlsVersion);
    }

    /**
     * SCM type.
     * 
     */
    @Import(name="scmType")
    private @Nullable Output<Either<String,ScmType>> scmType;

    public Optional<Output<Either<String,ScmType>>> scmType() {
        return Optional.ofNullable(this.scmType);
    }

    /**
     * Tracing options.
     * 
     */
    @Import(name="tracingOptions")
    private @Nullable Output<String> tracingOptions;

    public Optional<Output<String>> tracingOptions() {
        return Optional.ofNullable(this.tracingOptions);
    }

    /**
     * &lt;code&gt;true&lt;/code&gt; to use 32-bit worker process; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    @Import(name="use32BitWorkerProcess")
    private @Nullable Output<Boolean> use32BitWorkerProcess;

    public Optional<Output<Boolean>> use32BitWorkerProcess() {
        return Optional.ofNullable(this.use32BitWorkerProcess);
    }

    /**
     * Virtual applications.
     * 
     */
    @Import(name="virtualApplications")
    private @Nullable Output<List<VirtualApplicationArgs>> virtualApplications;

    public Optional<Output<List<VirtualApplicationArgs>>> virtualApplications() {
        return Optional.ofNullable(this.virtualApplications);
    }

    /**
     * Virtual Network name.
     * 
     */
    @Import(name="vnetName")
    private @Nullable Output<String> vnetName;

    public Optional<Output<String>> vnetName() {
        return Optional.ofNullable(this.vnetName);
    }

    /**
     * The number of private ports assigned to this app. These will be assigned dynamically on runtime.
     * 
     */
    @Import(name="vnetPrivatePortsCount")
    private @Nullable Output<Integer> vnetPrivatePortsCount;

    public Optional<Output<Integer>> vnetPrivatePortsCount() {
        return Optional.ofNullable(this.vnetPrivatePortsCount);
    }

    /**
     * Virtual Network Route All enabled. This causes all outbound traffic to have Virtual Network Security Groups and User Defined Routes applied.
     * 
     */
    @Import(name="vnetRouteAllEnabled")
    private @Nullable Output<Boolean> vnetRouteAllEnabled;

    public Optional<Output<Boolean>> vnetRouteAllEnabled() {
        return Optional.ofNullable(this.vnetRouteAllEnabled);
    }

    /**
     * &lt;code&gt;true&lt;/code&gt; if WebSocket is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    @Import(name="webSocketsEnabled")
    private @Nullable Output<Boolean> webSocketsEnabled;

    public Optional<Output<Boolean>> webSocketsEnabled() {
        return Optional.ofNullable(this.webSocketsEnabled);
    }

    /**
     * Sets the time zone a site uses for generating timestamps. Compatible with Linux and Windows App Service. Setting the WEBSITE_TIME_ZONE app setting takes precedence over this config. For Linux, expects tz database values https://www.iana.org/time-zones (for a quick reference see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones). For Windows, expects one of the time zones listed under HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Time Zones
     * 
     */
    @Import(name="websiteTimeZone")
    private @Nullable Output<String> websiteTimeZone;

    public Optional<Output<String>> websiteTimeZone() {
        return Optional.ofNullable(this.websiteTimeZone);
    }

    /**
     * Xenon App Framework and version
     * 
     */
    @Import(name="windowsFxVersion")
    private @Nullable Output<String> windowsFxVersion;

    public Optional<Output<String>> windowsFxVersion() {
        return Optional.ofNullable(this.windowsFxVersion);
    }

    /**
     * Explicit Managed Service Identity Id
     * 
     */
    @Import(name="xManagedServiceIdentityId")
    private @Nullable Output<Integer> xManagedServiceIdentityId;

    public Optional<Output<Integer>> xManagedServiceIdentityId() {
        return Optional.ofNullable(this.xManagedServiceIdentityId);
    }

    private SiteConfigArgs() {}

    private SiteConfigArgs(SiteConfigArgs $) {
        this.acrUseManagedIdentityCreds = $.acrUseManagedIdentityCreds;
        this.acrUserManagedIdentityID = $.acrUserManagedIdentityID;
        this.alwaysOn = $.alwaysOn;
        this.apiDefinition = $.apiDefinition;
        this.apiManagementConfig = $.apiManagementConfig;
        this.appCommandLine = $.appCommandLine;
        this.appSettings = $.appSettings;
        this.autoHealEnabled = $.autoHealEnabled;
        this.autoHealRules = $.autoHealRules;
        this.autoSwapSlotName = $.autoSwapSlotName;
        this.azureStorageAccounts = $.azureStorageAccounts;
        this.connectionStrings = $.connectionStrings;
        this.cors = $.cors;
        this.defaultDocuments = $.defaultDocuments;
        this.detailedErrorLoggingEnabled = $.detailedErrorLoggingEnabled;
        this.documentRoot = $.documentRoot;
        this.experiments = $.experiments;
        this.ftpsState = $.ftpsState;
        this.functionAppScaleLimit = $.functionAppScaleLimit;
        this.functionsRuntimeScaleMonitoringEnabled = $.functionsRuntimeScaleMonitoringEnabled;
        this.handlerMappings = $.handlerMappings;
        this.healthCheckPath = $.healthCheckPath;
        this.http20Enabled = $.http20Enabled;
        this.httpLoggingEnabled = $.httpLoggingEnabled;
        this.ipSecurityRestrictions = $.ipSecurityRestrictions;
        this.javaContainer = $.javaContainer;
        this.javaContainerVersion = $.javaContainerVersion;
        this.javaVersion = $.javaVersion;
        this.keyVaultReferenceIdentity = $.keyVaultReferenceIdentity;
        this.limits = $.limits;
        this.linuxFxVersion = $.linuxFxVersion;
        this.loadBalancing = $.loadBalancing;
        this.localMySqlEnabled = $.localMySqlEnabled;
        this.logsDirectorySizeLimit = $.logsDirectorySizeLimit;
        this.managedPipelineMode = $.managedPipelineMode;
        this.managedServiceIdentityId = $.managedServiceIdentityId;
        this.minTlsVersion = $.minTlsVersion;
        this.minimumElasticInstanceCount = $.minimumElasticInstanceCount;
        this.netFrameworkVersion = $.netFrameworkVersion;
        this.nodeVersion = $.nodeVersion;
        this.numberOfWorkers = $.numberOfWorkers;
        this.phpVersion = $.phpVersion;
        this.powerShellVersion = $.powerShellVersion;
        this.preWarmedInstanceCount = $.preWarmedInstanceCount;
        this.publicNetworkAccess = $.publicNetworkAccess;
        this.publishingUsername = $.publishingUsername;
        this.push = $.push;
        this.pythonVersion = $.pythonVersion;
        this.remoteDebuggingEnabled = $.remoteDebuggingEnabled;
        this.remoteDebuggingVersion = $.remoteDebuggingVersion;
        this.requestTracingEnabled = $.requestTracingEnabled;
        this.requestTracingExpirationTime = $.requestTracingExpirationTime;
        this.scmIpSecurityRestrictions = $.scmIpSecurityRestrictions;
        this.scmIpSecurityRestrictionsUseMain = $.scmIpSecurityRestrictionsUseMain;
        this.scmMinTlsVersion = $.scmMinTlsVersion;
        this.scmType = $.scmType;
        this.tracingOptions = $.tracingOptions;
        this.use32BitWorkerProcess = $.use32BitWorkerProcess;
        this.virtualApplications = $.virtualApplications;
        this.vnetName = $.vnetName;
        this.vnetPrivatePortsCount = $.vnetPrivatePortsCount;
        this.vnetRouteAllEnabled = $.vnetRouteAllEnabled;
        this.webSocketsEnabled = $.webSocketsEnabled;
        this.websiteTimeZone = $.websiteTimeZone;
        this.windowsFxVersion = $.windowsFxVersion;
        this.xManagedServiceIdentityId = $.xManagedServiceIdentityId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SiteConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SiteConfigArgs $;

        public Builder() {
            $ = new SiteConfigArgs();
        }

        public Builder(SiteConfigArgs defaults) {
            $ = new SiteConfigArgs(Objects.requireNonNull(defaults));
        }

        public Builder acrUseManagedIdentityCreds(@Nullable Output<Boolean> acrUseManagedIdentityCreds) {
            $.acrUseManagedIdentityCreds = acrUseManagedIdentityCreds;
            return this;
        }

        public Builder acrUseManagedIdentityCreds(Boolean acrUseManagedIdentityCreds) {
            return acrUseManagedIdentityCreds(Output.of(acrUseManagedIdentityCreds));
        }

        public Builder acrUserManagedIdentityID(@Nullable Output<String> acrUserManagedIdentityID) {
            $.acrUserManagedIdentityID = acrUserManagedIdentityID;
            return this;
        }

        public Builder acrUserManagedIdentityID(String acrUserManagedIdentityID) {
            return acrUserManagedIdentityID(Output.of(acrUserManagedIdentityID));
        }

        public Builder alwaysOn(@Nullable Output<Boolean> alwaysOn) {
            $.alwaysOn = alwaysOn;
            return this;
        }

        public Builder alwaysOn(Boolean alwaysOn) {
            return alwaysOn(Output.of(alwaysOn));
        }

        public Builder apiDefinition(@Nullable Output<ApiDefinitionInfoArgs> apiDefinition) {
            $.apiDefinition = apiDefinition;
            return this;
        }

        public Builder apiDefinition(ApiDefinitionInfoArgs apiDefinition) {
            return apiDefinition(Output.of(apiDefinition));
        }

        public Builder apiManagementConfig(@Nullable Output<ApiManagementConfigArgs> apiManagementConfig) {
            $.apiManagementConfig = apiManagementConfig;
            return this;
        }

        public Builder apiManagementConfig(ApiManagementConfigArgs apiManagementConfig) {
            return apiManagementConfig(Output.of(apiManagementConfig));
        }

        public Builder appCommandLine(@Nullable Output<String> appCommandLine) {
            $.appCommandLine = appCommandLine;
            return this;
        }

        public Builder appCommandLine(String appCommandLine) {
            return appCommandLine(Output.of(appCommandLine));
        }

        public Builder appSettings(@Nullable Output<List<NameValuePairArgs>> appSettings) {
            $.appSettings = appSettings;
            return this;
        }

        public Builder appSettings(List<NameValuePairArgs> appSettings) {
            return appSettings(Output.of(appSettings));
        }

        public Builder appSettings(NameValuePairArgs... appSettings) {
            return appSettings(List.of(appSettings));
        }

        public Builder autoHealEnabled(@Nullable Output<Boolean> autoHealEnabled) {
            $.autoHealEnabled = autoHealEnabled;
            return this;
        }

        public Builder autoHealEnabled(Boolean autoHealEnabled) {
            return autoHealEnabled(Output.of(autoHealEnabled));
        }

        public Builder autoHealRules(@Nullable Output<AutoHealRulesArgs> autoHealRules) {
            $.autoHealRules = autoHealRules;
            return this;
        }

        public Builder autoHealRules(AutoHealRulesArgs autoHealRules) {
            return autoHealRules(Output.of(autoHealRules));
        }

        public Builder autoSwapSlotName(@Nullable Output<String> autoSwapSlotName) {
            $.autoSwapSlotName = autoSwapSlotName;
            return this;
        }

        public Builder autoSwapSlotName(String autoSwapSlotName) {
            return autoSwapSlotName(Output.of(autoSwapSlotName));
        }

        public Builder azureStorageAccounts(@Nullable Output<Map<String,AzureStorageInfoValueArgs>> azureStorageAccounts) {
            $.azureStorageAccounts = azureStorageAccounts;
            return this;
        }

        public Builder azureStorageAccounts(Map<String,AzureStorageInfoValueArgs> azureStorageAccounts) {
            return azureStorageAccounts(Output.of(azureStorageAccounts));
        }

        public Builder connectionStrings(@Nullable Output<List<ConnStringInfoArgs>> connectionStrings) {
            $.connectionStrings = connectionStrings;
            return this;
        }

        public Builder connectionStrings(List<ConnStringInfoArgs> connectionStrings) {
            return connectionStrings(Output.of(connectionStrings));
        }

        public Builder connectionStrings(ConnStringInfoArgs... connectionStrings) {
            return connectionStrings(List.of(connectionStrings));
        }

        public Builder cors(@Nullable Output<CorsSettingsArgs> cors) {
            $.cors = cors;
            return this;
        }

        public Builder cors(CorsSettingsArgs cors) {
            return cors(Output.of(cors));
        }

        public Builder defaultDocuments(@Nullable Output<List<String>> defaultDocuments) {
            $.defaultDocuments = defaultDocuments;
            return this;
        }

        public Builder defaultDocuments(List<String> defaultDocuments) {
            return defaultDocuments(Output.of(defaultDocuments));
        }

        public Builder defaultDocuments(String... defaultDocuments) {
            return defaultDocuments(List.of(defaultDocuments));
        }

        public Builder detailedErrorLoggingEnabled(@Nullable Output<Boolean> detailedErrorLoggingEnabled) {
            $.detailedErrorLoggingEnabled = detailedErrorLoggingEnabled;
            return this;
        }

        public Builder detailedErrorLoggingEnabled(Boolean detailedErrorLoggingEnabled) {
            return detailedErrorLoggingEnabled(Output.of(detailedErrorLoggingEnabled));
        }

        public Builder documentRoot(@Nullable Output<String> documentRoot) {
            $.documentRoot = documentRoot;
            return this;
        }

        public Builder documentRoot(String documentRoot) {
            return documentRoot(Output.of(documentRoot));
        }

        public Builder experiments(@Nullable Output<ExperimentsArgs> experiments) {
            $.experiments = experiments;
            return this;
        }

        public Builder experiments(ExperimentsArgs experiments) {
            return experiments(Output.of(experiments));
        }

        public Builder ftpsState(@Nullable Output<Either<String,FtpsState>> ftpsState) {
            $.ftpsState = ftpsState;
            return this;
        }

        public Builder ftpsState(Either<String,FtpsState> ftpsState) {
            return ftpsState(Output.of(ftpsState));
        }

        public Builder ftpsState(String ftpsState) {
            return ftpsState(Either.ofLeft(ftpsState));
        }

        public Builder ftpsState(FtpsState ftpsState) {
            return ftpsState(Either.ofRight(ftpsState));
        }

        public Builder functionAppScaleLimit(@Nullable Output<Integer> functionAppScaleLimit) {
            $.functionAppScaleLimit = functionAppScaleLimit;
            return this;
        }

        public Builder functionAppScaleLimit(Integer functionAppScaleLimit) {
            return functionAppScaleLimit(Output.of(functionAppScaleLimit));
        }

        public Builder functionsRuntimeScaleMonitoringEnabled(@Nullable Output<Boolean> functionsRuntimeScaleMonitoringEnabled) {
            $.functionsRuntimeScaleMonitoringEnabled = functionsRuntimeScaleMonitoringEnabled;
            return this;
        }

        public Builder functionsRuntimeScaleMonitoringEnabled(Boolean functionsRuntimeScaleMonitoringEnabled) {
            return functionsRuntimeScaleMonitoringEnabled(Output.of(functionsRuntimeScaleMonitoringEnabled));
        }

        public Builder handlerMappings(@Nullable Output<List<HandlerMappingArgs>> handlerMappings) {
            $.handlerMappings = handlerMappings;
            return this;
        }

        public Builder handlerMappings(List<HandlerMappingArgs> handlerMappings) {
            return handlerMappings(Output.of(handlerMappings));
        }

        public Builder handlerMappings(HandlerMappingArgs... handlerMappings) {
            return handlerMappings(List.of(handlerMappings));
        }

        public Builder healthCheckPath(@Nullable Output<String> healthCheckPath) {
            $.healthCheckPath = healthCheckPath;
            return this;
        }

        public Builder healthCheckPath(String healthCheckPath) {
            return healthCheckPath(Output.of(healthCheckPath));
        }

        public Builder http20Enabled(@Nullable Output<Boolean> http20Enabled) {
            $.http20Enabled = http20Enabled;
            return this;
        }

        public Builder http20Enabled(Boolean http20Enabled) {
            return http20Enabled(Output.of(http20Enabled));
        }

        public Builder httpLoggingEnabled(@Nullable Output<Boolean> httpLoggingEnabled) {
            $.httpLoggingEnabled = httpLoggingEnabled;
            return this;
        }

        public Builder httpLoggingEnabled(Boolean httpLoggingEnabled) {
            return httpLoggingEnabled(Output.of(httpLoggingEnabled));
        }

        public Builder ipSecurityRestrictions(@Nullable Output<List<IpSecurityRestrictionArgs>> ipSecurityRestrictions) {
            $.ipSecurityRestrictions = ipSecurityRestrictions;
            return this;
        }

        public Builder ipSecurityRestrictions(List<IpSecurityRestrictionArgs> ipSecurityRestrictions) {
            return ipSecurityRestrictions(Output.of(ipSecurityRestrictions));
        }

        public Builder ipSecurityRestrictions(IpSecurityRestrictionArgs... ipSecurityRestrictions) {
            return ipSecurityRestrictions(List.of(ipSecurityRestrictions));
        }

        public Builder javaContainer(@Nullable Output<String> javaContainer) {
            $.javaContainer = javaContainer;
            return this;
        }

        public Builder javaContainer(String javaContainer) {
            return javaContainer(Output.of(javaContainer));
        }

        public Builder javaContainerVersion(@Nullable Output<String> javaContainerVersion) {
            $.javaContainerVersion = javaContainerVersion;
            return this;
        }

        public Builder javaContainerVersion(String javaContainerVersion) {
            return javaContainerVersion(Output.of(javaContainerVersion));
        }

        public Builder javaVersion(@Nullable Output<String> javaVersion) {
            $.javaVersion = javaVersion;
            return this;
        }

        public Builder javaVersion(String javaVersion) {
            return javaVersion(Output.of(javaVersion));
        }

        public Builder keyVaultReferenceIdentity(@Nullable Output<String> keyVaultReferenceIdentity) {
            $.keyVaultReferenceIdentity = keyVaultReferenceIdentity;
            return this;
        }

        public Builder keyVaultReferenceIdentity(String keyVaultReferenceIdentity) {
            return keyVaultReferenceIdentity(Output.of(keyVaultReferenceIdentity));
        }

        public Builder limits(@Nullable Output<SiteLimitsArgs> limits) {
            $.limits = limits;
            return this;
        }

        public Builder limits(SiteLimitsArgs limits) {
            return limits(Output.of(limits));
        }

        public Builder linuxFxVersion(@Nullable Output<String> linuxFxVersion) {
            $.linuxFxVersion = linuxFxVersion;
            return this;
        }

        public Builder linuxFxVersion(String linuxFxVersion) {
            return linuxFxVersion(Output.of(linuxFxVersion));
        }

        public Builder loadBalancing(@Nullable Output<SiteLoadBalancing> loadBalancing) {
            $.loadBalancing = loadBalancing;
            return this;
        }

        public Builder loadBalancing(SiteLoadBalancing loadBalancing) {
            return loadBalancing(Output.of(loadBalancing));
        }

        public Builder localMySqlEnabled(@Nullable Output<Boolean> localMySqlEnabled) {
            $.localMySqlEnabled = localMySqlEnabled;
            return this;
        }

        public Builder localMySqlEnabled(Boolean localMySqlEnabled) {
            return localMySqlEnabled(Output.of(localMySqlEnabled));
        }

        public Builder logsDirectorySizeLimit(@Nullable Output<Integer> logsDirectorySizeLimit) {
            $.logsDirectorySizeLimit = logsDirectorySizeLimit;
            return this;
        }

        public Builder logsDirectorySizeLimit(Integer logsDirectorySizeLimit) {
            return logsDirectorySizeLimit(Output.of(logsDirectorySizeLimit));
        }

        public Builder managedPipelineMode(@Nullable Output<ManagedPipelineMode> managedPipelineMode) {
            $.managedPipelineMode = managedPipelineMode;
            return this;
        }

        public Builder managedPipelineMode(ManagedPipelineMode managedPipelineMode) {
            return managedPipelineMode(Output.of(managedPipelineMode));
        }

        public Builder managedServiceIdentityId(@Nullable Output<Integer> managedServiceIdentityId) {
            $.managedServiceIdentityId = managedServiceIdentityId;
            return this;
        }

        public Builder managedServiceIdentityId(Integer managedServiceIdentityId) {
            return managedServiceIdentityId(Output.of(managedServiceIdentityId));
        }

        public Builder minTlsVersion(@Nullable Output<Either<String,SupportedTlsVersions>> minTlsVersion) {
            $.minTlsVersion = minTlsVersion;
            return this;
        }

        public Builder minTlsVersion(Either<String,SupportedTlsVersions> minTlsVersion) {
            return minTlsVersion(Output.of(minTlsVersion));
        }

        public Builder minTlsVersion(String minTlsVersion) {
            return minTlsVersion(Either.ofLeft(minTlsVersion));
        }

        public Builder minTlsVersion(SupportedTlsVersions minTlsVersion) {
            return minTlsVersion(Either.ofRight(minTlsVersion));
        }

        public Builder minimumElasticInstanceCount(@Nullable Output<Integer> minimumElasticInstanceCount) {
            $.minimumElasticInstanceCount = minimumElasticInstanceCount;
            return this;
        }

        public Builder minimumElasticInstanceCount(Integer minimumElasticInstanceCount) {
            return minimumElasticInstanceCount(Output.of(minimumElasticInstanceCount));
        }

        public Builder netFrameworkVersion(@Nullable Output<String> netFrameworkVersion) {
            $.netFrameworkVersion = netFrameworkVersion;
            return this;
        }

        public Builder netFrameworkVersion(String netFrameworkVersion) {
            return netFrameworkVersion(Output.of(netFrameworkVersion));
        }

        public Builder nodeVersion(@Nullable Output<String> nodeVersion) {
            $.nodeVersion = nodeVersion;
            return this;
        }

        public Builder nodeVersion(String nodeVersion) {
            return nodeVersion(Output.of(nodeVersion));
        }

        public Builder numberOfWorkers(@Nullable Output<Integer> numberOfWorkers) {
            $.numberOfWorkers = numberOfWorkers;
            return this;
        }

        public Builder numberOfWorkers(Integer numberOfWorkers) {
            return numberOfWorkers(Output.of(numberOfWorkers));
        }

        public Builder phpVersion(@Nullable Output<String> phpVersion) {
            $.phpVersion = phpVersion;
            return this;
        }

        public Builder phpVersion(String phpVersion) {
            return phpVersion(Output.of(phpVersion));
        }

        public Builder powerShellVersion(@Nullable Output<String> powerShellVersion) {
            $.powerShellVersion = powerShellVersion;
            return this;
        }

        public Builder powerShellVersion(String powerShellVersion) {
            return powerShellVersion(Output.of(powerShellVersion));
        }

        public Builder preWarmedInstanceCount(@Nullable Output<Integer> preWarmedInstanceCount) {
            $.preWarmedInstanceCount = preWarmedInstanceCount;
            return this;
        }

        public Builder preWarmedInstanceCount(Integer preWarmedInstanceCount) {
            return preWarmedInstanceCount(Output.of(preWarmedInstanceCount));
        }

        public Builder publicNetworkAccess(@Nullable Output<String> publicNetworkAccess) {
            $.publicNetworkAccess = publicNetworkAccess;
            return this;
        }

        public Builder publicNetworkAccess(String publicNetworkAccess) {
            return publicNetworkAccess(Output.of(publicNetworkAccess));
        }

        public Builder publishingUsername(@Nullable Output<String> publishingUsername) {
            $.publishingUsername = publishingUsername;
            return this;
        }

        public Builder publishingUsername(String publishingUsername) {
            return publishingUsername(Output.of(publishingUsername));
        }

        public Builder push(@Nullable Output<PushSettingsArgs> push) {
            $.push = push;
            return this;
        }

        public Builder push(PushSettingsArgs push) {
            return push(Output.of(push));
        }

        public Builder pythonVersion(@Nullable Output<String> pythonVersion) {
            $.pythonVersion = pythonVersion;
            return this;
        }

        public Builder pythonVersion(String pythonVersion) {
            return pythonVersion(Output.of(pythonVersion));
        }

        public Builder remoteDebuggingEnabled(@Nullable Output<Boolean> remoteDebuggingEnabled) {
            $.remoteDebuggingEnabled = remoteDebuggingEnabled;
            return this;
        }

        public Builder remoteDebuggingEnabled(Boolean remoteDebuggingEnabled) {
            return remoteDebuggingEnabled(Output.of(remoteDebuggingEnabled));
        }

        public Builder remoteDebuggingVersion(@Nullable Output<String> remoteDebuggingVersion) {
            $.remoteDebuggingVersion = remoteDebuggingVersion;
            return this;
        }

        public Builder remoteDebuggingVersion(String remoteDebuggingVersion) {
            return remoteDebuggingVersion(Output.of(remoteDebuggingVersion));
        }

        public Builder requestTracingEnabled(@Nullable Output<Boolean> requestTracingEnabled) {
            $.requestTracingEnabled = requestTracingEnabled;
            return this;
        }

        public Builder requestTracingEnabled(Boolean requestTracingEnabled) {
            return requestTracingEnabled(Output.of(requestTracingEnabled));
        }

        public Builder requestTracingExpirationTime(@Nullable Output<String> requestTracingExpirationTime) {
            $.requestTracingExpirationTime = requestTracingExpirationTime;
            return this;
        }

        public Builder requestTracingExpirationTime(String requestTracingExpirationTime) {
            return requestTracingExpirationTime(Output.of(requestTracingExpirationTime));
        }

        public Builder scmIpSecurityRestrictions(@Nullable Output<List<IpSecurityRestrictionArgs>> scmIpSecurityRestrictions) {
            $.scmIpSecurityRestrictions = scmIpSecurityRestrictions;
            return this;
        }

        public Builder scmIpSecurityRestrictions(List<IpSecurityRestrictionArgs> scmIpSecurityRestrictions) {
            return scmIpSecurityRestrictions(Output.of(scmIpSecurityRestrictions));
        }

        public Builder scmIpSecurityRestrictions(IpSecurityRestrictionArgs... scmIpSecurityRestrictions) {
            return scmIpSecurityRestrictions(List.of(scmIpSecurityRestrictions));
        }

        public Builder scmIpSecurityRestrictionsUseMain(@Nullable Output<Boolean> scmIpSecurityRestrictionsUseMain) {
            $.scmIpSecurityRestrictionsUseMain = scmIpSecurityRestrictionsUseMain;
            return this;
        }

        public Builder scmIpSecurityRestrictionsUseMain(Boolean scmIpSecurityRestrictionsUseMain) {
            return scmIpSecurityRestrictionsUseMain(Output.of(scmIpSecurityRestrictionsUseMain));
        }

        public Builder scmMinTlsVersion(@Nullable Output<Either<String,SupportedTlsVersions>> scmMinTlsVersion) {
            $.scmMinTlsVersion = scmMinTlsVersion;
            return this;
        }

        public Builder scmMinTlsVersion(Either<String,SupportedTlsVersions> scmMinTlsVersion) {
            return scmMinTlsVersion(Output.of(scmMinTlsVersion));
        }

        public Builder scmMinTlsVersion(String scmMinTlsVersion) {
            return scmMinTlsVersion(Either.ofLeft(scmMinTlsVersion));
        }

        public Builder scmMinTlsVersion(SupportedTlsVersions scmMinTlsVersion) {
            return scmMinTlsVersion(Either.ofRight(scmMinTlsVersion));
        }

        public Builder scmType(@Nullable Output<Either<String,ScmType>> scmType) {
            $.scmType = scmType;
            return this;
        }

        public Builder scmType(Either<String,ScmType> scmType) {
            return scmType(Output.of(scmType));
        }

        public Builder scmType(String scmType) {
            return scmType(Either.ofLeft(scmType));
        }

        public Builder scmType(ScmType scmType) {
            return scmType(Either.ofRight(scmType));
        }

        public Builder tracingOptions(@Nullable Output<String> tracingOptions) {
            $.tracingOptions = tracingOptions;
            return this;
        }

        public Builder tracingOptions(String tracingOptions) {
            return tracingOptions(Output.of(tracingOptions));
        }

        public Builder use32BitWorkerProcess(@Nullable Output<Boolean> use32BitWorkerProcess) {
            $.use32BitWorkerProcess = use32BitWorkerProcess;
            return this;
        }

        public Builder use32BitWorkerProcess(Boolean use32BitWorkerProcess) {
            return use32BitWorkerProcess(Output.of(use32BitWorkerProcess));
        }

        public Builder virtualApplications(@Nullable Output<List<VirtualApplicationArgs>> virtualApplications) {
            $.virtualApplications = virtualApplications;
            return this;
        }

        public Builder virtualApplications(List<VirtualApplicationArgs> virtualApplications) {
            return virtualApplications(Output.of(virtualApplications));
        }

        public Builder virtualApplications(VirtualApplicationArgs... virtualApplications) {
            return virtualApplications(List.of(virtualApplications));
        }

        public Builder vnetName(@Nullable Output<String> vnetName) {
            $.vnetName = vnetName;
            return this;
        }

        public Builder vnetName(String vnetName) {
            return vnetName(Output.of(vnetName));
        }

        public Builder vnetPrivatePortsCount(@Nullable Output<Integer> vnetPrivatePortsCount) {
            $.vnetPrivatePortsCount = vnetPrivatePortsCount;
            return this;
        }

        public Builder vnetPrivatePortsCount(Integer vnetPrivatePortsCount) {
            return vnetPrivatePortsCount(Output.of(vnetPrivatePortsCount));
        }

        public Builder vnetRouteAllEnabled(@Nullable Output<Boolean> vnetRouteAllEnabled) {
            $.vnetRouteAllEnabled = vnetRouteAllEnabled;
            return this;
        }

        public Builder vnetRouteAllEnabled(Boolean vnetRouteAllEnabled) {
            return vnetRouteAllEnabled(Output.of(vnetRouteAllEnabled));
        }

        public Builder webSocketsEnabled(@Nullable Output<Boolean> webSocketsEnabled) {
            $.webSocketsEnabled = webSocketsEnabled;
            return this;
        }

        public Builder webSocketsEnabled(Boolean webSocketsEnabled) {
            return webSocketsEnabled(Output.of(webSocketsEnabled));
        }

        public Builder websiteTimeZone(@Nullable Output<String> websiteTimeZone) {
            $.websiteTimeZone = websiteTimeZone;
            return this;
        }

        public Builder websiteTimeZone(String websiteTimeZone) {
            return websiteTimeZone(Output.of(websiteTimeZone));
        }

        public Builder windowsFxVersion(@Nullable Output<String> windowsFxVersion) {
            $.windowsFxVersion = windowsFxVersion;
            return this;
        }

        public Builder windowsFxVersion(String windowsFxVersion) {
            return windowsFxVersion(Output.of(windowsFxVersion));
        }

        public Builder xManagedServiceIdentityId(@Nullable Output<Integer> xManagedServiceIdentityId) {
            $.xManagedServiceIdentityId = xManagedServiceIdentityId;
            return this;
        }

        public Builder xManagedServiceIdentityId(Integer xManagedServiceIdentityId) {
            return xManagedServiceIdentityId(Output.of(xManagedServiceIdentityId));
        }

        public SiteConfigArgs build() {
            $.http20Enabled = Codegen.booleanProp("http20Enabled").output().arg($.http20Enabled).def(true).getNullable();
            $.localMySqlEnabled = Codegen.booleanProp("localMySqlEnabled").output().arg($.localMySqlEnabled).def(false).getNullable();
            $.netFrameworkVersion = Codegen.stringProp("netFrameworkVersion").output().arg($.netFrameworkVersion).def("v4.6").getNullable();
            return $;
        }
    }

}
