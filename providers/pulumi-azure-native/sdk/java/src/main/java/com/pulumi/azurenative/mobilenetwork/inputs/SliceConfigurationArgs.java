// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.mobilenetwork.inputs;

import com.pulumi.azurenative.mobilenetwork.inputs.DataNetworkConfigurationArgs;
import com.pulumi.azurenative.mobilenetwork.inputs.DataNetworkResourceIdArgs;
import com.pulumi.azurenative.mobilenetwork.inputs.SliceResourceIdArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.List;
import java.util.Objects;


/**
 * Per-slice settings
 * 
 */
public final class SliceConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final SliceConfigurationArgs Empty = new SliceConfigurationArgs();

    /**
     * The allowed data networks and the settings to use for them. The list must not contain duplicate items and must contain at least one item.
     * 
     */
    @Import(name="dataNetworkConfigurations", required=true)
    private Output<List<DataNetworkConfigurationArgs>> dataNetworkConfigurations;

    /**
     * @return The allowed data networks and the settings to use for them. The list must not contain duplicate items and must contain at least one item.
     * 
     */
    public Output<List<DataNetworkConfigurationArgs>> dataNetworkConfigurations() {
        return this.dataNetworkConfigurations;
    }

    /**
     * The default data network to use if the UE does not explicitly specify it.  Configuration for this object must exist in the `dataNetworkConfigurations` map.
     * 
     */
    @Import(name="defaultDataNetwork", required=true)
    private Output<DataNetworkResourceIdArgs> defaultDataNetwork;

    /**
     * @return The default data network to use if the UE does not explicitly specify it.  Configuration for this object must exist in the `dataNetworkConfigurations` map.
     * 
     */
    public Output<DataNetworkResourceIdArgs> defaultDataNetwork() {
        return this.defaultDataNetwork;
    }

    /**
     * A reference to the Slice that these settings apply to
     * 
     */
    @Import(name="slice", required=true)
    private Output<SliceResourceIdArgs> slice;

    /**
     * @return A reference to the Slice that these settings apply to
     * 
     */
    public Output<SliceResourceIdArgs> slice() {
        return this.slice;
    }

    private SliceConfigurationArgs() {}

    private SliceConfigurationArgs(SliceConfigurationArgs $) {
        this.dataNetworkConfigurations = $.dataNetworkConfigurations;
        this.defaultDataNetwork = $.defaultDataNetwork;
        this.slice = $.slice;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SliceConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SliceConfigurationArgs $;

        public Builder() {
            $ = new SliceConfigurationArgs();
        }

        public Builder(SliceConfigurationArgs defaults) {
            $ = new SliceConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dataNetworkConfigurations The allowed data networks and the settings to use for them. The list must not contain duplicate items and must contain at least one item.
         * 
         * @return builder
         * 
         */
        public Builder dataNetworkConfigurations(Output<List<DataNetworkConfigurationArgs>> dataNetworkConfigurations) {
            $.dataNetworkConfigurations = dataNetworkConfigurations;
            return this;
        }

        /**
         * @param dataNetworkConfigurations The allowed data networks and the settings to use for them. The list must not contain duplicate items and must contain at least one item.
         * 
         * @return builder
         * 
         */
        public Builder dataNetworkConfigurations(List<DataNetworkConfigurationArgs> dataNetworkConfigurations) {
            return dataNetworkConfigurations(Output.of(dataNetworkConfigurations));
        }

        /**
         * @param dataNetworkConfigurations The allowed data networks and the settings to use for them. The list must not contain duplicate items and must contain at least one item.
         * 
         * @return builder
         * 
         */
        public Builder dataNetworkConfigurations(DataNetworkConfigurationArgs... dataNetworkConfigurations) {
            return dataNetworkConfigurations(List.of(dataNetworkConfigurations));
        }

        /**
         * @param defaultDataNetwork The default data network to use if the UE does not explicitly specify it.  Configuration for this object must exist in the `dataNetworkConfigurations` map.
         * 
         * @return builder
         * 
         */
        public Builder defaultDataNetwork(Output<DataNetworkResourceIdArgs> defaultDataNetwork) {
            $.defaultDataNetwork = defaultDataNetwork;
            return this;
        }

        /**
         * @param defaultDataNetwork The default data network to use if the UE does not explicitly specify it.  Configuration for this object must exist in the `dataNetworkConfigurations` map.
         * 
         * @return builder
         * 
         */
        public Builder defaultDataNetwork(DataNetworkResourceIdArgs defaultDataNetwork) {
            return defaultDataNetwork(Output.of(defaultDataNetwork));
        }

        /**
         * @param slice A reference to the Slice that these settings apply to
         * 
         * @return builder
         * 
         */
        public Builder slice(Output<SliceResourceIdArgs> slice) {
            $.slice = slice;
            return this;
        }

        /**
         * @param slice A reference to the Slice that these settings apply to
         * 
         * @return builder
         * 
         */
        public Builder slice(SliceResourceIdArgs slice) {
            return slice(Output.of(slice));
        }

        public SliceConfigurationArgs build() {
            $.dataNetworkConfigurations = Objects.requireNonNull($.dataNetworkConfigurations, "expected parameter 'dataNetworkConfigurations' to be non-null");
            $.defaultDataNetwork = Objects.requireNonNull($.defaultDataNetwork, "expected parameter 'defaultDataNetwork' to be non-null");
            $.slice = Objects.requireNonNull($.slice, "expected parameter 'slice' to be non-null");
            return $;
        }
    }

}
