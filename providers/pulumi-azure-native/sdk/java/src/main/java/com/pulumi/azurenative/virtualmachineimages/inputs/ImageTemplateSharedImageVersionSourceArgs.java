// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.virtualmachineimages.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;


/**
 * Describes an image source that is an image version in a shared image gallery.
 * 
 */
public final class ImageTemplateSharedImageVersionSourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final ImageTemplateSharedImageVersionSourceArgs Empty = new ImageTemplateSharedImageVersionSourceArgs();

    /**
     * ARM resource id of the image version in the shared image gallery
     * 
     */
    @Import(name="imageVersionId", required=true)
      private final Output<String> imageVersionId;

    public Output<String> imageVersionId() {
        return this.imageVersionId;
    }

    /**
     * Specifies the type of source image you want to start with.
     * Expected value is &#39;SharedImageVersion&#39;.
     * 
     */
    @Import(name="type", required=true)
      private final Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    public ImageTemplateSharedImageVersionSourceArgs(
        Output<String> imageVersionId,
        Output<String> type) {
        this.imageVersionId = Objects.requireNonNull(imageVersionId, "expected parameter 'imageVersionId' to be non-null");
        this.type = Codegen.stringProp("type").output().arg(type).require();
    }

    private ImageTemplateSharedImageVersionSourceArgs() {
        this.imageVersionId = Codegen.empty();
        this.type = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ImageTemplateSharedImageVersionSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> imageVersionId;
        private Output<String> type;

        public Builder() {
    	      // Empty
        }

        public Builder(ImageTemplateSharedImageVersionSourceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.imageVersionId = defaults.imageVersionId;
    	      this.type = defaults.type;
        }

        public Builder imageVersionId(Output<String> imageVersionId) {
            this.imageVersionId = Objects.requireNonNull(imageVersionId);
            return this;
        }
        public Builder imageVersionId(String imageVersionId) {
            this.imageVersionId = Output.of(Objects.requireNonNull(imageVersionId));
            return this;
        }
        public Builder type(Output<String> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder type(String type) {
            this.type = Output.of(Objects.requireNonNull(type));
            return this;
        }        public ImageTemplateSharedImageVersionSourceArgs build() {
            return new ImageTemplateSharedImageVersionSourceArgs(imageVersionId, type);
        }
    }
}
