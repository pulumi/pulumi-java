// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.hybridnetwork.inputs;

import com.pulumi.azurenative.hybridnetwork.enums.IPAllocationMethod;
import com.pulumi.azurenative.hybridnetwork.enums.IPVersion;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Network interface IP configuration properties.
 * 
 */
public final class NetworkInterfaceIPConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final NetworkInterfaceIPConfigurationArgs Empty = new NetworkInterfaceIPConfigurationArgs();

    /**
     * The list of DNS servers IP addresses.
     * 
     */
    @Import(name="dnsServers")
      private final @Nullable Output<List<String>> dnsServers;

    public Output<List<String>> dnsServers() {
        return this.dnsServers == null ? Codegen.empty() : this.dnsServers;
    }

    /**
     * The value of the gateway.
     * 
     */
    @Import(name="gateway")
      private final @Nullable Output<String> gateway;

    public Output<String> gateway() {
        return this.gateway == null ? Codegen.empty() : this.gateway;
    }

    /**
     * The value of the IP address.
     * 
     */
    @Import(name="ipAddress")
      private final @Nullable Output<String> ipAddress;

    public Output<String> ipAddress() {
        return this.ipAddress == null ? Codegen.empty() : this.ipAddress;
    }

    /**
     * IP address allocation method.
     * 
     */
    @Import(name="ipAllocationMethod")
      private final @Nullable Output<Either<String,IPAllocationMethod>> ipAllocationMethod;

    public Output<Either<String,IPAllocationMethod>> ipAllocationMethod() {
        return this.ipAllocationMethod == null ? Codegen.empty() : this.ipAllocationMethod;
    }

    /**
     * IP address version.
     * 
     */
    @Import(name="ipVersion")
      private final @Nullable Output<Either<String,IPVersion>> ipVersion;

    public Output<Either<String,IPVersion>> ipVersion() {
        return this.ipVersion == null ? Codegen.empty() : this.ipVersion;
    }

    /**
     * The value of the subnet.
     * 
     */
    @Import(name="subnet")
      private final @Nullable Output<String> subnet;

    public Output<String> subnet() {
        return this.subnet == null ? Codegen.empty() : this.subnet;
    }

    public NetworkInterfaceIPConfigurationArgs(
        @Nullable Output<List<String>> dnsServers,
        @Nullable Output<String> gateway,
        @Nullable Output<String> ipAddress,
        @Nullable Output<Either<String,IPAllocationMethod>> ipAllocationMethod,
        @Nullable Output<Either<String,IPVersion>> ipVersion,
        @Nullable Output<String> subnet) {
        this.dnsServers = dnsServers;
        this.gateway = gateway;
        this.ipAddress = ipAddress;
        this.ipAllocationMethod = ipAllocationMethod;
        this.ipVersion = ipVersion;
        this.subnet = subnet;
    }

    private NetworkInterfaceIPConfigurationArgs() {
        this.dnsServers = Codegen.empty();
        this.gateway = Codegen.empty();
        this.ipAddress = Codegen.empty();
        this.ipAllocationMethod = Codegen.empty();
        this.ipVersion = Codegen.empty();
        this.subnet = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NetworkInterfaceIPConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<String>> dnsServers;
        private @Nullable Output<String> gateway;
        private @Nullable Output<String> ipAddress;
        private @Nullable Output<Either<String,IPAllocationMethod>> ipAllocationMethod;
        private @Nullable Output<Either<String,IPVersion>> ipVersion;
        private @Nullable Output<String> subnet;

        public Builder() {
    	      // Empty
        }

        public Builder(NetworkInterfaceIPConfigurationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dnsServers = defaults.dnsServers;
    	      this.gateway = defaults.gateway;
    	      this.ipAddress = defaults.ipAddress;
    	      this.ipAllocationMethod = defaults.ipAllocationMethod;
    	      this.ipVersion = defaults.ipVersion;
    	      this.subnet = defaults.subnet;
        }

        public Builder dnsServers(@Nullable Output<List<String>> dnsServers) {
            this.dnsServers = dnsServers;
            return this;
        }
        public Builder dnsServers(@Nullable List<String> dnsServers) {
            this.dnsServers = Codegen.ofNullable(dnsServers);
            return this;
        }
        public Builder dnsServers(String... dnsServers) {
            return dnsServers(List.of(dnsServers));
        }
        public Builder gateway(@Nullable Output<String> gateway) {
            this.gateway = gateway;
            return this;
        }
        public Builder gateway(@Nullable String gateway) {
            this.gateway = Codegen.ofNullable(gateway);
            return this;
        }
        public Builder ipAddress(@Nullable Output<String> ipAddress) {
            this.ipAddress = ipAddress;
            return this;
        }
        public Builder ipAddress(@Nullable String ipAddress) {
            this.ipAddress = Codegen.ofNullable(ipAddress);
            return this;
        }
        public Builder ipAllocationMethod(@Nullable Output<Either<String,IPAllocationMethod>> ipAllocationMethod) {
            this.ipAllocationMethod = ipAllocationMethod;
            return this;
        }
        public Builder ipAllocationMethod(@Nullable Either<String,IPAllocationMethod> ipAllocationMethod) {
            this.ipAllocationMethod = Codegen.ofNullable(ipAllocationMethod);
            return this;
        }
        public Builder ipVersion(@Nullable Output<Either<String,IPVersion>> ipVersion) {
            this.ipVersion = ipVersion;
            return this;
        }
        public Builder ipVersion(@Nullable Either<String,IPVersion> ipVersion) {
            this.ipVersion = Codegen.ofNullable(ipVersion);
            return this;
        }
        public Builder subnet(@Nullable Output<String> subnet) {
            this.subnet = subnet;
            return this;
        }
        public Builder subnet(@Nullable String subnet) {
            this.subnet = Codegen.ofNullable(subnet);
            return this;
        }        public NetworkInterfaceIPConfigurationArgs build() {
            return new NetworkInterfaceIPConfigurationArgs(dnsServers, gateway, ipAddress, ipAllocationMethod, ipVersion, subnet);
        }
    }
}
