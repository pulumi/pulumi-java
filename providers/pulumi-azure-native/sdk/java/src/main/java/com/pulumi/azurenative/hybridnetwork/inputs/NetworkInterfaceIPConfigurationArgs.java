// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.hybridnetwork.inputs;

import com.pulumi.azurenative.hybridnetwork.enums.IPAllocationMethod;
import com.pulumi.azurenative.hybridnetwork.enums.IPVersion;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Network interface IP configuration properties.
 * 
 */
public final class NetworkInterfaceIPConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final NetworkInterfaceIPConfigurationArgs Empty = new NetworkInterfaceIPConfigurationArgs();

    /**
     * The list of DNS servers IP addresses.
     * 
     */
    @Import(name="dnsServers")
    private @Nullable Output<List<String>> dnsServers;

    /**
     * @return The list of DNS servers IP addresses.
     * 
     */
    public Optional<Output<List<String>>> dnsServers() {
        return Optional.ofNullable(this.dnsServers);
    }

    /**
     * The value of the gateway.
     * 
     */
    @Import(name="gateway")
    private @Nullable Output<String> gateway;

    /**
     * @return The value of the gateway.
     * 
     */
    public Optional<Output<String>> gateway() {
        return Optional.ofNullable(this.gateway);
    }

    /**
     * The value of the IP address.
     * 
     */
    @Import(name="ipAddress")
    private @Nullable Output<String> ipAddress;

    /**
     * @return The value of the IP address.
     * 
     */
    public Optional<Output<String>> ipAddress() {
        return Optional.ofNullable(this.ipAddress);
    }

    /**
     * IP address allocation method.
     * 
     */
    @Import(name="ipAllocationMethod")
    private @Nullable Output<Either<String,IPAllocationMethod>> ipAllocationMethod;

    /**
     * @return IP address allocation method.
     * 
     */
    public Optional<Output<Either<String,IPAllocationMethod>>> ipAllocationMethod() {
        return Optional.ofNullable(this.ipAllocationMethod);
    }

    /**
     * IP address version.
     * 
     */
    @Import(name="ipVersion")
    private @Nullable Output<Either<String,IPVersion>> ipVersion;

    /**
     * @return IP address version.
     * 
     */
    public Optional<Output<Either<String,IPVersion>>> ipVersion() {
        return Optional.ofNullable(this.ipVersion);
    }

    /**
     * The value of the subnet.
     * 
     */
    @Import(name="subnet")
    private @Nullable Output<String> subnet;

    /**
     * @return The value of the subnet.
     * 
     */
    public Optional<Output<String>> subnet() {
        return Optional.ofNullable(this.subnet);
    }

    private NetworkInterfaceIPConfigurationArgs() {}

    private NetworkInterfaceIPConfigurationArgs(NetworkInterfaceIPConfigurationArgs $) {
        this.dnsServers = $.dnsServers;
        this.gateway = $.gateway;
        this.ipAddress = $.ipAddress;
        this.ipAllocationMethod = $.ipAllocationMethod;
        this.ipVersion = $.ipVersion;
        this.subnet = $.subnet;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkInterfaceIPConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkInterfaceIPConfigurationArgs $;

        public Builder() {
            $ = new NetworkInterfaceIPConfigurationArgs();
        }

        public Builder(NetworkInterfaceIPConfigurationArgs defaults) {
            $ = new NetworkInterfaceIPConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dnsServers The list of DNS servers IP addresses.
         * 
         * @return builder
         * 
         */
        public Builder dnsServers(@Nullable Output<List<String>> dnsServers) {
            $.dnsServers = dnsServers;
            return this;
        }

        /**
         * @param dnsServers The list of DNS servers IP addresses.
         * 
         * @return builder
         * 
         */
        public Builder dnsServers(List<String> dnsServers) {
            return dnsServers(Output.of(dnsServers));
        }

        /**
         * @param dnsServers The list of DNS servers IP addresses.
         * 
         * @return builder
         * 
         */
        public Builder dnsServers(String... dnsServers) {
            return dnsServers(List.of(dnsServers));
        }

        /**
         * @param gateway The value of the gateway.
         * 
         * @return builder
         * 
         */
        public Builder gateway(@Nullable Output<String> gateway) {
            $.gateway = gateway;
            return this;
        }

        /**
         * @param gateway The value of the gateway.
         * 
         * @return builder
         * 
         */
        public Builder gateway(String gateway) {
            return gateway(Output.of(gateway));
        }

        /**
         * @param ipAddress The value of the IP address.
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(@Nullable Output<String> ipAddress) {
            $.ipAddress = ipAddress;
            return this;
        }

        /**
         * @param ipAddress The value of the IP address.
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(String ipAddress) {
            return ipAddress(Output.of(ipAddress));
        }

        /**
         * @param ipAllocationMethod IP address allocation method.
         * 
         * @return builder
         * 
         */
        public Builder ipAllocationMethod(@Nullable Output<Either<String,IPAllocationMethod>> ipAllocationMethod) {
            $.ipAllocationMethod = ipAllocationMethod;
            return this;
        }

        /**
         * @param ipAllocationMethod IP address allocation method.
         * 
         * @return builder
         * 
         */
        public Builder ipAllocationMethod(Either<String,IPAllocationMethod> ipAllocationMethod) {
            return ipAllocationMethod(Output.of(ipAllocationMethod));
        }

        /**
         * @param ipAllocationMethod IP address allocation method.
         * 
         * @return builder
         * 
         */
        public Builder ipAllocationMethod(String ipAllocationMethod) {
            return ipAllocationMethod(Either.ofLeft(ipAllocationMethod));
        }

        /**
         * @param ipAllocationMethod IP address allocation method.
         * 
         * @return builder
         * 
         */
        public Builder ipAllocationMethod(IPAllocationMethod ipAllocationMethod) {
            return ipAllocationMethod(Either.ofRight(ipAllocationMethod));
        }

        /**
         * @param ipVersion IP address version.
         * 
         * @return builder
         * 
         */
        public Builder ipVersion(@Nullable Output<Either<String,IPVersion>> ipVersion) {
            $.ipVersion = ipVersion;
            return this;
        }

        /**
         * @param ipVersion IP address version.
         * 
         * @return builder
         * 
         */
        public Builder ipVersion(Either<String,IPVersion> ipVersion) {
            return ipVersion(Output.of(ipVersion));
        }

        /**
         * @param ipVersion IP address version.
         * 
         * @return builder
         * 
         */
        public Builder ipVersion(String ipVersion) {
            return ipVersion(Either.ofLeft(ipVersion));
        }

        /**
         * @param ipVersion IP address version.
         * 
         * @return builder
         * 
         */
        public Builder ipVersion(IPVersion ipVersion) {
            return ipVersion(Either.ofRight(ipVersion));
        }

        /**
         * @param subnet The value of the subnet.
         * 
         * @return builder
         * 
         */
        public Builder subnet(@Nullable Output<String> subnet) {
            $.subnet = subnet;
            return this;
        }

        /**
         * @param subnet The value of the subnet.
         * 
         * @return builder
         * 
         */
        public Builder subnet(String subnet) {
            return subnet(Output.of(subnet));
        }

        public NetworkInterfaceIPConfigurationArgs build() {
            return $;
        }
    }

}
