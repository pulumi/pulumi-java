// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datamigration.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Database specific information for SQL to Azure SQL DB migration task inputs
 * 
 */
public final class MigrateSqlServerSqlDbDatabaseInputArgs extends com.pulumi.resources.ResourceArgs {

    public static final MigrateSqlServerSqlDbDatabaseInputArgs Empty = new MigrateSqlServerSqlDbDatabaseInputArgs();

    /**
     * Whether to set database read only before migration
     * 
     */
    @Import(name="makeSourceDbReadOnly")
    private @Nullable Output<Boolean> makeSourceDbReadOnly;

    /**
     * @return Whether to set database read only before migration
     * 
     */
    public Optional<Output<Boolean>> makeSourceDbReadOnly() {
        return Optional.ofNullable(this.makeSourceDbReadOnly);
    }

    /**
     * Name of the database
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the database
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Mapping of source to target tables
     * 
     */
    @Import(name="tableMap")
    private @Nullable Output<Map<String,String>> tableMap;

    /**
     * @return Mapping of source to target tables
     * 
     */
    public Optional<Output<Map<String,String>>> tableMap() {
        return Optional.ofNullable(this.tableMap);
    }

    /**
     * Name of target database. Note: Target database will be truncated before starting migration.
     * 
     */
    @Import(name="targetDatabaseName")
    private @Nullable Output<String> targetDatabaseName;

    /**
     * @return Name of target database. Note: Target database will be truncated before starting migration.
     * 
     */
    public Optional<Output<String>> targetDatabaseName() {
        return Optional.ofNullable(this.targetDatabaseName);
    }

    private MigrateSqlServerSqlDbDatabaseInputArgs() {}

    private MigrateSqlServerSqlDbDatabaseInputArgs(MigrateSqlServerSqlDbDatabaseInputArgs $) {
        this.makeSourceDbReadOnly = $.makeSourceDbReadOnly;
        this.name = $.name;
        this.tableMap = $.tableMap;
        this.targetDatabaseName = $.targetDatabaseName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MigrateSqlServerSqlDbDatabaseInputArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MigrateSqlServerSqlDbDatabaseInputArgs $;

        public Builder() {
            $ = new MigrateSqlServerSqlDbDatabaseInputArgs();
        }

        public Builder(MigrateSqlServerSqlDbDatabaseInputArgs defaults) {
            $ = new MigrateSqlServerSqlDbDatabaseInputArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param makeSourceDbReadOnly Whether to set database read only before migration
         * 
         * @return builder
         * 
         */
        public Builder makeSourceDbReadOnly(@Nullable Output<Boolean> makeSourceDbReadOnly) {
            $.makeSourceDbReadOnly = makeSourceDbReadOnly;
            return this;
        }

        /**
         * @param makeSourceDbReadOnly Whether to set database read only before migration
         * 
         * @return builder
         * 
         */
        public Builder makeSourceDbReadOnly(Boolean makeSourceDbReadOnly) {
            return makeSourceDbReadOnly(Output.of(makeSourceDbReadOnly));
        }

        /**
         * @param name Name of the database
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the database
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param tableMap Mapping of source to target tables
         * 
         * @return builder
         * 
         */
        public Builder tableMap(@Nullable Output<Map<String,String>> tableMap) {
            $.tableMap = tableMap;
            return this;
        }

        /**
         * @param tableMap Mapping of source to target tables
         * 
         * @return builder
         * 
         */
        public Builder tableMap(Map<String,String> tableMap) {
            return tableMap(Output.of(tableMap));
        }

        /**
         * @param targetDatabaseName Name of target database. Note: Target database will be truncated before starting migration.
         * 
         * @return builder
         * 
         */
        public Builder targetDatabaseName(@Nullable Output<String> targetDatabaseName) {
            $.targetDatabaseName = targetDatabaseName;
            return this;
        }

        /**
         * @param targetDatabaseName Name of target database. Note: Target database will be truncated before starting migration.
         * 
         * @return builder
         * 
         */
        public Builder targetDatabaseName(String targetDatabaseName) {
            return targetDatabaseName(Output.of(targetDatabaseName));
        }

        public MigrateSqlServerSqlDbDatabaseInputArgs build() {
            return $;
        }
    }

}
