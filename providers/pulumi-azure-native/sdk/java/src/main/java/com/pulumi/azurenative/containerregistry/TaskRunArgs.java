// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.containerregistry;

import com.pulumi.azurenative.containerregistry.inputs.DockerBuildRequestArgs;
import com.pulumi.azurenative.containerregistry.inputs.EncodedTaskRunRequestArgs;
import com.pulumi.azurenative.containerregistry.inputs.FileTaskRunRequestArgs;
import com.pulumi.azurenative.containerregistry.inputs.IdentityPropertiesArgs;
import com.pulumi.azurenative.containerregistry.inputs.TaskRunRequestArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TaskRunArgs extends com.pulumi.resources.ResourceArgs {

    public static final TaskRunArgs Empty = new TaskRunArgs();

    /**
     * How the run should be forced to rerun even if the run request configuration has not changed
     * 
     */
    @Import(name="forceUpdateTag")
    private @Nullable Output<String> forceUpdateTag;

    /**
     * @return How the run should be forced to rerun even if the run request configuration has not changed
     * 
     */
    public Optional<Output<String>> forceUpdateTag() {
        return Optional.ofNullable(this.forceUpdateTag);
    }

    /**
     * Identity for the resource.
     * 
     */
    @Import(name="identity")
    private @Nullable Output<IdentityPropertiesArgs> identity;

    /**
     * @return Identity for the resource.
     * 
     */
    public Optional<Output<IdentityPropertiesArgs>> identity() {
        return Optional.ofNullable(this.identity);
    }

    /**
     * The location of the resource
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The location of the resource
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name of the container registry.
     * 
     */
    @Import(name="registryName", required=true)
    private Output<String> registryName;

    /**
     * @return The name of the container registry.
     * 
     */
    public Output<String> registryName() {
        return this.registryName;
    }

    /**
     * The name of the resource group to which the container registry belongs.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group to which the container registry belongs.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The request (parameters) for the run
     * 
     */
    @Import(name="runRequest")
    private @Nullable Output<Object> runRequest;

    /**
     * @return The request (parameters) for the run
     * 
     */
    public Optional<Output<Object>> runRequest() {
        return Optional.ofNullable(this.runRequest);
    }

    /**
     * The name of the task run.
     * 
     */
    @Import(name="taskRunName")
    private @Nullable Output<String> taskRunName;

    /**
     * @return The name of the task run.
     * 
     */
    public Optional<Output<String>> taskRunName() {
        return Optional.ofNullable(this.taskRunName);
    }

    private TaskRunArgs() {}

    private TaskRunArgs(TaskRunArgs $) {
        this.forceUpdateTag = $.forceUpdateTag;
        this.identity = $.identity;
        this.location = $.location;
        this.registryName = $.registryName;
        this.resourceGroupName = $.resourceGroupName;
        this.runRequest = $.runRequest;
        this.taskRunName = $.taskRunName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TaskRunArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TaskRunArgs $;

        public Builder() {
            $ = new TaskRunArgs();
        }

        public Builder(TaskRunArgs defaults) {
            $ = new TaskRunArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param forceUpdateTag How the run should be forced to rerun even if the run request configuration has not changed
         * 
         * @return builder
         * 
         */
        public Builder forceUpdateTag(@Nullable Output<String> forceUpdateTag) {
            $.forceUpdateTag = forceUpdateTag;
            return this;
        }

        /**
         * @param forceUpdateTag How the run should be forced to rerun even if the run request configuration has not changed
         * 
         * @return builder
         * 
         */
        public Builder forceUpdateTag(String forceUpdateTag) {
            return forceUpdateTag(Output.of(forceUpdateTag));
        }

        /**
         * @param identity Identity for the resource.
         * 
         * @return builder
         * 
         */
        public Builder identity(@Nullable Output<IdentityPropertiesArgs> identity) {
            $.identity = identity;
            return this;
        }

        /**
         * @param identity Identity for the resource.
         * 
         * @return builder
         * 
         */
        public Builder identity(IdentityPropertiesArgs identity) {
            return identity(Output.of(identity));
        }

        /**
         * @param location The location of the resource
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location of the resource
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param registryName The name of the container registry.
         * 
         * @return builder
         * 
         */
        public Builder registryName(Output<String> registryName) {
            $.registryName = registryName;
            return this;
        }

        /**
         * @param registryName The name of the container registry.
         * 
         * @return builder
         * 
         */
        public Builder registryName(String registryName) {
            return registryName(Output.of(registryName));
        }

        /**
         * @param resourceGroupName The name of the resource group to which the container registry belongs.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group to which the container registry belongs.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param runRequest The request (parameters) for the run
         * 
         * @return builder
         * 
         */
        public Builder runRequest(@Nullable Output<Object> runRequest) {
            $.runRequest = runRequest;
            return this;
        }

        /**
         * @param runRequest The request (parameters) for the run
         * 
         * @return builder
         * 
         */
        public Builder runRequest(Object runRequest) {
            return runRequest(Output.of(runRequest));
        }

        /**
         * @param taskRunName The name of the task run.
         * 
         * @return builder
         * 
         */
        public Builder taskRunName(@Nullable Output<String> taskRunName) {
            $.taskRunName = taskRunName;
            return this;
        }

        /**
         * @param taskRunName The name of the task run.
         * 
         * @return builder
         * 
         */
        public Builder taskRunName(String taskRunName) {
            return taskRunName(Output.of(taskRunName));
        }

        public TaskRunArgs build() {
            $.registryName = Objects.requireNonNull($.registryName, "expected parameter 'registryName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
