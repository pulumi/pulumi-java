// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.signalrservice.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Upstream template item settings. It defines the Upstream URL of the incoming requests.
 * The template defines the pattern of the event, the hub or the category of the incoming request that matches current URL template.
 * 
 */
public final class UpstreamTemplateResponse extends com.pulumi.resources.InvokeArgs {

    public static final UpstreamTemplateResponse Empty = new UpstreamTemplateResponse();

    /**
     * Gets or sets the matching pattern for category names. If not set, it matches any category.
     * There are 3 kind of patterns supported:
     *     1. &#34;*&#34;, it to matches any category name
     *     2. Combine multiple categories with &#34;,&#34;, for example &#34;connections,messages&#34;, it matches category &#34;connections&#34; and &#34;messages&#34;
     *     3. The single category name, for example, &#34;connections&#34;, it matches the category &#34;connections&#34;
     * 
     */
    @Import(name="categoryPattern")
    private @Nullable String categoryPattern;

    /**
     * @return Gets or sets the matching pattern for category names. If not set, it matches any category.
     * There are 3 kind of patterns supported:
     *     1. &#34;*&#34;, it to matches any category name
     *     2. Combine multiple categories with &#34;,&#34;, for example &#34;connections,messages&#34;, it matches category &#34;connections&#34; and &#34;messages&#34;
     *     3. The single category name, for example, &#34;connections&#34;, it matches the category &#34;connections&#34;
     * 
     */
    public Optional<String> categoryPattern() {
        return Optional.ofNullable(this.categoryPattern);
    }

    /**
     * Gets or sets the matching pattern for event names. If not set, it matches any event.
     * There are 3 kind of patterns supported:
     *     1. &#34;*&#34;, it to matches any event name
     *     2. Combine multiple events with &#34;,&#34;, for example &#34;connect,disconnect&#34;, it matches event &#34;connect&#34; and &#34;disconnect&#34;
     *     3. The single event name, for example, &#34;connect&#34;, it matches &#34;connect&#34;
     * 
     */
    @Import(name="eventPattern")
    private @Nullable String eventPattern;

    /**
     * @return Gets or sets the matching pattern for event names. If not set, it matches any event.
     * There are 3 kind of patterns supported:
     *     1. &#34;*&#34;, it to matches any event name
     *     2. Combine multiple events with &#34;,&#34;, for example &#34;connect,disconnect&#34;, it matches event &#34;connect&#34; and &#34;disconnect&#34;
     *     3. The single event name, for example, &#34;connect&#34;, it matches &#34;connect&#34;
     * 
     */
    public Optional<String> eventPattern() {
        return Optional.ofNullable(this.eventPattern);
    }

    /**
     * Gets or sets the matching pattern for hub names. If not set, it matches any hub.
     * There are 3 kind of patterns supported:
     *     1. &#34;*&#34;, it to matches any hub name
     *     2. Combine multiple hubs with &#34;,&#34;, for example &#34;hub1,hub2&#34;, it matches &#34;hub1&#34; and &#34;hub2&#34;
     *     3. The single hub name, for example, &#34;hub1&#34;, it matches &#34;hub1&#34;
     * 
     */
    @Import(name="hubPattern")
    private @Nullable String hubPattern;

    /**
     * @return Gets or sets the matching pattern for hub names. If not set, it matches any hub.
     * There are 3 kind of patterns supported:
     *     1. &#34;*&#34;, it to matches any hub name
     *     2. Combine multiple hubs with &#34;,&#34;, for example &#34;hub1,hub2&#34;, it matches &#34;hub1&#34; and &#34;hub2&#34;
     *     3. The single hub name, for example, &#34;hub1&#34;, it matches &#34;hub1&#34;
     * 
     */
    public Optional<String> hubPattern() {
        return Optional.ofNullable(this.hubPattern);
    }

    /**
     * Gets or sets the Upstream URL template. You can use 3 predefined parameters {hub}, {category} {event} inside the template, the value of the Upstream URL is dynamically calculated when the client request comes in.
     * For example, if the urlTemplate is `http://example.com/{hub}/api/{event}`, with a client request from hub `chat` connects, it will first POST to this URL: `http://example.com/chat/api/connect`.
     * 
     */
    @Import(name="urlTemplate", required=true)
    private String urlTemplate;

    /**
     * @return Gets or sets the Upstream URL template. You can use 3 predefined parameters {hub}, {category} {event} inside the template, the value of the Upstream URL is dynamically calculated when the client request comes in.
     * For example, if the urlTemplate is `http://example.com/{hub}/api/{event}`, with a client request from hub `chat` connects, it will first POST to this URL: `http://example.com/chat/api/connect`.
     * 
     */
    public String urlTemplate() {
        return this.urlTemplate;
    }

    private UpstreamTemplateResponse() {}

    private UpstreamTemplateResponse(UpstreamTemplateResponse $) {
        this.categoryPattern = $.categoryPattern;
        this.eventPattern = $.eventPattern;
        this.hubPattern = $.hubPattern;
        this.urlTemplate = $.urlTemplate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UpstreamTemplateResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UpstreamTemplateResponse $;

        public Builder() {
            $ = new UpstreamTemplateResponse();
        }

        public Builder(UpstreamTemplateResponse defaults) {
            $ = new UpstreamTemplateResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param categoryPattern Gets or sets the matching pattern for category names. If not set, it matches any category.
         * There are 3 kind of patterns supported:
         *     1. &#34;*&#34;, it to matches any category name
         *     2. Combine multiple categories with &#34;,&#34;, for example &#34;connections,messages&#34;, it matches category &#34;connections&#34; and &#34;messages&#34;
         *     3. The single category name, for example, &#34;connections&#34;, it matches the category &#34;connections&#34;
         * 
         * @return builder
         * 
         */
        public Builder categoryPattern(@Nullable String categoryPattern) {
            $.categoryPattern = categoryPattern;
            return this;
        }

        /**
         * @param eventPattern Gets or sets the matching pattern for event names. If not set, it matches any event.
         * There are 3 kind of patterns supported:
         *     1. &#34;*&#34;, it to matches any event name
         *     2. Combine multiple events with &#34;,&#34;, for example &#34;connect,disconnect&#34;, it matches event &#34;connect&#34; and &#34;disconnect&#34;
         *     3. The single event name, for example, &#34;connect&#34;, it matches &#34;connect&#34;
         * 
         * @return builder
         * 
         */
        public Builder eventPattern(@Nullable String eventPattern) {
            $.eventPattern = eventPattern;
            return this;
        }

        /**
         * @param hubPattern Gets or sets the matching pattern for hub names. If not set, it matches any hub.
         * There are 3 kind of patterns supported:
         *     1. &#34;*&#34;, it to matches any hub name
         *     2. Combine multiple hubs with &#34;,&#34;, for example &#34;hub1,hub2&#34;, it matches &#34;hub1&#34; and &#34;hub2&#34;
         *     3. The single hub name, for example, &#34;hub1&#34;, it matches &#34;hub1&#34;
         * 
         * @return builder
         * 
         */
        public Builder hubPattern(@Nullable String hubPattern) {
            $.hubPattern = hubPattern;
            return this;
        }

        /**
         * @param urlTemplate Gets or sets the Upstream URL template. You can use 3 predefined parameters {hub}, {category} {event} inside the template, the value of the Upstream URL is dynamically calculated when the client request comes in.
         * For example, if the urlTemplate is `http://example.com/{hub}/api/{event}`, with a client request from hub `chat` connects, it will first POST to this URL: `http://example.com/chat/api/connect`.
         * 
         * @return builder
         * 
         */
        public Builder urlTemplate(String urlTemplate) {
            $.urlTemplate = urlTemplate;
            return this;
        }

        public UpstreamTemplateResponse build() {
            $.urlTemplate = Objects.requireNonNull($.urlTemplate, "expected parameter 'urlTemplate' to be non-null");
            return $;
        }
    }

}
