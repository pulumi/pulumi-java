// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.storagecache.inputs;

import com.pulumi.azurenative.storagecache.inputs.CacheUsernameDownloadSettingsResponseCredentials;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Settings for Extended Groups username and group download.
 * 
 */
public final class CacheUsernameDownloadSettingsResponse extends com.pulumi.resources.InvokeArgs {

    public static final CacheUsernameDownloadSettingsResponse Empty = new CacheUsernameDownloadSettingsResponse();

    /**
     * Determines if the certificate should be automatically downloaded. This applies to &#39;caCertificateURI&#39; only if &#39;requireValidCertificate&#39; is true.
     * 
     */
    @Import(name="autoDownloadCertificate")
    private @Nullable Boolean autoDownloadCertificate;

    public Optional<Boolean> autoDownloadCertificate() {
        return Optional.ofNullable(this.autoDownloadCertificate);
    }

    /**
     * The URI of the CA certificate to validate the LDAP secure connection. This field must be populated when &#39;requireValidCertificate&#39; is set to true.
     * 
     */
    @Import(name="caCertificateURI")
    private @Nullable String caCertificateURI;

    public Optional<String> caCertificateURI() {
        return Optional.ofNullable(this.caCertificateURI);
    }

    /**
     * When present, these are the credentials for the secure LDAP connection.
     * 
     */
    @Import(name="credentials")
    private @Nullable CacheUsernameDownloadSettingsResponseCredentials credentials;

    public Optional<CacheUsernameDownloadSettingsResponseCredentials> credentials() {
        return Optional.ofNullable(this.credentials);
    }

    /**
     * Whether or not the LDAP connection should be encrypted.
     * 
     */
    @Import(name="encryptLdapConnection")
    private @Nullable Boolean encryptLdapConnection;

    public Optional<Boolean> encryptLdapConnection() {
        return Optional.ofNullable(this.encryptLdapConnection);
    }

    /**
     * Whether or not Extended Groups is enabled.
     * 
     */
    @Import(name="extendedGroups")
    private @Nullable Boolean extendedGroups;

    public Optional<Boolean> extendedGroups() {
        return Optional.ofNullable(this.extendedGroups);
    }

    /**
     * The URI of the file containing group information (in /etc/group file format). This field must be populated when &#39;usernameSource&#39; is set to &#39;File&#39;.
     * 
     */
    @Import(name="groupFileURI")
    private @Nullable String groupFileURI;

    public Optional<String> groupFileURI() {
        return Optional.ofNullable(this.groupFileURI);
    }

    /**
     * The base distinguished name for the LDAP domain.
     * 
     */
    @Import(name="ldapBaseDN")
    private @Nullable String ldapBaseDN;

    public Optional<String> ldapBaseDN() {
        return Optional.ofNullable(this.ldapBaseDN);
    }

    /**
     * The fully qualified domain name or IP address of the LDAP server to use.
     * 
     */
    @Import(name="ldapServer")
    private @Nullable String ldapServer;

    public Optional<String> ldapServer() {
        return Optional.ofNullable(this.ldapServer);
    }

    /**
     * Determines if the certificates must be validated by a certificate authority. When true, caCertificateURI must be provided.
     * 
     */
    @Import(name="requireValidCertificate")
    private @Nullable Boolean requireValidCertificate;

    public Optional<Boolean> requireValidCertificate() {
        return Optional.ofNullable(this.requireValidCertificate);
    }

    /**
     * The URI of the file containing user information (in /etc/passwd file format). This field must be populated when &#39;usernameSource&#39; is set to &#39;File&#39;.
     * 
     */
    @Import(name="userFileURI")
    private @Nullable String userFileURI;

    public Optional<String> userFileURI() {
        return Optional.ofNullable(this.userFileURI);
    }

    /**
     * Indicates whether or not the HPC Cache has performed the username download successfully.
     * 
     */
    @Import(name="usernameDownloaded", required=true)
    private String usernameDownloaded;

    public String usernameDownloaded() {
        return this.usernameDownloaded;
    }

    /**
     * This setting determines how the cache gets username and group names for clients.
     * 
     */
    @Import(name="usernameSource")
    private @Nullable String usernameSource;

    public Optional<String> usernameSource() {
        return Optional.ofNullable(this.usernameSource);
    }

    private CacheUsernameDownloadSettingsResponse() {}

    private CacheUsernameDownloadSettingsResponse(CacheUsernameDownloadSettingsResponse $) {
        this.autoDownloadCertificate = $.autoDownloadCertificate;
        this.caCertificateURI = $.caCertificateURI;
        this.credentials = $.credentials;
        this.encryptLdapConnection = $.encryptLdapConnection;
        this.extendedGroups = $.extendedGroups;
        this.groupFileURI = $.groupFileURI;
        this.ldapBaseDN = $.ldapBaseDN;
        this.ldapServer = $.ldapServer;
        this.requireValidCertificate = $.requireValidCertificate;
        this.userFileURI = $.userFileURI;
        this.usernameDownloaded = $.usernameDownloaded;
        this.usernameSource = $.usernameSource;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CacheUsernameDownloadSettingsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CacheUsernameDownloadSettingsResponse $;

        public Builder() {
            $ = new CacheUsernameDownloadSettingsResponse();
        }

        public Builder(CacheUsernameDownloadSettingsResponse defaults) {
            $ = new CacheUsernameDownloadSettingsResponse(Objects.requireNonNull(defaults));
        }

        public Builder autoDownloadCertificate(@Nullable Boolean autoDownloadCertificate) {
            $.autoDownloadCertificate = autoDownloadCertificate;
            return this;
        }

        public Builder caCertificateURI(@Nullable String caCertificateURI) {
            $.caCertificateURI = caCertificateURI;
            return this;
        }

        public Builder credentials(@Nullable CacheUsernameDownloadSettingsResponseCredentials credentials) {
            $.credentials = credentials;
            return this;
        }

        public Builder encryptLdapConnection(@Nullable Boolean encryptLdapConnection) {
            $.encryptLdapConnection = encryptLdapConnection;
            return this;
        }

        public Builder extendedGroups(@Nullable Boolean extendedGroups) {
            $.extendedGroups = extendedGroups;
            return this;
        }

        public Builder groupFileURI(@Nullable String groupFileURI) {
            $.groupFileURI = groupFileURI;
            return this;
        }

        public Builder ldapBaseDN(@Nullable String ldapBaseDN) {
            $.ldapBaseDN = ldapBaseDN;
            return this;
        }

        public Builder ldapServer(@Nullable String ldapServer) {
            $.ldapServer = ldapServer;
            return this;
        }

        public Builder requireValidCertificate(@Nullable Boolean requireValidCertificate) {
            $.requireValidCertificate = requireValidCertificate;
            return this;
        }

        public Builder userFileURI(@Nullable String userFileURI) {
            $.userFileURI = userFileURI;
            return this;
        }

        public Builder usernameDownloaded(String usernameDownloaded) {
            $.usernameDownloaded = usernameDownloaded;
            return this;
        }

        public Builder usernameSource(@Nullable String usernameSource) {
            $.usernameSource = usernameSource;
            return this;
        }

        public CacheUsernameDownloadSettingsResponse build() {
            $.usernameDownloaded = Objects.requireNonNull($.usernameDownloaded, "expected parameter 'usernameDownloaded' to be non-null");
            $.usernameSource = Codegen.stringProp("usernameSource").arg($.usernameSource).def("None").getNullable();
            return $;
        }
    }

}
