// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.security.inputs;

import com.pulumi.azurenative.security.inputs.PublisherInfoResponse;
import com.pulumi.azurenative.security.inputs.UserRecommendationResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Represents a path that is recommended to be allowed and its properties
 * 
 */
public final class PathRecommendationResponse extends com.pulumi.resources.InvokeArgs {

    public static final PathRecommendationResponse Empty = new PathRecommendationResponse();

    /**
     * The recommendation action of the machine or rule
     * 
     */
    @Import(name="action")
    private @Nullable String action;

    /**
     * @return The recommendation action of the machine or rule
     * 
     */
    public Optional<String> action() {
        return Optional.ofNullable(this.action);
    }

    /**
     * Whether the application is commonly run on the machine
     * 
     */
    @Import(name="common")
    private @Nullable Boolean common;

    /**
     * @return Whether the application is commonly run on the machine
     * 
     */
    public Optional<Boolean> common() {
        return Optional.ofNullable(this.common);
    }

    /**
     * The configuration status of the machines group or machine or rule
     * 
     */
    @Import(name="configurationStatus")
    private @Nullable String configurationStatus;

    /**
     * @return The configuration status of the machines group or machine or rule
     * 
     */
    public Optional<String> configurationStatus() {
        return Optional.ofNullable(this.configurationStatus);
    }

    /**
     * The type of the file (for Linux files - Executable is used)
     * 
     */
    @Import(name="fileType")
    private @Nullable String fileType;

    /**
     * @return The type of the file (for Linux files - Executable is used)
     * 
     */
    public Optional<String> fileType() {
        return Optional.ofNullable(this.fileType);
    }

    /**
     * The full path of the file, or an identifier of the application
     * 
     */
    @Import(name="path")
    private @Nullable String path;

    /**
     * @return The full path of the file, or an identifier of the application
     * 
     */
    public Optional<String> path() {
        return Optional.ofNullable(this.path);
    }

    /**
     * Represents the publisher information of a process/rule
     * 
     */
    @Import(name="publisherInfo")
    private @Nullable PublisherInfoResponse publisherInfo;

    /**
     * @return Represents the publisher information of a process/rule
     * 
     */
    public Optional<PublisherInfoResponse> publisherInfo() {
        return Optional.ofNullable(this.publisherInfo);
    }

    /**
     * The type of the rule to be allowed
     * 
     */
    @Import(name="type")
    private @Nullable String type;

    /**
     * @return The type of the rule to be allowed
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    @Import(name="userSids")
    private @Nullable List<String> userSids;

    public Optional<List<String>> userSids() {
        return Optional.ofNullable(this.userSids);
    }

    @Import(name="usernames")
    private @Nullable List<UserRecommendationResponse> usernames;

    public Optional<List<UserRecommendationResponse>> usernames() {
        return Optional.ofNullable(this.usernames);
    }

    private PathRecommendationResponse() {}

    private PathRecommendationResponse(PathRecommendationResponse $) {
        this.action = $.action;
        this.common = $.common;
        this.configurationStatus = $.configurationStatus;
        this.fileType = $.fileType;
        this.path = $.path;
        this.publisherInfo = $.publisherInfo;
        this.type = $.type;
        this.userSids = $.userSids;
        this.usernames = $.usernames;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PathRecommendationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PathRecommendationResponse $;

        public Builder() {
            $ = new PathRecommendationResponse();
        }

        public Builder(PathRecommendationResponse defaults) {
            $ = new PathRecommendationResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param action The recommendation action of the machine or rule
         * 
         * @return builder
         * 
         */
        public Builder action(@Nullable String action) {
            $.action = action;
            return this;
        }

        /**
         * @param common Whether the application is commonly run on the machine
         * 
         * @return builder
         * 
         */
        public Builder common(@Nullable Boolean common) {
            $.common = common;
            return this;
        }

        /**
         * @param configurationStatus The configuration status of the machines group or machine or rule
         * 
         * @return builder
         * 
         */
        public Builder configurationStatus(@Nullable String configurationStatus) {
            $.configurationStatus = configurationStatus;
            return this;
        }

        /**
         * @param fileType The type of the file (for Linux files - Executable is used)
         * 
         * @return builder
         * 
         */
        public Builder fileType(@Nullable String fileType) {
            $.fileType = fileType;
            return this;
        }

        /**
         * @param path The full path of the file, or an identifier of the application
         * 
         * @return builder
         * 
         */
        public Builder path(@Nullable String path) {
            $.path = path;
            return this;
        }

        /**
         * @param publisherInfo Represents the publisher information of a process/rule
         * 
         * @return builder
         * 
         */
        public Builder publisherInfo(@Nullable PublisherInfoResponse publisherInfo) {
            $.publisherInfo = publisherInfo;
            return this;
        }

        /**
         * @param type The type of the rule to be allowed
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable String type) {
            $.type = type;
            return this;
        }

        public Builder userSids(@Nullable List<String> userSids) {
            $.userSids = userSids;
            return this;
        }

        public Builder userSids(String... userSids) {
            return userSids(List.of(userSids));
        }

        public Builder usernames(@Nullable List<UserRecommendationResponse> usernames) {
            $.usernames = usernames;
            return this;
        }

        public Builder usernames(UserRecommendationResponse... usernames) {
            return usernames(List.of(usernames));
        }

        public PathRecommendationResponse build() {
            return $;
        }
    }

}
