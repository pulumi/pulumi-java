// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.elasticsan.inputs;

import com.pulumi.azurenative.elasticsan.enums.VolumeCreateOption;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Data used when creating a disk.
 * 
 */
public final class SourceCreationDataArgs extends com.pulumi.resources.ResourceArgs {

    public static final SourceCreationDataArgs Empty = new SourceCreationDataArgs();

    /**
     * This enumerates the possible sources of a volume creation.
     * 
     */
    @Import(name="createSource", required=true)
    private Output<VolumeCreateOption> createSource;

    /**
     * @return This enumerates the possible sources of a volume creation.
     * 
     */
    public Output<VolumeCreateOption> createSource() {
        return this.createSource;
    }

    /**
     * If createOption is Copy, this is the ARM id of the source snapshot or disk. If createOption is Restore, this is the ARM-like id of the source disk restore point.
     * 
     */
    @Import(name="sourceUri")
    private @Nullable Output<String> sourceUri;

    /**
     * @return If createOption is Copy, this is the ARM id of the source snapshot or disk. If createOption is Restore, this is the ARM-like id of the source disk restore point.
     * 
     */
    public Optional<Output<String>> sourceUri() {
        return Optional.ofNullable(this.sourceUri);
    }

    private SourceCreationDataArgs() {}

    private SourceCreationDataArgs(SourceCreationDataArgs $) {
        this.createSource = $.createSource;
        this.sourceUri = $.sourceUri;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SourceCreationDataArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SourceCreationDataArgs $;

        public Builder() {
            $ = new SourceCreationDataArgs();
        }

        public Builder(SourceCreationDataArgs defaults) {
            $ = new SourceCreationDataArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param createSource This enumerates the possible sources of a volume creation.
         * 
         * @return builder
         * 
         */
        public Builder createSource(Output<VolumeCreateOption> createSource) {
            $.createSource = createSource;
            return this;
        }

        /**
         * @param createSource This enumerates the possible sources of a volume creation.
         * 
         * @return builder
         * 
         */
        public Builder createSource(VolumeCreateOption createSource) {
            return createSource(Output.of(createSource));
        }

        /**
         * @param sourceUri If createOption is Copy, this is the ARM id of the source snapshot or disk. If createOption is Restore, this is the ARM-like id of the source disk restore point.
         * 
         * @return builder
         * 
         */
        public Builder sourceUri(@Nullable Output<String> sourceUri) {
            $.sourceUri = sourceUri;
            return this;
        }

        /**
         * @param sourceUri If createOption is Copy, this is the ARM id of the source snapshot or disk. If createOption is Restore, this is the ARM-like id of the source disk restore point.
         * 
         * @return builder
         * 
         */
        public Builder sourceUri(String sourceUri) {
            return sourceUri(Output.of(sourceUri));
        }

        public SourceCreationDataArgs build() {
            $.createSource = Objects.requireNonNull($.createSource, "expected parameter 'createSource' to be non-null");
            return $;
        }
    }

}
