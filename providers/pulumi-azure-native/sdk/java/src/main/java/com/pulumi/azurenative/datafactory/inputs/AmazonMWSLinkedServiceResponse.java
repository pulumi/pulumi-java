// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.azurenative.datafactory.inputs.AzureKeyVaultSecretReferenceResponse;
import com.pulumi.azurenative.datafactory.inputs.IntegrationRuntimeReferenceResponse;
import com.pulumi.azurenative.datafactory.inputs.ParameterSpecificationResponse;
import com.pulumi.azurenative.datafactory.inputs.SecureStringResponse;
import com.pulumi.core.Either;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Amazon Marketplace Web Service linked service.
 * 
 */
public final class AmazonMWSLinkedServiceResponse extends com.pulumi.resources.InvokeArgs {

    public static final AmazonMWSLinkedServiceResponse Empty = new AmazonMWSLinkedServiceResponse();

    /**
     * The access key id used to access data.
     * 
     */
    @Import(name="accessKeyId", required=true)
    private Object accessKeyId;

    /**
     * @return The access key id used to access data.
     * 
     */
    public Object accessKeyId() {
        return this.accessKeyId;
    }

    /**
     * List of tags that can be used for describing the linked service.
     * 
     */
    @Import(name="annotations")
    private @Nullable List<Object> annotations;

    /**
     * @return List of tags that can be used for describing the linked service.
     * 
     */
    public Optional<List<Object>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    /**
     * The integration runtime reference.
     * 
     */
    @Import(name="connectVia")
    private @Nullable IntegrationRuntimeReferenceResponse connectVia;

    /**
     * @return The integration runtime reference.
     * 
     */
    public Optional<IntegrationRuntimeReferenceResponse> connectVia() {
        return Optional.ofNullable(this.connectVia);
    }

    /**
     * Linked service description.
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    /**
     * @return Linked service description.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="encryptedCredential")
    private @Nullable Object encryptedCredential;

    /**
     * @return The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Object> encryptedCredential() {
        return Optional.ofNullable(this.encryptedCredential);
    }

    /**
     * The endpoint of the Amazon MWS server, (i.e. mws.amazonservices.com)
     * 
     */
    @Import(name="endpoint", required=true)
    private Object endpoint;

    /**
     * @return The endpoint of the Amazon MWS server, (i.e. mws.amazonservices.com)
     * 
     */
    public Object endpoint() {
        return this.endpoint;
    }

    /**
     * The Amazon Marketplace ID you want to retrieve data from. To retrieve data from multiple Marketplace IDs, separate them with a comma (,). (i.e. A2EUQ1WTGCTBG2)
     * 
     */
    @Import(name="marketplaceID", required=true)
    private Object marketplaceID;

    /**
     * @return The Amazon Marketplace ID you want to retrieve data from. To retrieve data from multiple Marketplace IDs, separate them with a comma (,). (i.e. A2EUQ1WTGCTBG2)
     * 
     */
    public Object marketplaceID() {
        return this.marketplaceID;
    }

    /**
     * The Amazon MWS authentication token.
     * 
     */
    @Import(name="mwsAuthToken")
    private @Nullable Either<AzureKeyVaultSecretReferenceResponse,SecureStringResponse> mwsAuthToken;

    /**
     * @return The Amazon MWS authentication token.
     * 
     */
    public Optional<Either<AzureKeyVaultSecretReferenceResponse,SecureStringResponse>> mwsAuthToken() {
        return Optional.ofNullable(this.mwsAuthToken);
    }

    /**
     * Parameters for linked service.
     * 
     */
    @Import(name="parameters")
    private @Nullable Map<String,ParameterSpecificationResponse> parameters;

    /**
     * @return Parameters for linked service.
     * 
     */
    public Optional<Map<String,ParameterSpecificationResponse>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    /**
     * The secret key used to access data.
     * 
     */
    @Import(name="secretKey")
    private @Nullable Either<AzureKeyVaultSecretReferenceResponse,SecureStringResponse> secretKey;

    /**
     * @return The secret key used to access data.
     * 
     */
    public Optional<Either<AzureKeyVaultSecretReferenceResponse,SecureStringResponse>> secretKey() {
        return Optional.ofNullable(this.secretKey);
    }

    /**
     * The Amazon seller ID.
     * 
     */
    @Import(name="sellerID", required=true)
    private Object sellerID;

    /**
     * @return The Amazon seller ID.
     * 
     */
    public Object sellerID() {
        return this.sellerID;
    }

    /**
     * Type of linked service.
     * Expected value is &#39;AmazonMWS&#39;.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    /**
     * @return Type of linked service.
     * Expected value is &#39;AmazonMWS&#39;.
     * 
     */
    public String type() {
        return this.type;
    }

    /**
     * Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
     * 
     */
    @Import(name="useEncryptedEndpoints")
    private @Nullable Object useEncryptedEndpoints;

    /**
     * @return Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
     * 
     */
    public Optional<Object> useEncryptedEndpoints() {
        return Optional.ofNullable(this.useEncryptedEndpoints);
    }

    /**
     * Specifies whether to require the host name in the server&#39;s certificate to match the host name of the server when connecting over SSL. The default value is true.
     * 
     */
    @Import(name="useHostVerification")
    private @Nullable Object useHostVerification;

    /**
     * @return Specifies whether to require the host name in the server&#39;s certificate to match the host name of the server when connecting over SSL. The default value is true.
     * 
     */
    public Optional<Object> useHostVerification() {
        return Optional.ofNullable(this.useHostVerification);
    }

    /**
     * Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
     * 
     */
    @Import(name="usePeerVerification")
    private @Nullable Object usePeerVerification;

    /**
     * @return Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
     * 
     */
    public Optional<Object> usePeerVerification() {
        return Optional.ofNullable(this.usePeerVerification);
    }

    private AmazonMWSLinkedServiceResponse() {}

    private AmazonMWSLinkedServiceResponse(AmazonMWSLinkedServiceResponse $) {
        this.accessKeyId = $.accessKeyId;
        this.annotations = $.annotations;
        this.connectVia = $.connectVia;
        this.description = $.description;
        this.encryptedCredential = $.encryptedCredential;
        this.endpoint = $.endpoint;
        this.marketplaceID = $.marketplaceID;
        this.mwsAuthToken = $.mwsAuthToken;
        this.parameters = $.parameters;
        this.secretKey = $.secretKey;
        this.sellerID = $.sellerID;
        this.type = $.type;
        this.useEncryptedEndpoints = $.useEncryptedEndpoints;
        this.useHostVerification = $.useHostVerification;
        this.usePeerVerification = $.usePeerVerification;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AmazonMWSLinkedServiceResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AmazonMWSLinkedServiceResponse $;

        public Builder() {
            $ = new AmazonMWSLinkedServiceResponse();
        }

        public Builder(AmazonMWSLinkedServiceResponse defaults) {
            $ = new AmazonMWSLinkedServiceResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessKeyId The access key id used to access data.
         * 
         * @return builder
         * 
         */
        public Builder accessKeyId(Object accessKeyId) {
            $.accessKeyId = accessKeyId;
            return this;
        }

        /**
         * @param annotations List of tags that can be used for describing the linked service.
         * 
         * @return builder
         * 
         */
        public Builder annotations(@Nullable List<Object> annotations) {
            $.annotations = annotations;
            return this;
        }

        /**
         * @param annotations List of tags that can be used for describing the linked service.
         * 
         * @return builder
         * 
         */
        public Builder annotations(Object... annotations) {
            return annotations(List.of(annotations));
        }

        /**
         * @param connectVia The integration runtime reference.
         * 
         * @return builder
         * 
         */
        public Builder connectVia(@Nullable IntegrationRuntimeReferenceResponse connectVia) {
            $.connectVia = connectVia;
            return this;
        }

        /**
         * @param description Linked service description.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        /**
         * @param encryptedCredential The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
         * 
         * @return builder
         * 
         */
        public Builder encryptedCredential(@Nullable Object encryptedCredential) {
            $.encryptedCredential = encryptedCredential;
            return this;
        }

        /**
         * @param endpoint The endpoint of the Amazon MWS server, (i.e. mws.amazonservices.com)
         * 
         * @return builder
         * 
         */
        public Builder endpoint(Object endpoint) {
            $.endpoint = endpoint;
            return this;
        }

        /**
         * @param marketplaceID The Amazon Marketplace ID you want to retrieve data from. To retrieve data from multiple Marketplace IDs, separate them with a comma (,). (i.e. A2EUQ1WTGCTBG2)
         * 
         * @return builder
         * 
         */
        public Builder marketplaceID(Object marketplaceID) {
            $.marketplaceID = marketplaceID;
            return this;
        }

        /**
         * @param mwsAuthToken The Amazon MWS authentication token.
         * 
         * @return builder
         * 
         */
        public Builder mwsAuthToken(@Nullable Either<AzureKeyVaultSecretReferenceResponse,SecureStringResponse> mwsAuthToken) {
            $.mwsAuthToken = mwsAuthToken;
            return this;
        }

        /**
         * @param mwsAuthToken The Amazon MWS authentication token.
         * 
         * @return builder
         * 
         */
        public Builder mwsAuthToken(AzureKeyVaultSecretReferenceResponse mwsAuthToken) {
            return mwsAuthToken(Either.ofLeft(mwsAuthToken));
        }

        /**
         * @param mwsAuthToken The Amazon MWS authentication token.
         * 
         * @return builder
         * 
         */
        public Builder mwsAuthToken(SecureStringResponse mwsAuthToken) {
            return mwsAuthToken(Either.ofRight(mwsAuthToken));
        }

        /**
         * @param parameters Parameters for linked service.
         * 
         * @return builder
         * 
         */
        public Builder parameters(@Nullable Map<String,ParameterSpecificationResponse> parameters) {
            $.parameters = parameters;
            return this;
        }

        /**
         * @param secretKey The secret key used to access data.
         * 
         * @return builder
         * 
         */
        public Builder secretKey(@Nullable Either<AzureKeyVaultSecretReferenceResponse,SecureStringResponse> secretKey) {
            $.secretKey = secretKey;
            return this;
        }

        /**
         * @param secretKey The secret key used to access data.
         * 
         * @return builder
         * 
         */
        public Builder secretKey(AzureKeyVaultSecretReferenceResponse secretKey) {
            return secretKey(Either.ofLeft(secretKey));
        }

        /**
         * @param secretKey The secret key used to access data.
         * 
         * @return builder
         * 
         */
        public Builder secretKey(SecureStringResponse secretKey) {
            return secretKey(Either.ofRight(secretKey));
        }

        /**
         * @param sellerID The Amazon seller ID.
         * 
         * @return builder
         * 
         */
        public Builder sellerID(Object sellerID) {
            $.sellerID = sellerID;
            return this;
        }

        /**
         * @param type Type of linked service.
         * Expected value is &#39;AmazonMWS&#39;.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            $.type = type;
            return this;
        }

        /**
         * @param useEncryptedEndpoints Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
         * 
         * @return builder
         * 
         */
        public Builder useEncryptedEndpoints(@Nullable Object useEncryptedEndpoints) {
            $.useEncryptedEndpoints = useEncryptedEndpoints;
            return this;
        }

        /**
         * @param useHostVerification Specifies whether to require the host name in the server&#39;s certificate to match the host name of the server when connecting over SSL. The default value is true.
         * 
         * @return builder
         * 
         */
        public Builder useHostVerification(@Nullable Object useHostVerification) {
            $.useHostVerification = useHostVerification;
            return this;
        }

        /**
         * @param usePeerVerification Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
         * 
         * @return builder
         * 
         */
        public Builder usePeerVerification(@Nullable Object usePeerVerification) {
            $.usePeerVerification = usePeerVerification;
            return this;
        }

        public AmazonMWSLinkedServiceResponse build() {
            $.accessKeyId = Objects.requireNonNull($.accessKeyId, "expected parameter 'accessKeyId' to be non-null");
            $.endpoint = Objects.requireNonNull($.endpoint, "expected parameter 'endpoint' to be non-null");
            $.marketplaceID = Objects.requireNonNull($.marketplaceID, "expected parameter 'marketplaceID' to be non-null");
            $.sellerID = Objects.requireNonNull($.sellerID, "expected parameter 'sellerID' to be non-null");
            $.type = Codegen.stringProp("type").arg($.type).require();
            return $;
        }
    }

}
