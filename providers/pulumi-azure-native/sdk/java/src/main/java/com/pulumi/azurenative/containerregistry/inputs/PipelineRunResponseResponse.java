// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.containerregistry.inputs;

import com.pulumi.azurenative.containerregistry.inputs.ExportPipelineTargetPropertiesResponse;
import com.pulumi.azurenative.containerregistry.inputs.ImportPipelineSourcePropertiesResponse;
import com.pulumi.azurenative.containerregistry.inputs.PipelineTriggerDescriptorResponse;
import com.pulumi.azurenative.containerregistry.inputs.ProgressPropertiesResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The response properties returned for a pipeline run.
 * 
 */
public final class PipelineRunResponseResponse extends com.pulumi.resources.InvokeArgs {

    public static final PipelineRunResponseResponse Empty = new PipelineRunResponseResponse();

    /**
     * The digest of the tar used to transfer the artifacts.
     * 
     */
    @Import(name="catalogDigest")
    private @Nullable String catalogDigest;

    public Optional<String> catalogDigest() {
        return Optional.ofNullable(this.catalogDigest);
    }

    /**
     * The time the pipeline run finished.
     * 
     */
    @Import(name="finishTime")
    private @Nullable String finishTime;

    public Optional<String> finishTime() {
        return Optional.ofNullable(this.finishTime);
    }

    /**
     * The artifacts imported in the pipeline run.
     * 
     */
    @Import(name="importedArtifacts")
    private @Nullable List<String> importedArtifacts;

    public Optional<List<String>> importedArtifacts() {
        return Optional.ofNullable(this.importedArtifacts);
    }

    /**
     * The detailed error message for the pipeline run in the case of failure.
     * 
     */
    @Import(name="pipelineRunErrorMessage")
    private @Nullable String pipelineRunErrorMessage;

    public Optional<String> pipelineRunErrorMessage() {
        return Optional.ofNullable(this.pipelineRunErrorMessage);
    }

    /**
     * The current progress of the copy operation.
     * 
     */
    @Import(name="progress")
    private @Nullable ProgressPropertiesResponse progress;

    public Optional<ProgressPropertiesResponse> progress() {
        return Optional.ofNullable(this.progress);
    }

    /**
     * The source of the pipeline run.
     * 
     */
    @Import(name="source")
    private @Nullable ImportPipelineSourcePropertiesResponse source;

    public Optional<ImportPipelineSourcePropertiesResponse> source() {
        return Optional.ofNullable(this.source);
    }

    /**
     * The time the pipeline run started.
     * 
     */
    @Import(name="startTime")
    private @Nullable String startTime;

    public Optional<String> startTime() {
        return Optional.ofNullable(this.startTime);
    }

    /**
     * The current status of the pipeline run.
     * 
     */
    @Import(name="status")
    private @Nullable String status;

    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The target of the pipeline run.
     * 
     */
    @Import(name="target")
    private @Nullable ExportPipelineTargetPropertiesResponse target;

    public Optional<ExportPipelineTargetPropertiesResponse> target() {
        return Optional.ofNullable(this.target);
    }

    /**
     * The trigger that caused the pipeline run.
     * 
     */
    @Import(name="trigger")
    private @Nullable PipelineTriggerDescriptorResponse trigger;

    public Optional<PipelineTriggerDescriptorResponse> trigger() {
        return Optional.ofNullable(this.trigger);
    }

    private PipelineRunResponseResponse() {}

    private PipelineRunResponseResponse(PipelineRunResponseResponse $) {
        this.catalogDigest = $.catalogDigest;
        this.finishTime = $.finishTime;
        this.importedArtifacts = $.importedArtifacts;
        this.pipelineRunErrorMessage = $.pipelineRunErrorMessage;
        this.progress = $.progress;
        this.source = $.source;
        this.startTime = $.startTime;
        this.status = $.status;
        this.target = $.target;
        this.trigger = $.trigger;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PipelineRunResponseResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PipelineRunResponseResponse $;

        public Builder() {
            $ = new PipelineRunResponseResponse();
        }

        public Builder(PipelineRunResponseResponse defaults) {
            $ = new PipelineRunResponseResponse(Objects.requireNonNull(defaults));
        }

        public Builder catalogDigest(@Nullable String catalogDigest) {
            $.catalogDigest = catalogDigest;
            return this;
        }

        public Builder finishTime(@Nullable String finishTime) {
            $.finishTime = finishTime;
            return this;
        }

        public Builder importedArtifacts(@Nullable List<String> importedArtifacts) {
            $.importedArtifacts = importedArtifacts;
            return this;
        }

        public Builder importedArtifacts(String... importedArtifacts) {
            return importedArtifacts(List.of(importedArtifacts));
        }

        public Builder pipelineRunErrorMessage(@Nullable String pipelineRunErrorMessage) {
            $.pipelineRunErrorMessage = pipelineRunErrorMessage;
            return this;
        }

        public Builder progress(@Nullable ProgressPropertiesResponse progress) {
            $.progress = progress;
            return this;
        }

        public Builder source(@Nullable ImportPipelineSourcePropertiesResponse source) {
            $.source = source;
            return this;
        }

        public Builder startTime(@Nullable String startTime) {
            $.startTime = startTime;
            return this;
        }

        public Builder status(@Nullable String status) {
            $.status = status;
            return this;
        }

        public Builder target(@Nullable ExportPipelineTargetPropertiesResponse target) {
            $.target = target;
            return this;
        }

        public Builder trigger(@Nullable PipelineTriggerDescriptorResponse trigger) {
            $.trigger = trigger;
            return this;
        }

        public PipelineRunResponseResponse build() {
            return $;
        }
    }

}
