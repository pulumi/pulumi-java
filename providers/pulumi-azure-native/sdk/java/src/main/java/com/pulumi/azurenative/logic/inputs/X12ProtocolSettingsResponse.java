// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.logic.inputs;

import com.pulumi.azurenative.logic.inputs.X12AcknowledgementSettingsResponse;
import com.pulumi.azurenative.logic.inputs.X12DelimiterOverridesResponse;
import com.pulumi.azurenative.logic.inputs.X12EnvelopeOverrideResponse;
import com.pulumi.azurenative.logic.inputs.X12EnvelopeSettingsResponse;
import com.pulumi.azurenative.logic.inputs.X12FramingSettingsResponse;
import com.pulumi.azurenative.logic.inputs.X12MessageFilterResponse;
import com.pulumi.azurenative.logic.inputs.X12MessageIdentifierResponse;
import com.pulumi.azurenative.logic.inputs.X12ProcessingSettingsResponse;
import com.pulumi.azurenative.logic.inputs.X12SchemaReferenceResponse;
import com.pulumi.azurenative.logic.inputs.X12SecuritySettingsResponse;
import com.pulumi.azurenative.logic.inputs.X12ValidationOverrideResponse;
import com.pulumi.azurenative.logic.inputs.X12ValidationSettingsResponse;
import com.pulumi.core.annotations.Import;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The X12 agreement protocol settings.
 * 
 */
public final class X12ProtocolSettingsResponse extends com.pulumi.resources.InvokeArgs {

    public static final X12ProtocolSettingsResponse Empty = new X12ProtocolSettingsResponse();

    /**
     * The X12 acknowledgment settings.
     * 
     */
    @Import(name="acknowledgementSettings", required=true)
    private X12AcknowledgementSettingsResponse acknowledgementSettings;

    public X12AcknowledgementSettingsResponse acknowledgementSettings() {
        return this.acknowledgementSettings;
    }

    /**
     * The X12 envelope override settings.
     * 
     */
    @Import(name="envelopeOverrides")
    private @Nullable List<X12EnvelopeOverrideResponse> envelopeOverrides;

    public Optional<List<X12EnvelopeOverrideResponse>> envelopeOverrides() {
        return Optional.ofNullable(this.envelopeOverrides);
    }

    /**
     * The X12 envelope settings.
     * 
     */
    @Import(name="envelopeSettings", required=true)
    private X12EnvelopeSettingsResponse envelopeSettings;

    public X12EnvelopeSettingsResponse envelopeSettings() {
        return this.envelopeSettings;
    }

    /**
     * The X12 framing settings.
     * 
     */
    @Import(name="framingSettings", required=true)
    private X12FramingSettingsResponse framingSettings;

    public X12FramingSettingsResponse framingSettings() {
        return this.framingSettings;
    }

    /**
     * The X12 message filter.
     * 
     */
    @Import(name="messageFilter", required=true)
    private X12MessageFilterResponse messageFilter;

    public X12MessageFilterResponse messageFilter() {
        return this.messageFilter;
    }

    /**
     * The X12 message filter list.
     * 
     */
    @Import(name="messageFilterList")
    private @Nullable List<X12MessageIdentifierResponse> messageFilterList;

    public Optional<List<X12MessageIdentifierResponse>> messageFilterList() {
        return Optional.ofNullable(this.messageFilterList);
    }

    /**
     * The X12 processing settings.
     * 
     */
    @Import(name="processingSettings", required=true)
    private X12ProcessingSettingsResponse processingSettings;

    public X12ProcessingSettingsResponse processingSettings() {
        return this.processingSettings;
    }

    /**
     * The X12 schema references.
     * 
     */
    @Import(name="schemaReferences", required=true)
    private List<X12SchemaReferenceResponse> schemaReferences;

    public List<X12SchemaReferenceResponse> schemaReferences() {
        return this.schemaReferences;
    }

    /**
     * The X12 security settings.
     * 
     */
    @Import(name="securitySettings", required=true)
    private X12SecuritySettingsResponse securitySettings;

    public X12SecuritySettingsResponse securitySettings() {
        return this.securitySettings;
    }

    /**
     * The X12 validation override settings.
     * 
     */
    @Import(name="validationOverrides")
    private @Nullable List<X12ValidationOverrideResponse> validationOverrides;

    public Optional<List<X12ValidationOverrideResponse>> validationOverrides() {
        return Optional.ofNullable(this.validationOverrides);
    }

    /**
     * The X12 validation settings.
     * 
     */
    @Import(name="validationSettings", required=true)
    private X12ValidationSettingsResponse validationSettings;

    public X12ValidationSettingsResponse validationSettings() {
        return this.validationSettings;
    }

    /**
     * The X12 delimiter override settings.
     * 
     */
    @Import(name="x12DelimiterOverrides")
    private @Nullable List<X12DelimiterOverridesResponse> x12DelimiterOverrides;

    public Optional<List<X12DelimiterOverridesResponse>> x12DelimiterOverrides() {
        return Optional.ofNullable(this.x12DelimiterOverrides);
    }

    private X12ProtocolSettingsResponse() {}

    private X12ProtocolSettingsResponse(X12ProtocolSettingsResponse $) {
        this.acknowledgementSettings = $.acknowledgementSettings;
        this.envelopeOverrides = $.envelopeOverrides;
        this.envelopeSettings = $.envelopeSettings;
        this.framingSettings = $.framingSettings;
        this.messageFilter = $.messageFilter;
        this.messageFilterList = $.messageFilterList;
        this.processingSettings = $.processingSettings;
        this.schemaReferences = $.schemaReferences;
        this.securitySettings = $.securitySettings;
        this.validationOverrides = $.validationOverrides;
        this.validationSettings = $.validationSettings;
        this.x12DelimiterOverrides = $.x12DelimiterOverrides;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(X12ProtocolSettingsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private X12ProtocolSettingsResponse $;

        public Builder() {
            $ = new X12ProtocolSettingsResponse();
        }

        public Builder(X12ProtocolSettingsResponse defaults) {
            $ = new X12ProtocolSettingsResponse(Objects.requireNonNull(defaults));
        }

        public Builder acknowledgementSettings(X12AcknowledgementSettingsResponse acknowledgementSettings) {
            $.acknowledgementSettings = acknowledgementSettings;
            return this;
        }

        public Builder envelopeOverrides(@Nullable List<X12EnvelopeOverrideResponse> envelopeOverrides) {
            $.envelopeOverrides = envelopeOverrides;
            return this;
        }

        public Builder envelopeOverrides(X12EnvelopeOverrideResponse... envelopeOverrides) {
            return envelopeOverrides(List.of(envelopeOverrides));
        }

        public Builder envelopeSettings(X12EnvelopeSettingsResponse envelopeSettings) {
            $.envelopeSettings = envelopeSettings;
            return this;
        }

        public Builder framingSettings(X12FramingSettingsResponse framingSettings) {
            $.framingSettings = framingSettings;
            return this;
        }

        public Builder messageFilter(X12MessageFilterResponse messageFilter) {
            $.messageFilter = messageFilter;
            return this;
        }

        public Builder messageFilterList(@Nullable List<X12MessageIdentifierResponse> messageFilterList) {
            $.messageFilterList = messageFilterList;
            return this;
        }

        public Builder messageFilterList(X12MessageIdentifierResponse... messageFilterList) {
            return messageFilterList(List.of(messageFilterList));
        }

        public Builder processingSettings(X12ProcessingSettingsResponse processingSettings) {
            $.processingSettings = processingSettings;
            return this;
        }

        public Builder schemaReferences(List<X12SchemaReferenceResponse> schemaReferences) {
            $.schemaReferences = schemaReferences;
            return this;
        }

        public Builder schemaReferences(X12SchemaReferenceResponse... schemaReferences) {
            return schemaReferences(List.of(schemaReferences));
        }

        public Builder securitySettings(X12SecuritySettingsResponse securitySettings) {
            $.securitySettings = securitySettings;
            return this;
        }

        public Builder validationOverrides(@Nullable List<X12ValidationOverrideResponse> validationOverrides) {
            $.validationOverrides = validationOverrides;
            return this;
        }

        public Builder validationOverrides(X12ValidationOverrideResponse... validationOverrides) {
            return validationOverrides(List.of(validationOverrides));
        }

        public Builder validationSettings(X12ValidationSettingsResponse validationSettings) {
            $.validationSettings = validationSettings;
            return this;
        }

        public Builder x12DelimiterOverrides(@Nullable List<X12DelimiterOverridesResponse> x12DelimiterOverrides) {
            $.x12DelimiterOverrides = x12DelimiterOverrides;
            return this;
        }

        public Builder x12DelimiterOverrides(X12DelimiterOverridesResponse... x12DelimiterOverrides) {
            return x12DelimiterOverrides(List.of(x12DelimiterOverrides));
        }

        public X12ProtocolSettingsResponse build() {
            $.acknowledgementSettings = Objects.requireNonNull($.acknowledgementSettings, "expected parameter 'acknowledgementSettings' to be non-null");
            $.envelopeSettings = Objects.requireNonNull($.envelopeSettings, "expected parameter 'envelopeSettings' to be non-null");
            $.framingSettings = Objects.requireNonNull($.framingSettings, "expected parameter 'framingSettings' to be non-null");
            $.messageFilter = Objects.requireNonNull($.messageFilter, "expected parameter 'messageFilter' to be non-null");
            $.processingSettings = Objects.requireNonNull($.processingSettings, "expected parameter 'processingSettings' to be non-null");
            $.schemaReferences = Objects.requireNonNull($.schemaReferences, "expected parameter 'schemaReferences' to be non-null");
            $.securitySettings = Objects.requireNonNull($.securitySettings, "expected parameter 'securitySettings' to be non-null");
            $.validationSettings = Objects.requireNonNull($.validationSettings, "expected parameter 'validationSettings' to be non-null");
            return $;
        }
    }

}
