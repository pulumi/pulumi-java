// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.streamanalytics.inputs;

import com.pulumi.azurenative.streamanalytics.inputs.AvroSerializationResponse;
import com.pulumi.azurenative.streamanalytics.inputs.BlobStreamInputDataSourceResponse;
import com.pulumi.azurenative.streamanalytics.inputs.CsvSerializationResponse;
import com.pulumi.azurenative.streamanalytics.inputs.DiagnosticsResponse;
import com.pulumi.azurenative.streamanalytics.inputs.EventHubStreamInputDataSourceResponse;
import com.pulumi.azurenative.streamanalytics.inputs.IoTHubStreamInputDataSourceResponse;
import com.pulumi.azurenative.streamanalytics.inputs.JsonSerializationResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The properties that are associated with an input containing stream data.
 * 
 */
public final class StreamInputPropertiesResponse extends com.pulumi.resources.InvokeArgs {

    public static final StreamInputPropertiesResponse Empty = new StreamInputPropertiesResponse();

    /**
     * Describes an input data source that contains stream data. Required on PUT (CreateOrReplace) requests.
     * 
     */
    @Import(name="datasource")
    private @Nullable Object datasource;

    public Optional<Object> datasource() {
        return Optional.ofNullable(this.datasource);
    }

    /**
     * Describes conditions applicable to the Input, Output, or the job overall, that warrant customer attention.
     * 
     */
    @Import(name="diagnostics", required=true)
    private DiagnosticsResponse diagnostics;

    public DiagnosticsResponse diagnostics() {
        return this.diagnostics;
    }

    /**
     * The current entity tag for the input. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency.
     * 
     */
    @Import(name="etag", required=true)
    private String etag;

    public String etag() {
        return this.etag;
    }

    /**
     * Describes how data from an input is serialized or how data is serialized when written to an output. Required on PUT (CreateOrReplace) requests.
     * 
     */
    @Import(name="serialization")
    private @Nullable Object serialization;

    public Optional<Object> serialization() {
        return Optional.ofNullable(this.serialization);
    }

    /**
     * Indicates whether the input is a source of reference data or stream data. Required on PUT (CreateOrReplace) requests.
     * Expected value is &#39;Stream&#39;.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    public String type() {
        return this.type;
    }

    private StreamInputPropertiesResponse() {}

    private StreamInputPropertiesResponse(StreamInputPropertiesResponse $) {
        this.datasource = $.datasource;
        this.diagnostics = $.diagnostics;
        this.etag = $.etag;
        this.serialization = $.serialization;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StreamInputPropertiesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StreamInputPropertiesResponse $;

        public Builder() {
            $ = new StreamInputPropertiesResponse();
        }

        public Builder(StreamInputPropertiesResponse defaults) {
            $ = new StreamInputPropertiesResponse(Objects.requireNonNull(defaults));
        }

        public Builder datasource(@Nullable Object datasource) {
            $.datasource = datasource;
            return this;
        }

        public Builder diagnostics(DiagnosticsResponse diagnostics) {
            $.diagnostics = diagnostics;
            return this;
        }

        public Builder etag(String etag) {
            $.etag = etag;
            return this;
        }

        public Builder serialization(@Nullable Object serialization) {
            $.serialization = serialization;
            return this;
        }

        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public StreamInputPropertiesResponse build() {
            $.diagnostics = Objects.requireNonNull($.diagnostics, "expected parameter 'diagnostics' to be non-null");
            $.etag = Objects.requireNonNull($.etag, "expected parameter 'etag' to be non-null");
            $.type = Codegen.stringProp("type").arg($.type).require();
            return $;
        }
    }

}
