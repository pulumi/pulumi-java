// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.operationalinsights.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Table column.
 * 
 */
public final class ColumnResponse extends com.pulumi.resources.InvokeArgs {

    public static final ColumnResponse Empty = new ColumnResponse();

    /**
     * Column data type logical hint.
     * 
     */
    @Import(name="dataTypeHint")
    private @Nullable String dataTypeHint;

    public Optional<String> dataTypeHint() {
        return Optional.ofNullable(this.dataTypeHint);
    }

    /**
     * Column description.
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Column display name.
     * 
     */
    @Import(name="displayName")
    private @Nullable String displayName;

    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Is displayed by default.
     * 
     */
    @Import(name="isDefaultDisplay", required=true)
    private Boolean isDefaultDisplay;

    public Boolean isDefaultDisplay() {
        return this.isDefaultDisplay;
    }

    /**
     * Is column hidden.
     * 
     */
    @Import(name="isHidden", required=true)
    private Boolean isHidden;

    public Boolean isHidden() {
        return this.isHidden;
    }

    /**
     * Column name.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Column data type.
     * 
     */
    @Import(name="type")
    private @Nullable String type;

    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    private ColumnResponse() {}

    private ColumnResponse(ColumnResponse $) {
        this.dataTypeHint = $.dataTypeHint;
        this.description = $.description;
        this.displayName = $.displayName;
        this.isDefaultDisplay = $.isDefaultDisplay;
        this.isHidden = $.isHidden;
        this.name = $.name;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ColumnResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ColumnResponse $;

        public Builder() {
            $ = new ColumnResponse();
        }

        public Builder(ColumnResponse defaults) {
            $ = new ColumnResponse(Objects.requireNonNull(defaults));
        }

        public Builder dataTypeHint(@Nullable String dataTypeHint) {
            $.dataTypeHint = dataTypeHint;
            return this;
        }

        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        public Builder displayName(@Nullable String displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder isDefaultDisplay(Boolean isDefaultDisplay) {
            $.isDefaultDisplay = isDefaultDisplay;
            return this;
        }

        public Builder isHidden(Boolean isHidden) {
            $.isHidden = isHidden;
            return this;
        }

        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        public Builder type(@Nullable String type) {
            $.type = type;
            return this;
        }

        public ColumnResponse build() {
            $.isDefaultDisplay = Objects.requireNonNull($.isDefaultDisplay, "expected parameter 'isDefaultDisplay' to be non-null");
            $.isHidden = Objects.requireNonNull($.isHidden, "expected parameter 'isHidden' to be non-null");
            return $;
        }
    }

}
