// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.azurenative.datafactory.inputs.PipelineReferenceResponse;
import com.pulumi.azurenative.datafactory.inputs.TriggerPipelineReferenceResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Trigger that allows the referenced pipeline to depend on other pipeline runs based on runDimension Name/Value pairs. Upstream pipelines should declare the same runDimension Name and their runs should have the values for those runDimensions. The referenced pipeline run would be triggered if the values for the runDimension match for all upstream pipeline runs.
 * 
 */
public final class ChainingTriggerResponse extends com.pulumi.resources.InvokeArgs {

    public static final ChainingTriggerResponse Empty = new ChainingTriggerResponse();

    /**
     * List of tags that can be used for describing the trigger.
     * 
     */
    @Import(name="annotations")
    private @Nullable List<Object> annotations;

    public Optional<List<Object>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    /**
     * Upstream Pipelines.
     * 
     */
    @Import(name="dependsOn", required=true)
    private List<PipelineReferenceResponse> dependsOn;

    public List<PipelineReferenceResponse> dependsOn() {
        return this.dependsOn;
    }

    /**
     * Trigger description.
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Pipeline for which runs are created when all upstream pipelines complete successfully.
     * 
     */
    @Import(name="pipeline", required=true)
    private TriggerPipelineReferenceResponse pipeline;

    public TriggerPipelineReferenceResponse pipeline() {
        return this.pipeline;
    }

    /**
     * Run Dimension property that needs to be emitted by upstream pipelines.
     * 
     */
    @Import(name="runDimension", required=true)
    private String runDimension;

    public String runDimension() {
        return this.runDimension;
    }

    /**
     * Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
     * 
     */
    @Import(name="runtimeState", required=true)
    private String runtimeState;

    public String runtimeState() {
        return this.runtimeState;
    }

    /**
     * Trigger type.
     * Expected value is &#39;ChainingTrigger&#39;.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    public String type() {
        return this.type;
    }

    private ChainingTriggerResponse() {}

    private ChainingTriggerResponse(ChainingTriggerResponse $) {
        this.annotations = $.annotations;
        this.dependsOn = $.dependsOn;
        this.description = $.description;
        this.pipeline = $.pipeline;
        this.runDimension = $.runDimension;
        this.runtimeState = $.runtimeState;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ChainingTriggerResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ChainingTriggerResponse $;

        public Builder() {
            $ = new ChainingTriggerResponse();
        }

        public Builder(ChainingTriggerResponse defaults) {
            $ = new ChainingTriggerResponse(Objects.requireNonNull(defaults));
        }

        public Builder annotations(@Nullable List<Object> annotations) {
            $.annotations = annotations;
            return this;
        }

        public Builder annotations(Object... annotations) {
            return annotations(List.of(annotations));
        }

        public Builder dependsOn(List<PipelineReferenceResponse> dependsOn) {
            $.dependsOn = dependsOn;
            return this;
        }

        public Builder dependsOn(PipelineReferenceResponse... dependsOn) {
            return dependsOn(List.of(dependsOn));
        }

        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        public Builder pipeline(TriggerPipelineReferenceResponse pipeline) {
            $.pipeline = pipeline;
            return this;
        }

        public Builder runDimension(String runDimension) {
            $.runDimension = runDimension;
            return this;
        }

        public Builder runtimeState(String runtimeState) {
            $.runtimeState = runtimeState;
            return this;
        }

        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public ChainingTriggerResponse build() {
            $.dependsOn = Objects.requireNonNull($.dependsOn, "expected parameter 'dependsOn' to be non-null");
            $.pipeline = Objects.requireNonNull($.pipeline, "expected parameter 'pipeline' to be non-null");
            $.runDimension = Objects.requireNonNull($.runDimension, "expected parameter 'runDimension' to be non-null");
            $.runtimeState = Objects.requireNonNull($.runtimeState, "expected parameter 'runtimeState' to be non-null");
            $.type = Codegen.stringProp("type").arg($.type).require();
            return $;
        }
    }

}
