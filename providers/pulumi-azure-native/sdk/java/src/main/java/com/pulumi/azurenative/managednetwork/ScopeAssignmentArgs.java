// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.managednetwork;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ScopeAssignmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final ScopeAssignmentArgs Empty = new ScopeAssignmentArgs();

    /**
     * The managed network ID with scope will be assigned to.
     * 
     */
    @Import(name="assignedManagedNetwork")
      private final @Nullable Output<String> assignedManagedNetwork;

    public Output<String> assignedManagedNetwork() {
        return this.assignedManagedNetwork == null ? Codegen.empty() : this.assignedManagedNetwork;
    }

    /**
     * The geo-location where the resource lives
     * 
     */
    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> location() {
        return this.location == null ? Codegen.empty() : this.location;
    }

    /**
     * The base resource of the scope assignment to create. The scope can be any REST resource instance. For example, use 'subscriptions/{subscription-id}' for a subscription, 'subscriptions/{subscription-id}/resourceGroups/{resource-group-name}' for a resource group, and 'subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/{resource-provider}/{resource-type}/{resource-name}' for a resource.
     * 
     */
    @Import(name="scope", required=true)
      private final Output<String> scope;

    public Output<String> scope() {
        return this.scope;
    }

    /**
     * The name of the scope assignment to create.
     * 
     */
    @Import(name="scopeAssignmentName")
      private final @Nullable Output<String> scopeAssignmentName;

    public Output<String> scopeAssignmentName() {
        return this.scopeAssignmentName == null ? Codegen.empty() : this.scopeAssignmentName;
    }

    public ScopeAssignmentArgs(
        @Nullable Output<String> assignedManagedNetwork,
        @Nullable Output<String> location,
        Output<String> scope,
        @Nullable Output<String> scopeAssignmentName) {
        this.assignedManagedNetwork = assignedManagedNetwork;
        this.location = location;
        this.scope = Objects.requireNonNull(scope, "expected parameter 'scope' to be non-null");
        this.scopeAssignmentName = scopeAssignmentName;
    }

    private ScopeAssignmentArgs() {
        this.assignedManagedNetwork = Codegen.empty();
        this.location = Codegen.empty();
        this.scope = Codegen.empty();
        this.scopeAssignmentName = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ScopeAssignmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> assignedManagedNetwork;
        private @Nullable Output<String> location;
        private Output<String> scope;
        private @Nullable Output<String> scopeAssignmentName;

        public Builder() {
    	      // Empty
        }

        public Builder(ScopeAssignmentArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.assignedManagedNetwork = defaults.assignedManagedNetwork;
    	      this.location = defaults.location;
    	      this.scope = defaults.scope;
    	      this.scopeAssignmentName = defaults.scopeAssignmentName;
        }

        public Builder assignedManagedNetwork(@Nullable Output<String> assignedManagedNetwork) {
            this.assignedManagedNetwork = assignedManagedNetwork;
            return this;
        }
        public Builder assignedManagedNetwork(@Nullable String assignedManagedNetwork) {
            this.assignedManagedNetwork = Codegen.ofNullable(assignedManagedNetwork);
            return this;
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Codegen.ofNullable(location);
            return this;
        }
        public Builder scope(Output<String> scope) {
            this.scope = Objects.requireNonNull(scope);
            return this;
        }
        public Builder scope(String scope) {
            this.scope = Output.of(Objects.requireNonNull(scope));
            return this;
        }
        public Builder scopeAssignmentName(@Nullable Output<String> scopeAssignmentName) {
            this.scopeAssignmentName = scopeAssignmentName;
            return this;
        }
        public Builder scopeAssignmentName(@Nullable String scopeAssignmentName) {
            this.scopeAssignmentName = Codegen.ofNullable(scopeAssignmentName);
            return this;
        }        public ScopeAssignmentArgs build() {
            return new ScopeAssignmentArgs(assignedManagedNetwork, location, scope, scopeAssignmentName);
        }
    }
}
