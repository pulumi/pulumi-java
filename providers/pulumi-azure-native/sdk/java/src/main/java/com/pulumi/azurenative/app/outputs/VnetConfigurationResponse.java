// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.app.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class VnetConfigurationResponse {
    /**
     * @return CIDR notation IP range assigned to the Docker bridge, network. Must not overlap with any other provided IP ranges.
     * 
     */
    private final @Nullable String dockerBridgeCidr;
    /**
     * @return Resource ID of a subnet for infrastructure components. This subnet must be in the same VNET as the subnet defined in runtimeSubnetId. Must not overlap with any other provided IP ranges.
     * 
     */
    private final @Nullable String infrastructureSubnetId;
    /**
     * @return Boolean indicating the environment only has an internal load balancer. These environments do not have a public static IP resource, must provide ControlPlaneSubnetResourceId and AppSubnetResourceId if enabling this property
     * 
     */
    private final @Nullable Boolean internal;
    /**
     * @return IP range in CIDR notation that can be reserved for environment infrastructure IP addresses. Must not overlap with any other provided IP ranges.
     * 
     */
    private final @Nullable String platformReservedCidr;
    /**
     * @return  An IP address from the IP range defined by platformReservedCidr that will be reserved for the internal DNS server.
     * 
     */
    private final @Nullable String platformReservedDnsIP;
    /**
     * @return Resource ID of a subnet that Container App containers are injected into. This subnet must be in the same VNET as the subnet defined in infrastructureSubnetId. Must not overlap with any other provided IP ranges.
     * 
     */
    private final @Nullable String runtimeSubnetId;

    @CustomType.Constructor
    private VnetConfigurationResponse(
        @CustomType.Parameter("dockerBridgeCidr") @Nullable String dockerBridgeCidr,
        @CustomType.Parameter("infrastructureSubnetId") @Nullable String infrastructureSubnetId,
        @CustomType.Parameter("internal") @Nullable Boolean internal,
        @CustomType.Parameter("platformReservedCidr") @Nullable String platformReservedCidr,
        @CustomType.Parameter("platformReservedDnsIP") @Nullable String platformReservedDnsIP,
        @CustomType.Parameter("runtimeSubnetId") @Nullable String runtimeSubnetId) {
        this.dockerBridgeCidr = dockerBridgeCidr;
        this.infrastructureSubnetId = infrastructureSubnetId;
        this.internal = internal;
        this.platformReservedCidr = platformReservedCidr;
        this.platformReservedDnsIP = platformReservedDnsIP;
        this.runtimeSubnetId = runtimeSubnetId;
    }

    /**
     * @return CIDR notation IP range assigned to the Docker bridge, network. Must not overlap with any other provided IP ranges.
     * 
     */
    public Optional<String> dockerBridgeCidr() {
        return Optional.ofNullable(this.dockerBridgeCidr);
    }
    /**
     * @return Resource ID of a subnet for infrastructure components. This subnet must be in the same VNET as the subnet defined in runtimeSubnetId. Must not overlap with any other provided IP ranges.
     * 
     */
    public Optional<String> infrastructureSubnetId() {
        return Optional.ofNullable(this.infrastructureSubnetId);
    }
    /**
     * @return Boolean indicating the environment only has an internal load balancer. These environments do not have a public static IP resource, must provide ControlPlaneSubnetResourceId and AppSubnetResourceId if enabling this property
     * 
     */
    public Optional<Boolean> internal() {
        return Optional.ofNullable(this.internal);
    }
    /**
     * @return IP range in CIDR notation that can be reserved for environment infrastructure IP addresses. Must not overlap with any other provided IP ranges.
     * 
     */
    public Optional<String> platformReservedCidr() {
        return Optional.ofNullable(this.platformReservedCidr);
    }
    /**
     * @return  An IP address from the IP range defined by platformReservedCidr that will be reserved for the internal DNS server.
     * 
     */
    public Optional<String> platformReservedDnsIP() {
        return Optional.ofNullable(this.platformReservedDnsIP);
    }
    /**
     * @return Resource ID of a subnet that Container App containers are injected into. This subnet must be in the same VNET as the subnet defined in infrastructureSubnetId. Must not overlap with any other provided IP ranges.
     * 
     */
    public Optional<String> runtimeSubnetId() {
        return Optional.ofNullable(this.runtimeSubnetId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VnetConfigurationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String dockerBridgeCidr;
        private @Nullable String infrastructureSubnetId;
        private @Nullable Boolean internal;
        private @Nullable String platformReservedCidr;
        private @Nullable String platformReservedDnsIP;
        private @Nullable String runtimeSubnetId;

        public Builder() {
    	      // Empty
        }

        public Builder(VnetConfigurationResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dockerBridgeCidr = defaults.dockerBridgeCidr;
    	      this.infrastructureSubnetId = defaults.infrastructureSubnetId;
    	      this.internal = defaults.internal;
    	      this.platformReservedCidr = defaults.platformReservedCidr;
    	      this.platformReservedDnsIP = defaults.platformReservedDnsIP;
    	      this.runtimeSubnetId = defaults.runtimeSubnetId;
        }

        public Builder dockerBridgeCidr(@Nullable String dockerBridgeCidr) {
            this.dockerBridgeCidr = dockerBridgeCidr;
            return this;
        }
        public Builder infrastructureSubnetId(@Nullable String infrastructureSubnetId) {
            this.infrastructureSubnetId = infrastructureSubnetId;
            return this;
        }
        public Builder internal(@Nullable Boolean internal) {
            this.internal = internal;
            return this;
        }
        public Builder platformReservedCidr(@Nullable String platformReservedCidr) {
            this.platformReservedCidr = platformReservedCidr;
            return this;
        }
        public Builder platformReservedDnsIP(@Nullable String platformReservedDnsIP) {
            this.platformReservedDnsIP = platformReservedDnsIP;
            return this;
        }
        public Builder runtimeSubnetId(@Nullable String runtimeSubnetId) {
            this.runtimeSubnetId = runtimeSubnetId;
            return this;
        }        public VnetConfigurationResponse build() {
            return new VnetConfigurationResponse(dockerBridgeCidr, infrastructureSubnetId, internal, platformReservedCidr, platformReservedDnsIP, runtimeSubnetId);
        }
    }
}
