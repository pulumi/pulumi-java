// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.machinelearningservices.inputs;

import com.pulumi.azurenative.machinelearningservices.inputs.AmlTokenResponse;
import com.pulumi.azurenative.machinelearningservices.inputs.ComputeConfigurationResponse;
import com.pulumi.azurenative.machinelearningservices.inputs.InputDataBindingResponse;
import com.pulumi.azurenative.machinelearningservices.inputs.JobEndpointResponse;
import com.pulumi.azurenative.machinelearningservices.inputs.JobOutputResponse;
import com.pulumi.azurenative.machinelearningservices.inputs.ManagedIdentityResponse;
import com.pulumi.azurenative.machinelearningservices.inputs.MpiResponse;
import com.pulumi.azurenative.machinelearningservices.inputs.OutputDataBindingResponse;
import com.pulumi.azurenative.machinelearningservices.inputs.PyTorchResponse;
import com.pulumi.azurenative.machinelearningservices.inputs.TensorFlowResponse;
import com.pulumi.core.Either;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Command job definition.
 * 
 */
public final class CommandJobResponse extends com.pulumi.resources.InvokeArgs {

    public static final CommandJobResponse Empty = new CommandJobResponse();

    /**
     * ARM resource ID of the code asset.
     * 
     */
    @Import(name="codeId")
      private final @Nullable String codeId;

    public Optional<String> codeId() {
        return this.codeId == null ? Optional.empty() : Optional.ofNullable(this.codeId);
    }

    /**
     * The command to execute on startup of the job. eg. "python train.py"
     * 
     */
    @Import(name="command", required=true)
      private final String command;

    public String command() {
        return this.command;
    }

    /**
     * Compute binding for the job.
     * 
     */
    @Import(name="compute", required=true)
      private final ComputeConfigurationResponse compute;

    public ComputeConfigurationResponse compute() {
        return this.compute;
    }

    /**
     * The asset description text.
     * 
     */
    @Import(name="description")
      private final @Nullable String description;

    public Optional<String> description() {
        return this.description == null ? Optional.empty() : Optional.ofNullable(this.description);
    }

    /**
     * Distribution configuration of the job. If set, this should be one of Mpi, Tensorflow, PyTorch, or null.
     * 
     */
    @Import(name="distribution")
      private final @Nullable Object distribution;

    public Object distribution() {
        return this.distribution == null ? null : this.distribution;
    }

    /**
     * The ARM resource ID of the Environment specification for the job.
     * 
     */
    @Import(name="environmentId")
      private final @Nullable String environmentId;

    public Optional<String> environmentId() {
        return this.environmentId == null ? Optional.empty() : Optional.ofNullable(this.environmentId);
    }

    /**
     * Environment variables included in the job.
     * 
     */
    @Import(name="environmentVariables")
      private final @Nullable Map<String,String> environmentVariables;

    public Map<String,String> environmentVariables() {
        return this.environmentVariables == null ? Map.of() : this.environmentVariables;
    }

    /**
     * The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
     * 
     */
    @Import(name="experimentName")
      private final @Nullable String experimentName;

    public Optional<String> experimentName() {
        return this.experimentName == null ? Optional.empty() : Optional.ofNullable(this.experimentName);
    }

    /**
     * Identity configuration. If set, this should be one of AmlToken, ManagedIdentity, or null.
     * Defaults to AmlToken if null.
     * 
     */
    @Import(name="identity")
      private final @Nullable Either<AmlTokenResponse,ManagedIdentityResponse> identity;

    public Either<AmlTokenResponse,ManagedIdentityResponse> identity() {
        return this.identity == null ? null : this.identity;
    }

    /**
     * Mapping of input data bindings used in the job.
     * 
     */
    @Import(name="inputDataBindings")
      private final @Nullable Map<String,InputDataBindingResponse> inputDataBindings;

    public Map<String,InputDataBindingResponse> inputDataBindings() {
        return this.inputDataBindings == null ? Map.of() : this.inputDataBindings;
    }

    /**
     * List of JobEndpoints.
     * For local jobs, a job endpoint will have an endpoint value of FileStreamObject.
     * 
     */
    @Import(name="interactionEndpoints", required=true)
      private final Map<String,JobEndpointResponse> interactionEndpoints;

    public Map<String,JobEndpointResponse> interactionEndpoints() {
        return this.interactionEndpoints;
    }

    /**
     * Enum to determine the type of job.
     * Expected value is 'Command'.
     * 
     */
    @Import(name="jobType", required=true)
      private final String jobType;

    public String jobType() {
        return this.jobType;
    }

    /**
     * Location of the job output logs and artifacts.
     * 
     */
    @Import(name="output", required=true)
      private final JobOutputResponse output;

    public JobOutputResponse output() {
        return this.output;
    }

    /**
     * Mapping of output data bindings used in the job.
     * 
     */
    @Import(name="outputDataBindings")
      private final @Nullable Map<String,OutputDataBindingResponse> outputDataBindings;

    public Map<String,OutputDataBindingResponse> outputDataBindings() {
        return this.outputDataBindings == null ? Map.of() : this.outputDataBindings;
    }

    /**
     * Input parameters.
     * 
     */
    @Import(name="parameters", required=true)
      private final Object parameters;

    public Object parameters() {
        return this.parameters;
    }

    /**
     * Job priority for scheduling policy. Only applies to AMLCompute.
     * Private preview feature and only available to users on the allow list.
     * 
     */
    @Import(name="priority")
      private final @Nullable Integer priority;

    public Optional<Integer> priority() {
        return this.priority == null ? Optional.empty() : Optional.ofNullable(this.priority);
    }

    /**
     * The asset property dictionary.
     * 
     */
    @Import(name="properties")
      private final @Nullable Map<String,String> properties;

    public Map<String,String> properties() {
        return this.properties == null ? Map.of() : this.properties;
    }

    /**
     * Specifies the job provisioning state.
     * 
     */
    @Import(name="provisioningState", required=true)
      private final String provisioningState;

    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Status of the job.
     * 
     */
    @Import(name="status", required=true)
      private final String status;

    public String status() {
        return this.status;
    }

    /**
     * Tag dictionary. Tags can be added, removed, and updated.
     * 
     */
    @Import(name="tags")
      private final @Nullable Map<String,String> tags;

    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }

    /**
     * The max run duration in ISO 8601 format, after which the job will be cancelled. Only supports duration with precision as low as Seconds.
     * 
     */
    @Import(name="timeout")
      private final @Nullable String timeout;

    public Optional<String> timeout() {
        return this.timeout == null ? Optional.empty() : Optional.ofNullable(this.timeout);
    }

    public CommandJobResponse(
        @Nullable String codeId,
        String command,
        ComputeConfigurationResponse compute,
        @Nullable String description,
        @Nullable Object distribution,
        @Nullable String environmentId,
        @Nullable Map<String,String> environmentVariables,
        @Nullable String experimentName,
        @Nullable Either<AmlTokenResponse,ManagedIdentityResponse> identity,
        @Nullable Map<String,InputDataBindingResponse> inputDataBindings,
        Map<String,JobEndpointResponse> interactionEndpoints,
        String jobType,
        JobOutputResponse output,
        @Nullable Map<String,OutputDataBindingResponse> outputDataBindings,
        Object parameters,
        @Nullable Integer priority,
        @Nullable Map<String,String> properties,
        String provisioningState,
        String status,
        @Nullable Map<String,String> tags,
        @Nullable String timeout) {
        this.codeId = codeId;
        this.command = Objects.requireNonNull(command, "expected parameter 'command' to be non-null");
        this.compute = Objects.requireNonNull(compute, "expected parameter 'compute' to be non-null");
        this.description = description;
        this.distribution = distribution;
        this.environmentId = environmentId;
        this.environmentVariables = environmentVariables;
        this.experimentName = experimentName;
        this.identity = identity;
        this.inputDataBindings = inputDataBindings;
        this.interactionEndpoints = Objects.requireNonNull(interactionEndpoints, "expected parameter 'interactionEndpoints' to be non-null");
        this.jobType = Codegen.stringProp("jobType").arg(jobType).require();
        this.output = Objects.requireNonNull(output, "expected parameter 'output' to be non-null");
        this.outputDataBindings = outputDataBindings;
        this.parameters = Objects.requireNonNull(parameters, "expected parameter 'parameters' to be non-null");
        this.priority = priority;
        this.properties = properties;
        this.provisioningState = Objects.requireNonNull(provisioningState, "expected parameter 'provisioningState' to be non-null");
        this.status = Objects.requireNonNull(status, "expected parameter 'status' to be non-null");
        this.tags = tags;
        this.timeout = timeout;
    }

    private CommandJobResponse() {
        this.codeId = null;
        this.command = null;
        this.compute = null;
        this.description = null;
        this.distribution = null;
        this.environmentId = null;
        this.environmentVariables = Map.of();
        this.experimentName = null;
        this.identity = null;
        this.inputDataBindings = Map.of();
        this.interactionEndpoints = Map.of();
        this.jobType = null;
        this.output = null;
        this.outputDataBindings = Map.of();
        this.parameters = null;
        this.priority = null;
        this.properties = Map.of();
        this.provisioningState = null;
        this.status = null;
        this.tags = Map.of();
        this.timeout = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CommandJobResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String codeId;
        private String command;
        private ComputeConfigurationResponse compute;
        private @Nullable String description;
        private @Nullable Object distribution;
        private @Nullable String environmentId;
        private @Nullable Map<String,String> environmentVariables;
        private @Nullable String experimentName;
        private @Nullable Either<AmlTokenResponse,ManagedIdentityResponse> identity;
        private @Nullable Map<String,InputDataBindingResponse> inputDataBindings;
        private Map<String,JobEndpointResponse> interactionEndpoints;
        private String jobType;
        private JobOutputResponse output;
        private @Nullable Map<String,OutputDataBindingResponse> outputDataBindings;
        private Object parameters;
        private @Nullable Integer priority;
        private @Nullable Map<String,String> properties;
        private String provisioningState;
        private String status;
        private @Nullable Map<String,String> tags;
        private @Nullable String timeout;

        public Builder() {
    	      // Empty
        }

        public Builder(CommandJobResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.codeId = defaults.codeId;
    	      this.command = defaults.command;
    	      this.compute = defaults.compute;
    	      this.description = defaults.description;
    	      this.distribution = defaults.distribution;
    	      this.environmentId = defaults.environmentId;
    	      this.environmentVariables = defaults.environmentVariables;
    	      this.experimentName = defaults.experimentName;
    	      this.identity = defaults.identity;
    	      this.inputDataBindings = defaults.inputDataBindings;
    	      this.interactionEndpoints = defaults.interactionEndpoints;
    	      this.jobType = defaults.jobType;
    	      this.output = defaults.output;
    	      this.outputDataBindings = defaults.outputDataBindings;
    	      this.parameters = defaults.parameters;
    	      this.priority = defaults.priority;
    	      this.properties = defaults.properties;
    	      this.provisioningState = defaults.provisioningState;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
    	      this.timeout = defaults.timeout;
        }

        public Builder codeId(@Nullable String codeId) {
            this.codeId = codeId;
            return this;
        }
        public Builder command(String command) {
            this.command = Objects.requireNonNull(command);
            return this;
        }
        public Builder compute(ComputeConfigurationResponse compute) {
            this.compute = Objects.requireNonNull(compute);
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        public Builder distribution(@Nullable Object distribution) {
            this.distribution = distribution;
            return this;
        }
        public Builder environmentId(@Nullable String environmentId) {
            this.environmentId = environmentId;
            return this;
        }
        public Builder environmentVariables(@Nullable Map<String,String> environmentVariables) {
            this.environmentVariables = environmentVariables;
            return this;
        }
        public Builder experimentName(@Nullable String experimentName) {
            this.experimentName = experimentName;
            return this;
        }
        public Builder identity(@Nullable Either<AmlTokenResponse,ManagedIdentityResponse> identity) {
            this.identity = identity;
            return this;
        }
        public Builder inputDataBindings(@Nullable Map<String,InputDataBindingResponse> inputDataBindings) {
            this.inputDataBindings = inputDataBindings;
            return this;
        }
        public Builder interactionEndpoints(Map<String,JobEndpointResponse> interactionEndpoints) {
            this.interactionEndpoints = Objects.requireNonNull(interactionEndpoints);
            return this;
        }
        public Builder jobType(String jobType) {
            this.jobType = Objects.requireNonNull(jobType);
            return this;
        }
        public Builder output(JobOutputResponse output) {
            this.output = Objects.requireNonNull(output);
            return this;
        }
        public Builder outputDataBindings(@Nullable Map<String,OutputDataBindingResponse> outputDataBindings) {
            this.outputDataBindings = outputDataBindings;
            return this;
        }
        public Builder parameters(Object parameters) {
            this.parameters = Objects.requireNonNull(parameters);
            return this;
        }
        public Builder priority(@Nullable Integer priority) {
            this.priority = priority;
            return this;
        }
        public Builder properties(@Nullable Map<String,String> properties) {
            this.properties = properties;
            return this;
        }
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        public Builder timeout(@Nullable String timeout) {
            this.timeout = timeout;
            return this;
        }        public CommandJobResponse build() {
            return new CommandJobResponse(codeId, command, compute, description, distribution, environmentId, environmentVariables, experimentName, identity, inputDataBindings, interactionEndpoints, jobType, output, outputDataBindings, parameters, priority, properties, provisioningState, status, tags, timeout);
        }
    }
}
