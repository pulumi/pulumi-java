// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.web.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A static site user provided function.
 * 
 */
public final class StaticSiteUserProvidedFunctionAppResponse extends com.pulumi.resources.InvokeArgs {

    public static final StaticSiteUserProvidedFunctionAppResponse Empty = new StaticSiteUserProvidedFunctionAppResponse();

    /**
     * The date and time on which the function app was registered with the static site.
     * 
     */
    @Import(name="createdOn", required=true)
    private String createdOn;

    public String createdOn() {
        return this.createdOn;
    }

    /**
     * The region of the function app registered with the static site
     * 
     */
    @Import(name="functionAppRegion")
    private @Nullable String functionAppRegion;

    public Optional<String> functionAppRegion() {
        return Optional.ofNullable(this.functionAppRegion);
    }

    /**
     * The resource id of the function app registered with the static site
     * 
     */
    @Import(name="functionAppResourceId")
    private @Nullable String functionAppResourceId;

    public Optional<String> functionAppResourceId() {
        return Optional.ofNullable(this.functionAppResourceId);
    }

    /**
     * Resource Id.
     * 
     */
    @Import(name="id", required=true)
    private String id;

    public String id() {
        return this.id;
    }

    /**
     * Kind of resource.
     * 
     */
    @Import(name="kind")
    private @Nullable String kind;

    public Optional<String> kind() {
        return Optional.ofNullable(this.kind);
    }

    /**
     * Resource Name.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    public String name() {
        return this.name;
    }

    /**
     * Resource type.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    public String type() {
        return this.type;
    }

    private StaticSiteUserProvidedFunctionAppResponse() {}

    private StaticSiteUserProvidedFunctionAppResponse(StaticSiteUserProvidedFunctionAppResponse $) {
        this.createdOn = $.createdOn;
        this.functionAppRegion = $.functionAppRegion;
        this.functionAppResourceId = $.functionAppResourceId;
        this.id = $.id;
        this.kind = $.kind;
        this.name = $.name;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StaticSiteUserProvidedFunctionAppResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StaticSiteUserProvidedFunctionAppResponse $;

        public Builder() {
            $ = new StaticSiteUserProvidedFunctionAppResponse();
        }

        public Builder(StaticSiteUserProvidedFunctionAppResponse defaults) {
            $ = new StaticSiteUserProvidedFunctionAppResponse(Objects.requireNonNull(defaults));
        }

        public Builder createdOn(String createdOn) {
            $.createdOn = createdOn;
            return this;
        }

        public Builder functionAppRegion(@Nullable String functionAppRegion) {
            $.functionAppRegion = functionAppRegion;
            return this;
        }

        public Builder functionAppResourceId(@Nullable String functionAppResourceId) {
            $.functionAppResourceId = functionAppResourceId;
            return this;
        }

        public Builder id(String id) {
            $.id = id;
            return this;
        }

        public Builder kind(@Nullable String kind) {
            $.kind = kind;
            return this;
        }

        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public StaticSiteUserProvidedFunctionAppResponse build() {
            $.createdOn = Objects.requireNonNull($.createdOn, "expected parameter 'createdOn' to be non-null");
            $.id = Objects.requireNonNull($.id, "expected parameter 'id' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
