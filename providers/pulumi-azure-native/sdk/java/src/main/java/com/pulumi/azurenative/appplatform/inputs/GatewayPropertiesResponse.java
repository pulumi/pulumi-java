// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.appplatform.inputs;

import com.pulumi.azurenative.appplatform.inputs.GatewayApiMetadataPropertiesResponse;
import com.pulumi.azurenative.appplatform.inputs.GatewayCorsPropertiesResponse;
import com.pulumi.azurenative.appplatform.inputs.GatewayInstanceResponse;
import com.pulumi.azurenative.appplatform.inputs.GatewayOperatorPropertiesResponse;
import com.pulumi.azurenative.appplatform.inputs.GatewayResourceRequestsResponse;
import com.pulumi.azurenative.appplatform.inputs.SsoPropertiesResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Spring Cloud Gateway properties payload
 * 
 */
public final class GatewayPropertiesResponse extends com.pulumi.resources.InvokeArgs {

    public static final GatewayPropertiesResponse Empty = new GatewayPropertiesResponse();

    /**
     * API metadata property for Spring Cloud Gateway
     * 
     */
    @Import(name="apiMetadataProperties")
    private @Nullable GatewayApiMetadataPropertiesResponse apiMetadataProperties;

    public Optional<GatewayApiMetadataPropertiesResponse> apiMetadataProperties() {
        return Optional.ofNullable(this.apiMetadataProperties);
    }

    /**
     * Cross-Origin Resource Sharing property
     * 
     */
    @Import(name="corsProperties")
    private @Nullable GatewayCorsPropertiesResponse corsProperties;

    public Optional<GatewayCorsPropertiesResponse> corsProperties() {
        return Optional.ofNullable(this.corsProperties);
    }

    /**
     * Indicate if only https is allowed.
     * 
     */
    @Import(name="httpsOnly")
    private @Nullable Boolean httpsOnly;

    public Optional<Boolean> httpsOnly() {
        return Optional.ofNullable(this.httpsOnly);
    }

    /**
     * Collection of instances belong to Spring Cloud Gateway.
     * 
     */
    @Import(name="instances", required=true)
    private List<GatewayInstanceResponse> instances;

    public List<GatewayInstanceResponse> instances() {
        return this.instances;
    }

    /**
     * Properties of the Spring Cloud Gateway Operator.
     * 
     */
    @Import(name="operatorProperties", required=true)
    private GatewayOperatorPropertiesResponse operatorProperties;

    public GatewayOperatorPropertiesResponse operatorProperties() {
        return this.operatorProperties;
    }

    /**
     * State of the Spring Cloud Gateway.
     * 
     */
    @Import(name="provisioningState", required=true)
    private String provisioningState;

    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Indicates whether the Spring Cloud Gateway exposes endpoint.
     * 
     */
    @Import(name="public")
    private @Nullable Boolean public_;

    public Optional<Boolean> public_() {
        return Optional.ofNullable(this.public_);
    }

    /**
     * The requested resource quantity for required CPU and Memory.
     * 
     */
    @Import(name="resourceRequests")
    private @Nullable GatewayResourceRequestsResponse resourceRequests;

    public Optional<GatewayResourceRequestsResponse> resourceRequests() {
        return Optional.ofNullable(this.resourceRequests);
    }

    /**
     * Single sign-on related configuration
     * 
     */
    @Import(name="ssoProperties")
    private @Nullable SsoPropertiesResponse ssoProperties;

    public Optional<SsoPropertiesResponse> ssoProperties() {
        return Optional.ofNullable(this.ssoProperties);
    }

    /**
     * URL of the Spring Cloud Gateway, exposed when &#39;public&#39; is true.
     * 
     */
    @Import(name="url", required=true)
    private String url;

    public String url() {
        return this.url;
    }

    private GatewayPropertiesResponse() {}

    private GatewayPropertiesResponse(GatewayPropertiesResponse $) {
        this.apiMetadataProperties = $.apiMetadataProperties;
        this.corsProperties = $.corsProperties;
        this.httpsOnly = $.httpsOnly;
        this.instances = $.instances;
        this.operatorProperties = $.operatorProperties;
        this.provisioningState = $.provisioningState;
        this.public_ = $.public_;
        this.resourceRequests = $.resourceRequests;
        this.ssoProperties = $.ssoProperties;
        this.url = $.url;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GatewayPropertiesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GatewayPropertiesResponse $;

        public Builder() {
            $ = new GatewayPropertiesResponse();
        }

        public Builder(GatewayPropertiesResponse defaults) {
            $ = new GatewayPropertiesResponse(Objects.requireNonNull(defaults));
        }

        public Builder apiMetadataProperties(@Nullable GatewayApiMetadataPropertiesResponse apiMetadataProperties) {
            $.apiMetadataProperties = apiMetadataProperties;
            return this;
        }

        public Builder corsProperties(@Nullable GatewayCorsPropertiesResponse corsProperties) {
            $.corsProperties = corsProperties;
            return this;
        }

        public Builder httpsOnly(@Nullable Boolean httpsOnly) {
            $.httpsOnly = httpsOnly;
            return this;
        }

        public Builder instances(List<GatewayInstanceResponse> instances) {
            $.instances = instances;
            return this;
        }

        public Builder instances(GatewayInstanceResponse... instances) {
            return instances(List.of(instances));
        }

        public Builder operatorProperties(GatewayOperatorPropertiesResponse operatorProperties) {
            $.operatorProperties = operatorProperties;
            return this;
        }

        public Builder provisioningState(String provisioningState) {
            $.provisioningState = provisioningState;
            return this;
        }

        public Builder public_(@Nullable Boolean public_) {
            $.public_ = public_;
            return this;
        }

        public Builder resourceRequests(@Nullable GatewayResourceRequestsResponse resourceRequests) {
            $.resourceRequests = resourceRequests;
            return this;
        }

        public Builder ssoProperties(@Nullable SsoPropertiesResponse ssoProperties) {
            $.ssoProperties = ssoProperties;
            return this;
        }

        public Builder url(String url) {
            $.url = url;
            return this;
        }

        public GatewayPropertiesResponse build() {
            $.instances = Objects.requireNonNull($.instances, "expected parameter 'instances' to be non-null");
            $.operatorProperties = Objects.requireNonNull($.operatorProperties, "expected parameter 'operatorProperties' to be non-null");
            $.provisioningState = Objects.requireNonNull($.provisioningState, "expected parameter 'provisioningState' to be non-null");
            $.url = Objects.requireNonNull($.url, "expected parameter 'url' to be non-null");
            return $;
        }
    }

}
