// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Specifies the peering configuration.
 * 
 */
public final class ExpressRouteCircuitPeeringConfigResponse extends com.pulumi.resources.InvokeArgs {

    public static final ExpressRouteCircuitPeeringConfigResponse Empty = new ExpressRouteCircuitPeeringConfigResponse();

    /**
     * The communities of bgp peering. Specified for microsoft peering.
     * 
     */
    @Import(name="advertisedCommunities")
    private @Nullable List<String> advertisedCommunities;

    /**
     * @return The communities of bgp peering. Specified for microsoft peering.
     * 
     */
    public Optional<List<String>> advertisedCommunities() {
        return Optional.ofNullable(this.advertisedCommunities);
    }

    /**
     * The reference to AdvertisedPublicPrefixes.
     * 
     */
    @Import(name="advertisedPublicPrefixes")
    private @Nullable List<String> advertisedPublicPrefixes;

    /**
     * @return The reference to AdvertisedPublicPrefixes.
     * 
     */
    public Optional<List<String>> advertisedPublicPrefixes() {
        return Optional.ofNullable(this.advertisedPublicPrefixes);
    }

    /**
     * The advertised public prefix state of the Peering resource.
     * 
     */
    @Import(name="advertisedPublicPrefixesState", required=true)
    private String advertisedPublicPrefixesState;

    /**
     * @return The advertised public prefix state of the Peering resource.
     * 
     */
    public String advertisedPublicPrefixesState() {
        return this.advertisedPublicPrefixesState;
    }

    /**
     * The CustomerASN of the peering.
     * 
     */
    @Import(name="customerASN")
    private @Nullable Integer customerASN;

    /**
     * @return The CustomerASN of the peering.
     * 
     */
    public Optional<Integer> customerASN() {
        return Optional.ofNullable(this.customerASN);
    }

    /**
     * The legacy mode of the peering.
     * 
     */
    @Import(name="legacyMode")
    private @Nullable Integer legacyMode;

    /**
     * @return The legacy mode of the peering.
     * 
     */
    public Optional<Integer> legacyMode() {
        return Optional.ofNullable(this.legacyMode);
    }

    /**
     * The RoutingRegistryName of the configuration.
     * 
     */
    @Import(name="routingRegistryName")
    private @Nullable String routingRegistryName;

    /**
     * @return The RoutingRegistryName of the configuration.
     * 
     */
    public Optional<String> routingRegistryName() {
        return Optional.ofNullable(this.routingRegistryName);
    }

    private ExpressRouteCircuitPeeringConfigResponse() {}

    private ExpressRouteCircuitPeeringConfigResponse(ExpressRouteCircuitPeeringConfigResponse $) {
        this.advertisedCommunities = $.advertisedCommunities;
        this.advertisedPublicPrefixes = $.advertisedPublicPrefixes;
        this.advertisedPublicPrefixesState = $.advertisedPublicPrefixesState;
        this.customerASN = $.customerASN;
        this.legacyMode = $.legacyMode;
        this.routingRegistryName = $.routingRegistryName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExpressRouteCircuitPeeringConfigResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExpressRouteCircuitPeeringConfigResponse $;

        public Builder() {
            $ = new ExpressRouteCircuitPeeringConfigResponse();
        }

        public Builder(ExpressRouteCircuitPeeringConfigResponse defaults) {
            $ = new ExpressRouteCircuitPeeringConfigResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param advertisedCommunities The communities of bgp peering. Specified for microsoft peering.
         * 
         * @return builder
         * 
         */
        public Builder advertisedCommunities(@Nullable List<String> advertisedCommunities) {
            $.advertisedCommunities = advertisedCommunities;
            return this;
        }

        /**
         * @param advertisedCommunities The communities of bgp peering. Specified for microsoft peering.
         * 
         * @return builder
         * 
         */
        public Builder advertisedCommunities(String... advertisedCommunities) {
            return advertisedCommunities(List.of(advertisedCommunities));
        }

        /**
         * @param advertisedPublicPrefixes The reference to AdvertisedPublicPrefixes.
         * 
         * @return builder
         * 
         */
        public Builder advertisedPublicPrefixes(@Nullable List<String> advertisedPublicPrefixes) {
            $.advertisedPublicPrefixes = advertisedPublicPrefixes;
            return this;
        }

        /**
         * @param advertisedPublicPrefixes The reference to AdvertisedPublicPrefixes.
         * 
         * @return builder
         * 
         */
        public Builder advertisedPublicPrefixes(String... advertisedPublicPrefixes) {
            return advertisedPublicPrefixes(List.of(advertisedPublicPrefixes));
        }

        /**
         * @param advertisedPublicPrefixesState The advertised public prefix state of the Peering resource.
         * 
         * @return builder
         * 
         */
        public Builder advertisedPublicPrefixesState(String advertisedPublicPrefixesState) {
            $.advertisedPublicPrefixesState = advertisedPublicPrefixesState;
            return this;
        }

        /**
         * @param customerASN The CustomerASN of the peering.
         * 
         * @return builder
         * 
         */
        public Builder customerASN(@Nullable Integer customerASN) {
            $.customerASN = customerASN;
            return this;
        }

        /**
         * @param legacyMode The legacy mode of the peering.
         * 
         * @return builder
         * 
         */
        public Builder legacyMode(@Nullable Integer legacyMode) {
            $.legacyMode = legacyMode;
            return this;
        }

        /**
         * @param routingRegistryName The RoutingRegistryName of the configuration.
         * 
         * @return builder
         * 
         */
        public Builder routingRegistryName(@Nullable String routingRegistryName) {
            $.routingRegistryName = routingRegistryName;
            return this;
        }

        public ExpressRouteCircuitPeeringConfigResponse build() {
            $.advertisedPublicPrefixesState = Objects.requireNonNull($.advertisedPublicPrefixesState, "expected parameter 'advertisedPublicPrefixesState' to be non-null");
            return $;
        }
    }

}
