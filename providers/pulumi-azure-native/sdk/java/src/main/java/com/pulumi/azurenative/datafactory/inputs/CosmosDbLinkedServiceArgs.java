// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.azurenative.datafactory.enums.CosmosDbConnectionMode;
import com.pulumi.azurenative.datafactory.enums.CosmosDbServicePrincipalCredentialType;
import com.pulumi.azurenative.datafactory.inputs.AzureKeyVaultSecretReferenceArgs;
import com.pulumi.azurenative.datafactory.inputs.CredentialReferenceArgs;
import com.pulumi.azurenative.datafactory.inputs.IntegrationRuntimeReferenceArgs;
import com.pulumi.azurenative.datafactory.inputs.ParameterSpecificationArgs;
import com.pulumi.azurenative.datafactory.inputs.SecureStringArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Microsoft Azure Cosmos Database (CosmosDB) linked service.
 * 
 */
public final class CosmosDbLinkedServiceArgs extends com.pulumi.resources.ResourceArgs {

    public static final CosmosDbLinkedServiceArgs Empty = new CosmosDbLinkedServiceArgs();

    /**
     * The endpoint of the Azure CosmosDB account. Type: string (or Expression with resultType string)
     * 
     */
    @Import(name="accountEndpoint")
    private @Nullable Output<Object> accountEndpoint;

    public Optional<Output<Object>> accountEndpoint() {
        return Optional.ofNullable(this.accountEndpoint);
    }

    /**
     * The account key of the Azure CosmosDB account. Type: SecureString or AzureKeyVaultSecretReference.
     * 
     */
    @Import(name="accountKey")
    private @Nullable Output<Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs>> accountKey;

    public Optional<Output<Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs>>> accountKey() {
        return Optional.ofNullable(this.accountKey);
    }

    /**
     * List of tags that can be used for describing the linked service.
     * 
     */
    @Import(name="annotations")
    private @Nullable Output<List<Object>> annotations;

    public Optional<Output<List<Object>>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    /**
     * Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment, AzureGermany. Default value is the data factory regionsâ€™ cloud type. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="azureCloudType")
    private @Nullable Output<Object> azureCloudType;

    public Optional<Output<Object>> azureCloudType() {
        return Optional.ofNullable(this.azureCloudType);
    }

    /**
     * The integration runtime reference.
     * 
     */
    @Import(name="connectVia")
    private @Nullable Output<IntegrationRuntimeReferenceArgs> connectVia;

    public Optional<Output<IntegrationRuntimeReferenceArgs>> connectVia() {
        return Optional.ofNullable(this.connectVia);
    }

    /**
     * The connection mode used to access CosmosDB account. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="connectionMode")
    private @Nullable Output<Either<String,CosmosDbConnectionMode>> connectionMode;

    public Optional<Output<Either<String,CosmosDbConnectionMode>>> connectionMode() {
        return Optional.ofNullable(this.connectionMode);
    }

    /**
     * The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
     * 
     */
    @Import(name="connectionString")
    private @Nullable Output<Object> connectionString;

    public Optional<Output<Object>> connectionString() {
        return Optional.ofNullable(this.connectionString);
    }

    /**
     * The credential reference containing authentication information.
     * 
     */
    @Import(name="credential")
    private @Nullable Output<CredentialReferenceArgs> credential;

    public Optional<Output<CredentialReferenceArgs>> credential() {
        return Optional.ofNullable(this.credential);
    }

    /**
     * The name of the database. Type: string (or Expression with resultType string)
     * 
     */
    @Import(name="database")
    private @Nullable Output<Object> database;

    public Optional<Output<Object>> database() {
        return Optional.ofNullable(this.database);
    }

    /**
     * Linked service description.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="encryptedCredential")
    private @Nullable Output<Object> encryptedCredential;

    public Optional<Output<Object>> encryptedCredential() {
        return Optional.ofNullable(this.encryptedCredential);
    }

    /**
     * Parameters for linked service.
     * 
     */
    @Import(name="parameters")
    private @Nullable Output<Map<String,ParameterSpecificationArgs>> parameters;

    public Optional<Output<Map<String,ParameterSpecificationArgs>>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    /**
     * The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is &#39;ServicePrincipalKey&#39;, servicePrincipalCredential can be SecureString or AzureKeyVaultSecretReference. If servicePrincipalCredentialType is &#39;ServicePrincipalCert&#39;, servicePrincipalCredential can only be AzureKeyVaultSecretReference.
     * 
     */
    @Import(name="servicePrincipalCredential")
    private @Nullable Output<Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs>> servicePrincipalCredential;

    public Optional<Output<Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs>>> servicePrincipalCredential() {
        return Optional.ofNullable(this.servicePrincipalCredential);
    }

    /**
     * The service principal credential type to use in Server-To-Server authentication. &#39;ServicePrincipalKey&#39; for key/secret, &#39;ServicePrincipalCert&#39; for certificate. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="servicePrincipalCredentialType")
    private @Nullable Output<Either<String,CosmosDbServicePrincipalCredentialType>> servicePrincipalCredentialType;

    public Optional<Output<Either<String,CosmosDbServicePrincipalCredentialType>>> servicePrincipalCredentialType() {
        return Optional.ofNullable(this.servicePrincipalCredentialType);
    }

    /**
     * The client ID of the application in Azure Active Directory used for Server-To-Server authentication. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="servicePrincipalId")
    private @Nullable Output<Object> servicePrincipalId;

    public Optional<Output<Object>> servicePrincipalId() {
        return Optional.ofNullable(this.servicePrincipalId);
    }

    /**
     * The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="tenant")
    private @Nullable Output<Object> tenant;

    public Optional<Output<Object>> tenant() {
        return Optional.ofNullable(this.tenant);
    }

    /**
     * Type of linked service.
     * Expected value is &#39;CosmosDb&#39;.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    private CosmosDbLinkedServiceArgs() {}

    private CosmosDbLinkedServiceArgs(CosmosDbLinkedServiceArgs $) {
        this.accountEndpoint = $.accountEndpoint;
        this.accountKey = $.accountKey;
        this.annotations = $.annotations;
        this.azureCloudType = $.azureCloudType;
        this.connectVia = $.connectVia;
        this.connectionMode = $.connectionMode;
        this.connectionString = $.connectionString;
        this.credential = $.credential;
        this.database = $.database;
        this.description = $.description;
        this.encryptedCredential = $.encryptedCredential;
        this.parameters = $.parameters;
        this.servicePrincipalCredential = $.servicePrincipalCredential;
        this.servicePrincipalCredentialType = $.servicePrincipalCredentialType;
        this.servicePrincipalId = $.servicePrincipalId;
        this.tenant = $.tenant;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CosmosDbLinkedServiceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CosmosDbLinkedServiceArgs $;

        public Builder() {
            $ = new CosmosDbLinkedServiceArgs();
        }

        public Builder(CosmosDbLinkedServiceArgs defaults) {
            $ = new CosmosDbLinkedServiceArgs(Objects.requireNonNull(defaults));
        }

        public Builder accountEndpoint(@Nullable Output<Object> accountEndpoint) {
            $.accountEndpoint = accountEndpoint;
            return this;
        }

        public Builder accountEndpoint(Object accountEndpoint) {
            return accountEndpoint(Output.of(accountEndpoint));
        }

        public Builder accountKey(@Nullable Output<Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs>> accountKey) {
            $.accountKey = accountKey;
            return this;
        }

        public Builder accountKey(Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs> accountKey) {
            return accountKey(Output.of(accountKey));
        }

        public Builder accountKey(AzureKeyVaultSecretReferenceArgs accountKey) {
            return accountKey(Either.ofLeft(accountKey));
        }

        public Builder accountKey(SecureStringArgs accountKey) {
            return accountKey(Either.ofRight(accountKey));
        }

        public Builder annotations(@Nullable Output<List<Object>> annotations) {
            $.annotations = annotations;
            return this;
        }

        public Builder annotations(List<Object> annotations) {
            return annotations(Output.of(annotations));
        }

        public Builder annotations(Object... annotations) {
            return annotations(List.of(annotations));
        }

        public Builder azureCloudType(@Nullable Output<Object> azureCloudType) {
            $.azureCloudType = azureCloudType;
            return this;
        }

        public Builder azureCloudType(Object azureCloudType) {
            return azureCloudType(Output.of(azureCloudType));
        }

        public Builder connectVia(@Nullable Output<IntegrationRuntimeReferenceArgs> connectVia) {
            $.connectVia = connectVia;
            return this;
        }

        public Builder connectVia(IntegrationRuntimeReferenceArgs connectVia) {
            return connectVia(Output.of(connectVia));
        }

        public Builder connectionMode(@Nullable Output<Either<String,CosmosDbConnectionMode>> connectionMode) {
            $.connectionMode = connectionMode;
            return this;
        }

        public Builder connectionMode(Either<String,CosmosDbConnectionMode> connectionMode) {
            return connectionMode(Output.of(connectionMode));
        }

        public Builder connectionMode(String connectionMode) {
            return connectionMode(Either.ofLeft(connectionMode));
        }

        public Builder connectionMode(CosmosDbConnectionMode connectionMode) {
            return connectionMode(Either.ofRight(connectionMode));
        }

        public Builder connectionString(@Nullable Output<Object> connectionString) {
            $.connectionString = connectionString;
            return this;
        }

        public Builder connectionString(Object connectionString) {
            return connectionString(Output.of(connectionString));
        }

        public Builder credential(@Nullable Output<CredentialReferenceArgs> credential) {
            $.credential = credential;
            return this;
        }

        public Builder credential(CredentialReferenceArgs credential) {
            return credential(Output.of(credential));
        }

        public Builder database(@Nullable Output<Object> database) {
            $.database = database;
            return this;
        }

        public Builder database(Object database) {
            return database(Output.of(database));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder encryptedCredential(@Nullable Output<Object> encryptedCredential) {
            $.encryptedCredential = encryptedCredential;
            return this;
        }

        public Builder encryptedCredential(Object encryptedCredential) {
            return encryptedCredential(Output.of(encryptedCredential));
        }

        public Builder parameters(@Nullable Output<Map<String,ParameterSpecificationArgs>> parameters) {
            $.parameters = parameters;
            return this;
        }

        public Builder parameters(Map<String,ParameterSpecificationArgs> parameters) {
            return parameters(Output.of(parameters));
        }

        public Builder servicePrincipalCredential(@Nullable Output<Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs>> servicePrincipalCredential) {
            $.servicePrincipalCredential = servicePrincipalCredential;
            return this;
        }

        public Builder servicePrincipalCredential(Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs> servicePrincipalCredential) {
            return servicePrincipalCredential(Output.of(servicePrincipalCredential));
        }

        public Builder servicePrincipalCredential(AzureKeyVaultSecretReferenceArgs servicePrincipalCredential) {
            return servicePrincipalCredential(Either.ofLeft(servicePrincipalCredential));
        }

        public Builder servicePrincipalCredential(SecureStringArgs servicePrincipalCredential) {
            return servicePrincipalCredential(Either.ofRight(servicePrincipalCredential));
        }

        public Builder servicePrincipalCredentialType(@Nullable Output<Either<String,CosmosDbServicePrincipalCredentialType>> servicePrincipalCredentialType) {
            $.servicePrincipalCredentialType = servicePrincipalCredentialType;
            return this;
        }

        public Builder servicePrincipalCredentialType(Either<String,CosmosDbServicePrincipalCredentialType> servicePrincipalCredentialType) {
            return servicePrincipalCredentialType(Output.of(servicePrincipalCredentialType));
        }

        public Builder servicePrincipalCredentialType(String servicePrincipalCredentialType) {
            return servicePrincipalCredentialType(Either.ofLeft(servicePrincipalCredentialType));
        }

        public Builder servicePrincipalCredentialType(CosmosDbServicePrincipalCredentialType servicePrincipalCredentialType) {
            return servicePrincipalCredentialType(Either.ofRight(servicePrincipalCredentialType));
        }

        public Builder servicePrincipalId(@Nullable Output<Object> servicePrincipalId) {
            $.servicePrincipalId = servicePrincipalId;
            return this;
        }

        public Builder servicePrincipalId(Object servicePrincipalId) {
            return servicePrincipalId(Output.of(servicePrincipalId));
        }

        public Builder tenant(@Nullable Output<Object> tenant) {
            $.tenant = tenant;
            return this;
        }

        public Builder tenant(Object tenant) {
            return tenant(Output.of(tenant));
        }

        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public CosmosDbLinkedServiceArgs build() {
            $.type = Codegen.stringProp("type").output().arg($.type).require();
            return $;
        }
    }

}
