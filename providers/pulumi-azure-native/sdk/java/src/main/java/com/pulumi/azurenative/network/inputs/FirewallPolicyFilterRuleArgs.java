// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.azurenative.network.inputs.ApplicationRuleConditionArgs;
import com.pulumi.azurenative.network.inputs.FirewallPolicyFilterRuleActionArgs;
import com.pulumi.azurenative.network.inputs.NatRuleConditionArgs;
import com.pulumi.azurenative.network.inputs.NetworkRuleConditionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Firewall Policy Filter Rule.
 * 
 */
public final class FirewallPolicyFilterRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final FirewallPolicyFilterRuleArgs Empty = new FirewallPolicyFilterRuleArgs();

    /**
     * The action type of a Filter rule.
     * 
     */
    @Import(name="action")
    private @Nullable Output<FirewallPolicyFilterRuleActionArgs> action;

    /**
     * @return The action type of a Filter rule.
     * 
     */
    public Optional<Output<FirewallPolicyFilterRuleActionArgs>> action() {
        return Optional.ofNullable(this.action);
    }

    /**
     * The name of the rule.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the rule.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Priority of the Firewall Policy Rule resource.
     * 
     */
    @Import(name="priority")
    private @Nullable Output<Integer> priority;

    /**
     * @return Priority of the Firewall Policy Rule resource.
     * 
     */
    public Optional<Output<Integer>> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * Collection of rule conditions used by a rule.
     * 
     */
    @Import(name="ruleConditions")
    private @Nullable Output<List<Object>> ruleConditions;

    /**
     * @return Collection of rule conditions used by a rule.
     * 
     */
    public Optional<Output<List<Object>>> ruleConditions() {
        return Optional.ofNullable(this.ruleConditions);
    }

    /**
     * The type of the rule.
     * Expected value is &#39;FirewallPolicyFilterRule&#39;.
     * 
     */
    @Import(name="ruleType", required=true)
    private Output<String> ruleType;

    /**
     * @return The type of the rule.
     * Expected value is &#39;FirewallPolicyFilterRule&#39;.
     * 
     */
    public Output<String> ruleType() {
        return this.ruleType;
    }

    private FirewallPolicyFilterRuleArgs() {}

    private FirewallPolicyFilterRuleArgs(FirewallPolicyFilterRuleArgs $) {
        this.action = $.action;
        this.name = $.name;
        this.priority = $.priority;
        this.ruleConditions = $.ruleConditions;
        this.ruleType = $.ruleType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FirewallPolicyFilterRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FirewallPolicyFilterRuleArgs $;

        public Builder() {
            $ = new FirewallPolicyFilterRuleArgs();
        }

        public Builder(FirewallPolicyFilterRuleArgs defaults) {
            $ = new FirewallPolicyFilterRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param action The action type of a Filter rule.
         * 
         * @return builder
         * 
         */
        public Builder action(@Nullable Output<FirewallPolicyFilterRuleActionArgs> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action The action type of a Filter rule.
         * 
         * @return builder
         * 
         */
        public Builder action(FirewallPolicyFilterRuleActionArgs action) {
            return action(Output.of(action));
        }

        /**
         * @param name The name of the rule.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the rule.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param priority Priority of the Firewall Policy Rule resource.
         * 
         * @return builder
         * 
         */
        public Builder priority(@Nullable Output<Integer> priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param priority Priority of the Firewall Policy Rule resource.
         * 
         * @return builder
         * 
         */
        public Builder priority(Integer priority) {
            return priority(Output.of(priority));
        }

        /**
         * @param ruleConditions Collection of rule conditions used by a rule.
         * 
         * @return builder
         * 
         */
        public Builder ruleConditions(@Nullable Output<List<Object>> ruleConditions) {
            $.ruleConditions = ruleConditions;
            return this;
        }

        /**
         * @param ruleConditions Collection of rule conditions used by a rule.
         * 
         * @return builder
         * 
         */
        public Builder ruleConditions(List<Object> ruleConditions) {
            return ruleConditions(Output.of(ruleConditions));
        }

        /**
         * @param ruleConditions Collection of rule conditions used by a rule.
         * 
         * @return builder
         * 
         */
        public Builder ruleConditions(Object... ruleConditions) {
            return ruleConditions(List.of(ruleConditions));
        }

        /**
         * @param ruleType The type of the rule.
         * Expected value is &#39;FirewallPolicyFilterRule&#39;.
         * 
         * @return builder
         * 
         */
        public Builder ruleType(Output<String> ruleType) {
            $.ruleType = ruleType;
            return this;
        }

        /**
         * @param ruleType The type of the rule.
         * Expected value is &#39;FirewallPolicyFilterRule&#39;.
         * 
         * @return builder
         * 
         */
        public Builder ruleType(String ruleType) {
            return ruleType(Output.of(ruleType));
        }

        public FirewallPolicyFilterRuleArgs build() {
            $.ruleType = Codegen.stringProp("ruleType").output().arg($.ruleType).require();
            return $;
        }
    }

}
