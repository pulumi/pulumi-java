// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.cdn;

import com.pulumi.azurenative.cdn.inputs.AFDDomainHttpsParametersArgs;
import com.pulumi.azurenative.cdn.inputs.ResourceReferenceArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AFDCustomDomainArgs extends com.pulumi.resources.ResourceArgs {

    public static final AFDCustomDomainArgs Empty = new AFDCustomDomainArgs();

    /**
     * Resource reference to the Azure DNS zone
     * 
     */
    @Import(name="azureDnsZone")
    private @Nullable Output<ResourceReferenceArgs> azureDnsZone;

    /**
     * @return Resource reference to the Azure DNS zone
     * 
     */
    public Optional<Output<ResourceReferenceArgs>> azureDnsZone() {
        return Optional.ofNullable(this.azureDnsZone);
    }

    /**
     * Name of the domain under the profile which is unique globally
     * 
     */
    @Import(name="customDomainName")
    private @Nullable Output<String> customDomainName;

    /**
     * @return Name of the domain under the profile which is unique globally
     * 
     */
    public Optional<Output<String>> customDomainName() {
        return Optional.ofNullable(this.customDomainName);
    }

    /**
     * The host name of the domain. Must be a domain name.
     * 
     */
    @Import(name="hostName", required=true)
    private Output<String> hostName;

    /**
     * @return The host name of the domain. Must be a domain name.
     * 
     */
    public Output<String> hostName() {
        return this.hostName;
    }

    /**
     * Name of the CDN profile which is unique within the resource group.
     * 
     */
    @Import(name="profileName", required=true)
    private Output<String> profileName;

    /**
     * @return Name of the CDN profile which is unique within the resource group.
     * 
     */
    public Output<String> profileName() {
        return this.profileName;
    }

    /**
     * Name of the Resource group within the Azure subscription.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return Name of the Resource group within the Azure subscription.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The configuration specifying how to enable HTTPS for the domain - using AzureFrontDoor managed certificate or user&#39;s own certificate. If not specified, enabling ssl uses AzureFrontDoor managed certificate by default.
     * 
     */
    @Import(name="tlsSettings")
    private @Nullable Output<AFDDomainHttpsParametersArgs> tlsSettings;

    /**
     * @return The configuration specifying how to enable HTTPS for the domain - using AzureFrontDoor managed certificate or user&#39;s own certificate. If not specified, enabling ssl uses AzureFrontDoor managed certificate by default.
     * 
     */
    public Optional<Output<AFDDomainHttpsParametersArgs>> tlsSettings() {
        return Optional.ofNullable(this.tlsSettings);
    }

    private AFDCustomDomainArgs() {}

    private AFDCustomDomainArgs(AFDCustomDomainArgs $) {
        this.azureDnsZone = $.azureDnsZone;
        this.customDomainName = $.customDomainName;
        this.hostName = $.hostName;
        this.profileName = $.profileName;
        this.resourceGroupName = $.resourceGroupName;
        this.tlsSettings = $.tlsSettings;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AFDCustomDomainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AFDCustomDomainArgs $;

        public Builder() {
            $ = new AFDCustomDomainArgs();
        }

        public Builder(AFDCustomDomainArgs defaults) {
            $ = new AFDCustomDomainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param azureDnsZone Resource reference to the Azure DNS zone
         * 
         * @return builder
         * 
         */
        public Builder azureDnsZone(@Nullable Output<ResourceReferenceArgs> azureDnsZone) {
            $.azureDnsZone = azureDnsZone;
            return this;
        }

        /**
         * @param azureDnsZone Resource reference to the Azure DNS zone
         * 
         * @return builder
         * 
         */
        public Builder azureDnsZone(ResourceReferenceArgs azureDnsZone) {
            return azureDnsZone(Output.of(azureDnsZone));
        }

        /**
         * @param customDomainName Name of the domain under the profile which is unique globally
         * 
         * @return builder
         * 
         */
        public Builder customDomainName(@Nullable Output<String> customDomainName) {
            $.customDomainName = customDomainName;
            return this;
        }

        /**
         * @param customDomainName Name of the domain under the profile which is unique globally
         * 
         * @return builder
         * 
         */
        public Builder customDomainName(String customDomainName) {
            return customDomainName(Output.of(customDomainName));
        }

        /**
         * @param hostName The host name of the domain. Must be a domain name.
         * 
         * @return builder
         * 
         */
        public Builder hostName(Output<String> hostName) {
            $.hostName = hostName;
            return this;
        }

        /**
         * @param hostName The host name of the domain. Must be a domain name.
         * 
         * @return builder
         * 
         */
        public Builder hostName(String hostName) {
            return hostName(Output.of(hostName));
        }

        /**
         * @param profileName Name of the CDN profile which is unique within the resource group.
         * 
         * @return builder
         * 
         */
        public Builder profileName(Output<String> profileName) {
            $.profileName = profileName;
            return this;
        }

        /**
         * @param profileName Name of the CDN profile which is unique within the resource group.
         * 
         * @return builder
         * 
         */
        public Builder profileName(String profileName) {
            return profileName(Output.of(profileName));
        }

        /**
         * @param resourceGroupName Name of the Resource group within the Azure subscription.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName Name of the Resource group within the Azure subscription.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param tlsSettings The configuration specifying how to enable HTTPS for the domain - using AzureFrontDoor managed certificate or user&#39;s own certificate. If not specified, enabling ssl uses AzureFrontDoor managed certificate by default.
         * 
         * @return builder
         * 
         */
        public Builder tlsSettings(@Nullable Output<AFDDomainHttpsParametersArgs> tlsSettings) {
            $.tlsSettings = tlsSettings;
            return this;
        }

        /**
         * @param tlsSettings The configuration specifying how to enable HTTPS for the domain - using AzureFrontDoor managed certificate or user&#39;s own certificate. If not specified, enabling ssl uses AzureFrontDoor managed certificate by default.
         * 
         * @return builder
         * 
         */
        public Builder tlsSettings(AFDDomainHttpsParametersArgs tlsSettings) {
            return tlsSettings(Output.of(tlsSettings));
        }

        public AFDCustomDomainArgs build() {
            $.hostName = Objects.requireNonNull($.hostName, "expected parameter 'hostName' to be non-null");
            $.profileName = Objects.requireNonNull($.profileName, "expected parameter 'profileName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
