// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.automanage.inputs;

import com.pulumi.azurenative.automanage.enums.EnableRealTimeProtection;
import com.pulumi.azurenative.automanage.enums.RunScheduledScan;
import com.pulumi.azurenative.automanage.enums.ScanType;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Automanage configuration profile Antimalware preferences.
 * 
 */
public final class ConfigurationProfilePreferenceAntiMalwareArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConfigurationProfilePreferenceAntiMalwareArgs Empty = new ConfigurationProfilePreferenceAntiMalwareArgs();

    /**
     * Enables or disables Real Time Protection
     * 
     */
    @Import(name="enableRealTimeProtection")
      private final @Nullable Output<Either<String,EnableRealTimeProtection>> enableRealTimeProtection;

    public Output<Either<String,EnableRealTimeProtection>> enableRealTimeProtection() {
        return this.enableRealTimeProtection == null ? Codegen.empty() : this.enableRealTimeProtection;
    }

    /**
     * Extensions, Paths and Processes that must be excluded from scan
     * 
     */
    @Import(name="exclusions")
      private final @Nullable Output<Object> exclusions;

    public Output<Object> exclusions() {
        return this.exclusions == null ? Codegen.empty() : this.exclusions;
    }

    /**
     * Enables or disables a periodic scan for antimalware
     * 
     */
    @Import(name="runScheduledScan")
      private final @Nullable Output<Either<String,RunScheduledScan>> runScheduledScan;

    public Output<Either<String,RunScheduledScan>> runScheduledScan() {
        return this.runScheduledScan == null ? Codegen.empty() : this.runScheduledScan;
    }

    /**
     * Schedule scan settings day
     * 
     */
    @Import(name="scanDay")
      private final @Nullable Output<String> scanDay;

    public Output<String> scanDay() {
        return this.scanDay == null ? Codegen.empty() : this.scanDay;
    }

    /**
     * Schedule scan settings time
     * 
     */
    @Import(name="scanTimeInMinutes")
      private final @Nullable Output<String> scanTimeInMinutes;

    public Output<String> scanTimeInMinutes() {
        return this.scanTimeInMinutes == null ? Codegen.empty() : this.scanTimeInMinutes;
    }

    /**
     * Type of scheduled scan
     * 
     */
    @Import(name="scanType")
      private final @Nullable Output<Either<String,ScanType>> scanType;

    public Output<Either<String,ScanType>> scanType() {
        return this.scanType == null ? Codegen.empty() : this.scanType;
    }

    public ConfigurationProfilePreferenceAntiMalwareArgs(
        @Nullable Output<Either<String,EnableRealTimeProtection>> enableRealTimeProtection,
        @Nullable Output<Object> exclusions,
        @Nullable Output<Either<String,RunScheduledScan>> runScheduledScan,
        @Nullable Output<String> scanDay,
        @Nullable Output<String> scanTimeInMinutes,
        @Nullable Output<Either<String,ScanType>> scanType) {
        this.enableRealTimeProtection = enableRealTimeProtection;
        this.exclusions = exclusions;
        this.runScheduledScan = runScheduledScan;
        this.scanDay = scanDay;
        this.scanTimeInMinutes = scanTimeInMinutes;
        this.scanType = scanType;
    }

    private ConfigurationProfilePreferenceAntiMalwareArgs() {
        this.enableRealTimeProtection = Codegen.empty();
        this.exclusions = Codegen.empty();
        this.runScheduledScan = Codegen.empty();
        this.scanDay = Codegen.empty();
        this.scanTimeInMinutes = Codegen.empty();
        this.scanType = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConfigurationProfilePreferenceAntiMalwareArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Either<String,EnableRealTimeProtection>> enableRealTimeProtection;
        private @Nullable Output<Object> exclusions;
        private @Nullable Output<Either<String,RunScheduledScan>> runScheduledScan;
        private @Nullable Output<String> scanDay;
        private @Nullable Output<String> scanTimeInMinutes;
        private @Nullable Output<Either<String,ScanType>> scanType;

        public Builder() {
    	      // Empty
        }

        public Builder(ConfigurationProfilePreferenceAntiMalwareArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enableRealTimeProtection = defaults.enableRealTimeProtection;
    	      this.exclusions = defaults.exclusions;
    	      this.runScheduledScan = defaults.runScheduledScan;
    	      this.scanDay = defaults.scanDay;
    	      this.scanTimeInMinutes = defaults.scanTimeInMinutes;
    	      this.scanType = defaults.scanType;
        }

        public Builder enableRealTimeProtection(@Nullable Output<Either<String,EnableRealTimeProtection>> enableRealTimeProtection) {
            this.enableRealTimeProtection = enableRealTimeProtection;
            return this;
        }
        public Builder enableRealTimeProtection(@Nullable Either<String,EnableRealTimeProtection> enableRealTimeProtection) {
            this.enableRealTimeProtection = Codegen.ofNullable(enableRealTimeProtection);
            return this;
        }
        public Builder exclusions(@Nullable Output<Object> exclusions) {
            this.exclusions = exclusions;
            return this;
        }
        public Builder exclusions(@Nullable Object exclusions) {
            this.exclusions = Codegen.ofNullable(exclusions);
            return this;
        }
        public Builder runScheduledScan(@Nullable Output<Either<String,RunScheduledScan>> runScheduledScan) {
            this.runScheduledScan = runScheduledScan;
            return this;
        }
        public Builder runScheduledScan(@Nullable Either<String,RunScheduledScan> runScheduledScan) {
            this.runScheduledScan = Codegen.ofNullable(runScheduledScan);
            return this;
        }
        public Builder scanDay(@Nullable Output<String> scanDay) {
            this.scanDay = scanDay;
            return this;
        }
        public Builder scanDay(@Nullable String scanDay) {
            this.scanDay = Codegen.ofNullable(scanDay);
            return this;
        }
        public Builder scanTimeInMinutes(@Nullable Output<String> scanTimeInMinutes) {
            this.scanTimeInMinutes = scanTimeInMinutes;
            return this;
        }
        public Builder scanTimeInMinutes(@Nullable String scanTimeInMinutes) {
            this.scanTimeInMinutes = Codegen.ofNullable(scanTimeInMinutes);
            return this;
        }
        public Builder scanType(@Nullable Output<Either<String,ScanType>> scanType) {
            this.scanType = scanType;
            return this;
        }
        public Builder scanType(@Nullable Either<String,ScanType> scanType) {
            this.scanType = Codegen.ofNullable(scanType);
            return this;
        }        public ConfigurationProfilePreferenceAntiMalwareArgs build() {
            return new ConfigurationProfilePreferenceAntiMalwareArgs(enableRealTimeProtection, exclusions, runScheduledScan, scanDay, scanTimeInMinutes, scanType);
        }
    }
}
