// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.automanage.inputs;

import com.pulumi.azurenative.automanage.enums.EnableRealTimeProtection;
import com.pulumi.azurenative.automanage.enums.RunScheduledScan;
import com.pulumi.azurenative.automanage.enums.ScanType;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Automanage configuration profile Antimalware preferences.
 * 
 */
public final class ConfigurationProfilePreferenceAntiMalwareArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConfigurationProfilePreferenceAntiMalwareArgs Empty = new ConfigurationProfilePreferenceAntiMalwareArgs();

    /**
     * Enables or disables Real Time Protection
     * 
     */
    @Import(name="enableRealTimeProtection")
    private @Nullable Output<Either<String,EnableRealTimeProtection>> enableRealTimeProtection;

    /**
     * @return Enables or disables Real Time Protection
     * 
     */
    public Optional<Output<Either<String,EnableRealTimeProtection>>> enableRealTimeProtection() {
        return Optional.ofNullable(this.enableRealTimeProtection);
    }

    /**
     * Extensions, Paths and Processes that must be excluded from scan
     * 
     */
    @Import(name="exclusions")
    private @Nullable Output<Object> exclusions;

    /**
     * @return Extensions, Paths and Processes that must be excluded from scan
     * 
     */
    public Optional<Output<Object>> exclusions() {
        return Optional.ofNullable(this.exclusions);
    }

    /**
     * Enables or disables a periodic scan for antimalware
     * 
     */
    @Import(name="runScheduledScan")
    private @Nullable Output<Either<String,RunScheduledScan>> runScheduledScan;

    /**
     * @return Enables or disables a periodic scan for antimalware
     * 
     */
    public Optional<Output<Either<String,RunScheduledScan>>> runScheduledScan() {
        return Optional.ofNullable(this.runScheduledScan);
    }

    /**
     * Schedule scan settings day
     * 
     */
    @Import(name="scanDay")
    private @Nullable Output<String> scanDay;

    /**
     * @return Schedule scan settings day
     * 
     */
    public Optional<Output<String>> scanDay() {
        return Optional.ofNullable(this.scanDay);
    }

    /**
     * Schedule scan settings time
     * 
     */
    @Import(name="scanTimeInMinutes")
    private @Nullable Output<String> scanTimeInMinutes;

    /**
     * @return Schedule scan settings time
     * 
     */
    public Optional<Output<String>> scanTimeInMinutes() {
        return Optional.ofNullable(this.scanTimeInMinutes);
    }

    /**
     * Type of scheduled scan
     * 
     */
    @Import(name="scanType")
    private @Nullable Output<Either<String,ScanType>> scanType;

    /**
     * @return Type of scheduled scan
     * 
     */
    public Optional<Output<Either<String,ScanType>>> scanType() {
        return Optional.ofNullable(this.scanType);
    }

    private ConfigurationProfilePreferenceAntiMalwareArgs() {}

    private ConfigurationProfilePreferenceAntiMalwareArgs(ConfigurationProfilePreferenceAntiMalwareArgs $) {
        this.enableRealTimeProtection = $.enableRealTimeProtection;
        this.exclusions = $.exclusions;
        this.runScheduledScan = $.runScheduledScan;
        this.scanDay = $.scanDay;
        this.scanTimeInMinutes = $.scanTimeInMinutes;
        this.scanType = $.scanType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConfigurationProfilePreferenceAntiMalwareArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConfigurationProfilePreferenceAntiMalwareArgs $;

        public Builder() {
            $ = new ConfigurationProfilePreferenceAntiMalwareArgs();
        }

        public Builder(ConfigurationProfilePreferenceAntiMalwareArgs defaults) {
            $ = new ConfigurationProfilePreferenceAntiMalwareArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enableRealTimeProtection Enables or disables Real Time Protection
         * 
         * @return builder
         * 
         */
        public Builder enableRealTimeProtection(@Nullable Output<Either<String,EnableRealTimeProtection>> enableRealTimeProtection) {
            $.enableRealTimeProtection = enableRealTimeProtection;
            return this;
        }

        /**
         * @param enableRealTimeProtection Enables or disables Real Time Protection
         * 
         * @return builder
         * 
         */
        public Builder enableRealTimeProtection(Either<String,EnableRealTimeProtection> enableRealTimeProtection) {
            return enableRealTimeProtection(Output.of(enableRealTimeProtection));
        }

        /**
         * @param enableRealTimeProtection Enables or disables Real Time Protection
         * 
         * @return builder
         * 
         */
        public Builder enableRealTimeProtection(String enableRealTimeProtection) {
            return enableRealTimeProtection(Either.ofLeft(enableRealTimeProtection));
        }

        /**
         * @param enableRealTimeProtection Enables or disables Real Time Protection
         * 
         * @return builder
         * 
         */
        public Builder enableRealTimeProtection(EnableRealTimeProtection enableRealTimeProtection) {
            return enableRealTimeProtection(Either.ofRight(enableRealTimeProtection));
        }

        /**
         * @param exclusions Extensions, Paths and Processes that must be excluded from scan
         * 
         * @return builder
         * 
         */
        public Builder exclusions(@Nullable Output<Object> exclusions) {
            $.exclusions = exclusions;
            return this;
        }

        /**
         * @param exclusions Extensions, Paths and Processes that must be excluded from scan
         * 
         * @return builder
         * 
         */
        public Builder exclusions(Object exclusions) {
            return exclusions(Output.of(exclusions));
        }

        /**
         * @param runScheduledScan Enables or disables a periodic scan for antimalware
         * 
         * @return builder
         * 
         */
        public Builder runScheduledScan(@Nullable Output<Either<String,RunScheduledScan>> runScheduledScan) {
            $.runScheduledScan = runScheduledScan;
            return this;
        }

        /**
         * @param runScheduledScan Enables or disables a periodic scan for antimalware
         * 
         * @return builder
         * 
         */
        public Builder runScheduledScan(Either<String,RunScheduledScan> runScheduledScan) {
            return runScheduledScan(Output.of(runScheduledScan));
        }

        /**
         * @param runScheduledScan Enables or disables a periodic scan for antimalware
         * 
         * @return builder
         * 
         */
        public Builder runScheduledScan(String runScheduledScan) {
            return runScheduledScan(Either.ofLeft(runScheduledScan));
        }

        /**
         * @param runScheduledScan Enables or disables a periodic scan for antimalware
         * 
         * @return builder
         * 
         */
        public Builder runScheduledScan(RunScheduledScan runScheduledScan) {
            return runScheduledScan(Either.ofRight(runScheduledScan));
        }

        /**
         * @param scanDay Schedule scan settings day
         * 
         * @return builder
         * 
         */
        public Builder scanDay(@Nullable Output<String> scanDay) {
            $.scanDay = scanDay;
            return this;
        }

        /**
         * @param scanDay Schedule scan settings day
         * 
         * @return builder
         * 
         */
        public Builder scanDay(String scanDay) {
            return scanDay(Output.of(scanDay));
        }

        /**
         * @param scanTimeInMinutes Schedule scan settings time
         * 
         * @return builder
         * 
         */
        public Builder scanTimeInMinutes(@Nullable Output<String> scanTimeInMinutes) {
            $.scanTimeInMinutes = scanTimeInMinutes;
            return this;
        }

        /**
         * @param scanTimeInMinutes Schedule scan settings time
         * 
         * @return builder
         * 
         */
        public Builder scanTimeInMinutes(String scanTimeInMinutes) {
            return scanTimeInMinutes(Output.of(scanTimeInMinutes));
        }

        /**
         * @param scanType Type of scheduled scan
         * 
         * @return builder
         * 
         */
        public Builder scanType(@Nullable Output<Either<String,ScanType>> scanType) {
            $.scanType = scanType;
            return this;
        }

        /**
         * @param scanType Type of scheduled scan
         * 
         * @return builder
         * 
         */
        public Builder scanType(Either<String,ScanType> scanType) {
            return scanType(Output.of(scanType));
        }

        /**
         * @param scanType Type of scheduled scan
         * 
         * @return builder
         * 
         */
        public Builder scanType(String scanType) {
            return scanType(Either.ofLeft(scanType));
        }

        /**
         * @param scanType Type of scheduled scan
         * 
         * @return builder
         * 
         */
        public Builder scanType(ScanType scanType) {
            return scanType(Either.ofRight(scanType));
        }

        public ConfigurationProfilePreferenceAntiMalwareArgs build() {
            return $;
        }
    }

}
