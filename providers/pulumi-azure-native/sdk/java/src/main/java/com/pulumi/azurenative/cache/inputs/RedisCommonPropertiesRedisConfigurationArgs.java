// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.cache.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc.
 * 
 */
public final class RedisCommonPropertiesRedisConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final RedisCommonPropertiesRedisConfigurationArgs Empty = new RedisCommonPropertiesRedisConfigurationArgs();

    /**
     * First storage account connection string
     * 
     */
    @Import(name="aofStorageConnectionString0")
    private @Nullable Output<String> aofStorageConnectionString0;

    /**
     * @return First storage account connection string
     * 
     */
    public Optional<Output<String>> aofStorageConnectionString0() {
        return Optional.ofNullable(this.aofStorageConnectionString0);
    }

    /**
     * Second storage account connection string
     * 
     */
    @Import(name="aofStorageConnectionString1")
    private @Nullable Output<String> aofStorageConnectionString1;

    /**
     * @return Second storage account connection string
     * 
     */
    public Optional<Output<String>> aofStorageConnectionString1() {
        return Optional.ofNullable(this.aofStorageConnectionString1);
    }

    /**
     * Value in megabytes reserved for fragmentation per shard
     * 
     */
    @Import(name="maxfragmentationmemoryReserved")
    private @Nullable Output<String> maxfragmentationmemoryReserved;

    /**
     * @return Value in megabytes reserved for fragmentation per shard
     * 
     */
    public Optional<Output<String>> maxfragmentationmemoryReserved() {
        return Optional.ofNullable(this.maxfragmentationmemoryReserved);
    }

    /**
     * Value in megabytes reserved for non-cache usage per shard e.g. failover.
     * 
     */
    @Import(name="maxmemoryDelta")
    private @Nullable Output<String> maxmemoryDelta;

    /**
     * @return Value in megabytes reserved for non-cache usage per shard e.g. failover.
     * 
     */
    public Optional<Output<String>> maxmemoryDelta() {
        return Optional.ofNullable(this.maxmemoryDelta);
    }

    /**
     * The eviction strategy used when your data won&#39;t fit within its memory limit.
     * 
     */
    @Import(name="maxmemoryPolicy")
    private @Nullable Output<String> maxmemoryPolicy;

    /**
     * @return The eviction strategy used when your data won&#39;t fit within its memory limit.
     * 
     */
    public Optional<Output<String>> maxmemoryPolicy() {
        return Optional.ofNullable(this.maxmemoryPolicy);
    }

    /**
     * Value in megabytes reserved for non-cache usage per shard e.g. failover.
     * 
     */
    @Import(name="maxmemoryReserved")
    private @Nullable Output<String> maxmemoryReserved;

    /**
     * @return Value in megabytes reserved for non-cache usage per shard e.g. failover.
     * 
     */
    public Optional<Output<String>> maxmemoryReserved() {
        return Optional.ofNullable(this.maxmemoryReserved);
    }

    /**
     * Specifies whether the rdb backup is enabled
     * 
     */
    @Import(name="rdbBackupEnabled")
    private @Nullable Output<String> rdbBackupEnabled;

    /**
     * @return Specifies whether the rdb backup is enabled
     * 
     */
    public Optional<Output<String>> rdbBackupEnabled() {
        return Optional.ofNullable(this.rdbBackupEnabled);
    }

    /**
     * Specifies the frequency for creating rdb backup
     * 
     */
    @Import(name="rdbBackupFrequency")
    private @Nullable Output<String> rdbBackupFrequency;

    /**
     * @return Specifies the frequency for creating rdb backup
     * 
     */
    public Optional<Output<String>> rdbBackupFrequency() {
        return Optional.ofNullable(this.rdbBackupFrequency);
    }

    /**
     * Specifies the maximum number of snapshots for rdb backup
     * 
     */
    @Import(name="rdbBackupMaxSnapshotCount")
    private @Nullable Output<String> rdbBackupMaxSnapshotCount;

    /**
     * @return Specifies the maximum number of snapshots for rdb backup
     * 
     */
    public Optional<Output<String>> rdbBackupMaxSnapshotCount() {
        return Optional.ofNullable(this.rdbBackupMaxSnapshotCount);
    }

    /**
     * The storage account connection string for storing rdb file
     * 
     */
    @Import(name="rdbStorageConnectionString")
    private @Nullable Output<String> rdbStorageConnectionString;

    /**
     * @return The storage account connection string for storing rdb file
     * 
     */
    public Optional<Output<String>> rdbStorageConnectionString() {
        return Optional.ofNullable(this.rdbStorageConnectionString);
    }

    private RedisCommonPropertiesRedisConfigurationArgs() {}

    private RedisCommonPropertiesRedisConfigurationArgs(RedisCommonPropertiesRedisConfigurationArgs $) {
        this.aofStorageConnectionString0 = $.aofStorageConnectionString0;
        this.aofStorageConnectionString1 = $.aofStorageConnectionString1;
        this.maxfragmentationmemoryReserved = $.maxfragmentationmemoryReserved;
        this.maxmemoryDelta = $.maxmemoryDelta;
        this.maxmemoryPolicy = $.maxmemoryPolicy;
        this.maxmemoryReserved = $.maxmemoryReserved;
        this.rdbBackupEnabled = $.rdbBackupEnabled;
        this.rdbBackupFrequency = $.rdbBackupFrequency;
        this.rdbBackupMaxSnapshotCount = $.rdbBackupMaxSnapshotCount;
        this.rdbStorageConnectionString = $.rdbStorageConnectionString;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RedisCommonPropertiesRedisConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RedisCommonPropertiesRedisConfigurationArgs $;

        public Builder() {
            $ = new RedisCommonPropertiesRedisConfigurationArgs();
        }

        public Builder(RedisCommonPropertiesRedisConfigurationArgs defaults) {
            $ = new RedisCommonPropertiesRedisConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param aofStorageConnectionString0 First storage account connection string
         * 
         * @return builder
         * 
         */
        public Builder aofStorageConnectionString0(@Nullable Output<String> aofStorageConnectionString0) {
            $.aofStorageConnectionString0 = aofStorageConnectionString0;
            return this;
        }

        /**
         * @param aofStorageConnectionString0 First storage account connection string
         * 
         * @return builder
         * 
         */
        public Builder aofStorageConnectionString0(String aofStorageConnectionString0) {
            return aofStorageConnectionString0(Output.of(aofStorageConnectionString0));
        }

        /**
         * @param aofStorageConnectionString1 Second storage account connection string
         * 
         * @return builder
         * 
         */
        public Builder aofStorageConnectionString1(@Nullable Output<String> aofStorageConnectionString1) {
            $.aofStorageConnectionString1 = aofStorageConnectionString1;
            return this;
        }

        /**
         * @param aofStorageConnectionString1 Second storage account connection string
         * 
         * @return builder
         * 
         */
        public Builder aofStorageConnectionString1(String aofStorageConnectionString1) {
            return aofStorageConnectionString1(Output.of(aofStorageConnectionString1));
        }

        /**
         * @param maxfragmentationmemoryReserved Value in megabytes reserved for fragmentation per shard
         * 
         * @return builder
         * 
         */
        public Builder maxfragmentationmemoryReserved(@Nullable Output<String> maxfragmentationmemoryReserved) {
            $.maxfragmentationmemoryReserved = maxfragmentationmemoryReserved;
            return this;
        }

        /**
         * @param maxfragmentationmemoryReserved Value in megabytes reserved for fragmentation per shard
         * 
         * @return builder
         * 
         */
        public Builder maxfragmentationmemoryReserved(String maxfragmentationmemoryReserved) {
            return maxfragmentationmemoryReserved(Output.of(maxfragmentationmemoryReserved));
        }

        /**
         * @param maxmemoryDelta Value in megabytes reserved for non-cache usage per shard e.g. failover.
         * 
         * @return builder
         * 
         */
        public Builder maxmemoryDelta(@Nullable Output<String> maxmemoryDelta) {
            $.maxmemoryDelta = maxmemoryDelta;
            return this;
        }

        /**
         * @param maxmemoryDelta Value in megabytes reserved for non-cache usage per shard e.g. failover.
         * 
         * @return builder
         * 
         */
        public Builder maxmemoryDelta(String maxmemoryDelta) {
            return maxmemoryDelta(Output.of(maxmemoryDelta));
        }

        /**
         * @param maxmemoryPolicy The eviction strategy used when your data won&#39;t fit within its memory limit.
         * 
         * @return builder
         * 
         */
        public Builder maxmemoryPolicy(@Nullable Output<String> maxmemoryPolicy) {
            $.maxmemoryPolicy = maxmemoryPolicy;
            return this;
        }

        /**
         * @param maxmemoryPolicy The eviction strategy used when your data won&#39;t fit within its memory limit.
         * 
         * @return builder
         * 
         */
        public Builder maxmemoryPolicy(String maxmemoryPolicy) {
            return maxmemoryPolicy(Output.of(maxmemoryPolicy));
        }

        /**
         * @param maxmemoryReserved Value in megabytes reserved for non-cache usage per shard e.g. failover.
         * 
         * @return builder
         * 
         */
        public Builder maxmemoryReserved(@Nullable Output<String> maxmemoryReserved) {
            $.maxmemoryReserved = maxmemoryReserved;
            return this;
        }

        /**
         * @param maxmemoryReserved Value in megabytes reserved for non-cache usage per shard e.g. failover.
         * 
         * @return builder
         * 
         */
        public Builder maxmemoryReserved(String maxmemoryReserved) {
            return maxmemoryReserved(Output.of(maxmemoryReserved));
        }

        /**
         * @param rdbBackupEnabled Specifies whether the rdb backup is enabled
         * 
         * @return builder
         * 
         */
        public Builder rdbBackupEnabled(@Nullable Output<String> rdbBackupEnabled) {
            $.rdbBackupEnabled = rdbBackupEnabled;
            return this;
        }

        /**
         * @param rdbBackupEnabled Specifies whether the rdb backup is enabled
         * 
         * @return builder
         * 
         */
        public Builder rdbBackupEnabled(String rdbBackupEnabled) {
            return rdbBackupEnabled(Output.of(rdbBackupEnabled));
        }

        /**
         * @param rdbBackupFrequency Specifies the frequency for creating rdb backup
         * 
         * @return builder
         * 
         */
        public Builder rdbBackupFrequency(@Nullable Output<String> rdbBackupFrequency) {
            $.rdbBackupFrequency = rdbBackupFrequency;
            return this;
        }

        /**
         * @param rdbBackupFrequency Specifies the frequency for creating rdb backup
         * 
         * @return builder
         * 
         */
        public Builder rdbBackupFrequency(String rdbBackupFrequency) {
            return rdbBackupFrequency(Output.of(rdbBackupFrequency));
        }

        /**
         * @param rdbBackupMaxSnapshotCount Specifies the maximum number of snapshots for rdb backup
         * 
         * @return builder
         * 
         */
        public Builder rdbBackupMaxSnapshotCount(@Nullable Output<String> rdbBackupMaxSnapshotCount) {
            $.rdbBackupMaxSnapshotCount = rdbBackupMaxSnapshotCount;
            return this;
        }

        /**
         * @param rdbBackupMaxSnapshotCount Specifies the maximum number of snapshots for rdb backup
         * 
         * @return builder
         * 
         */
        public Builder rdbBackupMaxSnapshotCount(String rdbBackupMaxSnapshotCount) {
            return rdbBackupMaxSnapshotCount(Output.of(rdbBackupMaxSnapshotCount));
        }

        /**
         * @param rdbStorageConnectionString The storage account connection string for storing rdb file
         * 
         * @return builder
         * 
         */
        public Builder rdbStorageConnectionString(@Nullable Output<String> rdbStorageConnectionString) {
            $.rdbStorageConnectionString = rdbStorageConnectionString;
            return this;
        }

        /**
         * @param rdbStorageConnectionString The storage account connection string for storing rdb file
         * 
         * @return builder
         * 
         */
        public Builder rdbStorageConnectionString(String rdbStorageConnectionString) {
            return rdbStorageConnectionString(Output.of(rdbStorageConnectionString));
        }

        public RedisCommonPropertiesRedisConfigurationArgs build() {
            return $;
        }
    }

}
