// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.cdn.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * Describes the parameters for using a user&#39;s KeyVault for URL Signing Key.
 * 
 */
public final class KeyVaultSigningKeyParametersArgs extends com.pulumi.resources.ResourceArgs {

    public static final KeyVaultSigningKeyParametersArgs Empty = new KeyVaultSigningKeyParametersArgs();

    @Import(name="odataType", required=true)
    private Output<String> odataType;

    public Output<String> odataType() {
        return this.odataType;
    }

    /**
     * Resource group of the user&#39;s Key Vault containing the secret
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return Resource group of the user&#39;s Key Vault containing the secret
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The name of secret in Key Vault.
     * 
     */
    @Import(name="secretName", required=true)
    private Output<String> secretName;

    /**
     * @return The name of secret in Key Vault.
     * 
     */
    public Output<String> secretName() {
        return this.secretName;
    }

    /**
     * The version(GUID) of secret in Key Vault.
     * 
     */
    @Import(name="secretVersion", required=true)
    private Output<String> secretVersion;

    /**
     * @return The version(GUID) of secret in Key Vault.
     * 
     */
    public Output<String> secretVersion() {
        return this.secretVersion;
    }

    /**
     * Subscription Id of the user&#39;s Key Vault containing the secret
     * 
     */
    @Import(name="subscriptionId", required=true)
    private Output<String> subscriptionId;

    /**
     * @return Subscription Id of the user&#39;s Key Vault containing the secret
     * 
     */
    public Output<String> subscriptionId() {
        return this.subscriptionId;
    }

    /**
     * The name of the user&#39;s Key Vault containing the secret
     * 
     */
    @Import(name="vaultName", required=true)
    private Output<String> vaultName;

    /**
     * @return The name of the user&#39;s Key Vault containing the secret
     * 
     */
    public Output<String> vaultName() {
        return this.vaultName;
    }

    private KeyVaultSigningKeyParametersArgs() {}

    private KeyVaultSigningKeyParametersArgs(KeyVaultSigningKeyParametersArgs $) {
        this.odataType = $.odataType;
        this.resourceGroupName = $.resourceGroupName;
        this.secretName = $.secretName;
        this.secretVersion = $.secretVersion;
        this.subscriptionId = $.subscriptionId;
        this.vaultName = $.vaultName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KeyVaultSigningKeyParametersArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KeyVaultSigningKeyParametersArgs $;

        public Builder() {
            $ = new KeyVaultSigningKeyParametersArgs();
        }

        public Builder(KeyVaultSigningKeyParametersArgs defaults) {
            $ = new KeyVaultSigningKeyParametersArgs(Objects.requireNonNull(defaults));
        }

        public Builder odataType(Output<String> odataType) {
            $.odataType = odataType;
            return this;
        }

        public Builder odataType(String odataType) {
            return odataType(Output.of(odataType));
        }

        /**
         * @param resourceGroupName Resource group of the user&#39;s Key Vault containing the secret
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName Resource group of the user&#39;s Key Vault containing the secret
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param secretName The name of secret in Key Vault.
         * 
         * @return builder
         * 
         */
        public Builder secretName(Output<String> secretName) {
            $.secretName = secretName;
            return this;
        }

        /**
         * @param secretName The name of secret in Key Vault.
         * 
         * @return builder
         * 
         */
        public Builder secretName(String secretName) {
            return secretName(Output.of(secretName));
        }

        /**
         * @param secretVersion The version(GUID) of secret in Key Vault.
         * 
         * @return builder
         * 
         */
        public Builder secretVersion(Output<String> secretVersion) {
            $.secretVersion = secretVersion;
            return this;
        }

        /**
         * @param secretVersion The version(GUID) of secret in Key Vault.
         * 
         * @return builder
         * 
         */
        public Builder secretVersion(String secretVersion) {
            return secretVersion(Output.of(secretVersion));
        }

        /**
         * @param subscriptionId Subscription Id of the user&#39;s Key Vault containing the secret
         * 
         * @return builder
         * 
         */
        public Builder subscriptionId(Output<String> subscriptionId) {
            $.subscriptionId = subscriptionId;
            return this;
        }

        /**
         * @param subscriptionId Subscription Id of the user&#39;s Key Vault containing the secret
         * 
         * @return builder
         * 
         */
        public Builder subscriptionId(String subscriptionId) {
            return subscriptionId(Output.of(subscriptionId));
        }

        /**
         * @param vaultName The name of the user&#39;s Key Vault containing the secret
         * 
         * @return builder
         * 
         */
        public Builder vaultName(Output<String> vaultName) {
            $.vaultName = vaultName;
            return this;
        }

        /**
         * @param vaultName The name of the user&#39;s Key Vault containing the secret
         * 
         * @return builder
         * 
         */
        public Builder vaultName(String vaultName) {
            return vaultName(Output.of(vaultName));
        }

        public KeyVaultSigningKeyParametersArgs build() {
            $.odataType = Objects.requireNonNull($.odataType, "expected parameter 'odataType' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.secretName = Objects.requireNonNull($.secretName, "expected parameter 'secretName' to be non-null");
            $.secretVersion = Objects.requireNonNull($.secretVersion, "expected parameter 'secretVersion' to be non-null");
            $.subscriptionId = Objects.requireNonNull($.subscriptionId, "expected parameter 'subscriptionId' to be non-null");
            $.vaultName = Objects.requireNonNull($.vaultName, "expected parameter 'vaultName' to be non-null");
            return $;
        }
    }

}
