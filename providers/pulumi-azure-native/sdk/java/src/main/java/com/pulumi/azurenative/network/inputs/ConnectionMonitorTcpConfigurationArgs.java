// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.azurenative.network.enums.DestinationPortBehavior;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Describes the TCP configuration.
 * 
 */
public final class ConnectionMonitorTcpConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectionMonitorTcpConfigurationArgs Empty = new ConnectionMonitorTcpConfigurationArgs();

    /**
     * Destination port behavior.
     * 
     */
    @Import(name="destinationPortBehavior")
    private @Nullable Output<Either<String,DestinationPortBehavior>> destinationPortBehavior;

    /**
     * @return Destination port behavior.
     * 
     */
    public Optional<Output<Either<String,DestinationPortBehavior>>> destinationPortBehavior() {
        return Optional.ofNullable(this.destinationPortBehavior);
    }

    /**
     * Value indicating whether path evaluation with trace route should be disabled.
     * 
     */
    @Import(name="disableTraceRoute")
    private @Nullable Output<Boolean> disableTraceRoute;

    /**
     * @return Value indicating whether path evaluation with trace route should be disabled.
     * 
     */
    public Optional<Output<Boolean>> disableTraceRoute() {
        return Optional.ofNullable(this.disableTraceRoute);
    }

    /**
     * The port to connect to.
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    /**
     * @return The port to connect to.
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    private ConnectionMonitorTcpConfigurationArgs() {}

    private ConnectionMonitorTcpConfigurationArgs(ConnectionMonitorTcpConfigurationArgs $) {
        this.destinationPortBehavior = $.destinationPortBehavior;
        this.disableTraceRoute = $.disableTraceRoute;
        this.port = $.port;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectionMonitorTcpConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectionMonitorTcpConfigurationArgs $;

        public Builder() {
            $ = new ConnectionMonitorTcpConfigurationArgs();
        }

        public Builder(ConnectionMonitorTcpConfigurationArgs defaults) {
            $ = new ConnectionMonitorTcpConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param destinationPortBehavior Destination port behavior.
         * 
         * @return builder
         * 
         */
        public Builder destinationPortBehavior(@Nullable Output<Either<String,DestinationPortBehavior>> destinationPortBehavior) {
            $.destinationPortBehavior = destinationPortBehavior;
            return this;
        }

        /**
         * @param destinationPortBehavior Destination port behavior.
         * 
         * @return builder
         * 
         */
        public Builder destinationPortBehavior(Either<String,DestinationPortBehavior> destinationPortBehavior) {
            return destinationPortBehavior(Output.of(destinationPortBehavior));
        }

        /**
         * @param destinationPortBehavior Destination port behavior.
         * 
         * @return builder
         * 
         */
        public Builder destinationPortBehavior(String destinationPortBehavior) {
            return destinationPortBehavior(Either.ofLeft(destinationPortBehavior));
        }

        /**
         * @param destinationPortBehavior Destination port behavior.
         * 
         * @return builder
         * 
         */
        public Builder destinationPortBehavior(DestinationPortBehavior destinationPortBehavior) {
            return destinationPortBehavior(Either.ofRight(destinationPortBehavior));
        }

        /**
         * @param disableTraceRoute Value indicating whether path evaluation with trace route should be disabled.
         * 
         * @return builder
         * 
         */
        public Builder disableTraceRoute(@Nullable Output<Boolean> disableTraceRoute) {
            $.disableTraceRoute = disableTraceRoute;
            return this;
        }

        /**
         * @param disableTraceRoute Value indicating whether path evaluation with trace route should be disabled.
         * 
         * @return builder
         * 
         */
        public Builder disableTraceRoute(Boolean disableTraceRoute) {
            return disableTraceRoute(Output.of(disableTraceRoute));
        }

        /**
         * @param port The port to connect to.
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port The port to connect to.
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        public ConnectionMonitorTcpConfigurationArgs build() {
            return $;
        }
    }

}
