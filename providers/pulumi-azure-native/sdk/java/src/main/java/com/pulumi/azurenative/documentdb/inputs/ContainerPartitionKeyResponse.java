// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.documentdb.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The configuration of the partition key to be used for partitioning data into multiple partitions
 * 
 */
public final class ContainerPartitionKeyResponse extends com.pulumi.resources.InvokeArgs {

    public static final ContainerPartitionKeyResponse Empty = new ContainerPartitionKeyResponse();

    /**
     * Indicates the kind of algorithm used for partitioning. For MultiHash, multiple partition keys (upto three maximum) are supported for container create
     * 
     */
    @Import(name="kind")
    private @Nullable String kind;

    /**
     * @return Indicates the kind of algorithm used for partitioning. For MultiHash, multiple partition keys (upto three maximum) are supported for container create
     * 
     */
    public Optional<String> kind() {
        return Optional.ofNullable(this.kind);
    }

    /**
     * List of paths using which data within the container can be partitioned
     * 
     */
    @Import(name="paths")
    private @Nullable List<String> paths;

    /**
     * @return List of paths using which data within the container can be partitioned
     * 
     */
    public Optional<List<String>> paths() {
        return Optional.ofNullable(this.paths);
    }

    /**
     * Indicates if the container is using a system generated partition key
     * 
     */
    @Import(name="systemKey", required=true)
    private Boolean systemKey;

    /**
     * @return Indicates if the container is using a system generated partition key
     * 
     */
    public Boolean systemKey() {
        return this.systemKey;
    }

    /**
     * Indicates the version of the partition key definition
     * 
     */
    @Import(name="version")
    private @Nullable Integer version;

    /**
     * @return Indicates the version of the partition key definition
     * 
     */
    public Optional<Integer> version() {
        return Optional.ofNullable(this.version);
    }

    private ContainerPartitionKeyResponse() {}

    private ContainerPartitionKeyResponse(ContainerPartitionKeyResponse $) {
        this.kind = $.kind;
        this.paths = $.paths;
        this.systemKey = $.systemKey;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContainerPartitionKeyResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContainerPartitionKeyResponse $;

        public Builder() {
            $ = new ContainerPartitionKeyResponse();
        }

        public Builder(ContainerPartitionKeyResponse defaults) {
            $ = new ContainerPartitionKeyResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param kind Indicates the kind of algorithm used for partitioning. For MultiHash, multiple partition keys (upto three maximum) are supported for container create
         * 
         * @return builder
         * 
         */
        public Builder kind(@Nullable String kind) {
            $.kind = kind;
            return this;
        }

        /**
         * @param paths List of paths using which data within the container can be partitioned
         * 
         * @return builder
         * 
         */
        public Builder paths(@Nullable List<String> paths) {
            $.paths = paths;
            return this;
        }

        /**
         * @param paths List of paths using which data within the container can be partitioned
         * 
         * @return builder
         * 
         */
        public Builder paths(String... paths) {
            return paths(List.of(paths));
        }

        /**
         * @param systemKey Indicates if the container is using a system generated partition key
         * 
         * @return builder
         * 
         */
        public Builder systemKey(Boolean systemKey) {
            $.systemKey = systemKey;
            return this;
        }

        /**
         * @param version Indicates the version of the partition key definition
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Integer version) {
            $.version = version;
            return this;
        }

        public ContainerPartitionKeyResponse build() {
            $.kind = Codegen.stringProp("kind").arg($.kind).def("Hash").getNullable();
            $.systemKey = Objects.requireNonNull($.systemKey, "expected parameter 'systemKey' to be non-null");
            return $;
        }
    }

}
