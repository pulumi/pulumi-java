// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.machinelearningservices.inputs;

import com.pulumi.azurenative.machinelearningservices.inputs.DatasetResponseSqlDataPath;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 *  Datastore and reference to location of data such as relativePath, Sql Query and etc.
 * 
 */
public final class DatasetResponseDataPath extends com.pulumi.resources.InvokeArgs {

    public static final DatasetResponseDataPath Empty = new DatasetResponseDataPath();

    /**
     * Additional Properties.
     * 
     */
    @Import(name="additionalProperties")
    private @Nullable Map<String,Object> additionalProperties;

    /**
     * @return Additional Properties.
     * 
     */
    public Optional<Map<String,Object>> additionalProperties() {
        return Optional.ofNullable(this.additionalProperties);
    }

    /**
     * Azure path for Azure Blob or File
     * 
     */
    @Import(name="azureFilePath", required=true)
    private String azureFilePath;

    /**
     * @return Azure path for Azure Blob or File
     * 
     */
    public String azureFilePath() {
        return this.azureFilePath;
    }

    /**
     * Data store Name
     * 
     */
    @Import(name="datastoreName", required=true)
    private String datastoreName;

    /**
     * @return Data store Name
     * 
     */
    public String datastoreName() {
        return this.datastoreName;
    }

    /**
     * HTTP URL.
     * 
     */
    @Import(name="httpUrl", required=true)
    private String httpUrl;

    /**
     * @return HTTP URL.
     * 
     */
    public String httpUrl() {
        return this.httpUrl;
    }

    /**
     * Specify the partition format of path. Defaults to None.
     * 
     */
    @Import(name="partitionFormat", required=true)
    private String partitionFormat;

    /**
     * @return Specify the partition format of path. Defaults to None.
     * 
     */
    public String partitionFormat() {
        return this.partitionFormat;
    }

    /**
     * Whether or not to ignore unmatched path.
     * 
     */
    @Import(name="partitionFormatIgnoreError", required=true)
    private Boolean partitionFormatIgnoreError;

    /**
     * @return Whether or not to ignore unmatched path.
     * 
     */
    public Boolean partitionFormatIgnoreError() {
        return this.partitionFormatIgnoreError;
    }

    /**
     * List of files expanded from a file GLOB specified
     * 
     */
    @Import(name="paths", required=true)
    private List<String> paths;

    /**
     * @return List of files expanded from a file GLOB specified
     * 
     */
    public List<String> paths() {
        return this.paths;
    }

    /**
     * Relative path in the data store
     * 
     */
    @Import(name="relativePath", required=true)
    private String relativePath;

    /**
     * @return Relative path in the data store
     * 
     */
    public String relativePath() {
        return this.relativePath;
    }

    /**
     * Sql Query/Table/Stored Procedure details.
     * 
     */
    @Import(name="sqlDataPath")
    private @Nullable DatasetResponseSqlDataPath sqlDataPath;

    /**
     * @return Sql Query/Table/Stored Procedure details.
     * 
     */
    public Optional<DatasetResponseSqlDataPath> sqlDataPath() {
        return Optional.ofNullable(this.sqlDataPath);
    }

    private DatasetResponseDataPath() {}

    private DatasetResponseDataPath(DatasetResponseDataPath $) {
        this.additionalProperties = $.additionalProperties;
        this.azureFilePath = $.azureFilePath;
        this.datastoreName = $.datastoreName;
        this.httpUrl = $.httpUrl;
        this.partitionFormat = $.partitionFormat;
        this.partitionFormatIgnoreError = $.partitionFormatIgnoreError;
        this.paths = $.paths;
        this.relativePath = $.relativePath;
        this.sqlDataPath = $.sqlDataPath;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatasetResponseDataPath defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatasetResponseDataPath $;

        public Builder() {
            $ = new DatasetResponseDataPath();
        }

        public Builder(DatasetResponseDataPath defaults) {
            $ = new DatasetResponseDataPath(Objects.requireNonNull(defaults));
        }

        /**
         * @param additionalProperties Additional Properties.
         * 
         * @return builder
         * 
         */
        public Builder additionalProperties(@Nullable Map<String,Object> additionalProperties) {
            $.additionalProperties = additionalProperties;
            return this;
        }

        /**
         * @param azureFilePath Azure path for Azure Blob or File
         * 
         * @return builder
         * 
         */
        public Builder azureFilePath(String azureFilePath) {
            $.azureFilePath = azureFilePath;
            return this;
        }

        /**
         * @param datastoreName Data store Name
         * 
         * @return builder
         * 
         */
        public Builder datastoreName(String datastoreName) {
            $.datastoreName = datastoreName;
            return this;
        }

        /**
         * @param httpUrl HTTP URL.
         * 
         * @return builder
         * 
         */
        public Builder httpUrl(String httpUrl) {
            $.httpUrl = httpUrl;
            return this;
        }

        /**
         * @param partitionFormat Specify the partition format of path. Defaults to None.
         * 
         * @return builder
         * 
         */
        public Builder partitionFormat(String partitionFormat) {
            $.partitionFormat = partitionFormat;
            return this;
        }

        /**
         * @param partitionFormatIgnoreError Whether or not to ignore unmatched path.
         * 
         * @return builder
         * 
         */
        public Builder partitionFormatIgnoreError(Boolean partitionFormatIgnoreError) {
            $.partitionFormatIgnoreError = partitionFormatIgnoreError;
            return this;
        }

        /**
         * @param paths List of files expanded from a file GLOB specified
         * 
         * @return builder
         * 
         */
        public Builder paths(List<String> paths) {
            $.paths = paths;
            return this;
        }

        /**
         * @param paths List of files expanded from a file GLOB specified
         * 
         * @return builder
         * 
         */
        public Builder paths(String... paths) {
            return paths(List.of(paths));
        }

        /**
         * @param relativePath Relative path in the data store
         * 
         * @return builder
         * 
         */
        public Builder relativePath(String relativePath) {
            $.relativePath = relativePath;
            return this;
        }

        /**
         * @param sqlDataPath Sql Query/Table/Stored Procedure details.
         * 
         * @return builder
         * 
         */
        public Builder sqlDataPath(@Nullable DatasetResponseSqlDataPath sqlDataPath) {
            $.sqlDataPath = sqlDataPath;
            return this;
        }

        public DatasetResponseDataPath build() {
            $.azureFilePath = Objects.requireNonNull($.azureFilePath, "expected parameter 'azureFilePath' to be non-null");
            $.datastoreName = Objects.requireNonNull($.datastoreName, "expected parameter 'datastoreName' to be non-null");
            $.httpUrl = Objects.requireNonNull($.httpUrl, "expected parameter 'httpUrl' to be non-null");
            $.partitionFormat = Objects.requireNonNull($.partitionFormat, "expected parameter 'partitionFormat' to be non-null");
            $.partitionFormatIgnoreError = Objects.requireNonNull($.partitionFormatIgnoreError, "expected parameter 'partitionFormatIgnoreError' to be non-null");
            $.paths = Objects.requireNonNull($.paths, "expected parameter 'paths' to be non-null");
            $.relativePath = Objects.requireNonNull($.relativePath, "expected parameter 'relativePath' to be non-null");
            return $;
        }
    }

}
