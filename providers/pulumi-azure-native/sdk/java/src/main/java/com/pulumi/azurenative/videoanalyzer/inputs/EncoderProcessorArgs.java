// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.videoanalyzer.inputs;

import com.pulumi.azurenative.videoanalyzer.inputs.EncoderCustomPresetArgs;
import com.pulumi.azurenative.videoanalyzer.inputs.EncoderSystemPresetArgs;
import com.pulumi.azurenative.videoanalyzer.inputs.NodeInputArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Encoder processor allows for encoding of the input content. For example, it can used to change the resolution from 4K to 1280x720.
 * 
 */
public final class EncoderProcessorArgs extends com.pulumi.resources.ResourceArgs {

    public static final EncoderProcessorArgs Empty = new EncoderProcessorArgs();

    /**
     * An array of upstream node references within the topology to be used as inputs for this node.
     * 
     */
    @Import(name="inputs", required=true)
    private Output<List<NodeInputArgs>> inputs;

    /**
     * @return An array of upstream node references within the topology to be used as inputs for this node.
     * 
     */
    public Output<List<NodeInputArgs>> inputs() {
        return this.inputs;
    }

    /**
     * Node name. Must be unique within the topology.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Node name. Must be unique within the topology.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The encoder preset, which defines the recipe or instructions on how the input content should be processed.
     * 
     */
    @Import(name="preset", required=true)
    private Output<Either<EncoderCustomPresetArgs,EncoderSystemPresetArgs>> preset;

    /**
     * @return The encoder preset, which defines the recipe or instructions on how the input content should be processed.
     * 
     */
    public Output<Either<EncoderCustomPresetArgs,EncoderSystemPresetArgs>> preset() {
        return this.preset;
    }

    /**
     * The discriminator for derived types.
     * Expected value is &#39;#Microsoft.VideoAnalyzer.EncoderProcessor&#39;.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The discriminator for derived types.
     * Expected value is &#39;#Microsoft.VideoAnalyzer.EncoderProcessor&#39;.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private EncoderProcessorArgs() {}

    private EncoderProcessorArgs(EncoderProcessorArgs $) {
        this.inputs = $.inputs;
        this.name = $.name;
        this.preset = $.preset;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EncoderProcessorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EncoderProcessorArgs $;

        public Builder() {
            $ = new EncoderProcessorArgs();
        }

        public Builder(EncoderProcessorArgs defaults) {
            $ = new EncoderProcessorArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param inputs An array of upstream node references within the topology to be used as inputs for this node.
         * 
         * @return builder
         * 
         */
        public Builder inputs(Output<List<NodeInputArgs>> inputs) {
            $.inputs = inputs;
            return this;
        }

        /**
         * @param inputs An array of upstream node references within the topology to be used as inputs for this node.
         * 
         * @return builder
         * 
         */
        public Builder inputs(List<NodeInputArgs> inputs) {
            return inputs(Output.of(inputs));
        }

        /**
         * @param inputs An array of upstream node references within the topology to be used as inputs for this node.
         * 
         * @return builder
         * 
         */
        public Builder inputs(NodeInputArgs... inputs) {
            return inputs(List.of(inputs));
        }

        /**
         * @param name Node name. Must be unique within the topology.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Node name. Must be unique within the topology.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param preset The encoder preset, which defines the recipe or instructions on how the input content should be processed.
         * 
         * @return builder
         * 
         */
        public Builder preset(Output<Either<EncoderCustomPresetArgs,EncoderSystemPresetArgs>> preset) {
            $.preset = preset;
            return this;
        }

        /**
         * @param preset The encoder preset, which defines the recipe or instructions on how the input content should be processed.
         * 
         * @return builder
         * 
         */
        public Builder preset(Either<EncoderCustomPresetArgs,EncoderSystemPresetArgs> preset) {
            return preset(Output.of(preset));
        }

        /**
         * @param preset The encoder preset, which defines the recipe or instructions on how the input content should be processed.
         * 
         * @return builder
         * 
         */
        public Builder preset(EncoderCustomPresetArgs preset) {
            return preset(Either.ofLeft(preset));
        }

        /**
         * @param preset The encoder preset, which defines the recipe or instructions on how the input content should be processed.
         * 
         * @return builder
         * 
         */
        public Builder preset(EncoderSystemPresetArgs preset) {
            return preset(Either.ofRight(preset));
        }

        /**
         * @param type The discriminator for derived types.
         * Expected value is &#39;#Microsoft.VideoAnalyzer.EncoderProcessor&#39;.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The discriminator for derived types.
         * Expected value is &#39;#Microsoft.VideoAnalyzer.EncoderProcessor&#39;.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public EncoderProcessorArgs build() {
            $.inputs = Objects.requireNonNull($.inputs, "expected parameter 'inputs' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.preset = Objects.requireNonNull($.preset, "expected parameter 'preset' to be non-null");
            $.type = Codegen.stringProp("type").output().arg($.type).require();
            return $;
        }
    }

}
