// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.web.inputs;

import com.pulumi.azurenative.web.inputs.GitHubActionCodeConfigurationArgs;
import com.pulumi.azurenative.web.inputs.GitHubActionContainerConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The GitHub action configuration.
 * 
 */
public final class GitHubActionConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final GitHubActionConfigurationArgs Empty = new GitHubActionConfigurationArgs();

    /**
     * GitHub Action code configuration.
     * 
     */
    @Import(name="codeConfiguration")
    private @Nullable Output<GitHubActionCodeConfigurationArgs> codeConfiguration;

    /**
     * @return GitHub Action code configuration.
     * 
     */
    public Optional<Output<GitHubActionCodeConfigurationArgs>> codeConfiguration() {
        return Optional.ofNullable(this.codeConfiguration);
    }

    /**
     * GitHub Action container configuration.
     * 
     */
    @Import(name="containerConfiguration")
    private @Nullable Output<GitHubActionContainerConfigurationArgs> containerConfiguration;

    /**
     * @return GitHub Action container configuration.
     * 
     */
    public Optional<Output<GitHubActionContainerConfigurationArgs>> containerConfiguration() {
        return Optional.ofNullable(this.containerConfiguration);
    }

    /**
     * Workflow option to determine whether the workflow file should be generated and written to the repository.
     * 
     */
    @Import(name="generateWorkflowFile")
    private @Nullable Output<Boolean> generateWorkflowFile;

    /**
     * @return Workflow option to determine whether the workflow file should be generated and written to the repository.
     * 
     */
    public Optional<Output<Boolean>> generateWorkflowFile() {
        return Optional.ofNullable(this.generateWorkflowFile);
    }

    /**
     * This will help determine the workflow configuration to select.
     * 
     */
    @Import(name="isLinux")
    private @Nullable Output<Boolean> isLinux;

    /**
     * @return This will help determine the workflow configuration to select.
     * 
     */
    public Optional<Output<Boolean>> isLinux() {
        return Optional.ofNullable(this.isLinux);
    }

    private GitHubActionConfigurationArgs() {}

    private GitHubActionConfigurationArgs(GitHubActionConfigurationArgs $) {
        this.codeConfiguration = $.codeConfiguration;
        this.containerConfiguration = $.containerConfiguration;
        this.generateWorkflowFile = $.generateWorkflowFile;
        this.isLinux = $.isLinux;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GitHubActionConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GitHubActionConfigurationArgs $;

        public Builder() {
            $ = new GitHubActionConfigurationArgs();
        }

        public Builder(GitHubActionConfigurationArgs defaults) {
            $ = new GitHubActionConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param codeConfiguration GitHub Action code configuration.
         * 
         * @return builder
         * 
         */
        public Builder codeConfiguration(@Nullable Output<GitHubActionCodeConfigurationArgs> codeConfiguration) {
            $.codeConfiguration = codeConfiguration;
            return this;
        }

        /**
         * @param codeConfiguration GitHub Action code configuration.
         * 
         * @return builder
         * 
         */
        public Builder codeConfiguration(GitHubActionCodeConfigurationArgs codeConfiguration) {
            return codeConfiguration(Output.of(codeConfiguration));
        }

        /**
         * @param containerConfiguration GitHub Action container configuration.
         * 
         * @return builder
         * 
         */
        public Builder containerConfiguration(@Nullable Output<GitHubActionContainerConfigurationArgs> containerConfiguration) {
            $.containerConfiguration = containerConfiguration;
            return this;
        }

        /**
         * @param containerConfiguration GitHub Action container configuration.
         * 
         * @return builder
         * 
         */
        public Builder containerConfiguration(GitHubActionContainerConfigurationArgs containerConfiguration) {
            return containerConfiguration(Output.of(containerConfiguration));
        }

        /**
         * @param generateWorkflowFile Workflow option to determine whether the workflow file should be generated and written to the repository.
         * 
         * @return builder
         * 
         */
        public Builder generateWorkflowFile(@Nullable Output<Boolean> generateWorkflowFile) {
            $.generateWorkflowFile = generateWorkflowFile;
            return this;
        }

        /**
         * @param generateWorkflowFile Workflow option to determine whether the workflow file should be generated and written to the repository.
         * 
         * @return builder
         * 
         */
        public Builder generateWorkflowFile(Boolean generateWorkflowFile) {
            return generateWorkflowFile(Output.of(generateWorkflowFile));
        }

        /**
         * @param isLinux This will help determine the workflow configuration to select.
         * 
         * @return builder
         * 
         */
        public Builder isLinux(@Nullable Output<Boolean> isLinux) {
            $.isLinux = isLinux;
            return this;
        }

        /**
         * @param isLinux This will help determine the workflow configuration to select.
         * 
         * @return builder
         * 
         */
        public Builder isLinux(Boolean isLinux) {
            return isLinux(Output.of(isLinux));
        }

        public GitHubActionConfigurationArgs build() {
            return $;
        }
    }

}
