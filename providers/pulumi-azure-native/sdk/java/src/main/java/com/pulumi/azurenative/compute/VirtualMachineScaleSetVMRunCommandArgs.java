// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.compute;

import com.pulumi.azurenative.compute.inputs.RunCommandInputParameterArgs;
import com.pulumi.azurenative.compute.inputs.VirtualMachineRunCommandScriptSourceArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VirtualMachineScaleSetVMRunCommandArgs extends com.pulumi.resources.ResourceArgs {

    public static final VirtualMachineScaleSetVMRunCommandArgs Empty = new VirtualMachineScaleSetVMRunCommandArgs();

    /**
     * Optional. If set to true, provisioning will complete as soon as the script starts and will not wait for script to complete.
     * 
     */
    @Import(name="asyncExecution")
    private @Nullable Output<Boolean> asyncExecution;

    /**
     * @return Optional. If set to true, provisioning will complete as soon as the script starts and will not wait for script to complete.
     * 
     */
    public Optional<Output<Boolean>> asyncExecution() {
        return Optional.ofNullable(this.asyncExecution);
    }

    /**
     * Specifies the Azure storage blob where script error stream will be uploaded.
     * 
     */
    @Import(name="errorBlobUri")
    private @Nullable Output<String> errorBlobUri;

    /**
     * @return Specifies the Azure storage blob where script error stream will be uploaded.
     * 
     */
    public Optional<Output<String>> errorBlobUri() {
        return Optional.ofNullable(this.errorBlobUri);
    }

    /**
     * The instance ID of the virtual machine.
     * 
     */
    @Import(name="instanceId", required=true)
    private Output<String> instanceId;

    /**
     * @return The instance ID of the virtual machine.
     * 
     */
    public Output<String> instanceId() {
        return this.instanceId;
    }

    /**
     * Resource location
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Resource location
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Specifies the Azure storage blob where script output stream will be uploaded.
     * 
     */
    @Import(name="outputBlobUri")
    private @Nullable Output<String> outputBlobUri;

    /**
     * @return Specifies the Azure storage blob where script output stream will be uploaded.
     * 
     */
    public Optional<Output<String>> outputBlobUri() {
        return Optional.ofNullable(this.outputBlobUri);
    }

    /**
     * The parameters used by the script.
     * 
     */
    @Import(name="parameters")
    private @Nullable Output<List<RunCommandInputParameterArgs>> parameters;

    /**
     * @return The parameters used by the script.
     * 
     */
    public Optional<Output<List<RunCommandInputParameterArgs>>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    /**
     * The parameters used by the script.
     * 
     */
    @Import(name="protectedParameters")
    private @Nullable Output<List<RunCommandInputParameterArgs>> protectedParameters;

    /**
     * @return The parameters used by the script.
     * 
     */
    public Optional<Output<List<RunCommandInputParameterArgs>>> protectedParameters() {
        return Optional.ofNullable(this.protectedParameters);
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Specifies the user account password on the VM when executing the run command.
     * 
     */
    @Import(name="runAsPassword")
    private @Nullable Output<String> runAsPassword;

    /**
     * @return Specifies the user account password on the VM when executing the run command.
     * 
     */
    public Optional<Output<String>> runAsPassword() {
        return Optional.ofNullable(this.runAsPassword);
    }

    /**
     * Specifies the user account on the VM when executing the run command.
     * 
     */
    @Import(name="runAsUser")
    private @Nullable Output<String> runAsUser;

    /**
     * @return Specifies the user account on the VM when executing the run command.
     * 
     */
    public Optional<Output<String>> runAsUser() {
        return Optional.ofNullable(this.runAsUser);
    }

    /**
     * The name of the virtual machine run command.
     * 
     */
    @Import(name="runCommandName")
    private @Nullable Output<String> runCommandName;

    /**
     * @return The name of the virtual machine run command.
     * 
     */
    public Optional<Output<String>> runCommandName() {
        return Optional.ofNullable(this.runCommandName);
    }

    /**
     * The source of the run command script.
     * 
     */
    @Import(name="source")
    private @Nullable Output<VirtualMachineRunCommandScriptSourceArgs> source;

    /**
     * @return The source of the run command script.
     * 
     */
    public Optional<Output<VirtualMachineRunCommandScriptSourceArgs>> source() {
        return Optional.ofNullable(this.source);
    }

    /**
     * Resource tags
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Resource tags
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The timeout in seconds to execute the run command.
     * 
     */
    @Import(name="timeoutInSeconds")
    private @Nullable Output<Integer> timeoutInSeconds;

    /**
     * @return The timeout in seconds to execute the run command.
     * 
     */
    public Optional<Output<Integer>> timeoutInSeconds() {
        return Optional.ofNullable(this.timeoutInSeconds);
    }

    /**
     * The name of the VM scale set.
     * 
     */
    @Import(name="vmScaleSetName", required=true)
    private Output<String> vmScaleSetName;

    /**
     * @return The name of the VM scale set.
     * 
     */
    public Output<String> vmScaleSetName() {
        return this.vmScaleSetName;
    }

    private VirtualMachineScaleSetVMRunCommandArgs() {}

    private VirtualMachineScaleSetVMRunCommandArgs(VirtualMachineScaleSetVMRunCommandArgs $) {
        this.asyncExecution = $.asyncExecution;
        this.errorBlobUri = $.errorBlobUri;
        this.instanceId = $.instanceId;
        this.location = $.location;
        this.outputBlobUri = $.outputBlobUri;
        this.parameters = $.parameters;
        this.protectedParameters = $.protectedParameters;
        this.resourceGroupName = $.resourceGroupName;
        this.runAsPassword = $.runAsPassword;
        this.runAsUser = $.runAsUser;
        this.runCommandName = $.runCommandName;
        this.source = $.source;
        this.tags = $.tags;
        this.timeoutInSeconds = $.timeoutInSeconds;
        this.vmScaleSetName = $.vmScaleSetName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VirtualMachineScaleSetVMRunCommandArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VirtualMachineScaleSetVMRunCommandArgs $;

        public Builder() {
            $ = new VirtualMachineScaleSetVMRunCommandArgs();
        }

        public Builder(VirtualMachineScaleSetVMRunCommandArgs defaults) {
            $ = new VirtualMachineScaleSetVMRunCommandArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param asyncExecution Optional. If set to true, provisioning will complete as soon as the script starts and will not wait for script to complete.
         * 
         * @return builder
         * 
         */
        public Builder asyncExecution(@Nullable Output<Boolean> asyncExecution) {
            $.asyncExecution = asyncExecution;
            return this;
        }

        /**
         * @param asyncExecution Optional. If set to true, provisioning will complete as soon as the script starts and will not wait for script to complete.
         * 
         * @return builder
         * 
         */
        public Builder asyncExecution(Boolean asyncExecution) {
            return asyncExecution(Output.of(asyncExecution));
        }

        /**
         * @param errorBlobUri Specifies the Azure storage blob where script error stream will be uploaded.
         * 
         * @return builder
         * 
         */
        public Builder errorBlobUri(@Nullable Output<String> errorBlobUri) {
            $.errorBlobUri = errorBlobUri;
            return this;
        }

        /**
         * @param errorBlobUri Specifies the Azure storage blob where script error stream will be uploaded.
         * 
         * @return builder
         * 
         */
        public Builder errorBlobUri(String errorBlobUri) {
            return errorBlobUri(Output.of(errorBlobUri));
        }

        /**
         * @param instanceId The instance ID of the virtual machine.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(Output<String> instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        /**
         * @param instanceId The instance ID of the virtual machine.
         * 
         * @return builder
         * 
         */
        public Builder instanceId(String instanceId) {
            return instanceId(Output.of(instanceId));
        }

        /**
         * @param location Resource location
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Resource location
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param outputBlobUri Specifies the Azure storage blob where script output stream will be uploaded.
         * 
         * @return builder
         * 
         */
        public Builder outputBlobUri(@Nullable Output<String> outputBlobUri) {
            $.outputBlobUri = outputBlobUri;
            return this;
        }

        /**
         * @param outputBlobUri Specifies the Azure storage blob where script output stream will be uploaded.
         * 
         * @return builder
         * 
         */
        public Builder outputBlobUri(String outputBlobUri) {
            return outputBlobUri(Output.of(outputBlobUri));
        }

        /**
         * @param parameters The parameters used by the script.
         * 
         * @return builder
         * 
         */
        public Builder parameters(@Nullable Output<List<RunCommandInputParameterArgs>> parameters) {
            $.parameters = parameters;
            return this;
        }

        /**
         * @param parameters The parameters used by the script.
         * 
         * @return builder
         * 
         */
        public Builder parameters(List<RunCommandInputParameterArgs> parameters) {
            return parameters(Output.of(parameters));
        }

        /**
         * @param parameters The parameters used by the script.
         * 
         * @return builder
         * 
         */
        public Builder parameters(RunCommandInputParameterArgs... parameters) {
            return parameters(List.of(parameters));
        }

        /**
         * @param protectedParameters The parameters used by the script.
         * 
         * @return builder
         * 
         */
        public Builder protectedParameters(@Nullable Output<List<RunCommandInputParameterArgs>> protectedParameters) {
            $.protectedParameters = protectedParameters;
            return this;
        }

        /**
         * @param protectedParameters The parameters used by the script.
         * 
         * @return builder
         * 
         */
        public Builder protectedParameters(List<RunCommandInputParameterArgs> protectedParameters) {
            return protectedParameters(Output.of(protectedParameters));
        }

        /**
         * @param protectedParameters The parameters used by the script.
         * 
         * @return builder
         * 
         */
        public Builder protectedParameters(RunCommandInputParameterArgs... protectedParameters) {
            return protectedParameters(List.of(protectedParameters));
        }

        /**
         * @param resourceGroupName The name of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param runAsPassword Specifies the user account password on the VM when executing the run command.
         * 
         * @return builder
         * 
         */
        public Builder runAsPassword(@Nullable Output<String> runAsPassword) {
            $.runAsPassword = runAsPassword;
            return this;
        }

        /**
         * @param runAsPassword Specifies the user account password on the VM when executing the run command.
         * 
         * @return builder
         * 
         */
        public Builder runAsPassword(String runAsPassword) {
            return runAsPassword(Output.of(runAsPassword));
        }

        /**
         * @param runAsUser Specifies the user account on the VM when executing the run command.
         * 
         * @return builder
         * 
         */
        public Builder runAsUser(@Nullable Output<String> runAsUser) {
            $.runAsUser = runAsUser;
            return this;
        }

        /**
         * @param runAsUser Specifies the user account on the VM when executing the run command.
         * 
         * @return builder
         * 
         */
        public Builder runAsUser(String runAsUser) {
            return runAsUser(Output.of(runAsUser));
        }

        /**
         * @param runCommandName The name of the virtual machine run command.
         * 
         * @return builder
         * 
         */
        public Builder runCommandName(@Nullable Output<String> runCommandName) {
            $.runCommandName = runCommandName;
            return this;
        }

        /**
         * @param runCommandName The name of the virtual machine run command.
         * 
         * @return builder
         * 
         */
        public Builder runCommandName(String runCommandName) {
            return runCommandName(Output.of(runCommandName));
        }

        /**
         * @param source The source of the run command script.
         * 
         * @return builder
         * 
         */
        public Builder source(@Nullable Output<VirtualMachineRunCommandScriptSourceArgs> source) {
            $.source = source;
            return this;
        }

        /**
         * @param source The source of the run command script.
         * 
         * @return builder
         * 
         */
        public Builder source(VirtualMachineRunCommandScriptSourceArgs source) {
            return source(Output.of(source));
        }

        /**
         * @param tags Resource tags
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Resource tags
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param timeoutInSeconds The timeout in seconds to execute the run command.
         * 
         * @return builder
         * 
         */
        public Builder timeoutInSeconds(@Nullable Output<Integer> timeoutInSeconds) {
            $.timeoutInSeconds = timeoutInSeconds;
            return this;
        }

        /**
         * @param timeoutInSeconds The timeout in seconds to execute the run command.
         * 
         * @return builder
         * 
         */
        public Builder timeoutInSeconds(Integer timeoutInSeconds) {
            return timeoutInSeconds(Output.of(timeoutInSeconds));
        }

        /**
         * @param vmScaleSetName The name of the VM scale set.
         * 
         * @return builder
         * 
         */
        public Builder vmScaleSetName(Output<String> vmScaleSetName) {
            $.vmScaleSetName = vmScaleSetName;
            return this;
        }

        /**
         * @param vmScaleSetName The name of the VM scale set.
         * 
         * @return builder
         * 
         */
        public Builder vmScaleSetName(String vmScaleSetName) {
            return vmScaleSetName(Output.of(vmScaleSetName));
        }

        public VirtualMachineScaleSetVMRunCommandArgs build() {
            $.asyncExecution = Codegen.booleanProp("asyncExecution").output().arg($.asyncExecution).def(false).getNullable();
            $.instanceId = Objects.requireNonNull($.instanceId, "expected parameter 'instanceId' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.vmScaleSetName = Objects.requireNonNull($.vmScaleSetName, "expected parameter 'vmScaleSetName' to be non-null");
            return $;
        }
    }

}
