// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.documentdb.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The conflict resolution policy for the container.
 * 
 */
public final class ConflictResolutionPolicyResponse extends com.pulumi.resources.InvokeArgs {

    public static final ConflictResolutionPolicyResponse Empty = new ConflictResolutionPolicyResponse();

    /**
     * The conflict resolution path in the case of LastWriterWins mode.
     * 
     */
    @Import(name="conflictResolutionPath")
      private final @Nullable String conflictResolutionPath;

    public Optional<String> conflictResolutionPath() {
        return this.conflictResolutionPath == null ? Optional.empty() : Optional.ofNullable(this.conflictResolutionPath);
    }

    /**
     * The procedure to resolve conflicts in the case of custom mode.
     * 
     */
    @Import(name="conflictResolutionProcedure")
      private final @Nullable String conflictResolutionProcedure;

    public Optional<String> conflictResolutionProcedure() {
        return this.conflictResolutionProcedure == null ? Optional.empty() : Optional.ofNullable(this.conflictResolutionProcedure);
    }

    /**
     * Indicates the conflict resolution mode.
     * 
     */
    @Import(name="mode")
      private final @Nullable String mode;

    public Optional<String> mode() {
        return this.mode == null ? Optional.empty() : Optional.ofNullable(this.mode);
    }

    public ConflictResolutionPolicyResponse(
        @Nullable String conflictResolutionPath,
        @Nullable String conflictResolutionProcedure,
        @Nullable String mode) {
        this.conflictResolutionPath = conflictResolutionPath;
        this.conflictResolutionProcedure = conflictResolutionProcedure;
        this.mode = mode == null ? "LastWriterWins" : mode;
    }

    private ConflictResolutionPolicyResponse() {
        this.conflictResolutionPath = null;
        this.conflictResolutionProcedure = null;
        this.mode = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConflictResolutionPolicyResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String conflictResolutionPath;
        private @Nullable String conflictResolutionProcedure;
        private @Nullable String mode;

        public Builder() {
    	      // Empty
        }

        public Builder(ConflictResolutionPolicyResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.conflictResolutionPath = defaults.conflictResolutionPath;
    	      this.conflictResolutionProcedure = defaults.conflictResolutionProcedure;
    	      this.mode = defaults.mode;
        }

        public Builder conflictResolutionPath(@Nullable String conflictResolutionPath) {
            this.conflictResolutionPath = conflictResolutionPath;
            return this;
        }
        public Builder conflictResolutionProcedure(@Nullable String conflictResolutionProcedure) {
            this.conflictResolutionProcedure = conflictResolutionProcedure;
            return this;
        }
        public Builder mode(@Nullable String mode) {
            this.mode = mode;
            return this;
        }        public ConflictResolutionPolicyResponse build() {
            return new ConflictResolutionPolicyResponse(conflictResolutionPath, conflictResolutionProcedure, mode);
        }
    }
}
