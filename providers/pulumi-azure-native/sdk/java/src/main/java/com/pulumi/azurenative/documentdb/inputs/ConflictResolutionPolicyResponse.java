// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.documentdb.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The conflict resolution policy for the container.
 * 
 */
public final class ConflictResolutionPolicyResponse extends com.pulumi.resources.InvokeArgs {

    public static final ConflictResolutionPolicyResponse Empty = new ConflictResolutionPolicyResponse();

    /**
     * The conflict resolution path in the case of LastWriterWins mode.
     * 
     */
    @Import(name="conflictResolutionPath")
    private @Nullable String conflictResolutionPath;

    /**
     * @return The conflict resolution path in the case of LastWriterWins mode.
     * 
     */
    public Optional<String> conflictResolutionPath() {
        return Optional.ofNullable(this.conflictResolutionPath);
    }

    /**
     * The procedure to resolve conflicts in the case of custom mode.
     * 
     */
    @Import(name="conflictResolutionProcedure")
    private @Nullable String conflictResolutionProcedure;

    /**
     * @return The procedure to resolve conflicts in the case of custom mode.
     * 
     */
    public Optional<String> conflictResolutionProcedure() {
        return Optional.ofNullable(this.conflictResolutionProcedure);
    }

    /**
     * Indicates the conflict resolution mode.
     * 
     */
    @Import(name="mode")
    private @Nullable String mode;

    /**
     * @return Indicates the conflict resolution mode.
     * 
     */
    public Optional<String> mode() {
        return Optional.ofNullable(this.mode);
    }

    private ConflictResolutionPolicyResponse() {}

    private ConflictResolutionPolicyResponse(ConflictResolutionPolicyResponse $) {
        this.conflictResolutionPath = $.conflictResolutionPath;
        this.conflictResolutionProcedure = $.conflictResolutionProcedure;
        this.mode = $.mode;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConflictResolutionPolicyResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConflictResolutionPolicyResponse $;

        public Builder() {
            $ = new ConflictResolutionPolicyResponse();
        }

        public Builder(ConflictResolutionPolicyResponse defaults) {
            $ = new ConflictResolutionPolicyResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param conflictResolutionPath The conflict resolution path in the case of LastWriterWins mode.
         * 
         * @return builder
         * 
         */
        public Builder conflictResolutionPath(@Nullable String conflictResolutionPath) {
            $.conflictResolutionPath = conflictResolutionPath;
            return this;
        }

        /**
         * @param conflictResolutionProcedure The procedure to resolve conflicts in the case of custom mode.
         * 
         * @return builder
         * 
         */
        public Builder conflictResolutionProcedure(@Nullable String conflictResolutionProcedure) {
            $.conflictResolutionProcedure = conflictResolutionProcedure;
            return this;
        }

        /**
         * @param mode Indicates the conflict resolution mode.
         * 
         * @return builder
         * 
         */
        public Builder mode(@Nullable String mode) {
            $.mode = mode;
            return this;
        }

        public ConflictResolutionPolicyResponse build() {
            $.mode = Codegen.stringProp("mode").arg($.mode).def("LastWriterWins").getNullable();
            return $;
        }
    }

}
