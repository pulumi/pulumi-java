// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.synapse.inputs;

import com.pulumi.azurenative.synapse.inputs.IntegrationRuntimeComputePropertiesArgs;
import com.pulumi.azurenative.synapse.inputs.IntegrationRuntimeSsisPropertiesArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Managed integration runtime, including managed elastic and managed dedicated integration runtimes.
 * 
 */
public final class ManagedIntegrationRuntimeArgs extends com.pulumi.resources.ResourceArgs {

    public static final ManagedIntegrationRuntimeArgs Empty = new ManagedIntegrationRuntimeArgs();

    /**
     * The compute resource for managed integration runtime.
     * 
     */
    @Import(name="computeProperties")
    private @Nullable Output<IntegrationRuntimeComputePropertiesArgs> computeProperties;

    public Optional<Output<IntegrationRuntimeComputePropertiesArgs>> computeProperties() {
        return Optional.ofNullable(this.computeProperties);
    }

    /**
     * Integration runtime description.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * SSIS properties for managed integration runtime.
     * 
     */
    @Import(name="ssisProperties")
    private @Nullable Output<IntegrationRuntimeSsisPropertiesArgs> ssisProperties;

    public Optional<Output<IntegrationRuntimeSsisPropertiesArgs>> ssisProperties() {
        return Optional.ofNullable(this.ssisProperties);
    }

    /**
     * The type of integration runtime.
     * Expected value is &#39;Managed&#39;.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    private ManagedIntegrationRuntimeArgs() {}

    private ManagedIntegrationRuntimeArgs(ManagedIntegrationRuntimeArgs $) {
        this.computeProperties = $.computeProperties;
        this.description = $.description;
        this.ssisProperties = $.ssisProperties;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagedIntegrationRuntimeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagedIntegrationRuntimeArgs $;

        public Builder() {
            $ = new ManagedIntegrationRuntimeArgs();
        }

        public Builder(ManagedIntegrationRuntimeArgs defaults) {
            $ = new ManagedIntegrationRuntimeArgs(Objects.requireNonNull(defaults));
        }

        public Builder computeProperties(@Nullable Output<IntegrationRuntimeComputePropertiesArgs> computeProperties) {
            $.computeProperties = computeProperties;
            return this;
        }

        public Builder computeProperties(IntegrationRuntimeComputePropertiesArgs computeProperties) {
            return computeProperties(Output.of(computeProperties));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder ssisProperties(@Nullable Output<IntegrationRuntimeSsisPropertiesArgs> ssisProperties) {
            $.ssisProperties = ssisProperties;
            return this;
        }

        public Builder ssisProperties(IntegrationRuntimeSsisPropertiesArgs ssisProperties) {
            return ssisProperties(Output.of(ssisProperties));
        }

        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public ManagedIntegrationRuntimeArgs build() {
            $.type = Codegen.stringProp("type").output().arg($.type).require();
            return $;
        }
    }

}
