// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.servicefabric.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Double;
import java.util.Objects;


public final class ApplicationTypeVersionsCleanupPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApplicationTypeVersionsCleanupPolicyArgs Empty = new ApplicationTypeVersionsCleanupPolicyArgs();

    /**
     * Number of unused versions per application type to keep.
     * 
     */
    @Import(name="maxUnusedVersionsToKeep", required=true)
      private final Output<Double> maxUnusedVersionsToKeep;

    public Output<Double> maxUnusedVersionsToKeep() {
        return this.maxUnusedVersionsToKeep;
    }

    public ApplicationTypeVersionsCleanupPolicyArgs(Output<Double> maxUnusedVersionsToKeep) {
        this.maxUnusedVersionsToKeep = Objects.requireNonNull(maxUnusedVersionsToKeep, "expected parameter 'maxUnusedVersionsToKeep' to be non-null");
    }

    private ApplicationTypeVersionsCleanupPolicyArgs() {
        this.maxUnusedVersionsToKeep = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ApplicationTypeVersionsCleanupPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<Double> maxUnusedVersionsToKeep;

        public Builder() {
    	      // Empty
        }

        public Builder(ApplicationTypeVersionsCleanupPolicyArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.maxUnusedVersionsToKeep = defaults.maxUnusedVersionsToKeep;
        }

        public Builder maxUnusedVersionsToKeep(Output<Double> maxUnusedVersionsToKeep) {
            this.maxUnusedVersionsToKeep = Objects.requireNonNull(maxUnusedVersionsToKeep);
            return this;
        }
        public Builder maxUnusedVersionsToKeep(Double maxUnusedVersionsToKeep) {
            this.maxUnusedVersionsToKeep = Output.of(Objects.requireNonNull(maxUnusedVersionsToKeep));
            return this;
        }        public ApplicationTypeVersionsCleanupPolicyArgs build() {
            return new ApplicationTypeVersionsCleanupPolicyArgs(maxUnusedVersionsToKeep);
        }
    }
}
