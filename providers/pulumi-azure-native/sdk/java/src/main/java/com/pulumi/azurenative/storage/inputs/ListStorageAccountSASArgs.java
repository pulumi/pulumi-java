// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.storage.inputs;

import com.pulumi.azurenative.storage.enums.HttpProtocol;
import com.pulumi.azurenative.storage.enums.Permissions;
import com.pulumi.azurenative.storage.enums.Services;
import com.pulumi.azurenative.storage.enums.SignedResourceTypes;
import com.pulumi.core.Either;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ListStorageAccountSASArgs extends com.pulumi.resources.InvokeArgs {

    public static final ListStorageAccountSASArgs Empty = new ListStorageAccountSASArgs();

    /**
     * The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
     * 
     */
    @Import(name="accountName", required=true)
      private final String accountName;

    public String accountName() {
        return this.accountName;
    }

    /**
     * An IP address or a range of IP addresses from which to accept requests.
     * 
     */
    @Import(name="iPAddressOrRange")
      private final @Nullable String iPAddressOrRange;

    public Optional<String> iPAddressOrRange() {
        return this.iPAddressOrRange == null ? Optional.empty() : Optional.ofNullable(this.iPAddressOrRange);
    }

    /**
     * The key to sign the account SAS token with.
     * 
     */
    @Import(name="keyToSign")
      private final @Nullable String keyToSign;

    public Optional<String> keyToSign() {
        return this.keyToSign == null ? Optional.empty() : Optional.ofNullable(this.keyToSign);
    }

    /**
     * The signed permissions for the account SAS. Possible values include: Read (r), Write (w), Delete (d), List (l), Add (a), Create (c), Update (u) and Process (p).
     * 
     */
    @Import(name="permissions", required=true)
      private final Either<String,Permissions> permissions;

    public Either<String,Permissions> permissions() {
        return this.permissions;
    }

    /**
     * The protocol permitted for a request made with the account SAS.
     * 
     */
    @Import(name="protocols")
      private final @Nullable HttpProtocol protocols;

    public Optional<HttpProtocol> protocols() {
        return this.protocols == null ? Optional.empty() : Optional.ofNullable(this.protocols);
    }

    /**
     * The name of the resource group within the user's subscription. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final String resourceGroupName;

    public String resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The signed resource types that are accessible with the account SAS. Service (s): Access to service-level APIs; Container (c): Access to container-level APIs; Object (o): Access to object-level APIs for blobs, queue messages, table entities, and files.
     * 
     */
    @Import(name="resourceTypes", required=true)
      private final Either<String,SignedResourceTypes> resourceTypes;

    public Either<String,SignedResourceTypes> resourceTypes() {
        return this.resourceTypes;
    }

    /**
     * The signed services accessible with the account SAS. Possible values include: Blob (b), Queue (q), Table (t), File (f).
     * 
     */
    @Import(name="services", required=true)
      private final Either<String,Services> services;

    public Either<String,Services> services() {
        return this.services;
    }

    /**
     * The time at which the shared access signature becomes invalid.
     * 
     */
    @Import(name="sharedAccessExpiryTime", required=true)
      private final String sharedAccessExpiryTime;

    public String sharedAccessExpiryTime() {
        return this.sharedAccessExpiryTime;
    }

    /**
     * The time at which the SAS becomes valid.
     * 
     */
    @Import(name="sharedAccessStartTime")
      private final @Nullable String sharedAccessStartTime;

    public Optional<String> sharedAccessStartTime() {
        return this.sharedAccessStartTime == null ? Optional.empty() : Optional.ofNullable(this.sharedAccessStartTime);
    }

    public ListStorageAccountSASArgs(
        String accountName,
        @Nullable String iPAddressOrRange,
        @Nullable String keyToSign,
        Either<String,Permissions> permissions,
        @Nullable HttpProtocol protocols,
        String resourceGroupName,
        Either<String,SignedResourceTypes> resourceTypes,
        Either<String,Services> services,
        String sharedAccessExpiryTime,
        @Nullable String sharedAccessStartTime) {
        this.accountName = Objects.requireNonNull(accountName, "expected parameter 'accountName' to be non-null");
        this.iPAddressOrRange = iPAddressOrRange;
        this.keyToSign = keyToSign;
        this.permissions = Objects.requireNonNull(permissions, "expected parameter 'permissions' to be non-null");
        this.protocols = protocols;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.resourceTypes = Objects.requireNonNull(resourceTypes, "expected parameter 'resourceTypes' to be non-null");
        this.services = Objects.requireNonNull(services, "expected parameter 'services' to be non-null");
        this.sharedAccessExpiryTime = Objects.requireNonNull(sharedAccessExpiryTime, "expected parameter 'sharedAccessExpiryTime' to be non-null");
        this.sharedAccessStartTime = sharedAccessStartTime;
    }

    private ListStorageAccountSASArgs() {
        this.accountName = null;
        this.iPAddressOrRange = null;
        this.keyToSign = null;
        this.permissions = null;
        this.protocols = null;
        this.resourceGroupName = null;
        this.resourceTypes = null;
        this.services = null;
        this.sharedAccessExpiryTime = null;
        this.sharedAccessStartTime = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ListStorageAccountSASArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String accountName;
        private @Nullable String iPAddressOrRange;
        private @Nullable String keyToSign;
        private Either<String,Permissions> permissions;
        private @Nullable HttpProtocol protocols;
        private String resourceGroupName;
        private Either<String,SignedResourceTypes> resourceTypes;
        private Either<String,Services> services;
        private String sharedAccessExpiryTime;
        private @Nullable String sharedAccessStartTime;

        public Builder() {
    	      // Empty
        }

        public Builder(ListStorageAccountSASArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountName = defaults.accountName;
    	      this.iPAddressOrRange = defaults.iPAddressOrRange;
    	      this.keyToSign = defaults.keyToSign;
    	      this.permissions = defaults.permissions;
    	      this.protocols = defaults.protocols;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.resourceTypes = defaults.resourceTypes;
    	      this.services = defaults.services;
    	      this.sharedAccessExpiryTime = defaults.sharedAccessExpiryTime;
    	      this.sharedAccessStartTime = defaults.sharedAccessStartTime;
        }

        public Builder accountName(String accountName) {
            this.accountName = Objects.requireNonNull(accountName);
            return this;
        }
        public Builder iPAddressOrRange(@Nullable String iPAddressOrRange) {
            this.iPAddressOrRange = iPAddressOrRange;
            return this;
        }
        public Builder keyToSign(@Nullable String keyToSign) {
            this.keyToSign = keyToSign;
            return this;
        }
        public Builder permissions(Either<String,Permissions> permissions) {
            this.permissions = Objects.requireNonNull(permissions);
            return this;
        }
        public Builder protocols(@Nullable HttpProtocol protocols) {
            this.protocols = protocols;
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceTypes(Either<String,SignedResourceTypes> resourceTypes) {
            this.resourceTypes = Objects.requireNonNull(resourceTypes);
            return this;
        }
        public Builder services(Either<String,Services> services) {
            this.services = Objects.requireNonNull(services);
            return this;
        }
        public Builder sharedAccessExpiryTime(String sharedAccessExpiryTime) {
            this.sharedAccessExpiryTime = Objects.requireNonNull(sharedAccessExpiryTime);
            return this;
        }
        public Builder sharedAccessStartTime(@Nullable String sharedAccessStartTime) {
            this.sharedAccessStartTime = sharedAccessStartTime;
            return this;
        }        public ListStorageAccountSASArgs build() {
            return new ListStorageAccountSASArgs(accountName, iPAddressOrRange, keyToSign, permissions, protocols, resourceGroupName, resourceTypes, services, sharedAccessExpiryTime, sharedAccessStartTime);
        }
    }
}
