// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datamigration.inputs;

import com.pulumi.azurenative.datamigration.inputs.SchemaComparisonValidationResultTypeResponse;
import com.pulumi.azurenative.datamigration.inputs.ValidationErrorResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Results for schema comparison between the source and target
 * 
 */
public final class SchemaComparisonValidationResultResponse extends com.pulumi.resources.InvokeArgs {

    public static final SchemaComparisonValidationResultResponse Empty = new SchemaComparisonValidationResultResponse();

    /**
     * List of schema differences between the source and target databases
     * 
     */
    @Import(name="schemaDifferences", required=true)
    private SchemaComparisonValidationResultTypeResponse schemaDifferences;

    public SchemaComparisonValidationResultTypeResponse schemaDifferences() {
        return this.schemaDifferences;
    }

    /**
     * Count of source database objects
     * 
     */
    @Import(name="sourceDatabaseObjectCount")
    private @Nullable Map<String,Double> sourceDatabaseObjectCount;

    public Optional<Map<String,Double>> sourceDatabaseObjectCount() {
        return Optional.ofNullable(this.sourceDatabaseObjectCount);
    }

    /**
     * Count of target database objects
     * 
     */
    @Import(name="targetDatabaseObjectCount")
    private @Nullable Map<String,Double> targetDatabaseObjectCount;

    public Optional<Map<String,Double>> targetDatabaseObjectCount() {
        return Optional.ofNullable(this.targetDatabaseObjectCount);
    }

    /**
     * List of errors that happened while performing schema compare validation
     * 
     */
    @Import(name="validationErrors", required=true)
    private ValidationErrorResponse validationErrors;

    public ValidationErrorResponse validationErrors() {
        return this.validationErrors;
    }

    private SchemaComparisonValidationResultResponse() {}

    private SchemaComparisonValidationResultResponse(SchemaComparisonValidationResultResponse $) {
        this.schemaDifferences = $.schemaDifferences;
        this.sourceDatabaseObjectCount = $.sourceDatabaseObjectCount;
        this.targetDatabaseObjectCount = $.targetDatabaseObjectCount;
        this.validationErrors = $.validationErrors;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SchemaComparisonValidationResultResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SchemaComparisonValidationResultResponse $;

        public Builder() {
            $ = new SchemaComparisonValidationResultResponse();
        }

        public Builder(SchemaComparisonValidationResultResponse defaults) {
            $ = new SchemaComparisonValidationResultResponse(Objects.requireNonNull(defaults));
        }

        public Builder schemaDifferences(SchemaComparisonValidationResultTypeResponse schemaDifferences) {
            $.schemaDifferences = schemaDifferences;
            return this;
        }

        public Builder sourceDatabaseObjectCount(@Nullable Map<String,Double> sourceDatabaseObjectCount) {
            $.sourceDatabaseObjectCount = sourceDatabaseObjectCount;
            return this;
        }

        public Builder targetDatabaseObjectCount(@Nullable Map<String,Double> targetDatabaseObjectCount) {
            $.targetDatabaseObjectCount = targetDatabaseObjectCount;
            return this;
        }

        public Builder validationErrors(ValidationErrorResponse validationErrors) {
            $.validationErrors = validationErrors;
            return this;
        }

        public SchemaComparisonValidationResultResponse build() {
            $.schemaDifferences = Objects.requireNonNull($.schemaDifferences, "expected parameter 'schemaDifferences' to be non-null");
            $.validationErrors = Objects.requireNonNull($.validationErrors, "expected parameter 'validationErrors' to be non-null");
            return $;
        }
    }

}
