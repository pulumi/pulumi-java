// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.kubernetes.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;


/**
 * Identity for the connected cluster.
 * 
 */
public final class ConnectedClusterIdentityResponse extends com.pulumi.resources.InvokeArgs {

    public static final ConnectedClusterIdentityResponse Empty = new ConnectedClusterIdentityResponse();

    /**
     * The principal id of connected cluster identity. This property will only be provided for a system assigned identity.
     * 
     */
    @Import(name="principalId", required=true)
    private String principalId;

    /**
     * @return The principal id of connected cluster identity. This property will only be provided for a system assigned identity.
     * 
     */
    public String principalId() {
        return this.principalId;
    }

    /**
     * The tenant id associated with the connected cluster. This property will only be provided for a system assigned identity.
     * 
     */
    @Import(name="tenantId", required=true)
    private String tenantId;

    /**
     * @return The tenant id associated with the connected cluster. This property will only be provided for a system assigned identity.
     * 
     */
    public String tenantId() {
        return this.tenantId;
    }

    /**
     * The type of identity used for the connected cluster. The type &#39;SystemAssigned, includes a system created identity. The type &#39;None&#39; means no identity is assigned to the connected cluster.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    /**
     * @return The type of identity used for the connected cluster. The type &#39;SystemAssigned, includes a system created identity. The type &#39;None&#39; means no identity is assigned to the connected cluster.
     * 
     */
    public String type() {
        return this.type;
    }

    private ConnectedClusterIdentityResponse() {}

    private ConnectedClusterIdentityResponse(ConnectedClusterIdentityResponse $) {
        this.principalId = $.principalId;
        this.tenantId = $.tenantId;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectedClusterIdentityResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectedClusterIdentityResponse $;

        public Builder() {
            $ = new ConnectedClusterIdentityResponse();
        }

        public Builder(ConnectedClusterIdentityResponse defaults) {
            $ = new ConnectedClusterIdentityResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param principalId The principal id of connected cluster identity. This property will only be provided for a system assigned identity.
         * 
         * @return builder
         * 
         */
        public Builder principalId(String principalId) {
            $.principalId = principalId;
            return this;
        }

        /**
         * @param tenantId The tenant id associated with the connected cluster. This property will only be provided for a system assigned identity.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(String tenantId) {
            $.tenantId = tenantId;
            return this;
        }

        /**
         * @param type The type of identity used for the connected cluster. The type &#39;SystemAssigned, includes a system created identity. The type &#39;None&#39; means no identity is assigned to the connected cluster.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public ConnectedClusterIdentityResponse build() {
            $.principalId = Objects.requireNonNull($.principalId, "expected parameter 'principalId' to be non-null");
            $.tenantId = Objects.requireNonNull($.tenantId, "expected parameter 'tenantId' to be non-null");
            $.type = Codegen.stringProp("type").arg($.type).def("SystemAssigned").require();
            return $;
        }
    }

}
