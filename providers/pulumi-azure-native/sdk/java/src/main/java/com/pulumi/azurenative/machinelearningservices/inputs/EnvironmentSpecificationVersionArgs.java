// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.machinelearningservices.inputs;

import com.pulumi.azurenative.machinelearningservices.inputs.DockerBuildArgs;
import com.pulumi.azurenative.machinelearningservices.inputs.DockerImageArgs;
import com.pulumi.azurenative.machinelearningservices.inputs.InferenceContainerPropertiesArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Environment specification version details.
 * &lt;see href=&#34;https://repo2docker.readthedocs.io/en/latest/specification.html&#34; /&gt;
 * 
 */
public final class EnvironmentSpecificationVersionArgs extends com.pulumi.resources.ResourceArgs {

    public static final EnvironmentSpecificationVersionArgs Empty = new EnvironmentSpecificationVersionArgs();

    /**
     * Standard configuration file used by Conda that lets you install any kind of package, including Python, R, and C/C++ packages.
     * &lt;see href=&#34;https://repo2docker.readthedocs.io/en/latest/config_files.html#environment-yml-install-a-conda-environment&#34; /&gt;
     * 
     */
    @Import(name="condaFile")
    private @Nullable Output<String> condaFile;

    /**
     * @return Standard configuration file used by Conda that lets you install any kind of package, including Python, R, and C/C++ packages.
     * &lt;see href=&#34;https://repo2docker.readthedocs.io/en/latest/config_files.html#environment-yml-install-a-conda-environment&#34; /&gt;
     * 
     */
    public Optional<Output<String>> condaFile() {
        return Optional.ofNullable(this.condaFile);
    }

    /**
     * The asset description text.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The asset description text.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Configuration settings for Docker.
     * 
     */
    @Import(name="docker")
    private @Nullable Output<Either<DockerBuildArgs,DockerImageArgs>> docker;

    /**
     * @return Configuration settings for Docker.
     * 
     */
    public Optional<Output<Either<DockerBuildArgs,DockerImageArgs>>> docker() {
        return Optional.ofNullable(this.docker);
    }

    /**
     * Defines configuration specific to inference.
     * 
     */
    @Import(name="inferenceContainerProperties")
    private @Nullable Output<InferenceContainerPropertiesArgs> inferenceContainerProperties;

    /**
     * @return Defines configuration specific to inference.
     * 
     */
    public Optional<Output<InferenceContainerPropertiesArgs>> inferenceContainerProperties() {
        return Optional.ofNullable(this.inferenceContainerProperties);
    }

    /**
     * If the name version are system generated (anonymous registration).
     * 
     */
    @Import(name="isAnonymous")
    private @Nullable Output<Boolean> isAnonymous;

    /**
     * @return If the name version are system generated (anonymous registration).
     * 
     */
    public Optional<Output<Boolean>> isAnonymous() {
        return Optional.ofNullable(this.isAnonymous);
    }

    /**
     * The asset property dictionary.
     * 
     */
    @Import(name="properties")
    private @Nullable Output<Map<String,String>> properties;

    /**
     * @return The asset property dictionary.
     * 
     */
    public Optional<Output<Map<String,String>>> properties() {
        return Optional.ofNullable(this.properties);
    }

    /**
     * Tag dictionary. Tags can be added, removed, and updated.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Tag dictionary. Tags can be added, removed, and updated.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private EnvironmentSpecificationVersionArgs() {}

    private EnvironmentSpecificationVersionArgs(EnvironmentSpecificationVersionArgs $) {
        this.condaFile = $.condaFile;
        this.description = $.description;
        this.docker = $.docker;
        this.inferenceContainerProperties = $.inferenceContainerProperties;
        this.isAnonymous = $.isAnonymous;
        this.properties = $.properties;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EnvironmentSpecificationVersionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EnvironmentSpecificationVersionArgs $;

        public Builder() {
            $ = new EnvironmentSpecificationVersionArgs();
        }

        public Builder(EnvironmentSpecificationVersionArgs defaults) {
            $ = new EnvironmentSpecificationVersionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param condaFile Standard configuration file used by Conda that lets you install any kind of package, including Python, R, and C/C++ packages.
         * &lt;see href=&#34;https://repo2docker.readthedocs.io/en/latest/config_files.html#environment-yml-install-a-conda-environment&#34; /&gt;
         * 
         * @return builder
         * 
         */
        public Builder condaFile(@Nullable Output<String> condaFile) {
            $.condaFile = condaFile;
            return this;
        }

        /**
         * @param condaFile Standard configuration file used by Conda that lets you install any kind of package, including Python, R, and C/C++ packages.
         * &lt;see href=&#34;https://repo2docker.readthedocs.io/en/latest/config_files.html#environment-yml-install-a-conda-environment&#34; /&gt;
         * 
         * @return builder
         * 
         */
        public Builder condaFile(String condaFile) {
            return condaFile(Output.of(condaFile));
        }

        /**
         * @param description The asset description text.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The asset description text.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param docker Configuration settings for Docker.
         * 
         * @return builder
         * 
         */
        public Builder docker(@Nullable Output<Either<DockerBuildArgs,DockerImageArgs>> docker) {
            $.docker = docker;
            return this;
        }

        /**
         * @param docker Configuration settings for Docker.
         * 
         * @return builder
         * 
         */
        public Builder docker(Either<DockerBuildArgs,DockerImageArgs> docker) {
            return docker(Output.of(docker));
        }

        /**
         * @param docker Configuration settings for Docker.
         * 
         * @return builder
         * 
         */
        public Builder docker(DockerBuildArgs docker) {
            return docker(Either.ofLeft(docker));
        }

        /**
         * @param docker Configuration settings for Docker.
         * 
         * @return builder
         * 
         */
        public Builder docker(DockerImageArgs docker) {
            return docker(Either.ofRight(docker));
        }

        /**
         * @param inferenceContainerProperties Defines configuration specific to inference.
         * 
         * @return builder
         * 
         */
        public Builder inferenceContainerProperties(@Nullable Output<InferenceContainerPropertiesArgs> inferenceContainerProperties) {
            $.inferenceContainerProperties = inferenceContainerProperties;
            return this;
        }

        /**
         * @param inferenceContainerProperties Defines configuration specific to inference.
         * 
         * @return builder
         * 
         */
        public Builder inferenceContainerProperties(InferenceContainerPropertiesArgs inferenceContainerProperties) {
            return inferenceContainerProperties(Output.of(inferenceContainerProperties));
        }

        /**
         * @param isAnonymous If the name version are system generated (anonymous registration).
         * 
         * @return builder
         * 
         */
        public Builder isAnonymous(@Nullable Output<Boolean> isAnonymous) {
            $.isAnonymous = isAnonymous;
            return this;
        }

        /**
         * @param isAnonymous If the name version are system generated (anonymous registration).
         * 
         * @return builder
         * 
         */
        public Builder isAnonymous(Boolean isAnonymous) {
            return isAnonymous(Output.of(isAnonymous));
        }

        /**
         * @param properties The asset property dictionary.
         * 
         * @return builder
         * 
         */
        public Builder properties(@Nullable Output<Map<String,String>> properties) {
            $.properties = properties;
            return this;
        }

        /**
         * @param properties The asset property dictionary.
         * 
         * @return builder
         * 
         */
        public Builder properties(Map<String,String> properties) {
            return properties(Output.of(properties));
        }

        /**
         * @param tags Tag dictionary. Tags can be added, removed, and updated.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Tag dictionary. Tags can be added, removed, and updated.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public EnvironmentSpecificationVersionArgs build() {
            return $;
        }
    }

}
