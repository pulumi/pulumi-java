// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.dataprotection.inputs;

import com.pulumi.azurenative.dataprotection.enums.StorageSettingStoreTypes;
import com.pulumi.azurenative.dataprotection.enums.StorageSettingTypes;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Storage setting
 * 
 */
public final class StorageSettingArgs extends com.pulumi.resources.ResourceArgs {

    public static final StorageSettingArgs Empty = new StorageSettingArgs();

    /**
     * Gets or sets the type of the datastore.
     * 
     */
    @Import(name="datastoreType")
    private @Nullable Output<Either<String,StorageSettingStoreTypes>> datastoreType;

    /**
     * @return Gets or sets the type of the datastore.
     * 
     */
    public Optional<Output<Either<String,StorageSettingStoreTypes>>> datastoreType() {
        return Optional.ofNullable(this.datastoreType);
    }

    /**
     * Gets or sets the type.
     * 
     */
    @Import(name="type")
    private @Nullable Output<Either<String,StorageSettingTypes>> type;

    /**
     * @return Gets or sets the type.
     * 
     */
    public Optional<Output<Either<String,StorageSettingTypes>>> type() {
        return Optional.ofNullable(this.type);
    }

    private StorageSettingArgs() {}

    private StorageSettingArgs(StorageSettingArgs $) {
        this.datastoreType = $.datastoreType;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StorageSettingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StorageSettingArgs $;

        public Builder() {
            $ = new StorageSettingArgs();
        }

        public Builder(StorageSettingArgs defaults) {
            $ = new StorageSettingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param datastoreType Gets or sets the type of the datastore.
         * 
         * @return builder
         * 
         */
        public Builder datastoreType(@Nullable Output<Either<String,StorageSettingStoreTypes>> datastoreType) {
            $.datastoreType = datastoreType;
            return this;
        }

        /**
         * @param datastoreType Gets or sets the type of the datastore.
         * 
         * @return builder
         * 
         */
        public Builder datastoreType(Either<String,StorageSettingStoreTypes> datastoreType) {
            return datastoreType(Output.of(datastoreType));
        }

        /**
         * @param datastoreType Gets or sets the type of the datastore.
         * 
         * @return builder
         * 
         */
        public Builder datastoreType(String datastoreType) {
            return datastoreType(Either.ofLeft(datastoreType));
        }

        /**
         * @param datastoreType Gets or sets the type of the datastore.
         * 
         * @return builder
         * 
         */
        public Builder datastoreType(StorageSettingStoreTypes datastoreType) {
            return datastoreType(Either.ofRight(datastoreType));
        }

        /**
         * @param type Gets or sets the type.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<Either<String,StorageSettingTypes>> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Gets or sets the type.
         * 
         * @return builder
         * 
         */
        public Builder type(Either<String,StorageSettingTypes> type) {
            return type(Output.of(type));
        }

        /**
         * @param type Gets or sets the type.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Either.ofLeft(type));
        }

        /**
         * @param type Gets or sets the type.
         * 
         * @return builder
         * 
         */
        public Builder type(StorageSettingTypes type) {
            return type(Either.ofRight(type));
        }

        public StorageSettingArgs build() {
            return $;
        }
    }

}
