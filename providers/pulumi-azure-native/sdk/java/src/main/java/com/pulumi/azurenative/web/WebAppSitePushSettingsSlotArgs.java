// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.web;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WebAppSitePushSettingsSlotArgs extends com.pulumi.resources.ResourceArgs {

    public static final WebAppSitePushSettingsSlotArgs Empty = new WebAppSitePushSettingsSlotArgs();

    /**
     * Gets or sets a JSON string containing a list of dynamic tags that will be evaluated from user claims in the push registration endpoint.
     * 
     */
    @Import(name="dynamicTagsJson")
    private @Nullable Output<String> dynamicTagsJson;

    /**
     * @return Gets or sets a JSON string containing a list of dynamic tags that will be evaluated from user claims in the push registration endpoint.
     * 
     */
    public Optional<Output<String>> dynamicTagsJson() {
        return Optional.ofNullable(this.dynamicTagsJson);
    }

    /**
     * Gets or sets a flag indicating whether the Push endpoint is enabled.
     * 
     */
    @Import(name="isPushEnabled", required=true)
    private Output<Boolean> isPushEnabled;

    /**
     * @return Gets or sets a flag indicating whether the Push endpoint is enabled.
     * 
     */
    public Output<Boolean> isPushEnabled() {
        return this.isPushEnabled;
    }

    /**
     * Kind of resource.
     * 
     */
    @Import(name="kind")
    private @Nullable Output<String> kind;

    /**
     * @return Kind of resource.
     * 
     */
    public Optional<Output<String>> kind() {
        return Optional.ofNullable(this.kind);
    }

    /**
     * Name of web app.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Name of web app.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Name of the resource group to which the resource belongs.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return Name of the resource group to which the resource belongs.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Name of web app slot. If not specified then will default to production slot.
     * 
     */
    @Import(name="slot", required=true)
    private Output<String> slot;

    /**
     * @return Name of web app slot. If not specified then will default to production slot.
     * 
     */
    public Output<String> slot() {
        return this.slot;
    }

    /**
     * Gets or sets a JSON string containing a list of tags that are whitelisted for use by the push registration endpoint.
     * 
     */
    @Import(name="tagWhitelistJson")
    private @Nullable Output<String> tagWhitelistJson;

    /**
     * @return Gets or sets a JSON string containing a list of tags that are whitelisted for use by the push registration endpoint.
     * 
     */
    public Optional<Output<String>> tagWhitelistJson() {
        return Optional.ofNullable(this.tagWhitelistJson);
    }

    /**
     * Gets or sets a JSON string containing a list of tags that require user authentication to be used in the push registration endpoint.
     * Tags can consist of alphanumeric characters and the following:
     * &#39;_&#39;, &#39;@&#39;, &#39;#&#39;, &#39;.&#39;, &#39;:&#39;, &#39;-&#39;.
     * Validation should be performed at the PushRequestHandler.
     * 
     */
    @Import(name="tagsRequiringAuth")
    private @Nullable Output<String> tagsRequiringAuth;

    /**
     * @return Gets or sets a JSON string containing a list of tags that require user authentication to be used in the push registration endpoint.
     * Tags can consist of alphanumeric characters and the following:
     * &#39;_&#39;, &#39;@&#39;, &#39;#&#39;, &#39;.&#39;, &#39;:&#39;, &#39;-&#39;.
     * Validation should be performed at the PushRequestHandler.
     * 
     */
    public Optional<Output<String>> tagsRequiringAuth() {
        return Optional.ofNullable(this.tagsRequiringAuth);
    }

    private WebAppSitePushSettingsSlotArgs() {}

    private WebAppSitePushSettingsSlotArgs(WebAppSitePushSettingsSlotArgs $) {
        this.dynamicTagsJson = $.dynamicTagsJson;
        this.isPushEnabled = $.isPushEnabled;
        this.kind = $.kind;
        this.name = $.name;
        this.resourceGroupName = $.resourceGroupName;
        this.slot = $.slot;
        this.tagWhitelistJson = $.tagWhitelistJson;
        this.tagsRequiringAuth = $.tagsRequiringAuth;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WebAppSitePushSettingsSlotArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WebAppSitePushSettingsSlotArgs $;

        public Builder() {
            $ = new WebAppSitePushSettingsSlotArgs();
        }

        public Builder(WebAppSitePushSettingsSlotArgs defaults) {
            $ = new WebAppSitePushSettingsSlotArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dynamicTagsJson Gets or sets a JSON string containing a list of dynamic tags that will be evaluated from user claims in the push registration endpoint.
         * 
         * @return builder
         * 
         */
        public Builder dynamicTagsJson(@Nullable Output<String> dynamicTagsJson) {
            $.dynamicTagsJson = dynamicTagsJson;
            return this;
        }

        /**
         * @param dynamicTagsJson Gets or sets a JSON string containing a list of dynamic tags that will be evaluated from user claims in the push registration endpoint.
         * 
         * @return builder
         * 
         */
        public Builder dynamicTagsJson(String dynamicTagsJson) {
            return dynamicTagsJson(Output.of(dynamicTagsJson));
        }

        /**
         * @param isPushEnabled Gets or sets a flag indicating whether the Push endpoint is enabled.
         * 
         * @return builder
         * 
         */
        public Builder isPushEnabled(Output<Boolean> isPushEnabled) {
            $.isPushEnabled = isPushEnabled;
            return this;
        }

        /**
         * @param isPushEnabled Gets or sets a flag indicating whether the Push endpoint is enabled.
         * 
         * @return builder
         * 
         */
        public Builder isPushEnabled(Boolean isPushEnabled) {
            return isPushEnabled(Output.of(isPushEnabled));
        }

        /**
         * @param kind Kind of resource.
         * 
         * @return builder
         * 
         */
        public Builder kind(@Nullable Output<String> kind) {
            $.kind = kind;
            return this;
        }

        /**
         * @param kind Kind of resource.
         * 
         * @return builder
         * 
         */
        public Builder kind(String kind) {
            return kind(Output.of(kind));
        }

        /**
         * @param name Name of web app.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of web app.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param slot Name of web app slot. If not specified then will default to production slot.
         * 
         * @return builder
         * 
         */
        public Builder slot(Output<String> slot) {
            $.slot = slot;
            return this;
        }

        /**
         * @param slot Name of web app slot. If not specified then will default to production slot.
         * 
         * @return builder
         * 
         */
        public Builder slot(String slot) {
            return slot(Output.of(slot));
        }

        /**
         * @param tagWhitelistJson Gets or sets a JSON string containing a list of tags that are whitelisted for use by the push registration endpoint.
         * 
         * @return builder
         * 
         */
        public Builder tagWhitelistJson(@Nullable Output<String> tagWhitelistJson) {
            $.tagWhitelistJson = tagWhitelistJson;
            return this;
        }

        /**
         * @param tagWhitelistJson Gets or sets a JSON string containing a list of tags that are whitelisted for use by the push registration endpoint.
         * 
         * @return builder
         * 
         */
        public Builder tagWhitelistJson(String tagWhitelistJson) {
            return tagWhitelistJson(Output.of(tagWhitelistJson));
        }

        /**
         * @param tagsRequiringAuth Gets or sets a JSON string containing a list of tags that require user authentication to be used in the push registration endpoint.
         * Tags can consist of alphanumeric characters and the following:
         * &#39;_&#39;, &#39;@&#39;, &#39;#&#39;, &#39;.&#39;, &#39;:&#39;, &#39;-&#39;.
         * Validation should be performed at the PushRequestHandler.
         * 
         * @return builder
         * 
         */
        public Builder tagsRequiringAuth(@Nullable Output<String> tagsRequiringAuth) {
            $.tagsRequiringAuth = tagsRequiringAuth;
            return this;
        }

        /**
         * @param tagsRequiringAuth Gets or sets a JSON string containing a list of tags that require user authentication to be used in the push registration endpoint.
         * Tags can consist of alphanumeric characters and the following:
         * &#39;_&#39;, &#39;@&#39;, &#39;#&#39;, &#39;.&#39;, &#39;:&#39;, &#39;-&#39;.
         * Validation should be performed at the PushRequestHandler.
         * 
         * @return builder
         * 
         */
        public Builder tagsRequiringAuth(String tagsRequiringAuth) {
            return tagsRequiringAuth(Output.of(tagsRequiringAuth));
        }

        public WebAppSitePushSettingsSlotArgs build() {
            $.isPushEnabled = Objects.requireNonNull($.isPushEnabled, "expected parameter 'isPushEnabled' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.slot = Objects.requireNonNull($.slot, "expected parameter 'slot' to be non-null");
            return $;
        }
    }

}
