// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.netapp.inputs;

import com.pulumi.azurenative.netapp.enums.EndpointType;
import com.pulumi.azurenative.netapp.enums.ReplicationSchedule;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Replication properties
 * 
 */
public final class ReplicationObjectArgs extends com.pulumi.resources.ResourceArgs {

    public static final ReplicationObjectArgs Empty = new ReplicationObjectArgs();

    /**
     * Indicates whether the local volume is the source or destination for the Volume Replication
     * 
     */
    @Import(name="endpointType")
    private @Nullable Output<Either<String,EndpointType>> endpointType;

    /**
     * @return Indicates whether the local volume is the source or destination for the Volume Replication
     * 
     */
    public Optional<Output<Either<String,EndpointType>>> endpointType() {
        return Optional.ofNullable(this.endpointType);
    }

    /**
     * The remote region for the other end of the Volume Replication.
     * 
     */
    @Import(name="remoteVolumeRegion")
    private @Nullable Output<String> remoteVolumeRegion;

    /**
     * @return The remote region for the other end of the Volume Replication.
     * 
     */
    public Optional<Output<String>> remoteVolumeRegion() {
        return Optional.ofNullable(this.remoteVolumeRegion);
    }

    /**
     * The resource ID of the remote volume.
     * 
     */
    @Import(name="remoteVolumeResourceId", required=true)
    private Output<String> remoteVolumeResourceId;

    /**
     * @return The resource ID of the remote volume.
     * 
     */
    public Output<String> remoteVolumeResourceId() {
        return this.remoteVolumeResourceId;
    }

    /**
     * Id
     * 
     */
    @Import(name="replicationId")
    private @Nullable Output<String> replicationId;

    /**
     * @return Id
     * 
     */
    public Optional<Output<String>> replicationId() {
        return Optional.ofNullable(this.replicationId);
    }

    /**
     * Schedule
     * 
     */
    @Import(name="replicationSchedule")
    private @Nullable Output<Either<String,ReplicationSchedule>> replicationSchedule;

    /**
     * @return Schedule
     * 
     */
    public Optional<Output<Either<String,ReplicationSchedule>>> replicationSchedule() {
        return Optional.ofNullable(this.replicationSchedule);
    }

    private ReplicationObjectArgs() {}

    private ReplicationObjectArgs(ReplicationObjectArgs $) {
        this.endpointType = $.endpointType;
        this.remoteVolumeRegion = $.remoteVolumeRegion;
        this.remoteVolumeResourceId = $.remoteVolumeResourceId;
        this.replicationId = $.replicationId;
        this.replicationSchedule = $.replicationSchedule;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ReplicationObjectArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ReplicationObjectArgs $;

        public Builder() {
            $ = new ReplicationObjectArgs();
        }

        public Builder(ReplicationObjectArgs defaults) {
            $ = new ReplicationObjectArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param endpointType Indicates whether the local volume is the source or destination for the Volume Replication
         * 
         * @return builder
         * 
         */
        public Builder endpointType(@Nullable Output<Either<String,EndpointType>> endpointType) {
            $.endpointType = endpointType;
            return this;
        }

        /**
         * @param endpointType Indicates whether the local volume is the source or destination for the Volume Replication
         * 
         * @return builder
         * 
         */
        public Builder endpointType(Either<String,EndpointType> endpointType) {
            return endpointType(Output.of(endpointType));
        }

        /**
         * @param endpointType Indicates whether the local volume is the source or destination for the Volume Replication
         * 
         * @return builder
         * 
         */
        public Builder endpointType(String endpointType) {
            return endpointType(Either.ofLeft(endpointType));
        }

        /**
         * @param endpointType Indicates whether the local volume is the source or destination for the Volume Replication
         * 
         * @return builder
         * 
         */
        public Builder endpointType(EndpointType endpointType) {
            return endpointType(Either.ofRight(endpointType));
        }

        /**
         * @param remoteVolumeRegion The remote region for the other end of the Volume Replication.
         * 
         * @return builder
         * 
         */
        public Builder remoteVolumeRegion(@Nullable Output<String> remoteVolumeRegion) {
            $.remoteVolumeRegion = remoteVolumeRegion;
            return this;
        }

        /**
         * @param remoteVolumeRegion The remote region for the other end of the Volume Replication.
         * 
         * @return builder
         * 
         */
        public Builder remoteVolumeRegion(String remoteVolumeRegion) {
            return remoteVolumeRegion(Output.of(remoteVolumeRegion));
        }

        /**
         * @param remoteVolumeResourceId The resource ID of the remote volume.
         * 
         * @return builder
         * 
         */
        public Builder remoteVolumeResourceId(Output<String> remoteVolumeResourceId) {
            $.remoteVolumeResourceId = remoteVolumeResourceId;
            return this;
        }

        /**
         * @param remoteVolumeResourceId The resource ID of the remote volume.
         * 
         * @return builder
         * 
         */
        public Builder remoteVolumeResourceId(String remoteVolumeResourceId) {
            return remoteVolumeResourceId(Output.of(remoteVolumeResourceId));
        }

        /**
         * @param replicationId Id
         * 
         * @return builder
         * 
         */
        public Builder replicationId(@Nullable Output<String> replicationId) {
            $.replicationId = replicationId;
            return this;
        }

        /**
         * @param replicationId Id
         * 
         * @return builder
         * 
         */
        public Builder replicationId(String replicationId) {
            return replicationId(Output.of(replicationId));
        }

        /**
         * @param replicationSchedule Schedule
         * 
         * @return builder
         * 
         */
        public Builder replicationSchedule(@Nullable Output<Either<String,ReplicationSchedule>> replicationSchedule) {
            $.replicationSchedule = replicationSchedule;
            return this;
        }

        /**
         * @param replicationSchedule Schedule
         * 
         * @return builder
         * 
         */
        public Builder replicationSchedule(Either<String,ReplicationSchedule> replicationSchedule) {
            return replicationSchedule(Output.of(replicationSchedule));
        }

        /**
         * @param replicationSchedule Schedule
         * 
         * @return builder
         * 
         */
        public Builder replicationSchedule(String replicationSchedule) {
            return replicationSchedule(Either.ofLeft(replicationSchedule));
        }

        /**
         * @param replicationSchedule Schedule
         * 
         * @return builder
         * 
         */
        public Builder replicationSchedule(ReplicationSchedule replicationSchedule) {
            return replicationSchedule(Either.ofRight(replicationSchedule));
        }

        public ReplicationObjectArgs build() {
            $.remoteVolumeResourceId = Objects.requireNonNull($.remoteVolumeResourceId, "expected parameter 'remoteVolumeResourceId' to be non-null");
            return $;
        }
    }

}
