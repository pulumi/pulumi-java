// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.authorization.inputs;

import com.pulumi.azurenative.authorization.enums.ParameterType;
import com.pulumi.azurenative.authorization.inputs.ParameterDefinitionsValueMetadataArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The definition of a parameter that can be provided to the policy.
 * 
 */
public final class ParameterDefinitionsValueArgs extends com.pulumi.resources.ResourceArgs {

    public static final ParameterDefinitionsValueArgs Empty = new ParameterDefinitionsValueArgs();

    /**
     * The allowed values for the parameter.
     * 
     */
    @Import(name="allowedValues")
    private @Nullable Output<List<Object>> allowedValues;

    public Optional<Output<List<Object>>> allowedValues() {
        return Optional.ofNullable(this.allowedValues);
    }

    /**
     * The default value for the parameter if no value is provided.
     * 
     */
    @Import(name="defaultValue")
    private @Nullable Output<Object> defaultValue;

    public Optional<Output<Object>> defaultValue() {
        return Optional.ofNullable(this.defaultValue);
    }

    /**
     * General metadata for the parameter.
     * 
     */
    @Import(name="metadata")
    private @Nullable Output<ParameterDefinitionsValueMetadataArgs> metadata;

    public Optional<Output<ParameterDefinitionsValueMetadataArgs>> metadata() {
        return Optional.ofNullable(this.metadata);
    }

    /**
     * The data type of the parameter.
     * 
     */
    @Import(name="type")
    private @Nullable Output<Either<String,ParameterType>> type;

    public Optional<Output<Either<String,ParameterType>>> type() {
        return Optional.ofNullable(this.type);
    }

    private ParameterDefinitionsValueArgs() {}

    private ParameterDefinitionsValueArgs(ParameterDefinitionsValueArgs $) {
        this.allowedValues = $.allowedValues;
        this.defaultValue = $.defaultValue;
        this.metadata = $.metadata;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ParameterDefinitionsValueArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ParameterDefinitionsValueArgs $;

        public Builder() {
            $ = new ParameterDefinitionsValueArgs();
        }

        public Builder(ParameterDefinitionsValueArgs defaults) {
            $ = new ParameterDefinitionsValueArgs(Objects.requireNonNull(defaults));
        }

        public Builder allowedValues(@Nullable Output<List<Object>> allowedValues) {
            $.allowedValues = allowedValues;
            return this;
        }

        public Builder allowedValues(List<Object> allowedValues) {
            return allowedValues(Output.of(allowedValues));
        }

        public Builder allowedValues(Object... allowedValues) {
            return allowedValues(List.of(allowedValues));
        }

        public Builder defaultValue(@Nullable Output<Object> defaultValue) {
            $.defaultValue = defaultValue;
            return this;
        }

        public Builder defaultValue(Object defaultValue) {
            return defaultValue(Output.of(defaultValue));
        }

        public Builder metadata(@Nullable Output<ParameterDefinitionsValueMetadataArgs> metadata) {
            $.metadata = metadata;
            return this;
        }

        public Builder metadata(ParameterDefinitionsValueMetadataArgs metadata) {
            return metadata(Output.of(metadata));
        }

        public Builder type(@Nullable Output<Either<String,ParameterType>> type) {
            $.type = type;
            return this;
        }

        public Builder type(Either<String,ParameterType> type) {
            return type(Output.of(type));
        }

        public Builder type(String type) {
            return type(Either.ofLeft(type));
        }

        public Builder type(ParameterType type) {
            return type(Either.ofRight(type));
        }

        public ParameterDefinitionsValueArgs build() {
            return $;
        }
    }

}
