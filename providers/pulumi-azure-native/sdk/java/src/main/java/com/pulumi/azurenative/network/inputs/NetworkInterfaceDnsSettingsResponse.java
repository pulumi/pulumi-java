// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * DNS settings of a network interface.
 * 
 */
public final class NetworkInterfaceDnsSettingsResponse extends com.pulumi.resources.InvokeArgs {

    public static final NetworkInterfaceDnsSettingsResponse Empty = new NetworkInterfaceDnsSettingsResponse();

    /**
     * If the VM that uses this NIC is part of an Availability Set, then this list will have the union of all DNS servers from all NICs that are part of the Availability Set. This property is what is configured on each of those VMs.
     * 
     */
    @Import(name="appliedDnsServers", required=true)
      private final List<String> appliedDnsServers;

    public List<String> appliedDnsServers() {
        return this.appliedDnsServers;
    }

    /**
     * List of DNS servers IP addresses. Use 'AzureProvidedDNS' to switch to azure provided DNS resolution. 'AzureProvidedDNS' value cannot be combined with other IPs, it must be the only value in dnsServers collection.
     * 
     */
    @Import(name="dnsServers")
      private final @Nullable List<String> dnsServers;

    public List<String> dnsServers() {
        return this.dnsServers == null ? List.of() : this.dnsServers;
    }

    /**
     * Relative DNS name for this NIC used for internal communications between VMs in the same virtual network.
     * 
     */
    @Import(name="internalDnsNameLabel")
      private final @Nullable String internalDnsNameLabel;

    public Optional<String> internalDnsNameLabel() {
        return this.internalDnsNameLabel == null ? Optional.empty() : Optional.ofNullable(this.internalDnsNameLabel);
    }

    /**
     * Even if internalDnsNameLabel is not specified, a DNS entry is created for the primary NIC of the VM. This DNS name can be constructed by concatenating the VM name with the value of internalDomainNameSuffix.
     * 
     */
    @Import(name="internalDomainNameSuffix", required=true)
      private final String internalDomainNameSuffix;

    public String internalDomainNameSuffix() {
        return this.internalDomainNameSuffix;
    }

    /**
     * Fully qualified DNS name supporting internal communications between VMs in the same virtual network.
     * 
     */
    @Import(name="internalFqdn", required=true)
      private final String internalFqdn;

    public String internalFqdn() {
        return this.internalFqdn;
    }

    public NetworkInterfaceDnsSettingsResponse(
        List<String> appliedDnsServers,
        @Nullable List<String> dnsServers,
        @Nullable String internalDnsNameLabel,
        String internalDomainNameSuffix,
        String internalFqdn) {
        this.appliedDnsServers = Objects.requireNonNull(appliedDnsServers, "expected parameter 'appliedDnsServers' to be non-null");
        this.dnsServers = dnsServers;
        this.internalDnsNameLabel = internalDnsNameLabel;
        this.internalDomainNameSuffix = Objects.requireNonNull(internalDomainNameSuffix, "expected parameter 'internalDomainNameSuffix' to be non-null");
        this.internalFqdn = Objects.requireNonNull(internalFqdn, "expected parameter 'internalFqdn' to be non-null");
    }

    private NetworkInterfaceDnsSettingsResponse() {
        this.appliedDnsServers = List.of();
        this.dnsServers = List.of();
        this.internalDnsNameLabel = null;
        this.internalDomainNameSuffix = null;
        this.internalFqdn = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NetworkInterfaceDnsSettingsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private List<String> appliedDnsServers;
        private @Nullable List<String> dnsServers;
        private @Nullable String internalDnsNameLabel;
        private String internalDomainNameSuffix;
        private String internalFqdn;

        public Builder() {
    	      // Empty
        }

        public Builder(NetworkInterfaceDnsSettingsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appliedDnsServers = defaults.appliedDnsServers;
    	      this.dnsServers = defaults.dnsServers;
    	      this.internalDnsNameLabel = defaults.internalDnsNameLabel;
    	      this.internalDomainNameSuffix = defaults.internalDomainNameSuffix;
    	      this.internalFqdn = defaults.internalFqdn;
        }

        public Builder appliedDnsServers(List<String> appliedDnsServers) {
            this.appliedDnsServers = Objects.requireNonNull(appliedDnsServers);
            return this;
        }
        public Builder appliedDnsServers(String... appliedDnsServers) {
            return appliedDnsServers(List.of(appliedDnsServers));
        }
        public Builder dnsServers(@Nullable List<String> dnsServers) {
            this.dnsServers = dnsServers;
            return this;
        }
        public Builder dnsServers(String... dnsServers) {
            return dnsServers(List.of(dnsServers));
        }
        public Builder internalDnsNameLabel(@Nullable String internalDnsNameLabel) {
            this.internalDnsNameLabel = internalDnsNameLabel;
            return this;
        }
        public Builder internalDomainNameSuffix(String internalDomainNameSuffix) {
            this.internalDomainNameSuffix = Objects.requireNonNull(internalDomainNameSuffix);
            return this;
        }
        public Builder internalFqdn(String internalFqdn) {
            this.internalFqdn = Objects.requireNonNull(internalFqdn);
            return this;
        }        public NetworkInterfaceDnsSettingsResponse build() {
            return new NetworkInterfaceDnsSettingsResponse(appliedDnsServers, dnsServers, internalDnsNameLabel, internalDomainNameSuffix, internalFqdn);
        }
    }
}
