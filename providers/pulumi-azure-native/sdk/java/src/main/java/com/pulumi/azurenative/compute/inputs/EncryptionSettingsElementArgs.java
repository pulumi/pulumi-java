// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.compute.inputs;

import com.pulumi.azurenative.compute.inputs.KeyVaultAndKeyReferenceArgs;
import com.pulumi.azurenative.compute.inputs.KeyVaultAndSecretReferenceArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Encryption settings for one disk volume.
 * 
 */
public final class EncryptionSettingsElementArgs extends com.pulumi.resources.ResourceArgs {

    public static final EncryptionSettingsElementArgs Empty = new EncryptionSettingsElementArgs();

    /**
     * Key Vault Secret Url and vault id of the disk encryption key
     * 
     */
    @Import(name="diskEncryptionKey")
    private @Nullable Output<KeyVaultAndSecretReferenceArgs> diskEncryptionKey;

    /**
     * @return Key Vault Secret Url and vault id of the disk encryption key
     * 
     */
    public Optional<Output<KeyVaultAndSecretReferenceArgs>> diskEncryptionKey() {
        return Optional.ofNullable(this.diskEncryptionKey);
    }

    /**
     * Key Vault Key Url and vault id of the key encryption key. KeyEncryptionKey is optional and when provided is used to unwrap the disk encryption key.
     * 
     */
    @Import(name="keyEncryptionKey")
    private @Nullable Output<KeyVaultAndKeyReferenceArgs> keyEncryptionKey;

    /**
     * @return Key Vault Key Url and vault id of the key encryption key. KeyEncryptionKey is optional and when provided is used to unwrap the disk encryption key.
     * 
     */
    public Optional<Output<KeyVaultAndKeyReferenceArgs>> keyEncryptionKey() {
        return Optional.ofNullable(this.keyEncryptionKey);
    }

    private EncryptionSettingsElementArgs() {}

    private EncryptionSettingsElementArgs(EncryptionSettingsElementArgs $) {
        this.diskEncryptionKey = $.diskEncryptionKey;
        this.keyEncryptionKey = $.keyEncryptionKey;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EncryptionSettingsElementArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EncryptionSettingsElementArgs $;

        public Builder() {
            $ = new EncryptionSettingsElementArgs();
        }

        public Builder(EncryptionSettingsElementArgs defaults) {
            $ = new EncryptionSettingsElementArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param diskEncryptionKey Key Vault Secret Url and vault id of the disk encryption key
         * 
         * @return builder
         * 
         */
        public Builder diskEncryptionKey(@Nullable Output<KeyVaultAndSecretReferenceArgs> diskEncryptionKey) {
            $.diskEncryptionKey = diskEncryptionKey;
            return this;
        }

        /**
         * @param diskEncryptionKey Key Vault Secret Url and vault id of the disk encryption key
         * 
         * @return builder
         * 
         */
        public Builder diskEncryptionKey(KeyVaultAndSecretReferenceArgs diskEncryptionKey) {
            return diskEncryptionKey(Output.of(diskEncryptionKey));
        }

        /**
         * @param keyEncryptionKey Key Vault Key Url and vault id of the key encryption key. KeyEncryptionKey is optional and when provided is used to unwrap the disk encryption key.
         * 
         * @return builder
         * 
         */
        public Builder keyEncryptionKey(@Nullable Output<KeyVaultAndKeyReferenceArgs> keyEncryptionKey) {
            $.keyEncryptionKey = keyEncryptionKey;
            return this;
        }

        /**
         * @param keyEncryptionKey Key Vault Key Url and vault id of the key encryption key. KeyEncryptionKey is optional and when provided is used to unwrap the disk encryption key.
         * 
         * @return builder
         * 
         */
        public Builder keyEncryptionKey(KeyVaultAndKeyReferenceArgs keyEncryptionKey) {
            return keyEncryptionKey(Output.of(keyEncryptionKey));
        }

        public EncryptionSettingsElementArgs build() {
            return $;
        }
    }

}
