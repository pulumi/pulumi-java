// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.cdn.outputs;

import com.pulumi.azurenative.cdn.outputs.CdnCertificateSourceParametersResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class CdnManagedHttpsParametersResponse {
    /**
     * @return Defines the source of the SSL certificate.
     * Expected value is &#39;Cdn&#39;.
     * 
     */
    private final String certificateSource;
    /**
     * @return Defines the certificate source parameters using CDN managed certificate for enabling SSL.
     * 
     */
    private final CdnCertificateSourceParametersResponse certificateSourceParameters;
    /**
     * @return TLS protocol version that will be used for Https
     * 
     */
    private final @Nullable String minimumTlsVersion;
    /**
     * @return Defines the TLS extension protocol that is used for secure delivery.
     * 
     */
    private final String protocolType;

    @CustomType.Constructor
    private CdnManagedHttpsParametersResponse(
        @CustomType.Parameter("certificateSource") String certificateSource,
        @CustomType.Parameter("certificateSourceParameters") CdnCertificateSourceParametersResponse certificateSourceParameters,
        @CustomType.Parameter("minimumTlsVersion") @Nullable String minimumTlsVersion,
        @CustomType.Parameter("protocolType") String protocolType) {
        this.certificateSource = certificateSource;
        this.certificateSourceParameters = certificateSourceParameters;
        this.minimumTlsVersion = minimumTlsVersion;
        this.protocolType = protocolType;
    }

    /**
     * @return Defines the source of the SSL certificate.
     * Expected value is &#39;Cdn&#39;.
     * 
     */
    public String certificateSource() {
        return this.certificateSource;
    }
    /**
     * @return Defines the certificate source parameters using CDN managed certificate for enabling SSL.
     * 
     */
    public CdnCertificateSourceParametersResponse certificateSourceParameters() {
        return this.certificateSourceParameters;
    }
    /**
     * @return TLS protocol version that will be used for Https
     * 
     */
    public Optional<String> minimumTlsVersion() {
        return Optional.ofNullable(this.minimumTlsVersion);
    }
    /**
     * @return Defines the TLS extension protocol that is used for secure delivery.
     * 
     */
    public String protocolType() {
        return this.protocolType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CdnManagedHttpsParametersResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String certificateSource;
        private CdnCertificateSourceParametersResponse certificateSourceParameters;
        private @Nullable String minimumTlsVersion;
        private String protocolType;

        public Builder() {
    	      // Empty
        }

        public Builder(CdnManagedHttpsParametersResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificateSource = defaults.certificateSource;
    	      this.certificateSourceParameters = defaults.certificateSourceParameters;
    	      this.minimumTlsVersion = defaults.minimumTlsVersion;
    	      this.protocolType = defaults.protocolType;
        }

        public Builder certificateSource(String certificateSource) {
            this.certificateSource = Objects.requireNonNull(certificateSource);
            return this;
        }
        public Builder certificateSourceParameters(CdnCertificateSourceParametersResponse certificateSourceParameters) {
            this.certificateSourceParameters = Objects.requireNonNull(certificateSourceParameters);
            return this;
        }
        public Builder minimumTlsVersion(@Nullable String minimumTlsVersion) {
            this.minimumTlsVersion = minimumTlsVersion;
            return this;
        }
        public Builder protocolType(String protocolType) {
            this.protocolType = Objects.requireNonNull(protocolType);
            return this;
        }        public CdnManagedHttpsParametersResponse build() {
            return new CdnManagedHttpsParametersResponse(certificateSource, certificateSourceParameters, minimumTlsVersion, protocolType);
        }
    }
}
