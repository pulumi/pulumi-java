// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.web.inputs;

import com.pulumi.azurenative.web.inputs.DatabaseBackupSettingResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Backup description.
 * 
 */
public final class BackupItemResponse extends com.pulumi.resources.InvokeArgs {

    public static final BackupItemResponse Empty = new BackupItemResponse();

    /**
     * Id of the backup.
     * 
     */
    @Import(name="backupId", required=true)
    private Integer backupId;

    public Integer backupId() {
        return this.backupId;
    }

    /**
     * Name of the blob which contains data for this backup.
     * 
     */
    @Import(name="blobName", required=true)
    private String blobName;

    public String blobName() {
        return this.blobName;
    }

    /**
     * Unique correlation identifier. Please use this along with the timestamp while communicating with Azure support.
     * 
     */
    @Import(name="correlationId", required=true)
    private String correlationId;

    public String correlationId() {
        return this.correlationId;
    }

    /**
     * Timestamp of the backup creation.
     * 
     */
    @Import(name="created", required=true)
    private String created;

    public String created() {
        return this.created;
    }

    /**
     * List of databases included in the backup.
     * 
     */
    @Import(name="databases", required=true)
    private List<DatabaseBackupSettingResponse> databases;

    public List<DatabaseBackupSettingResponse> databases() {
        return this.databases;
    }

    /**
     * Timestamp when this backup finished.
     * 
     */
    @Import(name="finishedTimeStamp", required=true)
    private String finishedTimeStamp;

    public String finishedTimeStamp() {
        return this.finishedTimeStamp;
    }

    /**
     * Resource Id.
     * 
     */
    @Import(name="id", required=true)
    private String id;

    public String id() {
        return this.id;
    }

    /**
     * Kind of resource.
     * 
     */
    @Import(name="kind")
    private @Nullable String kind;

    public Optional<String> kind() {
        return Optional.ofNullable(this.kind);
    }

    /**
     * Timestamp of a last restore operation which used this backup.
     * 
     */
    @Import(name="lastRestoreTimeStamp", required=true)
    private String lastRestoreTimeStamp;

    public String lastRestoreTimeStamp() {
        return this.lastRestoreTimeStamp;
    }

    /**
     * Details regarding this backup. Might contain an error message.
     * 
     */
    @Import(name="log", required=true)
    private String log;

    public String log() {
        return this.log;
    }

    /**
     * Resource Name.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    public String name() {
        return this.name;
    }

    /**
     * True if this backup has been created due to a schedule being triggered.
     * 
     */
    @Import(name="scheduled", required=true)
    private Boolean scheduled;

    public Boolean scheduled() {
        return this.scheduled;
    }

    /**
     * Size of the backup in bytes.
     * 
     */
    @Import(name="sizeInBytes", required=true)
    private Double sizeInBytes;

    public Double sizeInBytes() {
        return this.sizeInBytes;
    }

    /**
     * Backup status.
     * 
     */
    @Import(name="status", required=true)
    private String status;

    public String status() {
        return this.status;
    }

    /**
     * SAS URL for the storage account container which contains this backup.
     * 
     */
    @Import(name="storageAccountUrl", required=true)
    private String storageAccountUrl;

    public String storageAccountUrl() {
        return this.storageAccountUrl;
    }

    /**
     * Resource type.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    public String type() {
        return this.type;
    }

    /**
     * Size of the original web app which has been backed up.
     * 
     */
    @Import(name="websiteSizeInBytes", required=true)
    private Double websiteSizeInBytes;

    public Double websiteSizeInBytes() {
        return this.websiteSizeInBytes;
    }

    private BackupItemResponse() {}

    private BackupItemResponse(BackupItemResponse $) {
        this.backupId = $.backupId;
        this.blobName = $.blobName;
        this.correlationId = $.correlationId;
        this.created = $.created;
        this.databases = $.databases;
        this.finishedTimeStamp = $.finishedTimeStamp;
        this.id = $.id;
        this.kind = $.kind;
        this.lastRestoreTimeStamp = $.lastRestoreTimeStamp;
        this.log = $.log;
        this.name = $.name;
        this.scheduled = $.scheduled;
        this.sizeInBytes = $.sizeInBytes;
        this.status = $.status;
        this.storageAccountUrl = $.storageAccountUrl;
        this.type = $.type;
        this.websiteSizeInBytes = $.websiteSizeInBytes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BackupItemResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BackupItemResponse $;

        public Builder() {
            $ = new BackupItemResponse();
        }

        public Builder(BackupItemResponse defaults) {
            $ = new BackupItemResponse(Objects.requireNonNull(defaults));
        }

        public Builder backupId(Integer backupId) {
            $.backupId = backupId;
            return this;
        }

        public Builder blobName(String blobName) {
            $.blobName = blobName;
            return this;
        }

        public Builder correlationId(String correlationId) {
            $.correlationId = correlationId;
            return this;
        }

        public Builder created(String created) {
            $.created = created;
            return this;
        }

        public Builder databases(List<DatabaseBackupSettingResponse> databases) {
            $.databases = databases;
            return this;
        }

        public Builder databases(DatabaseBackupSettingResponse... databases) {
            return databases(List.of(databases));
        }

        public Builder finishedTimeStamp(String finishedTimeStamp) {
            $.finishedTimeStamp = finishedTimeStamp;
            return this;
        }

        public Builder id(String id) {
            $.id = id;
            return this;
        }

        public Builder kind(@Nullable String kind) {
            $.kind = kind;
            return this;
        }

        public Builder lastRestoreTimeStamp(String lastRestoreTimeStamp) {
            $.lastRestoreTimeStamp = lastRestoreTimeStamp;
            return this;
        }

        public Builder log(String log) {
            $.log = log;
            return this;
        }

        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public Builder scheduled(Boolean scheduled) {
            $.scheduled = scheduled;
            return this;
        }

        public Builder sizeInBytes(Double sizeInBytes) {
            $.sizeInBytes = sizeInBytes;
            return this;
        }

        public Builder status(String status) {
            $.status = status;
            return this;
        }

        public Builder storageAccountUrl(String storageAccountUrl) {
            $.storageAccountUrl = storageAccountUrl;
            return this;
        }

        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public Builder websiteSizeInBytes(Double websiteSizeInBytes) {
            $.websiteSizeInBytes = websiteSizeInBytes;
            return this;
        }

        public BackupItemResponse build() {
            $.backupId = Objects.requireNonNull($.backupId, "expected parameter 'backupId' to be non-null");
            $.blobName = Objects.requireNonNull($.blobName, "expected parameter 'blobName' to be non-null");
            $.correlationId = Objects.requireNonNull($.correlationId, "expected parameter 'correlationId' to be non-null");
            $.created = Objects.requireNonNull($.created, "expected parameter 'created' to be non-null");
            $.databases = Objects.requireNonNull($.databases, "expected parameter 'databases' to be non-null");
            $.finishedTimeStamp = Objects.requireNonNull($.finishedTimeStamp, "expected parameter 'finishedTimeStamp' to be non-null");
            $.id = Objects.requireNonNull($.id, "expected parameter 'id' to be non-null");
            $.lastRestoreTimeStamp = Objects.requireNonNull($.lastRestoreTimeStamp, "expected parameter 'lastRestoreTimeStamp' to be non-null");
            $.log = Objects.requireNonNull($.log, "expected parameter 'log' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.scheduled = Objects.requireNonNull($.scheduled, "expected parameter 'scheduled' to be non-null");
            $.sizeInBytes = Objects.requireNonNull($.sizeInBytes, "expected parameter 'sizeInBytes' to be non-null");
            $.status = Objects.requireNonNull($.status, "expected parameter 'status' to be non-null");
            $.storageAccountUrl = Objects.requireNonNull($.storageAccountUrl, "expected parameter 'storageAccountUrl' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            $.websiteSizeInBytes = Objects.requireNonNull($.websiteSizeInBytes, "expected parameter 'websiteSizeInBytes' to be non-null");
            return $;
        }
    }

}
