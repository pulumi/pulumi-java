// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.cdn.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Defines the parameters for the url redirect action.
 * 
 */
public final class UrlRedirectActionParametersResponse extends com.pulumi.resources.InvokeArgs {

    public static final UrlRedirectActionParametersResponse Empty = new UrlRedirectActionParametersResponse();

    /**
     * Fragment to add to the redirect URL. Fragment is the part of the URL that comes after #. Do not include the #.
     * 
     */
    @Import(name="customFragment")
    private @Nullable String customFragment;

    /**
     * @return Fragment to add to the redirect URL. Fragment is the part of the URL that comes after #. Do not include the #.
     * 
     */
    public Optional<String> customFragment() {
        return Optional.ofNullable(this.customFragment);
    }

    /**
     * Host to redirect. Leave empty to use the incoming host as the destination host.
     * 
     */
    @Import(name="customHostname")
    private @Nullable String customHostname;

    /**
     * @return Host to redirect. Leave empty to use the incoming host as the destination host.
     * 
     */
    public Optional<String> customHostname() {
        return Optional.ofNullable(this.customHostname);
    }

    /**
     * The full path to redirect. Path cannot be empty and must start with /. Leave empty to use the incoming path as destination path.
     * 
     */
    @Import(name="customPath")
    private @Nullable String customPath;

    /**
     * @return The full path to redirect. Path cannot be empty and must start with /. Leave empty to use the incoming path as destination path.
     * 
     */
    public Optional<String> customPath() {
        return Optional.ofNullable(this.customPath);
    }

    /**
     * The set of query strings to be placed in the redirect URL. Setting this value would replace any existing query string; leave empty to preserve the incoming query string. Query string must be in &lt;key&gt;=&lt;value&gt; format. ? and &amp; will be added automatically so do not include them.
     * 
     */
    @Import(name="customQueryString")
    private @Nullable String customQueryString;

    /**
     * @return The set of query strings to be placed in the redirect URL. Setting this value would replace any existing query string; leave empty to preserve the incoming query string. Query string must be in &lt;key&gt;=&lt;value&gt; format. ? and &amp; will be added automatically so do not include them.
     * 
     */
    public Optional<String> customQueryString() {
        return Optional.ofNullable(this.customQueryString);
    }

    /**
     * Protocol to use for the redirect. The default value is MatchRequest
     * 
     */
    @Import(name="destinationProtocol")
    private @Nullable String destinationProtocol;

    /**
     * @return Protocol to use for the redirect. The default value is MatchRequest
     * 
     */
    public Optional<String> destinationProtocol() {
        return Optional.ofNullable(this.destinationProtocol);
    }

    @Import(name="odataType", required=true)
    private String odataType;

    public String odataType() {
        return this.odataType;
    }

    /**
     * The redirect type the rule will use when redirecting traffic.
     * 
     */
    @Import(name="redirectType", required=true)
    private String redirectType;

    /**
     * @return The redirect type the rule will use when redirecting traffic.
     * 
     */
    public String redirectType() {
        return this.redirectType;
    }

    private UrlRedirectActionParametersResponse() {}

    private UrlRedirectActionParametersResponse(UrlRedirectActionParametersResponse $) {
        this.customFragment = $.customFragment;
        this.customHostname = $.customHostname;
        this.customPath = $.customPath;
        this.customQueryString = $.customQueryString;
        this.destinationProtocol = $.destinationProtocol;
        this.odataType = $.odataType;
        this.redirectType = $.redirectType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UrlRedirectActionParametersResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UrlRedirectActionParametersResponse $;

        public Builder() {
            $ = new UrlRedirectActionParametersResponse();
        }

        public Builder(UrlRedirectActionParametersResponse defaults) {
            $ = new UrlRedirectActionParametersResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param customFragment Fragment to add to the redirect URL. Fragment is the part of the URL that comes after #. Do not include the #.
         * 
         * @return builder
         * 
         */
        public Builder customFragment(@Nullable String customFragment) {
            $.customFragment = customFragment;
            return this;
        }

        /**
         * @param customHostname Host to redirect. Leave empty to use the incoming host as the destination host.
         * 
         * @return builder
         * 
         */
        public Builder customHostname(@Nullable String customHostname) {
            $.customHostname = customHostname;
            return this;
        }

        /**
         * @param customPath The full path to redirect. Path cannot be empty and must start with /. Leave empty to use the incoming path as destination path.
         * 
         * @return builder
         * 
         */
        public Builder customPath(@Nullable String customPath) {
            $.customPath = customPath;
            return this;
        }

        /**
         * @param customQueryString The set of query strings to be placed in the redirect URL. Setting this value would replace any existing query string; leave empty to preserve the incoming query string. Query string must be in &lt;key&gt;=&lt;value&gt; format. ? and &amp; will be added automatically so do not include them.
         * 
         * @return builder
         * 
         */
        public Builder customQueryString(@Nullable String customQueryString) {
            $.customQueryString = customQueryString;
            return this;
        }

        /**
         * @param destinationProtocol Protocol to use for the redirect. The default value is MatchRequest
         * 
         * @return builder
         * 
         */
        public Builder destinationProtocol(@Nullable String destinationProtocol) {
            $.destinationProtocol = destinationProtocol;
            return this;
        }

        public Builder odataType(String odataType) {
            $.odataType = odataType;
            return this;
        }

        /**
         * @param redirectType The redirect type the rule will use when redirecting traffic.
         * 
         * @return builder
         * 
         */
        public Builder redirectType(String redirectType) {
            $.redirectType = redirectType;
            return this;
        }

        public UrlRedirectActionParametersResponse build() {
            $.odataType = Objects.requireNonNull($.odataType, "expected parameter 'odataType' to be non-null");
            $.redirectType = Objects.requireNonNull($.redirectType, "expected parameter 'redirectType' to be non-null");
            return $;
        }
    }

}
