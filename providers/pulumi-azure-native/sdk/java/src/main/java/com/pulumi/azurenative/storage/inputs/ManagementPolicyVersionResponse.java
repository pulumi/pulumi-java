// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.storage.inputs;

import com.pulumi.azurenative.storage.inputs.DateAfterCreationResponse;
import com.pulumi.core.annotations.Import;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Management policy action for blob version.
 * 
 */
public final class ManagementPolicyVersionResponse extends com.pulumi.resources.InvokeArgs {

    public static final ManagementPolicyVersionResponse Empty = new ManagementPolicyVersionResponse();

    /**
     * The function to delete the blob version
     * 
     */
    @Import(name="delete")
    private @Nullable DateAfterCreationResponse delete;

    /**
     * @return The function to delete the blob version
     * 
     */
    public Optional<DateAfterCreationResponse> delete() {
        return Optional.ofNullable(this.delete);
    }

    /**
     * The function to tier blob version to archive storage. Support blob version currently at Hot or Cool tier
     * 
     */
    @Import(name="tierToArchive")
    private @Nullable DateAfterCreationResponse tierToArchive;

    /**
     * @return The function to tier blob version to archive storage. Support blob version currently at Hot or Cool tier
     * 
     */
    public Optional<DateAfterCreationResponse> tierToArchive() {
        return Optional.ofNullable(this.tierToArchive);
    }

    /**
     * The function to tier blob version to cool storage. Support blob version currently at Hot tier
     * 
     */
    @Import(name="tierToCool")
    private @Nullable DateAfterCreationResponse tierToCool;

    /**
     * @return The function to tier blob version to cool storage. Support blob version currently at Hot tier
     * 
     */
    public Optional<DateAfterCreationResponse> tierToCool() {
        return Optional.ofNullable(this.tierToCool);
    }

    private ManagementPolicyVersionResponse() {}

    private ManagementPolicyVersionResponse(ManagementPolicyVersionResponse $) {
        this.delete = $.delete;
        this.tierToArchive = $.tierToArchive;
        this.tierToCool = $.tierToCool;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagementPolicyVersionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagementPolicyVersionResponse $;

        public Builder() {
            $ = new ManagementPolicyVersionResponse();
        }

        public Builder(ManagementPolicyVersionResponse defaults) {
            $ = new ManagementPolicyVersionResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param delete The function to delete the blob version
         * 
         * @return builder
         * 
         */
        public Builder delete(@Nullable DateAfterCreationResponse delete) {
            $.delete = delete;
            return this;
        }

        /**
         * @param tierToArchive The function to tier blob version to archive storage. Support blob version currently at Hot or Cool tier
         * 
         * @return builder
         * 
         */
        public Builder tierToArchive(@Nullable DateAfterCreationResponse tierToArchive) {
            $.tierToArchive = tierToArchive;
            return this;
        }

        /**
         * @param tierToCool The function to tier blob version to cool storage. Support blob version currently at Hot tier
         * 
         * @return builder
         * 
         */
        public Builder tierToCool(@Nullable DateAfterCreationResponse tierToCool) {
            $.tierToCool = tierToCool;
            return this;
        }

        public ManagementPolicyVersionResponse build() {
            return $;
        }
    }

}
