// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.security;

import com.pulumi.azurenative.security.inputs.AssessmentStatusArgs;
import com.pulumi.azurenative.security.inputs.AzureResourceDetailsArgs;
import com.pulumi.azurenative.security.inputs.OnPremiseResourceDetailsArgs;
import com.pulumi.azurenative.security.inputs.OnPremiseSqlResourceDetailsArgs;
import com.pulumi.azurenative.security.inputs.SecurityAssessmentMetadataPropertiesArgs;
import com.pulumi.azurenative.security.inputs.SecurityAssessmentPartnerDataArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AssessmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final AssessmentArgs Empty = new AssessmentArgs();

    /**
     * Additional data regarding the assessment
     * 
     */
    @Import(name="additionalData")
    private @Nullable Output<Map<String,String>> additionalData;

    /**
     * @return Additional data regarding the assessment
     * 
     */
    public Optional<Output<Map<String,String>>> additionalData() {
        return Optional.ofNullable(this.additionalData);
    }

    /**
     * The Assessment Key - Unique key for the assessment type
     * 
     */
    @Import(name="assessmentName")
    private @Nullable Output<String> assessmentName;

    /**
     * @return The Assessment Key - Unique key for the assessment type
     * 
     */
    public Optional<Output<String>> assessmentName() {
        return Optional.ofNullable(this.assessmentName);
    }

    /**
     * Describes properties of an assessment metadata.
     * 
     */
    @Import(name="metadata")
    private @Nullable Output<SecurityAssessmentMetadataPropertiesArgs> metadata;

    /**
     * @return Describes properties of an assessment metadata.
     * 
     */
    public Optional<Output<SecurityAssessmentMetadataPropertiesArgs>> metadata() {
        return Optional.ofNullable(this.metadata);
    }

    /**
     * Data regarding 3rd party partner integration
     * 
     */
    @Import(name="partnersData")
    private @Nullable Output<SecurityAssessmentPartnerDataArgs> partnersData;

    /**
     * @return Data regarding 3rd party partner integration
     * 
     */
    public Optional<Output<SecurityAssessmentPartnerDataArgs>> partnersData() {
        return Optional.ofNullable(this.partnersData);
    }

    /**
     * Details of the resource that was assessed
     * 
     */
    @Import(name="resourceDetails", required=true)
    private Output<Object> resourceDetails;

    /**
     * @return Details of the resource that was assessed
     * 
     */
    public Output<Object> resourceDetails() {
        return this.resourceDetails;
    }

    /**
     * The identifier of the resource.
     * 
     */
    @Import(name="resourceId", required=true)
    private Output<String> resourceId;

    /**
     * @return The identifier of the resource.
     * 
     */
    public Output<String> resourceId() {
        return this.resourceId;
    }

    /**
     * The result of the assessment
     * 
     */
    @Import(name="status", required=true)
    private Output<AssessmentStatusArgs> status;

    /**
     * @return The result of the assessment
     * 
     */
    public Output<AssessmentStatusArgs> status() {
        return this.status;
    }

    private AssessmentArgs() {}

    private AssessmentArgs(AssessmentArgs $) {
        this.additionalData = $.additionalData;
        this.assessmentName = $.assessmentName;
        this.metadata = $.metadata;
        this.partnersData = $.partnersData;
        this.resourceDetails = $.resourceDetails;
        this.resourceId = $.resourceId;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AssessmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AssessmentArgs $;

        public Builder() {
            $ = new AssessmentArgs();
        }

        public Builder(AssessmentArgs defaults) {
            $ = new AssessmentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param additionalData Additional data regarding the assessment
         * 
         * @return builder
         * 
         */
        public Builder additionalData(@Nullable Output<Map<String,String>> additionalData) {
            $.additionalData = additionalData;
            return this;
        }

        /**
         * @param additionalData Additional data regarding the assessment
         * 
         * @return builder
         * 
         */
        public Builder additionalData(Map<String,String> additionalData) {
            return additionalData(Output.of(additionalData));
        }

        /**
         * @param assessmentName The Assessment Key - Unique key for the assessment type
         * 
         * @return builder
         * 
         */
        public Builder assessmentName(@Nullable Output<String> assessmentName) {
            $.assessmentName = assessmentName;
            return this;
        }

        /**
         * @param assessmentName The Assessment Key - Unique key for the assessment type
         * 
         * @return builder
         * 
         */
        public Builder assessmentName(String assessmentName) {
            return assessmentName(Output.of(assessmentName));
        }

        /**
         * @param metadata Describes properties of an assessment metadata.
         * 
         * @return builder
         * 
         */
        public Builder metadata(@Nullable Output<SecurityAssessmentMetadataPropertiesArgs> metadata) {
            $.metadata = metadata;
            return this;
        }

        /**
         * @param metadata Describes properties of an assessment metadata.
         * 
         * @return builder
         * 
         */
        public Builder metadata(SecurityAssessmentMetadataPropertiesArgs metadata) {
            return metadata(Output.of(metadata));
        }

        /**
         * @param partnersData Data regarding 3rd party partner integration
         * 
         * @return builder
         * 
         */
        public Builder partnersData(@Nullable Output<SecurityAssessmentPartnerDataArgs> partnersData) {
            $.partnersData = partnersData;
            return this;
        }

        /**
         * @param partnersData Data regarding 3rd party partner integration
         * 
         * @return builder
         * 
         */
        public Builder partnersData(SecurityAssessmentPartnerDataArgs partnersData) {
            return partnersData(Output.of(partnersData));
        }

        /**
         * @param resourceDetails Details of the resource that was assessed
         * 
         * @return builder
         * 
         */
        public Builder resourceDetails(Output<Object> resourceDetails) {
            $.resourceDetails = resourceDetails;
            return this;
        }

        /**
         * @param resourceDetails Details of the resource that was assessed
         * 
         * @return builder
         * 
         */
        public Builder resourceDetails(Object resourceDetails) {
            return resourceDetails(Output.of(resourceDetails));
        }

        /**
         * @param resourceId The identifier of the resource.
         * 
         * @return builder
         * 
         */
        public Builder resourceId(Output<String> resourceId) {
            $.resourceId = resourceId;
            return this;
        }

        /**
         * @param resourceId The identifier of the resource.
         * 
         * @return builder
         * 
         */
        public Builder resourceId(String resourceId) {
            return resourceId(Output.of(resourceId));
        }

        /**
         * @param status The result of the assessment
         * 
         * @return builder
         * 
         */
        public Builder status(Output<AssessmentStatusArgs> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The result of the assessment
         * 
         * @return builder
         * 
         */
        public Builder status(AssessmentStatusArgs status) {
            return status(Output.of(status));
        }

        public AssessmentArgs build() {
            $.resourceDetails = Objects.requireNonNull($.resourceDetails, "expected parameter 'resourceDetails' to be non-null");
            $.resourceId = Objects.requireNonNull($.resourceId, "expected parameter 'resourceId' to be non-null");
            $.status = Objects.requireNonNull($.status, "expected parameter 'status' to be non-null");
            return $;
        }
    }

}
