// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.containerregistry;

import com.pulumi.azurenative.containerregistry.enums.PipelineOptions;
import com.pulumi.azurenative.containerregistry.inputs.IdentityPropertiesArgs;
import com.pulumi.azurenative.containerregistry.inputs.ImportPipelineSourcePropertiesArgs;
import com.pulumi.azurenative.containerregistry.inputs.PipelineTriggerPropertiesArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ImportPipelineArgs extends com.pulumi.resources.ResourceArgs {

    public static final ImportPipelineArgs Empty = new ImportPipelineArgs();

    /**
     * The identity of the import pipeline.
     * 
     */
    @Import(name="identity")
    private @Nullable Output<IdentityPropertiesArgs> identity;

    /**
     * @return The identity of the import pipeline.
     * 
     */
    public Optional<Output<IdentityPropertiesArgs>> identity() {
        return Optional.ofNullable(this.identity);
    }

    /**
     * The name of the import pipeline.
     * 
     */
    @Import(name="importPipelineName")
    private @Nullable Output<String> importPipelineName;

    /**
     * @return The name of the import pipeline.
     * 
     */
    public Optional<Output<String>> importPipelineName() {
        return Optional.ofNullable(this.importPipelineName);
    }

    /**
     * The location of the import pipeline.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The location of the import pipeline.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The list of all options configured for the pipeline.
     * 
     */
    @Import(name="options")
    private @Nullable Output<List<Either<String,PipelineOptions>>> options;

    /**
     * @return The list of all options configured for the pipeline.
     * 
     */
    public Optional<Output<List<Either<String,PipelineOptions>>>> options() {
        return Optional.ofNullable(this.options);
    }

    /**
     * The name of the container registry.
     * 
     */
    @Import(name="registryName", required=true)
    private Output<String> registryName;

    /**
     * @return The name of the container registry.
     * 
     */
    public Output<String> registryName() {
        return this.registryName;
    }

    /**
     * The name of the resource group to which the container registry belongs.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group to which the container registry belongs.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The source properties of the import pipeline.
     * 
     */
    @Import(name="source", required=true)
    private Output<ImportPipelineSourcePropertiesArgs> source;

    /**
     * @return The source properties of the import pipeline.
     * 
     */
    public Output<ImportPipelineSourcePropertiesArgs> source() {
        return this.source;
    }

    /**
     * The properties that describe the trigger of the import pipeline.
     * 
     */
    @Import(name="trigger")
    private @Nullable Output<PipelineTriggerPropertiesArgs> trigger;

    /**
     * @return The properties that describe the trigger of the import pipeline.
     * 
     */
    public Optional<Output<PipelineTriggerPropertiesArgs>> trigger() {
        return Optional.ofNullable(this.trigger);
    }

    private ImportPipelineArgs() {}

    private ImportPipelineArgs(ImportPipelineArgs $) {
        this.identity = $.identity;
        this.importPipelineName = $.importPipelineName;
        this.location = $.location;
        this.options = $.options;
        this.registryName = $.registryName;
        this.resourceGroupName = $.resourceGroupName;
        this.source = $.source;
        this.trigger = $.trigger;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ImportPipelineArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ImportPipelineArgs $;

        public Builder() {
            $ = new ImportPipelineArgs();
        }

        public Builder(ImportPipelineArgs defaults) {
            $ = new ImportPipelineArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param identity The identity of the import pipeline.
         * 
         * @return builder
         * 
         */
        public Builder identity(@Nullable Output<IdentityPropertiesArgs> identity) {
            $.identity = identity;
            return this;
        }

        /**
         * @param identity The identity of the import pipeline.
         * 
         * @return builder
         * 
         */
        public Builder identity(IdentityPropertiesArgs identity) {
            return identity(Output.of(identity));
        }

        /**
         * @param importPipelineName The name of the import pipeline.
         * 
         * @return builder
         * 
         */
        public Builder importPipelineName(@Nullable Output<String> importPipelineName) {
            $.importPipelineName = importPipelineName;
            return this;
        }

        /**
         * @param importPipelineName The name of the import pipeline.
         * 
         * @return builder
         * 
         */
        public Builder importPipelineName(String importPipelineName) {
            return importPipelineName(Output.of(importPipelineName));
        }

        /**
         * @param location The location of the import pipeline.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The location of the import pipeline.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param options The list of all options configured for the pipeline.
         * 
         * @return builder
         * 
         */
        public Builder options(@Nullable Output<List<Either<String,PipelineOptions>>> options) {
            $.options = options;
            return this;
        }

        /**
         * @param options The list of all options configured for the pipeline.
         * 
         * @return builder
         * 
         */
        public Builder options(List<Either<String,PipelineOptions>> options) {
            return options(Output.of(options));
        }

        /**
         * @param options The list of all options configured for the pipeline.
         * 
         * @return builder
         * 
         */
        public Builder options(Either<String,PipelineOptions>... options) {
            return options(List.of(options));
        }

        /**
         * @param registryName The name of the container registry.
         * 
         * @return builder
         * 
         */
        public Builder registryName(Output<String> registryName) {
            $.registryName = registryName;
            return this;
        }

        /**
         * @param registryName The name of the container registry.
         * 
         * @return builder
         * 
         */
        public Builder registryName(String registryName) {
            return registryName(Output.of(registryName));
        }

        /**
         * @param resourceGroupName The name of the resource group to which the container registry belongs.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group to which the container registry belongs.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param source The source properties of the import pipeline.
         * 
         * @return builder
         * 
         */
        public Builder source(Output<ImportPipelineSourcePropertiesArgs> source) {
            $.source = source;
            return this;
        }

        /**
         * @param source The source properties of the import pipeline.
         * 
         * @return builder
         * 
         */
        public Builder source(ImportPipelineSourcePropertiesArgs source) {
            return source(Output.of(source));
        }

        /**
         * @param trigger The properties that describe the trigger of the import pipeline.
         * 
         * @return builder
         * 
         */
        public Builder trigger(@Nullable Output<PipelineTriggerPropertiesArgs> trigger) {
            $.trigger = trigger;
            return this;
        }

        /**
         * @param trigger The properties that describe the trigger of the import pipeline.
         * 
         * @return builder
         * 
         */
        public Builder trigger(PipelineTriggerPropertiesArgs trigger) {
            return trigger(Output.of(trigger));
        }

        public ImportPipelineArgs build() {
            $.registryName = Objects.requireNonNull($.registryName, "expected parameter 'registryName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.source = Objects.requireNonNull($.source, "expected parameter 'source' to be non-null");
            return $;
        }
    }

}
