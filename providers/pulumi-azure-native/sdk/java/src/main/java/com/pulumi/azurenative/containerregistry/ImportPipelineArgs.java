// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.containerregistry;

import com.pulumi.azurenative.containerregistry.enums.PipelineOptions;
import com.pulumi.azurenative.containerregistry.inputs.IdentityPropertiesArgs;
import com.pulumi.azurenative.containerregistry.inputs.ImportPipelineSourcePropertiesArgs;
import com.pulumi.azurenative.containerregistry.inputs.PipelineTriggerPropertiesArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ImportPipelineArgs extends com.pulumi.resources.ResourceArgs {

    public static final ImportPipelineArgs Empty = new ImportPipelineArgs();

    /**
     * The identity of the import pipeline.
     * 
     */
    @Import(name="identity")
      private final @Nullable Output<IdentityPropertiesArgs> identity;

    public Output<IdentityPropertiesArgs> identity() {
        return this.identity == null ? Codegen.empty() : this.identity;
    }

    /**
     * The name of the import pipeline.
     * 
     */
    @Import(name="importPipelineName")
      private final @Nullable Output<String> importPipelineName;

    public Output<String> importPipelineName() {
        return this.importPipelineName == null ? Codegen.empty() : this.importPipelineName;
    }

    /**
     * The location of the import pipeline.
     * 
     */
    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> location() {
        return this.location == null ? Codegen.empty() : this.location;
    }

    /**
     * The list of all options configured for the pipeline.
     * 
     */
    @Import(name="options")
      private final @Nullable Output<List<Either<String,PipelineOptions>>> options;

    public Output<List<Either<String,PipelineOptions>>> options() {
        return this.options == null ? Codegen.empty() : this.options;
    }

    /**
     * The name of the container registry.
     * 
     */
    @Import(name="registryName", required=true)
      private final Output<String> registryName;

    public Output<String> registryName() {
        return this.registryName;
    }

    /**
     * The name of the resource group to which the container registry belongs.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The source properties of the import pipeline.
     * 
     */
    @Import(name="source", required=true)
      private final Output<ImportPipelineSourcePropertiesArgs> source;

    public Output<ImportPipelineSourcePropertiesArgs> source() {
        return this.source;
    }

    /**
     * The properties that describe the trigger of the import pipeline.
     * 
     */
    @Import(name="trigger")
      private final @Nullable Output<PipelineTriggerPropertiesArgs> trigger;

    public Output<PipelineTriggerPropertiesArgs> trigger() {
        return this.trigger == null ? Codegen.empty() : this.trigger;
    }

    public ImportPipelineArgs(
        @Nullable Output<IdentityPropertiesArgs> identity,
        @Nullable Output<String> importPipelineName,
        @Nullable Output<String> location,
        @Nullable Output<List<Either<String,PipelineOptions>>> options,
        Output<String> registryName,
        Output<String> resourceGroupName,
        Output<ImportPipelineSourcePropertiesArgs> source,
        @Nullable Output<PipelineTriggerPropertiesArgs> trigger) {
        this.identity = identity;
        this.importPipelineName = importPipelineName;
        this.location = location;
        this.options = options;
        this.registryName = Objects.requireNonNull(registryName, "expected parameter 'registryName' to be non-null");
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.source = Objects.requireNonNull(source, "expected parameter 'source' to be non-null");
        this.trigger = trigger;
    }

    private ImportPipelineArgs() {
        this.identity = Codegen.empty();
        this.importPipelineName = Codegen.empty();
        this.location = Codegen.empty();
        this.options = Codegen.empty();
        this.registryName = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.source = Codegen.empty();
        this.trigger = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ImportPipelineArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<IdentityPropertiesArgs> identity;
        private @Nullable Output<String> importPipelineName;
        private @Nullable Output<String> location;
        private @Nullable Output<List<Either<String,PipelineOptions>>> options;
        private Output<String> registryName;
        private Output<String> resourceGroupName;
        private Output<ImportPipelineSourcePropertiesArgs> source;
        private @Nullable Output<PipelineTriggerPropertiesArgs> trigger;

        public Builder() {
    	      // Empty
        }

        public Builder(ImportPipelineArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.identity = defaults.identity;
    	      this.importPipelineName = defaults.importPipelineName;
    	      this.location = defaults.location;
    	      this.options = defaults.options;
    	      this.registryName = defaults.registryName;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.source = defaults.source;
    	      this.trigger = defaults.trigger;
        }

        public Builder identity(@Nullable Output<IdentityPropertiesArgs> identity) {
            this.identity = identity;
            return this;
        }
        public Builder identity(@Nullable IdentityPropertiesArgs identity) {
            this.identity = Codegen.ofNullable(identity);
            return this;
        }
        public Builder importPipelineName(@Nullable Output<String> importPipelineName) {
            this.importPipelineName = importPipelineName;
            return this;
        }
        public Builder importPipelineName(@Nullable String importPipelineName) {
            this.importPipelineName = Codegen.ofNullable(importPipelineName);
            return this;
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Codegen.ofNullable(location);
            return this;
        }
        public Builder options(@Nullable Output<List<Either<String,PipelineOptions>>> options) {
            this.options = options;
            return this;
        }
        public Builder options(@Nullable List<Either<String,PipelineOptions>> options) {
            this.options = Codegen.ofNullable(options);
            return this;
        }
        public Builder options(Either<String,PipelineOptions>... options) {
            return options(List.of(options));
        }
        public Builder registryName(Output<String> registryName) {
            this.registryName = Objects.requireNonNull(registryName);
            return this;
        }
        public Builder registryName(String registryName) {
            this.registryName = Output.of(Objects.requireNonNull(registryName));
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder source(Output<ImportPipelineSourcePropertiesArgs> source) {
            this.source = Objects.requireNonNull(source);
            return this;
        }
        public Builder source(ImportPipelineSourcePropertiesArgs source) {
            this.source = Output.of(Objects.requireNonNull(source));
            return this;
        }
        public Builder trigger(@Nullable Output<PipelineTriggerPropertiesArgs> trigger) {
            this.trigger = trigger;
            return this;
        }
        public Builder trigger(@Nullable PipelineTriggerPropertiesArgs trigger) {
            this.trigger = Codegen.ofNullable(trigger);
            return this;
        }        public ImportPipelineArgs build() {
            return new ImportPipelineArgs(identity, importPipelineName, location, options, registryName, resourceGroupName, source, trigger);
        }
    }
}
