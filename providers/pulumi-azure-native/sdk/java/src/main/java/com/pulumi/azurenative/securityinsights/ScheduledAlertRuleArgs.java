// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.securityinsights;

import com.pulumi.azurenative.securityinsights.enums.AlertSeverity;
import com.pulumi.azurenative.securityinsights.enums.AttackTactic;
import com.pulumi.azurenative.securityinsights.enums.TriggerOperator;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ScheduledAlertRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final ScheduledAlertRuleArgs Empty = new ScheduledAlertRuleArgs();

    /**
     * The Name of the alert rule template used to create this rule.
     * 
     */
    @Import(name="alertRuleTemplateName")
      private final @Nullable Output<String> alertRuleTemplateName;

    public Output<String> alertRuleTemplateName() {
        return this.alertRuleTemplateName == null ? Codegen.empty() : this.alertRuleTemplateName;
    }

    /**
     * The description of the alert rule.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> description() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * The display name for alerts created by this alert rule.
     * 
     */
    @Import(name="displayName", required=true)
      private final Output<String> displayName;

    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * Determines whether this alert rule is enabled or disabled.
     * 
     */
    @Import(name="enabled", required=true)
      private final Output<Boolean> enabled;

    public Output<Boolean> enabled() {
        return this.enabled;
    }

    /**
     * The kind of the alert rule
     * Expected value is &#39;Scheduled&#39;.
     * 
     */
    @Import(name="kind", required=true)
      private final Output<String> kind;

    public Output<String> kind() {
        return this.kind;
    }

    /**
     * The query that creates alerts for this rule.
     * 
     */
    @Import(name="query", required=true)
      private final Output<String> query;

    public Output<String> query() {
        return this.query;
    }

    /**
     * The frequency (in ISO 8601 duration format) for this alert rule to run.
     * 
     */
    @Import(name="queryFrequency", required=true)
      private final Output<String> queryFrequency;

    public Output<String> queryFrequency() {
        return this.queryFrequency;
    }

    /**
     * The period (in ISO 8601 duration format) that this alert rule looks at.
     * 
     */
    @Import(name="queryPeriod", required=true)
      private final Output<String> queryPeriod;

    public Output<String> queryPeriod() {
        return this.queryPeriod;
    }

    /**
     * The name of the resource group within the user&#39;s subscription. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Alert rule ID
     * 
     */
    @Import(name="ruleId")
      private final @Nullable Output<String> ruleId;

    public Output<String> ruleId() {
        return this.ruleId == null ? Codegen.empty() : this.ruleId;
    }

    /**
     * The severity for alerts created by this alert rule.
     * 
     */
    @Import(name="severity", required=true)
      private final Output<Either<String,AlertSeverity>> severity;

    public Output<Either<String,AlertSeverity>> severity() {
        return this.severity;
    }

    /**
     * The suppression (in ISO 8601 duration format) to wait since last time this alert rule been triggered.
     * 
     */
    @Import(name="suppressionDuration", required=true)
      private final Output<String> suppressionDuration;

    public Output<String> suppressionDuration() {
        return this.suppressionDuration;
    }

    /**
     * Determines whether the suppression for this alert rule is enabled or disabled.
     * 
     */
    @Import(name="suppressionEnabled", required=true)
      private final Output<Boolean> suppressionEnabled;

    public Output<Boolean> suppressionEnabled() {
        return this.suppressionEnabled;
    }

    /**
     * The tactics of the alert rule
     * 
     */
    @Import(name="tactics")
      private final @Nullable Output<List<Either<String,AttackTactic>>> tactics;

    public Output<List<Either<String,AttackTactic>>> tactics() {
        return this.tactics == null ? Codegen.empty() : this.tactics;
    }

    /**
     * The operation against the threshold that triggers alert rule.
     * 
     */
    @Import(name="triggerOperator", required=true)
      private final Output<TriggerOperator> triggerOperator;

    public Output<TriggerOperator> triggerOperator() {
        return this.triggerOperator;
    }

    /**
     * The threshold triggers this alert rule.
     * 
     */
    @Import(name="triggerThreshold", required=true)
      private final Output<Integer> triggerThreshold;

    public Output<Integer> triggerThreshold() {
        return this.triggerThreshold;
    }

    /**
     * The name of the workspace.
     * 
     */
    @Import(name="workspaceName", required=true)
      private final Output<String> workspaceName;

    public Output<String> workspaceName() {
        return this.workspaceName;
    }

    public ScheduledAlertRuleArgs(
        @Nullable Output<String> alertRuleTemplateName,
        @Nullable Output<String> description,
        Output<String> displayName,
        Output<Boolean> enabled,
        Output<String> kind,
        Output<String> query,
        Output<String> queryFrequency,
        Output<String> queryPeriod,
        Output<String> resourceGroupName,
        @Nullable Output<String> ruleId,
        Output<Either<String,AlertSeverity>> severity,
        Output<String> suppressionDuration,
        Output<Boolean> suppressionEnabled,
        @Nullable Output<List<Either<String,AttackTactic>>> tactics,
        Output<TriggerOperator> triggerOperator,
        Output<Integer> triggerThreshold,
        Output<String> workspaceName) {
        this.alertRuleTemplateName = alertRuleTemplateName;
        this.description = description;
        this.displayName = Objects.requireNonNull(displayName, "expected parameter 'displayName' to be non-null");
        this.enabled = Objects.requireNonNull(enabled, "expected parameter 'enabled' to be non-null");
        this.kind = Codegen.stringProp("kind").output().arg(kind).require();
        this.query = Objects.requireNonNull(query, "expected parameter 'query' to be non-null");
        this.queryFrequency = Objects.requireNonNull(queryFrequency, "expected parameter 'queryFrequency' to be non-null");
        this.queryPeriod = Objects.requireNonNull(queryPeriod, "expected parameter 'queryPeriod' to be non-null");
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.ruleId = ruleId;
        this.severity = Objects.requireNonNull(severity, "expected parameter 'severity' to be non-null");
        this.suppressionDuration = Objects.requireNonNull(suppressionDuration, "expected parameter 'suppressionDuration' to be non-null");
        this.suppressionEnabled = Objects.requireNonNull(suppressionEnabled, "expected parameter 'suppressionEnabled' to be non-null");
        this.tactics = tactics;
        this.triggerOperator = Objects.requireNonNull(triggerOperator, "expected parameter 'triggerOperator' to be non-null");
        this.triggerThreshold = Objects.requireNonNull(triggerThreshold, "expected parameter 'triggerThreshold' to be non-null");
        this.workspaceName = Objects.requireNonNull(workspaceName, "expected parameter 'workspaceName' to be non-null");
    }

    private ScheduledAlertRuleArgs() {
        this.alertRuleTemplateName = Codegen.empty();
        this.description = Codegen.empty();
        this.displayName = Codegen.empty();
        this.enabled = Codegen.empty();
        this.kind = Codegen.empty();
        this.query = Codegen.empty();
        this.queryFrequency = Codegen.empty();
        this.queryPeriod = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.ruleId = Codegen.empty();
        this.severity = Codegen.empty();
        this.suppressionDuration = Codegen.empty();
        this.suppressionEnabled = Codegen.empty();
        this.tactics = Codegen.empty();
        this.triggerOperator = Codegen.empty();
        this.triggerThreshold = Codegen.empty();
        this.workspaceName = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ScheduledAlertRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> alertRuleTemplateName;
        private @Nullable Output<String> description;
        private Output<String> displayName;
        private Output<Boolean> enabled;
        private Output<String> kind;
        private Output<String> query;
        private Output<String> queryFrequency;
        private Output<String> queryPeriod;
        private Output<String> resourceGroupName;
        private @Nullable Output<String> ruleId;
        private Output<Either<String,AlertSeverity>> severity;
        private Output<String> suppressionDuration;
        private Output<Boolean> suppressionEnabled;
        private @Nullable Output<List<Either<String,AttackTactic>>> tactics;
        private Output<TriggerOperator> triggerOperator;
        private Output<Integer> triggerThreshold;
        private Output<String> workspaceName;

        public Builder() {
    	      // Empty
        }

        public Builder(ScheduledAlertRuleArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.alertRuleTemplateName = defaults.alertRuleTemplateName;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.enabled = defaults.enabled;
    	      this.kind = defaults.kind;
    	      this.query = defaults.query;
    	      this.queryFrequency = defaults.queryFrequency;
    	      this.queryPeriod = defaults.queryPeriod;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.ruleId = defaults.ruleId;
    	      this.severity = defaults.severity;
    	      this.suppressionDuration = defaults.suppressionDuration;
    	      this.suppressionEnabled = defaults.suppressionEnabled;
    	      this.tactics = defaults.tactics;
    	      this.triggerOperator = defaults.triggerOperator;
    	      this.triggerThreshold = defaults.triggerThreshold;
    	      this.workspaceName = defaults.workspaceName;
        }

        public Builder alertRuleTemplateName(@Nullable Output<String> alertRuleTemplateName) {
            this.alertRuleTemplateName = alertRuleTemplateName;
            return this;
        }
        public Builder alertRuleTemplateName(@Nullable String alertRuleTemplateName) {
            this.alertRuleTemplateName = Codegen.ofNullable(alertRuleTemplateName);
            return this;
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder displayName(Output<String> displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        public Builder displayName(String displayName) {
            this.displayName = Output.of(Objects.requireNonNull(displayName));
            return this;
        }
        public Builder enabled(Output<Boolean> enabled) {
            this.enabled = Objects.requireNonNull(enabled);
            return this;
        }
        public Builder enabled(Boolean enabled) {
            this.enabled = Output.of(Objects.requireNonNull(enabled));
            return this;
        }
        public Builder kind(Output<String> kind) {
            this.kind = Objects.requireNonNull(kind);
            return this;
        }
        public Builder kind(String kind) {
            this.kind = Output.of(Objects.requireNonNull(kind));
            return this;
        }
        public Builder query(Output<String> query) {
            this.query = Objects.requireNonNull(query);
            return this;
        }
        public Builder query(String query) {
            this.query = Output.of(Objects.requireNonNull(query));
            return this;
        }
        public Builder queryFrequency(Output<String> queryFrequency) {
            this.queryFrequency = Objects.requireNonNull(queryFrequency);
            return this;
        }
        public Builder queryFrequency(String queryFrequency) {
            this.queryFrequency = Output.of(Objects.requireNonNull(queryFrequency));
            return this;
        }
        public Builder queryPeriod(Output<String> queryPeriod) {
            this.queryPeriod = Objects.requireNonNull(queryPeriod);
            return this;
        }
        public Builder queryPeriod(String queryPeriod) {
            this.queryPeriod = Output.of(Objects.requireNonNull(queryPeriod));
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder ruleId(@Nullable Output<String> ruleId) {
            this.ruleId = ruleId;
            return this;
        }
        public Builder ruleId(@Nullable String ruleId) {
            this.ruleId = Codegen.ofNullable(ruleId);
            return this;
        }
        public Builder severity(Output<Either<String,AlertSeverity>> severity) {
            this.severity = Objects.requireNonNull(severity);
            return this;
        }
        public Builder severity(Either<String,AlertSeverity> severity) {
            this.severity = Output.of(Objects.requireNonNull(severity));
            return this;
        }
        public Builder suppressionDuration(Output<String> suppressionDuration) {
            this.suppressionDuration = Objects.requireNonNull(suppressionDuration);
            return this;
        }
        public Builder suppressionDuration(String suppressionDuration) {
            this.suppressionDuration = Output.of(Objects.requireNonNull(suppressionDuration));
            return this;
        }
        public Builder suppressionEnabled(Output<Boolean> suppressionEnabled) {
            this.suppressionEnabled = Objects.requireNonNull(suppressionEnabled);
            return this;
        }
        public Builder suppressionEnabled(Boolean suppressionEnabled) {
            this.suppressionEnabled = Output.of(Objects.requireNonNull(suppressionEnabled));
            return this;
        }
        public Builder tactics(@Nullable Output<List<Either<String,AttackTactic>>> tactics) {
            this.tactics = tactics;
            return this;
        }
        public Builder tactics(@Nullable List<Either<String,AttackTactic>> tactics) {
            this.tactics = Codegen.ofNullable(tactics);
            return this;
        }
        public Builder tactics(Either<String,AttackTactic>... tactics) {
            return tactics(List.of(tactics));
        }
        public Builder triggerOperator(Output<TriggerOperator> triggerOperator) {
            this.triggerOperator = Objects.requireNonNull(triggerOperator);
            return this;
        }
        public Builder triggerOperator(TriggerOperator triggerOperator) {
            this.triggerOperator = Output.of(Objects.requireNonNull(triggerOperator));
            return this;
        }
        public Builder triggerThreshold(Output<Integer> triggerThreshold) {
            this.triggerThreshold = Objects.requireNonNull(triggerThreshold);
            return this;
        }
        public Builder triggerThreshold(Integer triggerThreshold) {
            this.triggerThreshold = Output.of(Objects.requireNonNull(triggerThreshold));
            return this;
        }
        public Builder workspaceName(Output<String> workspaceName) {
            this.workspaceName = Objects.requireNonNull(workspaceName);
            return this;
        }
        public Builder workspaceName(String workspaceName) {
            this.workspaceName = Output.of(Objects.requireNonNull(workspaceName));
            return this;
        }        public ScheduledAlertRuleArgs build() {
            return new ScheduledAlertRuleArgs(alertRuleTemplateName, description, displayName, enabled, kind, query, queryFrequency, queryPeriod, resourceGroupName, ruleId, severity, suppressionDuration, suppressionEnabled, tactics, triggerOperator, triggerThreshold, workspaceName);
        }
    }
}
