// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.securityinsights;

import com.pulumi.azurenative.securityinsights.enums.AlertSeverity;
import com.pulumi.azurenative.securityinsights.enums.AttackTactic;
import com.pulumi.azurenative.securityinsights.enums.TriggerOperator;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ScheduledAlertRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final ScheduledAlertRuleArgs Empty = new ScheduledAlertRuleArgs();

    /**
     * The Name of the alert rule template used to create this rule.
     * 
     */
    @Import(name="alertRuleTemplateName")
    private @Nullable Output<String> alertRuleTemplateName;

    public Optional<Output<String>> alertRuleTemplateName() {
        return Optional.ofNullable(this.alertRuleTemplateName);
    }

    /**
     * The description of the alert rule.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The display name for alerts created by this alert rule.
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * Determines whether this alert rule is enabled or disabled.
     * 
     */
    @Import(name="enabled", required=true)
    private Output<Boolean> enabled;

    public Output<Boolean> enabled() {
        return this.enabled;
    }

    /**
     * The kind of the alert rule
     * Expected value is &#39;Scheduled&#39;.
     * 
     */
    @Import(name="kind", required=true)
    private Output<String> kind;

    public Output<String> kind() {
        return this.kind;
    }

    /**
     * The query that creates alerts for this rule.
     * 
     */
    @Import(name="query", required=true)
    private Output<String> query;

    public Output<String> query() {
        return this.query;
    }

    /**
     * The frequency (in ISO 8601 duration format) for this alert rule to run.
     * 
     */
    @Import(name="queryFrequency", required=true)
    private Output<String> queryFrequency;

    public Output<String> queryFrequency() {
        return this.queryFrequency;
    }

    /**
     * The period (in ISO 8601 duration format) that this alert rule looks at.
     * 
     */
    @Import(name="queryPeriod", required=true)
    private Output<String> queryPeriod;

    public Output<String> queryPeriod() {
        return this.queryPeriod;
    }

    /**
     * The name of the resource group within the user&#39;s subscription. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Alert rule ID
     * 
     */
    @Import(name="ruleId")
    private @Nullable Output<String> ruleId;

    public Optional<Output<String>> ruleId() {
        return Optional.ofNullable(this.ruleId);
    }

    /**
     * The severity for alerts created by this alert rule.
     * 
     */
    @Import(name="severity", required=true)
    private Output<Either<String,AlertSeverity>> severity;

    public Output<Either<String,AlertSeverity>> severity() {
        return this.severity;
    }

    /**
     * The suppression (in ISO 8601 duration format) to wait since last time this alert rule been triggered.
     * 
     */
    @Import(name="suppressionDuration", required=true)
    private Output<String> suppressionDuration;

    public Output<String> suppressionDuration() {
        return this.suppressionDuration;
    }

    /**
     * Determines whether the suppression for this alert rule is enabled or disabled.
     * 
     */
    @Import(name="suppressionEnabled", required=true)
    private Output<Boolean> suppressionEnabled;

    public Output<Boolean> suppressionEnabled() {
        return this.suppressionEnabled;
    }

    /**
     * The tactics of the alert rule
     * 
     */
    @Import(name="tactics")
    private @Nullable Output<List<Either<String,AttackTactic>>> tactics;

    public Optional<Output<List<Either<String,AttackTactic>>>> tactics() {
        return Optional.ofNullable(this.tactics);
    }

    /**
     * The operation against the threshold that triggers alert rule.
     * 
     */
    @Import(name="triggerOperator", required=true)
    private Output<TriggerOperator> triggerOperator;

    public Output<TriggerOperator> triggerOperator() {
        return this.triggerOperator;
    }

    /**
     * The threshold triggers this alert rule.
     * 
     */
    @Import(name="triggerThreshold", required=true)
    private Output<Integer> triggerThreshold;

    public Output<Integer> triggerThreshold() {
        return this.triggerThreshold;
    }

    /**
     * The name of the workspace.
     * 
     */
    @Import(name="workspaceName", required=true)
    private Output<String> workspaceName;

    public Output<String> workspaceName() {
        return this.workspaceName;
    }

    private ScheduledAlertRuleArgs() {}

    private ScheduledAlertRuleArgs(ScheduledAlertRuleArgs $) {
        this.alertRuleTemplateName = $.alertRuleTemplateName;
        this.description = $.description;
        this.displayName = $.displayName;
        this.enabled = $.enabled;
        this.kind = $.kind;
        this.query = $.query;
        this.queryFrequency = $.queryFrequency;
        this.queryPeriod = $.queryPeriod;
        this.resourceGroupName = $.resourceGroupName;
        this.ruleId = $.ruleId;
        this.severity = $.severity;
        this.suppressionDuration = $.suppressionDuration;
        this.suppressionEnabled = $.suppressionEnabled;
        this.tactics = $.tactics;
        this.triggerOperator = $.triggerOperator;
        this.triggerThreshold = $.triggerThreshold;
        this.workspaceName = $.workspaceName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ScheduledAlertRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ScheduledAlertRuleArgs $;

        public Builder() {
            $ = new ScheduledAlertRuleArgs();
        }

        public Builder(ScheduledAlertRuleArgs defaults) {
            $ = new ScheduledAlertRuleArgs(Objects.requireNonNull(defaults));
        }

        public Builder alertRuleTemplateName(@Nullable Output<String> alertRuleTemplateName) {
            $.alertRuleTemplateName = alertRuleTemplateName;
            return this;
        }

        public Builder alertRuleTemplateName(String alertRuleTemplateName) {
            return alertRuleTemplateName(Output.of(alertRuleTemplateName));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder enabled(Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        public Builder kind(Output<String> kind) {
            $.kind = kind;
            return this;
        }

        public Builder kind(String kind) {
            return kind(Output.of(kind));
        }

        public Builder query(Output<String> query) {
            $.query = query;
            return this;
        }

        public Builder query(String query) {
            return query(Output.of(query));
        }

        public Builder queryFrequency(Output<String> queryFrequency) {
            $.queryFrequency = queryFrequency;
            return this;
        }

        public Builder queryFrequency(String queryFrequency) {
            return queryFrequency(Output.of(queryFrequency));
        }

        public Builder queryPeriod(Output<String> queryPeriod) {
            $.queryPeriod = queryPeriod;
            return this;
        }

        public Builder queryPeriod(String queryPeriod) {
            return queryPeriod(Output.of(queryPeriod));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder ruleId(@Nullable Output<String> ruleId) {
            $.ruleId = ruleId;
            return this;
        }

        public Builder ruleId(String ruleId) {
            return ruleId(Output.of(ruleId));
        }

        public Builder severity(Output<Either<String,AlertSeverity>> severity) {
            $.severity = severity;
            return this;
        }

        public Builder severity(Either<String,AlertSeverity> severity) {
            return severity(Output.of(severity));
        }

        public Builder suppressionDuration(Output<String> suppressionDuration) {
            $.suppressionDuration = suppressionDuration;
            return this;
        }

        public Builder suppressionDuration(String suppressionDuration) {
            return suppressionDuration(Output.of(suppressionDuration));
        }

        public Builder suppressionEnabled(Output<Boolean> suppressionEnabled) {
            $.suppressionEnabled = suppressionEnabled;
            return this;
        }

        public Builder suppressionEnabled(Boolean suppressionEnabled) {
            return suppressionEnabled(Output.of(suppressionEnabled));
        }

        public Builder tactics(@Nullable Output<List<Either<String,AttackTactic>>> tactics) {
            $.tactics = tactics;
            return this;
        }

        public Builder tactics(List<Either<String,AttackTactic>> tactics) {
            return tactics(Output.of(tactics));
        }

        public Builder tactics(Either<String,AttackTactic>... tactics) {
            return tactics(List.of(tactics));
        }

        public Builder triggerOperator(Output<TriggerOperator> triggerOperator) {
            $.triggerOperator = triggerOperator;
            return this;
        }

        public Builder triggerOperator(TriggerOperator triggerOperator) {
            return triggerOperator(Output.of(triggerOperator));
        }

        public Builder triggerThreshold(Output<Integer> triggerThreshold) {
            $.triggerThreshold = triggerThreshold;
            return this;
        }

        public Builder triggerThreshold(Integer triggerThreshold) {
            return triggerThreshold(Output.of(triggerThreshold));
        }

        public Builder workspaceName(Output<String> workspaceName) {
            $.workspaceName = workspaceName;
            return this;
        }

        public Builder workspaceName(String workspaceName) {
            return workspaceName(Output.of(workspaceName));
        }

        public ScheduledAlertRuleArgs build() {
            $.displayName = Objects.requireNonNull($.displayName, "expected parameter 'displayName' to be non-null");
            $.enabled = Objects.requireNonNull($.enabled, "expected parameter 'enabled' to be non-null");
            $.kind = Codegen.stringProp("kind").output().arg($.kind).require();
            $.query = Objects.requireNonNull($.query, "expected parameter 'query' to be non-null");
            $.queryFrequency = Objects.requireNonNull($.queryFrequency, "expected parameter 'queryFrequency' to be non-null");
            $.queryPeriod = Objects.requireNonNull($.queryPeriod, "expected parameter 'queryPeriod' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.severity = Objects.requireNonNull($.severity, "expected parameter 'severity' to be non-null");
            $.suppressionDuration = Objects.requireNonNull($.suppressionDuration, "expected parameter 'suppressionDuration' to be non-null");
            $.suppressionEnabled = Objects.requireNonNull($.suppressionEnabled, "expected parameter 'suppressionEnabled' to be non-null");
            $.triggerOperator = Objects.requireNonNull($.triggerOperator, "expected parameter 'triggerOperator' to be non-null");
            $.triggerThreshold = Objects.requireNonNull($.triggerThreshold, "expected parameter 'triggerThreshold' to be non-null");
            $.workspaceName = Objects.requireNonNull($.workspaceName, "expected parameter 'workspaceName' to be non-null");
            return $;
        }
    }

}
