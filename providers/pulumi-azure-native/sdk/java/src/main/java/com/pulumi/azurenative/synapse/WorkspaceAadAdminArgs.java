// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.synapse;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkspaceAadAdminArgs extends com.pulumi.resources.ResourceArgs {

    public static final WorkspaceAadAdminArgs Empty = new WorkspaceAadAdminArgs();

    /**
     * Workspace active directory administrator type
     * 
     */
    @Import(name="administratorType")
    private @Nullable Output<String> administratorType;

    /**
     * @return Workspace active directory administrator type
     * 
     */
    public Optional<Output<String>> administratorType() {
        return Optional.ofNullable(this.administratorType);
    }

    /**
     * Login of the workspace active directory administrator
     * 
     */
    @Import(name="login")
    private @Nullable Output<String> login;

    /**
     * @return Login of the workspace active directory administrator
     * 
     */
    public Optional<Output<String>> login() {
        return Optional.ofNullable(this.login);
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group. The name is case insensitive.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Object ID of the workspace active directory administrator
     * 
     */
    @Import(name="sid")
    private @Nullable Output<String> sid;

    /**
     * @return Object ID of the workspace active directory administrator
     * 
     */
    public Optional<Output<String>> sid() {
        return Optional.ofNullable(this.sid);
    }

    /**
     * Tenant ID of the workspace active directory administrator
     * 
     */
    @Import(name="tenantId")
    private @Nullable Output<String> tenantId;

    /**
     * @return Tenant ID of the workspace active directory administrator
     * 
     */
    public Optional<Output<String>> tenantId() {
        return Optional.ofNullable(this.tenantId);
    }

    /**
     * The name of the workspace
     * 
     */
    @Import(name="workspaceName", required=true)
    private Output<String> workspaceName;

    /**
     * @return The name of the workspace
     * 
     */
    public Output<String> workspaceName() {
        return this.workspaceName;
    }

    private WorkspaceAadAdminArgs() {}

    private WorkspaceAadAdminArgs(WorkspaceAadAdminArgs $) {
        this.administratorType = $.administratorType;
        this.login = $.login;
        this.resourceGroupName = $.resourceGroupName;
        this.sid = $.sid;
        this.tenantId = $.tenantId;
        this.workspaceName = $.workspaceName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkspaceAadAdminArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkspaceAadAdminArgs $;

        public Builder() {
            $ = new WorkspaceAadAdminArgs();
        }

        public Builder(WorkspaceAadAdminArgs defaults) {
            $ = new WorkspaceAadAdminArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param administratorType Workspace active directory administrator type
         * 
         * @return builder
         * 
         */
        public Builder administratorType(@Nullable Output<String> administratorType) {
            $.administratorType = administratorType;
            return this;
        }

        /**
         * @param administratorType Workspace active directory administrator type
         * 
         * @return builder
         * 
         */
        public Builder administratorType(String administratorType) {
            return administratorType(Output.of(administratorType));
        }

        /**
         * @param login Login of the workspace active directory administrator
         * 
         * @return builder
         * 
         */
        public Builder login(@Nullable Output<String> login) {
            $.login = login;
            return this;
        }

        /**
         * @param login Login of the workspace active directory administrator
         * 
         * @return builder
         * 
         */
        public Builder login(String login) {
            return login(Output.of(login));
        }

        /**
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param sid Object ID of the workspace active directory administrator
         * 
         * @return builder
         * 
         */
        public Builder sid(@Nullable Output<String> sid) {
            $.sid = sid;
            return this;
        }

        /**
         * @param sid Object ID of the workspace active directory administrator
         * 
         * @return builder
         * 
         */
        public Builder sid(String sid) {
            return sid(Output.of(sid));
        }

        /**
         * @param tenantId Tenant ID of the workspace active directory administrator
         * 
         * @return builder
         * 
         */
        public Builder tenantId(@Nullable Output<String> tenantId) {
            $.tenantId = tenantId;
            return this;
        }

        /**
         * @param tenantId Tenant ID of the workspace active directory administrator
         * 
         * @return builder
         * 
         */
        public Builder tenantId(String tenantId) {
            return tenantId(Output.of(tenantId));
        }

        /**
         * @param workspaceName The name of the workspace
         * 
         * @return builder
         * 
         */
        public Builder workspaceName(Output<String> workspaceName) {
            $.workspaceName = workspaceName;
            return this;
        }

        /**
         * @param workspaceName The name of the workspace
         * 
         * @return builder
         * 
         */
        public Builder workspaceName(String workspaceName) {
            return workspaceName(Output.of(workspaceName));
        }

        public WorkspaceAadAdminArgs build() {
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.workspaceName = Objects.requireNonNull($.workspaceName, "expected parameter 'workspaceName' to be non-null");
            return $;
        }
    }

}
