// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.managedservices.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Authorization tuple containing principal Id (of user/service principal/security group) and role definition id.
 * 
 */
public final class AuthorizationResponse extends com.pulumi.resources.InvokeArgs {

    public static final AuthorizationResponse Empty = new AuthorizationResponse();

    /**
     * The delegatedRoleDefinitionIds field is required when the roleDefinitionId refers to the User Access Administrator Role. It is the list of role definition ids which define all the permissions that the user in the authorization can assign to other security groups/service principals/users.
     * 
     */
    @Import(name="delegatedRoleDefinitionIds")
    private @Nullable List<String> delegatedRoleDefinitionIds;

    /**
     * @return The delegatedRoleDefinitionIds field is required when the roleDefinitionId refers to the User Access Administrator Role. It is the list of role definition ids which define all the permissions that the user in the authorization can assign to other security groups/service principals/users.
     * 
     */
    public Optional<List<String>> delegatedRoleDefinitionIds() {
        return Optional.ofNullable(this.delegatedRoleDefinitionIds);
    }

    /**
     * Principal Id of the security group/service principal/user that would be assigned permissions to the projected subscription
     * 
     */
    @Import(name="principalId", required=true)
    private String principalId;

    /**
     * @return Principal Id of the security group/service principal/user that would be assigned permissions to the projected subscription
     * 
     */
    public String principalId() {
        return this.principalId;
    }

    /**
     * Display name of the principal Id.
     * 
     */
    @Import(name="principalIdDisplayName")
    private @Nullable String principalIdDisplayName;

    /**
     * @return Display name of the principal Id.
     * 
     */
    public Optional<String> principalIdDisplayName() {
        return Optional.ofNullable(this.principalIdDisplayName);
    }

    /**
     * The role definition identifier. This role will define all the permissions that the security group/service principal/user must have on the projected subscription. This role cannot be an owner role.
     * 
     */
    @Import(name="roleDefinitionId", required=true)
    private String roleDefinitionId;

    /**
     * @return The role definition identifier. This role will define all the permissions that the security group/service principal/user must have on the projected subscription. This role cannot be an owner role.
     * 
     */
    public String roleDefinitionId() {
        return this.roleDefinitionId;
    }

    private AuthorizationResponse() {}

    private AuthorizationResponse(AuthorizationResponse $) {
        this.delegatedRoleDefinitionIds = $.delegatedRoleDefinitionIds;
        this.principalId = $.principalId;
        this.principalIdDisplayName = $.principalIdDisplayName;
        this.roleDefinitionId = $.roleDefinitionId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AuthorizationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AuthorizationResponse $;

        public Builder() {
            $ = new AuthorizationResponse();
        }

        public Builder(AuthorizationResponse defaults) {
            $ = new AuthorizationResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param delegatedRoleDefinitionIds The delegatedRoleDefinitionIds field is required when the roleDefinitionId refers to the User Access Administrator Role. It is the list of role definition ids which define all the permissions that the user in the authorization can assign to other security groups/service principals/users.
         * 
         * @return builder
         * 
         */
        public Builder delegatedRoleDefinitionIds(@Nullable List<String> delegatedRoleDefinitionIds) {
            $.delegatedRoleDefinitionIds = delegatedRoleDefinitionIds;
            return this;
        }

        /**
         * @param delegatedRoleDefinitionIds The delegatedRoleDefinitionIds field is required when the roleDefinitionId refers to the User Access Administrator Role. It is the list of role definition ids which define all the permissions that the user in the authorization can assign to other security groups/service principals/users.
         * 
         * @return builder
         * 
         */
        public Builder delegatedRoleDefinitionIds(String... delegatedRoleDefinitionIds) {
            return delegatedRoleDefinitionIds(List.of(delegatedRoleDefinitionIds));
        }

        /**
         * @param principalId Principal Id of the security group/service principal/user that would be assigned permissions to the projected subscription
         * 
         * @return builder
         * 
         */
        public Builder principalId(String principalId) {
            $.principalId = principalId;
            return this;
        }

        /**
         * @param principalIdDisplayName Display name of the principal Id.
         * 
         * @return builder
         * 
         */
        public Builder principalIdDisplayName(@Nullable String principalIdDisplayName) {
            $.principalIdDisplayName = principalIdDisplayName;
            return this;
        }

        /**
         * @param roleDefinitionId The role definition identifier. This role will define all the permissions that the security group/service principal/user must have on the projected subscription. This role cannot be an owner role.
         * 
         * @return builder
         * 
         */
        public Builder roleDefinitionId(String roleDefinitionId) {
            $.roleDefinitionId = roleDefinitionId;
            return this;
        }

        public AuthorizationResponse build() {
            $.principalId = Objects.requireNonNull($.principalId, "expected parameter 'principalId' to be non-null");
            $.roleDefinitionId = Objects.requireNonNull($.roleDefinitionId, "expected parameter 'roleDefinitionId' to be non-null");
            return $;
        }
    }

}
