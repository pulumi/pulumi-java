// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.managedservices.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Authorization tuple containing principal Id (of user/service principal/security group) and role definition id.
 * 
 */
public final class AuthorizationResponse extends com.pulumi.resources.InvokeArgs {

    public static final AuthorizationResponse Empty = new AuthorizationResponse();

    /**
     * The delegatedRoleDefinitionIds field is required when the roleDefinitionId refers to the User Access Administrator Role. It is the list of role definition ids which define all the permissions that the user in the authorization can assign to other security groups/service principals/users.
     * 
     */
    @Import(name="delegatedRoleDefinitionIds")
      private final @Nullable List<String> delegatedRoleDefinitionIds;

    public List<String> delegatedRoleDefinitionIds() {
        return this.delegatedRoleDefinitionIds == null ? List.of() : this.delegatedRoleDefinitionIds;
    }

    /**
     * Principal Id of the security group/service principal/user that would be assigned permissions to the projected subscription
     * 
     */
    @Import(name="principalId", required=true)
      private final String principalId;

    public String principalId() {
        return this.principalId;
    }

    /**
     * Display name of the principal Id.
     * 
     */
    @Import(name="principalIdDisplayName")
      private final @Nullable String principalIdDisplayName;

    public Optional<String> principalIdDisplayName() {
        return this.principalIdDisplayName == null ? Optional.empty() : Optional.ofNullable(this.principalIdDisplayName);
    }

    /**
     * The role definition identifier. This role will define all the permissions that the security group/service principal/user must have on the projected subscription. This role cannot be an owner role.
     * 
     */
    @Import(name="roleDefinitionId", required=true)
      private final String roleDefinitionId;

    public String roleDefinitionId() {
        return this.roleDefinitionId;
    }

    public AuthorizationResponse(
        @Nullable List<String> delegatedRoleDefinitionIds,
        String principalId,
        @Nullable String principalIdDisplayName,
        String roleDefinitionId) {
        this.delegatedRoleDefinitionIds = delegatedRoleDefinitionIds;
        this.principalId = Objects.requireNonNull(principalId, "expected parameter 'principalId' to be non-null");
        this.principalIdDisplayName = principalIdDisplayName;
        this.roleDefinitionId = Objects.requireNonNull(roleDefinitionId, "expected parameter 'roleDefinitionId' to be non-null");
    }

    private AuthorizationResponse() {
        this.delegatedRoleDefinitionIds = List.of();
        this.principalId = null;
        this.principalIdDisplayName = null;
        this.roleDefinitionId = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AuthorizationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<String> delegatedRoleDefinitionIds;
        private String principalId;
        private @Nullable String principalIdDisplayName;
        private String roleDefinitionId;

        public Builder() {
    	      // Empty
        }

        public Builder(AuthorizationResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.delegatedRoleDefinitionIds = defaults.delegatedRoleDefinitionIds;
    	      this.principalId = defaults.principalId;
    	      this.principalIdDisplayName = defaults.principalIdDisplayName;
    	      this.roleDefinitionId = defaults.roleDefinitionId;
        }

        public Builder delegatedRoleDefinitionIds(@Nullable List<String> delegatedRoleDefinitionIds) {
            this.delegatedRoleDefinitionIds = delegatedRoleDefinitionIds;
            return this;
        }
        public Builder delegatedRoleDefinitionIds(String... delegatedRoleDefinitionIds) {
            return delegatedRoleDefinitionIds(List.of(delegatedRoleDefinitionIds));
        }
        public Builder principalId(String principalId) {
            this.principalId = Objects.requireNonNull(principalId);
            return this;
        }
        public Builder principalIdDisplayName(@Nullable String principalIdDisplayName) {
            this.principalIdDisplayName = principalIdDisplayName;
            return this;
        }
        public Builder roleDefinitionId(String roleDefinitionId) {
            this.roleDefinitionId = Objects.requireNonNull(roleDefinitionId);
            return this;
        }        public AuthorizationResponse build() {
            return new AuthorizationResponse(delegatedRoleDefinitionIds, principalId, principalIdDisplayName, roleDefinitionId);
        }
    }
}
