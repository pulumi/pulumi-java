// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.servicefabric.inputs;

import com.pulumi.azurenative.servicefabric.inputs.EndpointRangeDescriptionResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Describes a node type in the cluster, each node type represents sub set of nodes in the cluster.
 * 
 */
public final class NodeTypeDescriptionResponse extends com.pulumi.resources.InvokeArgs {

    public static final NodeTypeDescriptionResponse Empty = new NodeTypeDescriptionResponse();

    /**
     * The range of ports from which cluster assigned port to Service Fabric applications.
     * 
     */
    @Import(name="applicationPorts")
    private @Nullable EndpointRangeDescriptionResponse applicationPorts;

    public Optional<EndpointRangeDescriptionResponse> applicationPorts() {
        return Optional.ofNullable(this.applicationPorts);
    }

    /**
     * The capacity tags applied to the nodes in the node type, the cluster resource manager uses these tags to understand how much resource a node has.
     * 
     */
    @Import(name="capacities")
    private @Nullable Map<String,String> capacities;

    public Optional<Map<String,String>> capacities() {
        return Optional.ofNullable(this.capacities);
    }

    /**
     * The TCP cluster management endpoint port.
     * 
     */
    @Import(name="clientConnectionEndpointPort", required=true)
    private Integer clientConnectionEndpointPort;

    public Integer clientConnectionEndpointPort() {
        return this.clientConnectionEndpointPort;
    }

    /**
     * The durability level of the node type. Learn about [DurabilityLevel](https://docs.microsoft.com/azure/service-fabric/service-fabric-cluster-capacity).
     * 
     *   - Bronze - No privileges. This is the default.
     *   - Silver - The infrastructure jobs can be paused for a duration of 10 minutes per UD.
     *   - Gold - The infrastructure jobs can be paused for a duration of 2 hours per UD. Gold durability can be enabled only on full node VM skus like D15_V2, G5 etc.
     * 
     */
    @Import(name="durabilityLevel")
    private @Nullable String durabilityLevel;

    public Optional<String> durabilityLevel() {
        return Optional.ofNullable(this.durabilityLevel);
    }

    /**
     * The range of ephemeral ports that nodes in this node type should be configured with.
     * 
     */
    @Import(name="ephemeralPorts")
    private @Nullable EndpointRangeDescriptionResponse ephemeralPorts;

    public Optional<EndpointRangeDescriptionResponse> ephemeralPorts() {
        return Optional.ofNullable(this.ephemeralPorts);
    }

    /**
     * The HTTP cluster management endpoint port.
     * 
     */
    @Import(name="httpGatewayEndpointPort", required=true)
    private Integer httpGatewayEndpointPort;

    public Integer httpGatewayEndpointPort() {
        return this.httpGatewayEndpointPort;
    }

    /**
     * The node type on which system services will run. Only one node type should be marked as primary. Primary node type cannot be deleted or changed for existing clusters.
     * 
     */
    @Import(name="isPrimary", required=true)
    private Boolean isPrimary;

    public Boolean isPrimary() {
        return this.isPrimary;
    }

    /**
     * The name of the node type.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    public String name() {
        return this.name;
    }

    /**
     * The placement tags applied to nodes in the node type, which can be used to indicate where certain services (workload) should run.
     * 
     */
    @Import(name="placementProperties")
    private @Nullable Map<String,String> placementProperties;

    public Optional<Map<String,String>> placementProperties() {
        return Optional.ofNullable(this.placementProperties);
    }

    /**
     * The endpoint used by reverse proxy.
     * 
     */
    @Import(name="reverseProxyEndpointPort")
    private @Nullable Integer reverseProxyEndpointPort;

    public Optional<Integer> reverseProxyEndpointPort() {
        return Optional.ofNullable(this.reverseProxyEndpointPort);
    }

    /**
     * The number of nodes in the node type. This count should match the capacity property in the corresponding VirtualMachineScaleSet resource.
     * 
     */
    @Import(name="vmInstanceCount", required=true)
    private Integer vmInstanceCount;

    public Integer vmInstanceCount() {
        return this.vmInstanceCount;
    }

    private NodeTypeDescriptionResponse() {}

    private NodeTypeDescriptionResponse(NodeTypeDescriptionResponse $) {
        this.applicationPorts = $.applicationPorts;
        this.capacities = $.capacities;
        this.clientConnectionEndpointPort = $.clientConnectionEndpointPort;
        this.durabilityLevel = $.durabilityLevel;
        this.ephemeralPorts = $.ephemeralPorts;
        this.httpGatewayEndpointPort = $.httpGatewayEndpointPort;
        this.isPrimary = $.isPrimary;
        this.name = $.name;
        this.placementProperties = $.placementProperties;
        this.reverseProxyEndpointPort = $.reverseProxyEndpointPort;
        this.vmInstanceCount = $.vmInstanceCount;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NodeTypeDescriptionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NodeTypeDescriptionResponse $;

        public Builder() {
            $ = new NodeTypeDescriptionResponse();
        }

        public Builder(NodeTypeDescriptionResponse defaults) {
            $ = new NodeTypeDescriptionResponse(Objects.requireNonNull(defaults));
        }

        public Builder applicationPorts(@Nullable EndpointRangeDescriptionResponse applicationPorts) {
            $.applicationPorts = applicationPorts;
            return this;
        }

        public Builder capacities(@Nullable Map<String,String> capacities) {
            $.capacities = capacities;
            return this;
        }

        public Builder clientConnectionEndpointPort(Integer clientConnectionEndpointPort) {
            $.clientConnectionEndpointPort = clientConnectionEndpointPort;
            return this;
        }

        public Builder durabilityLevel(@Nullable String durabilityLevel) {
            $.durabilityLevel = durabilityLevel;
            return this;
        }

        public Builder ephemeralPorts(@Nullable EndpointRangeDescriptionResponse ephemeralPorts) {
            $.ephemeralPorts = ephemeralPorts;
            return this;
        }

        public Builder httpGatewayEndpointPort(Integer httpGatewayEndpointPort) {
            $.httpGatewayEndpointPort = httpGatewayEndpointPort;
            return this;
        }

        public Builder isPrimary(Boolean isPrimary) {
            $.isPrimary = isPrimary;
            return this;
        }

        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public Builder placementProperties(@Nullable Map<String,String> placementProperties) {
            $.placementProperties = placementProperties;
            return this;
        }

        public Builder reverseProxyEndpointPort(@Nullable Integer reverseProxyEndpointPort) {
            $.reverseProxyEndpointPort = reverseProxyEndpointPort;
            return this;
        }

        public Builder vmInstanceCount(Integer vmInstanceCount) {
            $.vmInstanceCount = vmInstanceCount;
            return this;
        }

        public NodeTypeDescriptionResponse build() {
            $.clientConnectionEndpointPort = Objects.requireNonNull($.clientConnectionEndpointPort, "expected parameter 'clientConnectionEndpointPort' to be non-null");
            $.httpGatewayEndpointPort = Objects.requireNonNull($.httpGatewayEndpointPort, "expected parameter 'httpGatewayEndpointPort' to be non-null");
            $.isPrimary = Objects.requireNonNull($.isPrimary, "expected parameter 'isPrimary' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.vmInstanceCount = Objects.requireNonNull($.vmInstanceCount, "expected parameter 'vmInstanceCount' to be non-null");
            return $;
        }
    }

}
