// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.containerinstance.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


/**
 * A container group or container instance event.
 * 
 */
public final class EventResponse extends com.pulumi.resources.InvokeArgs {

    public static final EventResponse Empty = new EventResponse();

    /**
     * The count of the event.
     * 
     */
    @Import(name="count", required=true)
    private Integer count;

    /**
     * @return The count of the event.
     * 
     */
    public Integer count() {
        return this.count;
    }

    /**
     * The date-time of the earliest logged event.
     * 
     */
    @Import(name="firstTimestamp", required=true)
    private String firstTimestamp;

    /**
     * @return The date-time of the earliest logged event.
     * 
     */
    public String firstTimestamp() {
        return this.firstTimestamp;
    }

    /**
     * The date-time of the latest logged event.
     * 
     */
    @Import(name="lastTimestamp", required=true)
    private String lastTimestamp;

    /**
     * @return The date-time of the latest logged event.
     * 
     */
    public String lastTimestamp() {
        return this.lastTimestamp;
    }

    /**
     * The event message.
     * 
     */
    @Import(name="message", required=true)
    private String message;

    /**
     * @return The event message.
     * 
     */
    public String message() {
        return this.message;
    }

    /**
     * The event name.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return The event name.
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * The event type.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    /**
     * @return The event type.
     * 
     */
    public String type() {
        return this.type;
    }

    private EventResponse() {}

    private EventResponse(EventResponse $) {
        this.count = $.count;
        this.firstTimestamp = $.firstTimestamp;
        this.lastTimestamp = $.lastTimestamp;
        this.message = $.message;
        this.name = $.name;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EventResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EventResponse $;

        public Builder() {
            $ = new EventResponse();
        }

        public Builder(EventResponse defaults) {
            $ = new EventResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param count The count of the event.
         * 
         * @return builder
         * 
         */
        public Builder count(Integer count) {
            $.count = count;
            return this;
        }

        /**
         * @param firstTimestamp The date-time of the earliest logged event.
         * 
         * @return builder
         * 
         */
        public Builder firstTimestamp(String firstTimestamp) {
            $.firstTimestamp = firstTimestamp;
            return this;
        }

        /**
         * @param lastTimestamp The date-time of the latest logged event.
         * 
         * @return builder
         * 
         */
        public Builder lastTimestamp(String lastTimestamp) {
            $.lastTimestamp = lastTimestamp;
            return this;
        }

        /**
         * @param message The event message.
         * 
         * @return builder
         * 
         */
        public Builder message(String message) {
            $.message = message;
            return this;
        }

        /**
         * @param name The event name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param type The event type.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public EventResponse build() {
            $.count = Objects.requireNonNull($.count, "expected parameter 'count' to be non-null");
            $.firstTimestamp = Objects.requireNonNull($.firstTimestamp, "expected parameter 'firstTimestamp' to be non-null");
            $.lastTimestamp = Objects.requireNonNull($.lastTimestamp, "expected parameter 'lastTimestamp' to be non-null");
            $.message = Objects.requireNonNull($.message, "expected parameter 'message' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
