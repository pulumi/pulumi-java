// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.logic.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


/**
 * The AS2 agreement envelope settings.
 * 
 */
public final class AS2EnvelopeSettingsResponse extends com.pulumi.resources.InvokeArgs {

    public static final AS2EnvelopeSettingsResponse Empty = new AS2EnvelopeSettingsResponse();

    /**
     * The value indicating whether to auto generate file name.
     * 
     */
    @Import(name="autogenerateFileName", required=true)
    private Boolean autogenerateFileName;

    public Boolean autogenerateFileName() {
        return this.autogenerateFileName;
    }

    /**
     * The template for file name.
     * 
     */
    @Import(name="fileNameTemplate", required=true)
    private String fileNameTemplate;

    public String fileNameTemplate() {
        return this.fileNameTemplate;
    }

    /**
     * The message content type.
     * 
     */
    @Import(name="messageContentType", required=true)
    private String messageContentType;

    public String messageContentType() {
        return this.messageContentType;
    }

    /**
     * The value indicating whether to suspend message on file name generation error.
     * 
     */
    @Import(name="suspendMessageOnFileNameGenerationError", required=true)
    private Boolean suspendMessageOnFileNameGenerationError;

    public Boolean suspendMessageOnFileNameGenerationError() {
        return this.suspendMessageOnFileNameGenerationError;
    }

    /**
     * The value indicating whether to transmit file name in mime header.
     * 
     */
    @Import(name="transmitFileNameInMimeHeader", required=true)
    private Boolean transmitFileNameInMimeHeader;

    public Boolean transmitFileNameInMimeHeader() {
        return this.transmitFileNameInMimeHeader;
    }

    private AS2EnvelopeSettingsResponse() {}

    private AS2EnvelopeSettingsResponse(AS2EnvelopeSettingsResponse $) {
        this.autogenerateFileName = $.autogenerateFileName;
        this.fileNameTemplate = $.fileNameTemplate;
        this.messageContentType = $.messageContentType;
        this.suspendMessageOnFileNameGenerationError = $.suspendMessageOnFileNameGenerationError;
        this.transmitFileNameInMimeHeader = $.transmitFileNameInMimeHeader;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AS2EnvelopeSettingsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AS2EnvelopeSettingsResponse $;

        public Builder() {
            $ = new AS2EnvelopeSettingsResponse();
        }

        public Builder(AS2EnvelopeSettingsResponse defaults) {
            $ = new AS2EnvelopeSettingsResponse(Objects.requireNonNull(defaults));
        }

        public Builder autogenerateFileName(Boolean autogenerateFileName) {
            $.autogenerateFileName = autogenerateFileName;
            return this;
        }

        public Builder fileNameTemplate(String fileNameTemplate) {
            $.fileNameTemplate = fileNameTemplate;
            return this;
        }

        public Builder messageContentType(String messageContentType) {
            $.messageContentType = messageContentType;
            return this;
        }

        public Builder suspendMessageOnFileNameGenerationError(Boolean suspendMessageOnFileNameGenerationError) {
            $.suspendMessageOnFileNameGenerationError = suspendMessageOnFileNameGenerationError;
            return this;
        }

        public Builder transmitFileNameInMimeHeader(Boolean transmitFileNameInMimeHeader) {
            $.transmitFileNameInMimeHeader = transmitFileNameInMimeHeader;
            return this;
        }

        public AS2EnvelopeSettingsResponse build() {
            $.autogenerateFileName = Objects.requireNonNull($.autogenerateFileName, "expected parameter 'autogenerateFileName' to be non-null");
            $.fileNameTemplate = Objects.requireNonNull($.fileNameTemplate, "expected parameter 'fileNameTemplate' to be non-null");
            $.messageContentType = Objects.requireNonNull($.messageContentType, "expected parameter 'messageContentType' to be non-null");
            $.suspendMessageOnFileNameGenerationError = Objects.requireNonNull($.suspendMessageOnFileNameGenerationError, "expected parameter 'suspendMessageOnFileNameGenerationError' to be non-null");
            $.transmitFileNameInMimeHeader = Objects.requireNonNull($.transmitFileNameInMimeHeader, "expected parameter 'transmitFileNameInMimeHeader' to be non-null");
            return $;
        }
    }

}
