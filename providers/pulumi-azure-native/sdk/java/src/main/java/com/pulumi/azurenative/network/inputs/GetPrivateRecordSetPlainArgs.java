// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class GetPrivateRecordSetPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetPrivateRecordSetPlainArgs Empty = new GetPrivateRecordSetPlainArgs();

    /**
     * The name of the Private DNS zone (without a terminating dot).
     * 
     */
    @Import(name="privateZoneName", required=true)
    private String privateZoneName;

    /**
     * @return The name of the Private DNS zone (without a terminating dot).
     * 
     */
    public String privateZoneName() {
        return this.privateZoneName;
    }

    /**
     * The type of DNS record in this record set.
     * 
     */
    @Import(name="recordType", required=true)
    private String recordType;

    /**
     * @return The type of DNS record in this record set.
     * 
     */
    public String recordType() {
        return this.recordType;
    }

    /**
     * The name of the record set, relative to the name of the zone.
     * 
     */
    @Import(name="relativeRecordSetName", required=true)
    private String relativeRecordSetName;

    /**
     * @return The name of the record set, relative to the name of the zone.
     * 
     */
    public String relativeRecordSetName() {
        return this.relativeRecordSetName;
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private String resourceGroupName;

    /**
     * @return The name of the resource group.
     * 
     */
    public String resourceGroupName() {
        return this.resourceGroupName;
    }

    private GetPrivateRecordSetPlainArgs() {}

    private GetPrivateRecordSetPlainArgs(GetPrivateRecordSetPlainArgs $) {
        this.privateZoneName = $.privateZoneName;
        this.recordType = $.recordType;
        this.relativeRecordSetName = $.relativeRecordSetName;
        this.resourceGroupName = $.resourceGroupName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPrivateRecordSetPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPrivateRecordSetPlainArgs $;

        public Builder() {
            $ = new GetPrivateRecordSetPlainArgs();
        }

        public Builder(GetPrivateRecordSetPlainArgs defaults) {
            $ = new GetPrivateRecordSetPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param privateZoneName The name of the Private DNS zone (without a terminating dot).
         * 
         * @return builder
         * 
         */
        public Builder privateZoneName(String privateZoneName) {
            $.privateZoneName = privateZoneName;
            return this;
        }

        /**
         * @param recordType The type of DNS record in this record set.
         * 
         * @return builder
         * 
         */
        public Builder recordType(String recordType) {
            $.recordType = recordType;
            return this;
        }

        /**
         * @param relativeRecordSetName The name of the record set, relative to the name of the zone.
         * 
         * @return builder
         * 
         */
        public Builder relativeRecordSetName(String relativeRecordSetName) {
            $.relativeRecordSetName = relativeRecordSetName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public GetPrivateRecordSetPlainArgs build() {
            $.privateZoneName = Objects.requireNonNull($.privateZoneName, "expected parameter 'privateZoneName' to be non-null");
            $.recordType = Objects.requireNonNull($.recordType, "expected parameter 'recordType' to be non-null");
            $.relativeRecordSetName = Objects.requireNonNull($.relativeRecordSetName, "expected parameter 'relativeRecordSetName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
