// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.dataprotection.inputs;

import com.pulumi.azurenative.dataprotection.enums.DataStoreTypes;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * DataStoreInfo base
 * 
 */
public final class DataStoreInfoBaseArgs extends com.pulumi.resources.ResourceArgs {

    public static final DataStoreInfoBaseArgs Empty = new DataStoreInfoBaseArgs();

    /**
     * type of datastore; Operational/Vault/Archive
     * 
     */
    @Import(name="dataStoreType", required=true)
    private Output<Either<String,DataStoreTypes>> dataStoreType;

    /**
     * @return type of datastore; Operational/Vault/Archive
     * 
     */
    public Output<Either<String,DataStoreTypes>> dataStoreType() {
        return this.dataStoreType;
    }

    /**
     * Type of Datasource object, used to initialize the right inherited type
     * 
     */
    @Import(name="objectType", required=true)
    private Output<String> objectType;

    /**
     * @return Type of Datasource object, used to initialize the right inherited type
     * 
     */
    public Output<String> objectType() {
        return this.objectType;
    }

    private DataStoreInfoBaseArgs() {}

    private DataStoreInfoBaseArgs(DataStoreInfoBaseArgs $) {
        this.dataStoreType = $.dataStoreType;
        this.objectType = $.objectType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataStoreInfoBaseArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataStoreInfoBaseArgs $;

        public Builder() {
            $ = new DataStoreInfoBaseArgs();
        }

        public Builder(DataStoreInfoBaseArgs defaults) {
            $ = new DataStoreInfoBaseArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dataStoreType type of datastore; Operational/Vault/Archive
         * 
         * @return builder
         * 
         */
        public Builder dataStoreType(Output<Either<String,DataStoreTypes>> dataStoreType) {
            $.dataStoreType = dataStoreType;
            return this;
        }

        /**
         * @param dataStoreType type of datastore; Operational/Vault/Archive
         * 
         * @return builder
         * 
         */
        public Builder dataStoreType(Either<String,DataStoreTypes> dataStoreType) {
            return dataStoreType(Output.of(dataStoreType));
        }

        /**
         * @param dataStoreType type of datastore; Operational/Vault/Archive
         * 
         * @return builder
         * 
         */
        public Builder dataStoreType(String dataStoreType) {
            return dataStoreType(Either.ofLeft(dataStoreType));
        }

        /**
         * @param dataStoreType type of datastore; Operational/Vault/Archive
         * 
         * @return builder
         * 
         */
        public Builder dataStoreType(DataStoreTypes dataStoreType) {
            return dataStoreType(Either.ofRight(dataStoreType));
        }

        /**
         * @param objectType Type of Datasource object, used to initialize the right inherited type
         * 
         * @return builder
         * 
         */
        public Builder objectType(Output<String> objectType) {
            $.objectType = objectType;
            return this;
        }

        /**
         * @param objectType Type of Datasource object, used to initialize the right inherited type
         * 
         * @return builder
         * 
         */
        public Builder objectType(String objectType) {
            return objectType(Output.of(objectType));
        }

        public DataStoreInfoBaseArgs build() {
            $.dataStoreType = Objects.requireNonNull($.dataStoreType, "expected parameter 'dataStoreType' to be non-null");
            $.objectType = Objects.requireNonNull($.objectType, "expected parameter 'objectType' to be non-null");
            return $;
        }
    }

}
