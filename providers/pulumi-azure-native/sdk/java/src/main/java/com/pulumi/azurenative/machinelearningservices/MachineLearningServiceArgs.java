// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.machinelearningservices;

import com.pulumi.azurenative.machinelearningservices.enums.ComputeEnvironmentType;
import com.pulumi.azurenative.machinelearningservices.inputs.CreateServiceRequestEnvironmentImageRequestArgs;
import com.pulumi.azurenative.machinelearningservices.inputs.CreateServiceRequestKeysArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MachineLearningServiceArgs extends com.pulumi.resources.ResourceArgs {

    public static final MachineLearningServiceArgs Empty = new MachineLearningServiceArgs();

    /**
     * The compute environment type for the service.
     * 
     */
    @Import(name="computeType", required=true)
    private Output<Either<String,ComputeEnvironmentType>> computeType;

    public Output<Either<String,ComputeEnvironmentType>> computeType() {
        return this.computeType;
    }

    /**
     * The description of the service.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The Environment, models and assets needed for inferencing.
     * 
     */
    @Import(name="environmentImageRequest")
    private @Nullable Output<CreateServiceRequestEnvironmentImageRequestArgs> environmentImageRequest;

    public Optional<Output<CreateServiceRequestEnvironmentImageRequestArgs>> environmentImageRequest() {
        return Optional.ofNullable(this.environmentImageRequest);
    }

    /**
     * The authentication keys.
     * 
     */
    @Import(name="keys")
    private @Nullable Output<CreateServiceRequestKeysArgs> keys;

    public Optional<Output<CreateServiceRequestKeysArgs>> keys() {
        return Optional.ofNullable(this.keys);
    }

    /**
     * The service tag dictionary. Tags are mutable.
     * 
     */
    @Import(name="kvTags")
    private @Nullable Output<Map<String,String>> kvTags;

    public Optional<Output<Map<String,String>>> kvTags() {
        return Optional.ofNullable(this.kvTags);
    }

    /**
     * The name of the Azure location/region.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The service properties dictionary. Properties are immutable.
     * 
     */
    @Import(name="properties")
    private @Nullable Output<Map<String,String>> properties;

    public Optional<Output<Map<String,String>>> properties() {
        return Optional.ofNullable(this.properties);
    }

    /**
     * Name of the resource group in which workspace is located.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Name of the Azure Machine Learning service.
     * 
     */
    @Import(name="serviceName")
    private @Nullable Output<String> serviceName;

    public Optional<Output<String>> serviceName() {
        return Optional.ofNullable(this.serviceName);
    }

    /**
     * Name of Azure Machine Learning workspace.
     * 
     */
    @Import(name="workspaceName", required=true)
    private Output<String> workspaceName;

    public Output<String> workspaceName() {
        return this.workspaceName;
    }

    private MachineLearningServiceArgs() {}

    private MachineLearningServiceArgs(MachineLearningServiceArgs $) {
        this.computeType = $.computeType;
        this.description = $.description;
        this.environmentImageRequest = $.environmentImageRequest;
        this.keys = $.keys;
        this.kvTags = $.kvTags;
        this.location = $.location;
        this.properties = $.properties;
        this.resourceGroupName = $.resourceGroupName;
        this.serviceName = $.serviceName;
        this.workspaceName = $.workspaceName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MachineLearningServiceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MachineLearningServiceArgs $;

        public Builder() {
            $ = new MachineLearningServiceArgs();
        }

        public Builder(MachineLearningServiceArgs defaults) {
            $ = new MachineLearningServiceArgs(Objects.requireNonNull(defaults));
        }

        public Builder computeType(Output<Either<String,ComputeEnvironmentType>> computeType) {
            $.computeType = computeType;
            return this;
        }

        public Builder computeType(Either<String,ComputeEnvironmentType> computeType) {
            return computeType(Output.of(computeType));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder environmentImageRequest(@Nullable Output<CreateServiceRequestEnvironmentImageRequestArgs> environmentImageRequest) {
            $.environmentImageRequest = environmentImageRequest;
            return this;
        }

        public Builder environmentImageRequest(CreateServiceRequestEnvironmentImageRequestArgs environmentImageRequest) {
            return environmentImageRequest(Output.of(environmentImageRequest));
        }

        public Builder keys(@Nullable Output<CreateServiceRequestKeysArgs> keys) {
            $.keys = keys;
            return this;
        }

        public Builder keys(CreateServiceRequestKeysArgs keys) {
            return keys(Output.of(keys));
        }

        public Builder kvTags(@Nullable Output<Map<String,String>> kvTags) {
            $.kvTags = kvTags;
            return this;
        }

        public Builder kvTags(Map<String,String> kvTags) {
            return kvTags(Output.of(kvTags));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder properties(@Nullable Output<Map<String,String>> properties) {
            $.properties = properties;
            return this;
        }

        public Builder properties(Map<String,String> properties) {
            return properties(Output.of(properties));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder serviceName(@Nullable Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        public Builder workspaceName(Output<String> workspaceName) {
            $.workspaceName = workspaceName;
            return this;
        }

        public Builder workspaceName(String workspaceName) {
            return workspaceName(Output.of(workspaceName));
        }

        public MachineLearningServiceArgs build() {
            $.computeType = Objects.requireNonNull($.computeType, "expected parameter 'computeType' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.workspaceName = Objects.requireNonNull($.workspaceName, "expected parameter 'workspaceName' to be non-null");
            return $;
        }
    }

}
