// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Cursor methods for Mongodb query
 * 
 */
public final class MongoDbCursorMethodsPropertiesArgs extends com.pulumi.resources.ResourceArgs {

    public static final MongoDbCursorMethodsPropertiesArgs Empty = new MongoDbCursorMethodsPropertiesArgs();

    /**
     * Specifies the maximum number of documents the server returns. limit() is analogous to the LIMIT statement in a SQL database. Type: integer (or Expression with resultType integer).
     * 
     */
    @Import(name="limit")
    private @Nullable Output<Object> limit;

    /**
     * @return Specifies the maximum number of documents the server returns. limit() is analogous to the LIMIT statement in a SQL database. Type: integer (or Expression with resultType integer).
     * 
     */
    public Optional<Output<Object>> limit() {
        return Optional.ofNullable(this.limit);
    }

    /**
     * Specifies the fields to return in the documents that match the query filter. To return all fields in the matching documents, omit this parameter. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="project")
    private @Nullable Output<Object> project;

    /**
     * @return Specifies the fields to return in the documents that match the query filter. To return all fields in the matching documents, omit this parameter. Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Output<Object>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * Specifies the how many documents skipped and where MongoDB begins returning results. This approach may be useful in implementing paginated results. Type: integer (or Expression with resultType integer).
     * 
     */
    @Import(name="skip")
    private @Nullable Output<Object> skip;

    /**
     * @return Specifies the how many documents skipped and where MongoDB begins returning results. This approach may be useful in implementing paginated results. Type: integer (or Expression with resultType integer).
     * 
     */
    public Optional<Output<Object>> skip() {
        return Optional.ofNullable(this.skip);
    }

    /**
     * Specifies the order in which the query returns matching documents. Type: string (or Expression with resultType string). Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="sort")
    private @Nullable Output<Object> sort;

    /**
     * @return Specifies the order in which the query returns matching documents. Type: string (or Expression with resultType string). Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Output<Object>> sort() {
        return Optional.ofNullable(this.sort);
    }

    private MongoDbCursorMethodsPropertiesArgs() {}

    private MongoDbCursorMethodsPropertiesArgs(MongoDbCursorMethodsPropertiesArgs $) {
        this.limit = $.limit;
        this.project = $.project;
        this.skip = $.skip;
        this.sort = $.sort;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MongoDbCursorMethodsPropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MongoDbCursorMethodsPropertiesArgs $;

        public Builder() {
            $ = new MongoDbCursorMethodsPropertiesArgs();
        }

        public Builder(MongoDbCursorMethodsPropertiesArgs defaults) {
            $ = new MongoDbCursorMethodsPropertiesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param limit Specifies the maximum number of documents the server returns. limit() is analogous to the LIMIT statement in a SQL database. Type: integer (or Expression with resultType integer).
         * 
         * @return builder
         * 
         */
        public Builder limit(@Nullable Output<Object> limit) {
            $.limit = limit;
            return this;
        }

        /**
         * @param limit Specifies the maximum number of documents the server returns. limit() is analogous to the LIMIT statement in a SQL database. Type: integer (or Expression with resultType integer).
         * 
         * @return builder
         * 
         */
        public Builder limit(Object limit) {
            return limit(Output.of(limit));
        }

        /**
         * @param project Specifies the fields to return in the documents that match the query filter. To return all fields in the matching documents, omit this parameter. Type: string (or Expression with resultType string).
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<Object> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project Specifies the fields to return in the documents that match the query filter. To return all fields in the matching documents, omit this parameter. Type: string (or Expression with resultType string).
         * 
         * @return builder
         * 
         */
        public Builder project(Object project) {
            return project(Output.of(project));
        }

        /**
         * @param skip Specifies the how many documents skipped and where MongoDB begins returning results. This approach may be useful in implementing paginated results. Type: integer (or Expression with resultType integer).
         * 
         * @return builder
         * 
         */
        public Builder skip(@Nullable Output<Object> skip) {
            $.skip = skip;
            return this;
        }

        /**
         * @param skip Specifies the how many documents skipped and where MongoDB begins returning results. This approach may be useful in implementing paginated results. Type: integer (or Expression with resultType integer).
         * 
         * @return builder
         * 
         */
        public Builder skip(Object skip) {
            return skip(Output.of(skip));
        }

        /**
         * @param sort Specifies the order in which the query returns matching documents. Type: string (or Expression with resultType string). Type: string (or Expression with resultType string).
         * 
         * @return builder
         * 
         */
        public Builder sort(@Nullable Output<Object> sort) {
            $.sort = sort;
            return this;
        }

        /**
         * @param sort Specifies the order in which the query returns matching documents. Type: string (or Expression with resultType string). Type: string (or Expression with resultType string).
         * 
         * @return builder
         * 
         */
        public Builder sort(Object sort) {
            return sort(Output.of(sort));
        }

        public MongoDbCursorMethodsPropertiesArgs build() {
            return $;
        }
    }

}
