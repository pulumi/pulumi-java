// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.azurenative.network.inputs.SubResourceResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Request routing rule of an application gateway.
 * 
 */
public final class ApplicationGatewayRequestRoutingRuleResponse extends com.pulumi.resources.InvokeArgs {

    public static final ApplicationGatewayRequestRoutingRuleResponse Empty = new ApplicationGatewayRequestRoutingRuleResponse();

    /**
     * Backend address pool resource of the application gateway.
     * 
     */
    @Import(name="backendAddressPool")
    private @Nullable SubResourceResponse backendAddressPool;

    /**
     * @return Backend address pool resource of the application gateway.
     * 
     */
    public Optional<SubResourceResponse> backendAddressPool() {
        return Optional.ofNullable(this.backendAddressPool);
    }

    /**
     * Backend http settings resource of the application gateway.
     * 
     */
    @Import(name="backendHttpSettings")
    private @Nullable SubResourceResponse backendHttpSettings;

    /**
     * @return Backend http settings resource of the application gateway.
     * 
     */
    public Optional<SubResourceResponse> backendHttpSettings() {
        return Optional.ofNullable(this.backendHttpSettings);
    }

    /**
     * A unique read-only string that changes whenever the resource is updated.
     * 
     */
    @Import(name="etag", required=true)
    private String etag;

    /**
     * @return A unique read-only string that changes whenever the resource is updated.
     * 
     */
    public String etag() {
        return this.etag;
    }

    /**
     * Http listener resource of the application gateway.
     * 
     */
    @Import(name="httpListener")
    private @Nullable SubResourceResponse httpListener;

    /**
     * @return Http listener resource of the application gateway.
     * 
     */
    public Optional<SubResourceResponse> httpListener() {
        return Optional.ofNullable(this.httpListener);
    }

    /**
     * Resource ID.
     * 
     */
    @Import(name="id")
    private @Nullable String id;

    /**
     * @return Resource ID.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Name of the request routing rule that is unique within an Application Gateway.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return Name of the request routing rule that is unique within an Application Gateway.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Priority of the request routing rule.
     * 
     */
    @Import(name="priority")
    private @Nullable Integer priority;

    /**
     * @return Priority of the request routing rule.
     * 
     */
    public Optional<Integer> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * The provisioning state of the request routing rule resource.
     * 
     */
    @Import(name="provisioningState", required=true)
    private String provisioningState;

    /**
     * @return The provisioning state of the request routing rule resource.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Redirect configuration resource of the application gateway.
     * 
     */
    @Import(name="redirectConfiguration")
    private @Nullable SubResourceResponse redirectConfiguration;

    /**
     * @return Redirect configuration resource of the application gateway.
     * 
     */
    public Optional<SubResourceResponse> redirectConfiguration() {
        return Optional.ofNullable(this.redirectConfiguration);
    }

    /**
     * Rewrite Rule Set resource in Basic rule of the application gateway.
     * 
     */
    @Import(name="rewriteRuleSet")
    private @Nullable SubResourceResponse rewriteRuleSet;

    /**
     * @return Rewrite Rule Set resource in Basic rule of the application gateway.
     * 
     */
    public Optional<SubResourceResponse> rewriteRuleSet() {
        return Optional.ofNullable(this.rewriteRuleSet);
    }

    /**
     * Rule type.
     * 
     */
    @Import(name="ruleType")
    private @Nullable String ruleType;

    /**
     * @return Rule type.
     * 
     */
    public Optional<String> ruleType() {
        return Optional.ofNullable(this.ruleType);
    }

    /**
     * Type of the resource.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    /**
     * @return Type of the resource.
     * 
     */
    public String type() {
        return this.type;
    }

    /**
     * URL path map resource of the application gateway.
     * 
     */
    @Import(name="urlPathMap")
    private @Nullable SubResourceResponse urlPathMap;

    /**
     * @return URL path map resource of the application gateway.
     * 
     */
    public Optional<SubResourceResponse> urlPathMap() {
        return Optional.ofNullable(this.urlPathMap);
    }

    private ApplicationGatewayRequestRoutingRuleResponse() {}

    private ApplicationGatewayRequestRoutingRuleResponse(ApplicationGatewayRequestRoutingRuleResponse $) {
        this.backendAddressPool = $.backendAddressPool;
        this.backendHttpSettings = $.backendHttpSettings;
        this.etag = $.etag;
        this.httpListener = $.httpListener;
        this.id = $.id;
        this.name = $.name;
        this.priority = $.priority;
        this.provisioningState = $.provisioningState;
        this.redirectConfiguration = $.redirectConfiguration;
        this.rewriteRuleSet = $.rewriteRuleSet;
        this.ruleType = $.ruleType;
        this.type = $.type;
        this.urlPathMap = $.urlPathMap;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplicationGatewayRequestRoutingRuleResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplicationGatewayRequestRoutingRuleResponse $;

        public Builder() {
            $ = new ApplicationGatewayRequestRoutingRuleResponse();
        }

        public Builder(ApplicationGatewayRequestRoutingRuleResponse defaults) {
            $ = new ApplicationGatewayRequestRoutingRuleResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param backendAddressPool Backend address pool resource of the application gateway.
         * 
         * @return builder
         * 
         */
        public Builder backendAddressPool(@Nullable SubResourceResponse backendAddressPool) {
            $.backendAddressPool = backendAddressPool;
            return this;
        }

        /**
         * @param backendHttpSettings Backend http settings resource of the application gateway.
         * 
         * @return builder
         * 
         */
        public Builder backendHttpSettings(@Nullable SubResourceResponse backendHttpSettings) {
            $.backendHttpSettings = backendHttpSettings;
            return this;
        }

        /**
         * @param etag A unique read-only string that changes whenever the resource is updated.
         * 
         * @return builder
         * 
         */
        public Builder etag(String etag) {
            $.etag = etag;
            return this;
        }

        /**
         * @param httpListener Http listener resource of the application gateway.
         * 
         * @return builder
         * 
         */
        public Builder httpListener(@Nullable SubResourceResponse httpListener) {
            $.httpListener = httpListener;
            return this;
        }

        /**
         * @param id Resource ID.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable String id) {
            $.id = id;
            return this;
        }

        /**
         * @param name Name of the request routing rule that is unique within an Application Gateway.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param priority Priority of the request routing rule.
         * 
         * @return builder
         * 
         */
        public Builder priority(@Nullable Integer priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param provisioningState The provisioning state of the request routing rule resource.
         * 
         * @return builder
         * 
         */
        public Builder provisioningState(String provisioningState) {
            $.provisioningState = provisioningState;
            return this;
        }

        /**
         * @param redirectConfiguration Redirect configuration resource of the application gateway.
         * 
         * @return builder
         * 
         */
        public Builder redirectConfiguration(@Nullable SubResourceResponse redirectConfiguration) {
            $.redirectConfiguration = redirectConfiguration;
            return this;
        }

        /**
         * @param rewriteRuleSet Rewrite Rule Set resource in Basic rule of the application gateway.
         * 
         * @return builder
         * 
         */
        public Builder rewriteRuleSet(@Nullable SubResourceResponse rewriteRuleSet) {
            $.rewriteRuleSet = rewriteRuleSet;
            return this;
        }

        /**
         * @param ruleType Rule type.
         * 
         * @return builder
         * 
         */
        public Builder ruleType(@Nullable String ruleType) {
            $.ruleType = ruleType;
            return this;
        }

        /**
         * @param type Type of the resource.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            $.type = type;
            return this;
        }

        /**
         * @param urlPathMap URL path map resource of the application gateway.
         * 
         * @return builder
         * 
         */
        public Builder urlPathMap(@Nullable SubResourceResponse urlPathMap) {
            $.urlPathMap = urlPathMap;
            return this;
        }

        public ApplicationGatewayRequestRoutingRuleResponse build() {
            $.etag = Objects.requireNonNull($.etag, "expected parameter 'etag' to be non-null");
            $.provisioningState = Objects.requireNonNull($.provisioningState, "expected parameter 'provisioningState' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
