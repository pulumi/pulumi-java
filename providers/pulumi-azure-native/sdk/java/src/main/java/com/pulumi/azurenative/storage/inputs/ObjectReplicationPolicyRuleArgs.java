// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.storage.inputs;

import com.pulumi.azurenative.storage.inputs.ObjectReplicationPolicyFilterArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The replication policy rule between two containers.
 * 
 */
public final class ObjectReplicationPolicyRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final ObjectReplicationPolicyRuleArgs Empty = new ObjectReplicationPolicyRuleArgs();

    /**
     * Required. Destination container name.
     * 
     */
    @Import(name="destinationContainer", required=true)
    private Output<String> destinationContainer;

    /**
     * @return Required. Destination container name.
     * 
     */
    public Output<String> destinationContainer() {
        return this.destinationContainer;
    }

    /**
     * Optional. An object that defines the filter set.
     * 
     */
    @Import(name="filters")
    private @Nullable Output<ObjectReplicationPolicyFilterArgs> filters;

    /**
     * @return Optional. An object that defines the filter set.
     * 
     */
    public Optional<Output<ObjectReplicationPolicyFilterArgs>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * Rule Id is auto-generated for each new rule on destination account. It is required for put policy on source account.
     * 
     */
    @Import(name="ruleId")
    private @Nullable Output<String> ruleId;

    /**
     * @return Rule Id is auto-generated for each new rule on destination account. It is required for put policy on source account.
     * 
     */
    public Optional<Output<String>> ruleId() {
        return Optional.ofNullable(this.ruleId);
    }

    /**
     * Required. Source container name.
     * 
     */
    @Import(name="sourceContainer", required=true)
    private Output<String> sourceContainer;

    /**
     * @return Required. Source container name.
     * 
     */
    public Output<String> sourceContainer() {
        return this.sourceContainer;
    }

    private ObjectReplicationPolicyRuleArgs() {}

    private ObjectReplicationPolicyRuleArgs(ObjectReplicationPolicyRuleArgs $) {
        this.destinationContainer = $.destinationContainer;
        this.filters = $.filters;
        this.ruleId = $.ruleId;
        this.sourceContainer = $.sourceContainer;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ObjectReplicationPolicyRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ObjectReplicationPolicyRuleArgs $;

        public Builder() {
            $ = new ObjectReplicationPolicyRuleArgs();
        }

        public Builder(ObjectReplicationPolicyRuleArgs defaults) {
            $ = new ObjectReplicationPolicyRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param destinationContainer Required. Destination container name.
         * 
         * @return builder
         * 
         */
        public Builder destinationContainer(Output<String> destinationContainer) {
            $.destinationContainer = destinationContainer;
            return this;
        }

        /**
         * @param destinationContainer Required. Destination container name.
         * 
         * @return builder
         * 
         */
        public Builder destinationContainer(String destinationContainer) {
            return destinationContainer(Output.of(destinationContainer));
        }

        /**
         * @param filters Optional. An object that defines the filter set.
         * 
         * @return builder
         * 
         */
        public Builder filters(@Nullable Output<ObjectReplicationPolicyFilterArgs> filters) {
            $.filters = filters;
            return this;
        }

        /**
         * @param filters Optional. An object that defines the filter set.
         * 
         * @return builder
         * 
         */
        public Builder filters(ObjectReplicationPolicyFilterArgs filters) {
            return filters(Output.of(filters));
        }

        /**
         * @param ruleId Rule Id is auto-generated for each new rule on destination account. It is required for put policy on source account.
         * 
         * @return builder
         * 
         */
        public Builder ruleId(@Nullable Output<String> ruleId) {
            $.ruleId = ruleId;
            return this;
        }

        /**
         * @param ruleId Rule Id is auto-generated for each new rule on destination account. It is required for put policy on source account.
         * 
         * @return builder
         * 
         */
        public Builder ruleId(String ruleId) {
            return ruleId(Output.of(ruleId));
        }

        /**
         * @param sourceContainer Required. Source container name.
         * 
         * @return builder
         * 
         */
        public Builder sourceContainer(Output<String> sourceContainer) {
            $.sourceContainer = sourceContainer;
            return this;
        }

        /**
         * @param sourceContainer Required. Source container name.
         * 
         * @return builder
         * 
         */
        public Builder sourceContainer(String sourceContainer) {
            return sourceContainer(Output.of(sourceContainer));
        }

        public ObjectReplicationPolicyRuleArgs build() {
            $.destinationContainer = Objects.requireNonNull($.destinationContainer, "expected parameter 'destinationContainer' to be non-null");
            $.sourceContainer = Objects.requireNonNull($.sourceContainer, "expected parameter 'sourceContainer' to be non-null");
            return $;
        }
    }

}
