// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.costmanagement.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The properties of the scheduled action notification.
 * 
 */
public final class NotificationPropertiesArgs extends com.pulumi.resources.ResourceArgs {

    public static final NotificationPropertiesArgs Empty = new NotificationPropertiesArgs();

    /**
     * Optional message to be added in the email. Length is limited to 250 characters.
     * 
     */
    @Import(name="message")
    private @Nullable Output<String> message;

    /**
     * @return Optional message to be added in the email. Length is limited to 250 characters.
     * 
     */
    public Optional<Output<String>> message() {
        return Optional.ofNullable(this.message);
    }

    /**
     * Subject of the email. Length is limited to 70 characters.
     * 
     */
    @Import(name="subject", required=true)
    private Output<String> subject;

    /**
     * @return Subject of the email. Length is limited to 70 characters.
     * 
     */
    public Output<String> subject() {
        return this.subject;
    }

    /**
     * Array of email addresses.
     * 
     */
    @Import(name="to", required=true)
    private Output<List<String>> to;

    /**
     * @return Array of email addresses.
     * 
     */
    public Output<List<String>> to() {
        return this.to;
    }

    private NotificationPropertiesArgs() {}

    private NotificationPropertiesArgs(NotificationPropertiesArgs $) {
        this.message = $.message;
        this.subject = $.subject;
        this.to = $.to;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NotificationPropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NotificationPropertiesArgs $;

        public Builder() {
            $ = new NotificationPropertiesArgs();
        }

        public Builder(NotificationPropertiesArgs defaults) {
            $ = new NotificationPropertiesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param message Optional message to be added in the email. Length is limited to 250 characters.
         * 
         * @return builder
         * 
         */
        public Builder message(@Nullable Output<String> message) {
            $.message = message;
            return this;
        }

        /**
         * @param message Optional message to be added in the email. Length is limited to 250 characters.
         * 
         * @return builder
         * 
         */
        public Builder message(String message) {
            return message(Output.of(message));
        }

        /**
         * @param subject Subject of the email. Length is limited to 70 characters.
         * 
         * @return builder
         * 
         */
        public Builder subject(Output<String> subject) {
            $.subject = subject;
            return this;
        }

        /**
         * @param subject Subject of the email. Length is limited to 70 characters.
         * 
         * @return builder
         * 
         */
        public Builder subject(String subject) {
            return subject(Output.of(subject));
        }

        /**
         * @param to Array of email addresses.
         * 
         * @return builder
         * 
         */
        public Builder to(Output<List<String>> to) {
            $.to = to;
            return this;
        }

        /**
         * @param to Array of email addresses.
         * 
         * @return builder
         * 
         */
        public Builder to(List<String> to) {
            return to(Output.of(to));
        }

        /**
         * @param to Array of email addresses.
         * 
         * @return builder
         * 
         */
        public Builder to(String... to) {
            return to(List.of(to));
        }

        public NotificationPropertiesArgs build() {
            $.subject = Objects.requireNonNull($.subject, "expected parameter 'subject' to be non-null");
            $.to = Objects.requireNonNull($.to, "expected parameter 'to' to be non-null");
            return $;
        }
    }

}
