// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.customerinsights.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The definition of a prediction distribution.
 * 
 */
public final class PredictionDistributionDefinitionResponseDistributions extends com.pulumi.resources.InvokeArgs {

    public static final PredictionDistributionDefinitionResponseDistributions Empty = new PredictionDistributionDefinitionResponseDistributions();

    /**
     * Number of negatives.
     * 
     */
    @Import(name="negatives")
    private @Nullable Double negatives;

    /**
     * @return Number of negatives.
     * 
     */
    public Optional<Double> negatives() {
        return Optional.ofNullable(this.negatives);
    }

    /**
     * Number of negatives above threshold.
     * 
     */
    @Import(name="negativesAboveThreshold")
    private @Nullable Double negativesAboveThreshold;

    /**
     * @return Number of negatives above threshold.
     * 
     */
    public Optional<Double> negativesAboveThreshold() {
        return Optional.ofNullable(this.negativesAboveThreshold);
    }

    /**
     * Number of positives.
     * 
     */
    @Import(name="positives")
    private @Nullable Double positives;

    /**
     * @return Number of positives.
     * 
     */
    public Optional<Double> positives() {
        return Optional.ofNullable(this.positives);
    }

    /**
     * Number of positives above threshold.
     * 
     */
    @Import(name="positivesAboveThreshold")
    private @Nullable Double positivesAboveThreshold;

    /**
     * @return Number of positives above threshold.
     * 
     */
    public Optional<Double> positivesAboveThreshold() {
        return Optional.ofNullable(this.positivesAboveThreshold);
    }

    /**
     * Score threshold.
     * 
     */
    @Import(name="scoreThreshold")
    private @Nullable Integer scoreThreshold;

    /**
     * @return Score threshold.
     * 
     */
    public Optional<Integer> scoreThreshold() {
        return Optional.ofNullable(this.scoreThreshold);
    }

    private PredictionDistributionDefinitionResponseDistributions() {}

    private PredictionDistributionDefinitionResponseDistributions(PredictionDistributionDefinitionResponseDistributions $) {
        this.negatives = $.negatives;
        this.negativesAboveThreshold = $.negativesAboveThreshold;
        this.positives = $.positives;
        this.positivesAboveThreshold = $.positivesAboveThreshold;
        this.scoreThreshold = $.scoreThreshold;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PredictionDistributionDefinitionResponseDistributions defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PredictionDistributionDefinitionResponseDistributions $;

        public Builder() {
            $ = new PredictionDistributionDefinitionResponseDistributions();
        }

        public Builder(PredictionDistributionDefinitionResponseDistributions defaults) {
            $ = new PredictionDistributionDefinitionResponseDistributions(Objects.requireNonNull(defaults));
        }

        /**
         * @param negatives Number of negatives.
         * 
         * @return builder
         * 
         */
        public Builder negatives(@Nullable Double negatives) {
            $.negatives = negatives;
            return this;
        }

        /**
         * @param negativesAboveThreshold Number of negatives above threshold.
         * 
         * @return builder
         * 
         */
        public Builder negativesAboveThreshold(@Nullable Double negativesAboveThreshold) {
            $.negativesAboveThreshold = negativesAboveThreshold;
            return this;
        }

        /**
         * @param positives Number of positives.
         * 
         * @return builder
         * 
         */
        public Builder positives(@Nullable Double positives) {
            $.positives = positives;
            return this;
        }

        /**
         * @param positivesAboveThreshold Number of positives above threshold.
         * 
         * @return builder
         * 
         */
        public Builder positivesAboveThreshold(@Nullable Double positivesAboveThreshold) {
            $.positivesAboveThreshold = positivesAboveThreshold;
            return this;
        }

        /**
         * @param scoreThreshold Score threshold.
         * 
         * @return builder
         * 
         */
        public Builder scoreThreshold(@Nullable Integer scoreThreshold) {
            $.scoreThreshold = scoreThreshold;
            return this;
        }

        public PredictionDistributionDefinitionResponseDistributions build() {
            return $;
        }
    }

}
