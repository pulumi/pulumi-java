// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.devtestlab;

import com.pulumi.azurenative.devtestlab.enums.EnvironmentPermission;
import com.pulumi.azurenative.devtestlab.enums.PremiumDataDisk;
import com.pulumi.azurenative.devtestlab.enums.StorageType;
import com.pulumi.azurenative.devtestlab.inputs.LabAnnouncementPropertiesArgs;
import com.pulumi.azurenative.devtestlab.inputs.LabSupportPropertiesArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LabArgs extends com.pulumi.resources.ResourceArgs {

    public static final LabArgs Empty = new LabArgs();

    /**
     * The properties of any lab announcement associated with this lab
     * 
     */
    @Import(name="announcement")
    private @Nullable Output<LabAnnouncementPropertiesArgs> announcement;

    public Optional<Output<LabAnnouncementPropertiesArgs>> announcement() {
        return Optional.ofNullable(this.announcement);
    }

    /**
     * The access rights to be granted to the user when provisioning an environment
     * 
     */
    @Import(name="environmentPermission")
    private @Nullable Output<Either<String,EnvironmentPermission>> environmentPermission;

    public Optional<Output<Either<String,EnvironmentPermission>>> environmentPermission() {
        return Optional.ofNullable(this.environmentPermission);
    }

    /**
     * Extended properties of the lab used for experimental features
     * 
     */
    @Import(name="extendedProperties")
    private @Nullable Output<Map<String,String>> extendedProperties;

    public Optional<Output<Map<String,String>>> extendedProperties() {
        return Optional.ofNullable(this.extendedProperties);
    }

    /**
     * Type of storage used by the lab. It can be either Premium or Standard. Default is Premium.
     * 
     */
    @Import(name="labStorageType")
    private @Nullable Output<Either<String,StorageType>> labStorageType;

    public Optional<Output<Either<String,StorageType>>> labStorageType() {
        return Optional.ofNullable(this.labStorageType);
    }

    /**
     * The location of the resource.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The ordered list of artifact resource IDs that should be applied on all Linux VM creations by default, prior to the artifacts specified by the user.
     * 
     */
    @Import(name="mandatoryArtifactsResourceIdsLinux")
    private @Nullable Output<List<String>> mandatoryArtifactsResourceIdsLinux;

    public Optional<Output<List<String>>> mandatoryArtifactsResourceIdsLinux() {
        return Optional.ofNullable(this.mandatoryArtifactsResourceIdsLinux);
    }

    /**
     * The ordered list of artifact resource IDs that should be applied on all Windows VM creations by default, prior to the artifacts specified by the user.
     * 
     */
    @Import(name="mandatoryArtifactsResourceIdsWindows")
    private @Nullable Output<List<String>> mandatoryArtifactsResourceIdsWindows;

    public Optional<Output<List<String>>> mandatoryArtifactsResourceIdsWindows() {
        return Optional.ofNullable(this.mandatoryArtifactsResourceIdsWindows);
    }

    /**
     * The name of the lab.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The setting to enable usage of premium data disks.
     * When its value is &#39;Enabled&#39;, creation of standard or premium data disks is allowed.
     * When its value is &#39;Disabled&#39;, only creation of standard data disks is allowed.
     * 
     */
    @Import(name="premiumDataDisks")
    private @Nullable Output<Either<String,PremiumDataDisk>> premiumDataDisks;

    public Optional<Output<Either<String,PremiumDataDisk>>> premiumDataDisks() {
        return Optional.ofNullable(this.premiumDataDisks);
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The properties of any lab support message associated with this lab
     * 
     */
    @Import(name="support")
    private @Nullable Output<LabSupportPropertiesArgs> support;

    public Optional<Output<LabSupportPropertiesArgs>> support() {
        return Optional.ofNullable(this.support);
    }

    /**
     * The tags of the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private LabArgs() {}

    private LabArgs(LabArgs $) {
        this.announcement = $.announcement;
        this.environmentPermission = $.environmentPermission;
        this.extendedProperties = $.extendedProperties;
        this.labStorageType = $.labStorageType;
        this.location = $.location;
        this.mandatoryArtifactsResourceIdsLinux = $.mandatoryArtifactsResourceIdsLinux;
        this.mandatoryArtifactsResourceIdsWindows = $.mandatoryArtifactsResourceIdsWindows;
        this.name = $.name;
        this.premiumDataDisks = $.premiumDataDisks;
        this.resourceGroupName = $.resourceGroupName;
        this.support = $.support;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LabArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LabArgs $;

        public Builder() {
            $ = new LabArgs();
        }

        public Builder(LabArgs defaults) {
            $ = new LabArgs(Objects.requireNonNull(defaults));
        }

        public Builder announcement(@Nullable Output<LabAnnouncementPropertiesArgs> announcement) {
            $.announcement = announcement;
            return this;
        }

        public Builder announcement(LabAnnouncementPropertiesArgs announcement) {
            return announcement(Output.of(announcement));
        }

        public Builder environmentPermission(@Nullable Output<Either<String,EnvironmentPermission>> environmentPermission) {
            $.environmentPermission = environmentPermission;
            return this;
        }

        public Builder environmentPermission(Either<String,EnvironmentPermission> environmentPermission) {
            return environmentPermission(Output.of(environmentPermission));
        }

        public Builder extendedProperties(@Nullable Output<Map<String,String>> extendedProperties) {
            $.extendedProperties = extendedProperties;
            return this;
        }

        public Builder extendedProperties(Map<String,String> extendedProperties) {
            return extendedProperties(Output.of(extendedProperties));
        }

        public Builder labStorageType(@Nullable Output<Either<String,StorageType>> labStorageType) {
            $.labStorageType = labStorageType;
            return this;
        }

        public Builder labStorageType(Either<String,StorageType> labStorageType) {
            return labStorageType(Output.of(labStorageType));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder mandatoryArtifactsResourceIdsLinux(@Nullable Output<List<String>> mandatoryArtifactsResourceIdsLinux) {
            $.mandatoryArtifactsResourceIdsLinux = mandatoryArtifactsResourceIdsLinux;
            return this;
        }

        public Builder mandatoryArtifactsResourceIdsLinux(List<String> mandatoryArtifactsResourceIdsLinux) {
            return mandatoryArtifactsResourceIdsLinux(Output.of(mandatoryArtifactsResourceIdsLinux));
        }

        public Builder mandatoryArtifactsResourceIdsLinux(String... mandatoryArtifactsResourceIdsLinux) {
            return mandatoryArtifactsResourceIdsLinux(List.of(mandatoryArtifactsResourceIdsLinux));
        }

        public Builder mandatoryArtifactsResourceIdsWindows(@Nullable Output<List<String>> mandatoryArtifactsResourceIdsWindows) {
            $.mandatoryArtifactsResourceIdsWindows = mandatoryArtifactsResourceIdsWindows;
            return this;
        }

        public Builder mandatoryArtifactsResourceIdsWindows(List<String> mandatoryArtifactsResourceIdsWindows) {
            return mandatoryArtifactsResourceIdsWindows(Output.of(mandatoryArtifactsResourceIdsWindows));
        }

        public Builder mandatoryArtifactsResourceIdsWindows(String... mandatoryArtifactsResourceIdsWindows) {
            return mandatoryArtifactsResourceIdsWindows(List.of(mandatoryArtifactsResourceIdsWindows));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder premiumDataDisks(@Nullable Output<Either<String,PremiumDataDisk>> premiumDataDisks) {
            $.premiumDataDisks = premiumDataDisks;
            return this;
        }

        public Builder premiumDataDisks(Either<String,PremiumDataDisk> premiumDataDisks) {
            return premiumDataDisks(Output.of(premiumDataDisks));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder support(@Nullable Output<LabSupportPropertiesArgs> support) {
            $.support = support;
            return this;
        }

        public Builder support(LabSupportPropertiesArgs support) {
            return support(Output.of(support));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public LabArgs build() {
            $.labStorageType = Codegen.stringProp("labStorageType").left(StorageType.class).output().arg($.labStorageType).def("Premium").getNullable();
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
