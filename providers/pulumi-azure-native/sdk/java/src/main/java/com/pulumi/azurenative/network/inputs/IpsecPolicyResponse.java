// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


/**
 * An IPSec Policy configuration for a virtual network gateway connection.
 * 
 */
public final class IpsecPolicyResponse extends com.pulumi.resources.InvokeArgs {

    public static final IpsecPolicyResponse Empty = new IpsecPolicyResponse();

    /**
     * The DH Group used in IKE Phase 1 for initial SA.
     * 
     */
    @Import(name="dhGroup", required=true)
    private String dhGroup;

    /**
     * @return The DH Group used in IKE Phase 1 for initial SA.
     * 
     */
    public String dhGroup() {
        return this.dhGroup;
    }

    /**
     * The IKE encryption algorithm (IKE phase 2).
     * 
     */
    @Import(name="ikeEncryption", required=true)
    private String ikeEncryption;

    /**
     * @return The IKE encryption algorithm (IKE phase 2).
     * 
     */
    public String ikeEncryption() {
        return this.ikeEncryption;
    }

    /**
     * The IKE integrity algorithm (IKE phase 2).
     * 
     */
    @Import(name="ikeIntegrity", required=true)
    private String ikeIntegrity;

    /**
     * @return The IKE integrity algorithm (IKE phase 2).
     * 
     */
    public String ikeIntegrity() {
        return this.ikeIntegrity;
    }

    /**
     * The IPSec encryption algorithm (IKE phase 1).
     * 
     */
    @Import(name="ipsecEncryption", required=true)
    private String ipsecEncryption;

    /**
     * @return The IPSec encryption algorithm (IKE phase 1).
     * 
     */
    public String ipsecEncryption() {
        return this.ipsecEncryption;
    }

    /**
     * The IPSec integrity algorithm (IKE phase 1).
     * 
     */
    @Import(name="ipsecIntegrity", required=true)
    private String ipsecIntegrity;

    /**
     * @return The IPSec integrity algorithm (IKE phase 1).
     * 
     */
    public String ipsecIntegrity() {
        return this.ipsecIntegrity;
    }

    /**
     * The Pfs Group used in IKE Phase 2 for new child SA.
     * 
     */
    @Import(name="pfsGroup", required=true)
    private String pfsGroup;

    /**
     * @return The Pfs Group used in IKE Phase 2 for new child SA.
     * 
     */
    public String pfsGroup() {
        return this.pfsGroup;
    }

    /**
     * The IPSec Security Association (also called Quick Mode or Phase 2 SA) payload size in KB for a site to site VPN tunnel.
     * 
     */
    @Import(name="saDataSizeKilobytes", required=true)
    private Integer saDataSizeKilobytes;

    /**
     * @return The IPSec Security Association (also called Quick Mode or Phase 2 SA) payload size in KB for a site to site VPN tunnel.
     * 
     */
    public Integer saDataSizeKilobytes() {
        return this.saDataSizeKilobytes;
    }

    /**
     * The IPSec Security Association (also called Quick Mode or Phase 2 SA) lifetime in seconds for a site to site VPN tunnel.
     * 
     */
    @Import(name="saLifeTimeSeconds", required=true)
    private Integer saLifeTimeSeconds;

    /**
     * @return The IPSec Security Association (also called Quick Mode or Phase 2 SA) lifetime in seconds for a site to site VPN tunnel.
     * 
     */
    public Integer saLifeTimeSeconds() {
        return this.saLifeTimeSeconds;
    }

    private IpsecPolicyResponse() {}

    private IpsecPolicyResponse(IpsecPolicyResponse $) {
        this.dhGroup = $.dhGroup;
        this.ikeEncryption = $.ikeEncryption;
        this.ikeIntegrity = $.ikeIntegrity;
        this.ipsecEncryption = $.ipsecEncryption;
        this.ipsecIntegrity = $.ipsecIntegrity;
        this.pfsGroup = $.pfsGroup;
        this.saDataSizeKilobytes = $.saDataSizeKilobytes;
        this.saLifeTimeSeconds = $.saLifeTimeSeconds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IpsecPolicyResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IpsecPolicyResponse $;

        public Builder() {
            $ = new IpsecPolicyResponse();
        }

        public Builder(IpsecPolicyResponse defaults) {
            $ = new IpsecPolicyResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param dhGroup The DH Group used in IKE Phase 1 for initial SA.
         * 
         * @return builder
         * 
         */
        public Builder dhGroup(String dhGroup) {
            $.dhGroup = dhGroup;
            return this;
        }

        /**
         * @param ikeEncryption The IKE encryption algorithm (IKE phase 2).
         * 
         * @return builder
         * 
         */
        public Builder ikeEncryption(String ikeEncryption) {
            $.ikeEncryption = ikeEncryption;
            return this;
        }

        /**
         * @param ikeIntegrity The IKE integrity algorithm (IKE phase 2).
         * 
         * @return builder
         * 
         */
        public Builder ikeIntegrity(String ikeIntegrity) {
            $.ikeIntegrity = ikeIntegrity;
            return this;
        }

        /**
         * @param ipsecEncryption The IPSec encryption algorithm (IKE phase 1).
         * 
         * @return builder
         * 
         */
        public Builder ipsecEncryption(String ipsecEncryption) {
            $.ipsecEncryption = ipsecEncryption;
            return this;
        }

        /**
         * @param ipsecIntegrity The IPSec integrity algorithm (IKE phase 1).
         * 
         * @return builder
         * 
         */
        public Builder ipsecIntegrity(String ipsecIntegrity) {
            $.ipsecIntegrity = ipsecIntegrity;
            return this;
        }

        /**
         * @param pfsGroup The Pfs Group used in IKE Phase 2 for new child SA.
         * 
         * @return builder
         * 
         */
        public Builder pfsGroup(String pfsGroup) {
            $.pfsGroup = pfsGroup;
            return this;
        }

        /**
         * @param saDataSizeKilobytes The IPSec Security Association (also called Quick Mode or Phase 2 SA) payload size in KB for a site to site VPN tunnel.
         * 
         * @return builder
         * 
         */
        public Builder saDataSizeKilobytes(Integer saDataSizeKilobytes) {
            $.saDataSizeKilobytes = saDataSizeKilobytes;
            return this;
        }

        /**
         * @param saLifeTimeSeconds The IPSec Security Association (also called Quick Mode or Phase 2 SA) lifetime in seconds for a site to site VPN tunnel.
         * 
         * @return builder
         * 
         */
        public Builder saLifeTimeSeconds(Integer saLifeTimeSeconds) {
            $.saLifeTimeSeconds = saLifeTimeSeconds;
            return this;
        }

        public IpsecPolicyResponse build() {
            $.dhGroup = Objects.requireNonNull($.dhGroup, "expected parameter 'dhGroup' to be non-null");
            $.ikeEncryption = Objects.requireNonNull($.ikeEncryption, "expected parameter 'ikeEncryption' to be non-null");
            $.ikeIntegrity = Objects.requireNonNull($.ikeIntegrity, "expected parameter 'ikeIntegrity' to be non-null");
            $.ipsecEncryption = Objects.requireNonNull($.ipsecEncryption, "expected parameter 'ipsecEncryption' to be non-null");
            $.ipsecIntegrity = Objects.requireNonNull($.ipsecIntegrity, "expected parameter 'ipsecIntegrity' to be non-null");
            $.pfsGroup = Objects.requireNonNull($.pfsGroup, "expected parameter 'pfsGroup' to be non-null");
            $.saDataSizeKilobytes = Objects.requireNonNull($.saDataSizeKilobytes, "expected parameter 'saDataSizeKilobytes' to be non-null");
            $.saLifeTimeSeconds = Objects.requireNonNull($.saLifeTimeSeconds, "expected parameter 'saLifeTimeSeconds' to be non-null");
            return $;
        }
    }

}
