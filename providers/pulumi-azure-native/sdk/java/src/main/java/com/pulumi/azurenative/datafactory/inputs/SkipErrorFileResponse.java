// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Skip error file.
 * 
 */
public final class SkipErrorFileResponse extends com.pulumi.resources.InvokeArgs {

    public static final SkipErrorFileResponse Empty = new SkipErrorFileResponse();

    /**
     * Skip if source/sink file changed by other concurrent write. Default is false. Type: boolean (or Expression with resultType boolean).
     * 
     */
    @Import(name="dataInconsistency")
    private @Nullable Object dataInconsistency;

    public Optional<Object> dataInconsistency() {
        return Optional.ofNullable(this.dataInconsistency);
    }

    /**
     * Skip if file is deleted by other client during copy. Default is true. Type: boolean (or Expression with resultType boolean).
     * 
     */
    @Import(name="fileMissing")
    private @Nullable Object fileMissing;

    public Optional<Object> fileMissing() {
        return Optional.ofNullable(this.fileMissing);
    }

    private SkipErrorFileResponse() {}

    private SkipErrorFileResponse(SkipErrorFileResponse $) {
        this.dataInconsistency = $.dataInconsistency;
        this.fileMissing = $.fileMissing;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SkipErrorFileResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SkipErrorFileResponse $;

        public Builder() {
            $ = new SkipErrorFileResponse();
        }

        public Builder(SkipErrorFileResponse defaults) {
            $ = new SkipErrorFileResponse(Objects.requireNonNull(defaults));
        }

        public Builder dataInconsistency(@Nullable Object dataInconsistency) {
            $.dataInconsistency = dataInconsistency;
            return this;
        }

        public Builder fileMissing(@Nullable Object fileMissing) {
            $.fileMissing = fileMissing;
            return this;
        }

        public SkipErrorFileResponse build() {
            return $;
        }
    }

}
