// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Describes the destination of connection monitor.
 * 
 */
public final class ConnectionMonitorDestinationArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectionMonitorDestinationArgs Empty = new ConnectionMonitorDestinationArgs();

    /**
     * Address of the connection monitor destination (IP or domain name).
     * 
     */
    @Import(name="address")
    private @Nullable Output<String> address;

    /**
     * @return Address of the connection monitor destination (IP or domain name).
     * 
     */
    public Optional<Output<String>> address() {
        return Optional.ofNullable(this.address);
    }

    /**
     * The destination port used by connection monitor.
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    /**
     * @return The destination port used by connection monitor.
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * The ID of the resource used as the destination by connection monitor.
     * 
     */
    @Import(name="resourceId")
    private @Nullable Output<String> resourceId;

    /**
     * @return The ID of the resource used as the destination by connection monitor.
     * 
     */
    public Optional<Output<String>> resourceId() {
        return Optional.ofNullable(this.resourceId);
    }

    private ConnectionMonitorDestinationArgs() {}

    private ConnectionMonitorDestinationArgs(ConnectionMonitorDestinationArgs $) {
        this.address = $.address;
        this.port = $.port;
        this.resourceId = $.resourceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectionMonitorDestinationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectionMonitorDestinationArgs $;

        public Builder() {
            $ = new ConnectionMonitorDestinationArgs();
        }

        public Builder(ConnectionMonitorDestinationArgs defaults) {
            $ = new ConnectionMonitorDestinationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param address Address of the connection monitor destination (IP or domain name).
         * 
         * @return builder
         * 
         */
        public Builder address(@Nullable Output<String> address) {
            $.address = address;
            return this;
        }

        /**
         * @param address Address of the connection monitor destination (IP or domain name).
         * 
         * @return builder
         * 
         */
        public Builder address(String address) {
            return address(Output.of(address));
        }

        /**
         * @param port The destination port used by connection monitor.
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port The destination port used by connection monitor.
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param resourceId The ID of the resource used as the destination by connection monitor.
         * 
         * @return builder
         * 
         */
        public Builder resourceId(@Nullable Output<String> resourceId) {
            $.resourceId = resourceId;
            return this;
        }

        /**
         * @param resourceId The ID of the resource used as the destination by connection monitor.
         * 
         * @return builder
         * 
         */
        public Builder resourceId(String resourceId) {
            return resourceId(Output.of(resourceId));
        }

        public ConnectionMonitorDestinationArgs build() {
            return $;
        }
    }

}
