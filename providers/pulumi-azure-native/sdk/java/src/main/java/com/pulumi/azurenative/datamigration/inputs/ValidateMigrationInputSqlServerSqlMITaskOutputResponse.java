// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datamigration.inputs;

import com.pulumi.azurenative.datamigration.inputs.DatabaseBackupInfoResponse;
import com.pulumi.azurenative.datamigration.inputs.ReportableExceptionResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Output for task that validates migration input for SQL to Azure SQL Managed Instance migrations
 * 
 */
public final class ValidateMigrationInputSqlServerSqlMITaskOutputResponse extends com.pulumi.resources.InvokeArgs {

    public static final ValidateMigrationInputSqlServerSqlMITaskOutputResponse Empty = new ValidateMigrationInputSqlServerSqlMITaskOutputResponse();

    /**
     * Errors associated with the BackupFolder path
     * 
     */
    @Import(name="backupFolderErrors", required=true)
    private List<ReportableExceptionResponse> backupFolderErrors;

    public List<ReportableExceptionResponse> backupFolderErrors() {
        return this.backupFolderErrors;
    }

    /**
     * Errors associated with backup share user name and password credentials
     * 
     */
    @Import(name="backupShareCredentialsErrors", required=true)
    private List<ReportableExceptionResponse> backupShareCredentialsErrors;

    public List<ReportableExceptionResponse> backupShareCredentialsErrors() {
        return this.backupShareCredentialsErrors;
    }

    /**
     * Errors associated with the storage account provided.
     * 
     */
    @Import(name="backupStorageAccountErrors", required=true)
    private List<ReportableExceptionResponse> backupStorageAccountErrors;

    public List<ReportableExceptionResponse> backupStorageAccountErrors() {
        return this.backupStorageAccountErrors;
    }

    /**
     * Information about backup files when existing backup mode is used.
     * 
     */
    @Import(name="databaseBackupInfo")
    private @Nullable DatabaseBackupInfoResponse databaseBackupInfo;

    public Optional<DatabaseBackupInfoResponse> databaseBackupInfo() {
        return Optional.ofNullable(this.databaseBackupInfo);
    }

    /**
     * Errors associated with existing backup files.
     * 
     */
    @Import(name="existingBackupErrors", required=true)
    private List<ReportableExceptionResponse> existingBackupErrors;

    public List<ReportableExceptionResponse> existingBackupErrors() {
        return this.existingBackupErrors;
    }

    /**
     * Result identifier
     * 
     */
    @Import(name="id", required=true)
    private String id;

    public String id() {
        return this.id;
    }

    /**
     * Name of database
     * 
     */
    @Import(name="name", required=true)
    private String name;

    public String name() {
        return this.name;
    }

    /**
     * Errors associated with the RestoreDatabaseName
     * 
     */
    @Import(name="restoreDatabaseNameErrors", required=true)
    private List<ReportableExceptionResponse> restoreDatabaseNameErrors;

    public List<ReportableExceptionResponse> restoreDatabaseNameErrors() {
        return this.restoreDatabaseNameErrors;
    }

    private ValidateMigrationInputSqlServerSqlMITaskOutputResponse() {}

    private ValidateMigrationInputSqlServerSqlMITaskOutputResponse(ValidateMigrationInputSqlServerSqlMITaskOutputResponse $) {
        this.backupFolderErrors = $.backupFolderErrors;
        this.backupShareCredentialsErrors = $.backupShareCredentialsErrors;
        this.backupStorageAccountErrors = $.backupStorageAccountErrors;
        this.databaseBackupInfo = $.databaseBackupInfo;
        this.existingBackupErrors = $.existingBackupErrors;
        this.id = $.id;
        this.name = $.name;
        this.restoreDatabaseNameErrors = $.restoreDatabaseNameErrors;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ValidateMigrationInputSqlServerSqlMITaskOutputResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ValidateMigrationInputSqlServerSqlMITaskOutputResponse $;

        public Builder() {
            $ = new ValidateMigrationInputSqlServerSqlMITaskOutputResponse();
        }

        public Builder(ValidateMigrationInputSqlServerSqlMITaskOutputResponse defaults) {
            $ = new ValidateMigrationInputSqlServerSqlMITaskOutputResponse(Objects.requireNonNull(defaults));
        }

        public Builder backupFolderErrors(List<ReportableExceptionResponse> backupFolderErrors) {
            $.backupFolderErrors = backupFolderErrors;
            return this;
        }

        public Builder backupFolderErrors(ReportableExceptionResponse... backupFolderErrors) {
            return backupFolderErrors(List.of(backupFolderErrors));
        }

        public Builder backupShareCredentialsErrors(List<ReportableExceptionResponse> backupShareCredentialsErrors) {
            $.backupShareCredentialsErrors = backupShareCredentialsErrors;
            return this;
        }

        public Builder backupShareCredentialsErrors(ReportableExceptionResponse... backupShareCredentialsErrors) {
            return backupShareCredentialsErrors(List.of(backupShareCredentialsErrors));
        }

        public Builder backupStorageAccountErrors(List<ReportableExceptionResponse> backupStorageAccountErrors) {
            $.backupStorageAccountErrors = backupStorageAccountErrors;
            return this;
        }

        public Builder backupStorageAccountErrors(ReportableExceptionResponse... backupStorageAccountErrors) {
            return backupStorageAccountErrors(List.of(backupStorageAccountErrors));
        }

        public Builder databaseBackupInfo(@Nullable DatabaseBackupInfoResponse databaseBackupInfo) {
            $.databaseBackupInfo = databaseBackupInfo;
            return this;
        }

        public Builder existingBackupErrors(List<ReportableExceptionResponse> existingBackupErrors) {
            $.existingBackupErrors = existingBackupErrors;
            return this;
        }

        public Builder existingBackupErrors(ReportableExceptionResponse... existingBackupErrors) {
            return existingBackupErrors(List.of(existingBackupErrors));
        }

        public Builder id(String id) {
            $.id = id;
            return this;
        }

        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public Builder restoreDatabaseNameErrors(List<ReportableExceptionResponse> restoreDatabaseNameErrors) {
            $.restoreDatabaseNameErrors = restoreDatabaseNameErrors;
            return this;
        }

        public Builder restoreDatabaseNameErrors(ReportableExceptionResponse... restoreDatabaseNameErrors) {
            return restoreDatabaseNameErrors(List.of(restoreDatabaseNameErrors));
        }

        public ValidateMigrationInputSqlServerSqlMITaskOutputResponse build() {
            $.backupFolderErrors = Objects.requireNonNull($.backupFolderErrors, "expected parameter 'backupFolderErrors' to be non-null");
            $.backupShareCredentialsErrors = Objects.requireNonNull($.backupShareCredentialsErrors, "expected parameter 'backupShareCredentialsErrors' to be non-null");
            $.backupStorageAccountErrors = Objects.requireNonNull($.backupStorageAccountErrors, "expected parameter 'backupStorageAccountErrors' to be non-null");
            $.existingBackupErrors = Objects.requireNonNull($.existingBackupErrors, "expected parameter 'existingBackupErrors' to be non-null");
            $.id = Objects.requireNonNull($.id, "expected parameter 'id' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.restoreDatabaseNameErrors = Objects.requireNonNull($.restoreDatabaseNameErrors, "expected parameter 'restoreDatabaseNameErrors' to be non-null");
            return $;
        }
    }

}
