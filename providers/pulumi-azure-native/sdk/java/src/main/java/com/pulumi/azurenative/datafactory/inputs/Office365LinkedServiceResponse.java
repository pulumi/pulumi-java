// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.azurenative.datafactory.inputs.AzureKeyVaultSecretReferenceResponse;
import com.pulumi.azurenative.datafactory.inputs.IntegrationRuntimeReferenceResponse;
import com.pulumi.azurenative.datafactory.inputs.ParameterSpecificationResponse;
import com.pulumi.azurenative.datafactory.inputs.SecureStringResponse;
import com.pulumi.core.Either;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Office365 linked service.
 * 
 */
public final class Office365LinkedServiceResponse extends com.pulumi.resources.InvokeArgs {

    public static final Office365LinkedServiceResponse Empty = new Office365LinkedServiceResponse();

    /**
     * List of tags that can be used for describing the linked service.
     * 
     */
    @Import(name="annotations")
    private @Nullable List<Object> annotations;

    /**
     * @return List of tags that can be used for describing the linked service.
     * 
     */
    public Optional<List<Object>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    /**
     * The integration runtime reference.
     * 
     */
    @Import(name="connectVia")
    private @Nullable IntegrationRuntimeReferenceResponse connectVia;

    /**
     * @return The integration runtime reference.
     * 
     */
    public Optional<IntegrationRuntimeReferenceResponse> connectVia() {
        return Optional.ofNullable(this.connectVia);
    }

    /**
     * Linked service description.
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    /**
     * @return Linked service description.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="encryptedCredential")
    private @Nullable Object encryptedCredential;

    /**
     * @return The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Object> encryptedCredential() {
        return Optional.ofNullable(this.encryptedCredential);
    }

    /**
     * Azure tenant ID to which the Office 365 account belongs. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="office365TenantId", required=true)
    private Object office365TenantId;

    /**
     * @return Azure tenant ID to which the Office 365 account belongs. Type: string (or Expression with resultType string).
     * 
     */
    public Object office365TenantId() {
        return this.office365TenantId;
    }

    /**
     * Parameters for linked service.
     * 
     */
    @Import(name="parameters")
    private @Nullable Map<String,ParameterSpecificationResponse> parameters;

    /**
     * @return Parameters for linked service.
     * 
     */
    public Optional<Map<String,ParameterSpecificationResponse>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    /**
     * Specify the application&#39;s client ID. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="servicePrincipalId", required=true)
    private Object servicePrincipalId;

    /**
     * @return Specify the application&#39;s client ID. Type: string (or Expression with resultType string).
     * 
     */
    public Object servicePrincipalId() {
        return this.servicePrincipalId;
    }

    /**
     * Specify the application&#39;s key.
     * 
     */
    @Import(name="servicePrincipalKey", required=true)
    private Either<AzureKeyVaultSecretReferenceResponse,SecureStringResponse> servicePrincipalKey;

    /**
     * @return Specify the application&#39;s key.
     * 
     */
    public Either<AzureKeyVaultSecretReferenceResponse,SecureStringResponse> servicePrincipalKey() {
        return this.servicePrincipalKey;
    }

    /**
     * Specify the tenant information under which your Azure AD web application resides. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="servicePrincipalTenantId", required=true)
    private Object servicePrincipalTenantId;

    /**
     * @return Specify the tenant information under which your Azure AD web application resides. Type: string (or Expression with resultType string).
     * 
     */
    public Object servicePrincipalTenantId() {
        return this.servicePrincipalTenantId;
    }

    /**
     * Type of linked service.
     * Expected value is &#39;Office365&#39;.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    /**
     * @return Type of linked service.
     * Expected value is &#39;Office365&#39;.
     * 
     */
    public String type() {
        return this.type;
    }

    private Office365LinkedServiceResponse() {}

    private Office365LinkedServiceResponse(Office365LinkedServiceResponse $) {
        this.annotations = $.annotations;
        this.connectVia = $.connectVia;
        this.description = $.description;
        this.encryptedCredential = $.encryptedCredential;
        this.office365TenantId = $.office365TenantId;
        this.parameters = $.parameters;
        this.servicePrincipalId = $.servicePrincipalId;
        this.servicePrincipalKey = $.servicePrincipalKey;
        this.servicePrincipalTenantId = $.servicePrincipalTenantId;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(Office365LinkedServiceResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Office365LinkedServiceResponse $;

        public Builder() {
            $ = new Office365LinkedServiceResponse();
        }

        public Builder(Office365LinkedServiceResponse defaults) {
            $ = new Office365LinkedServiceResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param annotations List of tags that can be used for describing the linked service.
         * 
         * @return builder
         * 
         */
        public Builder annotations(@Nullable List<Object> annotations) {
            $.annotations = annotations;
            return this;
        }

        /**
         * @param annotations List of tags that can be used for describing the linked service.
         * 
         * @return builder
         * 
         */
        public Builder annotations(Object... annotations) {
            return annotations(List.of(annotations));
        }

        /**
         * @param connectVia The integration runtime reference.
         * 
         * @return builder
         * 
         */
        public Builder connectVia(@Nullable IntegrationRuntimeReferenceResponse connectVia) {
            $.connectVia = connectVia;
            return this;
        }

        /**
         * @param description Linked service description.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        /**
         * @param encryptedCredential The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
         * 
         * @return builder
         * 
         */
        public Builder encryptedCredential(@Nullable Object encryptedCredential) {
            $.encryptedCredential = encryptedCredential;
            return this;
        }

        /**
         * @param office365TenantId Azure tenant ID to which the Office 365 account belongs. Type: string (or Expression with resultType string).
         * 
         * @return builder
         * 
         */
        public Builder office365TenantId(Object office365TenantId) {
            $.office365TenantId = office365TenantId;
            return this;
        }

        /**
         * @param parameters Parameters for linked service.
         * 
         * @return builder
         * 
         */
        public Builder parameters(@Nullable Map<String,ParameterSpecificationResponse> parameters) {
            $.parameters = parameters;
            return this;
        }

        /**
         * @param servicePrincipalId Specify the application&#39;s client ID. Type: string (or Expression with resultType string).
         * 
         * @return builder
         * 
         */
        public Builder servicePrincipalId(Object servicePrincipalId) {
            $.servicePrincipalId = servicePrincipalId;
            return this;
        }

        /**
         * @param servicePrincipalKey Specify the application&#39;s key.
         * 
         * @return builder
         * 
         */
        public Builder servicePrincipalKey(Either<AzureKeyVaultSecretReferenceResponse,SecureStringResponse> servicePrincipalKey) {
            $.servicePrincipalKey = servicePrincipalKey;
            return this;
        }

        /**
         * @param servicePrincipalKey Specify the application&#39;s key.
         * 
         * @return builder
         * 
         */
        public Builder servicePrincipalKey(AzureKeyVaultSecretReferenceResponse servicePrincipalKey) {
            return servicePrincipalKey(Either.ofLeft(servicePrincipalKey));
        }

        /**
         * @param servicePrincipalKey Specify the application&#39;s key.
         * 
         * @return builder
         * 
         */
        public Builder servicePrincipalKey(SecureStringResponse servicePrincipalKey) {
            return servicePrincipalKey(Either.ofRight(servicePrincipalKey));
        }

        /**
         * @param servicePrincipalTenantId Specify the tenant information under which your Azure AD web application resides. Type: string (or Expression with resultType string).
         * 
         * @return builder
         * 
         */
        public Builder servicePrincipalTenantId(Object servicePrincipalTenantId) {
            $.servicePrincipalTenantId = servicePrincipalTenantId;
            return this;
        }

        /**
         * @param type Type of linked service.
         * Expected value is &#39;Office365&#39;.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public Office365LinkedServiceResponse build() {
            $.office365TenantId = Objects.requireNonNull($.office365TenantId, "expected parameter 'office365TenantId' to be non-null");
            $.servicePrincipalId = Objects.requireNonNull($.servicePrincipalId, "expected parameter 'servicePrincipalId' to be non-null");
            $.servicePrincipalKey = Objects.requireNonNull($.servicePrincipalKey, "expected parameter 'servicePrincipalKey' to be non-null");
            $.servicePrincipalTenantId = Objects.requireNonNull($.servicePrincipalTenantId, "expected parameter 'servicePrincipalTenantId' to be non-null");
            $.type = Codegen.stringProp("type").arg($.type).require();
            return $;
        }
    }

}
