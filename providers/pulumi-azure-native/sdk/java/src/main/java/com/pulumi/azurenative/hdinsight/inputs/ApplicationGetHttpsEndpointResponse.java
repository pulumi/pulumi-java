// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.hdinsight.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Gets the application HTTP endpoints.
 * 
 */
public final class ApplicationGetHttpsEndpointResponse extends com.pulumi.resources.InvokeArgs {

    public static final ApplicationGetHttpsEndpointResponse Empty = new ApplicationGetHttpsEndpointResponse();

    /**
     * The list of access modes for the application.
     * 
     */
    @Import(name="accessModes")
    private @Nullable List<String> accessModes;

    /**
     * @return The list of access modes for the application.
     * 
     */
    public Optional<List<String>> accessModes() {
        return Optional.ofNullable(this.accessModes);
    }

    /**
     * The destination port to connect to.
     * 
     */
    @Import(name="destinationPort")
    private @Nullable Integer destinationPort;

    /**
     * @return The destination port to connect to.
     * 
     */
    public Optional<Integer> destinationPort() {
        return Optional.ofNullable(this.destinationPort);
    }

    /**
     * The value indicates whether to disable GatewayAuth.
     * 
     */
    @Import(name="disableGatewayAuth")
    private @Nullable Boolean disableGatewayAuth;

    /**
     * @return The value indicates whether to disable GatewayAuth.
     * 
     */
    public Optional<Boolean> disableGatewayAuth() {
        return Optional.ofNullable(this.disableGatewayAuth);
    }

    /**
     * The location of the endpoint.
     * 
     */
    @Import(name="location", required=true)
    private String location;

    /**
     * @return The location of the endpoint.
     * 
     */
    public String location() {
        return this.location;
    }

    /**
     * The private ip address of the endpoint.
     * 
     */
    @Import(name="privateIPAddress")
    private @Nullable String privateIPAddress;

    /**
     * @return The private ip address of the endpoint.
     * 
     */
    public Optional<String> privateIPAddress() {
        return Optional.ofNullable(this.privateIPAddress);
    }

    /**
     * The public port to connect to.
     * 
     */
    @Import(name="publicPort", required=true)
    private Integer publicPort;

    /**
     * @return The public port to connect to.
     * 
     */
    public Integer publicPort() {
        return this.publicPort;
    }

    /**
     * The subdomain suffix of the application.
     * 
     */
    @Import(name="subDomainSuffix")
    private @Nullable String subDomainSuffix;

    /**
     * @return The subdomain suffix of the application.
     * 
     */
    public Optional<String> subDomainSuffix() {
        return Optional.ofNullable(this.subDomainSuffix);
    }

    private ApplicationGetHttpsEndpointResponse() {}

    private ApplicationGetHttpsEndpointResponse(ApplicationGetHttpsEndpointResponse $) {
        this.accessModes = $.accessModes;
        this.destinationPort = $.destinationPort;
        this.disableGatewayAuth = $.disableGatewayAuth;
        this.location = $.location;
        this.privateIPAddress = $.privateIPAddress;
        this.publicPort = $.publicPort;
        this.subDomainSuffix = $.subDomainSuffix;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplicationGetHttpsEndpointResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplicationGetHttpsEndpointResponse $;

        public Builder() {
            $ = new ApplicationGetHttpsEndpointResponse();
        }

        public Builder(ApplicationGetHttpsEndpointResponse defaults) {
            $ = new ApplicationGetHttpsEndpointResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessModes The list of access modes for the application.
         * 
         * @return builder
         * 
         */
        public Builder accessModes(@Nullable List<String> accessModes) {
            $.accessModes = accessModes;
            return this;
        }

        /**
         * @param accessModes The list of access modes for the application.
         * 
         * @return builder
         * 
         */
        public Builder accessModes(String... accessModes) {
            return accessModes(List.of(accessModes));
        }

        /**
         * @param destinationPort The destination port to connect to.
         * 
         * @return builder
         * 
         */
        public Builder destinationPort(@Nullable Integer destinationPort) {
            $.destinationPort = destinationPort;
            return this;
        }

        /**
         * @param disableGatewayAuth The value indicates whether to disable GatewayAuth.
         * 
         * @return builder
         * 
         */
        public Builder disableGatewayAuth(@Nullable Boolean disableGatewayAuth) {
            $.disableGatewayAuth = disableGatewayAuth;
            return this;
        }

        /**
         * @param location The location of the endpoint.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            $.location = location;
            return this;
        }

        /**
         * @param privateIPAddress The private ip address of the endpoint.
         * 
         * @return builder
         * 
         */
        public Builder privateIPAddress(@Nullable String privateIPAddress) {
            $.privateIPAddress = privateIPAddress;
            return this;
        }

        /**
         * @param publicPort The public port to connect to.
         * 
         * @return builder
         * 
         */
        public Builder publicPort(Integer publicPort) {
            $.publicPort = publicPort;
            return this;
        }

        /**
         * @param subDomainSuffix The subdomain suffix of the application.
         * 
         * @return builder
         * 
         */
        public Builder subDomainSuffix(@Nullable String subDomainSuffix) {
            $.subDomainSuffix = subDomainSuffix;
            return this;
        }

        public ApplicationGetHttpsEndpointResponse build() {
            $.location = Objects.requireNonNull($.location, "expected parameter 'location' to be non-null");
            $.publicPort = Objects.requireNonNull($.publicPort, "expected parameter 'publicPort' to be non-null");
            return $;
        }
    }

}
