// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.containerregistry.inputs;

import com.pulumi.azurenative.containerregistry.inputs.AuthInfoResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The properties of the source code repository.
 * 
 */
public final class SourcePropertiesResponse extends com.pulumi.resources.InvokeArgs {

    public static final SourcePropertiesResponse Empty = new SourcePropertiesResponse();

    /**
     * The branch name of the source code.
     * 
     */
    @Import(name="branch")
    private @Nullable String branch;

    /**
     * @return The branch name of the source code.
     * 
     */
    public Optional<String> branch() {
        return Optional.ofNullable(this.branch);
    }

    /**
     * The full URL to the source code repository
     * 
     */
    @Import(name="repositoryUrl", required=true)
    private String repositoryUrl;

    /**
     * @return The full URL to the source code repository
     * 
     */
    public String repositoryUrl() {
        return this.repositoryUrl;
    }

    /**
     * The authorization properties for accessing the source code repository and to set up
     * webhooks for notifications.
     * 
     */
    @Import(name="sourceControlAuthProperties")
    private @Nullable AuthInfoResponse sourceControlAuthProperties;

    /**
     * @return The authorization properties for accessing the source code repository and to set up
     * webhooks for notifications.
     * 
     */
    public Optional<AuthInfoResponse> sourceControlAuthProperties() {
        return Optional.ofNullable(this.sourceControlAuthProperties);
    }

    /**
     * The type of source control service.
     * 
     */
    @Import(name="sourceControlType", required=true)
    private String sourceControlType;

    /**
     * @return The type of source control service.
     * 
     */
    public String sourceControlType() {
        return this.sourceControlType;
    }

    private SourcePropertiesResponse() {}

    private SourcePropertiesResponse(SourcePropertiesResponse $) {
        this.branch = $.branch;
        this.repositoryUrl = $.repositoryUrl;
        this.sourceControlAuthProperties = $.sourceControlAuthProperties;
        this.sourceControlType = $.sourceControlType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SourcePropertiesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SourcePropertiesResponse $;

        public Builder() {
            $ = new SourcePropertiesResponse();
        }

        public Builder(SourcePropertiesResponse defaults) {
            $ = new SourcePropertiesResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param branch The branch name of the source code.
         * 
         * @return builder
         * 
         */
        public Builder branch(@Nullable String branch) {
            $.branch = branch;
            return this;
        }

        /**
         * @param repositoryUrl The full URL to the source code repository
         * 
         * @return builder
         * 
         */
        public Builder repositoryUrl(String repositoryUrl) {
            $.repositoryUrl = repositoryUrl;
            return this;
        }

        /**
         * @param sourceControlAuthProperties The authorization properties for accessing the source code repository and to set up
         * webhooks for notifications.
         * 
         * @return builder
         * 
         */
        public Builder sourceControlAuthProperties(@Nullable AuthInfoResponse sourceControlAuthProperties) {
            $.sourceControlAuthProperties = sourceControlAuthProperties;
            return this;
        }

        /**
         * @param sourceControlType The type of source control service.
         * 
         * @return builder
         * 
         */
        public Builder sourceControlType(String sourceControlType) {
            $.sourceControlType = sourceControlType;
            return this;
        }

        public SourcePropertiesResponse build() {
            $.repositoryUrl = Objects.requireNonNull($.repositoryUrl, "expected parameter 'repositoryUrl' to be non-null");
            $.sourceControlType = Objects.requireNonNull($.sourceControlType, "expected parameter 'sourceControlType' to be non-null");
            return $;
        }
    }

}
