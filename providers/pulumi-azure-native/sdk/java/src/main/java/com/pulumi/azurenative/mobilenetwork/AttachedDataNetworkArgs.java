// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.mobilenetwork;

import com.pulumi.azurenative.mobilenetwork.enums.CreatedByType;
import com.pulumi.azurenative.mobilenetwork.inputs.InterfacePropertiesArgs;
import com.pulumi.azurenative.mobilenetwork.inputs.NaptConfigurationArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AttachedDataNetworkArgs extends com.pulumi.resources.ResourceArgs {

    public static final AttachedDataNetworkArgs Empty = new AttachedDataNetworkArgs();

    /**
     * The name of the attached data network.
     * 
     */
    @Import(name="attachedDataNetworkName")
    private @Nullable Output<String> attachedDataNetworkName;

    /**
     * @return The name of the attached data network.
     * 
     */
    public Optional<Output<String>> attachedDataNetworkName() {
        return Optional.ofNullable(this.attachedDataNetworkName);
    }

    /**
     * The timestamp of resource creation (UTC).
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    /**
     * @return The timestamp of resource creation (UTC).
     * 
     */
    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * The identity that created the resource.
     * 
     */
    @Import(name="createdBy")
    private @Nullable Output<String> createdBy;

    /**
     * @return The identity that created the resource.
     * 
     */
    public Optional<Output<String>> createdBy() {
        return Optional.ofNullable(this.createdBy);
    }

    /**
     * The type of identity that created the resource.
     * 
     */
    @Import(name="createdByType")
    private @Nullable Output<Either<String,CreatedByType>> createdByType;

    /**
     * @return The type of identity that created the resource.
     * 
     */
    public Optional<Output<Either<String,CreatedByType>>> createdByType() {
        return Optional.ofNullable(this.createdByType);
    }

    /**
     * The timestamp of resource last modification (UTC)
     * 
     */
    @Import(name="lastModifiedAt")
    private @Nullable Output<String> lastModifiedAt;

    /**
     * @return The timestamp of resource last modification (UTC)
     * 
     */
    public Optional<Output<String>> lastModifiedAt() {
        return Optional.ofNullable(this.lastModifiedAt);
    }

    /**
     * The identity that last modified the resource.
     * 
     */
    @Import(name="lastModifiedBy")
    private @Nullable Output<String> lastModifiedBy;

    /**
     * @return The identity that last modified the resource.
     * 
     */
    public Optional<Output<String>> lastModifiedBy() {
        return Optional.ofNullable(this.lastModifiedBy);
    }

    /**
     * The type of identity that last modified the resource.
     * 
     */
    @Import(name="lastModifiedByType")
    private @Nullable Output<Either<String,CreatedByType>> lastModifiedByType;

    /**
     * @return The type of identity that last modified the resource.
     * 
     */
    public Optional<Output<Either<String,CreatedByType>>> lastModifiedByType() {
        return Optional.ofNullable(this.lastModifiedByType);
    }

    /**
     * The geo-location where the resource lives
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The geo-location where the resource lives
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The Network Address and Port Translation configuration.
     * If not specified the attached data network uses a default NAPT configuration with NAPT enabled.
     * 
     */
    @Import(name="naptConfiguration")
    private @Nullable Output<NaptConfigurationArgs> naptConfiguration;

    /**
     * @return The Network Address and Port Translation configuration.
     * If not specified the attached data network uses a default NAPT configuration with NAPT enabled.
     * 
     */
    public Optional<Output<NaptConfigurationArgs>> naptConfiguration() {
        return Optional.ofNullable(this.naptConfiguration);
    }

    /**
     * The name of the packet core control plane.
     * 
     */
    @Import(name="packetCoreControlPlaneName", required=true)
    private Output<String> packetCoreControlPlaneName;

    /**
     * @return The name of the packet core control plane.
     * 
     */
    public Output<String> packetCoreControlPlaneName() {
        return this.packetCoreControlPlaneName;
    }

    /**
     * The name of the packet core data plane.
     * 
     */
    @Import(name="packetCoreDataPlaneName", required=true)
    private Output<String> packetCoreDataPlaneName;

    /**
     * @return The name of the packet core data plane.
     * 
     */
    public Output<String> packetCoreDataPlaneName() {
        return this.packetCoreDataPlaneName;
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group. The name is case insensitive.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Resource tags.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The user equipment address pool prefixes for the attached data network that are dynamically assigned by the core to UEs when they set up a PDU session.
     * At least one of userEquipmentAddressPoolPrefix and userEquipmentStaticAddressPoolPrefix must be defined. If both are defined then they must be the same size.
     * 
     */
    @Import(name="userEquipmentAddressPoolPrefix")
    private @Nullable Output<List<String>> userEquipmentAddressPoolPrefix;

    /**
     * @return The user equipment address pool prefixes for the attached data network that are dynamically assigned by the core to UEs when they set up a PDU session.
     * At least one of userEquipmentAddressPoolPrefix and userEquipmentStaticAddressPoolPrefix must be defined. If both are defined then they must be the same size.
     * 
     */
    public Optional<Output<List<String>>> userEquipmentAddressPoolPrefix() {
        return Optional.ofNullable(this.userEquipmentAddressPoolPrefix);
    }

    /**
     * The user equipment address pool prefixes for the attached data network that are statically assigned by the core to UEs when they set up a PDU session.
     * The mapping of static IP to sim is configured in staticIpConfiguration on the sim resource.
     * At least one of userEquipmentAddressPoolPrefix and userEquipmentStaticAddressPoolPrefix must be defined. If both are defined then they must be the same size.
     * 
     */
    @Import(name="userEquipmentStaticAddressPoolPrefix")
    private @Nullable Output<List<String>> userEquipmentStaticAddressPoolPrefix;

    /**
     * @return The user equipment address pool prefixes for the attached data network that are statically assigned by the core to UEs when they set up a PDU session.
     * The mapping of static IP to sim is configured in staticIpConfiguration on the sim resource.
     * At least one of userEquipmentAddressPoolPrefix and userEquipmentStaticAddressPoolPrefix must be defined. If both are defined then they must be the same size.
     * 
     */
    public Optional<Output<List<String>>> userEquipmentStaticAddressPoolPrefix() {
        return Optional.ofNullable(this.userEquipmentStaticAddressPoolPrefix);
    }

    /**
     * The user plane interface on the data network. In 5G networks this is called as N6 interface whereas in 4G networks this is called as SGi interface.
     * 
     */
    @Import(name="userPlaneDataInterface", required=true)
    private Output<InterfacePropertiesArgs> userPlaneDataInterface;

    /**
     * @return The user plane interface on the data network. In 5G networks this is called as N6 interface whereas in 4G networks this is called as SGi interface.
     * 
     */
    public Output<InterfacePropertiesArgs> userPlaneDataInterface() {
        return this.userPlaneDataInterface;
    }

    private AttachedDataNetworkArgs() {}

    private AttachedDataNetworkArgs(AttachedDataNetworkArgs $) {
        this.attachedDataNetworkName = $.attachedDataNetworkName;
        this.createdAt = $.createdAt;
        this.createdBy = $.createdBy;
        this.createdByType = $.createdByType;
        this.lastModifiedAt = $.lastModifiedAt;
        this.lastModifiedBy = $.lastModifiedBy;
        this.lastModifiedByType = $.lastModifiedByType;
        this.location = $.location;
        this.naptConfiguration = $.naptConfiguration;
        this.packetCoreControlPlaneName = $.packetCoreControlPlaneName;
        this.packetCoreDataPlaneName = $.packetCoreDataPlaneName;
        this.resourceGroupName = $.resourceGroupName;
        this.tags = $.tags;
        this.userEquipmentAddressPoolPrefix = $.userEquipmentAddressPoolPrefix;
        this.userEquipmentStaticAddressPoolPrefix = $.userEquipmentStaticAddressPoolPrefix;
        this.userPlaneDataInterface = $.userPlaneDataInterface;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AttachedDataNetworkArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AttachedDataNetworkArgs $;

        public Builder() {
            $ = new AttachedDataNetworkArgs();
        }

        public Builder(AttachedDataNetworkArgs defaults) {
            $ = new AttachedDataNetworkArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param attachedDataNetworkName The name of the attached data network.
         * 
         * @return builder
         * 
         */
        public Builder attachedDataNetworkName(@Nullable Output<String> attachedDataNetworkName) {
            $.attachedDataNetworkName = attachedDataNetworkName;
            return this;
        }

        /**
         * @param attachedDataNetworkName The name of the attached data network.
         * 
         * @return builder
         * 
         */
        public Builder attachedDataNetworkName(String attachedDataNetworkName) {
            return attachedDataNetworkName(Output.of(attachedDataNetworkName));
        }

        /**
         * @param createdAt The timestamp of resource creation (UTC).
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt The timestamp of resource creation (UTC).
         * 
         * @return builder
         * 
         */
        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param createdBy The identity that created the resource.
         * 
         * @return builder
         * 
         */
        public Builder createdBy(@Nullable Output<String> createdBy) {
            $.createdBy = createdBy;
            return this;
        }

        /**
         * @param createdBy The identity that created the resource.
         * 
         * @return builder
         * 
         */
        public Builder createdBy(String createdBy) {
            return createdBy(Output.of(createdBy));
        }

        /**
         * @param createdByType The type of identity that created the resource.
         * 
         * @return builder
         * 
         */
        public Builder createdByType(@Nullable Output<Either<String,CreatedByType>> createdByType) {
            $.createdByType = createdByType;
            return this;
        }

        /**
         * @param createdByType The type of identity that created the resource.
         * 
         * @return builder
         * 
         */
        public Builder createdByType(Either<String,CreatedByType> createdByType) {
            return createdByType(Output.of(createdByType));
        }

        /**
         * @param createdByType The type of identity that created the resource.
         * 
         * @return builder
         * 
         */
        public Builder createdByType(String createdByType) {
            return createdByType(Either.ofLeft(createdByType));
        }

        /**
         * @param createdByType The type of identity that created the resource.
         * 
         * @return builder
         * 
         */
        public Builder createdByType(CreatedByType createdByType) {
            return createdByType(Either.ofRight(createdByType));
        }

        /**
         * @param lastModifiedAt The timestamp of resource last modification (UTC)
         * 
         * @return builder
         * 
         */
        public Builder lastModifiedAt(@Nullable Output<String> lastModifiedAt) {
            $.lastModifiedAt = lastModifiedAt;
            return this;
        }

        /**
         * @param lastModifiedAt The timestamp of resource last modification (UTC)
         * 
         * @return builder
         * 
         */
        public Builder lastModifiedAt(String lastModifiedAt) {
            return lastModifiedAt(Output.of(lastModifiedAt));
        }

        /**
         * @param lastModifiedBy The identity that last modified the resource.
         * 
         * @return builder
         * 
         */
        public Builder lastModifiedBy(@Nullable Output<String> lastModifiedBy) {
            $.lastModifiedBy = lastModifiedBy;
            return this;
        }

        /**
         * @param lastModifiedBy The identity that last modified the resource.
         * 
         * @return builder
         * 
         */
        public Builder lastModifiedBy(String lastModifiedBy) {
            return lastModifiedBy(Output.of(lastModifiedBy));
        }

        /**
         * @param lastModifiedByType The type of identity that last modified the resource.
         * 
         * @return builder
         * 
         */
        public Builder lastModifiedByType(@Nullable Output<Either<String,CreatedByType>> lastModifiedByType) {
            $.lastModifiedByType = lastModifiedByType;
            return this;
        }

        /**
         * @param lastModifiedByType The type of identity that last modified the resource.
         * 
         * @return builder
         * 
         */
        public Builder lastModifiedByType(Either<String,CreatedByType> lastModifiedByType) {
            return lastModifiedByType(Output.of(lastModifiedByType));
        }

        /**
         * @param lastModifiedByType The type of identity that last modified the resource.
         * 
         * @return builder
         * 
         */
        public Builder lastModifiedByType(String lastModifiedByType) {
            return lastModifiedByType(Either.ofLeft(lastModifiedByType));
        }

        /**
         * @param lastModifiedByType The type of identity that last modified the resource.
         * 
         * @return builder
         * 
         */
        public Builder lastModifiedByType(CreatedByType lastModifiedByType) {
            return lastModifiedByType(Either.ofRight(lastModifiedByType));
        }

        /**
         * @param location The geo-location where the resource lives
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The geo-location where the resource lives
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param naptConfiguration The Network Address and Port Translation configuration.
         * If not specified the attached data network uses a default NAPT configuration with NAPT enabled.
         * 
         * @return builder
         * 
         */
        public Builder naptConfiguration(@Nullable Output<NaptConfigurationArgs> naptConfiguration) {
            $.naptConfiguration = naptConfiguration;
            return this;
        }

        /**
         * @param naptConfiguration The Network Address and Port Translation configuration.
         * If not specified the attached data network uses a default NAPT configuration with NAPT enabled.
         * 
         * @return builder
         * 
         */
        public Builder naptConfiguration(NaptConfigurationArgs naptConfiguration) {
            return naptConfiguration(Output.of(naptConfiguration));
        }

        /**
         * @param packetCoreControlPlaneName The name of the packet core control plane.
         * 
         * @return builder
         * 
         */
        public Builder packetCoreControlPlaneName(Output<String> packetCoreControlPlaneName) {
            $.packetCoreControlPlaneName = packetCoreControlPlaneName;
            return this;
        }

        /**
         * @param packetCoreControlPlaneName The name of the packet core control plane.
         * 
         * @return builder
         * 
         */
        public Builder packetCoreControlPlaneName(String packetCoreControlPlaneName) {
            return packetCoreControlPlaneName(Output.of(packetCoreControlPlaneName));
        }

        /**
         * @param packetCoreDataPlaneName The name of the packet core data plane.
         * 
         * @return builder
         * 
         */
        public Builder packetCoreDataPlaneName(Output<String> packetCoreDataPlaneName) {
            $.packetCoreDataPlaneName = packetCoreDataPlaneName;
            return this;
        }

        /**
         * @param packetCoreDataPlaneName The name of the packet core data plane.
         * 
         * @return builder
         * 
         */
        public Builder packetCoreDataPlaneName(String packetCoreDataPlaneName) {
            return packetCoreDataPlaneName(Output.of(packetCoreDataPlaneName));
        }

        /**
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param tags Resource tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Resource tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param userEquipmentAddressPoolPrefix The user equipment address pool prefixes for the attached data network that are dynamically assigned by the core to UEs when they set up a PDU session.
         * At least one of userEquipmentAddressPoolPrefix and userEquipmentStaticAddressPoolPrefix must be defined. If both are defined then they must be the same size.
         * 
         * @return builder
         * 
         */
        public Builder userEquipmentAddressPoolPrefix(@Nullable Output<List<String>> userEquipmentAddressPoolPrefix) {
            $.userEquipmentAddressPoolPrefix = userEquipmentAddressPoolPrefix;
            return this;
        }

        /**
         * @param userEquipmentAddressPoolPrefix The user equipment address pool prefixes for the attached data network that are dynamically assigned by the core to UEs when they set up a PDU session.
         * At least one of userEquipmentAddressPoolPrefix and userEquipmentStaticAddressPoolPrefix must be defined. If both are defined then they must be the same size.
         * 
         * @return builder
         * 
         */
        public Builder userEquipmentAddressPoolPrefix(List<String> userEquipmentAddressPoolPrefix) {
            return userEquipmentAddressPoolPrefix(Output.of(userEquipmentAddressPoolPrefix));
        }

        /**
         * @param userEquipmentAddressPoolPrefix The user equipment address pool prefixes for the attached data network that are dynamically assigned by the core to UEs when they set up a PDU session.
         * At least one of userEquipmentAddressPoolPrefix and userEquipmentStaticAddressPoolPrefix must be defined. If both are defined then they must be the same size.
         * 
         * @return builder
         * 
         */
        public Builder userEquipmentAddressPoolPrefix(String... userEquipmentAddressPoolPrefix) {
            return userEquipmentAddressPoolPrefix(List.of(userEquipmentAddressPoolPrefix));
        }

        /**
         * @param userEquipmentStaticAddressPoolPrefix The user equipment address pool prefixes for the attached data network that are statically assigned by the core to UEs when they set up a PDU session.
         * The mapping of static IP to sim is configured in staticIpConfiguration on the sim resource.
         * At least one of userEquipmentAddressPoolPrefix and userEquipmentStaticAddressPoolPrefix must be defined. If both are defined then they must be the same size.
         * 
         * @return builder
         * 
         */
        public Builder userEquipmentStaticAddressPoolPrefix(@Nullable Output<List<String>> userEquipmentStaticAddressPoolPrefix) {
            $.userEquipmentStaticAddressPoolPrefix = userEquipmentStaticAddressPoolPrefix;
            return this;
        }

        /**
         * @param userEquipmentStaticAddressPoolPrefix The user equipment address pool prefixes for the attached data network that are statically assigned by the core to UEs when they set up a PDU session.
         * The mapping of static IP to sim is configured in staticIpConfiguration on the sim resource.
         * At least one of userEquipmentAddressPoolPrefix and userEquipmentStaticAddressPoolPrefix must be defined. If both are defined then they must be the same size.
         * 
         * @return builder
         * 
         */
        public Builder userEquipmentStaticAddressPoolPrefix(List<String> userEquipmentStaticAddressPoolPrefix) {
            return userEquipmentStaticAddressPoolPrefix(Output.of(userEquipmentStaticAddressPoolPrefix));
        }

        /**
         * @param userEquipmentStaticAddressPoolPrefix The user equipment address pool prefixes for the attached data network that are statically assigned by the core to UEs when they set up a PDU session.
         * The mapping of static IP to sim is configured in staticIpConfiguration on the sim resource.
         * At least one of userEquipmentAddressPoolPrefix and userEquipmentStaticAddressPoolPrefix must be defined. If both are defined then they must be the same size.
         * 
         * @return builder
         * 
         */
        public Builder userEquipmentStaticAddressPoolPrefix(String... userEquipmentStaticAddressPoolPrefix) {
            return userEquipmentStaticAddressPoolPrefix(List.of(userEquipmentStaticAddressPoolPrefix));
        }

        /**
         * @param userPlaneDataInterface The user plane interface on the data network. In 5G networks this is called as N6 interface whereas in 4G networks this is called as SGi interface.
         * 
         * @return builder
         * 
         */
        public Builder userPlaneDataInterface(Output<InterfacePropertiesArgs> userPlaneDataInterface) {
            $.userPlaneDataInterface = userPlaneDataInterface;
            return this;
        }

        /**
         * @param userPlaneDataInterface The user plane interface on the data network. In 5G networks this is called as N6 interface whereas in 4G networks this is called as SGi interface.
         * 
         * @return builder
         * 
         */
        public Builder userPlaneDataInterface(InterfacePropertiesArgs userPlaneDataInterface) {
            return userPlaneDataInterface(Output.of(userPlaneDataInterface));
        }

        public AttachedDataNetworkArgs build() {
            $.packetCoreControlPlaneName = Objects.requireNonNull($.packetCoreControlPlaneName, "expected parameter 'packetCoreControlPlaneName' to be non-null");
            $.packetCoreDataPlaneName = Objects.requireNonNull($.packetCoreDataPlaneName, "expected parameter 'packetCoreDataPlaneName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.userPlaneDataInterface = Objects.requireNonNull($.userPlaneDataInterface, "expected parameter 'userPlaneDataInterface' to be non-null");
            return $;
        }
    }

}
