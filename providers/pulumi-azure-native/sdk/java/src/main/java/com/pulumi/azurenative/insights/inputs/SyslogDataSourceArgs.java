// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.insights.inputs;

import com.pulumi.azurenative.insights.enums.KnownSyslogDataSourceFacilityNames;
import com.pulumi.azurenative.insights.enums.KnownSyslogDataSourceLogLevels;
import com.pulumi.azurenative.insights.enums.KnownSyslogDataSourceStreams;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Definition of which syslog data will be collected and how it will be collected.
 * Only collected from Linux machines.
 * 
 */
public final class SyslogDataSourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final SyslogDataSourceArgs Empty = new SyslogDataSourceArgs();

    /**
     * The list of facility names.
     * 
     */
    @Import(name="facilityNames")
      private final @Nullable Output<List<Either<String,KnownSyslogDataSourceFacilityNames>>> facilityNames;

    public Output<List<Either<String,KnownSyslogDataSourceFacilityNames>>> facilityNames() {
        return this.facilityNames == null ? Codegen.empty() : this.facilityNames;
    }

    /**
     * The log levels to collect.
     * 
     */
    @Import(name="logLevels")
      private final @Nullable Output<List<Either<String,KnownSyslogDataSourceLogLevels>>> logLevels;

    public Output<List<Either<String,KnownSyslogDataSourceLogLevels>>> logLevels() {
        return this.logLevels == null ? Codegen.empty() : this.logLevels;
    }

    /**
     * A friendly name for the data source.
     * This name should be unique across all data sources (regardless of type) within the data collection rule.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * List of streams that this data source will be sent to.
     * A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
     * 
     */
    @Import(name="streams")
      private final @Nullable Output<List<Either<String,KnownSyslogDataSourceStreams>>> streams;

    public Output<List<Either<String,KnownSyslogDataSourceStreams>>> streams() {
        return this.streams == null ? Codegen.empty() : this.streams;
    }

    public SyslogDataSourceArgs(
        @Nullable Output<List<Either<String,KnownSyslogDataSourceFacilityNames>>> facilityNames,
        @Nullable Output<List<Either<String,KnownSyslogDataSourceLogLevels>>> logLevels,
        @Nullable Output<String> name,
        @Nullable Output<List<Either<String,KnownSyslogDataSourceStreams>>> streams) {
        this.facilityNames = facilityNames;
        this.logLevels = logLevels;
        this.name = name;
        this.streams = streams;
    }

    private SyslogDataSourceArgs() {
        this.facilityNames = Codegen.empty();
        this.logLevels = Codegen.empty();
        this.name = Codegen.empty();
        this.streams = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SyslogDataSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<Either<String,KnownSyslogDataSourceFacilityNames>>> facilityNames;
        private @Nullable Output<List<Either<String,KnownSyslogDataSourceLogLevels>>> logLevels;
        private @Nullable Output<String> name;
        private @Nullable Output<List<Either<String,KnownSyslogDataSourceStreams>>> streams;

        public Builder() {
    	      // Empty
        }

        public Builder(SyslogDataSourceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.facilityNames = defaults.facilityNames;
    	      this.logLevels = defaults.logLevels;
    	      this.name = defaults.name;
    	      this.streams = defaults.streams;
        }

        public Builder facilityNames(@Nullable Output<List<Either<String,KnownSyslogDataSourceFacilityNames>>> facilityNames) {
            this.facilityNames = facilityNames;
            return this;
        }
        public Builder facilityNames(@Nullable List<Either<String,KnownSyslogDataSourceFacilityNames>> facilityNames) {
            this.facilityNames = Codegen.ofNullable(facilityNames);
            return this;
        }
        public Builder facilityNames(Either<String,KnownSyslogDataSourceFacilityNames>... facilityNames) {
            return facilityNames(List.of(facilityNames));
        }
        public Builder logLevels(@Nullable Output<List<Either<String,KnownSyslogDataSourceLogLevels>>> logLevels) {
            this.logLevels = logLevels;
            return this;
        }
        public Builder logLevels(@Nullable List<Either<String,KnownSyslogDataSourceLogLevels>> logLevels) {
            this.logLevels = Codegen.ofNullable(logLevels);
            return this;
        }
        public Builder logLevels(Either<String,KnownSyslogDataSourceLogLevels>... logLevels) {
            return logLevels(List.of(logLevels));
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder streams(@Nullable Output<List<Either<String,KnownSyslogDataSourceStreams>>> streams) {
            this.streams = streams;
            return this;
        }
        public Builder streams(@Nullable List<Either<String,KnownSyslogDataSourceStreams>> streams) {
            this.streams = Codegen.ofNullable(streams);
            return this;
        }
        public Builder streams(Either<String,KnownSyslogDataSourceStreams>... streams) {
            return streams(List.of(streams));
        }        public SyslogDataSourceArgs build() {
            return new SyslogDataSourceArgs(facilityNames, logLevels, name, streams);
        }
    }
}
