// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.customerinsights.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Property/Properties which represent a unique ID.
 * 
 */
public final class StrongIdArgs extends com.pulumi.resources.ResourceArgs {

    public static final StrongIdArgs Empty = new StrongIdArgs();

    /**
     * Localized descriptions.
     * 
     */
    @Import(name="description")
    private @Nullable Output<Map<String,String>> description;

    /**
     * @return Localized descriptions.
     * 
     */
    public Optional<Output<Map<String,String>>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Localized display name.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<Map<String,String>> displayName;

    /**
     * @return Localized display name.
     * 
     */
    public Optional<Output<Map<String,String>>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * The properties which make up the unique ID.
     * 
     */
    @Import(name="keyPropertyNames", required=true)
    private Output<List<String>> keyPropertyNames;

    /**
     * @return The properties which make up the unique ID.
     * 
     */
    public Output<List<String>> keyPropertyNames() {
        return this.keyPropertyNames;
    }

    /**
     * The Name identifying the strong ID.
     * 
     */
    @Import(name="strongIdName", required=true)
    private Output<String> strongIdName;

    /**
     * @return The Name identifying the strong ID.
     * 
     */
    public Output<String> strongIdName() {
        return this.strongIdName;
    }

    private StrongIdArgs() {}

    private StrongIdArgs(StrongIdArgs $) {
        this.description = $.description;
        this.displayName = $.displayName;
        this.keyPropertyNames = $.keyPropertyNames;
        this.strongIdName = $.strongIdName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StrongIdArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StrongIdArgs $;

        public Builder() {
            $ = new StrongIdArgs();
        }

        public Builder(StrongIdArgs defaults) {
            $ = new StrongIdArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Localized descriptions.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<Map<String,String>> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Localized descriptions.
         * 
         * @return builder
         * 
         */
        public Builder description(Map<String,String> description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName Localized display name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<Map<String,String>> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Localized display name.
         * 
         * @return builder
         * 
         */
        public Builder displayName(Map<String,String> displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param keyPropertyNames The properties which make up the unique ID.
         * 
         * @return builder
         * 
         */
        public Builder keyPropertyNames(Output<List<String>> keyPropertyNames) {
            $.keyPropertyNames = keyPropertyNames;
            return this;
        }

        /**
         * @param keyPropertyNames The properties which make up the unique ID.
         * 
         * @return builder
         * 
         */
        public Builder keyPropertyNames(List<String> keyPropertyNames) {
            return keyPropertyNames(Output.of(keyPropertyNames));
        }

        /**
         * @param keyPropertyNames The properties which make up the unique ID.
         * 
         * @return builder
         * 
         */
        public Builder keyPropertyNames(String... keyPropertyNames) {
            return keyPropertyNames(List.of(keyPropertyNames));
        }

        /**
         * @param strongIdName The Name identifying the strong ID.
         * 
         * @return builder
         * 
         */
        public Builder strongIdName(Output<String> strongIdName) {
            $.strongIdName = strongIdName;
            return this;
        }

        /**
         * @param strongIdName The Name identifying the strong ID.
         * 
         * @return builder
         * 
         */
        public Builder strongIdName(String strongIdName) {
            return strongIdName(Output.of(strongIdName));
        }

        public StrongIdArgs build() {
            $.keyPropertyNames = Objects.requireNonNull($.keyPropertyNames, "expected parameter 'keyPropertyNames' to be non-null");
            $.strongIdName = Objects.requireNonNull($.strongIdName, "expected parameter 'strongIdName' to be non-null");
            return $;
        }
    }

}
