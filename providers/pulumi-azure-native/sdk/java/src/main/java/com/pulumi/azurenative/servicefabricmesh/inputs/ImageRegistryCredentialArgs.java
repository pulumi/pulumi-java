// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.servicefabricmesh.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Image registry credential.
 * 
 */
public final class ImageRegistryCredentialArgs extends com.pulumi.resources.ResourceArgs {

    public static final ImageRegistryCredentialArgs Empty = new ImageRegistryCredentialArgs();

    /**
     * The password for the private registry. The password is required for create or update operations, however it is not returned in the get or list operations.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * Docker image registry server, without protocol such as `http` and `https`.
     * 
     */
    @Import(name="server", required=true)
    private Output<String> server;

    public Output<String> server() {
        return this.server;
    }

    /**
     * The username for the private registry.
     * 
     */
    @Import(name="username", required=true)
    private Output<String> username;

    public Output<String> username() {
        return this.username;
    }

    private ImageRegistryCredentialArgs() {}

    private ImageRegistryCredentialArgs(ImageRegistryCredentialArgs $) {
        this.password = $.password;
        this.server = $.server;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ImageRegistryCredentialArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ImageRegistryCredentialArgs $;

        public Builder() {
            $ = new ImageRegistryCredentialArgs();
        }

        public Builder(ImageRegistryCredentialArgs defaults) {
            $ = new ImageRegistryCredentialArgs(Objects.requireNonNull(defaults));
        }

        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        public Builder password(String password) {
            return password(Output.of(password));
        }

        public Builder server(Output<String> server) {
            $.server = server;
            return this;
        }

        public Builder server(String server) {
            return server(Output.of(server));
        }

        public Builder username(Output<String> username) {
            $.username = username;
            return this;
        }

        public Builder username(String username) {
            return username(Output.of(username));
        }

        public ImageRegistryCredentialArgs build() {
            $.server = Objects.requireNonNull($.server, "expected parameter 'server' to be non-null");
            $.username = Objects.requireNonNull($.username, "expected parameter 'username' to be non-null");
            return $;
        }
    }

}
