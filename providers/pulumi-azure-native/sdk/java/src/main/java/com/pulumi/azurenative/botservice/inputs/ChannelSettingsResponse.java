// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.botservice.inputs;

import com.pulumi.azurenative.botservice.inputs.SiteResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Channel settings definition
 * 
 */
public final class ChannelSettingsResponse extends com.pulumi.resources.InvokeArgs {

    public static final ChannelSettingsResponse Empty = new ChannelSettingsResponse();

    /**
     * The bot icon url
     * 
     */
    @Import(name="botIconUrl")
    private @Nullable String botIconUrl;

    /**
     * @return The bot icon url
     * 
     */
    public Optional<String> botIconUrl() {
        return Optional.ofNullable(this.botIconUrl);
    }

    /**
     * The bot id
     * 
     */
    @Import(name="botId")
    private @Nullable String botId;

    /**
     * @return The bot id
     * 
     */
    public Optional<String> botId() {
        return Optional.ofNullable(this.botId);
    }

    /**
     * The channel display name
     * 
     */
    @Import(name="channelDisplayName")
    private @Nullable String channelDisplayName;

    /**
     * @return The channel display name
     * 
     */
    public Optional<String> channelDisplayName() {
        return Optional.ofNullable(this.channelDisplayName);
    }

    /**
     * The channel id
     * 
     */
    @Import(name="channelId")
    private @Nullable String channelId;

    /**
     * @return The channel id
     * 
     */
    public Optional<String> channelId() {
        return Optional.ofNullable(this.channelId);
    }

    /**
     * Opt-out of local authentication and ensure only MSI and AAD can be used exclusively for authentication.
     * 
     */
    @Import(name="disableLocalAuth")
    private @Nullable Boolean disableLocalAuth;

    /**
     * @return Opt-out of local authentication and ensure only MSI and AAD can be used exclusively for authentication.
     * 
     */
    public Optional<Boolean> disableLocalAuth() {
        return Optional.ofNullable(this.disableLocalAuth);
    }

    /**
     * The extensionKey1
     * 
     */
    @Import(name="extensionKey1")
    private @Nullable String extensionKey1;

    /**
     * @return The extensionKey1
     * 
     */
    public Optional<String> extensionKey1() {
        return Optional.ofNullable(this.extensionKey1);
    }

    /**
     * The extensionKey2
     * 
     */
    @Import(name="extensionKey2")
    private @Nullable String extensionKey2;

    /**
     * @return The extensionKey2
     * 
     */
    public Optional<String> extensionKey2() {
        return Optional.ofNullable(this.extensionKey2);
    }

    /**
     * Whether this channel is enabled for the bot
     * 
     */
    @Import(name="isEnabled")
    private @Nullable Boolean isEnabled;

    /**
     * @return Whether this channel is enabled for the bot
     * 
     */
    public Optional<Boolean> isEnabled() {
        return Optional.ofNullable(this.isEnabled);
    }

    /**
     * The list of sites
     * 
     */
    @Import(name="sites")
    private @Nullable List<SiteResponse> sites;

    /**
     * @return The list of sites
     * 
     */
    public Optional<List<SiteResponse>> sites() {
        return Optional.ofNullable(this.sites);
    }

    private ChannelSettingsResponse() {}

    private ChannelSettingsResponse(ChannelSettingsResponse $) {
        this.botIconUrl = $.botIconUrl;
        this.botId = $.botId;
        this.channelDisplayName = $.channelDisplayName;
        this.channelId = $.channelId;
        this.disableLocalAuth = $.disableLocalAuth;
        this.extensionKey1 = $.extensionKey1;
        this.extensionKey2 = $.extensionKey2;
        this.isEnabled = $.isEnabled;
        this.sites = $.sites;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ChannelSettingsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ChannelSettingsResponse $;

        public Builder() {
            $ = new ChannelSettingsResponse();
        }

        public Builder(ChannelSettingsResponse defaults) {
            $ = new ChannelSettingsResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param botIconUrl The bot icon url
         * 
         * @return builder
         * 
         */
        public Builder botIconUrl(@Nullable String botIconUrl) {
            $.botIconUrl = botIconUrl;
            return this;
        }

        /**
         * @param botId The bot id
         * 
         * @return builder
         * 
         */
        public Builder botId(@Nullable String botId) {
            $.botId = botId;
            return this;
        }

        /**
         * @param channelDisplayName The channel display name
         * 
         * @return builder
         * 
         */
        public Builder channelDisplayName(@Nullable String channelDisplayName) {
            $.channelDisplayName = channelDisplayName;
            return this;
        }

        /**
         * @param channelId The channel id
         * 
         * @return builder
         * 
         */
        public Builder channelId(@Nullable String channelId) {
            $.channelId = channelId;
            return this;
        }

        /**
         * @param disableLocalAuth Opt-out of local authentication and ensure only MSI and AAD can be used exclusively for authentication.
         * 
         * @return builder
         * 
         */
        public Builder disableLocalAuth(@Nullable Boolean disableLocalAuth) {
            $.disableLocalAuth = disableLocalAuth;
            return this;
        }

        /**
         * @param extensionKey1 The extensionKey1
         * 
         * @return builder
         * 
         */
        public Builder extensionKey1(@Nullable String extensionKey1) {
            $.extensionKey1 = extensionKey1;
            return this;
        }

        /**
         * @param extensionKey2 The extensionKey2
         * 
         * @return builder
         * 
         */
        public Builder extensionKey2(@Nullable String extensionKey2) {
            $.extensionKey2 = extensionKey2;
            return this;
        }

        /**
         * @param isEnabled Whether this channel is enabled for the bot
         * 
         * @return builder
         * 
         */
        public Builder isEnabled(@Nullable Boolean isEnabled) {
            $.isEnabled = isEnabled;
            return this;
        }

        /**
         * @param sites The list of sites
         * 
         * @return builder
         * 
         */
        public Builder sites(@Nullable List<SiteResponse> sites) {
            $.sites = sites;
            return this;
        }

        /**
         * @param sites The list of sites
         * 
         * @return builder
         * 
         */
        public Builder sites(SiteResponse... sites) {
            return sites(List.of(sites));
        }

        public ChannelSettingsResponse build() {
            return $;
        }
    }

}
