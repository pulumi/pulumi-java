// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.botservice.inputs;

import com.pulumi.azurenative.botservice.inputs.ConnectionSettingParameterResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Properties for a Connection Setting Item
 * 
 */
public final class ConnectionSettingPropertiesResponse extends com.pulumi.resources.InvokeArgs {

    public static final ConnectionSettingPropertiesResponse Empty = new ConnectionSettingPropertiesResponse();

    /**
     * Client Id associated with the Connection Setting.
     * 
     */
    @Import(name="clientId")
    private @Nullable String clientId;

    public Optional<String> clientId() {
        return Optional.ofNullable(this.clientId);
    }

    /**
     * Client Secret associated with the Connection Setting
     * 
     */
    @Import(name="clientSecret")
    private @Nullable String clientSecret;

    public Optional<String> clientSecret() {
        return Optional.ofNullable(this.clientSecret);
    }

    /**
     * Id associated with the Connection Setting.
     * 
     */
    @Import(name="id")
    private @Nullable String id;

    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Name associated with the Connection Setting.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Service Provider Parameters associated with the Connection Setting
     * 
     */
    @Import(name="parameters")
    private @Nullable List<ConnectionSettingParameterResponse> parameters;

    public Optional<List<ConnectionSettingParameterResponse>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    /**
     * Provisioning state of the resource
     * 
     */
    @Import(name="provisioningState")
    private @Nullable String provisioningState;

    public Optional<String> provisioningState() {
        return Optional.ofNullable(this.provisioningState);
    }

    /**
     * Scopes associated with the Connection Setting
     * 
     */
    @Import(name="scopes")
    private @Nullable String scopes;

    public Optional<String> scopes() {
        return Optional.ofNullable(this.scopes);
    }

    /**
     * Service Provider Display Name associated with the Connection Setting
     * 
     */
    @Import(name="serviceProviderDisplayName")
    private @Nullable String serviceProviderDisplayName;

    public Optional<String> serviceProviderDisplayName() {
        return Optional.ofNullable(this.serviceProviderDisplayName);
    }

    /**
     * Service Provider Id associated with the Connection Setting
     * 
     */
    @Import(name="serviceProviderId")
    private @Nullable String serviceProviderId;

    public Optional<String> serviceProviderId() {
        return Optional.ofNullable(this.serviceProviderId);
    }

    /**
     * Setting Id set by the service for the Connection Setting.
     * 
     */
    @Import(name="settingId", required=true)
    private String settingId;

    public String settingId() {
        return this.settingId;
    }

    private ConnectionSettingPropertiesResponse() {}

    private ConnectionSettingPropertiesResponse(ConnectionSettingPropertiesResponse $) {
        this.clientId = $.clientId;
        this.clientSecret = $.clientSecret;
        this.id = $.id;
        this.name = $.name;
        this.parameters = $.parameters;
        this.provisioningState = $.provisioningState;
        this.scopes = $.scopes;
        this.serviceProviderDisplayName = $.serviceProviderDisplayName;
        this.serviceProviderId = $.serviceProviderId;
        this.settingId = $.settingId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectionSettingPropertiesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectionSettingPropertiesResponse $;

        public Builder() {
            $ = new ConnectionSettingPropertiesResponse();
        }

        public Builder(ConnectionSettingPropertiesResponse defaults) {
            $ = new ConnectionSettingPropertiesResponse(Objects.requireNonNull(defaults));
        }

        public Builder clientId(@Nullable String clientId) {
            $.clientId = clientId;
            return this;
        }

        public Builder clientSecret(@Nullable String clientSecret) {
            $.clientSecret = clientSecret;
            return this;
        }

        public Builder id(@Nullable String id) {
            $.id = id;
            return this;
        }

        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        public Builder parameters(@Nullable List<ConnectionSettingParameterResponse> parameters) {
            $.parameters = parameters;
            return this;
        }

        public Builder parameters(ConnectionSettingParameterResponse... parameters) {
            return parameters(List.of(parameters));
        }

        public Builder provisioningState(@Nullable String provisioningState) {
            $.provisioningState = provisioningState;
            return this;
        }

        public Builder scopes(@Nullable String scopes) {
            $.scopes = scopes;
            return this;
        }

        public Builder serviceProviderDisplayName(@Nullable String serviceProviderDisplayName) {
            $.serviceProviderDisplayName = serviceProviderDisplayName;
            return this;
        }

        public Builder serviceProviderId(@Nullable String serviceProviderId) {
            $.serviceProviderId = serviceProviderId;
            return this;
        }

        public Builder settingId(String settingId) {
            $.settingId = settingId;
            return this;
        }

        public ConnectionSettingPropertiesResponse build() {
            $.settingId = Objects.requireNonNull($.settingId, "expected parameter 'settingId' to be non-null");
            return $;
        }
    }

}
