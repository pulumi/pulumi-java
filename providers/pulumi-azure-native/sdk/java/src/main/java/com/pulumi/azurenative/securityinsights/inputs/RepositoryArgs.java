// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.securityinsights.inputs;

import com.pulumi.azurenative.securityinsights.inputs.ContentPathMapArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * metadata of a repository.
 * 
 */
public final class RepositoryArgs extends com.pulumi.resources.ResourceArgs {

    public static final RepositoryArgs Empty = new RepositoryArgs();

    /**
     * Branch name of repository.
     * 
     */
    @Import(name="branch")
    private @Nullable Output<String> branch;

    /**
     * @return Branch name of repository.
     * 
     */
    public Optional<Output<String>> branch() {
        return Optional.ofNullable(this.branch);
    }

    /**
     * Url to access repository action logs.
     * 
     */
    @Import(name="deploymentLogsUrl")
    private @Nullable Output<String> deploymentLogsUrl;

    /**
     * @return Url to access repository action logs.
     * 
     */
    public Optional<Output<String>> deploymentLogsUrl() {
        return Optional.ofNullable(this.deploymentLogsUrl);
    }

    /**
     * Display url of repository.
     * 
     */
    @Import(name="displayUrl")
    private @Nullable Output<String> displayUrl;

    /**
     * @return Display url of repository.
     * 
     */
    public Optional<Output<String>> displayUrl() {
        return Optional.ofNullable(this.displayUrl);
    }

    /**
     * Dictionary of source control content type and path mapping.
     * 
     */
    @Import(name="pathMapping")
    private @Nullable Output<List<ContentPathMapArgs>> pathMapping;

    /**
     * @return Dictionary of source control content type and path mapping.
     * 
     */
    public Optional<Output<List<ContentPathMapArgs>>> pathMapping() {
        return Optional.ofNullable(this.pathMapping);
    }

    /**
     * Url of repository.
     * 
     */
    @Import(name="url")
    private @Nullable Output<String> url;

    /**
     * @return Url of repository.
     * 
     */
    public Optional<Output<String>> url() {
        return Optional.ofNullable(this.url);
    }

    private RepositoryArgs() {}

    private RepositoryArgs(RepositoryArgs $) {
        this.branch = $.branch;
        this.deploymentLogsUrl = $.deploymentLogsUrl;
        this.displayUrl = $.displayUrl;
        this.pathMapping = $.pathMapping;
        this.url = $.url;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RepositoryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RepositoryArgs $;

        public Builder() {
            $ = new RepositoryArgs();
        }

        public Builder(RepositoryArgs defaults) {
            $ = new RepositoryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param branch Branch name of repository.
         * 
         * @return builder
         * 
         */
        public Builder branch(@Nullable Output<String> branch) {
            $.branch = branch;
            return this;
        }

        /**
         * @param branch Branch name of repository.
         * 
         * @return builder
         * 
         */
        public Builder branch(String branch) {
            return branch(Output.of(branch));
        }

        /**
         * @param deploymentLogsUrl Url to access repository action logs.
         * 
         * @return builder
         * 
         */
        public Builder deploymentLogsUrl(@Nullable Output<String> deploymentLogsUrl) {
            $.deploymentLogsUrl = deploymentLogsUrl;
            return this;
        }

        /**
         * @param deploymentLogsUrl Url to access repository action logs.
         * 
         * @return builder
         * 
         */
        public Builder deploymentLogsUrl(String deploymentLogsUrl) {
            return deploymentLogsUrl(Output.of(deploymentLogsUrl));
        }

        /**
         * @param displayUrl Display url of repository.
         * 
         * @return builder
         * 
         */
        public Builder displayUrl(@Nullable Output<String> displayUrl) {
            $.displayUrl = displayUrl;
            return this;
        }

        /**
         * @param displayUrl Display url of repository.
         * 
         * @return builder
         * 
         */
        public Builder displayUrl(String displayUrl) {
            return displayUrl(Output.of(displayUrl));
        }

        /**
         * @param pathMapping Dictionary of source control content type and path mapping.
         * 
         * @return builder
         * 
         */
        public Builder pathMapping(@Nullable Output<List<ContentPathMapArgs>> pathMapping) {
            $.pathMapping = pathMapping;
            return this;
        }

        /**
         * @param pathMapping Dictionary of source control content type and path mapping.
         * 
         * @return builder
         * 
         */
        public Builder pathMapping(List<ContentPathMapArgs> pathMapping) {
            return pathMapping(Output.of(pathMapping));
        }

        /**
         * @param pathMapping Dictionary of source control content type and path mapping.
         * 
         * @return builder
         * 
         */
        public Builder pathMapping(ContentPathMapArgs... pathMapping) {
            return pathMapping(List.of(pathMapping));
        }

        /**
         * @param url Url of repository.
         * 
         * @return builder
         * 
         */
        public Builder url(@Nullable Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url Url of repository.
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        public RepositoryArgs build() {
            return $;
        }
    }

}
