// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.security;

import com.pulumi.azurenative.security.enums.RuleState;
import com.pulumi.azurenative.security.inputs.SuppressionAlertsScopeArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AlertsSuppressionRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final AlertsSuppressionRuleArgs Empty = new AlertsSuppressionRuleArgs();

    /**
     * Type of the alert to automatically suppress. For all alert types, use &#39;*&#39;
     * 
     */
    @Import(name="alertType", required=true)
    private Output<String> alertType;

    public Output<String> alertType() {
        return this.alertType;
    }

    /**
     * The unique name of the suppression alert rule
     * 
     */
    @Import(name="alertsSuppressionRuleName")
    private @Nullable Output<String> alertsSuppressionRuleName;

    public Optional<Output<String>> alertsSuppressionRuleName() {
        return Optional.ofNullable(this.alertsSuppressionRuleName);
    }

    /**
     * Any comment regarding the rule
     * 
     */
    @Import(name="comment")
    private @Nullable Output<String> comment;

    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    /**
     * Expiration date of the rule, if value is not provided or provided as null this field will default to the maximum allowed expiration date.
     * 
     */
    @Import(name="expirationDateUtc")
    private @Nullable Output<String> expirationDateUtc;

    public Optional<Output<String>> expirationDateUtc() {
        return Optional.ofNullable(this.expirationDateUtc);
    }

    /**
     * The reason for dismissing the alert
     * 
     */
    @Import(name="reason", required=true)
    private Output<String> reason;

    public Output<String> reason() {
        return this.reason;
    }

    /**
     * Possible states of the rule
     * 
     */
    @Import(name="state", required=true)
    private Output<Either<String,RuleState>> state;

    public Output<Either<String,RuleState>> state() {
        return this.state;
    }

    /**
     * The suppression conditions
     * 
     */
    @Import(name="suppressionAlertsScope")
    private @Nullable Output<SuppressionAlertsScopeArgs> suppressionAlertsScope;

    public Optional<Output<SuppressionAlertsScopeArgs>> suppressionAlertsScope() {
        return Optional.ofNullable(this.suppressionAlertsScope);
    }

    private AlertsSuppressionRuleArgs() {}

    private AlertsSuppressionRuleArgs(AlertsSuppressionRuleArgs $) {
        this.alertType = $.alertType;
        this.alertsSuppressionRuleName = $.alertsSuppressionRuleName;
        this.comment = $.comment;
        this.expirationDateUtc = $.expirationDateUtc;
        this.reason = $.reason;
        this.state = $.state;
        this.suppressionAlertsScope = $.suppressionAlertsScope;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AlertsSuppressionRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AlertsSuppressionRuleArgs $;

        public Builder() {
            $ = new AlertsSuppressionRuleArgs();
        }

        public Builder(AlertsSuppressionRuleArgs defaults) {
            $ = new AlertsSuppressionRuleArgs(Objects.requireNonNull(defaults));
        }

        public Builder alertType(Output<String> alertType) {
            $.alertType = alertType;
            return this;
        }

        public Builder alertType(String alertType) {
            return alertType(Output.of(alertType));
        }

        public Builder alertsSuppressionRuleName(@Nullable Output<String> alertsSuppressionRuleName) {
            $.alertsSuppressionRuleName = alertsSuppressionRuleName;
            return this;
        }

        public Builder alertsSuppressionRuleName(String alertsSuppressionRuleName) {
            return alertsSuppressionRuleName(Output.of(alertsSuppressionRuleName));
        }

        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        public Builder expirationDateUtc(@Nullable Output<String> expirationDateUtc) {
            $.expirationDateUtc = expirationDateUtc;
            return this;
        }

        public Builder expirationDateUtc(String expirationDateUtc) {
            return expirationDateUtc(Output.of(expirationDateUtc));
        }

        public Builder reason(Output<String> reason) {
            $.reason = reason;
            return this;
        }

        public Builder reason(String reason) {
            return reason(Output.of(reason));
        }

        public Builder state(Output<Either<String,RuleState>> state) {
            $.state = state;
            return this;
        }

        public Builder state(Either<String,RuleState> state) {
            return state(Output.of(state));
        }

        public Builder state(String state) {
            return state(Either.ofLeft(state));
        }

        public Builder state(RuleState state) {
            return state(Either.ofRight(state));
        }

        public Builder suppressionAlertsScope(@Nullable Output<SuppressionAlertsScopeArgs> suppressionAlertsScope) {
            $.suppressionAlertsScope = suppressionAlertsScope;
            return this;
        }

        public Builder suppressionAlertsScope(SuppressionAlertsScopeArgs suppressionAlertsScope) {
            return suppressionAlertsScope(Output.of(suppressionAlertsScope));
        }

        public AlertsSuppressionRuleArgs build() {
            $.alertType = Objects.requireNonNull($.alertType, "expected parameter 'alertType' to be non-null");
            $.reason = Objects.requireNonNull($.reason, "expected parameter 'reason' to be non-null");
            $.state = Objects.requireNonNull($.state, "expected parameter 'state' to be non-null");
            return $;
        }
    }

}
