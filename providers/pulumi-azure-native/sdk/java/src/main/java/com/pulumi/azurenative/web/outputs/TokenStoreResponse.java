// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.web.outputs;

import com.pulumi.azurenative.web.outputs.BlobStorageTokenStoreResponse;
import com.pulumi.azurenative.web.outputs.FileSystemTokenStoreResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class TokenStoreResponse {
    /**
     * @return The configuration settings of the storage of the tokens if blob storage is used.
     * 
     */
    private final @Nullable BlobStorageTokenStoreResponse azureBlobStorage;
    /**
     * @return &lt;code&gt;true&lt;/code&gt; to durably store platform-specific security tokens that are obtained during login flows; otherwise, &lt;code&gt;false&lt;/code&gt;.
     *  The default is &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    private final @Nullable Boolean enabled;
    /**
     * @return The configuration settings of the storage of the tokens if a file system is used.
     * 
     */
    private final @Nullable FileSystemTokenStoreResponse fileSystem;
    /**
     * @return The number of hours after session token expiration that a session token can be used to
     * call the token refresh API. The default is 72 hours.
     * 
     */
    private final @Nullable Double tokenRefreshExtensionHours;

    @CustomType.Constructor
    private TokenStoreResponse(
        @CustomType.Parameter("azureBlobStorage") @Nullable BlobStorageTokenStoreResponse azureBlobStorage,
        @CustomType.Parameter("enabled") @Nullable Boolean enabled,
        @CustomType.Parameter("fileSystem") @Nullable FileSystemTokenStoreResponse fileSystem,
        @CustomType.Parameter("tokenRefreshExtensionHours") @Nullable Double tokenRefreshExtensionHours) {
        this.azureBlobStorage = azureBlobStorage;
        this.enabled = enabled;
        this.fileSystem = fileSystem;
        this.tokenRefreshExtensionHours = tokenRefreshExtensionHours;
    }

    /**
     * @return The configuration settings of the storage of the tokens if blob storage is used.
     * 
     */
    public Optional<BlobStorageTokenStoreResponse> azureBlobStorage() {
        return Optional.ofNullable(this.azureBlobStorage);
    }
    /**
     * @return &lt;code&gt;true&lt;/code&gt; to durably store platform-specific security tokens that are obtained during login flows; otherwise, &lt;code&gt;false&lt;/code&gt;.
     *  The default is &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }
    /**
     * @return The configuration settings of the storage of the tokens if a file system is used.
     * 
     */
    public Optional<FileSystemTokenStoreResponse> fileSystem() {
        return Optional.ofNullable(this.fileSystem);
    }
    /**
     * @return The number of hours after session token expiration that a session token can be used to
     * call the token refresh API. The default is 72 hours.
     * 
     */
    public Optional<Double> tokenRefreshExtensionHours() {
        return Optional.ofNullable(this.tokenRefreshExtensionHours);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TokenStoreResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable BlobStorageTokenStoreResponse azureBlobStorage;
        private @Nullable Boolean enabled;
        private @Nullable FileSystemTokenStoreResponse fileSystem;
        private @Nullable Double tokenRefreshExtensionHours;

        public Builder() {
    	      // Empty
        }

        public Builder(TokenStoreResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.azureBlobStorage = defaults.azureBlobStorage;
    	      this.enabled = defaults.enabled;
    	      this.fileSystem = defaults.fileSystem;
    	      this.tokenRefreshExtensionHours = defaults.tokenRefreshExtensionHours;
        }

        public Builder azureBlobStorage(@Nullable BlobStorageTokenStoreResponse azureBlobStorage) {
            this.azureBlobStorage = azureBlobStorage;
            return this;
        }
        public Builder enabled(@Nullable Boolean enabled) {
            this.enabled = enabled;
            return this;
        }
        public Builder fileSystem(@Nullable FileSystemTokenStoreResponse fileSystem) {
            this.fileSystem = fileSystem;
            return this;
        }
        public Builder tokenRefreshExtensionHours(@Nullable Double tokenRefreshExtensionHours) {
            this.tokenRefreshExtensionHours = tokenRefreshExtensionHours;
            return this;
        }        public TokenStoreResponse build() {
            return new TokenStoreResponse(azureBlobStorage, enabled, fileSystem, tokenRefreshExtensionHours);
        }
    }
}
