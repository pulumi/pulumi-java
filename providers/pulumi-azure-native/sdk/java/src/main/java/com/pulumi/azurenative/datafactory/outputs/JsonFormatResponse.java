// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class JsonFormatResponse {
    /**
     * Deserializer. Type: string (or Expression with resultType string).
     * 
     */
    private final @Nullable Object deserializer;
    /**
     * The code page name of the preferred encoding. If not provided, the default value is &#39;utf-8&#39;, unless the byte order mark (BOM) denotes another Unicode encoding. The full list of supported values can be found in the &#39;Name&#39; column of the table of encodings in the following reference: https://go.microsoft.com/fwlink/?linkid=861078. Type: string (or Expression with resultType string).
     * 
     */
    private final @Nullable Object encodingName;
    /**
     * File pattern of JSON. To be more specific, the way of separating a collection of JSON objects. The default value is &#39;setOfObjects&#39;. It is case-sensitive.
     * 
     */
    private final @Nullable Object filePattern;
    /**
     * The JSONPath of the JSON array element to be flattened. Example: &#34;$.ArrayPath&#34;. Type: string (or Expression with resultType string).
     * 
     */
    private final @Nullable Object jsonNodeReference;
    /**
     * The JSONPath definition for each column mapping with a customized column name to extract data from JSON file. For fields under root object, start with &#34;$&#34;; for fields inside the array chosen by jsonNodeReference property, start from the array element. Example: {&#34;Column1&#34;: &#34;$.Column1Path&#34;, &#34;Column2&#34;: &#34;Column2PathInArray&#34;}. Type: object (or Expression with resultType object).
     * 
     */
    private final @Nullable Object jsonPathDefinition;
    /**
     * The character used to separate nesting levels. Default value is &#39;.&#39; (dot). Type: string (or Expression with resultType string).
     * 
     */
    private final @Nullable Object nestingSeparator;
    /**
     * Serializer. Type: string (or Expression with resultType string).
     * 
     */
    private final @Nullable Object serializer;
    /**
     * Type of dataset storage format.
     * Expected value is &#39;JsonFormat&#39;.
     * 
     */
    private final String type;

    @CustomType.Constructor
    private JsonFormatResponse(
        @CustomType.Parameter("deserializer") @Nullable Object deserializer,
        @CustomType.Parameter("encodingName") @Nullable Object encodingName,
        @CustomType.Parameter("filePattern") @Nullable Object filePattern,
        @CustomType.Parameter("jsonNodeReference") @Nullable Object jsonNodeReference,
        @CustomType.Parameter("jsonPathDefinition") @Nullable Object jsonPathDefinition,
        @CustomType.Parameter("nestingSeparator") @Nullable Object nestingSeparator,
        @CustomType.Parameter("serializer") @Nullable Object serializer,
        @CustomType.Parameter("type") String type) {
        this.deserializer = deserializer;
        this.encodingName = encodingName;
        this.filePattern = filePattern;
        this.jsonNodeReference = jsonNodeReference;
        this.jsonPathDefinition = jsonPathDefinition;
        this.nestingSeparator = nestingSeparator;
        this.serializer = serializer;
        this.type = type;
    }

    /**
     * Deserializer. Type: string (or Expression with resultType string).
     * 
    */
    public Optional<Object> deserializer() {
        return Optional.ofNullable(this.deserializer);
    }
    /**
     * The code page name of the preferred encoding. If not provided, the default value is &#39;utf-8&#39;, unless the byte order mark (BOM) denotes another Unicode encoding. The full list of supported values can be found in the &#39;Name&#39; column of the table of encodings in the following reference: https://go.microsoft.com/fwlink/?linkid=861078. Type: string (or Expression with resultType string).
     * 
    */
    public Optional<Object> encodingName() {
        return Optional.ofNullable(this.encodingName);
    }
    /**
     * File pattern of JSON. To be more specific, the way of separating a collection of JSON objects. The default value is &#39;setOfObjects&#39;. It is case-sensitive.
     * 
    */
    public Optional<Object> filePattern() {
        return Optional.ofNullable(this.filePattern);
    }
    /**
     * The JSONPath of the JSON array element to be flattened. Example: &#34;$.ArrayPath&#34;. Type: string (or Expression with resultType string).
     * 
    */
    public Optional<Object> jsonNodeReference() {
        return Optional.ofNullable(this.jsonNodeReference);
    }
    /**
     * The JSONPath definition for each column mapping with a customized column name to extract data from JSON file. For fields under root object, start with &#34;$&#34;; for fields inside the array chosen by jsonNodeReference property, start from the array element. Example: {&#34;Column1&#34;: &#34;$.Column1Path&#34;, &#34;Column2&#34;: &#34;Column2PathInArray&#34;}. Type: object (or Expression with resultType object).
     * 
    */
    public Optional<Object> jsonPathDefinition() {
        return Optional.ofNullable(this.jsonPathDefinition);
    }
    /**
     * The character used to separate nesting levels. Default value is &#39;.&#39; (dot). Type: string (or Expression with resultType string).
     * 
    */
    public Optional<Object> nestingSeparator() {
        return Optional.ofNullable(this.nestingSeparator);
    }
    /**
     * Serializer. Type: string (or Expression with resultType string).
     * 
    */
    public Optional<Object> serializer() {
        return Optional.ofNullable(this.serializer);
    }
    /**
     * Type of dataset storage format.
     * Expected value is &#39;JsonFormat&#39;.
     * 
    */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(JsonFormatResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Object deserializer;
        private @Nullable Object encodingName;
        private @Nullable Object filePattern;
        private @Nullable Object jsonNodeReference;
        private @Nullable Object jsonPathDefinition;
        private @Nullable Object nestingSeparator;
        private @Nullable Object serializer;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(JsonFormatResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.deserializer = defaults.deserializer;
    	      this.encodingName = defaults.encodingName;
    	      this.filePattern = defaults.filePattern;
    	      this.jsonNodeReference = defaults.jsonNodeReference;
    	      this.jsonPathDefinition = defaults.jsonPathDefinition;
    	      this.nestingSeparator = defaults.nestingSeparator;
    	      this.serializer = defaults.serializer;
    	      this.type = defaults.type;
        }

        public Builder deserializer(@Nullable Object deserializer) {
            this.deserializer = deserializer;
            return this;
        }
        public Builder encodingName(@Nullable Object encodingName) {
            this.encodingName = encodingName;
            return this;
        }
        public Builder filePattern(@Nullable Object filePattern) {
            this.filePattern = filePattern;
            return this;
        }
        public Builder jsonNodeReference(@Nullable Object jsonNodeReference) {
            this.jsonNodeReference = jsonNodeReference;
            return this;
        }
        public Builder jsonPathDefinition(@Nullable Object jsonPathDefinition) {
            this.jsonPathDefinition = jsonPathDefinition;
            return this;
        }
        public Builder nestingSeparator(@Nullable Object nestingSeparator) {
            this.nestingSeparator = nestingSeparator;
            return this;
        }
        public Builder serializer(@Nullable Object serializer) {
            this.serializer = serializer;
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }        public JsonFormatResponse build() {
            return new JsonFormatResponse(deserializer, encodingName, filePattern, jsonNodeReference, jsonPathDefinition, nestingSeparator, serializer, type);
        }
    }
}
