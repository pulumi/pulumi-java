// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.containerinstance.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Represents a volume that is populated with the contents of a git repository
 * 
 */
public final class GitRepoVolumeResponse extends com.pulumi.resources.InvokeArgs {

    public static final GitRepoVolumeResponse Empty = new GitRepoVolumeResponse();

    /**
     * Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
     * 
     */
    @Import(name="directory")
      private final @Nullable String directory;

    public Optional<String> directory() {
        return this.directory == null ? Optional.empty() : Optional.ofNullable(this.directory);
    }

    /**
     * Repository URL
     * 
     */
    @Import(name="repository", required=true)
      private final String repository;

    public String repository() {
        return this.repository;
    }

    /**
     * Commit hash for the specified revision.
     * 
     */
    @Import(name="revision")
      private final @Nullable String revision;

    public Optional<String> revision() {
        return this.revision == null ? Optional.empty() : Optional.ofNullable(this.revision);
    }

    public GitRepoVolumeResponse(
        @Nullable String directory,
        String repository,
        @Nullable String revision) {
        this.directory = directory;
        this.repository = Objects.requireNonNull(repository, "expected parameter 'repository' to be non-null");
        this.revision = revision;
    }

    private GitRepoVolumeResponse() {
        this.directory = null;
        this.repository = null;
        this.revision = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GitRepoVolumeResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String directory;
        private String repository;
        private @Nullable String revision;

        public Builder() {
    	      // Empty
        }

        public Builder(GitRepoVolumeResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.directory = defaults.directory;
    	      this.repository = defaults.repository;
    	      this.revision = defaults.revision;
        }

        public Builder directory(@Nullable String directory) {
            this.directory = directory;
            return this;
        }
        public Builder repository(String repository) {
            this.repository = Objects.requireNonNull(repository);
            return this;
        }
        public Builder revision(@Nullable String revision) {
            this.revision = revision;
            return this;
        }        public GitRepoVolumeResponse build() {
            return new GitRepoVolumeResponse(directory, repository, revision);
        }
    }
}
