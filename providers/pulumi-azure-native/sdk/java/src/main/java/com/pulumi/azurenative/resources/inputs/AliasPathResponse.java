// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.resources.inputs;

import com.pulumi.azurenative.resources.inputs.AliasPathMetadataResponse;
import com.pulumi.azurenative.resources.inputs.AliasPatternResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The type of the paths for alias.
 * 
 */
public final class AliasPathResponse extends com.pulumi.resources.InvokeArgs {

    public static final AliasPathResponse Empty = new AliasPathResponse();

    /**
     * The API versions.
     * 
     */
    @Import(name="apiVersions")
    private @Nullable List<String> apiVersions;

    /**
     * @return The API versions.
     * 
     */
    public Optional<List<String>> apiVersions() {
        return Optional.ofNullable(this.apiVersions);
    }

    /**
     * The metadata of the alias path. If missing, fall back to the default metadata of the alias.
     * 
     */
    @Import(name="metadata", required=true)
    private AliasPathMetadataResponse metadata;

    /**
     * @return The metadata of the alias path. If missing, fall back to the default metadata of the alias.
     * 
     */
    public AliasPathMetadataResponse metadata() {
        return this.metadata;
    }

    /**
     * The path of an alias.
     * 
     */
    @Import(name="path")
    private @Nullable String path;

    /**
     * @return The path of an alias.
     * 
     */
    public Optional<String> path() {
        return Optional.ofNullable(this.path);
    }

    /**
     * The pattern for an alias path.
     * 
     */
    @Import(name="pattern")
    private @Nullable AliasPatternResponse pattern;

    /**
     * @return The pattern for an alias path.
     * 
     */
    public Optional<AliasPatternResponse> pattern() {
        return Optional.ofNullable(this.pattern);
    }

    private AliasPathResponse() {}

    private AliasPathResponse(AliasPathResponse $) {
        this.apiVersions = $.apiVersions;
        this.metadata = $.metadata;
        this.path = $.path;
        this.pattern = $.pattern;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AliasPathResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AliasPathResponse $;

        public Builder() {
            $ = new AliasPathResponse();
        }

        public Builder(AliasPathResponse defaults) {
            $ = new AliasPathResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param apiVersions The API versions.
         * 
         * @return builder
         * 
         */
        public Builder apiVersions(@Nullable List<String> apiVersions) {
            $.apiVersions = apiVersions;
            return this;
        }

        /**
         * @param apiVersions The API versions.
         * 
         * @return builder
         * 
         */
        public Builder apiVersions(String... apiVersions) {
            return apiVersions(List.of(apiVersions));
        }

        /**
         * @param metadata The metadata of the alias path. If missing, fall back to the default metadata of the alias.
         * 
         * @return builder
         * 
         */
        public Builder metadata(AliasPathMetadataResponse metadata) {
            $.metadata = metadata;
            return this;
        }

        /**
         * @param path The path of an alias.
         * 
         * @return builder
         * 
         */
        public Builder path(@Nullable String path) {
            $.path = path;
            return this;
        }

        /**
         * @param pattern The pattern for an alias path.
         * 
         * @return builder
         * 
         */
        public Builder pattern(@Nullable AliasPatternResponse pattern) {
            $.pattern = pattern;
            return this;
        }

        public AliasPathResponse build() {
            $.metadata = Objects.requireNonNull($.metadata, "expected parameter 'metadata' to be non-null");
            return $;
        }
    }

}
