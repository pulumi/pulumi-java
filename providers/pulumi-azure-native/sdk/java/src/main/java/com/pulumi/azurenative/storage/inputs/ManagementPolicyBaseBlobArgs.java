// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.storage.inputs;

import com.pulumi.azurenative.storage.inputs.DateAfterModificationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Management policy action for base blob.
 * 
 */
public final class ManagementPolicyBaseBlobArgs extends com.pulumi.resources.ResourceArgs {

    public static final ManagementPolicyBaseBlobArgs Empty = new ManagementPolicyBaseBlobArgs();

    /**
     * The function to delete the blob
     * 
     */
    @Import(name="delete")
    private @Nullable Output<DateAfterModificationArgs> delete;

    /**
     * @return The function to delete the blob
     * 
     */
    public Optional<Output<DateAfterModificationArgs>> delete() {
        return Optional.ofNullable(this.delete);
    }

    /**
     * This property enables auto tiering of a blob from cool to hot on a blob access. This property requires tierToCool.daysAfterLastAccessTimeGreaterThan.
     * 
     */
    @Import(name="enableAutoTierToHotFromCool")
    private @Nullable Output<Boolean> enableAutoTierToHotFromCool;

    /**
     * @return This property enables auto tiering of a blob from cool to hot on a blob access. This property requires tierToCool.daysAfterLastAccessTimeGreaterThan.
     * 
     */
    public Optional<Output<Boolean>> enableAutoTierToHotFromCool() {
        return Optional.ofNullable(this.enableAutoTierToHotFromCool);
    }

    /**
     * The function to tier blobs to archive storage. Support blobs currently at Hot or Cool tier
     * 
     */
    @Import(name="tierToArchive")
    private @Nullable Output<DateAfterModificationArgs> tierToArchive;

    /**
     * @return The function to tier blobs to archive storage. Support blobs currently at Hot or Cool tier
     * 
     */
    public Optional<Output<DateAfterModificationArgs>> tierToArchive() {
        return Optional.ofNullable(this.tierToArchive);
    }

    /**
     * The function to tier blobs to cool storage. Support blobs currently at Hot tier
     * 
     */
    @Import(name="tierToCool")
    private @Nullable Output<DateAfterModificationArgs> tierToCool;

    /**
     * @return The function to tier blobs to cool storage. Support blobs currently at Hot tier
     * 
     */
    public Optional<Output<DateAfterModificationArgs>> tierToCool() {
        return Optional.ofNullable(this.tierToCool);
    }

    private ManagementPolicyBaseBlobArgs() {}

    private ManagementPolicyBaseBlobArgs(ManagementPolicyBaseBlobArgs $) {
        this.delete = $.delete;
        this.enableAutoTierToHotFromCool = $.enableAutoTierToHotFromCool;
        this.tierToArchive = $.tierToArchive;
        this.tierToCool = $.tierToCool;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagementPolicyBaseBlobArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagementPolicyBaseBlobArgs $;

        public Builder() {
            $ = new ManagementPolicyBaseBlobArgs();
        }

        public Builder(ManagementPolicyBaseBlobArgs defaults) {
            $ = new ManagementPolicyBaseBlobArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param delete The function to delete the blob
         * 
         * @return builder
         * 
         */
        public Builder delete(@Nullable Output<DateAfterModificationArgs> delete) {
            $.delete = delete;
            return this;
        }

        /**
         * @param delete The function to delete the blob
         * 
         * @return builder
         * 
         */
        public Builder delete(DateAfterModificationArgs delete) {
            return delete(Output.of(delete));
        }

        /**
         * @param enableAutoTierToHotFromCool This property enables auto tiering of a blob from cool to hot on a blob access. This property requires tierToCool.daysAfterLastAccessTimeGreaterThan.
         * 
         * @return builder
         * 
         */
        public Builder enableAutoTierToHotFromCool(@Nullable Output<Boolean> enableAutoTierToHotFromCool) {
            $.enableAutoTierToHotFromCool = enableAutoTierToHotFromCool;
            return this;
        }

        /**
         * @param enableAutoTierToHotFromCool This property enables auto tiering of a blob from cool to hot on a blob access. This property requires tierToCool.daysAfterLastAccessTimeGreaterThan.
         * 
         * @return builder
         * 
         */
        public Builder enableAutoTierToHotFromCool(Boolean enableAutoTierToHotFromCool) {
            return enableAutoTierToHotFromCool(Output.of(enableAutoTierToHotFromCool));
        }

        /**
         * @param tierToArchive The function to tier blobs to archive storage. Support blobs currently at Hot or Cool tier
         * 
         * @return builder
         * 
         */
        public Builder tierToArchive(@Nullable Output<DateAfterModificationArgs> tierToArchive) {
            $.tierToArchive = tierToArchive;
            return this;
        }

        /**
         * @param tierToArchive The function to tier blobs to archive storage. Support blobs currently at Hot or Cool tier
         * 
         * @return builder
         * 
         */
        public Builder tierToArchive(DateAfterModificationArgs tierToArchive) {
            return tierToArchive(Output.of(tierToArchive));
        }

        /**
         * @param tierToCool The function to tier blobs to cool storage. Support blobs currently at Hot tier
         * 
         * @return builder
         * 
         */
        public Builder tierToCool(@Nullable Output<DateAfterModificationArgs> tierToCool) {
            $.tierToCool = tierToCool;
            return this;
        }

        /**
         * @param tierToCool The function to tier blobs to cool storage. Support blobs currently at Hot tier
         * 
         * @return builder
         * 
         */
        public Builder tierToCool(DateAfterModificationArgs tierToCool) {
            return tierToCool(Output.of(tierToCool));
        }

        public ManagementPolicyBaseBlobArgs build() {
            return $;
        }
    }

}
