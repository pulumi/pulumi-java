// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.web.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Template Options for the static site.
 * 
 */
public final class StaticSiteTemplateOptionsResponse extends com.pulumi.resources.InvokeArgs {

    public static final StaticSiteTemplateOptionsResponse Empty = new StaticSiteTemplateOptionsResponse();

    /**
     * Description of the newly generated repository.
     * 
     */
    @Import(name="description")
      private final @Nullable String description;

    public Optional<String> description() {
        return this.description == null ? Optional.empty() : Optional.ofNullable(this.description);
    }

    /**
     * Whether or not the newly generated repository is a private repository. Defaults to false (i.e. public).
     * 
     */
    @Import(name="isPrivate")
      private final @Nullable Boolean isPrivate;

    public Optional<Boolean> isPrivate() {
        return this.isPrivate == null ? Optional.empty() : Optional.ofNullable(this.isPrivate);
    }

    /**
     * Owner of the newly generated repository.
     * 
     */
    @Import(name="owner")
      private final @Nullable String owner;

    public Optional<String> owner() {
        return this.owner == null ? Optional.empty() : Optional.ofNullable(this.owner);
    }

    /**
     * Name of the newly generated repository.
     * 
     */
    @Import(name="repositoryName")
      private final @Nullable String repositoryName;

    public Optional<String> repositoryName() {
        return this.repositoryName == null ? Optional.empty() : Optional.ofNullable(this.repositoryName);
    }

    /**
     * URL of the template repository. The newly generated repository will be based on this one.
     * 
     */
    @Import(name="templateRepositoryUrl")
      private final @Nullable String templateRepositoryUrl;

    public Optional<String> templateRepositoryUrl() {
        return this.templateRepositoryUrl == null ? Optional.empty() : Optional.ofNullable(this.templateRepositoryUrl);
    }

    public StaticSiteTemplateOptionsResponse(
        @Nullable String description,
        @Nullable Boolean isPrivate,
        @Nullable String owner,
        @Nullable String repositoryName,
        @Nullable String templateRepositoryUrl) {
        this.description = description;
        this.isPrivate = isPrivate;
        this.owner = owner;
        this.repositoryName = repositoryName;
        this.templateRepositoryUrl = templateRepositoryUrl;
    }

    private StaticSiteTemplateOptionsResponse() {
        this.description = null;
        this.isPrivate = null;
        this.owner = null;
        this.repositoryName = null;
        this.templateRepositoryUrl = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(StaticSiteTemplateOptionsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String description;
        private @Nullable Boolean isPrivate;
        private @Nullable String owner;
        private @Nullable String repositoryName;
        private @Nullable String templateRepositoryUrl;

        public Builder() {
    	      // Empty
        }

        public Builder(StaticSiteTemplateOptionsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.isPrivate = defaults.isPrivate;
    	      this.owner = defaults.owner;
    	      this.repositoryName = defaults.repositoryName;
    	      this.templateRepositoryUrl = defaults.templateRepositoryUrl;
        }

        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        public Builder isPrivate(@Nullable Boolean isPrivate) {
            this.isPrivate = isPrivate;
            return this;
        }
        public Builder owner(@Nullable String owner) {
            this.owner = owner;
            return this;
        }
        public Builder repositoryName(@Nullable String repositoryName) {
            this.repositoryName = repositoryName;
            return this;
        }
        public Builder templateRepositoryUrl(@Nullable String templateRepositoryUrl) {
            this.templateRepositoryUrl = templateRepositoryUrl;
            return this;
        }        public StaticSiteTemplateOptionsResponse build() {
            return new StaticSiteTemplateOptionsResponse(description, isPrivate, owner, repositoryName, templateRepositoryUrl);
        }
    }
}
