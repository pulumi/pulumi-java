// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.web.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Template Options for the static site.
 * 
 */
public final class StaticSiteTemplateOptionsResponse extends com.pulumi.resources.InvokeArgs {

    public static final StaticSiteTemplateOptionsResponse Empty = new StaticSiteTemplateOptionsResponse();

    /**
     * Description of the newly generated repository.
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    /**
     * @return Description of the newly generated repository.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Whether or not the newly generated repository is a private repository. Defaults to false (i.e. public).
     * 
     */
    @Import(name="isPrivate")
    private @Nullable Boolean isPrivate;

    /**
     * @return Whether or not the newly generated repository is a private repository. Defaults to false (i.e. public).
     * 
     */
    public Optional<Boolean> isPrivate() {
        return Optional.ofNullable(this.isPrivate);
    }

    /**
     * Owner of the newly generated repository.
     * 
     */
    @Import(name="owner")
    private @Nullable String owner;

    /**
     * @return Owner of the newly generated repository.
     * 
     */
    public Optional<String> owner() {
        return Optional.ofNullable(this.owner);
    }

    /**
     * Name of the newly generated repository.
     * 
     */
    @Import(name="repositoryName")
    private @Nullable String repositoryName;

    /**
     * @return Name of the newly generated repository.
     * 
     */
    public Optional<String> repositoryName() {
        return Optional.ofNullable(this.repositoryName);
    }

    /**
     * URL of the template repository. The newly generated repository will be based on this one.
     * 
     */
    @Import(name="templateRepositoryUrl")
    private @Nullable String templateRepositoryUrl;

    /**
     * @return URL of the template repository. The newly generated repository will be based on this one.
     * 
     */
    public Optional<String> templateRepositoryUrl() {
        return Optional.ofNullable(this.templateRepositoryUrl);
    }

    private StaticSiteTemplateOptionsResponse() {}

    private StaticSiteTemplateOptionsResponse(StaticSiteTemplateOptionsResponse $) {
        this.description = $.description;
        this.isPrivate = $.isPrivate;
        this.owner = $.owner;
        this.repositoryName = $.repositoryName;
        this.templateRepositoryUrl = $.templateRepositoryUrl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StaticSiteTemplateOptionsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StaticSiteTemplateOptionsResponse $;

        public Builder() {
            $ = new StaticSiteTemplateOptionsResponse();
        }

        public Builder(StaticSiteTemplateOptionsResponse defaults) {
            $ = new StaticSiteTemplateOptionsResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Description of the newly generated repository.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        /**
         * @param isPrivate Whether or not the newly generated repository is a private repository. Defaults to false (i.e. public).
         * 
         * @return builder
         * 
         */
        public Builder isPrivate(@Nullable Boolean isPrivate) {
            $.isPrivate = isPrivate;
            return this;
        }

        /**
         * @param owner Owner of the newly generated repository.
         * 
         * @return builder
         * 
         */
        public Builder owner(@Nullable String owner) {
            $.owner = owner;
            return this;
        }

        /**
         * @param repositoryName Name of the newly generated repository.
         * 
         * @return builder
         * 
         */
        public Builder repositoryName(@Nullable String repositoryName) {
            $.repositoryName = repositoryName;
            return this;
        }

        /**
         * @param templateRepositoryUrl URL of the template repository. The newly generated repository will be based on this one.
         * 
         * @return builder
         * 
         */
        public Builder templateRepositoryUrl(@Nullable String templateRepositoryUrl) {
            $.templateRepositoryUrl = templateRepositoryUrl;
            return this;
        }

        public StaticSiteTemplateOptionsResponse build() {
            return $;
        }
    }

}
