// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.storage;

import com.pulumi.azurenative.storage.inputs.PermissionScopeArgs;
import com.pulumi.azurenative.storage.inputs.SshPublicKeyArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LocalUserArgs extends com.pulumi.resources.ResourceArgs {

    public static final LocalUserArgs Empty = new LocalUserArgs();

    /**
     * The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
     * 
     */
    @Import(name="accountName", required=true)
    private Output<String> accountName;

    /**
     * @return The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
     * 
     */
    public Output<String> accountName() {
        return this.accountName;
    }

    /**
     * Indicates whether shared key exists. Set it to false to remove existing shared key.
     * 
     */
    @Import(name="hasSharedKey")
    private @Nullable Output<Boolean> hasSharedKey;

    /**
     * @return Indicates whether shared key exists. Set it to false to remove existing shared key.
     * 
     */
    public Optional<Output<Boolean>> hasSharedKey() {
        return Optional.ofNullable(this.hasSharedKey);
    }

    /**
     * Indicates whether ssh key exists. Set it to false to remove existing SSH key.
     * 
     */
    @Import(name="hasSshKey")
    private @Nullable Output<Boolean> hasSshKey;

    /**
     * @return Indicates whether ssh key exists. Set it to false to remove existing SSH key.
     * 
     */
    public Optional<Output<Boolean>> hasSshKey() {
        return Optional.ofNullable(this.hasSshKey);
    }

    /**
     * Indicates whether ssh password exists. Set it to false to remove existing SSH password.
     * 
     */
    @Import(name="hasSshPassword")
    private @Nullable Output<Boolean> hasSshPassword;

    /**
     * @return Indicates whether ssh password exists. Set it to false to remove existing SSH password.
     * 
     */
    public Optional<Output<Boolean>> hasSshPassword() {
        return Optional.ofNullable(this.hasSshPassword);
    }

    /**
     * Optional, local user home directory.
     * 
     */
    @Import(name="homeDirectory")
    private @Nullable Output<String> homeDirectory;

    /**
     * @return Optional, local user home directory.
     * 
     */
    public Optional<Output<String>> homeDirectory() {
        return Optional.ofNullable(this.homeDirectory);
    }

    /**
     * The permission scopes of the local user.
     * 
     */
    @Import(name="permissionScopes")
    private @Nullable Output<List<PermissionScopeArgs>> permissionScopes;

    /**
     * @return The permission scopes of the local user.
     * 
     */
    public Optional<Output<List<PermissionScopeArgs>>> permissionScopes() {
        return Optional.ofNullable(this.permissionScopes);
    }

    /**
     * The name of the resource group within the user&#39;s subscription. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group within the user&#39;s subscription. The name is case insensitive.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Optional, local user ssh authorized keys for SFTP.
     * 
     */
    @Import(name="sshAuthorizedKeys")
    private @Nullable Output<List<SshPublicKeyArgs>> sshAuthorizedKeys;

    /**
     * @return Optional, local user ssh authorized keys for SFTP.
     * 
     */
    public Optional<Output<List<SshPublicKeyArgs>>> sshAuthorizedKeys() {
        return Optional.ofNullable(this.sshAuthorizedKeys);
    }

    /**
     * The name of local user. The username must contain lowercase letters and numbers only. It must be unique only within the storage account.
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return The name of local user. The username must contain lowercase letters and numbers only. It must be unique only within the storage account.
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    private LocalUserArgs() {}

    private LocalUserArgs(LocalUserArgs $) {
        this.accountName = $.accountName;
        this.hasSharedKey = $.hasSharedKey;
        this.hasSshKey = $.hasSshKey;
        this.hasSshPassword = $.hasSshPassword;
        this.homeDirectory = $.homeDirectory;
        this.permissionScopes = $.permissionScopes;
        this.resourceGroupName = $.resourceGroupName;
        this.sshAuthorizedKeys = $.sshAuthorizedKeys;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LocalUserArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LocalUserArgs $;

        public Builder() {
            $ = new LocalUserArgs();
        }

        public Builder(LocalUserArgs defaults) {
            $ = new LocalUserArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
         * 
         * @return builder
         * 
         */
        public Builder accountName(Output<String> accountName) {
            $.accountName = accountName;
            return this;
        }

        /**
         * @param accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
         * 
         * @return builder
         * 
         */
        public Builder accountName(String accountName) {
            return accountName(Output.of(accountName));
        }

        /**
         * @param hasSharedKey Indicates whether shared key exists. Set it to false to remove existing shared key.
         * 
         * @return builder
         * 
         */
        public Builder hasSharedKey(@Nullable Output<Boolean> hasSharedKey) {
            $.hasSharedKey = hasSharedKey;
            return this;
        }

        /**
         * @param hasSharedKey Indicates whether shared key exists. Set it to false to remove existing shared key.
         * 
         * @return builder
         * 
         */
        public Builder hasSharedKey(Boolean hasSharedKey) {
            return hasSharedKey(Output.of(hasSharedKey));
        }

        /**
         * @param hasSshKey Indicates whether ssh key exists. Set it to false to remove existing SSH key.
         * 
         * @return builder
         * 
         */
        public Builder hasSshKey(@Nullable Output<Boolean> hasSshKey) {
            $.hasSshKey = hasSshKey;
            return this;
        }

        /**
         * @param hasSshKey Indicates whether ssh key exists. Set it to false to remove existing SSH key.
         * 
         * @return builder
         * 
         */
        public Builder hasSshKey(Boolean hasSshKey) {
            return hasSshKey(Output.of(hasSshKey));
        }

        /**
         * @param hasSshPassword Indicates whether ssh password exists. Set it to false to remove existing SSH password.
         * 
         * @return builder
         * 
         */
        public Builder hasSshPassword(@Nullable Output<Boolean> hasSshPassword) {
            $.hasSshPassword = hasSshPassword;
            return this;
        }

        /**
         * @param hasSshPassword Indicates whether ssh password exists. Set it to false to remove existing SSH password.
         * 
         * @return builder
         * 
         */
        public Builder hasSshPassword(Boolean hasSshPassword) {
            return hasSshPassword(Output.of(hasSshPassword));
        }

        /**
         * @param homeDirectory Optional, local user home directory.
         * 
         * @return builder
         * 
         */
        public Builder homeDirectory(@Nullable Output<String> homeDirectory) {
            $.homeDirectory = homeDirectory;
            return this;
        }

        /**
         * @param homeDirectory Optional, local user home directory.
         * 
         * @return builder
         * 
         */
        public Builder homeDirectory(String homeDirectory) {
            return homeDirectory(Output.of(homeDirectory));
        }

        /**
         * @param permissionScopes The permission scopes of the local user.
         * 
         * @return builder
         * 
         */
        public Builder permissionScopes(@Nullable Output<List<PermissionScopeArgs>> permissionScopes) {
            $.permissionScopes = permissionScopes;
            return this;
        }

        /**
         * @param permissionScopes The permission scopes of the local user.
         * 
         * @return builder
         * 
         */
        public Builder permissionScopes(List<PermissionScopeArgs> permissionScopes) {
            return permissionScopes(Output.of(permissionScopes));
        }

        /**
         * @param permissionScopes The permission scopes of the local user.
         * 
         * @return builder
         * 
         */
        public Builder permissionScopes(PermissionScopeArgs... permissionScopes) {
            return permissionScopes(List.of(permissionScopes));
        }

        /**
         * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param sshAuthorizedKeys Optional, local user ssh authorized keys for SFTP.
         * 
         * @return builder
         * 
         */
        public Builder sshAuthorizedKeys(@Nullable Output<List<SshPublicKeyArgs>> sshAuthorizedKeys) {
            $.sshAuthorizedKeys = sshAuthorizedKeys;
            return this;
        }

        /**
         * @param sshAuthorizedKeys Optional, local user ssh authorized keys for SFTP.
         * 
         * @return builder
         * 
         */
        public Builder sshAuthorizedKeys(List<SshPublicKeyArgs> sshAuthorizedKeys) {
            return sshAuthorizedKeys(Output.of(sshAuthorizedKeys));
        }

        /**
         * @param sshAuthorizedKeys Optional, local user ssh authorized keys for SFTP.
         * 
         * @return builder
         * 
         */
        public Builder sshAuthorizedKeys(SshPublicKeyArgs... sshAuthorizedKeys) {
            return sshAuthorizedKeys(List.of(sshAuthorizedKeys));
        }

        /**
         * @param username The name of local user. The username must contain lowercase letters and numbers only. It must be unique only within the storage account.
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username The name of local user. The username must contain lowercase letters and numbers only. It must be unique only within the storage account.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public LocalUserArgs build() {
            $.accountName = Objects.requireNonNull($.accountName, "expected parameter 'accountName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
