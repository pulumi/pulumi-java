// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.storage;

import com.pulumi.azurenative.storage.inputs.PermissionScopeArgs;
import com.pulumi.azurenative.storage.inputs.SshPublicKeyArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class LocalUserArgs extends com.pulumi.resources.ResourceArgs {

    public static final LocalUserArgs Empty = new LocalUserArgs();

    /**
     * The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
     * 
     */
    @Import(name="accountName", required=true)
      private final Output<String> accountName;

    public Output<String> accountName() {
        return this.accountName;
    }

    /**
     * Indicates whether shared key exists. Set it to false to remove existing shared key.
     * 
     */
    @Import(name="hasSharedKey")
      private final @Nullable Output<Boolean> hasSharedKey;

    public Output<Boolean> hasSharedKey() {
        return this.hasSharedKey == null ? Codegen.empty() : this.hasSharedKey;
    }

    /**
     * Indicates whether ssh key exists. Set it to false to remove existing SSH key.
     * 
     */
    @Import(name="hasSshKey")
      private final @Nullable Output<Boolean> hasSshKey;

    public Output<Boolean> hasSshKey() {
        return this.hasSshKey == null ? Codegen.empty() : this.hasSshKey;
    }

    /**
     * Indicates whether ssh password exists. Set it to false to remove existing SSH password.
     * 
     */
    @Import(name="hasSshPassword")
      private final @Nullable Output<Boolean> hasSshPassword;

    public Output<Boolean> hasSshPassword() {
        return this.hasSshPassword == null ? Codegen.empty() : this.hasSshPassword;
    }

    /**
     * Optional, local user home directory.
     * 
     */
    @Import(name="homeDirectory")
      private final @Nullable Output<String> homeDirectory;

    public Output<String> homeDirectory() {
        return this.homeDirectory == null ? Codegen.empty() : this.homeDirectory;
    }

    /**
     * The permission scopes of the local user.
     * 
     */
    @Import(name="permissionScopes")
      private final @Nullable Output<List<PermissionScopeArgs>> permissionScopes;

    public Output<List<PermissionScopeArgs>> permissionScopes() {
        return this.permissionScopes == null ? Codegen.empty() : this.permissionScopes;
    }

    /**
     * The name of the resource group within the user's subscription. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Optional, local user ssh authorized keys for SFTP.
     * 
     */
    @Import(name="sshAuthorizedKeys")
      private final @Nullable Output<List<SshPublicKeyArgs>> sshAuthorizedKeys;

    public Output<List<SshPublicKeyArgs>> sshAuthorizedKeys() {
        return this.sshAuthorizedKeys == null ? Codegen.empty() : this.sshAuthorizedKeys;
    }

    /**
     * The name of local user. The username must contain lowercase letters and numbers only. It must be unique only within the storage account.
     * 
     */
    @Import(name="username")
      private final @Nullable Output<String> username;

    public Output<String> username() {
        return this.username == null ? Codegen.empty() : this.username;
    }

    public LocalUserArgs(
        Output<String> accountName,
        @Nullable Output<Boolean> hasSharedKey,
        @Nullable Output<Boolean> hasSshKey,
        @Nullable Output<Boolean> hasSshPassword,
        @Nullable Output<String> homeDirectory,
        @Nullable Output<List<PermissionScopeArgs>> permissionScopes,
        Output<String> resourceGroupName,
        @Nullable Output<List<SshPublicKeyArgs>> sshAuthorizedKeys,
        @Nullable Output<String> username) {
        this.accountName = Objects.requireNonNull(accountName, "expected parameter 'accountName' to be non-null");
        this.hasSharedKey = hasSharedKey;
        this.hasSshKey = hasSshKey;
        this.hasSshPassword = hasSshPassword;
        this.homeDirectory = homeDirectory;
        this.permissionScopes = permissionScopes;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.sshAuthorizedKeys = sshAuthorizedKeys;
        this.username = username;
    }

    private LocalUserArgs() {
        this.accountName = Codegen.empty();
        this.hasSharedKey = Codegen.empty();
        this.hasSshKey = Codegen.empty();
        this.hasSshPassword = Codegen.empty();
        this.homeDirectory = Codegen.empty();
        this.permissionScopes = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.sshAuthorizedKeys = Codegen.empty();
        this.username = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LocalUserArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> accountName;
        private @Nullable Output<Boolean> hasSharedKey;
        private @Nullable Output<Boolean> hasSshKey;
        private @Nullable Output<Boolean> hasSshPassword;
        private @Nullable Output<String> homeDirectory;
        private @Nullable Output<List<PermissionScopeArgs>> permissionScopes;
        private Output<String> resourceGroupName;
        private @Nullable Output<List<SshPublicKeyArgs>> sshAuthorizedKeys;
        private @Nullable Output<String> username;

        public Builder() {
    	      // Empty
        }

        public Builder(LocalUserArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountName = defaults.accountName;
    	      this.hasSharedKey = defaults.hasSharedKey;
    	      this.hasSshKey = defaults.hasSshKey;
    	      this.hasSshPassword = defaults.hasSshPassword;
    	      this.homeDirectory = defaults.homeDirectory;
    	      this.permissionScopes = defaults.permissionScopes;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.sshAuthorizedKeys = defaults.sshAuthorizedKeys;
    	      this.username = defaults.username;
        }

        public Builder accountName(Output<String> accountName) {
            this.accountName = Objects.requireNonNull(accountName);
            return this;
        }
        public Builder accountName(String accountName) {
            this.accountName = Output.of(Objects.requireNonNull(accountName));
            return this;
        }
        public Builder hasSharedKey(@Nullable Output<Boolean> hasSharedKey) {
            this.hasSharedKey = hasSharedKey;
            return this;
        }
        public Builder hasSharedKey(@Nullable Boolean hasSharedKey) {
            this.hasSharedKey = Codegen.ofNullable(hasSharedKey);
            return this;
        }
        public Builder hasSshKey(@Nullable Output<Boolean> hasSshKey) {
            this.hasSshKey = hasSshKey;
            return this;
        }
        public Builder hasSshKey(@Nullable Boolean hasSshKey) {
            this.hasSshKey = Codegen.ofNullable(hasSshKey);
            return this;
        }
        public Builder hasSshPassword(@Nullable Output<Boolean> hasSshPassword) {
            this.hasSshPassword = hasSshPassword;
            return this;
        }
        public Builder hasSshPassword(@Nullable Boolean hasSshPassword) {
            this.hasSshPassword = Codegen.ofNullable(hasSshPassword);
            return this;
        }
        public Builder homeDirectory(@Nullable Output<String> homeDirectory) {
            this.homeDirectory = homeDirectory;
            return this;
        }
        public Builder homeDirectory(@Nullable String homeDirectory) {
            this.homeDirectory = Codegen.ofNullable(homeDirectory);
            return this;
        }
        public Builder permissionScopes(@Nullable Output<List<PermissionScopeArgs>> permissionScopes) {
            this.permissionScopes = permissionScopes;
            return this;
        }
        public Builder permissionScopes(@Nullable List<PermissionScopeArgs> permissionScopes) {
            this.permissionScopes = Codegen.ofNullable(permissionScopes);
            return this;
        }
        public Builder permissionScopes(PermissionScopeArgs... permissionScopes) {
            return permissionScopes(List.of(permissionScopes));
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder sshAuthorizedKeys(@Nullable Output<List<SshPublicKeyArgs>> sshAuthorizedKeys) {
            this.sshAuthorizedKeys = sshAuthorizedKeys;
            return this;
        }
        public Builder sshAuthorizedKeys(@Nullable List<SshPublicKeyArgs> sshAuthorizedKeys) {
            this.sshAuthorizedKeys = Codegen.ofNullable(sshAuthorizedKeys);
            return this;
        }
        public Builder sshAuthorizedKeys(SshPublicKeyArgs... sshAuthorizedKeys) {
            return sshAuthorizedKeys(List.of(sshAuthorizedKeys));
        }
        public Builder username(@Nullable Output<String> username) {
            this.username = username;
            return this;
        }
        public Builder username(@Nullable String username) {
            this.username = Codegen.ofNullable(username);
            return this;
        }        public LocalUserArgs build() {
            return new LocalUserArgs(accountName, hasSharedKey, hasSshKey, hasSshPassword, homeDirectory, permissionScopes, resourceGroupName, sshAuthorizedKeys, username);
        }
    }
}
