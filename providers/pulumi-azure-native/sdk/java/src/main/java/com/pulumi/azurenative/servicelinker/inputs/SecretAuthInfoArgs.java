// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.servicelinker.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The authentication info when authType is secret
 * 
 */
public final class SecretAuthInfoArgs extends com.pulumi.resources.ResourceArgs {

    public static final SecretAuthInfoArgs Empty = new SecretAuthInfoArgs();

    /**
     * The authentication type.
     * Expected value is &#39;secret&#39;.
     * 
     */
    @Import(name="authType", required=true)
    private Output<String> authType;

    /**
     * @return The authentication type.
     * Expected value is &#39;secret&#39;.
     * 
     */
    public Output<String> authType() {
        return this.authType;
    }

    /**
     * Username or account name for secret auth.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Username or account name for secret auth.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Password or account key for secret auth.
     * 
     */
    @Import(name="secret")
    private @Nullable Output<String> secret;

    /**
     * @return Password or account key for secret auth.
     * 
     */
    public Optional<Output<String>> secret() {
        return Optional.ofNullable(this.secret);
    }

    private SecretAuthInfoArgs() {}

    private SecretAuthInfoArgs(SecretAuthInfoArgs $) {
        this.authType = $.authType;
        this.name = $.name;
        this.secret = $.secret;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecretAuthInfoArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecretAuthInfoArgs $;

        public Builder() {
            $ = new SecretAuthInfoArgs();
        }

        public Builder(SecretAuthInfoArgs defaults) {
            $ = new SecretAuthInfoArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authType The authentication type.
         * Expected value is &#39;secret&#39;.
         * 
         * @return builder
         * 
         */
        public Builder authType(Output<String> authType) {
            $.authType = authType;
            return this;
        }

        /**
         * @param authType The authentication type.
         * Expected value is &#39;secret&#39;.
         * 
         * @return builder
         * 
         */
        public Builder authType(String authType) {
            return authType(Output.of(authType));
        }

        /**
         * @param name Username or account name for secret auth.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Username or account name for secret auth.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param secret Password or account key for secret auth.
         * 
         * @return builder
         * 
         */
        public Builder secret(@Nullable Output<String> secret) {
            $.secret = secret;
            return this;
        }

        /**
         * @param secret Password or account key for secret auth.
         * 
         * @return builder
         * 
         */
        public Builder secret(String secret) {
            return secret(Output.of(secret));
        }

        public SecretAuthInfoArgs build() {
            $.authType = Codegen.stringProp("authType").output().arg($.authType).require();
            return $;
        }
    }

}
