// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.deploymentmanager.inputs;

import com.pulumi.azurenative.deploymentmanager.inputs.ServiceUnitResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Defines a service.
 * 
 */
public final class ServiceResponse extends com.pulumi.resources.InvokeArgs {

    public static final ServiceResponse Empty = new ServiceResponse();

    /**
     * Name of the service.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return Name of the service.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The detailed information about the units that make up the service.
     * 
     */
    @Import(name="serviceUnits")
    private @Nullable List<ServiceUnitResponse> serviceUnits;

    /**
     * @return The detailed information about the units that make up the service.
     * 
     */
    public Optional<List<ServiceUnitResponse>> serviceUnits() {
        return Optional.ofNullable(this.serviceUnits);
    }

    /**
     * The Azure location to which the resources in the service belong to or should be deployed to.
     * 
     */
    @Import(name="targetLocation", required=true)
    private String targetLocation;

    /**
     * @return The Azure location to which the resources in the service belong to or should be deployed to.
     * 
     */
    public String targetLocation() {
        return this.targetLocation;
    }

    /**
     * The subscription to which the resources in the service belong to or should be deployed to.
     * 
     */
    @Import(name="targetSubscriptionId", required=true)
    private String targetSubscriptionId;

    /**
     * @return The subscription to which the resources in the service belong to or should be deployed to.
     * 
     */
    public String targetSubscriptionId() {
        return this.targetSubscriptionId;
    }

    private ServiceResponse() {}

    private ServiceResponse(ServiceResponse $) {
        this.name = $.name;
        this.serviceUnits = $.serviceUnits;
        this.targetLocation = $.targetLocation;
        this.targetSubscriptionId = $.targetSubscriptionId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceResponse $;

        public Builder() {
            $ = new ServiceResponse();
        }

        public Builder(ServiceResponse defaults) {
            $ = new ServiceResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param name Name of the service.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param serviceUnits The detailed information about the units that make up the service.
         * 
         * @return builder
         * 
         */
        public Builder serviceUnits(@Nullable List<ServiceUnitResponse> serviceUnits) {
            $.serviceUnits = serviceUnits;
            return this;
        }

        /**
         * @param serviceUnits The detailed information about the units that make up the service.
         * 
         * @return builder
         * 
         */
        public Builder serviceUnits(ServiceUnitResponse... serviceUnits) {
            return serviceUnits(List.of(serviceUnits));
        }

        /**
         * @param targetLocation The Azure location to which the resources in the service belong to or should be deployed to.
         * 
         * @return builder
         * 
         */
        public Builder targetLocation(String targetLocation) {
            $.targetLocation = targetLocation;
            return this;
        }

        /**
         * @param targetSubscriptionId The subscription to which the resources in the service belong to or should be deployed to.
         * 
         * @return builder
         * 
         */
        public Builder targetSubscriptionId(String targetSubscriptionId) {
            $.targetSubscriptionId = targetSubscriptionId;
            return this;
        }

        public ServiceResponse build() {
            $.targetLocation = Objects.requireNonNull($.targetLocation, "expected parameter 'targetLocation' to be non-null");
            $.targetSubscriptionId = Objects.requireNonNull($.targetSubscriptionId, "expected parameter 'targetSubscriptionId' to be non-null");
            return $;
        }
    }

}
