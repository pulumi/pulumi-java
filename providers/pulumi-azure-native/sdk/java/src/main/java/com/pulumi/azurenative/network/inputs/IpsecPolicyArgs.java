// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.azurenative.network.enums.DhGroup;
import com.pulumi.azurenative.network.enums.IkeEncryption;
import com.pulumi.azurenative.network.enums.IkeIntegrity;
import com.pulumi.azurenative.network.enums.IpsecEncryption;
import com.pulumi.azurenative.network.enums.IpsecIntegrity;
import com.pulumi.azurenative.network.enums.PfsGroup;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


/**
 * An IPSec Policy configuration for a virtual network gateway connection.
 * 
 */
public final class IpsecPolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final IpsecPolicyArgs Empty = new IpsecPolicyArgs();

    /**
     * The DH Group used in IKE Phase 1 for initial SA.
     * 
     */
    @Import(name="dhGroup", required=true)
    private Output<Either<String,DhGroup>> dhGroup;

    public Output<Either<String,DhGroup>> dhGroup() {
        return this.dhGroup;
    }

    /**
     * The IKE encryption algorithm (IKE phase 2).
     * 
     */
    @Import(name="ikeEncryption", required=true)
    private Output<Either<String,IkeEncryption>> ikeEncryption;

    public Output<Either<String,IkeEncryption>> ikeEncryption() {
        return this.ikeEncryption;
    }

    /**
     * The IKE integrity algorithm (IKE phase 2).
     * 
     */
    @Import(name="ikeIntegrity", required=true)
    private Output<Either<String,IkeIntegrity>> ikeIntegrity;

    public Output<Either<String,IkeIntegrity>> ikeIntegrity() {
        return this.ikeIntegrity;
    }

    /**
     * The IPSec encryption algorithm (IKE phase 1).
     * 
     */
    @Import(name="ipsecEncryption", required=true)
    private Output<Either<String,IpsecEncryption>> ipsecEncryption;

    public Output<Either<String,IpsecEncryption>> ipsecEncryption() {
        return this.ipsecEncryption;
    }

    /**
     * The IPSec integrity algorithm (IKE phase 1).
     * 
     */
    @Import(name="ipsecIntegrity", required=true)
    private Output<Either<String,IpsecIntegrity>> ipsecIntegrity;

    public Output<Either<String,IpsecIntegrity>> ipsecIntegrity() {
        return this.ipsecIntegrity;
    }

    /**
     * The Pfs Group used in IKE Phase 2 for new child SA.
     * 
     */
    @Import(name="pfsGroup", required=true)
    private Output<Either<String,PfsGroup>> pfsGroup;

    public Output<Either<String,PfsGroup>> pfsGroup() {
        return this.pfsGroup;
    }

    /**
     * The IPSec Security Association (also called Quick Mode or Phase 2 SA) payload size in KB for a site to site VPN tunnel.
     * 
     */
    @Import(name="saDataSizeKilobytes", required=true)
    private Output<Integer> saDataSizeKilobytes;

    public Output<Integer> saDataSizeKilobytes() {
        return this.saDataSizeKilobytes;
    }

    /**
     * The IPSec Security Association (also called Quick Mode or Phase 2 SA) lifetime in seconds for a site to site VPN tunnel.
     * 
     */
    @Import(name="saLifeTimeSeconds", required=true)
    private Output<Integer> saLifeTimeSeconds;

    public Output<Integer> saLifeTimeSeconds() {
        return this.saLifeTimeSeconds;
    }

    private IpsecPolicyArgs() {}

    private IpsecPolicyArgs(IpsecPolicyArgs $) {
        this.dhGroup = $.dhGroup;
        this.ikeEncryption = $.ikeEncryption;
        this.ikeIntegrity = $.ikeIntegrity;
        this.ipsecEncryption = $.ipsecEncryption;
        this.ipsecIntegrity = $.ipsecIntegrity;
        this.pfsGroup = $.pfsGroup;
        this.saDataSizeKilobytes = $.saDataSizeKilobytes;
        this.saLifeTimeSeconds = $.saLifeTimeSeconds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IpsecPolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IpsecPolicyArgs $;

        public Builder() {
            $ = new IpsecPolicyArgs();
        }

        public Builder(IpsecPolicyArgs defaults) {
            $ = new IpsecPolicyArgs(Objects.requireNonNull(defaults));
        }

        public Builder dhGroup(Output<Either<String,DhGroup>> dhGroup) {
            $.dhGroup = dhGroup;
            return this;
        }

        public Builder dhGroup(Either<String,DhGroup> dhGroup) {
            return dhGroup(Output.of(dhGroup));
        }

        public Builder ikeEncryption(Output<Either<String,IkeEncryption>> ikeEncryption) {
            $.ikeEncryption = ikeEncryption;
            return this;
        }

        public Builder ikeEncryption(Either<String,IkeEncryption> ikeEncryption) {
            return ikeEncryption(Output.of(ikeEncryption));
        }

        public Builder ikeIntegrity(Output<Either<String,IkeIntegrity>> ikeIntegrity) {
            $.ikeIntegrity = ikeIntegrity;
            return this;
        }

        public Builder ikeIntegrity(Either<String,IkeIntegrity> ikeIntegrity) {
            return ikeIntegrity(Output.of(ikeIntegrity));
        }

        public Builder ipsecEncryption(Output<Either<String,IpsecEncryption>> ipsecEncryption) {
            $.ipsecEncryption = ipsecEncryption;
            return this;
        }

        public Builder ipsecEncryption(Either<String,IpsecEncryption> ipsecEncryption) {
            return ipsecEncryption(Output.of(ipsecEncryption));
        }

        public Builder ipsecIntegrity(Output<Either<String,IpsecIntegrity>> ipsecIntegrity) {
            $.ipsecIntegrity = ipsecIntegrity;
            return this;
        }

        public Builder ipsecIntegrity(Either<String,IpsecIntegrity> ipsecIntegrity) {
            return ipsecIntegrity(Output.of(ipsecIntegrity));
        }

        public Builder pfsGroup(Output<Either<String,PfsGroup>> pfsGroup) {
            $.pfsGroup = pfsGroup;
            return this;
        }

        public Builder pfsGroup(Either<String,PfsGroup> pfsGroup) {
            return pfsGroup(Output.of(pfsGroup));
        }

        public Builder saDataSizeKilobytes(Output<Integer> saDataSizeKilobytes) {
            $.saDataSizeKilobytes = saDataSizeKilobytes;
            return this;
        }

        public Builder saDataSizeKilobytes(Integer saDataSizeKilobytes) {
            return saDataSizeKilobytes(Output.of(saDataSizeKilobytes));
        }

        public Builder saLifeTimeSeconds(Output<Integer> saLifeTimeSeconds) {
            $.saLifeTimeSeconds = saLifeTimeSeconds;
            return this;
        }

        public Builder saLifeTimeSeconds(Integer saLifeTimeSeconds) {
            return saLifeTimeSeconds(Output.of(saLifeTimeSeconds));
        }

        public IpsecPolicyArgs build() {
            $.dhGroup = Objects.requireNonNull($.dhGroup, "expected parameter 'dhGroup' to be non-null");
            $.ikeEncryption = Objects.requireNonNull($.ikeEncryption, "expected parameter 'ikeEncryption' to be non-null");
            $.ikeIntegrity = Objects.requireNonNull($.ikeIntegrity, "expected parameter 'ikeIntegrity' to be non-null");
            $.ipsecEncryption = Objects.requireNonNull($.ipsecEncryption, "expected parameter 'ipsecEncryption' to be non-null");
            $.ipsecIntegrity = Objects.requireNonNull($.ipsecIntegrity, "expected parameter 'ipsecIntegrity' to be non-null");
            $.pfsGroup = Objects.requireNonNull($.pfsGroup, "expected parameter 'pfsGroup' to be non-null");
            $.saDataSizeKilobytes = Objects.requireNonNull($.saDataSizeKilobytes, "expected parameter 'saDataSizeKilobytes' to be non-null");
            $.saLifeTimeSeconds = Objects.requireNonNull($.saLifeTimeSeconds, "expected parameter 'saLifeTimeSeconds' to be non-null");
            return $;
        }
    }

}
