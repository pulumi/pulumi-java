// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.azurenative.datafactory.inputs.ActivityDependencyResponse;
import com.pulumi.azurenative.datafactory.inputs.ActivityPolicyResponse;
import com.pulumi.azurenative.datafactory.inputs.LinkedServiceReferenceResponse;
import com.pulumi.azurenative.datafactory.inputs.UserPropertyResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * DatabricksSparkJar activity.
 * 
 */
public final class DatabricksSparkJarActivityResponse extends com.pulumi.resources.InvokeArgs {

    public static final DatabricksSparkJarActivityResponse Empty = new DatabricksSparkJarActivityResponse();

    /**
     * Activity depends on condition.
     * 
     */
    @Import(name="dependsOn")
    private @Nullable List<ActivityDependencyResponse> dependsOn;

    /**
     * @return Activity depends on condition.
     * 
     */
    public Optional<List<ActivityDependencyResponse>> dependsOn() {
        return Optional.ofNullable(this.dependsOn);
    }

    /**
     * Activity description.
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    /**
     * @return Activity description.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * A list of libraries to be installed on the cluster that will execute the job.
     * 
     */
    @Import(name="libraries")
    private @Nullable List<Map<String,Object>> libraries;

    /**
     * @return A list of libraries to be installed on the cluster that will execute the job.
     * 
     */
    public Optional<List<Map<String,Object>>> libraries() {
        return Optional.ofNullable(this.libraries);
    }

    /**
     * Linked service reference.
     * 
     */
    @Import(name="linkedServiceName")
    private @Nullable LinkedServiceReferenceResponse linkedServiceName;

    /**
     * @return Linked service reference.
     * 
     */
    public Optional<LinkedServiceReferenceResponse> linkedServiceName() {
        return Optional.ofNullable(this.linkedServiceName);
    }

    /**
     * The full name of the class containing the main method to be executed. This class must be contained in a JAR provided as a library. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="mainClassName", required=true)
    private Object mainClassName;

    /**
     * @return The full name of the class containing the main method to be executed. This class must be contained in a JAR provided as a library. Type: string (or Expression with resultType string).
     * 
     */
    public Object mainClassName() {
        return this.mainClassName;
    }

    /**
     * Activity name.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return Activity name.
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * Parameters that will be passed to the main method.
     * 
     */
    @Import(name="parameters")
    private @Nullable List<Object> parameters;

    /**
     * @return Parameters that will be passed to the main method.
     * 
     */
    public Optional<List<Object>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    /**
     * Activity policy.
     * 
     */
    @Import(name="policy")
    private @Nullable ActivityPolicyResponse policy;

    /**
     * @return Activity policy.
     * 
     */
    public Optional<ActivityPolicyResponse> policy() {
        return Optional.ofNullable(this.policy);
    }

    /**
     * Type of activity.
     * Expected value is &#39;DatabricksSparkJar&#39;.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    /**
     * @return Type of activity.
     * Expected value is &#39;DatabricksSparkJar&#39;.
     * 
     */
    public String type() {
        return this.type;
    }

    /**
     * Activity user properties.
     * 
     */
    @Import(name="userProperties")
    private @Nullable List<UserPropertyResponse> userProperties;

    /**
     * @return Activity user properties.
     * 
     */
    public Optional<List<UserPropertyResponse>> userProperties() {
        return Optional.ofNullable(this.userProperties);
    }

    private DatabricksSparkJarActivityResponse() {}

    private DatabricksSparkJarActivityResponse(DatabricksSparkJarActivityResponse $) {
        this.dependsOn = $.dependsOn;
        this.description = $.description;
        this.libraries = $.libraries;
        this.linkedServiceName = $.linkedServiceName;
        this.mainClassName = $.mainClassName;
        this.name = $.name;
        this.parameters = $.parameters;
        this.policy = $.policy;
        this.type = $.type;
        this.userProperties = $.userProperties;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatabricksSparkJarActivityResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatabricksSparkJarActivityResponse $;

        public Builder() {
            $ = new DatabricksSparkJarActivityResponse();
        }

        public Builder(DatabricksSparkJarActivityResponse defaults) {
            $ = new DatabricksSparkJarActivityResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param dependsOn Activity depends on condition.
         * 
         * @return builder
         * 
         */
        public Builder dependsOn(@Nullable List<ActivityDependencyResponse> dependsOn) {
            $.dependsOn = dependsOn;
            return this;
        }

        /**
         * @param dependsOn Activity depends on condition.
         * 
         * @return builder
         * 
         */
        public Builder dependsOn(ActivityDependencyResponse... dependsOn) {
            return dependsOn(List.of(dependsOn));
        }

        /**
         * @param description Activity description.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        /**
         * @param libraries A list of libraries to be installed on the cluster that will execute the job.
         * 
         * @return builder
         * 
         */
        public Builder libraries(@Nullable List<Map<String,Object>> libraries) {
            $.libraries = libraries;
            return this;
        }

        /**
         * @param libraries A list of libraries to be installed on the cluster that will execute the job.
         * 
         * @return builder
         * 
         */
        public Builder libraries(Map<String,Object>... libraries) {
            return libraries(List.of(libraries));
        }

        /**
         * @param linkedServiceName Linked service reference.
         * 
         * @return builder
         * 
         */
        public Builder linkedServiceName(@Nullable LinkedServiceReferenceResponse linkedServiceName) {
            $.linkedServiceName = linkedServiceName;
            return this;
        }

        /**
         * @param mainClassName The full name of the class containing the main method to be executed. This class must be contained in a JAR provided as a library. Type: string (or Expression with resultType string).
         * 
         * @return builder
         * 
         */
        public Builder mainClassName(Object mainClassName) {
            $.mainClassName = mainClassName;
            return this;
        }

        /**
         * @param name Activity name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param parameters Parameters that will be passed to the main method.
         * 
         * @return builder
         * 
         */
        public Builder parameters(@Nullable List<Object> parameters) {
            $.parameters = parameters;
            return this;
        }

        /**
         * @param parameters Parameters that will be passed to the main method.
         * 
         * @return builder
         * 
         */
        public Builder parameters(Object... parameters) {
            return parameters(List.of(parameters));
        }

        /**
         * @param policy Activity policy.
         * 
         * @return builder
         * 
         */
        public Builder policy(@Nullable ActivityPolicyResponse policy) {
            $.policy = policy;
            return this;
        }

        /**
         * @param type Type of activity.
         * Expected value is &#39;DatabricksSparkJar&#39;.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            $.type = type;
            return this;
        }

        /**
         * @param userProperties Activity user properties.
         * 
         * @return builder
         * 
         */
        public Builder userProperties(@Nullable List<UserPropertyResponse> userProperties) {
            $.userProperties = userProperties;
            return this;
        }

        /**
         * @param userProperties Activity user properties.
         * 
         * @return builder
         * 
         */
        public Builder userProperties(UserPropertyResponse... userProperties) {
            return userProperties(List.of(userProperties));
        }

        public DatabricksSparkJarActivityResponse build() {
            $.mainClassName = Objects.requireNonNull($.mainClassName, "expected parameter 'mainClassName' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.type = Codegen.stringProp("type").arg($.type).require();
            return $;
        }
    }

}
