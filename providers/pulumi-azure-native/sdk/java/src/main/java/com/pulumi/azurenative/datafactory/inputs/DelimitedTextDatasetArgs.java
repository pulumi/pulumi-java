// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.azurenative.datafactory.inputs.AmazonS3CompatibleLocationArgs;
import com.pulumi.azurenative.datafactory.inputs.AmazonS3LocationArgs;
import com.pulumi.azurenative.datafactory.inputs.AzureBlobFSLocationArgs;
import com.pulumi.azurenative.datafactory.inputs.AzureBlobStorageLocationArgs;
import com.pulumi.azurenative.datafactory.inputs.AzureDataLakeStoreLocationArgs;
import com.pulumi.azurenative.datafactory.inputs.AzureFileStorageLocationArgs;
import com.pulumi.azurenative.datafactory.inputs.DatasetFolderArgs;
import com.pulumi.azurenative.datafactory.inputs.FileServerLocationArgs;
import com.pulumi.azurenative.datafactory.inputs.FtpServerLocationArgs;
import com.pulumi.azurenative.datafactory.inputs.GoogleCloudStorageLocationArgs;
import com.pulumi.azurenative.datafactory.inputs.HdfsLocationArgs;
import com.pulumi.azurenative.datafactory.inputs.HttpServerLocationArgs;
import com.pulumi.azurenative.datafactory.inputs.LinkedServiceReferenceArgs;
import com.pulumi.azurenative.datafactory.inputs.OracleCloudStorageLocationArgs;
import com.pulumi.azurenative.datafactory.inputs.ParameterSpecificationArgs;
import com.pulumi.azurenative.datafactory.inputs.SftpLocationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Delimited text dataset.
 * 
 */
public final class DelimitedTextDatasetArgs extends com.pulumi.resources.ResourceArgs {

    public static final DelimitedTextDatasetArgs Empty = new DelimitedTextDatasetArgs();

    /**
     * List of tags that can be used for describing the Dataset.
     * 
     */
    @Import(name="annotations")
    private @Nullable Output<List<Object>> annotations;

    public Optional<Output<List<Object>>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    /**
     * The column delimiter. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="columnDelimiter")
    private @Nullable Output<Object> columnDelimiter;

    public Optional<Output<Object>> columnDelimiter() {
        return Optional.ofNullable(this.columnDelimiter);
    }

    /**
     * The data compressionCodec. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="compressionCodec")
    private @Nullable Output<Object> compressionCodec;

    public Optional<Output<Object>> compressionCodec() {
        return Optional.ofNullable(this.compressionCodec);
    }

    /**
     * The data compression method used for DelimitedText.
     * 
     */
    @Import(name="compressionLevel")
    private @Nullable Output<Object> compressionLevel;

    public Optional<Output<Object>> compressionLevel() {
        return Optional.ofNullable(this.compressionLevel);
    }

    /**
     * Dataset description.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The code page name of the preferred encoding. If miss, the default value is UTF-8, unless BOM denotes another Unicode encoding. Refer to the name column of the table in the following link to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="encodingName")
    private @Nullable Output<Object> encodingName;

    public Optional<Output<Object>> encodingName() {
        return Optional.ofNullable(this.encodingName);
    }

    /**
     * The escape character. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="escapeChar")
    private @Nullable Output<Object> escapeChar;

    public Optional<Output<Object>> escapeChar() {
        return Optional.ofNullable(this.escapeChar);
    }

    /**
     * When used as input, treat the first row of data as headers. When used as output,write the headers into the output as the first row of data. The default value is false. Type: boolean (or Expression with resultType boolean).
     * 
     */
    @Import(name="firstRowAsHeader")
    private @Nullable Output<Object> firstRowAsHeader;

    public Optional<Output<Object>> firstRowAsHeader() {
        return Optional.ofNullable(this.firstRowAsHeader);
    }

    /**
     * The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
     * 
     */
    @Import(name="folder")
    private @Nullable Output<DatasetFolderArgs> folder;

    public Optional<Output<DatasetFolderArgs>> folder() {
        return Optional.ofNullable(this.folder);
    }

    /**
     * Linked service reference.
     * 
     */
    @Import(name="linkedServiceName", required=true)
    private Output<LinkedServiceReferenceArgs> linkedServiceName;

    public Output<LinkedServiceReferenceArgs> linkedServiceName() {
        return this.linkedServiceName;
    }

    /**
     * The location of the delimited text storage.
     * 
     */
    @Import(name="location", required=true)
    private Output<Object> location;

    public Output<Object> location() {
        return this.location;
    }

    /**
     * The null value string. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="nullValue")
    private @Nullable Output<Object> nullValue;

    public Optional<Output<Object>> nullValue() {
        return Optional.ofNullable(this.nullValue);
    }

    /**
     * Parameters for dataset.
     * 
     */
    @Import(name="parameters")
    private @Nullable Output<Map<String,ParameterSpecificationArgs>> parameters;

    public Optional<Output<Map<String,ParameterSpecificationArgs>>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    /**
     * The quote character. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="quoteChar")
    private @Nullable Output<Object> quoteChar;

    public Optional<Output<Object>> quoteChar() {
        return Optional.ofNullable(this.quoteChar);
    }

    /**
     * The row delimiter. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="rowDelimiter")
    private @Nullable Output<Object> rowDelimiter;

    public Optional<Output<Object>> rowDelimiter() {
        return Optional.ofNullable(this.rowDelimiter);
    }

    /**
     * Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType: DatasetSchemaDataElement.
     * 
     */
    @Import(name="schema")
    private @Nullable Output<Object> schema;

    public Optional<Output<Object>> schema() {
        return Optional.ofNullable(this.schema);
    }

    /**
     * Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
     * 
     */
    @Import(name="structure")
    private @Nullable Output<Object> structure;

    public Optional<Output<Object>> structure() {
        return Optional.ofNullable(this.structure);
    }

    /**
     * Type of dataset.
     * Expected value is &#39;DelimitedText&#39;.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    private DelimitedTextDatasetArgs() {}

    private DelimitedTextDatasetArgs(DelimitedTextDatasetArgs $) {
        this.annotations = $.annotations;
        this.columnDelimiter = $.columnDelimiter;
        this.compressionCodec = $.compressionCodec;
        this.compressionLevel = $.compressionLevel;
        this.description = $.description;
        this.encodingName = $.encodingName;
        this.escapeChar = $.escapeChar;
        this.firstRowAsHeader = $.firstRowAsHeader;
        this.folder = $.folder;
        this.linkedServiceName = $.linkedServiceName;
        this.location = $.location;
        this.nullValue = $.nullValue;
        this.parameters = $.parameters;
        this.quoteChar = $.quoteChar;
        this.rowDelimiter = $.rowDelimiter;
        this.schema = $.schema;
        this.structure = $.structure;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DelimitedTextDatasetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DelimitedTextDatasetArgs $;

        public Builder() {
            $ = new DelimitedTextDatasetArgs();
        }

        public Builder(DelimitedTextDatasetArgs defaults) {
            $ = new DelimitedTextDatasetArgs(Objects.requireNonNull(defaults));
        }

        public Builder annotations(@Nullable Output<List<Object>> annotations) {
            $.annotations = annotations;
            return this;
        }

        public Builder annotations(List<Object> annotations) {
            return annotations(Output.of(annotations));
        }

        public Builder annotations(Object... annotations) {
            return annotations(List.of(annotations));
        }

        public Builder columnDelimiter(@Nullable Output<Object> columnDelimiter) {
            $.columnDelimiter = columnDelimiter;
            return this;
        }

        public Builder columnDelimiter(Object columnDelimiter) {
            return columnDelimiter(Output.of(columnDelimiter));
        }

        public Builder compressionCodec(@Nullable Output<Object> compressionCodec) {
            $.compressionCodec = compressionCodec;
            return this;
        }

        public Builder compressionCodec(Object compressionCodec) {
            return compressionCodec(Output.of(compressionCodec));
        }

        public Builder compressionLevel(@Nullable Output<Object> compressionLevel) {
            $.compressionLevel = compressionLevel;
            return this;
        }

        public Builder compressionLevel(Object compressionLevel) {
            return compressionLevel(Output.of(compressionLevel));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder encodingName(@Nullable Output<Object> encodingName) {
            $.encodingName = encodingName;
            return this;
        }

        public Builder encodingName(Object encodingName) {
            return encodingName(Output.of(encodingName));
        }

        public Builder escapeChar(@Nullable Output<Object> escapeChar) {
            $.escapeChar = escapeChar;
            return this;
        }

        public Builder escapeChar(Object escapeChar) {
            return escapeChar(Output.of(escapeChar));
        }

        public Builder firstRowAsHeader(@Nullable Output<Object> firstRowAsHeader) {
            $.firstRowAsHeader = firstRowAsHeader;
            return this;
        }

        public Builder firstRowAsHeader(Object firstRowAsHeader) {
            return firstRowAsHeader(Output.of(firstRowAsHeader));
        }

        public Builder folder(@Nullable Output<DatasetFolderArgs> folder) {
            $.folder = folder;
            return this;
        }

        public Builder folder(DatasetFolderArgs folder) {
            return folder(Output.of(folder));
        }

        public Builder linkedServiceName(Output<LinkedServiceReferenceArgs> linkedServiceName) {
            $.linkedServiceName = linkedServiceName;
            return this;
        }

        public Builder linkedServiceName(LinkedServiceReferenceArgs linkedServiceName) {
            return linkedServiceName(Output.of(linkedServiceName));
        }

        public Builder location(Output<Object> location) {
            $.location = location;
            return this;
        }

        public Builder location(Object location) {
            return location(Output.of(location));
        }

        public Builder nullValue(@Nullable Output<Object> nullValue) {
            $.nullValue = nullValue;
            return this;
        }

        public Builder nullValue(Object nullValue) {
            return nullValue(Output.of(nullValue));
        }

        public Builder parameters(@Nullable Output<Map<String,ParameterSpecificationArgs>> parameters) {
            $.parameters = parameters;
            return this;
        }

        public Builder parameters(Map<String,ParameterSpecificationArgs> parameters) {
            return parameters(Output.of(parameters));
        }

        public Builder quoteChar(@Nullable Output<Object> quoteChar) {
            $.quoteChar = quoteChar;
            return this;
        }

        public Builder quoteChar(Object quoteChar) {
            return quoteChar(Output.of(quoteChar));
        }

        public Builder rowDelimiter(@Nullable Output<Object> rowDelimiter) {
            $.rowDelimiter = rowDelimiter;
            return this;
        }

        public Builder rowDelimiter(Object rowDelimiter) {
            return rowDelimiter(Output.of(rowDelimiter));
        }

        public Builder schema(@Nullable Output<Object> schema) {
            $.schema = schema;
            return this;
        }

        public Builder schema(Object schema) {
            return schema(Output.of(schema));
        }

        public Builder structure(@Nullable Output<Object> structure) {
            $.structure = structure;
            return this;
        }

        public Builder structure(Object structure) {
            return structure(Output.of(structure));
        }

        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public DelimitedTextDatasetArgs build() {
            $.linkedServiceName = Objects.requireNonNull($.linkedServiceName, "expected parameter 'linkedServiceName' to be non-null");
            $.location = Objects.requireNonNull($.location, "expected parameter 'location' to be non-null");
            $.type = Codegen.stringProp("type").output().arg($.type).require();
            return $;
        }
    }

}
