// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.kubernetesconfiguration.inputs;

import com.pulumi.azurenative.kubernetesconfiguration.inputs.RepositoryRefDefinitionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Parameters to reconcile to the GitRepository source kind type.
 * 
 */
public final class GitRepositoryDefinitionArgs extends com.pulumi.resources.ResourceArgs {

    public static final GitRepositoryDefinitionArgs Empty = new GitRepositoryDefinitionArgs();

    /**
     * Base64-encoded HTTPS certificate authority contents used to access git private git repositories over HTTPS
     * 
     */
    @Import(name="httpsCAFile")
    private @Nullable Output<String> httpsCAFile;

    /**
     * @return Base64-encoded HTTPS certificate authority contents used to access git private git repositories over HTTPS
     * 
     */
    public Optional<Output<String>> httpsCAFile() {
        return Optional.ofNullable(this.httpsCAFile);
    }

    /**
     * Base64-encoded HTTPS username used to access private git repositories over HTTPS
     * 
     */
    @Import(name="httpsUser")
    private @Nullable Output<String> httpsUser;

    /**
     * @return Base64-encoded HTTPS username used to access private git repositories over HTTPS
     * 
     */
    public Optional<Output<String>> httpsUser() {
        return Optional.ofNullable(this.httpsUser);
    }

    /**
     * Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided configuration secrets.
     * 
     */
    @Import(name="localAuthRef")
    private @Nullable Output<String> localAuthRef;

    /**
     * @return Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided configuration secrets.
     * 
     */
    public Optional<Output<String>> localAuthRef() {
        return Optional.ofNullable(this.localAuthRef);
    }

    /**
     * The source reference for the GitRepository object.
     * 
     */
    @Import(name="repositoryRef")
    private @Nullable Output<RepositoryRefDefinitionArgs> repositoryRef;

    /**
     * @return The source reference for the GitRepository object.
     * 
     */
    public Optional<Output<RepositoryRefDefinitionArgs>> repositoryRef() {
        return Optional.ofNullable(this.repositoryRef);
    }

    /**
     * Base64-encoded known_hosts value containing public SSH keys required to access private git repositories over SSH
     * 
     */
    @Import(name="sshKnownHosts")
    private @Nullable Output<String> sshKnownHosts;

    /**
     * @return Base64-encoded known_hosts value containing public SSH keys required to access private git repositories over SSH
     * 
     */
    public Optional<Output<String>> sshKnownHosts() {
        return Optional.ofNullable(this.sshKnownHosts);
    }

    /**
     * The interval at which to re-reconcile the cluster git repository source with the remote.
     * 
     */
    @Import(name="syncIntervalInSeconds")
    private @Nullable Output<Double> syncIntervalInSeconds;

    /**
     * @return The interval at which to re-reconcile the cluster git repository source with the remote.
     * 
     */
    public Optional<Output<Double>> syncIntervalInSeconds() {
        return Optional.ofNullable(this.syncIntervalInSeconds);
    }

    /**
     * The maximum time to attempt to reconcile the cluster git repository source with the remote.
     * 
     */
    @Import(name="timeoutInSeconds")
    private @Nullable Output<Double> timeoutInSeconds;

    /**
     * @return The maximum time to attempt to reconcile the cluster git repository source with the remote.
     * 
     */
    public Optional<Output<Double>> timeoutInSeconds() {
        return Optional.ofNullable(this.timeoutInSeconds);
    }

    /**
     * The URL to sync for the flux configuration git repository.
     * 
     */
    @Import(name="url")
    private @Nullable Output<String> url;

    /**
     * @return The URL to sync for the flux configuration git repository.
     * 
     */
    public Optional<Output<String>> url() {
        return Optional.ofNullable(this.url);
    }

    private GitRepositoryDefinitionArgs() {}

    private GitRepositoryDefinitionArgs(GitRepositoryDefinitionArgs $) {
        this.httpsCAFile = $.httpsCAFile;
        this.httpsUser = $.httpsUser;
        this.localAuthRef = $.localAuthRef;
        this.repositoryRef = $.repositoryRef;
        this.sshKnownHosts = $.sshKnownHosts;
        this.syncIntervalInSeconds = $.syncIntervalInSeconds;
        this.timeoutInSeconds = $.timeoutInSeconds;
        this.url = $.url;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GitRepositoryDefinitionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GitRepositoryDefinitionArgs $;

        public Builder() {
            $ = new GitRepositoryDefinitionArgs();
        }

        public Builder(GitRepositoryDefinitionArgs defaults) {
            $ = new GitRepositoryDefinitionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param httpsCAFile Base64-encoded HTTPS certificate authority contents used to access git private git repositories over HTTPS
         * 
         * @return builder
         * 
         */
        public Builder httpsCAFile(@Nullable Output<String> httpsCAFile) {
            $.httpsCAFile = httpsCAFile;
            return this;
        }

        /**
         * @param httpsCAFile Base64-encoded HTTPS certificate authority contents used to access git private git repositories over HTTPS
         * 
         * @return builder
         * 
         */
        public Builder httpsCAFile(String httpsCAFile) {
            return httpsCAFile(Output.of(httpsCAFile));
        }

        /**
         * @param httpsUser Base64-encoded HTTPS username used to access private git repositories over HTTPS
         * 
         * @return builder
         * 
         */
        public Builder httpsUser(@Nullable Output<String> httpsUser) {
            $.httpsUser = httpsUser;
            return this;
        }

        /**
         * @param httpsUser Base64-encoded HTTPS username used to access private git repositories over HTTPS
         * 
         * @return builder
         * 
         */
        public Builder httpsUser(String httpsUser) {
            return httpsUser(Output.of(httpsUser));
        }

        /**
         * @param localAuthRef Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided configuration secrets.
         * 
         * @return builder
         * 
         */
        public Builder localAuthRef(@Nullable Output<String> localAuthRef) {
            $.localAuthRef = localAuthRef;
            return this;
        }

        /**
         * @param localAuthRef Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided configuration secrets.
         * 
         * @return builder
         * 
         */
        public Builder localAuthRef(String localAuthRef) {
            return localAuthRef(Output.of(localAuthRef));
        }

        /**
         * @param repositoryRef The source reference for the GitRepository object.
         * 
         * @return builder
         * 
         */
        public Builder repositoryRef(@Nullable Output<RepositoryRefDefinitionArgs> repositoryRef) {
            $.repositoryRef = repositoryRef;
            return this;
        }

        /**
         * @param repositoryRef The source reference for the GitRepository object.
         * 
         * @return builder
         * 
         */
        public Builder repositoryRef(RepositoryRefDefinitionArgs repositoryRef) {
            return repositoryRef(Output.of(repositoryRef));
        }

        /**
         * @param sshKnownHosts Base64-encoded known_hosts value containing public SSH keys required to access private git repositories over SSH
         * 
         * @return builder
         * 
         */
        public Builder sshKnownHosts(@Nullable Output<String> sshKnownHosts) {
            $.sshKnownHosts = sshKnownHosts;
            return this;
        }

        /**
         * @param sshKnownHosts Base64-encoded known_hosts value containing public SSH keys required to access private git repositories over SSH
         * 
         * @return builder
         * 
         */
        public Builder sshKnownHosts(String sshKnownHosts) {
            return sshKnownHosts(Output.of(sshKnownHosts));
        }

        /**
         * @param syncIntervalInSeconds The interval at which to re-reconcile the cluster git repository source with the remote.
         * 
         * @return builder
         * 
         */
        public Builder syncIntervalInSeconds(@Nullable Output<Double> syncIntervalInSeconds) {
            $.syncIntervalInSeconds = syncIntervalInSeconds;
            return this;
        }

        /**
         * @param syncIntervalInSeconds The interval at which to re-reconcile the cluster git repository source with the remote.
         * 
         * @return builder
         * 
         */
        public Builder syncIntervalInSeconds(Double syncIntervalInSeconds) {
            return syncIntervalInSeconds(Output.of(syncIntervalInSeconds));
        }

        /**
         * @param timeoutInSeconds The maximum time to attempt to reconcile the cluster git repository source with the remote.
         * 
         * @return builder
         * 
         */
        public Builder timeoutInSeconds(@Nullable Output<Double> timeoutInSeconds) {
            $.timeoutInSeconds = timeoutInSeconds;
            return this;
        }

        /**
         * @param timeoutInSeconds The maximum time to attempt to reconcile the cluster git repository source with the remote.
         * 
         * @return builder
         * 
         */
        public Builder timeoutInSeconds(Double timeoutInSeconds) {
            return timeoutInSeconds(Output.of(timeoutInSeconds));
        }

        /**
         * @param url The URL to sync for the flux configuration git repository.
         * 
         * @return builder
         * 
         */
        public Builder url(@Nullable Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url The URL to sync for the flux configuration git repository.
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        public GitRepositoryDefinitionArgs build() {
            $.syncIntervalInSeconds = Codegen.doubleProp("syncIntervalInSeconds").output().arg($.syncIntervalInSeconds).def(6e+02).getNullable();
            $.timeoutInSeconds = Codegen.doubleProp("timeoutInSeconds").output().arg($.timeoutInSeconds).def(6e+02).getNullable();
            return $;
        }
    }

}
