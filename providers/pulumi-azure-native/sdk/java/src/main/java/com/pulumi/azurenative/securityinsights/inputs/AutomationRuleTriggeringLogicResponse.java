// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.securityinsights.inputs;

import com.pulumi.azurenative.securityinsights.inputs.AutomationRulePropertyValuesConditionResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Describes automation rule triggering logic
 * 
 */
public final class AutomationRuleTriggeringLogicResponse extends com.pulumi.resources.InvokeArgs {

    public static final AutomationRuleTriggeringLogicResponse Empty = new AutomationRuleTriggeringLogicResponse();

    /**
     * The conditions to evaluate to determine if the automation rule should be triggered on a given object
     * 
     */
    @Import(name="conditions")
    private @Nullable List<AutomationRulePropertyValuesConditionResponse> conditions;

    /**
     * @return The conditions to evaluate to determine if the automation rule should be triggered on a given object
     * 
     */
    public Optional<List<AutomationRulePropertyValuesConditionResponse>> conditions() {
        return Optional.ofNullable(this.conditions);
    }

    /**
     * Determines when the automation rule should automatically expire and be disabled.
     * 
     */
    @Import(name="expirationTimeUtc")
    private @Nullable String expirationTimeUtc;

    /**
     * @return Determines when the automation rule should automatically expire and be disabled.
     * 
     */
    public Optional<String> expirationTimeUtc() {
        return Optional.ofNullable(this.expirationTimeUtc);
    }

    /**
     * Determines whether the automation rule is enabled or disabled.
     * 
     */
    @Import(name="isEnabled", required=true)
    private Boolean isEnabled;

    /**
     * @return Determines whether the automation rule is enabled or disabled.
     * 
     */
    public Boolean isEnabled() {
        return this.isEnabled;
    }

    /**
     * The type of object the automation rule triggers on
     * 
     */
    @Import(name="triggersOn", required=true)
    private String triggersOn;

    /**
     * @return The type of object the automation rule triggers on
     * 
     */
    public String triggersOn() {
        return this.triggersOn;
    }

    /**
     * The type of event the automation rule triggers on
     * 
     */
    @Import(name="triggersWhen", required=true)
    private String triggersWhen;

    /**
     * @return The type of event the automation rule triggers on
     * 
     */
    public String triggersWhen() {
        return this.triggersWhen;
    }

    private AutomationRuleTriggeringLogicResponse() {}

    private AutomationRuleTriggeringLogicResponse(AutomationRuleTriggeringLogicResponse $) {
        this.conditions = $.conditions;
        this.expirationTimeUtc = $.expirationTimeUtc;
        this.isEnabled = $.isEnabled;
        this.triggersOn = $.triggersOn;
        this.triggersWhen = $.triggersWhen;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AutomationRuleTriggeringLogicResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AutomationRuleTriggeringLogicResponse $;

        public Builder() {
            $ = new AutomationRuleTriggeringLogicResponse();
        }

        public Builder(AutomationRuleTriggeringLogicResponse defaults) {
            $ = new AutomationRuleTriggeringLogicResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param conditions The conditions to evaluate to determine if the automation rule should be triggered on a given object
         * 
         * @return builder
         * 
         */
        public Builder conditions(@Nullable List<AutomationRulePropertyValuesConditionResponse> conditions) {
            $.conditions = conditions;
            return this;
        }

        /**
         * @param conditions The conditions to evaluate to determine if the automation rule should be triggered on a given object
         * 
         * @return builder
         * 
         */
        public Builder conditions(AutomationRulePropertyValuesConditionResponse... conditions) {
            return conditions(List.of(conditions));
        }

        /**
         * @param expirationTimeUtc Determines when the automation rule should automatically expire and be disabled.
         * 
         * @return builder
         * 
         */
        public Builder expirationTimeUtc(@Nullable String expirationTimeUtc) {
            $.expirationTimeUtc = expirationTimeUtc;
            return this;
        }

        /**
         * @param isEnabled Determines whether the automation rule is enabled or disabled.
         * 
         * @return builder
         * 
         */
        public Builder isEnabled(Boolean isEnabled) {
            $.isEnabled = isEnabled;
            return this;
        }

        /**
         * @param triggersOn The type of object the automation rule triggers on
         * 
         * @return builder
         * 
         */
        public Builder triggersOn(String triggersOn) {
            $.triggersOn = triggersOn;
            return this;
        }

        /**
         * @param triggersWhen The type of event the automation rule triggers on
         * 
         * @return builder
         * 
         */
        public Builder triggersWhen(String triggersWhen) {
            $.triggersWhen = triggersWhen;
            return this;
        }

        public AutomationRuleTriggeringLogicResponse build() {
            $.isEnabled = Objects.requireNonNull($.isEnabled, "expected parameter 'isEnabled' to be non-null");
            $.triggersOn = Objects.requireNonNull($.triggersOn, "expected parameter 'triggersOn' to be non-null");
            $.triggersWhen = Objects.requireNonNull($.triggersWhen, "expected parameter 'triggersWhen' to be non-null");
            return $;
        }
    }

}
