// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.batch.inputs;

import com.pulumi.azurenative.batch.inputs.ContainerRegistryResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ContainerConfigurationResponse extends com.pulumi.resources.InvokeArgs {

    public static final ContainerConfigurationResponse Empty = new ContainerConfigurationResponse();

    /**
     * This is the full image reference, as would be specified to &#34;docker pull&#34;. An image will be sourced from the default Docker registry unless the image is fully qualified with an alternative registry.
     * 
     */
    @Import(name="containerImageNames")
    private @Nullable List<String> containerImageNames;

    public Optional<List<String>> containerImageNames() {
        return Optional.ofNullable(this.containerImageNames);
    }

    /**
     * If any images must be downloaded from a private registry which requires credentials, then those credentials must be provided here.
     * 
     */
    @Import(name="containerRegistries")
    private @Nullable List<ContainerRegistryResponse> containerRegistries;

    public Optional<List<ContainerRegistryResponse>> containerRegistries() {
        return Optional.ofNullable(this.containerRegistries);
    }

    @Import(name="type", required=true)
    private String type;

    public String type() {
        return this.type;
    }

    private ContainerConfigurationResponse() {}

    private ContainerConfigurationResponse(ContainerConfigurationResponse $) {
        this.containerImageNames = $.containerImageNames;
        this.containerRegistries = $.containerRegistries;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContainerConfigurationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContainerConfigurationResponse $;

        public Builder() {
            $ = new ContainerConfigurationResponse();
        }

        public Builder(ContainerConfigurationResponse defaults) {
            $ = new ContainerConfigurationResponse(Objects.requireNonNull(defaults));
        }

        public Builder containerImageNames(@Nullable List<String> containerImageNames) {
            $.containerImageNames = containerImageNames;
            return this;
        }

        public Builder containerImageNames(String... containerImageNames) {
            return containerImageNames(List.of(containerImageNames));
        }

        public Builder containerRegistries(@Nullable List<ContainerRegistryResponse> containerRegistries) {
            $.containerRegistries = containerRegistries;
            return this;
        }

        public Builder containerRegistries(ContainerRegistryResponse... containerRegistries) {
            return containerRegistries(List.of(containerRegistries));
        }

        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public ContainerConfigurationResponse build() {
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
