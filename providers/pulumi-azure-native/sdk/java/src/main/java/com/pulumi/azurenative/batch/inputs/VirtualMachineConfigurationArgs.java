// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.batch.inputs;

import com.pulumi.azurenative.batch.inputs.ContainerConfigurationArgs;
import com.pulumi.azurenative.batch.inputs.DataDiskArgs;
import com.pulumi.azurenative.batch.inputs.DiskEncryptionConfigurationArgs;
import com.pulumi.azurenative.batch.inputs.ImageReferenceArgs;
import com.pulumi.azurenative.batch.inputs.NodePlacementConfigurationArgs;
import com.pulumi.azurenative.batch.inputs.VMExtensionArgs;
import com.pulumi.azurenative.batch.inputs.WindowsConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VirtualMachineConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final VirtualMachineConfigurationArgs Empty = new VirtualMachineConfigurationArgs();

    /**
     * If specified, setup is performed on each node in the pool to allow tasks to run in containers. All regular tasks and job manager tasks run on this pool must specify the containerSettings property, and all other tasks may specify it.
     * 
     */
    @Import(name="containerConfiguration")
    private @Nullable Output<ContainerConfigurationArgs> containerConfiguration;

    /**
     * @return If specified, setup is performed on each node in the pool to allow tasks to run in containers. All regular tasks and job manager tasks run on this pool must specify the containerSettings property, and all other tasks may specify it.
     * 
     */
    public Optional<Output<ContainerConfigurationArgs>> containerConfiguration() {
        return Optional.ofNullable(this.containerConfiguration);
    }

    /**
     * This property must be specified if the compute nodes in the pool need to have empty data disks attached to them.
     * 
     */
    @Import(name="dataDisks")
    private @Nullable Output<List<DataDiskArgs>> dataDisks;

    /**
     * @return This property must be specified if the compute nodes in the pool need to have empty data disks attached to them.
     * 
     */
    public Optional<Output<List<DataDiskArgs>>> dataDisks() {
        return Optional.ofNullable(this.dataDisks);
    }

    /**
     * If specified, encryption is performed on each node in the pool during node provisioning.
     * 
     */
    @Import(name="diskEncryptionConfiguration")
    private @Nullable Output<DiskEncryptionConfigurationArgs> diskEncryptionConfiguration;

    /**
     * @return If specified, encryption is performed on each node in the pool during node provisioning.
     * 
     */
    public Optional<Output<DiskEncryptionConfigurationArgs>> diskEncryptionConfiguration() {
        return Optional.ofNullable(this.diskEncryptionConfiguration);
    }

    /**
     * If specified, the extensions mentioned in this configuration will be installed on each node.
     * 
     */
    @Import(name="extensions")
    private @Nullable Output<List<VMExtensionArgs>> extensions;

    /**
     * @return If specified, the extensions mentioned in this configuration will be installed on each node.
     * 
     */
    public Optional<Output<List<VMExtensionArgs>>> extensions() {
        return Optional.ofNullable(this.extensions);
    }

    @Import(name="imageReference", required=true)
    private Output<ImageReferenceArgs> imageReference;

    public Output<ImageReferenceArgs> imageReference() {
        return this.imageReference;
    }

    /**
     * This only applies to images that contain the Windows operating system, and should only be used when you hold valid on-premises licenses for the nodes which will be deployed. If omitted, no on-premises licensing discount is applied. Values are:
     * 
     *  Windows_Server - The on-premises license is for Windows Server.
     *  Windows_Client - The on-premises license is for Windows Client.
     * 
     */
    @Import(name="licenseType")
    private @Nullable Output<String> licenseType;

    /**
     * @return This only applies to images that contain the Windows operating system, and should only be used when you hold valid on-premises licenses for the nodes which will be deployed. If omitted, no on-premises licensing discount is applied. Values are:
     * 
     *  Windows_Server - The on-premises license is for Windows Server.
     *  Windows_Client - The on-premises license is for Windows Client.
     * 
     */
    public Optional<Output<String>> licenseType() {
        return Optional.ofNullable(this.licenseType);
    }

    /**
     * The Batch node agent is a program that runs on each node in the pool, and provides the command-and-control interface between the node and the Batch service. There are different implementations of the node agent, known as SKUs, for different operating systems. You must specify a node agent SKU which matches the selected image reference. To get the list of supported node agent SKUs along with their list of verified image references, see the &#39;List supported node agent SKUs&#39; operation.
     * 
     */
    @Import(name="nodeAgentSkuId", required=true)
    private Output<String> nodeAgentSkuId;

    /**
     * @return The Batch node agent is a program that runs on each node in the pool, and provides the command-and-control interface between the node and the Batch service. There are different implementations of the node agent, known as SKUs, for different operating systems. You must specify a node agent SKU which matches the selected image reference. To get the list of supported node agent SKUs along with their list of verified image references, see the &#39;List supported node agent SKUs&#39; operation.
     * 
     */
    public Output<String> nodeAgentSkuId() {
        return this.nodeAgentSkuId;
    }

    /**
     * This configuration will specify rules on how nodes in the pool will be physically allocated.
     * 
     */
    @Import(name="nodePlacementConfiguration")
    private @Nullable Output<NodePlacementConfigurationArgs> nodePlacementConfiguration;

    /**
     * @return This configuration will specify rules on how nodes in the pool will be physically allocated.
     * 
     */
    public Optional<Output<NodePlacementConfigurationArgs>> nodePlacementConfiguration() {
        return Optional.ofNullable(this.nodePlacementConfiguration);
    }

    /**
     * This property must not be specified if the imageReference specifies a Linux OS image.
     * 
     */
    @Import(name="windowsConfiguration")
    private @Nullable Output<WindowsConfigurationArgs> windowsConfiguration;

    /**
     * @return This property must not be specified if the imageReference specifies a Linux OS image.
     * 
     */
    public Optional<Output<WindowsConfigurationArgs>> windowsConfiguration() {
        return Optional.ofNullable(this.windowsConfiguration);
    }

    private VirtualMachineConfigurationArgs() {}

    private VirtualMachineConfigurationArgs(VirtualMachineConfigurationArgs $) {
        this.containerConfiguration = $.containerConfiguration;
        this.dataDisks = $.dataDisks;
        this.diskEncryptionConfiguration = $.diskEncryptionConfiguration;
        this.extensions = $.extensions;
        this.imageReference = $.imageReference;
        this.licenseType = $.licenseType;
        this.nodeAgentSkuId = $.nodeAgentSkuId;
        this.nodePlacementConfiguration = $.nodePlacementConfiguration;
        this.windowsConfiguration = $.windowsConfiguration;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VirtualMachineConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VirtualMachineConfigurationArgs $;

        public Builder() {
            $ = new VirtualMachineConfigurationArgs();
        }

        public Builder(VirtualMachineConfigurationArgs defaults) {
            $ = new VirtualMachineConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param containerConfiguration If specified, setup is performed on each node in the pool to allow tasks to run in containers. All regular tasks and job manager tasks run on this pool must specify the containerSettings property, and all other tasks may specify it.
         * 
         * @return builder
         * 
         */
        public Builder containerConfiguration(@Nullable Output<ContainerConfigurationArgs> containerConfiguration) {
            $.containerConfiguration = containerConfiguration;
            return this;
        }

        /**
         * @param containerConfiguration If specified, setup is performed on each node in the pool to allow tasks to run in containers. All regular tasks and job manager tasks run on this pool must specify the containerSettings property, and all other tasks may specify it.
         * 
         * @return builder
         * 
         */
        public Builder containerConfiguration(ContainerConfigurationArgs containerConfiguration) {
            return containerConfiguration(Output.of(containerConfiguration));
        }

        /**
         * @param dataDisks This property must be specified if the compute nodes in the pool need to have empty data disks attached to them.
         * 
         * @return builder
         * 
         */
        public Builder dataDisks(@Nullable Output<List<DataDiskArgs>> dataDisks) {
            $.dataDisks = dataDisks;
            return this;
        }

        /**
         * @param dataDisks This property must be specified if the compute nodes in the pool need to have empty data disks attached to them.
         * 
         * @return builder
         * 
         */
        public Builder dataDisks(List<DataDiskArgs> dataDisks) {
            return dataDisks(Output.of(dataDisks));
        }

        /**
         * @param dataDisks This property must be specified if the compute nodes in the pool need to have empty data disks attached to them.
         * 
         * @return builder
         * 
         */
        public Builder dataDisks(DataDiskArgs... dataDisks) {
            return dataDisks(List.of(dataDisks));
        }

        /**
         * @param diskEncryptionConfiguration If specified, encryption is performed on each node in the pool during node provisioning.
         * 
         * @return builder
         * 
         */
        public Builder diskEncryptionConfiguration(@Nullable Output<DiskEncryptionConfigurationArgs> diskEncryptionConfiguration) {
            $.diskEncryptionConfiguration = diskEncryptionConfiguration;
            return this;
        }

        /**
         * @param diskEncryptionConfiguration If specified, encryption is performed on each node in the pool during node provisioning.
         * 
         * @return builder
         * 
         */
        public Builder diskEncryptionConfiguration(DiskEncryptionConfigurationArgs diskEncryptionConfiguration) {
            return diskEncryptionConfiguration(Output.of(diskEncryptionConfiguration));
        }

        /**
         * @param extensions If specified, the extensions mentioned in this configuration will be installed on each node.
         * 
         * @return builder
         * 
         */
        public Builder extensions(@Nullable Output<List<VMExtensionArgs>> extensions) {
            $.extensions = extensions;
            return this;
        }

        /**
         * @param extensions If specified, the extensions mentioned in this configuration will be installed on each node.
         * 
         * @return builder
         * 
         */
        public Builder extensions(List<VMExtensionArgs> extensions) {
            return extensions(Output.of(extensions));
        }

        /**
         * @param extensions If specified, the extensions mentioned in this configuration will be installed on each node.
         * 
         * @return builder
         * 
         */
        public Builder extensions(VMExtensionArgs... extensions) {
            return extensions(List.of(extensions));
        }

        public Builder imageReference(Output<ImageReferenceArgs> imageReference) {
            $.imageReference = imageReference;
            return this;
        }

        public Builder imageReference(ImageReferenceArgs imageReference) {
            return imageReference(Output.of(imageReference));
        }

        /**
         * @param licenseType This only applies to images that contain the Windows operating system, and should only be used when you hold valid on-premises licenses for the nodes which will be deployed. If omitted, no on-premises licensing discount is applied. Values are:
         * 
         *  Windows_Server - The on-premises license is for Windows Server.
         *  Windows_Client - The on-premises license is for Windows Client.
         * 
         * @return builder
         * 
         */
        public Builder licenseType(@Nullable Output<String> licenseType) {
            $.licenseType = licenseType;
            return this;
        }

        /**
         * @param licenseType This only applies to images that contain the Windows operating system, and should only be used when you hold valid on-premises licenses for the nodes which will be deployed. If omitted, no on-premises licensing discount is applied. Values are:
         * 
         *  Windows_Server - The on-premises license is for Windows Server.
         *  Windows_Client - The on-premises license is for Windows Client.
         * 
         * @return builder
         * 
         */
        public Builder licenseType(String licenseType) {
            return licenseType(Output.of(licenseType));
        }

        /**
         * @param nodeAgentSkuId The Batch node agent is a program that runs on each node in the pool, and provides the command-and-control interface between the node and the Batch service. There are different implementations of the node agent, known as SKUs, for different operating systems. You must specify a node agent SKU which matches the selected image reference. To get the list of supported node agent SKUs along with their list of verified image references, see the &#39;List supported node agent SKUs&#39; operation.
         * 
         * @return builder
         * 
         */
        public Builder nodeAgentSkuId(Output<String> nodeAgentSkuId) {
            $.nodeAgentSkuId = nodeAgentSkuId;
            return this;
        }

        /**
         * @param nodeAgentSkuId The Batch node agent is a program that runs on each node in the pool, and provides the command-and-control interface between the node and the Batch service. There are different implementations of the node agent, known as SKUs, for different operating systems. You must specify a node agent SKU which matches the selected image reference. To get the list of supported node agent SKUs along with their list of verified image references, see the &#39;List supported node agent SKUs&#39; operation.
         * 
         * @return builder
         * 
         */
        public Builder nodeAgentSkuId(String nodeAgentSkuId) {
            return nodeAgentSkuId(Output.of(nodeAgentSkuId));
        }

        /**
         * @param nodePlacementConfiguration This configuration will specify rules on how nodes in the pool will be physically allocated.
         * 
         * @return builder
         * 
         */
        public Builder nodePlacementConfiguration(@Nullable Output<NodePlacementConfigurationArgs> nodePlacementConfiguration) {
            $.nodePlacementConfiguration = nodePlacementConfiguration;
            return this;
        }

        /**
         * @param nodePlacementConfiguration This configuration will specify rules on how nodes in the pool will be physically allocated.
         * 
         * @return builder
         * 
         */
        public Builder nodePlacementConfiguration(NodePlacementConfigurationArgs nodePlacementConfiguration) {
            return nodePlacementConfiguration(Output.of(nodePlacementConfiguration));
        }

        /**
         * @param windowsConfiguration This property must not be specified if the imageReference specifies a Linux OS image.
         * 
         * @return builder
         * 
         */
        public Builder windowsConfiguration(@Nullable Output<WindowsConfigurationArgs> windowsConfiguration) {
            $.windowsConfiguration = windowsConfiguration;
            return this;
        }

        /**
         * @param windowsConfiguration This property must not be specified if the imageReference specifies a Linux OS image.
         * 
         * @return builder
         * 
         */
        public Builder windowsConfiguration(WindowsConfigurationArgs windowsConfiguration) {
            return windowsConfiguration(Output.of(windowsConfiguration));
        }

        public VirtualMachineConfigurationArgs build() {
            $.imageReference = Objects.requireNonNull($.imageReference, "expected parameter 'imageReference' to be non-null");
            $.nodeAgentSkuId = Objects.requireNonNull($.nodeAgentSkuId, "expected parameter 'nodeAgentSkuId' to be non-null");
            return $;
        }
    }

}
