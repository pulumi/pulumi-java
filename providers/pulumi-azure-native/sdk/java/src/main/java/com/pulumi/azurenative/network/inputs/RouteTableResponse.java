// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.azurenative.network.inputs.RouteResponse;
import com.pulumi.azurenative.network.inputs.SubnetResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Route table resource.
 * 
 */
public final class RouteTableResponse extends com.pulumi.resources.InvokeArgs {

    public static final RouteTableResponse Empty = new RouteTableResponse();

    /**
     * Whether to disable the routes learned by BGP on that route table. True means disable.
     * 
     */
    @Import(name="disableBgpRoutePropagation")
    private @Nullable Boolean disableBgpRoutePropagation;

    public Optional<Boolean> disableBgpRoutePropagation() {
        return Optional.ofNullable(this.disableBgpRoutePropagation);
    }

    /**
     * A unique read-only string that changes whenever the resource is updated.
     * 
     */
    @Import(name="etag", required=true)
    private String etag;

    public String etag() {
        return this.etag;
    }

    /**
     * Resource ID.
     * 
     */
    @Import(name="id")
    private @Nullable String id;

    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Resource location.
     * 
     */
    @Import(name="location")
    private @Nullable String location;

    public Optional<String> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Resource name.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    public String name() {
        return this.name;
    }

    /**
     * The provisioning state of the route table resource.
     * 
     */
    @Import(name="provisioningState", required=true)
    private String provisioningState;

    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * The resource GUID property of the route table.
     * 
     */
    @Import(name="resourceGuid", required=true)
    private String resourceGuid;

    public String resourceGuid() {
        return this.resourceGuid;
    }

    /**
     * Collection of routes contained within a route table.
     * 
     */
    @Import(name="routes")
    private @Nullable List<RouteResponse> routes;

    public Optional<List<RouteResponse>> routes() {
        return Optional.ofNullable(this.routes);
    }

    /**
     * A collection of references to subnets.
     * 
     */
    @Import(name="subnets", required=true)
    private List<SubnetResponse> subnets;

    public List<SubnetResponse> subnets() {
        return this.subnets;
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
    private @Nullable Map<String,String> tags;

    public Optional<Map<String,String>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Resource type.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    public String type() {
        return this.type;
    }

    private RouteTableResponse() {}

    private RouteTableResponse(RouteTableResponse $) {
        this.disableBgpRoutePropagation = $.disableBgpRoutePropagation;
        this.etag = $.etag;
        this.id = $.id;
        this.location = $.location;
        this.name = $.name;
        this.provisioningState = $.provisioningState;
        this.resourceGuid = $.resourceGuid;
        this.routes = $.routes;
        this.subnets = $.subnets;
        this.tags = $.tags;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RouteTableResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RouteTableResponse $;

        public Builder() {
            $ = new RouteTableResponse();
        }

        public Builder(RouteTableResponse defaults) {
            $ = new RouteTableResponse(Objects.requireNonNull(defaults));
        }

        public Builder disableBgpRoutePropagation(@Nullable Boolean disableBgpRoutePropagation) {
            $.disableBgpRoutePropagation = disableBgpRoutePropagation;
            return this;
        }

        public Builder etag(String etag) {
            $.etag = etag;
            return this;
        }

        public Builder id(@Nullable String id) {
            $.id = id;
            return this;
        }

        public Builder location(@Nullable String location) {
            $.location = location;
            return this;
        }

        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public Builder provisioningState(String provisioningState) {
            $.provisioningState = provisioningState;
            return this;
        }

        public Builder resourceGuid(String resourceGuid) {
            $.resourceGuid = resourceGuid;
            return this;
        }

        public Builder routes(@Nullable List<RouteResponse> routes) {
            $.routes = routes;
            return this;
        }

        public Builder routes(RouteResponse... routes) {
            return routes(List.of(routes));
        }

        public Builder subnets(List<SubnetResponse> subnets) {
            $.subnets = subnets;
            return this;
        }

        public Builder subnets(SubnetResponse... subnets) {
            return subnets(List.of(subnets));
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            $.tags = tags;
            return this;
        }

        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public RouteTableResponse build() {
            $.etag = Objects.requireNonNull($.etag, "expected parameter 'etag' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.provisioningState = Objects.requireNonNull($.provisioningState, "expected parameter 'provisioningState' to be non-null");
            $.resourceGuid = Objects.requireNonNull($.resourceGuid, "expected parameter 'resourceGuid' to be non-null");
            $.subnets = Objects.requireNonNull($.subnets, "expected parameter 'subnets' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
