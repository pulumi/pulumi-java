// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.security;

import com.pulumi.azurenative.security.enums.StandardSupportedClouds;
import com.pulumi.azurenative.security.inputs.StandardComponentPropertiesArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StandardArgs extends com.pulumi.resources.ResourceArgs {

    public static final StandardArgs Empty = new StandardArgs();

    /**
     * category of the standard provided
     * 
     */
    @Import(name="category")
    private @Nullable Output<String> category;

    /**
     * @return category of the standard provided
     * 
     */
    public Optional<Output<String>> category() {
        return Optional.ofNullable(this.category);
    }

    /**
     * List of component objects containing component unique keys (such as assessment keys) to apply to standard scope.  Currently only supports assessment keys.
     * 
     */
    @Import(name="components")
    private @Nullable Output<List<StandardComponentPropertiesArgs>> components;

    /**
     * @return List of component objects containing component unique keys (such as assessment keys) to apply to standard scope.  Currently only supports assessment keys.
     * 
     */
    public Optional<Output<List<StandardComponentPropertiesArgs>>> components() {
        return Optional.ofNullable(this.components);
    }

    /**
     * description of the standard
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return description of the standard
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * display name of the standard, equivalent to the standardId
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return display name of the standard, equivalent to the standardId
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Kind of the resource
     * 
     */
    @Import(name="kind")
    private @Nullable Output<String> kind;

    /**
     * @return Kind of the resource
     * 
     */
    public Optional<Output<String>> kind() {
        return Optional.ofNullable(this.kind);
    }

    /**
     * Location where the resource is stored
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Location where the resource is stored
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name of the resource group within the user&#39;s subscription. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group within the user&#39;s subscription. The name is case insensitive.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The Security Standard key - unique key for the standard type
     * 
     */
    @Import(name="standardId")
    private @Nullable Output<String> standardId;

    /**
     * @return The Security Standard key - unique key for the standard type
     * 
     */
    public Optional<Output<String>> standardId() {
        return Optional.ofNullable(this.standardId);
    }

    /**
     * List of all standard supported clouds.
     * 
     */
    @Import(name="supportedClouds")
    private @Nullable Output<List<StandardSupportedClouds>> supportedClouds;

    /**
     * @return List of all standard supported clouds.
     * 
     */
    public Optional<Output<List<StandardSupportedClouds>>> supportedClouds() {
        return Optional.ofNullable(this.supportedClouds);
    }

    /**
     * A list of key value pairs that describe the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return A list of key value pairs that describe the resource.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private StandardArgs() {}

    private StandardArgs(StandardArgs $) {
        this.category = $.category;
        this.components = $.components;
        this.description = $.description;
        this.displayName = $.displayName;
        this.kind = $.kind;
        this.location = $.location;
        this.resourceGroupName = $.resourceGroupName;
        this.standardId = $.standardId;
        this.supportedClouds = $.supportedClouds;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StandardArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StandardArgs $;

        public Builder() {
            $ = new StandardArgs();
        }

        public Builder(StandardArgs defaults) {
            $ = new StandardArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param category category of the standard provided
         * 
         * @return builder
         * 
         */
        public Builder category(@Nullable Output<String> category) {
            $.category = category;
            return this;
        }

        /**
         * @param category category of the standard provided
         * 
         * @return builder
         * 
         */
        public Builder category(String category) {
            return category(Output.of(category));
        }

        /**
         * @param components List of component objects containing component unique keys (such as assessment keys) to apply to standard scope.  Currently only supports assessment keys.
         * 
         * @return builder
         * 
         */
        public Builder components(@Nullable Output<List<StandardComponentPropertiesArgs>> components) {
            $.components = components;
            return this;
        }

        /**
         * @param components List of component objects containing component unique keys (such as assessment keys) to apply to standard scope.  Currently only supports assessment keys.
         * 
         * @return builder
         * 
         */
        public Builder components(List<StandardComponentPropertiesArgs> components) {
            return components(Output.of(components));
        }

        /**
         * @param components List of component objects containing component unique keys (such as assessment keys) to apply to standard scope.  Currently only supports assessment keys.
         * 
         * @return builder
         * 
         */
        public Builder components(StandardComponentPropertiesArgs... components) {
            return components(List.of(components));
        }

        /**
         * @param description description of the standard
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description description of the standard
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName display name of the standard, equivalent to the standardId
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName display name of the standard, equivalent to the standardId
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param kind Kind of the resource
         * 
         * @return builder
         * 
         */
        public Builder kind(@Nullable Output<String> kind) {
            $.kind = kind;
            return this;
        }

        /**
         * @param kind Kind of the resource
         * 
         * @return builder
         * 
         */
        public Builder kind(String kind) {
            return kind(Output.of(kind));
        }

        /**
         * @param location Location where the resource is stored
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Location where the resource is stored
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param standardId The Security Standard key - unique key for the standard type
         * 
         * @return builder
         * 
         */
        public Builder standardId(@Nullable Output<String> standardId) {
            $.standardId = standardId;
            return this;
        }

        /**
         * @param standardId The Security Standard key - unique key for the standard type
         * 
         * @return builder
         * 
         */
        public Builder standardId(String standardId) {
            return standardId(Output.of(standardId));
        }

        /**
         * @param supportedClouds List of all standard supported clouds.
         * 
         * @return builder
         * 
         */
        public Builder supportedClouds(@Nullable Output<List<StandardSupportedClouds>> supportedClouds) {
            $.supportedClouds = supportedClouds;
            return this;
        }

        /**
         * @param supportedClouds List of all standard supported clouds.
         * 
         * @return builder
         * 
         */
        public Builder supportedClouds(List<StandardSupportedClouds> supportedClouds) {
            return supportedClouds(Output.of(supportedClouds));
        }

        /**
         * @param supportedClouds List of all standard supported clouds.
         * 
         * @return builder
         * 
         */
        public Builder supportedClouds(StandardSupportedClouds... supportedClouds) {
            return supportedClouds(List.of(supportedClouds));
        }

        /**
         * @param tags A list of key value pairs that describe the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A list of key value pairs that describe the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public StandardArgs build() {
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
