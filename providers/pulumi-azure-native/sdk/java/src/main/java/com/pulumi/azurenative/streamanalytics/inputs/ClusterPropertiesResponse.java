// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.streamanalytics.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


/**
 * The properties associated with a Stream Analytics cluster.
 * 
 */
public final class ClusterPropertiesResponse extends com.pulumi.resources.InvokeArgs {

    public static final ClusterPropertiesResponse Empty = new ClusterPropertiesResponse();

    /**
     * Represents the number of streaming units currently being used on the cluster.
     * 
     */
    @Import(name="capacityAllocated", required=true)
    private Integer capacityAllocated;

    /**
     * @return Represents the number of streaming units currently being used on the cluster.
     * 
     */
    public Integer capacityAllocated() {
        return this.capacityAllocated;
    }

    /**
     * Represents the sum of the SUs of all streaming jobs associated with the cluster. If all of the jobs were running, this would be the capacity allocated.
     * 
     */
    @Import(name="capacityAssigned", required=true)
    private Integer capacityAssigned;

    /**
     * @return Represents the sum of the SUs of all streaming jobs associated with the cluster. If all of the jobs were running, this would be the capacity allocated.
     * 
     */
    public Integer capacityAssigned() {
        return this.capacityAssigned;
    }

    /**
     * Unique identifier for the cluster.
     * 
     */
    @Import(name="clusterId", required=true)
    private String clusterId;

    /**
     * @return Unique identifier for the cluster.
     * 
     */
    public String clusterId() {
        return this.clusterId;
    }

    /**
     * The date this cluster was created.
     * 
     */
    @Import(name="createdDate", required=true)
    private String createdDate;

    /**
     * @return The date this cluster was created.
     * 
     */
    public String createdDate() {
        return this.createdDate;
    }

    /**
     * The status of the cluster provisioning. The three terminal states are: Succeeded, Failed and Canceled
     * 
     */
    @Import(name="provisioningState", required=true)
    private String provisioningState;

    /**
     * @return The status of the cluster provisioning. The three terminal states are: Succeeded, Failed and Canceled
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    private ClusterPropertiesResponse() {}

    private ClusterPropertiesResponse(ClusterPropertiesResponse $) {
        this.capacityAllocated = $.capacityAllocated;
        this.capacityAssigned = $.capacityAssigned;
        this.clusterId = $.clusterId;
        this.createdDate = $.createdDate;
        this.provisioningState = $.provisioningState;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClusterPropertiesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterPropertiesResponse $;

        public Builder() {
            $ = new ClusterPropertiesResponse();
        }

        public Builder(ClusterPropertiesResponse defaults) {
            $ = new ClusterPropertiesResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param capacityAllocated Represents the number of streaming units currently being used on the cluster.
         * 
         * @return builder
         * 
         */
        public Builder capacityAllocated(Integer capacityAllocated) {
            $.capacityAllocated = capacityAllocated;
            return this;
        }

        /**
         * @param capacityAssigned Represents the sum of the SUs of all streaming jobs associated with the cluster. If all of the jobs were running, this would be the capacity allocated.
         * 
         * @return builder
         * 
         */
        public Builder capacityAssigned(Integer capacityAssigned) {
            $.capacityAssigned = capacityAssigned;
            return this;
        }

        /**
         * @param clusterId Unique identifier for the cluster.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(String clusterId) {
            $.clusterId = clusterId;
            return this;
        }

        /**
         * @param createdDate The date this cluster was created.
         * 
         * @return builder
         * 
         */
        public Builder createdDate(String createdDate) {
            $.createdDate = createdDate;
            return this;
        }

        /**
         * @param provisioningState The status of the cluster provisioning. The three terminal states are: Succeeded, Failed and Canceled
         * 
         * @return builder
         * 
         */
        public Builder provisioningState(String provisioningState) {
            $.provisioningState = provisioningState;
            return this;
        }

        public ClusterPropertiesResponse build() {
            $.capacityAllocated = Objects.requireNonNull($.capacityAllocated, "expected parameter 'capacityAllocated' to be non-null");
            $.capacityAssigned = Objects.requireNonNull($.capacityAssigned, "expected parameter 'capacityAssigned' to be non-null");
            $.clusterId = Objects.requireNonNull($.clusterId, "expected parameter 'clusterId' to be non-null");
            $.createdDate = Objects.requireNonNull($.createdDate, "expected parameter 'createdDate' to be non-null");
            $.provisioningState = Objects.requireNonNull($.provisioningState, "expected parameter 'provisioningState' to be non-null");
            return $;
        }
    }

}
