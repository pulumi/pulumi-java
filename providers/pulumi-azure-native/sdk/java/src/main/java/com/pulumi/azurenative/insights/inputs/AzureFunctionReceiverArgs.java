// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.insights.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * An azure function receiver.
 * 
 */
public final class AzureFunctionReceiverArgs extends com.pulumi.resources.ResourceArgs {

    public static final AzureFunctionReceiverArgs Empty = new AzureFunctionReceiverArgs();

    /**
     * The azure resource id of the function app.
     * 
     */
    @Import(name="functionAppResourceId", required=true)
    private Output<String> functionAppResourceId;

    /**
     * @return The azure resource id of the function app.
     * 
     */
    public Output<String> functionAppResourceId() {
        return this.functionAppResourceId;
    }

    /**
     * The function name in the function app.
     * 
     */
    @Import(name="functionName", required=true)
    private Output<String> functionName;

    /**
     * @return The function name in the function app.
     * 
     */
    public Output<String> functionName() {
        return this.functionName;
    }

    /**
     * The http trigger url where http request sent to.
     * 
     */
    @Import(name="httpTriggerUrl", required=true)
    private Output<String> httpTriggerUrl;

    /**
     * @return The http trigger url where http request sent to.
     * 
     */
    public Output<String> httpTriggerUrl() {
        return this.httpTriggerUrl;
    }

    /**
     * The name of the azure function receiver. Names must be unique across all receivers within an action group.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the azure function receiver. Names must be unique across all receivers within an action group.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Indicates whether to use common alert schema.
     * 
     */
    @Import(name="useCommonAlertSchema")
    private @Nullable Output<Boolean> useCommonAlertSchema;

    /**
     * @return Indicates whether to use common alert schema.
     * 
     */
    public Optional<Output<Boolean>> useCommonAlertSchema() {
        return Optional.ofNullable(this.useCommonAlertSchema);
    }

    private AzureFunctionReceiverArgs() {}

    private AzureFunctionReceiverArgs(AzureFunctionReceiverArgs $) {
        this.functionAppResourceId = $.functionAppResourceId;
        this.functionName = $.functionName;
        this.httpTriggerUrl = $.httpTriggerUrl;
        this.name = $.name;
        this.useCommonAlertSchema = $.useCommonAlertSchema;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AzureFunctionReceiverArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AzureFunctionReceiverArgs $;

        public Builder() {
            $ = new AzureFunctionReceiverArgs();
        }

        public Builder(AzureFunctionReceiverArgs defaults) {
            $ = new AzureFunctionReceiverArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param functionAppResourceId The azure resource id of the function app.
         * 
         * @return builder
         * 
         */
        public Builder functionAppResourceId(Output<String> functionAppResourceId) {
            $.functionAppResourceId = functionAppResourceId;
            return this;
        }

        /**
         * @param functionAppResourceId The azure resource id of the function app.
         * 
         * @return builder
         * 
         */
        public Builder functionAppResourceId(String functionAppResourceId) {
            return functionAppResourceId(Output.of(functionAppResourceId));
        }

        /**
         * @param functionName The function name in the function app.
         * 
         * @return builder
         * 
         */
        public Builder functionName(Output<String> functionName) {
            $.functionName = functionName;
            return this;
        }

        /**
         * @param functionName The function name in the function app.
         * 
         * @return builder
         * 
         */
        public Builder functionName(String functionName) {
            return functionName(Output.of(functionName));
        }

        /**
         * @param httpTriggerUrl The http trigger url where http request sent to.
         * 
         * @return builder
         * 
         */
        public Builder httpTriggerUrl(Output<String> httpTriggerUrl) {
            $.httpTriggerUrl = httpTriggerUrl;
            return this;
        }

        /**
         * @param httpTriggerUrl The http trigger url where http request sent to.
         * 
         * @return builder
         * 
         */
        public Builder httpTriggerUrl(String httpTriggerUrl) {
            return httpTriggerUrl(Output.of(httpTriggerUrl));
        }

        /**
         * @param name The name of the azure function receiver. Names must be unique across all receivers within an action group.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the azure function receiver. Names must be unique across all receivers within an action group.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param useCommonAlertSchema Indicates whether to use common alert schema.
         * 
         * @return builder
         * 
         */
        public Builder useCommonAlertSchema(@Nullable Output<Boolean> useCommonAlertSchema) {
            $.useCommonAlertSchema = useCommonAlertSchema;
            return this;
        }

        /**
         * @param useCommonAlertSchema Indicates whether to use common alert schema.
         * 
         * @return builder
         * 
         */
        public Builder useCommonAlertSchema(Boolean useCommonAlertSchema) {
            return useCommonAlertSchema(Output.of(useCommonAlertSchema));
        }

        public AzureFunctionReceiverArgs build() {
            $.functionAppResourceId = Objects.requireNonNull($.functionAppResourceId, "expected parameter 'functionAppResourceId' to be non-null");
            $.functionName = Objects.requireNonNull($.functionName, "expected parameter 'functionName' to be non-null");
            $.httpTriggerUrl = Objects.requireNonNull($.httpTriggerUrl, "expected parameter 'httpTriggerUrl' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.useCommonAlertSchema = Codegen.booleanProp("useCommonAlertSchema").output().arg($.useCommonAlertSchema).def(false).getNullable();
            return $;
        }
    }

}
