// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.edgeorder.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;


/**
 * Billing type Purchase meter details
 * 
 */
public final class PurchaseMeterDetailsResponse extends com.pulumi.resources.InvokeArgs {

    public static final PurchaseMeterDetailsResponse Empty = new PurchaseMeterDetailsResponse();

    /**
     * Represents billing type.
     * Expected value is &#39;Purchase&#39;.
     * 
     */
    @Import(name="billingType", required=true)
    private String billingType;

    /**
     * @return Represents billing type.
     * Expected value is &#39;Purchase&#39;.
     * 
     */
    public String billingType() {
        return this.billingType;
    }

    /**
     * Charging type.
     * 
     */
    @Import(name="chargingType", required=true)
    private String chargingType;

    /**
     * @return Charging type.
     * 
     */
    public String chargingType() {
        return this.chargingType;
    }

    /**
     * Billing unit applicable for Pav2 billing
     * 
     */
    @Import(name="multiplier", required=true)
    private Double multiplier;

    /**
     * @return Billing unit applicable for Pav2 billing
     * 
     */
    public Double multiplier() {
        return this.multiplier;
    }

    /**
     * Product Id
     * 
     */
    @Import(name="productId", required=true)
    private String productId;

    /**
     * @return Product Id
     * 
     */
    public String productId() {
        return this.productId;
    }

    /**
     * Sku Id
     * 
     */
    @Import(name="skuId", required=true)
    private String skuId;

    /**
     * @return Sku Id
     * 
     */
    public String skuId() {
        return this.skuId;
    }

    /**
     * Term Id
     * 
     */
    @Import(name="termId", required=true)
    private String termId;

    /**
     * @return Term Id
     * 
     */
    public String termId() {
        return this.termId;
    }

    private PurchaseMeterDetailsResponse() {}

    private PurchaseMeterDetailsResponse(PurchaseMeterDetailsResponse $) {
        this.billingType = $.billingType;
        this.chargingType = $.chargingType;
        this.multiplier = $.multiplier;
        this.productId = $.productId;
        this.skuId = $.skuId;
        this.termId = $.termId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PurchaseMeterDetailsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PurchaseMeterDetailsResponse $;

        public Builder() {
            $ = new PurchaseMeterDetailsResponse();
        }

        public Builder(PurchaseMeterDetailsResponse defaults) {
            $ = new PurchaseMeterDetailsResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param billingType Represents billing type.
         * Expected value is &#39;Purchase&#39;.
         * 
         * @return builder
         * 
         */
        public Builder billingType(String billingType) {
            $.billingType = billingType;
            return this;
        }

        /**
         * @param chargingType Charging type.
         * 
         * @return builder
         * 
         */
        public Builder chargingType(String chargingType) {
            $.chargingType = chargingType;
            return this;
        }

        /**
         * @param multiplier Billing unit applicable for Pav2 billing
         * 
         * @return builder
         * 
         */
        public Builder multiplier(Double multiplier) {
            $.multiplier = multiplier;
            return this;
        }

        /**
         * @param productId Product Id
         * 
         * @return builder
         * 
         */
        public Builder productId(String productId) {
            $.productId = productId;
            return this;
        }

        /**
         * @param skuId Sku Id
         * 
         * @return builder
         * 
         */
        public Builder skuId(String skuId) {
            $.skuId = skuId;
            return this;
        }

        /**
         * @param termId Term Id
         * 
         * @return builder
         * 
         */
        public Builder termId(String termId) {
            $.termId = termId;
            return this;
        }

        public PurchaseMeterDetailsResponse build() {
            $.billingType = Codegen.stringProp("billingType").arg($.billingType).require();
            $.chargingType = Objects.requireNonNull($.chargingType, "expected parameter 'chargingType' to be non-null");
            $.multiplier = Objects.requireNonNull($.multiplier, "expected parameter 'multiplier' to be non-null");
            $.productId = Objects.requireNonNull($.productId, "expected parameter 'productId' to be non-null");
            $.skuId = Objects.requireNonNull($.skuId, "expected parameter 'skuId' to be non-null");
            $.termId = Objects.requireNonNull($.termId, "expected parameter 'termId' to be non-null");
            return $;
        }
    }

}
