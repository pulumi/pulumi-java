// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.purview.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * Gets the resource identifiers of the managed resources.
 * 
 */
public final class AccountPropertiesResponseManagedResources extends com.pulumi.resources.InvokeArgs {

    public static final AccountPropertiesResponseManagedResources Empty = new AccountPropertiesResponseManagedResources();

    /**
     * Gets the managed event hub namespace resource identifier.
     * 
     */
    @Import(name="eventHubNamespace", required=true)
    private String eventHubNamespace;

    /**
     * @return Gets the managed event hub namespace resource identifier.
     * 
     */
    public String eventHubNamespace() {
        return this.eventHubNamespace;
    }

    /**
     * Gets the managed resource group resource identifier. This resource group will host resource dependencies for the account.
     * 
     */
    @Import(name="resourceGroup", required=true)
    private String resourceGroup;

    /**
     * @return Gets the managed resource group resource identifier. This resource group will host resource dependencies for the account.
     * 
     */
    public String resourceGroup() {
        return this.resourceGroup;
    }

    /**
     * Gets the managed storage account resource identifier.
     * 
     */
    @Import(name="storageAccount", required=true)
    private String storageAccount;

    /**
     * @return Gets the managed storage account resource identifier.
     * 
     */
    public String storageAccount() {
        return this.storageAccount;
    }

    private AccountPropertiesResponseManagedResources() {}

    private AccountPropertiesResponseManagedResources(AccountPropertiesResponseManagedResources $) {
        this.eventHubNamespace = $.eventHubNamespace;
        this.resourceGroup = $.resourceGroup;
        this.storageAccount = $.storageAccount;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AccountPropertiesResponseManagedResources defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AccountPropertiesResponseManagedResources $;

        public Builder() {
            $ = new AccountPropertiesResponseManagedResources();
        }

        public Builder(AccountPropertiesResponseManagedResources defaults) {
            $ = new AccountPropertiesResponseManagedResources(Objects.requireNonNull(defaults));
        }

        /**
         * @param eventHubNamespace Gets the managed event hub namespace resource identifier.
         * 
         * @return builder
         * 
         */
        public Builder eventHubNamespace(String eventHubNamespace) {
            $.eventHubNamespace = eventHubNamespace;
            return this;
        }

        /**
         * @param resourceGroup Gets the managed resource group resource identifier. This resource group will host resource dependencies for the account.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroup(String resourceGroup) {
            $.resourceGroup = resourceGroup;
            return this;
        }

        /**
         * @param storageAccount Gets the managed storage account resource identifier.
         * 
         * @return builder
         * 
         */
        public Builder storageAccount(String storageAccount) {
            $.storageAccount = storageAccount;
            return this;
        }

        public AccountPropertiesResponseManagedResources build() {
            $.eventHubNamespace = Objects.requireNonNull($.eventHubNamespace, "expected parameter 'eventHubNamespace' to be non-null");
            $.resourceGroup = Objects.requireNonNull($.resourceGroup, "expected parameter 'resourceGroup' to be non-null");
            $.storageAccount = Objects.requireNonNull($.storageAccount, "expected parameter 'storageAccount' to be non-null");
            return $;
        }
    }

}
