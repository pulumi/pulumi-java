// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network;

import com.pulumi.azurenative.Utilities;
import com.pulumi.azurenative.network.VirtualNetworkPeeringArgs;
import com.pulumi.azurenative.network.outputs.AddressSpaceResponse;
import com.pulumi.azurenative.network.outputs.SubResourceResponse;
import com.pulumi.azurenative.network.outputs.VirtualNetworkBgpCommunitiesResponse;
import com.pulumi.core.Alias;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Peerings in a virtual network resource.
 * API Version: 2020-11-01.
 * 
 * ## Example Usage
 * 
 * ## Import
 * 
 * An existing resource can be imported using its type token, name, and identifier, e.g.
 * 
 * ```sh
 * $ pulumi import azure-native:network:VirtualNetworkPeering peer /subscriptions/subid/resourceGroups/peerTest/providers/Microsoft.Network/virtualNetworks/vnet1/virtualNetworkPeerings/peer 
 * ```
 * 
 */
@ResourceType(type="azure-native:network:VirtualNetworkPeering")
public class VirtualNetworkPeering extends com.pulumi.resources.CustomResource {
    /**
     * Whether the forwarded traffic from the VMs in the local virtual network will be allowed/disallowed in remote virtual network.
     * 
     */
    @Export(name="allowForwardedTraffic", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> allowForwardedTraffic;

    /**
     * @return Whether the forwarded traffic from the VMs in the local virtual network will be allowed/disallowed in remote virtual network.
     * 
     */
    public Output<Optional<Boolean>> allowForwardedTraffic() {
        return Codegen.optional(this.allowForwardedTraffic);
    }
    /**
     * If gateway links can be used in remote virtual networking to link to this virtual network.
     * 
     */
    @Export(name="allowGatewayTransit", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> allowGatewayTransit;

    /**
     * @return If gateway links can be used in remote virtual networking to link to this virtual network.
     * 
     */
    public Output<Optional<Boolean>> allowGatewayTransit() {
        return Codegen.optional(this.allowGatewayTransit);
    }
    /**
     * Whether the VMs in the local virtual network space would be able to access the VMs in remote virtual network space.
     * 
     */
    @Export(name="allowVirtualNetworkAccess", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> allowVirtualNetworkAccess;

    /**
     * @return Whether the VMs in the local virtual network space would be able to access the VMs in remote virtual network space.
     * 
     */
    public Output<Optional<Boolean>> allowVirtualNetworkAccess() {
        return Codegen.optional(this.allowVirtualNetworkAccess);
    }
    /**
     * If we need to verify the provisioning state of the remote gateway.
     * 
     */
    @Export(name="doNotVerifyRemoteGateways", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> doNotVerifyRemoteGateways;

    /**
     * @return If we need to verify the provisioning state of the remote gateway.
     * 
     */
    public Output<Optional<Boolean>> doNotVerifyRemoteGateways() {
        return Codegen.optional(this.doNotVerifyRemoteGateways);
    }
    /**
     * A unique read-only string that changes whenever the resource is updated.
     * 
     */
    @Export(name="etag", type=String.class, parameters={})
    private Output<String> etag;

    /**
     * @return A unique read-only string that changes whenever the resource is updated.
     * 
     */
    public Output<String> etag() {
        return this.etag;
    }
    /**
     * The name of the resource that is unique within a resource group. This name can be used to access the resource.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output</* @Nullable */ String> name;

    /**
     * @return The name of the resource that is unique within a resource group. This name can be used to access the resource.
     * 
     */
    public Output<Optional<String>> name() {
        return Codegen.optional(this.name);
    }
    /**
     * The status of the virtual network peering.
     * 
     */
    @Export(name="peeringState", type=String.class, parameters={})
    private Output</* @Nullable */ String> peeringState;

    /**
     * @return The status of the virtual network peering.
     * 
     */
    public Output<Optional<String>> peeringState() {
        return Codegen.optional(this.peeringState);
    }
    /**
     * The provisioning state of the virtual network peering resource.
     * 
     */
    @Export(name="provisioningState", type=String.class, parameters={})
    private Output<String> provisioningState;

    /**
     * @return The provisioning state of the virtual network peering resource.
     * 
     */
    public Output<String> provisioningState() {
        return this.provisioningState;
    }
    /**
     * The reference to the remote virtual network address space.
     * 
     */
    @Export(name="remoteAddressSpace", type=AddressSpaceResponse.class, parameters={})
    private Output</* @Nullable */ AddressSpaceResponse> remoteAddressSpace;

    /**
     * @return The reference to the remote virtual network address space.
     * 
     */
    public Output<Optional<AddressSpaceResponse>> remoteAddressSpace() {
        return Codegen.optional(this.remoteAddressSpace);
    }
    /**
     * The reference to the remote virtual network&#39;s Bgp Communities.
     * 
     */
    @Export(name="remoteBgpCommunities", type=VirtualNetworkBgpCommunitiesResponse.class, parameters={})
    private Output</* @Nullable */ VirtualNetworkBgpCommunitiesResponse> remoteBgpCommunities;

    /**
     * @return The reference to the remote virtual network&#39;s Bgp Communities.
     * 
     */
    public Output<Optional<VirtualNetworkBgpCommunitiesResponse>> remoteBgpCommunities() {
        return Codegen.optional(this.remoteBgpCommunities);
    }
    /**
     * The reference to the remote virtual network. The remote virtual network can be in the same or different region (preview). See here to register for the preview and learn more (https://docs.microsoft.com/en-us/azure/virtual-network/virtual-network-create-peering).
     * 
     */
    @Export(name="remoteVirtualNetwork", type=SubResourceResponse.class, parameters={})
    private Output</* @Nullable */ SubResourceResponse> remoteVirtualNetwork;

    /**
     * @return The reference to the remote virtual network. The remote virtual network can be in the same or different region (preview). See here to register for the preview and learn more (https://docs.microsoft.com/en-us/azure/virtual-network/virtual-network-create-peering).
     * 
     */
    public Output<Optional<SubResourceResponse>> remoteVirtualNetwork() {
        return Codegen.optional(this.remoteVirtualNetwork);
    }
    /**
     * The resourceGuid property of the Virtual Network peering resource.
     * 
     */
    @Export(name="resourceGuid", type=String.class, parameters={})
    private Output<String> resourceGuid;

    /**
     * @return The resourceGuid property of the Virtual Network peering resource.
     * 
     */
    public Output<String> resourceGuid() {
        return this.resourceGuid;
    }
    /**
     * Resource type.
     * 
     */
    @Export(name="type", type=String.class, parameters={})
    private Output</* @Nullable */ String> type;

    /**
     * @return Resource type.
     * 
     */
    public Output<Optional<String>> type() {
        return Codegen.optional(this.type);
    }
    /**
     * If remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway.
     * 
     */
    @Export(name="useRemoteGateways", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> useRemoteGateways;

    /**
     * @return If remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway.
     * 
     */
    public Output<Optional<Boolean>> useRemoteGateways() {
        return Codegen.optional(this.useRemoteGateways);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public VirtualNetworkPeering(String name) {
        this(name, VirtualNetworkPeeringArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public VirtualNetworkPeering(String name, VirtualNetworkPeeringArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public VirtualNetworkPeering(String name, VirtualNetworkPeeringArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:network:VirtualNetworkPeering", name, args == null ? VirtualNetworkPeeringArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private VirtualNetworkPeering(String name, Output<String> id, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:network:VirtualNetworkPeering", name, null, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .aliases(List.of(
                Output.of(Alias.builder().type("azure-native:network/v20160601:VirtualNetworkPeering").build()),
                Output.of(Alias.builder().type("azure-native:network/v20160901:VirtualNetworkPeering").build()),
                Output.of(Alias.builder().type("azure-native:network/v20161201:VirtualNetworkPeering").build()),
                Output.of(Alias.builder().type("azure-native:network/v20170301:VirtualNetworkPeering").build()),
                Output.of(Alias.builder().type("azure-native:network/v20170601:VirtualNetworkPeering").build()),
                Output.of(Alias.builder().type("azure-native:network/v20170801:VirtualNetworkPeering").build()),
                Output.of(Alias.builder().type("azure-native:network/v20170901:VirtualNetworkPeering").build()),
                Output.of(Alias.builder().type("azure-native:network/v20171001:VirtualNetworkPeering").build()),
                Output.of(Alias.builder().type("azure-native:network/v20171101:VirtualNetworkPeering").build()),
                Output.of(Alias.builder().type("azure-native:network/v20180101:VirtualNetworkPeering").build()),
                Output.of(Alias.builder().type("azure-native:network/v20180201:VirtualNetworkPeering").build()),
                Output.of(Alias.builder().type("azure-native:network/v20180401:VirtualNetworkPeering").build()),
                Output.of(Alias.builder().type("azure-native:network/v20180601:VirtualNetworkPeering").build()),
                Output.of(Alias.builder().type("azure-native:network/v20180701:VirtualNetworkPeering").build()),
                Output.of(Alias.builder().type("azure-native:network/v20180801:VirtualNetworkPeering").build()),
                Output.of(Alias.builder().type("azure-native:network/v20181001:VirtualNetworkPeering").build()),
                Output.of(Alias.builder().type("azure-native:network/v20181101:VirtualNetworkPeering").build()),
                Output.of(Alias.builder().type("azure-native:network/v20181201:VirtualNetworkPeering").build()),
                Output.of(Alias.builder().type("azure-native:network/v20190201:VirtualNetworkPeering").build()),
                Output.of(Alias.builder().type("azure-native:network/v20190401:VirtualNetworkPeering").build()),
                Output.of(Alias.builder().type("azure-native:network/v20190601:VirtualNetworkPeering").build()),
                Output.of(Alias.builder().type("azure-native:network/v20190701:VirtualNetworkPeering").build()),
                Output.of(Alias.builder().type("azure-native:network/v20190801:VirtualNetworkPeering").build()),
                Output.of(Alias.builder().type("azure-native:network/v20190901:VirtualNetworkPeering").build()),
                Output.of(Alias.builder().type("azure-native:network/v20191101:VirtualNetworkPeering").build()),
                Output.of(Alias.builder().type("azure-native:network/v20191201:VirtualNetworkPeering").build()),
                Output.of(Alias.builder().type("azure-native:network/v20200301:VirtualNetworkPeering").build()),
                Output.of(Alias.builder().type("azure-native:network/v20200401:VirtualNetworkPeering").build()),
                Output.of(Alias.builder().type("azure-native:network/v20200501:VirtualNetworkPeering").build()),
                Output.of(Alias.builder().type("azure-native:network/v20200601:VirtualNetworkPeering").build()),
                Output.of(Alias.builder().type("azure-native:network/v20200701:VirtualNetworkPeering").build()),
                Output.of(Alias.builder().type("azure-native:network/v20200801:VirtualNetworkPeering").build()),
                Output.of(Alias.builder().type("azure-native:network/v20201101:VirtualNetworkPeering").build()),
                Output.of(Alias.builder().type("azure-native:network/v20210201:VirtualNetworkPeering").build()),
                Output.of(Alias.builder().type("azure-native:network/v20210301:VirtualNetworkPeering").build()),
                Output.of(Alias.builder().type("azure-native:network/v20210501:VirtualNetworkPeering").build()),
                Output.of(Alias.builder().type("azure-native:network/v20210801:VirtualNetworkPeering").build())
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static VirtualNetworkPeering get(String name, Output<String> id, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new VirtualNetworkPeering(name, id, options);
    }
}
