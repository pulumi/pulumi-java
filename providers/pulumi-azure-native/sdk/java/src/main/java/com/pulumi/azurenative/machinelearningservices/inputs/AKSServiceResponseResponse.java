// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.machinelearningservices.inputs;

import com.pulumi.azurenative.machinelearningservices.inputs.AKSServiceResponseResponseAutoScaler;
import com.pulumi.azurenative.machinelearningservices.inputs.AKSServiceResponseResponseDataCollection;
import com.pulumi.azurenative.machinelearningservices.inputs.AKSServiceResponseResponseDeploymentStatus;
import com.pulumi.azurenative.machinelearningservices.inputs.AKSServiceResponseResponseEnvironmentImageRequest;
import com.pulumi.azurenative.machinelearningservices.inputs.AKSServiceResponseResponseLivenessProbeRequirements;
import com.pulumi.azurenative.machinelearningservices.inputs.ContainerResourceRequirementsResponse;
import com.pulumi.azurenative.machinelearningservices.inputs.ModelResponse;
import com.pulumi.azurenative.machinelearningservices.inputs.ServiceResponseBaseResponseError;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The response for an AKS service.
 * 
 */
public final class AKSServiceResponseResponse extends com.pulumi.resources.InvokeArgs {

    public static final AKSServiceResponseResponse Empty = new AKSServiceResponseResponse();

    /**
     * Whether or not AAD authentication is enabled.
     * 
     */
    @Import(name="aadAuthEnabled")
      private final @Nullable Boolean aadAuthEnabled;

    public Optional<Boolean> aadAuthEnabled() {
        return this.aadAuthEnabled == null ? Optional.empty() : Optional.ofNullable(this.aadAuthEnabled);
    }

    /**
     * Whether or not Application Insights is enabled.
     * 
     */
    @Import(name="appInsightsEnabled")
      private final @Nullable Boolean appInsightsEnabled;

    public Optional<Boolean> appInsightsEnabled() {
        return this.appInsightsEnabled == null ? Optional.empty() : Optional.ofNullable(this.appInsightsEnabled);
    }

    /**
     * Whether or not authentication is enabled.
     * 
     */
    @Import(name="authEnabled")
      private final @Nullable Boolean authEnabled;

    public Optional<Boolean> authEnabled() {
        return this.authEnabled == null ? Optional.empty() : Optional.ofNullable(this.authEnabled);
    }

    /**
     * The auto scaler properties.
     * 
     */
    @Import(name="autoScaler")
      private final @Nullable AKSServiceResponseResponseAutoScaler autoScaler;

    public Optional<AKSServiceResponseResponseAutoScaler> autoScaler() {
        return this.autoScaler == null ? Optional.empty() : Optional.ofNullable(this.autoScaler);
    }

    /**
     * The name of the compute resource.
     * 
     */
    @Import(name="computeName")
      private final @Nullable String computeName;

    public Optional<String> computeName() {
        return this.computeName == null ? Optional.empty() : Optional.ofNullable(this.computeName);
    }

    /**
     * The compute environment type for the service.
     * Expected value is &#39;AKS&#39;.
     * 
     */
    @Import(name="computeType", required=true)
      private final String computeType;

    public String computeType() {
        return this.computeType;
    }

    /**
     * The container resource requirements.
     * 
     */
    @Import(name="containerResourceRequirements")
      private final @Nullable ContainerResourceRequirementsResponse containerResourceRequirements;

    public Optional<ContainerResourceRequirementsResponse> containerResourceRequirements() {
        return this.containerResourceRequirements == null ? Optional.empty() : Optional.ofNullable(this.containerResourceRequirements);
    }

    /**
     * Details of the data collection options specified.
     * 
     */
    @Import(name="dataCollection")
      private final @Nullable AKSServiceResponseResponseDataCollection dataCollection;

    public Optional<AKSServiceResponseResponseDataCollection> dataCollection() {
        return this.dataCollection == null ? Optional.empty() : Optional.ofNullable(this.dataCollection);
    }

    /**
     * The deployment status.
     * 
     */
    @Import(name="deploymentStatus", required=true)
      private final AKSServiceResponseResponseDeploymentStatus deploymentStatus;

    public AKSServiceResponseResponseDeploymentStatus deploymentStatus() {
        return this.deploymentStatus;
    }

    /**
     * The deployment type for the service.
     * 
     */
    @Import(name="deploymentType")
      private final @Nullable String deploymentType;

    public Optional<String> deploymentType() {
        return this.deploymentType == null ? Optional.empty() : Optional.ofNullable(this.deploymentType);
    }

    /**
     * The service description.
     * 
     */
    @Import(name="description")
      private final @Nullable String description;

    public Optional<String> description() {
        return this.description == null ? Optional.empty() : Optional.ofNullable(this.description);
    }

    /**
     * The Environment, models and assets used for inferencing.
     * 
     */
    @Import(name="environmentImageRequest")
      private final @Nullable AKSServiceResponseResponseEnvironmentImageRequest environmentImageRequest;

    public Optional<AKSServiceResponseResponseEnvironmentImageRequest> environmentImageRequest() {
        return this.environmentImageRequest == null ? Optional.empty() : Optional.ofNullable(this.environmentImageRequest);
    }

    /**
     * The error details.
     * 
     */
    @Import(name="error", required=true)
      private final ServiceResponseBaseResponseError error;

    public ServiceResponseBaseResponseError error() {
        return this.error;
    }

    /**
     * Is this the default variant.
     * 
     */
    @Import(name="isDefault")
      private final @Nullable Boolean isDefault;

    public Optional<Boolean> isDefault() {
        return this.isDefault == null ? Optional.empty() : Optional.ofNullable(this.isDefault);
    }

    /**
     * The service tag dictionary. Tags are mutable.
     * 
     */
    @Import(name="kvTags")
      private final @Nullable Map<String,String> kvTags;

    public Map<String,String> kvTags() {
        return this.kvTags == null ? Map.of() : this.kvTags;
    }

    /**
     * The liveness probe requirements.
     * 
     */
    @Import(name="livenessProbeRequirements")
      private final @Nullable AKSServiceResponseResponseLivenessProbeRequirements livenessProbeRequirements;

    public Optional<AKSServiceResponseResponseLivenessProbeRequirements> livenessProbeRequirements() {
        return this.livenessProbeRequirements == null ? Optional.empty() : Optional.ofNullable(this.livenessProbeRequirements);
    }

    /**
     * The maximum number of concurrent requests per container.
     * 
     */
    @Import(name="maxConcurrentRequestsPerContainer")
      private final @Nullable Integer maxConcurrentRequestsPerContainer;

    public Optional<Integer> maxConcurrentRequestsPerContainer() {
        return this.maxConcurrentRequestsPerContainer == null ? Optional.empty() : Optional.ofNullable(this.maxConcurrentRequestsPerContainer);
    }

    /**
     * Maximum time a request will wait in the queue (in milliseconds). After this time, the service will return 503 (Service Unavailable)
     * 
     */
    @Import(name="maxQueueWaitMs")
      private final @Nullable Integer maxQueueWaitMs;

    public Optional<Integer> maxQueueWaitMs() {
        return this.maxQueueWaitMs == null ? Optional.empty() : Optional.ofNullable(this.maxQueueWaitMs);
    }

    /**
     * Details on the models and configurations.
     * 
     */
    @Import(name="modelConfigMap", required=true)
      private final Map<String,Object> modelConfigMap;

    public Map<String,Object> modelConfigMap() {
        return this.modelConfigMap;
    }

    /**
     * The list of models.
     * 
     */
    @Import(name="models")
      private final @Nullable List<ModelResponse> models;

    public List<ModelResponse> models() {
        return this.models == null ? List.of() : this.models;
    }

    /**
     * The Kubernetes namespace of the deployment.
     * 
     */
    @Import(name="namespace")
      private final @Nullable String namespace;

    public Optional<String> namespace() {
        return this.namespace == null ? Optional.empty() : Optional.ofNullable(this.namespace);
    }

    /**
     * The number of replicas on the cluster.
     * 
     */
    @Import(name="numReplicas")
      private final @Nullable Integer numReplicas;

    public Optional<Integer> numReplicas() {
        return this.numReplicas == null ? Optional.empty() : Optional.ofNullable(this.numReplicas);
    }

    /**
     * The service property dictionary. Properties are immutable.
     * 
     */
    @Import(name="properties")
      private final @Nullable Map<String,String> properties;

    public Map<String,String> properties() {
        return this.properties == null ? Map.of() : this.properties;
    }

    /**
     * The scoring timeout in milliseconds.
     * 
     */
    @Import(name="scoringTimeoutMs")
      private final @Nullable Integer scoringTimeoutMs;

    public Optional<Integer> scoringTimeoutMs() {
        return this.scoringTimeoutMs == null ? Optional.empty() : Optional.ofNullable(this.scoringTimeoutMs);
    }

    /**
     * The Uri for sending scoring requests.
     * 
     */
    @Import(name="scoringUri", required=true)
      private final String scoringUri;

    public String scoringUri() {
        return this.scoringUri;
    }

    /**
     * The current state of the service.
     * 
     */
    @Import(name="state", required=true)
      private final String state;

    public String state() {
        return this.state;
    }

    /**
     * The Uri for sending swagger requests.
     * 
     */
    @Import(name="swaggerUri", required=true)
      private final String swaggerUri;

    public String swaggerUri() {
        return this.swaggerUri;
    }

    /**
     * The amount of traffic variant receives.
     * 
     */
    @Import(name="trafficPercentile")
      private final @Nullable Double trafficPercentile;

    public Optional<Double> trafficPercentile() {
        return this.trafficPercentile == null ? Optional.empty() : Optional.ofNullable(this.trafficPercentile);
    }

    /**
     * The type of the variant.
     * 
     */
    @Import(name="type")
      private final @Nullable String type;

    public Optional<String> type() {
        return this.type == null ? Optional.empty() : Optional.ofNullable(this.type);
    }

    public AKSServiceResponseResponse(
        @Nullable Boolean aadAuthEnabled,
        @Nullable Boolean appInsightsEnabled,
        @Nullable Boolean authEnabled,
        @Nullable AKSServiceResponseResponseAutoScaler autoScaler,
        @Nullable String computeName,
        String computeType,
        @Nullable ContainerResourceRequirementsResponse containerResourceRequirements,
        @Nullable AKSServiceResponseResponseDataCollection dataCollection,
        AKSServiceResponseResponseDeploymentStatus deploymentStatus,
        @Nullable String deploymentType,
        @Nullable String description,
        @Nullable AKSServiceResponseResponseEnvironmentImageRequest environmentImageRequest,
        ServiceResponseBaseResponseError error,
        @Nullable Boolean isDefault,
        @Nullable Map<String,String> kvTags,
        @Nullable AKSServiceResponseResponseLivenessProbeRequirements livenessProbeRequirements,
        @Nullable Integer maxConcurrentRequestsPerContainer,
        @Nullable Integer maxQueueWaitMs,
        Map<String,Object> modelConfigMap,
        @Nullable List<ModelResponse> models,
        @Nullable String namespace,
        @Nullable Integer numReplicas,
        @Nullable Map<String,String> properties,
        @Nullable Integer scoringTimeoutMs,
        String scoringUri,
        String state,
        String swaggerUri,
        @Nullable Double trafficPercentile,
        @Nullable String type) {
        this.aadAuthEnabled = aadAuthEnabled;
        this.appInsightsEnabled = appInsightsEnabled;
        this.authEnabled = authEnabled;
        this.autoScaler = autoScaler;
        this.computeName = computeName;
        this.computeType = Codegen.stringProp("computeType").arg(computeType).require();
        this.containerResourceRequirements = containerResourceRequirements;
        this.dataCollection = dataCollection;
        this.deploymentStatus = Objects.requireNonNull(deploymentStatus, "expected parameter 'deploymentStatus' to be non-null");
        this.deploymentType = deploymentType;
        this.description = description;
        this.environmentImageRequest = environmentImageRequest;
        this.error = Objects.requireNonNull(error, "expected parameter 'error' to be non-null");
        this.isDefault = isDefault;
        this.kvTags = kvTags;
        this.livenessProbeRequirements = livenessProbeRequirements;
        this.maxConcurrentRequestsPerContainer = maxConcurrentRequestsPerContainer;
        this.maxQueueWaitMs = maxQueueWaitMs;
        this.modelConfigMap = Objects.requireNonNull(modelConfigMap, "expected parameter 'modelConfigMap' to be non-null");
        this.models = models;
        this.namespace = namespace;
        this.numReplicas = numReplicas;
        this.properties = properties;
        this.scoringTimeoutMs = scoringTimeoutMs;
        this.scoringUri = Objects.requireNonNull(scoringUri, "expected parameter 'scoringUri' to be non-null");
        this.state = Objects.requireNonNull(state, "expected parameter 'state' to be non-null");
        this.swaggerUri = Objects.requireNonNull(swaggerUri, "expected parameter 'swaggerUri' to be non-null");
        this.trafficPercentile = trafficPercentile;
        this.type = type;
    }

    private AKSServiceResponseResponse() {
        this.aadAuthEnabled = null;
        this.appInsightsEnabled = null;
        this.authEnabled = null;
        this.autoScaler = null;
        this.computeName = null;
        this.computeType = null;
        this.containerResourceRequirements = null;
        this.dataCollection = null;
        this.deploymentStatus = null;
        this.deploymentType = null;
        this.description = null;
        this.environmentImageRequest = null;
        this.error = null;
        this.isDefault = null;
        this.kvTags = Map.of();
        this.livenessProbeRequirements = null;
        this.maxConcurrentRequestsPerContainer = null;
        this.maxQueueWaitMs = null;
        this.modelConfigMap = Map.of();
        this.models = List.of();
        this.namespace = null;
        this.numReplicas = null;
        this.properties = Map.of();
        this.scoringTimeoutMs = null;
        this.scoringUri = null;
        this.state = null;
        this.swaggerUri = null;
        this.trafficPercentile = null;
        this.type = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AKSServiceResponseResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Boolean aadAuthEnabled;
        private @Nullable Boolean appInsightsEnabled;
        private @Nullable Boolean authEnabled;
        private @Nullable AKSServiceResponseResponseAutoScaler autoScaler;
        private @Nullable String computeName;
        private String computeType;
        private @Nullable ContainerResourceRequirementsResponse containerResourceRequirements;
        private @Nullable AKSServiceResponseResponseDataCollection dataCollection;
        private AKSServiceResponseResponseDeploymentStatus deploymentStatus;
        private @Nullable String deploymentType;
        private @Nullable String description;
        private @Nullable AKSServiceResponseResponseEnvironmentImageRequest environmentImageRequest;
        private ServiceResponseBaseResponseError error;
        private @Nullable Boolean isDefault;
        private @Nullable Map<String,String> kvTags;
        private @Nullable AKSServiceResponseResponseLivenessProbeRequirements livenessProbeRequirements;
        private @Nullable Integer maxConcurrentRequestsPerContainer;
        private @Nullable Integer maxQueueWaitMs;
        private Map<String,Object> modelConfigMap;
        private @Nullable List<ModelResponse> models;
        private @Nullable String namespace;
        private @Nullable Integer numReplicas;
        private @Nullable Map<String,String> properties;
        private @Nullable Integer scoringTimeoutMs;
        private String scoringUri;
        private String state;
        private String swaggerUri;
        private @Nullable Double trafficPercentile;
        private @Nullable String type;

        public Builder() {
    	      // Empty
        }

        public Builder(AKSServiceResponseResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aadAuthEnabled = defaults.aadAuthEnabled;
    	      this.appInsightsEnabled = defaults.appInsightsEnabled;
    	      this.authEnabled = defaults.authEnabled;
    	      this.autoScaler = defaults.autoScaler;
    	      this.computeName = defaults.computeName;
    	      this.computeType = defaults.computeType;
    	      this.containerResourceRequirements = defaults.containerResourceRequirements;
    	      this.dataCollection = defaults.dataCollection;
    	      this.deploymentStatus = defaults.deploymentStatus;
    	      this.deploymentType = defaults.deploymentType;
    	      this.description = defaults.description;
    	      this.environmentImageRequest = defaults.environmentImageRequest;
    	      this.error = defaults.error;
    	      this.isDefault = defaults.isDefault;
    	      this.kvTags = defaults.kvTags;
    	      this.livenessProbeRequirements = defaults.livenessProbeRequirements;
    	      this.maxConcurrentRequestsPerContainer = defaults.maxConcurrentRequestsPerContainer;
    	      this.maxQueueWaitMs = defaults.maxQueueWaitMs;
    	      this.modelConfigMap = defaults.modelConfigMap;
    	      this.models = defaults.models;
    	      this.namespace = defaults.namespace;
    	      this.numReplicas = defaults.numReplicas;
    	      this.properties = defaults.properties;
    	      this.scoringTimeoutMs = defaults.scoringTimeoutMs;
    	      this.scoringUri = defaults.scoringUri;
    	      this.state = defaults.state;
    	      this.swaggerUri = defaults.swaggerUri;
    	      this.trafficPercentile = defaults.trafficPercentile;
    	      this.type = defaults.type;
        }

        public Builder aadAuthEnabled(@Nullable Boolean aadAuthEnabled) {
            this.aadAuthEnabled = aadAuthEnabled;
            return this;
        }
        public Builder appInsightsEnabled(@Nullable Boolean appInsightsEnabled) {
            this.appInsightsEnabled = appInsightsEnabled;
            return this;
        }
        public Builder authEnabled(@Nullable Boolean authEnabled) {
            this.authEnabled = authEnabled;
            return this;
        }
        public Builder autoScaler(@Nullable AKSServiceResponseResponseAutoScaler autoScaler) {
            this.autoScaler = autoScaler;
            return this;
        }
        public Builder computeName(@Nullable String computeName) {
            this.computeName = computeName;
            return this;
        }
        public Builder computeType(String computeType) {
            this.computeType = Objects.requireNonNull(computeType);
            return this;
        }
        public Builder containerResourceRequirements(@Nullable ContainerResourceRequirementsResponse containerResourceRequirements) {
            this.containerResourceRequirements = containerResourceRequirements;
            return this;
        }
        public Builder dataCollection(@Nullable AKSServiceResponseResponseDataCollection dataCollection) {
            this.dataCollection = dataCollection;
            return this;
        }
        public Builder deploymentStatus(AKSServiceResponseResponseDeploymentStatus deploymentStatus) {
            this.deploymentStatus = Objects.requireNonNull(deploymentStatus);
            return this;
        }
        public Builder deploymentType(@Nullable String deploymentType) {
            this.deploymentType = deploymentType;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        public Builder environmentImageRequest(@Nullable AKSServiceResponseResponseEnvironmentImageRequest environmentImageRequest) {
            this.environmentImageRequest = environmentImageRequest;
            return this;
        }
        public Builder error(ServiceResponseBaseResponseError error) {
            this.error = Objects.requireNonNull(error);
            return this;
        }
        public Builder isDefault(@Nullable Boolean isDefault) {
            this.isDefault = isDefault;
            return this;
        }
        public Builder kvTags(@Nullable Map<String,String> kvTags) {
            this.kvTags = kvTags;
            return this;
        }
        public Builder livenessProbeRequirements(@Nullable AKSServiceResponseResponseLivenessProbeRequirements livenessProbeRequirements) {
            this.livenessProbeRequirements = livenessProbeRequirements;
            return this;
        }
        public Builder maxConcurrentRequestsPerContainer(@Nullable Integer maxConcurrentRequestsPerContainer) {
            this.maxConcurrentRequestsPerContainer = maxConcurrentRequestsPerContainer;
            return this;
        }
        public Builder maxQueueWaitMs(@Nullable Integer maxQueueWaitMs) {
            this.maxQueueWaitMs = maxQueueWaitMs;
            return this;
        }
        public Builder modelConfigMap(Map<String,Object> modelConfigMap) {
            this.modelConfigMap = Objects.requireNonNull(modelConfigMap);
            return this;
        }
        public Builder models(@Nullable List<ModelResponse> models) {
            this.models = models;
            return this;
        }
        public Builder models(ModelResponse... models) {
            return models(List.of(models));
        }
        public Builder namespace(@Nullable String namespace) {
            this.namespace = namespace;
            return this;
        }
        public Builder numReplicas(@Nullable Integer numReplicas) {
            this.numReplicas = numReplicas;
            return this;
        }
        public Builder properties(@Nullable Map<String,String> properties) {
            this.properties = properties;
            return this;
        }
        public Builder scoringTimeoutMs(@Nullable Integer scoringTimeoutMs) {
            this.scoringTimeoutMs = scoringTimeoutMs;
            return this;
        }
        public Builder scoringUri(String scoringUri) {
            this.scoringUri = Objects.requireNonNull(scoringUri);
            return this;
        }
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        public Builder swaggerUri(String swaggerUri) {
            this.swaggerUri = Objects.requireNonNull(swaggerUri);
            return this;
        }
        public Builder trafficPercentile(@Nullable Double trafficPercentile) {
            this.trafficPercentile = trafficPercentile;
            return this;
        }
        public Builder type(@Nullable String type) {
            this.type = type;
            return this;
        }        public AKSServiceResponseResponse build() {
            return new AKSServiceResponseResponse(aadAuthEnabled, appInsightsEnabled, authEnabled, autoScaler, computeName, computeType, containerResourceRequirements, dataCollection, deploymentStatus, deploymentType, description, environmentImageRequest, error, isDefault, kvTags, livenessProbeRequirements, maxConcurrentRequestsPerContainer, maxQueueWaitMs, modelConfigMap, models, namespace, numReplicas, properties, scoringTimeoutMs, scoringUri, state, swaggerUri, trafficPercentile, type);
        }
    }
}
