// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.machinelearningservices.inputs;

import com.pulumi.azurenative.machinelearningservices.inputs.AKSServiceResponseResponseAutoScaler;
import com.pulumi.azurenative.machinelearningservices.inputs.AKSServiceResponseResponseDataCollection;
import com.pulumi.azurenative.machinelearningservices.inputs.AKSServiceResponseResponseDeploymentStatus;
import com.pulumi.azurenative.machinelearningservices.inputs.AKSServiceResponseResponseEnvironmentImageRequest;
import com.pulumi.azurenative.machinelearningservices.inputs.AKSServiceResponseResponseLivenessProbeRequirements;
import com.pulumi.azurenative.machinelearningservices.inputs.ContainerResourceRequirementsResponse;
import com.pulumi.azurenative.machinelearningservices.inputs.ModelResponse;
import com.pulumi.azurenative.machinelearningservices.inputs.ServiceResponseBaseResponseError;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The response for an AKS service.
 * 
 */
public final class AKSServiceResponseResponse extends com.pulumi.resources.InvokeArgs {

    public static final AKSServiceResponseResponse Empty = new AKSServiceResponseResponse();

    /**
     * Whether or not AAD authentication is enabled.
     * 
     */
    @Import(name="aadAuthEnabled")
    private @Nullable Boolean aadAuthEnabled;

    public Optional<Boolean> aadAuthEnabled() {
        return Optional.ofNullable(this.aadAuthEnabled);
    }

    /**
     * Whether or not Application Insights is enabled.
     * 
     */
    @Import(name="appInsightsEnabled")
    private @Nullable Boolean appInsightsEnabled;

    public Optional<Boolean> appInsightsEnabled() {
        return Optional.ofNullable(this.appInsightsEnabled);
    }

    /**
     * Whether or not authentication is enabled.
     * 
     */
    @Import(name="authEnabled")
    private @Nullable Boolean authEnabled;

    public Optional<Boolean> authEnabled() {
        return Optional.ofNullable(this.authEnabled);
    }

    /**
     * The auto scaler properties.
     * 
     */
    @Import(name="autoScaler")
    private @Nullable AKSServiceResponseResponseAutoScaler autoScaler;

    public Optional<AKSServiceResponseResponseAutoScaler> autoScaler() {
        return Optional.ofNullable(this.autoScaler);
    }

    /**
     * The name of the compute resource.
     * 
     */
    @Import(name="computeName")
    private @Nullable String computeName;

    public Optional<String> computeName() {
        return Optional.ofNullable(this.computeName);
    }

    /**
     * The compute environment type for the service.
     * Expected value is &#39;AKS&#39;.
     * 
     */
    @Import(name="computeType", required=true)
    private String computeType;

    public String computeType() {
        return this.computeType;
    }

    /**
     * The container resource requirements.
     * 
     */
    @Import(name="containerResourceRequirements")
    private @Nullable ContainerResourceRequirementsResponse containerResourceRequirements;

    public Optional<ContainerResourceRequirementsResponse> containerResourceRequirements() {
        return Optional.ofNullable(this.containerResourceRequirements);
    }

    /**
     * Details of the data collection options specified.
     * 
     */
    @Import(name="dataCollection")
    private @Nullable AKSServiceResponseResponseDataCollection dataCollection;

    public Optional<AKSServiceResponseResponseDataCollection> dataCollection() {
        return Optional.ofNullable(this.dataCollection);
    }

    /**
     * The deployment status.
     * 
     */
    @Import(name="deploymentStatus", required=true)
    private AKSServiceResponseResponseDeploymentStatus deploymentStatus;

    public AKSServiceResponseResponseDeploymentStatus deploymentStatus() {
        return this.deploymentStatus;
    }

    /**
     * The deployment type for the service.
     * 
     */
    @Import(name="deploymentType")
    private @Nullable String deploymentType;

    public Optional<String> deploymentType() {
        return Optional.ofNullable(this.deploymentType);
    }

    /**
     * The service description.
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The Environment, models and assets used for inferencing.
     * 
     */
    @Import(name="environmentImageRequest")
    private @Nullable AKSServiceResponseResponseEnvironmentImageRequest environmentImageRequest;

    public Optional<AKSServiceResponseResponseEnvironmentImageRequest> environmentImageRequest() {
        return Optional.ofNullable(this.environmentImageRequest);
    }

    /**
     * The error details.
     * 
     */
    @Import(name="error", required=true)
    private ServiceResponseBaseResponseError error;

    public ServiceResponseBaseResponseError error() {
        return this.error;
    }

    /**
     * Is this the default variant.
     * 
     */
    @Import(name="isDefault")
    private @Nullable Boolean isDefault;

    public Optional<Boolean> isDefault() {
        return Optional.ofNullable(this.isDefault);
    }

    /**
     * The service tag dictionary. Tags are mutable.
     * 
     */
    @Import(name="kvTags")
    private @Nullable Map<String,String> kvTags;

    public Optional<Map<String,String>> kvTags() {
        return Optional.ofNullable(this.kvTags);
    }

    /**
     * The liveness probe requirements.
     * 
     */
    @Import(name="livenessProbeRequirements")
    private @Nullable AKSServiceResponseResponseLivenessProbeRequirements livenessProbeRequirements;

    public Optional<AKSServiceResponseResponseLivenessProbeRequirements> livenessProbeRequirements() {
        return Optional.ofNullable(this.livenessProbeRequirements);
    }

    /**
     * The maximum number of concurrent requests per container.
     * 
     */
    @Import(name="maxConcurrentRequestsPerContainer")
    private @Nullable Integer maxConcurrentRequestsPerContainer;

    public Optional<Integer> maxConcurrentRequestsPerContainer() {
        return Optional.ofNullable(this.maxConcurrentRequestsPerContainer);
    }

    /**
     * Maximum time a request will wait in the queue (in milliseconds). After this time, the service will return 503 (Service Unavailable)
     * 
     */
    @Import(name="maxQueueWaitMs")
    private @Nullable Integer maxQueueWaitMs;

    public Optional<Integer> maxQueueWaitMs() {
        return Optional.ofNullable(this.maxQueueWaitMs);
    }

    /**
     * Details on the models and configurations.
     * 
     */
    @Import(name="modelConfigMap", required=true)
    private Map<String,Object> modelConfigMap;

    public Map<String,Object> modelConfigMap() {
        return this.modelConfigMap;
    }

    /**
     * The list of models.
     * 
     */
    @Import(name="models")
    private @Nullable List<ModelResponse> models;

    public Optional<List<ModelResponse>> models() {
        return Optional.ofNullable(this.models);
    }

    /**
     * The Kubernetes namespace of the deployment.
     * 
     */
    @Import(name="namespace")
    private @Nullable String namespace;

    public Optional<String> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    /**
     * The number of replicas on the cluster.
     * 
     */
    @Import(name="numReplicas")
    private @Nullable Integer numReplicas;

    public Optional<Integer> numReplicas() {
        return Optional.ofNullable(this.numReplicas);
    }

    /**
     * The service property dictionary. Properties are immutable.
     * 
     */
    @Import(name="properties")
    private @Nullable Map<String,String> properties;

    public Optional<Map<String,String>> properties() {
        return Optional.ofNullable(this.properties);
    }

    /**
     * The scoring timeout in milliseconds.
     * 
     */
    @Import(name="scoringTimeoutMs")
    private @Nullable Integer scoringTimeoutMs;

    public Optional<Integer> scoringTimeoutMs() {
        return Optional.ofNullable(this.scoringTimeoutMs);
    }

    /**
     * The Uri for sending scoring requests.
     * 
     */
    @Import(name="scoringUri", required=true)
    private String scoringUri;

    public String scoringUri() {
        return this.scoringUri;
    }

    /**
     * The current state of the service.
     * 
     */
    @Import(name="state", required=true)
    private String state;

    public String state() {
        return this.state;
    }

    /**
     * The Uri for sending swagger requests.
     * 
     */
    @Import(name="swaggerUri", required=true)
    private String swaggerUri;

    public String swaggerUri() {
        return this.swaggerUri;
    }

    /**
     * The amount of traffic variant receives.
     * 
     */
    @Import(name="trafficPercentile")
    private @Nullable Double trafficPercentile;

    public Optional<Double> trafficPercentile() {
        return Optional.ofNullable(this.trafficPercentile);
    }

    /**
     * The type of the variant.
     * 
     */
    @Import(name="type")
    private @Nullable String type;

    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    private AKSServiceResponseResponse() {}

    private AKSServiceResponseResponse(AKSServiceResponseResponse $) {
        this.aadAuthEnabled = $.aadAuthEnabled;
        this.appInsightsEnabled = $.appInsightsEnabled;
        this.authEnabled = $.authEnabled;
        this.autoScaler = $.autoScaler;
        this.computeName = $.computeName;
        this.computeType = $.computeType;
        this.containerResourceRequirements = $.containerResourceRequirements;
        this.dataCollection = $.dataCollection;
        this.deploymentStatus = $.deploymentStatus;
        this.deploymentType = $.deploymentType;
        this.description = $.description;
        this.environmentImageRequest = $.environmentImageRequest;
        this.error = $.error;
        this.isDefault = $.isDefault;
        this.kvTags = $.kvTags;
        this.livenessProbeRequirements = $.livenessProbeRequirements;
        this.maxConcurrentRequestsPerContainer = $.maxConcurrentRequestsPerContainer;
        this.maxQueueWaitMs = $.maxQueueWaitMs;
        this.modelConfigMap = $.modelConfigMap;
        this.models = $.models;
        this.namespace = $.namespace;
        this.numReplicas = $.numReplicas;
        this.properties = $.properties;
        this.scoringTimeoutMs = $.scoringTimeoutMs;
        this.scoringUri = $.scoringUri;
        this.state = $.state;
        this.swaggerUri = $.swaggerUri;
        this.trafficPercentile = $.trafficPercentile;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AKSServiceResponseResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AKSServiceResponseResponse $;

        public Builder() {
            $ = new AKSServiceResponseResponse();
        }

        public Builder(AKSServiceResponseResponse defaults) {
            $ = new AKSServiceResponseResponse(Objects.requireNonNull(defaults));
        }

        public Builder aadAuthEnabled(@Nullable Boolean aadAuthEnabled) {
            $.aadAuthEnabled = aadAuthEnabled;
            return this;
        }

        public Builder appInsightsEnabled(@Nullable Boolean appInsightsEnabled) {
            $.appInsightsEnabled = appInsightsEnabled;
            return this;
        }

        public Builder authEnabled(@Nullable Boolean authEnabled) {
            $.authEnabled = authEnabled;
            return this;
        }

        public Builder autoScaler(@Nullable AKSServiceResponseResponseAutoScaler autoScaler) {
            $.autoScaler = autoScaler;
            return this;
        }

        public Builder computeName(@Nullable String computeName) {
            $.computeName = computeName;
            return this;
        }

        public Builder computeType(String computeType) {
            $.computeType = computeType;
            return this;
        }

        public Builder containerResourceRequirements(@Nullable ContainerResourceRequirementsResponse containerResourceRequirements) {
            $.containerResourceRequirements = containerResourceRequirements;
            return this;
        }

        public Builder dataCollection(@Nullable AKSServiceResponseResponseDataCollection dataCollection) {
            $.dataCollection = dataCollection;
            return this;
        }

        public Builder deploymentStatus(AKSServiceResponseResponseDeploymentStatus deploymentStatus) {
            $.deploymentStatus = deploymentStatus;
            return this;
        }

        public Builder deploymentType(@Nullable String deploymentType) {
            $.deploymentType = deploymentType;
            return this;
        }

        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        public Builder environmentImageRequest(@Nullable AKSServiceResponseResponseEnvironmentImageRequest environmentImageRequest) {
            $.environmentImageRequest = environmentImageRequest;
            return this;
        }

        public Builder error(ServiceResponseBaseResponseError error) {
            $.error = error;
            return this;
        }

        public Builder isDefault(@Nullable Boolean isDefault) {
            $.isDefault = isDefault;
            return this;
        }

        public Builder kvTags(@Nullable Map<String,String> kvTags) {
            $.kvTags = kvTags;
            return this;
        }

        public Builder livenessProbeRequirements(@Nullable AKSServiceResponseResponseLivenessProbeRequirements livenessProbeRequirements) {
            $.livenessProbeRequirements = livenessProbeRequirements;
            return this;
        }

        public Builder maxConcurrentRequestsPerContainer(@Nullable Integer maxConcurrentRequestsPerContainer) {
            $.maxConcurrentRequestsPerContainer = maxConcurrentRequestsPerContainer;
            return this;
        }

        public Builder maxQueueWaitMs(@Nullable Integer maxQueueWaitMs) {
            $.maxQueueWaitMs = maxQueueWaitMs;
            return this;
        }

        public Builder modelConfigMap(Map<String,Object> modelConfigMap) {
            $.modelConfigMap = modelConfigMap;
            return this;
        }

        public Builder models(@Nullable List<ModelResponse> models) {
            $.models = models;
            return this;
        }

        public Builder models(ModelResponse... models) {
            return models(List.of(models));
        }

        public Builder namespace(@Nullable String namespace) {
            $.namespace = namespace;
            return this;
        }

        public Builder numReplicas(@Nullable Integer numReplicas) {
            $.numReplicas = numReplicas;
            return this;
        }

        public Builder properties(@Nullable Map<String,String> properties) {
            $.properties = properties;
            return this;
        }

        public Builder scoringTimeoutMs(@Nullable Integer scoringTimeoutMs) {
            $.scoringTimeoutMs = scoringTimeoutMs;
            return this;
        }

        public Builder scoringUri(String scoringUri) {
            $.scoringUri = scoringUri;
            return this;
        }

        public Builder state(String state) {
            $.state = state;
            return this;
        }

        public Builder swaggerUri(String swaggerUri) {
            $.swaggerUri = swaggerUri;
            return this;
        }

        public Builder trafficPercentile(@Nullable Double trafficPercentile) {
            $.trafficPercentile = trafficPercentile;
            return this;
        }

        public Builder type(@Nullable String type) {
            $.type = type;
            return this;
        }

        public AKSServiceResponseResponse build() {
            $.computeType = Codegen.stringProp("computeType").arg($.computeType).require();
            $.deploymentStatus = Objects.requireNonNull($.deploymentStatus, "expected parameter 'deploymentStatus' to be non-null");
            $.error = Objects.requireNonNull($.error, "expected parameter 'error' to be non-null");
            $.modelConfigMap = Objects.requireNonNull($.modelConfigMap, "expected parameter 'modelConfigMap' to be non-null");
            $.scoringUri = Objects.requireNonNull($.scoringUri, "expected parameter 'scoringUri' to be non-null");
            $.state = Objects.requireNonNull($.state, "expected parameter 'state' to be non-null");
            $.swaggerUri = Objects.requireNonNull($.swaggerUri, "expected parameter 'swaggerUri' to be non-null");
            return $;
        }
    }

}
