// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.scvmm.outputs;

import com.pulumi.azurenative.scvmm.outputs.CheckpointResponse;
import com.pulumi.azurenative.scvmm.outputs.ExtendedLocationResponse;
import com.pulumi.azurenative.scvmm.outputs.HardwareProfileResponse;
import com.pulumi.azurenative.scvmm.outputs.NetworkProfileResponse;
import com.pulumi.azurenative.scvmm.outputs.OsProfileResponse;
import com.pulumi.azurenative.scvmm.outputs.StorageProfileResponse;
import com.pulumi.azurenative.scvmm.outputs.SystemDataResponse;
import com.pulumi.azurenative.scvmm.outputs.VirtualMachinePropertiesResponseAvailabilitySets;
import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetVirtualMachineResult {
    /**
     * @return Availability Sets in vm.
     * 
     */
    private final @Nullable List<VirtualMachinePropertiesResponseAvailabilitySets> availabilitySets;
    /**
     * @return Type of checkpoint supported for the vm.
     * 
     */
    private final @Nullable String checkpointType;
    /**
     * @return Checkpoints in the vm.
     * 
     */
    private final @Nullable List<CheckpointResponse> checkpoints;
    /**
     * @return ARM Id of the cloud resource to use for deploying the vm.
     * 
     */
    private final @Nullable String cloudId;
    /**
     * @return The extended location.
     * 
     */
    private final ExtendedLocationResponse extendedLocation;
    /**
     * @return Gets or sets the generation for the vm.
     * 
     */
    private final @Nullable Integer generation;
    /**
     * @return Hardware properties.
     * 
     */
    private final @Nullable HardwareProfileResponse hardwareProfile;
    /**
     * @return Resource Id
     * 
     */
    private final String id;
    /**
     * @return Gets or sets the inventory Item ID for the resource.
     * 
     */
    private final @Nullable String inventoryItemId;
    /**
     * @return Gets or sets the location.
     * 
     */
    private final String location;
    /**
     * @return Resource Name
     * 
     */
    private final String name;
    /**
     * @return Network properties.
     * 
     */
    private final @Nullable NetworkProfileResponse networkProfile;
    /**
     * @return OS properties.
     * 
     */
    private final @Nullable OsProfileResponse osProfile;
    /**
     * @return Gets the power state of the virtual machine.
     * 
     */
    private final String powerState;
    /**
     * @return Gets or sets the provisioning state.
     * 
     */
    private final String provisioningState;
    /**
     * @return Storage properties.
     * 
     */
    private final @Nullable StorageProfileResponse storageProfile;
    /**
     * @return The system data.
     * 
     */
    private final SystemDataResponse systemData;
    /**
     * @return Resource tags
     * 
     */
    private final @Nullable Map<String,String> tags;
    /**
     * @return ARM Id of the template resource to use for deploying the vm.
     * 
     */
    private final @Nullable String templateId;
    /**
     * @return Resource Type
     * 
     */
    private final String type;
    /**
     * @return Unique ID of the virtual machine.
     * 
     */
    private final @Nullable String uuid;
    /**
     * @return VMName is the name of VM on the SCVMM server.
     * 
     */
    private final @Nullable String vmName;
    /**
     * @return ARM Id of the vmmServer resource in which this resource resides.
     * 
     */
    private final @Nullable String vmmServerId;

    @CustomType.Constructor
    private GetVirtualMachineResult(
        @CustomType.Parameter("availabilitySets") @Nullable List<VirtualMachinePropertiesResponseAvailabilitySets> availabilitySets,
        @CustomType.Parameter("checkpointType") @Nullable String checkpointType,
        @CustomType.Parameter("checkpoints") @Nullable List<CheckpointResponse> checkpoints,
        @CustomType.Parameter("cloudId") @Nullable String cloudId,
        @CustomType.Parameter("extendedLocation") ExtendedLocationResponse extendedLocation,
        @CustomType.Parameter("generation") @Nullable Integer generation,
        @CustomType.Parameter("hardwareProfile") @Nullable HardwareProfileResponse hardwareProfile,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("inventoryItemId") @Nullable String inventoryItemId,
        @CustomType.Parameter("location") String location,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("networkProfile") @Nullable NetworkProfileResponse networkProfile,
        @CustomType.Parameter("osProfile") @Nullable OsProfileResponse osProfile,
        @CustomType.Parameter("powerState") String powerState,
        @CustomType.Parameter("provisioningState") String provisioningState,
        @CustomType.Parameter("storageProfile") @Nullable StorageProfileResponse storageProfile,
        @CustomType.Parameter("systemData") SystemDataResponse systemData,
        @CustomType.Parameter("tags") @Nullable Map<String,String> tags,
        @CustomType.Parameter("templateId") @Nullable String templateId,
        @CustomType.Parameter("type") String type,
        @CustomType.Parameter("uuid") @Nullable String uuid,
        @CustomType.Parameter("vmName") @Nullable String vmName,
        @CustomType.Parameter("vmmServerId") @Nullable String vmmServerId) {
        this.availabilitySets = availabilitySets;
        this.checkpointType = checkpointType;
        this.checkpoints = checkpoints;
        this.cloudId = cloudId;
        this.extendedLocation = extendedLocation;
        this.generation = generation;
        this.hardwareProfile = hardwareProfile;
        this.id = id;
        this.inventoryItemId = inventoryItemId;
        this.location = location;
        this.name = name;
        this.networkProfile = networkProfile;
        this.osProfile = osProfile;
        this.powerState = powerState;
        this.provisioningState = provisioningState;
        this.storageProfile = storageProfile;
        this.systemData = systemData;
        this.tags = tags;
        this.templateId = templateId;
        this.type = type;
        this.uuid = uuid;
        this.vmName = vmName;
        this.vmmServerId = vmmServerId;
    }

    /**
     * @return Availability Sets in vm.
     * 
     */
    public List<VirtualMachinePropertiesResponseAvailabilitySets> availabilitySets() {
        return this.availabilitySets == null ? List.of() : this.availabilitySets;
    }
    /**
     * @return Type of checkpoint supported for the vm.
     * 
     */
    public Optional<String> checkpointType() {
        return Optional.ofNullable(this.checkpointType);
    }
    /**
     * @return Checkpoints in the vm.
     * 
     */
    public List<CheckpointResponse> checkpoints() {
        return this.checkpoints == null ? List.of() : this.checkpoints;
    }
    /**
     * @return ARM Id of the cloud resource to use for deploying the vm.
     * 
     */
    public Optional<String> cloudId() {
        return Optional.ofNullable(this.cloudId);
    }
    /**
     * @return The extended location.
     * 
     */
    public ExtendedLocationResponse extendedLocation() {
        return this.extendedLocation;
    }
    /**
     * @return Gets or sets the generation for the vm.
     * 
     */
    public Optional<Integer> generation() {
        return Optional.ofNullable(this.generation);
    }
    /**
     * @return Hardware properties.
     * 
     */
    public Optional<HardwareProfileResponse> hardwareProfile() {
        return Optional.ofNullable(this.hardwareProfile);
    }
    /**
     * @return Resource Id
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Gets or sets the inventory Item ID for the resource.
     * 
     */
    public Optional<String> inventoryItemId() {
        return Optional.ofNullable(this.inventoryItemId);
    }
    /**
     * @return Gets or sets the location.
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return Resource Name
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Network properties.
     * 
     */
    public Optional<NetworkProfileResponse> networkProfile() {
        return Optional.ofNullable(this.networkProfile);
    }
    /**
     * @return OS properties.
     * 
     */
    public Optional<OsProfileResponse> osProfile() {
        return Optional.ofNullable(this.osProfile);
    }
    /**
     * @return Gets the power state of the virtual machine.
     * 
     */
    public String powerState() {
        return this.powerState;
    }
    /**
     * @return Gets or sets the provisioning state.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return Storage properties.
     * 
     */
    public Optional<StorageProfileResponse> storageProfile() {
        return Optional.ofNullable(this.storageProfile);
    }
    /**
     * @return The system data.
     * 
     */
    public SystemDataResponse systemData() {
        return this.systemData;
    }
    /**
     * @return Resource tags
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return ARM Id of the template resource to use for deploying the vm.
     * 
     */
    public Optional<String> templateId() {
        return Optional.ofNullable(this.templateId);
    }
    /**
     * @return Resource Type
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Unique ID of the virtual machine.
     * 
     */
    public Optional<String> uuid() {
        return Optional.ofNullable(this.uuid);
    }
    /**
     * @return VMName is the name of VM on the SCVMM server.
     * 
     */
    public Optional<String> vmName() {
        return Optional.ofNullable(this.vmName);
    }
    /**
     * @return ARM Id of the vmmServer resource in which this resource resides.
     * 
     */
    public Optional<String> vmmServerId() {
        return Optional.ofNullable(this.vmmServerId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVirtualMachineResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<VirtualMachinePropertiesResponseAvailabilitySets> availabilitySets;
        private @Nullable String checkpointType;
        private @Nullable List<CheckpointResponse> checkpoints;
        private @Nullable String cloudId;
        private ExtendedLocationResponse extendedLocation;
        private @Nullable Integer generation;
        private @Nullable HardwareProfileResponse hardwareProfile;
        private String id;
        private @Nullable String inventoryItemId;
        private String location;
        private String name;
        private @Nullable NetworkProfileResponse networkProfile;
        private @Nullable OsProfileResponse osProfile;
        private String powerState;
        private String provisioningState;
        private @Nullable StorageProfileResponse storageProfile;
        private SystemDataResponse systemData;
        private @Nullable Map<String,String> tags;
        private @Nullable String templateId;
        private String type;
        private @Nullable String uuid;
        private @Nullable String vmName;
        private @Nullable String vmmServerId;

        public Builder() {
    	      // Empty
        }

        public Builder(GetVirtualMachineResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availabilitySets = defaults.availabilitySets;
    	      this.checkpointType = defaults.checkpointType;
    	      this.checkpoints = defaults.checkpoints;
    	      this.cloudId = defaults.cloudId;
    	      this.extendedLocation = defaults.extendedLocation;
    	      this.generation = defaults.generation;
    	      this.hardwareProfile = defaults.hardwareProfile;
    	      this.id = defaults.id;
    	      this.inventoryItemId = defaults.inventoryItemId;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.networkProfile = defaults.networkProfile;
    	      this.osProfile = defaults.osProfile;
    	      this.powerState = defaults.powerState;
    	      this.provisioningState = defaults.provisioningState;
    	      this.storageProfile = defaults.storageProfile;
    	      this.systemData = defaults.systemData;
    	      this.tags = defaults.tags;
    	      this.templateId = defaults.templateId;
    	      this.type = defaults.type;
    	      this.uuid = defaults.uuid;
    	      this.vmName = defaults.vmName;
    	      this.vmmServerId = defaults.vmmServerId;
        }

        public Builder availabilitySets(@Nullable List<VirtualMachinePropertiesResponseAvailabilitySets> availabilitySets) {
            this.availabilitySets = availabilitySets;
            return this;
        }
        public Builder availabilitySets(VirtualMachinePropertiesResponseAvailabilitySets... availabilitySets) {
            return availabilitySets(List.of(availabilitySets));
        }
        public Builder checkpointType(@Nullable String checkpointType) {
            this.checkpointType = checkpointType;
            return this;
        }
        public Builder checkpoints(@Nullable List<CheckpointResponse> checkpoints) {
            this.checkpoints = checkpoints;
            return this;
        }
        public Builder checkpoints(CheckpointResponse... checkpoints) {
            return checkpoints(List.of(checkpoints));
        }
        public Builder cloudId(@Nullable String cloudId) {
            this.cloudId = cloudId;
            return this;
        }
        public Builder extendedLocation(ExtendedLocationResponse extendedLocation) {
            this.extendedLocation = Objects.requireNonNull(extendedLocation);
            return this;
        }
        public Builder generation(@Nullable Integer generation) {
            this.generation = generation;
            return this;
        }
        public Builder hardwareProfile(@Nullable HardwareProfileResponse hardwareProfile) {
            this.hardwareProfile = hardwareProfile;
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder inventoryItemId(@Nullable String inventoryItemId) {
            this.inventoryItemId = inventoryItemId;
            return this;
        }
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder networkProfile(@Nullable NetworkProfileResponse networkProfile) {
            this.networkProfile = networkProfile;
            return this;
        }
        public Builder osProfile(@Nullable OsProfileResponse osProfile) {
            this.osProfile = osProfile;
            return this;
        }
        public Builder powerState(String powerState) {
            this.powerState = Objects.requireNonNull(powerState);
            return this;
        }
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        public Builder storageProfile(@Nullable StorageProfileResponse storageProfile) {
            this.storageProfile = storageProfile;
            return this;
        }
        public Builder systemData(SystemDataResponse systemData) {
            this.systemData = Objects.requireNonNull(systemData);
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        public Builder templateId(@Nullable String templateId) {
            this.templateId = templateId;
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder uuid(@Nullable String uuid) {
            this.uuid = uuid;
            return this;
        }
        public Builder vmName(@Nullable String vmName) {
            this.vmName = vmName;
            return this;
        }
        public Builder vmmServerId(@Nullable String vmmServerId) {
            this.vmmServerId = vmmServerId;
            return this;
        }        public GetVirtualMachineResult build() {
            return new GetVirtualMachineResult(availabilitySets, checkpointType, checkpoints, cloudId, extendedLocation, generation, hardwareProfile, id, inventoryItemId, location, name, networkProfile, osProfile, powerState, provisioningState, storageProfile, systemData, tags, templateId, type, uuid, vmName, vmmServerId);
        }
    }
}
