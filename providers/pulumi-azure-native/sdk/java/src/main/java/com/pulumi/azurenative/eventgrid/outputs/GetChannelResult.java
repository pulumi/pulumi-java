// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.eventgrid.outputs;

import com.pulumi.azurenative.eventgrid.outputs.PartnerTopicInfoResponse;
import com.pulumi.azurenative.eventgrid.outputs.SystemDataResponse;
import com.pulumi.azurenative.eventgrid.outputs.WebhookPartnerDestinationInfoResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetChannelResult {
    /**
     * @return The type of the event channel which represents the  direction flow of events.
     * 
     */
    private final @Nullable String channelType;
    /**
     * @return Expiration time of the channel. If this timer expires while the corresponding partner topic is never activated,
     * the channel and corresponding partner topic are deleted.
     * 
     */
    private final @Nullable String expirationTimeIfNotActivatedUtc;
    /**
     * @return Fully qualified identifier of the resource.
     * 
     */
    private final String id;
    /**
     * @return Context or helpful message that can be used during the approval process by the subscriber.
     * 
     */
    private final @Nullable String messageForActivation;
    /**
     * @return Name of the resource.
     * 
     */
    private final String name;
    /**
     * @return This property should be populated when channelType is PartnerDestination and represents information about the partner destination resource corresponding to the channel.
     * 
     */
    private final @Nullable WebhookPartnerDestinationInfoResponse partnerDestinationInfo;
    /**
     * @return This property should be populated when channelType is PartnerTopic and represents information about the partner topic resource corresponding to the channel.
     * 
     */
    private final @Nullable PartnerTopicInfoResponse partnerTopicInfo;
    /**
     * @return Provisioning state of the channel.
     * 
     */
    private final @Nullable String provisioningState;
    /**
     * @return The readiness state of the corresponding partner topic.
     * 
     */
    private final @Nullable String readinessState;
    /**
     * @return The system metadata relating to Channel resource.
     * 
     */
    private final SystemDataResponse systemData;
    /**
     * @return Type of the resource.
     * 
     */
    private final String type;

    @CustomType.Constructor
    private GetChannelResult(
        @CustomType.Parameter("channelType") @Nullable String channelType,
        @CustomType.Parameter("expirationTimeIfNotActivatedUtc") @Nullable String expirationTimeIfNotActivatedUtc,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("messageForActivation") @Nullable String messageForActivation,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("partnerDestinationInfo") @Nullable WebhookPartnerDestinationInfoResponse partnerDestinationInfo,
        @CustomType.Parameter("partnerTopicInfo") @Nullable PartnerTopicInfoResponse partnerTopicInfo,
        @CustomType.Parameter("provisioningState") @Nullable String provisioningState,
        @CustomType.Parameter("readinessState") @Nullable String readinessState,
        @CustomType.Parameter("systemData") SystemDataResponse systemData,
        @CustomType.Parameter("type") String type) {
        this.channelType = channelType;
        this.expirationTimeIfNotActivatedUtc = expirationTimeIfNotActivatedUtc;
        this.id = id;
        this.messageForActivation = messageForActivation;
        this.name = name;
        this.partnerDestinationInfo = partnerDestinationInfo;
        this.partnerTopicInfo = partnerTopicInfo;
        this.provisioningState = provisioningState;
        this.readinessState = readinessState;
        this.systemData = systemData;
        this.type = type;
    }

    /**
     * @return The type of the event channel which represents the  direction flow of events.
     * 
     */
    public Optional<String> channelType() {
        return Optional.ofNullable(this.channelType);
    }
    /**
     * @return Expiration time of the channel. If this timer expires while the corresponding partner topic is never activated,
     * the channel and corresponding partner topic are deleted.
     * 
     */
    public Optional<String> expirationTimeIfNotActivatedUtc() {
        return Optional.ofNullable(this.expirationTimeIfNotActivatedUtc);
    }
    /**
     * @return Fully qualified identifier of the resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Context or helpful message that can be used during the approval process by the subscriber.
     * 
     */
    public Optional<String> messageForActivation() {
        return Optional.ofNullable(this.messageForActivation);
    }
    /**
     * @return Name of the resource.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return This property should be populated when channelType is PartnerDestination and represents information about the partner destination resource corresponding to the channel.
     * 
     */
    public Optional<WebhookPartnerDestinationInfoResponse> partnerDestinationInfo() {
        return Optional.ofNullable(this.partnerDestinationInfo);
    }
    /**
     * @return This property should be populated when channelType is PartnerTopic and represents information about the partner topic resource corresponding to the channel.
     * 
     */
    public Optional<PartnerTopicInfoResponse> partnerTopicInfo() {
        return Optional.ofNullable(this.partnerTopicInfo);
    }
    /**
     * @return Provisioning state of the channel.
     * 
     */
    public Optional<String> provisioningState() {
        return Optional.ofNullable(this.provisioningState);
    }
    /**
     * @return The readiness state of the corresponding partner topic.
     * 
     */
    public Optional<String> readinessState() {
        return Optional.ofNullable(this.readinessState);
    }
    /**
     * @return The system metadata relating to Channel resource.
     * 
     */
    public SystemDataResponse systemData() {
        return this.systemData;
    }
    /**
     * @return Type of the resource.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetChannelResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String channelType;
        private @Nullable String expirationTimeIfNotActivatedUtc;
        private String id;
        private @Nullable String messageForActivation;
        private String name;
        private @Nullable WebhookPartnerDestinationInfoResponse partnerDestinationInfo;
        private @Nullable PartnerTopicInfoResponse partnerTopicInfo;
        private @Nullable String provisioningState;
        private @Nullable String readinessState;
        private SystemDataResponse systemData;
        private String type;

        public Builder() {
    	      // Empty
        }

        public Builder(GetChannelResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.channelType = defaults.channelType;
    	      this.expirationTimeIfNotActivatedUtc = defaults.expirationTimeIfNotActivatedUtc;
    	      this.id = defaults.id;
    	      this.messageForActivation = defaults.messageForActivation;
    	      this.name = defaults.name;
    	      this.partnerDestinationInfo = defaults.partnerDestinationInfo;
    	      this.partnerTopicInfo = defaults.partnerTopicInfo;
    	      this.provisioningState = defaults.provisioningState;
    	      this.readinessState = defaults.readinessState;
    	      this.systemData = defaults.systemData;
    	      this.type = defaults.type;
        }

        public Builder channelType(@Nullable String channelType) {
            this.channelType = channelType;
            return this;
        }
        public Builder expirationTimeIfNotActivatedUtc(@Nullable String expirationTimeIfNotActivatedUtc) {
            this.expirationTimeIfNotActivatedUtc = expirationTimeIfNotActivatedUtc;
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder messageForActivation(@Nullable String messageForActivation) {
            this.messageForActivation = messageForActivation;
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder partnerDestinationInfo(@Nullable WebhookPartnerDestinationInfoResponse partnerDestinationInfo) {
            this.partnerDestinationInfo = partnerDestinationInfo;
            return this;
        }
        public Builder partnerTopicInfo(@Nullable PartnerTopicInfoResponse partnerTopicInfo) {
            this.partnerTopicInfo = partnerTopicInfo;
            return this;
        }
        public Builder provisioningState(@Nullable String provisioningState) {
            this.provisioningState = provisioningState;
            return this;
        }
        public Builder readinessState(@Nullable String readinessState) {
            this.readinessState = readinessState;
            return this;
        }
        public Builder systemData(SystemDataResponse systemData) {
            this.systemData = Objects.requireNonNull(systemData);
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }        public GetChannelResult build() {
            return new GetChannelResult(channelType, expirationTimeIfNotActivatedUtc, id, messageForActivation, name, partnerDestinationInfo, partnerTopicInfo, provisioningState, readinessState, systemData, type);
        }
    }
}
