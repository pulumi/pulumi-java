// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datamigration.outputs;

import com.pulumi.azurenative.datamigration.outputs.ErrorInfoResponse;
import com.pulumi.azurenative.datamigration.outputs.SqlConnectionInformationResponse;
import com.pulumi.azurenative.datamigration.outputs.SqlDbMigrationStatusDetailsResponse;
import com.pulumi.azurenative.datamigration.outputs.SqlDbOfflineConfigurationResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DatabaseMigrationPropertiesSqlDbResponse {
    /**
     * @return Database migration end time.
     * 
     */
    private final String endedOn;
    /**
     * @return
     * Expected value is &#39;SqlDb&#39;.
     * 
     */
    private final String kind;
    /**
     * @return Error details in case of migration failure.
     * 
     */
    private final ErrorInfoResponse migrationFailureError;
    /**
     * @return ID tracking current migration operation.
     * 
     */
    private final @Nullable String migrationOperationId;
    /**
     * @return Resource Id of the Migration Service.
     * 
     */
    private final @Nullable String migrationService;
    /**
     * @return Migration status.
     * 
     */
    private final String migrationStatus;
    /**
     * @return Detailed migration status. Not included by default.
     * 
     */
    private final SqlDbMigrationStatusDetailsResponse migrationStatusDetails;
    /**
     * @return Offline configuration.
     * 
     */
    private final SqlDbOfflineConfigurationResponse offlineConfiguration;
    /**
     * @return Error message for migration provisioning failure, if any.
     * 
     */
    private final @Nullable String provisioningError;
    /**
     * @return Provisioning State of migration. ProvisioningState as Succeeded implies that validations have been performed and migration has started.
     * 
     */
    private final String provisioningState;
    /**
     * @return Resource Id of the target resource (SQL VM or SQL Managed Instance).
     * 
     */
    private final @Nullable String scope;
    /**
     * @return Name of the source database.
     * 
     */
    private final @Nullable String sourceDatabaseName;
    /**
     * @return Name of the source sql server.
     * 
     */
    private final String sourceServerName;
    /**
     * @return Source SQL Server connection details.
     * 
     */
    private final @Nullable SqlConnectionInformationResponse sourceSqlConnection;
    /**
     * @return Database migration start time.
     * 
     */
    private final String startedOn;
    /**
     * @return List of tables to copy.
     * 
     */
    private final @Nullable List<String> tableList;
    /**
     * @return Database collation to be used for the target database.
     * 
     */
    private final @Nullable String targetDatabaseCollation;
    /**
     * @return Target SQL DB connection details.
     * 
     */
    private final @Nullable SqlConnectionInformationResponse targetSqlConnection;

    @CustomType.Constructor
    private DatabaseMigrationPropertiesSqlDbResponse(
        @CustomType.Parameter("endedOn") String endedOn,
        @CustomType.Parameter("kind") String kind,
        @CustomType.Parameter("migrationFailureError") ErrorInfoResponse migrationFailureError,
        @CustomType.Parameter("migrationOperationId") @Nullable String migrationOperationId,
        @CustomType.Parameter("migrationService") @Nullable String migrationService,
        @CustomType.Parameter("migrationStatus") String migrationStatus,
        @CustomType.Parameter("migrationStatusDetails") SqlDbMigrationStatusDetailsResponse migrationStatusDetails,
        @CustomType.Parameter("offlineConfiguration") SqlDbOfflineConfigurationResponse offlineConfiguration,
        @CustomType.Parameter("provisioningError") @Nullable String provisioningError,
        @CustomType.Parameter("provisioningState") String provisioningState,
        @CustomType.Parameter("scope") @Nullable String scope,
        @CustomType.Parameter("sourceDatabaseName") @Nullable String sourceDatabaseName,
        @CustomType.Parameter("sourceServerName") String sourceServerName,
        @CustomType.Parameter("sourceSqlConnection") @Nullable SqlConnectionInformationResponse sourceSqlConnection,
        @CustomType.Parameter("startedOn") String startedOn,
        @CustomType.Parameter("tableList") @Nullable List<String> tableList,
        @CustomType.Parameter("targetDatabaseCollation") @Nullable String targetDatabaseCollation,
        @CustomType.Parameter("targetSqlConnection") @Nullable SqlConnectionInformationResponse targetSqlConnection) {
        this.endedOn = endedOn;
        this.kind = kind;
        this.migrationFailureError = migrationFailureError;
        this.migrationOperationId = migrationOperationId;
        this.migrationService = migrationService;
        this.migrationStatus = migrationStatus;
        this.migrationStatusDetails = migrationStatusDetails;
        this.offlineConfiguration = offlineConfiguration;
        this.provisioningError = provisioningError;
        this.provisioningState = provisioningState;
        this.scope = scope;
        this.sourceDatabaseName = sourceDatabaseName;
        this.sourceServerName = sourceServerName;
        this.sourceSqlConnection = sourceSqlConnection;
        this.startedOn = startedOn;
        this.tableList = tableList;
        this.targetDatabaseCollation = targetDatabaseCollation;
        this.targetSqlConnection = targetSqlConnection;
    }

    /**
     * @return Database migration end time.
     * 
     */
    public String endedOn() {
        return this.endedOn;
    }
    /**
     * @return
     * Expected value is &#39;SqlDb&#39;.
     * 
     */
    public String kind() {
        return this.kind;
    }
    /**
     * @return Error details in case of migration failure.
     * 
     */
    public ErrorInfoResponse migrationFailureError() {
        return this.migrationFailureError;
    }
    /**
     * @return ID tracking current migration operation.
     * 
     */
    public Optional<String> migrationOperationId() {
        return Optional.ofNullable(this.migrationOperationId);
    }
    /**
     * @return Resource Id of the Migration Service.
     * 
     */
    public Optional<String> migrationService() {
        return Optional.ofNullable(this.migrationService);
    }
    /**
     * @return Migration status.
     * 
     */
    public String migrationStatus() {
        return this.migrationStatus;
    }
    /**
     * @return Detailed migration status. Not included by default.
     * 
     */
    public SqlDbMigrationStatusDetailsResponse migrationStatusDetails() {
        return this.migrationStatusDetails;
    }
    /**
     * @return Offline configuration.
     * 
     */
    public SqlDbOfflineConfigurationResponse offlineConfiguration() {
        return this.offlineConfiguration;
    }
    /**
     * @return Error message for migration provisioning failure, if any.
     * 
     */
    public Optional<String> provisioningError() {
        return Optional.ofNullable(this.provisioningError);
    }
    /**
     * @return Provisioning State of migration. ProvisioningState as Succeeded implies that validations have been performed and migration has started.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return Resource Id of the target resource (SQL VM or SQL Managed Instance).
     * 
     */
    public Optional<String> scope() {
        return Optional.ofNullable(this.scope);
    }
    /**
     * @return Name of the source database.
     * 
     */
    public Optional<String> sourceDatabaseName() {
        return Optional.ofNullable(this.sourceDatabaseName);
    }
    /**
     * @return Name of the source sql server.
     * 
     */
    public String sourceServerName() {
        return this.sourceServerName;
    }
    /**
     * @return Source SQL Server connection details.
     * 
     */
    public Optional<SqlConnectionInformationResponse> sourceSqlConnection() {
        return Optional.ofNullable(this.sourceSqlConnection);
    }
    /**
     * @return Database migration start time.
     * 
     */
    public String startedOn() {
        return this.startedOn;
    }
    /**
     * @return List of tables to copy.
     * 
     */
    public List<String> tableList() {
        return this.tableList == null ? List.of() : this.tableList;
    }
    /**
     * @return Database collation to be used for the target database.
     * 
     */
    public Optional<String> targetDatabaseCollation() {
        return Optional.ofNullable(this.targetDatabaseCollation);
    }
    /**
     * @return Target SQL DB connection details.
     * 
     */
    public Optional<SqlConnectionInformationResponse> targetSqlConnection() {
        return Optional.ofNullable(this.targetSqlConnection);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatabaseMigrationPropertiesSqlDbResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String endedOn;
        private String kind;
        private ErrorInfoResponse migrationFailureError;
        private @Nullable String migrationOperationId;
        private @Nullable String migrationService;
        private String migrationStatus;
        private SqlDbMigrationStatusDetailsResponse migrationStatusDetails;
        private SqlDbOfflineConfigurationResponse offlineConfiguration;
        private @Nullable String provisioningError;
        private String provisioningState;
        private @Nullable String scope;
        private @Nullable String sourceDatabaseName;
        private String sourceServerName;
        private @Nullable SqlConnectionInformationResponse sourceSqlConnection;
        private String startedOn;
        private @Nullable List<String> tableList;
        private @Nullable String targetDatabaseCollation;
        private @Nullable SqlConnectionInformationResponse targetSqlConnection;

        public Builder() {
    	      // Empty
        }

        public Builder(DatabaseMigrationPropertiesSqlDbResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.endedOn = defaults.endedOn;
    	      this.kind = defaults.kind;
    	      this.migrationFailureError = defaults.migrationFailureError;
    	      this.migrationOperationId = defaults.migrationOperationId;
    	      this.migrationService = defaults.migrationService;
    	      this.migrationStatus = defaults.migrationStatus;
    	      this.migrationStatusDetails = defaults.migrationStatusDetails;
    	      this.offlineConfiguration = defaults.offlineConfiguration;
    	      this.provisioningError = defaults.provisioningError;
    	      this.provisioningState = defaults.provisioningState;
    	      this.scope = defaults.scope;
    	      this.sourceDatabaseName = defaults.sourceDatabaseName;
    	      this.sourceServerName = defaults.sourceServerName;
    	      this.sourceSqlConnection = defaults.sourceSqlConnection;
    	      this.startedOn = defaults.startedOn;
    	      this.tableList = defaults.tableList;
    	      this.targetDatabaseCollation = defaults.targetDatabaseCollation;
    	      this.targetSqlConnection = defaults.targetSqlConnection;
        }

        public Builder endedOn(String endedOn) {
            this.endedOn = Objects.requireNonNull(endedOn);
            return this;
        }
        public Builder kind(String kind) {
            this.kind = Objects.requireNonNull(kind);
            return this;
        }
        public Builder migrationFailureError(ErrorInfoResponse migrationFailureError) {
            this.migrationFailureError = Objects.requireNonNull(migrationFailureError);
            return this;
        }
        public Builder migrationOperationId(@Nullable String migrationOperationId) {
            this.migrationOperationId = migrationOperationId;
            return this;
        }
        public Builder migrationService(@Nullable String migrationService) {
            this.migrationService = migrationService;
            return this;
        }
        public Builder migrationStatus(String migrationStatus) {
            this.migrationStatus = Objects.requireNonNull(migrationStatus);
            return this;
        }
        public Builder migrationStatusDetails(SqlDbMigrationStatusDetailsResponse migrationStatusDetails) {
            this.migrationStatusDetails = Objects.requireNonNull(migrationStatusDetails);
            return this;
        }
        public Builder offlineConfiguration(SqlDbOfflineConfigurationResponse offlineConfiguration) {
            this.offlineConfiguration = Objects.requireNonNull(offlineConfiguration);
            return this;
        }
        public Builder provisioningError(@Nullable String provisioningError) {
            this.provisioningError = provisioningError;
            return this;
        }
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        public Builder scope(@Nullable String scope) {
            this.scope = scope;
            return this;
        }
        public Builder sourceDatabaseName(@Nullable String sourceDatabaseName) {
            this.sourceDatabaseName = sourceDatabaseName;
            return this;
        }
        public Builder sourceServerName(String sourceServerName) {
            this.sourceServerName = Objects.requireNonNull(sourceServerName);
            return this;
        }
        public Builder sourceSqlConnection(@Nullable SqlConnectionInformationResponse sourceSqlConnection) {
            this.sourceSqlConnection = sourceSqlConnection;
            return this;
        }
        public Builder startedOn(String startedOn) {
            this.startedOn = Objects.requireNonNull(startedOn);
            return this;
        }
        public Builder tableList(@Nullable List<String> tableList) {
            this.tableList = tableList;
            return this;
        }
        public Builder tableList(String... tableList) {
            return tableList(List.of(tableList));
        }
        public Builder targetDatabaseCollation(@Nullable String targetDatabaseCollation) {
            this.targetDatabaseCollation = targetDatabaseCollation;
            return this;
        }
        public Builder targetSqlConnection(@Nullable SqlConnectionInformationResponse targetSqlConnection) {
            this.targetSqlConnection = targetSqlConnection;
            return this;
        }        public DatabaseMigrationPropertiesSqlDbResponse build() {
            return new DatabaseMigrationPropertiesSqlDbResponse(endedOn, kind, migrationFailureError, migrationOperationId, migrationService, migrationStatus, migrationStatusDetails, offlineConfiguration, provisioningError, provisioningState, scope, sourceDatabaseName, sourceServerName, sourceSqlConnection, startedOn, tableList, targetDatabaseCollation, targetSqlConnection);
        }
    }
}
