// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.compute.inputs;

import com.pulumi.azurenative.compute.enums.IPVersions;
import com.pulumi.azurenative.compute.inputs.SubResourceArgs;
import com.pulumi.azurenative.compute.inputs.VirtualMachinePublicIPAddressConfigurationArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Describes a virtual machine network profile's IP configuration.
 * 
 */
public final class VirtualMachineNetworkInterfaceIPConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final VirtualMachineNetworkInterfaceIPConfigurationArgs Empty = new VirtualMachineNetworkInterfaceIPConfigurationArgs();

    /**
     * Specifies an array of references to backend address pools of application gateways. A virtual machine can reference backend address pools of multiple application gateways. Multiple virtual machines cannot use the same application gateway.
     * 
     */
    @Import(name="applicationGatewayBackendAddressPools")
      private final @Nullable Output<List<SubResourceArgs>> applicationGatewayBackendAddressPools;

    public Output<List<SubResourceArgs>> applicationGatewayBackendAddressPools() {
        return this.applicationGatewayBackendAddressPools == null ? Codegen.empty() : this.applicationGatewayBackendAddressPools;
    }

    /**
     * Specifies an array of references to application security group.
     * 
     */
    @Import(name="applicationSecurityGroups")
      private final @Nullable Output<List<SubResourceArgs>> applicationSecurityGroups;

    public Output<List<SubResourceArgs>> applicationSecurityGroups() {
        return this.applicationSecurityGroups == null ? Codegen.empty() : this.applicationSecurityGroups;
    }

    /**
     * Specifies an array of references to backend address pools of load balancers. A virtual machine can reference backend address pools of one public and one internal load balancer. [Multiple virtual machines cannot use the same basic sku load balancer].
     * 
     */
    @Import(name="loadBalancerBackendAddressPools")
      private final @Nullable Output<List<SubResourceArgs>> loadBalancerBackendAddressPools;

    public Output<List<SubResourceArgs>> loadBalancerBackendAddressPools() {
        return this.loadBalancerBackendAddressPools == null ? Codegen.empty() : this.loadBalancerBackendAddressPools;
    }

    /**
     * The IP configuration name.
     * 
     */
    @Import(name="name", required=true)
      private final Output<String> name;

    public Output<String> name() {
        return this.name;
    }

    /**
     * Specifies the primary network interface in case the virtual machine has more than 1 network interface.
     * 
     */
    @Import(name="primary")
      private final @Nullable Output<Boolean> primary;

    public Output<Boolean> primary() {
        return this.primary == null ? Codegen.empty() : this.primary;
    }

    /**
     * Available from Api-Version 2017-03-30 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4.  Possible values are: 'IPv4' and 'IPv6'.
     * 
     */
    @Import(name="privateIPAddressVersion")
      private final @Nullable Output<Either<String,IPVersions>> privateIPAddressVersion;

    public Output<Either<String,IPVersions>> privateIPAddressVersion() {
        return this.privateIPAddressVersion == null ? Codegen.empty() : this.privateIPAddressVersion;
    }

    /**
     * The publicIPAddressConfiguration.
     * 
     */
    @Import(name="publicIPAddressConfiguration")
      private final @Nullable Output<VirtualMachinePublicIPAddressConfigurationArgs> publicIPAddressConfiguration;

    public Output<VirtualMachinePublicIPAddressConfigurationArgs> publicIPAddressConfiguration() {
        return this.publicIPAddressConfiguration == null ? Codegen.empty() : this.publicIPAddressConfiguration;
    }

    /**
     * Specifies the identifier of the subnet.
     * 
     */
    @Import(name="subnet")
      private final @Nullable Output<SubResourceArgs> subnet;

    public Output<SubResourceArgs> subnet() {
        return this.subnet == null ? Codegen.empty() : this.subnet;
    }

    public VirtualMachineNetworkInterfaceIPConfigurationArgs(
        @Nullable Output<List<SubResourceArgs>> applicationGatewayBackendAddressPools,
        @Nullable Output<List<SubResourceArgs>> applicationSecurityGroups,
        @Nullable Output<List<SubResourceArgs>> loadBalancerBackendAddressPools,
        Output<String> name,
        @Nullable Output<Boolean> primary,
        @Nullable Output<Either<String,IPVersions>> privateIPAddressVersion,
        @Nullable Output<VirtualMachinePublicIPAddressConfigurationArgs> publicIPAddressConfiguration,
        @Nullable Output<SubResourceArgs> subnet) {
        this.applicationGatewayBackendAddressPools = applicationGatewayBackendAddressPools;
        this.applicationSecurityGroups = applicationSecurityGroups;
        this.loadBalancerBackendAddressPools = loadBalancerBackendAddressPools;
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.primary = primary;
        this.privateIPAddressVersion = privateIPAddressVersion;
        this.publicIPAddressConfiguration = publicIPAddressConfiguration;
        this.subnet = subnet;
    }

    private VirtualMachineNetworkInterfaceIPConfigurationArgs() {
        this.applicationGatewayBackendAddressPools = Codegen.empty();
        this.applicationSecurityGroups = Codegen.empty();
        this.loadBalancerBackendAddressPools = Codegen.empty();
        this.name = Codegen.empty();
        this.primary = Codegen.empty();
        this.privateIPAddressVersion = Codegen.empty();
        this.publicIPAddressConfiguration = Codegen.empty();
        this.subnet = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VirtualMachineNetworkInterfaceIPConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<SubResourceArgs>> applicationGatewayBackendAddressPools;
        private @Nullable Output<List<SubResourceArgs>> applicationSecurityGroups;
        private @Nullable Output<List<SubResourceArgs>> loadBalancerBackendAddressPools;
        private Output<String> name;
        private @Nullable Output<Boolean> primary;
        private @Nullable Output<Either<String,IPVersions>> privateIPAddressVersion;
        private @Nullable Output<VirtualMachinePublicIPAddressConfigurationArgs> publicIPAddressConfiguration;
        private @Nullable Output<SubResourceArgs> subnet;

        public Builder() {
    	      // Empty
        }

        public Builder(VirtualMachineNetworkInterfaceIPConfigurationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicationGatewayBackendAddressPools = defaults.applicationGatewayBackendAddressPools;
    	      this.applicationSecurityGroups = defaults.applicationSecurityGroups;
    	      this.loadBalancerBackendAddressPools = defaults.loadBalancerBackendAddressPools;
    	      this.name = defaults.name;
    	      this.primary = defaults.primary;
    	      this.privateIPAddressVersion = defaults.privateIPAddressVersion;
    	      this.publicIPAddressConfiguration = defaults.publicIPAddressConfiguration;
    	      this.subnet = defaults.subnet;
        }

        public Builder applicationGatewayBackendAddressPools(@Nullable Output<List<SubResourceArgs>> applicationGatewayBackendAddressPools) {
            this.applicationGatewayBackendAddressPools = applicationGatewayBackendAddressPools;
            return this;
        }
        public Builder applicationGatewayBackendAddressPools(@Nullable List<SubResourceArgs> applicationGatewayBackendAddressPools) {
            this.applicationGatewayBackendAddressPools = Codegen.ofNullable(applicationGatewayBackendAddressPools);
            return this;
        }
        public Builder applicationGatewayBackendAddressPools(SubResourceArgs... applicationGatewayBackendAddressPools) {
            return applicationGatewayBackendAddressPools(List.of(applicationGatewayBackendAddressPools));
        }
        public Builder applicationSecurityGroups(@Nullable Output<List<SubResourceArgs>> applicationSecurityGroups) {
            this.applicationSecurityGroups = applicationSecurityGroups;
            return this;
        }
        public Builder applicationSecurityGroups(@Nullable List<SubResourceArgs> applicationSecurityGroups) {
            this.applicationSecurityGroups = Codegen.ofNullable(applicationSecurityGroups);
            return this;
        }
        public Builder applicationSecurityGroups(SubResourceArgs... applicationSecurityGroups) {
            return applicationSecurityGroups(List.of(applicationSecurityGroups));
        }
        public Builder loadBalancerBackendAddressPools(@Nullable Output<List<SubResourceArgs>> loadBalancerBackendAddressPools) {
            this.loadBalancerBackendAddressPools = loadBalancerBackendAddressPools;
            return this;
        }
        public Builder loadBalancerBackendAddressPools(@Nullable List<SubResourceArgs> loadBalancerBackendAddressPools) {
            this.loadBalancerBackendAddressPools = Codegen.ofNullable(loadBalancerBackendAddressPools);
            return this;
        }
        public Builder loadBalancerBackendAddressPools(SubResourceArgs... loadBalancerBackendAddressPools) {
            return loadBalancerBackendAddressPools(List.of(loadBalancerBackendAddressPools));
        }
        public Builder name(Output<String> name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder name(String name) {
            this.name = Output.of(Objects.requireNonNull(name));
            return this;
        }
        public Builder primary(@Nullable Output<Boolean> primary) {
            this.primary = primary;
            return this;
        }
        public Builder primary(@Nullable Boolean primary) {
            this.primary = Codegen.ofNullable(primary);
            return this;
        }
        public Builder privateIPAddressVersion(@Nullable Output<Either<String,IPVersions>> privateIPAddressVersion) {
            this.privateIPAddressVersion = privateIPAddressVersion;
            return this;
        }
        public Builder privateIPAddressVersion(@Nullable Either<String,IPVersions> privateIPAddressVersion) {
            this.privateIPAddressVersion = Codegen.ofNullable(privateIPAddressVersion);
            return this;
        }
        public Builder publicIPAddressConfiguration(@Nullable Output<VirtualMachinePublicIPAddressConfigurationArgs> publicIPAddressConfiguration) {
            this.publicIPAddressConfiguration = publicIPAddressConfiguration;
            return this;
        }
        public Builder publicIPAddressConfiguration(@Nullable VirtualMachinePublicIPAddressConfigurationArgs publicIPAddressConfiguration) {
            this.publicIPAddressConfiguration = Codegen.ofNullable(publicIPAddressConfiguration);
            return this;
        }
        public Builder subnet(@Nullable Output<SubResourceArgs> subnet) {
            this.subnet = subnet;
            return this;
        }
        public Builder subnet(@Nullable SubResourceArgs subnet) {
            this.subnet = Codegen.ofNullable(subnet);
            return this;
        }        public VirtualMachineNetworkInterfaceIPConfigurationArgs build() {
            return new VirtualMachineNetworkInterfaceIPConfigurationArgs(applicationGatewayBackendAddressPools, applicationSecurityGroups, loadBalancerBackendAddressPools, name, primary, privateIPAddressVersion, publicIPAddressConfiguration, subnet);
        }
    }
}
