// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.compute.inputs;

import com.pulumi.azurenative.compute.enums.UpgradeMode;
import com.pulumi.azurenative.compute.inputs.AutomaticOSUpgradePolicyArgs;
import com.pulumi.azurenative.compute.inputs.RollingUpgradePolicyArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Describes an upgrade policy - automatic, manual, or rolling.
 * 
 */
public final class UpgradePolicyArgs extends com.pulumi.resources.ResourceArgs {

    public static final UpgradePolicyArgs Empty = new UpgradePolicyArgs();

    /**
     * Configuration parameters used for performing automatic OS Upgrade.
     * 
     */
    @Import(name="automaticOSUpgradePolicy")
    private @Nullable Output<AutomaticOSUpgradePolicyArgs> automaticOSUpgradePolicy;

    public Optional<Output<AutomaticOSUpgradePolicyArgs>> automaticOSUpgradePolicy() {
        return Optional.ofNullable(this.automaticOSUpgradePolicy);
    }

    /**
     * Specifies the mode of an upgrade to virtual machines in the scale set.&lt;br /&gt;&lt;br /&gt; Possible values are:&lt;br /&gt;&lt;br /&gt; **Manual** - You  control the application of updates to virtual machines in the scale set. You do this by using the manualUpgrade action.&lt;br /&gt;&lt;br /&gt; **Automatic** - All virtual machines in the scale set are  automatically updated at the same time.
     * 
     */
    @Import(name="mode")
    private @Nullable Output<UpgradeMode> mode;

    public Optional<Output<UpgradeMode>> mode() {
        return Optional.ofNullable(this.mode);
    }

    /**
     * The configuration parameters used while performing a rolling upgrade.
     * 
     */
    @Import(name="rollingUpgradePolicy")
    private @Nullable Output<RollingUpgradePolicyArgs> rollingUpgradePolicy;

    public Optional<Output<RollingUpgradePolicyArgs>> rollingUpgradePolicy() {
        return Optional.ofNullable(this.rollingUpgradePolicy);
    }

    private UpgradePolicyArgs() {}

    private UpgradePolicyArgs(UpgradePolicyArgs $) {
        this.automaticOSUpgradePolicy = $.automaticOSUpgradePolicy;
        this.mode = $.mode;
        this.rollingUpgradePolicy = $.rollingUpgradePolicy;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UpgradePolicyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UpgradePolicyArgs $;

        public Builder() {
            $ = new UpgradePolicyArgs();
        }

        public Builder(UpgradePolicyArgs defaults) {
            $ = new UpgradePolicyArgs(Objects.requireNonNull(defaults));
        }

        public Builder automaticOSUpgradePolicy(@Nullable Output<AutomaticOSUpgradePolicyArgs> automaticOSUpgradePolicy) {
            $.automaticOSUpgradePolicy = automaticOSUpgradePolicy;
            return this;
        }

        public Builder automaticOSUpgradePolicy(AutomaticOSUpgradePolicyArgs automaticOSUpgradePolicy) {
            return automaticOSUpgradePolicy(Output.of(automaticOSUpgradePolicy));
        }

        public Builder mode(@Nullable Output<UpgradeMode> mode) {
            $.mode = mode;
            return this;
        }

        public Builder mode(UpgradeMode mode) {
            return mode(Output.of(mode));
        }

        public Builder rollingUpgradePolicy(@Nullable Output<RollingUpgradePolicyArgs> rollingUpgradePolicy) {
            $.rollingUpgradePolicy = rollingUpgradePolicy;
            return this;
        }

        public Builder rollingUpgradePolicy(RollingUpgradePolicyArgs rollingUpgradePolicy) {
            return rollingUpgradePolicy(Output.of(rollingUpgradePolicy));
        }

        public UpgradePolicyArgs build() {
            return $;
        }
    }

}
