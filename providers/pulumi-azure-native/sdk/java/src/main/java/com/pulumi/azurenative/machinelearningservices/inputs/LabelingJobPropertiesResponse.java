// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.machinelearningservices.inputs;

import com.pulumi.azurenative.machinelearningservices.inputs.LabelCategoryResponse;
import com.pulumi.azurenative.machinelearningservices.inputs.LabelingDatasetConfigurationResponse;
import com.pulumi.azurenative.machinelearningservices.inputs.LabelingJobImagePropertiesResponse;
import com.pulumi.azurenative.machinelearningservices.inputs.LabelingJobInstructionsResponse;
import com.pulumi.azurenative.machinelearningservices.inputs.MLAssistConfigurationResponse;
import com.pulumi.azurenative.machinelearningservices.inputs.ProgressMetricsResponse;
import com.pulumi.azurenative.machinelearningservices.inputs.StatusMessageResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Definition of a labeling job.
 * 
 */
public final class LabelingJobPropertiesResponse extends com.pulumi.resources.InvokeArgs {

    public static final LabelingJobPropertiesResponse Empty = new LabelingJobPropertiesResponse();

    /**
     * Created time of the job in UTC timezone.
     * 
     */
    @Import(name="createdTimeUtc", required=true)
    private String createdTimeUtc;

    public String createdTimeUtc() {
        return this.createdTimeUtc;
    }

    /**
     * Dataset configuration for the job.
     * 
     */
    @Import(name="datasetConfiguration", required=true)
    private LabelingDatasetConfigurationResponse datasetConfiguration;

    public LabelingDatasetConfigurationResponse datasetConfiguration() {
        return this.datasetConfiguration;
    }

    /**
     * Instructions for the job.
     * 
     */
    @Import(name="jobInstructions", required=true)
    private LabelingJobInstructionsResponse jobInstructions;

    public LabelingJobInstructionsResponse jobInstructions() {
        return this.jobInstructions;
    }

    /**
     * Label categories of the job.
     * 
     */
    @Import(name="labelCategories", required=true)
    private Map<String,LabelCategoryResponse> labelCategories;

    public Map<String,LabelCategoryResponse> labelCategories() {
        return this.labelCategories;
    }

    /**
     * Media specific properties in a labeling job.
     * 
     */
    @Import(name="labelingJobMediaProperties", required=true)
    private LabelingJobImagePropertiesResponse labelingJobMediaProperties;

    public LabelingJobImagePropertiesResponse labelingJobMediaProperties() {
        return this.labelingJobMediaProperties;
    }

    /**
     * Machine learning assisted configuration for the job.
     * 
     */
    @Import(name="mlAssistConfiguration")
    private @Nullable MLAssistConfigurationResponse mlAssistConfiguration;

    public Optional<MLAssistConfigurationResponse> mlAssistConfiguration() {
        return Optional.ofNullable(this.mlAssistConfiguration);
    }

    /**
     * Progress metrics of the job.
     * 
     */
    @Import(name="progressMetrics", required=true)
    private ProgressMetricsResponse progressMetrics;

    public ProgressMetricsResponse progressMetrics() {
        return this.progressMetrics;
    }

    /**
     * Internal id of the job(Previously called project).
     * 
     */
    @Import(name="projectId", required=true)
    private String projectId;

    public String projectId() {
        return this.projectId;
    }

    /**
     * The job property dictionary. Properties can be added, but not removed or altered.
     * 
     */
    @Import(name="properties")
    private @Nullable Map<String,String> properties;

    public Optional<Map<String,String>> properties() {
        return Optional.ofNullable(this.properties);
    }

    /**
     * Status of the job.
     * 
     */
    @Import(name="status", required=true)
    private String status;

    public String status() {
        return this.status;
    }

    /**
     * Status messages of the job.
     * 
     */
    @Import(name="statusMessages", required=true)
    private List<StatusMessageResponse> statusMessages;

    public List<StatusMessageResponse> statusMessages() {
        return this.statusMessages;
    }

    /**
     * The job tag dictionary. Tags can be added, removed, and updated.
     * 
     */
    @Import(name="tags")
    private @Nullable Map<String,String> tags;

    public Optional<Map<String,String>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private LabelingJobPropertiesResponse() {}

    private LabelingJobPropertiesResponse(LabelingJobPropertiesResponse $) {
        this.createdTimeUtc = $.createdTimeUtc;
        this.datasetConfiguration = $.datasetConfiguration;
        this.jobInstructions = $.jobInstructions;
        this.labelCategories = $.labelCategories;
        this.labelingJobMediaProperties = $.labelingJobMediaProperties;
        this.mlAssistConfiguration = $.mlAssistConfiguration;
        this.progressMetrics = $.progressMetrics;
        this.projectId = $.projectId;
        this.properties = $.properties;
        this.status = $.status;
        this.statusMessages = $.statusMessages;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LabelingJobPropertiesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LabelingJobPropertiesResponse $;

        public Builder() {
            $ = new LabelingJobPropertiesResponse();
        }

        public Builder(LabelingJobPropertiesResponse defaults) {
            $ = new LabelingJobPropertiesResponse(Objects.requireNonNull(defaults));
        }

        public Builder createdTimeUtc(String createdTimeUtc) {
            $.createdTimeUtc = createdTimeUtc;
            return this;
        }

        public Builder datasetConfiguration(LabelingDatasetConfigurationResponse datasetConfiguration) {
            $.datasetConfiguration = datasetConfiguration;
            return this;
        }

        public Builder jobInstructions(LabelingJobInstructionsResponse jobInstructions) {
            $.jobInstructions = jobInstructions;
            return this;
        }

        public Builder labelCategories(Map<String,LabelCategoryResponse> labelCategories) {
            $.labelCategories = labelCategories;
            return this;
        }

        public Builder labelingJobMediaProperties(LabelingJobImagePropertiesResponse labelingJobMediaProperties) {
            $.labelingJobMediaProperties = labelingJobMediaProperties;
            return this;
        }

        public Builder mlAssistConfiguration(@Nullable MLAssistConfigurationResponse mlAssistConfiguration) {
            $.mlAssistConfiguration = mlAssistConfiguration;
            return this;
        }

        public Builder progressMetrics(ProgressMetricsResponse progressMetrics) {
            $.progressMetrics = progressMetrics;
            return this;
        }

        public Builder projectId(String projectId) {
            $.projectId = projectId;
            return this;
        }

        public Builder properties(@Nullable Map<String,String> properties) {
            $.properties = properties;
            return this;
        }

        public Builder status(String status) {
            $.status = status;
            return this;
        }

        public Builder statusMessages(List<StatusMessageResponse> statusMessages) {
            $.statusMessages = statusMessages;
            return this;
        }

        public Builder statusMessages(StatusMessageResponse... statusMessages) {
            return statusMessages(List.of(statusMessages));
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            $.tags = tags;
            return this;
        }

        public LabelingJobPropertiesResponse build() {
            $.createdTimeUtc = Objects.requireNonNull($.createdTimeUtc, "expected parameter 'createdTimeUtc' to be non-null");
            $.datasetConfiguration = Objects.requireNonNull($.datasetConfiguration, "expected parameter 'datasetConfiguration' to be non-null");
            $.jobInstructions = Objects.requireNonNull($.jobInstructions, "expected parameter 'jobInstructions' to be non-null");
            $.labelCategories = Objects.requireNonNull($.labelCategories, "expected parameter 'labelCategories' to be non-null");
            $.labelingJobMediaProperties = Objects.requireNonNull($.labelingJobMediaProperties, "expected parameter 'labelingJobMediaProperties' to be non-null");
            $.progressMetrics = Objects.requireNonNull($.progressMetrics, "expected parameter 'progressMetrics' to be non-null");
            $.projectId = Objects.requireNonNull($.projectId, "expected parameter 'projectId' to be non-null");
            $.status = Objects.requireNonNull($.status, "expected parameter 'status' to be non-null");
            $.statusMessages = Objects.requireNonNull($.statusMessages, "expected parameter 'statusMessages' to be non-null");
            return $;
        }
    }

}
