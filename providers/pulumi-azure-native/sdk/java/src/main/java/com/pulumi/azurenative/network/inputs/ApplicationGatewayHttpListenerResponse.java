// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.azurenative.network.inputs.ApplicationGatewayCustomErrorResponse;
import com.pulumi.azurenative.network.inputs.SubResourceResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Http listener of an application gateway.
 * 
 */
public final class ApplicationGatewayHttpListenerResponse extends com.pulumi.resources.InvokeArgs {

    public static final ApplicationGatewayHttpListenerResponse Empty = new ApplicationGatewayHttpListenerResponse();

    /**
     * Custom error configurations of the HTTP listener.
     * 
     */
    @Import(name="customErrorConfigurations")
    private @Nullable List<ApplicationGatewayCustomErrorResponse> customErrorConfigurations;

    /**
     * @return Custom error configurations of the HTTP listener.
     * 
     */
    public Optional<List<ApplicationGatewayCustomErrorResponse>> customErrorConfigurations() {
        return Optional.ofNullable(this.customErrorConfigurations);
    }

    /**
     * A unique read-only string that changes whenever the resource is updated.
     * 
     */
    @Import(name="etag", required=true)
    private String etag;

    /**
     * @return A unique read-only string that changes whenever the resource is updated.
     * 
     */
    public String etag() {
        return this.etag;
    }

    /**
     * Reference to the FirewallPolicy resource.
     * 
     */
    @Import(name="firewallPolicy")
    private @Nullable SubResourceResponse firewallPolicy;

    /**
     * @return Reference to the FirewallPolicy resource.
     * 
     */
    public Optional<SubResourceResponse> firewallPolicy() {
        return Optional.ofNullable(this.firewallPolicy);
    }

    /**
     * Frontend IP configuration resource of an application gateway.
     * 
     */
    @Import(name="frontendIPConfiguration")
    private @Nullable SubResourceResponse frontendIPConfiguration;

    /**
     * @return Frontend IP configuration resource of an application gateway.
     * 
     */
    public Optional<SubResourceResponse> frontendIPConfiguration() {
        return Optional.ofNullable(this.frontendIPConfiguration);
    }

    /**
     * Frontend port resource of an application gateway.
     * 
     */
    @Import(name="frontendPort")
    private @Nullable SubResourceResponse frontendPort;

    /**
     * @return Frontend port resource of an application gateway.
     * 
     */
    public Optional<SubResourceResponse> frontendPort() {
        return Optional.ofNullable(this.frontendPort);
    }

    /**
     * Host name of HTTP listener.
     * 
     */
    @Import(name="hostName")
    private @Nullable String hostName;

    /**
     * @return Host name of HTTP listener.
     * 
     */
    public Optional<String> hostName() {
        return Optional.ofNullable(this.hostName);
    }

    /**
     * List of Host names for HTTP Listener that allows special wildcard characters as well.
     * 
     */
    @Import(name="hostNames")
    private @Nullable List<String> hostNames;

    /**
     * @return List of Host names for HTTP Listener that allows special wildcard characters as well.
     * 
     */
    public Optional<List<String>> hostNames() {
        return Optional.ofNullable(this.hostNames);
    }

    /**
     * Resource ID.
     * 
     */
    @Import(name="id")
    private @Nullable String id;

    /**
     * @return Resource ID.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Name of the HTTP listener that is unique within an Application Gateway.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return Name of the HTTP listener that is unique within an Application Gateway.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Protocol of the HTTP listener.
     * 
     */
    @Import(name="protocol")
    private @Nullable String protocol;

    /**
     * @return Protocol of the HTTP listener.
     * 
     */
    public Optional<String> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    /**
     * The provisioning state of the HTTP listener resource.
     * 
     */
    @Import(name="provisioningState", required=true)
    private String provisioningState;

    /**
     * @return The provisioning state of the HTTP listener resource.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Applicable only if protocol is https. Enables SNI for multi-hosting.
     * 
     */
    @Import(name="requireServerNameIndication")
    private @Nullable Boolean requireServerNameIndication;

    /**
     * @return Applicable only if protocol is https. Enables SNI for multi-hosting.
     * 
     */
    public Optional<Boolean> requireServerNameIndication() {
        return Optional.ofNullable(this.requireServerNameIndication);
    }

    /**
     * SSL certificate resource of an application gateway.
     * 
     */
    @Import(name="sslCertificate")
    private @Nullable SubResourceResponse sslCertificate;

    /**
     * @return SSL certificate resource of an application gateway.
     * 
     */
    public Optional<SubResourceResponse> sslCertificate() {
        return Optional.ofNullable(this.sslCertificate);
    }

    /**
     * SSL profile resource of the application gateway.
     * 
     */
    @Import(name="sslProfile")
    private @Nullable SubResourceResponse sslProfile;

    /**
     * @return SSL profile resource of the application gateway.
     * 
     */
    public Optional<SubResourceResponse> sslProfile() {
        return Optional.ofNullable(this.sslProfile);
    }

    /**
     * Type of the resource.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    /**
     * @return Type of the resource.
     * 
     */
    public String type() {
        return this.type;
    }

    private ApplicationGatewayHttpListenerResponse() {}

    private ApplicationGatewayHttpListenerResponse(ApplicationGatewayHttpListenerResponse $) {
        this.customErrorConfigurations = $.customErrorConfigurations;
        this.etag = $.etag;
        this.firewallPolicy = $.firewallPolicy;
        this.frontendIPConfiguration = $.frontendIPConfiguration;
        this.frontendPort = $.frontendPort;
        this.hostName = $.hostName;
        this.hostNames = $.hostNames;
        this.id = $.id;
        this.name = $.name;
        this.protocol = $.protocol;
        this.provisioningState = $.provisioningState;
        this.requireServerNameIndication = $.requireServerNameIndication;
        this.sslCertificate = $.sslCertificate;
        this.sslProfile = $.sslProfile;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplicationGatewayHttpListenerResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplicationGatewayHttpListenerResponse $;

        public Builder() {
            $ = new ApplicationGatewayHttpListenerResponse();
        }

        public Builder(ApplicationGatewayHttpListenerResponse defaults) {
            $ = new ApplicationGatewayHttpListenerResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param customErrorConfigurations Custom error configurations of the HTTP listener.
         * 
         * @return builder
         * 
         */
        public Builder customErrorConfigurations(@Nullable List<ApplicationGatewayCustomErrorResponse> customErrorConfigurations) {
            $.customErrorConfigurations = customErrorConfigurations;
            return this;
        }

        /**
         * @param customErrorConfigurations Custom error configurations of the HTTP listener.
         * 
         * @return builder
         * 
         */
        public Builder customErrorConfigurations(ApplicationGatewayCustomErrorResponse... customErrorConfigurations) {
            return customErrorConfigurations(List.of(customErrorConfigurations));
        }

        /**
         * @param etag A unique read-only string that changes whenever the resource is updated.
         * 
         * @return builder
         * 
         */
        public Builder etag(String etag) {
            $.etag = etag;
            return this;
        }

        /**
         * @param firewallPolicy Reference to the FirewallPolicy resource.
         * 
         * @return builder
         * 
         */
        public Builder firewallPolicy(@Nullable SubResourceResponse firewallPolicy) {
            $.firewallPolicy = firewallPolicy;
            return this;
        }

        /**
         * @param frontendIPConfiguration Frontend IP configuration resource of an application gateway.
         * 
         * @return builder
         * 
         */
        public Builder frontendIPConfiguration(@Nullable SubResourceResponse frontendIPConfiguration) {
            $.frontendIPConfiguration = frontendIPConfiguration;
            return this;
        }

        /**
         * @param frontendPort Frontend port resource of an application gateway.
         * 
         * @return builder
         * 
         */
        public Builder frontendPort(@Nullable SubResourceResponse frontendPort) {
            $.frontendPort = frontendPort;
            return this;
        }

        /**
         * @param hostName Host name of HTTP listener.
         * 
         * @return builder
         * 
         */
        public Builder hostName(@Nullable String hostName) {
            $.hostName = hostName;
            return this;
        }

        /**
         * @param hostNames List of Host names for HTTP Listener that allows special wildcard characters as well.
         * 
         * @return builder
         * 
         */
        public Builder hostNames(@Nullable List<String> hostNames) {
            $.hostNames = hostNames;
            return this;
        }

        /**
         * @param hostNames List of Host names for HTTP Listener that allows special wildcard characters as well.
         * 
         * @return builder
         * 
         */
        public Builder hostNames(String... hostNames) {
            return hostNames(List.of(hostNames));
        }

        /**
         * @param id Resource ID.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable String id) {
            $.id = id;
            return this;
        }

        /**
         * @param name Name of the HTTP listener that is unique within an Application Gateway.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param protocol Protocol of the HTTP listener.
         * 
         * @return builder
         * 
         */
        public Builder protocol(@Nullable String protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param provisioningState The provisioning state of the HTTP listener resource.
         * 
         * @return builder
         * 
         */
        public Builder provisioningState(String provisioningState) {
            $.provisioningState = provisioningState;
            return this;
        }

        /**
         * @param requireServerNameIndication Applicable only if protocol is https. Enables SNI for multi-hosting.
         * 
         * @return builder
         * 
         */
        public Builder requireServerNameIndication(@Nullable Boolean requireServerNameIndication) {
            $.requireServerNameIndication = requireServerNameIndication;
            return this;
        }

        /**
         * @param sslCertificate SSL certificate resource of an application gateway.
         * 
         * @return builder
         * 
         */
        public Builder sslCertificate(@Nullable SubResourceResponse sslCertificate) {
            $.sslCertificate = sslCertificate;
            return this;
        }

        /**
         * @param sslProfile SSL profile resource of the application gateway.
         * 
         * @return builder
         * 
         */
        public Builder sslProfile(@Nullable SubResourceResponse sslProfile) {
            $.sslProfile = sslProfile;
            return this;
        }

        /**
         * @param type Type of the resource.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public ApplicationGatewayHttpListenerResponse build() {
            $.etag = Objects.requireNonNull($.etag, "expected parameter 'etag' to be non-null");
            $.provisioningState = Objects.requireNonNull($.provisioningState, "expected parameter 'provisioningState' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
