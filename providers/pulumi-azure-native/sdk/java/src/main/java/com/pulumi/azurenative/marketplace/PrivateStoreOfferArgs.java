// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.marketplace;

import com.pulumi.azurenative.marketplace.inputs.PlanArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class PrivateStoreOfferArgs extends com.pulumi.resources.ResourceArgs {

    public static final PrivateStoreOfferArgs Empty = new PrivateStoreOfferArgs();

    /**
     * Identifier for purposes of race condition
     * 
     */
    @Import(name="eTag")
      private final @Nullable Output<String> eTag;

    public Output<String> eTag() {
        return this.eTag == null ? Codegen.empty() : this.eTag;
    }

    /**
     * Icon File Uris
     * 
     */
    @Import(name="iconFileUris")
      private final @Nullable Output<Map<String,String>> iconFileUris;

    public Output<Map<String,String>> iconFileUris() {
        return this.iconFileUris == null ? Codegen.empty() : this.iconFileUris;
    }

    /**
     * The offer ID to update or delete
     * 
     */
    @Import(name="offerId")
      private final @Nullable Output<String> offerId;

    public Output<String> offerId() {
        return this.offerId == null ? Codegen.empty() : this.offerId;
    }

    /**
     * Offer plans
     * 
     */
    @Import(name="plans")
      private final @Nullable Output<List<PlanArgs>> plans;

    public Output<List<PlanArgs>> plans() {
        return this.plans == null ? Codegen.empty() : this.plans;
    }

    /**
     * The store ID - must use the tenant ID
     * 
     */
    @Import(name="privateStoreId", required=true)
      private final Output<String> privateStoreId;

    public Output<String> privateStoreId() {
        return this.privateStoreId;
    }

    /**
     * Plan ids limitation for this offer
     * 
     */
    @Import(name="specificPlanIdsLimitation")
      private final @Nullable Output<List<String>> specificPlanIdsLimitation;

    public Output<List<String>> specificPlanIdsLimitation() {
        return this.specificPlanIdsLimitation == null ? Codegen.empty() : this.specificPlanIdsLimitation;
    }

    /**
     * Indicating whether the offer was not updated to db (true = not updated). If the allow list is identical to the existed one in db, the offer would not be updated.
     * 
     */
    @Import(name="updateSuppressedDueIdempotence")
      private final @Nullable Output<Boolean> updateSuppressedDueIdempotence;

    public Output<Boolean> updateSuppressedDueIdempotence() {
        return this.updateSuppressedDueIdempotence == null ? Codegen.empty() : this.updateSuppressedDueIdempotence;
    }

    public PrivateStoreOfferArgs(
        @Nullable Output<String> eTag,
        @Nullable Output<Map<String,String>> iconFileUris,
        @Nullable Output<String> offerId,
        @Nullable Output<List<PlanArgs>> plans,
        Output<String> privateStoreId,
        @Nullable Output<List<String>> specificPlanIdsLimitation,
        @Nullable Output<Boolean> updateSuppressedDueIdempotence) {
        this.eTag = eTag;
        this.iconFileUris = iconFileUris;
        this.offerId = offerId;
        this.plans = plans;
        this.privateStoreId = Objects.requireNonNull(privateStoreId, "expected parameter 'privateStoreId' to be non-null");
        this.specificPlanIdsLimitation = specificPlanIdsLimitation;
        this.updateSuppressedDueIdempotence = updateSuppressedDueIdempotence;
    }

    private PrivateStoreOfferArgs() {
        this.eTag = Codegen.empty();
        this.iconFileUris = Codegen.empty();
        this.offerId = Codegen.empty();
        this.plans = Codegen.empty();
        this.privateStoreId = Codegen.empty();
        this.specificPlanIdsLimitation = Codegen.empty();
        this.updateSuppressedDueIdempotence = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PrivateStoreOfferArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> eTag;
        private @Nullable Output<Map<String,String>> iconFileUris;
        private @Nullable Output<String> offerId;
        private @Nullable Output<List<PlanArgs>> plans;
        private Output<String> privateStoreId;
        private @Nullable Output<List<String>> specificPlanIdsLimitation;
        private @Nullable Output<Boolean> updateSuppressedDueIdempotence;

        public Builder() {
    	      // Empty
        }

        public Builder(PrivateStoreOfferArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.eTag = defaults.eTag;
    	      this.iconFileUris = defaults.iconFileUris;
    	      this.offerId = defaults.offerId;
    	      this.plans = defaults.plans;
    	      this.privateStoreId = defaults.privateStoreId;
    	      this.specificPlanIdsLimitation = defaults.specificPlanIdsLimitation;
    	      this.updateSuppressedDueIdempotence = defaults.updateSuppressedDueIdempotence;
        }

        public Builder eTag(@Nullable Output<String> eTag) {
            this.eTag = eTag;
            return this;
        }
        public Builder eTag(@Nullable String eTag) {
            this.eTag = Codegen.ofNullable(eTag);
            return this;
        }
        public Builder iconFileUris(@Nullable Output<Map<String,String>> iconFileUris) {
            this.iconFileUris = iconFileUris;
            return this;
        }
        public Builder iconFileUris(@Nullable Map<String,String> iconFileUris) {
            this.iconFileUris = Codegen.ofNullable(iconFileUris);
            return this;
        }
        public Builder offerId(@Nullable Output<String> offerId) {
            this.offerId = offerId;
            return this;
        }
        public Builder offerId(@Nullable String offerId) {
            this.offerId = Codegen.ofNullable(offerId);
            return this;
        }
        public Builder plans(@Nullable Output<List<PlanArgs>> plans) {
            this.plans = plans;
            return this;
        }
        public Builder plans(@Nullable List<PlanArgs> plans) {
            this.plans = Codegen.ofNullable(plans);
            return this;
        }
        public Builder plans(PlanArgs... plans) {
            return plans(List.of(plans));
        }
        public Builder privateStoreId(Output<String> privateStoreId) {
            this.privateStoreId = Objects.requireNonNull(privateStoreId);
            return this;
        }
        public Builder privateStoreId(String privateStoreId) {
            this.privateStoreId = Output.of(Objects.requireNonNull(privateStoreId));
            return this;
        }
        public Builder specificPlanIdsLimitation(@Nullable Output<List<String>> specificPlanIdsLimitation) {
            this.specificPlanIdsLimitation = specificPlanIdsLimitation;
            return this;
        }
        public Builder specificPlanIdsLimitation(@Nullable List<String> specificPlanIdsLimitation) {
            this.specificPlanIdsLimitation = Codegen.ofNullable(specificPlanIdsLimitation);
            return this;
        }
        public Builder specificPlanIdsLimitation(String... specificPlanIdsLimitation) {
            return specificPlanIdsLimitation(List.of(specificPlanIdsLimitation));
        }
        public Builder updateSuppressedDueIdempotence(@Nullable Output<Boolean> updateSuppressedDueIdempotence) {
            this.updateSuppressedDueIdempotence = updateSuppressedDueIdempotence;
            return this;
        }
        public Builder updateSuppressedDueIdempotence(@Nullable Boolean updateSuppressedDueIdempotence) {
            this.updateSuppressedDueIdempotence = Codegen.ofNullable(updateSuppressedDueIdempotence);
            return this;
        }        public PrivateStoreOfferArgs build() {
            return new PrivateStoreOfferArgs(eTag, iconFileUris, offerId, plans, privateStoreId, specificPlanIdsLimitation, updateSuppressedDueIdempotence);
        }
    }
}
