// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The settings that will be leveraged for Sql source partitioning.
 * 
 */
public final class SqlPartitionSettingsResponse extends com.pulumi.resources.InvokeArgs {

    public static final SqlPartitionSettingsResponse Empty = new SqlPartitionSettingsResponse();

    /**
     * The name of the column in integer or datetime type that will be used for proceeding partitioning. If not specified, the primary key of the table is auto-detected and used as the partition column. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="partitionColumnName")
    private @Nullable Object partitionColumnName;

    public Optional<Object> partitionColumnName() {
        return Optional.ofNullable(this.partitionColumnName);
    }

    /**
     * The minimum value of the partition column for partition range splitting. This value is used to decide the partition stride, not for filtering the rows in table. All rows in the table or query result will be partitioned and copied. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="partitionLowerBound")
    private @Nullable Object partitionLowerBound;

    public Optional<Object> partitionLowerBound() {
        return Optional.ofNullable(this.partitionLowerBound);
    }

    /**
     * The maximum value of the partition column for partition range splitting. This value is used to decide the partition stride, not for filtering the rows in table. All rows in the table or query result will be partitioned and copied. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="partitionUpperBound")
    private @Nullable Object partitionUpperBound;

    public Optional<Object> partitionUpperBound() {
        return Optional.ofNullable(this.partitionUpperBound);
    }

    private SqlPartitionSettingsResponse() {}

    private SqlPartitionSettingsResponse(SqlPartitionSettingsResponse $) {
        this.partitionColumnName = $.partitionColumnName;
        this.partitionLowerBound = $.partitionLowerBound;
        this.partitionUpperBound = $.partitionUpperBound;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SqlPartitionSettingsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SqlPartitionSettingsResponse $;

        public Builder() {
            $ = new SqlPartitionSettingsResponse();
        }

        public Builder(SqlPartitionSettingsResponse defaults) {
            $ = new SqlPartitionSettingsResponse(Objects.requireNonNull(defaults));
        }

        public Builder partitionColumnName(@Nullable Object partitionColumnName) {
            $.partitionColumnName = partitionColumnName;
            return this;
        }

        public Builder partitionLowerBound(@Nullable Object partitionLowerBound) {
            $.partitionLowerBound = partitionLowerBound;
            return this;
        }

        public Builder partitionUpperBound(@Nullable Object partitionUpperBound) {
            $.partitionUpperBound = partitionUpperBound;
            return this;
        }

        public SqlPartitionSettingsResponse build() {
            return $;
        }
    }

}
