// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.azurenative.datafactory.enums.RecurrenceFrequency;
import com.pulumi.azurenative.datafactory.inputs.RecurrenceScheduleArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The workflow trigger recurrence.
 * 
 */
public final class ScheduleTriggerRecurrenceArgs extends com.pulumi.resources.ResourceArgs {

    public static final ScheduleTriggerRecurrenceArgs Empty = new ScheduleTriggerRecurrenceArgs();

    /**
     * The end time.
     * 
     */
    @Import(name="endTime")
      private final @Nullable Output<String> endTime;

    public Output<String> endTime() {
        return this.endTime == null ? Codegen.empty() : this.endTime;
    }

    /**
     * The frequency.
     * 
     */
    @Import(name="frequency")
      private final @Nullable Output<Either<String,RecurrenceFrequency>> frequency;

    public Output<Either<String,RecurrenceFrequency>> frequency() {
        return this.frequency == null ? Codegen.empty() : this.frequency;
    }

    /**
     * The interval.
     * 
     */
    @Import(name="interval")
      private final @Nullable Output<Integer> interval;

    public Output<Integer> interval() {
        return this.interval == null ? Codegen.empty() : this.interval;
    }

    /**
     * The recurrence schedule.
     * 
     */
    @Import(name="schedule")
      private final @Nullable Output<RecurrenceScheduleArgs> schedule;

    public Output<RecurrenceScheduleArgs> schedule() {
        return this.schedule == null ? Codegen.empty() : this.schedule;
    }

    /**
     * The start time.
     * 
     */
    @Import(name="startTime")
      private final @Nullable Output<String> startTime;

    public Output<String> startTime() {
        return this.startTime == null ? Codegen.empty() : this.startTime;
    }

    /**
     * The time zone.
     * 
     */
    @Import(name="timeZone")
      private final @Nullable Output<String> timeZone;

    public Output<String> timeZone() {
        return this.timeZone == null ? Codegen.empty() : this.timeZone;
    }

    public ScheduleTriggerRecurrenceArgs(
        @Nullable Output<String> endTime,
        @Nullable Output<Either<String,RecurrenceFrequency>> frequency,
        @Nullable Output<Integer> interval,
        @Nullable Output<RecurrenceScheduleArgs> schedule,
        @Nullable Output<String> startTime,
        @Nullable Output<String> timeZone) {
        this.endTime = endTime;
        this.frequency = frequency;
        this.interval = interval;
        this.schedule = schedule;
        this.startTime = startTime;
        this.timeZone = timeZone;
    }

    private ScheduleTriggerRecurrenceArgs() {
        this.endTime = Codegen.empty();
        this.frequency = Codegen.empty();
        this.interval = Codegen.empty();
        this.schedule = Codegen.empty();
        this.startTime = Codegen.empty();
        this.timeZone = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ScheduleTriggerRecurrenceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> endTime;
        private @Nullable Output<Either<String,RecurrenceFrequency>> frequency;
        private @Nullable Output<Integer> interval;
        private @Nullable Output<RecurrenceScheduleArgs> schedule;
        private @Nullable Output<String> startTime;
        private @Nullable Output<String> timeZone;

        public Builder() {
    	      // Empty
        }

        public Builder(ScheduleTriggerRecurrenceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.endTime = defaults.endTime;
    	      this.frequency = defaults.frequency;
    	      this.interval = defaults.interval;
    	      this.schedule = defaults.schedule;
    	      this.startTime = defaults.startTime;
    	      this.timeZone = defaults.timeZone;
        }

        public Builder endTime(@Nullable Output<String> endTime) {
            this.endTime = endTime;
            return this;
        }
        public Builder endTime(@Nullable String endTime) {
            this.endTime = Codegen.ofNullable(endTime);
            return this;
        }
        public Builder frequency(@Nullable Output<Either<String,RecurrenceFrequency>> frequency) {
            this.frequency = frequency;
            return this;
        }
        public Builder frequency(@Nullable Either<String,RecurrenceFrequency> frequency) {
            this.frequency = Codegen.ofNullable(frequency);
            return this;
        }
        public Builder interval(@Nullable Output<Integer> interval) {
            this.interval = interval;
            return this;
        }
        public Builder interval(@Nullable Integer interval) {
            this.interval = Codegen.ofNullable(interval);
            return this;
        }
        public Builder schedule(@Nullable Output<RecurrenceScheduleArgs> schedule) {
            this.schedule = schedule;
            return this;
        }
        public Builder schedule(@Nullable RecurrenceScheduleArgs schedule) {
            this.schedule = Codegen.ofNullable(schedule);
            return this;
        }
        public Builder startTime(@Nullable Output<String> startTime) {
            this.startTime = startTime;
            return this;
        }
        public Builder startTime(@Nullable String startTime) {
            this.startTime = Codegen.ofNullable(startTime);
            return this;
        }
        public Builder timeZone(@Nullable Output<String> timeZone) {
            this.timeZone = timeZone;
            return this;
        }
        public Builder timeZone(@Nullable String timeZone) {
            this.timeZone = Codegen.ofNullable(timeZone);
            return this;
        }        public ScheduleTriggerRecurrenceArgs build() {
            return new ScheduleTriggerRecurrenceArgs(endTime, frequency, interval, schedule, startTime, timeZone);
        }
    }
}
