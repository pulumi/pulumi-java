// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datamigration.inputs;

import com.pulumi.azurenative.datamigration.inputs.SqlConnectionInfoArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Input for the task that collects user tables for the given list of databases
 * 
 */
public final class GetUserTablesSqlTaskInputArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetUserTablesSqlTaskInputArgs Empty = new GetUserTablesSqlTaskInputArgs();

    /**
     * Connection information for SQL Server
     * 
     */
    @Import(name="connectionInfo", required=true)
      private final Output<SqlConnectionInfoArgs> connectionInfo;

    public Output<SqlConnectionInfoArgs> connectionInfo() {
        return this.connectionInfo;
    }

    /**
     * List of database names to collect tables for
     * 
     */
    @Import(name="selectedDatabases", required=true)
      private final Output<List<String>> selectedDatabases;

    public Output<List<String>> selectedDatabases() {
        return this.selectedDatabases;
    }

    public GetUserTablesSqlTaskInputArgs(
        Output<SqlConnectionInfoArgs> connectionInfo,
        Output<List<String>> selectedDatabases) {
        this.connectionInfo = Objects.requireNonNull(connectionInfo, "expected parameter 'connectionInfo' to be non-null");
        this.selectedDatabases = Objects.requireNonNull(selectedDatabases, "expected parameter 'selectedDatabases' to be non-null");
    }

    private GetUserTablesSqlTaskInputArgs() {
        this.connectionInfo = Codegen.empty();
        this.selectedDatabases = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetUserTablesSqlTaskInputArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<SqlConnectionInfoArgs> connectionInfo;
        private Output<List<String>> selectedDatabases;

        public Builder() {
    	      // Empty
        }

        public Builder(GetUserTablesSqlTaskInputArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectionInfo = defaults.connectionInfo;
    	      this.selectedDatabases = defaults.selectedDatabases;
        }

        public Builder connectionInfo(Output<SqlConnectionInfoArgs> connectionInfo) {
            this.connectionInfo = Objects.requireNonNull(connectionInfo);
            return this;
        }
        public Builder connectionInfo(SqlConnectionInfoArgs connectionInfo) {
            this.connectionInfo = Output.of(Objects.requireNonNull(connectionInfo));
            return this;
        }
        public Builder selectedDatabases(Output<List<String>> selectedDatabases) {
            this.selectedDatabases = Objects.requireNonNull(selectedDatabases);
            return this;
        }
        public Builder selectedDatabases(List<String> selectedDatabases) {
            this.selectedDatabases = Output.of(Objects.requireNonNull(selectedDatabases));
            return this;
        }
        public Builder selectedDatabases(String... selectedDatabases) {
            return selectedDatabases(List.of(selectedDatabases));
        }        public GetUserTablesSqlTaskInputArgs build() {
            return new GetUserTablesSqlTaskInputArgs(connectionInfo, selectedDatabases);
        }
    }
}
