// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.scheduler.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClientCertAuthenticationArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClientCertAuthenticationArgs Empty = new ClientCertAuthenticationArgs();

    /**
     * Gets or sets the certificate expiration date.
     * 
     */
    @Import(name="certificateExpirationDate")
    private @Nullable Output<String> certificateExpirationDate;

    public Optional<Output<String>> certificateExpirationDate() {
        return Optional.ofNullable(this.certificateExpirationDate);
    }

    /**
     * Gets or sets the certificate subject name.
     * 
     */
    @Import(name="certificateSubjectName")
    private @Nullable Output<String> certificateSubjectName;

    public Optional<Output<String>> certificateSubjectName() {
        return Optional.ofNullable(this.certificateSubjectName);
    }

    /**
     * Gets or sets the certificate thumbprint.
     * 
     */
    @Import(name="certificateThumbprint")
    private @Nullable Output<String> certificateThumbprint;

    public Optional<Output<String>> certificateThumbprint() {
        return Optional.ofNullable(this.certificateThumbprint);
    }

    /**
     * Gets or sets the certificate password, return value will always be empty.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * Gets or sets the pfx certificate. Accepts certification in base64 encoding, return value will always be empty.
     * 
     */
    @Import(name="pfx")
    private @Nullable Output<String> pfx;

    public Optional<Output<String>> pfx() {
        return Optional.ofNullable(this.pfx);
    }

    /**
     * Gets or sets the HTTP authentication type.
     * Expected value is &#39;ClientCertificate&#39;.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    private ClientCertAuthenticationArgs() {}

    private ClientCertAuthenticationArgs(ClientCertAuthenticationArgs $) {
        this.certificateExpirationDate = $.certificateExpirationDate;
        this.certificateSubjectName = $.certificateSubjectName;
        this.certificateThumbprint = $.certificateThumbprint;
        this.password = $.password;
        this.pfx = $.pfx;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClientCertAuthenticationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClientCertAuthenticationArgs $;

        public Builder() {
            $ = new ClientCertAuthenticationArgs();
        }

        public Builder(ClientCertAuthenticationArgs defaults) {
            $ = new ClientCertAuthenticationArgs(Objects.requireNonNull(defaults));
        }

        public Builder certificateExpirationDate(@Nullable Output<String> certificateExpirationDate) {
            $.certificateExpirationDate = certificateExpirationDate;
            return this;
        }

        public Builder certificateExpirationDate(String certificateExpirationDate) {
            return certificateExpirationDate(Output.of(certificateExpirationDate));
        }

        public Builder certificateSubjectName(@Nullable Output<String> certificateSubjectName) {
            $.certificateSubjectName = certificateSubjectName;
            return this;
        }

        public Builder certificateSubjectName(String certificateSubjectName) {
            return certificateSubjectName(Output.of(certificateSubjectName));
        }

        public Builder certificateThumbprint(@Nullable Output<String> certificateThumbprint) {
            $.certificateThumbprint = certificateThumbprint;
            return this;
        }

        public Builder certificateThumbprint(String certificateThumbprint) {
            return certificateThumbprint(Output.of(certificateThumbprint));
        }

        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        public Builder password(String password) {
            return password(Output.of(password));
        }

        public Builder pfx(@Nullable Output<String> pfx) {
            $.pfx = pfx;
            return this;
        }

        public Builder pfx(String pfx) {
            return pfx(Output.of(pfx));
        }

        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public ClientCertAuthenticationArgs build() {
            $.type = Codegen.stringProp("type").output().arg($.type).require();
            return $;
        }
    }

}
