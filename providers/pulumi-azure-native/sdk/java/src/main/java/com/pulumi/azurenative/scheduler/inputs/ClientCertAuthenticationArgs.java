// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.scheduler.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ClientCertAuthenticationArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClientCertAuthenticationArgs Empty = new ClientCertAuthenticationArgs();

    /**
     * Gets or sets the certificate expiration date.
     * 
     */
    @Import(name="certificateExpirationDate")
      private final @Nullable Output<String> certificateExpirationDate;

    public Output<String> certificateExpirationDate() {
        return this.certificateExpirationDate == null ? Codegen.empty() : this.certificateExpirationDate;
    }

    /**
     * Gets or sets the certificate subject name.
     * 
     */
    @Import(name="certificateSubjectName")
      private final @Nullable Output<String> certificateSubjectName;

    public Output<String> certificateSubjectName() {
        return this.certificateSubjectName == null ? Codegen.empty() : this.certificateSubjectName;
    }

    /**
     * Gets or sets the certificate thumbprint.
     * 
     */
    @Import(name="certificateThumbprint")
      private final @Nullable Output<String> certificateThumbprint;

    public Output<String> certificateThumbprint() {
        return this.certificateThumbprint == null ? Codegen.empty() : this.certificateThumbprint;
    }

    /**
     * Gets or sets the certificate password, return value will always be empty.
     * 
     */
    @Import(name="password")
      private final @Nullable Output<String> password;

    public Output<String> password() {
        return this.password == null ? Codegen.empty() : this.password;
    }

    /**
     * Gets or sets the pfx certificate. Accepts certification in base64 encoding, return value will always be empty.
     * 
     */
    @Import(name="pfx")
      private final @Nullable Output<String> pfx;

    public Output<String> pfx() {
        return this.pfx == null ? Codegen.empty() : this.pfx;
    }

    /**
     * Gets or sets the HTTP authentication type.
     * Expected value is &#39;ClientCertificate&#39;.
     * 
     */
    @Import(name="type", required=true)
      private final Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    public ClientCertAuthenticationArgs(
        @Nullable Output<String> certificateExpirationDate,
        @Nullable Output<String> certificateSubjectName,
        @Nullable Output<String> certificateThumbprint,
        @Nullable Output<String> password,
        @Nullable Output<String> pfx,
        Output<String> type) {
        this.certificateExpirationDate = certificateExpirationDate;
        this.certificateSubjectName = certificateSubjectName;
        this.certificateThumbprint = certificateThumbprint;
        this.password = password;
        this.pfx = pfx;
        this.type = Codegen.stringProp("type").output().arg(type).require();
    }

    private ClientCertAuthenticationArgs() {
        this.certificateExpirationDate = Codegen.empty();
        this.certificateSubjectName = Codegen.empty();
        this.certificateThumbprint = Codegen.empty();
        this.password = Codegen.empty();
        this.pfx = Codegen.empty();
        this.type = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ClientCertAuthenticationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> certificateExpirationDate;
        private @Nullable Output<String> certificateSubjectName;
        private @Nullable Output<String> certificateThumbprint;
        private @Nullable Output<String> password;
        private @Nullable Output<String> pfx;
        private Output<String> type;

        public Builder() {
    	      // Empty
        }

        public Builder(ClientCertAuthenticationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificateExpirationDate = defaults.certificateExpirationDate;
    	      this.certificateSubjectName = defaults.certificateSubjectName;
    	      this.certificateThumbprint = defaults.certificateThumbprint;
    	      this.password = defaults.password;
    	      this.pfx = defaults.pfx;
    	      this.type = defaults.type;
        }

        public Builder certificateExpirationDate(@Nullable Output<String> certificateExpirationDate) {
            this.certificateExpirationDate = certificateExpirationDate;
            return this;
        }
        public Builder certificateExpirationDate(@Nullable String certificateExpirationDate) {
            this.certificateExpirationDate = Codegen.ofNullable(certificateExpirationDate);
            return this;
        }
        public Builder certificateSubjectName(@Nullable Output<String> certificateSubjectName) {
            this.certificateSubjectName = certificateSubjectName;
            return this;
        }
        public Builder certificateSubjectName(@Nullable String certificateSubjectName) {
            this.certificateSubjectName = Codegen.ofNullable(certificateSubjectName);
            return this;
        }
        public Builder certificateThumbprint(@Nullable Output<String> certificateThumbprint) {
            this.certificateThumbprint = certificateThumbprint;
            return this;
        }
        public Builder certificateThumbprint(@Nullable String certificateThumbprint) {
            this.certificateThumbprint = Codegen.ofNullable(certificateThumbprint);
            return this;
        }
        public Builder password(@Nullable Output<String> password) {
            this.password = password;
            return this;
        }
        public Builder password(@Nullable String password) {
            this.password = Codegen.ofNullable(password);
            return this;
        }
        public Builder pfx(@Nullable Output<String> pfx) {
            this.pfx = pfx;
            return this;
        }
        public Builder pfx(@Nullable String pfx) {
            this.pfx = Codegen.ofNullable(pfx);
            return this;
        }
        public Builder type(Output<String> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder type(String type) {
            this.type = Output.of(Objects.requireNonNull(type));
            return this;
        }        public ClientCertAuthenticationArgs build() {
            return new ClientCertAuthenticationArgs(certificateExpirationDate, certificateSubjectName, certificateThumbprint, password, pfx, type);
        }
    }
}
