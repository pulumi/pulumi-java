// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.azurenative.datafactory.inputs.AzureKeyVaultSecretReferenceArgs;
import com.pulumi.azurenative.datafactory.inputs.IntegrationRuntimeReferenceArgs;
import com.pulumi.azurenative.datafactory.inputs.ParameterSpecificationArgs;
import com.pulumi.azurenative.datafactory.inputs.SecureStringArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * QuickBooks server linked service.
 * 
 */
public final class QuickBooksLinkedServiceArgs extends com.pulumi.resources.ResourceArgs {

    public static final QuickBooksLinkedServiceArgs Empty = new QuickBooksLinkedServiceArgs();

    /**
     * The access token for OAuth 1.0 authentication.
     * 
     */
    @Import(name="accessToken")
    private @Nullable Output<Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs>> accessToken;

    /**
     * @return The access token for OAuth 1.0 authentication.
     * 
     */
    public Optional<Output<Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs>>> accessToken() {
        return Optional.ofNullable(this.accessToken);
    }

    /**
     * The access token secret for OAuth 1.0 authentication.
     * 
     */
    @Import(name="accessTokenSecret")
    private @Nullable Output<Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs>> accessTokenSecret;

    /**
     * @return The access token secret for OAuth 1.0 authentication.
     * 
     */
    public Optional<Output<Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs>>> accessTokenSecret() {
        return Optional.ofNullable(this.accessTokenSecret);
    }

    /**
     * List of tags that can be used for describing the linked service.
     * 
     */
    @Import(name="annotations")
    private @Nullable Output<List<Object>> annotations;

    /**
     * @return List of tags that can be used for describing the linked service.
     * 
     */
    public Optional<Output<List<Object>>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    /**
     * The company ID of the QuickBooks company to authorize.
     * 
     */
    @Import(name="companyId")
    private @Nullable Output<Object> companyId;

    /**
     * @return The company ID of the QuickBooks company to authorize.
     * 
     */
    public Optional<Output<Object>> companyId() {
        return Optional.ofNullable(this.companyId);
    }

    /**
     * The integration runtime reference.
     * 
     */
    @Import(name="connectVia")
    private @Nullable Output<IntegrationRuntimeReferenceArgs> connectVia;

    /**
     * @return The integration runtime reference.
     * 
     */
    public Optional<Output<IntegrationRuntimeReferenceArgs>> connectVia() {
        return Optional.ofNullable(this.connectVia);
    }

    /**
     * Properties used to connect to QuickBooks. It is mutually exclusive with any other properties in the linked service. Type: object.
     * 
     */
    @Import(name="connectionProperties")
    private @Nullable Output<Object> connectionProperties;

    /**
     * @return Properties used to connect to QuickBooks. It is mutually exclusive with any other properties in the linked service. Type: object.
     * 
     */
    public Optional<Output<Object>> connectionProperties() {
        return Optional.ofNullable(this.connectionProperties);
    }

    /**
     * The consumer key for OAuth 1.0 authentication.
     * 
     */
    @Import(name="consumerKey")
    private @Nullable Output<Object> consumerKey;

    /**
     * @return The consumer key for OAuth 1.0 authentication.
     * 
     */
    public Optional<Output<Object>> consumerKey() {
        return Optional.ofNullable(this.consumerKey);
    }

    /**
     * The consumer secret for OAuth 1.0 authentication.
     * 
     */
    @Import(name="consumerSecret")
    private @Nullable Output<Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs>> consumerSecret;

    /**
     * @return The consumer secret for OAuth 1.0 authentication.
     * 
     */
    public Optional<Output<Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs>>> consumerSecret() {
        return Optional.ofNullable(this.consumerSecret);
    }

    /**
     * Linked service description.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Linked service description.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="encryptedCredential")
    private @Nullable Output<Object> encryptedCredential;

    /**
     * @return The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Output<Object>> encryptedCredential() {
        return Optional.ofNullable(this.encryptedCredential);
    }

    /**
     * The endpoint of the QuickBooks server. (i.e. quickbooks.api.intuit.com)
     * 
     */
    @Import(name="endpoint")
    private @Nullable Output<Object> endpoint;

    /**
     * @return The endpoint of the QuickBooks server. (i.e. quickbooks.api.intuit.com)
     * 
     */
    public Optional<Output<Object>> endpoint() {
        return Optional.ofNullable(this.endpoint);
    }

    /**
     * Parameters for linked service.
     * 
     */
    @Import(name="parameters")
    private @Nullable Output<Map<String,ParameterSpecificationArgs>> parameters;

    /**
     * @return Parameters for linked service.
     * 
     */
    public Optional<Output<Map<String,ParameterSpecificationArgs>>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    /**
     * Type of linked service.
     * Expected value is &#39;QuickBooks&#39;.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Type of linked service.
     * Expected value is &#39;QuickBooks&#39;.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
     * 
     */
    @Import(name="useEncryptedEndpoints")
    private @Nullable Output<Object> useEncryptedEndpoints;

    /**
     * @return Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
     * 
     */
    public Optional<Output<Object>> useEncryptedEndpoints() {
        return Optional.ofNullable(this.useEncryptedEndpoints);
    }

    private QuickBooksLinkedServiceArgs() {}

    private QuickBooksLinkedServiceArgs(QuickBooksLinkedServiceArgs $) {
        this.accessToken = $.accessToken;
        this.accessTokenSecret = $.accessTokenSecret;
        this.annotations = $.annotations;
        this.companyId = $.companyId;
        this.connectVia = $.connectVia;
        this.connectionProperties = $.connectionProperties;
        this.consumerKey = $.consumerKey;
        this.consumerSecret = $.consumerSecret;
        this.description = $.description;
        this.encryptedCredential = $.encryptedCredential;
        this.endpoint = $.endpoint;
        this.parameters = $.parameters;
        this.type = $.type;
        this.useEncryptedEndpoints = $.useEncryptedEndpoints;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(QuickBooksLinkedServiceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private QuickBooksLinkedServiceArgs $;

        public Builder() {
            $ = new QuickBooksLinkedServiceArgs();
        }

        public Builder(QuickBooksLinkedServiceArgs defaults) {
            $ = new QuickBooksLinkedServiceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessToken The access token for OAuth 1.0 authentication.
         * 
         * @return builder
         * 
         */
        public Builder accessToken(@Nullable Output<Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs>> accessToken) {
            $.accessToken = accessToken;
            return this;
        }

        /**
         * @param accessToken The access token for OAuth 1.0 authentication.
         * 
         * @return builder
         * 
         */
        public Builder accessToken(Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs> accessToken) {
            return accessToken(Output.of(accessToken));
        }

        /**
         * @param accessToken The access token for OAuth 1.0 authentication.
         * 
         * @return builder
         * 
         */
        public Builder accessToken(AzureKeyVaultSecretReferenceArgs accessToken) {
            return accessToken(Either.ofLeft(accessToken));
        }

        /**
         * @param accessToken The access token for OAuth 1.0 authentication.
         * 
         * @return builder
         * 
         */
        public Builder accessToken(SecureStringArgs accessToken) {
            return accessToken(Either.ofRight(accessToken));
        }

        /**
         * @param accessTokenSecret The access token secret for OAuth 1.0 authentication.
         * 
         * @return builder
         * 
         */
        public Builder accessTokenSecret(@Nullable Output<Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs>> accessTokenSecret) {
            $.accessTokenSecret = accessTokenSecret;
            return this;
        }

        /**
         * @param accessTokenSecret The access token secret for OAuth 1.0 authentication.
         * 
         * @return builder
         * 
         */
        public Builder accessTokenSecret(Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs> accessTokenSecret) {
            return accessTokenSecret(Output.of(accessTokenSecret));
        }

        /**
         * @param accessTokenSecret The access token secret for OAuth 1.0 authentication.
         * 
         * @return builder
         * 
         */
        public Builder accessTokenSecret(AzureKeyVaultSecretReferenceArgs accessTokenSecret) {
            return accessTokenSecret(Either.ofLeft(accessTokenSecret));
        }

        /**
         * @param accessTokenSecret The access token secret for OAuth 1.0 authentication.
         * 
         * @return builder
         * 
         */
        public Builder accessTokenSecret(SecureStringArgs accessTokenSecret) {
            return accessTokenSecret(Either.ofRight(accessTokenSecret));
        }

        /**
         * @param annotations List of tags that can be used for describing the linked service.
         * 
         * @return builder
         * 
         */
        public Builder annotations(@Nullable Output<List<Object>> annotations) {
            $.annotations = annotations;
            return this;
        }

        /**
         * @param annotations List of tags that can be used for describing the linked service.
         * 
         * @return builder
         * 
         */
        public Builder annotations(List<Object> annotations) {
            return annotations(Output.of(annotations));
        }

        /**
         * @param annotations List of tags that can be used for describing the linked service.
         * 
         * @return builder
         * 
         */
        public Builder annotations(Object... annotations) {
            return annotations(List.of(annotations));
        }

        /**
         * @param companyId The company ID of the QuickBooks company to authorize.
         * 
         * @return builder
         * 
         */
        public Builder companyId(@Nullable Output<Object> companyId) {
            $.companyId = companyId;
            return this;
        }

        /**
         * @param companyId The company ID of the QuickBooks company to authorize.
         * 
         * @return builder
         * 
         */
        public Builder companyId(Object companyId) {
            return companyId(Output.of(companyId));
        }

        /**
         * @param connectVia The integration runtime reference.
         * 
         * @return builder
         * 
         */
        public Builder connectVia(@Nullable Output<IntegrationRuntimeReferenceArgs> connectVia) {
            $.connectVia = connectVia;
            return this;
        }

        /**
         * @param connectVia The integration runtime reference.
         * 
         * @return builder
         * 
         */
        public Builder connectVia(IntegrationRuntimeReferenceArgs connectVia) {
            return connectVia(Output.of(connectVia));
        }

        /**
         * @param connectionProperties Properties used to connect to QuickBooks. It is mutually exclusive with any other properties in the linked service. Type: object.
         * 
         * @return builder
         * 
         */
        public Builder connectionProperties(@Nullable Output<Object> connectionProperties) {
            $.connectionProperties = connectionProperties;
            return this;
        }

        /**
         * @param connectionProperties Properties used to connect to QuickBooks. It is mutually exclusive with any other properties in the linked service. Type: object.
         * 
         * @return builder
         * 
         */
        public Builder connectionProperties(Object connectionProperties) {
            return connectionProperties(Output.of(connectionProperties));
        }

        /**
         * @param consumerKey The consumer key for OAuth 1.0 authentication.
         * 
         * @return builder
         * 
         */
        public Builder consumerKey(@Nullable Output<Object> consumerKey) {
            $.consumerKey = consumerKey;
            return this;
        }

        /**
         * @param consumerKey The consumer key for OAuth 1.0 authentication.
         * 
         * @return builder
         * 
         */
        public Builder consumerKey(Object consumerKey) {
            return consumerKey(Output.of(consumerKey));
        }

        /**
         * @param consumerSecret The consumer secret for OAuth 1.0 authentication.
         * 
         * @return builder
         * 
         */
        public Builder consumerSecret(@Nullable Output<Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs>> consumerSecret) {
            $.consumerSecret = consumerSecret;
            return this;
        }

        /**
         * @param consumerSecret The consumer secret for OAuth 1.0 authentication.
         * 
         * @return builder
         * 
         */
        public Builder consumerSecret(Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs> consumerSecret) {
            return consumerSecret(Output.of(consumerSecret));
        }

        /**
         * @param consumerSecret The consumer secret for OAuth 1.0 authentication.
         * 
         * @return builder
         * 
         */
        public Builder consumerSecret(AzureKeyVaultSecretReferenceArgs consumerSecret) {
            return consumerSecret(Either.ofLeft(consumerSecret));
        }

        /**
         * @param consumerSecret The consumer secret for OAuth 1.0 authentication.
         * 
         * @return builder
         * 
         */
        public Builder consumerSecret(SecureStringArgs consumerSecret) {
            return consumerSecret(Either.ofRight(consumerSecret));
        }

        /**
         * @param description Linked service description.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Linked service description.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param encryptedCredential The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
         * 
         * @return builder
         * 
         */
        public Builder encryptedCredential(@Nullable Output<Object> encryptedCredential) {
            $.encryptedCredential = encryptedCredential;
            return this;
        }

        /**
         * @param encryptedCredential The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
         * 
         * @return builder
         * 
         */
        public Builder encryptedCredential(Object encryptedCredential) {
            return encryptedCredential(Output.of(encryptedCredential));
        }

        /**
         * @param endpoint The endpoint of the QuickBooks server. (i.e. quickbooks.api.intuit.com)
         * 
         * @return builder
         * 
         */
        public Builder endpoint(@Nullable Output<Object> endpoint) {
            $.endpoint = endpoint;
            return this;
        }

        /**
         * @param endpoint The endpoint of the QuickBooks server. (i.e. quickbooks.api.intuit.com)
         * 
         * @return builder
         * 
         */
        public Builder endpoint(Object endpoint) {
            return endpoint(Output.of(endpoint));
        }

        /**
         * @param parameters Parameters for linked service.
         * 
         * @return builder
         * 
         */
        public Builder parameters(@Nullable Output<Map<String,ParameterSpecificationArgs>> parameters) {
            $.parameters = parameters;
            return this;
        }

        /**
         * @param parameters Parameters for linked service.
         * 
         * @return builder
         * 
         */
        public Builder parameters(Map<String,ParameterSpecificationArgs> parameters) {
            return parameters(Output.of(parameters));
        }

        /**
         * @param type Type of linked service.
         * Expected value is &#39;QuickBooks&#39;.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of linked service.
         * Expected value is &#39;QuickBooks&#39;.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param useEncryptedEndpoints Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
         * 
         * @return builder
         * 
         */
        public Builder useEncryptedEndpoints(@Nullable Output<Object> useEncryptedEndpoints) {
            $.useEncryptedEndpoints = useEncryptedEndpoints;
            return this;
        }

        /**
         * @param useEncryptedEndpoints Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
         * 
         * @return builder
         * 
         */
        public Builder useEncryptedEndpoints(Object useEncryptedEndpoints) {
            return useEncryptedEndpoints(Output.of(useEncryptedEndpoints));
        }

        public QuickBooksLinkedServiceArgs build() {
            $.type = Codegen.stringProp("type").output().arg($.type).require();
            return $;
        }
    }

}
