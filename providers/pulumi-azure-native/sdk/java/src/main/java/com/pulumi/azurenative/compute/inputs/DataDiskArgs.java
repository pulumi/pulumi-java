// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.compute.inputs;

import com.pulumi.azurenative.compute.enums.CachingTypes;
import com.pulumi.azurenative.compute.enums.DiskCreateOptionTypes;
import com.pulumi.azurenative.compute.enums.DiskDeleteOptionTypes;
import com.pulumi.azurenative.compute.enums.DiskDetachOptionTypes;
import com.pulumi.azurenative.compute.inputs.ManagedDiskParametersArgs;
import com.pulumi.azurenative.compute.inputs.VirtualHardDiskArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Describes a data disk.
 * 
 */
public final class DataDiskArgs extends com.pulumi.resources.ResourceArgs {

    public static final DataDiskArgs Empty = new DataDiskArgs();

    /**
     * Specifies the caching requirements. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt; **None** &lt;br&gt;&lt;br&gt; **ReadOnly** &lt;br&gt;&lt;br&gt; **ReadWrite** &lt;br&gt;&lt;br&gt; Default: **None for Standard storage. ReadOnly for Premium storage**
     * 
     */
    @Import(name="caching")
    private @Nullable Output<CachingTypes> caching;

    public Optional<Output<CachingTypes>> caching() {
        return Optional.ofNullable(this.caching);
    }

    /**
     * Specifies how the virtual machine should be created.&lt;br&gt;&lt;br&gt; Possible values are:&lt;br&gt;&lt;br&gt; **Attach** \u2013 This value is used when you are using a specialized disk to create the virtual machine.&lt;br&gt;&lt;br&gt; **FromImage** \u2013 This value is used when you are using an image to create the virtual machine. If you are using a platform image, you also use the imageReference element described above. If you are using a marketplace image, you  also use the plan element previously described.
     * 
     */
    @Import(name="createOption", required=true)
    private Output<Either<String,DiskCreateOptionTypes>> createOption;

    public Output<Either<String,DiskCreateOptionTypes>> createOption() {
        return this.createOption;
    }

    /**
     * Specifies whether data disk should be deleted or detached upon VM deletion.&lt;br&gt;&lt;br&gt; Possible values: &lt;br&gt;&lt;br&gt; **Delete** If this value is used, the data disk is deleted when VM is deleted.&lt;br&gt;&lt;br&gt; **Detach** If this value is used, the data disk is retained after VM is deleted.&lt;br&gt;&lt;br&gt; The default value is set to **detach**
     * 
     */
    @Import(name="deleteOption")
    private @Nullable Output<Either<String,DiskDeleteOptionTypes>> deleteOption;

    public Optional<Output<Either<String,DiskDeleteOptionTypes>>> deleteOption() {
        return Optional.ofNullable(this.deleteOption);
    }

    /**
     * Specifies the detach behavior to be used while detaching a disk or which is already in the process of detachment from the virtual machine. Supported values: **ForceDetach**. &lt;br&gt;&lt;br&gt; detachOption: **ForceDetach** is applicable only for managed data disks. If a previous detachment attempt of the data disk did not complete due to an unexpected failure from the virtual machine and the disk is still not released then use force-detach as a last resort option to detach the disk forcibly from the VM. All writes might not have been flushed when using this detach behavior. &lt;br&gt;&lt;br&gt; This feature is still in preview mode and is not supported for VirtualMachineScaleSet. To force-detach a data disk update toBeDetached to &#39;true&#39; along with setting detachOption: &#39;ForceDetach&#39;.
     * 
     */
    @Import(name="detachOption")
    private @Nullable Output<Either<String,DiskDetachOptionTypes>> detachOption;

    public Optional<Output<Either<String,DiskDetachOptionTypes>>> detachOption() {
        return Optional.ofNullable(this.detachOption);
    }

    /**
     * Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. &lt;br&gt;&lt;br&gt; This value cannot be larger than 1023 GB
     * 
     */
    @Import(name="diskSizeGB")
    private @Nullable Output<Integer> diskSizeGB;

    public Optional<Output<Integer>> diskSizeGB() {
        return Optional.ofNullable(this.diskSizeGB);
    }

    /**
     * The source user image virtual hard disk. The virtual hard disk will be copied before being attached to the virtual machine. If SourceImage is provided, the destination virtual hard drive must not exist.
     * 
     */
    @Import(name="image")
    private @Nullable Output<VirtualHardDiskArgs> image;

    public Optional<Output<VirtualHardDiskArgs>> image() {
        return Optional.ofNullable(this.image);
    }

    /**
     * Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data disk attached to a VM.
     * 
     */
    @Import(name="lun", required=true)
    private Output<Integer> lun;

    public Output<Integer> lun() {
        return this.lun;
    }

    /**
     * The managed disk parameters.
     * 
     */
    @Import(name="managedDisk")
    private @Nullable Output<ManagedDiskParametersArgs> managedDisk;

    public Optional<Output<ManagedDiskParametersArgs>> managedDisk() {
        return Optional.ofNullable(this.managedDisk);
    }

    /**
     * The disk name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Specifies whether the data disk is in process of detachment from the VirtualMachine/VirtualMachineScaleset
     * 
     */
    @Import(name="toBeDetached")
    private @Nullable Output<Boolean> toBeDetached;

    public Optional<Output<Boolean>> toBeDetached() {
        return Optional.ofNullable(this.toBeDetached);
    }

    /**
     * The virtual hard disk.
     * 
     */
    @Import(name="vhd")
    private @Nullable Output<VirtualHardDiskArgs> vhd;

    public Optional<Output<VirtualHardDiskArgs>> vhd() {
        return Optional.ofNullable(this.vhd);
    }

    /**
     * Specifies whether writeAccelerator should be enabled or disabled on the disk.
     * 
     */
    @Import(name="writeAcceleratorEnabled")
    private @Nullable Output<Boolean> writeAcceleratorEnabled;

    public Optional<Output<Boolean>> writeAcceleratorEnabled() {
        return Optional.ofNullable(this.writeAcceleratorEnabled);
    }

    private DataDiskArgs() {}

    private DataDiskArgs(DataDiskArgs $) {
        this.caching = $.caching;
        this.createOption = $.createOption;
        this.deleteOption = $.deleteOption;
        this.detachOption = $.detachOption;
        this.diskSizeGB = $.diskSizeGB;
        this.image = $.image;
        this.lun = $.lun;
        this.managedDisk = $.managedDisk;
        this.name = $.name;
        this.toBeDetached = $.toBeDetached;
        this.vhd = $.vhd;
        this.writeAcceleratorEnabled = $.writeAcceleratorEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataDiskArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataDiskArgs $;

        public Builder() {
            $ = new DataDiskArgs();
        }

        public Builder(DataDiskArgs defaults) {
            $ = new DataDiskArgs(Objects.requireNonNull(defaults));
        }

        public Builder caching(@Nullable Output<CachingTypes> caching) {
            $.caching = caching;
            return this;
        }

        public Builder caching(CachingTypes caching) {
            return caching(Output.of(caching));
        }

        public Builder createOption(Output<Either<String,DiskCreateOptionTypes>> createOption) {
            $.createOption = createOption;
            return this;
        }

        public Builder createOption(Either<String,DiskCreateOptionTypes> createOption) {
            return createOption(Output.of(createOption));
        }

        public Builder createOption(String createOption) {
            return createOption(Either.ofLeft(createOption));
        }

        public Builder createOption(DiskCreateOptionTypes createOption) {
            return createOption(Either.ofRight(createOption));
        }

        public Builder deleteOption(@Nullable Output<Either<String,DiskDeleteOptionTypes>> deleteOption) {
            $.deleteOption = deleteOption;
            return this;
        }

        public Builder deleteOption(Either<String,DiskDeleteOptionTypes> deleteOption) {
            return deleteOption(Output.of(deleteOption));
        }

        public Builder deleteOption(String deleteOption) {
            return deleteOption(Either.ofLeft(deleteOption));
        }

        public Builder deleteOption(DiskDeleteOptionTypes deleteOption) {
            return deleteOption(Either.ofRight(deleteOption));
        }

        public Builder detachOption(@Nullable Output<Either<String,DiskDetachOptionTypes>> detachOption) {
            $.detachOption = detachOption;
            return this;
        }

        public Builder detachOption(Either<String,DiskDetachOptionTypes> detachOption) {
            return detachOption(Output.of(detachOption));
        }

        public Builder detachOption(String detachOption) {
            return detachOption(Either.ofLeft(detachOption));
        }

        public Builder detachOption(DiskDetachOptionTypes detachOption) {
            return detachOption(Either.ofRight(detachOption));
        }

        public Builder diskSizeGB(@Nullable Output<Integer> diskSizeGB) {
            $.diskSizeGB = diskSizeGB;
            return this;
        }

        public Builder diskSizeGB(Integer diskSizeGB) {
            return diskSizeGB(Output.of(diskSizeGB));
        }

        public Builder image(@Nullable Output<VirtualHardDiskArgs> image) {
            $.image = image;
            return this;
        }

        public Builder image(VirtualHardDiskArgs image) {
            return image(Output.of(image));
        }

        public Builder lun(Output<Integer> lun) {
            $.lun = lun;
            return this;
        }

        public Builder lun(Integer lun) {
            return lun(Output.of(lun));
        }

        public Builder managedDisk(@Nullable Output<ManagedDiskParametersArgs> managedDisk) {
            $.managedDisk = managedDisk;
            return this;
        }

        public Builder managedDisk(ManagedDiskParametersArgs managedDisk) {
            return managedDisk(Output.of(managedDisk));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder toBeDetached(@Nullable Output<Boolean> toBeDetached) {
            $.toBeDetached = toBeDetached;
            return this;
        }

        public Builder toBeDetached(Boolean toBeDetached) {
            return toBeDetached(Output.of(toBeDetached));
        }

        public Builder vhd(@Nullable Output<VirtualHardDiskArgs> vhd) {
            $.vhd = vhd;
            return this;
        }

        public Builder vhd(VirtualHardDiskArgs vhd) {
            return vhd(Output.of(vhd));
        }

        public Builder writeAcceleratorEnabled(@Nullable Output<Boolean> writeAcceleratorEnabled) {
            $.writeAcceleratorEnabled = writeAcceleratorEnabled;
            return this;
        }

        public Builder writeAcceleratorEnabled(Boolean writeAcceleratorEnabled) {
            return writeAcceleratorEnabled(Output.of(writeAcceleratorEnabled));
        }

        public DataDiskArgs build() {
            $.createOption = Objects.requireNonNull($.createOption, "expected parameter 'createOption' to be non-null");
            $.lun = Objects.requireNonNull($.lun, "expected parameter 'lun' to be non-null");
            return $;
        }
    }

}
