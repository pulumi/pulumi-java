// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.edgeorder.inputs;

import com.pulumi.azurenative.edgeorder.inputs.ErrorDetailResponse;
import com.pulumi.azurenative.edgeorder.inputs.ForwardShippingDetailsResponse;
import com.pulumi.azurenative.edgeorder.inputs.PreferencesResponse;
import com.pulumi.azurenative.edgeorder.inputs.ProductDetailsResponse;
import com.pulumi.azurenative.edgeorder.inputs.ResourceProviderDetailsResponse;
import com.pulumi.azurenative.edgeorder.inputs.ReverseShippingDetailsResponse;
import com.pulumi.azurenative.edgeorder.inputs.StageDetailsResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Order item details
 * 
 */
public final class OrderItemDetailsResponse extends com.pulumi.resources.InvokeArgs {

    public static final OrderItemDetailsResponse Empty = new OrderItemDetailsResponse();

    /**
     * Cancellation reason.
     * 
     */
    @Import(name="cancellationReason", required=true)
    private String cancellationReason;

    /**
     * @return Cancellation reason.
     * 
     */
    public String cancellationReason() {
        return this.cancellationReason;
    }

    /**
     * Describes whether the order item is cancellable or not.
     * 
     */
    @Import(name="cancellationStatus", required=true)
    private String cancellationStatus;

    /**
     * @return Describes whether the order item is cancellable or not.
     * 
     */
    public String cancellationStatus() {
        return this.cancellationStatus;
    }

    /**
     * Current Order item Status
     * 
     */
    @Import(name="currentStage", required=true)
    private StageDetailsResponse currentStage;

    /**
     * @return Current Order item Status
     * 
     */
    public StageDetailsResponse currentStage() {
        return this.currentStage;
    }

    /**
     * Describes whether the order item is deletable or not.
     * 
     */
    @Import(name="deletionStatus", required=true)
    private String deletionStatus;

    /**
     * @return Describes whether the order item is deletable or not.
     * 
     */
    public String deletionStatus() {
        return this.deletionStatus;
    }

    /**
     * Top level error for the job.
     * 
     */
    @Import(name="error", required=true)
    private ErrorDetailResponse error;

    /**
     * @return Top level error for the job.
     * 
     */
    public ErrorDetailResponse error() {
        return this.error;
    }

    /**
     * Forward Package Shipping details
     * 
     */
    @Import(name="forwardShippingDetails", required=true)
    private ForwardShippingDetailsResponse forwardShippingDetails;

    /**
     * @return Forward Package Shipping details
     * 
     */
    public ForwardShippingDetailsResponse forwardShippingDetails() {
        return this.forwardShippingDetails;
    }

    /**
     * Parent RP details - this returns only the first or default parent RP from the entire list
     * 
     */
    @Import(name="managementRpDetails", required=true)
    private ResourceProviderDetailsResponse managementRpDetails;

    /**
     * @return Parent RP details - this returns only the first or default parent RP from the entire list
     * 
     */
    public ResourceProviderDetailsResponse managementRpDetails() {
        return this.managementRpDetails;
    }

    /**
     * List of parent RP details supported for configuration.
     * 
     */
    @Import(name="managementRpDetailsList", required=true)
    private List<ResourceProviderDetailsResponse> managementRpDetailsList;

    /**
     * @return List of parent RP details supported for configuration.
     * 
     */
    public List<ResourceProviderDetailsResponse> managementRpDetailsList() {
        return this.managementRpDetailsList;
    }

    /**
     * Additional notification email list
     * 
     */
    @Import(name="notificationEmailList")
    private @Nullable List<String> notificationEmailList;

    /**
     * @return Additional notification email list
     * 
     */
    public Optional<List<String>> notificationEmailList() {
        return Optional.ofNullable(this.notificationEmailList);
    }

    /**
     * Order item status history
     * 
     */
    @Import(name="orderItemStageHistory", required=true)
    private List<StageDetailsResponse> orderItemStageHistory;

    /**
     * @return Order item status history
     * 
     */
    public List<StageDetailsResponse> orderItemStageHistory() {
        return this.orderItemStageHistory;
    }

    /**
     * Order item type.
     * 
     */
    @Import(name="orderItemType", required=true)
    private String orderItemType;

    /**
     * @return Order item type.
     * 
     */
    public String orderItemType() {
        return this.orderItemType;
    }

    /**
     * Customer notification Preferences
     * 
     */
    @Import(name="preferences")
    private @Nullable PreferencesResponse preferences;

    /**
     * @return Customer notification Preferences
     * 
     */
    public Optional<PreferencesResponse> preferences() {
        return Optional.ofNullable(this.preferences);
    }

    /**
     * Unique identifier for configuration.
     * 
     */
    @Import(name="productDetails", required=true)
    private ProductDetailsResponse productDetails;

    /**
     * @return Unique identifier for configuration.
     * 
     */
    public ProductDetailsResponse productDetails() {
        return this.productDetails;
    }

    /**
     * Return reason.
     * 
     */
    @Import(name="returnReason", required=true)
    private String returnReason;

    /**
     * @return Return reason.
     * 
     */
    public String returnReason() {
        return this.returnReason;
    }

    /**
     * Describes whether the order item is returnable or not.
     * 
     */
    @Import(name="returnStatus", required=true)
    private String returnStatus;

    /**
     * @return Describes whether the order item is returnable or not.
     * 
     */
    public String returnStatus() {
        return this.returnStatus;
    }

    /**
     * Reverse Package Shipping details
     * 
     */
    @Import(name="reverseShippingDetails", required=true)
    private ReverseShippingDetailsResponse reverseShippingDetails;

    /**
     * @return Reverse Package Shipping details
     * 
     */
    public ReverseShippingDetailsResponse reverseShippingDetails() {
        return this.reverseShippingDetails;
    }

    private OrderItemDetailsResponse() {}

    private OrderItemDetailsResponse(OrderItemDetailsResponse $) {
        this.cancellationReason = $.cancellationReason;
        this.cancellationStatus = $.cancellationStatus;
        this.currentStage = $.currentStage;
        this.deletionStatus = $.deletionStatus;
        this.error = $.error;
        this.forwardShippingDetails = $.forwardShippingDetails;
        this.managementRpDetails = $.managementRpDetails;
        this.managementRpDetailsList = $.managementRpDetailsList;
        this.notificationEmailList = $.notificationEmailList;
        this.orderItemStageHistory = $.orderItemStageHistory;
        this.orderItemType = $.orderItemType;
        this.preferences = $.preferences;
        this.productDetails = $.productDetails;
        this.returnReason = $.returnReason;
        this.returnStatus = $.returnStatus;
        this.reverseShippingDetails = $.reverseShippingDetails;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OrderItemDetailsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OrderItemDetailsResponse $;

        public Builder() {
            $ = new OrderItemDetailsResponse();
        }

        public Builder(OrderItemDetailsResponse defaults) {
            $ = new OrderItemDetailsResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param cancellationReason Cancellation reason.
         * 
         * @return builder
         * 
         */
        public Builder cancellationReason(String cancellationReason) {
            $.cancellationReason = cancellationReason;
            return this;
        }

        /**
         * @param cancellationStatus Describes whether the order item is cancellable or not.
         * 
         * @return builder
         * 
         */
        public Builder cancellationStatus(String cancellationStatus) {
            $.cancellationStatus = cancellationStatus;
            return this;
        }

        /**
         * @param currentStage Current Order item Status
         * 
         * @return builder
         * 
         */
        public Builder currentStage(StageDetailsResponse currentStage) {
            $.currentStage = currentStage;
            return this;
        }

        /**
         * @param deletionStatus Describes whether the order item is deletable or not.
         * 
         * @return builder
         * 
         */
        public Builder deletionStatus(String deletionStatus) {
            $.deletionStatus = deletionStatus;
            return this;
        }

        /**
         * @param error Top level error for the job.
         * 
         * @return builder
         * 
         */
        public Builder error(ErrorDetailResponse error) {
            $.error = error;
            return this;
        }

        /**
         * @param forwardShippingDetails Forward Package Shipping details
         * 
         * @return builder
         * 
         */
        public Builder forwardShippingDetails(ForwardShippingDetailsResponse forwardShippingDetails) {
            $.forwardShippingDetails = forwardShippingDetails;
            return this;
        }

        /**
         * @param managementRpDetails Parent RP details - this returns only the first or default parent RP from the entire list
         * 
         * @return builder
         * 
         */
        public Builder managementRpDetails(ResourceProviderDetailsResponse managementRpDetails) {
            $.managementRpDetails = managementRpDetails;
            return this;
        }

        /**
         * @param managementRpDetailsList List of parent RP details supported for configuration.
         * 
         * @return builder
         * 
         */
        public Builder managementRpDetailsList(List<ResourceProviderDetailsResponse> managementRpDetailsList) {
            $.managementRpDetailsList = managementRpDetailsList;
            return this;
        }

        /**
         * @param managementRpDetailsList List of parent RP details supported for configuration.
         * 
         * @return builder
         * 
         */
        public Builder managementRpDetailsList(ResourceProviderDetailsResponse... managementRpDetailsList) {
            return managementRpDetailsList(List.of(managementRpDetailsList));
        }

        /**
         * @param notificationEmailList Additional notification email list
         * 
         * @return builder
         * 
         */
        public Builder notificationEmailList(@Nullable List<String> notificationEmailList) {
            $.notificationEmailList = notificationEmailList;
            return this;
        }

        /**
         * @param notificationEmailList Additional notification email list
         * 
         * @return builder
         * 
         */
        public Builder notificationEmailList(String... notificationEmailList) {
            return notificationEmailList(List.of(notificationEmailList));
        }

        /**
         * @param orderItemStageHistory Order item status history
         * 
         * @return builder
         * 
         */
        public Builder orderItemStageHistory(List<StageDetailsResponse> orderItemStageHistory) {
            $.orderItemStageHistory = orderItemStageHistory;
            return this;
        }

        /**
         * @param orderItemStageHistory Order item status history
         * 
         * @return builder
         * 
         */
        public Builder orderItemStageHistory(StageDetailsResponse... orderItemStageHistory) {
            return orderItemStageHistory(List.of(orderItemStageHistory));
        }

        /**
         * @param orderItemType Order item type.
         * 
         * @return builder
         * 
         */
        public Builder orderItemType(String orderItemType) {
            $.orderItemType = orderItemType;
            return this;
        }

        /**
         * @param preferences Customer notification Preferences
         * 
         * @return builder
         * 
         */
        public Builder preferences(@Nullable PreferencesResponse preferences) {
            $.preferences = preferences;
            return this;
        }

        /**
         * @param productDetails Unique identifier for configuration.
         * 
         * @return builder
         * 
         */
        public Builder productDetails(ProductDetailsResponse productDetails) {
            $.productDetails = productDetails;
            return this;
        }

        /**
         * @param returnReason Return reason.
         * 
         * @return builder
         * 
         */
        public Builder returnReason(String returnReason) {
            $.returnReason = returnReason;
            return this;
        }

        /**
         * @param returnStatus Describes whether the order item is returnable or not.
         * 
         * @return builder
         * 
         */
        public Builder returnStatus(String returnStatus) {
            $.returnStatus = returnStatus;
            return this;
        }

        /**
         * @param reverseShippingDetails Reverse Package Shipping details
         * 
         * @return builder
         * 
         */
        public Builder reverseShippingDetails(ReverseShippingDetailsResponse reverseShippingDetails) {
            $.reverseShippingDetails = reverseShippingDetails;
            return this;
        }

        public OrderItemDetailsResponse build() {
            $.cancellationReason = Objects.requireNonNull($.cancellationReason, "expected parameter 'cancellationReason' to be non-null");
            $.cancellationStatus = Objects.requireNonNull($.cancellationStatus, "expected parameter 'cancellationStatus' to be non-null");
            $.currentStage = Objects.requireNonNull($.currentStage, "expected parameter 'currentStage' to be non-null");
            $.deletionStatus = Objects.requireNonNull($.deletionStatus, "expected parameter 'deletionStatus' to be non-null");
            $.error = Objects.requireNonNull($.error, "expected parameter 'error' to be non-null");
            $.forwardShippingDetails = Objects.requireNonNull($.forwardShippingDetails, "expected parameter 'forwardShippingDetails' to be non-null");
            $.managementRpDetails = Objects.requireNonNull($.managementRpDetails, "expected parameter 'managementRpDetails' to be non-null");
            $.managementRpDetailsList = Objects.requireNonNull($.managementRpDetailsList, "expected parameter 'managementRpDetailsList' to be non-null");
            $.orderItemStageHistory = Objects.requireNonNull($.orderItemStageHistory, "expected parameter 'orderItemStageHistory' to be non-null");
            $.orderItemType = Objects.requireNonNull($.orderItemType, "expected parameter 'orderItemType' to be non-null");
            $.productDetails = Objects.requireNonNull($.productDetails, "expected parameter 'productDetails' to be non-null");
            $.returnReason = Objects.requireNonNull($.returnReason, "expected parameter 'returnReason' to be non-null");
            $.returnStatus = Objects.requireNonNull($.returnStatus, "expected parameter 'returnStatus' to be non-null");
            $.reverseShippingDetails = Objects.requireNonNull($.reverseShippingDetails, "expected parameter 'reverseShippingDetails' to be non-null");
            return $;
        }
    }

}
