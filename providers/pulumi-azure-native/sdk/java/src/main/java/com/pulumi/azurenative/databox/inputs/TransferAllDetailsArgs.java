// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.databox.inputs;

import com.pulumi.azurenative.databox.enums.DataAccountType;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Details to transfer all data.
 * 
 */
public final class TransferAllDetailsArgs extends com.pulumi.resources.ResourceArgs {

    public static final TransferAllDetailsArgs Empty = new TransferAllDetailsArgs();

    /**
     * Type of the account of data
     * 
     */
    @Import(name="dataAccountType", required=true)
    private Output<Either<String,DataAccountType>> dataAccountType;

    public Output<Either<String,DataAccountType>> dataAccountType() {
        return this.dataAccountType;
    }

    /**
     * To indicate if all Azure blobs have to be transferred
     * 
     */
    @Import(name="transferAllBlobs")
    private @Nullable Output<Boolean> transferAllBlobs;

    public Optional<Output<Boolean>> transferAllBlobs() {
        return Optional.ofNullable(this.transferAllBlobs);
    }

    /**
     * To indicate if all Azure Files have to be transferred
     * 
     */
    @Import(name="transferAllFiles")
    private @Nullable Output<Boolean> transferAllFiles;

    public Optional<Output<Boolean>> transferAllFiles() {
        return Optional.ofNullable(this.transferAllFiles);
    }

    private TransferAllDetailsArgs() {}

    private TransferAllDetailsArgs(TransferAllDetailsArgs $) {
        this.dataAccountType = $.dataAccountType;
        this.transferAllBlobs = $.transferAllBlobs;
        this.transferAllFiles = $.transferAllFiles;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TransferAllDetailsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TransferAllDetailsArgs $;

        public Builder() {
            $ = new TransferAllDetailsArgs();
        }

        public Builder(TransferAllDetailsArgs defaults) {
            $ = new TransferAllDetailsArgs(Objects.requireNonNull(defaults));
        }

        public Builder dataAccountType(Output<Either<String,DataAccountType>> dataAccountType) {
            $.dataAccountType = dataAccountType;
            return this;
        }

        public Builder dataAccountType(Either<String,DataAccountType> dataAccountType) {
            return dataAccountType(Output.of(dataAccountType));
        }

        public Builder dataAccountType(String dataAccountType) {
            return dataAccountType(Either.ofLeft(dataAccountType));
        }

        public Builder dataAccountType(DataAccountType dataAccountType) {
            return dataAccountType(Either.ofRight(dataAccountType));
        }

        public Builder transferAllBlobs(@Nullable Output<Boolean> transferAllBlobs) {
            $.transferAllBlobs = transferAllBlobs;
            return this;
        }

        public Builder transferAllBlobs(Boolean transferAllBlobs) {
            return transferAllBlobs(Output.of(transferAllBlobs));
        }

        public Builder transferAllFiles(@Nullable Output<Boolean> transferAllFiles) {
            $.transferAllFiles = transferAllFiles;
            return this;
        }

        public Builder transferAllFiles(Boolean transferAllFiles) {
            return transferAllFiles(Output.of(transferAllFiles));
        }

        public TransferAllDetailsArgs build() {
            $.dataAccountType = Codegen.stringProp("dataAccountType").left(DataAccountType.class).output().arg($.dataAccountType).def("StorageAccount").require();
            return $;
        }
    }

}
