// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.insights.inputs;

import com.pulumi.azurenative.insights.enums.AlertSeverity;
import com.pulumi.azurenative.insights.inputs.AzNsActionGroupArgs;
import com.pulumi.azurenative.insights.inputs.TriggerConditionArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Specify action need to be taken when rule type is Alert
 * 
 */
public final class AlertingActionArgs extends com.pulumi.resources.ResourceArgs {

    public static final AlertingActionArgs Empty = new AlertingActionArgs();

    /**
     * Azure action group reference.
     * 
     */
    @Import(name="aznsAction")
    private @Nullable Output<AzNsActionGroupArgs> aznsAction;

    /**
     * @return Azure action group reference.
     * 
     */
    public Optional<Output<AzNsActionGroupArgs>> aznsAction() {
        return Optional.ofNullable(this.aznsAction);
    }

    /**
     * Specifies the action. Supported values - AlertingAction, LogToMetricAction
     * Expected value is &#39;Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction&#39;.
     * 
     */
    @Import(name="odataType", required=true)
    private Output<String> odataType;

    /**
     * @return Specifies the action. Supported values - AlertingAction, LogToMetricAction
     * Expected value is &#39;Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction&#39;.
     * 
     */
    public Output<String> odataType() {
        return this.odataType;
    }

    /**
     * Severity of the alert
     * 
     */
    @Import(name="severity", required=true)
    private Output<Either<String,AlertSeverity>> severity;

    /**
     * @return Severity of the alert
     * 
     */
    public Output<Either<String,AlertSeverity>> severity() {
        return this.severity;
    }

    /**
     * time (in minutes) for which Alerts should be throttled or suppressed.
     * 
     */
    @Import(name="throttlingInMin")
    private @Nullable Output<Integer> throttlingInMin;

    /**
     * @return time (in minutes) for which Alerts should be throttled or suppressed.
     * 
     */
    public Optional<Output<Integer>> throttlingInMin() {
        return Optional.ofNullable(this.throttlingInMin);
    }

    /**
     * The trigger condition that results in the alert rule being.
     * 
     */
    @Import(name="trigger", required=true)
    private Output<TriggerConditionArgs> trigger;

    /**
     * @return The trigger condition that results in the alert rule being.
     * 
     */
    public Output<TriggerConditionArgs> trigger() {
        return this.trigger;
    }

    private AlertingActionArgs() {}

    private AlertingActionArgs(AlertingActionArgs $) {
        this.aznsAction = $.aznsAction;
        this.odataType = $.odataType;
        this.severity = $.severity;
        this.throttlingInMin = $.throttlingInMin;
        this.trigger = $.trigger;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AlertingActionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AlertingActionArgs $;

        public Builder() {
            $ = new AlertingActionArgs();
        }

        public Builder(AlertingActionArgs defaults) {
            $ = new AlertingActionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param aznsAction Azure action group reference.
         * 
         * @return builder
         * 
         */
        public Builder aznsAction(@Nullable Output<AzNsActionGroupArgs> aznsAction) {
            $.aznsAction = aznsAction;
            return this;
        }

        /**
         * @param aznsAction Azure action group reference.
         * 
         * @return builder
         * 
         */
        public Builder aznsAction(AzNsActionGroupArgs aznsAction) {
            return aznsAction(Output.of(aznsAction));
        }

        /**
         * @param odataType Specifies the action. Supported values - AlertingAction, LogToMetricAction
         * Expected value is &#39;Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction&#39;.
         * 
         * @return builder
         * 
         */
        public Builder odataType(Output<String> odataType) {
            $.odataType = odataType;
            return this;
        }

        /**
         * @param odataType Specifies the action. Supported values - AlertingAction, LogToMetricAction
         * Expected value is &#39;Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction&#39;.
         * 
         * @return builder
         * 
         */
        public Builder odataType(String odataType) {
            return odataType(Output.of(odataType));
        }

        /**
         * @param severity Severity of the alert
         * 
         * @return builder
         * 
         */
        public Builder severity(Output<Either<String,AlertSeverity>> severity) {
            $.severity = severity;
            return this;
        }

        /**
         * @param severity Severity of the alert
         * 
         * @return builder
         * 
         */
        public Builder severity(Either<String,AlertSeverity> severity) {
            return severity(Output.of(severity));
        }

        /**
         * @param severity Severity of the alert
         * 
         * @return builder
         * 
         */
        public Builder severity(String severity) {
            return severity(Either.ofLeft(severity));
        }

        /**
         * @param severity Severity of the alert
         * 
         * @return builder
         * 
         */
        public Builder severity(AlertSeverity severity) {
            return severity(Either.ofRight(severity));
        }

        /**
         * @param throttlingInMin time (in minutes) for which Alerts should be throttled or suppressed.
         * 
         * @return builder
         * 
         */
        public Builder throttlingInMin(@Nullable Output<Integer> throttlingInMin) {
            $.throttlingInMin = throttlingInMin;
            return this;
        }

        /**
         * @param throttlingInMin time (in minutes) for which Alerts should be throttled or suppressed.
         * 
         * @return builder
         * 
         */
        public Builder throttlingInMin(Integer throttlingInMin) {
            return throttlingInMin(Output.of(throttlingInMin));
        }

        /**
         * @param trigger The trigger condition that results in the alert rule being.
         * 
         * @return builder
         * 
         */
        public Builder trigger(Output<TriggerConditionArgs> trigger) {
            $.trigger = trigger;
            return this;
        }

        /**
         * @param trigger The trigger condition that results in the alert rule being.
         * 
         * @return builder
         * 
         */
        public Builder trigger(TriggerConditionArgs trigger) {
            return trigger(Output.of(trigger));
        }

        public AlertingActionArgs build() {
            $.odataType = Codegen.stringProp("odataType").output().arg($.odataType).require();
            $.severity = Objects.requireNonNull($.severity, "expected parameter 'severity' to be non-null");
            $.trigger = Objects.requireNonNull($.trigger, "expected parameter 'trigger' to be non-null");
            return $;
        }
    }

}
