// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.scheduler.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BasicAuthenticationArgs extends com.pulumi.resources.ResourceArgs {

    public static final BasicAuthenticationArgs Empty = new BasicAuthenticationArgs();

    /**
     * Gets or sets the password, return value will always be empty.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return Gets or sets the password, return value will always be empty.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * Gets or sets the HTTP authentication type.
     * Expected value is &#39;Basic&#39;.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Gets or sets the HTTP authentication type.
     * Expected value is &#39;Basic&#39;.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * Gets or sets the username.
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return Gets or sets the username.
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    private BasicAuthenticationArgs() {}

    private BasicAuthenticationArgs(BasicAuthenticationArgs $) {
        this.password = $.password;
        this.type = $.type;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BasicAuthenticationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BasicAuthenticationArgs $;

        public Builder() {
            $ = new BasicAuthenticationArgs();
        }

        public Builder(BasicAuthenticationArgs defaults) {
            $ = new BasicAuthenticationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param password Gets or sets the password, return value will always be empty.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password Gets or sets the password, return value will always be empty.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param type Gets or sets the HTTP authentication type.
         * Expected value is &#39;Basic&#39;.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Gets or sets the HTTP authentication type.
         * Expected value is &#39;Basic&#39;.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param username Gets or sets the username.
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username Gets or sets the username.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public BasicAuthenticationArgs build() {
            $.type = Codegen.stringProp("type").output().arg($.type).require();
            return $;
        }
    }

}
