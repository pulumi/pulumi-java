// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.azurenative.datafactory.inputs.ActivityDependencyResponse;
import com.pulumi.azurenative.datafactory.inputs.ActivityPolicyResponse;
import com.pulumi.azurenative.datafactory.inputs.DatasetReferenceResponse;
import com.pulumi.azurenative.datafactory.inputs.IntegrationRuntimeReferenceResponse;
import com.pulumi.azurenative.datafactory.inputs.LinkedServiceReferenceResponse;
import com.pulumi.azurenative.datafactory.inputs.UserPropertyResponse;
import com.pulumi.azurenative.datafactory.inputs.WebActivityAuthenticationResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Web activity.
 * 
 */
public final class WebActivityResponse extends com.pulumi.resources.InvokeArgs {

    public static final WebActivityResponse Empty = new WebActivityResponse();

    /**
     * Authentication method used for calling the endpoint.
     * 
     */
    @Import(name="authentication")
    private @Nullable WebActivityAuthenticationResponse authentication;

    /**
     * @return Authentication method used for calling the endpoint.
     * 
     */
    public Optional<WebActivityAuthenticationResponse> authentication() {
        return Optional.ofNullable(this.authentication);
    }

    /**
     * Represents the payload that will be sent to the endpoint. Required for POST/PUT method, not allowed for GET method Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="body")
    private @Nullable Object body;

    /**
     * @return Represents the payload that will be sent to the endpoint. Required for POST/PUT method, not allowed for GET method Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Object> body() {
        return Optional.ofNullable(this.body);
    }

    /**
     * The integration runtime reference.
     * 
     */
    @Import(name="connectVia")
    private @Nullable IntegrationRuntimeReferenceResponse connectVia;

    /**
     * @return The integration runtime reference.
     * 
     */
    public Optional<IntegrationRuntimeReferenceResponse> connectVia() {
        return Optional.ofNullable(this.connectVia);
    }

    /**
     * List of datasets passed to web endpoint.
     * 
     */
    @Import(name="datasets")
    private @Nullable List<DatasetReferenceResponse> datasets;

    /**
     * @return List of datasets passed to web endpoint.
     * 
     */
    public Optional<List<DatasetReferenceResponse>> datasets() {
        return Optional.ofNullable(this.datasets);
    }

    /**
     * Activity depends on condition.
     * 
     */
    @Import(name="dependsOn")
    private @Nullable List<ActivityDependencyResponse> dependsOn;

    /**
     * @return Activity depends on condition.
     * 
     */
    public Optional<List<ActivityDependencyResponse>> dependsOn() {
        return Optional.ofNullable(this.dependsOn);
    }

    /**
     * Activity description.
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    /**
     * @return Activity description.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Represents the headers that will be sent to the request. For example, to set the language and type on a request: &#34;headers&#34; : { &#34;Accept-Language&#34;: &#34;en-us&#34;, &#34;Content-Type&#34;: &#34;application/json&#34; }. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="headers")
    private @Nullable Object headers;

    /**
     * @return Represents the headers that will be sent to the request. For example, to set the language and type on a request: &#34;headers&#34; : { &#34;Accept-Language&#34;: &#34;en-us&#34;, &#34;Content-Type&#34;: &#34;application/json&#34; }. Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Object> headers() {
        return Optional.ofNullable(this.headers);
    }

    /**
     * Linked service reference.
     * 
     */
    @Import(name="linkedServiceName")
    private @Nullable LinkedServiceReferenceResponse linkedServiceName;

    /**
     * @return Linked service reference.
     * 
     */
    public Optional<LinkedServiceReferenceResponse> linkedServiceName() {
        return Optional.ofNullable(this.linkedServiceName);
    }

    /**
     * List of linked services passed to web endpoint.
     * 
     */
    @Import(name="linkedServices")
    private @Nullable List<LinkedServiceReferenceResponse> linkedServices;

    /**
     * @return List of linked services passed to web endpoint.
     * 
     */
    public Optional<List<LinkedServiceReferenceResponse>> linkedServices() {
        return Optional.ofNullable(this.linkedServices);
    }

    /**
     * Rest API method for target endpoint.
     * 
     */
    @Import(name="method", required=true)
    private String method;

    /**
     * @return Rest API method for target endpoint.
     * 
     */
    public String method() {
        return this.method;
    }

    /**
     * Activity name.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return Activity name.
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * Activity policy.
     * 
     */
    @Import(name="policy")
    private @Nullable ActivityPolicyResponse policy;

    /**
     * @return Activity policy.
     * 
     */
    public Optional<ActivityPolicyResponse> policy() {
        return Optional.ofNullable(this.policy);
    }

    /**
     * Type of activity.
     * Expected value is &#39;WebActivity&#39;.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    /**
     * @return Type of activity.
     * Expected value is &#39;WebActivity&#39;.
     * 
     */
    public String type() {
        return this.type;
    }

    /**
     * Web activity target endpoint and path. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="url", required=true)
    private Object url;

    /**
     * @return Web activity target endpoint and path. Type: string (or Expression with resultType string).
     * 
     */
    public Object url() {
        return this.url;
    }

    /**
     * Activity user properties.
     * 
     */
    @Import(name="userProperties")
    private @Nullable List<UserPropertyResponse> userProperties;

    /**
     * @return Activity user properties.
     * 
     */
    public Optional<List<UserPropertyResponse>> userProperties() {
        return Optional.ofNullable(this.userProperties);
    }

    private WebActivityResponse() {}

    private WebActivityResponse(WebActivityResponse $) {
        this.authentication = $.authentication;
        this.body = $.body;
        this.connectVia = $.connectVia;
        this.datasets = $.datasets;
        this.dependsOn = $.dependsOn;
        this.description = $.description;
        this.headers = $.headers;
        this.linkedServiceName = $.linkedServiceName;
        this.linkedServices = $.linkedServices;
        this.method = $.method;
        this.name = $.name;
        this.policy = $.policy;
        this.type = $.type;
        this.url = $.url;
        this.userProperties = $.userProperties;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WebActivityResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WebActivityResponse $;

        public Builder() {
            $ = new WebActivityResponse();
        }

        public Builder(WebActivityResponse defaults) {
            $ = new WebActivityResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param authentication Authentication method used for calling the endpoint.
         * 
         * @return builder
         * 
         */
        public Builder authentication(@Nullable WebActivityAuthenticationResponse authentication) {
            $.authentication = authentication;
            return this;
        }

        /**
         * @param body Represents the payload that will be sent to the endpoint. Required for POST/PUT method, not allowed for GET method Type: string (or Expression with resultType string).
         * 
         * @return builder
         * 
         */
        public Builder body(@Nullable Object body) {
            $.body = body;
            return this;
        }

        /**
         * @param connectVia The integration runtime reference.
         * 
         * @return builder
         * 
         */
        public Builder connectVia(@Nullable IntegrationRuntimeReferenceResponse connectVia) {
            $.connectVia = connectVia;
            return this;
        }

        /**
         * @param datasets List of datasets passed to web endpoint.
         * 
         * @return builder
         * 
         */
        public Builder datasets(@Nullable List<DatasetReferenceResponse> datasets) {
            $.datasets = datasets;
            return this;
        }

        /**
         * @param datasets List of datasets passed to web endpoint.
         * 
         * @return builder
         * 
         */
        public Builder datasets(DatasetReferenceResponse... datasets) {
            return datasets(List.of(datasets));
        }

        /**
         * @param dependsOn Activity depends on condition.
         * 
         * @return builder
         * 
         */
        public Builder dependsOn(@Nullable List<ActivityDependencyResponse> dependsOn) {
            $.dependsOn = dependsOn;
            return this;
        }

        /**
         * @param dependsOn Activity depends on condition.
         * 
         * @return builder
         * 
         */
        public Builder dependsOn(ActivityDependencyResponse... dependsOn) {
            return dependsOn(List.of(dependsOn));
        }

        /**
         * @param description Activity description.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        /**
         * @param headers Represents the headers that will be sent to the request. For example, to set the language and type on a request: &#34;headers&#34; : { &#34;Accept-Language&#34;: &#34;en-us&#34;, &#34;Content-Type&#34;: &#34;application/json&#34; }. Type: string (or Expression with resultType string).
         * 
         * @return builder
         * 
         */
        public Builder headers(@Nullable Object headers) {
            $.headers = headers;
            return this;
        }

        /**
         * @param linkedServiceName Linked service reference.
         * 
         * @return builder
         * 
         */
        public Builder linkedServiceName(@Nullable LinkedServiceReferenceResponse linkedServiceName) {
            $.linkedServiceName = linkedServiceName;
            return this;
        }

        /**
         * @param linkedServices List of linked services passed to web endpoint.
         * 
         * @return builder
         * 
         */
        public Builder linkedServices(@Nullable List<LinkedServiceReferenceResponse> linkedServices) {
            $.linkedServices = linkedServices;
            return this;
        }

        /**
         * @param linkedServices List of linked services passed to web endpoint.
         * 
         * @return builder
         * 
         */
        public Builder linkedServices(LinkedServiceReferenceResponse... linkedServices) {
            return linkedServices(List.of(linkedServices));
        }

        /**
         * @param method Rest API method for target endpoint.
         * 
         * @return builder
         * 
         */
        public Builder method(String method) {
            $.method = method;
            return this;
        }

        /**
         * @param name Activity name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param policy Activity policy.
         * 
         * @return builder
         * 
         */
        public Builder policy(@Nullable ActivityPolicyResponse policy) {
            $.policy = policy;
            return this;
        }

        /**
         * @param type Type of activity.
         * Expected value is &#39;WebActivity&#39;.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            $.type = type;
            return this;
        }

        /**
         * @param url Web activity target endpoint and path. Type: string (or Expression with resultType string).
         * 
         * @return builder
         * 
         */
        public Builder url(Object url) {
            $.url = url;
            return this;
        }

        /**
         * @param userProperties Activity user properties.
         * 
         * @return builder
         * 
         */
        public Builder userProperties(@Nullable List<UserPropertyResponse> userProperties) {
            $.userProperties = userProperties;
            return this;
        }

        /**
         * @param userProperties Activity user properties.
         * 
         * @return builder
         * 
         */
        public Builder userProperties(UserPropertyResponse... userProperties) {
            return userProperties(List.of(userProperties));
        }

        public WebActivityResponse build() {
            $.method = Objects.requireNonNull($.method, "expected parameter 'method' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.type = Codegen.stringProp("type").arg($.type).require();
            $.url = Objects.requireNonNull($.url, "expected parameter 'url' to be non-null");
            return $;
        }
    }

}
