// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.compute.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Specifies the security settings like secure boot and vTPM used while creating the virtual machine. &lt;br&gt;&lt;br&gt;Minimum api-version: 2020-12-01
 * 
 */
public final class UefiSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final UefiSettingsArgs Empty = new UefiSettingsArgs();

    /**
     * Specifies whether secure boot should be enabled on the virtual machine. &lt;br&gt;&lt;br&gt;Minimum api-version: 2020-12-01
     * 
     */
    @Import(name="secureBootEnabled")
    private @Nullable Output<Boolean> secureBootEnabled;

    /**
     * @return Specifies whether secure boot should be enabled on the virtual machine. &lt;br&gt;&lt;br&gt;Minimum api-version: 2020-12-01
     * 
     */
    public Optional<Output<Boolean>> secureBootEnabled() {
        return Optional.ofNullable(this.secureBootEnabled);
    }

    /**
     * Specifies whether vTPM should be enabled on the virtual machine. &lt;br&gt;&lt;br&gt;Minimum api-version: 2020-12-01
     * 
     */
    @Import(name="vTpmEnabled")
    private @Nullable Output<Boolean> vTpmEnabled;

    /**
     * @return Specifies whether vTPM should be enabled on the virtual machine. &lt;br&gt;&lt;br&gt;Minimum api-version: 2020-12-01
     * 
     */
    public Optional<Output<Boolean>> vTpmEnabled() {
        return Optional.ofNullable(this.vTpmEnabled);
    }

    private UefiSettingsArgs() {}

    private UefiSettingsArgs(UefiSettingsArgs $) {
        this.secureBootEnabled = $.secureBootEnabled;
        this.vTpmEnabled = $.vTpmEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UefiSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UefiSettingsArgs $;

        public Builder() {
            $ = new UefiSettingsArgs();
        }

        public Builder(UefiSettingsArgs defaults) {
            $ = new UefiSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param secureBootEnabled Specifies whether secure boot should be enabled on the virtual machine. &lt;br&gt;&lt;br&gt;Minimum api-version: 2020-12-01
         * 
         * @return builder
         * 
         */
        public Builder secureBootEnabled(@Nullable Output<Boolean> secureBootEnabled) {
            $.secureBootEnabled = secureBootEnabled;
            return this;
        }

        /**
         * @param secureBootEnabled Specifies whether secure boot should be enabled on the virtual machine. &lt;br&gt;&lt;br&gt;Minimum api-version: 2020-12-01
         * 
         * @return builder
         * 
         */
        public Builder secureBootEnabled(Boolean secureBootEnabled) {
            return secureBootEnabled(Output.of(secureBootEnabled));
        }

        /**
         * @param vTpmEnabled Specifies whether vTPM should be enabled on the virtual machine. &lt;br&gt;&lt;br&gt;Minimum api-version: 2020-12-01
         * 
         * @return builder
         * 
         */
        public Builder vTpmEnabled(@Nullable Output<Boolean> vTpmEnabled) {
            $.vTpmEnabled = vTpmEnabled;
            return this;
        }

        /**
         * @param vTpmEnabled Specifies whether vTPM should be enabled on the virtual machine. &lt;br&gt;&lt;br&gt;Minimum api-version: 2020-12-01
         * 
         * @return builder
         * 
         */
        public Builder vTpmEnabled(Boolean vTpmEnabled) {
            return vTpmEnabled(Output.of(vTpmEnabled));
        }

        public UefiSettingsArgs build() {
            return $;
        }
    }

}
