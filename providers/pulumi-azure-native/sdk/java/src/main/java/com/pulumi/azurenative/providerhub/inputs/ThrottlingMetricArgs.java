// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.providerhub.inputs;

import com.pulumi.azurenative.providerhub.enums.ThrottlingMetricType;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ThrottlingMetricArgs extends com.pulumi.resources.ResourceArgs {

    public static final ThrottlingMetricArgs Empty = new ThrottlingMetricArgs();

    @Import(name="interval")
      private final @Nullable Output<String> interval;

    public Output<String> interval() {
        return this.interval == null ? Codegen.empty() : this.interval;
    }

    @Import(name="limit", required=true)
      private final Output<Double> limit;

    public Output<Double> limit() {
        return this.limit;
    }

    @Import(name="type", required=true)
      private final Output<Either<String,ThrottlingMetricType>> type;

    public Output<Either<String,ThrottlingMetricType>> type() {
        return this.type;
    }

    public ThrottlingMetricArgs(
        @Nullable Output<String> interval,
        Output<Double> limit,
        Output<Either<String,ThrottlingMetricType>> type) {
        this.interval = interval;
        this.limit = Objects.requireNonNull(limit, "expected parameter 'limit' to be non-null");
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private ThrottlingMetricArgs() {
        this.interval = Codegen.empty();
        this.limit = Codegen.empty();
        this.type = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ThrottlingMetricArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> interval;
        private Output<Double> limit;
        private Output<Either<String,ThrottlingMetricType>> type;

        public Builder() {
    	      // Empty
        }

        public Builder(ThrottlingMetricArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.interval = defaults.interval;
    	      this.limit = defaults.limit;
    	      this.type = defaults.type;
        }

        public Builder interval(@Nullable Output<String> interval) {
            this.interval = interval;
            return this;
        }
        public Builder interval(@Nullable String interval) {
            this.interval = Codegen.ofNullable(interval);
            return this;
        }
        public Builder limit(Output<Double> limit) {
            this.limit = Objects.requireNonNull(limit);
            return this;
        }
        public Builder limit(Double limit) {
            this.limit = Output.of(Objects.requireNonNull(limit));
            return this;
        }
        public Builder type(Output<Either<String,ThrottlingMetricType>> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder type(Either<String,ThrottlingMetricType> type) {
            this.type = Output.of(Objects.requireNonNull(type));
            return this;
        }        public ThrottlingMetricArgs build() {
            return new ThrottlingMetricArgs(interval, limit, type);
        }
    }
}
