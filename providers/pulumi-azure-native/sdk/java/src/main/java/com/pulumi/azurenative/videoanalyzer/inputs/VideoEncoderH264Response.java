// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.videoanalyzer.inputs;

import com.pulumi.azurenative.videoanalyzer.inputs.VideoScaleResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A custom preset for encoding video with the H.264 (AVC) codec.
 * 
 */
public final class VideoEncoderH264Response extends com.pulumi.resources.InvokeArgs {

    public static final VideoEncoderH264Response Empty = new VideoEncoderH264Response();

    /**
     * The maximum bitrate, in kilobits per second or Kbps, at which video should be encoded. If omitted, encoder sets it automatically to try and match the quality of the input video.
     * 
     */
    @Import(name="bitrateKbps")
    private @Nullable String bitrateKbps;

    /**
     * @return The maximum bitrate, in kilobits per second or Kbps, at which video should be encoded. If omitted, encoder sets it automatically to try and match the quality of the input video.
     * 
     */
    public Optional<String> bitrateKbps() {
        return Optional.ofNullable(this.bitrateKbps);
    }

    /**
     * The frame rate (in frames per second) of the encoded video. The value must be greater than zero, and less than or equal to 300. If omitted, the encoder uses the average frame rate of the input video.
     * 
     */
    @Import(name="frameRate")
    private @Nullable String frameRate;

    /**
     * @return The frame rate (in frames per second) of the encoded video. The value must be greater than zero, and less than or equal to 300. If omitted, the encoder uses the average frame rate of the input video.
     * 
     */
    public Optional<String> frameRate() {
        return Optional.ofNullable(this.frameRate);
    }

    /**
     * Describes the resolution of the encoded video. If omitted, the encoder uses the resolution of the input video.
     * 
     */
    @Import(name="scale")
    private @Nullable VideoScaleResponse scale;

    /**
     * @return Describes the resolution of the encoded video. If omitted, the encoder uses the resolution of the input video.
     * 
     */
    public Optional<VideoScaleResponse> scale() {
        return Optional.ofNullable(this.scale);
    }

    /**
     * The discriminator for derived types.
     * Expected value is &#39;#Microsoft.VideoAnalyzer.VideoEncoderH264&#39;.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    /**
     * @return The discriminator for derived types.
     * Expected value is &#39;#Microsoft.VideoAnalyzer.VideoEncoderH264&#39;.
     * 
     */
    public String type() {
        return this.type;
    }

    private VideoEncoderH264Response() {}

    private VideoEncoderH264Response(VideoEncoderH264Response $) {
        this.bitrateKbps = $.bitrateKbps;
        this.frameRate = $.frameRate;
        this.scale = $.scale;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VideoEncoderH264Response defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VideoEncoderH264Response $;

        public Builder() {
            $ = new VideoEncoderH264Response();
        }

        public Builder(VideoEncoderH264Response defaults) {
            $ = new VideoEncoderH264Response(Objects.requireNonNull(defaults));
        }

        /**
         * @param bitrateKbps The maximum bitrate, in kilobits per second or Kbps, at which video should be encoded. If omitted, encoder sets it automatically to try and match the quality of the input video.
         * 
         * @return builder
         * 
         */
        public Builder bitrateKbps(@Nullable String bitrateKbps) {
            $.bitrateKbps = bitrateKbps;
            return this;
        }

        /**
         * @param frameRate The frame rate (in frames per second) of the encoded video. The value must be greater than zero, and less than or equal to 300. If omitted, the encoder uses the average frame rate of the input video.
         * 
         * @return builder
         * 
         */
        public Builder frameRate(@Nullable String frameRate) {
            $.frameRate = frameRate;
            return this;
        }

        /**
         * @param scale Describes the resolution of the encoded video. If omitted, the encoder uses the resolution of the input video.
         * 
         * @return builder
         * 
         */
        public Builder scale(@Nullable VideoScaleResponse scale) {
            $.scale = scale;
            return this;
        }

        /**
         * @param type The discriminator for derived types.
         * Expected value is &#39;#Microsoft.VideoAnalyzer.VideoEncoderH264&#39;.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public VideoEncoderH264Response build() {
            $.type = Codegen.stringProp("type").arg($.type).require();
            return $;
        }
    }

}
