// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network;

import com.pulumi.azurenative.network.inputs.ARecordArgs;
import com.pulumi.azurenative.network.inputs.AaaaRecordArgs;
import com.pulumi.azurenative.network.inputs.CaaRecordArgs;
import com.pulumi.azurenative.network.inputs.CnameRecordArgs;
import com.pulumi.azurenative.network.inputs.MxRecordArgs;
import com.pulumi.azurenative.network.inputs.NsRecordArgs;
import com.pulumi.azurenative.network.inputs.PtrRecordArgs;
import com.pulumi.azurenative.network.inputs.SoaRecordArgs;
import com.pulumi.azurenative.network.inputs.SrvRecordArgs;
import com.pulumi.azurenative.network.inputs.SubResourceArgs;
import com.pulumi.azurenative.network.inputs.TxtRecordArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RecordSetArgs extends com.pulumi.resources.ResourceArgs {

    public static final RecordSetArgs Empty = new RecordSetArgs();

    /**
     * The list of A records in the record set.
     * 
     */
    @Import(name="aRecords")
    private @Nullable Output<List<ARecordArgs>> aRecords;

    public Optional<Output<List<ARecordArgs>>> aRecords() {
        return Optional.ofNullable(this.aRecords);
    }

    /**
     * The list of AAAA records in the record set.
     * 
     */
    @Import(name="aaaaRecords")
    private @Nullable Output<List<AaaaRecordArgs>> aaaaRecords;

    public Optional<Output<List<AaaaRecordArgs>>> aaaaRecords() {
        return Optional.ofNullable(this.aaaaRecords);
    }

    /**
     * The list of CAA records in the record set.
     * 
     */
    @Import(name="caaRecords")
    private @Nullable Output<List<CaaRecordArgs>> caaRecords;

    public Optional<Output<List<CaaRecordArgs>>> caaRecords() {
        return Optional.ofNullable(this.caaRecords);
    }

    /**
     * The CNAME record in the  record set.
     * 
     */
    @Import(name="cnameRecord")
    private @Nullable Output<CnameRecordArgs> cnameRecord;

    public Optional<Output<CnameRecordArgs>> cnameRecord() {
        return Optional.ofNullable(this.cnameRecord);
    }

    /**
     * The metadata attached to the record set.
     * 
     */
    @Import(name="metadata")
    private @Nullable Output<Map<String,String>> metadata;

    public Optional<Output<Map<String,String>>> metadata() {
        return Optional.ofNullable(this.metadata);
    }

    /**
     * The list of MX records in the record set.
     * 
     */
    @Import(name="mxRecords")
    private @Nullable Output<List<MxRecordArgs>> mxRecords;

    public Optional<Output<List<MxRecordArgs>>> mxRecords() {
        return Optional.ofNullable(this.mxRecords);
    }

    /**
     * The list of NS records in the record set.
     * 
     */
    @Import(name="nsRecords")
    private @Nullable Output<List<NsRecordArgs>> nsRecords;

    public Optional<Output<List<NsRecordArgs>>> nsRecords() {
        return Optional.ofNullable(this.nsRecords);
    }

    /**
     * The list of PTR records in the record set.
     * 
     */
    @Import(name="ptrRecords")
    private @Nullable Output<List<PtrRecordArgs>> ptrRecords;

    public Optional<Output<List<PtrRecordArgs>>> ptrRecords() {
        return Optional.ofNullable(this.ptrRecords);
    }

    /**
     * The type of DNS record in this record set. Record sets of type SOA can be updated but not created (they are created when the DNS zone is created).
     * 
     */
    @Import(name="recordType", required=true)
    private Output<String> recordType;

    public Output<String> recordType() {
        return this.recordType;
    }

    /**
     * The name of the record set, relative to the name of the zone.
     * 
     */
    @Import(name="relativeRecordSetName")
    private @Nullable Output<String> relativeRecordSetName;

    public Optional<Output<String>> relativeRecordSetName() {
        return Optional.ofNullable(this.relativeRecordSetName);
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The SOA record in the record set.
     * 
     */
    @Import(name="soaRecord")
    private @Nullable Output<SoaRecordArgs> soaRecord;

    public Optional<Output<SoaRecordArgs>> soaRecord() {
        return Optional.ofNullable(this.soaRecord);
    }

    /**
     * The list of SRV records in the record set.
     * 
     */
    @Import(name="srvRecords")
    private @Nullable Output<List<SrvRecordArgs>> srvRecords;

    public Optional<Output<List<SrvRecordArgs>>> srvRecords() {
        return Optional.ofNullable(this.srvRecords);
    }

    /**
     * A reference to an azure resource from where the dns resource value is taken.
     * 
     */
    @Import(name="targetResource")
    private @Nullable Output<SubResourceArgs> targetResource;

    public Optional<Output<SubResourceArgs>> targetResource() {
        return Optional.ofNullable(this.targetResource);
    }

    /**
     * The TTL (time-to-live) of the records in the record set.
     * 
     */
    @Import(name="ttl")
    private @Nullable Output<Double> ttl;

    public Optional<Output<Double>> ttl() {
        return Optional.ofNullable(this.ttl);
    }

    /**
     * The list of TXT records in the record set.
     * 
     */
    @Import(name="txtRecords")
    private @Nullable Output<List<TxtRecordArgs>> txtRecords;

    public Optional<Output<List<TxtRecordArgs>>> txtRecords() {
        return Optional.ofNullable(this.txtRecords);
    }

    /**
     * The name of the DNS zone (without a terminating dot).
     * 
     */
    @Import(name="zoneName", required=true)
    private Output<String> zoneName;

    public Output<String> zoneName() {
        return this.zoneName;
    }

    private RecordSetArgs() {}

    private RecordSetArgs(RecordSetArgs $) {
        this.aRecords = $.aRecords;
        this.aaaaRecords = $.aaaaRecords;
        this.caaRecords = $.caaRecords;
        this.cnameRecord = $.cnameRecord;
        this.metadata = $.metadata;
        this.mxRecords = $.mxRecords;
        this.nsRecords = $.nsRecords;
        this.ptrRecords = $.ptrRecords;
        this.recordType = $.recordType;
        this.relativeRecordSetName = $.relativeRecordSetName;
        this.resourceGroupName = $.resourceGroupName;
        this.soaRecord = $.soaRecord;
        this.srvRecords = $.srvRecords;
        this.targetResource = $.targetResource;
        this.ttl = $.ttl;
        this.txtRecords = $.txtRecords;
        this.zoneName = $.zoneName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RecordSetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RecordSetArgs $;

        public Builder() {
            $ = new RecordSetArgs();
        }

        public Builder(RecordSetArgs defaults) {
            $ = new RecordSetArgs(Objects.requireNonNull(defaults));
        }

        public Builder aRecords(@Nullable Output<List<ARecordArgs>> aRecords) {
            $.aRecords = aRecords;
            return this;
        }

        public Builder aRecords(List<ARecordArgs> aRecords) {
            return aRecords(Output.of(aRecords));
        }

        public Builder aRecords(ARecordArgs... aRecords) {
            return aRecords(List.of(aRecords));
        }

        public Builder aaaaRecords(@Nullable Output<List<AaaaRecordArgs>> aaaaRecords) {
            $.aaaaRecords = aaaaRecords;
            return this;
        }

        public Builder aaaaRecords(List<AaaaRecordArgs> aaaaRecords) {
            return aaaaRecords(Output.of(aaaaRecords));
        }

        public Builder aaaaRecords(AaaaRecordArgs... aaaaRecords) {
            return aaaaRecords(List.of(aaaaRecords));
        }

        public Builder caaRecords(@Nullable Output<List<CaaRecordArgs>> caaRecords) {
            $.caaRecords = caaRecords;
            return this;
        }

        public Builder caaRecords(List<CaaRecordArgs> caaRecords) {
            return caaRecords(Output.of(caaRecords));
        }

        public Builder caaRecords(CaaRecordArgs... caaRecords) {
            return caaRecords(List.of(caaRecords));
        }

        public Builder cnameRecord(@Nullable Output<CnameRecordArgs> cnameRecord) {
            $.cnameRecord = cnameRecord;
            return this;
        }

        public Builder cnameRecord(CnameRecordArgs cnameRecord) {
            return cnameRecord(Output.of(cnameRecord));
        }

        public Builder metadata(@Nullable Output<Map<String,String>> metadata) {
            $.metadata = metadata;
            return this;
        }

        public Builder metadata(Map<String,String> metadata) {
            return metadata(Output.of(metadata));
        }

        public Builder mxRecords(@Nullable Output<List<MxRecordArgs>> mxRecords) {
            $.mxRecords = mxRecords;
            return this;
        }

        public Builder mxRecords(List<MxRecordArgs> mxRecords) {
            return mxRecords(Output.of(mxRecords));
        }

        public Builder mxRecords(MxRecordArgs... mxRecords) {
            return mxRecords(List.of(mxRecords));
        }

        public Builder nsRecords(@Nullable Output<List<NsRecordArgs>> nsRecords) {
            $.nsRecords = nsRecords;
            return this;
        }

        public Builder nsRecords(List<NsRecordArgs> nsRecords) {
            return nsRecords(Output.of(nsRecords));
        }

        public Builder nsRecords(NsRecordArgs... nsRecords) {
            return nsRecords(List.of(nsRecords));
        }

        public Builder ptrRecords(@Nullable Output<List<PtrRecordArgs>> ptrRecords) {
            $.ptrRecords = ptrRecords;
            return this;
        }

        public Builder ptrRecords(List<PtrRecordArgs> ptrRecords) {
            return ptrRecords(Output.of(ptrRecords));
        }

        public Builder ptrRecords(PtrRecordArgs... ptrRecords) {
            return ptrRecords(List.of(ptrRecords));
        }

        public Builder recordType(Output<String> recordType) {
            $.recordType = recordType;
            return this;
        }

        public Builder recordType(String recordType) {
            return recordType(Output.of(recordType));
        }

        public Builder relativeRecordSetName(@Nullable Output<String> relativeRecordSetName) {
            $.relativeRecordSetName = relativeRecordSetName;
            return this;
        }

        public Builder relativeRecordSetName(String relativeRecordSetName) {
            return relativeRecordSetName(Output.of(relativeRecordSetName));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder soaRecord(@Nullable Output<SoaRecordArgs> soaRecord) {
            $.soaRecord = soaRecord;
            return this;
        }

        public Builder soaRecord(SoaRecordArgs soaRecord) {
            return soaRecord(Output.of(soaRecord));
        }

        public Builder srvRecords(@Nullable Output<List<SrvRecordArgs>> srvRecords) {
            $.srvRecords = srvRecords;
            return this;
        }

        public Builder srvRecords(List<SrvRecordArgs> srvRecords) {
            return srvRecords(Output.of(srvRecords));
        }

        public Builder srvRecords(SrvRecordArgs... srvRecords) {
            return srvRecords(List.of(srvRecords));
        }

        public Builder targetResource(@Nullable Output<SubResourceArgs> targetResource) {
            $.targetResource = targetResource;
            return this;
        }

        public Builder targetResource(SubResourceArgs targetResource) {
            return targetResource(Output.of(targetResource));
        }

        public Builder ttl(@Nullable Output<Double> ttl) {
            $.ttl = ttl;
            return this;
        }

        public Builder ttl(Double ttl) {
            return ttl(Output.of(ttl));
        }

        public Builder txtRecords(@Nullable Output<List<TxtRecordArgs>> txtRecords) {
            $.txtRecords = txtRecords;
            return this;
        }

        public Builder txtRecords(List<TxtRecordArgs> txtRecords) {
            return txtRecords(Output.of(txtRecords));
        }

        public Builder txtRecords(TxtRecordArgs... txtRecords) {
            return txtRecords(List.of(txtRecords));
        }

        public Builder zoneName(Output<String> zoneName) {
            $.zoneName = zoneName;
            return this;
        }

        public Builder zoneName(String zoneName) {
            return zoneName(Output.of(zoneName));
        }

        public RecordSetArgs build() {
            $.recordType = Objects.requireNonNull($.recordType, "expected parameter 'recordType' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.zoneName = Objects.requireNonNull($.zoneName, "expected parameter 'zoneName' to be non-null");
            return $;
        }
    }

}
