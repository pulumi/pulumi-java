// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.labservices.inputs;

import com.pulumi.azurenative.labservices.enums.AddRemove;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetGlobalUserPersonalPreferencesArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetGlobalUserPersonalPreferencesArgs Empty = new GetGlobalUserPersonalPreferencesArgs();

    /**
     * Enum indicating if user is adding or removing a favorite lab
     * 
     */
    @Import(name="addRemove")
    private @Nullable Output<Either<String,AddRemove>> addRemove;

    /**
     * @return Enum indicating if user is adding or removing a favorite lab
     * 
     */
    public Optional<Output<Either<String,AddRemove>>> addRemove() {
        return Optional.ofNullable(this.addRemove);
    }

    /**
     * Resource Id of the lab account
     * 
     */
    @Import(name="labAccountResourceId")
    private @Nullable Output<String> labAccountResourceId;

    /**
     * @return Resource Id of the lab account
     * 
     */
    public Optional<Output<String>> labAccountResourceId() {
        return Optional.ofNullable(this.labAccountResourceId);
    }

    /**
     * Resource Id of the lab to add/remove from the favorites list
     * 
     */
    @Import(name="labResourceId")
    private @Nullable Output<String> labResourceId;

    /**
     * @return Resource Id of the lab to add/remove from the favorites list
     * 
     */
    public Optional<Output<String>> labResourceId() {
        return Optional.ofNullable(this.labResourceId);
    }

    /**
     * The name of the user.
     * 
     */
    @Import(name="userName", required=true)
    private Output<String> userName;

    /**
     * @return The name of the user.
     * 
     */
    public Output<String> userName() {
        return this.userName;
    }

    private GetGlobalUserPersonalPreferencesArgs() {}

    private GetGlobalUserPersonalPreferencesArgs(GetGlobalUserPersonalPreferencesArgs $) {
        this.addRemove = $.addRemove;
        this.labAccountResourceId = $.labAccountResourceId;
        this.labResourceId = $.labResourceId;
        this.userName = $.userName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetGlobalUserPersonalPreferencesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetGlobalUserPersonalPreferencesArgs $;

        public Builder() {
            $ = new GetGlobalUserPersonalPreferencesArgs();
        }

        public Builder(GetGlobalUserPersonalPreferencesArgs defaults) {
            $ = new GetGlobalUserPersonalPreferencesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param addRemove Enum indicating if user is adding or removing a favorite lab
         * 
         * @return builder
         * 
         */
        public Builder addRemove(@Nullable Output<Either<String,AddRemove>> addRemove) {
            $.addRemove = addRemove;
            return this;
        }

        /**
         * @param addRemove Enum indicating if user is adding or removing a favorite lab
         * 
         * @return builder
         * 
         */
        public Builder addRemove(Either<String,AddRemove> addRemove) {
            return addRemove(Output.of(addRemove));
        }

        /**
         * @param addRemove Enum indicating if user is adding or removing a favorite lab
         * 
         * @return builder
         * 
         */
        public Builder addRemove(String addRemove) {
            return addRemove(Either.ofLeft(addRemove));
        }

        /**
         * @param addRemove Enum indicating if user is adding or removing a favorite lab
         * 
         * @return builder
         * 
         */
        public Builder addRemove(AddRemove addRemove) {
            return addRemove(Either.ofRight(addRemove));
        }

        /**
         * @param labAccountResourceId Resource Id of the lab account
         * 
         * @return builder
         * 
         */
        public Builder labAccountResourceId(@Nullable Output<String> labAccountResourceId) {
            $.labAccountResourceId = labAccountResourceId;
            return this;
        }

        /**
         * @param labAccountResourceId Resource Id of the lab account
         * 
         * @return builder
         * 
         */
        public Builder labAccountResourceId(String labAccountResourceId) {
            return labAccountResourceId(Output.of(labAccountResourceId));
        }

        /**
         * @param labResourceId Resource Id of the lab to add/remove from the favorites list
         * 
         * @return builder
         * 
         */
        public Builder labResourceId(@Nullable Output<String> labResourceId) {
            $.labResourceId = labResourceId;
            return this;
        }

        /**
         * @param labResourceId Resource Id of the lab to add/remove from the favorites list
         * 
         * @return builder
         * 
         */
        public Builder labResourceId(String labResourceId) {
            return labResourceId(Output.of(labResourceId));
        }

        /**
         * @param userName The name of the user.
         * 
         * @return builder
         * 
         */
        public Builder userName(Output<String> userName) {
            $.userName = userName;
            return this;
        }

        /**
         * @param userName The name of the user.
         * 
         * @return builder
         * 
         */
        public Builder userName(String userName) {
            return userName(Output.of(userName));
        }

        public GetGlobalUserPersonalPreferencesArgs build() {
            $.userName = Objects.requireNonNull($.userName, "expected parameter 'userName' to be non-null");
            return $;
        }
    }

}
