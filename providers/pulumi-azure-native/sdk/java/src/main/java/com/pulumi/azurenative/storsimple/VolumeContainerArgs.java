// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.storsimple;

import com.pulumi.azurenative.storsimple.enums.Kind;
import com.pulumi.azurenative.storsimple.inputs.AsymmetricEncryptedSecretArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VolumeContainerArgs extends com.pulumi.resources.ResourceArgs {

    public static final VolumeContainerArgs Empty = new VolumeContainerArgs();

    /**
     * The bandwidth-rate set on the volume container.
     * 
     */
    @Import(name="bandWidthRateInMbps")
    private @Nullable Output<Integer> bandWidthRateInMbps;

    public Optional<Output<Integer>> bandWidthRateInMbps() {
        return Optional.ofNullable(this.bandWidthRateInMbps);
    }

    /**
     * The ID of the bandwidth setting associated with the volume container.
     * 
     */
    @Import(name="bandwidthSettingId")
    private @Nullable Output<String> bandwidthSettingId;

    public Optional<Output<String>> bandwidthSettingId() {
        return Optional.ofNullable(this.bandwidthSettingId);
    }

    /**
     * The device name
     * 
     */
    @Import(name="deviceName", required=true)
    private Output<String> deviceName;

    public Output<String> deviceName() {
        return this.deviceName;
    }

    /**
     * The key used to encrypt data in the volume container. It is required when property &#39;EncryptionStatus&#39; is &#34;Enabled&#34;.
     * 
     */
    @Import(name="encryptionKey")
    private @Nullable Output<AsymmetricEncryptedSecretArgs> encryptionKey;

    public Optional<Output<AsymmetricEncryptedSecretArgs>> encryptionKey() {
        return Optional.ofNullable(this.encryptionKey);
    }

    /**
     * The Kind of the object. Currently only Series8000 is supported
     * 
     */
    @Import(name="kind")
    private @Nullable Output<Kind> kind;

    public Optional<Output<Kind>> kind() {
        return Optional.ofNullable(this.kind);
    }

    /**
     * The manager name
     * 
     */
    @Import(name="managerName", required=true)
    private Output<String> managerName;

    public Output<String> managerName() {
        return this.managerName;
    }

    /**
     * The resource group name
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The path ID of storage account associated with the volume container.
     * 
     */
    @Import(name="storageAccountCredentialId", required=true)
    private Output<String> storageAccountCredentialId;

    public Output<String> storageAccountCredentialId() {
        return this.storageAccountCredentialId;
    }

    /**
     * The name of the volume container.
     * 
     */
    @Import(name="volumeContainerName")
    private @Nullable Output<String> volumeContainerName;

    public Optional<Output<String>> volumeContainerName() {
        return Optional.ofNullable(this.volumeContainerName);
    }

    private VolumeContainerArgs() {}

    private VolumeContainerArgs(VolumeContainerArgs $) {
        this.bandWidthRateInMbps = $.bandWidthRateInMbps;
        this.bandwidthSettingId = $.bandwidthSettingId;
        this.deviceName = $.deviceName;
        this.encryptionKey = $.encryptionKey;
        this.kind = $.kind;
        this.managerName = $.managerName;
        this.resourceGroupName = $.resourceGroupName;
        this.storageAccountCredentialId = $.storageAccountCredentialId;
        this.volumeContainerName = $.volumeContainerName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VolumeContainerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VolumeContainerArgs $;

        public Builder() {
            $ = new VolumeContainerArgs();
        }

        public Builder(VolumeContainerArgs defaults) {
            $ = new VolumeContainerArgs(Objects.requireNonNull(defaults));
        }

        public Builder bandWidthRateInMbps(@Nullable Output<Integer> bandWidthRateInMbps) {
            $.bandWidthRateInMbps = bandWidthRateInMbps;
            return this;
        }

        public Builder bandWidthRateInMbps(Integer bandWidthRateInMbps) {
            return bandWidthRateInMbps(Output.of(bandWidthRateInMbps));
        }

        public Builder bandwidthSettingId(@Nullable Output<String> bandwidthSettingId) {
            $.bandwidthSettingId = bandwidthSettingId;
            return this;
        }

        public Builder bandwidthSettingId(String bandwidthSettingId) {
            return bandwidthSettingId(Output.of(bandwidthSettingId));
        }

        public Builder deviceName(Output<String> deviceName) {
            $.deviceName = deviceName;
            return this;
        }

        public Builder deviceName(String deviceName) {
            return deviceName(Output.of(deviceName));
        }

        public Builder encryptionKey(@Nullable Output<AsymmetricEncryptedSecretArgs> encryptionKey) {
            $.encryptionKey = encryptionKey;
            return this;
        }

        public Builder encryptionKey(AsymmetricEncryptedSecretArgs encryptionKey) {
            return encryptionKey(Output.of(encryptionKey));
        }

        public Builder kind(@Nullable Output<Kind> kind) {
            $.kind = kind;
            return this;
        }

        public Builder kind(Kind kind) {
            return kind(Output.of(kind));
        }

        public Builder managerName(Output<String> managerName) {
            $.managerName = managerName;
            return this;
        }

        public Builder managerName(String managerName) {
            return managerName(Output.of(managerName));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder storageAccountCredentialId(Output<String> storageAccountCredentialId) {
            $.storageAccountCredentialId = storageAccountCredentialId;
            return this;
        }

        public Builder storageAccountCredentialId(String storageAccountCredentialId) {
            return storageAccountCredentialId(Output.of(storageAccountCredentialId));
        }

        public Builder volumeContainerName(@Nullable Output<String> volumeContainerName) {
            $.volumeContainerName = volumeContainerName;
            return this;
        }

        public Builder volumeContainerName(String volumeContainerName) {
            return volumeContainerName(Output.of(volumeContainerName));
        }

        public VolumeContainerArgs build() {
            $.deviceName = Objects.requireNonNull($.deviceName, "expected parameter 'deviceName' to be non-null");
            $.managerName = Objects.requireNonNull($.managerName, "expected parameter 'managerName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.storageAccountCredentialId = Objects.requireNonNull($.storageAccountCredentialId, "expected parameter 'storageAccountCredentialId' to be non-null");
            return $;
        }
    }

}
