// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.web.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The GitHub action container configuration.
 * 
 */
public final class GitHubActionContainerConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final GitHubActionContainerConfigurationArgs Empty = new GitHubActionContainerConfigurationArgs();

    /**
     * The image name for the build.
     * 
     */
    @Import(name="imageName")
    private @Nullable Output<String> imageName;

    /**
     * @return The image name for the build.
     * 
     */
    public Optional<Output<String>> imageName() {
        return Optional.ofNullable(this.imageName);
    }

    /**
     * The password used to upload the image to the container registry.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return The password used to upload the image to the container registry.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * The server URL for the container registry where the build will be hosted.
     * 
     */
    @Import(name="serverUrl")
    private @Nullable Output<String> serverUrl;

    /**
     * @return The server URL for the container registry where the build will be hosted.
     * 
     */
    public Optional<Output<String>> serverUrl() {
        return Optional.ofNullable(this.serverUrl);
    }

    /**
     * The username used to upload the image to the container registry.
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return The username used to upload the image to the container registry.
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    private GitHubActionContainerConfigurationArgs() {}

    private GitHubActionContainerConfigurationArgs(GitHubActionContainerConfigurationArgs $) {
        this.imageName = $.imageName;
        this.password = $.password;
        this.serverUrl = $.serverUrl;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GitHubActionContainerConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GitHubActionContainerConfigurationArgs $;

        public Builder() {
            $ = new GitHubActionContainerConfigurationArgs();
        }

        public Builder(GitHubActionContainerConfigurationArgs defaults) {
            $ = new GitHubActionContainerConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param imageName The image name for the build.
         * 
         * @return builder
         * 
         */
        public Builder imageName(@Nullable Output<String> imageName) {
            $.imageName = imageName;
            return this;
        }

        /**
         * @param imageName The image name for the build.
         * 
         * @return builder
         * 
         */
        public Builder imageName(String imageName) {
            return imageName(Output.of(imageName));
        }

        /**
         * @param password The password used to upload the image to the container registry.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password The password used to upload the image to the container registry.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param serverUrl The server URL for the container registry where the build will be hosted.
         * 
         * @return builder
         * 
         */
        public Builder serverUrl(@Nullable Output<String> serverUrl) {
            $.serverUrl = serverUrl;
            return this;
        }

        /**
         * @param serverUrl The server URL for the container registry where the build will be hosted.
         * 
         * @return builder
         * 
         */
        public Builder serverUrl(String serverUrl) {
            return serverUrl(Output.of(serverUrl));
        }

        /**
         * @param username The username used to upload the image to the container registry.
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username The username used to upload the image to the container registry.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public GitHubActionContainerConfigurationArgs build() {
            return $;
        }
    }

}
