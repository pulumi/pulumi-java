// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.blueprint.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Represent a parameter with constrains and metadata.
 * 
 */
public final class ParameterDefinitionResponse extends com.pulumi.resources.InvokeArgs {

    public static final ParameterDefinitionResponse Empty = new ParameterDefinitionResponse();

    /**
     * Array of allowed values for this parameter.
     * 
     */
    @Import(name="allowedValues")
    private @Nullable List<Object> allowedValues;

    public Optional<List<Object>> allowedValues() {
        return Optional.ofNullable(this.allowedValues);
    }

    /**
     * Default Value for this parameter.
     * 
     */
    @Import(name="defaultValue")
    private @Nullable Object defaultValue;

    public Optional<Object> defaultValue() {
        return Optional.ofNullable(this.defaultValue);
    }

    /**
     * Description of this parameter/resourceGroup.
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * DisplayName of this parameter/resourceGroup.
     * 
     */
    @Import(name="displayName")
    private @Nullable String displayName;

    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * StrongType for UI to render rich experience during blueprint assignment. Supported strong types are resourceType, principalId and location.
     * 
     */
    @Import(name="strongType")
    private @Nullable String strongType;

    public Optional<String> strongType() {
        return Optional.ofNullable(this.strongType);
    }

    /**
     * Allowed data types for Resource Manager template parameters.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    public String type() {
        return this.type;
    }

    private ParameterDefinitionResponse() {}

    private ParameterDefinitionResponse(ParameterDefinitionResponse $) {
        this.allowedValues = $.allowedValues;
        this.defaultValue = $.defaultValue;
        this.description = $.description;
        this.displayName = $.displayName;
        this.strongType = $.strongType;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ParameterDefinitionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ParameterDefinitionResponse $;

        public Builder() {
            $ = new ParameterDefinitionResponse();
        }

        public Builder(ParameterDefinitionResponse defaults) {
            $ = new ParameterDefinitionResponse(Objects.requireNonNull(defaults));
        }

        public Builder allowedValues(@Nullable List<Object> allowedValues) {
            $.allowedValues = allowedValues;
            return this;
        }

        public Builder allowedValues(Object... allowedValues) {
            return allowedValues(List.of(allowedValues));
        }

        public Builder defaultValue(@Nullable Object defaultValue) {
            $.defaultValue = defaultValue;
            return this;
        }

        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        public Builder displayName(@Nullable String displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder strongType(@Nullable String strongType) {
            $.strongType = strongType;
            return this;
        }

        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public ParameterDefinitionResponse build() {
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
