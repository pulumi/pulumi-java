// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datashare.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ListShareSubscriptionSynchronizationDetailsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final ListShareSubscriptionSynchronizationDetailsPlainArgs Empty = new ListShareSubscriptionSynchronizationDetailsPlainArgs();

    /**
     * The name of the share account.
     * 
     */
    @Import(name="accountName", required=true)
    private String accountName;

    /**
     * @return The name of the share account.
     * 
     */
    public String accountName() {
        return this.accountName;
    }

    /**
     * Filters the results using OData syntax.
     * 
     */
    @Import(name="filter")
    private @Nullable String filter;

    /**
     * @return Filters the results using OData syntax.
     * 
     */
    public Optional<String> filter() {
        return Optional.ofNullable(this.filter);
    }

    /**
     * Sorts the results using OData syntax.
     * 
     */
    @Import(name="orderby")
    private @Nullable String orderby;

    /**
     * @return Sorts the results using OData syntax.
     * 
     */
    public Optional<String> orderby() {
        return Optional.ofNullable(this.orderby);
    }

    /**
     * The resource group name.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private String resourceGroupName;

    /**
     * @return The resource group name.
     * 
     */
    public String resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The name of the share subscription.
     * 
     */
    @Import(name="shareSubscriptionName", required=true)
    private String shareSubscriptionName;

    /**
     * @return The name of the share subscription.
     * 
     */
    public String shareSubscriptionName() {
        return this.shareSubscriptionName;
    }

    /**
     * Continuation token
     * 
     */
    @Import(name="skipToken")
    private @Nullable String skipToken;

    /**
     * @return Continuation token
     * 
     */
    public Optional<String> skipToken() {
        return Optional.ofNullable(this.skipToken);
    }

    /**
     * Synchronization id
     * 
     */
    @Import(name="synchronizationId", required=true)
    private String synchronizationId;

    /**
     * @return Synchronization id
     * 
     */
    public String synchronizationId() {
        return this.synchronizationId;
    }

    private ListShareSubscriptionSynchronizationDetailsPlainArgs() {}

    private ListShareSubscriptionSynchronizationDetailsPlainArgs(ListShareSubscriptionSynchronizationDetailsPlainArgs $) {
        this.accountName = $.accountName;
        this.filter = $.filter;
        this.orderby = $.orderby;
        this.resourceGroupName = $.resourceGroupName;
        this.shareSubscriptionName = $.shareSubscriptionName;
        this.skipToken = $.skipToken;
        this.synchronizationId = $.synchronizationId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ListShareSubscriptionSynchronizationDetailsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ListShareSubscriptionSynchronizationDetailsPlainArgs $;

        public Builder() {
            $ = new ListShareSubscriptionSynchronizationDetailsPlainArgs();
        }

        public Builder(ListShareSubscriptionSynchronizationDetailsPlainArgs defaults) {
            $ = new ListShareSubscriptionSynchronizationDetailsPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountName The name of the share account.
         * 
         * @return builder
         * 
         */
        public Builder accountName(String accountName) {
            $.accountName = accountName;
            return this;
        }

        /**
         * @param filter Filters the results using OData syntax.
         * 
         * @return builder
         * 
         */
        public Builder filter(@Nullable String filter) {
            $.filter = filter;
            return this;
        }

        /**
         * @param orderby Sorts the results using OData syntax.
         * 
         * @return builder
         * 
         */
        public Builder orderby(@Nullable String orderby) {
            $.orderby = orderby;
            return this;
        }

        /**
         * @param resourceGroupName The resource group name.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param shareSubscriptionName The name of the share subscription.
         * 
         * @return builder
         * 
         */
        public Builder shareSubscriptionName(String shareSubscriptionName) {
            $.shareSubscriptionName = shareSubscriptionName;
            return this;
        }

        /**
         * @param skipToken Continuation token
         * 
         * @return builder
         * 
         */
        public Builder skipToken(@Nullable String skipToken) {
            $.skipToken = skipToken;
            return this;
        }

        /**
         * @param synchronizationId Synchronization id
         * 
         * @return builder
         * 
         */
        public Builder synchronizationId(String synchronizationId) {
            $.synchronizationId = synchronizationId;
            return this;
        }

        public ListShareSubscriptionSynchronizationDetailsPlainArgs build() {
            $.accountName = Objects.requireNonNull($.accountName, "expected parameter 'accountName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.shareSubscriptionName = Objects.requireNonNull($.shareSubscriptionName, "expected parameter 'shareSubscriptionName' to be non-null");
            $.synchronizationId = Objects.requireNonNull($.synchronizationId, "expected parameter 'synchronizationId' to be non-null");
            return $;
        }
    }

}
