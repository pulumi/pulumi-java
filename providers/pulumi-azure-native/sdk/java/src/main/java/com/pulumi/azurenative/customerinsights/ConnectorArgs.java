// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.customerinsights;

import com.pulumi.azurenative.customerinsights.enums.ConnectorTypes;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConnectorArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectorArgs Empty = new ConnectorArgs();

    /**
     * Name of the connector.
     * 
     */
    @Import(name="connectorName")
    private @Nullable Output<String> connectorName;

    public Optional<Output<String>> connectorName() {
        return Optional.ofNullable(this.connectorName);
    }

    /**
     * The connector properties.
     * 
     */
    @Import(name="connectorProperties", required=true)
    private Output<Map<String,Object>> connectorProperties;

    public Output<Map<String,Object>> connectorProperties() {
        return this.connectorProperties;
    }

    /**
     * Type of connector.
     * 
     */
    @Import(name="connectorType", required=true)
    private Output<Either<String,ConnectorTypes>> connectorType;

    public Output<Either<String,ConnectorTypes>> connectorType() {
        return this.connectorType;
    }

    /**
     * Description of the connector.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Display name of the connector.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * The name of the hub.
     * 
     */
    @Import(name="hubName", required=true)
    private Output<String> hubName;

    public Output<String> hubName() {
        return this.hubName;
    }

    /**
     * If this is an internal connector.
     * 
     */
    @Import(name="isInternal")
    private @Nullable Output<Boolean> isInternal;

    public Optional<Output<Boolean>> isInternal() {
        return Optional.ofNullable(this.isInternal);
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    private ConnectorArgs() {}

    private ConnectorArgs(ConnectorArgs $) {
        this.connectorName = $.connectorName;
        this.connectorProperties = $.connectorProperties;
        this.connectorType = $.connectorType;
        this.description = $.description;
        this.displayName = $.displayName;
        this.hubName = $.hubName;
        this.isInternal = $.isInternal;
        this.resourceGroupName = $.resourceGroupName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectorArgs $;

        public Builder() {
            $ = new ConnectorArgs();
        }

        public Builder(ConnectorArgs defaults) {
            $ = new ConnectorArgs(Objects.requireNonNull(defaults));
        }

        public Builder connectorName(@Nullable Output<String> connectorName) {
            $.connectorName = connectorName;
            return this;
        }

        public Builder connectorName(String connectorName) {
            return connectorName(Output.of(connectorName));
        }

        public Builder connectorProperties(Output<Map<String,Object>> connectorProperties) {
            $.connectorProperties = connectorProperties;
            return this;
        }

        public Builder connectorProperties(Map<String,Object> connectorProperties) {
            return connectorProperties(Output.of(connectorProperties));
        }

        public Builder connectorType(Output<Either<String,ConnectorTypes>> connectorType) {
            $.connectorType = connectorType;
            return this;
        }

        public Builder connectorType(Either<String,ConnectorTypes> connectorType) {
            return connectorType(Output.of(connectorType));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder hubName(Output<String> hubName) {
            $.hubName = hubName;
            return this;
        }

        public Builder hubName(String hubName) {
            return hubName(Output.of(hubName));
        }

        public Builder isInternal(@Nullable Output<Boolean> isInternal) {
            $.isInternal = isInternal;
            return this;
        }

        public Builder isInternal(Boolean isInternal) {
            return isInternal(Output.of(isInternal));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public ConnectorArgs build() {
            $.connectorProperties = Objects.requireNonNull($.connectorProperties, "expected parameter 'connectorProperties' to be non-null");
            $.connectorType = Objects.requireNonNull($.connectorType, "expected parameter 'connectorType' to be non-null");
            $.hubName = Objects.requireNonNull($.hubName, "expected parameter 'hubName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
