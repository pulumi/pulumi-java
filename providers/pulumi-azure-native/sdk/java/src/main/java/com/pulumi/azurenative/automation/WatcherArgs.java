// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.automation;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WatcherArgs extends com.pulumi.resources.ResourceArgs {

    public static final WatcherArgs Empty = new WatcherArgs();

    /**
     * The name of the automation account.
     * 
     */
    @Import(name="automationAccountName", required=true)
    private Output<String> automationAccountName;

    public Output<String> automationAccountName() {
        return this.automationAccountName;
    }

    /**
     * Gets or sets the description.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Gets or sets the frequency at which the watcher is invoked.
     * 
     */
    @Import(name="executionFrequencyInSeconds")
    private @Nullable Output<Double> executionFrequencyInSeconds;

    public Optional<Output<Double>> executionFrequencyInSeconds() {
        return Optional.ofNullable(this.executionFrequencyInSeconds);
    }

    /**
     * The geo-location where the resource lives
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Name of an Azure Resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Gets or sets the name of the script the watcher is attached to, i.e. the name of an existing runbook.
     * 
     */
    @Import(name="scriptName")
    private @Nullable Output<String> scriptName;

    public Optional<Output<String>> scriptName() {
        return Optional.ofNullable(this.scriptName);
    }

    /**
     * Gets or sets the parameters of the script.
     * 
     */
    @Import(name="scriptParameters")
    private @Nullable Output<Map<String,String>> scriptParameters;

    public Optional<Output<Map<String,String>>> scriptParameters() {
        return Optional.ofNullable(this.scriptParameters);
    }

    /**
     * Gets or sets the name of the hybrid worker group the watcher will run on.
     * 
     */
    @Import(name="scriptRunOn")
    private @Nullable Output<String> scriptRunOn;

    public Optional<Output<String>> scriptRunOn() {
        return Optional.ofNullable(this.scriptRunOn);
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The watcher name.
     * 
     */
    @Import(name="watcherName")
    private @Nullable Output<String> watcherName;

    public Optional<Output<String>> watcherName() {
        return Optional.ofNullable(this.watcherName);
    }

    private WatcherArgs() {}

    private WatcherArgs(WatcherArgs $) {
        this.automationAccountName = $.automationAccountName;
        this.description = $.description;
        this.executionFrequencyInSeconds = $.executionFrequencyInSeconds;
        this.location = $.location;
        this.resourceGroupName = $.resourceGroupName;
        this.scriptName = $.scriptName;
        this.scriptParameters = $.scriptParameters;
        this.scriptRunOn = $.scriptRunOn;
        this.tags = $.tags;
        this.watcherName = $.watcherName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WatcherArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WatcherArgs $;

        public Builder() {
            $ = new WatcherArgs();
        }

        public Builder(WatcherArgs defaults) {
            $ = new WatcherArgs(Objects.requireNonNull(defaults));
        }

        public Builder automationAccountName(Output<String> automationAccountName) {
            $.automationAccountName = automationAccountName;
            return this;
        }

        public Builder automationAccountName(String automationAccountName) {
            return automationAccountName(Output.of(automationAccountName));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder executionFrequencyInSeconds(@Nullable Output<Double> executionFrequencyInSeconds) {
            $.executionFrequencyInSeconds = executionFrequencyInSeconds;
            return this;
        }

        public Builder executionFrequencyInSeconds(Double executionFrequencyInSeconds) {
            return executionFrequencyInSeconds(Output.of(executionFrequencyInSeconds));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder scriptName(@Nullable Output<String> scriptName) {
            $.scriptName = scriptName;
            return this;
        }

        public Builder scriptName(String scriptName) {
            return scriptName(Output.of(scriptName));
        }

        public Builder scriptParameters(@Nullable Output<Map<String,String>> scriptParameters) {
            $.scriptParameters = scriptParameters;
            return this;
        }

        public Builder scriptParameters(Map<String,String> scriptParameters) {
            return scriptParameters(Output.of(scriptParameters));
        }

        public Builder scriptRunOn(@Nullable Output<String> scriptRunOn) {
            $.scriptRunOn = scriptRunOn;
            return this;
        }

        public Builder scriptRunOn(String scriptRunOn) {
            return scriptRunOn(Output.of(scriptRunOn));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder watcherName(@Nullable Output<String> watcherName) {
            $.watcherName = watcherName;
            return this;
        }

        public Builder watcherName(String watcherName) {
            return watcherName(Output.of(watcherName));
        }

        public WatcherArgs build() {
            $.automationAccountName = Objects.requireNonNull($.automationAccountName, "expected parameter 'automationAccountName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
