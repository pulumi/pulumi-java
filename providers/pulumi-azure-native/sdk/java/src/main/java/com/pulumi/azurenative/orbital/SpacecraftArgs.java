// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.orbital;

import com.pulumi.azurenative.orbital.inputs.SpacecraftLinkArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SpacecraftArgs extends com.pulumi.resources.ResourceArgs {

    public static final SpacecraftArgs Empty = new SpacecraftArgs();

    /**
     * Links of the Spacecraft
     * 
     */
    @Import(name="links")
    private @Nullable Output<List<SpacecraftLinkArgs>> links;

    public Optional<Output<List<SpacecraftLinkArgs>>> links() {
        return Optional.ofNullable(this.links);
    }

    /**
     * The geo-location where the resource lives
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * NORAD ID of the spacecraft.
     * 
     */
    @Import(name="noradId", required=true)
    private Output<String> noradId;

    public Output<String> noradId() {
        return this.noradId;
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Spacecraft ID
     * 
     */
    @Import(name="spacecraftName")
    private @Nullable Output<String> spacecraftName;

    public Optional<Output<String>> spacecraftName() {
        return Optional.ofNullable(this.spacecraftName);
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Title line of Two Line Element (TLE).
     * 
     */
    @Import(name="titleLine")
    private @Nullable Output<String> titleLine;

    public Optional<Output<String>> titleLine() {
        return Optional.ofNullable(this.titleLine);
    }

    /**
     * Line 1 of Two Line Element (TLE).
     * 
     */
    @Import(name="tleLine1")
    private @Nullable Output<String> tleLine1;

    public Optional<Output<String>> tleLine1() {
        return Optional.ofNullable(this.tleLine1);
    }

    /**
     * Line 2 of Two Line Element (TLE).
     * 
     */
    @Import(name="tleLine2")
    private @Nullable Output<String> tleLine2;

    public Optional<Output<String>> tleLine2() {
        return Optional.ofNullable(this.tleLine2);
    }

    private SpacecraftArgs() {}

    private SpacecraftArgs(SpacecraftArgs $) {
        this.links = $.links;
        this.location = $.location;
        this.noradId = $.noradId;
        this.resourceGroupName = $.resourceGroupName;
        this.spacecraftName = $.spacecraftName;
        this.tags = $.tags;
        this.titleLine = $.titleLine;
        this.tleLine1 = $.tleLine1;
        this.tleLine2 = $.tleLine2;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SpacecraftArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SpacecraftArgs $;

        public Builder() {
            $ = new SpacecraftArgs();
        }

        public Builder(SpacecraftArgs defaults) {
            $ = new SpacecraftArgs(Objects.requireNonNull(defaults));
        }

        public Builder links(@Nullable Output<List<SpacecraftLinkArgs>> links) {
            $.links = links;
            return this;
        }

        public Builder links(List<SpacecraftLinkArgs> links) {
            return links(Output.of(links));
        }

        public Builder links(SpacecraftLinkArgs... links) {
            return links(List.of(links));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder noradId(Output<String> noradId) {
            $.noradId = noradId;
            return this;
        }

        public Builder noradId(String noradId) {
            return noradId(Output.of(noradId));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder spacecraftName(@Nullable Output<String> spacecraftName) {
            $.spacecraftName = spacecraftName;
            return this;
        }

        public Builder spacecraftName(String spacecraftName) {
            return spacecraftName(Output.of(spacecraftName));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder titleLine(@Nullable Output<String> titleLine) {
            $.titleLine = titleLine;
            return this;
        }

        public Builder titleLine(String titleLine) {
            return titleLine(Output.of(titleLine));
        }

        public Builder tleLine1(@Nullable Output<String> tleLine1) {
            $.tleLine1 = tleLine1;
            return this;
        }

        public Builder tleLine1(String tleLine1) {
            return tleLine1(Output.of(tleLine1));
        }

        public Builder tleLine2(@Nullable Output<String> tleLine2) {
            $.tleLine2 = tleLine2;
            return this;
        }

        public Builder tleLine2(String tleLine2) {
            return tleLine2(Output.of(tleLine2));
        }

        public SpacecraftArgs build() {
            $.noradId = Objects.requireNonNull($.noradId, "expected parameter 'noradId' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
