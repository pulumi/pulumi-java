// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.azurenative.datafactory.inputs.AzureKeyVaultSecretReferenceResponse;
import com.pulumi.azurenative.datafactory.inputs.SecureStringResponse;
import com.pulumi.core.Either;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;


/**
 * A WebLinkedService that uses client certificate based authentication to communicate with an HTTP endpoint. This scheme follows mutual authentication; the server must also provide valid credentials to the client.
 * 
 */
public final class WebClientCertificateAuthenticationResponse extends com.pulumi.resources.InvokeArgs {

    public static final WebClientCertificateAuthenticationResponse Empty = new WebClientCertificateAuthenticationResponse();

    /**
     * Type of authentication used to connect to the web table source.
     * Expected value is &#39;ClientCertificate&#39;.
     * 
     */
    @Import(name="authenticationType", required=true)
    private String authenticationType;

    /**
     * @return Type of authentication used to connect to the web table source.
     * Expected value is &#39;ClientCertificate&#39;.
     * 
     */
    public String authenticationType() {
        return this.authenticationType;
    }

    /**
     * Password for the PFX file.
     * 
     */
    @Import(name="password", required=true)
    private Either<AzureKeyVaultSecretReferenceResponse,SecureStringResponse> password;

    /**
     * @return Password for the PFX file.
     * 
     */
    public Either<AzureKeyVaultSecretReferenceResponse,SecureStringResponse> password() {
        return this.password;
    }

    /**
     * Base64-encoded contents of a PFX file.
     * 
     */
    @Import(name="pfx", required=true)
    private Either<AzureKeyVaultSecretReferenceResponse,SecureStringResponse> pfx;

    /**
     * @return Base64-encoded contents of a PFX file.
     * 
     */
    public Either<AzureKeyVaultSecretReferenceResponse,SecureStringResponse> pfx() {
        return this.pfx;
    }

    /**
     * The URL of the web service endpoint, e.g. http://www.microsoft.com . Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="url", required=true)
    private Object url;

    /**
     * @return The URL of the web service endpoint, e.g. http://www.microsoft.com . Type: string (or Expression with resultType string).
     * 
     */
    public Object url() {
        return this.url;
    }

    private WebClientCertificateAuthenticationResponse() {}

    private WebClientCertificateAuthenticationResponse(WebClientCertificateAuthenticationResponse $) {
        this.authenticationType = $.authenticationType;
        this.password = $.password;
        this.pfx = $.pfx;
        this.url = $.url;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WebClientCertificateAuthenticationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WebClientCertificateAuthenticationResponse $;

        public Builder() {
            $ = new WebClientCertificateAuthenticationResponse();
        }

        public Builder(WebClientCertificateAuthenticationResponse defaults) {
            $ = new WebClientCertificateAuthenticationResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param authenticationType Type of authentication used to connect to the web table source.
         * Expected value is &#39;ClientCertificate&#39;.
         * 
         * @return builder
         * 
         */
        public Builder authenticationType(String authenticationType) {
            $.authenticationType = authenticationType;
            return this;
        }

        /**
         * @param password Password for the PFX file.
         * 
         * @return builder
         * 
         */
        public Builder password(Either<AzureKeyVaultSecretReferenceResponse,SecureStringResponse> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password Password for the PFX file.
         * 
         * @return builder
         * 
         */
        public Builder password(AzureKeyVaultSecretReferenceResponse password) {
            return password(Either.ofLeft(password));
        }

        /**
         * @param password Password for the PFX file.
         * 
         * @return builder
         * 
         */
        public Builder password(SecureStringResponse password) {
            return password(Either.ofRight(password));
        }

        /**
         * @param pfx Base64-encoded contents of a PFX file.
         * 
         * @return builder
         * 
         */
        public Builder pfx(Either<AzureKeyVaultSecretReferenceResponse,SecureStringResponse> pfx) {
            $.pfx = pfx;
            return this;
        }

        /**
         * @param pfx Base64-encoded contents of a PFX file.
         * 
         * @return builder
         * 
         */
        public Builder pfx(AzureKeyVaultSecretReferenceResponse pfx) {
            return pfx(Either.ofLeft(pfx));
        }

        /**
         * @param pfx Base64-encoded contents of a PFX file.
         * 
         * @return builder
         * 
         */
        public Builder pfx(SecureStringResponse pfx) {
            return pfx(Either.ofRight(pfx));
        }

        /**
         * @param url The URL of the web service endpoint, e.g. http://www.microsoft.com . Type: string (or Expression with resultType string).
         * 
         * @return builder
         * 
         */
        public Builder url(Object url) {
            $.url = url;
            return this;
        }

        public WebClientCertificateAuthenticationResponse build() {
            $.authenticationType = Codegen.stringProp("authenticationType").arg($.authenticationType).require();
            $.password = Objects.requireNonNull($.password, "expected parameter 'password' to be non-null");
            $.pfx = Objects.requireNonNull($.pfx, "expected parameter 'pfx' to be non-null");
            $.url = Objects.requireNonNull($.url, "expected parameter 'url' to be non-null");
            return $;
        }
    }

}
