// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Definition of a single parameter for an entity.
 * 
 */
public final class ParameterSpecificationResponse extends com.pulumi.resources.InvokeArgs {

    public static final ParameterSpecificationResponse Empty = new ParameterSpecificationResponse();

    /**
     * Default value of parameter.
     * 
     */
    @Import(name="defaultValue")
    private @Nullable Object defaultValue;

    public Optional<Object> defaultValue() {
        return Optional.ofNullable(this.defaultValue);
    }

    /**
     * Parameter type.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    public String type() {
        return this.type;
    }

    private ParameterSpecificationResponse() {}

    private ParameterSpecificationResponse(ParameterSpecificationResponse $) {
        this.defaultValue = $.defaultValue;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ParameterSpecificationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ParameterSpecificationResponse $;

        public Builder() {
            $ = new ParameterSpecificationResponse();
        }

        public Builder(ParameterSpecificationResponse defaults) {
            $ = new ParameterSpecificationResponse(Objects.requireNonNull(defaults));
        }

        public Builder defaultValue(@Nullable Object defaultValue) {
            $.defaultValue = defaultValue;
            return this;
        }

        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public ParameterSpecificationResponse build() {
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
