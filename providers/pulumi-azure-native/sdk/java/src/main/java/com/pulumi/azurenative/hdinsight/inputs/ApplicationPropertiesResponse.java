// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.hdinsight.inputs;

import com.pulumi.azurenative.hdinsight.inputs.ApplicationGetEndpointResponse;
import com.pulumi.azurenative.hdinsight.inputs.ApplicationGetHttpsEndpointResponse;
import com.pulumi.azurenative.hdinsight.inputs.ComputeProfileResponse;
import com.pulumi.azurenative.hdinsight.inputs.ErrorsResponse;
import com.pulumi.azurenative.hdinsight.inputs.RuntimeScriptActionResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The HDInsight cluster application GET response.
 * 
 */
public final class ApplicationPropertiesResponse extends com.pulumi.resources.InvokeArgs {

    public static final ApplicationPropertiesResponse Empty = new ApplicationPropertiesResponse();

    /**
     * The application state.
     * 
     */
    @Import(name="applicationState", required=true)
    private String applicationState;

    public String applicationState() {
        return this.applicationState;
    }

    /**
     * The application type.
     * 
     */
    @Import(name="applicationType")
    private @Nullable String applicationType;

    public Optional<String> applicationType() {
        return Optional.ofNullable(this.applicationType);
    }

    /**
     * The list of roles in the cluster.
     * 
     */
    @Import(name="computeProfile")
    private @Nullable ComputeProfileResponse computeProfile;

    public Optional<ComputeProfileResponse> computeProfile() {
        return Optional.ofNullable(this.computeProfile);
    }

    /**
     * The application create date time.
     * 
     */
    @Import(name="createdDate", required=true)
    private String createdDate;

    public String createdDate() {
        return this.createdDate;
    }

    /**
     * The list of errors.
     * 
     */
    @Import(name="errors")
    private @Nullable List<ErrorsResponse> errors;

    public Optional<List<ErrorsResponse>> errors() {
        return Optional.ofNullable(this.errors);
    }

    /**
     * The list of application HTTPS endpoints.
     * 
     */
    @Import(name="httpsEndpoints")
    private @Nullable List<ApplicationGetHttpsEndpointResponse> httpsEndpoints;

    public Optional<List<ApplicationGetHttpsEndpointResponse>> httpsEndpoints() {
        return Optional.ofNullable(this.httpsEndpoints);
    }

    /**
     * The list of install script actions.
     * 
     */
    @Import(name="installScriptActions")
    private @Nullable List<RuntimeScriptActionResponse> installScriptActions;

    public Optional<List<RuntimeScriptActionResponse>> installScriptActions() {
        return Optional.ofNullable(this.installScriptActions);
    }

    /**
     * The marketplace identifier.
     * 
     */
    @Import(name="marketplaceIdentifier", required=true)
    private String marketplaceIdentifier;

    public String marketplaceIdentifier() {
        return this.marketplaceIdentifier;
    }

    /**
     * The provisioning state of the application.
     * 
     */
    @Import(name="provisioningState", required=true)
    private String provisioningState;

    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * The list of application SSH endpoints.
     * 
     */
    @Import(name="sshEndpoints")
    private @Nullable List<ApplicationGetEndpointResponse> sshEndpoints;

    public Optional<List<ApplicationGetEndpointResponse>> sshEndpoints() {
        return Optional.ofNullable(this.sshEndpoints);
    }

    /**
     * The list of uninstall script actions.
     * 
     */
    @Import(name="uninstallScriptActions")
    private @Nullable List<RuntimeScriptActionResponse> uninstallScriptActions;

    public Optional<List<RuntimeScriptActionResponse>> uninstallScriptActions() {
        return Optional.ofNullable(this.uninstallScriptActions);
    }

    private ApplicationPropertiesResponse() {}

    private ApplicationPropertiesResponse(ApplicationPropertiesResponse $) {
        this.applicationState = $.applicationState;
        this.applicationType = $.applicationType;
        this.computeProfile = $.computeProfile;
        this.createdDate = $.createdDate;
        this.errors = $.errors;
        this.httpsEndpoints = $.httpsEndpoints;
        this.installScriptActions = $.installScriptActions;
        this.marketplaceIdentifier = $.marketplaceIdentifier;
        this.provisioningState = $.provisioningState;
        this.sshEndpoints = $.sshEndpoints;
        this.uninstallScriptActions = $.uninstallScriptActions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplicationPropertiesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplicationPropertiesResponse $;

        public Builder() {
            $ = new ApplicationPropertiesResponse();
        }

        public Builder(ApplicationPropertiesResponse defaults) {
            $ = new ApplicationPropertiesResponse(Objects.requireNonNull(defaults));
        }

        public Builder applicationState(String applicationState) {
            $.applicationState = applicationState;
            return this;
        }

        public Builder applicationType(@Nullable String applicationType) {
            $.applicationType = applicationType;
            return this;
        }

        public Builder computeProfile(@Nullable ComputeProfileResponse computeProfile) {
            $.computeProfile = computeProfile;
            return this;
        }

        public Builder createdDate(String createdDate) {
            $.createdDate = createdDate;
            return this;
        }

        public Builder errors(@Nullable List<ErrorsResponse> errors) {
            $.errors = errors;
            return this;
        }

        public Builder errors(ErrorsResponse... errors) {
            return errors(List.of(errors));
        }

        public Builder httpsEndpoints(@Nullable List<ApplicationGetHttpsEndpointResponse> httpsEndpoints) {
            $.httpsEndpoints = httpsEndpoints;
            return this;
        }

        public Builder httpsEndpoints(ApplicationGetHttpsEndpointResponse... httpsEndpoints) {
            return httpsEndpoints(List.of(httpsEndpoints));
        }

        public Builder installScriptActions(@Nullable List<RuntimeScriptActionResponse> installScriptActions) {
            $.installScriptActions = installScriptActions;
            return this;
        }

        public Builder installScriptActions(RuntimeScriptActionResponse... installScriptActions) {
            return installScriptActions(List.of(installScriptActions));
        }

        public Builder marketplaceIdentifier(String marketplaceIdentifier) {
            $.marketplaceIdentifier = marketplaceIdentifier;
            return this;
        }

        public Builder provisioningState(String provisioningState) {
            $.provisioningState = provisioningState;
            return this;
        }

        public Builder sshEndpoints(@Nullable List<ApplicationGetEndpointResponse> sshEndpoints) {
            $.sshEndpoints = sshEndpoints;
            return this;
        }

        public Builder sshEndpoints(ApplicationGetEndpointResponse... sshEndpoints) {
            return sshEndpoints(List.of(sshEndpoints));
        }

        public Builder uninstallScriptActions(@Nullable List<RuntimeScriptActionResponse> uninstallScriptActions) {
            $.uninstallScriptActions = uninstallScriptActions;
            return this;
        }

        public Builder uninstallScriptActions(RuntimeScriptActionResponse... uninstallScriptActions) {
            return uninstallScriptActions(List.of(uninstallScriptActions));
        }

        public ApplicationPropertiesResponse build() {
            $.applicationState = Objects.requireNonNull($.applicationState, "expected parameter 'applicationState' to be non-null");
            $.createdDate = Objects.requireNonNull($.createdDate, "expected parameter 'createdDate' to be non-null");
            $.marketplaceIdentifier = Objects.requireNonNull($.marketplaceIdentifier, "expected parameter 'marketplaceIdentifier' to be non-null");
            $.provisioningState = Objects.requireNonNull($.provisioningState, "expected parameter 'provisioningState' to be non-null");
            return $;
        }
    }

}
