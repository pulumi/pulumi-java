// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.web.inputs;

import com.pulumi.azurenative.web.inputs.ScaleRuleArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Container App scaling configurations.
 * 
 */
public final class ScaleArgs extends com.pulumi.resources.ResourceArgs {

    public static final ScaleArgs Empty = new ScaleArgs();

    /**
     * Optional. Maximum number of container replicas. Defaults to 10 if not set.
     * 
     */
    @Import(name="maxReplicas")
    private @Nullable Output<Integer> maxReplicas;

    /**
     * @return Optional. Maximum number of container replicas. Defaults to 10 if not set.
     * 
     */
    public Optional<Output<Integer>> maxReplicas() {
        return Optional.ofNullable(this.maxReplicas);
    }

    /**
     * Optional. Minimum number of container replicas.
     * 
     */
    @Import(name="minReplicas")
    private @Nullable Output<Integer> minReplicas;

    /**
     * @return Optional. Minimum number of container replicas.
     * 
     */
    public Optional<Output<Integer>> minReplicas() {
        return Optional.ofNullable(this.minReplicas);
    }

    /**
     * Scaling rules.
     * 
     */
    @Import(name="rules")
    private @Nullable Output<List<ScaleRuleArgs>> rules;

    /**
     * @return Scaling rules.
     * 
     */
    public Optional<Output<List<ScaleRuleArgs>>> rules() {
        return Optional.ofNullable(this.rules);
    }

    private ScaleArgs() {}

    private ScaleArgs(ScaleArgs $) {
        this.maxReplicas = $.maxReplicas;
        this.minReplicas = $.minReplicas;
        this.rules = $.rules;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ScaleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ScaleArgs $;

        public Builder() {
            $ = new ScaleArgs();
        }

        public Builder(ScaleArgs defaults) {
            $ = new ScaleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param maxReplicas Optional. Maximum number of container replicas. Defaults to 10 if not set.
         * 
         * @return builder
         * 
         */
        public Builder maxReplicas(@Nullable Output<Integer> maxReplicas) {
            $.maxReplicas = maxReplicas;
            return this;
        }

        /**
         * @param maxReplicas Optional. Maximum number of container replicas. Defaults to 10 if not set.
         * 
         * @return builder
         * 
         */
        public Builder maxReplicas(Integer maxReplicas) {
            return maxReplicas(Output.of(maxReplicas));
        }

        /**
         * @param minReplicas Optional. Minimum number of container replicas.
         * 
         * @return builder
         * 
         */
        public Builder minReplicas(@Nullable Output<Integer> minReplicas) {
            $.minReplicas = minReplicas;
            return this;
        }

        /**
         * @param minReplicas Optional. Minimum number of container replicas.
         * 
         * @return builder
         * 
         */
        public Builder minReplicas(Integer minReplicas) {
            return minReplicas(Output.of(minReplicas));
        }

        /**
         * @param rules Scaling rules.
         * 
         * @return builder
         * 
         */
        public Builder rules(@Nullable Output<List<ScaleRuleArgs>> rules) {
            $.rules = rules;
            return this;
        }

        /**
         * @param rules Scaling rules.
         * 
         * @return builder
         * 
         */
        public Builder rules(List<ScaleRuleArgs> rules) {
            return rules(Output.of(rules));
        }

        /**
         * @param rules Scaling rules.
         * 
         * @return builder
         * 
         */
        public Builder rules(ScaleRuleArgs... rules) {
            return rules(List.of(rules));
        }

        public ScaleArgs build() {
            return $;
        }
    }

}
