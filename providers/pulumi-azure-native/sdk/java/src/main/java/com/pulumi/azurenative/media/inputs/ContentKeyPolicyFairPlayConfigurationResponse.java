// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.media.inputs;

import com.pulumi.azurenative.media.inputs.ContentKeyPolicyFairPlayOfflineRentalConfigurationResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Specifies a configuration for FairPlay licenses.
 * 
 */
public final class ContentKeyPolicyFairPlayConfigurationResponse extends com.pulumi.resources.InvokeArgs {

    public static final ContentKeyPolicyFairPlayConfigurationResponse Empty = new ContentKeyPolicyFairPlayConfigurationResponse();

    /**
     * The key that must be used as FairPlay Application Secret key.
     * 
     */
    @Import(name="ask", required=true)
    private String ask;

    public String ask() {
        return this.ask;
    }

    /**
     * The Base64 representation of FairPlay certificate in PKCS 12 (pfx) format (including private key).
     * 
     */
    @Import(name="fairPlayPfx", required=true)
    private String fairPlayPfx;

    public String fairPlayPfx() {
        return this.fairPlayPfx;
    }

    /**
     * The password encrypting FairPlay certificate in PKCS 12 (pfx) format.
     * 
     */
    @Import(name="fairPlayPfxPassword", required=true)
    private String fairPlayPfxPassword;

    public String fairPlayPfxPassword() {
        return this.fairPlayPfxPassword;
    }

    /**
     * The discriminator for derived types.
     * Expected value is &#39;#Microsoft.Media.ContentKeyPolicyFairPlayConfiguration&#39;.
     * 
     */
    @Import(name="odataType", required=true)
    private String odataType;

    public String odataType() {
        return this.odataType;
    }

    /**
     * Offline rental policy
     * 
     */
    @Import(name="offlineRentalConfiguration")
    private @Nullable ContentKeyPolicyFairPlayOfflineRentalConfigurationResponse offlineRentalConfiguration;

    public Optional<ContentKeyPolicyFairPlayOfflineRentalConfigurationResponse> offlineRentalConfiguration() {
        return Optional.ofNullable(this.offlineRentalConfiguration);
    }

    /**
     * The rental and lease key type.
     * 
     */
    @Import(name="rentalAndLeaseKeyType", required=true)
    private String rentalAndLeaseKeyType;

    public String rentalAndLeaseKeyType() {
        return this.rentalAndLeaseKeyType;
    }

    /**
     * The rental duration. Must be greater than or equal to 0.
     * 
     */
    @Import(name="rentalDuration", required=true)
    private Double rentalDuration;

    public Double rentalDuration() {
        return this.rentalDuration;
    }

    private ContentKeyPolicyFairPlayConfigurationResponse() {}

    private ContentKeyPolicyFairPlayConfigurationResponse(ContentKeyPolicyFairPlayConfigurationResponse $) {
        this.ask = $.ask;
        this.fairPlayPfx = $.fairPlayPfx;
        this.fairPlayPfxPassword = $.fairPlayPfxPassword;
        this.odataType = $.odataType;
        this.offlineRentalConfiguration = $.offlineRentalConfiguration;
        this.rentalAndLeaseKeyType = $.rentalAndLeaseKeyType;
        this.rentalDuration = $.rentalDuration;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContentKeyPolicyFairPlayConfigurationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContentKeyPolicyFairPlayConfigurationResponse $;

        public Builder() {
            $ = new ContentKeyPolicyFairPlayConfigurationResponse();
        }

        public Builder(ContentKeyPolicyFairPlayConfigurationResponse defaults) {
            $ = new ContentKeyPolicyFairPlayConfigurationResponse(Objects.requireNonNull(defaults));
        }

        public Builder ask(String ask) {
            $.ask = ask;
            return this;
        }

        public Builder fairPlayPfx(String fairPlayPfx) {
            $.fairPlayPfx = fairPlayPfx;
            return this;
        }

        public Builder fairPlayPfxPassword(String fairPlayPfxPassword) {
            $.fairPlayPfxPassword = fairPlayPfxPassword;
            return this;
        }

        public Builder odataType(String odataType) {
            $.odataType = odataType;
            return this;
        }

        public Builder offlineRentalConfiguration(@Nullable ContentKeyPolicyFairPlayOfflineRentalConfigurationResponse offlineRentalConfiguration) {
            $.offlineRentalConfiguration = offlineRentalConfiguration;
            return this;
        }

        public Builder rentalAndLeaseKeyType(String rentalAndLeaseKeyType) {
            $.rentalAndLeaseKeyType = rentalAndLeaseKeyType;
            return this;
        }

        public Builder rentalDuration(Double rentalDuration) {
            $.rentalDuration = rentalDuration;
            return this;
        }

        public ContentKeyPolicyFairPlayConfigurationResponse build() {
            $.ask = Objects.requireNonNull($.ask, "expected parameter 'ask' to be non-null");
            $.fairPlayPfx = Objects.requireNonNull($.fairPlayPfx, "expected parameter 'fairPlayPfx' to be non-null");
            $.fairPlayPfxPassword = Objects.requireNonNull($.fairPlayPfxPassword, "expected parameter 'fairPlayPfxPassword' to be non-null");
            $.odataType = Codegen.stringProp("odataType").arg($.odataType).require();
            $.rentalAndLeaseKeyType = Objects.requireNonNull($.rentalAndLeaseKeyType, "expected parameter 'rentalAndLeaseKeyType' to be non-null");
            $.rentalDuration = Objects.requireNonNull($.rentalDuration, "expected parameter 'rentalDuration' to be non-null");
            return $;
        }
    }

}
