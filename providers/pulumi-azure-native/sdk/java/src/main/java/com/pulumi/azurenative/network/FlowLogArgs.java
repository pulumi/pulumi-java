// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network;

import com.pulumi.azurenative.network.inputs.FlowLogFormatParametersArgs;
import com.pulumi.azurenative.network.inputs.RetentionPolicyParametersArgs;
import com.pulumi.azurenative.network.inputs.TrafficAnalyticsPropertiesArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FlowLogArgs extends com.pulumi.resources.ResourceArgs {

    public static final FlowLogArgs Empty = new FlowLogArgs();

    /**
     * Flag to enable/disable flow logging.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Flag to enable/disable flow logging.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Parameters that define the configuration of traffic analytics.
     * 
     */
    @Import(name="flowAnalyticsConfiguration")
    private @Nullable Output<TrafficAnalyticsPropertiesArgs> flowAnalyticsConfiguration;

    /**
     * @return Parameters that define the configuration of traffic analytics.
     * 
     */
    public Optional<Output<TrafficAnalyticsPropertiesArgs>> flowAnalyticsConfiguration() {
        return Optional.ofNullable(this.flowAnalyticsConfiguration);
    }

    /**
     * The name of the flow log.
     * 
     */
    @Import(name="flowLogName")
    private @Nullable Output<String> flowLogName;

    /**
     * @return The name of the flow log.
     * 
     */
    public Optional<Output<String>> flowLogName() {
        return Optional.ofNullable(this.flowLogName);
    }

    /**
     * Parameters that define the flow log format.
     * 
     */
    @Import(name="format")
    private @Nullable Output<FlowLogFormatParametersArgs> format;

    /**
     * @return Parameters that define the flow log format.
     * 
     */
    public Optional<Output<FlowLogFormatParametersArgs>> format() {
        return Optional.ofNullable(this.format);
    }

    /**
     * Resource ID.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return Resource ID.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Resource location.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Resource location.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name of the network watcher.
     * 
     */
    @Import(name="networkWatcherName", required=true)
    private Output<String> networkWatcherName;

    /**
     * @return The name of the network watcher.
     * 
     */
    public Output<String> networkWatcherName() {
        return this.networkWatcherName;
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Parameters that define the retention policy for flow log.
     * 
     */
    @Import(name="retentionPolicy")
    private @Nullable Output<RetentionPolicyParametersArgs> retentionPolicy;

    /**
     * @return Parameters that define the retention policy for flow log.
     * 
     */
    public Optional<Output<RetentionPolicyParametersArgs>> retentionPolicy() {
        return Optional.ofNullable(this.retentionPolicy);
    }

    /**
     * ID of the storage account which is used to store the flow log.
     * 
     */
    @Import(name="storageId", required=true)
    private Output<String> storageId;

    /**
     * @return ID of the storage account which is used to store the flow log.
     * 
     */
    public Output<String> storageId() {
        return this.storageId;
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Resource tags.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * ID of network security group to which flow log will be applied.
     * 
     */
    @Import(name="targetResourceId", required=true)
    private Output<String> targetResourceId;

    /**
     * @return ID of network security group to which flow log will be applied.
     * 
     */
    public Output<String> targetResourceId() {
        return this.targetResourceId;
    }

    private FlowLogArgs() {}

    private FlowLogArgs(FlowLogArgs $) {
        this.enabled = $.enabled;
        this.flowAnalyticsConfiguration = $.flowAnalyticsConfiguration;
        this.flowLogName = $.flowLogName;
        this.format = $.format;
        this.id = $.id;
        this.location = $.location;
        this.networkWatcherName = $.networkWatcherName;
        this.resourceGroupName = $.resourceGroupName;
        this.retentionPolicy = $.retentionPolicy;
        this.storageId = $.storageId;
        this.tags = $.tags;
        this.targetResourceId = $.targetResourceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FlowLogArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FlowLogArgs $;

        public Builder() {
            $ = new FlowLogArgs();
        }

        public Builder(FlowLogArgs defaults) {
            $ = new FlowLogArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enabled Flag to enable/disable flow logging.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Flag to enable/disable flow logging.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param flowAnalyticsConfiguration Parameters that define the configuration of traffic analytics.
         * 
         * @return builder
         * 
         */
        public Builder flowAnalyticsConfiguration(@Nullable Output<TrafficAnalyticsPropertiesArgs> flowAnalyticsConfiguration) {
            $.flowAnalyticsConfiguration = flowAnalyticsConfiguration;
            return this;
        }

        /**
         * @param flowAnalyticsConfiguration Parameters that define the configuration of traffic analytics.
         * 
         * @return builder
         * 
         */
        public Builder flowAnalyticsConfiguration(TrafficAnalyticsPropertiesArgs flowAnalyticsConfiguration) {
            return flowAnalyticsConfiguration(Output.of(flowAnalyticsConfiguration));
        }

        /**
         * @param flowLogName The name of the flow log.
         * 
         * @return builder
         * 
         */
        public Builder flowLogName(@Nullable Output<String> flowLogName) {
            $.flowLogName = flowLogName;
            return this;
        }

        /**
         * @param flowLogName The name of the flow log.
         * 
         * @return builder
         * 
         */
        public Builder flowLogName(String flowLogName) {
            return flowLogName(Output.of(flowLogName));
        }

        /**
         * @param format Parameters that define the flow log format.
         * 
         * @return builder
         * 
         */
        public Builder format(@Nullable Output<FlowLogFormatParametersArgs> format) {
            $.format = format;
            return this;
        }

        /**
         * @param format Parameters that define the flow log format.
         * 
         * @return builder
         * 
         */
        public Builder format(FlowLogFormatParametersArgs format) {
            return format(Output.of(format));
        }

        /**
         * @param id Resource ID.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id Resource ID.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param location Resource location.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Resource location.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param networkWatcherName The name of the network watcher.
         * 
         * @return builder
         * 
         */
        public Builder networkWatcherName(Output<String> networkWatcherName) {
            $.networkWatcherName = networkWatcherName;
            return this;
        }

        /**
         * @param networkWatcherName The name of the network watcher.
         * 
         * @return builder
         * 
         */
        public Builder networkWatcherName(String networkWatcherName) {
            return networkWatcherName(Output.of(networkWatcherName));
        }

        /**
         * @param resourceGroupName The name of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param retentionPolicy Parameters that define the retention policy for flow log.
         * 
         * @return builder
         * 
         */
        public Builder retentionPolicy(@Nullable Output<RetentionPolicyParametersArgs> retentionPolicy) {
            $.retentionPolicy = retentionPolicy;
            return this;
        }

        /**
         * @param retentionPolicy Parameters that define the retention policy for flow log.
         * 
         * @return builder
         * 
         */
        public Builder retentionPolicy(RetentionPolicyParametersArgs retentionPolicy) {
            return retentionPolicy(Output.of(retentionPolicy));
        }

        /**
         * @param storageId ID of the storage account which is used to store the flow log.
         * 
         * @return builder
         * 
         */
        public Builder storageId(Output<String> storageId) {
            $.storageId = storageId;
            return this;
        }

        /**
         * @param storageId ID of the storage account which is used to store the flow log.
         * 
         * @return builder
         * 
         */
        public Builder storageId(String storageId) {
            return storageId(Output.of(storageId));
        }

        /**
         * @param tags Resource tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Resource tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param targetResourceId ID of network security group to which flow log will be applied.
         * 
         * @return builder
         * 
         */
        public Builder targetResourceId(Output<String> targetResourceId) {
            $.targetResourceId = targetResourceId;
            return this;
        }

        /**
         * @param targetResourceId ID of network security group to which flow log will be applied.
         * 
         * @return builder
         * 
         */
        public Builder targetResourceId(String targetResourceId) {
            return targetResourceId(Output.of(targetResourceId));
        }

        public FlowLogArgs build() {
            $.networkWatcherName = Objects.requireNonNull($.networkWatcherName, "expected parameter 'networkWatcherName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.storageId = Objects.requireNonNull($.storageId, "expected parameter 'storageId' to be non-null");
            $.targetResourceId = Objects.requireNonNull($.targetResourceId, "expected parameter 'targetResourceId' to be non-null");
            return $;
        }
    }

}
