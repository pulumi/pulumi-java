// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.avs;

import com.pulumi.azurenative.avs.inputs.PSCredentialExecutionParameterArgs;
import com.pulumi.azurenative.avs.inputs.ScriptSecureStringExecutionParameterArgs;
import com.pulumi.azurenative.avs.inputs.ScriptStringExecutionParameterArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ScriptExecutionArgs extends com.pulumi.resources.ResourceArgs {

    public static final ScriptExecutionArgs Empty = new ScriptExecutionArgs();

    /**
     * Error message if the script was able to run, but if the script itself had errors or powershell threw an exception
     * 
     */
    @Import(name="failureReason")
      private final @Nullable Output<String> failureReason;

    public Output<String> failureReason() {
        return this.failureReason == null ? Codegen.empty() : this.failureReason;
    }

    /**
     * Parameters that will be hidden/not visible to ARM, such as passwords and credentials
     * 
     */
    @Import(name="hiddenParameters")
      private final @Nullable Output<List<Object>> hiddenParameters;

    public Output<List<Object>> hiddenParameters() {
        return this.hiddenParameters == null ? Codegen.empty() : this.hiddenParameters;
    }

    /**
     * User-defined dictionary.
     * 
     */
    @Import(name="namedOutputs")
      private final @Nullable Output<Map<String,Object>> namedOutputs;

    public Output<Map<String,Object>> namedOutputs() {
        return this.namedOutputs == null ? Codegen.empty() : this.namedOutputs;
    }

    /**
     * Standard output stream from the powershell execution
     * 
     */
    @Import(name="output")
      private final @Nullable Output<List<String>> output;

    public Output<List<String>> output() {
        return this.output == null ? Codegen.empty() : this.output;
    }

    /**
     * Parameters the script will accept
     * 
     */
    @Import(name="parameters")
      private final @Nullable Output<List<Object>> parameters;

    public Output<List<Object>> parameters() {
        return this.parameters == null ? Codegen.empty() : this.parameters;
    }

    /**
     * The name of the private cloud.
     * 
     */
    @Import(name="privateCloudName", required=true)
      private final Output<String> privateCloudName;

    public Output<String> privateCloudName() {
        return this.privateCloudName;
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Time to live for the resource. If not provided, will be available for 60 days
     * 
     */
    @Import(name="retention")
      private final @Nullable Output<String> retention;

    public Output<String> retention() {
        return this.retention == null ? Codegen.empty() : this.retention;
    }

    /**
     * A reference to the script cmdlet resource if user is running a AVS script
     * 
     */
    @Import(name="scriptCmdletId")
      private final @Nullable Output<String> scriptCmdletId;

    public Output<String> scriptCmdletId() {
        return this.scriptCmdletId == null ? Codegen.empty() : this.scriptCmdletId;
    }

    /**
     * Name of the user-invoked script execution resource
     * 
     */
    @Import(name="scriptExecutionName")
      private final @Nullable Output<String> scriptExecutionName;

    public Output<String> scriptExecutionName() {
        return this.scriptExecutionName == null ? Codegen.empty() : this.scriptExecutionName;
    }

    /**
     * Time limit for execution
     * 
     */
    @Import(name="timeout", required=true)
      private final Output<String> timeout;

    public Output<String> timeout() {
        return this.timeout;
    }

    public ScriptExecutionArgs(
        @Nullable Output<String> failureReason,
        @Nullable Output<List<Object>> hiddenParameters,
        @Nullable Output<Map<String,Object>> namedOutputs,
        @Nullable Output<List<String>> output,
        @Nullable Output<List<Object>> parameters,
        Output<String> privateCloudName,
        Output<String> resourceGroupName,
        @Nullable Output<String> retention,
        @Nullable Output<String> scriptCmdletId,
        @Nullable Output<String> scriptExecutionName,
        Output<String> timeout) {
        this.failureReason = failureReason;
        this.hiddenParameters = hiddenParameters;
        this.namedOutputs = namedOutputs;
        this.output = output;
        this.parameters = parameters;
        this.privateCloudName = Objects.requireNonNull(privateCloudName, "expected parameter 'privateCloudName' to be non-null");
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.retention = retention;
        this.scriptCmdletId = scriptCmdletId;
        this.scriptExecutionName = scriptExecutionName;
        this.timeout = Objects.requireNonNull(timeout, "expected parameter 'timeout' to be non-null");
    }

    private ScriptExecutionArgs() {
        this.failureReason = Codegen.empty();
        this.hiddenParameters = Codegen.empty();
        this.namedOutputs = Codegen.empty();
        this.output = Codegen.empty();
        this.parameters = Codegen.empty();
        this.privateCloudName = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.retention = Codegen.empty();
        this.scriptCmdletId = Codegen.empty();
        this.scriptExecutionName = Codegen.empty();
        this.timeout = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ScriptExecutionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> failureReason;
        private @Nullable Output<List<Object>> hiddenParameters;
        private @Nullable Output<Map<String,Object>> namedOutputs;
        private @Nullable Output<List<String>> output;
        private @Nullable Output<List<Object>> parameters;
        private Output<String> privateCloudName;
        private Output<String> resourceGroupName;
        private @Nullable Output<String> retention;
        private @Nullable Output<String> scriptCmdletId;
        private @Nullable Output<String> scriptExecutionName;
        private Output<String> timeout;

        public Builder() {
    	      // Empty
        }

        public Builder(ScriptExecutionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.failureReason = defaults.failureReason;
    	      this.hiddenParameters = defaults.hiddenParameters;
    	      this.namedOutputs = defaults.namedOutputs;
    	      this.output = defaults.output;
    	      this.parameters = defaults.parameters;
    	      this.privateCloudName = defaults.privateCloudName;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.retention = defaults.retention;
    	      this.scriptCmdletId = defaults.scriptCmdletId;
    	      this.scriptExecutionName = defaults.scriptExecutionName;
    	      this.timeout = defaults.timeout;
        }

        public Builder failureReason(@Nullable Output<String> failureReason) {
            this.failureReason = failureReason;
            return this;
        }
        public Builder failureReason(@Nullable String failureReason) {
            this.failureReason = Codegen.ofNullable(failureReason);
            return this;
        }
        public Builder hiddenParameters(@Nullable Output<List<Object>> hiddenParameters) {
            this.hiddenParameters = hiddenParameters;
            return this;
        }
        public Builder hiddenParameters(@Nullable List<Object> hiddenParameters) {
            this.hiddenParameters = Codegen.ofNullable(hiddenParameters);
            return this;
        }
        public Builder hiddenParameters(Object... hiddenParameters) {
            return hiddenParameters(List.of(hiddenParameters));
        }
        public Builder namedOutputs(@Nullable Output<Map<String,Object>> namedOutputs) {
            this.namedOutputs = namedOutputs;
            return this;
        }
        public Builder namedOutputs(@Nullable Map<String,Object> namedOutputs) {
            this.namedOutputs = Codegen.ofNullable(namedOutputs);
            return this;
        }
        public Builder output(@Nullable Output<List<String>> output) {
            this.output = output;
            return this;
        }
        public Builder output(@Nullable List<String> output) {
            this.output = Codegen.ofNullable(output);
            return this;
        }
        public Builder output(String... output) {
            return output(List.of(output));
        }
        public Builder parameters(@Nullable Output<List<Object>> parameters) {
            this.parameters = parameters;
            return this;
        }
        public Builder parameters(@Nullable List<Object> parameters) {
            this.parameters = Codegen.ofNullable(parameters);
            return this;
        }
        public Builder parameters(Object... parameters) {
            return parameters(List.of(parameters));
        }
        public Builder privateCloudName(Output<String> privateCloudName) {
            this.privateCloudName = Objects.requireNonNull(privateCloudName);
            return this;
        }
        public Builder privateCloudName(String privateCloudName) {
            this.privateCloudName = Output.of(Objects.requireNonNull(privateCloudName));
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder retention(@Nullable Output<String> retention) {
            this.retention = retention;
            return this;
        }
        public Builder retention(@Nullable String retention) {
            this.retention = Codegen.ofNullable(retention);
            return this;
        }
        public Builder scriptCmdletId(@Nullable Output<String> scriptCmdletId) {
            this.scriptCmdletId = scriptCmdletId;
            return this;
        }
        public Builder scriptCmdletId(@Nullable String scriptCmdletId) {
            this.scriptCmdletId = Codegen.ofNullable(scriptCmdletId);
            return this;
        }
        public Builder scriptExecutionName(@Nullable Output<String> scriptExecutionName) {
            this.scriptExecutionName = scriptExecutionName;
            return this;
        }
        public Builder scriptExecutionName(@Nullable String scriptExecutionName) {
            this.scriptExecutionName = Codegen.ofNullable(scriptExecutionName);
            return this;
        }
        public Builder timeout(Output<String> timeout) {
            this.timeout = Objects.requireNonNull(timeout);
            return this;
        }
        public Builder timeout(String timeout) {
            this.timeout = Output.of(Objects.requireNonNull(timeout));
            return this;
        }        public ScriptExecutionArgs build() {
            return new ScriptExecutionArgs(failureReason, hiddenParameters, namedOutputs, output, parameters, privateCloudName, resourceGroupName, retention, scriptCmdletId, scriptExecutionName, timeout);
        }
    }
}
