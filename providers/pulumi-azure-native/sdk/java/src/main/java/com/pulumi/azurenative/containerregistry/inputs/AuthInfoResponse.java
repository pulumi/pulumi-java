// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.containerregistry.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The authorization properties for accessing the source code repository.
 * 
 */
public final class AuthInfoResponse extends com.pulumi.resources.InvokeArgs {

    public static final AuthInfoResponse Empty = new AuthInfoResponse();

    /**
     * Time in seconds that the token remains valid
     * 
     */
    @Import(name="expiresIn")
    private @Nullable Integer expiresIn;

    public Optional<Integer> expiresIn() {
        return Optional.ofNullable(this.expiresIn);
    }

    /**
     * The refresh token used to refresh the access token.
     * 
     */
    @Import(name="refreshToken")
    private @Nullable String refreshToken;

    public Optional<String> refreshToken() {
        return Optional.ofNullable(this.refreshToken);
    }

    /**
     * The scope of the access token.
     * 
     */
    @Import(name="scope")
    private @Nullable String scope;

    public Optional<String> scope() {
        return Optional.ofNullable(this.scope);
    }

    /**
     * The access token used to access the source control provider.
     * 
     */
    @Import(name="token", required=true)
    private String token;

    public String token() {
        return this.token;
    }

    /**
     * The type of Auth token.
     * 
     */
    @Import(name="tokenType", required=true)
    private String tokenType;

    public String tokenType() {
        return this.tokenType;
    }

    private AuthInfoResponse() {}

    private AuthInfoResponse(AuthInfoResponse $) {
        this.expiresIn = $.expiresIn;
        this.refreshToken = $.refreshToken;
        this.scope = $.scope;
        this.token = $.token;
        this.tokenType = $.tokenType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AuthInfoResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AuthInfoResponse $;

        public Builder() {
            $ = new AuthInfoResponse();
        }

        public Builder(AuthInfoResponse defaults) {
            $ = new AuthInfoResponse(Objects.requireNonNull(defaults));
        }

        public Builder expiresIn(@Nullable Integer expiresIn) {
            $.expiresIn = expiresIn;
            return this;
        }

        public Builder refreshToken(@Nullable String refreshToken) {
            $.refreshToken = refreshToken;
            return this;
        }

        public Builder scope(@Nullable String scope) {
            $.scope = scope;
            return this;
        }

        public Builder token(String token) {
            $.token = token;
            return this;
        }

        public Builder tokenType(String tokenType) {
            $.tokenType = tokenType;
            return this;
        }

        public AuthInfoResponse build() {
            $.token = Objects.requireNonNull($.token, "expected parameter 'token' to be non-null");
            $.tokenType = Objects.requireNonNull($.tokenType, "expected parameter 'tokenType' to be non-null");
            return $;
        }
    }

}
