// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.batch.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CIFSMountConfigurationResponse extends com.pulumi.resources.InvokeArgs {

    public static final CIFSMountConfigurationResponse Empty = new CIFSMountConfigurationResponse();

    /**
     * These are &#39;net use&#39; options in Windows and &#39;mount&#39; options in Linux.
     * 
     */
    @Import(name="mountOptions")
    private @Nullable String mountOptions;

    /**
     * @return These are &#39;net use&#39; options in Windows and &#39;mount&#39; options in Linux.
     * 
     */
    public Optional<String> mountOptions() {
        return Optional.ofNullable(this.mountOptions);
    }

    @Import(name="password", required=true)
    private String password;

    public String password() {
        return this.password;
    }

    /**
     * All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
     * 
     */
    @Import(name="relativeMountPath", required=true)
    private String relativeMountPath;

    /**
     * @return All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
     * 
     */
    public String relativeMountPath() {
        return this.relativeMountPath;
    }

    @Import(name="source", required=true)
    private String source;

    public String source() {
        return this.source;
    }

    @Import(name="username", required=true)
    private String username;

    public String username() {
        return this.username;
    }

    private CIFSMountConfigurationResponse() {}

    private CIFSMountConfigurationResponse(CIFSMountConfigurationResponse $) {
        this.mountOptions = $.mountOptions;
        this.password = $.password;
        this.relativeMountPath = $.relativeMountPath;
        this.source = $.source;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CIFSMountConfigurationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CIFSMountConfigurationResponse $;

        public Builder() {
            $ = new CIFSMountConfigurationResponse();
        }

        public Builder(CIFSMountConfigurationResponse defaults) {
            $ = new CIFSMountConfigurationResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param mountOptions These are &#39;net use&#39; options in Windows and &#39;mount&#39; options in Linux.
         * 
         * @return builder
         * 
         */
        public Builder mountOptions(@Nullable String mountOptions) {
            $.mountOptions = mountOptions;
            return this;
        }

        public Builder password(String password) {
            $.password = password;
            return this;
        }

        /**
         * @param relativeMountPath All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
         * 
         * @return builder
         * 
         */
        public Builder relativeMountPath(String relativeMountPath) {
            $.relativeMountPath = relativeMountPath;
            return this;
        }

        public Builder source(String source) {
            $.source = source;
            return this;
        }

        public Builder username(String username) {
            $.username = username;
            return this;
        }

        public CIFSMountConfigurationResponse build() {
            $.password = Objects.requireNonNull($.password, "expected parameter 'password' to be non-null");
            $.relativeMountPath = Objects.requireNonNull($.relativeMountPath, "expected parameter 'relativeMountPath' to be non-null");
            $.source = Objects.requireNonNull($.source, "expected parameter 'source' to be non-null");
            $.username = Objects.requireNonNull($.username, "expected parameter 'username' to be non-null");
            return $;
        }
    }

}
