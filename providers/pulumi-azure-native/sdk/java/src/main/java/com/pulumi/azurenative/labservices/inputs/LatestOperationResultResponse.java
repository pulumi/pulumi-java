// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.labservices.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * Details of the status of an operation.
 * 
 */
public final class LatestOperationResultResponse extends com.pulumi.resources.InvokeArgs {

    public static final LatestOperationResultResponse Empty = new LatestOperationResultResponse();

    /**
     * Error code on failure.
     * 
     */
    @Import(name="errorCode", required=true)
    private String errorCode;

    /**
     * @return Error code on failure.
     * 
     */
    public String errorCode() {
        return this.errorCode;
    }

    /**
     * The error message.
     * 
     */
    @Import(name="errorMessage", required=true)
    private String errorMessage;

    /**
     * @return The error message.
     * 
     */
    public String errorMessage() {
        return this.errorMessage;
    }

    /**
     * The HttpMethod - PUT/POST/DELETE for the operation.
     * 
     */
    @Import(name="httpMethod", required=true)
    private String httpMethod;

    /**
     * @return The HttpMethod - PUT/POST/DELETE for the operation.
     * 
     */
    public String httpMethod() {
        return this.httpMethod;
    }

    /**
     * The URL to use to check long-running operation status
     * 
     */
    @Import(name="operationUrl", required=true)
    private String operationUrl;

    /**
     * @return The URL to use to check long-running operation status
     * 
     */
    public String operationUrl() {
        return this.operationUrl;
    }

    /**
     * Request URI of the operation.
     * 
     */
    @Import(name="requestUri", required=true)
    private String requestUri;

    /**
     * @return Request URI of the operation.
     * 
     */
    public String requestUri() {
        return this.requestUri;
    }

    /**
     * The current status of the operation.
     * 
     */
    @Import(name="status", required=true)
    private String status;

    /**
     * @return The current status of the operation.
     * 
     */
    public String status() {
        return this.status;
    }

    private LatestOperationResultResponse() {}

    private LatestOperationResultResponse(LatestOperationResultResponse $) {
        this.errorCode = $.errorCode;
        this.errorMessage = $.errorMessage;
        this.httpMethod = $.httpMethod;
        this.operationUrl = $.operationUrl;
        this.requestUri = $.requestUri;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LatestOperationResultResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LatestOperationResultResponse $;

        public Builder() {
            $ = new LatestOperationResultResponse();
        }

        public Builder(LatestOperationResultResponse defaults) {
            $ = new LatestOperationResultResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param errorCode Error code on failure.
         * 
         * @return builder
         * 
         */
        public Builder errorCode(String errorCode) {
            $.errorCode = errorCode;
            return this;
        }

        /**
         * @param errorMessage The error message.
         * 
         * @return builder
         * 
         */
        public Builder errorMessage(String errorMessage) {
            $.errorMessage = errorMessage;
            return this;
        }

        /**
         * @param httpMethod The HttpMethod - PUT/POST/DELETE for the operation.
         * 
         * @return builder
         * 
         */
        public Builder httpMethod(String httpMethod) {
            $.httpMethod = httpMethod;
            return this;
        }

        /**
         * @param operationUrl The URL to use to check long-running operation status
         * 
         * @return builder
         * 
         */
        public Builder operationUrl(String operationUrl) {
            $.operationUrl = operationUrl;
            return this;
        }

        /**
         * @param requestUri Request URI of the operation.
         * 
         * @return builder
         * 
         */
        public Builder requestUri(String requestUri) {
            $.requestUri = requestUri;
            return this;
        }

        /**
         * @param status The current status of the operation.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            $.status = status;
            return this;
        }

        public LatestOperationResultResponse build() {
            $.errorCode = Objects.requireNonNull($.errorCode, "expected parameter 'errorCode' to be non-null");
            $.errorMessage = Objects.requireNonNull($.errorMessage, "expected parameter 'errorMessage' to be non-null");
            $.httpMethod = Objects.requireNonNull($.httpMethod, "expected parameter 'httpMethod' to be non-null");
            $.operationUrl = Objects.requireNonNull($.operationUrl, "expected parameter 'operationUrl' to be non-null");
            $.requestUri = Objects.requireNonNull($.requestUri, "expected parameter 'requestUri' to be non-null");
            $.status = Objects.requireNonNull($.status, "expected parameter 'status' to be non-null");
            return $;
        }
    }

}
