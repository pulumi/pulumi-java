// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.customerinsights;

import com.pulumi.azurenative.customerinsights.enums.CardinalityTypes;
import com.pulumi.azurenative.customerinsights.inputs.PropertyDefinitionArgs;
import com.pulumi.azurenative.customerinsights.inputs.RelationshipTypeMappingArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RelationshipArgs extends com.pulumi.resources.ResourceArgs {

    public static final RelationshipArgs Empty = new RelationshipArgs();

    /**
     * The Relationship Cardinality.
     * 
     */
    @Import(name="cardinality")
    private @Nullable Output<CardinalityTypes> cardinality;

    public Optional<Output<CardinalityTypes>> cardinality() {
        return Optional.ofNullable(this.cardinality);
    }

    /**
     * Localized descriptions for the Relationship.
     * 
     */
    @Import(name="description")
    private @Nullable Output<Map<String,String>> description;

    public Optional<Output<Map<String,String>>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Localized display name for the Relationship.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<Map<String,String>> displayName;

    public Optional<Output<Map<String,String>>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * The expiry date time in UTC.
     * 
     */
    @Import(name="expiryDateTimeUtc")
    private @Nullable Output<String> expiryDateTimeUtc;

    public Optional<Output<String>> expiryDateTimeUtc() {
        return Optional.ofNullable(this.expiryDateTimeUtc);
    }

    /**
     * The properties of the Relationship.
     * 
     */
    @Import(name="fields")
    private @Nullable Output<List<PropertyDefinitionArgs>> fields;

    public Optional<Output<List<PropertyDefinitionArgs>>> fields() {
        return Optional.ofNullable(this.fields);
    }

    /**
     * The name of the hub.
     * 
     */
    @Import(name="hubName", required=true)
    private Output<String> hubName;

    public Output<String> hubName() {
        return this.hubName;
    }

    /**
     * Optional property to be used to map fields in profile to their strong ids in related profile.
     * 
     */
    @Import(name="lookupMappings")
    private @Nullable Output<List<RelationshipTypeMappingArgs>> lookupMappings;

    public Optional<Output<List<RelationshipTypeMappingArgs>>> lookupMappings() {
        return Optional.ofNullable(this.lookupMappings);
    }

    /**
     * Profile type.
     * 
     */
    @Import(name="profileType", required=true)
    private Output<String> profileType;

    public Output<String> profileType() {
        return this.profileType;
    }

    /**
     * Related profile being referenced.
     * 
     */
    @Import(name="relatedProfileType", required=true)
    private Output<String> relatedProfileType;

    public Output<String> relatedProfileType() {
        return this.relatedProfileType;
    }

    /**
     * The name of the Relationship.
     * 
     */
    @Import(name="relationshipName")
    private @Nullable Output<String> relationshipName;

    public Optional<Output<String>> relationshipName() {
        return Optional.ofNullable(this.relationshipName);
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    private RelationshipArgs() {}

    private RelationshipArgs(RelationshipArgs $) {
        this.cardinality = $.cardinality;
        this.description = $.description;
        this.displayName = $.displayName;
        this.expiryDateTimeUtc = $.expiryDateTimeUtc;
        this.fields = $.fields;
        this.hubName = $.hubName;
        this.lookupMappings = $.lookupMappings;
        this.profileType = $.profileType;
        this.relatedProfileType = $.relatedProfileType;
        this.relationshipName = $.relationshipName;
        this.resourceGroupName = $.resourceGroupName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RelationshipArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RelationshipArgs $;

        public Builder() {
            $ = new RelationshipArgs();
        }

        public Builder(RelationshipArgs defaults) {
            $ = new RelationshipArgs(Objects.requireNonNull(defaults));
        }

        public Builder cardinality(@Nullable Output<CardinalityTypes> cardinality) {
            $.cardinality = cardinality;
            return this;
        }

        public Builder cardinality(CardinalityTypes cardinality) {
            return cardinality(Output.of(cardinality));
        }

        public Builder description(@Nullable Output<Map<String,String>> description) {
            $.description = description;
            return this;
        }

        public Builder description(Map<String,String> description) {
            return description(Output.of(description));
        }

        public Builder displayName(@Nullable Output<Map<String,String>> displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder displayName(Map<String,String> displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder expiryDateTimeUtc(@Nullable Output<String> expiryDateTimeUtc) {
            $.expiryDateTimeUtc = expiryDateTimeUtc;
            return this;
        }

        public Builder expiryDateTimeUtc(String expiryDateTimeUtc) {
            return expiryDateTimeUtc(Output.of(expiryDateTimeUtc));
        }

        public Builder fields(@Nullable Output<List<PropertyDefinitionArgs>> fields) {
            $.fields = fields;
            return this;
        }

        public Builder fields(List<PropertyDefinitionArgs> fields) {
            return fields(Output.of(fields));
        }

        public Builder fields(PropertyDefinitionArgs... fields) {
            return fields(List.of(fields));
        }

        public Builder hubName(Output<String> hubName) {
            $.hubName = hubName;
            return this;
        }

        public Builder hubName(String hubName) {
            return hubName(Output.of(hubName));
        }

        public Builder lookupMappings(@Nullable Output<List<RelationshipTypeMappingArgs>> lookupMappings) {
            $.lookupMappings = lookupMappings;
            return this;
        }

        public Builder lookupMappings(List<RelationshipTypeMappingArgs> lookupMappings) {
            return lookupMappings(Output.of(lookupMappings));
        }

        public Builder lookupMappings(RelationshipTypeMappingArgs... lookupMappings) {
            return lookupMappings(List.of(lookupMappings));
        }

        public Builder profileType(Output<String> profileType) {
            $.profileType = profileType;
            return this;
        }

        public Builder profileType(String profileType) {
            return profileType(Output.of(profileType));
        }

        public Builder relatedProfileType(Output<String> relatedProfileType) {
            $.relatedProfileType = relatedProfileType;
            return this;
        }

        public Builder relatedProfileType(String relatedProfileType) {
            return relatedProfileType(Output.of(relatedProfileType));
        }

        public Builder relationshipName(@Nullable Output<String> relationshipName) {
            $.relationshipName = relationshipName;
            return this;
        }

        public Builder relationshipName(String relationshipName) {
            return relationshipName(Output.of(relationshipName));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public RelationshipArgs build() {
            $.hubName = Objects.requireNonNull($.hubName, "expected parameter 'hubName' to be non-null");
            $.profileType = Objects.requireNonNull($.profileType, "expected parameter 'profileType' to be non-null");
            $.relatedProfileType = Objects.requireNonNull($.relatedProfileType, "expected parameter 'relatedProfileType' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
