// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.certificateregistration;

import com.pulumi.azurenative.certificateregistration.enums.CertificateProductType;
import com.pulumi.azurenative.certificateregistration.inputs.AppServiceCertificateArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AppServiceCertificateOrderArgs extends com.pulumi.resources.ResourceArgs {

    public static final AppServiceCertificateOrderArgs Empty = new AppServiceCertificateOrderArgs();

    /**
     * &lt;code&gt;true&lt;/code&gt; if the certificate should be automatically renewed when it expires; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    @Import(name="autoRenew")
    private @Nullable Output<Boolean> autoRenew;

    public Optional<Output<Boolean>> autoRenew() {
        return Optional.ofNullable(this.autoRenew);
    }

    /**
     * Name of the certificate order.
     * 
     */
    @Import(name="certificateOrderName")
    private @Nullable Output<String> certificateOrderName;

    public Optional<Output<String>> certificateOrderName() {
        return Optional.ofNullable(this.certificateOrderName);
    }

    /**
     * State of the Key Vault secret.
     * 
     */
    @Import(name="certificates")
    private @Nullable Output<Map<String,AppServiceCertificateArgs>> certificates;

    public Optional<Output<Map<String,AppServiceCertificateArgs>>> certificates() {
        return Optional.ofNullable(this.certificates);
    }

    /**
     * Last CSR that was created for this order.
     * 
     */
    @Import(name="csr")
    private @Nullable Output<String> csr;

    public Optional<Output<String>> csr() {
        return Optional.ofNullable(this.csr);
    }

    /**
     * Certificate distinguished name.
     * 
     */
    @Import(name="distinguishedName")
    private @Nullable Output<String> distinguishedName;

    public Optional<Output<String>> distinguishedName() {
        return Optional.ofNullable(this.distinguishedName);
    }

    /**
     * Certificate key size.
     * 
     */
    @Import(name="keySize")
    private @Nullable Output<Integer> keySize;

    public Optional<Output<Integer>> keySize() {
        return Optional.ofNullable(this.keySize);
    }

    /**
     * Kind of resource.
     * 
     */
    @Import(name="kind")
    private @Nullable Output<String> kind;

    public Optional<Output<String>> kind() {
        return Optional.ofNullable(this.kind);
    }

    /**
     * Resource Location.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Certificate product type.
     * 
     */
    @Import(name="productType", required=true)
    private Output<CertificateProductType> productType;

    public Output<CertificateProductType> productType() {
        return this.productType;
    }

    /**
     * Name of the resource group to which the resource belongs.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Duration in years (must be between 1 and 3).
     * 
     */
    @Import(name="validityInYears")
    private @Nullable Output<Integer> validityInYears;

    public Optional<Output<Integer>> validityInYears() {
        return Optional.ofNullable(this.validityInYears);
    }

    private AppServiceCertificateOrderArgs() {}

    private AppServiceCertificateOrderArgs(AppServiceCertificateOrderArgs $) {
        this.autoRenew = $.autoRenew;
        this.certificateOrderName = $.certificateOrderName;
        this.certificates = $.certificates;
        this.csr = $.csr;
        this.distinguishedName = $.distinguishedName;
        this.keySize = $.keySize;
        this.kind = $.kind;
        this.location = $.location;
        this.productType = $.productType;
        this.resourceGroupName = $.resourceGroupName;
        this.tags = $.tags;
        this.validityInYears = $.validityInYears;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AppServiceCertificateOrderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AppServiceCertificateOrderArgs $;

        public Builder() {
            $ = new AppServiceCertificateOrderArgs();
        }

        public Builder(AppServiceCertificateOrderArgs defaults) {
            $ = new AppServiceCertificateOrderArgs(Objects.requireNonNull(defaults));
        }

        public Builder autoRenew(@Nullable Output<Boolean> autoRenew) {
            $.autoRenew = autoRenew;
            return this;
        }

        public Builder autoRenew(Boolean autoRenew) {
            return autoRenew(Output.of(autoRenew));
        }

        public Builder certificateOrderName(@Nullable Output<String> certificateOrderName) {
            $.certificateOrderName = certificateOrderName;
            return this;
        }

        public Builder certificateOrderName(String certificateOrderName) {
            return certificateOrderName(Output.of(certificateOrderName));
        }

        public Builder certificates(@Nullable Output<Map<String,AppServiceCertificateArgs>> certificates) {
            $.certificates = certificates;
            return this;
        }

        public Builder certificates(Map<String,AppServiceCertificateArgs> certificates) {
            return certificates(Output.of(certificates));
        }

        public Builder csr(@Nullable Output<String> csr) {
            $.csr = csr;
            return this;
        }

        public Builder csr(String csr) {
            return csr(Output.of(csr));
        }

        public Builder distinguishedName(@Nullable Output<String> distinguishedName) {
            $.distinguishedName = distinguishedName;
            return this;
        }

        public Builder distinguishedName(String distinguishedName) {
            return distinguishedName(Output.of(distinguishedName));
        }

        public Builder keySize(@Nullable Output<Integer> keySize) {
            $.keySize = keySize;
            return this;
        }

        public Builder keySize(Integer keySize) {
            return keySize(Output.of(keySize));
        }

        public Builder kind(@Nullable Output<String> kind) {
            $.kind = kind;
            return this;
        }

        public Builder kind(String kind) {
            return kind(Output.of(kind));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder productType(Output<CertificateProductType> productType) {
            $.productType = productType;
            return this;
        }

        public Builder productType(CertificateProductType productType) {
            return productType(Output.of(productType));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder validityInYears(@Nullable Output<Integer> validityInYears) {
            $.validityInYears = validityInYears;
            return this;
        }

        public Builder validityInYears(Integer validityInYears) {
            return validityInYears(Output.of(validityInYears));
        }

        public AppServiceCertificateOrderArgs build() {
            $.autoRenew = Codegen.booleanProp("autoRenew").output().arg($.autoRenew).def(true).getNullable();
            $.keySize = Codegen.integerProp("keySize").output().arg($.keySize).def(2048).getNullable();
            $.productType = Objects.requireNonNull($.productType, "expected parameter 'productType' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.validityInYears = Codegen.integerProp("validityInYears").output().arg($.validityInYears).def(1).getNullable();
            return $;
        }
    }

}
