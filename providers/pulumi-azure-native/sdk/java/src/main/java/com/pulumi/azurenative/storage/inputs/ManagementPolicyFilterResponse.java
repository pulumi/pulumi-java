// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.storage.inputs;

import com.pulumi.azurenative.storage.inputs.TagFilterResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Filters limit rule actions to a subset of blobs within the storage account. If multiple filters are defined, a logical AND is performed on all filters.
 * 
 */
public final class ManagementPolicyFilterResponse extends com.pulumi.resources.InvokeArgs {

    public static final ManagementPolicyFilterResponse Empty = new ManagementPolicyFilterResponse();

    /**
     * An array of blob index tag based filters, there can be at most 10 tag filters
     * 
     */
    @Import(name="blobIndexMatch")
      private final @Nullable List<TagFilterResponse> blobIndexMatch;

    public List<TagFilterResponse> blobIndexMatch() {
        return this.blobIndexMatch == null ? List.of() : this.blobIndexMatch;
    }

    /**
     * An array of predefined enum values. Currently blockBlob supports all tiering and delete actions. Only delete actions are supported for appendBlob.
     * 
     */
    @Import(name="blobTypes", required=true)
      private final List<String> blobTypes;

    public List<String> blobTypes() {
        return this.blobTypes;
    }

    /**
     * An array of strings for prefixes to be match.
     * 
     */
    @Import(name="prefixMatch")
      private final @Nullable List<String> prefixMatch;

    public List<String> prefixMatch() {
        return this.prefixMatch == null ? List.of() : this.prefixMatch;
    }

    public ManagementPolicyFilterResponse(
        @Nullable List<TagFilterResponse> blobIndexMatch,
        List<String> blobTypes,
        @Nullable List<String> prefixMatch) {
        this.blobIndexMatch = blobIndexMatch;
        this.blobTypes = Objects.requireNonNull(blobTypes, "expected parameter 'blobTypes' to be non-null");
        this.prefixMatch = prefixMatch;
    }

    private ManagementPolicyFilterResponse() {
        this.blobIndexMatch = List.of();
        this.blobTypes = List.of();
        this.prefixMatch = List.of();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ManagementPolicyFilterResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<TagFilterResponse> blobIndexMatch;
        private List<String> blobTypes;
        private @Nullable List<String> prefixMatch;

        public Builder() {
    	      // Empty
        }

        public Builder(ManagementPolicyFilterResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.blobIndexMatch = defaults.blobIndexMatch;
    	      this.blobTypes = defaults.blobTypes;
    	      this.prefixMatch = defaults.prefixMatch;
        }

        public Builder blobIndexMatch(@Nullable List<TagFilterResponse> blobIndexMatch) {
            this.blobIndexMatch = blobIndexMatch;
            return this;
        }
        public Builder blobIndexMatch(TagFilterResponse... blobIndexMatch) {
            return blobIndexMatch(List.of(blobIndexMatch));
        }
        public Builder blobTypes(List<String> blobTypes) {
            this.blobTypes = Objects.requireNonNull(blobTypes);
            return this;
        }
        public Builder blobTypes(String... blobTypes) {
            return blobTypes(List.of(blobTypes));
        }
        public Builder prefixMatch(@Nullable List<String> prefixMatch) {
            this.prefixMatch = prefixMatch;
            return this;
        }
        public Builder prefixMatch(String... prefixMatch) {
            return prefixMatch(List.of(prefixMatch));
        }        public ManagementPolicyFilterResponse build() {
            return new ManagementPolicyFilterResponse(blobIndexMatch, blobTypes, prefixMatch);
        }
    }
}
