// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.azurearcdata.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ActiveDirectoryConnectorDNSDetailsResponse {
    /**
     * @return DNS domain name for which DNS lookups should be forwarded to the Active Directory DNS servers.
     * 
     */
    private final @Nullable String domainName;
    /**
     * @return List of Active Directory DNS server IP addresses.
     * 
     */
    private final List<String> nameserverIPAddresses;
    /**
     * @return Flag indicating whether to prefer Kubernetes DNS server response over AD DNS server response for IP address lookups.
     * 
     */
    private final @Nullable Boolean preferK8sDnsForPtrLookups;
    /**
     * @return Replica count for DNS proxy service. Default value is 1.
     * 
     */
    private final @Nullable Double replicas;

    @CustomType.Constructor
    private ActiveDirectoryConnectorDNSDetailsResponse(
        @CustomType.Parameter("domainName") @Nullable String domainName,
        @CustomType.Parameter("nameserverIPAddresses") List<String> nameserverIPAddresses,
        @CustomType.Parameter("preferK8sDnsForPtrLookups") @Nullable Boolean preferK8sDnsForPtrLookups,
        @CustomType.Parameter("replicas") @Nullable Double replicas) {
        this.domainName = domainName;
        this.nameserverIPAddresses = nameserverIPAddresses;
        this.preferK8sDnsForPtrLookups = preferK8sDnsForPtrLookups;
        this.replicas = replicas;
    }

    /**
     * @return DNS domain name for which DNS lookups should be forwarded to the Active Directory DNS servers.
     * 
     */
    public Optional<String> domainName() {
        return Optional.ofNullable(this.domainName);
    }
    /**
     * @return List of Active Directory DNS server IP addresses.
     * 
     */
    public List<String> nameserverIPAddresses() {
        return this.nameserverIPAddresses;
    }
    /**
     * @return Flag indicating whether to prefer Kubernetes DNS server response over AD DNS server response for IP address lookups.
     * 
     */
    public Optional<Boolean> preferK8sDnsForPtrLookups() {
        return Optional.ofNullable(this.preferK8sDnsForPtrLookups);
    }
    /**
     * @return Replica count for DNS proxy service. Default value is 1.
     * 
     */
    public Optional<Double> replicas() {
        return Optional.ofNullable(this.replicas);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ActiveDirectoryConnectorDNSDetailsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String domainName;
        private List<String> nameserverIPAddresses;
        private @Nullable Boolean preferK8sDnsForPtrLookups;
        private @Nullable Double replicas;

        public Builder() {
    	      // Empty
        }

        public Builder(ActiveDirectoryConnectorDNSDetailsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.domainName = defaults.domainName;
    	      this.nameserverIPAddresses = defaults.nameserverIPAddresses;
    	      this.preferK8sDnsForPtrLookups = defaults.preferK8sDnsForPtrLookups;
    	      this.replicas = defaults.replicas;
        }

        public Builder domainName(@Nullable String domainName) {
            this.domainName = domainName;
            return this;
        }
        public Builder nameserverIPAddresses(List<String> nameserverIPAddresses) {
            this.nameserverIPAddresses = Objects.requireNonNull(nameserverIPAddresses);
            return this;
        }
        public Builder nameserverIPAddresses(String... nameserverIPAddresses) {
            return nameserverIPAddresses(List.of(nameserverIPAddresses));
        }
        public Builder preferK8sDnsForPtrLookups(@Nullable Boolean preferK8sDnsForPtrLookups) {
            this.preferK8sDnsForPtrLookups = preferK8sDnsForPtrLookups;
            return this;
        }
        public Builder replicas(@Nullable Double replicas) {
            this.replicas = replicas;
            return this;
        }        public ActiveDirectoryConnectorDNSDetailsResponse build() {
            return new ActiveDirectoryConnectorDNSDetailsResponse(domainName, nameserverIPAddresses, preferK8sDnsForPtrLookups, replicas);
        }
    }
}
