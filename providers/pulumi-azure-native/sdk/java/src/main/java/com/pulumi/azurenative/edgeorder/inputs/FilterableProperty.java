// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.edgeorder.inputs;

import com.pulumi.azurenative.edgeorder.enums.SupportedFilterTypes;
import com.pulumi.core.Either;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Different types of filters supported and its values.
 * 
 */
public final class FilterableProperty extends com.pulumi.resources.InvokeArgs {

    public static final FilterableProperty Empty = new FilterableProperty();

    /**
     * Values to be filtered.
     * 
     */
    @Import(name="supportedValues", required=true)
    private List<String> supportedValues;

    /**
     * @return Values to be filtered.
     * 
     */
    public List<String> supportedValues() {
        return this.supportedValues;
    }

    /**
     * Type of product filter.
     * 
     */
    @Import(name="type", required=true)
    private Either<String,SupportedFilterTypes> type;

    /**
     * @return Type of product filter.
     * 
     */
    public Either<String,SupportedFilterTypes> type() {
        return this.type;
    }

    private FilterableProperty() {}

    private FilterableProperty(FilterableProperty $) {
        this.supportedValues = $.supportedValues;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FilterableProperty defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FilterableProperty $;

        public Builder() {
            $ = new FilterableProperty();
        }

        public Builder(FilterableProperty defaults) {
            $ = new FilterableProperty(Objects.requireNonNull(defaults));
        }

        /**
         * @param supportedValues Values to be filtered.
         * 
         * @return builder
         * 
         */
        public Builder supportedValues(List<String> supportedValues) {
            $.supportedValues = supportedValues;
            return this;
        }

        /**
         * @param supportedValues Values to be filtered.
         * 
         * @return builder
         * 
         */
        public Builder supportedValues(String... supportedValues) {
            return supportedValues(List.of(supportedValues));
        }

        /**
         * @param type Type of product filter.
         * 
         * @return builder
         * 
         */
        public Builder type(Either<String,SupportedFilterTypes> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of product filter.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Either.ofLeft(type));
        }

        /**
         * @param type Type of product filter.
         * 
         * @return builder
         * 
         */
        public Builder type(SupportedFilterTypes type) {
            return type(Either.ofRight(type));
        }

        public FilterableProperty build() {
            $.supportedValues = Objects.requireNonNull($.supportedValues, "expected parameter 'supportedValues' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
