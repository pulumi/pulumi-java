// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.machinelearningservices.inputs;

import com.pulumi.azurenative.machinelearningservices.inputs.RouteArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InferenceContainerPropertiesArgs extends com.pulumi.resources.ResourceArgs {

    public static final InferenceContainerPropertiesArgs Empty = new InferenceContainerPropertiesArgs();

    /**
     * The route to check the liveness of the inference server container.
     * 
     */
    @Import(name="livenessRoute")
    private @Nullable Output<RouteArgs> livenessRoute;

    /**
     * @return The route to check the liveness of the inference server container.
     * 
     */
    public Optional<Output<RouteArgs>> livenessRoute() {
        return Optional.ofNullable(this.livenessRoute);
    }

    /**
     * The route to check the readiness of the inference server container.
     * 
     */
    @Import(name="readinessRoute")
    private @Nullable Output<RouteArgs> readinessRoute;

    /**
     * @return The route to check the readiness of the inference server container.
     * 
     */
    public Optional<Output<RouteArgs>> readinessRoute() {
        return Optional.ofNullable(this.readinessRoute);
    }

    /**
     * The port to send the scoring requests to, within the inference server container.
     * 
     */
    @Import(name="scoringRoute")
    private @Nullable Output<RouteArgs> scoringRoute;

    /**
     * @return The port to send the scoring requests to, within the inference server container.
     * 
     */
    public Optional<Output<RouteArgs>> scoringRoute() {
        return Optional.ofNullable(this.scoringRoute);
    }

    private InferenceContainerPropertiesArgs() {}

    private InferenceContainerPropertiesArgs(InferenceContainerPropertiesArgs $) {
        this.livenessRoute = $.livenessRoute;
        this.readinessRoute = $.readinessRoute;
        this.scoringRoute = $.scoringRoute;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InferenceContainerPropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InferenceContainerPropertiesArgs $;

        public Builder() {
            $ = new InferenceContainerPropertiesArgs();
        }

        public Builder(InferenceContainerPropertiesArgs defaults) {
            $ = new InferenceContainerPropertiesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param livenessRoute The route to check the liveness of the inference server container.
         * 
         * @return builder
         * 
         */
        public Builder livenessRoute(@Nullable Output<RouteArgs> livenessRoute) {
            $.livenessRoute = livenessRoute;
            return this;
        }

        /**
         * @param livenessRoute The route to check the liveness of the inference server container.
         * 
         * @return builder
         * 
         */
        public Builder livenessRoute(RouteArgs livenessRoute) {
            return livenessRoute(Output.of(livenessRoute));
        }

        /**
         * @param readinessRoute The route to check the readiness of the inference server container.
         * 
         * @return builder
         * 
         */
        public Builder readinessRoute(@Nullable Output<RouteArgs> readinessRoute) {
            $.readinessRoute = readinessRoute;
            return this;
        }

        /**
         * @param readinessRoute The route to check the readiness of the inference server container.
         * 
         * @return builder
         * 
         */
        public Builder readinessRoute(RouteArgs readinessRoute) {
            return readinessRoute(Output.of(readinessRoute));
        }

        /**
         * @param scoringRoute The port to send the scoring requests to, within the inference server container.
         * 
         * @return builder
         * 
         */
        public Builder scoringRoute(@Nullable Output<RouteArgs> scoringRoute) {
            $.scoringRoute = scoringRoute;
            return this;
        }

        /**
         * @param scoringRoute The port to send the scoring requests to, within the inference server container.
         * 
         * @return builder
         * 
         */
        public Builder scoringRoute(RouteArgs scoringRoute) {
            return scoringRoute(Output.of(scoringRoute));
        }

        public InferenceContainerPropertiesArgs build() {
            return $;
        }
    }

}
