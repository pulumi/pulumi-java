// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.avs.inputs;

import com.pulumi.azurenative.avs.enums.AffinityType;
import com.pulumi.azurenative.avs.enums.PlacementPolicyState;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * VM-VM placement policy properties
 * 
 */
public final class VmVmPlacementPolicyPropertiesArgs extends com.pulumi.resources.ResourceArgs {

    public static final VmVmPlacementPolicyPropertiesArgs Empty = new VmVmPlacementPolicyPropertiesArgs();

    /**
     * placement policy affinity type
     * 
     */
    @Import(name="affinityType", required=true)
    private Output<Either<String,AffinityType>> affinityType;

    /**
     * @return placement policy affinity type
     * 
     */
    public Output<Either<String,AffinityType>> affinityType() {
        return this.affinityType;
    }

    /**
     * Display name of the placement policy
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return Display name of the placement policy
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Whether the placement policy is enabled or disabled
     * 
     */
    @Import(name="state")
    private @Nullable Output<Either<String,PlacementPolicyState>> state;

    /**
     * @return Whether the placement policy is enabled or disabled
     * 
     */
    public Optional<Output<Either<String,PlacementPolicyState>>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * placement policy type
     * Expected value is &#39;VmVm&#39;.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return placement policy type
     * Expected value is &#39;VmVm&#39;.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * Virtual machine members list
     * 
     */
    @Import(name="vmMembers", required=true)
    private Output<List<String>> vmMembers;

    /**
     * @return Virtual machine members list
     * 
     */
    public Output<List<String>> vmMembers() {
        return this.vmMembers;
    }

    private VmVmPlacementPolicyPropertiesArgs() {}

    private VmVmPlacementPolicyPropertiesArgs(VmVmPlacementPolicyPropertiesArgs $) {
        this.affinityType = $.affinityType;
        this.displayName = $.displayName;
        this.state = $.state;
        this.type = $.type;
        this.vmMembers = $.vmMembers;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VmVmPlacementPolicyPropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VmVmPlacementPolicyPropertiesArgs $;

        public Builder() {
            $ = new VmVmPlacementPolicyPropertiesArgs();
        }

        public Builder(VmVmPlacementPolicyPropertiesArgs defaults) {
            $ = new VmVmPlacementPolicyPropertiesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param affinityType placement policy affinity type
         * 
         * @return builder
         * 
         */
        public Builder affinityType(Output<Either<String,AffinityType>> affinityType) {
            $.affinityType = affinityType;
            return this;
        }

        /**
         * @param affinityType placement policy affinity type
         * 
         * @return builder
         * 
         */
        public Builder affinityType(Either<String,AffinityType> affinityType) {
            return affinityType(Output.of(affinityType));
        }

        /**
         * @param affinityType placement policy affinity type
         * 
         * @return builder
         * 
         */
        public Builder affinityType(String affinityType) {
            return affinityType(Either.ofLeft(affinityType));
        }

        /**
         * @param affinityType placement policy affinity type
         * 
         * @return builder
         * 
         */
        public Builder affinityType(AffinityType affinityType) {
            return affinityType(Either.ofRight(affinityType));
        }

        /**
         * @param displayName Display name of the placement policy
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Display name of the placement policy
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param state Whether the placement policy is enabled or disabled
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<Either<String,PlacementPolicyState>> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state Whether the placement policy is enabled or disabled
         * 
         * @return builder
         * 
         */
        public Builder state(Either<String,PlacementPolicyState> state) {
            return state(Output.of(state));
        }

        /**
         * @param state Whether the placement policy is enabled or disabled
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Either.ofLeft(state));
        }

        /**
         * @param state Whether the placement policy is enabled or disabled
         * 
         * @return builder
         * 
         */
        public Builder state(PlacementPolicyState state) {
            return state(Either.ofRight(state));
        }

        /**
         * @param type placement policy type
         * Expected value is &#39;VmVm&#39;.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type placement policy type
         * Expected value is &#39;VmVm&#39;.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param vmMembers Virtual machine members list
         * 
         * @return builder
         * 
         */
        public Builder vmMembers(Output<List<String>> vmMembers) {
            $.vmMembers = vmMembers;
            return this;
        }

        /**
         * @param vmMembers Virtual machine members list
         * 
         * @return builder
         * 
         */
        public Builder vmMembers(List<String> vmMembers) {
            return vmMembers(Output.of(vmMembers));
        }

        /**
         * @param vmMembers Virtual machine members list
         * 
         * @return builder
         * 
         */
        public Builder vmMembers(String... vmMembers) {
            return vmMembers(List.of(vmMembers));
        }

        public VmVmPlacementPolicyPropertiesArgs build() {
            $.affinityType = Objects.requireNonNull($.affinityType, "expected parameter 'affinityType' to be non-null");
            $.type = Codegen.stringProp("type").output().arg($.type).require();
            $.vmMembers = Objects.requireNonNull($.vmMembers, "expected parameter 'vmMembers' to be non-null");
            return $;
        }
    }

}
