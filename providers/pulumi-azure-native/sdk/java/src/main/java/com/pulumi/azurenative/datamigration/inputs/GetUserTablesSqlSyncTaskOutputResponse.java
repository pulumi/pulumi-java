// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datamigration.inputs;

import com.pulumi.azurenative.datamigration.inputs.DatabaseTableResponse;
import com.pulumi.azurenative.datamigration.inputs.ReportableExceptionResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;


/**
 * Output of the task that collects user tables for the given list of databases
 * 
 */
public final class GetUserTablesSqlSyncTaskOutputResponse extends com.pulumi.resources.InvokeArgs {

    public static final GetUserTablesSqlSyncTaskOutputResponse Empty = new GetUserTablesSqlSyncTaskOutputResponse();

    /**
     * Mapping from database name to list of source tables
     * 
     */
    @Import(name="databasesToSourceTables", required=true)
    private Map<String,List<DatabaseTableResponse>> databasesToSourceTables;

    /**
     * @return Mapping from database name to list of source tables
     * 
     */
    public Map<String,List<DatabaseTableResponse>> databasesToSourceTables() {
        return this.databasesToSourceTables;
    }

    /**
     * Mapping from database name to list of target tables
     * 
     */
    @Import(name="databasesToTargetTables", required=true)
    private Map<String,List<DatabaseTableResponse>> databasesToTargetTables;

    /**
     * @return Mapping from database name to list of target tables
     * 
     */
    public Map<String,List<DatabaseTableResponse>> databasesToTargetTables() {
        return this.databasesToTargetTables;
    }

    /**
     * Mapping from database name to list of validation errors
     * 
     */
    @Import(name="tableValidationErrors", required=true)
    private Map<String,List<String>> tableValidationErrors;

    /**
     * @return Mapping from database name to list of validation errors
     * 
     */
    public Map<String,List<String>> tableValidationErrors() {
        return this.tableValidationErrors;
    }

    /**
     * Validation errors
     * 
     */
    @Import(name="validationErrors", required=true)
    private List<ReportableExceptionResponse> validationErrors;

    /**
     * @return Validation errors
     * 
     */
    public List<ReportableExceptionResponse> validationErrors() {
        return this.validationErrors;
    }

    private GetUserTablesSqlSyncTaskOutputResponse() {}

    private GetUserTablesSqlSyncTaskOutputResponse(GetUserTablesSqlSyncTaskOutputResponse $) {
        this.databasesToSourceTables = $.databasesToSourceTables;
        this.databasesToTargetTables = $.databasesToTargetTables;
        this.tableValidationErrors = $.tableValidationErrors;
        this.validationErrors = $.validationErrors;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetUserTablesSqlSyncTaskOutputResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetUserTablesSqlSyncTaskOutputResponse $;

        public Builder() {
            $ = new GetUserTablesSqlSyncTaskOutputResponse();
        }

        public Builder(GetUserTablesSqlSyncTaskOutputResponse defaults) {
            $ = new GetUserTablesSqlSyncTaskOutputResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param databasesToSourceTables Mapping from database name to list of source tables
         * 
         * @return builder
         * 
         */
        public Builder databasesToSourceTables(Map<String,List<DatabaseTableResponse>> databasesToSourceTables) {
            $.databasesToSourceTables = databasesToSourceTables;
            return this;
        }

        /**
         * @param databasesToTargetTables Mapping from database name to list of target tables
         * 
         * @return builder
         * 
         */
        public Builder databasesToTargetTables(Map<String,List<DatabaseTableResponse>> databasesToTargetTables) {
            $.databasesToTargetTables = databasesToTargetTables;
            return this;
        }

        /**
         * @param tableValidationErrors Mapping from database name to list of validation errors
         * 
         * @return builder
         * 
         */
        public Builder tableValidationErrors(Map<String,List<String>> tableValidationErrors) {
            $.tableValidationErrors = tableValidationErrors;
            return this;
        }

        /**
         * @param validationErrors Validation errors
         * 
         * @return builder
         * 
         */
        public Builder validationErrors(List<ReportableExceptionResponse> validationErrors) {
            $.validationErrors = validationErrors;
            return this;
        }

        /**
         * @param validationErrors Validation errors
         * 
         * @return builder
         * 
         */
        public Builder validationErrors(ReportableExceptionResponse... validationErrors) {
            return validationErrors(List.of(validationErrors));
        }

        public GetUserTablesSqlSyncTaskOutputResponse build() {
            $.databasesToSourceTables = Objects.requireNonNull($.databasesToSourceTables, "expected parameter 'databasesToSourceTables' to be non-null");
            $.databasesToTargetTables = Objects.requireNonNull($.databasesToTargetTables, "expected parameter 'databasesToTargetTables' to be non-null");
            $.tableValidationErrors = Objects.requireNonNull($.tableValidationErrors, "expected parameter 'tableValidationErrors' to be non-null");
            $.validationErrors = Objects.requireNonNull($.validationErrors, "expected parameter 'validationErrors' to be non-null");
            return $;
        }
    }

}
