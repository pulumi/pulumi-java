// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.scheduler.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class JobStatusResponse extends com.pulumi.resources.InvokeArgs {

    public static final JobStatusResponse Empty = new JobStatusResponse();

    /**
     * Gets the number of times this job has executed.
     * 
     */
    @Import(name="executionCount", required=true)
    private Integer executionCount;

    /**
     * @return Gets the number of times this job has executed.
     * 
     */
    public Integer executionCount() {
        return this.executionCount;
    }

    /**
     * Gets the number of times this job has failed.
     * 
     */
    @Import(name="failureCount", required=true)
    private Integer failureCount;

    /**
     * @return Gets the number of times this job has failed.
     * 
     */
    public Integer failureCount() {
        return this.failureCount;
    }

    /**
     * Gets the number of faulted occurrences (occurrences that were retried and failed as many times as the retry policy states).
     * 
     */
    @Import(name="faultedCount", required=true)
    private Integer faultedCount;

    /**
     * @return Gets the number of faulted occurrences (occurrences that were retried and failed as many times as the retry policy states).
     * 
     */
    public Integer faultedCount() {
        return this.faultedCount;
    }

    /**
     * Gets the time the last occurrence executed in ISO-8601 format.  Could be empty if job has not run yet.
     * 
     */
    @Import(name="lastExecutionTime", required=true)
    private String lastExecutionTime;

    /**
     * @return Gets the time the last occurrence executed in ISO-8601 format.  Could be empty if job has not run yet.
     * 
     */
    public String lastExecutionTime() {
        return this.lastExecutionTime;
    }

    /**
     * Gets the time of the next occurrence in ISO-8601 format. Could be empty if the job is completed.
     * 
     */
    @Import(name="nextExecutionTime", required=true)
    private String nextExecutionTime;

    /**
     * @return Gets the time of the next occurrence in ISO-8601 format. Could be empty if the job is completed.
     * 
     */
    public String nextExecutionTime() {
        return this.nextExecutionTime;
    }

    private JobStatusResponse() {}

    private JobStatusResponse(JobStatusResponse $) {
        this.executionCount = $.executionCount;
        this.failureCount = $.failureCount;
        this.faultedCount = $.faultedCount;
        this.lastExecutionTime = $.lastExecutionTime;
        this.nextExecutionTime = $.nextExecutionTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(JobStatusResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private JobStatusResponse $;

        public Builder() {
            $ = new JobStatusResponse();
        }

        public Builder(JobStatusResponse defaults) {
            $ = new JobStatusResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param executionCount Gets the number of times this job has executed.
         * 
         * @return builder
         * 
         */
        public Builder executionCount(Integer executionCount) {
            $.executionCount = executionCount;
            return this;
        }

        /**
         * @param failureCount Gets the number of times this job has failed.
         * 
         * @return builder
         * 
         */
        public Builder failureCount(Integer failureCount) {
            $.failureCount = failureCount;
            return this;
        }

        /**
         * @param faultedCount Gets the number of faulted occurrences (occurrences that were retried and failed as many times as the retry policy states).
         * 
         * @return builder
         * 
         */
        public Builder faultedCount(Integer faultedCount) {
            $.faultedCount = faultedCount;
            return this;
        }

        /**
         * @param lastExecutionTime Gets the time the last occurrence executed in ISO-8601 format.  Could be empty if job has not run yet.
         * 
         * @return builder
         * 
         */
        public Builder lastExecutionTime(String lastExecutionTime) {
            $.lastExecutionTime = lastExecutionTime;
            return this;
        }

        /**
         * @param nextExecutionTime Gets the time of the next occurrence in ISO-8601 format. Could be empty if the job is completed.
         * 
         * @return builder
         * 
         */
        public Builder nextExecutionTime(String nextExecutionTime) {
            $.nextExecutionTime = nextExecutionTime;
            return this;
        }

        public JobStatusResponse build() {
            $.executionCount = Objects.requireNonNull($.executionCount, "expected parameter 'executionCount' to be non-null");
            $.failureCount = Objects.requireNonNull($.failureCount, "expected parameter 'failureCount' to be non-null");
            $.faultedCount = Objects.requireNonNull($.faultedCount, "expected parameter 'faultedCount' to be non-null");
            $.lastExecutionTime = Objects.requireNonNull($.lastExecutionTime, "expected parameter 'lastExecutionTime' to be non-null");
            $.nextExecutionTime = Objects.requireNonNull($.nextExecutionTime, "expected parameter 'nextExecutionTime' to be non-null");
            return $;
        }
    }

}
