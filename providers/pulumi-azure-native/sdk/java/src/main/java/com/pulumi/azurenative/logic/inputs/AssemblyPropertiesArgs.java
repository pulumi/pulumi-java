// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.logic.inputs;

import com.pulumi.azurenative.logic.inputs.ContentLinkArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The assembly properties definition.
 * 
 */
public final class AssemblyPropertiesArgs extends com.pulumi.resources.ResourceArgs {

    public static final AssemblyPropertiesArgs Empty = new AssemblyPropertiesArgs();

    /**
     * The assembly culture.
     * 
     */
    @Import(name="assemblyCulture")
    private @Nullable Output<String> assemblyCulture;

    public Optional<Output<String>> assemblyCulture() {
        return Optional.ofNullable(this.assemblyCulture);
    }

    /**
     * The assembly name.
     * 
     */
    @Import(name="assemblyName", required=true)
    private Output<String> assemblyName;

    public Output<String> assemblyName() {
        return this.assemblyName;
    }

    /**
     * The assembly public key token.
     * 
     */
    @Import(name="assemblyPublicKeyToken")
    private @Nullable Output<String> assemblyPublicKeyToken;

    public Optional<Output<String>> assemblyPublicKeyToken() {
        return Optional.ofNullable(this.assemblyPublicKeyToken);
    }

    /**
     * The assembly version.
     * 
     */
    @Import(name="assemblyVersion")
    private @Nullable Output<String> assemblyVersion;

    public Optional<Output<String>> assemblyVersion() {
        return Optional.ofNullable(this.assemblyVersion);
    }

    /**
     * The artifact changed time.
     * 
     */
    @Import(name="changedTime")
    private @Nullable Output<String> changedTime;

    public Optional<Output<String>> changedTime() {
        return Optional.ofNullable(this.changedTime);
    }

    @Import(name="content")
    private @Nullable Output<Object> content;

    public Optional<Output<Object>> content() {
        return Optional.ofNullable(this.content);
    }

    /**
     * The content link.
     * 
     */
    @Import(name="contentLink")
    private @Nullable Output<ContentLinkArgs> contentLink;

    public Optional<Output<ContentLinkArgs>> contentLink() {
        return Optional.ofNullable(this.contentLink);
    }

    /**
     * The content type.
     * 
     */
    @Import(name="contentType")
    private @Nullable Output<String> contentType;

    public Optional<Output<String>> contentType() {
        return Optional.ofNullable(this.contentType);
    }

    /**
     * The artifact creation time.
     * 
     */
    @Import(name="createdTime")
    private @Nullable Output<String> createdTime;

    public Optional<Output<String>> createdTime() {
        return Optional.ofNullable(this.createdTime);
    }

    @Import(name="metadata")
    private @Nullable Output<Object> metadata;

    public Optional<Output<Object>> metadata() {
        return Optional.ofNullable(this.metadata);
    }

    private AssemblyPropertiesArgs() {}

    private AssemblyPropertiesArgs(AssemblyPropertiesArgs $) {
        this.assemblyCulture = $.assemblyCulture;
        this.assemblyName = $.assemblyName;
        this.assemblyPublicKeyToken = $.assemblyPublicKeyToken;
        this.assemblyVersion = $.assemblyVersion;
        this.changedTime = $.changedTime;
        this.content = $.content;
        this.contentLink = $.contentLink;
        this.contentType = $.contentType;
        this.createdTime = $.createdTime;
        this.metadata = $.metadata;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AssemblyPropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AssemblyPropertiesArgs $;

        public Builder() {
            $ = new AssemblyPropertiesArgs();
        }

        public Builder(AssemblyPropertiesArgs defaults) {
            $ = new AssemblyPropertiesArgs(Objects.requireNonNull(defaults));
        }

        public Builder assemblyCulture(@Nullable Output<String> assemblyCulture) {
            $.assemblyCulture = assemblyCulture;
            return this;
        }

        public Builder assemblyCulture(String assemblyCulture) {
            return assemblyCulture(Output.of(assemblyCulture));
        }

        public Builder assemblyName(Output<String> assemblyName) {
            $.assemblyName = assemblyName;
            return this;
        }

        public Builder assemblyName(String assemblyName) {
            return assemblyName(Output.of(assemblyName));
        }

        public Builder assemblyPublicKeyToken(@Nullable Output<String> assemblyPublicKeyToken) {
            $.assemblyPublicKeyToken = assemblyPublicKeyToken;
            return this;
        }

        public Builder assemblyPublicKeyToken(String assemblyPublicKeyToken) {
            return assemblyPublicKeyToken(Output.of(assemblyPublicKeyToken));
        }

        public Builder assemblyVersion(@Nullable Output<String> assemblyVersion) {
            $.assemblyVersion = assemblyVersion;
            return this;
        }

        public Builder assemblyVersion(String assemblyVersion) {
            return assemblyVersion(Output.of(assemblyVersion));
        }

        public Builder changedTime(@Nullable Output<String> changedTime) {
            $.changedTime = changedTime;
            return this;
        }

        public Builder changedTime(String changedTime) {
            return changedTime(Output.of(changedTime));
        }

        public Builder content(@Nullable Output<Object> content) {
            $.content = content;
            return this;
        }

        public Builder content(Object content) {
            return content(Output.of(content));
        }

        public Builder contentLink(@Nullable Output<ContentLinkArgs> contentLink) {
            $.contentLink = contentLink;
            return this;
        }

        public Builder contentLink(ContentLinkArgs contentLink) {
            return contentLink(Output.of(contentLink));
        }

        public Builder contentType(@Nullable Output<String> contentType) {
            $.contentType = contentType;
            return this;
        }

        public Builder contentType(String contentType) {
            return contentType(Output.of(contentType));
        }

        public Builder createdTime(@Nullable Output<String> createdTime) {
            $.createdTime = createdTime;
            return this;
        }

        public Builder createdTime(String createdTime) {
            return createdTime(Output.of(createdTime));
        }

        public Builder metadata(@Nullable Output<Object> metadata) {
            $.metadata = metadata;
            return this;
        }

        public Builder metadata(Object metadata) {
            return metadata(Output.of(metadata));
        }

        public AssemblyPropertiesArgs build() {
            $.assemblyName = Objects.requireNonNull($.assemblyName, "expected parameter 'assemblyName' to be non-null");
            return $;
        }
    }

}
