// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.logz.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PlanDataArgs extends com.pulumi.resources.ResourceArgs {

    public static final PlanDataArgs Empty = new PlanDataArgs();

    /**
     * different billing cycles like MONTHLY/WEEKLY. this could be enum
     * 
     */
    @Import(name="billingCycle")
    private @Nullable Output<String> billingCycle;

    /**
     * @return different billing cycles like MONTHLY/WEEKLY. this could be enum
     * 
     */
    public Optional<Output<String>> billingCycle() {
        return Optional.ofNullable(this.billingCycle);
    }

    /**
     * date when plan was applied
     * 
     */
    @Import(name="effectiveDate")
    private @Nullable Output<String> effectiveDate;

    /**
     * @return date when plan was applied
     * 
     */
    public Optional<Output<String>> effectiveDate() {
        return Optional.ofNullable(this.effectiveDate);
    }

    /**
     * plan id as published by Logz
     * 
     */
    @Import(name="planDetails")
    private @Nullable Output<String> planDetails;

    /**
     * @return plan id as published by Logz
     * 
     */
    public Optional<Output<String>> planDetails() {
        return Optional.ofNullable(this.planDetails);
    }

    /**
     * different usage type like PAYG/COMMITTED. this could be enum
     * 
     */
    @Import(name="usageType")
    private @Nullable Output<String> usageType;

    /**
     * @return different usage type like PAYG/COMMITTED. this could be enum
     * 
     */
    public Optional<Output<String>> usageType() {
        return Optional.ofNullable(this.usageType);
    }

    private PlanDataArgs() {}

    private PlanDataArgs(PlanDataArgs $) {
        this.billingCycle = $.billingCycle;
        this.effectiveDate = $.effectiveDate;
        this.planDetails = $.planDetails;
        this.usageType = $.usageType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PlanDataArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PlanDataArgs $;

        public Builder() {
            $ = new PlanDataArgs();
        }

        public Builder(PlanDataArgs defaults) {
            $ = new PlanDataArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param billingCycle different billing cycles like MONTHLY/WEEKLY. this could be enum
         * 
         * @return builder
         * 
         */
        public Builder billingCycle(@Nullable Output<String> billingCycle) {
            $.billingCycle = billingCycle;
            return this;
        }

        /**
         * @param billingCycle different billing cycles like MONTHLY/WEEKLY. this could be enum
         * 
         * @return builder
         * 
         */
        public Builder billingCycle(String billingCycle) {
            return billingCycle(Output.of(billingCycle));
        }

        /**
         * @param effectiveDate date when plan was applied
         * 
         * @return builder
         * 
         */
        public Builder effectiveDate(@Nullable Output<String> effectiveDate) {
            $.effectiveDate = effectiveDate;
            return this;
        }

        /**
         * @param effectiveDate date when plan was applied
         * 
         * @return builder
         * 
         */
        public Builder effectiveDate(String effectiveDate) {
            return effectiveDate(Output.of(effectiveDate));
        }

        /**
         * @param planDetails plan id as published by Logz
         * 
         * @return builder
         * 
         */
        public Builder planDetails(@Nullable Output<String> planDetails) {
            $.planDetails = planDetails;
            return this;
        }

        /**
         * @param planDetails plan id as published by Logz
         * 
         * @return builder
         * 
         */
        public Builder planDetails(String planDetails) {
            return planDetails(Output.of(planDetails));
        }

        /**
         * @param usageType different usage type like PAYG/COMMITTED. this could be enum
         * 
         * @return builder
         * 
         */
        public Builder usageType(@Nullable Output<String> usageType) {
            $.usageType = usageType;
            return this;
        }

        /**
         * @param usageType different usage type like PAYG/COMMITTED. this could be enum
         * 
         * @return builder
         * 
         */
        public Builder usageType(String usageType) {
            return usageType(Output.of(usageType));
        }

        public PlanDataArgs build() {
            return $;
        }
    }

}
