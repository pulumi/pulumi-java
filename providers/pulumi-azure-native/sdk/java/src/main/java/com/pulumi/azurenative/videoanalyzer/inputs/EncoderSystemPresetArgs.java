// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.videoanalyzer.inputs;

import com.pulumi.azurenative.videoanalyzer.enums.EncoderSystemPresetType;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;


/**
 * Describes a built-in preset for encoding the input content using the encoder processor.
 * 
 */
public final class EncoderSystemPresetArgs extends com.pulumi.resources.ResourceArgs {

    public static final EncoderSystemPresetArgs Empty = new EncoderSystemPresetArgs();

    /**
     * Name of the built-in encoding preset.
     * 
     */
    @Import(name="name", required=true)
    private Output<Either<String,EncoderSystemPresetType>> name;

    /**
     * @return Name of the built-in encoding preset.
     * 
     */
    public Output<Either<String,EncoderSystemPresetType>> name() {
        return this.name;
    }

    /**
     * The discriminator for derived types.
     * Expected value is &#39;#Microsoft.VideoAnalyzer.EncoderSystemPreset&#39;.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The discriminator for derived types.
     * Expected value is &#39;#Microsoft.VideoAnalyzer.EncoderSystemPreset&#39;.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private EncoderSystemPresetArgs() {}

    private EncoderSystemPresetArgs(EncoderSystemPresetArgs $) {
        this.name = $.name;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EncoderSystemPresetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EncoderSystemPresetArgs $;

        public Builder() {
            $ = new EncoderSystemPresetArgs();
        }

        public Builder(EncoderSystemPresetArgs defaults) {
            $ = new EncoderSystemPresetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param name Name of the built-in encoding preset.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<Either<String,EncoderSystemPresetType>> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the built-in encoding preset.
         * 
         * @return builder
         * 
         */
        public Builder name(Either<String,EncoderSystemPresetType> name) {
            return name(Output.of(name));
        }

        /**
         * @param name Name of the built-in encoding preset.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Either.ofLeft(name));
        }

        /**
         * @param name Name of the built-in encoding preset.
         * 
         * @return builder
         * 
         */
        public Builder name(EncoderSystemPresetType name) {
            return name(Either.ofRight(name));
        }

        /**
         * @param type The discriminator for derived types.
         * Expected value is &#39;#Microsoft.VideoAnalyzer.EncoderSystemPreset&#39;.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The discriminator for derived types.
         * Expected value is &#39;#Microsoft.VideoAnalyzer.EncoderSystemPreset&#39;.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public EncoderSystemPresetArgs build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.type = Codegen.stringProp("type").output().arg($.type).require();
            return $;
        }
    }

}
