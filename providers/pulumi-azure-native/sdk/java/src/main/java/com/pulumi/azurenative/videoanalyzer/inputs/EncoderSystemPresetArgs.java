// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.videoanalyzer.inputs;

import com.pulumi.azurenative.videoanalyzer.enums.EncoderSystemPresetType;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;


/**
 * Describes a built-in preset for encoding the input content using the encoder processor.
 * 
 */
public final class EncoderSystemPresetArgs extends com.pulumi.resources.ResourceArgs {

    public static final EncoderSystemPresetArgs Empty = new EncoderSystemPresetArgs();

    /**
     * Name of the built-in encoding preset.
     * 
     */
    @Import(name="name", required=true)
      private final Output<Either<String,EncoderSystemPresetType>> name;

    public Output<Either<String,EncoderSystemPresetType>> name() {
        return this.name;
    }

    /**
     * The discriminator for derived types.
     * Expected value is '#Microsoft.VideoAnalyzer.EncoderSystemPreset'.
     * 
     */
    @Import(name="type", required=true)
      private final Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    public EncoderSystemPresetArgs(
        Output<Either<String,EncoderSystemPresetType>> name,
        Output<String> type) {
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.type = Codegen.stringProp("type").output().arg(type).require();
    }

    private EncoderSystemPresetArgs() {
        this.name = Codegen.empty();
        this.type = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EncoderSystemPresetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<Either<String,EncoderSystemPresetType>> name;
        private Output<String> type;

        public Builder() {
    	      // Empty
        }

        public Builder(EncoderSystemPresetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.name = defaults.name;
    	      this.type = defaults.type;
        }

        public Builder name(Output<Either<String,EncoderSystemPresetType>> name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder name(Either<String,EncoderSystemPresetType> name) {
            this.name = Output.of(Objects.requireNonNull(name));
            return this;
        }
        public Builder type(Output<String> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder type(String type) {
            this.type = Output.of(Objects.requireNonNull(type));
            return this;
        }        public EncoderSystemPresetArgs build() {
            return new EncoderSystemPresetArgs(name, type);
        }
    }
}
