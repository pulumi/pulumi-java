// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.devtestlab.inputs;

import com.pulumi.azurenative.devtestlab.inputs.SharedPublicIpAddressConfigurationResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Properties of a network interface.
 * 
 */
public final class NetworkInterfacePropertiesResponse extends com.pulumi.resources.InvokeArgs {

    public static final NetworkInterfacePropertiesResponse Empty = new NetworkInterfacePropertiesResponse();

    /**
     * The DNS name.
     * 
     */
    @Import(name="dnsName")
    private @Nullable String dnsName;

    public Optional<String> dnsName() {
        return Optional.ofNullable(this.dnsName);
    }

    /**
     * The private IP address.
     * 
     */
    @Import(name="privateIpAddress")
    private @Nullable String privateIpAddress;

    public Optional<String> privateIpAddress() {
        return Optional.ofNullable(this.privateIpAddress);
    }

    /**
     * The public IP address.
     * 
     */
    @Import(name="publicIpAddress")
    private @Nullable String publicIpAddress;

    public Optional<String> publicIpAddress() {
        return Optional.ofNullable(this.publicIpAddress);
    }

    /**
     * The resource ID of the public IP address.
     * 
     */
    @Import(name="publicIpAddressId")
    private @Nullable String publicIpAddressId;

    public Optional<String> publicIpAddressId() {
        return Optional.ofNullable(this.publicIpAddressId);
    }

    /**
     * The RdpAuthority property is a server DNS host name or IP address followed by the service port number for RDP (Remote Desktop Protocol).
     * 
     */
    @Import(name="rdpAuthority")
    private @Nullable String rdpAuthority;

    public Optional<String> rdpAuthority() {
        return Optional.ofNullable(this.rdpAuthority);
    }

    /**
     * The configuration for sharing a public IP address across multiple virtual machines.
     * 
     */
    @Import(name="sharedPublicIpAddressConfiguration")
    private @Nullable SharedPublicIpAddressConfigurationResponse sharedPublicIpAddressConfiguration;

    public Optional<SharedPublicIpAddressConfigurationResponse> sharedPublicIpAddressConfiguration() {
        return Optional.ofNullable(this.sharedPublicIpAddressConfiguration);
    }

    /**
     * The SshAuthority property is a server DNS host name or IP address followed by the service port number for SSH.
     * 
     */
    @Import(name="sshAuthority")
    private @Nullable String sshAuthority;

    public Optional<String> sshAuthority() {
        return Optional.ofNullable(this.sshAuthority);
    }

    /**
     * The resource ID of the sub net.
     * 
     */
    @Import(name="subnetId")
    private @Nullable String subnetId;

    public Optional<String> subnetId() {
        return Optional.ofNullable(this.subnetId);
    }

    /**
     * The resource ID of the virtual network.
     * 
     */
    @Import(name="virtualNetworkId")
    private @Nullable String virtualNetworkId;

    public Optional<String> virtualNetworkId() {
        return Optional.ofNullable(this.virtualNetworkId);
    }

    private NetworkInterfacePropertiesResponse() {}

    private NetworkInterfacePropertiesResponse(NetworkInterfacePropertiesResponse $) {
        this.dnsName = $.dnsName;
        this.privateIpAddress = $.privateIpAddress;
        this.publicIpAddress = $.publicIpAddress;
        this.publicIpAddressId = $.publicIpAddressId;
        this.rdpAuthority = $.rdpAuthority;
        this.sharedPublicIpAddressConfiguration = $.sharedPublicIpAddressConfiguration;
        this.sshAuthority = $.sshAuthority;
        this.subnetId = $.subnetId;
        this.virtualNetworkId = $.virtualNetworkId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkInterfacePropertiesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkInterfacePropertiesResponse $;

        public Builder() {
            $ = new NetworkInterfacePropertiesResponse();
        }

        public Builder(NetworkInterfacePropertiesResponse defaults) {
            $ = new NetworkInterfacePropertiesResponse(Objects.requireNonNull(defaults));
        }

        public Builder dnsName(@Nullable String dnsName) {
            $.dnsName = dnsName;
            return this;
        }

        public Builder privateIpAddress(@Nullable String privateIpAddress) {
            $.privateIpAddress = privateIpAddress;
            return this;
        }

        public Builder publicIpAddress(@Nullable String publicIpAddress) {
            $.publicIpAddress = publicIpAddress;
            return this;
        }

        public Builder publicIpAddressId(@Nullable String publicIpAddressId) {
            $.publicIpAddressId = publicIpAddressId;
            return this;
        }

        public Builder rdpAuthority(@Nullable String rdpAuthority) {
            $.rdpAuthority = rdpAuthority;
            return this;
        }

        public Builder sharedPublicIpAddressConfiguration(@Nullable SharedPublicIpAddressConfigurationResponse sharedPublicIpAddressConfiguration) {
            $.sharedPublicIpAddressConfiguration = sharedPublicIpAddressConfiguration;
            return this;
        }

        public Builder sshAuthority(@Nullable String sshAuthority) {
            $.sshAuthority = sshAuthority;
            return this;
        }

        public Builder subnetId(@Nullable String subnetId) {
            $.subnetId = subnetId;
            return this;
        }

        public Builder virtualNetworkId(@Nullable String virtualNetworkId) {
            $.virtualNetworkId = virtualNetworkId;
            return this;
        }

        public NetworkInterfacePropertiesResponse build() {
            return $;
        }
    }

}
