// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.servicefabric;

import com.pulumi.azurenative.servicefabric.inputs.ApplicationTypeVersionsCleanupPolicyArgs;
import com.pulumi.azurenative.servicefabric.inputs.AzureActiveDirectoryArgs;
import com.pulumi.azurenative.servicefabric.inputs.CertificateDescriptionArgs;
import com.pulumi.azurenative.servicefabric.inputs.ClientCertificateCommonNameArgs;
import com.pulumi.azurenative.servicefabric.inputs.ClientCertificateThumbprintArgs;
import com.pulumi.azurenative.servicefabric.inputs.ClusterUpgradePolicyArgs;
import com.pulumi.azurenative.servicefabric.inputs.DiagnosticsStorageAccountConfigArgs;
import com.pulumi.azurenative.servicefabric.inputs.NodeTypeDescriptionArgs;
import com.pulumi.azurenative.servicefabric.inputs.ServerCertificateCommonNamesArgs;
import com.pulumi.azurenative.servicefabric.inputs.SettingsSectionDescriptionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClusterArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClusterArgs Empty = new ClusterArgs();

    /**
     * The list of add-on features to enable in the cluster.
     * 
     */
    @Import(name="addOnFeatures")
    private @Nullable Output<List<String>> addOnFeatures;

    public Optional<Output<List<String>>> addOnFeatures() {
        return Optional.ofNullable(this.addOnFeatures);
    }

    /**
     * The policy used to clean up unused versions.
     * 
     */
    @Import(name="applicationTypeVersionsCleanupPolicy")
    private @Nullable Output<ApplicationTypeVersionsCleanupPolicyArgs> applicationTypeVersionsCleanupPolicy;

    public Optional<Output<ApplicationTypeVersionsCleanupPolicyArgs>> applicationTypeVersionsCleanupPolicy() {
        return Optional.ofNullable(this.applicationTypeVersionsCleanupPolicy);
    }

    /**
     * The AAD authentication settings of the cluster.
     * 
     */
    @Import(name="azureActiveDirectory")
    private @Nullable Output<AzureActiveDirectoryArgs> azureActiveDirectory;

    public Optional<Output<AzureActiveDirectoryArgs>> azureActiveDirectory() {
        return Optional.ofNullable(this.azureActiveDirectory);
    }

    /**
     * The certificate to use for securing the cluster. The certificate provided will be used for node to node security within the cluster, SSL certificate for cluster management endpoint and default admin client.
     * 
     */
    @Import(name="certificate")
    private @Nullable Output<CertificateDescriptionArgs> certificate;

    public Optional<Output<CertificateDescriptionArgs>> certificate() {
        return Optional.ofNullable(this.certificate);
    }

    /**
     * Describes a list of server certificates referenced by common name that are used to secure the cluster.
     * 
     */
    @Import(name="certificateCommonNames")
    private @Nullable Output<ServerCertificateCommonNamesArgs> certificateCommonNames;

    public Optional<Output<ServerCertificateCommonNamesArgs>> certificateCommonNames() {
        return Optional.ofNullable(this.certificateCommonNames);
    }

    /**
     * The list of client certificates referenced by common name that are allowed to manage the cluster.
     * 
     */
    @Import(name="clientCertificateCommonNames")
    private @Nullable Output<List<ClientCertificateCommonNameArgs>> clientCertificateCommonNames;

    public Optional<Output<List<ClientCertificateCommonNameArgs>>> clientCertificateCommonNames() {
        return Optional.ofNullable(this.clientCertificateCommonNames);
    }

    /**
     * The list of client certificates referenced by thumbprint that are allowed to manage the cluster.
     * 
     */
    @Import(name="clientCertificateThumbprints")
    private @Nullable Output<List<ClientCertificateThumbprintArgs>> clientCertificateThumbprints;

    public Optional<Output<List<ClientCertificateThumbprintArgs>>> clientCertificateThumbprints() {
        return Optional.ofNullable(this.clientCertificateThumbprints);
    }

    /**
     * The Service Fabric runtime version of the cluster. This property can only by set the user when **upgradeMode** is set to &#39;Manual&#39;. To get list of available Service Fabric versions for new clusters use [ClusterVersion API](./ClusterVersion.md). To get the list of available version for existing clusters use **availableClusterVersions**.
     * 
     */
    @Import(name="clusterCodeVersion")
    private @Nullable Output<String> clusterCodeVersion;

    public Optional<Output<String>> clusterCodeVersion() {
        return Optional.ofNullable(this.clusterCodeVersion);
    }

    /**
     * The name of the cluster resource.
     * 
     */
    @Import(name="clusterName")
    private @Nullable Output<String> clusterName;

    public Optional<Output<String>> clusterName() {
        return Optional.ofNullable(this.clusterName);
    }

    /**
     * The storage account information for storing Service Fabric diagnostic logs.
     * 
     */
    @Import(name="diagnosticsStorageAccountConfig")
    private @Nullable Output<DiagnosticsStorageAccountConfigArgs> diagnosticsStorageAccountConfig;

    public Optional<Output<DiagnosticsStorageAccountConfigArgs>> diagnosticsStorageAccountConfig() {
        return Optional.ofNullable(this.diagnosticsStorageAccountConfig);
    }

    /**
     * Indicates if the event store service is enabled.
     * 
     */
    @Import(name="eventStoreServiceEnabled")
    private @Nullable Output<Boolean> eventStoreServiceEnabled;

    public Optional<Output<Boolean>> eventStoreServiceEnabled() {
        return Optional.ofNullable(this.eventStoreServiceEnabled);
    }

    /**
     * The list of custom fabric settings to configure the cluster.
     * 
     */
    @Import(name="fabricSettings")
    private @Nullable Output<List<SettingsSectionDescriptionArgs>> fabricSettings;

    public Optional<Output<List<SettingsSectionDescriptionArgs>>> fabricSettings() {
        return Optional.ofNullable(this.fabricSettings);
    }

    /**
     * Azure resource location.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The http management endpoint of the cluster.
     * 
     */
    @Import(name="managementEndpoint", required=true)
    private Output<String> managementEndpoint;

    public Output<String> managementEndpoint() {
        return this.managementEndpoint;
    }

    /**
     * The list of node types in the cluster.
     * 
     */
    @Import(name="nodeTypes", required=true)
    private Output<List<NodeTypeDescriptionArgs>> nodeTypes;

    public Output<List<NodeTypeDescriptionArgs>> nodeTypes() {
        return this.nodeTypes;
    }

    /**
     * The reliability level sets the replica set size of system services. Learn about [ReliabilityLevel](https://docs.microsoft.com/azure/service-fabric/service-fabric-cluster-capacity).
     * 
     *   - None - Run the System services with a target replica set count of 1. This should only be used for test clusters.
     *   - Bronze - Run the System services with a target replica set count of 3. This should only be used for test clusters.
     *   - Silver - Run the System services with a target replica set count of 5.
     *   - Gold - Run the System services with a target replica set count of 7.
     *   - Platinum - Run the System services with a target replica set count of 9.
     * 
     */
    @Import(name="reliabilityLevel")
    private @Nullable Output<String> reliabilityLevel;

    public Optional<Output<String>> reliabilityLevel() {
        return Optional.ofNullable(this.reliabilityLevel);
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The server certificate used by reverse proxy.
     * 
     */
    @Import(name="reverseProxyCertificate")
    private @Nullable Output<CertificateDescriptionArgs> reverseProxyCertificate;

    public Optional<Output<CertificateDescriptionArgs>> reverseProxyCertificate() {
        return Optional.ofNullable(this.reverseProxyCertificate);
    }

    /**
     * Describes a list of server certificates referenced by common name that are used to secure the cluster.
     * 
     */
    @Import(name="reverseProxyCertificateCommonNames")
    private @Nullable Output<ServerCertificateCommonNamesArgs> reverseProxyCertificateCommonNames;

    public Optional<Output<ServerCertificateCommonNamesArgs>> reverseProxyCertificateCommonNames() {
        return Optional.ofNullable(this.reverseProxyCertificateCommonNames);
    }

    /**
     * Azure resource tags.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The policy to use when upgrading the cluster.
     * 
     */
    @Import(name="upgradeDescription")
    private @Nullable Output<ClusterUpgradePolicyArgs> upgradeDescription;

    public Optional<Output<ClusterUpgradePolicyArgs>> upgradeDescription() {
        return Optional.ofNullable(this.upgradeDescription);
    }

    /**
     * The upgrade mode of the cluster when new Service Fabric runtime version is available.
     * 
     *   - Automatic - The cluster will be automatically upgraded to the latest Service Fabric runtime version as soon as it is available.
     *   - Manual - The cluster will not be automatically upgraded to the latest Service Fabric runtime version. The cluster is upgraded by setting the **clusterCodeVersion** property in the cluster resource.
     * 
     */
    @Import(name="upgradeMode")
    private @Nullable Output<String> upgradeMode;

    public Optional<Output<String>> upgradeMode() {
        return Optional.ofNullable(this.upgradeMode);
    }

    /**
     * The VM image VMSS has been configured with. Generic names such as Windows or Linux can be used.
     * 
     */
    @Import(name="vmImage")
    private @Nullable Output<String> vmImage;

    public Optional<Output<String>> vmImage() {
        return Optional.ofNullable(this.vmImage);
    }

    private ClusterArgs() {}

    private ClusterArgs(ClusterArgs $) {
        this.addOnFeatures = $.addOnFeatures;
        this.applicationTypeVersionsCleanupPolicy = $.applicationTypeVersionsCleanupPolicy;
        this.azureActiveDirectory = $.azureActiveDirectory;
        this.certificate = $.certificate;
        this.certificateCommonNames = $.certificateCommonNames;
        this.clientCertificateCommonNames = $.clientCertificateCommonNames;
        this.clientCertificateThumbprints = $.clientCertificateThumbprints;
        this.clusterCodeVersion = $.clusterCodeVersion;
        this.clusterName = $.clusterName;
        this.diagnosticsStorageAccountConfig = $.diagnosticsStorageAccountConfig;
        this.eventStoreServiceEnabled = $.eventStoreServiceEnabled;
        this.fabricSettings = $.fabricSettings;
        this.location = $.location;
        this.managementEndpoint = $.managementEndpoint;
        this.nodeTypes = $.nodeTypes;
        this.reliabilityLevel = $.reliabilityLevel;
        this.resourceGroupName = $.resourceGroupName;
        this.reverseProxyCertificate = $.reverseProxyCertificate;
        this.reverseProxyCertificateCommonNames = $.reverseProxyCertificateCommonNames;
        this.tags = $.tags;
        this.upgradeDescription = $.upgradeDescription;
        this.upgradeMode = $.upgradeMode;
        this.vmImage = $.vmImage;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClusterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterArgs $;

        public Builder() {
            $ = new ClusterArgs();
        }

        public Builder(ClusterArgs defaults) {
            $ = new ClusterArgs(Objects.requireNonNull(defaults));
        }

        public Builder addOnFeatures(@Nullable Output<List<String>> addOnFeatures) {
            $.addOnFeatures = addOnFeatures;
            return this;
        }

        public Builder addOnFeatures(List<String> addOnFeatures) {
            return addOnFeatures(Output.of(addOnFeatures));
        }

        public Builder addOnFeatures(String... addOnFeatures) {
            return addOnFeatures(List.of(addOnFeatures));
        }

        public Builder applicationTypeVersionsCleanupPolicy(@Nullable Output<ApplicationTypeVersionsCleanupPolicyArgs> applicationTypeVersionsCleanupPolicy) {
            $.applicationTypeVersionsCleanupPolicy = applicationTypeVersionsCleanupPolicy;
            return this;
        }

        public Builder applicationTypeVersionsCleanupPolicy(ApplicationTypeVersionsCleanupPolicyArgs applicationTypeVersionsCleanupPolicy) {
            return applicationTypeVersionsCleanupPolicy(Output.of(applicationTypeVersionsCleanupPolicy));
        }

        public Builder azureActiveDirectory(@Nullable Output<AzureActiveDirectoryArgs> azureActiveDirectory) {
            $.azureActiveDirectory = azureActiveDirectory;
            return this;
        }

        public Builder azureActiveDirectory(AzureActiveDirectoryArgs azureActiveDirectory) {
            return azureActiveDirectory(Output.of(azureActiveDirectory));
        }

        public Builder certificate(@Nullable Output<CertificateDescriptionArgs> certificate) {
            $.certificate = certificate;
            return this;
        }

        public Builder certificate(CertificateDescriptionArgs certificate) {
            return certificate(Output.of(certificate));
        }

        public Builder certificateCommonNames(@Nullable Output<ServerCertificateCommonNamesArgs> certificateCommonNames) {
            $.certificateCommonNames = certificateCommonNames;
            return this;
        }

        public Builder certificateCommonNames(ServerCertificateCommonNamesArgs certificateCommonNames) {
            return certificateCommonNames(Output.of(certificateCommonNames));
        }

        public Builder clientCertificateCommonNames(@Nullable Output<List<ClientCertificateCommonNameArgs>> clientCertificateCommonNames) {
            $.clientCertificateCommonNames = clientCertificateCommonNames;
            return this;
        }

        public Builder clientCertificateCommonNames(List<ClientCertificateCommonNameArgs> clientCertificateCommonNames) {
            return clientCertificateCommonNames(Output.of(clientCertificateCommonNames));
        }

        public Builder clientCertificateCommonNames(ClientCertificateCommonNameArgs... clientCertificateCommonNames) {
            return clientCertificateCommonNames(List.of(clientCertificateCommonNames));
        }

        public Builder clientCertificateThumbprints(@Nullable Output<List<ClientCertificateThumbprintArgs>> clientCertificateThumbprints) {
            $.clientCertificateThumbprints = clientCertificateThumbprints;
            return this;
        }

        public Builder clientCertificateThumbprints(List<ClientCertificateThumbprintArgs> clientCertificateThumbprints) {
            return clientCertificateThumbprints(Output.of(clientCertificateThumbprints));
        }

        public Builder clientCertificateThumbprints(ClientCertificateThumbprintArgs... clientCertificateThumbprints) {
            return clientCertificateThumbprints(List.of(clientCertificateThumbprints));
        }

        public Builder clusterCodeVersion(@Nullable Output<String> clusterCodeVersion) {
            $.clusterCodeVersion = clusterCodeVersion;
            return this;
        }

        public Builder clusterCodeVersion(String clusterCodeVersion) {
            return clusterCodeVersion(Output.of(clusterCodeVersion));
        }

        public Builder clusterName(@Nullable Output<String> clusterName) {
            $.clusterName = clusterName;
            return this;
        }

        public Builder clusterName(String clusterName) {
            return clusterName(Output.of(clusterName));
        }

        public Builder diagnosticsStorageAccountConfig(@Nullable Output<DiagnosticsStorageAccountConfigArgs> diagnosticsStorageAccountConfig) {
            $.diagnosticsStorageAccountConfig = diagnosticsStorageAccountConfig;
            return this;
        }

        public Builder diagnosticsStorageAccountConfig(DiagnosticsStorageAccountConfigArgs diagnosticsStorageAccountConfig) {
            return diagnosticsStorageAccountConfig(Output.of(diagnosticsStorageAccountConfig));
        }

        public Builder eventStoreServiceEnabled(@Nullable Output<Boolean> eventStoreServiceEnabled) {
            $.eventStoreServiceEnabled = eventStoreServiceEnabled;
            return this;
        }

        public Builder eventStoreServiceEnabled(Boolean eventStoreServiceEnabled) {
            return eventStoreServiceEnabled(Output.of(eventStoreServiceEnabled));
        }

        public Builder fabricSettings(@Nullable Output<List<SettingsSectionDescriptionArgs>> fabricSettings) {
            $.fabricSettings = fabricSettings;
            return this;
        }

        public Builder fabricSettings(List<SettingsSectionDescriptionArgs> fabricSettings) {
            return fabricSettings(Output.of(fabricSettings));
        }

        public Builder fabricSettings(SettingsSectionDescriptionArgs... fabricSettings) {
            return fabricSettings(List.of(fabricSettings));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder managementEndpoint(Output<String> managementEndpoint) {
            $.managementEndpoint = managementEndpoint;
            return this;
        }

        public Builder managementEndpoint(String managementEndpoint) {
            return managementEndpoint(Output.of(managementEndpoint));
        }

        public Builder nodeTypes(Output<List<NodeTypeDescriptionArgs>> nodeTypes) {
            $.nodeTypes = nodeTypes;
            return this;
        }

        public Builder nodeTypes(List<NodeTypeDescriptionArgs> nodeTypes) {
            return nodeTypes(Output.of(nodeTypes));
        }

        public Builder nodeTypes(NodeTypeDescriptionArgs... nodeTypes) {
            return nodeTypes(List.of(nodeTypes));
        }

        public Builder reliabilityLevel(@Nullable Output<String> reliabilityLevel) {
            $.reliabilityLevel = reliabilityLevel;
            return this;
        }

        public Builder reliabilityLevel(String reliabilityLevel) {
            return reliabilityLevel(Output.of(reliabilityLevel));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder reverseProxyCertificate(@Nullable Output<CertificateDescriptionArgs> reverseProxyCertificate) {
            $.reverseProxyCertificate = reverseProxyCertificate;
            return this;
        }

        public Builder reverseProxyCertificate(CertificateDescriptionArgs reverseProxyCertificate) {
            return reverseProxyCertificate(Output.of(reverseProxyCertificate));
        }

        public Builder reverseProxyCertificateCommonNames(@Nullable Output<ServerCertificateCommonNamesArgs> reverseProxyCertificateCommonNames) {
            $.reverseProxyCertificateCommonNames = reverseProxyCertificateCommonNames;
            return this;
        }

        public Builder reverseProxyCertificateCommonNames(ServerCertificateCommonNamesArgs reverseProxyCertificateCommonNames) {
            return reverseProxyCertificateCommonNames(Output.of(reverseProxyCertificateCommonNames));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder upgradeDescription(@Nullable Output<ClusterUpgradePolicyArgs> upgradeDescription) {
            $.upgradeDescription = upgradeDescription;
            return this;
        }

        public Builder upgradeDescription(ClusterUpgradePolicyArgs upgradeDescription) {
            return upgradeDescription(Output.of(upgradeDescription));
        }

        public Builder upgradeMode(@Nullable Output<String> upgradeMode) {
            $.upgradeMode = upgradeMode;
            return this;
        }

        public Builder upgradeMode(String upgradeMode) {
            return upgradeMode(Output.of(upgradeMode));
        }

        public Builder vmImage(@Nullable Output<String> vmImage) {
            $.vmImage = vmImage;
            return this;
        }

        public Builder vmImage(String vmImage) {
            return vmImage(Output.of(vmImage));
        }

        public ClusterArgs build() {
            $.managementEndpoint = Objects.requireNonNull($.managementEndpoint, "expected parameter 'managementEndpoint' to be non-null");
            $.nodeTypes = Objects.requireNonNull($.nodeTypes, "expected parameter 'nodeTypes' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
