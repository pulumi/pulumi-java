// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.servicefabric;

import com.pulumi.azurenative.servicefabric.inputs.ApplicationTypeVersionsCleanupPolicyArgs;
import com.pulumi.azurenative.servicefabric.inputs.AzureActiveDirectoryArgs;
import com.pulumi.azurenative.servicefabric.inputs.CertificateDescriptionArgs;
import com.pulumi.azurenative.servicefabric.inputs.ClientCertificateCommonNameArgs;
import com.pulumi.azurenative.servicefabric.inputs.ClientCertificateThumbprintArgs;
import com.pulumi.azurenative.servicefabric.inputs.ClusterUpgradePolicyArgs;
import com.pulumi.azurenative.servicefabric.inputs.DiagnosticsStorageAccountConfigArgs;
import com.pulumi.azurenative.servicefabric.inputs.NodeTypeDescriptionArgs;
import com.pulumi.azurenative.servicefabric.inputs.ServerCertificateCommonNamesArgs;
import com.pulumi.azurenative.servicefabric.inputs.SettingsSectionDescriptionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClusterArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClusterArgs Empty = new ClusterArgs();

    /**
     * The list of add-on features to enable in the cluster.
     * 
     */
    @Import(name="addOnFeatures")
    private @Nullable Output<List<String>> addOnFeatures;

    /**
     * @return The list of add-on features to enable in the cluster.
     * 
     */
    public Optional<Output<List<String>>> addOnFeatures() {
        return Optional.ofNullable(this.addOnFeatures);
    }

    /**
     * The policy used to clean up unused versions.
     * 
     */
    @Import(name="applicationTypeVersionsCleanupPolicy")
    private @Nullable Output<ApplicationTypeVersionsCleanupPolicyArgs> applicationTypeVersionsCleanupPolicy;

    /**
     * @return The policy used to clean up unused versions.
     * 
     */
    public Optional<Output<ApplicationTypeVersionsCleanupPolicyArgs>> applicationTypeVersionsCleanupPolicy() {
        return Optional.ofNullable(this.applicationTypeVersionsCleanupPolicy);
    }

    /**
     * The AAD authentication settings of the cluster.
     * 
     */
    @Import(name="azureActiveDirectory")
    private @Nullable Output<AzureActiveDirectoryArgs> azureActiveDirectory;

    /**
     * @return The AAD authentication settings of the cluster.
     * 
     */
    public Optional<Output<AzureActiveDirectoryArgs>> azureActiveDirectory() {
        return Optional.ofNullable(this.azureActiveDirectory);
    }

    /**
     * The certificate to use for securing the cluster. The certificate provided will be used for node to node security within the cluster, SSL certificate for cluster management endpoint and default admin client.
     * 
     */
    @Import(name="certificate")
    private @Nullable Output<CertificateDescriptionArgs> certificate;

    /**
     * @return The certificate to use for securing the cluster. The certificate provided will be used for node to node security within the cluster, SSL certificate for cluster management endpoint and default admin client.
     * 
     */
    public Optional<Output<CertificateDescriptionArgs>> certificate() {
        return Optional.ofNullable(this.certificate);
    }

    /**
     * Describes a list of server certificates referenced by common name that are used to secure the cluster.
     * 
     */
    @Import(name="certificateCommonNames")
    private @Nullable Output<ServerCertificateCommonNamesArgs> certificateCommonNames;

    /**
     * @return Describes a list of server certificates referenced by common name that are used to secure the cluster.
     * 
     */
    public Optional<Output<ServerCertificateCommonNamesArgs>> certificateCommonNames() {
        return Optional.ofNullable(this.certificateCommonNames);
    }

    /**
     * The list of client certificates referenced by common name that are allowed to manage the cluster.
     * 
     */
    @Import(name="clientCertificateCommonNames")
    private @Nullable Output<List<ClientCertificateCommonNameArgs>> clientCertificateCommonNames;

    /**
     * @return The list of client certificates referenced by common name that are allowed to manage the cluster.
     * 
     */
    public Optional<Output<List<ClientCertificateCommonNameArgs>>> clientCertificateCommonNames() {
        return Optional.ofNullable(this.clientCertificateCommonNames);
    }

    /**
     * The list of client certificates referenced by thumbprint that are allowed to manage the cluster.
     * 
     */
    @Import(name="clientCertificateThumbprints")
    private @Nullable Output<List<ClientCertificateThumbprintArgs>> clientCertificateThumbprints;

    /**
     * @return The list of client certificates referenced by thumbprint that are allowed to manage the cluster.
     * 
     */
    public Optional<Output<List<ClientCertificateThumbprintArgs>>> clientCertificateThumbprints() {
        return Optional.ofNullable(this.clientCertificateThumbprints);
    }

    /**
     * The Service Fabric runtime version of the cluster. This property can only by set the user when **upgradeMode** is set to &#39;Manual&#39;. To get list of available Service Fabric versions for new clusters use [ClusterVersion API](./ClusterVersion.md). To get the list of available version for existing clusters use **availableClusterVersions**.
     * 
     */
    @Import(name="clusterCodeVersion")
    private @Nullable Output<String> clusterCodeVersion;

    /**
     * @return The Service Fabric runtime version of the cluster. This property can only by set the user when **upgradeMode** is set to &#39;Manual&#39;. To get list of available Service Fabric versions for new clusters use [ClusterVersion API](./ClusterVersion.md). To get the list of available version for existing clusters use **availableClusterVersions**.
     * 
     */
    public Optional<Output<String>> clusterCodeVersion() {
        return Optional.ofNullable(this.clusterCodeVersion);
    }

    /**
     * The name of the cluster resource.
     * 
     */
    @Import(name="clusterName")
    private @Nullable Output<String> clusterName;

    /**
     * @return The name of the cluster resource.
     * 
     */
    public Optional<Output<String>> clusterName() {
        return Optional.ofNullable(this.clusterName);
    }

    /**
     * The storage account information for storing Service Fabric diagnostic logs.
     * 
     */
    @Import(name="diagnosticsStorageAccountConfig")
    private @Nullable Output<DiagnosticsStorageAccountConfigArgs> diagnosticsStorageAccountConfig;

    /**
     * @return The storage account information for storing Service Fabric diagnostic logs.
     * 
     */
    public Optional<Output<DiagnosticsStorageAccountConfigArgs>> diagnosticsStorageAccountConfig() {
        return Optional.ofNullable(this.diagnosticsStorageAccountConfig);
    }

    /**
     * Indicates if the event store service is enabled.
     * 
     */
    @Import(name="eventStoreServiceEnabled")
    private @Nullable Output<Boolean> eventStoreServiceEnabled;

    /**
     * @return Indicates if the event store service is enabled.
     * 
     */
    public Optional<Output<Boolean>> eventStoreServiceEnabled() {
        return Optional.ofNullable(this.eventStoreServiceEnabled);
    }

    /**
     * The list of custom fabric settings to configure the cluster.
     * 
     */
    @Import(name="fabricSettings")
    private @Nullable Output<List<SettingsSectionDescriptionArgs>> fabricSettings;

    /**
     * @return The list of custom fabric settings to configure the cluster.
     * 
     */
    public Optional<Output<List<SettingsSectionDescriptionArgs>>> fabricSettings() {
        return Optional.ofNullable(this.fabricSettings);
    }

    /**
     * Azure resource location.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Azure resource location.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The http management endpoint of the cluster.
     * 
     */
    @Import(name="managementEndpoint", required=true)
    private Output<String> managementEndpoint;

    /**
     * @return The http management endpoint of the cluster.
     * 
     */
    public Output<String> managementEndpoint() {
        return this.managementEndpoint;
    }

    /**
     * The list of node types in the cluster.
     * 
     */
    @Import(name="nodeTypes", required=true)
    private Output<List<NodeTypeDescriptionArgs>> nodeTypes;

    /**
     * @return The list of node types in the cluster.
     * 
     */
    public Output<List<NodeTypeDescriptionArgs>> nodeTypes() {
        return this.nodeTypes;
    }

    /**
     * The reliability level sets the replica set size of system services. Learn about [ReliabilityLevel](https://docs.microsoft.com/azure/service-fabric/service-fabric-cluster-capacity).
     * 
     *   - None - Run the System services with a target replica set count of 1. This should only be used for test clusters.
     *   - Bronze - Run the System services with a target replica set count of 3. This should only be used for test clusters.
     *   - Silver - Run the System services with a target replica set count of 5.
     *   - Gold - Run the System services with a target replica set count of 7.
     *   - Platinum - Run the System services with a target replica set count of 9.
     * 
     */
    @Import(name="reliabilityLevel")
    private @Nullable Output<String> reliabilityLevel;

    /**
     * @return The reliability level sets the replica set size of system services. Learn about [ReliabilityLevel](https://docs.microsoft.com/azure/service-fabric/service-fabric-cluster-capacity).
     * 
     *   - None - Run the System services with a target replica set count of 1. This should only be used for test clusters.
     *   - Bronze - Run the System services with a target replica set count of 3. This should only be used for test clusters.
     *   - Silver - Run the System services with a target replica set count of 5.
     *   - Gold - Run the System services with a target replica set count of 7.
     *   - Platinum - Run the System services with a target replica set count of 9.
     * 
     */
    public Optional<Output<String>> reliabilityLevel() {
        return Optional.ofNullable(this.reliabilityLevel);
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The server certificate used by reverse proxy.
     * 
     */
    @Import(name="reverseProxyCertificate")
    private @Nullable Output<CertificateDescriptionArgs> reverseProxyCertificate;

    /**
     * @return The server certificate used by reverse proxy.
     * 
     */
    public Optional<Output<CertificateDescriptionArgs>> reverseProxyCertificate() {
        return Optional.ofNullable(this.reverseProxyCertificate);
    }

    /**
     * Describes a list of server certificates referenced by common name that are used to secure the cluster.
     * 
     */
    @Import(name="reverseProxyCertificateCommonNames")
    private @Nullable Output<ServerCertificateCommonNamesArgs> reverseProxyCertificateCommonNames;

    /**
     * @return Describes a list of server certificates referenced by common name that are used to secure the cluster.
     * 
     */
    public Optional<Output<ServerCertificateCommonNamesArgs>> reverseProxyCertificateCommonNames() {
        return Optional.ofNullable(this.reverseProxyCertificateCommonNames);
    }

    /**
     * Azure resource tags.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Azure resource tags.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The policy to use when upgrading the cluster.
     * 
     */
    @Import(name="upgradeDescription")
    private @Nullable Output<ClusterUpgradePolicyArgs> upgradeDescription;

    /**
     * @return The policy to use when upgrading the cluster.
     * 
     */
    public Optional<Output<ClusterUpgradePolicyArgs>> upgradeDescription() {
        return Optional.ofNullable(this.upgradeDescription);
    }

    /**
     * The upgrade mode of the cluster when new Service Fabric runtime version is available.
     * 
     *   - Automatic - The cluster will be automatically upgraded to the latest Service Fabric runtime version as soon as it is available.
     *   - Manual - The cluster will not be automatically upgraded to the latest Service Fabric runtime version. The cluster is upgraded by setting the **clusterCodeVersion** property in the cluster resource.
     * 
     */
    @Import(name="upgradeMode")
    private @Nullable Output<String> upgradeMode;

    /**
     * @return The upgrade mode of the cluster when new Service Fabric runtime version is available.
     * 
     *   - Automatic - The cluster will be automatically upgraded to the latest Service Fabric runtime version as soon as it is available.
     *   - Manual - The cluster will not be automatically upgraded to the latest Service Fabric runtime version. The cluster is upgraded by setting the **clusterCodeVersion** property in the cluster resource.
     * 
     */
    public Optional<Output<String>> upgradeMode() {
        return Optional.ofNullable(this.upgradeMode);
    }

    /**
     * The VM image VMSS has been configured with. Generic names such as Windows or Linux can be used.
     * 
     */
    @Import(name="vmImage")
    private @Nullable Output<String> vmImage;

    /**
     * @return The VM image VMSS has been configured with. Generic names such as Windows or Linux can be used.
     * 
     */
    public Optional<Output<String>> vmImage() {
        return Optional.ofNullable(this.vmImage);
    }

    private ClusterArgs() {}

    private ClusterArgs(ClusterArgs $) {
        this.addOnFeatures = $.addOnFeatures;
        this.applicationTypeVersionsCleanupPolicy = $.applicationTypeVersionsCleanupPolicy;
        this.azureActiveDirectory = $.azureActiveDirectory;
        this.certificate = $.certificate;
        this.certificateCommonNames = $.certificateCommonNames;
        this.clientCertificateCommonNames = $.clientCertificateCommonNames;
        this.clientCertificateThumbprints = $.clientCertificateThumbprints;
        this.clusterCodeVersion = $.clusterCodeVersion;
        this.clusterName = $.clusterName;
        this.diagnosticsStorageAccountConfig = $.diagnosticsStorageAccountConfig;
        this.eventStoreServiceEnabled = $.eventStoreServiceEnabled;
        this.fabricSettings = $.fabricSettings;
        this.location = $.location;
        this.managementEndpoint = $.managementEndpoint;
        this.nodeTypes = $.nodeTypes;
        this.reliabilityLevel = $.reliabilityLevel;
        this.resourceGroupName = $.resourceGroupName;
        this.reverseProxyCertificate = $.reverseProxyCertificate;
        this.reverseProxyCertificateCommonNames = $.reverseProxyCertificateCommonNames;
        this.tags = $.tags;
        this.upgradeDescription = $.upgradeDescription;
        this.upgradeMode = $.upgradeMode;
        this.vmImage = $.vmImage;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClusterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClusterArgs $;

        public Builder() {
            $ = new ClusterArgs();
        }

        public Builder(ClusterArgs defaults) {
            $ = new ClusterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param addOnFeatures The list of add-on features to enable in the cluster.
         * 
         * @return builder
         * 
         */
        public Builder addOnFeatures(@Nullable Output<List<String>> addOnFeatures) {
            $.addOnFeatures = addOnFeatures;
            return this;
        }

        /**
         * @param addOnFeatures The list of add-on features to enable in the cluster.
         * 
         * @return builder
         * 
         */
        public Builder addOnFeatures(List<String> addOnFeatures) {
            return addOnFeatures(Output.of(addOnFeatures));
        }

        /**
         * @param addOnFeatures The list of add-on features to enable in the cluster.
         * 
         * @return builder
         * 
         */
        public Builder addOnFeatures(String... addOnFeatures) {
            return addOnFeatures(List.of(addOnFeatures));
        }

        /**
         * @param applicationTypeVersionsCleanupPolicy The policy used to clean up unused versions.
         * 
         * @return builder
         * 
         */
        public Builder applicationTypeVersionsCleanupPolicy(@Nullable Output<ApplicationTypeVersionsCleanupPolicyArgs> applicationTypeVersionsCleanupPolicy) {
            $.applicationTypeVersionsCleanupPolicy = applicationTypeVersionsCleanupPolicy;
            return this;
        }

        /**
         * @param applicationTypeVersionsCleanupPolicy The policy used to clean up unused versions.
         * 
         * @return builder
         * 
         */
        public Builder applicationTypeVersionsCleanupPolicy(ApplicationTypeVersionsCleanupPolicyArgs applicationTypeVersionsCleanupPolicy) {
            return applicationTypeVersionsCleanupPolicy(Output.of(applicationTypeVersionsCleanupPolicy));
        }

        /**
         * @param azureActiveDirectory The AAD authentication settings of the cluster.
         * 
         * @return builder
         * 
         */
        public Builder azureActiveDirectory(@Nullable Output<AzureActiveDirectoryArgs> azureActiveDirectory) {
            $.azureActiveDirectory = azureActiveDirectory;
            return this;
        }

        /**
         * @param azureActiveDirectory The AAD authentication settings of the cluster.
         * 
         * @return builder
         * 
         */
        public Builder azureActiveDirectory(AzureActiveDirectoryArgs azureActiveDirectory) {
            return azureActiveDirectory(Output.of(azureActiveDirectory));
        }

        /**
         * @param certificate The certificate to use for securing the cluster. The certificate provided will be used for node to node security within the cluster, SSL certificate for cluster management endpoint and default admin client.
         * 
         * @return builder
         * 
         */
        public Builder certificate(@Nullable Output<CertificateDescriptionArgs> certificate) {
            $.certificate = certificate;
            return this;
        }

        /**
         * @param certificate The certificate to use for securing the cluster. The certificate provided will be used for node to node security within the cluster, SSL certificate for cluster management endpoint and default admin client.
         * 
         * @return builder
         * 
         */
        public Builder certificate(CertificateDescriptionArgs certificate) {
            return certificate(Output.of(certificate));
        }

        /**
         * @param certificateCommonNames Describes a list of server certificates referenced by common name that are used to secure the cluster.
         * 
         * @return builder
         * 
         */
        public Builder certificateCommonNames(@Nullable Output<ServerCertificateCommonNamesArgs> certificateCommonNames) {
            $.certificateCommonNames = certificateCommonNames;
            return this;
        }

        /**
         * @param certificateCommonNames Describes a list of server certificates referenced by common name that are used to secure the cluster.
         * 
         * @return builder
         * 
         */
        public Builder certificateCommonNames(ServerCertificateCommonNamesArgs certificateCommonNames) {
            return certificateCommonNames(Output.of(certificateCommonNames));
        }

        /**
         * @param clientCertificateCommonNames The list of client certificates referenced by common name that are allowed to manage the cluster.
         * 
         * @return builder
         * 
         */
        public Builder clientCertificateCommonNames(@Nullable Output<List<ClientCertificateCommonNameArgs>> clientCertificateCommonNames) {
            $.clientCertificateCommonNames = clientCertificateCommonNames;
            return this;
        }

        /**
         * @param clientCertificateCommonNames The list of client certificates referenced by common name that are allowed to manage the cluster.
         * 
         * @return builder
         * 
         */
        public Builder clientCertificateCommonNames(List<ClientCertificateCommonNameArgs> clientCertificateCommonNames) {
            return clientCertificateCommonNames(Output.of(clientCertificateCommonNames));
        }

        /**
         * @param clientCertificateCommonNames The list of client certificates referenced by common name that are allowed to manage the cluster.
         * 
         * @return builder
         * 
         */
        public Builder clientCertificateCommonNames(ClientCertificateCommonNameArgs... clientCertificateCommonNames) {
            return clientCertificateCommonNames(List.of(clientCertificateCommonNames));
        }

        /**
         * @param clientCertificateThumbprints The list of client certificates referenced by thumbprint that are allowed to manage the cluster.
         * 
         * @return builder
         * 
         */
        public Builder clientCertificateThumbprints(@Nullable Output<List<ClientCertificateThumbprintArgs>> clientCertificateThumbprints) {
            $.clientCertificateThumbprints = clientCertificateThumbprints;
            return this;
        }

        /**
         * @param clientCertificateThumbprints The list of client certificates referenced by thumbprint that are allowed to manage the cluster.
         * 
         * @return builder
         * 
         */
        public Builder clientCertificateThumbprints(List<ClientCertificateThumbprintArgs> clientCertificateThumbprints) {
            return clientCertificateThumbprints(Output.of(clientCertificateThumbprints));
        }

        /**
         * @param clientCertificateThumbprints The list of client certificates referenced by thumbprint that are allowed to manage the cluster.
         * 
         * @return builder
         * 
         */
        public Builder clientCertificateThumbprints(ClientCertificateThumbprintArgs... clientCertificateThumbprints) {
            return clientCertificateThumbprints(List.of(clientCertificateThumbprints));
        }

        /**
         * @param clusterCodeVersion The Service Fabric runtime version of the cluster. This property can only by set the user when **upgradeMode** is set to &#39;Manual&#39;. To get list of available Service Fabric versions for new clusters use [ClusterVersion API](./ClusterVersion.md). To get the list of available version for existing clusters use **availableClusterVersions**.
         * 
         * @return builder
         * 
         */
        public Builder clusterCodeVersion(@Nullable Output<String> clusterCodeVersion) {
            $.clusterCodeVersion = clusterCodeVersion;
            return this;
        }

        /**
         * @param clusterCodeVersion The Service Fabric runtime version of the cluster. This property can only by set the user when **upgradeMode** is set to &#39;Manual&#39;. To get list of available Service Fabric versions for new clusters use [ClusterVersion API](./ClusterVersion.md). To get the list of available version for existing clusters use **availableClusterVersions**.
         * 
         * @return builder
         * 
         */
        public Builder clusterCodeVersion(String clusterCodeVersion) {
            return clusterCodeVersion(Output.of(clusterCodeVersion));
        }

        /**
         * @param clusterName The name of the cluster resource.
         * 
         * @return builder
         * 
         */
        public Builder clusterName(@Nullable Output<String> clusterName) {
            $.clusterName = clusterName;
            return this;
        }

        /**
         * @param clusterName The name of the cluster resource.
         * 
         * @return builder
         * 
         */
        public Builder clusterName(String clusterName) {
            return clusterName(Output.of(clusterName));
        }

        /**
         * @param diagnosticsStorageAccountConfig The storage account information for storing Service Fabric diagnostic logs.
         * 
         * @return builder
         * 
         */
        public Builder diagnosticsStorageAccountConfig(@Nullable Output<DiagnosticsStorageAccountConfigArgs> diagnosticsStorageAccountConfig) {
            $.diagnosticsStorageAccountConfig = diagnosticsStorageAccountConfig;
            return this;
        }

        /**
         * @param diagnosticsStorageAccountConfig The storage account information for storing Service Fabric diagnostic logs.
         * 
         * @return builder
         * 
         */
        public Builder diagnosticsStorageAccountConfig(DiagnosticsStorageAccountConfigArgs diagnosticsStorageAccountConfig) {
            return diagnosticsStorageAccountConfig(Output.of(diagnosticsStorageAccountConfig));
        }

        /**
         * @param eventStoreServiceEnabled Indicates if the event store service is enabled.
         * 
         * @return builder
         * 
         */
        public Builder eventStoreServiceEnabled(@Nullable Output<Boolean> eventStoreServiceEnabled) {
            $.eventStoreServiceEnabled = eventStoreServiceEnabled;
            return this;
        }

        /**
         * @param eventStoreServiceEnabled Indicates if the event store service is enabled.
         * 
         * @return builder
         * 
         */
        public Builder eventStoreServiceEnabled(Boolean eventStoreServiceEnabled) {
            return eventStoreServiceEnabled(Output.of(eventStoreServiceEnabled));
        }

        /**
         * @param fabricSettings The list of custom fabric settings to configure the cluster.
         * 
         * @return builder
         * 
         */
        public Builder fabricSettings(@Nullable Output<List<SettingsSectionDescriptionArgs>> fabricSettings) {
            $.fabricSettings = fabricSettings;
            return this;
        }

        /**
         * @param fabricSettings The list of custom fabric settings to configure the cluster.
         * 
         * @return builder
         * 
         */
        public Builder fabricSettings(List<SettingsSectionDescriptionArgs> fabricSettings) {
            return fabricSettings(Output.of(fabricSettings));
        }

        /**
         * @param fabricSettings The list of custom fabric settings to configure the cluster.
         * 
         * @return builder
         * 
         */
        public Builder fabricSettings(SettingsSectionDescriptionArgs... fabricSettings) {
            return fabricSettings(List.of(fabricSettings));
        }

        /**
         * @param location Azure resource location.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Azure resource location.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param managementEndpoint The http management endpoint of the cluster.
         * 
         * @return builder
         * 
         */
        public Builder managementEndpoint(Output<String> managementEndpoint) {
            $.managementEndpoint = managementEndpoint;
            return this;
        }

        /**
         * @param managementEndpoint The http management endpoint of the cluster.
         * 
         * @return builder
         * 
         */
        public Builder managementEndpoint(String managementEndpoint) {
            return managementEndpoint(Output.of(managementEndpoint));
        }

        /**
         * @param nodeTypes The list of node types in the cluster.
         * 
         * @return builder
         * 
         */
        public Builder nodeTypes(Output<List<NodeTypeDescriptionArgs>> nodeTypes) {
            $.nodeTypes = nodeTypes;
            return this;
        }

        /**
         * @param nodeTypes The list of node types in the cluster.
         * 
         * @return builder
         * 
         */
        public Builder nodeTypes(List<NodeTypeDescriptionArgs> nodeTypes) {
            return nodeTypes(Output.of(nodeTypes));
        }

        /**
         * @param nodeTypes The list of node types in the cluster.
         * 
         * @return builder
         * 
         */
        public Builder nodeTypes(NodeTypeDescriptionArgs... nodeTypes) {
            return nodeTypes(List.of(nodeTypes));
        }

        /**
         * @param reliabilityLevel The reliability level sets the replica set size of system services. Learn about [ReliabilityLevel](https://docs.microsoft.com/azure/service-fabric/service-fabric-cluster-capacity).
         * 
         *   - None - Run the System services with a target replica set count of 1. This should only be used for test clusters.
         *   - Bronze - Run the System services with a target replica set count of 3. This should only be used for test clusters.
         *   - Silver - Run the System services with a target replica set count of 5.
         *   - Gold - Run the System services with a target replica set count of 7.
         *   - Platinum - Run the System services with a target replica set count of 9.
         * 
         * @return builder
         * 
         */
        public Builder reliabilityLevel(@Nullable Output<String> reliabilityLevel) {
            $.reliabilityLevel = reliabilityLevel;
            return this;
        }

        /**
         * @param reliabilityLevel The reliability level sets the replica set size of system services. Learn about [ReliabilityLevel](https://docs.microsoft.com/azure/service-fabric/service-fabric-cluster-capacity).
         * 
         *   - None - Run the System services with a target replica set count of 1. This should only be used for test clusters.
         *   - Bronze - Run the System services with a target replica set count of 3. This should only be used for test clusters.
         *   - Silver - Run the System services with a target replica set count of 5.
         *   - Gold - Run the System services with a target replica set count of 7.
         *   - Platinum - Run the System services with a target replica set count of 9.
         * 
         * @return builder
         * 
         */
        public Builder reliabilityLevel(String reliabilityLevel) {
            return reliabilityLevel(Output.of(reliabilityLevel));
        }

        /**
         * @param resourceGroupName The name of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param reverseProxyCertificate The server certificate used by reverse proxy.
         * 
         * @return builder
         * 
         */
        public Builder reverseProxyCertificate(@Nullable Output<CertificateDescriptionArgs> reverseProxyCertificate) {
            $.reverseProxyCertificate = reverseProxyCertificate;
            return this;
        }

        /**
         * @param reverseProxyCertificate The server certificate used by reverse proxy.
         * 
         * @return builder
         * 
         */
        public Builder reverseProxyCertificate(CertificateDescriptionArgs reverseProxyCertificate) {
            return reverseProxyCertificate(Output.of(reverseProxyCertificate));
        }

        /**
         * @param reverseProxyCertificateCommonNames Describes a list of server certificates referenced by common name that are used to secure the cluster.
         * 
         * @return builder
         * 
         */
        public Builder reverseProxyCertificateCommonNames(@Nullable Output<ServerCertificateCommonNamesArgs> reverseProxyCertificateCommonNames) {
            $.reverseProxyCertificateCommonNames = reverseProxyCertificateCommonNames;
            return this;
        }

        /**
         * @param reverseProxyCertificateCommonNames Describes a list of server certificates referenced by common name that are used to secure the cluster.
         * 
         * @return builder
         * 
         */
        public Builder reverseProxyCertificateCommonNames(ServerCertificateCommonNamesArgs reverseProxyCertificateCommonNames) {
            return reverseProxyCertificateCommonNames(Output.of(reverseProxyCertificateCommonNames));
        }

        /**
         * @param tags Azure resource tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Azure resource tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param upgradeDescription The policy to use when upgrading the cluster.
         * 
         * @return builder
         * 
         */
        public Builder upgradeDescription(@Nullable Output<ClusterUpgradePolicyArgs> upgradeDescription) {
            $.upgradeDescription = upgradeDescription;
            return this;
        }

        /**
         * @param upgradeDescription The policy to use when upgrading the cluster.
         * 
         * @return builder
         * 
         */
        public Builder upgradeDescription(ClusterUpgradePolicyArgs upgradeDescription) {
            return upgradeDescription(Output.of(upgradeDescription));
        }

        /**
         * @param upgradeMode The upgrade mode of the cluster when new Service Fabric runtime version is available.
         * 
         *   - Automatic - The cluster will be automatically upgraded to the latest Service Fabric runtime version as soon as it is available.
         *   - Manual - The cluster will not be automatically upgraded to the latest Service Fabric runtime version. The cluster is upgraded by setting the **clusterCodeVersion** property in the cluster resource.
         * 
         * @return builder
         * 
         */
        public Builder upgradeMode(@Nullable Output<String> upgradeMode) {
            $.upgradeMode = upgradeMode;
            return this;
        }

        /**
         * @param upgradeMode The upgrade mode of the cluster when new Service Fabric runtime version is available.
         * 
         *   - Automatic - The cluster will be automatically upgraded to the latest Service Fabric runtime version as soon as it is available.
         *   - Manual - The cluster will not be automatically upgraded to the latest Service Fabric runtime version. The cluster is upgraded by setting the **clusterCodeVersion** property in the cluster resource.
         * 
         * @return builder
         * 
         */
        public Builder upgradeMode(String upgradeMode) {
            return upgradeMode(Output.of(upgradeMode));
        }

        /**
         * @param vmImage The VM image VMSS has been configured with. Generic names such as Windows or Linux can be used.
         * 
         * @return builder
         * 
         */
        public Builder vmImage(@Nullable Output<String> vmImage) {
            $.vmImage = vmImage;
            return this;
        }

        /**
         * @param vmImage The VM image VMSS has been configured with. Generic names such as Windows or Linux can be used.
         * 
         * @return builder
         * 
         */
        public Builder vmImage(String vmImage) {
            return vmImage(Output.of(vmImage));
        }

        public ClusterArgs build() {
            $.managementEndpoint = Objects.requireNonNull($.managementEndpoint, "expected parameter 'managementEndpoint' to be non-null");
            $.nodeTypes = Objects.requireNonNull($.nodeTypes, "expected parameter 'nodeTypes' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
