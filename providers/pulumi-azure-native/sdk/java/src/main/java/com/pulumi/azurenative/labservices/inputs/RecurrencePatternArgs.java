// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.labservices.inputs;

import com.pulumi.azurenative.labservices.enums.RecurrenceFrequency;
import com.pulumi.azurenative.labservices.enums.WeekDay;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Recurrence pattern of a lab schedule.
 * 
 */
public final class RecurrencePatternArgs extends com.pulumi.resources.ResourceArgs {

    public static final RecurrencePatternArgs Empty = new RecurrencePatternArgs();

    /**
     * When the recurrence will expire. This date is inclusive.
     * 
     */
    @Import(name="expirationDate", required=true)
      private final Output<String> expirationDate;

    public Output<String> expirationDate() {
        return this.expirationDate;
    }

    /**
     * The frequency of the recurrence.
     * 
     */
    @Import(name="frequency", required=true)
      private final Output<RecurrenceFrequency> frequency;

    public Output<RecurrenceFrequency> frequency() {
        return this.frequency;
    }

    /**
     * The interval to invoke the schedule on. For example, interval = 2 and RecurrenceFrequency.Daily will run every 2 days. When no interval is supplied, an interval of 1 is used.
     * 
     */
    @Import(name="interval")
      private final @Nullable Output<Integer> interval;

    public Output<Integer> interval() {
        return this.interval == null ? Codegen.empty() : this.interval;
    }

    /**
     * The week days the schedule runs. Used for when the Frequency is set to Weekly.
     * 
     */
    @Import(name="weekDays")
      private final @Nullable Output<List<WeekDay>> weekDays;

    public Output<List<WeekDay>> weekDays() {
        return this.weekDays == null ? Codegen.empty() : this.weekDays;
    }

    public RecurrencePatternArgs(
        Output<String> expirationDate,
        Output<RecurrenceFrequency> frequency,
        @Nullable Output<Integer> interval,
        @Nullable Output<List<WeekDay>> weekDays) {
        this.expirationDate = Objects.requireNonNull(expirationDate, "expected parameter 'expirationDate' to be non-null");
        this.frequency = Objects.requireNonNull(frequency, "expected parameter 'frequency' to be non-null");
        this.interval = interval;
        this.weekDays = weekDays;
    }

    private RecurrencePatternArgs() {
        this.expirationDate = Codegen.empty();
        this.frequency = Codegen.empty();
        this.interval = Codegen.empty();
        this.weekDays = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RecurrencePatternArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> expirationDate;
        private Output<RecurrenceFrequency> frequency;
        private @Nullable Output<Integer> interval;
        private @Nullable Output<List<WeekDay>> weekDays;

        public Builder() {
    	      // Empty
        }

        public Builder(RecurrencePatternArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.expirationDate = defaults.expirationDate;
    	      this.frequency = defaults.frequency;
    	      this.interval = defaults.interval;
    	      this.weekDays = defaults.weekDays;
        }

        public Builder expirationDate(Output<String> expirationDate) {
            this.expirationDate = Objects.requireNonNull(expirationDate);
            return this;
        }
        public Builder expirationDate(String expirationDate) {
            this.expirationDate = Output.of(Objects.requireNonNull(expirationDate));
            return this;
        }
        public Builder frequency(Output<RecurrenceFrequency> frequency) {
            this.frequency = Objects.requireNonNull(frequency);
            return this;
        }
        public Builder frequency(RecurrenceFrequency frequency) {
            this.frequency = Output.of(Objects.requireNonNull(frequency));
            return this;
        }
        public Builder interval(@Nullable Output<Integer> interval) {
            this.interval = interval;
            return this;
        }
        public Builder interval(@Nullable Integer interval) {
            this.interval = Codegen.ofNullable(interval);
            return this;
        }
        public Builder weekDays(@Nullable Output<List<WeekDay>> weekDays) {
            this.weekDays = weekDays;
            return this;
        }
        public Builder weekDays(@Nullable List<WeekDay> weekDays) {
            this.weekDays = Codegen.ofNullable(weekDays);
            return this;
        }
        public Builder weekDays(WeekDay... weekDays) {
            return weekDays(List.of(weekDays));
        }        public RecurrencePatternArgs build() {
            return new RecurrencePatternArgs(expirationDate, frequency, interval, weekDays);
        }
    }
}
