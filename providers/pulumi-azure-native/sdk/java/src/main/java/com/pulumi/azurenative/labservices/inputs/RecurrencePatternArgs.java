// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.labservices.inputs;

import com.pulumi.azurenative.labservices.enums.RecurrenceFrequency;
import com.pulumi.azurenative.labservices.enums.WeekDay;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Recurrence pattern of a lab schedule.
 * 
 */
public final class RecurrencePatternArgs extends com.pulumi.resources.ResourceArgs {

    public static final RecurrencePatternArgs Empty = new RecurrencePatternArgs();

    /**
     * When the recurrence will expire. This date is inclusive.
     * 
     */
    @Import(name="expirationDate", required=true)
    private Output<String> expirationDate;

    public Output<String> expirationDate() {
        return this.expirationDate;
    }

    /**
     * The frequency of the recurrence.
     * 
     */
    @Import(name="frequency", required=true)
    private Output<RecurrenceFrequency> frequency;

    public Output<RecurrenceFrequency> frequency() {
        return this.frequency;
    }

    /**
     * The interval to invoke the schedule on. For example, interval = 2 and RecurrenceFrequency.Daily will run every 2 days. When no interval is supplied, an interval of 1 is used.
     * 
     */
    @Import(name="interval")
    private @Nullable Output<Integer> interval;

    public Optional<Output<Integer>> interval() {
        return Optional.ofNullable(this.interval);
    }

    /**
     * The week days the schedule runs. Used for when the Frequency is set to Weekly.
     * 
     */
    @Import(name="weekDays")
    private @Nullable Output<List<WeekDay>> weekDays;

    public Optional<Output<List<WeekDay>>> weekDays() {
        return Optional.ofNullable(this.weekDays);
    }

    private RecurrencePatternArgs() {}

    private RecurrencePatternArgs(RecurrencePatternArgs $) {
        this.expirationDate = $.expirationDate;
        this.frequency = $.frequency;
        this.interval = $.interval;
        this.weekDays = $.weekDays;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RecurrencePatternArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RecurrencePatternArgs $;

        public Builder() {
            $ = new RecurrencePatternArgs();
        }

        public Builder(RecurrencePatternArgs defaults) {
            $ = new RecurrencePatternArgs(Objects.requireNonNull(defaults));
        }

        public Builder expirationDate(Output<String> expirationDate) {
            $.expirationDate = expirationDate;
            return this;
        }

        public Builder expirationDate(String expirationDate) {
            return expirationDate(Output.of(expirationDate));
        }

        public Builder frequency(Output<RecurrenceFrequency> frequency) {
            $.frequency = frequency;
            return this;
        }

        public Builder frequency(RecurrenceFrequency frequency) {
            return frequency(Output.of(frequency));
        }

        public Builder interval(@Nullable Output<Integer> interval) {
            $.interval = interval;
            return this;
        }

        public Builder interval(Integer interval) {
            return interval(Output.of(interval));
        }

        public Builder weekDays(@Nullable Output<List<WeekDay>> weekDays) {
            $.weekDays = weekDays;
            return this;
        }

        public Builder weekDays(List<WeekDay> weekDays) {
            return weekDays(Output.of(weekDays));
        }

        public Builder weekDays(WeekDay... weekDays) {
            return weekDays(List.of(weekDays));
        }

        public RecurrencePatternArgs build() {
            $.expirationDate = Objects.requireNonNull($.expirationDate, "expected parameter 'expirationDate' to be non-null");
            $.frequency = Objects.requireNonNull($.frequency, "expected parameter 'frequency' to be non-null");
            return $;
        }
    }

}
