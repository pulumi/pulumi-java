// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.management.inputs;

import com.pulumi.azurenative.management.inputs.EntityParentGroupInfoResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The entity.
 * 
 */
public final class EntityInfoResponse extends com.pulumi.resources.InvokeArgs {

    public static final EntityInfoResponse Empty = new EntityInfoResponse();

    /**
     * The friendly name of the management group.
     * 
     */
    @Import(name="displayName")
    private @Nullable String displayName;

    /**
     * @return The friendly name of the management group.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * The fully qualified ID for the entity.  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000
     * 
     */
    @Import(name="id", required=true)
    private String id;

    /**
     * @return The fully qualified ID for the entity.  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000
     * 
     */
    public String id() {
        return this.id;
    }

    /**
     * The users specific permissions to this item.
     * 
     */
    @Import(name="inheritedPermissions")
    private @Nullable String inheritedPermissions;

    /**
     * @return The users specific permissions to this item.
     * 
     */
    public Optional<String> inheritedPermissions() {
        return Optional.ofNullable(this.inheritedPermissions);
    }

    /**
     * The name of the entity. For example, 00000000-0000-0000-0000-000000000000
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return The name of the entity. For example, 00000000-0000-0000-0000-000000000000
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * Number of children is the number of Groups that are exactly one level underneath the current Group.
     * 
     */
    @Import(name="numberOfChildGroups")
    private @Nullable Integer numberOfChildGroups;

    /**
     * @return Number of children is the number of Groups that are exactly one level underneath the current Group.
     * 
     */
    public Optional<Integer> numberOfChildGroups() {
        return Optional.ofNullable(this.numberOfChildGroups);
    }

    /**
     * Number of children is the number of Groups and Subscriptions that are exactly one level underneath the current Group.
     * 
     */
    @Import(name="numberOfChildren")
    private @Nullable Integer numberOfChildren;

    /**
     * @return Number of children is the number of Groups and Subscriptions that are exactly one level underneath the current Group.
     * 
     */
    public Optional<Integer> numberOfChildren() {
        return Optional.ofNullable(this.numberOfChildren);
    }

    @Import(name="numberOfDescendants")
    private @Nullable Integer numberOfDescendants;

    public Optional<Integer> numberOfDescendants() {
        return Optional.ofNullable(this.numberOfDescendants);
    }

    /**
     * (Optional) The ID of the parent management group.
     * 
     */
    @Import(name="parent")
    private @Nullable EntityParentGroupInfoResponse parent;

    /**
     * @return (Optional) The ID of the parent management group.
     * 
     */
    public Optional<EntityParentGroupInfoResponse> parent() {
        return Optional.ofNullable(this.parent);
    }

    /**
     * The parent display name chain from the root group to the immediate parent
     * 
     */
    @Import(name="parentDisplayNameChain")
    private @Nullable List<String> parentDisplayNameChain;

    /**
     * @return The parent display name chain from the root group to the immediate parent
     * 
     */
    public Optional<List<String>> parentDisplayNameChain() {
        return Optional.ofNullable(this.parentDisplayNameChain);
    }

    /**
     * The parent name chain from the root group to the immediate parent
     * 
     */
    @Import(name="parentNameChain")
    private @Nullable List<String> parentNameChain;

    /**
     * @return The parent name chain from the root group to the immediate parent
     * 
     */
    public Optional<List<String>> parentNameChain() {
        return Optional.ofNullable(this.parentNameChain);
    }

    /**
     * The users specific permissions to this item.
     * 
     */
    @Import(name="permissions")
    private @Nullable String permissions;

    /**
     * @return The users specific permissions to this item.
     * 
     */
    public Optional<String> permissions() {
        return Optional.ofNullable(this.permissions);
    }

    /**
     * The AAD Tenant ID associated with the entity. For example, 00000000-0000-0000-0000-000000000000
     * 
     */
    @Import(name="tenantId")
    private @Nullable String tenantId;

    /**
     * @return The AAD Tenant ID associated with the entity. For example, 00000000-0000-0000-0000-000000000000
     * 
     */
    public Optional<String> tenantId() {
        return Optional.ofNullable(this.tenantId);
    }

    /**
     * The type of the resource. For example, Microsoft.Management/managementGroups
     * 
     */
    @Import(name="type", required=true)
    private String type;

    /**
     * @return The type of the resource. For example, Microsoft.Management/managementGroups
     * 
     */
    public String type() {
        return this.type;
    }

    private EntityInfoResponse() {}

    private EntityInfoResponse(EntityInfoResponse $) {
        this.displayName = $.displayName;
        this.id = $.id;
        this.inheritedPermissions = $.inheritedPermissions;
        this.name = $.name;
        this.numberOfChildGroups = $.numberOfChildGroups;
        this.numberOfChildren = $.numberOfChildren;
        this.numberOfDescendants = $.numberOfDescendants;
        this.parent = $.parent;
        this.parentDisplayNameChain = $.parentDisplayNameChain;
        this.parentNameChain = $.parentNameChain;
        this.permissions = $.permissions;
        this.tenantId = $.tenantId;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EntityInfoResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EntityInfoResponse $;

        public Builder() {
            $ = new EntityInfoResponse();
        }

        public Builder(EntityInfoResponse defaults) {
            $ = new EntityInfoResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param displayName The friendly name of the management group.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable String displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param id The fully qualified ID for the entity.  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            $.id = id;
            return this;
        }

        /**
         * @param inheritedPermissions The users specific permissions to this item.
         * 
         * @return builder
         * 
         */
        public Builder inheritedPermissions(@Nullable String inheritedPermissions) {
            $.inheritedPermissions = inheritedPermissions;
            return this;
        }

        /**
         * @param name The name of the entity. For example, 00000000-0000-0000-0000-000000000000
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param numberOfChildGroups Number of children is the number of Groups that are exactly one level underneath the current Group.
         * 
         * @return builder
         * 
         */
        public Builder numberOfChildGroups(@Nullable Integer numberOfChildGroups) {
            $.numberOfChildGroups = numberOfChildGroups;
            return this;
        }

        /**
         * @param numberOfChildren Number of children is the number of Groups and Subscriptions that are exactly one level underneath the current Group.
         * 
         * @return builder
         * 
         */
        public Builder numberOfChildren(@Nullable Integer numberOfChildren) {
            $.numberOfChildren = numberOfChildren;
            return this;
        }

        public Builder numberOfDescendants(@Nullable Integer numberOfDescendants) {
            $.numberOfDescendants = numberOfDescendants;
            return this;
        }

        /**
         * @param parent (Optional) The ID of the parent management group.
         * 
         * @return builder
         * 
         */
        public Builder parent(@Nullable EntityParentGroupInfoResponse parent) {
            $.parent = parent;
            return this;
        }

        /**
         * @param parentDisplayNameChain The parent display name chain from the root group to the immediate parent
         * 
         * @return builder
         * 
         */
        public Builder parentDisplayNameChain(@Nullable List<String> parentDisplayNameChain) {
            $.parentDisplayNameChain = parentDisplayNameChain;
            return this;
        }

        /**
         * @param parentDisplayNameChain The parent display name chain from the root group to the immediate parent
         * 
         * @return builder
         * 
         */
        public Builder parentDisplayNameChain(String... parentDisplayNameChain) {
            return parentDisplayNameChain(List.of(parentDisplayNameChain));
        }

        /**
         * @param parentNameChain The parent name chain from the root group to the immediate parent
         * 
         * @return builder
         * 
         */
        public Builder parentNameChain(@Nullable List<String> parentNameChain) {
            $.parentNameChain = parentNameChain;
            return this;
        }

        /**
         * @param parentNameChain The parent name chain from the root group to the immediate parent
         * 
         * @return builder
         * 
         */
        public Builder parentNameChain(String... parentNameChain) {
            return parentNameChain(List.of(parentNameChain));
        }

        /**
         * @param permissions The users specific permissions to this item.
         * 
         * @return builder
         * 
         */
        public Builder permissions(@Nullable String permissions) {
            $.permissions = permissions;
            return this;
        }

        /**
         * @param tenantId The AAD Tenant ID associated with the entity. For example, 00000000-0000-0000-0000-000000000000
         * 
         * @return builder
         * 
         */
        public Builder tenantId(@Nullable String tenantId) {
            $.tenantId = tenantId;
            return this;
        }

        /**
         * @param type The type of the resource. For example, Microsoft.Management/managementGroups
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public EntityInfoResponse build() {
            $.id = Objects.requireNonNull($.id, "expected parameter 'id' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
