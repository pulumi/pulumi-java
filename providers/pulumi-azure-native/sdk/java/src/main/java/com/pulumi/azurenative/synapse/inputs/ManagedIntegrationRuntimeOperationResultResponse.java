// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.synapse.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Properties of managed integration runtime operation result.
 * 
 */
public final class ManagedIntegrationRuntimeOperationResultResponse extends com.pulumi.resources.InvokeArgs {

    public static final ManagedIntegrationRuntimeOperationResultResponse Empty = new ManagedIntegrationRuntimeOperationResultResponse();

    /**
     * The activity id for the operation request.
     * 
     */
    @Import(name="activityId", required=true)
    private String activityId;

    /**
     * @return The activity id for the operation request.
     * 
     */
    public String activityId() {
        return this.activityId;
    }

    /**
     * The error code.
     * 
     */
    @Import(name="errorCode", required=true)
    private String errorCode;

    /**
     * @return The error code.
     * 
     */
    public String errorCode() {
        return this.errorCode;
    }

    /**
     * Managed integration runtime error parameters.
     * 
     */
    @Import(name="parameters", required=true)
    private List<String> parameters;

    /**
     * @return Managed integration runtime error parameters.
     * 
     */
    public List<String> parameters() {
        return this.parameters;
    }

    /**
     * The operation result.
     * 
     */
    @Import(name="result", required=true)
    private String result;

    /**
     * @return The operation result.
     * 
     */
    public String result() {
        return this.result;
    }

    /**
     * The start time of the operation.
     * 
     */
    @Import(name="startTime", required=true)
    private String startTime;

    /**
     * @return The start time of the operation.
     * 
     */
    public String startTime() {
        return this.startTime;
    }

    /**
     * The operation type. Could be start or stop.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    /**
     * @return The operation type. Could be start or stop.
     * 
     */
    public String type() {
        return this.type;
    }

    private ManagedIntegrationRuntimeOperationResultResponse() {}

    private ManagedIntegrationRuntimeOperationResultResponse(ManagedIntegrationRuntimeOperationResultResponse $) {
        this.activityId = $.activityId;
        this.errorCode = $.errorCode;
        this.parameters = $.parameters;
        this.result = $.result;
        this.startTime = $.startTime;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagedIntegrationRuntimeOperationResultResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagedIntegrationRuntimeOperationResultResponse $;

        public Builder() {
            $ = new ManagedIntegrationRuntimeOperationResultResponse();
        }

        public Builder(ManagedIntegrationRuntimeOperationResultResponse defaults) {
            $ = new ManagedIntegrationRuntimeOperationResultResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param activityId The activity id for the operation request.
         * 
         * @return builder
         * 
         */
        public Builder activityId(String activityId) {
            $.activityId = activityId;
            return this;
        }

        /**
         * @param errorCode The error code.
         * 
         * @return builder
         * 
         */
        public Builder errorCode(String errorCode) {
            $.errorCode = errorCode;
            return this;
        }

        /**
         * @param parameters Managed integration runtime error parameters.
         * 
         * @return builder
         * 
         */
        public Builder parameters(List<String> parameters) {
            $.parameters = parameters;
            return this;
        }

        /**
         * @param parameters Managed integration runtime error parameters.
         * 
         * @return builder
         * 
         */
        public Builder parameters(String... parameters) {
            return parameters(List.of(parameters));
        }

        /**
         * @param result The operation result.
         * 
         * @return builder
         * 
         */
        public Builder result(String result) {
            $.result = result;
            return this;
        }

        /**
         * @param startTime The start time of the operation.
         * 
         * @return builder
         * 
         */
        public Builder startTime(String startTime) {
            $.startTime = startTime;
            return this;
        }

        /**
         * @param type The operation type. Could be start or stop.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public ManagedIntegrationRuntimeOperationResultResponse build() {
            $.activityId = Objects.requireNonNull($.activityId, "expected parameter 'activityId' to be non-null");
            $.errorCode = Objects.requireNonNull($.errorCode, "expected parameter 'errorCode' to be non-null");
            $.parameters = Objects.requireNonNull($.parameters, "expected parameter 'parameters' to be non-null");
            $.result = Objects.requireNonNull($.result, "expected parameter 'result' to be non-null");
            $.startTime = Objects.requireNonNull($.startTime, "expected parameter 'startTime' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
