// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.databoxedge.inputs;

import com.pulumi.azurenative.databoxedge.inputs.AsymmetricEncryptedSecretResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Image repository credential.
 * 
 */
public final class ImageRepositoryCredentialResponse extends com.pulumi.resources.InvokeArgs {

    public static final ImageRepositoryCredentialResponse Empty = new ImageRepositoryCredentialResponse();

    /**
     * Image repository url (e.g.: mcr.microsoft.com).
     * 
     */
    @Import(name="imageRepositoryUrl", required=true)
    private String imageRepositoryUrl;

    /**
     * @return Image repository url (e.g.: mcr.microsoft.com).
     * 
     */
    public String imageRepositoryUrl() {
        return this.imageRepositoryUrl;
    }

    /**
     * Repository user password.
     * 
     */
    @Import(name="password")
    private @Nullable AsymmetricEncryptedSecretResponse password;

    /**
     * @return Repository user password.
     * 
     */
    public Optional<AsymmetricEncryptedSecretResponse> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * Repository user name.
     * 
     */
    @Import(name="userName", required=true)
    private String userName;

    /**
     * @return Repository user name.
     * 
     */
    public String userName() {
        return this.userName;
    }

    private ImageRepositoryCredentialResponse() {}

    private ImageRepositoryCredentialResponse(ImageRepositoryCredentialResponse $) {
        this.imageRepositoryUrl = $.imageRepositoryUrl;
        this.password = $.password;
        this.userName = $.userName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ImageRepositoryCredentialResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ImageRepositoryCredentialResponse $;

        public Builder() {
            $ = new ImageRepositoryCredentialResponse();
        }

        public Builder(ImageRepositoryCredentialResponse defaults) {
            $ = new ImageRepositoryCredentialResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param imageRepositoryUrl Image repository url (e.g.: mcr.microsoft.com).
         * 
         * @return builder
         * 
         */
        public Builder imageRepositoryUrl(String imageRepositoryUrl) {
            $.imageRepositoryUrl = imageRepositoryUrl;
            return this;
        }

        /**
         * @param password Repository user password.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable AsymmetricEncryptedSecretResponse password) {
            $.password = password;
            return this;
        }

        /**
         * @param userName Repository user name.
         * 
         * @return builder
         * 
         */
        public Builder userName(String userName) {
            $.userName = userName;
            return this;
        }

        public ImageRepositoryCredentialResponse build() {
            $.imageRepositoryUrl = Objects.requireNonNull($.imageRepositoryUrl, "expected parameter 'imageRepositoryUrl' to be non-null");
            $.userName = Objects.requireNonNull($.userName, "expected parameter 'userName' to be non-null");
            return $;
        }
    }

}
