// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.hdinsight.inputs;

import com.pulumi.azurenative.hdinsight.enums.PrivateLink;
import com.pulumi.azurenative.hdinsight.enums.ResourceProviderConnection;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The network properties.
 * 
 */
public final class NetworkPropertiesArgs extends com.pulumi.resources.ResourceArgs {

    public static final NetworkPropertiesArgs Empty = new NetworkPropertiesArgs();

    /**
     * Indicates whether or not private link is enabled.
     * 
     */
    @Import(name="privateLink")
    private @Nullable Output<Either<String,PrivateLink>> privateLink;

    /**
     * @return Indicates whether or not private link is enabled.
     * 
     */
    public Optional<Output<Either<String,PrivateLink>>> privateLink() {
        return Optional.ofNullable(this.privateLink);
    }

    /**
     * The direction for the resource provider connection.
     * 
     */
    @Import(name="resourceProviderConnection")
    private @Nullable Output<Either<String,ResourceProviderConnection>> resourceProviderConnection;

    /**
     * @return The direction for the resource provider connection.
     * 
     */
    public Optional<Output<Either<String,ResourceProviderConnection>>> resourceProviderConnection() {
        return Optional.ofNullable(this.resourceProviderConnection);
    }

    private NetworkPropertiesArgs() {}

    private NetworkPropertiesArgs(NetworkPropertiesArgs $) {
        this.privateLink = $.privateLink;
        this.resourceProviderConnection = $.resourceProviderConnection;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkPropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkPropertiesArgs $;

        public Builder() {
            $ = new NetworkPropertiesArgs();
        }

        public Builder(NetworkPropertiesArgs defaults) {
            $ = new NetworkPropertiesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param privateLink Indicates whether or not private link is enabled.
         * 
         * @return builder
         * 
         */
        public Builder privateLink(@Nullable Output<Either<String,PrivateLink>> privateLink) {
            $.privateLink = privateLink;
            return this;
        }

        /**
         * @param privateLink Indicates whether or not private link is enabled.
         * 
         * @return builder
         * 
         */
        public Builder privateLink(Either<String,PrivateLink> privateLink) {
            return privateLink(Output.of(privateLink));
        }

        /**
         * @param privateLink Indicates whether or not private link is enabled.
         * 
         * @return builder
         * 
         */
        public Builder privateLink(String privateLink) {
            return privateLink(Either.ofLeft(privateLink));
        }

        /**
         * @param privateLink Indicates whether or not private link is enabled.
         * 
         * @return builder
         * 
         */
        public Builder privateLink(PrivateLink privateLink) {
            return privateLink(Either.ofRight(privateLink));
        }

        /**
         * @param resourceProviderConnection The direction for the resource provider connection.
         * 
         * @return builder
         * 
         */
        public Builder resourceProviderConnection(@Nullable Output<Either<String,ResourceProviderConnection>> resourceProviderConnection) {
            $.resourceProviderConnection = resourceProviderConnection;
            return this;
        }

        /**
         * @param resourceProviderConnection The direction for the resource provider connection.
         * 
         * @return builder
         * 
         */
        public Builder resourceProviderConnection(Either<String,ResourceProviderConnection> resourceProviderConnection) {
            return resourceProviderConnection(Output.of(resourceProviderConnection));
        }

        /**
         * @param resourceProviderConnection The direction for the resource provider connection.
         * 
         * @return builder
         * 
         */
        public Builder resourceProviderConnection(String resourceProviderConnection) {
            return resourceProviderConnection(Either.ofLeft(resourceProviderConnection));
        }

        /**
         * @param resourceProviderConnection The direction for the resource provider connection.
         * 
         * @return builder
         * 
         */
        public Builder resourceProviderConnection(ResourceProviderConnection resourceProviderConnection) {
            return resourceProviderConnection(Either.ofRight(resourceProviderConnection));
        }

        public NetworkPropertiesArgs build() {
            return $;
        }
    }

}
