// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.containerinstance.inputs;

import com.pulumi.azurenative.containerinstance.enums.LogAnalyticsLogType;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Container group log analytics information.
 * 
 */
public final class LogAnalyticsArgs extends com.pulumi.resources.ResourceArgs {

    public static final LogAnalyticsArgs Empty = new LogAnalyticsArgs();

    /**
     * The log type to be used.
     * 
     */
    @Import(name="logType")
      private final @Nullable Output<Either<String,LogAnalyticsLogType>> logType;

    public Output<Either<String,LogAnalyticsLogType>> logType() {
        return this.logType == null ? Codegen.empty() : this.logType;
    }

    /**
     * Metadata for log analytics.
     * 
     */
    @Import(name="metadata")
      private final @Nullable Output<Map<String,String>> metadata;

    public Output<Map<String,String>> metadata() {
        return this.metadata == null ? Codegen.empty() : this.metadata;
    }

    /**
     * The workspace id for log analytics
     * 
     */
    @Import(name="workspaceId", required=true)
      private final Output<String> workspaceId;

    public Output<String> workspaceId() {
        return this.workspaceId;
    }

    /**
     * The workspace key for log analytics
     * 
     */
    @Import(name="workspaceKey", required=true)
      private final Output<String> workspaceKey;

    public Output<String> workspaceKey() {
        return this.workspaceKey;
    }

    /**
     * The workspace resource id for log analytics
     * 
     */
    @Import(name="workspaceResourceId")
      private final @Nullable Output<Map<String,String>> workspaceResourceId;

    public Output<Map<String,String>> workspaceResourceId() {
        return this.workspaceResourceId == null ? Codegen.empty() : this.workspaceResourceId;
    }

    public LogAnalyticsArgs(
        @Nullable Output<Either<String,LogAnalyticsLogType>> logType,
        @Nullable Output<Map<String,String>> metadata,
        Output<String> workspaceId,
        Output<String> workspaceKey,
        @Nullable Output<Map<String,String>> workspaceResourceId) {
        this.logType = logType;
        this.metadata = metadata;
        this.workspaceId = Objects.requireNonNull(workspaceId, "expected parameter 'workspaceId' to be non-null");
        this.workspaceKey = Objects.requireNonNull(workspaceKey, "expected parameter 'workspaceKey' to be non-null");
        this.workspaceResourceId = workspaceResourceId;
    }

    private LogAnalyticsArgs() {
        this.logType = Codegen.empty();
        this.metadata = Codegen.empty();
        this.workspaceId = Codegen.empty();
        this.workspaceKey = Codegen.empty();
        this.workspaceResourceId = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LogAnalyticsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Either<String,LogAnalyticsLogType>> logType;
        private @Nullable Output<Map<String,String>> metadata;
        private Output<String> workspaceId;
        private Output<String> workspaceKey;
        private @Nullable Output<Map<String,String>> workspaceResourceId;

        public Builder() {
    	      // Empty
        }

        public Builder(LogAnalyticsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.logType = defaults.logType;
    	      this.metadata = defaults.metadata;
    	      this.workspaceId = defaults.workspaceId;
    	      this.workspaceKey = defaults.workspaceKey;
    	      this.workspaceResourceId = defaults.workspaceResourceId;
        }

        public Builder logType(@Nullable Output<Either<String,LogAnalyticsLogType>> logType) {
            this.logType = logType;
            return this;
        }
        public Builder logType(@Nullable Either<String,LogAnalyticsLogType> logType) {
            this.logType = Codegen.ofNullable(logType);
            return this;
        }
        public Builder metadata(@Nullable Output<Map<String,String>> metadata) {
            this.metadata = metadata;
            return this;
        }
        public Builder metadata(@Nullable Map<String,String> metadata) {
            this.metadata = Codegen.ofNullable(metadata);
            return this;
        }
        public Builder workspaceId(Output<String> workspaceId) {
            this.workspaceId = Objects.requireNonNull(workspaceId);
            return this;
        }
        public Builder workspaceId(String workspaceId) {
            this.workspaceId = Output.of(Objects.requireNonNull(workspaceId));
            return this;
        }
        public Builder workspaceKey(Output<String> workspaceKey) {
            this.workspaceKey = Objects.requireNonNull(workspaceKey);
            return this;
        }
        public Builder workspaceKey(String workspaceKey) {
            this.workspaceKey = Output.of(Objects.requireNonNull(workspaceKey));
            return this;
        }
        public Builder workspaceResourceId(@Nullable Output<Map<String,String>> workspaceResourceId) {
            this.workspaceResourceId = workspaceResourceId;
            return this;
        }
        public Builder workspaceResourceId(@Nullable Map<String,String> workspaceResourceId) {
            this.workspaceResourceId = Codegen.ofNullable(workspaceResourceId);
            return this;
        }        public LogAnalyticsArgs build() {
            return new LogAnalyticsArgs(logType, metadata, workspaceId, workspaceKey, workspaceResourceId);
        }
    }
}
