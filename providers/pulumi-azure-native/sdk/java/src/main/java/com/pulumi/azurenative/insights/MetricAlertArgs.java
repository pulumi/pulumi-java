// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.insights;

import com.pulumi.azurenative.insights.inputs.MetricAlertActionArgs;
import com.pulumi.azurenative.insights.inputs.MetricAlertMultipleResourceMultipleMetricCriteriaArgs;
import com.pulumi.azurenative.insights.inputs.MetricAlertSingleResourceMultipleMetricCriteriaArgs;
import com.pulumi.azurenative.insights.inputs.WebtestLocationAvailabilityCriteriaArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MetricAlertArgs extends com.pulumi.resources.ResourceArgs {

    public static final MetricAlertArgs Empty = new MetricAlertArgs();

    /**
     * the array of actions that are performed when the alert rule becomes active, and when an alert condition is resolved.
     * 
     */
    @Import(name="actions")
    private @Nullable Output<List<MetricAlertActionArgs>> actions;

    public Optional<Output<List<MetricAlertActionArgs>>> actions() {
        return Optional.ofNullable(this.actions);
    }

    /**
     * the flag that indicates whether the alert should be auto resolved or not. The default is true.
     * 
     */
    @Import(name="autoMitigate")
    private @Nullable Output<Boolean> autoMitigate;

    public Optional<Output<Boolean>> autoMitigate() {
        return Optional.ofNullable(this.autoMitigate);
    }

    /**
     * defines the specific alert criteria information.
     * 
     */
    @Import(name="criteria", required=true)
    private Output<Object> criteria;

    public Output<Object> criteria() {
        return this.criteria;
    }

    /**
     * the description of the metric alert that will be included in the alert email.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * the flag that indicates whether the metric alert is enabled.
     * 
     */
    @Import(name="enabled", required=true)
    private Output<Boolean> enabled;

    public Output<Boolean> enabled() {
        return this.enabled;
    }

    /**
     * how often the metric alert is evaluated represented in ISO 8601 duration format.
     * 
     */
    @Import(name="evaluationFrequency", required=true)
    private Output<String> evaluationFrequency;

    public Output<String> evaluationFrequency() {
        return this.evaluationFrequency;
    }

    /**
     * Resource location
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The name of the rule.
     * 
     */
    @Import(name="ruleName")
    private @Nullable Output<String> ruleName;

    public Optional<Output<String>> ruleName() {
        return Optional.ofNullable(this.ruleName);
    }

    /**
     * the list of resource id&#39;s that this metric alert is scoped to.
     * 
     */
    @Import(name="scopes", required=true)
    private Output<List<String>> scopes;

    public Output<List<String>> scopes() {
        return this.scopes;
    }

    /**
     * Alert severity {0, 1, 2, 3, 4}
     * 
     */
    @Import(name="severity", required=true)
    private Output<Integer> severity;

    public Output<Integer> severity() {
        return this.severity;
    }

    /**
     * Resource tags
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * the region of the target resource(s) on which the alert is created/updated. Mandatory if the scope contains a subscription, resource group, or more than one resource.
     * 
     */
    @Import(name="targetResourceRegion")
    private @Nullable Output<String> targetResourceRegion;

    public Optional<Output<String>> targetResourceRegion() {
        return Optional.ofNullable(this.targetResourceRegion);
    }

    /**
     * the resource type of the target resource(s) on which the alert is created/updated. Mandatory if the scope contains a subscription, resource group, or more than one resource.
     * 
     */
    @Import(name="targetResourceType")
    private @Nullable Output<String> targetResourceType;

    public Optional<Output<String>> targetResourceType() {
        return Optional.ofNullable(this.targetResourceType);
    }

    /**
     * the period of time (in ISO 8601 duration format) that is used to monitor alert activity based on the threshold.
     * 
     */
    @Import(name="windowSize", required=true)
    private Output<String> windowSize;

    public Output<String> windowSize() {
        return this.windowSize;
    }

    private MetricAlertArgs() {}

    private MetricAlertArgs(MetricAlertArgs $) {
        this.actions = $.actions;
        this.autoMitigate = $.autoMitigate;
        this.criteria = $.criteria;
        this.description = $.description;
        this.enabled = $.enabled;
        this.evaluationFrequency = $.evaluationFrequency;
        this.location = $.location;
        this.resourceGroupName = $.resourceGroupName;
        this.ruleName = $.ruleName;
        this.scopes = $.scopes;
        this.severity = $.severity;
        this.tags = $.tags;
        this.targetResourceRegion = $.targetResourceRegion;
        this.targetResourceType = $.targetResourceType;
        this.windowSize = $.windowSize;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MetricAlertArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MetricAlertArgs $;

        public Builder() {
            $ = new MetricAlertArgs();
        }

        public Builder(MetricAlertArgs defaults) {
            $ = new MetricAlertArgs(Objects.requireNonNull(defaults));
        }

        public Builder actions(@Nullable Output<List<MetricAlertActionArgs>> actions) {
            $.actions = actions;
            return this;
        }

        public Builder actions(List<MetricAlertActionArgs> actions) {
            return actions(Output.of(actions));
        }

        public Builder actions(MetricAlertActionArgs... actions) {
            return actions(List.of(actions));
        }

        public Builder autoMitigate(@Nullable Output<Boolean> autoMitigate) {
            $.autoMitigate = autoMitigate;
            return this;
        }

        public Builder autoMitigate(Boolean autoMitigate) {
            return autoMitigate(Output.of(autoMitigate));
        }

        public Builder criteria(Output<Object> criteria) {
            $.criteria = criteria;
            return this;
        }

        public Builder criteria(Object criteria) {
            return criteria(Output.of(criteria));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder enabled(Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        public Builder evaluationFrequency(Output<String> evaluationFrequency) {
            $.evaluationFrequency = evaluationFrequency;
            return this;
        }

        public Builder evaluationFrequency(String evaluationFrequency) {
            return evaluationFrequency(Output.of(evaluationFrequency));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder ruleName(@Nullable Output<String> ruleName) {
            $.ruleName = ruleName;
            return this;
        }

        public Builder ruleName(String ruleName) {
            return ruleName(Output.of(ruleName));
        }

        public Builder scopes(Output<List<String>> scopes) {
            $.scopes = scopes;
            return this;
        }

        public Builder scopes(List<String> scopes) {
            return scopes(Output.of(scopes));
        }

        public Builder scopes(String... scopes) {
            return scopes(List.of(scopes));
        }

        public Builder severity(Output<Integer> severity) {
            $.severity = severity;
            return this;
        }

        public Builder severity(Integer severity) {
            return severity(Output.of(severity));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder targetResourceRegion(@Nullable Output<String> targetResourceRegion) {
            $.targetResourceRegion = targetResourceRegion;
            return this;
        }

        public Builder targetResourceRegion(String targetResourceRegion) {
            return targetResourceRegion(Output.of(targetResourceRegion));
        }

        public Builder targetResourceType(@Nullable Output<String> targetResourceType) {
            $.targetResourceType = targetResourceType;
            return this;
        }

        public Builder targetResourceType(String targetResourceType) {
            return targetResourceType(Output.of(targetResourceType));
        }

        public Builder windowSize(Output<String> windowSize) {
            $.windowSize = windowSize;
            return this;
        }

        public Builder windowSize(String windowSize) {
            return windowSize(Output.of(windowSize));
        }

        public MetricAlertArgs build() {
            $.criteria = Objects.requireNonNull($.criteria, "expected parameter 'criteria' to be non-null");
            $.enabled = Objects.requireNonNull($.enabled, "expected parameter 'enabled' to be non-null");
            $.evaluationFrequency = Objects.requireNonNull($.evaluationFrequency, "expected parameter 'evaluationFrequency' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.scopes = Objects.requireNonNull($.scopes, "expected parameter 'scopes' to be non-null");
            $.severity = Objects.requireNonNull($.severity, "expected parameter 'severity' to be non-null");
            $.windowSize = Objects.requireNonNull($.windowSize, "expected parameter 'windowSize' to be non-null");
            return $;
        }
    }

}
