// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.apimanagement;

import com.pulumi.azurenative.apimanagement.enums.BackendProtocol;
import com.pulumi.azurenative.apimanagement.inputs.BackendCredentialsContractArgs;
import com.pulumi.azurenative.apimanagement.inputs.BackendPropertiesArgs;
import com.pulumi.azurenative.apimanagement.inputs.BackendProxyContractArgs;
import com.pulumi.azurenative.apimanagement.inputs.BackendTlsPropertiesArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BackendArgs extends com.pulumi.resources.ResourceArgs {

    public static final BackendArgs Empty = new BackendArgs();

    /**
     * Identifier of the Backend entity. Must be unique in the current API Management service instance.
     * 
     */
    @Import(name="backendId")
    private @Nullable Output<String> backendId;

    /**
     * @return Identifier of the Backend entity. Must be unique in the current API Management service instance.
     * 
     */
    public Optional<Output<String>> backendId() {
        return Optional.ofNullable(this.backendId);
    }

    /**
     * Backend Credentials Contract Properties
     * 
     */
    @Import(name="credentials")
    private @Nullable Output<BackendCredentialsContractArgs> credentials;

    /**
     * @return Backend Credentials Contract Properties
     * 
     */
    public Optional<Output<BackendCredentialsContractArgs>> credentials() {
        return Optional.ofNullable(this.credentials);
    }

    /**
     * Backend Description.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Backend Description.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Backend Properties contract
     * 
     */
    @Import(name="properties")
    private @Nullable Output<BackendPropertiesArgs> properties;

    /**
     * @return Backend Properties contract
     * 
     */
    public Optional<Output<BackendPropertiesArgs>> properties() {
        return Optional.ofNullable(this.properties);
    }

    /**
     * Backend communication protocol.
     * 
     */
    @Import(name="protocol", required=true)
    private Output<Either<String,BackendProtocol>> protocol;

    /**
     * @return Backend communication protocol.
     * 
     */
    public Output<Either<String,BackendProtocol>> protocol() {
        return this.protocol;
    }

    /**
     * Backend Proxy Contract Properties
     * 
     */
    @Import(name="proxy")
    private @Nullable Output<BackendProxyContractArgs> proxy;

    /**
     * @return Backend Proxy Contract Properties
     * 
     */
    public Optional<Output<BackendProxyContractArgs>> proxy() {
        return Optional.ofNullable(this.proxy);
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Management Uri of the Resource in External System. This url can be the Arm Resource Id of Logic Apps, Function Apps or Api Apps.
     * 
     */
    @Import(name="resourceId")
    private @Nullable Output<String> resourceId;

    /**
     * @return Management Uri of the Resource in External System. This url can be the Arm Resource Id of Logic Apps, Function Apps or Api Apps.
     * 
     */
    public Optional<Output<String>> resourceId() {
        return Optional.ofNullable(this.resourceId);
    }

    /**
     * The name of the API Management service.
     * 
     */
    @Import(name="serviceName", required=true)
    private Output<String> serviceName;

    /**
     * @return The name of the API Management service.
     * 
     */
    public Output<String> serviceName() {
        return this.serviceName;
    }

    /**
     * Backend Title.
     * 
     */
    @Import(name="title")
    private @Nullable Output<String> title;

    /**
     * @return Backend Title.
     * 
     */
    public Optional<Output<String>> title() {
        return Optional.ofNullable(this.title);
    }

    /**
     * Backend TLS Properties
     * 
     */
    @Import(name="tls")
    private @Nullable Output<BackendTlsPropertiesArgs> tls;

    /**
     * @return Backend TLS Properties
     * 
     */
    public Optional<Output<BackendTlsPropertiesArgs>> tls() {
        return Optional.ofNullable(this.tls);
    }

    /**
     * Runtime Url of the Backend.
     * 
     */
    @Import(name="url", required=true)
    private Output<String> url;

    /**
     * @return Runtime Url of the Backend.
     * 
     */
    public Output<String> url() {
        return this.url;
    }

    private BackendArgs() {}

    private BackendArgs(BackendArgs $) {
        this.backendId = $.backendId;
        this.credentials = $.credentials;
        this.description = $.description;
        this.properties = $.properties;
        this.protocol = $.protocol;
        this.proxy = $.proxy;
        this.resourceGroupName = $.resourceGroupName;
        this.resourceId = $.resourceId;
        this.serviceName = $.serviceName;
        this.title = $.title;
        this.tls = $.tls;
        this.url = $.url;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BackendArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BackendArgs $;

        public Builder() {
            $ = new BackendArgs();
        }

        public Builder(BackendArgs defaults) {
            $ = new BackendArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param backendId Identifier of the Backend entity. Must be unique in the current API Management service instance.
         * 
         * @return builder
         * 
         */
        public Builder backendId(@Nullable Output<String> backendId) {
            $.backendId = backendId;
            return this;
        }

        /**
         * @param backendId Identifier of the Backend entity. Must be unique in the current API Management service instance.
         * 
         * @return builder
         * 
         */
        public Builder backendId(String backendId) {
            return backendId(Output.of(backendId));
        }

        /**
         * @param credentials Backend Credentials Contract Properties
         * 
         * @return builder
         * 
         */
        public Builder credentials(@Nullable Output<BackendCredentialsContractArgs> credentials) {
            $.credentials = credentials;
            return this;
        }

        /**
         * @param credentials Backend Credentials Contract Properties
         * 
         * @return builder
         * 
         */
        public Builder credentials(BackendCredentialsContractArgs credentials) {
            return credentials(Output.of(credentials));
        }

        /**
         * @param description Backend Description.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Backend Description.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param properties Backend Properties contract
         * 
         * @return builder
         * 
         */
        public Builder properties(@Nullable Output<BackendPropertiesArgs> properties) {
            $.properties = properties;
            return this;
        }

        /**
         * @param properties Backend Properties contract
         * 
         * @return builder
         * 
         */
        public Builder properties(BackendPropertiesArgs properties) {
            return properties(Output.of(properties));
        }

        /**
         * @param protocol Backend communication protocol.
         * 
         * @return builder
         * 
         */
        public Builder protocol(Output<Either<String,BackendProtocol>> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol Backend communication protocol.
         * 
         * @return builder
         * 
         */
        public Builder protocol(Either<String,BackendProtocol> protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param protocol Backend communication protocol.
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Either.ofLeft(protocol));
        }

        /**
         * @param protocol Backend communication protocol.
         * 
         * @return builder
         * 
         */
        public Builder protocol(BackendProtocol protocol) {
            return protocol(Either.ofRight(protocol));
        }

        /**
         * @param proxy Backend Proxy Contract Properties
         * 
         * @return builder
         * 
         */
        public Builder proxy(@Nullable Output<BackendProxyContractArgs> proxy) {
            $.proxy = proxy;
            return this;
        }

        /**
         * @param proxy Backend Proxy Contract Properties
         * 
         * @return builder
         * 
         */
        public Builder proxy(BackendProxyContractArgs proxy) {
            return proxy(Output.of(proxy));
        }

        /**
         * @param resourceGroupName The name of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param resourceId Management Uri of the Resource in External System. This url can be the Arm Resource Id of Logic Apps, Function Apps or Api Apps.
         * 
         * @return builder
         * 
         */
        public Builder resourceId(@Nullable Output<String> resourceId) {
            $.resourceId = resourceId;
            return this;
        }

        /**
         * @param resourceId Management Uri of the Resource in External System. This url can be the Arm Resource Id of Logic Apps, Function Apps or Api Apps.
         * 
         * @return builder
         * 
         */
        public Builder resourceId(String resourceId) {
            return resourceId(Output.of(resourceId));
        }

        /**
         * @param serviceName The name of the API Management service.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        /**
         * @param serviceName The name of the API Management service.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        /**
         * @param title Backend Title.
         * 
         * @return builder
         * 
         */
        public Builder title(@Nullable Output<String> title) {
            $.title = title;
            return this;
        }

        /**
         * @param title Backend Title.
         * 
         * @return builder
         * 
         */
        public Builder title(String title) {
            return title(Output.of(title));
        }

        /**
         * @param tls Backend TLS Properties
         * 
         * @return builder
         * 
         */
        public Builder tls(@Nullable Output<BackendTlsPropertiesArgs> tls) {
            $.tls = tls;
            return this;
        }

        /**
         * @param tls Backend TLS Properties
         * 
         * @return builder
         * 
         */
        public Builder tls(BackendTlsPropertiesArgs tls) {
            return tls(Output.of(tls));
        }

        /**
         * @param url Runtime Url of the Backend.
         * 
         * @return builder
         * 
         */
        public Builder url(Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url Runtime Url of the Backend.
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        public BackendArgs build() {
            $.protocol = Objects.requireNonNull($.protocol, "expected parameter 'protocol' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.serviceName = Objects.requireNonNull($.serviceName, "expected parameter 'serviceName' to be non-null");
            $.url = Objects.requireNonNull($.url, "expected parameter 'url' to be non-null");
            return $;
        }
    }

}
