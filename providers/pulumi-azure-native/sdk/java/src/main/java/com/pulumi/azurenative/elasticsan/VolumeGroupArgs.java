// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.elasticsan;

import com.pulumi.azurenative.elasticsan.enums.EncryptionType;
import com.pulumi.azurenative.elasticsan.enums.StorageTargetType;
import com.pulumi.azurenative.elasticsan.inputs.NetworkRuleSetArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VolumeGroupArgs extends com.pulumi.resources.ResourceArgs {

    public static final VolumeGroupArgs Empty = new VolumeGroupArgs();

    /**
     * The name of the ElasticSan.
     * 
     */
    @Import(name="elasticSanName", required=true)
    private Output<String> elasticSanName;

    /**
     * @return The name of the ElasticSan.
     * 
     */
    public Output<String> elasticSanName() {
        return this.elasticSanName;
    }

    /**
     * Type of encryption
     * 
     */
    @Import(name="encryption", required=true)
    private Output<Either<String,EncryptionType>> encryption;

    /**
     * @return Type of encryption
     * 
     */
    public Output<Either<String,EncryptionType>> encryption() {
        return this.encryption;
    }

    /**
     * The geo-location where the resource lives.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The geo-location where the resource lives.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * A collection of rules governing the accessibility from specific network locations.
     * 
     */
    @Import(name="networkAcls")
    private @Nullable Output<NetworkRuleSetArgs> networkAcls;

    /**
     * @return A collection of rules governing the accessibility from specific network locations.
     * 
     */
    public Optional<Output<NetworkRuleSetArgs>> networkAcls() {
        return Optional.ofNullable(this.networkAcls);
    }

    /**
     * Type of storage target
     * 
     */
    @Import(name="protocolType", required=true)
    private Output<Either<String,StorageTargetType>> protocolType;

    /**
     * @return Type of storage target
     * 
     */
    public Output<Either<String,StorageTargetType>> protocolType() {
        return this.protocolType;
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group. The name is case insensitive.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Azure resource tags.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Azure resource tags.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The name of the VolumeGroup.
     * 
     */
    @Import(name="volumeGroupName")
    private @Nullable Output<String> volumeGroupName;

    /**
     * @return The name of the VolumeGroup.
     * 
     */
    public Optional<Output<String>> volumeGroupName() {
        return Optional.ofNullable(this.volumeGroupName);
    }

    private VolumeGroupArgs() {}

    private VolumeGroupArgs(VolumeGroupArgs $) {
        this.elasticSanName = $.elasticSanName;
        this.encryption = $.encryption;
        this.location = $.location;
        this.networkAcls = $.networkAcls;
        this.protocolType = $.protocolType;
        this.resourceGroupName = $.resourceGroupName;
        this.tags = $.tags;
        this.volumeGroupName = $.volumeGroupName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VolumeGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VolumeGroupArgs $;

        public Builder() {
            $ = new VolumeGroupArgs();
        }

        public Builder(VolumeGroupArgs defaults) {
            $ = new VolumeGroupArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param elasticSanName The name of the ElasticSan.
         * 
         * @return builder
         * 
         */
        public Builder elasticSanName(Output<String> elasticSanName) {
            $.elasticSanName = elasticSanName;
            return this;
        }

        /**
         * @param elasticSanName The name of the ElasticSan.
         * 
         * @return builder
         * 
         */
        public Builder elasticSanName(String elasticSanName) {
            return elasticSanName(Output.of(elasticSanName));
        }

        /**
         * @param encryption Type of encryption
         * 
         * @return builder
         * 
         */
        public Builder encryption(Output<Either<String,EncryptionType>> encryption) {
            $.encryption = encryption;
            return this;
        }

        /**
         * @param encryption Type of encryption
         * 
         * @return builder
         * 
         */
        public Builder encryption(Either<String,EncryptionType> encryption) {
            return encryption(Output.of(encryption));
        }

        /**
         * @param encryption Type of encryption
         * 
         * @return builder
         * 
         */
        public Builder encryption(String encryption) {
            return encryption(Either.ofLeft(encryption));
        }

        /**
         * @param encryption Type of encryption
         * 
         * @return builder
         * 
         */
        public Builder encryption(EncryptionType encryption) {
            return encryption(Either.ofRight(encryption));
        }

        /**
         * @param location The geo-location where the resource lives.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The geo-location where the resource lives.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param networkAcls A collection of rules governing the accessibility from specific network locations.
         * 
         * @return builder
         * 
         */
        public Builder networkAcls(@Nullable Output<NetworkRuleSetArgs> networkAcls) {
            $.networkAcls = networkAcls;
            return this;
        }

        /**
         * @param networkAcls A collection of rules governing the accessibility from specific network locations.
         * 
         * @return builder
         * 
         */
        public Builder networkAcls(NetworkRuleSetArgs networkAcls) {
            return networkAcls(Output.of(networkAcls));
        }

        /**
         * @param protocolType Type of storage target
         * 
         * @return builder
         * 
         */
        public Builder protocolType(Output<Either<String,StorageTargetType>> protocolType) {
            $.protocolType = protocolType;
            return this;
        }

        /**
         * @param protocolType Type of storage target
         * 
         * @return builder
         * 
         */
        public Builder protocolType(Either<String,StorageTargetType> protocolType) {
            return protocolType(Output.of(protocolType));
        }

        /**
         * @param protocolType Type of storage target
         * 
         * @return builder
         * 
         */
        public Builder protocolType(String protocolType) {
            return protocolType(Either.ofLeft(protocolType));
        }

        /**
         * @param protocolType Type of storage target
         * 
         * @return builder
         * 
         */
        public Builder protocolType(StorageTargetType protocolType) {
            return protocolType(Either.ofRight(protocolType));
        }

        /**
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param tags Azure resource tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Azure resource tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param volumeGroupName The name of the VolumeGroup.
         * 
         * @return builder
         * 
         */
        public Builder volumeGroupName(@Nullable Output<String> volumeGroupName) {
            $.volumeGroupName = volumeGroupName;
            return this;
        }

        /**
         * @param volumeGroupName The name of the VolumeGroup.
         * 
         * @return builder
         * 
         */
        public Builder volumeGroupName(String volumeGroupName) {
            return volumeGroupName(Output.of(volumeGroupName));
        }

        public VolumeGroupArgs build() {
            $.elasticSanName = Objects.requireNonNull($.elasticSanName, "expected parameter 'elasticSanName' to be non-null");
            $.encryption = Objects.requireNonNull($.encryption, "expected parameter 'encryption' to be non-null");
            $.protocolType = Objects.requireNonNull($.protocolType, "expected parameter 'protocolType' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
