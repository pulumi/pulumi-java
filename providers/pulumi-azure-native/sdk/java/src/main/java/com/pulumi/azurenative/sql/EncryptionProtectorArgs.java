// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.sql;

import com.pulumi.azurenative.sql.enums.ServerKeyType;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EncryptionProtectorArgs extends com.pulumi.resources.ResourceArgs {

    public static final EncryptionProtectorArgs Empty = new EncryptionProtectorArgs();

    /**
     * Key auto rotation opt-in flag. Either true or false.
     * 
     */
    @Import(name="autoRotationEnabled")
    private @Nullable Output<Boolean> autoRotationEnabled;

    public Optional<Output<Boolean>> autoRotationEnabled() {
        return Optional.ofNullable(this.autoRotationEnabled);
    }

    /**
     * The name of the encryption protector to be updated.
     * 
     */
    @Import(name="encryptionProtectorName")
    private @Nullable Output<String> encryptionProtectorName;

    public Optional<Output<String>> encryptionProtectorName() {
        return Optional.ofNullable(this.encryptionProtectorName);
    }

    /**
     * The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The name of the server key.
     * 
     */
    @Import(name="serverKeyName")
    private @Nullable Output<String> serverKeyName;

    public Optional<Output<String>> serverKeyName() {
        return Optional.ofNullable(this.serverKeyName);
    }

    /**
     * The encryption protector type like &#39;ServiceManaged&#39;, &#39;AzureKeyVault&#39;.
     * 
     */
    @Import(name="serverKeyType", required=true)
    private Output<Either<String,ServerKeyType>> serverKeyType;

    public Output<Either<String,ServerKeyType>> serverKeyType() {
        return this.serverKeyType;
    }

    /**
     * The name of the server.
     * 
     */
    @Import(name="serverName", required=true)
    private Output<String> serverName;

    public Output<String> serverName() {
        return this.serverName;
    }

    private EncryptionProtectorArgs() {}

    private EncryptionProtectorArgs(EncryptionProtectorArgs $) {
        this.autoRotationEnabled = $.autoRotationEnabled;
        this.encryptionProtectorName = $.encryptionProtectorName;
        this.resourceGroupName = $.resourceGroupName;
        this.serverKeyName = $.serverKeyName;
        this.serverKeyType = $.serverKeyType;
        this.serverName = $.serverName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EncryptionProtectorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EncryptionProtectorArgs $;

        public Builder() {
            $ = new EncryptionProtectorArgs();
        }

        public Builder(EncryptionProtectorArgs defaults) {
            $ = new EncryptionProtectorArgs(Objects.requireNonNull(defaults));
        }

        public Builder autoRotationEnabled(@Nullable Output<Boolean> autoRotationEnabled) {
            $.autoRotationEnabled = autoRotationEnabled;
            return this;
        }

        public Builder autoRotationEnabled(Boolean autoRotationEnabled) {
            return autoRotationEnabled(Output.of(autoRotationEnabled));
        }

        public Builder encryptionProtectorName(@Nullable Output<String> encryptionProtectorName) {
            $.encryptionProtectorName = encryptionProtectorName;
            return this;
        }

        public Builder encryptionProtectorName(String encryptionProtectorName) {
            return encryptionProtectorName(Output.of(encryptionProtectorName));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder serverKeyName(@Nullable Output<String> serverKeyName) {
            $.serverKeyName = serverKeyName;
            return this;
        }

        public Builder serverKeyName(String serverKeyName) {
            return serverKeyName(Output.of(serverKeyName));
        }

        public Builder serverKeyType(Output<Either<String,ServerKeyType>> serverKeyType) {
            $.serverKeyType = serverKeyType;
            return this;
        }

        public Builder serverKeyType(Either<String,ServerKeyType> serverKeyType) {
            return serverKeyType(Output.of(serverKeyType));
        }

        public Builder serverKeyType(String serverKeyType) {
            return serverKeyType(Either.ofLeft(serverKeyType));
        }

        public Builder serverKeyType(ServerKeyType serverKeyType) {
            return serverKeyType(Either.ofRight(serverKeyType));
        }

        public Builder serverName(Output<String> serverName) {
            $.serverName = serverName;
            return this;
        }

        public Builder serverName(String serverName) {
            return serverName(Output.of(serverName));
        }

        public EncryptionProtectorArgs build() {
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.serverKeyType = Objects.requireNonNull($.serverKeyType, "expected parameter 'serverKeyType' to be non-null");
            $.serverName = Objects.requireNonNull($.serverName, "expected parameter 'serverName' to be non-null");
            return $;
        }
    }

}
