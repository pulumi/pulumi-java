// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.web.inputs;

import com.pulumi.azurenative.web.inputs.VirtualDirectoryResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Virtual application in an app.
 * 
 */
public final class VirtualApplicationResponse extends com.pulumi.resources.InvokeArgs {

    public static final VirtualApplicationResponse Empty = new VirtualApplicationResponse();

    /**
     * Physical path.
     * 
     */
    @Import(name="physicalPath")
    private @Nullable String physicalPath;

    /**
     * @return Physical path.
     * 
     */
    public Optional<String> physicalPath() {
        return Optional.ofNullable(this.physicalPath);
    }

    /**
     * &lt;code&gt;true&lt;/code&gt; if preloading is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    @Import(name="preloadEnabled")
    private @Nullable Boolean preloadEnabled;

    /**
     * @return &lt;code&gt;true&lt;/code&gt; if preloading is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    public Optional<Boolean> preloadEnabled() {
        return Optional.ofNullable(this.preloadEnabled);
    }

    /**
     * Virtual directories for virtual application.
     * 
     */
    @Import(name="virtualDirectories")
    private @Nullable List<VirtualDirectoryResponse> virtualDirectories;

    /**
     * @return Virtual directories for virtual application.
     * 
     */
    public Optional<List<VirtualDirectoryResponse>> virtualDirectories() {
        return Optional.ofNullable(this.virtualDirectories);
    }

    /**
     * Virtual path.
     * 
     */
    @Import(name="virtualPath")
    private @Nullable String virtualPath;

    /**
     * @return Virtual path.
     * 
     */
    public Optional<String> virtualPath() {
        return Optional.ofNullable(this.virtualPath);
    }

    private VirtualApplicationResponse() {}

    private VirtualApplicationResponse(VirtualApplicationResponse $) {
        this.physicalPath = $.physicalPath;
        this.preloadEnabled = $.preloadEnabled;
        this.virtualDirectories = $.virtualDirectories;
        this.virtualPath = $.virtualPath;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VirtualApplicationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VirtualApplicationResponse $;

        public Builder() {
            $ = new VirtualApplicationResponse();
        }

        public Builder(VirtualApplicationResponse defaults) {
            $ = new VirtualApplicationResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param physicalPath Physical path.
         * 
         * @return builder
         * 
         */
        public Builder physicalPath(@Nullable String physicalPath) {
            $.physicalPath = physicalPath;
            return this;
        }

        /**
         * @param preloadEnabled &lt;code&gt;true&lt;/code&gt; if preloading is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;.
         * 
         * @return builder
         * 
         */
        public Builder preloadEnabled(@Nullable Boolean preloadEnabled) {
            $.preloadEnabled = preloadEnabled;
            return this;
        }

        /**
         * @param virtualDirectories Virtual directories for virtual application.
         * 
         * @return builder
         * 
         */
        public Builder virtualDirectories(@Nullable List<VirtualDirectoryResponse> virtualDirectories) {
            $.virtualDirectories = virtualDirectories;
            return this;
        }

        /**
         * @param virtualDirectories Virtual directories for virtual application.
         * 
         * @return builder
         * 
         */
        public Builder virtualDirectories(VirtualDirectoryResponse... virtualDirectories) {
            return virtualDirectories(List.of(virtualDirectories));
        }

        /**
         * @param virtualPath Virtual path.
         * 
         * @return builder
         * 
         */
        public Builder virtualPath(@Nullable String virtualPath) {
            $.virtualPath = virtualPath;
            return this;
        }

        public VirtualApplicationResponse build() {
            return $;
        }
    }

}
