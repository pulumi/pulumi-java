// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.machinelearning.inputs;

import com.pulumi.azurenative.machinelearning.inputs.PlanQuantityResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;


/**
 * Properties of an Azure ML commitment plan.
 * 
 */
public final class CommitmentPlanPropertiesResponse extends com.pulumi.resources.InvokeArgs {

    public static final CommitmentPlanPropertiesResponse Empty = new CommitmentPlanPropertiesResponse();

    /**
     * Indicates whether usage beyond the commitment plan&#39;s included quantities will be charged.
     * 
     */
    @Import(name="chargeForOverage", required=true)
    private Boolean chargeForOverage;

    public Boolean chargeForOverage() {
        return this.chargeForOverage;
    }

    /**
     * Indicates whether the commitment plan will incur a charge.
     * 
     */
    @Import(name="chargeForPlan", required=true)
    private Boolean chargeForPlan;

    public Boolean chargeForPlan() {
        return this.chargeForPlan;
    }

    /**
     * The date at which this commitment plan was created, in ISO 8601 format.
     * 
     */
    @Import(name="creationDate", required=true)
    private String creationDate;

    public String creationDate() {
        return this.creationDate;
    }

    /**
     * The included resource quantities this plan gives you.
     * 
     */
    @Import(name="includedQuantities", required=true)
    private Map<String,PlanQuantityResponse> includedQuantities;

    public Map<String,PlanQuantityResponse> includedQuantities() {
        return this.includedQuantities;
    }

    /**
     * The maximum number of commitment associations that can be children of this commitment plan.
     * 
     */
    @Import(name="maxAssociationLimit", required=true)
    private Integer maxAssociationLimit;

    public Integer maxAssociationLimit() {
        return this.maxAssociationLimit;
    }

    /**
     * The maximum scale-out capacity for this commitment plan.
     * 
     */
    @Import(name="maxCapacityLimit", required=true)
    private Integer maxCapacityLimit;

    public Integer maxCapacityLimit() {
        return this.maxCapacityLimit;
    }

    /**
     * The minimum scale-out capacity for this commitment plan.
     * 
     */
    @Import(name="minCapacityLimit", required=true)
    private Integer minCapacityLimit;

    public Integer minCapacityLimit() {
        return this.minCapacityLimit;
    }

    /**
     * The Azure meter which will be used to charge for this commitment plan.
     * 
     */
    @Import(name="planMeter", required=true)
    private String planMeter;

    public String planMeter() {
        return this.planMeter;
    }

    /**
     * The frequency at which this commitment plan&#39;s included quantities are refilled.
     * 
     */
    @Import(name="refillFrequencyInDays", required=true)
    private Integer refillFrequencyInDays;

    public Integer refillFrequencyInDays() {
        return this.refillFrequencyInDays;
    }

    /**
     * Indicates whether this commitment plan will be moved into a suspended state if usage goes beyond the commitment plan&#39;s included quantities.
     * 
     */
    @Import(name="suspendPlanOnOverage", required=true)
    private Boolean suspendPlanOnOverage;

    public Boolean suspendPlanOnOverage() {
        return this.suspendPlanOnOverage;
    }

    private CommitmentPlanPropertiesResponse() {}

    private CommitmentPlanPropertiesResponse(CommitmentPlanPropertiesResponse $) {
        this.chargeForOverage = $.chargeForOverage;
        this.chargeForPlan = $.chargeForPlan;
        this.creationDate = $.creationDate;
        this.includedQuantities = $.includedQuantities;
        this.maxAssociationLimit = $.maxAssociationLimit;
        this.maxCapacityLimit = $.maxCapacityLimit;
        this.minCapacityLimit = $.minCapacityLimit;
        this.planMeter = $.planMeter;
        this.refillFrequencyInDays = $.refillFrequencyInDays;
        this.suspendPlanOnOverage = $.suspendPlanOnOverage;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CommitmentPlanPropertiesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CommitmentPlanPropertiesResponse $;

        public Builder() {
            $ = new CommitmentPlanPropertiesResponse();
        }

        public Builder(CommitmentPlanPropertiesResponse defaults) {
            $ = new CommitmentPlanPropertiesResponse(Objects.requireNonNull(defaults));
        }

        public Builder chargeForOverage(Boolean chargeForOverage) {
            $.chargeForOverage = chargeForOverage;
            return this;
        }

        public Builder chargeForPlan(Boolean chargeForPlan) {
            $.chargeForPlan = chargeForPlan;
            return this;
        }

        public Builder creationDate(String creationDate) {
            $.creationDate = creationDate;
            return this;
        }

        public Builder includedQuantities(Map<String,PlanQuantityResponse> includedQuantities) {
            $.includedQuantities = includedQuantities;
            return this;
        }

        public Builder maxAssociationLimit(Integer maxAssociationLimit) {
            $.maxAssociationLimit = maxAssociationLimit;
            return this;
        }

        public Builder maxCapacityLimit(Integer maxCapacityLimit) {
            $.maxCapacityLimit = maxCapacityLimit;
            return this;
        }

        public Builder minCapacityLimit(Integer minCapacityLimit) {
            $.minCapacityLimit = minCapacityLimit;
            return this;
        }

        public Builder planMeter(String planMeter) {
            $.planMeter = planMeter;
            return this;
        }

        public Builder refillFrequencyInDays(Integer refillFrequencyInDays) {
            $.refillFrequencyInDays = refillFrequencyInDays;
            return this;
        }

        public Builder suspendPlanOnOverage(Boolean suspendPlanOnOverage) {
            $.suspendPlanOnOverage = suspendPlanOnOverage;
            return this;
        }

        public CommitmentPlanPropertiesResponse build() {
            $.chargeForOverage = Objects.requireNonNull($.chargeForOverage, "expected parameter 'chargeForOverage' to be non-null");
            $.chargeForPlan = Objects.requireNonNull($.chargeForPlan, "expected parameter 'chargeForPlan' to be non-null");
            $.creationDate = Objects.requireNonNull($.creationDate, "expected parameter 'creationDate' to be non-null");
            $.includedQuantities = Objects.requireNonNull($.includedQuantities, "expected parameter 'includedQuantities' to be non-null");
            $.maxAssociationLimit = Objects.requireNonNull($.maxAssociationLimit, "expected parameter 'maxAssociationLimit' to be non-null");
            $.maxCapacityLimit = Objects.requireNonNull($.maxCapacityLimit, "expected parameter 'maxCapacityLimit' to be non-null");
            $.minCapacityLimit = Objects.requireNonNull($.minCapacityLimit, "expected parameter 'minCapacityLimit' to be non-null");
            $.planMeter = Objects.requireNonNull($.planMeter, "expected parameter 'planMeter' to be non-null");
            $.refillFrequencyInDays = Objects.requireNonNull($.refillFrequencyInDays, "expected parameter 'refillFrequencyInDays' to be non-null");
            $.suspendPlanOnOverage = Objects.requireNonNull($.suspendPlanOnOverage, "expected parameter 'suspendPlanOnOverage' to be non-null");
            return $;
        }
    }

}
