// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datamigration.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Database specific information for SQL to Azure SQL DB migration task inputs
 * 
 */
public final class MigrateSqlServerSqlDbDatabaseInputResponse extends com.pulumi.resources.InvokeArgs {

    public static final MigrateSqlServerSqlDbDatabaseInputResponse Empty = new MigrateSqlServerSqlDbDatabaseInputResponse();

    /**
     * Whether to set database read only before migration
     * 
     */
    @Import(name="makeSourceDbReadOnly")
    private @Nullable Boolean makeSourceDbReadOnly;

    /**
     * @return Whether to set database read only before migration
     * 
     */
    public Optional<Boolean> makeSourceDbReadOnly() {
        return Optional.ofNullable(this.makeSourceDbReadOnly);
    }

    /**
     * Name of the database
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return Name of the database
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Mapping of source to target tables
     * 
     */
    @Import(name="tableMap")
    private @Nullable Map<String,String> tableMap;

    /**
     * @return Mapping of source to target tables
     * 
     */
    public Optional<Map<String,String>> tableMap() {
        return Optional.ofNullable(this.tableMap);
    }

    /**
     * Name of target database. Note: Target database will be truncated before starting migration.
     * 
     */
    @Import(name="targetDatabaseName")
    private @Nullable String targetDatabaseName;

    /**
     * @return Name of target database. Note: Target database will be truncated before starting migration.
     * 
     */
    public Optional<String> targetDatabaseName() {
        return Optional.ofNullable(this.targetDatabaseName);
    }

    private MigrateSqlServerSqlDbDatabaseInputResponse() {}

    private MigrateSqlServerSqlDbDatabaseInputResponse(MigrateSqlServerSqlDbDatabaseInputResponse $) {
        this.makeSourceDbReadOnly = $.makeSourceDbReadOnly;
        this.name = $.name;
        this.tableMap = $.tableMap;
        this.targetDatabaseName = $.targetDatabaseName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MigrateSqlServerSqlDbDatabaseInputResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MigrateSqlServerSqlDbDatabaseInputResponse $;

        public Builder() {
            $ = new MigrateSqlServerSqlDbDatabaseInputResponse();
        }

        public Builder(MigrateSqlServerSqlDbDatabaseInputResponse defaults) {
            $ = new MigrateSqlServerSqlDbDatabaseInputResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param makeSourceDbReadOnly Whether to set database read only before migration
         * 
         * @return builder
         * 
         */
        public Builder makeSourceDbReadOnly(@Nullable Boolean makeSourceDbReadOnly) {
            $.makeSourceDbReadOnly = makeSourceDbReadOnly;
            return this;
        }

        /**
         * @param name Name of the database
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param tableMap Mapping of source to target tables
         * 
         * @return builder
         * 
         */
        public Builder tableMap(@Nullable Map<String,String> tableMap) {
            $.tableMap = tableMap;
            return this;
        }

        /**
         * @param targetDatabaseName Name of target database. Note: Target database will be truncated before starting migration.
         * 
         * @return builder
         * 
         */
        public Builder targetDatabaseName(@Nullable String targetDatabaseName) {
            $.targetDatabaseName = targetDatabaseName;
            return this;
        }

        public MigrateSqlServerSqlDbDatabaseInputResponse build() {
            return $;
        }
    }

}
