// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datamigration.inputs;

import com.pulumi.azurenative.datamigration.inputs.MigrationEligibilityInfoResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


/**
 * AgentJob level output for the task that validates connection to SQL Server and also validates source server requirements
 * 
 */
public final class ConnectToSourceSqlServerTaskOutputAgentJobLevelResponse extends com.pulumi.resources.InvokeArgs {

    public static final ConnectToSourceSqlServerTaskOutputAgentJobLevelResponse Empty = new ConnectToSourceSqlServerTaskOutputAgentJobLevelResponse();

    /**
     * Result identifier
     * 
     */
    @Import(name="id", required=true)
    private String id;

    /**
     * @return Result identifier
     * 
     */
    public String id() {
        return this.id;
    }

    /**
     * The state of the original AgentJob.
     * 
     */
    @Import(name="isEnabled", required=true)
    private Boolean isEnabled;

    /**
     * @return The state of the original AgentJob.
     * 
     */
    public Boolean isEnabled() {
        return this.isEnabled;
    }

    /**
     * The type of AgentJob.
     * 
     */
    @Import(name="jobCategory", required=true)
    private String jobCategory;

    /**
     * @return The type of AgentJob.
     * 
     */
    public String jobCategory() {
        return this.jobCategory;
    }

    /**
     * The owner of the AgentJob
     * 
     */
    @Import(name="jobOwner", required=true)
    private String jobOwner;

    /**
     * @return The owner of the AgentJob
     * 
     */
    public String jobOwner() {
        return this.jobOwner;
    }

    /**
     * UTC Date and time when the AgentJob was last executed.
     * 
     */
    @Import(name="lastExecutedOn", required=true)
    private String lastExecutedOn;

    /**
     * @return UTC Date and time when the AgentJob was last executed.
     * 
     */
    public String lastExecutedOn() {
        return this.lastExecutedOn;
    }

    /**
     * Information about eligibility of agent job for migration.
     * 
     */
    @Import(name="migrationEligibility", required=true)
    private MigrationEligibilityInfoResponse migrationEligibility;

    /**
     * @return Information about eligibility of agent job for migration.
     * 
     */
    public MigrationEligibilityInfoResponse migrationEligibility() {
        return this.migrationEligibility;
    }

    /**
     * AgentJob name
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return AgentJob name
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * Type of result - database level or task level
     * Expected value is &#39;AgentJobLevelOutput&#39;.
     * 
     */
    @Import(name="resultType", required=true)
    private String resultType;

    /**
     * @return Type of result - database level or task level
     * Expected value is &#39;AgentJobLevelOutput&#39;.
     * 
     */
    public String resultType() {
        return this.resultType;
    }

    private ConnectToSourceSqlServerTaskOutputAgentJobLevelResponse() {}

    private ConnectToSourceSqlServerTaskOutputAgentJobLevelResponse(ConnectToSourceSqlServerTaskOutputAgentJobLevelResponse $) {
        this.id = $.id;
        this.isEnabled = $.isEnabled;
        this.jobCategory = $.jobCategory;
        this.jobOwner = $.jobOwner;
        this.lastExecutedOn = $.lastExecutedOn;
        this.migrationEligibility = $.migrationEligibility;
        this.name = $.name;
        this.resultType = $.resultType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectToSourceSqlServerTaskOutputAgentJobLevelResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectToSourceSqlServerTaskOutputAgentJobLevelResponse $;

        public Builder() {
            $ = new ConnectToSourceSqlServerTaskOutputAgentJobLevelResponse();
        }

        public Builder(ConnectToSourceSqlServerTaskOutputAgentJobLevelResponse defaults) {
            $ = new ConnectToSourceSqlServerTaskOutputAgentJobLevelResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param id Result identifier
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            $.id = id;
            return this;
        }

        /**
         * @param isEnabled The state of the original AgentJob.
         * 
         * @return builder
         * 
         */
        public Builder isEnabled(Boolean isEnabled) {
            $.isEnabled = isEnabled;
            return this;
        }

        /**
         * @param jobCategory The type of AgentJob.
         * 
         * @return builder
         * 
         */
        public Builder jobCategory(String jobCategory) {
            $.jobCategory = jobCategory;
            return this;
        }

        /**
         * @param jobOwner The owner of the AgentJob
         * 
         * @return builder
         * 
         */
        public Builder jobOwner(String jobOwner) {
            $.jobOwner = jobOwner;
            return this;
        }

        /**
         * @param lastExecutedOn UTC Date and time when the AgentJob was last executed.
         * 
         * @return builder
         * 
         */
        public Builder lastExecutedOn(String lastExecutedOn) {
            $.lastExecutedOn = lastExecutedOn;
            return this;
        }

        /**
         * @param migrationEligibility Information about eligibility of agent job for migration.
         * 
         * @return builder
         * 
         */
        public Builder migrationEligibility(MigrationEligibilityInfoResponse migrationEligibility) {
            $.migrationEligibility = migrationEligibility;
            return this;
        }

        /**
         * @param name AgentJob name
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param resultType Type of result - database level or task level
         * Expected value is &#39;AgentJobLevelOutput&#39;.
         * 
         * @return builder
         * 
         */
        public Builder resultType(String resultType) {
            $.resultType = resultType;
            return this;
        }

        public ConnectToSourceSqlServerTaskOutputAgentJobLevelResponse build() {
            $.id = Objects.requireNonNull($.id, "expected parameter 'id' to be non-null");
            $.isEnabled = Objects.requireNonNull($.isEnabled, "expected parameter 'isEnabled' to be non-null");
            $.jobCategory = Objects.requireNonNull($.jobCategory, "expected parameter 'jobCategory' to be non-null");
            $.jobOwner = Objects.requireNonNull($.jobOwner, "expected parameter 'jobOwner' to be non-null");
            $.lastExecutedOn = Objects.requireNonNull($.lastExecutedOn, "expected parameter 'lastExecutedOn' to be non-null");
            $.migrationEligibility = Objects.requireNonNull($.migrationEligibility, "expected parameter 'migrationEligibility' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.resultType = Codegen.stringProp("resultType").arg($.resultType).require();
            return $;
        }
    }

}
