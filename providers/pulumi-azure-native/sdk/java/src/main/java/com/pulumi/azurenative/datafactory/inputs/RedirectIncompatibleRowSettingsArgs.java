// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Redirect incompatible row settings
 * 
 */
public final class RedirectIncompatibleRowSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final RedirectIncompatibleRowSettingsArgs Empty = new RedirectIncompatibleRowSettingsArgs();

    /**
     * Name of the Azure Storage, Storage SAS, or Azure Data Lake Store linked service used for redirecting incompatible row. Must be specified if redirectIncompatibleRowSettings is specified. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="linkedServiceName", required=true)
    private Output<Object> linkedServiceName;

    /**
     * @return Name of the Azure Storage, Storage SAS, or Azure Data Lake Store linked service used for redirecting incompatible row. Must be specified if redirectIncompatibleRowSettings is specified. Type: string (or Expression with resultType string).
     * 
     */
    public Output<Object> linkedServiceName() {
        return this.linkedServiceName;
    }

    /**
     * The path for storing the redirect incompatible row data. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="path")
    private @Nullable Output<Object> path;

    /**
     * @return The path for storing the redirect incompatible row data. Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Output<Object>> path() {
        return Optional.ofNullable(this.path);
    }

    private RedirectIncompatibleRowSettingsArgs() {}

    private RedirectIncompatibleRowSettingsArgs(RedirectIncompatibleRowSettingsArgs $) {
        this.linkedServiceName = $.linkedServiceName;
        this.path = $.path;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RedirectIncompatibleRowSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RedirectIncompatibleRowSettingsArgs $;

        public Builder() {
            $ = new RedirectIncompatibleRowSettingsArgs();
        }

        public Builder(RedirectIncompatibleRowSettingsArgs defaults) {
            $ = new RedirectIncompatibleRowSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param linkedServiceName Name of the Azure Storage, Storage SAS, or Azure Data Lake Store linked service used for redirecting incompatible row. Must be specified if redirectIncompatibleRowSettings is specified. Type: string (or Expression with resultType string).
         * 
         * @return builder
         * 
         */
        public Builder linkedServiceName(Output<Object> linkedServiceName) {
            $.linkedServiceName = linkedServiceName;
            return this;
        }

        /**
         * @param linkedServiceName Name of the Azure Storage, Storage SAS, or Azure Data Lake Store linked service used for redirecting incompatible row. Must be specified if redirectIncompatibleRowSettings is specified. Type: string (or Expression with resultType string).
         * 
         * @return builder
         * 
         */
        public Builder linkedServiceName(Object linkedServiceName) {
            return linkedServiceName(Output.of(linkedServiceName));
        }

        /**
         * @param path The path for storing the redirect incompatible row data. Type: string (or Expression with resultType string).
         * 
         * @return builder
         * 
         */
        public Builder path(@Nullable Output<Object> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path The path for storing the redirect incompatible row data. Type: string (or Expression with resultType string).
         * 
         * @return builder
         * 
         */
        public Builder path(Object path) {
            return path(Output.of(path));
        }

        public RedirectIncompatibleRowSettingsArgs build() {
            $.linkedServiceName = Objects.requireNonNull($.linkedServiceName, "expected parameter 'linkedServiceName' to be non-null");
            return $;
        }
    }

}
