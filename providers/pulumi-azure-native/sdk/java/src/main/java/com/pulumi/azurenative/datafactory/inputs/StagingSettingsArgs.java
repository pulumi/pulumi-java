// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.azurenative.datafactory.inputs.LinkedServiceReferenceArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Staging settings.
 * 
 */
public final class StagingSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final StagingSettingsArgs Empty = new StagingSettingsArgs();

    /**
     * Specifies whether to use compression when copying data via an interim staging. Default value is false. Type: boolean (or Expression with resultType boolean).
     * 
     */
    @Import(name="enableCompression")
    private @Nullable Output<Object> enableCompression;

    /**
     * @return Specifies whether to use compression when copying data via an interim staging. Default value is false. Type: boolean (or Expression with resultType boolean).
     * 
     */
    public Optional<Output<Object>> enableCompression() {
        return Optional.ofNullable(this.enableCompression);
    }

    /**
     * Staging linked service reference.
     * 
     */
    @Import(name="linkedServiceName", required=true)
    private Output<LinkedServiceReferenceArgs> linkedServiceName;

    /**
     * @return Staging linked service reference.
     * 
     */
    public Output<LinkedServiceReferenceArgs> linkedServiceName() {
        return this.linkedServiceName;
    }

    /**
     * The path to storage for storing the interim data. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="path")
    private @Nullable Output<Object> path;

    /**
     * @return The path to storage for storing the interim data. Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Output<Object>> path() {
        return Optional.ofNullable(this.path);
    }

    private StagingSettingsArgs() {}

    private StagingSettingsArgs(StagingSettingsArgs $) {
        this.enableCompression = $.enableCompression;
        this.linkedServiceName = $.linkedServiceName;
        this.path = $.path;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StagingSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StagingSettingsArgs $;

        public Builder() {
            $ = new StagingSettingsArgs();
        }

        public Builder(StagingSettingsArgs defaults) {
            $ = new StagingSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enableCompression Specifies whether to use compression when copying data via an interim staging. Default value is false. Type: boolean (or Expression with resultType boolean).
         * 
         * @return builder
         * 
         */
        public Builder enableCompression(@Nullable Output<Object> enableCompression) {
            $.enableCompression = enableCompression;
            return this;
        }

        /**
         * @param enableCompression Specifies whether to use compression when copying data via an interim staging. Default value is false. Type: boolean (or Expression with resultType boolean).
         * 
         * @return builder
         * 
         */
        public Builder enableCompression(Object enableCompression) {
            return enableCompression(Output.of(enableCompression));
        }

        /**
         * @param linkedServiceName Staging linked service reference.
         * 
         * @return builder
         * 
         */
        public Builder linkedServiceName(Output<LinkedServiceReferenceArgs> linkedServiceName) {
            $.linkedServiceName = linkedServiceName;
            return this;
        }

        /**
         * @param linkedServiceName Staging linked service reference.
         * 
         * @return builder
         * 
         */
        public Builder linkedServiceName(LinkedServiceReferenceArgs linkedServiceName) {
            return linkedServiceName(Output.of(linkedServiceName));
        }

        /**
         * @param path The path to storage for storing the interim data. Type: string (or Expression with resultType string).
         * 
         * @return builder
         * 
         */
        public Builder path(@Nullable Output<Object> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path The path to storage for storing the interim data. Type: string (or Expression with resultType string).
         * 
         * @return builder
         * 
         */
        public Builder path(Object path) {
            return path(Output.of(path));
        }

        public StagingSettingsArgs build() {
            $.linkedServiceName = Objects.requireNonNull($.linkedServiceName, "expected parameter 'linkedServiceName' to be non-null");
            return $;
        }
    }

}
