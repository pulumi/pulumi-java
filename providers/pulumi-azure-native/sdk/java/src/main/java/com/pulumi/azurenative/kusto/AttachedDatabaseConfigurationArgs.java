// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.kusto;

import com.pulumi.azurenative.kusto.enums.DefaultPrincipalsModificationKind;
import com.pulumi.azurenative.kusto.inputs.TableLevelSharingPropertiesArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AttachedDatabaseConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final AttachedDatabaseConfigurationArgs Empty = new AttachedDatabaseConfigurationArgs();

    /**
     * The name of the attached database configuration.
     * 
     */
    @Import(name="attachedDatabaseConfigurationName")
    private @Nullable Output<String> attachedDatabaseConfigurationName;

    /**
     * @return The name of the attached database configuration.
     * 
     */
    public Optional<Output<String>> attachedDatabaseConfigurationName() {
        return Optional.ofNullable(this.attachedDatabaseConfigurationName);
    }

    /**
     * The name of the Kusto cluster.
     * 
     */
    @Import(name="clusterName", required=true)
    private Output<String> clusterName;

    /**
     * @return The name of the Kusto cluster.
     * 
     */
    public Output<String> clusterName() {
        return this.clusterName;
    }

    /**
     * The resource id of the cluster where the databases you would like to attach reside.
     * 
     */
    @Import(name="clusterResourceId", required=true)
    private Output<String> clusterResourceId;

    /**
     * @return The resource id of the cluster where the databases you would like to attach reside.
     * 
     */
    public Output<String> clusterResourceId() {
        return this.clusterResourceId;
    }

    /**
     * The name of the database which you would like to attach, use * if you want to follow all current and future databases.
     * 
     */
    @Import(name="databaseName", required=true)
    private Output<String> databaseName;

    /**
     * @return The name of the database which you would like to attach, use * if you want to follow all current and future databases.
     * 
     */
    public Output<String> databaseName() {
        return this.databaseName;
    }

    /**
     * The default principals modification kind
     * 
     */
    @Import(name="defaultPrincipalsModificationKind", required=true)
    private Output<Either<String,DefaultPrincipalsModificationKind>> defaultPrincipalsModificationKind;

    /**
     * @return The default principals modification kind
     * 
     */
    public Output<Either<String,DefaultPrincipalsModificationKind>> defaultPrincipalsModificationKind() {
        return this.defaultPrincipalsModificationKind;
    }

    /**
     * Resource location.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Resource location.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name of the resource group containing the Kusto cluster.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group containing the Kusto cluster.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Table level sharing specifications
     * 
     */
    @Import(name="tableLevelSharingProperties")
    private @Nullable Output<TableLevelSharingPropertiesArgs> tableLevelSharingProperties;

    /**
     * @return Table level sharing specifications
     * 
     */
    public Optional<Output<TableLevelSharingPropertiesArgs>> tableLevelSharingProperties() {
        return Optional.ofNullable(this.tableLevelSharingProperties);
    }

    private AttachedDatabaseConfigurationArgs() {}

    private AttachedDatabaseConfigurationArgs(AttachedDatabaseConfigurationArgs $) {
        this.attachedDatabaseConfigurationName = $.attachedDatabaseConfigurationName;
        this.clusterName = $.clusterName;
        this.clusterResourceId = $.clusterResourceId;
        this.databaseName = $.databaseName;
        this.defaultPrincipalsModificationKind = $.defaultPrincipalsModificationKind;
        this.location = $.location;
        this.resourceGroupName = $.resourceGroupName;
        this.tableLevelSharingProperties = $.tableLevelSharingProperties;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AttachedDatabaseConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AttachedDatabaseConfigurationArgs $;

        public Builder() {
            $ = new AttachedDatabaseConfigurationArgs();
        }

        public Builder(AttachedDatabaseConfigurationArgs defaults) {
            $ = new AttachedDatabaseConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param attachedDatabaseConfigurationName The name of the attached database configuration.
         * 
         * @return builder
         * 
         */
        public Builder attachedDatabaseConfigurationName(@Nullable Output<String> attachedDatabaseConfigurationName) {
            $.attachedDatabaseConfigurationName = attachedDatabaseConfigurationName;
            return this;
        }

        /**
         * @param attachedDatabaseConfigurationName The name of the attached database configuration.
         * 
         * @return builder
         * 
         */
        public Builder attachedDatabaseConfigurationName(String attachedDatabaseConfigurationName) {
            return attachedDatabaseConfigurationName(Output.of(attachedDatabaseConfigurationName));
        }

        /**
         * @param clusterName The name of the Kusto cluster.
         * 
         * @return builder
         * 
         */
        public Builder clusterName(Output<String> clusterName) {
            $.clusterName = clusterName;
            return this;
        }

        /**
         * @param clusterName The name of the Kusto cluster.
         * 
         * @return builder
         * 
         */
        public Builder clusterName(String clusterName) {
            return clusterName(Output.of(clusterName));
        }

        /**
         * @param clusterResourceId The resource id of the cluster where the databases you would like to attach reside.
         * 
         * @return builder
         * 
         */
        public Builder clusterResourceId(Output<String> clusterResourceId) {
            $.clusterResourceId = clusterResourceId;
            return this;
        }

        /**
         * @param clusterResourceId The resource id of the cluster where the databases you would like to attach reside.
         * 
         * @return builder
         * 
         */
        public Builder clusterResourceId(String clusterResourceId) {
            return clusterResourceId(Output.of(clusterResourceId));
        }

        /**
         * @param databaseName The name of the database which you would like to attach, use * if you want to follow all current and future databases.
         * 
         * @return builder
         * 
         */
        public Builder databaseName(Output<String> databaseName) {
            $.databaseName = databaseName;
            return this;
        }

        /**
         * @param databaseName The name of the database which you would like to attach, use * if you want to follow all current and future databases.
         * 
         * @return builder
         * 
         */
        public Builder databaseName(String databaseName) {
            return databaseName(Output.of(databaseName));
        }

        /**
         * @param defaultPrincipalsModificationKind The default principals modification kind
         * 
         * @return builder
         * 
         */
        public Builder defaultPrincipalsModificationKind(Output<Either<String,DefaultPrincipalsModificationKind>> defaultPrincipalsModificationKind) {
            $.defaultPrincipalsModificationKind = defaultPrincipalsModificationKind;
            return this;
        }

        /**
         * @param defaultPrincipalsModificationKind The default principals modification kind
         * 
         * @return builder
         * 
         */
        public Builder defaultPrincipalsModificationKind(Either<String,DefaultPrincipalsModificationKind> defaultPrincipalsModificationKind) {
            return defaultPrincipalsModificationKind(Output.of(defaultPrincipalsModificationKind));
        }

        /**
         * @param defaultPrincipalsModificationKind The default principals modification kind
         * 
         * @return builder
         * 
         */
        public Builder defaultPrincipalsModificationKind(String defaultPrincipalsModificationKind) {
            return defaultPrincipalsModificationKind(Either.ofLeft(defaultPrincipalsModificationKind));
        }

        /**
         * @param defaultPrincipalsModificationKind The default principals modification kind
         * 
         * @return builder
         * 
         */
        public Builder defaultPrincipalsModificationKind(DefaultPrincipalsModificationKind defaultPrincipalsModificationKind) {
            return defaultPrincipalsModificationKind(Either.ofRight(defaultPrincipalsModificationKind));
        }

        /**
         * @param location Resource location.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Resource location.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param resourceGroupName The name of the resource group containing the Kusto cluster.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group containing the Kusto cluster.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param tableLevelSharingProperties Table level sharing specifications
         * 
         * @return builder
         * 
         */
        public Builder tableLevelSharingProperties(@Nullable Output<TableLevelSharingPropertiesArgs> tableLevelSharingProperties) {
            $.tableLevelSharingProperties = tableLevelSharingProperties;
            return this;
        }

        /**
         * @param tableLevelSharingProperties Table level sharing specifications
         * 
         * @return builder
         * 
         */
        public Builder tableLevelSharingProperties(TableLevelSharingPropertiesArgs tableLevelSharingProperties) {
            return tableLevelSharingProperties(Output.of(tableLevelSharingProperties));
        }

        public AttachedDatabaseConfigurationArgs build() {
            $.clusterName = Objects.requireNonNull($.clusterName, "expected parameter 'clusterName' to be non-null");
            $.clusterResourceId = Objects.requireNonNull($.clusterResourceId, "expected parameter 'clusterResourceId' to be non-null");
            $.databaseName = Objects.requireNonNull($.databaseName, "expected parameter 'databaseName' to be non-null");
            $.defaultPrincipalsModificationKind = Objects.requireNonNull($.defaultPrincipalsModificationKind, "expected parameter 'defaultPrincipalsModificationKind' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
