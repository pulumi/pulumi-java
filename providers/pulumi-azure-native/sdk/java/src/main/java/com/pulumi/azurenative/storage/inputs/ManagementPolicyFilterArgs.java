// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.storage.inputs;

import com.pulumi.azurenative.storage.inputs.TagFilterArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Filters limit rule actions to a subset of blobs within the storage account. If multiple filters are defined, a logical AND is performed on all filters.
 * 
 */
public final class ManagementPolicyFilterArgs extends com.pulumi.resources.ResourceArgs {

    public static final ManagementPolicyFilterArgs Empty = new ManagementPolicyFilterArgs();

    /**
     * An array of blob index tag based filters, there can be at most 10 tag filters
     * 
     */
    @Import(name="blobIndexMatch")
    private @Nullable Output<List<TagFilterArgs>> blobIndexMatch;

    /**
     * @return An array of blob index tag based filters, there can be at most 10 tag filters
     * 
     */
    public Optional<Output<List<TagFilterArgs>>> blobIndexMatch() {
        return Optional.ofNullable(this.blobIndexMatch);
    }

    /**
     * An array of predefined enum values. Currently blockBlob supports all tiering and delete actions. Only delete actions are supported for appendBlob.
     * 
     */
    @Import(name="blobTypes", required=true)
    private Output<List<String>> blobTypes;

    /**
     * @return An array of predefined enum values. Currently blockBlob supports all tiering and delete actions. Only delete actions are supported for appendBlob.
     * 
     */
    public Output<List<String>> blobTypes() {
        return this.blobTypes;
    }

    /**
     * An array of strings for prefixes to be match.
     * 
     */
    @Import(name="prefixMatch")
    private @Nullable Output<List<String>> prefixMatch;

    /**
     * @return An array of strings for prefixes to be match.
     * 
     */
    public Optional<Output<List<String>>> prefixMatch() {
        return Optional.ofNullable(this.prefixMatch);
    }

    private ManagementPolicyFilterArgs() {}

    private ManagementPolicyFilterArgs(ManagementPolicyFilterArgs $) {
        this.blobIndexMatch = $.blobIndexMatch;
        this.blobTypes = $.blobTypes;
        this.prefixMatch = $.prefixMatch;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagementPolicyFilterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagementPolicyFilterArgs $;

        public Builder() {
            $ = new ManagementPolicyFilterArgs();
        }

        public Builder(ManagementPolicyFilterArgs defaults) {
            $ = new ManagementPolicyFilterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param blobIndexMatch An array of blob index tag based filters, there can be at most 10 tag filters
         * 
         * @return builder
         * 
         */
        public Builder blobIndexMatch(@Nullable Output<List<TagFilterArgs>> blobIndexMatch) {
            $.blobIndexMatch = blobIndexMatch;
            return this;
        }

        /**
         * @param blobIndexMatch An array of blob index tag based filters, there can be at most 10 tag filters
         * 
         * @return builder
         * 
         */
        public Builder blobIndexMatch(List<TagFilterArgs> blobIndexMatch) {
            return blobIndexMatch(Output.of(blobIndexMatch));
        }

        /**
         * @param blobIndexMatch An array of blob index tag based filters, there can be at most 10 tag filters
         * 
         * @return builder
         * 
         */
        public Builder blobIndexMatch(TagFilterArgs... blobIndexMatch) {
            return blobIndexMatch(List.of(blobIndexMatch));
        }

        /**
         * @param blobTypes An array of predefined enum values. Currently blockBlob supports all tiering and delete actions. Only delete actions are supported for appendBlob.
         * 
         * @return builder
         * 
         */
        public Builder blobTypes(Output<List<String>> blobTypes) {
            $.blobTypes = blobTypes;
            return this;
        }

        /**
         * @param blobTypes An array of predefined enum values. Currently blockBlob supports all tiering and delete actions. Only delete actions are supported for appendBlob.
         * 
         * @return builder
         * 
         */
        public Builder blobTypes(List<String> blobTypes) {
            return blobTypes(Output.of(blobTypes));
        }

        /**
         * @param blobTypes An array of predefined enum values. Currently blockBlob supports all tiering and delete actions. Only delete actions are supported for appendBlob.
         * 
         * @return builder
         * 
         */
        public Builder blobTypes(String... blobTypes) {
            return blobTypes(List.of(blobTypes));
        }

        /**
         * @param prefixMatch An array of strings for prefixes to be match.
         * 
         * @return builder
         * 
         */
        public Builder prefixMatch(@Nullable Output<List<String>> prefixMatch) {
            $.prefixMatch = prefixMatch;
            return this;
        }

        /**
         * @param prefixMatch An array of strings for prefixes to be match.
         * 
         * @return builder
         * 
         */
        public Builder prefixMatch(List<String> prefixMatch) {
            return prefixMatch(Output.of(prefixMatch));
        }

        /**
         * @param prefixMatch An array of strings for prefixes to be match.
         * 
         * @return builder
         * 
         */
        public Builder prefixMatch(String... prefixMatch) {
            return prefixMatch(List.of(prefixMatch));
        }

        public ManagementPolicyFilterArgs build() {
            $.blobTypes = Objects.requireNonNull($.blobTypes, "expected parameter 'blobTypes' to be non-null");
            return $;
        }
    }

}
