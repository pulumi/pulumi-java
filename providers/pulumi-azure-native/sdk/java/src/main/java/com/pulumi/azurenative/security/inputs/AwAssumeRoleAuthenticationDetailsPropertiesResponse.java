// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.security.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * AWS cloud account connector based assume role, the role enables delegating access to your AWS resources. The role is composed of role Amazon Resource Name (ARN) and external ID. For more details, refer to &lt;a href=&#34;https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user.html&#34;&gt;Creating a Role to Delegate Permissions to an IAM User (write only)&lt;/a&gt;
 * 
 */
public final class AwAssumeRoleAuthenticationDetailsPropertiesResponse extends com.pulumi.resources.InvokeArgs {

    public static final AwAssumeRoleAuthenticationDetailsPropertiesResponse Empty = new AwAssumeRoleAuthenticationDetailsPropertiesResponse();

    /**
     * The ID of the cloud account
     * 
     */
    @Import(name="accountId", required=true)
    private String accountId;

    public String accountId() {
        return this.accountId;
    }

    /**
     * State of the multi-cloud connector
     * 
     */
    @Import(name="authenticationProvisioningState", required=true)
    private String authenticationProvisioningState;

    public String authenticationProvisioningState() {
        return this.authenticationProvisioningState;
    }

    /**
     * Connect to your cloud account, for AWS use either account credentials or role-based authentication. For GCP use account organization credentials.
     * Expected value is &#39;awsAssumeRole&#39;.
     * 
     */
    @Import(name="authenticationType", required=true)
    private String authenticationType;

    public String authenticationType() {
        return this.authenticationType;
    }

    /**
     * Assumed role ID is an identifier that you can use to create temporary security credentials.
     * 
     */
    @Import(name="awsAssumeRoleArn", required=true)
    private String awsAssumeRoleArn;

    public String awsAssumeRoleArn() {
        return this.awsAssumeRoleArn;
    }

    /**
     * A unique identifier that is required when you assume a role in another account.
     * 
     */
    @Import(name="awsExternalId", required=true)
    private String awsExternalId;

    public String awsExternalId() {
        return this.awsExternalId;
    }

    /**
     * The permissions detected in the cloud account.
     * 
     */
    @Import(name="grantedPermissions", required=true)
    private List<String> grantedPermissions;

    public List<String> grantedPermissions() {
        return this.grantedPermissions;
    }

    private AwAssumeRoleAuthenticationDetailsPropertiesResponse() {}

    private AwAssumeRoleAuthenticationDetailsPropertiesResponse(AwAssumeRoleAuthenticationDetailsPropertiesResponse $) {
        this.accountId = $.accountId;
        this.authenticationProvisioningState = $.authenticationProvisioningState;
        this.authenticationType = $.authenticationType;
        this.awsAssumeRoleArn = $.awsAssumeRoleArn;
        this.awsExternalId = $.awsExternalId;
        this.grantedPermissions = $.grantedPermissions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AwAssumeRoleAuthenticationDetailsPropertiesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AwAssumeRoleAuthenticationDetailsPropertiesResponse $;

        public Builder() {
            $ = new AwAssumeRoleAuthenticationDetailsPropertiesResponse();
        }

        public Builder(AwAssumeRoleAuthenticationDetailsPropertiesResponse defaults) {
            $ = new AwAssumeRoleAuthenticationDetailsPropertiesResponse(Objects.requireNonNull(defaults));
        }

        public Builder accountId(String accountId) {
            $.accountId = accountId;
            return this;
        }

        public Builder authenticationProvisioningState(String authenticationProvisioningState) {
            $.authenticationProvisioningState = authenticationProvisioningState;
            return this;
        }

        public Builder authenticationType(String authenticationType) {
            $.authenticationType = authenticationType;
            return this;
        }

        public Builder awsAssumeRoleArn(String awsAssumeRoleArn) {
            $.awsAssumeRoleArn = awsAssumeRoleArn;
            return this;
        }

        public Builder awsExternalId(String awsExternalId) {
            $.awsExternalId = awsExternalId;
            return this;
        }

        public Builder grantedPermissions(List<String> grantedPermissions) {
            $.grantedPermissions = grantedPermissions;
            return this;
        }

        public Builder grantedPermissions(String... grantedPermissions) {
            return grantedPermissions(List.of(grantedPermissions));
        }

        public AwAssumeRoleAuthenticationDetailsPropertiesResponse build() {
            $.accountId = Objects.requireNonNull($.accountId, "expected parameter 'accountId' to be non-null");
            $.authenticationProvisioningState = Objects.requireNonNull($.authenticationProvisioningState, "expected parameter 'authenticationProvisioningState' to be non-null");
            $.authenticationType = Codegen.stringProp("authenticationType").arg($.authenticationType).require();
            $.awsAssumeRoleArn = Objects.requireNonNull($.awsAssumeRoleArn, "expected parameter 'awsAssumeRoleArn' to be non-null");
            $.awsExternalId = Objects.requireNonNull($.awsExternalId, "expected parameter 'awsExternalId' to be non-null");
            $.grantedPermissions = Objects.requireNonNull($.grantedPermissions, "expected parameter 'grantedPermissions' to be non-null");
            return $;
        }
    }

}
