// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.web.inputs;

import com.pulumi.azurenative.web.inputs.ApiDefinitionInfoResponse;
import com.pulumi.azurenative.web.inputs.ApiManagementConfigResponse;
import com.pulumi.azurenative.web.inputs.AutoHealRulesResponse;
import com.pulumi.azurenative.web.inputs.AzureStorageInfoValueResponse;
import com.pulumi.azurenative.web.inputs.ConnStringInfoResponse;
import com.pulumi.azurenative.web.inputs.CorsSettingsResponse;
import com.pulumi.azurenative.web.inputs.ExperimentsResponse;
import com.pulumi.azurenative.web.inputs.HandlerMappingResponse;
import com.pulumi.azurenative.web.inputs.IpSecurityRestrictionResponse;
import com.pulumi.azurenative.web.inputs.NameValuePairResponse;
import com.pulumi.azurenative.web.inputs.PushSettingsResponse;
import com.pulumi.azurenative.web.inputs.SiteLimitsResponse;
import com.pulumi.azurenative.web.inputs.SiteMachineKeyResponse;
import com.pulumi.azurenative.web.inputs.VirtualApplicationResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Configuration of an App Service app.
 * 
 */
public final class SiteConfigResponse extends com.pulumi.resources.InvokeArgs {

    public static final SiteConfigResponse Empty = new SiteConfigResponse();

    /**
     * Flag to use Managed Identity Creds for ACR pull
     * 
     */
    @Import(name="acrUseManagedIdentityCreds")
    private @Nullable Boolean acrUseManagedIdentityCreds;

    public Optional<Boolean> acrUseManagedIdentityCreds() {
        return Optional.ofNullable(this.acrUseManagedIdentityCreds);
    }

    /**
     * If using user managed identity, the user managed identity ClientId
     * 
     */
    @Import(name="acrUserManagedIdentityID")
    private @Nullable String acrUserManagedIdentityID;

    public Optional<String> acrUserManagedIdentityID() {
        return Optional.ofNullable(this.acrUserManagedIdentityID);
    }

    /**
     * &lt;code&gt;true&lt;/code&gt; if Always On is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    @Import(name="alwaysOn")
    private @Nullable Boolean alwaysOn;

    public Optional<Boolean> alwaysOn() {
        return Optional.ofNullable(this.alwaysOn);
    }

    /**
     * Information about the formal API definition for the app.
     * 
     */
    @Import(name="apiDefinition")
    private @Nullable ApiDefinitionInfoResponse apiDefinition;

    public Optional<ApiDefinitionInfoResponse> apiDefinition() {
        return Optional.ofNullable(this.apiDefinition);
    }

    /**
     * Azure API management settings linked to the app.
     * 
     */
    @Import(name="apiManagementConfig")
    private @Nullable ApiManagementConfigResponse apiManagementConfig;

    public Optional<ApiManagementConfigResponse> apiManagementConfig() {
        return Optional.ofNullable(this.apiManagementConfig);
    }

    /**
     * App command line to launch.
     * 
     */
    @Import(name="appCommandLine")
    private @Nullable String appCommandLine;

    public Optional<String> appCommandLine() {
        return Optional.ofNullable(this.appCommandLine);
    }

    /**
     * Application settings.
     * 
     */
    @Import(name="appSettings")
    private @Nullable List<NameValuePairResponse> appSettings;

    public Optional<List<NameValuePairResponse>> appSettings() {
        return Optional.ofNullable(this.appSettings);
    }

    /**
     * &lt;code&gt;true&lt;/code&gt; if Auto Heal is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    @Import(name="autoHealEnabled")
    private @Nullable Boolean autoHealEnabled;

    public Optional<Boolean> autoHealEnabled() {
        return Optional.ofNullable(this.autoHealEnabled);
    }

    /**
     * Auto Heal rules.
     * 
     */
    @Import(name="autoHealRules")
    private @Nullable AutoHealRulesResponse autoHealRules;

    public Optional<AutoHealRulesResponse> autoHealRules() {
        return Optional.ofNullable(this.autoHealRules);
    }

    /**
     * Auto-swap slot name.
     * 
     */
    @Import(name="autoSwapSlotName")
    private @Nullable String autoSwapSlotName;

    public Optional<String> autoSwapSlotName() {
        return Optional.ofNullable(this.autoSwapSlotName);
    }

    /**
     * List of Azure Storage Accounts.
     * 
     */
    @Import(name="azureStorageAccounts")
    private @Nullable Map<String,AzureStorageInfoValueResponse> azureStorageAccounts;

    public Optional<Map<String,AzureStorageInfoValueResponse>> azureStorageAccounts() {
        return Optional.ofNullable(this.azureStorageAccounts);
    }

    /**
     * Connection strings.
     * 
     */
    @Import(name="connectionStrings")
    private @Nullable List<ConnStringInfoResponse> connectionStrings;

    public Optional<List<ConnStringInfoResponse>> connectionStrings() {
        return Optional.ofNullable(this.connectionStrings);
    }

    /**
     * Cross-Origin Resource Sharing (CORS) settings.
     * 
     */
    @Import(name="cors")
    private @Nullable CorsSettingsResponse cors;

    public Optional<CorsSettingsResponse> cors() {
        return Optional.ofNullable(this.cors);
    }

    /**
     * Default documents.
     * 
     */
    @Import(name="defaultDocuments")
    private @Nullable List<String> defaultDocuments;

    public Optional<List<String>> defaultDocuments() {
        return Optional.ofNullable(this.defaultDocuments);
    }

    /**
     * &lt;code&gt;true&lt;/code&gt; if detailed error logging is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    @Import(name="detailedErrorLoggingEnabled")
    private @Nullable Boolean detailedErrorLoggingEnabled;

    public Optional<Boolean> detailedErrorLoggingEnabled() {
        return Optional.ofNullable(this.detailedErrorLoggingEnabled);
    }

    /**
     * Document root.
     * 
     */
    @Import(name="documentRoot")
    private @Nullable String documentRoot;

    public Optional<String> documentRoot() {
        return Optional.ofNullable(this.documentRoot);
    }

    /**
     * This is work around for polymorphic types.
     * 
     */
    @Import(name="experiments")
    private @Nullable ExperimentsResponse experiments;

    public Optional<ExperimentsResponse> experiments() {
        return Optional.ofNullable(this.experiments);
    }

    /**
     * State of FTP / FTPS service
     * 
     */
    @Import(name="ftpsState")
    private @Nullable String ftpsState;

    public Optional<String> ftpsState() {
        return Optional.ofNullable(this.ftpsState);
    }

    /**
     * Maximum number of workers that a site can scale out to.
     * This setting only applies to the Consumption and Elastic Premium Plans
     * 
     */
    @Import(name="functionAppScaleLimit")
    private @Nullable Integer functionAppScaleLimit;

    public Optional<Integer> functionAppScaleLimit() {
        return Optional.ofNullable(this.functionAppScaleLimit);
    }

    /**
     * Gets or sets a value indicating whether functions runtime scale monitoring is enabled. When enabled,
     * the ScaleController will not monitor event sources directly, but will instead call to the
     * runtime to get scale status.
     * 
     */
    @Import(name="functionsRuntimeScaleMonitoringEnabled")
    private @Nullable Boolean functionsRuntimeScaleMonitoringEnabled;

    public Optional<Boolean> functionsRuntimeScaleMonitoringEnabled() {
        return Optional.ofNullable(this.functionsRuntimeScaleMonitoringEnabled);
    }

    /**
     * Handler mappings.
     * 
     */
    @Import(name="handlerMappings")
    private @Nullable List<HandlerMappingResponse> handlerMappings;

    public Optional<List<HandlerMappingResponse>> handlerMappings() {
        return Optional.ofNullable(this.handlerMappings);
    }

    /**
     * Health check path
     * 
     */
    @Import(name="healthCheckPath")
    private @Nullable String healthCheckPath;

    public Optional<String> healthCheckPath() {
        return Optional.ofNullable(this.healthCheckPath);
    }

    /**
     * Http20Enabled: configures a web site to allow clients to connect over http2.0
     * 
     */
    @Import(name="http20Enabled")
    private @Nullable Boolean http20Enabled;

    public Optional<Boolean> http20Enabled() {
        return Optional.ofNullable(this.http20Enabled);
    }

    /**
     * &lt;code&gt;true&lt;/code&gt; if HTTP logging is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    @Import(name="httpLoggingEnabled")
    private @Nullable Boolean httpLoggingEnabled;

    public Optional<Boolean> httpLoggingEnabled() {
        return Optional.ofNullable(this.httpLoggingEnabled);
    }

    /**
     * IP security restrictions for main.
     * 
     */
    @Import(name="ipSecurityRestrictions")
    private @Nullable List<IpSecurityRestrictionResponse> ipSecurityRestrictions;

    public Optional<List<IpSecurityRestrictionResponse>> ipSecurityRestrictions() {
        return Optional.ofNullable(this.ipSecurityRestrictions);
    }

    /**
     * Java container.
     * 
     */
    @Import(name="javaContainer")
    private @Nullable String javaContainer;

    public Optional<String> javaContainer() {
        return Optional.ofNullable(this.javaContainer);
    }

    /**
     * Java container version.
     * 
     */
    @Import(name="javaContainerVersion")
    private @Nullable String javaContainerVersion;

    public Optional<String> javaContainerVersion() {
        return Optional.ofNullable(this.javaContainerVersion);
    }

    /**
     * Java version.
     * 
     */
    @Import(name="javaVersion")
    private @Nullable String javaVersion;

    public Optional<String> javaVersion() {
        return Optional.ofNullable(this.javaVersion);
    }

    /**
     * Identity to use for Key Vault Reference authentication.
     * 
     */
    @Import(name="keyVaultReferenceIdentity")
    private @Nullable String keyVaultReferenceIdentity;

    public Optional<String> keyVaultReferenceIdentity() {
        return Optional.ofNullable(this.keyVaultReferenceIdentity);
    }

    /**
     * Site limits.
     * 
     */
    @Import(name="limits")
    private @Nullable SiteLimitsResponse limits;

    public Optional<SiteLimitsResponse> limits() {
        return Optional.ofNullable(this.limits);
    }

    /**
     * Linux App Framework and version
     * 
     */
    @Import(name="linuxFxVersion")
    private @Nullable String linuxFxVersion;

    public Optional<String> linuxFxVersion() {
        return Optional.ofNullable(this.linuxFxVersion);
    }

    /**
     * Site load balancing.
     * 
     */
    @Import(name="loadBalancing")
    private @Nullable String loadBalancing;

    public Optional<String> loadBalancing() {
        return Optional.ofNullable(this.loadBalancing);
    }

    /**
     * &lt;code&gt;true&lt;/code&gt; to enable local MySQL; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    @Import(name="localMySqlEnabled")
    private @Nullable Boolean localMySqlEnabled;

    public Optional<Boolean> localMySqlEnabled() {
        return Optional.ofNullable(this.localMySqlEnabled);
    }

    /**
     * HTTP logs directory size limit.
     * 
     */
    @Import(name="logsDirectorySizeLimit")
    private @Nullable Integer logsDirectorySizeLimit;

    public Optional<Integer> logsDirectorySizeLimit() {
        return Optional.ofNullable(this.logsDirectorySizeLimit);
    }

    /**
     * Site MachineKey.
     * 
     */
    @Import(name="machineKey", required=true)
    private SiteMachineKeyResponse machineKey;

    public SiteMachineKeyResponse machineKey() {
        return this.machineKey;
    }

    /**
     * Managed pipeline mode.
     * 
     */
    @Import(name="managedPipelineMode")
    private @Nullable String managedPipelineMode;

    public Optional<String> managedPipelineMode() {
        return Optional.ofNullable(this.managedPipelineMode);
    }

    /**
     * Managed Service Identity Id
     * 
     */
    @Import(name="managedServiceIdentityId")
    private @Nullable Integer managedServiceIdentityId;

    public Optional<Integer> managedServiceIdentityId() {
        return Optional.ofNullable(this.managedServiceIdentityId);
    }

    /**
     * MinTlsVersion: configures the minimum version of TLS required for SSL requests
     * 
     */
    @Import(name="minTlsVersion")
    private @Nullable String minTlsVersion;

    public Optional<String> minTlsVersion() {
        return Optional.ofNullable(this.minTlsVersion);
    }

    /**
     * Number of minimum instance count for a site
     * This setting only applies to the Elastic Plans
     * 
     */
    @Import(name="minimumElasticInstanceCount")
    private @Nullable Integer minimumElasticInstanceCount;

    public Optional<Integer> minimumElasticInstanceCount() {
        return Optional.ofNullable(this.minimumElasticInstanceCount);
    }

    /**
     * .NET Framework version.
     * 
     */
    @Import(name="netFrameworkVersion")
    private @Nullable String netFrameworkVersion;

    public Optional<String> netFrameworkVersion() {
        return Optional.ofNullable(this.netFrameworkVersion);
    }

    /**
     * Version of Node.js.
     * 
     */
    @Import(name="nodeVersion")
    private @Nullable String nodeVersion;

    public Optional<String> nodeVersion() {
        return Optional.ofNullable(this.nodeVersion);
    }

    /**
     * Number of workers.
     * 
     */
    @Import(name="numberOfWorkers")
    private @Nullable Integer numberOfWorkers;

    public Optional<Integer> numberOfWorkers() {
        return Optional.ofNullable(this.numberOfWorkers);
    }

    /**
     * Version of PHP.
     * 
     */
    @Import(name="phpVersion")
    private @Nullable String phpVersion;

    public Optional<String> phpVersion() {
        return Optional.ofNullable(this.phpVersion);
    }

    /**
     * Version of PowerShell.
     * 
     */
    @Import(name="powerShellVersion")
    private @Nullable String powerShellVersion;

    public Optional<String> powerShellVersion() {
        return Optional.ofNullable(this.powerShellVersion);
    }

    /**
     * Number of preWarmed instances.
     * This setting only applies to the Consumption and Elastic Plans
     * 
     */
    @Import(name="preWarmedInstanceCount")
    private @Nullable Integer preWarmedInstanceCount;

    public Optional<Integer> preWarmedInstanceCount() {
        return Optional.ofNullable(this.preWarmedInstanceCount);
    }

    /**
     * Property to allow or block all public traffic.
     * 
     */
    @Import(name="publicNetworkAccess")
    private @Nullable String publicNetworkAccess;

    public Optional<String> publicNetworkAccess() {
        return Optional.ofNullable(this.publicNetworkAccess);
    }

    /**
     * Publishing user name.
     * 
     */
    @Import(name="publishingUsername")
    private @Nullable String publishingUsername;

    public Optional<String> publishingUsername() {
        return Optional.ofNullable(this.publishingUsername);
    }

    /**
     * Push endpoint settings.
     * 
     */
    @Import(name="push")
    private @Nullable PushSettingsResponse push;

    public Optional<PushSettingsResponse> push() {
        return Optional.ofNullable(this.push);
    }

    /**
     * Version of Python.
     * 
     */
    @Import(name="pythonVersion")
    private @Nullable String pythonVersion;

    public Optional<String> pythonVersion() {
        return Optional.ofNullable(this.pythonVersion);
    }

    /**
     * &lt;code&gt;true&lt;/code&gt; if remote debugging is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    @Import(name="remoteDebuggingEnabled")
    private @Nullable Boolean remoteDebuggingEnabled;

    public Optional<Boolean> remoteDebuggingEnabled() {
        return Optional.ofNullable(this.remoteDebuggingEnabled);
    }

    /**
     * Remote debugging version.
     * 
     */
    @Import(name="remoteDebuggingVersion")
    private @Nullable String remoteDebuggingVersion;

    public Optional<String> remoteDebuggingVersion() {
        return Optional.ofNullable(this.remoteDebuggingVersion);
    }

    /**
     * &lt;code&gt;true&lt;/code&gt; if request tracing is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    @Import(name="requestTracingEnabled")
    private @Nullable Boolean requestTracingEnabled;

    public Optional<Boolean> requestTracingEnabled() {
        return Optional.ofNullable(this.requestTracingEnabled);
    }

    /**
     * Request tracing expiration time.
     * 
     */
    @Import(name="requestTracingExpirationTime")
    private @Nullable String requestTracingExpirationTime;

    public Optional<String> requestTracingExpirationTime() {
        return Optional.ofNullable(this.requestTracingExpirationTime);
    }

    /**
     * IP security restrictions for scm.
     * 
     */
    @Import(name="scmIpSecurityRestrictions")
    private @Nullable List<IpSecurityRestrictionResponse> scmIpSecurityRestrictions;

    public Optional<List<IpSecurityRestrictionResponse>> scmIpSecurityRestrictions() {
        return Optional.ofNullable(this.scmIpSecurityRestrictions);
    }

    /**
     * IP security restrictions for scm to use main.
     * 
     */
    @Import(name="scmIpSecurityRestrictionsUseMain")
    private @Nullable Boolean scmIpSecurityRestrictionsUseMain;

    public Optional<Boolean> scmIpSecurityRestrictionsUseMain() {
        return Optional.ofNullable(this.scmIpSecurityRestrictionsUseMain);
    }

    /**
     * ScmMinTlsVersion: configures the minimum version of TLS required for SSL requests for SCM site
     * 
     */
    @Import(name="scmMinTlsVersion")
    private @Nullable String scmMinTlsVersion;

    public Optional<String> scmMinTlsVersion() {
        return Optional.ofNullable(this.scmMinTlsVersion);
    }

    /**
     * SCM type.
     * 
     */
    @Import(name="scmType")
    private @Nullable String scmType;

    public Optional<String> scmType() {
        return Optional.ofNullable(this.scmType);
    }

    /**
     * Tracing options.
     * 
     */
    @Import(name="tracingOptions")
    private @Nullable String tracingOptions;

    public Optional<String> tracingOptions() {
        return Optional.ofNullable(this.tracingOptions);
    }

    /**
     * &lt;code&gt;true&lt;/code&gt; to use 32-bit worker process; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    @Import(name="use32BitWorkerProcess")
    private @Nullable Boolean use32BitWorkerProcess;

    public Optional<Boolean> use32BitWorkerProcess() {
        return Optional.ofNullable(this.use32BitWorkerProcess);
    }

    /**
     * Virtual applications.
     * 
     */
    @Import(name="virtualApplications")
    private @Nullable List<VirtualApplicationResponse> virtualApplications;

    public Optional<List<VirtualApplicationResponse>> virtualApplications() {
        return Optional.ofNullable(this.virtualApplications);
    }

    /**
     * Virtual Network name.
     * 
     */
    @Import(name="vnetName")
    private @Nullable String vnetName;

    public Optional<String> vnetName() {
        return Optional.ofNullable(this.vnetName);
    }

    /**
     * The number of private ports assigned to this app. These will be assigned dynamically on runtime.
     * 
     */
    @Import(name="vnetPrivatePortsCount")
    private @Nullable Integer vnetPrivatePortsCount;

    public Optional<Integer> vnetPrivatePortsCount() {
        return Optional.ofNullable(this.vnetPrivatePortsCount);
    }

    /**
     * Virtual Network Route All enabled. This causes all outbound traffic to have Virtual Network Security Groups and User Defined Routes applied.
     * 
     */
    @Import(name="vnetRouteAllEnabled")
    private @Nullable Boolean vnetRouteAllEnabled;

    public Optional<Boolean> vnetRouteAllEnabled() {
        return Optional.ofNullable(this.vnetRouteAllEnabled);
    }

    /**
     * &lt;code&gt;true&lt;/code&gt; if WebSocket is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    @Import(name="webSocketsEnabled")
    private @Nullable Boolean webSocketsEnabled;

    public Optional<Boolean> webSocketsEnabled() {
        return Optional.ofNullable(this.webSocketsEnabled);
    }

    /**
     * Sets the time zone a site uses for generating timestamps. Compatible with Linux and Windows App Service. Setting the WEBSITE_TIME_ZONE app setting takes precedence over this config. For Linux, expects tz database values https://www.iana.org/time-zones (for a quick reference see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones). For Windows, expects one of the time zones listed under HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Time Zones
     * 
     */
    @Import(name="websiteTimeZone")
    private @Nullable String websiteTimeZone;

    public Optional<String> websiteTimeZone() {
        return Optional.ofNullable(this.websiteTimeZone);
    }

    /**
     * Xenon App Framework and version
     * 
     */
    @Import(name="windowsFxVersion")
    private @Nullable String windowsFxVersion;

    public Optional<String> windowsFxVersion() {
        return Optional.ofNullable(this.windowsFxVersion);
    }

    /**
     * Explicit Managed Service Identity Id
     * 
     */
    @Import(name="xManagedServiceIdentityId")
    private @Nullable Integer xManagedServiceIdentityId;

    public Optional<Integer> xManagedServiceIdentityId() {
        return Optional.ofNullable(this.xManagedServiceIdentityId);
    }

    private SiteConfigResponse() {}

    private SiteConfigResponse(SiteConfigResponse $) {
        this.acrUseManagedIdentityCreds = $.acrUseManagedIdentityCreds;
        this.acrUserManagedIdentityID = $.acrUserManagedIdentityID;
        this.alwaysOn = $.alwaysOn;
        this.apiDefinition = $.apiDefinition;
        this.apiManagementConfig = $.apiManagementConfig;
        this.appCommandLine = $.appCommandLine;
        this.appSettings = $.appSettings;
        this.autoHealEnabled = $.autoHealEnabled;
        this.autoHealRules = $.autoHealRules;
        this.autoSwapSlotName = $.autoSwapSlotName;
        this.azureStorageAccounts = $.azureStorageAccounts;
        this.connectionStrings = $.connectionStrings;
        this.cors = $.cors;
        this.defaultDocuments = $.defaultDocuments;
        this.detailedErrorLoggingEnabled = $.detailedErrorLoggingEnabled;
        this.documentRoot = $.documentRoot;
        this.experiments = $.experiments;
        this.ftpsState = $.ftpsState;
        this.functionAppScaleLimit = $.functionAppScaleLimit;
        this.functionsRuntimeScaleMonitoringEnabled = $.functionsRuntimeScaleMonitoringEnabled;
        this.handlerMappings = $.handlerMappings;
        this.healthCheckPath = $.healthCheckPath;
        this.http20Enabled = $.http20Enabled;
        this.httpLoggingEnabled = $.httpLoggingEnabled;
        this.ipSecurityRestrictions = $.ipSecurityRestrictions;
        this.javaContainer = $.javaContainer;
        this.javaContainerVersion = $.javaContainerVersion;
        this.javaVersion = $.javaVersion;
        this.keyVaultReferenceIdentity = $.keyVaultReferenceIdentity;
        this.limits = $.limits;
        this.linuxFxVersion = $.linuxFxVersion;
        this.loadBalancing = $.loadBalancing;
        this.localMySqlEnabled = $.localMySqlEnabled;
        this.logsDirectorySizeLimit = $.logsDirectorySizeLimit;
        this.machineKey = $.machineKey;
        this.managedPipelineMode = $.managedPipelineMode;
        this.managedServiceIdentityId = $.managedServiceIdentityId;
        this.minTlsVersion = $.minTlsVersion;
        this.minimumElasticInstanceCount = $.minimumElasticInstanceCount;
        this.netFrameworkVersion = $.netFrameworkVersion;
        this.nodeVersion = $.nodeVersion;
        this.numberOfWorkers = $.numberOfWorkers;
        this.phpVersion = $.phpVersion;
        this.powerShellVersion = $.powerShellVersion;
        this.preWarmedInstanceCount = $.preWarmedInstanceCount;
        this.publicNetworkAccess = $.publicNetworkAccess;
        this.publishingUsername = $.publishingUsername;
        this.push = $.push;
        this.pythonVersion = $.pythonVersion;
        this.remoteDebuggingEnabled = $.remoteDebuggingEnabled;
        this.remoteDebuggingVersion = $.remoteDebuggingVersion;
        this.requestTracingEnabled = $.requestTracingEnabled;
        this.requestTracingExpirationTime = $.requestTracingExpirationTime;
        this.scmIpSecurityRestrictions = $.scmIpSecurityRestrictions;
        this.scmIpSecurityRestrictionsUseMain = $.scmIpSecurityRestrictionsUseMain;
        this.scmMinTlsVersion = $.scmMinTlsVersion;
        this.scmType = $.scmType;
        this.tracingOptions = $.tracingOptions;
        this.use32BitWorkerProcess = $.use32BitWorkerProcess;
        this.virtualApplications = $.virtualApplications;
        this.vnetName = $.vnetName;
        this.vnetPrivatePortsCount = $.vnetPrivatePortsCount;
        this.vnetRouteAllEnabled = $.vnetRouteAllEnabled;
        this.webSocketsEnabled = $.webSocketsEnabled;
        this.websiteTimeZone = $.websiteTimeZone;
        this.windowsFxVersion = $.windowsFxVersion;
        this.xManagedServiceIdentityId = $.xManagedServiceIdentityId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SiteConfigResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SiteConfigResponse $;

        public Builder() {
            $ = new SiteConfigResponse();
        }

        public Builder(SiteConfigResponse defaults) {
            $ = new SiteConfigResponse(Objects.requireNonNull(defaults));
        }

        public Builder acrUseManagedIdentityCreds(@Nullable Boolean acrUseManagedIdentityCreds) {
            $.acrUseManagedIdentityCreds = acrUseManagedIdentityCreds;
            return this;
        }

        public Builder acrUserManagedIdentityID(@Nullable String acrUserManagedIdentityID) {
            $.acrUserManagedIdentityID = acrUserManagedIdentityID;
            return this;
        }

        public Builder alwaysOn(@Nullable Boolean alwaysOn) {
            $.alwaysOn = alwaysOn;
            return this;
        }

        public Builder apiDefinition(@Nullable ApiDefinitionInfoResponse apiDefinition) {
            $.apiDefinition = apiDefinition;
            return this;
        }

        public Builder apiManagementConfig(@Nullable ApiManagementConfigResponse apiManagementConfig) {
            $.apiManagementConfig = apiManagementConfig;
            return this;
        }

        public Builder appCommandLine(@Nullable String appCommandLine) {
            $.appCommandLine = appCommandLine;
            return this;
        }

        public Builder appSettings(@Nullable List<NameValuePairResponse> appSettings) {
            $.appSettings = appSettings;
            return this;
        }

        public Builder appSettings(NameValuePairResponse... appSettings) {
            return appSettings(List.of(appSettings));
        }

        public Builder autoHealEnabled(@Nullable Boolean autoHealEnabled) {
            $.autoHealEnabled = autoHealEnabled;
            return this;
        }

        public Builder autoHealRules(@Nullable AutoHealRulesResponse autoHealRules) {
            $.autoHealRules = autoHealRules;
            return this;
        }

        public Builder autoSwapSlotName(@Nullable String autoSwapSlotName) {
            $.autoSwapSlotName = autoSwapSlotName;
            return this;
        }

        public Builder azureStorageAccounts(@Nullable Map<String,AzureStorageInfoValueResponse> azureStorageAccounts) {
            $.azureStorageAccounts = azureStorageAccounts;
            return this;
        }

        public Builder connectionStrings(@Nullable List<ConnStringInfoResponse> connectionStrings) {
            $.connectionStrings = connectionStrings;
            return this;
        }

        public Builder connectionStrings(ConnStringInfoResponse... connectionStrings) {
            return connectionStrings(List.of(connectionStrings));
        }

        public Builder cors(@Nullable CorsSettingsResponse cors) {
            $.cors = cors;
            return this;
        }

        public Builder defaultDocuments(@Nullable List<String> defaultDocuments) {
            $.defaultDocuments = defaultDocuments;
            return this;
        }

        public Builder defaultDocuments(String... defaultDocuments) {
            return defaultDocuments(List.of(defaultDocuments));
        }

        public Builder detailedErrorLoggingEnabled(@Nullable Boolean detailedErrorLoggingEnabled) {
            $.detailedErrorLoggingEnabled = detailedErrorLoggingEnabled;
            return this;
        }

        public Builder documentRoot(@Nullable String documentRoot) {
            $.documentRoot = documentRoot;
            return this;
        }

        public Builder experiments(@Nullable ExperimentsResponse experiments) {
            $.experiments = experiments;
            return this;
        }

        public Builder ftpsState(@Nullable String ftpsState) {
            $.ftpsState = ftpsState;
            return this;
        }

        public Builder functionAppScaleLimit(@Nullable Integer functionAppScaleLimit) {
            $.functionAppScaleLimit = functionAppScaleLimit;
            return this;
        }

        public Builder functionsRuntimeScaleMonitoringEnabled(@Nullable Boolean functionsRuntimeScaleMonitoringEnabled) {
            $.functionsRuntimeScaleMonitoringEnabled = functionsRuntimeScaleMonitoringEnabled;
            return this;
        }

        public Builder handlerMappings(@Nullable List<HandlerMappingResponse> handlerMappings) {
            $.handlerMappings = handlerMappings;
            return this;
        }

        public Builder handlerMappings(HandlerMappingResponse... handlerMappings) {
            return handlerMappings(List.of(handlerMappings));
        }

        public Builder healthCheckPath(@Nullable String healthCheckPath) {
            $.healthCheckPath = healthCheckPath;
            return this;
        }

        public Builder http20Enabled(@Nullable Boolean http20Enabled) {
            $.http20Enabled = http20Enabled;
            return this;
        }

        public Builder httpLoggingEnabled(@Nullable Boolean httpLoggingEnabled) {
            $.httpLoggingEnabled = httpLoggingEnabled;
            return this;
        }

        public Builder ipSecurityRestrictions(@Nullable List<IpSecurityRestrictionResponse> ipSecurityRestrictions) {
            $.ipSecurityRestrictions = ipSecurityRestrictions;
            return this;
        }

        public Builder ipSecurityRestrictions(IpSecurityRestrictionResponse... ipSecurityRestrictions) {
            return ipSecurityRestrictions(List.of(ipSecurityRestrictions));
        }

        public Builder javaContainer(@Nullable String javaContainer) {
            $.javaContainer = javaContainer;
            return this;
        }

        public Builder javaContainerVersion(@Nullable String javaContainerVersion) {
            $.javaContainerVersion = javaContainerVersion;
            return this;
        }

        public Builder javaVersion(@Nullable String javaVersion) {
            $.javaVersion = javaVersion;
            return this;
        }

        public Builder keyVaultReferenceIdentity(@Nullable String keyVaultReferenceIdentity) {
            $.keyVaultReferenceIdentity = keyVaultReferenceIdentity;
            return this;
        }

        public Builder limits(@Nullable SiteLimitsResponse limits) {
            $.limits = limits;
            return this;
        }

        public Builder linuxFxVersion(@Nullable String linuxFxVersion) {
            $.linuxFxVersion = linuxFxVersion;
            return this;
        }

        public Builder loadBalancing(@Nullable String loadBalancing) {
            $.loadBalancing = loadBalancing;
            return this;
        }

        public Builder localMySqlEnabled(@Nullable Boolean localMySqlEnabled) {
            $.localMySqlEnabled = localMySqlEnabled;
            return this;
        }

        public Builder logsDirectorySizeLimit(@Nullable Integer logsDirectorySizeLimit) {
            $.logsDirectorySizeLimit = logsDirectorySizeLimit;
            return this;
        }

        public Builder machineKey(SiteMachineKeyResponse machineKey) {
            $.machineKey = machineKey;
            return this;
        }

        public Builder managedPipelineMode(@Nullable String managedPipelineMode) {
            $.managedPipelineMode = managedPipelineMode;
            return this;
        }

        public Builder managedServiceIdentityId(@Nullable Integer managedServiceIdentityId) {
            $.managedServiceIdentityId = managedServiceIdentityId;
            return this;
        }

        public Builder minTlsVersion(@Nullable String minTlsVersion) {
            $.minTlsVersion = minTlsVersion;
            return this;
        }

        public Builder minimumElasticInstanceCount(@Nullable Integer minimumElasticInstanceCount) {
            $.minimumElasticInstanceCount = minimumElasticInstanceCount;
            return this;
        }

        public Builder netFrameworkVersion(@Nullable String netFrameworkVersion) {
            $.netFrameworkVersion = netFrameworkVersion;
            return this;
        }

        public Builder nodeVersion(@Nullable String nodeVersion) {
            $.nodeVersion = nodeVersion;
            return this;
        }

        public Builder numberOfWorkers(@Nullable Integer numberOfWorkers) {
            $.numberOfWorkers = numberOfWorkers;
            return this;
        }

        public Builder phpVersion(@Nullable String phpVersion) {
            $.phpVersion = phpVersion;
            return this;
        }

        public Builder powerShellVersion(@Nullable String powerShellVersion) {
            $.powerShellVersion = powerShellVersion;
            return this;
        }

        public Builder preWarmedInstanceCount(@Nullable Integer preWarmedInstanceCount) {
            $.preWarmedInstanceCount = preWarmedInstanceCount;
            return this;
        }

        public Builder publicNetworkAccess(@Nullable String publicNetworkAccess) {
            $.publicNetworkAccess = publicNetworkAccess;
            return this;
        }

        public Builder publishingUsername(@Nullable String publishingUsername) {
            $.publishingUsername = publishingUsername;
            return this;
        }

        public Builder push(@Nullable PushSettingsResponse push) {
            $.push = push;
            return this;
        }

        public Builder pythonVersion(@Nullable String pythonVersion) {
            $.pythonVersion = pythonVersion;
            return this;
        }

        public Builder remoteDebuggingEnabled(@Nullable Boolean remoteDebuggingEnabled) {
            $.remoteDebuggingEnabled = remoteDebuggingEnabled;
            return this;
        }

        public Builder remoteDebuggingVersion(@Nullable String remoteDebuggingVersion) {
            $.remoteDebuggingVersion = remoteDebuggingVersion;
            return this;
        }

        public Builder requestTracingEnabled(@Nullable Boolean requestTracingEnabled) {
            $.requestTracingEnabled = requestTracingEnabled;
            return this;
        }

        public Builder requestTracingExpirationTime(@Nullable String requestTracingExpirationTime) {
            $.requestTracingExpirationTime = requestTracingExpirationTime;
            return this;
        }

        public Builder scmIpSecurityRestrictions(@Nullable List<IpSecurityRestrictionResponse> scmIpSecurityRestrictions) {
            $.scmIpSecurityRestrictions = scmIpSecurityRestrictions;
            return this;
        }

        public Builder scmIpSecurityRestrictions(IpSecurityRestrictionResponse... scmIpSecurityRestrictions) {
            return scmIpSecurityRestrictions(List.of(scmIpSecurityRestrictions));
        }

        public Builder scmIpSecurityRestrictionsUseMain(@Nullable Boolean scmIpSecurityRestrictionsUseMain) {
            $.scmIpSecurityRestrictionsUseMain = scmIpSecurityRestrictionsUseMain;
            return this;
        }

        public Builder scmMinTlsVersion(@Nullable String scmMinTlsVersion) {
            $.scmMinTlsVersion = scmMinTlsVersion;
            return this;
        }

        public Builder scmType(@Nullable String scmType) {
            $.scmType = scmType;
            return this;
        }

        public Builder tracingOptions(@Nullable String tracingOptions) {
            $.tracingOptions = tracingOptions;
            return this;
        }

        public Builder use32BitWorkerProcess(@Nullable Boolean use32BitWorkerProcess) {
            $.use32BitWorkerProcess = use32BitWorkerProcess;
            return this;
        }

        public Builder virtualApplications(@Nullable List<VirtualApplicationResponse> virtualApplications) {
            $.virtualApplications = virtualApplications;
            return this;
        }

        public Builder virtualApplications(VirtualApplicationResponse... virtualApplications) {
            return virtualApplications(List.of(virtualApplications));
        }

        public Builder vnetName(@Nullable String vnetName) {
            $.vnetName = vnetName;
            return this;
        }

        public Builder vnetPrivatePortsCount(@Nullable Integer vnetPrivatePortsCount) {
            $.vnetPrivatePortsCount = vnetPrivatePortsCount;
            return this;
        }

        public Builder vnetRouteAllEnabled(@Nullable Boolean vnetRouteAllEnabled) {
            $.vnetRouteAllEnabled = vnetRouteAllEnabled;
            return this;
        }

        public Builder webSocketsEnabled(@Nullable Boolean webSocketsEnabled) {
            $.webSocketsEnabled = webSocketsEnabled;
            return this;
        }

        public Builder websiteTimeZone(@Nullable String websiteTimeZone) {
            $.websiteTimeZone = websiteTimeZone;
            return this;
        }

        public Builder windowsFxVersion(@Nullable String windowsFxVersion) {
            $.windowsFxVersion = windowsFxVersion;
            return this;
        }

        public Builder xManagedServiceIdentityId(@Nullable Integer xManagedServiceIdentityId) {
            $.xManagedServiceIdentityId = xManagedServiceIdentityId;
            return this;
        }

        public SiteConfigResponse build() {
            $.http20Enabled = Codegen.booleanProp("http20Enabled").arg($.http20Enabled).def(true).getNullable();
            $.localMySqlEnabled = Codegen.booleanProp("localMySqlEnabled").arg($.localMySqlEnabled).def(false).getNullable();
            $.machineKey = Objects.requireNonNull($.machineKey, "expected parameter 'machineKey' to be non-null");
            $.netFrameworkVersion = Codegen.stringProp("netFrameworkVersion").arg($.netFrameworkVersion).def("v4.6").getNullable();
            return $;
        }
    }

}
