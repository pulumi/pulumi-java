// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.eventgrid.inputs;

import com.pulumi.azurenative.eventgrid.inputs.BoolEqualsAdvancedFilterResponse;
import com.pulumi.azurenative.eventgrid.inputs.NumberGreaterThanAdvancedFilterResponse;
import com.pulumi.azurenative.eventgrid.inputs.NumberGreaterThanOrEqualsAdvancedFilterResponse;
import com.pulumi.azurenative.eventgrid.inputs.NumberInAdvancedFilterResponse;
import com.pulumi.azurenative.eventgrid.inputs.NumberLessThanAdvancedFilterResponse;
import com.pulumi.azurenative.eventgrid.inputs.NumberLessThanOrEqualsAdvancedFilterResponse;
import com.pulumi.azurenative.eventgrid.inputs.NumberNotInAdvancedFilterResponse;
import com.pulumi.azurenative.eventgrid.inputs.StringBeginsWithAdvancedFilterResponse;
import com.pulumi.azurenative.eventgrid.inputs.StringContainsAdvancedFilterResponse;
import com.pulumi.azurenative.eventgrid.inputs.StringEndsWithAdvancedFilterResponse;
import com.pulumi.azurenative.eventgrid.inputs.StringInAdvancedFilterResponse;
import com.pulumi.azurenative.eventgrid.inputs.StringNotInAdvancedFilterResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Filter for the Event Subscription.
 * 
 */
public final class EventSubscriptionFilterResponse extends com.pulumi.resources.InvokeArgs {

    public static final EventSubscriptionFilterResponse Empty = new EventSubscriptionFilterResponse();

    /**
     * An array of advanced filters that are used for filtering event subscriptions.
     * 
     */
    @Import(name="advancedFilters")
    private @Nullable List<Object> advancedFilters;

    /**
     * @return An array of advanced filters that are used for filtering event subscriptions.
     * 
     */
    public Optional<List<Object>> advancedFilters() {
        return Optional.ofNullable(this.advancedFilters);
    }

    /**
     * A list of applicable event types that need to be part of the event subscription. If it is desired to subscribe to all default event types, set the IncludedEventTypes to null.
     * 
     */
    @Import(name="includedEventTypes")
    private @Nullable List<String> includedEventTypes;

    /**
     * @return A list of applicable event types that need to be part of the event subscription. If it is desired to subscribe to all default event types, set the IncludedEventTypes to null.
     * 
     */
    public Optional<List<String>> includedEventTypes() {
        return Optional.ofNullable(this.includedEventTypes);
    }

    /**
     * Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter
     * should be compared in a case sensitive manner.
     * 
     */
    @Import(name="isSubjectCaseSensitive")
    private @Nullable Boolean isSubjectCaseSensitive;

    /**
     * @return Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter
     * should be compared in a case sensitive manner.
     * 
     */
    public Optional<Boolean> isSubjectCaseSensitive() {
        return Optional.ofNullable(this.isSubjectCaseSensitive);
    }

    /**
     * An optional string to filter events for an event subscription based on a resource path prefix.
     * The format of this depends on the publisher of the events.
     * Wildcard characters are not supported in this path.
     * 
     */
    @Import(name="subjectBeginsWith")
    private @Nullable String subjectBeginsWith;

    /**
     * @return An optional string to filter events for an event subscription based on a resource path prefix.
     * The format of this depends on the publisher of the events.
     * Wildcard characters are not supported in this path.
     * 
     */
    public Optional<String> subjectBeginsWith() {
        return Optional.ofNullable(this.subjectBeginsWith);
    }

    /**
     * An optional string to filter events for an event subscription based on a resource path suffix.
     * Wildcard characters are not supported in this path.
     * 
     */
    @Import(name="subjectEndsWith")
    private @Nullable String subjectEndsWith;

    /**
     * @return An optional string to filter events for an event subscription based on a resource path suffix.
     * Wildcard characters are not supported in this path.
     * 
     */
    public Optional<String> subjectEndsWith() {
        return Optional.ofNullable(this.subjectEndsWith);
    }

    private EventSubscriptionFilterResponse() {}

    private EventSubscriptionFilterResponse(EventSubscriptionFilterResponse $) {
        this.advancedFilters = $.advancedFilters;
        this.includedEventTypes = $.includedEventTypes;
        this.isSubjectCaseSensitive = $.isSubjectCaseSensitive;
        this.subjectBeginsWith = $.subjectBeginsWith;
        this.subjectEndsWith = $.subjectEndsWith;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EventSubscriptionFilterResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EventSubscriptionFilterResponse $;

        public Builder() {
            $ = new EventSubscriptionFilterResponse();
        }

        public Builder(EventSubscriptionFilterResponse defaults) {
            $ = new EventSubscriptionFilterResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param advancedFilters An array of advanced filters that are used for filtering event subscriptions.
         * 
         * @return builder
         * 
         */
        public Builder advancedFilters(@Nullable List<Object> advancedFilters) {
            $.advancedFilters = advancedFilters;
            return this;
        }

        /**
         * @param advancedFilters An array of advanced filters that are used for filtering event subscriptions.
         * 
         * @return builder
         * 
         */
        public Builder advancedFilters(Object... advancedFilters) {
            return advancedFilters(List.of(advancedFilters));
        }

        /**
         * @param includedEventTypes A list of applicable event types that need to be part of the event subscription. If it is desired to subscribe to all default event types, set the IncludedEventTypes to null.
         * 
         * @return builder
         * 
         */
        public Builder includedEventTypes(@Nullable List<String> includedEventTypes) {
            $.includedEventTypes = includedEventTypes;
            return this;
        }

        /**
         * @param includedEventTypes A list of applicable event types that need to be part of the event subscription. If it is desired to subscribe to all default event types, set the IncludedEventTypes to null.
         * 
         * @return builder
         * 
         */
        public Builder includedEventTypes(String... includedEventTypes) {
            return includedEventTypes(List.of(includedEventTypes));
        }

        /**
         * @param isSubjectCaseSensitive Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter
         * should be compared in a case sensitive manner.
         * 
         * @return builder
         * 
         */
        public Builder isSubjectCaseSensitive(@Nullable Boolean isSubjectCaseSensitive) {
            $.isSubjectCaseSensitive = isSubjectCaseSensitive;
            return this;
        }

        /**
         * @param subjectBeginsWith An optional string to filter events for an event subscription based on a resource path prefix.
         * The format of this depends on the publisher of the events.
         * Wildcard characters are not supported in this path.
         * 
         * @return builder
         * 
         */
        public Builder subjectBeginsWith(@Nullable String subjectBeginsWith) {
            $.subjectBeginsWith = subjectBeginsWith;
            return this;
        }

        /**
         * @param subjectEndsWith An optional string to filter events for an event subscription based on a resource path suffix.
         * Wildcard characters are not supported in this path.
         * 
         * @return builder
         * 
         */
        public Builder subjectEndsWith(@Nullable String subjectEndsWith) {
            $.subjectEndsWith = subjectEndsWith;
            return this;
        }

        public EventSubscriptionFilterResponse build() {
            $.isSubjectCaseSensitive = Codegen.booleanProp("isSubjectCaseSensitive").arg($.isSubjectCaseSensitive).def(false).getNullable();
            return $;
        }
    }

}
