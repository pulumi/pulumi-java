// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.labservices.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Profile for how to handle shutting down virtual machines.
 * 
 */
public final class AutoShutdownProfileResponse extends com.pulumi.resources.InvokeArgs {

    public static final AutoShutdownProfileResponse Empty = new AutoShutdownProfileResponse();

    /**
     * The amount of time a VM will stay running after a user disconnects if this behavior is enabled.
     * 
     */
    @Import(name="disconnectDelay")
    private @Nullable String disconnectDelay;

    public Optional<String> disconnectDelay() {
        return Optional.ofNullable(this.disconnectDelay);
    }

    /**
     * The amount of time a VM will idle before it is shutdown if this behavior is enabled.
     * 
     */
    @Import(name="idleDelay")
    private @Nullable String idleDelay;

    public Optional<String> idleDelay() {
        return Optional.ofNullable(this.idleDelay);
    }

    /**
     * The amount of time a VM will stay running before it is shutdown if no connection is made and this behavior is enabled.
     * 
     */
    @Import(name="noConnectDelay")
    private @Nullable String noConnectDelay;

    public Optional<String> noConnectDelay() {
        return Optional.ofNullable(this.noConnectDelay);
    }

    /**
     * Whether shutdown on disconnect is enabled
     * 
     */
    @Import(name="shutdownOnDisconnect")
    private @Nullable String shutdownOnDisconnect;

    public Optional<String> shutdownOnDisconnect() {
        return Optional.ofNullable(this.shutdownOnDisconnect);
    }

    /**
     * Whether a VM will get shutdown when it has idled for a period of time.
     * 
     */
    @Import(name="shutdownOnIdle")
    private @Nullable String shutdownOnIdle;

    public Optional<String> shutdownOnIdle() {
        return Optional.ofNullable(this.shutdownOnIdle);
    }

    /**
     * Whether a VM will get shutdown when it hasn&#39;t been connected to after a period of time.
     * 
     */
    @Import(name="shutdownWhenNotConnected")
    private @Nullable String shutdownWhenNotConnected;

    public Optional<String> shutdownWhenNotConnected() {
        return Optional.ofNullable(this.shutdownWhenNotConnected);
    }

    private AutoShutdownProfileResponse() {}

    private AutoShutdownProfileResponse(AutoShutdownProfileResponse $) {
        this.disconnectDelay = $.disconnectDelay;
        this.idleDelay = $.idleDelay;
        this.noConnectDelay = $.noConnectDelay;
        this.shutdownOnDisconnect = $.shutdownOnDisconnect;
        this.shutdownOnIdle = $.shutdownOnIdle;
        this.shutdownWhenNotConnected = $.shutdownWhenNotConnected;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AutoShutdownProfileResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AutoShutdownProfileResponse $;

        public Builder() {
            $ = new AutoShutdownProfileResponse();
        }

        public Builder(AutoShutdownProfileResponse defaults) {
            $ = new AutoShutdownProfileResponse(Objects.requireNonNull(defaults));
        }

        public Builder disconnectDelay(@Nullable String disconnectDelay) {
            $.disconnectDelay = disconnectDelay;
            return this;
        }

        public Builder idleDelay(@Nullable String idleDelay) {
            $.idleDelay = idleDelay;
            return this;
        }

        public Builder noConnectDelay(@Nullable String noConnectDelay) {
            $.noConnectDelay = noConnectDelay;
            return this;
        }

        public Builder shutdownOnDisconnect(@Nullable String shutdownOnDisconnect) {
            $.shutdownOnDisconnect = shutdownOnDisconnect;
            return this;
        }

        public Builder shutdownOnIdle(@Nullable String shutdownOnIdle) {
            $.shutdownOnIdle = shutdownOnIdle;
            return this;
        }

        public Builder shutdownWhenNotConnected(@Nullable String shutdownWhenNotConnected) {
            $.shutdownWhenNotConnected = shutdownWhenNotConnected;
            return this;
        }

        public AutoShutdownProfileResponse build() {
            $.shutdownOnDisconnect = Codegen.stringProp("shutdownOnDisconnect").arg($.shutdownOnDisconnect).def("Disabled").getNullable();
            $.shutdownOnIdle = Codegen.stringProp("shutdownOnIdle").arg($.shutdownOnIdle).def("None").getNullable();
            $.shutdownWhenNotConnected = Codegen.stringProp("shutdownWhenNotConnected").arg($.shutdownWhenNotConnected).def("Disabled").getNullable();
            return $;
        }
    }

}
