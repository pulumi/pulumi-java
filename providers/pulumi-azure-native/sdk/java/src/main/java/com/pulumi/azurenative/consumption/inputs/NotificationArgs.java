// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.consumption.inputs;

import com.pulumi.azurenative.consumption.enums.CultureCode;
import com.pulumi.azurenative.consumption.enums.OperatorType;
import com.pulumi.azurenative.consumption.enums.ThresholdType;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The notification associated with a budget.
 * 
 */
public final class NotificationArgs extends com.pulumi.resources.ResourceArgs {

    public static final NotificationArgs Empty = new NotificationArgs();

    /**
     * Email addresses to send the budget notification to when the threshold is exceeded. Must have at least one contact email or contact group specified at the Subscription or Resource Group scopes. All other scopes must have at least one contact email specified.
     * 
     */
    @Import(name="contactEmails", required=true)
      private final Output<List<String>> contactEmails;

    public Output<List<String>> contactEmails() {
        return this.contactEmails;
    }

    /**
     * Action groups to send the budget notification to when the threshold is exceeded. Must be provided as a fully qualified Azure resource id. Only supported at Subscription or Resource Group scopes.
     * 
     */
    @Import(name="contactGroups")
      private final @Nullable Output<List<String>> contactGroups;

    public Output<List<String>> contactGroups() {
        return this.contactGroups == null ? Codegen.empty() : this.contactGroups;
    }

    /**
     * Contact roles to send the budget notification to when the threshold is exceeded.
     * 
     */
    @Import(name="contactRoles")
      private final @Nullable Output<List<String>> contactRoles;

    public Output<List<String>> contactRoles() {
        return this.contactRoles == null ? Codegen.empty() : this.contactRoles;
    }

    /**
     * The notification is enabled or not.
     * 
     */
    @Import(name="enabled", required=true)
      private final Output<Boolean> enabled;

    public Output<Boolean> enabled() {
        return this.enabled;
    }

    /**
     * Language in which the recipient will receive the notification
     * 
     */
    @Import(name="locale")
      private final @Nullable Output<Either<String,CultureCode>> locale;

    public Output<Either<String,CultureCode>> locale() {
        return this.locale == null ? Codegen.empty() : this.locale;
    }

    /**
     * The comparison operator.
     * 
     */
    @Import(name="operator", required=true)
      private final Output<Either<String,OperatorType>> operator;

    public Output<Either<String,OperatorType>> operator() {
        return this.operator;
    }

    /**
     * Threshold value associated with a notification. Notification is sent when the cost exceeded the threshold. It is always percent and has to be between 0 and 1000.
     * 
     */
    @Import(name="threshold", required=true)
      private final Output<Double> threshold;

    public Output<Double> threshold() {
        return this.threshold;
    }

    /**
     * The type of threshold
     * 
     */
    @Import(name="thresholdType")
      private final @Nullable Output<Either<String,ThresholdType>> thresholdType;

    public Output<Either<String,ThresholdType>> thresholdType() {
        return this.thresholdType == null ? Codegen.empty() : this.thresholdType;
    }

    public NotificationArgs(
        Output<List<String>> contactEmails,
        @Nullable Output<List<String>> contactGroups,
        @Nullable Output<List<String>> contactRoles,
        Output<Boolean> enabled,
        @Nullable Output<Either<String,CultureCode>> locale,
        Output<Either<String,OperatorType>> operator,
        Output<Double> threshold,
        @Nullable Output<Either<String,ThresholdType>> thresholdType) {
        this.contactEmails = Objects.requireNonNull(contactEmails, "expected parameter 'contactEmails' to be non-null");
        this.contactGroups = contactGroups;
        this.contactRoles = contactRoles;
        this.enabled = Objects.requireNonNull(enabled, "expected parameter 'enabled' to be non-null");
        this.locale = locale;
        this.operator = Objects.requireNonNull(operator, "expected parameter 'operator' to be non-null");
        this.threshold = Objects.requireNonNull(threshold, "expected parameter 'threshold' to be non-null");
        this.thresholdType = Codegen.stringProp("thresholdType").left(ThresholdType.class).output().arg(thresholdType).def("Actual").getNullable();
    }

    private NotificationArgs() {
        this.contactEmails = Codegen.empty();
        this.contactGroups = Codegen.empty();
        this.contactRoles = Codegen.empty();
        this.enabled = Codegen.empty();
        this.locale = Codegen.empty();
        this.operator = Codegen.empty();
        this.threshold = Codegen.empty();
        this.thresholdType = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NotificationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<List<String>> contactEmails;
        private @Nullable Output<List<String>> contactGroups;
        private @Nullable Output<List<String>> contactRoles;
        private Output<Boolean> enabled;
        private @Nullable Output<Either<String,CultureCode>> locale;
        private Output<Either<String,OperatorType>> operator;
        private Output<Double> threshold;
        private @Nullable Output<Either<String,ThresholdType>> thresholdType;

        public Builder() {
    	      // Empty
        }

        public Builder(NotificationArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.contactEmails = defaults.contactEmails;
    	      this.contactGroups = defaults.contactGroups;
    	      this.contactRoles = defaults.contactRoles;
    	      this.enabled = defaults.enabled;
    	      this.locale = defaults.locale;
    	      this.operator = defaults.operator;
    	      this.threshold = defaults.threshold;
    	      this.thresholdType = defaults.thresholdType;
        }

        public Builder contactEmails(Output<List<String>> contactEmails) {
            this.contactEmails = Objects.requireNonNull(contactEmails);
            return this;
        }
        public Builder contactEmails(List<String> contactEmails) {
            this.contactEmails = Output.of(Objects.requireNonNull(contactEmails));
            return this;
        }
        public Builder contactEmails(String... contactEmails) {
            return contactEmails(List.of(contactEmails));
        }
        public Builder contactGroups(@Nullable Output<List<String>> contactGroups) {
            this.contactGroups = contactGroups;
            return this;
        }
        public Builder contactGroups(@Nullable List<String> contactGroups) {
            this.contactGroups = Codegen.ofNullable(contactGroups);
            return this;
        }
        public Builder contactGroups(String... contactGroups) {
            return contactGroups(List.of(contactGroups));
        }
        public Builder contactRoles(@Nullable Output<List<String>> contactRoles) {
            this.contactRoles = contactRoles;
            return this;
        }
        public Builder contactRoles(@Nullable List<String> contactRoles) {
            this.contactRoles = Codegen.ofNullable(contactRoles);
            return this;
        }
        public Builder contactRoles(String... contactRoles) {
            return contactRoles(List.of(contactRoles));
        }
        public Builder enabled(Output<Boolean> enabled) {
            this.enabled = Objects.requireNonNull(enabled);
            return this;
        }
        public Builder enabled(Boolean enabled) {
            this.enabled = Output.of(Objects.requireNonNull(enabled));
            return this;
        }
        public Builder locale(@Nullable Output<Either<String,CultureCode>> locale) {
            this.locale = locale;
            return this;
        }
        public Builder locale(@Nullable Either<String,CultureCode> locale) {
            this.locale = Codegen.ofNullable(locale);
            return this;
        }
        public Builder operator(Output<Either<String,OperatorType>> operator) {
            this.operator = Objects.requireNonNull(operator);
            return this;
        }
        public Builder operator(Either<String,OperatorType> operator) {
            this.operator = Output.of(Objects.requireNonNull(operator));
            return this;
        }
        public Builder threshold(Output<Double> threshold) {
            this.threshold = Objects.requireNonNull(threshold);
            return this;
        }
        public Builder threshold(Double threshold) {
            this.threshold = Output.of(Objects.requireNonNull(threshold));
            return this;
        }
        public Builder thresholdType(@Nullable Output<Either<String,ThresholdType>> thresholdType) {
            this.thresholdType = thresholdType;
            return this;
        }
        public Builder thresholdType(@Nullable Either<String,ThresholdType> thresholdType) {
            this.thresholdType = Codegen.ofNullable(thresholdType);
            return this;
        }        public NotificationArgs build() {
            return new NotificationArgs(contactEmails, contactGroups, contactRoles, enabled, locale, operator, threshold, thresholdType);
        }
    }
}
