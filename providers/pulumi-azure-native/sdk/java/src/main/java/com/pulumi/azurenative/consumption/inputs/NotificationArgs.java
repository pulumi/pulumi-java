// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.consumption.inputs;

import com.pulumi.azurenative.consumption.enums.CultureCode;
import com.pulumi.azurenative.consumption.enums.OperatorType;
import com.pulumi.azurenative.consumption.enums.ThresholdType;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The notification associated with a budget.
 * 
 */
public final class NotificationArgs extends com.pulumi.resources.ResourceArgs {

    public static final NotificationArgs Empty = new NotificationArgs();

    /**
     * Email addresses to send the budget notification to when the threshold is exceeded. Must have at least one contact email or contact group specified at the Subscription or Resource Group scopes. All other scopes must have at least one contact email specified.
     * 
     */
    @Import(name="contactEmails", required=true)
    private Output<List<String>> contactEmails;

    public Output<List<String>> contactEmails() {
        return this.contactEmails;
    }

    /**
     * Action groups to send the budget notification to when the threshold is exceeded. Must be provided as a fully qualified Azure resource id. Only supported at Subscription or Resource Group scopes.
     * 
     */
    @Import(name="contactGroups")
    private @Nullable Output<List<String>> contactGroups;

    public Optional<Output<List<String>>> contactGroups() {
        return Optional.ofNullable(this.contactGroups);
    }

    /**
     * Contact roles to send the budget notification to when the threshold is exceeded.
     * 
     */
    @Import(name="contactRoles")
    private @Nullable Output<List<String>> contactRoles;

    public Optional<Output<List<String>>> contactRoles() {
        return Optional.ofNullable(this.contactRoles);
    }

    /**
     * The notification is enabled or not.
     * 
     */
    @Import(name="enabled", required=true)
    private Output<Boolean> enabled;

    public Output<Boolean> enabled() {
        return this.enabled;
    }

    /**
     * Language in which the recipient will receive the notification
     * 
     */
    @Import(name="locale")
    private @Nullable Output<Either<String,CultureCode>> locale;

    public Optional<Output<Either<String,CultureCode>>> locale() {
        return Optional.ofNullable(this.locale);
    }

    /**
     * The comparison operator.
     * 
     */
    @Import(name="operator", required=true)
    private Output<Either<String,OperatorType>> operator;

    public Output<Either<String,OperatorType>> operator() {
        return this.operator;
    }

    /**
     * Threshold value associated with a notification. Notification is sent when the cost exceeded the threshold. It is always percent and has to be between 0 and 1000.
     * 
     */
    @Import(name="threshold", required=true)
    private Output<Double> threshold;

    public Output<Double> threshold() {
        return this.threshold;
    }

    /**
     * The type of threshold
     * 
     */
    @Import(name="thresholdType")
    private @Nullable Output<Either<String,ThresholdType>> thresholdType;

    public Optional<Output<Either<String,ThresholdType>>> thresholdType() {
        return Optional.ofNullable(this.thresholdType);
    }

    private NotificationArgs() {}

    private NotificationArgs(NotificationArgs $) {
        this.contactEmails = $.contactEmails;
        this.contactGroups = $.contactGroups;
        this.contactRoles = $.contactRoles;
        this.enabled = $.enabled;
        this.locale = $.locale;
        this.operator = $.operator;
        this.threshold = $.threshold;
        this.thresholdType = $.thresholdType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NotificationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NotificationArgs $;

        public Builder() {
            $ = new NotificationArgs();
        }

        public Builder(NotificationArgs defaults) {
            $ = new NotificationArgs(Objects.requireNonNull(defaults));
        }

        public Builder contactEmails(Output<List<String>> contactEmails) {
            $.contactEmails = contactEmails;
            return this;
        }

        public Builder contactEmails(List<String> contactEmails) {
            return contactEmails(Output.of(contactEmails));
        }

        public Builder contactEmails(String... contactEmails) {
            return contactEmails(List.of(contactEmails));
        }

        public Builder contactGroups(@Nullable Output<List<String>> contactGroups) {
            $.contactGroups = contactGroups;
            return this;
        }

        public Builder contactGroups(List<String> contactGroups) {
            return contactGroups(Output.of(contactGroups));
        }

        public Builder contactGroups(String... contactGroups) {
            return contactGroups(List.of(contactGroups));
        }

        public Builder contactRoles(@Nullable Output<List<String>> contactRoles) {
            $.contactRoles = contactRoles;
            return this;
        }

        public Builder contactRoles(List<String> contactRoles) {
            return contactRoles(Output.of(contactRoles));
        }

        public Builder contactRoles(String... contactRoles) {
            return contactRoles(List.of(contactRoles));
        }

        public Builder enabled(Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        public Builder locale(@Nullable Output<Either<String,CultureCode>> locale) {
            $.locale = locale;
            return this;
        }

        public Builder locale(Either<String,CultureCode> locale) {
            return locale(Output.of(locale));
        }

        public Builder locale(String locale) {
            return locale(Either.ofLeft(locale));
        }

        public Builder locale(CultureCode locale) {
            return locale(Either.ofRight(locale));
        }

        public Builder operator(Output<Either<String,OperatorType>> operator) {
            $.operator = operator;
            return this;
        }

        public Builder operator(Either<String,OperatorType> operator) {
            return operator(Output.of(operator));
        }

        public Builder operator(String operator) {
            return operator(Either.ofLeft(operator));
        }

        public Builder operator(OperatorType operator) {
            return operator(Either.ofRight(operator));
        }

        public Builder threshold(Output<Double> threshold) {
            $.threshold = threshold;
            return this;
        }

        public Builder threshold(Double threshold) {
            return threshold(Output.of(threshold));
        }

        public Builder thresholdType(@Nullable Output<Either<String,ThresholdType>> thresholdType) {
            $.thresholdType = thresholdType;
            return this;
        }

        public Builder thresholdType(Either<String,ThresholdType> thresholdType) {
            return thresholdType(Output.of(thresholdType));
        }

        public Builder thresholdType(String thresholdType) {
            return thresholdType(Either.ofLeft(thresholdType));
        }

        public Builder thresholdType(ThresholdType thresholdType) {
            return thresholdType(Either.ofRight(thresholdType));
        }

        public NotificationArgs build() {
            $.contactEmails = Objects.requireNonNull($.contactEmails, "expected parameter 'contactEmails' to be non-null");
            $.enabled = Objects.requireNonNull($.enabled, "expected parameter 'enabled' to be non-null");
            $.operator = Objects.requireNonNull($.operator, "expected parameter 'operator' to be non-null");
            $.threshold = Objects.requireNonNull($.threshold, "expected parameter 'threshold' to be non-null");
            $.thresholdType = Codegen.stringProp("thresholdType").left(ThresholdType.class).output().arg($.thresholdType).def("Actual").getNullable();
            return $;
        }
    }

}
