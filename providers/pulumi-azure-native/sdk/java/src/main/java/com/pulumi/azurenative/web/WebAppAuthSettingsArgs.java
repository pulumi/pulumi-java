// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.web;

import com.pulumi.azurenative.web.enums.BuiltInAuthenticationProvider;
import com.pulumi.azurenative.web.enums.UnauthenticatedClientAction;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WebAppAuthSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final WebAppAuthSettingsArgs Empty = new WebAppAuthSettingsArgs();

    /**
     * Gets a JSON string containing the Azure AD Acl settings.
     * 
     */
    @Import(name="aadClaimsAuthorization")
    private @Nullable Output<String> aadClaimsAuthorization;

    public Optional<Output<String>> aadClaimsAuthorization() {
        return Optional.ofNullable(this.aadClaimsAuthorization);
    }

    /**
     * Login parameters to send to the OpenID Connect authorization endpoint when
     * a user logs in. Each parameter must be in the form &#34;key=value&#34;.
     * 
     */
    @Import(name="additionalLoginParams")
    private @Nullable Output<List<String>> additionalLoginParams;

    public Optional<Output<List<String>>> additionalLoginParams() {
        return Optional.ofNullable(this.additionalLoginParams);
    }

    /**
     * Allowed audience values to consider when validating JWTs issued by
     * Azure Active Directory. Note that the &lt;code&gt;ClientID&lt;/code&gt; value is always considered an
     * allowed audience, regardless of this setting.
     * 
     */
    @Import(name="allowedAudiences")
    private @Nullable Output<List<String>> allowedAudiences;

    public Optional<Output<List<String>>> allowedAudiences() {
        return Optional.ofNullable(this.allowedAudiences);
    }

    /**
     * External URLs that can be redirected to as part of logging in or logging out of the app. Note that the query string part of the URL is ignored.
     * This is an advanced setting typically only needed by Windows Store application backends.
     * Note that URLs within the current domain are always implicitly allowed.
     * 
     */
    @Import(name="allowedExternalRedirectUrls")
    private @Nullable Output<List<String>> allowedExternalRedirectUrls;

    public Optional<Output<List<String>>> allowedExternalRedirectUrls() {
        return Optional.ofNullable(this.allowedExternalRedirectUrls);
    }

    /**
     * The path of the config file containing auth settings.
     * If the path is relative, base will the site&#39;s root directory.
     * 
     */
    @Import(name="authFilePath")
    private @Nullable Output<String> authFilePath;

    public Optional<Output<String>> authFilePath() {
        return Optional.ofNullable(this.authFilePath);
    }

    /**
     * The Client ID of this relying party application, known as the client_id.
     * This setting is required for enabling OpenID Connection authentication with Azure Active Directory or
     * other 3rd party OpenID Connect providers.
     * More information on OpenID Connect: http://openid.net/specs/openid-connect-core-1_0.html
     * 
     */
    @Import(name="clientId")
    private @Nullable Output<String> clientId;

    public Optional<Output<String>> clientId() {
        return Optional.ofNullable(this.clientId);
    }

    /**
     * The Client Secret of this relying party application (in Azure Active Directory, this is also referred to as the Key).
     * This setting is optional. If no client secret is configured, the OpenID Connect implicit auth flow is used to authenticate end users.
     * Otherwise, the OpenID Connect Authorization Code Flow is used to authenticate end users.
     * More information on OpenID Connect: http://openid.net/specs/openid-connect-core-1_0.html
     * 
     */
    @Import(name="clientSecret")
    private @Nullable Output<String> clientSecret;

    public Optional<Output<String>> clientSecret() {
        return Optional.ofNullable(this.clientSecret);
    }

    /**
     * An alternative to the client secret, that is the thumbprint of a certificate used for signing purposes. This property acts as
     * a replacement for the Client Secret. It is also optional.
     * 
     */
    @Import(name="clientSecretCertificateThumbprint")
    private @Nullable Output<String> clientSecretCertificateThumbprint;

    public Optional<Output<String>> clientSecretCertificateThumbprint() {
        return Optional.ofNullable(this.clientSecretCertificateThumbprint);
    }

    /**
     * The app setting name that contains the client secret of the relying party application.
     * 
     */
    @Import(name="clientSecretSettingName")
    private @Nullable Output<String> clientSecretSettingName;

    public Optional<Output<String>> clientSecretSettingName() {
        return Optional.ofNullable(this.clientSecretSettingName);
    }

    /**
     * The ConfigVersion of the Authentication / Authorization feature in use for the current app.
     * The setting in this value can control the behavior of the control plane for Authentication / Authorization.
     * 
     */
    @Import(name="configVersion")
    private @Nullable Output<String> configVersion;

    public Optional<Output<String>> configVersion() {
        return Optional.ofNullable(this.configVersion);
    }

    /**
     * The default authentication provider to use when multiple providers are configured.
     * This setting is only needed if multiple providers are configured and the unauthenticated client
     * action is set to &#34;RedirectToLoginPage&#34;.
     * 
     */
    @Import(name="defaultProvider")
    private @Nullable Output<BuiltInAuthenticationProvider> defaultProvider;

    public Optional<Output<BuiltInAuthenticationProvider>> defaultProvider() {
        return Optional.ofNullable(this.defaultProvider);
    }

    /**
     * &lt;code&gt;true&lt;/code&gt; if the Authentication / Authorization feature is enabled for the current app; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The App ID of the Facebook app used for login.
     * This setting is required for enabling Facebook Login.
     * Facebook Login documentation: https://developers.facebook.com/docs/facebook-login
     * 
     */
    @Import(name="facebookAppId")
    private @Nullable Output<String> facebookAppId;

    public Optional<Output<String>> facebookAppId() {
        return Optional.ofNullable(this.facebookAppId);
    }

    /**
     * The App Secret of the Facebook app used for Facebook Login.
     * This setting is required for enabling Facebook Login.
     * Facebook Login documentation: https://developers.facebook.com/docs/facebook-login
     * 
     */
    @Import(name="facebookAppSecret")
    private @Nullable Output<String> facebookAppSecret;

    public Optional<Output<String>> facebookAppSecret() {
        return Optional.ofNullable(this.facebookAppSecret);
    }

    /**
     * The app setting name that contains the app secret used for Facebook Login.
     * 
     */
    @Import(name="facebookAppSecretSettingName")
    private @Nullable Output<String> facebookAppSecretSettingName;

    public Optional<Output<String>> facebookAppSecretSettingName() {
        return Optional.ofNullable(this.facebookAppSecretSettingName);
    }

    /**
     * The OAuth 2.0 scopes that will be requested as part of Facebook Login authentication.
     * This setting is optional.
     * Facebook Login documentation: https://developers.facebook.com/docs/facebook-login
     * 
     */
    @Import(name="facebookOAuthScopes")
    private @Nullable Output<List<String>> facebookOAuthScopes;

    public Optional<Output<List<String>>> facebookOAuthScopes() {
        return Optional.ofNullable(this.facebookOAuthScopes);
    }

    /**
     * The Client Id of the GitHub app used for login.
     * This setting is required for enabling Github login
     * 
     */
    @Import(name="gitHubClientId")
    private @Nullable Output<String> gitHubClientId;

    public Optional<Output<String>> gitHubClientId() {
        return Optional.ofNullable(this.gitHubClientId);
    }

    /**
     * The Client Secret of the GitHub app used for Github Login.
     * This setting is required for enabling Github login.
     * 
     */
    @Import(name="gitHubClientSecret")
    private @Nullable Output<String> gitHubClientSecret;

    public Optional<Output<String>> gitHubClientSecret() {
        return Optional.ofNullable(this.gitHubClientSecret);
    }

    /**
     * The app setting name that contains the client secret of the Github
     * app used for GitHub Login.
     * 
     */
    @Import(name="gitHubClientSecretSettingName")
    private @Nullable Output<String> gitHubClientSecretSettingName;

    public Optional<Output<String>> gitHubClientSecretSettingName() {
        return Optional.ofNullable(this.gitHubClientSecretSettingName);
    }

    /**
     * The OAuth 2.0 scopes that will be requested as part of GitHub Login authentication.
     * This setting is optional
     * 
     */
    @Import(name="gitHubOAuthScopes")
    private @Nullable Output<List<String>> gitHubOAuthScopes;

    public Optional<Output<List<String>>> gitHubOAuthScopes() {
        return Optional.ofNullable(this.gitHubOAuthScopes);
    }

    /**
     * The OpenID Connect Client ID for the Google web application.
     * This setting is required for enabling Google Sign-In.
     * Google Sign-In documentation: https://developers.google.com/identity/sign-in/web/
     * 
     */
    @Import(name="googleClientId")
    private @Nullable Output<String> googleClientId;

    public Optional<Output<String>> googleClientId() {
        return Optional.ofNullable(this.googleClientId);
    }

    /**
     * The client secret associated with the Google web application.
     * This setting is required for enabling Google Sign-In.
     * Google Sign-In documentation: https://developers.google.com/identity/sign-in/web/
     * 
     */
    @Import(name="googleClientSecret")
    private @Nullable Output<String> googleClientSecret;

    public Optional<Output<String>> googleClientSecret() {
        return Optional.ofNullable(this.googleClientSecret);
    }

    /**
     * The app setting name that contains the client secret associated with
     * the Google web application.
     * 
     */
    @Import(name="googleClientSecretSettingName")
    private @Nullable Output<String> googleClientSecretSettingName;

    public Optional<Output<String>> googleClientSecretSettingName() {
        return Optional.ofNullable(this.googleClientSecretSettingName);
    }

    /**
     * The OAuth 2.0 scopes that will be requested as part of Google Sign-In authentication.
     * This setting is optional. If not specified, &#34;openid&#34;, &#34;profile&#34;, and &#34;email&#34; are used as default scopes.
     * Google Sign-In documentation: https://developers.google.com/identity/sign-in/web/
     * 
     */
    @Import(name="googleOAuthScopes")
    private @Nullable Output<List<String>> googleOAuthScopes;

    public Optional<Output<List<String>>> googleOAuthScopes() {
        return Optional.ofNullable(this.googleOAuthScopes);
    }

    /**
     * &#34;true&#34; if the auth config settings should be read from a file,
     * &#34;false&#34; otherwise
     * 
     */
    @Import(name="isAuthFromFile")
    private @Nullable Output<String> isAuthFromFile;

    public Optional<Output<String>> isAuthFromFile() {
        return Optional.ofNullable(this.isAuthFromFile);
    }

    /**
     * The OpenID Connect Issuer URI that represents the entity which issues access tokens for this application.
     * When using Azure Active Directory, this value is the URI of the directory tenant, e.g. https://sts.windows.net/{tenant-guid}/.
     * This URI is a case-sensitive identifier for the token issuer.
     * More information on OpenID Connect Discovery: http://openid.net/specs/openid-connect-discovery-1_0.html
     * 
     */
    @Import(name="issuer")
    private @Nullable Output<String> issuer;

    public Optional<Output<String>> issuer() {
        return Optional.ofNullable(this.issuer);
    }

    /**
     * Kind of resource.
     * 
     */
    @Import(name="kind")
    private @Nullable Output<String> kind;

    public Optional<Output<String>> kind() {
        return Optional.ofNullable(this.kind);
    }

    /**
     * The OAuth 2.0 client ID that was created for the app used for authentication.
     * This setting is required for enabling Microsoft Account authentication.
     * Microsoft Account OAuth documentation: https://dev.onedrive.com/auth/msa_oauth.htm
     * 
     */
    @Import(name="microsoftAccountClientId")
    private @Nullable Output<String> microsoftAccountClientId;

    public Optional<Output<String>> microsoftAccountClientId() {
        return Optional.ofNullable(this.microsoftAccountClientId);
    }

    /**
     * The OAuth 2.0 client secret that was created for the app used for authentication.
     * This setting is required for enabling Microsoft Account authentication.
     * Microsoft Account OAuth documentation: https://dev.onedrive.com/auth/msa_oauth.htm
     * 
     */
    @Import(name="microsoftAccountClientSecret")
    private @Nullable Output<String> microsoftAccountClientSecret;

    public Optional<Output<String>> microsoftAccountClientSecret() {
        return Optional.ofNullable(this.microsoftAccountClientSecret);
    }

    /**
     * The app setting name containing the OAuth 2.0 client secret that was created for the
     * app used for authentication.
     * 
     */
    @Import(name="microsoftAccountClientSecretSettingName")
    private @Nullable Output<String> microsoftAccountClientSecretSettingName;

    public Optional<Output<String>> microsoftAccountClientSecretSettingName() {
        return Optional.ofNullable(this.microsoftAccountClientSecretSettingName);
    }

    /**
     * The OAuth 2.0 scopes that will be requested as part of Microsoft Account authentication.
     * This setting is optional. If not specified, &#34;wl.basic&#34; is used as the default scope.
     * Microsoft Account Scopes and permissions documentation: https://msdn.microsoft.com/en-us/library/dn631845.aspx
     * 
     */
    @Import(name="microsoftAccountOAuthScopes")
    private @Nullable Output<List<String>> microsoftAccountOAuthScopes;

    public Optional<Output<List<String>>> microsoftAccountOAuthScopes() {
        return Optional.ofNullable(this.microsoftAccountOAuthScopes);
    }

    /**
     * Name of web app.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    public Output<String> name() {
        return this.name;
    }

    /**
     * Name of the resource group to which the resource belongs.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The RuntimeVersion of the Authentication / Authorization feature in use for the current app.
     * The setting in this value can control the behavior of certain features in the Authentication / Authorization module.
     * 
     */
    @Import(name="runtimeVersion")
    private @Nullable Output<String> runtimeVersion;

    public Optional<Output<String>> runtimeVersion() {
        return Optional.ofNullable(this.runtimeVersion);
    }

    /**
     * The number of hours after session token expiration that a session token can be used to
     * call the token refresh API. The default is 72 hours.
     * 
     */
    @Import(name="tokenRefreshExtensionHours")
    private @Nullable Output<Double> tokenRefreshExtensionHours;

    public Optional<Output<Double>> tokenRefreshExtensionHours() {
        return Optional.ofNullable(this.tokenRefreshExtensionHours);
    }

    /**
     * &lt;code&gt;true&lt;/code&gt; to durably store platform-specific security tokens that are obtained during login flows; otherwise, &lt;code&gt;false&lt;/code&gt;.
     *  The default is &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    @Import(name="tokenStoreEnabled")
    private @Nullable Output<Boolean> tokenStoreEnabled;

    public Optional<Output<Boolean>> tokenStoreEnabled() {
        return Optional.ofNullable(this.tokenStoreEnabled);
    }

    /**
     * The OAuth 1.0a consumer key of the Twitter application used for sign-in.
     * This setting is required for enabling Twitter Sign-In.
     * Twitter Sign-In documentation: https://dev.twitter.com/web/sign-in
     * 
     */
    @Import(name="twitterConsumerKey")
    private @Nullable Output<String> twitterConsumerKey;

    public Optional<Output<String>> twitterConsumerKey() {
        return Optional.ofNullable(this.twitterConsumerKey);
    }

    /**
     * The OAuth 1.0a consumer secret of the Twitter application used for sign-in.
     * This setting is required for enabling Twitter Sign-In.
     * Twitter Sign-In documentation: https://dev.twitter.com/web/sign-in
     * 
     */
    @Import(name="twitterConsumerSecret")
    private @Nullable Output<String> twitterConsumerSecret;

    public Optional<Output<String>> twitterConsumerSecret() {
        return Optional.ofNullable(this.twitterConsumerSecret);
    }

    /**
     * The app setting name that contains the OAuth 1.0a consumer secret of the Twitter
     * application used for sign-in.
     * 
     */
    @Import(name="twitterConsumerSecretSettingName")
    private @Nullable Output<String> twitterConsumerSecretSettingName;

    public Optional<Output<String>> twitterConsumerSecretSettingName() {
        return Optional.ofNullable(this.twitterConsumerSecretSettingName);
    }

    /**
     * The action to take when an unauthenticated client attempts to access the app.
     * 
     */
    @Import(name="unauthenticatedClientAction")
    private @Nullable Output<UnauthenticatedClientAction> unauthenticatedClientAction;

    public Optional<Output<UnauthenticatedClientAction>> unauthenticatedClientAction() {
        return Optional.ofNullable(this.unauthenticatedClientAction);
    }

    /**
     * Gets a value indicating whether the issuer should be a valid HTTPS url and be validated as such.
     * 
     */
    @Import(name="validateIssuer")
    private @Nullable Output<Boolean> validateIssuer;

    public Optional<Output<Boolean>> validateIssuer() {
        return Optional.ofNullable(this.validateIssuer);
    }

    private WebAppAuthSettingsArgs() {}

    private WebAppAuthSettingsArgs(WebAppAuthSettingsArgs $) {
        this.aadClaimsAuthorization = $.aadClaimsAuthorization;
        this.additionalLoginParams = $.additionalLoginParams;
        this.allowedAudiences = $.allowedAudiences;
        this.allowedExternalRedirectUrls = $.allowedExternalRedirectUrls;
        this.authFilePath = $.authFilePath;
        this.clientId = $.clientId;
        this.clientSecret = $.clientSecret;
        this.clientSecretCertificateThumbprint = $.clientSecretCertificateThumbprint;
        this.clientSecretSettingName = $.clientSecretSettingName;
        this.configVersion = $.configVersion;
        this.defaultProvider = $.defaultProvider;
        this.enabled = $.enabled;
        this.facebookAppId = $.facebookAppId;
        this.facebookAppSecret = $.facebookAppSecret;
        this.facebookAppSecretSettingName = $.facebookAppSecretSettingName;
        this.facebookOAuthScopes = $.facebookOAuthScopes;
        this.gitHubClientId = $.gitHubClientId;
        this.gitHubClientSecret = $.gitHubClientSecret;
        this.gitHubClientSecretSettingName = $.gitHubClientSecretSettingName;
        this.gitHubOAuthScopes = $.gitHubOAuthScopes;
        this.googleClientId = $.googleClientId;
        this.googleClientSecret = $.googleClientSecret;
        this.googleClientSecretSettingName = $.googleClientSecretSettingName;
        this.googleOAuthScopes = $.googleOAuthScopes;
        this.isAuthFromFile = $.isAuthFromFile;
        this.issuer = $.issuer;
        this.kind = $.kind;
        this.microsoftAccountClientId = $.microsoftAccountClientId;
        this.microsoftAccountClientSecret = $.microsoftAccountClientSecret;
        this.microsoftAccountClientSecretSettingName = $.microsoftAccountClientSecretSettingName;
        this.microsoftAccountOAuthScopes = $.microsoftAccountOAuthScopes;
        this.name = $.name;
        this.resourceGroupName = $.resourceGroupName;
        this.runtimeVersion = $.runtimeVersion;
        this.tokenRefreshExtensionHours = $.tokenRefreshExtensionHours;
        this.tokenStoreEnabled = $.tokenStoreEnabled;
        this.twitterConsumerKey = $.twitterConsumerKey;
        this.twitterConsumerSecret = $.twitterConsumerSecret;
        this.twitterConsumerSecretSettingName = $.twitterConsumerSecretSettingName;
        this.unauthenticatedClientAction = $.unauthenticatedClientAction;
        this.validateIssuer = $.validateIssuer;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WebAppAuthSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WebAppAuthSettingsArgs $;

        public Builder() {
            $ = new WebAppAuthSettingsArgs();
        }

        public Builder(WebAppAuthSettingsArgs defaults) {
            $ = new WebAppAuthSettingsArgs(Objects.requireNonNull(defaults));
        }

        public Builder aadClaimsAuthorization(@Nullable Output<String> aadClaimsAuthorization) {
            $.aadClaimsAuthorization = aadClaimsAuthorization;
            return this;
        }

        public Builder aadClaimsAuthorization(String aadClaimsAuthorization) {
            return aadClaimsAuthorization(Output.of(aadClaimsAuthorization));
        }

        public Builder additionalLoginParams(@Nullable Output<List<String>> additionalLoginParams) {
            $.additionalLoginParams = additionalLoginParams;
            return this;
        }

        public Builder additionalLoginParams(List<String> additionalLoginParams) {
            return additionalLoginParams(Output.of(additionalLoginParams));
        }

        public Builder additionalLoginParams(String... additionalLoginParams) {
            return additionalLoginParams(List.of(additionalLoginParams));
        }

        public Builder allowedAudiences(@Nullable Output<List<String>> allowedAudiences) {
            $.allowedAudiences = allowedAudiences;
            return this;
        }

        public Builder allowedAudiences(List<String> allowedAudiences) {
            return allowedAudiences(Output.of(allowedAudiences));
        }

        public Builder allowedAudiences(String... allowedAudiences) {
            return allowedAudiences(List.of(allowedAudiences));
        }

        public Builder allowedExternalRedirectUrls(@Nullable Output<List<String>> allowedExternalRedirectUrls) {
            $.allowedExternalRedirectUrls = allowedExternalRedirectUrls;
            return this;
        }

        public Builder allowedExternalRedirectUrls(List<String> allowedExternalRedirectUrls) {
            return allowedExternalRedirectUrls(Output.of(allowedExternalRedirectUrls));
        }

        public Builder allowedExternalRedirectUrls(String... allowedExternalRedirectUrls) {
            return allowedExternalRedirectUrls(List.of(allowedExternalRedirectUrls));
        }

        public Builder authFilePath(@Nullable Output<String> authFilePath) {
            $.authFilePath = authFilePath;
            return this;
        }

        public Builder authFilePath(String authFilePath) {
            return authFilePath(Output.of(authFilePath));
        }

        public Builder clientId(@Nullable Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        public Builder clientSecret(@Nullable Output<String> clientSecret) {
            $.clientSecret = clientSecret;
            return this;
        }

        public Builder clientSecret(String clientSecret) {
            return clientSecret(Output.of(clientSecret));
        }

        public Builder clientSecretCertificateThumbprint(@Nullable Output<String> clientSecretCertificateThumbprint) {
            $.clientSecretCertificateThumbprint = clientSecretCertificateThumbprint;
            return this;
        }

        public Builder clientSecretCertificateThumbprint(String clientSecretCertificateThumbprint) {
            return clientSecretCertificateThumbprint(Output.of(clientSecretCertificateThumbprint));
        }

        public Builder clientSecretSettingName(@Nullable Output<String> clientSecretSettingName) {
            $.clientSecretSettingName = clientSecretSettingName;
            return this;
        }

        public Builder clientSecretSettingName(String clientSecretSettingName) {
            return clientSecretSettingName(Output.of(clientSecretSettingName));
        }

        public Builder configVersion(@Nullable Output<String> configVersion) {
            $.configVersion = configVersion;
            return this;
        }

        public Builder configVersion(String configVersion) {
            return configVersion(Output.of(configVersion));
        }

        public Builder defaultProvider(@Nullable Output<BuiltInAuthenticationProvider> defaultProvider) {
            $.defaultProvider = defaultProvider;
            return this;
        }

        public Builder defaultProvider(BuiltInAuthenticationProvider defaultProvider) {
            return defaultProvider(Output.of(defaultProvider));
        }

        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        public Builder facebookAppId(@Nullable Output<String> facebookAppId) {
            $.facebookAppId = facebookAppId;
            return this;
        }

        public Builder facebookAppId(String facebookAppId) {
            return facebookAppId(Output.of(facebookAppId));
        }

        public Builder facebookAppSecret(@Nullable Output<String> facebookAppSecret) {
            $.facebookAppSecret = facebookAppSecret;
            return this;
        }

        public Builder facebookAppSecret(String facebookAppSecret) {
            return facebookAppSecret(Output.of(facebookAppSecret));
        }

        public Builder facebookAppSecretSettingName(@Nullable Output<String> facebookAppSecretSettingName) {
            $.facebookAppSecretSettingName = facebookAppSecretSettingName;
            return this;
        }

        public Builder facebookAppSecretSettingName(String facebookAppSecretSettingName) {
            return facebookAppSecretSettingName(Output.of(facebookAppSecretSettingName));
        }

        public Builder facebookOAuthScopes(@Nullable Output<List<String>> facebookOAuthScopes) {
            $.facebookOAuthScopes = facebookOAuthScopes;
            return this;
        }

        public Builder facebookOAuthScopes(List<String> facebookOAuthScopes) {
            return facebookOAuthScopes(Output.of(facebookOAuthScopes));
        }

        public Builder facebookOAuthScopes(String... facebookOAuthScopes) {
            return facebookOAuthScopes(List.of(facebookOAuthScopes));
        }

        public Builder gitHubClientId(@Nullable Output<String> gitHubClientId) {
            $.gitHubClientId = gitHubClientId;
            return this;
        }

        public Builder gitHubClientId(String gitHubClientId) {
            return gitHubClientId(Output.of(gitHubClientId));
        }

        public Builder gitHubClientSecret(@Nullable Output<String> gitHubClientSecret) {
            $.gitHubClientSecret = gitHubClientSecret;
            return this;
        }

        public Builder gitHubClientSecret(String gitHubClientSecret) {
            return gitHubClientSecret(Output.of(gitHubClientSecret));
        }

        public Builder gitHubClientSecretSettingName(@Nullable Output<String> gitHubClientSecretSettingName) {
            $.gitHubClientSecretSettingName = gitHubClientSecretSettingName;
            return this;
        }

        public Builder gitHubClientSecretSettingName(String gitHubClientSecretSettingName) {
            return gitHubClientSecretSettingName(Output.of(gitHubClientSecretSettingName));
        }

        public Builder gitHubOAuthScopes(@Nullable Output<List<String>> gitHubOAuthScopes) {
            $.gitHubOAuthScopes = gitHubOAuthScopes;
            return this;
        }

        public Builder gitHubOAuthScopes(List<String> gitHubOAuthScopes) {
            return gitHubOAuthScopes(Output.of(gitHubOAuthScopes));
        }

        public Builder gitHubOAuthScopes(String... gitHubOAuthScopes) {
            return gitHubOAuthScopes(List.of(gitHubOAuthScopes));
        }

        public Builder googleClientId(@Nullable Output<String> googleClientId) {
            $.googleClientId = googleClientId;
            return this;
        }

        public Builder googleClientId(String googleClientId) {
            return googleClientId(Output.of(googleClientId));
        }

        public Builder googleClientSecret(@Nullable Output<String> googleClientSecret) {
            $.googleClientSecret = googleClientSecret;
            return this;
        }

        public Builder googleClientSecret(String googleClientSecret) {
            return googleClientSecret(Output.of(googleClientSecret));
        }

        public Builder googleClientSecretSettingName(@Nullable Output<String> googleClientSecretSettingName) {
            $.googleClientSecretSettingName = googleClientSecretSettingName;
            return this;
        }

        public Builder googleClientSecretSettingName(String googleClientSecretSettingName) {
            return googleClientSecretSettingName(Output.of(googleClientSecretSettingName));
        }

        public Builder googleOAuthScopes(@Nullable Output<List<String>> googleOAuthScopes) {
            $.googleOAuthScopes = googleOAuthScopes;
            return this;
        }

        public Builder googleOAuthScopes(List<String> googleOAuthScopes) {
            return googleOAuthScopes(Output.of(googleOAuthScopes));
        }

        public Builder googleOAuthScopes(String... googleOAuthScopes) {
            return googleOAuthScopes(List.of(googleOAuthScopes));
        }

        public Builder isAuthFromFile(@Nullable Output<String> isAuthFromFile) {
            $.isAuthFromFile = isAuthFromFile;
            return this;
        }

        public Builder isAuthFromFile(String isAuthFromFile) {
            return isAuthFromFile(Output.of(isAuthFromFile));
        }

        public Builder issuer(@Nullable Output<String> issuer) {
            $.issuer = issuer;
            return this;
        }

        public Builder issuer(String issuer) {
            return issuer(Output.of(issuer));
        }

        public Builder kind(@Nullable Output<String> kind) {
            $.kind = kind;
            return this;
        }

        public Builder kind(String kind) {
            return kind(Output.of(kind));
        }

        public Builder microsoftAccountClientId(@Nullable Output<String> microsoftAccountClientId) {
            $.microsoftAccountClientId = microsoftAccountClientId;
            return this;
        }

        public Builder microsoftAccountClientId(String microsoftAccountClientId) {
            return microsoftAccountClientId(Output.of(microsoftAccountClientId));
        }

        public Builder microsoftAccountClientSecret(@Nullable Output<String> microsoftAccountClientSecret) {
            $.microsoftAccountClientSecret = microsoftAccountClientSecret;
            return this;
        }

        public Builder microsoftAccountClientSecret(String microsoftAccountClientSecret) {
            return microsoftAccountClientSecret(Output.of(microsoftAccountClientSecret));
        }

        public Builder microsoftAccountClientSecretSettingName(@Nullable Output<String> microsoftAccountClientSecretSettingName) {
            $.microsoftAccountClientSecretSettingName = microsoftAccountClientSecretSettingName;
            return this;
        }

        public Builder microsoftAccountClientSecretSettingName(String microsoftAccountClientSecretSettingName) {
            return microsoftAccountClientSecretSettingName(Output.of(microsoftAccountClientSecretSettingName));
        }

        public Builder microsoftAccountOAuthScopes(@Nullable Output<List<String>> microsoftAccountOAuthScopes) {
            $.microsoftAccountOAuthScopes = microsoftAccountOAuthScopes;
            return this;
        }

        public Builder microsoftAccountOAuthScopes(List<String> microsoftAccountOAuthScopes) {
            return microsoftAccountOAuthScopes(Output.of(microsoftAccountOAuthScopes));
        }

        public Builder microsoftAccountOAuthScopes(String... microsoftAccountOAuthScopes) {
            return microsoftAccountOAuthScopes(List.of(microsoftAccountOAuthScopes));
        }

        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder runtimeVersion(@Nullable Output<String> runtimeVersion) {
            $.runtimeVersion = runtimeVersion;
            return this;
        }

        public Builder runtimeVersion(String runtimeVersion) {
            return runtimeVersion(Output.of(runtimeVersion));
        }

        public Builder tokenRefreshExtensionHours(@Nullable Output<Double> tokenRefreshExtensionHours) {
            $.tokenRefreshExtensionHours = tokenRefreshExtensionHours;
            return this;
        }

        public Builder tokenRefreshExtensionHours(Double tokenRefreshExtensionHours) {
            return tokenRefreshExtensionHours(Output.of(tokenRefreshExtensionHours));
        }

        public Builder tokenStoreEnabled(@Nullable Output<Boolean> tokenStoreEnabled) {
            $.tokenStoreEnabled = tokenStoreEnabled;
            return this;
        }

        public Builder tokenStoreEnabled(Boolean tokenStoreEnabled) {
            return tokenStoreEnabled(Output.of(tokenStoreEnabled));
        }

        public Builder twitterConsumerKey(@Nullable Output<String> twitterConsumerKey) {
            $.twitterConsumerKey = twitterConsumerKey;
            return this;
        }

        public Builder twitterConsumerKey(String twitterConsumerKey) {
            return twitterConsumerKey(Output.of(twitterConsumerKey));
        }

        public Builder twitterConsumerSecret(@Nullable Output<String> twitterConsumerSecret) {
            $.twitterConsumerSecret = twitterConsumerSecret;
            return this;
        }

        public Builder twitterConsumerSecret(String twitterConsumerSecret) {
            return twitterConsumerSecret(Output.of(twitterConsumerSecret));
        }

        public Builder twitterConsumerSecretSettingName(@Nullable Output<String> twitterConsumerSecretSettingName) {
            $.twitterConsumerSecretSettingName = twitterConsumerSecretSettingName;
            return this;
        }

        public Builder twitterConsumerSecretSettingName(String twitterConsumerSecretSettingName) {
            return twitterConsumerSecretSettingName(Output.of(twitterConsumerSecretSettingName));
        }

        public Builder unauthenticatedClientAction(@Nullable Output<UnauthenticatedClientAction> unauthenticatedClientAction) {
            $.unauthenticatedClientAction = unauthenticatedClientAction;
            return this;
        }

        public Builder unauthenticatedClientAction(UnauthenticatedClientAction unauthenticatedClientAction) {
            return unauthenticatedClientAction(Output.of(unauthenticatedClientAction));
        }

        public Builder validateIssuer(@Nullable Output<Boolean> validateIssuer) {
            $.validateIssuer = validateIssuer;
            return this;
        }

        public Builder validateIssuer(Boolean validateIssuer) {
            return validateIssuer(Output.of(validateIssuer));
        }

        public WebAppAuthSettingsArgs build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
