// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.compute.inputs;

import com.pulumi.azurenative.compute.inputs.KeyVaultKeyReferenceArgs;
import com.pulumi.azurenative.compute.inputs.KeyVaultSecretReferenceArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Describes a Encryption Settings for a Disk
 * 
 */
public final class DiskEncryptionSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final DiskEncryptionSettingsArgs Empty = new DiskEncryptionSettingsArgs();

    /**
     * Specifies the location of the disk encryption key, which is a Key Vault Secret.
     * 
     */
    @Import(name="diskEncryptionKey")
    private @Nullable Output<KeyVaultSecretReferenceArgs> diskEncryptionKey;

    /**
     * @return Specifies the location of the disk encryption key, which is a Key Vault Secret.
     * 
     */
    public Optional<Output<KeyVaultSecretReferenceArgs>> diskEncryptionKey() {
        return Optional.ofNullable(this.diskEncryptionKey);
    }

    /**
     * Specifies whether disk encryption should be enabled on the virtual machine.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Specifies whether disk encryption should be enabled on the virtual machine.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Specifies the location of the key encryption key in Key Vault.
     * 
     */
    @Import(name="keyEncryptionKey")
    private @Nullable Output<KeyVaultKeyReferenceArgs> keyEncryptionKey;

    /**
     * @return Specifies the location of the key encryption key in Key Vault.
     * 
     */
    public Optional<Output<KeyVaultKeyReferenceArgs>> keyEncryptionKey() {
        return Optional.ofNullable(this.keyEncryptionKey);
    }

    private DiskEncryptionSettingsArgs() {}

    private DiskEncryptionSettingsArgs(DiskEncryptionSettingsArgs $) {
        this.diskEncryptionKey = $.diskEncryptionKey;
        this.enabled = $.enabled;
        this.keyEncryptionKey = $.keyEncryptionKey;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DiskEncryptionSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DiskEncryptionSettingsArgs $;

        public Builder() {
            $ = new DiskEncryptionSettingsArgs();
        }

        public Builder(DiskEncryptionSettingsArgs defaults) {
            $ = new DiskEncryptionSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param diskEncryptionKey Specifies the location of the disk encryption key, which is a Key Vault Secret.
         * 
         * @return builder
         * 
         */
        public Builder diskEncryptionKey(@Nullable Output<KeyVaultSecretReferenceArgs> diskEncryptionKey) {
            $.diskEncryptionKey = diskEncryptionKey;
            return this;
        }

        /**
         * @param diskEncryptionKey Specifies the location of the disk encryption key, which is a Key Vault Secret.
         * 
         * @return builder
         * 
         */
        public Builder diskEncryptionKey(KeyVaultSecretReferenceArgs diskEncryptionKey) {
            return diskEncryptionKey(Output.of(diskEncryptionKey));
        }

        /**
         * @param enabled Specifies whether disk encryption should be enabled on the virtual machine.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Specifies whether disk encryption should be enabled on the virtual machine.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param keyEncryptionKey Specifies the location of the key encryption key in Key Vault.
         * 
         * @return builder
         * 
         */
        public Builder keyEncryptionKey(@Nullable Output<KeyVaultKeyReferenceArgs> keyEncryptionKey) {
            $.keyEncryptionKey = keyEncryptionKey;
            return this;
        }

        /**
         * @param keyEncryptionKey Specifies the location of the key encryption key in Key Vault.
         * 
         * @return builder
         * 
         */
        public Builder keyEncryptionKey(KeyVaultKeyReferenceArgs keyEncryptionKey) {
            return keyEncryptionKey(Output.of(keyEncryptionKey));
        }

        public DiskEncryptionSettingsArgs build() {
            return $;
        }
    }

}
