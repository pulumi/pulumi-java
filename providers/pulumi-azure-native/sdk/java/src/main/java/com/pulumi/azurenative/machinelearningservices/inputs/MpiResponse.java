// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.machinelearningservices.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * MPI distribution configuration.
 * 
 */
public final class MpiResponse extends com.pulumi.resources.InvokeArgs {

    public static final MpiResponse Empty = new MpiResponse();

    /**
     * Enum to determine the job distribution type.
     * Expected value is &#39;Mpi&#39;.
     * 
     */
    @Import(name="distributionType", required=true)
      private final String distributionType;

    public String distributionType() {
        return this.distributionType;
    }

    /**
     * Number of processes per MPI node.
     * 
     */
    @Import(name="processCountPerInstance")
      private final @Nullable Integer processCountPerInstance;

    public Optional<Integer> processCountPerInstance() {
        return this.processCountPerInstance == null ? Optional.empty() : Optional.ofNullable(this.processCountPerInstance);
    }

    public MpiResponse(
        String distributionType,
        @Nullable Integer processCountPerInstance) {
        this.distributionType = Codegen.stringProp("distributionType").arg(distributionType).require();
        this.processCountPerInstance = processCountPerInstance;
    }

    private MpiResponse() {
        this.distributionType = null;
        this.processCountPerInstance = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MpiResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String distributionType;
        private @Nullable Integer processCountPerInstance;

        public Builder() {
    	      // Empty
        }

        public Builder(MpiResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.distributionType = defaults.distributionType;
    	      this.processCountPerInstance = defaults.processCountPerInstance;
        }

        public Builder distributionType(String distributionType) {
            this.distributionType = Objects.requireNonNull(distributionType);
            return this;
        }
        public Builder processCountPerInstance(@Nullable Integer processCountPerInstance) {
            this.processCountPerInstance = processCountPerInstance;
            return this;
        }        public MpiResponse build() {
            return new MpiResponse(distributionType, processCountPerInstance);
        }
    }
}
