// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.machinelearningservices.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * MPI distribution configuration.
 * 
 */
public final class MpiResponse extends com.pulumi.resources.InvokeArgs {

    public static final MpiResponse Empty = new MpiResponse();

    /**
     * Enum to determine the job distribution type.
     * Expected value is &#39;Mpi&#39;.
     * 
     */
    @Import(name="distributionType", required=true)
    private String distributionType;

    /**
     * @return Enum to determine the job distribution type.
     * Expected value is &#39;Mpi&#39;.
     * 
     */
    public String distributionType() {
        return this.distributionType;
    }

    /**
     * Number of processes per MPI node.
     * 
     */
    @Import(name="processCountPerInstance")
    private @Nullable Integer processCountPerInstance;

    /**
     * @return Number of processes per MPI node.
     * 
     */
    public Optional<Integer> processCountPerInstance() {
        return Optional.ofNullable(this.processCountPerInstance);
    }

    private MpiResponse() {}

    private MpiResponse(MpiResponse $) {
        this.distributionType = $.distributionType;
        this.processCountPerInstance = $.processCountPerInstance;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MpiResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MpiResponse $;

        public Builder() {
            $ = new MpiResponse();
        }

        public Builder(MpiResponse defaults) {
            $ = new MpiResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param distributionType Enum to determine the job distribution type.
         * Expected value is &#39;Mpi&#39;.
         * 
         * @return builder
         * 
         */
        public Builder distributionType(String distributionType) {
            $.distributionType = distributionType;
            return this;
        }

        /**
         * @param processCountPerInstance Number of processes per MPI node.
         * 
         * @return builder
         * 
         */
        public Builder processCountPerInstance(@Nullable Integer processCountPerInstance) {
            $.processCountPerInstance = processCountPerInstance;
            return this;
        }

        public MpiResponse build() {
            $.distributionType = Codegen.stringProp("distributionType").arg($.distributionType).require();
            return $;
        }
    }

}
