// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Load balancing settings for a backend pool
 * 
 */
public final class LoadBalancingSettingsModelResponse extends com.pulumi.resources.InvokeArgs {

    public static final LoadBalancingSettingsModelResponse Empty = new LoadBalancingSettingsModelResponse();

    /**
     * The additional latency in milliseconds for probes to fall into the lowest latency bucket
     * 
     */
    @Import(name="additionalLatencyMilliseconds")
    private @Nullable Integer additionalLatencyMilliseconds;

    /**
     * @return The additional latency in milliseconds for probes to fall into the lowest latency bucket
     * 
     */
    public Optional<Integer> additionalLatencyMilliseconds() {
        return Optional.ofNullable(this.additionalLatencyMilliseconds);
    }

    /**
     * Resource ID.
     * 
     */
    @Import(name="id")
    private @Nullable String id;

    /**
     * @return Resource ID.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Resource name.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return Resource name.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Resource status.
     * 
     */
    @Import(name="resourceState", required=true)
    private String resourceState;

    /**
     * @return Resource status.
     * 
     */
    public String resourceState() {
        return this.resourceState;
    }

    /**
     * The number of samples to consider for load balancing decisions
     * 
     */
    @Import(name="sampleSize")
    private @Nullable Integer sampleSize;

    /**
     * @return The number of samples to consider for load balancing decisions
     * 
     */
    public Optional<Integer> sampleSize() {
        return Optional.ofNullable(this.sampleSize);
    }

    /**
     * The number of samples within the sample period that must succeed
     * 
     */
    @Import(name="successfulSamplesRequired")
    private @Nullable Integer successfulSamplesRequired;

    /**
     * @return The number of samples within the sample period that must succeed
     * 
     */
    public Optional<Integer> successfulSamplesRequired() {
        return Optional.ofNullable(this.successfulSamplesRequired);
    }

    /**
     * Resource type.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    /**
     * @return Resource type.
     * 
     */
    public String type() {
        return this.type;
    }

    private LoadBalancingSettingsModelResponse() {}

    private LoadBalancingSettingsModelResponse(LoadBalancingSettingsModelResponse $) {
        this.additionalLatencyMilliseconds = $.additionalLatencyMilliseconds;
        this.id = $.id;
        this.name = $.name;
        this.resourceState = $.resourceState;
        this.sampleSize = $.sampleSize;
        this.successfulSamplesRequired = $.successfulSamplesRequired;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoadBalancingSettingsModelResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoadBalancingSettingsModelResponse $;

        public Builder() {
            $ = new LoadBalancingSettingsModelResponse();
        }

        public Builder(LoadBalancingSettingsModelResponse defaults) {
            $ = new LoadBalancingSettingsModelResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param additionalLatencyMilliseconds The additional latency in milliseconds for probes to fall into the lowest latency bucket
         * 
         * @return builder
         * 
         */
        public Builder additionalLatencyMilliseconds(@Nullable Integer additionalLatencyMilliseconds) {
            $.additionalLatencyMilliseconds = additionalLatencyMilliseconds;
            return this;
        }

        /**
         * @param id Resource ID.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable String id) {
            $.id = id;
            return this;
        }

        /**
         * @param name Resource name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param resourceState Resource status.
         * 
         * @return builder
         * 
         */
        public Builder resourceState(String resourceState) {
            $.resourceState = resourceState;
            return this;
        }

        /**
         * @param sampleSize The number of samples to consider for load balancing decisions
         * 
         * @return builder
         * 
         */
        public Builder sampleSize(@Nullable Integer sampleSize) {
            $.sampleSize = sampleSize;
            return this;
        }

        /**
         * @param successfulSamplesRequired The number of samples within the sample period that must succeed
         * 
         * @return builder
         * 
         */
        public Builder successfulSamplesRequired(@Nullable Integer successfulSamplesRequired) {
            $.successfulSamplesRequired = successfulSamplesRequired;
            return this;
        }

        /**
         * @param type Resource type.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public LoadBalancingSettingsModelResponse build() {
            $.resourceState = Objects.requireNonNull($.resourceState, "expected parameter 'resourceState' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
