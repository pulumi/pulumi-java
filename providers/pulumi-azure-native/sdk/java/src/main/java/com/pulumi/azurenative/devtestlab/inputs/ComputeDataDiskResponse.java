// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.devtestlab.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A data disks attached to a virtual machine.
 * 
 */
public final class ComputeDataDiskResponse extends com.pulumi.resources.InvokeArgs {

    public static final ComputeDataDiskResponse Empty = new ComputeDataDiskResponse();

    /**
     * Gets data disk size in GiB.
     * 
     */
    @Import(name="diskSizeGiB")
    private @Nullable Integer diskSizeGiB;

    /**
     * @return Gets data disk size in GiB.
     * 
     */
    public Optional<Integer> diskSizeGiB() {
        return Optional.ofNullable(this.diskSizeGiB);
    }

    /**
     * When backed by a blob, the URI of underlying blob.
     * 
     */
    @Import(name="diskUri")
    private @Nullable String diskUri;

    /**
     * @return When backed by a blob, the URI of underlying blob.
     * 
     */
    public Optional<String> diskUri() {
        return Optional.ofNullable(this.diskUri);
    }

    /**
     * When backed by managed disk, this is the ID of the compute disk resource.
     * 
     */
    @Import(name="managedDiskId")
    private @Nullable String managedDiskId;

    /**
     * @return When backed by managed disk, this is the ID of the compute disk resource.
     * 
     */
    public Optional<String> managedDiskId() {
        return Optional.ofNullable(this.managedDiskId);
    }

    /**
     * Gets data disk name.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return Gets data disk name.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    private ComputeDataDiskResponse() {}

    private ComputeDataDiskResponse(ComputeDataDiskResponse $) {
        this.diskSizeGiB = $.diskSizeGiB;
        this.diskUri = $.diskUri;
        this.managedDiskId = $.managedDiskId;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ComputeDataDiskResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ComputeDataDiskResponse $;

        public Builder() {
            $ = new ComputeDataDiskResponse();
        }

        public Builder(ComputeDataDiskResponse defaults) {
            $ = new ComputeDataDiskResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param diskSizeGiB Gets data disk size in GiB.
         * 
         * @return builder
         * 
         */
        public Builder diskSizeGiB(@Nullable Integer diskSizeGiB) {
            $.diskSizeGiB = diskSizeGiB;
            return this;
        }

        /**
         * @param diskUri When backed by a blob, the URI of underlying blob.
         * 
         * @return builder
         * 
         */
        public Builder diskUri(@Nullable String diskUri) {
            $.diskUri = diskUri;
            return this;
        }

        /**
         * @param managedDiskId When backed by managed disk, this is the ID of the compute disk resource.
         * 
         * @return builder
         * 
         */
        public Builder managedDiskId(@Nullable String managedDiskId) {
            $.managedDiskId = managedDiskId;
            return this;
        }

        /**
         * @param name Gets data disk name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        public ComputeDataDiskResponse build() {
            return $;
        }
    }

}
