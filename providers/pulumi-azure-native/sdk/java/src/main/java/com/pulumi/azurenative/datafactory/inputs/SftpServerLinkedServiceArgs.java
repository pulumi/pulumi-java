// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.azurenative.datafactory.enums.SftpAuthenticationType;
import com.pulumi.azurenative.datafactory.inputs.AzureKeyVaultSecretReferenceArgs;
import com.pulumi.azurenative.datafactory.inputs.IntegrationRuntimeReferenceArgs;
import com.pulumi.azurenative.datafactory.inputs.ParameterSpecificationArgs;
import com.pulumi.azurenative.datafactory.inputs.SecureStringArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A linked service for an SSH File Transfer Protocol (SFTP) server.
 * 
 */
public final class SftpServerLinkedServiceArgs extends com.pulumi.resources.ResourceArgs {

    public static final SftpServerLinkedServiceArgs Empty = new SftpServerLinkedServiceArgs();

    /**
     * List of tags that can be used for describing the linked service.
     * 
     */
    @Import(name="annotations")
    private @Nullable Output<List<Object>> annotations;

    public Optional<Output<List<Object>>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    /**
     * The authentication type to be used to connect to the FTP server.
     * 
     */
    @Import(name="authenticationType")
    private @Nullable Output<Either<String,SftpAuthenticationType>> authenticationType;

    public Optional<Output<Either<String,SftpAuthenticationType>>> authenticationType() {
        return Optional.ofNullable(this.authenticationType);
    }

    /**
     * The integration runtime reference.
     * 
     */
    @Import(name="connectVia")
    private @Nullable Output<IntegrationRuntimeReferenceArgs> connectVia;

    public Optional<Output<IntegrationRuntimeReferenceArgs>> connectVia() {
        return Optional.ofNullable(this.connectVia);
    }

    /**
     * Linked service description.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="encryptedCredential")
    private @Nullable Output<Object> encryptedCredential;

    public Optional<Output<Object>> encryptedCredential() {
        return Optional.ofNullable(this.encryptedCredential);
    }

    /**
     * The SFTP server host name. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="host", required=true)
    private Output<Object> host;

    public Output<Object> host() {
        return this.host;
    }

    /**
     * The host key finger-print of the SFTP server. When SkipHostKeyValidation is false, HostKeyFingerprint should be specified. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="hostKeyFingerprint")
    private @Nullable Output<Object> hostKeyFingerprint;

    public Optional<Output<Object>> hostKeyFingerprint() {
        return Optional.ofNullable(this.hostKeyFingerprint);
    }

    /**
     * Parameters for linked service.
     * 
     */
    @Import(name="parameters")
    private @Nullable Output<Map<String,ParameterSpecificationArgs>> parameters;

    public Optional<Output<Map<String,ParameterSpecificationArgs>>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    /**
     * The password to decrypt the SSH private key if the SSH private key is encrypted.
     * 
     */
    @Import(name="passPhrase")
    private @Nullable Output<Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs>> passPhrase;

    public Optional<Output<Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs>>> passPhrase() {
        return Optional.ofNullable(this.passPhrase);
    }

    /**
     * Password to logon the SFTP server for Basic authentication.
     * 
     */
    @Import(name="password")
    private @Nullable Output<Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs>> password;

    public Optional<Output<Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs>>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * The TCP port number that the SFTP server uses to listen for client connections. Default value is 22. Type: integer (or Expression with resultType integer), minimum: 0.
     * 
     */
    @Import(name="port")
    private @Nullable Output<Object> port;

    public Optional<Output<Object>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * Base64 encoded SSH private key content for SshPublicKey authentication. For on-premises copy with SshPublicKey authentication, either PrivateKeyPath or PrivateKeyContent should be specified. SSH private key should be OpenSSH format.
     * 
     */
    @Import(name="privateKeyContent")
    private @Nullable Output<Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs>> privateKeyContent;

    public Optional<Output<Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs>>> privateKeyContent() {
        return Optional.ofNullable(this.privateKeyContent);
    }

    /**
     * The SSH private key file path for SshPublicKey authentication. Only valid for on-premises copy. For on-premises copy with SshPublicKey authentication, either PrivateKeyPath or PrivateKeyContent should be specified. SSH private key should be OpenSSH format. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="privateKeyPath")
    private @Nullable Output<Object> privateKeyPath;

    public Optional<Output<Object>> privateKeyPath() {
        return Optional.ofNullable(this.privateKeyPath);
    }

    /**
     * If true, skip the SSH host key validation. Default value is false. Type: boolean (or Expression with resultType boolean).
     * 
     */
    @Import(name="skipHostKeyValidation")
    private @Nullable Output<Object> skipHostKeyValidation;

    public Optional<Output<Object>> skipHostKeyValidation() {
        return Optional.ofNullable(this.skipHostKeyValidation);
    }

    /**
     * Type of linked service.
     * Expected value is &#39;Sftp&#39;.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    /**
     * The username used to log on to the SFTP server. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="userName")
    private @Nullable Output<Object> userName;

    public Optional<Output<Object>> userName() {
        return Optional.ofNullable(this.userName);
    }

    private SftpServerLinkedServiceArgs() {}

    private SftpServerLinkedServiceArgs(SftpServerLinkedServiceArgs $) {
        this.annotations = $.annotations;
        this.authenticationType = $.authenticationType;
        this.connectVia = $.connectVia;
        this.description = $.description;
        this.encryptedCredential = $.encryptedCredential;
        this.host = $.host;
        this.hostKeyFingerprint = $.hostKeyFingerprint;
        this.parameters = $.parameters;
        this.passPhrase = $.passPhrase;
        this.password = $.password;
        this.port = $.port;
        this.privateKeyContent = $.privateKeyContent;
        this.privateKeyPath = $.privateKeyPath;
        this.skipHostKeyValidation = $.skipHostKeyValidation;
        this.type = $.type;
        this.userName = $.userName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SftpServerLinkedServiceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SftpServerLinkedServiceArgs $;

        public Builder() {
            $ = new SftpServerLinkedServiceArgs();
        }

        public Builder(SftpServerLinkedServiceArgs defaults) {
            $ = new SftpServerLinkedServiceArgs(Objects.requireNonNull(defaults));
        }

        public Builder annotations(@Nullable Output<List<Object>> annotations) {
            $.annotations = annotations;
            return this;
        }

        public Builder annotations(List<Object> annotations) {
            return annotations(Output.of(annotations));
        }

        public Builder annotations(Object... annotations) {
            return annotations(List.of(annotations));
        }

        public Builder authenticationType(@Nullable Output<Either<String,SftpAuthenticationType>> authenticationType) {
            $.authenticationType = authenticationType;
            return this;
        }

        public Builder authenticationType(Either<String,SftpAuthenticationType> authenticationType) {
            return authenticationType(Output.of(authenticationType));
        }

        public Builder connectVia(@Nullable Output<IntegrationRuntimeReferenceArgs> connectVia) {
            $.connectVia = connectVia;
            return this;
        }

        public Builder connectVia(IntegrationRuntimeReferenceArgs connectVia) {
            return connectVia(Output.of(connectVia));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder encryptedCredential(@Nullable Output<Object> encryptedCredential) {
            $.encryptedCredential = encryptedCredential;
            return this;
        }

        public Builder encryptedCredential(Object encryptedCredential) {
            return encryptedCredential(Output.of(encryptedCredential));
        }

        public Builder host(Output<Object> host) {
            $.host = host;
            return this;
        }

        public Builder host(Object host) {
            return host(Output.of(host));
        }

        public Builder hostKeyFingerprint(@Nullable Output<Object> hostKeyFingerprint) {
            $.hostKeyFingerprint = hostKeyFingerprint;
            return this;
        }

        public Builder hostKeyFingerprint(Object hostKeyFingerprint) {
            return hostKeyFingerprint(Output.of(hostKeyFingerprint));
        }

        public Builder parameters(@Nullable Output<Map<String,ParameterSpecificationArgs>> parameters) {
            $.parameters = parameters;
            return this;
        }

        public Builder parameters(Map<String,ParameterSpecificationArgs> parameters) {
            return parameters(Output.of(parameters));
        }

        public Builder passPhrase(@Nullable Output<Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs>> passPhrase) {
            $.passPhrase = passPhrase;
            return this;
        }

        public Builder passPhrase(Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs> passPhrase) {
            return passPhrase(Output.of(passPhrase));
        }

        public Builder password(@Nullable Output<Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs>> password) {
            $.password = password;
            return this;
        }

        public Builder password(Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs> password) {
            return password(Output.of(password));
        }

        public Builder port(@Nullable Output<Object> port) {
            $.port = port;
            return this;
        }

        public Builder port(Object port) {
            return port(Output.of(port));
        }

        public Builder privateKeyContent(@Nullable Output<Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs>> privateKeyContent) {
            $.privateKeyContent = privateKeyContent;
            return this;
        }

        public Builder privateKeyContent(Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs> privateKeyContent) {
            return privateKeyContent(Output.of(privateKeyContent));
        }

        public Builder privateKeyPath(@Nullable Output<Object> privateKeyPath) {
            $.privateKeyPath = privateKeyPath;
            return this;
        }

        public Builder privateKeyPath(Object privateKeyPath) {
            return privateKeyPath(Output.of(privateKeyPath));
        }

        public Builder skipHostKeyValidation(@Nullable Output<Object> skipHostKeyValidation) {
            $.skipHostKeyValidation = skipHostKeyValidation;
            return this;
        }

        public Builder skipHostKeyValidation(Object skipHostKeyValidation) {
            return skipHostKeyValidation(Output.of(skipHostKeyValidation));
        }

        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public Builder userName(@Nullable Output<Object> userName) {
            $.userName = userName;
            return this;
        }

        public Builder userName(Object userName) {
            return userName(Output.of(userName));
        }

        public SftpServerLinkedServiceArgs build() {
            $.host = Objects.requireNonNull($.host, "expected parameter 'host' to be non-null");
            $.type = Codegen.stringProp("type").output().arg($.type).require();
            return $;
        }
    }

}
