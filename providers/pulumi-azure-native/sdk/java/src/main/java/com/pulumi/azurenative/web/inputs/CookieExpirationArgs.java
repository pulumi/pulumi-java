// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.web.inputs;

import com.pulumi.azurenative.web.enums.CookieExpirationConvention;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The configuration settings of the session cookie&#39;s expiration.
 * 
 */
public final class CookieExpirationArgs extends com.pulumi.resources.ResourceArgs {

    public static final CookieExpirationArgs Empty = new CookieExpirationArgs();

    /**
     * The convention used when determining the session cookie&#39;s expiration.
     * 
     */
    @Import(name="convention")
    private @Nullable Output<CookieExpirationConvention> convention;

    /**
     * @return The convention used when determining the session cookie&#39;s expiration.
     * 
     */
    public Optional<Output<CookieExpirationConvention>> convention() {
        return Optional.ofNullable(this.convention);
    }

    /**
     * The time after the request is made when the session cookie should expire.
     * 
     */
    @Import(name="timeToExpiration")
    private @Nullable Output<String> timeToExpiration;

    /**
     * @return The time after the request is made when the session cookie should expire.
     * 
     */
    public Optional<Output<String>> timeToExpiration() {
        return Optional.ofNullable(this.timeToExpiration);
    }

    private CookieExpirationArgs() {}

    private CookieExpirationArgs(CookieExpirationArgs $) {
        this.convention = $.convention;
        this.timeToExpiration = $.timeToExpiration;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CookieExpirationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CookieExpirationArgs $;

        public Builder() {
            $ = new CookieExpirationArgs();
        }

        public Builder(CookieExpirationArgs defaults) {
            $ = new CookieExpirationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param convention The convention used when determining the session cookie&#39;s expiration.
         * 
         * @return builder
         * 
         */
        public Builder convention(@Nullable Output<CookieExpirationConvention> convention) {
            $.convention = convention;
            return this;
        }

        /**
         * @param convention The convention used when determining the session cookie&#39;s expiration.
         * 
         * @return builder
         * 
         */
        public Builder convention(CookieExpirationConvention convention) {
            return convention(Output.of(convention));
        }

        /**
         * @param timeToExpiration The time after the request is made when the session cookie should expire.
         * 
         * @return builder
         * 
         */
        public Builder timeToExpiration(@Nullable Output<String> timeToExpiration) {
            $.timeToExpiration = timeToExpiration;
            return this;
        }

        /**
         * @param timeToExpiration The time after the request is made when the session cookie should expire.
         * 
         * @return builder
         * 
         */
        public Builder timeToExpiration(String timeToExpiration) {
            return timeToExpiration(Output.of(timeToExpiration));
        }

        public CookieExpirationArgs build() {
            return $;
        }
    }

}
