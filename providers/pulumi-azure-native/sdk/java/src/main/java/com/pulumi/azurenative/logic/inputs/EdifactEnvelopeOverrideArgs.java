// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.logic.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * The Edifact envelope override settings.
 * 
 */
public final class EdifactEnvelopeOverrideArgs extends com.pulumi.resources.ResourceArgs {

    public static final EdifactEnvelopeOverrideArgs Empty = new EdifactEnvelopeOverrideArgs();

    /**
     * The application password.
     * 
     */
    @Import(name="applicationPassword")
      private final @Nullable Output<String> applicationPassword;

    public Output<String> applicationPassword() {
        return this.applicationPassword == null ? Codegen.empty() : this.applicationPassword;
    }

    /**
     * The association assigned code.
     * 
     */
    @Import(name="associationAssignedCode")
      private final @Nullable Output<String> associationAssignedCode;

    public Output<String> associationAssignedCode() {
        return this.associationAssignedCode == null ? Codegen.empty() : this.associationAssignedCode;
    }

    /**
     * The controlling agency code.
     * 
     */
    @Import(name="controllingAgencyCode")
      private final @Nullable Output<String> controllingAgencyCode;

    public Output<String> controllingAgencyCode() {
        return this.controllingAgencyCode == null ? Codegen.empty() : this.controllingAgencyCode;
    }

    /**
     * The functional group id.
     * 
     */
    @Import(name="functionalGroupId")
      private final @Nullable Output<String> functionalGroupId;

    public Output<String> functionalGroupId() {
        return this.functionalGroupId == null ? Codegen.empty() : this.functionalGroupId;
    }

    /**
     * The group header message release.
     * 
     */
    @Import(name="groupHeaderMessageRelease")
      private final @Nullable Output<String> groupHeaderMessageRelease;

    public Output<String> groupHeaderMessageRelease() {
        return this.groupHeaderMessageRelease == null ? Codegen.empty() : this.groupHeaderMessageRelease;
    }

    /**
     * The group header message version.
     * 
     */
    @Import(name="groupHeaderMessageVersion")
      private final @Nullable Output<String> groupHeaderMessageVersion;

    public Output<String> groupHeaderMessageVersion() {
        return this.groupHeaderMessageVersion == null ? Codegen.empty() : this.groupHeaderMessageVersion;
    }

    /**
     * The message association assigned code.
     * 
     */
    @Import(name="messageAssociationAssignedCode")
      private final @Nullable Output<String> messageAssociationAssignedCode;

    public Output<String> messageAssociationAssignedCode() {
        return this.messageAssociationAssignedCode == null ? Codegen.empty() : this.messageAssociationAssignedCode;
    }

    /**
     * The message id on which this envelope settings has to be applied.
     * 
     */
    @Import(name="messageId")
      private final @Nullable Output<String> messageId;

    public Output<String> messageId() {
        return this.messageId == null ? Codegen.empty() : this.messageId;
    }

    /**
     * The message release version on which this envelope settings has to be applied.
     * 
     */
    @Import(name="messageRelease")
      private final @Nullable Output<String> messageRelease;

    public Output<String> messageRelease() {
        return this.messageRelease == null ? Codegen.empty() : this.messageRelease;
    }

    /**
     * The message version on which this envelope settings has to be applied.
     * 
     */
    @Import(name="messageVersion")
      private final @Nullable Output<String> messageVersion;

    public Output<String> messageVersion() {
        return this.messageVersion == null ? Codegen.empty() : this.messageVersion;
    }

    /**
     * The receiver application id.
     * 
     */
    @Import(name="receiverApplicationId")
      private final @Nullable Output<String> receiverApplicationId;

    public Output<String> receiverApplicationId() {
        return this.receiverApplicationId == null ? Codegen.empty() : this.receiverApplicationId;
    }

    /**
     * The receiver application qualifier.
     * 
     */
    @Import(name="receiverApplicationQualifier")
      private final @Nullable Output<String> receiverApplicationQualifier;

    public Output<String> receiverApplicationQualifier() {
        return this.receiverApplicationQualifier == null ? Codegen.empty() : this.receiverApplicationQualifier;
    }

    /**
     * The sender application id.
     * 
     */
    @Import(name="senderApplicationId")
      private final @Nullable Output<String> senderApplicationId;

    public Output<String> senderApplicationId() {
        return this.senderApplicationId == null ? Codegen.empty() : this.senderApplicationId;
    }

    /**
     * The sender application qualifier.
     * 
     */
    @Import(name="senderApplicationQualifier")
      private final @Nullable Output<String> senderApplicationQualifier;

    public Output<String> senderApplicationQualifier() {
        return this.senderApplicationQualifier == null ? Codegen.empty() : this.senderApplicationQualifier;
    }

    /**
     * The target namespace on which this envelope settings has to be applied.
     * 
     */
    @Import(name="targetNamespace")
      private final @Nullable Output<String> targetNamespace;

    public Output<String> targetNamespace() {
        return this.targetNamespace == null ? Codegen.empty() : this.targetNamespace;
    }

    public EdifactEnvelopeOverrideArgs(
        @Nullable Output<String> applicationPassword,
        @Nullable Output<String> associationAssignedCode,
        @Nullable Output<String> controllingAgencyCode,
        @Nullable Output<String> functionalGroupId,
        @Nullable Output<String> groupHeaderMessageRelease,
        @Nullable Output<String> groupHeaderMessageVersion,
        @Nullable Output<String> messageAssociationAssignedCode,
        @Nullable Output<String> messageId,
        @Nullable Output<String> messageRelease,
        @Nullable Output<String> messageVersion,
        @Nullable Output<String> receiverApplicationId,
        @Nullable Output<String> receiverApplicationQualifier,
        @Nullable Output<String> senderApplicationId,
        @Nullable Output<String> senderApplicationQualifier,
        @Nullable Output<String> targetNamespace) {
        this.applicationPassword = applicationPassword;
        this.associationAssignedCode = associationAssignedCode;
        this.controllingAgencyCode = controllingAgencyCode;
        this.functionalGroupId = functionalGroupId;
        this.groupHeaderMessageRelease = groupHeaderMessageRelease;
        this.groupHeaderMessageVersion = groupHeaderMessageVersion;
        this.messageAssociationAssignedCode = messageAssociationAssignedCode;
        this.messageId = messageId;
        this.messageRelease = messageRelease;
        this.messageVersion = messageVersion;
        this.receiverApplicationId = receiverApplicationId;
        this.receiverApplicationQualifier = receiverApplicationQualifier;
        this.senderApplicationId = senderApplicationId;
        this.senderApplicationQualifier = senderApplicationQualifier;
        this.targetNamespace = targetNamespace;
    }

    private EdifactEnvelopeOverrideArgs() {
        this.applicationPassword = Codegen.empty();
        this.associationAssignedCode = Codegen.empty();
        this.controllingAgencyCode = Codegen.empty();
        this.functionalGroupId = Codegen.empty();
        this.groupHeaderMessageRelease = Codegen.empty();
        this.groupHeaderMessageVersion = Codegen.empty();
        this.messageAssociationAssignedCode = Codegen.empty();
        this.messageId = Codegen.empty();
        this.messageRelease = Codegen.empty();
        this.messageVersion = Codegen.empty();
        this.receiverApplicationId = Codegen.empty();
        this.receiverApplicationQualifier = Codegen.empty();
        this.senderApplicationId = Codegen.empty();
        this.senderApplicationQualifier = Codegen.empty();
        this.targetNamespace = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EdifactEnvelopeOverrideArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> applicationPassword;
        private @Nullable Output<String> associationAssignedCode;
        private @Nullable Output<String> controllingAgencyCode;
        private @Nullable Output<String> functionalGroupId;
        private @Nullable Output<String> groupHeaderMessageRelease;
        private @Nullable Output<String> groupHeaderMessageVersion;
        private @Nullable Output<String> messageAssociationAssignedCode;
        private @Nullable Output<String> messageId;
        private @Nullable Output<String> messageRelease;
        private @Nullable Output<String> messageVersion;
        private @Nullable Output<String> receiverApplicationId;
        private @Nullable Output<String> receiverApplicationQualifier;
        private @Nullable Output<String> senderApplicationId;
        private @Nullable Output<String> senderApplicationQualifier;
        private @Nullable Output<String> targetNamespace;

        public Builder() {
    	      // Empty
        }

        public Builder(EdifactEnvelopeOverrideArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicationPassword = defaults.applicationPassword;
    	      this.associationAssignedCode = defaults.associationAssignedCode;
    	      this.controllingAgencyCode = defaults.controllingAgencyCode;
    	      this.functionalGroupId = defaults.functionalGroupId;
    	      this.groupHeaderMessageRelease = defaults.groupHeaderMessageRelease;
    	      this.groupHeaderMessageVersion = defaults.groupHeaderMessageVersion;
    	      this.messageAssociationAssignedCode = defaults.messageAssociationAssignedCode;
    	      this.messageId = defaults.messageId;
    	      this.messageRelease = defaults.messageRelease;
    	      this.messageVersion = defaults.messageVersion;
    	      this.receiverApplicationId = defaults.receiverApplicationId;
    	      this.receiverApplicationQualifier = defaults.receiverApplicationQualifier;
    	      this.senderApplicationId = defaults.senderApplicationId;
    	      this.senderApplicationQualifier = defaults.senderApplicationQualifier;
    	      this.targetNamespace = defaults.targetNamespace;
        }

        public Builder applicationPassword(@Nullable Output<String> applicationPassword) {
            this.applicationPassword = applicationPassword;
            return this;
        }
        public Builder applicationPassword(@Nullable String applicationPassword) {
            this.applicationPassword = Codegen.ofNullable(applicationPassword);
            return this;
        }
        public Builder associationAssignedCode(@Nullable Output<String> associationAssignedCode) {
            this.associationAssignedCode = associationAssignedCode;
            return this;
        }
        public Builder associationAssignedCode(@Nullable String associationAssignedCode) {
            this.associationAssignedCode = Codegen.ofNullable(associationAssignedCode);
            return this;
        }
        public Builder controllingAgencyCode(@Nullable Output<String> controllingAgencyCode) {
            this.controllingAgencyCode = controllingAgencyCode;
            return this;
        }
        public Builder controllingAgencyCode(@Nullable String controllingAgencyCode) {
            this.controllingAgencyCode = Codegen.ofNullable(controllingAgencyCode);
            return this;
        }
        public Builder functionalGroupId(@Nullable Output<String> functionalGroupId) {
            this.functionalGroupId = functionalGroupId;
            return this;
        }
        public Builder functionalGroupId(@Nullable String functionalGroupId) {
            this.functionalGroupId = Codegen.ofNullable(functionalGroupId);
            return this;
        }
        public Builder groupHeaderMessageRelease(@Nullable Output<String> groupHeaderMessageRelease) {
            this.groupHeaderMessageRelease = groupHeaderMessageRelease;
            return this;
        }
        public Builder groupHeaderMessageRelease(@Nullable String groupHeaderMessageRelease) {
            this.groupHeaderMessageRelease = Codegen.ofNullable(groupHeaderMessageRelease);
            return this;
        }
        public Builder groupHeaderMessageVersion(@Nullable Output<String> groupHeaderMessageVersion) {
            this.groupHeaderMessageVersion = groupHeaderMessageVersion;
            return this;
        }
        public Builder groupHeaderMessageVersion(@Nullable String groupHeaderMessageVersion) {
            this.groupHeaderMessageVersion = Codegen.ofNullable(groupHeaderMessageVersion);
            return this;
        }
        public Builder messageAssociationAssignedCode(@Nullable Output<String> messageAssociationAssignedCode) {
            this.messageAssociationAssignedCode = messageAssociationAssignedCode;
            return this;
        }
        public Builder messageAssociationAssignedCode(@Nullable String messageAssociationAssignedCode) {
            this.messageAssociationAssignedCode = Codegen.ofNullable(messageAssociationAssignedCode);
            return this;
        }
        public Builder messageId(@Nullable Output<String> messageId) {
            this.messageId = messageId;
            return this;
        }
        public Builder messageId(@Nullable String messageId) {
            this.messageId = Codegen.ofNullable(messageId);
            return this;
        }
        public Builder messageRelease(@Nullable Output<String> messageRelease) {
            this.messageRelease = messageRelease;
            return this;
        }
        public Builder messageRelease(@Nullable String messageRelease) {
            this.messageRelease = Codegen.ofNullable(messageRelease);
            return this;
        }
        public Builder messageVersion(@Nullable Output<String> messageVersion) {
            this.messageVersion = messageVersion;
            return this;
        }
        public Builder messageVersion(@Nullable String messageVersion) {
            this.messageVersion = Codegen.ofNullable(messageVersion);
            return this;
        }
        public Builder receiverApplicationId(@Nullable Output<String> receiverApplicationId) {
            this.receiverApplicationId = receiverApplicationId;
            return this;
        }
        public Builder receiverApplicationId(@Nullable String receiverApplicationId) {
            this.receiverApplicationId = Codegen.ofNullable(receiverApplicationId);
            return this;
        }
        public Builder receiverApplicationQualifier(@Nullable Output<String> receiverApplicationQualifier) {
            this.receiverApplicationQualifier = receiverApplicationQualifier;
            return this;
        }
        public Builder receiverApplicationQualifier(@Nullable String receiverApplicationQualifier) {
            this.receiverApplicationQualifier = Codegen.ofNullable(receiverApplicationQualifier);
            return this;
        }
        public Builder senderApplicationId(@Nullable Output<String> senderApplicationId) {
            this.senderApplicationId = senderApplicationId;
            return this;
        }
        public Builder senderApplicationId(@Nullable String senderApplicationId) {
            this.senderApplicationId = Codegen.ofNullable(senderApplicationId);
            return this;
        }
        public Builder senderApplicationQualifier(@Nullable Output<String> senderApplicationQualifier) {
            this.senderApplicationQualifier = senderApplicationQualifier;
            return this;
        }
        public Builder senderApplicationQualifier(@Nullable String senderApplicationQualifier) {
            this.senderApplicationQualifier = Codegen.ofNullable(senderApplicationQualifier);
            return this;
        }
        public Builder targetNamespace(@Nullable Output<String> targetNamespace) {
            this.targetNamespace = targetNamespace;
            return this;
        }
        public Builder targetNamespace(@Nullable String targetNamespace) {
            this.targetNamespace = Codegen.ofNullable(targetNamespace);
            return this;
        }        public EdifactEnvelopeOverrideArgs build() {
            return new EdifactEnvelopeOverrideArgs(applicationPassword, associationAssignedCode, controllingAgencyCode, functionalGroupId, groupHeaderMessageRelease, groupHeaderMessageVersion, messageAssociationAssignedCode, messageId, messageRelease, messageVersion, receiverApplicationId, receiverApplicationQualifier, senderApplicationId, senderApplicationQualifier, targetNamespace);
        }
    }
}
