// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.machinelearningservices.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Represents a label or a category of labels in a labeling job.
 * 
 */
public final class LabelClassArgs extends com.pulumi.resources.ResourceArgs {

    public static final LabelClassArgs Empty = new LabelClassArgs();

    /**
     * Display name of the label class.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return Display name of the label class.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Dictionary of subclasses of the label class.
     * 
     */
    @Import(name="subclasses")
    private @Nullable Output<Map<String,LabelClassArgs>> subclasses;

    /**
     * @return Dictionary of subclasses of the label class.
     * 
     */
    public Optional<Output<Map<String,LabelClassArgs>>> subclasses() {
        return Optional.ofNullable(this.subclasses);
    }

    private LabelClassArgs() {}

    private LabelClassArgs(LabelClassArgs $) {
        this.displayName = $.displayName;
        this.subclasses = $.subclasses;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LabelClassArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LabelClassArgs $;

        public Builder() {
            $ = new LabelClassArgs();
        }

        public Builder(LabelClassArgs defaults) {
            $ = new LabelClassArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param displayName Display name of the label class.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Display name of the label class.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param subclasses Dictionary of subclasses of the label class.
         * 
         * @return builder
         * 
         */
        public Builder subclasses(@Nullable Output<Map<String,LabelClassArgs>> subclasses) {
            $.subclasses = subclasses;
            return this;
        }

        /**
         * @param subclasses Dictionary of subclasses of the label class.
         * 
         * @return builder
         * 
         */
        public Builder subclasses(Map<String,LabelClassArgs> subclasses) {
            return subclasses(Output.of(subclasses));
        }

        public LabelClassArgs build() {
            return $;
        }
    }

}
