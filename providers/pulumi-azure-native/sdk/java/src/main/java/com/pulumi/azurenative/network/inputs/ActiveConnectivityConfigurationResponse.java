// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.azurenative.network.inputs.ConfigurationGroupResponse;
import com.pulumi.azurenative.network.inputs.ConnectivityGroupItemResponse;
import com.pulumi.azurenative.network.inputs.HubResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Active connectivity configuration.
 * 
 */
public final class ActiveConnectivityConfigurationResponse extends com.pulumi.resources.InvokeArgs {

    public static final ActiveConnectivityConfigurationResponse Empty = new ActiveConnectivityConfigurationResponse();

    /**
     * Groups for configuration
     * 
     */
    @Import(name="appliesToGroups")
    private @Nullable List<ConnectivityGroupItemResponse> appliesToGroups;

    public Optional<List<ConnectivityGroupItemResponse>> appliesToGroups() {
        return Optional.ofNullable(this.appliesToGroups);
    }

    /**
     * Deployment time string.
     * 
     */
    @Import(name="commitTime")
    private @Nullable String commitTime;

    public Optional<String> commitTime() {
        return Optional.ofNullable(this.commitTime);
    }

    /**
     * Effective configuration groups.
     * 
     */
    @Import(name="configurationGroups")
    private @Nullable List<ConfigurationGroupResponse> configurationGroups;

    public Optional<List<ConfigurationGroupResponse>> configurationGroups() {
        return Optional.ofNullable(this.configurationGroups);
    }

    /**
     * Connectivity topology type.
     * 
     */
    @Import(name="connectivityTopology", required=true)
    private String connectivityTopology;

    public String connectivityTopology() {
        return this.connectivityTopology;
    }

    /**
     * Flag if need to remove current existing peerings.
     * 
     */
    @Import(name="deleteExistingPeering")
    private @Nullable String deleteExistingPeering;

    public Optional<String> deleteExistingPeering() {
        return Optional.ofNullable(this.deleteExistingPeering);
    }

    /**
     * A description of the connectivity configuration.
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * A friendly name for the resource.
     * 
     */
    @Import(name="displayName")
    private @Nullable String displayName;

    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * List of hubItems
     * 
     */
    @Import(name="hubs")
    private @Nullable List<HubResponse> hubs;

    public Optional<List<HubResponse>> hubs() {
        return Optional.ofNullable(this.hubs);
    }

    /**
     * Resource ID.
     * 
     */
    @Import(name="id")
    private @Nullable String id;

    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Flag if global mesh is supported.
     * 
     */
    @Import(name="isGlobal")
    private @Nullable String isGlobal;

    public Optional<String> isGlobal() {
        return Optional.ofNullable(this.isGlobal);
    }

    /**
     * The provisioning state of the connectivity configuration resource.
     * 
     */
    @Import(name="provisioningState", required=true)
    private String provisioningState;

    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Deployment region.
     * 
     */
    @Import(name="region")
    private @Nullable String region;

    public Optional<String> region() {
        return Optional.ofNullable(this.region);
    }

    private ActiveConnectivityConfigurationResponse() {}

    private ActiveConnectivityConfigurationResponse(ActiveConnectivityConfigurationResponse $) {
        this.appliesToGroups = $.appliesToGroups;
        this.commitTime = $.commitTime;
        this.configurationGroups = $.configurationGroups;
        this.connectivityTopology = $.connectivityTopology;
        this.deleteExistingPeering = $.deleteExistingPeering;
        this.description = $.description;
        this.displayName = $.displayName;
        this.hubs = $.hubs;
        this.id = $.id;
        this.isGlobal = $.isGlobal;
        this.provisioningState = $.provisioningState;
        this.region = $.region;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ActiveConnectivityConfigurationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ActiveConnectivityConfigurationResponse $;

        public Builder() {
            $ = new ActiveConnectivityConfigurationResponse();
        }

        public Builder(ActiveConnectivityConfigurationResponse defaults) {
            $ = new ActiveConnectivityConfigurationResponse(Objects.requireNonNull(defaults));
        }

        public Builder appliesToGroups(@Nullable List<ConnectivityGroupItemResponse> appliesToGroups) {
            $.appliesToGroups = appliesToGroups;
            return this;
        }

        public Builder appliesToGroups(ConnectivityGroupItemResponse... appliesToGroups) {
            return appliesToGroups(List.of(appliesToGroups));
        }

        public Builder commitTime(@Nullable String commitTime) {
            $.commitTime = commitTime;
            return this;
        }

        public Builder configurationGroups(@Nullable List<ConfigurationGroupResponse> configurationGroups) {
            $.configurationGroups = configurationGroups;
            return this;
        }

        public Builder configurationGroups(ConfigurationGroupResponse... configurationGroups) {
            return configurationGroups(List.of(configurationGroups));
        }

        public Builder connectivityTopology(String connectivityTopology) {
            $.connectivityTopology = connectivityTopology;
            return this;
        }

        public Builder deleteExistingPeering(@Nullable String deleteExistingPeering) {
            $.deleteExistingPeering = deleteExistingPeering;
            return this;
        }

        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        public Builder displayName(@Nullable String displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder hubs(@Nullable List<HubResponse> hubs) {
            $.hubs = hubs;
            return this;
        }

        public Builder hubs(HubResponse... hubs) {
            return hubs(List.of(hubs));
        }

        public Builder id(@Nullable String id) {
            $.id = id;
            return this;
        }

        public Builder isGlobal(@Nullable String isGlobal) {
            $.isGlobal = isGlobal;
            return this;
        }

        public Builder provisioningState(String provisioningState) {
            $.provisioningState = provisioningState;
            return this;
        }

        public Builder region(@Nullable String region) {
            $.region = region;
            return this;
        }

        public ActiveConnectivityConfigurationResponse build() {
            $.connectivityTopology = Objects.requireNonNull($.connectivityTopology, "expected parameter 'connectivityTopology' to be non-null");
            $.provisioningState = Objects.requireNonNull($.provisioningState, "expected parameter 'provisioningState' to be non-null");
            return $;
        }
    }

}
