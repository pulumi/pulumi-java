// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.web.outputs;

import com.pulumi.azurenative.web.outputs.HostNameSslStateResponse;
import com.pulumi.azurenative.web.outputs.HostingEnvironmentProfileResponse;
import com.pulumi.azurenative.web.outputs.ManagedServiceIdentityResponse;
import com.pulumi.azurenative.web.outputs.SiteConfigResponse;
import com.pulumi.azurenative.web.outputs.SlotSwapStatusResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetWebAppResult {
    /**
     * Management information availability state for the app.
     * 
     */
    private final String availabilityState;
    /**
     * &lt;code&gt;true&lt;/code&gt; to enable client affinity; &lt;code&gt;false&lt;/code&gt; to stop sending session affinity cookies, which route client requests in the same session to the same instance. Default is &lt;code&gt;true&lt;/code&gt;.
     * 
     */
    private final @Nullable Boolean clientAffinityEnabled;
    /**
     * &lt;code&gt;true&lt;/code&gt; to enable client certificate authentication (TLS mutual authentication); otherwise, &lt;code&gt;false&lt;/code&gt;. Default is &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    private final @Nullable Boolean clientCertEnabled;
    /**
     * client certificate authentication comma-separated exclusion paths
     * 
     */
    private final @Nullable String clientCertExclusionPaths;
    /**
     * This composes with ClientCertEnabled setting.
     * - ClientCertEnabled: false means ClientCert is ignored.
     * - ClientCertEnabled: true and ClientCertMode: Required means ClientCert is required.
     * - ClientCertEnabled: true and ClientCertMode: Optional means ClientCert is optional or accepted.
     * 
     */
    private final @Nullable String clientCertMode;
    /**
     * Size of the function container.
     * 
     */
    private final @Nullable Integer containerSize;
    /**
     * Unique identifier that verifies the custom domains assigned to the app. Customer will add this id to a txt record for verification.
     * 
     */
    private final @Nullable String customDomainVerificationId;
    /**
     * Maximum allowed daily memory-time quota (applicable on dynamic apps only).
     * 
     */
    private final @Nullable Integer dailyMemoryTimeQuota;
    /**
     * Default hostname of the app. Read-only.
     * 
     */
    private final String defaultHostName;
    /**
     * &lt;code&gt;true&lt;/code&gt; if the app is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;. Setting this value to false disables the app (takes the app offline).
     * 
     */
    private final @Nullable Boolean enabled;
    /**
     * Enabled hostnames for the app.Hostnames need to be assigned (see HostNames) AND enabled. Otherwise,
     * the app is not served on those hostnames.
     * 
     */
    private final List<String> enabledHostNames;
    /**
     * Hostname SSL states are used to manage the SSL bindings for app&#39;s hostnames.
     * 
     */
    private final @Nullable List<HostNameSslStateResponse> hostNameSslStates;
    /**
     * Hostnames associated with the app.
     * 
     */
    private final List<String> hostNames;
    /**
     * &lt;code&gt;true&lt;/code&gt; to disable the public hostnames of the app; otherwise, &lt;code&gt;false&lt;/code&gt;.
     *  If &lt;code&gt;true&lt;/code&gt;, the app is only accessible via API management process.
     * 
     */
    private final @Nullable Boolean hostNamesDisabled;
    /**
     * App Service Environment to use for the app.
     * 
     */
    private final @Nullable HostingEnvironmentProfileResponse hostingEnvironmentProfile;
    /**
     * HttpsOnly: configures a web site to accept only https requests. Issues redirect for
     * http requests
     * 
     */
    private final @Nullable Boolean httpsOnly;
    /**
     * Hyper-V sandbox.
     * 
     */
    private final @Nullable Boolean hyperV;
    /**
     * Resource Id.
     * 
     */
    private final String id;
    /**
     * Managed service identity.
     * 
     */
    private final @Nullable ManagedServiceIdentityResponse identity;
    /**
     * Specifies an operation id if this site has a pending operation.
     * 
     */
    private final String inProgressOperationId;
    /**
     * &lt;code&gt;true&lt;/code&gt; if the app is a default container; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    private final Boolean isDefaultContainer;
    /**
     * Obsolete: Hyper-V sandbox.
     * 
     */
    private final @Nullable Boolean isXenon;
    /**
     * Identity to use for Key Vault Reference authentication.
     * 
     */
    private final @Nullable String keyVaultReferenceIdentity;
    /**
     * Kind of resource.
     * 
     */
    private final @Nullable String kind;
    /**
     * Last time the app was modified, in UTC. Read-only.
     * 
     */
    private final String lastModifiedTimeUtc;
    /**
     * Resource Location.
     * 
     */
    private final String location;
    /**
     * Maximum number of workers.
     * This only applies to Functions container.
     * 
     */
    private final Integer maxNumberOfWorkers;
    /**
     * Resource Name.
     * 
     */
    private final String name;
    /**
     * List of IP addresses that the app uses for outbound connections (e.g. database access). Includes VIPs from tenants that site can be hosted with current settings. Read-only.
     * 
     */
    private final String outboundIpAddresses;
    /**
     * List of IP addresses that the app uses for outbound connections (e.g. database access). Includes VIPs from all tenants except dataComponent. Read-only.
     * 
     */
    private final String possibleOutboundIpAddresses;
    /**
     * Site redundancy mode
     * 
     */
    private final @Nullable String redundancyMode;
    /**
     * Name of the repository site.
     * 
     */
    private final String repositorySiteName;
    /**
     * &lt;code&gt;true&lt;/code&gt; if reserved; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    private final @Nullable Boolean reserved;
    /**
     * Name of the resource group the app belongs to. Read-only.
     * 
     */
    private final String resourceGroup;
    /**
     * &lt;code&gt;true&lt;/code&gt; to stop SCM (KUDU) site when the app is stopped; otherwise, &lt;code&gt;false&lt;/code&gt;. The default is &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    private final @Nullable Boolean scmSiteAlsoStopped;
    /**
     * Resource ID of the associated App Service plan, formatted as: &#34;/subscriptions/{subscriptionID}/resourceGroups/{groupName}/providers/Microsoft.Web/serverfarms/{appServicePlanName}&#34;.
     * 
     */
    private final @Nullable String serverFarmId;
    /**
     * Configuration of the app.
     * 
     */
    private final @Nullable SiteConfigResponse siteConfig;
    /**
     * Status of the last deployment slot swap operation.
     * 
     */
    private final SlotSwapStatusResponse slotSwapStatus;
    /**
     * Current state of the app.
     * 
     */
    private final String state;
    /**
     * Checks if Customer provided storage account is required
     * 
     */
    private final @Nullable Boolean storageAccountRequired;
    /**
     * App suspended till in case memory-time quota is exceeded.
     * 
     */
    private final String suspendedTill;
    /**
     * Resource tags.
     * 
     */
    private final @Nullable Map<String,String> tags;
    /**
     * Specifies which deployment slot this app will swap into. Read-only.
     * 
     */
    private final String targetSwapSlot;
    /**
     * Azure Traffic Manager hostnames associated with the app. Read-only.
     * 
     */
    private final List<String> trafficManagerHostNames;
    /**
     * Resource type.
     * 
     */
    private final String type;
    /**
     * State indicating whether the app has exceeded its quota usage. Read-only.
     * 
     */
    private final String usageState;
    /**
     * Azure Resource Manager ID of the Virtual network and subnet to be joined by Regional VNET Integration.
     * This must be of the form /subscriptions/{subscriptionName}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}
     * 
     */
    private final @Nullable String virtualNetworkSubnetId;

    @CustomType.Constructor
    private GetWebAppResult(
        @CustomType.Parameter("availabilityState") String availabilityState,
        @CustomType.Parameter("clientAffinityEnabled") @Nullable Boolean clientAffinityEnabled,
        @CustomType.Parameter("clientCertEnabled") @Nullable Boolean clientCertEnabled,
        @CustomType.Parameter("clientCertExclusionPaths") @Nullable String clientCertExclusionPaths,
        @CustomType.Parameter("clientCertMode") @Nullable String clientCertMode,
        @CustomType.Parameter("containerSize") @Nullable Integer containerSize,
        @CustomType.Parameter("customDomainVerificationId") @Nullable String customDomainVerificationId,
        @CustomType.Parameter("dailyMemoryTimeQuota") @Nullable Integer dailyMemoryTimeQuota,
        @CustomType.Parameter("defaultHostName") String defaultHostName,
        @CustomType.Parameter("enabled") @Nullable Boolean enabled,
        @CustomType.Parameter("enabledHostNames") List<String> enabledHostNames,
        @CustomType.Parameter("hostNameSslStates") @Nullable List<HostNameSslStateResponse> hostNameSslStates,
        @CustomType.Parameter("hostNames") List<String> hostNames,
        @CustomType.Parameter("hostNamesDisabled") @Nullable Boolean hostNamesDisabled,
        @CustomType.Parameter("hostingEnvironmentProfile") @Nullable HostingEnvironmentProfileResponse hostingEnvironmentProfile,
        @CustomType.Parameter("httpsOnly") @Nullable Boolean httpsOnly,
        @CustomType.Parameter("hyperV") @Nullable Boolean hyperV,
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("identity") @Nullable ManagedServiceIdentityResponse identity,
        @CustomType.Parameter("inProgressOperationId") String inProgressOperationId,
        @CustomType.Parameter("isDefaultContainer") Boolean isDefaultContainer,
        @CustomType.Parameter("isXenon") @Nullable Boolean isXenon,
        @CustomType.Parameter("keyVaultReferenceIdentity") @Nullable String keyVaultReferenceIdentity,
        @CustomType.Parameter("kind") @Nullable String kind,
        @CustomType.Parameter("lastModifiedTimeUtc") String lastModifiedTimeUtc,
        @CustomType.Parameter("location") String location,
        @CustomType.Parameter("maxNumberOfWorkers") Integer maxNumberOfWorkers,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("outboundIpAddresses") String outboundIpAddresses,
        @CustomType.Parameter("possibleOutboundIpAddresses") String possibleOutboundIpAddresses,
        @CustomType.Parameter("redundancyMode") @Nullable String redundancyMode,
        @CustomType.Parameter("repositorySiteName") String repositorySiteName,
        @CustomType.Parameter("reserved") @Nullable Boolean reserved,
        @CustomType.Parameter("resourceGroup") String resourceGroup,
        @CustomType.Parameter("scmSiteAlsoStopped") @Nullable Boolean scmSiteAlsoStopped,
        @CustomType.Parameter("serverFarmId") @Nullable String serverFarmId,
        @CustomType.Parameter("siteConfig") @Nullable SiteConfigResponse siteConfig,
        @CustomType.Parameter("slotSwapStatus") SlotSwapStatusResponse slotSwapStatus,
        @CustomType.Parameter("state") String state,
        @CustomType.Parameter("storageAccountRequired") @Nullable Boolean storageAccountRequired,
        @CustomType.Parameter("suspendedTill") String suspendedTill,
        @CustomType.Parameter("tags") @Nullable Map<String,String> tags,
        @CustomType.Parameter("targetSwapSlot") String targetSwapSlot,
        @CustomType.Parameter("trafficManagerHostNames") List<String> trafficManagerHostNames,
        @CustomType.Parameter("type") String type,
        @CustomType.Parameter("usageState") String usageState,
        @CustomType.Parameter("virtualNetworkSubnetId") @Nullable String virtualNetworkSubnetId) {
        this.availabilityState = availabilityState;
        this.clientAffinityEnabled = clientAffinityEnabled;
        this.clientCertEnabled = clientCertEnabled;
        this.clientCertExclusionPaths = clientCertExclusionPaths;
        this.clientCertMode = clientCertMode;
        this.containerSize = containerSize;
        this.customDomainVerificationId = customDomainVerificationId;
        this.dailyMemoryTimeQuota = dailyMemoryTimeQuota;
        this.defaultHostName = defaultHostName;
        this.enabled = enabled;
        this.enabledHostNames = enabledHostNames;
        this.hostNameSslStates = hostNameSslStates;
        this.hostNames = hostNames;
        this.hostNamesDisabled = hostNamesDisabled;
        this.hostingEnvironmentProfile = hostingEnvironmentProfile;
        this.httpsOnly = httpsOnly;
        this.hyperV = hyperV;
        this.id = id;
        this.identity = identity;
        this.inProgressOperationId = inProgressOperationId;
        this.isDefaultContainer = isDefaultContainer;
        this.isXenon = isXenon;
        this.keyVaultReferenceIdentity = keyVaultReferenceIdentity;
        this.kind = kind;
        this.lastModifiedTimeUtc = lastModifiedTimeUtc;
        this.location = location;
        this.maxNumberOfWorkers = maxNumberOfWorkers;
        this.name = name;
        this.outboundIpAddresses = outboundIpAddresses;
        this.possibleOutboundIpAddresses = possibleOutboundIpAddresses;
        this.redundancyMode = redundancyMode;
        this.repositorySiteName = repositorySiteName;
        this.reserved = reserved;
        this.resourceGroup = resourceGroup;
        this.scmSiteAlsoStopped = scmSiteAlsoStopped;
        this.serverFarmId = serverFarmId;
        this.siteConfig = siteConfig;
        this.slotSwapStatus = slotSwapStatus;
        this.state = state;
        this.storageAccountRequired = storageAccountRequired;
        this.suspendedTill = suspendedTill;
        this.tags = tags;
        this.targetSwapSlot = targetSwapSlot;
        this.trafficManagerHostNames = trafficManagerHostNames;
        this.type = type;
        this.usageState = usageState;
        this.virtualNetworkSubnetId = virtualNetworkSubnetId;
    }

    /**
     * Management information availability state for the app.
     * 
    */
    public String availabilityState() {
        return this.availabilityState;
    }
    /**
     * &lt;code&gt;true&lt;/code&gt; to enable client affinity; &lt;code&gt;false&lt;/code&gt; to stop sending session affinity cookies, which route client requests in the same session to the same instance. Default is &lt;code&gt;true&lt;/code&gt;.
     * 
    */
    public Optional<Boolean> clientAffinityEnabled() {
        return Optional.ofNullable(this.clientAffinityEnabled);
    }
    /**
     * &lt;code&gt;true&lt;/code&gt; to enable client certificate authentication (TLS mutual authentication); otherwise, &lt;code&gt;false&lt;/code&gt;. Default is &lt;code&gt;false&lt;/code&gt;.
     * 
    */
    public Optional<Boolean> clientCertEnabled() {
        return Optional.ofNullable(this.clientCertEnabled);
    }
    /**
     * client certificate authentication comma-separated exclusion paths
     * 
    */
    public Optional<String> clientCertExclusionPaths() {
        return Optional.ofNullable(this.clientCertExclusionPaths);
    }
    /**
     * This composes with ClientCertEnabled setting.
     * - ClientCertEnabled: false means ClientCert is ignored.
     * - ClientCertEnabled: true and ClientCertMode: Required means ClientCert is required.
     * - ClientCertEnabled: true and ClientCertMode: Optional means ClientCert is optional or accepted.
     * 
    */
    public Optional<String> clientCertMode() {
        return Optional.ofNullable(this.clientCertMode);
    }
    /**
     * Size of the function container.
     * 
    */
    public Optional<Integer> containerSize() {
        return Optional.ofNullable(this.containerSize);
    }
    /**
     * Unique identifier that verifies the custom domains assigned to the app. Customer will add this id to a txt record for verification.
     * 
    */
    public Optional<String> customDomainVerificationId() {
        return Optional.ofNullable(this.customDomainVerificationId);
    }
    /**
     * Maximum allowed daily memory-time quota (applicable on dynamic apps only).
     * 
    */
    public Optional<Integer> dailyMemoryTimeQuota() {
        return Optional.ofNullable(this.dailyMemoryTimeQuota);
    }
    /**
     * Default hostname of the app. Read-only.
     * 
    */
    public String defaultHostName() {
        return this.defaultHostName;
    }
    /**
     * &lt;code&gt;true&lt;/code&gt; if the app is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;. Setting this value to false disables the app (takes the app offline).
     * 
    */
    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }
    /**
     * Enabled hostnames for the app.Hostnames need to be assigned (see HostNames) AND enabled. Otherwise,
     * the app is not served on those hostnames.
     * 
    */
    public List<String> enabledHostNames() {
        return this.enabledHostNames;
    }
    /**
     * Hostname SSL states are used to manage the SSL bindings for app&#39;s hostnames.
     * 
    */
    public List<HostNameSslStateResponse> hostNameSslStates() {
        return this.hostNameSslStates == null ? List.of() : this.hostNameSslStates;
    }
    /**
     * Hostnames associated with the app.
     * 
    */
    public List<String> hostNames() {
        return this.hostNames;
    }
    /**
     * &lt;code&gt;true&lt;/code&gt; to disable the public hostnames of the app; otherwise, &lt;code&gt;false&lt;/code&gt;.
     *  If &lt;code&gt;true&lt;/code&gt;, the app is only accessible via API management process.
     * 
    */
    public Optional<Boolean> hostNamesDisabled() {
        return Optional.ofNullable(this.hostNamesDisabled);
    }
    /**
     * App Service Environment to use for the app.
     * 
    */
    public Optional<HostingEnvironmentProfileResponse> hostingEnvironmentProfile() {
        return Optional.ofNullable(this.hostingEnvironmentProfile);
    }
    /**
     * HttpsOnly: configures a web site to accept only https requests. Issues redirect for
     * http requests
     * 
    */
    public Optional<Boolean> httpsOnly() {
        return Optional.ofNullable(this.httpsOnly);
    }
    /**
     * Hyper-V sandbox.
     * 
    */
    public Optional<Boolean> hyperV() {
        return Optional.ofNullable(this.hyperV);
    }
    /**
     * Resource Id.
     * 
    */
    public String id() {
        return this.id;
    }
    /**
     * Managed service identity.
     * 
    */
    public Optional<ManagedServiceIdentityResponse> identity() {
        return Optional.ofNullable(this.identity);
    }
    /**
     * Specifies an operation id if this site has a pending operation.
     * 
    */
    public String inProgressOperationId() {
        return this.inProgressOperationId;
    }
    /**
     * &lt;code&gt;true&lt;/code&gt; if the app is a default container; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
    */
    public Boolean isDefaultContainer() {
        return this.isDefaultContainer;
    }
    /**
     * Obsolete: Hyper-V sandbox.
     * 
    */
    public Optional<Boolean> isXenon() {
        return Optional.ofNullable(this.isXenon);
    }
    /**
     * Identity to use for Key Vault Reference authentication.
     * 
    */
    public Optional<String> keyVaultReferenceIdentity() {
        return Optional.ofNullable(this.keyVaultReferenceIdentity);
    }
    /**
     * Kind of resource.
     * 
    */
    public Optional<String> kind() {
        return Optional.ofNullable(this.kind);
    }
    /**
     * Last time the app was modified, in UTC. Read-only.
     * 
    */
    public String lastModifiedTimeUtc() {
        return this.lastModifiedTimeUtc;
    }
    /**
     * Resource Location.
     * 
    */
    public String location() {
        return this.location;
    }
    /**
     * Maximum number of workers.
     * This only applies to Functions container.
     * 
    */
    public Integer maxNumberOfWorkers() {
        return this.maxNumberOfWorkers;
    }
    /**
     * Resource Name.
     * 
    */
    public String name() {
        return this.name;
    }
    /**
     * List of IP addresses that the app uses for outbound connections (e.g. database access). Includes VIPs from tenants that site can be hosted with current settings. Read-only.
     * 
    */
    public String outboundIpAddresses() {
        return this.outboundIpAddresses;
    }
    /**
     * List of IP addresses that the app uses for outbound connections (e.g. database access). Includes VIPs from all tenants except dataComponent. Read-only.
     * 
    */
    public String possibleOutboundIpAddresses() {
        return this.possibleOutboundIpAddresses;
    }
    /**
     * Site redundancy mode
     * 
    */
    public Optional<String> redundancyMode() {
        return Optional.ofNullable(this.redundancyMode);
    }
    /**
     * Name of the repository site.
     * 
    */
    public String repositorySiteName() {
        return this.repositorySiteName;
    }
    /**
     * &lt;code&gt;true&lt;/code&gt; if reserved; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
    */
    public Optional<Boolean> reserved() {
        return Optional.ofNullable(this.reserved);
    }
    /**
     * Name of the resource group the app belongs to. Read-only.
     * 
    */
    public String resourceGroup() {
        return this.resourceGroup;
    }
    /**
     * &lt;code&gt;true&lt;/code&gt; to stop SCM (KUDU) site when the app is stopped; otherwise, &lt;code&gt;false&lt;/code&gt;. The default is &lt;code&gt;false&lt;/code&gt;.
     * 
    */
    public Optional<Boolean> scmSiteAlsoStopped() {
        return Optional.ofNullable(this.scmSiteAlsoStopped);
    }
    /**
     * Resource ID of the associated App Service plan, formatted as: &#34;/subscriptions/{subscriptionID}/resourceGroups/{groupName}/providers/Microsoft.Web/serverfarms/{appServicePlanName}&#34;.
     * 
    */
    public Optional<String> serverFarmId() {
        return Optional.ofNullable(this.serverFarmId);
    }
    /**
     * Configuration of the app.
     * 
    */
    public Optional<SiteConfigResponse> siteConfig() {
        return Optional.ofNullable(this.siteConfig);
    }
    /**
     * Status of the last deployment slot swap operation.
     * 
    */
    public SlotSwapStatusResponse slotSwapStatus() {
        return this.slotSwapStatus;
    }
    /**
     * Current state of the app.
     * 
    */
    public String state() {
        return this.state;
    }
    /**
     * Checks if Customer provided storage account is required
     * 
    */
    public Optional<Boolean> storageAccountRequired() {
        return Optional.ofNullable(this.storageAccountRequired);
    }
    /**
     * App suspended till in case memory-time quota is exceeded.
     * 
    */
    public String suspendedTill() {
        return this.suspendedTill;
    }
    /**
     * Resource tags.
     * 
    */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * Specifies which deployment slot this app will swap into. Read-only.
     * 
    */
    public String targetSwapSlot() {
        return this.targetSwapSlot;
    }
    /**
     * Azure Traffic Manager hostnames associated with the app. Read-only.
     * 
    */
    public List<String> trafficManagerHostNames() {
        return this.trafficManagerHostNames;
    }
    /**
     * Resource type.
     * 
    */
    public String type() {
        return this.type;
    }
    /**
     * State indicating whether the app has exceeded its quota usage. Read-only.
     * 
    */
    public String usageState() {
        return this.usageState;
    }
    /**
     * Azure Resource Manager ID of the Virtual network and subnet to be joined by Regional VNET Integration.
     * This must be of the form /subscriptions/{subscriptionName}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}
     * 
    */
    public Optional<String> virtualNetworkSubnetId() {
        return Optional.ofNullable(this.virtualNetworkSubnetId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetWebAppResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String availabilityState;
        private @Nullable Boolean clientAffinityEnabled;
        private @Nullable Boolean clientCertEnabled;
        private @Nullable String clientCertExclusionPaths;
        private @Nullable String clientCertMode;
        private @Nullable Integer containerSize;
        private @Nullable String customDomainVerificationId;
        private @Nullable Integer dailyMemoryTimeQuota;
        private String defaultHostName;
        private @Nullable Boolean enabled;
        private List<String> enabledHostNames;
        private @Nullable List<HostNameSslStateResponse> hostNameSslStates;
        private List<String> hostNames;
        private @Nullable Boolean hostNamesDisabled;
        private @Nullable HostingEnvironmentProfileResponse hostingEnvironmentProfile;
        private @Nullable Boolean httpsOnly;
        private @Nullable Boolean hyperV;
        private String id;
        private @Nullable ManagedServiceIdentityResponse identity;
        private String inProgressOperationId;
        private Boolean isDefaultContainer;
        private @Nullable Boolean isXenon;
        private @Nullable String keyVaultReferenceIdentity;
        private @Nullable String kind;
        private String lastModifiedTimeUtc;
        private String location;
        private Integer maxNumberOfWorkers;
        private String name;
        private String outboundIpAddresses;
        private String possibleOutboundIpAddresses;
        private @Nullable String redundancyMode;
        private String repositorySiteName;
        private @Nullable Boolean reserved;
        private String resourceGroup;
        private @Nullable Boolean scmSiteAlsoStopped;
        private @Nullable String serverFarmId;
        private @Nullable SiteConfigResponse siteConfig;
        private SlotSwapStatusResponse slotSwapStatus;
        private String state;
        private @Nullable Boolean storageAccountRequired;
        private String suspendedTill;
        private @Nullable Map<String,String> tags;
        private String targetSwapSlot;
        private List<String> trafficManagerHostNames;
        private String type;
        private String usageState;
        private @Nullable String virtualNetworkSubnetId;

        public Builder() {
    	      // Empty
        }

        public Builder(GetWebAppResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availabilityState = defaults.availabilityState;
    	      this.clientAffinityEnabled = defaults.clientAffinityEnabled;
    	      this.clientCertEnabled = defaults.clientCertEnabled;
    	      this.clientCertExclusionPaths = defaults.clientCertExclusionPaths;
    	      this.clientCertMode = defaults.clientCertMode;
    	      this.containerSize = defaults.containerSize;
    	      this.customDomainVerificationId = defaults.customDomainVerificationId;
    	      this.dailyMemoryTimeQuota = defaults.dailyMemoryTimeQuota;
    	      this.defaultHostName = defaults.defaultHostName;
    	      this.enabled = defaults.enabled;
    	      this.enabledHostNames = defaults.enabledHostNames;
    	      this.hostNameSslStates = defaults.hostNameSslStates;
    	      this.hostNames = defaults.hostNames;
    	      this.hostNamesDisabled = defaults.hostNamesDisabled;
    	      this.hostingEnvironmentProfile = defaults.hostingEnvironmentProfile;
    	      this.httpsOnly = defaults.httpsOnly;
    	      this.hyperV = defaults.hyperV;
    	      this.id = defaults.id;
    	      this.identity = defaults.identity;
    	      this.inProgressOperationId = defaults.inProgressOperationId;
    	      this.isDefaultContainer = defaults.isDefaultContainer;
    	      this.isXenon = defaults.isXenon;
    	      this.keyVaultReferenceIdentity = defaults.keyVaultReferenceIdentity;
    	      this.kind = defaults.kind;
    	      this.lastModifiedTimeUtc = defaults.lastModifiedTimeUtc;
    	      this.location = defaults.location;
    	      this.maxNumberOfWorkers = defaults.maxNumberOfWorkers;
    	      this.name = defaults.name;
    	      this.outboundIpAddresses = defaults.outboundIpAddresses;
    	      this.possibleOutboundIpAddresses = defaults.possibleOutboundIpAddresses;
    	      this.redundancyMode = defaults.redundancyMode;
    	      this.repositorySiteName = defaults.repositorySiteName;
    	      this.reserved = defaults.reserved;
    	      this.resourceGroup = defaults.resourceGroup;
    	      this.scmSiteAlsoStopped = defaults.scmSiteAlsoStopped;
    	      this.serverFarmId = defaults.serverFarmId;
    	      this.siteConfig = defaults.siteConfig;
    	      this.slotSwapStatus = defaults.slotSwapStatus;
    	      this.state = defaults.state;
    	      this.storageAccountRequired = defaults.storageAccountRequired;
    	      this.suspendedTill = defaults.suspendedTill;
    	      this.tags = defaults.tags;
    	      this.targetSwapSlot = defaults.targetSwapSlot;
    	      this.trafficManagerHostNames = defaults.trafficManagerHostNames;
    	      this.type = defaults.type;
    	      this.usageState = defaults.usageState;
    	      this.virtualNetworkSubnetId = defaults.virtualNetworkSubnetId;
        }

        public Builder availabilityState(String availabilityState) {
            this.availabilityState = Objects.requireNonNull(availabilityState);
            return this;
        }
        public Builder clientAffinityEnabled(@Nullable Boolean clientAffinityEnabled) {
            this.clientAffinityEnabled = clientAffinityEnabled;
            return this;
        }
        public Builder clientCertEnabled(@Nullable Boolean clientCertEnabled) {
            this.clientCertEnabled = clientCertEnabled;
            return this;
        }
        public Builder clientCertExclusionPaths(@Nullable String clientCertExclusionPaths) {
            this.clientCertExclusionPaths = clientCertExclusionPaths;
            return this;
        }
        public Builder clientCertMode(@Nullable String clientCertMode) {
            this.clientCertMode = clientCertMode;
            return this;
        }
        public Builder containerSize(@Nullable Integer containerSize) {
            this.containerSize = containerSize;
            return this;
        }
        public Builder customDomainVerificationId(@Nullable String customDomainVerificationId) {
            this.customDomainVerificationId = customDomainVerificationId;
            return this;
        }
        public Builder dailyMemoryTimeQuota(@Nullable Integer dailyMemoryTimeQuota) {
            this.dailyMemoryTimeQuota = dailyMemoryTimeQuota;
            return this;
        }
        public Builder defaultHostName(String defaultHostName) {
            this.defaultHostName = Objects.requireNonNull(defaultHostName);
            return this;
        }
        public Builder enabled(@Nullable Boolean enabled) {
            this.enabled = enabled;
            return this;
        }
        public Builder enabledHostNames(List<String> enabledHostNames) {
            this.enabledHostNames = Objects.requireNonNull(enabledHostNames);
            return this;
        }
        public Builder enabledHostNames(String... enabledHostNames) {
            return enabledHostNames(List.of(enabledHostNames));
        }
        public Builder hostNameSslStates(@Nullable List<HostNameSslStateResponse> hostNameSslStates) {
            this.hostNameSslStates = hostNameSslStates;
            return this;
        }
        public Builder hostNameSslStates(HostNameSslStateResponse... hostNameSslStates) {
            return hostNameSslStates(List.of(hostNameSslStates));
        }
        public Builder hostNames(List<String> hostNames) {
            this.hostNames = Objects.requireNonNull(hostNames);
            return this;
        }
        public Builder hostNames(String... hostNames) {
            return hostNames(List.of(hostNames));
        }
        public Builder hostNamesDisabled(@Nullable Boolean hostNamesDisabled) {
            this.hostNamesDisabled = hostNamesDisabled;
            return this;
        }
        public Builder hostingEnvironmentProfile(@Nullable HostingEnvironmentProfileResponse hostingEnvironmentProfile) {
            this.hostingEnvironmentProfile = hostingEnvironmentProfile;
            return this;
        }
        public Builder httpsOnly(@Nullable Boolean httpsOnly) {
            this.httpsOnly = httpsOnly;
            return this;
        }
        public Builder hyperV(@Nullable Boolean hyperV) {
            this.hyperV = hyperV;
            return this;
        }
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder identity(@Nullable ManagedServiceIdentityResponse identity) {
            this.identity = identity;
            return this;
        }
        public Builder inProgressOperationId(String inProgressOperationId) {
            this.inProgressOperationId = Objects.requireNonNull(inProgressOperationId);
            return this;
        }
        public Builder isDefaultContainer(Boolean isDefaultContainer) {
            this.isDefaultContainer = Objects.requireNonNull(isDefaultContainer);
            return this;
        }
        public Builder isXenon(@Nullable Boolean isXenon) {
            this.isXenon = isXenon;
            return this;
        }
        public Builder keyVaultReferenceIdentity(@Nullable String keyVaultReferenceIdentity) {
            this.keyVaultReferenceIdentity = keyVaultReferenceIdentity;
            return this;
        }
        public Builder kind(@Nullable String kind) {
            this.kind = kind;
            return this;
        }
        public Builder lastModifiedTimeUtc(String lastModifiedTimeUtc) {
            this.lastModifiedTimeUtc = Objects.requireNonNull(lastModifiedTimeUtc);
            return this;
        }
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        public Builder maxNumberOfWorkers(Integer maxNumberOfWorkers) {
            this.maxNumberOfWorkers = Objects.requireNonNull(maxNumberOfWorkers);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder outboundIpAddresses(String outboundIpAddresses) {
            this.outboundIpAddresses = Objects.requireNonNull(outboundIpAddresses);
            return this;
        }
        public Builder possibleOutboundIpAddresses(String possibleOutboundIpAddresses) {
            this.possibleOutboundIpAddresses = Objects.requireNonNull(possibleOutboundIpAddresses);
            return this;
        }
        public Builder redundancyMode(@Nullable String redundancyMode) {
            this.redundancyMode = redundancyMode;
            return this;
        }
        public Builder repositorySiteName(String repositorySiteName) {
            this.repositorySiteName = Objects.requireNonNull(repositorySiteName);
            return this;
        }
        public Builder reserved(@Nullable Boolean reserved) {
            this.reserved = reserved;
            return this;
        }
        public Builder resourceGroup(String resourceGroup) {
            this.resourceGroup = Objects.requireNonNull(resourceGroup);
            return this;
        }
        public Builder scmSiteAlsoStopped(@Nullable Boolean scmSiteAlsoStopped) {
            this.scmSiteAlsoStopped = scmSiteAlsoStopped;
            return this;
        }
        public Builder serverFarmId(@Nullable String serverFarmId) {
            this.serverFarmId = serverFarmId;
            return this;
        }
        public Builder siteConfig(@Nullable SiteConfigResponse siteConfig) {
            this.siteConfig = siteConfig;
            return this;
        }
        public Builder slotSwapStatus(SlotSwapStatusResponse slotSwapStatus) {
            this.slotSwapStatus = Objects.requireNonNull(slotSwapStatus);
            return this;
        }
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        public Builder storageAccountRequired(@Nullable Boolean storageAccountRequired) {
            this.storageAccountRequired = storageAccountRequired;
            return this;
        }
        public Builder suspendedTill(String suspendedTill) {
            this.suspendedTill = Objects.requireNonNull(suspendedTill);
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        public Builder targetSwapSlot(String targetSwapSlot) {
            this.targetSwapSlot = Objects.requireNonNull(targetSwapSlot);
            return this;
        }
        public Builder trafficManagerHostNames(List<String> trafficManagerHostNames) {
            this.trafficManagerHostNames = Objects.requireNonNull(trafficManagerHostNames);
            return this;
        }
        public Builder trafficManagerHostNames(String... trafficManagerHostNames) {
            return trafficManagerHostNames(List.of(trafficManagerHostNames));
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder usageState(String usageState) {
            this.usageState = Objects.requireNonNull(usageState);
            return this;
        }
        public Builder virtualNetworkSubnetId(@Nullable String virtualNetworkSubnetId) {
            this.virtualNetworkSubnetId = virtualNetworkSubnetId;
            return this;
        }        public GetWebAppResult build() {
            return new GetWebAppResult(availabilityState, clientAffinityEnabled, clientCertEnabled, clientCertExclusionPaths, clientCertMode, containerSize, customDomainVerificationId, dailyMemoryTimeQuota, defaultHostName, enabled, enabledHostNames, hostNameSslStates, hostNames, hostNamesDisabled, hostingEnvironmentProfile, httpsOnly, hyperV, id, identity, inProgressOperationId, isDefaultContainer, isXenon, keyVaultReferenceIdentity, kind, lastModifiedTimeUtc, location, maxNumberOfWorkers, name, outboundIpAddresses, possibleOutboundIpAddresses, redundancyMode, repositorySiteName, reserved, resourceGroup, scmSiteAlsoStopped, serverFarmId, siteConfig, slotSwapStatus, state, storageAccountRequired, suspendedTill, tags, targetSwapSlot, trafficManagerHostNames, type, usageState, virtualNetworkSubnetId);
        }
    }
}
