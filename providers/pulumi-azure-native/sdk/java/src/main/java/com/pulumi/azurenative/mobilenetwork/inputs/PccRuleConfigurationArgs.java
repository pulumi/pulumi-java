// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.mobilenetwork.inputs;

import com.pulumi.azurenative.mobilenetwork.enums.TrafficControlPermission;
import com.pulumi.azurenative.mobilenetwork.inputs.PccRuleQosPolicyArgs;
import com.pulumi.azurenative.mobilenetwork.inputs.ServiceDataFlowTemplateArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * PCC rule configuration
 * 
 */
public final class PccRuleConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final PccRuleConfigurationArgs Empty = new PccRuleConfigurationArgs();

    /**
     * The name of the rule. This must be unique within the parent Service. You must not use any of the following reserved strings - `default`, `requested` or `service`.
     * 
     */
    @Import(name="ruleName", required=true)
    private Output<String> ruleName;

    /**
     * @return The name of the rule. This must be unique within the parent Service. You must not use any of the following reserved strings - `default`, `requested` or `service`.
     * 
     */
    public Output<String> ruleName() {
        return this.ruleName;
    }

    /**
     * A precedence value that is used to decide between PCC Rules when identifying the QoS values to use for a particular Sim. A lower value means a higher priority. This value should be unique among all PCC Rules configured in the Mobile Network.
     * 
     */
    @Import(name="rulePrecedence", required=true)
    private Output<Integer> rulePrecedence;

    /**
     * @return A precedence value that is used to decide between PCC Rules when identifying the QoS values to use for a particular Sim. A lower value means a higher priority. This value should be unique among all PCC Rules configured in the Mobile Network.
     * 
     */
    public Output<Integer> rulePrecedence() {
        return this.rulePrecedence;
    }

    /**
     * The QoS policy to use for packets matching this rule. If this field is null then the Service will define the QoS settings.
     * 
     */
    @Import(name="ruleQosPolicy")
    private @Nullable Output<PccRuleQosPolicyArgs> ruleQosPolicy;

    /**
     * @return The QoS policy to use for packets matching this rule. If this field is null then the Service will define the QoS settings.
     * 
     */
    public Optional<Output<PccRuleQosPolicyArgs>> ruleQosPolicy() {
        return Optional.ofNullable(this.ruleQosPolicy);
    }

    /**
     * The set of service data flow templates to use for this PCC Rule.
     * 
     */
    @Import(name="serviceDataFlowTemplates", required=true)
    private Output<List<ServiceDataFlowTemplateArgs>> serviceDataFlowTemplates;

    /**
     * @return The set of service data flow templates to use for this PCC Rule.
     * 
     */
    public Output<List<ServiceDataFlowTemplateArgs>> serviceDataFlowTemplates() {
        return this.serviceDataFlowTemplates;
    }

    /**
     * Determines whether flows that match this PCC Rule are permitted.
     * 
     */
    @Import(name="trafficControl")
    private @Nullable Output<Either<String,TrafficControlPermission>> trafficControl;

    /**
     * @return Determines whether flows that match this PCC Rule are permitted.
     * 
     */
    public Optional<Output<Either<String,TrafficControlPermission>>> trafficControl() {
        return Optional.ofNullable(this.trafficControl);
    }

    private PccRuleConfigurationArgs() {}

    private PccRuleConfigurationArgs(PccRuleConfigurationArgs $) {
        this.ruleName = $.ruleName;
        this.rulePrecedence = $.rulePrecedence;
        this.ruleQosPolicy = $.ruleQosPolicy;
        this.serviceDataFlowTemplates = $.serviceDataFlowTemplates;
        this.trafficControl = $.trafficControl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PccRuleConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PccRuleConfigurationArgs $;

        public Builder() {
            $ = new PccRuleConfigurationArgs();
        }

        public Builder(PccRuleConfigurationArgs defaults) {
            $ = new PccRuleConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param ruleName The name of the rule. This must be unique within the parent Service. You must not use any of the following reserved strings - `default`, `requested` or `service`.
         * 
         * @return builder
         * 
         */
        public Builder ruleName(Output<String> ruleName) {
            $.ruleName = ruleName;
            return this;
        }

        /**
         * @param ruleName The name of the rule. This must be unique within the parent Service. You must not use any of the following reserved strings - `default`, `requested` or `service`.
         * 
         * @return builder
         * 
         */
        public Builder ruleName(String ruleName) {
            return ruleName(Output.of(ruleName));
        }

        /**
         * @param rulePrecedence A precedence value that is used to decide between PCC Rules when identifying the QoS values to use for a particular Sim. A lower value means a higher priority. This value should be unique among all PCC Rules configured in the Mobile Network.
         * 
         * @return builder
         * 
         */
        public Builder rulePrecedence(Output<Integer> rulePrecedence) {
            $.rulePrecedence = rulePrecedence;
            return this;
        }

        /**
         * @param rulePrecedence A precedence value that is used to decide between PCC Rules when identifying the QoS values to use for a particular Sim. A lower value means a higher priority. This value should be unique among all PCC Rules configured in the Mobile Network.
         * 
         * @return builder
         * 
         */
        public Builder rulePrecedence(Integer rulePrecedence) {
            return rulePrecedence(Output.of(rulePrecedence));
        }

        /**
         * @param ruleQosPolicy The QoS policy to use for packets matching this rule. If this field is null then the Service will define the QoS settings.
         * 
         * @return builder
         * 
         */
        public Builder ruleQosPolicy(@Nullable Output<PccRuleQosPolicyArgs> ruleQosPolicy) {
            $.ruleQosPolicy = ruleQosPolicy;
            return this;
        }

        /**
         * @param ruleQosPolicy The QoS policy to use for packets matching this rule. If this field is null then the Service will define the QoS settings.
         * 
         * @return builder
         * 
         */
        public Builder ruleQosPolicy(PccRuleQosPolicyArgs ruleQosPolicy) {
            return ruleQosPolicy(Output.of(ruleQosPolicy));
        }

        /**
         * @param serviceDataFlowTemplates The set of service data flow templates to use for this PCC Rule.
         * 
         * @return builder
         * 
         */
        public Builder serviceDataFlowTemplates(Output<List<ServiceDataFlowTemplateArgs>> serviceDataFlowTemplates) {
            $.serviceDataFlowTemplates = serviceDataFlowTemplates;
            return this;
        }

        /**
         * @param serviceDataFlowTemplates The set of service data flow templates to use for this PCC Rule.
         * 
         * @return builder
         * 
         */
        public Builder serviceDataFlowTemplates(List<ServiceDataFlowTemplateArgs> serviceDataFlowTemplates) {
            return serviceDataFlowTemplates(Output.of(serviceDataFlowTemplates));
        }

        /**
         * @param serviceDataFlowTemplates The set of service data flow templates to use for this PCC Rule.
         * 
         * @return builder
         * 
         */
        public Builder serviceDataFlowTemplates(ServiceDataFlowTemplateArgs... serviceDataFlowTemplates) {
            return serviceDataFlowTemplates(List.of(serviceDataFlowTemplates));
        }

        /**
         * @param trafficControl Determines whether flows that match this PCC Rule are permitted.
         * 
         * @return builder
         * 
         */
        public Builder trafficControl(@Nullable Output<Either<String,TrafficControlPermission>> trafficControl) {
            $.trafficControl = trafficControl;
            return this;
        }

        /**
         * @param trafficControl Determines whether flows that match this PCC Rule are permitted.
         * 
         * @return builder
         * 
         */
        public Builder trafficControl(Either<String,TrafficControlPermission> trafficControl) {
            return trafficControl(Output.of(trafficControl));
        }

        /**
         * @param trafficControl Determines whether flows that match this PCC Rule are permitted.
         * 
         * @return builder
         * 
         */
        public Builder trafficControl(String trafficControl) {
            return trafficControl(Either.ofLeft(trafficControl));
        }

        /**
         * @param trafficControl Determines whether flows that match this PCC Rule are permitted.
         * 
         * @return builder
         * 
         */
        public Builder trafficControl(TrafficControlPermission trafficControl) {
            return trafficControl(Either.ofRight(trafficControl));
        }

        public PccRuleConfigurationArgs build() {
            $.ruleName = Objects.requireNonNull($.ruleName, "expected parameter 'ruleName' to be non-null");
            $.rulePrecedence = Objects.requireNonNull($.rulePrecedence, "expected parameter 'rulePrecedence' to be non-null");
            $.serviceDataFlowTemplates = Objects.requireNonNull($.serviceDataFlowTemplates, "expected parameter 'serviceDataFlowTemplates' to be non-null");
            $.trafficControl = Codegen.stringProp("trafficControl").left(TrafficControlPermission.class).output().arg($.trafficControl).def("Enabled").getNullable();
            return $;
        }
    }

}
