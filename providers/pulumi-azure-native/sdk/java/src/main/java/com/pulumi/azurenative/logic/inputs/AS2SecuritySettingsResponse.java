// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.logic.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The AS2 agreement security settings.
 * 
 */
public final class AS2SecuritySettingsResponse extends com.pulumi.resources.InvokeArgs {

    public static final AS2SecuritySettingsResponse Empty = new AS2SecuritySettingsResponse();

    /**
     * The value indicating whether to enable NRR for inbound decoded messages.
     * 
     */
    @Import(name="enableNRRForInboundDecodedMessages", required=true)
      private final Boolean enableNRRForInboundDecodedMessages;

    public Boolean enableNRRForInboundDecodedMessages() {
        return this.enableNRRForInboundDecodedMessages;
    }

    /**
     * The value indicating whether to enable NRR for inbound encoded messages.
     * 
     */
    @Import(name="enableNRRForInboundEncodedMessages", required=true)
      private final Boolean enableNRRForInboundEncodedMessages;

    public Boolean enableNRRForInboundEncodedMessages() {
        return this.enableNRRForInboundEncodedMessages;
    }

    /**
     * The value indicating whether to enable NRR for inbound MDN.
     * 
     */
    @Import(name="enableNRRForInboundMDN", required=true)
      private final Boolean enableNRRForInboundMDN;

    public Boolean enableNRRForInboundMDN() {
        return this.enableNRRForInboundMDN;
    }

    /**
     * The value indicating whether to enable NRR for outbound decoded messages.
     * 
     */
    @Import(name="enableNRRForOutboundDecodedMessages", required=true)
      private final Boolean enableNRRForOutboundDecodedMessages;

    public Boolean enableNRRForOutboundDecodedMessages() {
        return this.enableNRRForOutboundDecodedMessages;
    }

    /**
     * The value indicating whether to enable NRR for outbound encoded messages.
     * 
     */
    @Import(name="enableNRRForOutboundEncodedMessages", required=true)
      private final Boolean enableNRRForOutboundEncodedMessages;

    public Boolean enableNRRForOutboundEncodedMessages() {
        return this.enableNRRForOutboundEncodedMessages;
    }

    /**
     * The value indicating whether to enable NRR for outbound MDN.
     * 
     */
    @Import(name="enableNRRForOutboundMDN", required=true)
      private final Boolean enableNRRForOutboundMDN;

    public Boolean enableNRRForOutboundMDN() {
        return this.enableNRRForOutboundMDN;
    }

    /**
     * The name of the encryption certificate.
     * 
     */
    @Import(name="encryptionCertificateName")
      private final @Nullable String encryptionCertificateName;

    public Optional<String> encryptionCertificateName() {
        return this.encryptionCertificateName == null ? Optional.empty() : Optional.ofNullable(this.encryptionCertificateName);
    }

    /**
     * The value indicating whether to send or request a MDN.
     * 
     */
    @Import(name="overrideGroupSigningCertificate", required=true)
      private final Boolean overrideGroupSigningCertificate;

    public Boolean overrideGroupSigningCertificate() {
        return this.overrideGroupSigningCertificate;
    }

    /**
     * The Sha2 algorithm format. Valid values are Sha2, ShaHashSize, ShaHyphenHashSize, Sha2UnderscoreHashSize.
     * 
     */
    @Import(name="sha2AlgorithmFormat")
      private final @Nullable String sha2AlgorithmFormat;

    public Optional<String> sha2AlgorithmFormat() {
        return this.sha2AlgorithmFormat == null ? Optional.empty() : Optional.ofNullable(this.sha2AlgorithmFormat);
    }

    /**
     * The name of the signing certificate.
     * 
     */
    @Import(name="signingCertificateName")
      private final @Nullable String signingCertificateName;

    public Optional<String> signingCertificateName() {
        return this.signingCertificateName == null ? Optional.empty() : Optional.ofNullable(this.signingCertificateName);
    }

    public AS2SecuritySettingsResponse(
        Boolean enableNRRForInboundDecodedMessages,
        Boolean enableNRRForInboundEncodedMessages,
        Boolean enableNRRForInboundMDN,
        Boolean enableNRRForOutboundDecodedMessages,
        Boolean enableNRRForOutboundEncodedMessages,
        Boolean enableNRRForOutboundMDN,
        @Nullable String encryptionCertificateName,
        Boolean overrideGroupSigningCertificate,
        @Nullable String sha2AlgorithmFormat,
        @Nullable String signingCertificateName) {
        this.enableNRRForInboundDecodedMessages = Objects.requireNonNull(enableNRRForInboundDecodedMessages, "expected parameter 'enableNRRForInboundDecodedMessages' to be non-null");
        this.enableNRRForInboundEncodedMessages = Objects.requireNonNull(enableNRRForInboundEncodedMessages, "expected parameter 'enableNRRForInboundEncodedMessages' to be non-null");
        this.enableNRRForInboundMDN = Objects.requireNonNull(enableNRRForInboundMDN, "expected parameter 'enableNRRForInboundMDN' to be non-null");
        this.enableNRRForOutboundDecodedMessages = Objects.requireNonNull(enableNRRForOutboundDecodedMessages, "expected parameter 'enableNRRForOutboundDecodedMessages' to be non-null");
        this.enableNRRForOutboundEncodedMessages = Objects.requireNonNull(enableNRRForOutboundEncodedMessages, "expected parameter 'enableNRRForOutboundEncodedMessages' to be non-null");
        this.enableNRRForOutboundMDN = Objects.requireNonNull(enableNRRForOutboundMDN, "expected parameter 'enableNRRForOutboundMDN' to be non-null");
        this.encryptionCertificateName = encryptionCertificateName;
        this.overrideGroupSigningCertificate = Objects.requireNonNull(overrideGroupSigningCertificate, "expected parameter 'overrideGroupSigningCertificate' to be non-null");
        this.sha2AlgorithmFormat = sha2AlgorithmFormat;
        this.signingCertificateName = signingCertificateName;
    }

    private AS2SecuritySettingsResponse() {
        this.enableNRRForInboundDecodedMessages = null;
        this.enableNRRForInboundEncodedMessages = null;
        this.enableNRRForInboundMDN = null;
        this.enableNRRForOutboundDecodedMessages = null;
        this.enableNRRForOutboundEncodedMessages = null;
        this.enableNRRForOutboundMDN = null;
        this.encryptionCertificateName = null;
        this.overrideGroupSigningCertificate = null;
        this.sha2AlgorithmFormat = null;
        this.signingCertificateName = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AS2SecuritySettingsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Boolean enableNRRForInboundDecodedMessages;
        private Boolean enableNRRForInboundEncodedMessages;
        private Boolean enableNRRForInboundMDN;
        private Boolean enableNRRForOutboundDecodedMessages;
        private Boolean enableNRRForOutboundEncodedMessages;
        private Boolean enableNRRForOutboundMDN;
        private @Nullable String encryptionCertificateName;
        private Boolean overrideGroupSigningCertificate;
        private @Nullable String sha2AlgorithmFormat;
        private @Nullable String signingCertificateName;

        public Builder() {
    	      // Empty
        }

        public Builder(AS2SecuritySettingsResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enableNRRForInboundDecodedMessages = defaults.enableNRRForInboundDecodedMessages;
    	      this.enableNRRForInboundEncodedMessages = defaults.enableNRRForInboundEncodedMessages;
    	      this.enableNRRForInboundMDN = defaults.enableNRRForInboundMDN;
    	      this.enableNRRForOutboundDecodedMessages = defaults.enableNRRForOutboundDecodedMessages;
    	      this.enableNRRForOutboundEncodedMessages = defaults.enableNRRForOutboundEncodedMessages;
    	      this.enableNRRForOutboundMDN = defaults.enableNRRForOutboundMDN;
    	      this.encryptionCertificateName = defaults.encryptionCertificateName;
    	      this.overrideGroupSigningCertificate = defaults.overrideGroupSigningCertificate;
    	      this.sha2AlgorithmFormat = defaults.sha2AlgorithmFormat;
    	      this.signingCertificateName = defaults.signingCertificateName;
        }

        public Builder enableNRRForInboundDecodedMessages(Boolean enableNRRForInboundDecodedMessages) {
            this.enableNRRForInboundDecodedMessages = Objects.requireNonNull(enableNRRForInboundDecodedMessages);
            return this;
        }
        public Builder enableNRRForInboundEncodedMessages(Boolean enableNRRForInboundEncodedMessages) {
            this.enableNRRForInboundEncodedMessages = Objects.requireNonNull(enableNRRForInboundEncodedMessages);
            return this;
        }
        public Builder enableNRRForInboundMDN(Boolean enableNRRForInboundMDN) {
            this.enableNRRForInboundMDN = Objects.requireNonNull(enableNRRForInboundMDN);
            return this;
        }
        public Builder enableNRRForOutboundDecodedMessages(Boolean enableNRRForOutboundDecodedMessages) {
            this.enableNRRForOutboundDecodedMessages = Objects.requireNonNull(enableNRRForOutboundDecodedMessages);
            return this;
        }
        public Builder enableNRRForOutboundEncodedMessages(Boolean enableNRRForOutboundEncodedMessages) {
            this.enableNRRForOutboundEncodedMessages = Objects.requireNonNull(enableNRRForOutboundEncodedMessages);
            return this;
        }
        public Builder enableNRRForOutboundMDN(Boolean enableNRRForOutboundMDN) {
            this.enableNRRForOutboundMDN = Objects.requireNonNull(enableNRRForOutboundMDN);
            return this;
        }
        public Builder encryptionCertificateName(@Nullable String encryptionCertificateName) {
            this.encryptionCertificateName = encryptionCertificateName;
            return this;
        }
        public Builder overrideGroupSigningCertificate(Boolean overrideGroupSigningCertificate) {
            this.overrideGroupSigningCertificate = Objects.requireNonNull(overrideGroupSigningCertificate);
            return this;
        }
        public Builder sha2AlgorithmFormat(@Nullable String sha2AlgorithmFormat) {
            this.sha2AlgorithmFormat = sha2AlgorithmFormat;
            return this;
        }
        public Builder signingCertificateName(@Nullable String signingCertificateName) {
            this.signingCertificateName = signingCertificateName;
            return this;
        }        public AS2SecuritySettingsResponse build() {
            return new AS2SecuritySettingsResponse(enableNRRForInboundDecodedMessages, enableNRRForInboundEncodedMessages, enableNRRForInboundMDN, enableNRRForOutboundDecodedMessages, enableNRRForOutboundEncodedMessages, enableNRRForOutboundMDN, encryptionCertificateName, overrideGroupSigningCertificate, sha2AlgorithmFormat, signingCertificateName);
        }
    }
}
