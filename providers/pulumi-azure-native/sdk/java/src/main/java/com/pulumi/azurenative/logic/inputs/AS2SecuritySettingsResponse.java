// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.logic.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The AS2 agreement security settings.
 * 
 */
public final class AS2SecuritySettingsResponse extends com.pulumi.resources.InvokeArgs {

    public static final AS2SecuritySettingsResponse Empty = new AS2SecuritySettingsResponse();

    /**
     * The value indicating whether to enable NRR for inbound decoded messages.
     * 
     */
    @Import(name="enableNRRForInboundDecodedMessages", required=true)
    private Boolean enableNRRForInboundDecodedMessages;

    public Boolean enableNRRForInboundDecodedMessages() {
        return this.enableNRRForInboundDecodedMessages;
    }

    /**
     * The value indicating whether to enable NRR for inbound encoded messages.
     * 
     */
    @Import(name="enableNRRForInboundEncodedMessages", required=true)
    private Boolean enableNRRForInboundEncodedMessages;

    public Boolean enableNRRForInboundEncodedMessages() {
        return this.enableNRRForInboundEncodedMessages;
    }

    /**
     * The value indicating whether to enable NRR for inbound MDN.
     * 
     */
    @Import(name="enableNRRForInboundMDN", required=true)
    private Boolean enableNRRForInboundMDN;

    public Boolean enableNRRForInboundMDN() {
        return this.enableNRRForInboundMDN;
    }

    /**
     * The value indicating whether to enable NRR for outbound decoded messages.
     * 
     */
    @Import(name="enableNRRForOutboundDecodedMessages", required=true)
    private Boolean enableNRRForOutboundDecodedMessages;

    public Boolean enableNRRForOutboundDecodedMessages() {
        return this.enableNRRForOutboundDecodedMessages;
    }

    /**
     * The value indicating whether to enable NRR for outbound encoded messages.
     * 
     */
    @Import(name="enableNRRForOutboundEncodedMessages", required=true)
    private Boolean enableNRRForOutboundEncodedMessages;

    public Boolean enableNRRForOutboundEncodedMessages() {
        return this.enableNRRForOutboundEncodedMessages;
    }

    /**
     * The value indicating whether to enable NRR for outbound MDN.
     * 
     */
    @Import(name="enableNRRForOutboundMDN", required=true)
    private Boolean enableNRRForOutboundMDN;

    public Boolean enableNRRForOutboundMDN() {
        return this.enableNRRForOutboundMDN;
    }

    /**
     * The name of the encryption certificate.
     * 
     */
    @Import(name="encryptionCertificateName")
    private @Nullable String encryptionCertificateName;

    public Optional<String> encryptionCertificateName() {
        return Optional.ofNullable(this.encryptionCertificateName);
    }

    /**
     * The value indicating whether to send or request a MDN.
     * 
     */
    @Import(name="overrideGroupSigningCertificate", required=true)
    private Boolean overrideGroupSigningCertificate;

    public Boolean overrideGroupSigningCertificate() {
        return this.overrideGroupSigningCertificate;
    }

    /**
     * The Sha2 algorithm format. Valid values are Sha2, ShaHashSize, ShaHyphenHashSize, Sha2UnderscoreHashSize.
     * 
     */
    @Import(name="sha2AlgorithmFormat")
    private @Nullable String sha2AlgorithmFormat;

    public Optional<String> sha2AlgorithmFormat() {
        return Optional.ofNullable(this.sha2AlgorithmFormat);
    }

    /**
     * The name of the signing certificate.
     * 
     */
    @Import(name="signingCertificateName")
    private @Nullable String signingCertificateName;

    public Optional<String> signingCertificateName() {
        return Optional.ofNullable(this.signingCertificateName);
    }

    private AS2SecuritySettingsResponse() {}

    private AS2SecuritySettingsResponse(AS2SecuritySettingsResponse $) {
        this.enableNRRForInboundDecodedMessages = $.enableNRRForInboundDecodedMessages;
        this.enableNRRForInboundEncodedMessages = $.enableNRRForInboundEncodedMessages;
        this.enableNRRForInboundMDN = $.enableNRRForInboundMDN;
        this.enableNRRForOutboundDecodedMessages = $.enableNRRForOutboundDecodedMessages;
        this.enableNRRForOutboundEncodedMessages = $.enableNRRForOutboundEncodedMessages;
        this.enableNRRForOutboundMDN = $.enableNRRForOutboundMDN;
        this.encryptionCertificateName = $.encryptionCertificateName;
        this.overrideGroupSigningCertificate = $.overrideGroupSigningCertificate;
        this.sha2AlgorithmFormat = $.sha2AlgorithmFormat;
        this.signingCertificateName = $.signingCertificateName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AS2SecuritySettingsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AS2SecuritySettingsResponse $;

        public Builder() {
            $ = new AS2SecuritySettingsResponse();
        }

        public Builder(AS2SecuritySettingsResponse defaults) {
            $ = new AS2SecuritySettingsResponse(Objects.requireNonNull(defaults));
        }

        public Builder enableNRRForInboundDecodedMessages(Boolean enableNRRForInboundDecodedMessages) {
            $.enableNRRForInboundDecodedMessages = enableNRRForInboundDecodedMessages;
            return this;
        }

        public Builder enableNRRForInboundEncodedMessages(Boolean enableNRRForInboundEncodedMessages) {
            $.enableNRRForInboundEncodedMessages = enableNRRForInboundEncodedMessages;
            return this;
        }

        public Builder enableNRRForInboundMDN(Boolean enableNRRForInboundMDN) {
            $.enableNRRForInboundMDN = enableNRRForInboundMDN;
            return this;
        }

        public Builder enableNRRForOutboundDecodedMessages(Boolean enableNRRForOutboundDecodedMessages) {
            $.enableNRRForOutboundDecodedMessages = enableNRRForOutboundDecodedMessages;
            return this;
        }

        public Builder enableNRRForOutboundEncodedMessages(Boolean enableNRRForOutboundEncodedMessages) {
            $.enableNRRForOutboundEncodedMessages = enableNRRForOutboundEncodedMessages;
            return this;
        }

        public Builder enableNRRForOutboundMDN(Boolean enableNRRForOutboundMDN) {
            $.enableNRRForOutboundMDN = enableNRRForOutboundMDN;
            return this;
        }

        public Builder encryptionCertificateName(@Nullable String encryptionCertificateName) {
            $.encryptionCertificateName = encryptionCertificateName;
            return this;
        }

        public Builder overrideGroupSigningCertificate(Boolean overrideGroupSigningCertificate) {
            $.overrideGroupSigningCertificate = overrideGroupSigningCertificate;
            return this;
        }

        public Builder sha2AlgorithmFormat(@Nullable String sha2AlgorithmFormat) {
            $.sha2AlgorithmFormat = sha2AlgorithmFormat;
            return this;
        }

        public Builder signingCertificateName(@Nullable String signingCertificateName) {
            $.signingCertificateName = signingCertificateName;
            return this;
        }

        public AS2SecuritySettingsResponse build() {
            $.enableNRRForInboundDecodedMessages = Objects.requireNonNull($.enableNRRForInboundDecodedMessages, "expected parameter 'enableNRRForInboundDecodedMessages' to be non-null");
            $.enableNRRForInboundEncodedMessages = Objects.requireNonNull($.enableNRRForInboundEncodedMessages, "expected parameter 'enableNRRForInboundEncodedMessages' to be non-null");
            $.enableNRRForInboundMDN = Objects.requireNonNull($.enableNRRForInboundMDN, "expected parameter 'enableNRRForInboundMDN' to be non-null");
            $.enableNRRForOutboundDecodedMessages = Objects.requireNonNull($.enableNRRForOutboundDecodedMessages, "expected parameter 'enableNRRForOutboundDecodedMessages' to be non-null");
            $.enableNRRForOutboundEncodedMessages = Objects.requireNonNull($.enableNRRForOutboundEncodedMessages, "expected parameter 'enableNRRForOutboundEncodedMessages' to be non-null");
            $.enableNRRForOutboundMDN = Objects.requireNonNull($.enableNRRForOutboundMDN, "expected parameter 'enableNRRForOutboundMDN' to be non-null");
            $.overrideGroupSigningCertificate = Objects.requireNonNull($.overrideGroupSigningCertificate, "expected parameter 'overrideGroupSigningCertificate' to be non-null");
            return $;
        }
    }

}
