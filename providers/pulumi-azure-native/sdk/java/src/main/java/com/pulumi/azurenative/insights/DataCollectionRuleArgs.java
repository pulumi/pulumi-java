// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.insights;

import com.pulumi.azurenative.insights.enums.KnownDataCollectionRuleResourceKind;
import com.pulumi.azurenative.insights.inputs.DataCollectionRuleDataSourcesArgs;
import com.pulumi.azurenative.insights.inputs.DataCollectionRuleDestinationsArgs;
import com.pulumi.azurenative.insights.inputs.DataFlowArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DataCollectionRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final DataCollectionRuleArgs Empty = new DataCollectionRuleArgs();

    /**
     * The name of the data collection rule. The name is case insensitive.
     * 
     */
    @Import(name="dataCollectionRuleName")
    private @Nullable Output<String> dataCollectionRuleName;

    /**
     * @return The name of the data collection rule. The name is case insensitive.
     * 
     */
    public Optional<Output<String>> dataCollectionRuleName() {
        return Optional.ofNullable(this.dataCollectionRuleName);
    }

    /**
     * The specification of data flows.
     * 
     */
    @Import(name="dataFlows")
    private @Nullable Output<List<DataFlowArgs>> dataFlows;

    /**
     * @return The specification of data flows.
     * 
     */
    public Optional<Output<List<DataFlowArgs>>> dataFlows() {
        return Optional.ofNullable(this.dataFlows);
    }

    /**
     * The specification of data sources.
     * This property is optional and can be omitted if the rule is meant to be used via direct calls to the provisioned endpoint.
     * 
     */
    @Import(name="dataSources")
    private @Nullable Output<DataCollectionRuleDataSourcesArgs> dataSources;

    /**
     * @return The specification of data sources.
     * This property is optional and can be omitted if the rule is meant to be used via direct calls to the provisioned endpoint.
     * 
     */
    public Optional<Output<DataCollectionRuleDataSourcesArgs>> dataSources() {
        return Optional.ofNullable(this.dataSources);
    }

    /**
     * Description of the data collection rule.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the data collection rule.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The specification of destinations.
     * 
     */
    @Import(name="destinations")
    private @Nullable Output<DataCollectionRuleDestinationsArgs> destinations;

    /**
     * @return The specification of destinations.
     * 
     */
    public Optional<Output<DataCollectionRuleDestinationsArgs>> destinations() {
        return Optional.ofNullable(this.destinations);
    }

    /**
     * The kind of the resource.
     * 
     */
    @Import(name="kind")
    private @Nullable Output<Either<String,KnownDataCollectionRuleResourceKind>> kind;

    /**
     * @return The kind of the resource.
     * 
     */
    public Optional<Output<Either<String,KnownDataCollectionRuleResourceKind>>> kind() {
        return Optional.ofNullable(this.kind);
    }

    /**
     * The geo-location where the resource lives.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The geo-location where the resource lives.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group. The name is case insensitive.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Resource tags.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private DataCollectionRuleArgs() {}

    private DataCollectionRuleArgs(DataCollectionRuleArgs $) {
        this.dataCollectionRuleName = $.dataCollectionRuleName;
        this.dataFlows = $.dataFlows;
        this.dataSources = $.dataSources;
        this.description = $.description;
        this.destinations = $.destinations;
        this.kind = $.kind;
        this.location = $.location;
        this.resourceGroupName = $.resourceGroupName;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataCollectionRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataCollectionRuleArgs $;

        public Builder() {
            $ = new DataCollectionRuleArgs();
        }

        public Builder(DataCollectionRuleArgs defaults) {
            $ = new DataCollectionRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dataCollectionRuleName The name of the data collection rule. The name is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder dataCollectionRuleName(@Nullable Output<String> dataCollectionRuleName) {
            $.dataCollectionRuleName = dataCollectionRuleName;
            return this;
        }

        /**
         * @param dataCollectionRuleName The name of the data collection rule. The name is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder dataCollectionRuleName(String dataCollectionRuleName) {
            return dataCollectionRuleName(Output.of(dataCollectionRuleName));
        }

        /**
         * @param dataFlows The specification of data flows.
         * 
         * @return builder
         * 
         */
        public Builder dataFlows(@Nullable Output<List<DataFlowArgs>> dataFlows) {
            $.dataFlows = dataFlows;
            return this;
        }

        /**
         * @param dataFlows The specification of data flows.
         * 
         * @return builder
         * 
         */
        public Builder dataFlows(List<DataFlowArgs> dataFlows) {
            return dataFlows(Output.of(dataFlows));
        }

        /**
         * @param dataFlows The specification of data flows.
         * 
         * @return builder
         * 
         */
        public Builder dataFlows(DataFlowArgs... dataFlows) {
            return dataFlows(List.of(dataFlows));
        }

        /**
         * @param dataSources The specification of data sources.
         * This property is optional and can be omitted if the rule is meant to be used via direct calls to the provisioned endpoint.
         * 
         * @return builder
         * 
         */
        public Builder dataSources(@Nullable Output<DataCollectionRuleDataSourcesArgs> dataSources) {
            $.dataSources = dataSources;
            return this;
        }

        /**
         * @param dataSources The specification of data sources.
         * This property is optional and can be omitted if the rule is meant to be used via direct calls to the provisioned endpoint.
         * 
         * @return builder
         * 
         */
        public Builder dataSources(DataCollectionRuleDataSourcesArgs dataSources) {
            return dataSources(Output.of(dataSources));
        }

        /**
         * @param description Description of the data collection rule.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the data collection rule.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param destinations The specification of destinations.
         * 
         * @return builder
         * 
         */
        public Builder destinations(@Nullable Output<DataCollectionRuleDestinationsArgs> destinations) {
            $.destinations = destinations;
            return this;
        }

        /**
         * @param destinations The specification of destinations.
         * 
         * @return builder
         * 
         */
        public Builder destinations(DataCollectionRuleDestinationsArgs destinations) {
            return destinations(Output.of(destinations));
        }

        /**
         * @param kind The kind of the resource.
         * 
         * @return builder
         * 
         */
        public Builder kind(@Nullable Output<Either<String,KnownDataCollectionRuleResourceKind>> kind) {
            $.kind = kind;
            return this;
        }

        /**
         * @param kind The kind of the resource.
         * 
         * @return builder
         * 
         */
        public Builder kind(Either<String,KnownDataCollectionRuleResourceKind> kind) {
            return kind(Output.of(kind));
        }

        /**
         * @param kind The kind of the resource.
         * 
         * @return builder
         * 
         */
        public Builder kind(String kind) {
            return kind(Either.ofLeft(kind));
        }

        /**
         * @param kind The kind of the resource.
         * 
         * @return builder
         * 
         */
        public Builder kind(KnownDataCollectionRuleResourceKind kind) {
            return kind(Either.ofRight(kind));
        }

        /**
         * @param location The geo-location where the resource lives.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The geo-location where the resource lives.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param tags Resource tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Resource tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public DataCollectionRuleArgs build() {
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
