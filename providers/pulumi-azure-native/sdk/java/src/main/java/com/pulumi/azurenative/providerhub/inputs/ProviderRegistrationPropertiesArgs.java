// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.providerhub.inputs;

import com.pulumi.azurenative.providerhub.enums.ProvisioningState;
import com.pulumi.azurenative.providerhub.enums.ResourceProviderType;
import com.pulumi.azurenative.providerhub.inputs.ProviderRegistrationPropertiesProviderHubMetadataArgs;
import com.pulumi.azurenative.providerhub.inputs.ProviderRegistrationPropertiesSubscriptionLifecycleNotificationSpecificationsArgs;
import com.pulumi.azurenative.providerhub.inputs.ResourceProviderAuthorizationArgs;
import com.pulumi.azurenative.providerhub.inputs.ResourceProviderCapabilitiesArgs;
import com.pulumi.azurenative.providerhub.inputs.ResourceProviderManifestPropertiesFeaturesRuleArgs;
import com.pulumi.azurenative.providerhub.inputs.ResourceProviderManifestPropertiesManagementArgs;
import com.pulumi.azurenative.providerhub.inputs.ResourceProviderManifestPropertiesProviderAuthenticationArgs;
import com.pulumi.azurenative.providerhub.inputs.ResourceProviderManifestPropertiesRequestHeaderOptionsArgs;
import com.pulumi.azurenative.providerhub.inputs.ResourceProviderManifestPropertiesTemplateDeploymentOptionsArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProviderRegistrationPropertiesArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProviderRegistrationPropertiesArgs Empty = new ProviderRegistrationPropertiesArgs();

    @Import(name="capabilities")
    private @Nullable Output<List<ResourceProviderCapabilitiesArgs>> capabilities;

    public Optional<Output<List<ResourceProviderCapabilitiesArgs>>> capabilities() {
        return Optional.ofNullable(this.capabilities);
    }

    @Import(name="featuresRule")
    private @Nullable Output<ResourceProviderManifestPropertiesFeaturesRuleArgs> featuresRule;

    public Optional<Output<ResourceProviderManifestPropertiesFeaturesRuleArgs>> featuresRule() {
        return Optional.ofNullable(this.featuresRule);
    }

    @Import(name="management")
    private @Nullable Output<ResourceProviderManifestPropertiesManagementArgs> management;

    public Optional<Output<ResourceProviderManifestPropertiesManagementArgs>> management() {
        return Optional.ofNullable(this.management);
    }

    @Import(name="metadata")
    private @Nullable Output<Object> metadata;

    public Optional<Output<Object>> metadata() {
        return Optional.ofNullable(this.metadata);
    }

    @Import(name="namespace")
    private @Nullable Output<String> namespace;

    public Optional<Output<String>> namespace() {
        return Optional.ofNullable(this.namespace);
    }

    @Import(name="providerAuthentication")
    private @Nullable Output<ResourceProviderManifestPropertiesProviderAuthenticationArgs> providerAuthentication;

    public Optional<Output<ResourceProviderManifestPropertiesProviderAuthenticationArgs>> providerAuthentication() {
        return Optional.ofNullable(this.providerAuthentication);
    }

    @Import(name="providerAuthorizations")
    private @Nullable Output<List<ResourceProviderAuthorizationArgs>> providerAuthorizations;

    public Optional<Output<List<ResourceProviderAuthorizationArgs>>> providerAuthorizations() {
        return Optional.ofNullable(this.providerAuthorizations);
    }

    @Import(name="providerHubMetadata")
    private @Nullable Output<ProviderRegistrationPropertiesProviderHubMetadataArgs> providerHubMetadata;

    public Optional<Output<ProviderRegistrationPropertiesProviderHubMetadataArgs>> providerHubMetadata() {
        return Optional.ofNullable(this.providerHubMetadata);
    }

    @Import(name="providerType")
    private @Nullable Output<Either<String,ResourceProviderType>> providerType;

    public Optional<Output<Either<String,ResourceProviderType>>> providerType() {
        return Optional.ofNullable(this.providerType);
    }

    @Import(name="providerVersion")
    private @Nullable Output<String> providerVersion;

    public Optional<Output<String>> providerVersion() {
        return Optional.ofNullable(this.providerVersion);
    }

    @Import(name="provisioningState")
    private @Nullable Output<Either<String,ProvisioningState>> provisioningState;

    public Optional<Output<Either<String,ProvisioningState>>> provisioningState() {
        return Optional.ofNullable(this.provisioningState);
    }

    @Import(name="requestHeaderOptions")
    private @Nullable Output<ResourceProviderManifestPropertiesRequestHeaderOptionsArgs> requestHeaderOptions;

    public Optional<Output<ResourceProviderManifestPropertiesRequestHeaderOptionsArgs>> requestHeaderOptions() {
        return Optional.ofNullable(this.requestHeaderOptions);
    }

    @Import(name="requiredFeatures")
    private @Nullable Output<List<String>> requiredFeatures;

    public Optional<Output<List<String>>> requiredFeatures() {
        return Optional.ofNullable(this.requiredFeatures);
    }

    @Import(name="subscriptionLifecycleNotificationSpecifications")
    private @Nullable Output<ProviderRegistrationPropertiesSubscriptionLifecycleNotificationSpecificationsArgs> subscriptionLifecycleNotificationSpecifications;

    public Optional<Output<ProviderRegistrationPropertiesSubscriptionLifecycleNotificationSpecificationsArgs>> subscriptionLifecycleNotificationSpecifications() {
        return Optional.ofNullable(this.subscriptionLifecycleNotificationSpecifications);
    }

    @Import(name="templateDeploymentOptions")
    private @Nullable Output<ResourceProviderManifestPropertiesTemplateDeploymentOptionsArgs> templateDeploymentOptions;

    public Optional<Output<ResourceProviderManifestPropertiesTemplateDeploymentOptionsArgs>> templateDeploymentOptions() {
        return Optional.ofNullable(this.templateDeploymentOptions);
    }

    private ProviderRegistrationPropertiesArgs() {}

    private ProviderRegistrationPropertiesArgs(ProviderRegistrationPropertiesArgs $) {
        this.capabilities = $.capabilities;
        this.featuresRule = $.featuresRule;
        this.management = $.management;
        this.metadata = $.metadata;
        this.namespace = $.namespace;
        this.providerAuthentication = $.providerAuthentication;
        this.providerAuthorizations = $.providerAuthorizations;
        this.providerHubMetadata = $.providerHubMetadata;
        this.providerType = $.providerType;
        this.providerVersion = $.providerVersion;
        this.provisioningState = $.provisioningState;
        this.requestHeaderOptions = $.requestHeaderOptions;
        this.requiredFeatures = $.requiredFeatures;
        this.subscriptionLifecycleNotificationSpecifications = $.subscriptionLifecycleNotificationSpecifications;
        this.templateDeploymentOptions = $.templateDeploymentOptions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProviderRegistrationPropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProviderRegistrationPropertiesArgs $;

        public Builder() {
            $ = new ProviderRegistrationPropertiesArgs();
        }

        public Builder(ProviderRegistrationPropertiesArgs defaults) {
            $ = new ProviderRegistrationPropertiesArgs(Objects.requireNonNull(defaults));
        }

        public Builder capabilities(@Nullable Output<List<ResourceProviderCapabilitiesArgs>> capabilities) {
            $.capabilities = capabilities;
            return this;
        }

        public Builder capabilities(List<ResourceProviderCapabilitiesArgs> capabilities) {
            return capabilities(Output.of(capabilities));
        }

        public Builder capabilities(ResourceProviderCapabilitiesArgs... capabilities) {
            return capabilities(List.of(capabilities));
        }

        public Builder featuresRule(@Nullable Output<ResourceProviderManifestPropertiesFeaturesRuleArgs> featuresRule) {
            $.featuresRule = featuresRule;
            return this;
        }

        public Builder featuresRule(ResourceProviderManifestPropertiesFeaturesRuleArgs featuresRule) {
            return featuresRule(Output.of(featuresRule));
        }

        public Builder management(@Nullable Output<ResourceProviderManifestPropertiesManagementArgs> management) {
            $.management = management;
            return this;
        }

        public Builder management(ResourceProviderManifestPropertiesManagementArgs management) {
            return management(Output.of(management));
        }

        public Builder metadata(@Nullable Output<Object> metadata) {
            $.metadata = metadata;
            return this;
        }

        public Builder metadata(Object metadata) {
            return metadata(Output.of(metadata));
        }

        public Builder namespace(@Nullable Output<String> namespace) {
            $.namespace = namespace;
            return this;
        }

        public Builder namespace(String namespace) {
            return namespace(Output.of(namespace));
        }

        public Builder providerAuthentication(@Nullable Output<ResourceProviderManifestPropertiesProviderAuthenticationArgs> providerAuthentication) {
            $.providerAuthentication = providerAuthentication;
            return this;
        }

        public Builder providerAuthentication(ResourceProviderManifestPropertiesProviderAuthenticationArgs providerAuthentication) {
            return providerAuthentication(Output.of(providerAuthentication));
        }

        public Builder providerAuthorizations(@Nullable Output<List<ResourceProviderAuthorizationArgs>> providerAuthorizations) {
            $.providerAuthorizations = providerAuthorizations;
            return this;
        }

        public Builder providerAuthorizations(List<ResourceProviderAuthorizationArgs> providerAuthorizations) {
            return providerAuthorizations(Output.of(providerAuthorizations));
        }

        public Builder providerAuthorizations(ResourceProviderAuthorizationArgs... providerAuthorizations) {
            return providerAuthorizations(List.of(providerAuthorizations));
        }

        public Builder providerHubMetadata(@Nullable Output<ProviderRegistrationPropertiesProviderHubMetadataArgs> providerHubMetadata) {
            $.providerHubMetadata = providerHubMetadata;
            return this;
        }

        public Builder providerHubMetadata(ProviderRegistrationPropertiesProviderHubMetadataArgs providerHubMetadata) {
            return providerHubMetadata(Output.of(providerHubMetadata));
        }

        public Builder providerType(@Nullable Output<Either<String,ResourceProviderType>> providerType) {
            $.providerType = providerType;
            return this;
        }

        public Builder providerType(Either<String,ResourceProviderType> providerType) {
            return providerType(Output.of(providerType));
        }

        public Builder providerType(String providerType) {
            return providerType(Either.ofLeft(providerType));
        }

        public Builder providerType(ResourceProviderType providerType) {
            return providerType(Either.ofRight(providerType));
        }

        public Builder providerVersion(@Nullable Output<String> providerVersion) {
            $.providerVersion = providerVersion;
            return this;
        }

        public Builder providerVersion(String providerVersion) {
            return providerVersion(Output.of(providerVersion));
        }

        public Builder provisioningState(@Nullable Output<Either<String,ProvisioningState>> provisioningState) {
            $.provisioningState = provisioningState;
            return this;
        }

        public Builder provisioningState(Either<String,ProvisioningState> provisioningState) {
            return provisioningState(Output.of(provisioningState));
        }

        public Builder provisioningState(String provisioningState) {
            return provisioningState(Either.ofLeft(provisioningState));
        }

        public Builder provisioningState(ProvisioningState provisioningState) {
            return provisioningState(Either.ofRight(provisioningState));
        }

        public Builder requestHeaderOptions(@Nullable Output<ResourceProviderManifestPropertiesRequestHeaderOptionsArgs> requestHeaderOptions) {
            $.requestHeaderOptions = requestHeaderOptions;
            return this;
        }

        public Builder requestHeaderOptions(ResourceProviderManifestPropertiesRequestHeaderOptionsArgs requestHeaderOptions) {
            return requestHeaderOptions(Output.of(requestHeaderOptions));
        }

        public Builder requiredFeatures(@Nullable Output<List<String>> requiredFeatures) {
            $.requiredFeatures = requiredFeatures;
            return this;
        }

        public Builder requiredFeatures(List<String> requiredFeatures) {
            return requiredFeatures(Output.of(requiredFeatures));
        }

        public Builder requiredFeatures(String... requiredFeatures) {
            return requiredFeatures(List.of(requiredFeatures));
        }

        public Builder subscriptionLifecycleNotificationSpecifications(@Nullable Output<ProviderRegistrationPropertiesSubscriptionLifecycleNotificationSpecificationsArgs> subscriptionLifecycleNotificationSpecifications) {
            $.subscriptionLifecycleNotificationSpecifications = subscriptionLifecycleNotificationSpecifications;
            return this;
        }

        public Builder subscriptionLifecycleNotificationSpecifications(ProviderRegistrationPropertiesSubscriptionLifecycleNotificationSpecificationsArgs subscriptionLifecycleNotificationSpecifications) {
            return subscriptionLifecycleNotificationSpecifications(Output.of(subscriptionLifecycleNotificationSpecifications));
        }

        public Builder templateDeploymentOptions(@Nullable Output<ResourceProviderManifestPropertiesTemplateDeploymentOptionsArgs> templateDeploymentOptions) {
            $.templateDeploymentOptions = templateDeploymentOptions;
            return this;
        }

        public Builder templateDeploymentOptions(ResourceProviderManifestPropertiesTemplateDeploymentOptionsArgs templateDeploymentOptions) {
            return templateDeploymentOptions(Output.of(templateDeploymentOptions));
        }

        public ProviderRegistrationPropertiesArgs build() {
            return $;
        }
    }

}
