// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.azurenative.datafactory.enums.SsisPackageLocationType;
import com.pulumi.azurenative.datafactory.inputs.AzureKeyVaultSecretReferenceArgs;
import com.pulumi.azurenative.datafactory.inputs.SSISAccessCredentialArgs;
import com.pulumi.azurenative.datafactory.inputs.SSISChildPackageArgs;
import com.pulumi.azurenative.datafactory.inputs.SecureStringArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * SSIS package location.
 * 
 */
public final class SSISPackageLocationArgs extends com.pulumi.resources.ResourceArgs {

    public static final SSISPackageLocationArgs Empty = new SSISPackageLocationArgs();

    /**
     * The package access credential.
     * 
     */
    @Import(name="accessCredential")
    private @Nullable Output<SSISAccessCredentialArgs> accessCredential;

    /**
     * @return The package access credential.
     * 
     */
    public Optional<Output<SSISAccessCredentialArgs>> accessCredential() {
        return Optional.ofNullable(this.accessCredential);
    }

    /**
     * The embedded child package list.
     * 
     */
    @Import(name="childPackages")
    private @Nullable Output<List<SSISChildPackageArgs>> childPackages;

    /**
     * @return The embedded child package list.
     * 
     */
    public Optional<Output<List<SSISChildPackageArgs>>> childPackages() {
        return Optional.ofNullable(this.childPackages);
    }

    /**
     * The configuration file access credential.
     * 
     */
    @Import(name="configurationAccessCredential")
    private @Nullable Output<SSISAccessCredentialArgs> configurationAccessCredential;

    /**
     * @return The configuration file access credential.
     * 
     */
    public Optional<Output<SSISAccessCredentialArgs>> configurationAccessCredential() {
        return Optional.ofNullable(this.configurationAccessCredential);
    }

    /**
     * The configuration file of the package execution. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="configurationPath")
    private @Nullable Output<Object> configurationPath;

    /**
     * @return The configuration file of the package execution. Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Output<Object>> configurationPath() {
        return Optional.ofNullable(this.configurationPath);
    }

    /**
     * The embedded package content. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="packageContent")
    private @Nullable Output<Object> packageContent;

    /**
     * @return The embedded package content. Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Output<Object>> packageContent() {
        return Optional.ofNullable(this.packageContent);
    }

    /**
     * The embedded package last modified date.
     * 
     */
    @Import(name="packageLastModifiedDate")
    private @Nullable Output<String> packageLastModifiedDate;

    /**
     * @return The embedded package last modified date.
     * 
     */
    public Optional<Output<String>> packageLastModifiedDate() {
        return Optional.ofNullable(this.packageLastModifiedDate);
    }

    /**
     * The package name.
     * 
     */
    @Import(name="packageName")
    private @Nullable Output<String> packageName;

    /**
     * @return The package name.
     * 
     */
    public Optional<Output<String>> packageName() {
        return Optional.ofNullable(this.packageName);
    }

    /**
     * Password of the package.
     * 
     */
    @Import(name="packagePassword")
    private @Nullable Output<Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs>> packagePassword;

    /**
     * @return Password of the package.
     * 
     */
    public Optional<Output<Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs>>> packagePassword() {
        return Optional.ofNullable(this.packagePassword);
    }

    /**
     * The SSIS package path. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="packagePath")
    private @Nullable Output<Object> packagePath;

    /**
     * @return The SSIS package path. Type: string (or Expression with resultType string).
     * 
     */
    public Optional<Output<Object>> packagePath() {
        return Optional.ofNullable(this.packagePath);
    }

    /**
     * The type of SSIS package location.
     * 
     */
    @Import(name="type")
    private @Nullable Output<Either<String,SsisPackageLocationType>> type;

    /**
     * @return The type of SSIS package location.
     * 
     */
    public Optional<Output<Either<String,SsisPackageLocationType>>> type() {
        return Optional.ofNullable(this.type);
    }

    private SSISPackageLocationArgs() {}

    private SSISPackageLocationArgs(SSISPackageLocationArgs $) {
        this.accessCredential = $.accessCredential;
        this.childPackages = $.childPackages;
        this.configurationAccessCredential = $.configurationAccessCredential;
        this.configurationPath = $.configurationPath;
        this.packageContent = $.packageContent;
        this.packageLastModifiedDate = $.packageLastModifiedDate;
        this.packageName = $.packageName;
        this.packagePassword = $.packagePassword;
        this.packagePath = $.packagePath;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SSISPackageLocationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SSISPackageLocationArgs $;

        public Builder() {
            $ = new SSISPackageLocationArgs();
        }

        public Builder(SSISPackageLocationArgs defaults) {
            $ = new SSISPackageLocationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessCredential The package access credential.
         * 
         * @return builder
         * 
         */
        public Builder accessCredential(@Nullable Output<SSISAccessCredentialArgs> accessCredential) {
            $.accessCredential = accessCredential;
            return this;
        }

        /**
         * @param accessCredential The package access credential.
         * 
         * @return builder
         * 
         */
        public Builder accessCredential(SSISAccessCredentialArgs accessCredential) {
            return accessCredential(Output.of(accessCredential));
        }

        /**
         * @param childPackages The embedded child package list.
         * 
         * @return builder
         * 
         */
        public Builder childPackages(@Nullable Output<List<SSISChildPackageArgs>> childPackages) {
            $.childPackages = childPackages;
            return this;
        }

        /**
         * @param childPackages The embedded child package list.
         * 
         * @return builder
         * 
         */
        public Builder childPackages(List<SSISChildPackageArgs> childPackages) {
            return childPackages(Output.of(childPackages));
        }

        /**
         * @param childPackages The embedded child package list.
         * 
         * @return builder
         * 
         */
        public Builder childPackages(SSISChildPackageArgs... childPackages) {
            return childPackages(List.of(childPackages));
        }

        /**
         * @param configurationAccessCredential The configuration file access credential.
         * 
         * @return builder
         * 
         */
        public Builder configurationAccessCredential(@Nullable Output<SSISAccessCredentialArgs> configurationAccessCredential) {
            $.configurationAccessCredential = configurationAccessCredential;
            return this;
        }

        /**
         * @param configurationAccessCredential The configuration file access credential.
         * 
         * @return builder
         * 
         */
        public Builder configurationAccessCredential(SSISAccessCredentialArgs configurationAccessCredential) {
            return configurationAccessCredential(Output.of(configurationAccessCredential));
        }

        /**
         * @param configurationPath The configuration file of the package execution. Type: string (or Expression with resultType string).
         * 
         * @return builder
         * 
         */
        public Builder configurationPath(@Nullable Output<Object> configurationPath) {
            $.configurationPath = configurationPath;
            return this;
        }

        /**
         * @param configurationPath The configuration file of the package execution. Type: string (or Expression with resultType string).
         * 
         * @return builder
         * 
         */
        public Builder configurationPath(Object configurationPath) {
            return configurationPath(Output.of(configurationPath));
        }

        /**
         * @param packageContent The embedded package content. Type: string (or Expression with resultType string).
         * 
         * @return builder
         * 
         */
        public Builder packageContent(@Nullable Output<Object> packageContent) {
            $.packageContent = packageContent;
            return this;
        }

        /**
         * @param packageContent The embedded package content. Type: string (or Expression with resultType string).
         * 
         * @return builder
         * 
         */
        public Builder packageContent(Object packageContent) {
            return packageContent(Output.of(packageContent));
        }

        /**
         * @param packageLastModifiedDate The embedded package last modified date.
         * 
         * @return builder
         * 
         */
        public Builder packageLastModifiedDate(@Nullable Output<String> packageLastModifiedDate) {
            $.packageLastModifiedDate = packageLastModifiedDate;
            return this;
        }

        /**
         * @param packageLastModifiedDate The embedded package last modified date.
         * 
         * @return builder
         * 
         */
        public Builder packageLastModifiedDate(String packageLastModifiedDate) {
            return packageLastModifiedDate(Output.of(packageLastModifiedDate));
        }

        /**
         * @param packageName The package name.
         * 
         * @return builder
         * 
         */
        public Builder packageName(@Nullable Output<String> packageName) {
            $.packageName = packageName;
            return this;
        }

        /**
         * @param packageName The package name.
         * 
         * @return builder
         * 
         */
        public Builder packageName(String packageName) {
            return packageName(Output.of(packageName));
        }

        /**
         * @param packagePassword Password of the package.
         * 
         * @return builder
         * 
         */
        public Builder packagePassword(@Nullable Output<Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs>> packagePassword) {
            $.packagePassword = packagePassword;
            return this;
        }

        /**
         * @param packagePassword Password of the package.
         * 
         * @return builder
         * 
         */
        public Builder packagePassword(Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs> packagePassword) {
            return packagePassword(Output.of(packagePassword));
        }

        /**
         * @param packagePassword Password of the package.
         * 
         * @return builder
         * 
         */
        public Builder packagePassword(AzureKeyVaultSecretReferenceArgs packagePassword) {
            return packagePassword(Either.ofLeft(packagePassword));
        }

        /**
         * @param packagePassword Password of the package.
         * 
         * @return builder
         * 
         */
        public Builder packagePassword(SecureStringArgs packagePassword) {
            return packagePassword(Either.ofRight(packagePassword));
        }

        /**
         * @param packagePath The SSIS package path. Type: string (or Expression with resultType string).
         * 
         * @return builder
         * 
         */
        public Builder packagePath(@Nullable Output<Object> packagePath) {
            $.packagePath = packagePath;
            return this;
        }

        /**
         * @param packagePath The SSIS package path. Type: string (or Expression with resultType string).
         * 
         * @return builder
         * 
         */
        public Builder packagePath(Object packagePath) {
            return packagePath(Output.of(packagePath));
        }

        /**
         * @param type The type of SSIS package location.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<Either<String,SsisPackageLocationType>> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of SSIS package location.
         * 
         * @return builder
         * 
         */
        public Builder type(Either<String,SsisPackageLocationType> type) {
            return type(Output.of(type));
        }

        /**
         * @param type The type of SSIS package location.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Either.ofLeft(type));
        }

        /**
         * @param type The type of SSIS package location.
         * 
         * @return builder
         * 
         */
        public Builder type(SsisPackageLocationType type) {
            return type(Either.ofRight(type));
        }

        public SSISPackageLocationArgs build() {
            return $;
        }
    }

}
