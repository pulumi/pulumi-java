// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.containerinstance.inputs;

import com.pulumi.azurenative.containerinstance.enums.ContainerGroupIpAddressType;
import com.pulumi.azurenative.containerinstance.inputs.PortArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * IP address for the container group.
 * 
 */
public final class IpAddressArgs extends com.pulumi.resources.ResourceArgs {

    public static final IpAddressArgs Empty = new IpAddressArgs();

    /**
     * The Dns name label for the IP.
     * 
     */
    @Import(name="dnsNameLabel")
    private @Nullable Output<String> dnsNameLabel;

    /**
     * @return The Dns name label for the IP.
     * 
     */
    public Optional<Output<String>> dnsNameLabel() {
        return Optional.ofNullable(this.dnsNameLabel);
    }

    /**
     * The IP exposed to the public internet.
     * 
     */
    @Import(name="ip")
    private @Nullable Output<String> ip;

    /**
     * @return The IP exposed to the public internet.
     * 
     */
    public Optional<Output<String>> ip() {
        return Optional.ofNullable(this.ip);
    }

    /**
     * The list of ports exposed on the container group.
     * 
     */
    @Import(name="ports", required=true)
    private Output<List<PortArgs>> ports;

    /**
     * @return The list of ports exposed on the container group.
     * 
     */
    public Output<List<PortArgs>> ports() {
        return this.ports;
    }

    /**
     * Specifies if the IP is exposed to the public internet or private VNET.
     * 
     */
    @Import(name="type", required=true)
    private Output<Either<String,ContainerGroupIpAddressType>> type;

    /**
     * @return Specifies if the IP is exposed to the public internet or private VNET.
     * 
     */
    public Output<Either<String,ContainerGroupIpAddressType>> type() {
        return this.type;
    }

    private IpAddressArgs() {}

    private IpAddressArgs(IpAddressArgs $) {
        this.dnsNameLabel = $.dnsNameLabel;
        this.ip = $.ip;
        this.ports = $.ports;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IpAddressArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IpAddressArgs $;

        public Builder() {
            $ = new IpAddressArgs();
        }

        public Builder(IpAddressArgs defaults) {
            $ = new IpAddressArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dnsNameLabel The Dns name label for the IP.
         * 
         * @return builder
         * 
         */
        public Builder dnsNameLabel(@Nullable Output<String> dnsNameLabel) {
            $.dnsNameLabel = dnsNameLabel;
            return this;
        }

        /**
         * @param dnsNameLabel The Dns name label for the IP.
         * 
         * @return builder
         * 
         */
        public Builder dnsNameLabel(String dnsNameLabel) {
            return dnsNameLabel(Output.of(dnsNameLabel));
        }

        /**
         * @param ip The IP exposed to the public internet.
         * 
         * @return builder
         * 
         */
        public Builder ip(@Nullable Output<String> ip) {
            $.ip = ip;
            return this;
        }

        /**
         * @param ip The IP exposed to the public internet.
         * 
         * @return builder
         * 
         */
        public Builder ip(String ip) {
            return ip(Output.of(ip));
        }

        /**
         * @param ports The list of ports exposed on the container group.
         * 
         * @return builder
         * 
         */
        public Builder ports(Output<List<PortArgs>> ports) {
            $.ports = ports;
            return this;
        }

        /**
         * @param ports The list of ports exposed on the container group.
         * 
         * @return builder
         * 
         */
        public Builder ports(List<PortArgs> ports) {
            return ports(Output.of(ports));
        }

        /**
         * @param ports The list of ports exposed on the container group.
         * 
         * @return builder
         * 
         */
        public Builder ports(PortArgs... ports) {
            return ports(List.of(ports));
        }

        /**
         * @param type Specifies if the IP is exposed to the public internet or private VNET.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<Either<String,ContainerGroupIpAddressType>> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Specifies if the IP is exposed to the public internet or private VNET.
         * 
         * @return builder
         * 
         */
        public Builder type(Either<String,ContainerGroupIpAddressType> type) {
            return type(Output.of(type));
        }

        /**
         * @param type Specifies if the IP is exposed to the public internet or private VNET.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Either.ofLeft(type));
        }

        /**
         * @param type Specifies if the IP is exposed to the public internet or private VNET.
         * 
         * @return builder
         * 
         */
        public Builder type(ContainerGroupIpAddressType type) {
            return type(Either.ofRight(type));
        }

        public IpAddressArgs build() {
            $.ports = Objects.requireNonNull($.ports, "expected parameter 'ports' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
