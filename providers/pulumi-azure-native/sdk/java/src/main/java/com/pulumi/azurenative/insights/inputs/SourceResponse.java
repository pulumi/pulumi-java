// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.insights.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Specifies the log search query.
 * 
 */
public final class SourceResponse extends com.pulumi.resources.InvokeArgs {

    public static final SourceResponse Empty = new SourceResponse();

    /**
     * List of  Resource referred into query
     * 
     */
    @Import(name="authorizedResources")
    private @Nullable List<String> authorizedResources;

    /**
     * @return List of  Resource referred into query
     * 
     */
    public Optional<List<String>> authorizedResources() {
        return Optional.ofNullable(this.authorizedResources);
    }

    /**
     * The resource uri over which log search query is to be run.
     * 
     */
    @Import(name="dataSourceId", required=true)
    private String dataSourceId;

    /**
     * @return The resource uri over which log search query is to be run.
     * 
     */
    public String dataSourceId() {
        return this.dataSourceId;
    }

    /**
     * Log search query. Required for action type - AlertingAction
     * 
     */
    @Import(name="query")
    private @Nullable String query;

    /**
     * @return Log search query. Required for action type - AlertingAction
     * 
     */
    public Optional<String> query() {
        return Optional.ofNullable(this.query);
    }

    /**
     * Set value to &#39;ResultCount&#39; .
     * 
     */
    @Import(name="queryType")
    private @Nullable String queryType;

    /**
     * @return Set value to &#39;ResultCount&#39; .
     * 
     */
    public Optional<String> queryType() {
        return Optional.ofNullable(this.queryType);
    }

    private SourceResponse() {}

    private SourceResponse(SourceResponse $) {
        this.authorizedResources = $.authorizedResources;
        this.dataSourceId = $.dataSourceId;
        this.query = $.query;
        this.queryType = $.queryType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SourceResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SourceResponse $;

        public Builder() {
            $ = new SourceResponse();
        }

        public Builder(SourceResponse defaults) {
            $ = new SourceResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param authorizedResources List of  Resource referred into query
         * 
         * @return builder
         * 
         */
        public Builder authorizedResources(@Nullable List<String> authorizedResources) {
            $.authorizedResources = authorizedResources;
            return this;
        }

        /**
         * @param authorizedResources List of  Resource referred into query
         * 
         * @return builder
         * 
         */
        public Builder authorizedResources(String... authorizedResources) {
            return authorizedResources(List.of(authorizedResources));
        }

        /**
         * @param dataSourceId The resource uri over which log search query is to be run.
         * 
         * @return builder
         * 
         */
        public Builder dataSourceId(String dataSourceId) {
            $.dataSourceId = dataSourceId;
            return this;
        }

        /**
         * @param query Log search query. Required for action type - AlertingAction
         * 
         * @return builder
         * 
         */
        public Builder query(@Nullable String query) {
            $.query = query;
            return this;
        }

        /**
         * @param queryType Set value to &#39;ResultCount&#39; .
         * 
         * @return builder
         * 
         */
        public Builder queryType(@Nullable String queryType) {
            $.queryType = queryType;
            return this;
        }

        public SourceResponse build() {
            $.dataSourceId = Objects.requireNonNull($.dataSourceId, "expected parameter 'dataSourceId' to be non-null");
            return $;
        }
    }

}
