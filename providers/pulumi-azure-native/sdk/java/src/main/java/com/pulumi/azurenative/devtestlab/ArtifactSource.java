// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.devtestlab;

import com.pulumi.azurenative.Utilities;
import com.pulumi.azurenative.devtestlab.ArtifactSourceArgs;
import com.pulumi.core.Alias;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Properties of an artifact source.
 * API Version: 2018-09-15.
 * 
 * ## Example Usage
 * 
 * ## Import
 * 
 * An existing resource can be imported using its type token, name, and identifier, e.g.
 * 
 * ```sh
 * $ pulumi import azure-native:devtestlab:ArtifactSource {artifactSourceName} /subscriptions/{subscriptionId}/resourceGroups/resourceGroupName/providers/Microsoft.DevTestLab/labs/{labName}/artifactsources/{artifactSourceName} 
 * ```
 * 
 */
@ResourceType(type="azure-native:devtestlab:ArtifactSource")
public class ArtifactSource extends com.pulumi.resources.CustomResource {
    /**
     * The folder containing Azure Resource Manager templates.
     * 
     */
    @Export(name="armTemplateFolderPath", type=String.class, parameters={})
    private Output</* @Nullable */ String> armTemplateFolderPath;

    /**
     * @return The folder containing Azure Resource Manager templates.
     * 
     */
    public Output<Optional<String>> armTemplateFolderPath() {
        return Codegen.optional(this.armTemplateFolderPath);
    }
    /**
     * The artifact source&#39;s branch reference.
     * 
     */
    @Export(name="branchRef", type=String.class, parameters={})
    private Output</* @Nullable */ String> branchRef;

    /**
     * @return The artifact source&#39;s branch reference.
     * 
     */
    public Output<Optional<String>> branchRef() {
        return Codegen.optional(this.branchRef);
    }
    /**
     * The artifact source&#39;s creation date.
     * 
     */
    @Export(name="createdDate", type=String.class, parameters={})
    private Output<String> createdDate;

    /**
     * @return The artifact source&#39;s creation date.
     * 
     */
    public Output<String> createdDate() {
        return this.createdDate;
    }
    /**
     * The artifact source&#39;s display name.
     * 
     */
    @Export(name="displayName", type=String.class, parameters={})
    private Output</* @Nullable */ String> displayName;

    /**
     * @return The artifact source&#39;s display name.
     * 
     */
    public Output<Optional<String>> displayName() {
        return Codegen.optional(this.displayName);
    }
    /**
     * The folder containing artifacts.
     * 
     */
    @Export(name="folderPath", type=String.class, parameters={})
    private Output</* @Nullable */ String> folderPath;

    /**
     * @return The folder containing artifacts.
     * 
     */
    public Output<Optional<String>> folderPath() {
        return Codegen.optional(this.folderPath);
    }
    /**
     * The location of the resource.
     * 
     */
    @Export(name="location", type=String.class, parameters={})
    private Output</* @Nullable */ String> location;

    /**
     * @return The location of the resource.
     * 
     */
    public Output<Optional<String>> location() {
        return Codegen.optional(this.location);
    }
    /**
     * The name of the resource.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the resource.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The provisioning status of the resource.
     * 
     */
    @Export(name="provisioningState", type=String.class, parameters={})
    private Output<String> provisioningState;

    /**
     * @return The provisioning status of the resource.
     * 
     */
    public Output<String> provisioningState() {
        return this.provisioningState;
    }
    /**
     * The security token to authenticate to the artifact source.
     * 
     */
    @Export(name="securityToken", type=String.class, parameters={})
    private Output</* @Nullable */ String> securityToken;

    /**
     * @return The security token to authenticate to the artifact source.
     * 
     */
    public Output<Optional<String>> securityToken() {
        return Codegen.optional(this.securityToken);
    }
    /**
     * The artifact source&#39;s type.
     * 
     */
    @Export(name="sourceType", type=String.class, parameters={})
    private Output</* @Nullable */ String> sourceType;

    /**
     * @return The artifact source&#39;s type.
     * 
     */
    public Output<Optional<String>> sourceType() {
        return Codegen.optional(this.sourceType);
    }
    /**
     * Indicates if the artifact source is enabled (values: Enabled, Disabled).
     * 
     */
    @Export(name="status", type=String.class, parameters={})
    private Output</* @Nullable */ String> status;

    /**
     * @return Indicates if the artifact source is enabled (values: Enabled, Disabled).
     * 
     */
    public Output<Optional<String>> status() {
        return Codegen.optional(this.status);
    }
    /**
     * The tags of the resource.
     * 
     */
    @Export(name="tags", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return The tags of the resource.
     * 
     */
    public Output<Optional<Map<String,String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * The type of the resource.
     * 
     */
    @Export(name="type", type=String.class, parameters={})
    private Output<String> type;

    /**
     * @return The type of the resource.
     * 
     */
    public Output<String> type() {
        return this.type;
    }
    /**
     * The unique immutable identifier of a resource (Guid).
     * 
     */
    @Export(name="uniqueIdentifier", type=String.class, parameters={})
    private Output<String> uniqueIdentifier;

    /**
     * @return The unique immutable identifier of a resource (Guid).
     * 
     */
    public Output<String> uniqueIdentifier() {
        return this.uniqueIdentifier;
    }
    /**
     * The artifact source&#39;s URI.
     * 
     */
    @Export(name="uri", type=String.class, parameters={})
    private Output</* @Nullable */ String> uri;

    /**
     * @return The artifact source&#39;s URI.
     * 
     */
    public Output<Optional<String>> uri() {
        return Codegen.optional(this.uri);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ArtifactSource(String name) {
        this(name, ArtifactSourceArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ArtifactSource(String name, ArtifactSourceArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ArtifactSource(String name, ArtifactSourceArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:devtestlab:ArtifactSource", name, args == null ? ArtifactSourceArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private ArtifactSource(String name, Output<String> id, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:devtestlab:ArtifactSource", name, null, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .aliases(List.of(
                Output.of(Alias.builder().type("azure-native:devtestlab/v20150521preview:ArtifactSource").build()),
                Output.of(Alias.builder().type("azure-native:devtestlab/v20160515:ArtifactSource").build()),
                Output.of(Alias.builder().type("azure-native:devtestlab/v20180915:ArtifactSource").build())
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ArtifactSource get(String name, Output<String> id, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ArtifactSource(name, id, options);
    }
}
