// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.logic;

import com.pulumi.azurenative.logic.inputs.KeyVaultKeyReferenceArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IntegrationAccountCertificateArgs extends com.pulumi.resources.ResourceArgs {

    public static final IntegrationAccountCertificateArgs Empty = new IntegrationAccountCertificateArgs();

    /**
     * The integration account certificate name.
     * 
     */
    @Import(name="certificateName")
    private @Nullable Output<String> certificateName;

    public Optional<Output<String>> certificateName() {
        return Optional.ofNullable(this.certificateName);
    }

    /**
     * The integration account name.
     * 
     */
    @Import(name="integrationAccountName", required=true)
    private Output<String> integrationAccountName;

    public Output<String> integrationAccountName() {
        return this.integrationAccountName;
    }

    /**
     * The key details in the key vault.
     * 
     */
    @Import(name="key")
    private @Nullable Output<KeyVaultKeyReferenceArgs> key;

    public Optional<Output<KeyVaultKeyReferenceArgs>> key() {
        return Optional.ofNullable(this.key);
    }

    /**
     * The resource location.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The metadata.
     * 
     */
    @Import(name="metadata")
    private @Nullable Output<Object> metadata;

    public Optional<Output<Object>> metadata() {
        return Optional.ofNullable(this.metadata);
    }

    /**
     * The public certificate.
     * 
     */
    @Import(name="publicCertificate")
    private @Nullable Output<String> publicCertificate;

    public Optional<Output<String>> publicCertificate() {
        return Optional.ofNullable(this.publicCertificate);
    }

    /**
     * The resource group name.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The resource tags.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private IntegrationAccountCertificateArgs() {}

    private IntegrationAccountCertificateArgs(IntegrationAccountCertificateArgs $) {
        this.certificateName = $.certificateName;
        this.integrationAccountName = $.integrationAccountName;
        this.key = $.key;
        this.location = $.location;
        this.metadata = $.metadata;
        this.publicCertificate = $.publicCertificate;
        this.resourceGroupName = $.resourceGroupName;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IntegrationAccountCertificateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IntegrationAccountCertificateArgs $;

        public Builder() {
            $ = new IntegrationAccountCertificateArgs();
        }

        public Builder(IntegrationAccountCertificateArgs defaults) {
            $ = new IntegrationAccountCertificateArgs(Objects.requireNonNull(defaults));
        }

        public Builder certificateName(@Nullable Output<String> certificateName) {
            $.certificateName = certificateName;
            return this;
        }

        public Builder certificateName(String certificateName) {
            return certificateName(Output.of(certificateName));
        }

        public Builder integrationAccountName(Output<String> integrationAccountName) {
            $.integrationAccountName = integrationAccountName;
            return this;
        }

        public Builder integrationAccountName(String integrationAccountName) {
            return integrationAccountName(Output.of(integrationAccountName));
        }

        public Builder key(@Nullable Output<KeyVaultKeyReferenceArgs> key) {
            $.key = key;
            return this;
        }

        public Builder key(KeyVaultKeyReferenceArgs key) {
            return key(Output.of(key));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder metadata(@Nullable Output<Object> metadata) {
            $.metadata = metadata;
            return this;
        }

        public Builder metadata(Object metadata) {
            return metadata(Output.of(metadata));
        }

        public Builder publicCertificate(@Nullable Output<String> publicCertificate) {
            $.publicCertificate = publicCertificate;
            return this;
        }

        public Builder publicCertificate(String publicCertificate) {
            return publicCertificate(Output.of(publicCertificate));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public IntegrationAccountCertificateArgs build() {
            $.integrationAccountName = Objects.requireNonNull($.integrationAccountName, "expected parameter 'integrationAccountName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
