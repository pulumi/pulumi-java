// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.sql;

import com.pulumi.azurenative.sql.inputs.JobStepActionArgs;
import com.pulumi.azurenative.sql.inputs.JobStepExecutionOptionsArgs;
import com.pulumi.azurenative.sql.inputs.JobStepOutputArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class JobStepArgs extends com.pulumi.resources.ResourceArgs {

    public static final JobStepArgs Empty = new JobStepArgs();

    /**
     * The action payload of the job step.
     * 
     */
    @Import(name="action", required=true)
    private Output<JobStepActionArgs> action;

    public Output<JobStepActionArgs> action() {
        return this.action;
    }

    /**
     * The resource ID of the job credential that will be used to connect to the targets.
     * 
     */
    @Import(name="credential", required=true)
    private Output<String> credential;

    public Output<String> credential() {
        return this.credential;
    }

    /**
     * Execution options for the job step.
     * 
     */
    @Import(name="executionOptions")
    private @Nullable Output<JobStepExecutionOptionsArgs> executionOptions;

    public Optional<Output<JobStepExecutionOptionsArgs>> executionOptions() {
        return Optional.ofNullable(this.executionOptions);
    }

    /**
     * The name of the job agent.
     * 
     */
    @Import(name="jobAgentName", required=true)
    private Output<String> jobAgentName;

    public Output<String> jobAgentName() {
        return this.jobAgentName;
    }

    /**
     * The name of the job.
     * 
     */
    @Import(name="jobName", required=true)
    private Output<String> jobName;

    public Output<String> jobName() {
        return this.jobName;
    }

    /**
     * Output destination properties of the job step.
     * 
     */
    @Import(name="output")
    private @Nullable Output<JobStepOutputArgs> output;

    public Optional<Output<JobStepOutputArgs>> output() {
        return Optional.ofNullable(this.output);
    }

    /**
     * The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The name of the server.
     * 
     */
    @Import(name="serverName", required=true)
    private Output<String> serverName;

    public Output<String> serverName() {
        return this.serverName;
    }

    /**
     * The job step&#39;s index within the job. If not specified when creating the job step, it will be created as the last step. If not specified when updating the job step, the step id is not modified.
     * 
     */
    @Import(name="stepId")
    private @Nullable Output<Integer> stepId;

    public Optional<Output<Integer>> stepId() {
        return Optional.ofNullable(this.stepId);
    }

    /**
     * The name of the job step.
     * 
     */
    @Import(name="stepName")
    private @Nullable Output<String> stepName;

    public Optional<Output<String>> stepName() {
        return Optional.ofNullable(this.stepName);
    }

    /**
     * The resource ID of the target group that the job step will be executed on.
     * 
     */
    @Import(name="targetGroup", required=true)
    private Output<String> targetGroup;

    public Output<String> targetGroup() {
        return this.targetGroup;
    }

    private JobStepArgs() {}

    private JobStepArgs(JobStepArgs $) {
        this.action = $.action;
        this.credential = $.credential;
        this.executionOptions = $.executionOptions;
        this.jobAgentName = $.jobAgentName;
        this.jobName = $.jobName;
        this.output = $.output;
        this.resourceGroupName = $.resourceGroupName;
        this.serverName = $.serverName;
        this.stepId = $.stepId;
        this.stepName = $.stepName;
        this.targetGroup = $.targetGroup;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(JobStepArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private JobStepArgs $;

        public Builder() {
            $ = new JobStepArgs();
        }

        public Builder(JobStepArgs defaults) {
            $ = new JobStepArgs(Objects.requireNonNull(defaults));
        }

        public Builder action(Output<JobStepActionArgs> action) {
            $.action = action;
            return this;
        }

        public Builder action(JobStepActionArgs action) {
            return action(Output.of(action));
        }

        public Builder credential(Output<String> credential) {
            $.credential = credential;
            return this;
        }

        public Builder credential(String credential) {
            return credential(Output.of(credential));
        }

        public Builder executionOptions(@Nullable Output<JobStepExecutionOptionsArgs> executionOptions) {
            $.executionOptions = executionOptions;
            return this;
        }

        public Builder executionOptions(JobStepExecutionOptionsArgs executionOptions) {
            return executionOptions(Output.of(executionOptions));
        }

        public Builder jobAgentName(Output<String> jobAgentName) {
            $.jobAgentName = jobAgentName;
            return this;
        }

        public Builder jobAgentName(String jobAgentName) {
            return jobAgentName(Output.of(jobAgentName));
        }

        public Builder jobName(Output<String> jobName) {
            $.jobName = jobName;
            return this;
        }

        public Builder jobName(String jobName) {
            return jobName(Output.of(jobName));
        }

        public Builder output(@Nullable Output<JobStepOutputArgs> output) {
            $.output = output;
            return this;
        }

        public Builder output(JobStepOutputArgs output) {
            return output(Output.of(output));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder serverName(Output<String> serverName) {
            $.serverName = serverName;
            return this;
        }

        public Builder serverName(String serverName) {
            return serverName(Output.of(serverName));
        }

        public Builder stepId(@Nullable Output<Integer> stepId) {
            $.stepId = stepId;
            return this;
        }

        public Builder stepId(Integer stepId) {
            return stepId(Output.of(stepId));
        }

        public Builder stepName(@Nullable Output<String> stepName) {
            $.stepName = stepName;
            return this;
        }

        public Builder stepName(String stepName) {
            return stepName(Output.of(stepName));
        }

        public Builder targetGroup(Output<String> targetGroup) {
            $.targetGroup = targetGroup;
            return this;
        }

        public Builder targetGroup(String targetGroup) {
            return targetGroup(Output.of(targetGroup));
        }

        public JobStepArgs build() {
            $.action = Objects.requireNonNull($.action, "expected parameter 'action' to be non-null");
            $.credential = Objects.requireNonNull($.credential, "expected parameter 'credential' to be non-null");
            $.jobAgentName = Objects.requireNonNull($.jobAgentName, "expected parameter 'jobAgentName' to be non-null");
            $.jobName = Objects.requireNonNull($.jobName, "expected parameter 'jobName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.serverName = Objects.requireNonNull($.serverName, "expected parameter 'serverName' to be non-null");
            $.targetGroup = Objects.requireNonNull($.targetGroup, "expected parameter 'targetGroup' to be non-null");
            return $;
        }
    }

}
