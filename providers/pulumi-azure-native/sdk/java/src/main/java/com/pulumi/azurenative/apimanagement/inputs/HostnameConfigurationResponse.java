// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.apimanagement.inputs;

import com.pulumi.azurenative.apimanagement.inputs.CertificateInformationResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Custom hostname configuration.
 * 
 */
public final class HostnameConfigurationResponse extends com.pulumi.resources.InvokeArgs {

    public static final HostnameConfigurationResponse Empty = new HostnameConfigurationResponse();

    /**
     * Certificate information.
     * 
     */
    @Import(name="certificate")
    private @Nullable CertificateInformationResponse certificate;

    /**
     * @return Certificate information.
     * 
     */
    public Optional<CertificateInformationResponse> certificate() {
        return Optional.ofNullable(this.certificate);
    }

    /**
     * Certificate Password.
     * 
     */
    @Import(name="certificatePassword")
    private @Nullable String certificatePassword;

    /**
     * @return Certificate Password.
     * 
     */
    public Optional<String> certificatePassword() {
        return Optional.ofNullable(this.certificatePassword);
    }

    /**
     * Specify true to setup the certificate associated with this Hostname as the Default SSL Certificate. If a client does not send the SNI header, then this will be the certificate that will be challenged. The property is useful if a service has multiple custom hostname enabled and it needs to decide on the default ssl certificate. The setting only applied to Proxy Hostname Type.
     * 
     */
    @Import(name="defaultSslBinding")
    private @Nullable Boolean defaultSslBinding;

    /**
     * @return Specify true to setup the certificate associated with this Hostname as the Default SSL Certificate. If a client does not send the SNI header, then this will be the certificate that will be challenged. The property is useful if a service has multiple custom hostname enabled and it needs to decide on the default ssl certificate. The setting only applied to Proxy Hostname Type.
     * 
     */
    public Optional<Boolean> defaultSslBinding() {
        return Optional.ofNullable(this.defaultSslBinding);
    }

    /**
     * Base64 Encoded certificate.
     * 
     */
    @Import(name="encodedCertificate")
    private @Nullable String encodedCertificate;

    /**
     * @return Base64 Encoded certificate.
     * 
     */
    public Optional<String> encodedCertificate() {
        return Optional.ofNullable(this.encodedCertificate);
    }

    /**
     * Hostname to configure on the Api Management service.
     * 
     */
    @Import(name="hostName", required=true)
    private String hostName;

    /**
     * @return Hostname to configure on the Api Management service.
     * 
     */
    public String hostName() {
        return this.hostName;
    }

    /**
     * System or User Assigned Managed identity clientId as generated by Azure AD, which has GET access to the keyVault containing the SSL certificate.
     * 
     */
    @Import(name="identityClientId")
    private @Nullable String identityClientId;

    /**
     * @return System or User Assigned Managed identity clientId as generated by Azure AD, which has GET access to the keyVault containing the SSL certificate.
     * 
     */
    public Optional<String> identityClientId() {
        return Optional.ofNullable(this.identityClientId);
    }

    /**
     * Url to the KeyVault Secret containing the Ssl Certificate. If absolute Url containing version is provided, auto-update of ssl certificate will not work. This requires Api Management service to be configured with aka.ms/apimmsi. The secret should be of type *application/x-pkcs12*
     * 
     */
    @Import(name="keyVaultId")
    private @Nullable String keyVaultId;

    /**
     * @return Url to the KeyVault Secret containing the Ssl Certificate. If absolute Url containing version is provided, auto-update of ssl certificate will not work. This requires Api Management service to be configured with aka.ms/apimmsi. The secret should be of type *application/x-pkcs12*
     * 
     */
    public Optional<String> keyVaultId() {
        return Optional.ofNullable(this.keyVaultId);
    }

    /**
     * Specify true to always negotiate client certificate on the hostname. Default Value is false.
     * 
     */
    @Import(name="negotiateClientCertificate")
    private @Nullable Boolean negotiateClientCertificate;

    /**
     * @return Specify true to always negotiate client certificate on the hostname. Default Value is false.
     * 
     */
    public Optional<Boolean> negotiateClientCertificate() {
        return Optional.ofNullable(this.negotiateClientCertificate);
    }

    /**
     * Hostname type.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    /**
     * @return Hostname type.
     * 
     */
    public String type() {
        return this.type;
    }

    private HostnameConfigurationResponse() {}

    private HostnameConfigurationResponse(HostnameConfigurationResponse $) {
        this.certificate = $.certificate;
        this.certificatePassword = $.certificatePassword;
        this.defaultSslBinding = $.defaultSslBinding;
        this.encodedCertificate = $.encodedCertificate;
        this.hostName = $.hostName;
        this.identityClientId = $.identityClientId;
        this.keyVaultId = $.keyVaultId;
        this.negotiateClientCertificate = $.negotiateClientCertificate;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HostnameConfigurationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HostnameConfigurationResponse $;

        public Builder() {
            $ = new HostnameConfigurationResponse();
        }

        public Builder(HostnameConfigurationResponse defaults) {
            $ = new HostnameConfigurationResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificate Certificate information.
         * 
         * @return builder
         * 
         */
        public Builder certificate(@Nullable CertificateInformationResponse certificate) {
            $.certificate = certificate;
            return this;
        }

        /**
         * @param certificatePassword Certificate Password.
         * 
         * @return builder
         * 
         */
        public Builder certificatePassword(@Nullable String certificatePassword) {
            $.certificatePassword = certificatePassword;
            return this;
        }

        /**
         * @param defaultSslBinding Specify true to setup the certificate associated with this Hostname as the Default SSL Certificate. If a client does not send the SNI header, then this will be the certificate that will be challenged. The property is useful if a service has multiple custom hostname enabled and it needs to decide on the default ssl certificate. The setting only applied to Proxy Hostname Type.
         * 
         * @return builder
         * 
         */
        public Builder defaultSslBinding(@Nullable Boolean defaultSslBinding) {
            $.defaultSslBinding = defaultSslBinding;
            return this;
        }

        /**
         * @param encodedCertificate Base64 Encoded certificate.
         * 
         * @return builder
         * 
         */
        public Builder encodedCertificate(@Nullable String encodedCertificate) {
            $.encodedCertificate = encodedCertificate;
            return this;
        }

        /**
         * @param hostName Hostname to configure on the Api Management service.
         * 
         * @return builder
         * 
         */
        public Builder hostName(String hostName) {
            $.hostName = hostName;
            return this;
        }

        /**
         * @param identityClientId System or User Assigned Managed identity clientId as generated by Azure AD, which has GET access to the keyVault containing the SSL certificate.
         * 
         * @return builder
         * 
         */
        public Builder identityClientId(@Nullable String identityClientId) {
            $.identityClientId = identityClientId;
            return this;
        }

        /**
         * @param keyVaultId Url to the KeyVault Secret containing the Ssl Certificate. If absolute Url containing version is provided, auto-update of ssl certificate will not work. This requires Api Management service to be configured with aka.ms/apimmsi. The secret should be of type *application/x-pkcs12*
         * 
         * @return builder
         * 
         */
        public Builder keyVaultId(@Nullable String keyVaultId) {
            $.keyVaultId = keyVaultId;
            return this;
        }

        /**
         * @param negotiateClientCertificate Specify true to always negotiate client certificate on the hostname. Default Value is false.
         * 
         * @return builder
         * 
         */
        public Builder negotiateClientCertificate(@Nullable Boolean negotiateClientCertificate) {
            $.negotiateClientCertificate = negotiateClientCertificate;
            return this;
        }

        /**
         * @param type Hostname type.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public HostnameConfigurationResponse build() {
            $.defaultSslBinding = Codegen.booleanProp("defaultSslBinding").arg($.defaultSslBinding).def(false).getNullable();
            $.hostName = Objects.requireNonNull($.hostName, "expected parameter 'hostName' to be non-null");
            $.negotiateClientCertificate = Codegen.booleanProp("negotiateClientCertificate").arg($.negotiateClientCertificate).def(false).getNullable();
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
