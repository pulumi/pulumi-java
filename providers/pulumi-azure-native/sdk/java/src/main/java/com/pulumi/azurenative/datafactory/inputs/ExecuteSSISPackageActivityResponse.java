// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.azurenative.datafactory.inputs.ActivityDependencyResponse;
import com.pulumi.azurenative.datafactory.inputs.ActivityPolicyResponse;
import com.pulumi.azurenative.datafactory.inputs.IntegrationRuntimeReferenceResponse;
import com.pulumi.azurenative.datafactory.inputs.LinkedServiceReferenceResponse;
import com.pulumi.azurenative.datafactory.inputs.SSISExecutionCredentialResponse;
import com.pulumi.azurenative.datafactory.inputs.SSISExecutionParameterResponse;
import com.pulumi.azurenative.datafactory.inputs.SSISLogLocationResponse;
import com.pulumi.azurenative.datafactory.inputs.SSISPackageLocationResponse;
import com.pulumi.azurenative.datafactory.inputs.SSISPropertyOverrideResponse;
import com.pulumi.azurenative.datafactory.inputs.UserPropertyResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Execute SSIS package activity.
 * 
 */
public final class ExecuteSSISPackageActivityResponse extends com.pulumi.resources.InvokeArgs {

    public static final ExecuteSSISPackageActivityResponse Empty = new ExecuteSSISPackageActivityResponse();

    /**
     * The integration runtime reference.
     * 
     */
    @Import(name="connectVia", required=true)
    private IntegrationRuntimeReferenceResponse connectVia;

    public IntegrationRuntimeReferenceResponse connectVia() {
        return this.connectVia;
    }

    /**
     * Activity depends on condition.
     * 
     */
    @Import(name="dependsOn")
    private @Nullable List<ActivityDependencyResponse> dependsOn;

    public Optional<List<ActivityDependencyResponse>> dependsOn() {
        return Optional.ofNullable(this.dependsOn);
    }

    /**
     * Activity description.
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The environment path to execute the SSIS package. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="environmentPath")
    private @Nullable Object environmentPath;

    public Optional<Object> environmentPath() {
        return Optional.ofNullable(this.environmentPath);
    }

    /**
     * The package execution credential.
     * 
     */
    @Import(name="executionCredential")
    private @Nullable SSISExecutionCredentialResponse executionCredential;

    public Optional<SSISExecutionCredentialResponse> executionCredential() {
        return Optional.ofNullable(this.executionCredential);
    }

    /**
     * Linked service reference.
     * 
     */
    @Import(name="linkedServiceName")
    private @Nullable LinkedServiceReferenceResponse linkedServiceName;

    public Optional<LinkedServiceReferenceResponse> linkedServiceName() {
        return Optional.ofNullable(this.linkedServiceName);
    }

    /**
     * SSIS package execution log location.
     * 
     */
    @Import(name="logLocation")
    private @Nullable SSISLogLocationResponse logLocation;

    public Optional<SSISLogLocationResponse> logLocation() {
        return Optional.ofNullable(this.logLocation);
    }

    /**
     * The logging level of SSIS package execution. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="loggingLevel")
    private @Nullable Object loggingLevel;

    public Optional<Object> loggingLevel() {
        return Optional.ofNullable(this.loggingLevel);
    }

    /**
     * Activity name.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    public String name() {
        return this.name;
    }

    /**
     * The package level connection managers to execute the SSIS package.
     * 
     */
    @Import(name="packageConnectionManagers")
    private @Nullable Map<String,Map<String,SSISExecutionParameterResponse>> packageConnectionManagers;

    public Optional<Map<String,Map<String,SSISExecutionParameterResponse>>> packageConnectionManagers() {
        return Optional.ofNullable(this.packageConnectionManagers);
    }

    /**
     * SSIS package location.
     * 
     */
    @Import(name="packageLocation", required=true)
    private SSISPackageLocationResponse packageLocation;

    public SSISPackageLocationResponse packageLocation() {
        return this.packageLocation;
    }

    /**
     * The package level parameters to execute the SSIS package.
     * 
     */
    @Import(name="packageParameters")
    private @Nullable Map<String,SSISExecutionParameterResponse> packageParameters;

    public Optional<Map<String,SSISExecutionParameterResponse>> packageParameters() {
        return Optional.ofNullable(this.packageParameters);
    }

    /**
     * Activity policy.
     * 
     */
    @Import(name="policy")
    private @Nullable ActivityPolicyResponse policy;

    public Optional<ActivityPolicyResponse> policy() {
        return Optional.ofNullable(this.policy);
    }

    /**
     * The project level connection managers to execute the SSIS package.
     * 
     */
    @Import(name="projectConnectionManagers")
    private @Nullable Map<String,Map<String,SSISExecutionParameterResponse>> projectConnectionManagers;

    public Optional<Map<String,Map<String,SSISExecutionParameterResponse>>> projectConnectionManagers() {
        return Optional.ofNullable(this.projectConnectionManagers);
    }

    /**
     * The project level parameters to execute the SSIS package.
     * 
     */
    @Import(name="projectParameters")
    private @Nullable Map<String,SSISExecutionParameterResponse> projectParameters;

    public Optional<Map<String,SSISExecutionParameterResponse>> projectParameters() {
        return Optional.ofNullable(this.projectParameters);
    }

    /**
     * The property overrides to execute the SSIS package.
     * 
     */
    @Import(name="propertyOverrides")
    private @Nullable Map<String,SSISPropertyOverrideResponse> propertyOverrides;

    public Optional<Map<String,SSISPropertyOverrideResponse>> propertyOverrides() {
        return Optional.ofNullable(this.propertyOverrides);
    }

    /**
     * Specifies the runtime to execute SSIS package. The value should be &#34;x86&#34; or &#34;x64&#34;. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="runtime")
    private @Nullable Object runtime;

    public Optional<Object> runtime() {
        return Optional.ofNullable(this.runtime);
    }

    /**
     * Type of activity.
     * Expected value is &#39;ExecuteSSISPackage&#39;.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    public String type() {
        return this.type;
    }

    /**
     * Activity user properties.
     * 
     */
    @Import(name="userProperties")
    private @Nullable List<UserPropertyResponse> userProperties;

    public Optional<List<UserPropertyResponse>> userProperties() {
        return Optional.ofNullable(this.userProperties);
    }

    private ExecuteSSISPackageActivityResponse() {}

    private ExecuteSSISPackageActivityResponse(ExecuteSSISPackageActivityResponse $) {
        this.connectVia = $.connectVia;
        this.dependsOn = $.dependsOn;
        this.description = $.description;
        this.environmentPath = $.environmentPath;
        this.executionCredential = $.executionCredential;
        this.linkedServiceName = $.linkedServiceName;
        this.logLocation = $.logLocation;
        this.loggingLevel = $.loggingLevel;
        this.name = $.name;
        this.packageConnectionManagers = $.packageConnectionManagers;
        this.packageLocation = $.packageLocation;
        this.packageParameters = $.packageParameters;
        this.policy = $.policy;
        this.projectConnectionManagers = $.projectConnectionManagers;
        this.projectParameters = $.projectParameters;
        this.propertyOverrides = $.propertyOverrides;
        this.runtime = $.runtime;
        this.type = $.type;
        this.userProperties = $.userProperties;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExecuteSSISPackageActivityResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExecuteSSISPackageActivityResponse $;

        public Builder() {
            $ = new ExecuteSSISPackageActivityResponse();
        }

        public Builder(ExecuteSSISPackageActivityResponse defaults) {
            $ = new ExecuteSSISPackageActivityResponse(Objects.requireNonNull(defaults));
        }

        public Builder connectVia(IntegrationRuntimeReferenceResponse connectVia) {
            $.connectVia = connectVia;
            return this;
        }

        public Builder dependsOn(@Nullable List<ActivityDependencyResponse> dependsOn) {
            $.dependsOn = dependsOn;
            return this;
        }

        public Builder dependsOn(ActivityDependencyResponse... dependsOn) {
            return dependsOn(List.of(dependsOn));
        }

        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        public Builder environmentPath(@Nullable Object environmentPath) {
            $.environmentPath = environmentPath;
            return this;
        }

        public Builder executionCredential(@Nullable SSISExecutionCredentialResponse executionCredential) {
            $.executionCredential = executionCredential;
            return this;
        }

        public Builder linkedServiceName(@Nullable LinkedServiceReferenceResponse linkedServiceName) {
            $.linkedServiceName = linkedServiceName;
            return this;
        }

        public Builder logLocation(@Nullable SSISLogLocationResponse logLocation) {
            $.logLocation = logLocation;
            return this;
        }

        public Builder loggingLevel(@Nullable Object loggingLevel) {
            $.loggingLevel = loggingLevel;
            return this;
        }

        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public Builder packageConnectionManagers(@Nullable Map<String,Map<String,SSISExecutionParameterResponse>> packageConnectionManagers) {
            $.packageConnectionManagers = packageConnectionManagers;
            return this;
        }

        public Builder packageLocation(SSISPackageLocationResponse packageLocation) {
            $.packageLocation = packageLocation;
            return this;
        }

        public Builder packageParameters(@Nullable Map<String,SSISExecutionParameterResponse> packageParameters) {
            $.packageParameters = packageParameters;
            return this;
        }

        public Builder policy(@Nullable ActivityPolicyResponse policy) {
            $.policy = policy;
            return this;
        }

        public Builder projectConnectionManagers(@Nullable Map<String,Map<String,SSISExecutionParameterResponse>> projectConnectionManagers) {
            $.projectConnectionManagers = projectConnectionManagers;
            return this;
        }

        public Builder projectParameters(@Nullable Map<String,SSISExecutionParameterResponse> projectParameters) {
            $.projectParameters = projectParameters;
            return this;
        }

        public Builder propertyOverrides(@Nullable Map<String,SSISPropertyOverrideResponse> propertyOverrides) {
            $.propertyOverrides = propertyOverrides;
            return this;
        }

        public Builder runtime(@Nullable Object runtime) {
            $.runtime = runtime;
            return this;
        }

        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public Builder userProperties(@Nullable List<UserPropertyResponse> userProperties) {
            $.userProperties = userProperties;
            return this;
        }

        public Builder userProperties(UserPropertyResponse... userProperties) {
            return userProperties(List.of(userProperties));
        }

        public ExecuteSSISPackageActivityResponse build() {
            $.connectVia = Objects.requireNonNull($.connectVia, "expected parameter 'connectVia' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.packageLocation = Objects.requireNonNull($.packageLocation, "expected parameter 'packageLocation' to be non-null");
            $.type = Codegen.stringProp("type").arg($.type).require();
            return $;
        }
    }

}
