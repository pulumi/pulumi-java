// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.azurenative.datafactory.inputs.AzureKeyVaultSecretReferenceArgs;
import com.pulumi.azurenative.datafactory.inputs.IntegrationRuntimeReferenceArgs;
import com.pulumi.azurenative.datafactory.inputs.ParameterSpecificationArgs;
import com.pulumi.azurenative.datafactory.inputs.SecureStringArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * SAP Table Linked Service.
 * 
 */
public final class SapTableLinkedServiceArgs extends com.pulumi.resources.ResourceArgs {

    public static final SapTableLinkedServiceArgs Empty = new SapTableLinkedServiceArgs();

    /**
     * List of tags that can be used for describing the linked service.
     * 
     */
    @Import(name="annotations")
    private @Nullable Output<List<Object>> annotations;

    public Optional<Output<List<Object>>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    /**
     * Client ID of the client on the SAP system where the table is located. (Usually a three-digit decimal number represented as a string) Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="clientId")
    private @Nullable Output<Object> clientId;

    public Optional<Output<Object>> clientId() {
        return Optional.ofNullable(this.clientId);
    }

    /**
     * The integration runtime reference.
     * 
     */
    @Import(name="connectVia")
    private @Nullable Output<IntegrationRuntimeReferenceArgs> connectVia;

    public Optional<Output<IntegrationRuntimeReferenceArgs>> connectVia() {
        return Optional.ofNullable(this.connectVia);
    }

    /**
     * Linked service description.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="encryptedCredential")
    private @Nullable Output<Object> encryptedCredential;

    public Optional<Output<Object>> encryptedCredential() {
        return Optional.ofNullable(this.encryptedCredential);
    }

    /**
     * Language of the SAP system where the table is located. The default value is EN. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="language")
    private @Nullable Output<Object> language;

    public Optional<Output<Object>> language() {
        return Optional.ofNullable(this.language);
    }

    /**
     * The Logon Group for the SAP System. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="logonGroup")
    private @Nullable Output<Object> logonGroup;

    public Optional<Output<Object>> logonGroup() {
        return Optional.ofNullable(this.logonGroup);
    }

    /**
     * The hostname of the SAP Message Server. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="messageServer")
    private @Nullable Output<Object> messageServer;

    public Optional<Output<Object>> messageServer() {
        return Optional.ofNullable(this.messageServer);
    }

    /**
     * The service name or port number of the Message Server. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="messageServerService")
    private @Nullable Output<Object> messageServerService;

    public Optional<Output<Object>> messageServerService() {
        return Optional.ofNullable(this.messageServerService);
    }

    /**
     * Parameters for linked service.
     * 
     */
    @Import(name="parameters")
    private @Nullable Output<Map<String,ParameterSpecificationArgs>> parameters;

    public Optional<Output<Map<String,ParameterSpecificationArgs>>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    /**
     * Password to access the SAP server where the table is located.
     * 
     */
    @Import(name="password")
    private @Nullable Output<Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs>> password;

    public Optional<Output<Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs>>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * Host name of the SAP instance where the table is located. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="server")
    private @Nullable Output<Object> server;

    public Optional<Output<Object>> server() {
        return Optional.ofNullable(this.server);
    }

    /**
     * External security product&#39;s library to access the SAP server where the table is located. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="sncLibraryPath")
    private @Nullable Output<Object> sncLibraryPath;

    public Optional<Output<Object>> sncLibraryPath() {
        return Optional.ofNullable(this.sncLibraryPath);
    }

    /**
     * SNC activation indicator to access the SAP server where the table is located. Must be either 0 (off) or 1 (on). Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="sncMode")
    private @Nullable Output<Object> sncMode;

    public Optional<Output<Object>> sncMode() {
        return Optional.ofNullable(this.sncMode);
    }

    /**
     * Initiator&#39;s SNC name to access the SAP server where the table is located. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="sncMyName")
    private @Nullable Output<Object> sncMyName;

    public Optional<Output<Object>> sncMyName() {
        return Optional.ofNullable(this.sncMyName);
    }

    /**
     * Communication partner&#39;s SNC name to access the SAP server where the table is located. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="sncPartnerName")
    private @Nullable Output<Object> sncPartnerName;

    public Optional<Output<Object>> sncPartnerName() {
        return Optional.ofNullable(this.sncPartnerName);
    }

    /**
     * SNC Quality of Protection. Allowed value include: 1, 2, 3, 8, 9. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="sncQop")
    private @Nullable Output<Object> sncQop;

    public Optional<Output<Object>> sncQop() {
        return Optional.ofNullable(this.sncQop);
    }

    /**
     * SystemID of the SAP system where the table is located. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="systemId")
    private @Nullable Output<Object> systemId;

    public Optional<Output<Object>> systemId() {
        return Optional.ofNullable(this.systemId);
    }

    /**
     * System number of the SAP system where the table is located. (Usually a two-digit decimal number represented as a string.) Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="systemNumber")
    private @Nullable Output<Object> systemNumber;

    public Optional<Output<Object>> systemNumber() {
        return Optional.ofNullable(this.systemNumber);
    }

    /**
     * Type of linked service.
     * Expected value is &#39;SapTable&#39;.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    /**
     * Username to access the SAP server where the table is located. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="userName")
    private @Nullable Output<Object> userName;

    public Optional<Output<Object>> userName() {
        return Optional.ofNullable(this.userName);
    }

    private SapTableLinkedServiceArgs() {}

    private SapTableLinkedServiceArgs(SapTableLinkedServiceArgs $) {
        this.annotations = $.annotations;
        this.clientId = $.clientId;
        this.connectVia = $.connectVia;
        this.description = $.description;
        this.encryptedCredential = $.encryptedCredential;
        this.language = $.language;
        this.logonGroup = $.logonGroup;
        this.messageServer = $.messageServer;
        this.messageServerService = $.messageServerService;
        this.parameters = $.parameters;
        this.password = $.password;
        this.server = $.server;
        this.sncLibraryPath = $.sncLibraryPath;
        this.sncMode = $.sncMode;
        this.sncMyName = $.sncMyName;
        this.sncPartnerName = $.sncPartnerName;
        this.sncQop = $.sncQop;
        this.systemId = $.systemId;
        this.systemNumber = $.systemNumber;
        this.type = $.type;
        this.userName = $.userName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SapTableLinkedServiceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SapTableLinkedServiceArgs $;

        public Builder() {
            $ = new SapTableLinkedServiceArgs();
        }

        public Builder(SapTableLinkedServiceArgs defaults) {
            $ = new SapTableLinkedServiceArgs(Objects.requireNonNull(defaults));
        }

        public Builder annotations(@Nullable Output<List<Object>> annotations) {
            $.annotations = annotations;
            return this;
        }

        public Builder annotations(List<Object> annotations) {
            return annotations(Output.of(annotations));
        }

        public Builder annotations(Object... annotations) {
            return annotations(List.of(annotations));
        }

        public Builder clientId(@Nullable Output<Object> clientId) {
            $.clientId = clientId;
            return this;
        }

        public Builder clientId(Object clientId) {
            return clientId(Output.of(clientId));
        }

        public Builder connectVia(@Nullable Output<IntegrationRuntimeReferenceArgs> connectVia) {
            $.connectVia = connectVia;
            return this;
        }

        public Builder connectVia(IntegrationRuntimeReferenceArgs connectVia) {
            return connectVia(Output.of(connectVia));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder encryptedCredential(@Nullable Output<Object> encryptedCredential) {
            $.encryptedCredential = encryptedCredential;
            return this;
        }

        public Builder encryptedCredential(Object encryptedCredential) {
            return encryptedCredential(Output.of(encryptedCredential));
        }

        public Builder language(@Nullable Output<Object> language) {
            $.language = language;
            return this;
        }

        public Builder language(Object language) {
            return language(Output.of(language));
        }

        public Builder logonGroup(@Nullable Output<Object> logonGroup) {
            $.logonGroup = logonGroup;
            return this;
        }

        public Builder logonGroup(Object logonGroup) {
            return logonGroup(Output.of(logonGroup));
        }

        public Builder messageServer(@Nullable Output<Object> messageServer) {
            $.messageServer = messageServer;
            return this;
        }

        public Builder messageServer(Object messageServer) {
            return messageServer(Output.of(messageServer));
        }

        public Builder messageServerService(@Nullable Output<Object> messageServerService) {
            $.messageServerService = messageServerService;
            return this;
        }

        public Builder messageServerService(Object messageServerService) {
            return messageServerService(Output.of(messageServerService));
        }

        public Builder parameters(@Nullable Output<Map<String,ParameterSpecificationArgs>> parameters) {
            $.parameters = parameters;
            return this;
        }

        public Builder parameters(Map<String,ParameterSpecificationArgs> parameters) {
            return parameters(Output.of(parameters));
        }

        public Builder password(@Nullable Output<Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs>> password) {
            $.password = password;
            return this;
        }

        public Builder password(Either<AzureKeyVaultSecretReferenceArgs,SecureStringArgs> password) {
            return password(Output.of(password));
        }

        public Builder server(@Nullable Output<Object> server) {
            $.server = server;
            return this;
        }

        public Builder server(Object server) {
            return server(Output.of(server));
        }

        public Builder sncLibraryPath(@Nullable Output<Object> sncLibraryPath) {
            $.sncLibraryPath = sncLibraryPath;
            return this;
        }

        public Builder sncLibraryPath(Object sncLibraryPath) {
            return sncLibraryPath(Output.of(sncLibraryPath));
        }

        public Builder sncMode(@Nullable Output<Object> sncMode) {
            $.sncMode = sncMode;
            return this;
        }

        public Builder sncMode(Object sncMode) {
            return sncMode(Output.of(sncMode));
        }

        public Builder sncMyName(@Nullable Output<Object> sncMyName) {
            $.sncMyName = sncMyName;
            return this;
        }

        public Builder sncMyName(Object sncMyName) {
            return sncMyName(Output.of(sncMyName));
        }

        public Builder sncPartnerName(@Nullable Output<Object> sncPartnerName) {
            $.sncPartnerName = sncPartnerName;
            return this;
        }

        public Builder sncPartnerName(Object sncPartnerName) {
            return sncPartnerName(Output.of(sncPartnerName));
        }

        public Builder sncQop(@Nullable Output<Object> sncQop) {
            $.sncQop = sncQop;
            return this;
        }

        public Builder sncQop(Object sncQop) {
            return sncQop(Output.of(sncQop));
        }

        public Builder systemId(@Nullable Output<Object> systemId) {
            $.systemId = systemId;
            return this;
        }

        public Builder systemId(Object systemId) {
            return systemId(Output.of(systemId));
        }

        public Builder systemNumber(@Nullable Output<Object> systemNumber) {
            $.systemNumber = systemNumber;
            return this;
        }

        public Builder systemNumber(Object systemNumber) {
            return systemNumber(Output.of(systemNumber));
        }

        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public Builder userName(@Nullable Output<Object> userName) {
            $.userName = userName;
            return this;
        }

        public Builder userName(Object userName) {
            return userName(Output.of(userName));
        }

        public SapTableLinkedServiceArgs build() {
            $.type = Codegen.stringProp("type").output().arg($.type).require();
            return $;
        }
    }

}
