// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Describes the connection monitor test group.
 * 
 */
public final class ConnectionMonitorTestGroupArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectionMonitorTestGroupArgs Empty = new ConnectionMonitorTestGroupArgs();

    /**
     * List of destination endpoint names.
     * 
     */
    @Import(name="destinations", required=true)
    private Output<List<String>> destinations;

    public Output<List<String>> destinations() {
        return this.destinations;
    }

    /**
     * Value indicating whether test group is disabled.
     * 
     */
    @Import(name="disable")
    private @Nullable Output<Boolean> disable;

    public Optional<Output<Boolean>> disable() {
        return Optional.ofNullable(this.disable);
    }

    /**
     * The name of the connection monitor test group.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    public Output<String> name() {
        return this.name;
    }

    /**
     * List of source endpoint names.
     * 
     */
    @Import(name="sources", required=true)
    private Output<List<String>> sources;

    public Output<List<String>> sources() {
        return this.sources;
    }

    /**
     * List of test configuration names.
     * 
     */
    @Import(name="testConfigurations", required=true)
    private Output<List<String>> testConfigurations;

    public Output<List<String>> testConfigurations() {
        return this.testConfigurations;
    }

    private ConnectionMonitorTestGroupArgs() {}

    private ConnectionMonitorTestGroupArgs(ConnectionMonitorTestGroupArgs $) {
        this.destinations = $.destinations;
        this.disable = $.disable;
        this.name = $.name;
        this.sources = $.sources;
        this.testConfigurations = $.testConfigurations;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectionMonitorTestGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectionMonitorTestGroupArgs $;

        public Builder() {
            $ = new ConnectionMonitorTestGroupArgs();
        }

        public Builder(ConnectionMonitorTestGroupArgs defaults) {
            $ = new ConnectionMonitorTestGroupArgs(Objects.requireNonNull(defaults));
        }

        public Builder destinations(Output<List<String>> destinations) {
            $.destinations = destinations;
            return this;
        }

        public Builder destinations(List<String> destinations) {
            return destinations(Output.of(destinations));
        }

        public Builder destinations(String... destinations) {
            return destinations(List.of(destinations));
        }

        public Builder disable(@Nullable Output<Boolean> disable) {
            $.disable = disable;
            return this;
        }

        public Builder disable(Boolean disable) {
            return disable(Output.of(disable));
        }

        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder sources(Output<List<String>> sources) {
            $.sources = sources;
            return this;
        }

        public Builder sources(List<String> sources) {
            return sources(Output.of(sources));
        }

        public Builder sources(String... sources) {
            return sources(List.of(sources));
        }

        public Builder testConfigurations(Output<List<String>> testConfigurations) {
            $.testConfigurations = testConfigurations;
            return this;
        }

        public Builder testConfigurations(List<String> testConfigurations) {
            return testConfigurations(Output.of(testConfigurations));
        }

        public Builder testConfigurations(String... testConfigurations) {
            return testConfigurations(List.of(testConfigurations));
        }

        public ConnectionMonitorTestGroupArgs build() {
            $.destinations = Objects.requireNonNull($.destinations, "expected parameter 'destinations' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.sources = Objects.requireNonNull($.sources, "expected parameter 'sources' to be non-null");
            $.testConfigurations = Objects.requireNonNull($.testConfigurations, "expected parameter 'testConfigurations' to be non-null");
            return $;
        }
    }

}
