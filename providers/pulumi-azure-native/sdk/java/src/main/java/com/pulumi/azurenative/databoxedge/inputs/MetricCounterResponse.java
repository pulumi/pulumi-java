// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.databoxedge.inputs;

import com.pulumi.azurenative.databoxedge.inputs.MetricDimensionResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The metric counter
 * 
 */
public final class MetricCounterResponse extends com.pulumi.resources.InvokeArgs {

    public static final MetricCounterResponse Empty = new MetricCounterResponse();

    /**
     * The additional dimensions to be added to metric.
     * 
     */
    @Import(name="additionalDimensions")
    private @Nullable List<MetricDimensionResponse> additionalDimensions;

    /**
     * @return The additional dimensions to be added to metric.
     * 
     */
    public Optional<List<MetricDimensionResponse>> additionalDimensions() {
        return Optional.ofNullable(this.additionalDimensions);
    }

    /**
     * The dimension filter.
     * 
     */
    @Import(name="dimensionFilter")
    private @Nullable List<MetricDimensionResponse> dimensionFilter;

    /**
     * @return The dimension filter.
     * 
     */
    public Optional<List<MetricDimensionResponse>> dimensionFilter() {
        return Optional.ofNullable(this.dimensionFilter);
    }

    /**
     * The instance from which counter should be collected.
     * 
     */
    @Import(name="instance")
    private @Nullable String instance;

    /**
     * @return The instance from which counter should be collected.
     * 
     */
    public Optional<String> instance() {
        return Optional.ofNullable(this.instance);
    }

    /**
     * The counter name.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return The counter name.
     * 
     */
    public String name() {
        return this.name;
    }

    private MetricCounterResponse() {}

    private MetricCounterResponse(MetricCounterResponse $) {
        this.additionalDimensions = $.additionalDimensions;
        this.dimensionFilter = $.dimensionFilter;
        this.instance = $.instance;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MetricCounterResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MetricCounterResponse $;

        public Builder() {
            $ = new MetricCounterResponse();
        }

        public Builder(MetricCounterResponse defaults) {
            $ = new MetricCounterResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param additionalDimensions The additional dimensions to be added to metric.
         * 
         * @return builder
         * 
         */
        public Builder additionalDimensions(@Nullable List<MetricDimensionResponse> additionalDimensions) {
            $.additionalDimensions = additionalDimensions;
            return this;
        }

        /**
         * @param additionalDimensions The additional dimensions to be added to metric.
         * 
         * @return builder
         * 
         */
        public Builder additionalDimensions(MetricDimensionResponse... additionalDimensions) {
            return additionalDimensions(List.of(additionalDimensions));
        }

        /**
         * @param dimensionFilter The dimension filter.
         * 
         * @return builder
         * 
         */
        public Builder dimensionFilter(@Nullable List<MetricDimensionResponse> dimensionFilter) {
            $.dimensionFilter = dimensionFilter;
            return this;
        }

        /**
         * @param dimensionFilter The dimension filter.
         * 
         * @return builder
         * 
         */
        public Builder dimensionFilter(MetricDimensionResponse... dimensionFilter) {
            return dimensionFilter(List.of(dimensionFilter));
        }

        /**
         * @param instance The instance from which counter should be collected.
         * 
         * @return builder
         * 
         */
        public Builder instance(@Nullable String instance) {
            $.instance = instance;
            return this;
        }

        /**
         * @param name The counter name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public MetricCounterResponse build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            return $;
        }
    }

}
