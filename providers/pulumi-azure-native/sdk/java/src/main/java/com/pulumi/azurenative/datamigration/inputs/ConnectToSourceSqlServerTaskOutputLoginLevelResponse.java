// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datamigration.inputs;

import com.pulumi.azurenative.datamigration.inputs.MigrationEligibilityInfoResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


/**
 * Login level output for the task that validates connection to SQL Server and also validates source server requirements
 * 
 */
public final class ConnectToSourceSqlServerTaskOutputLoginLevelResponse extends com.pulumi.resources.InvokeArgs {

    public static final ConnectToSourceSqlServerTaskOutputLoginLevelResponse Empty = new ConnectToSourceSqlServerTaskOutputLoginLevelResponse();

    /**
     * The default database for the login.
     * 
     */
    @Import(name="defaultDatabase", required=true)
    private String defaultDatabase;

    /**
     * @return The default database for the login.
     * 
     */
    public String defaultDatabase() {
        return this.defaultDatabase;
    }

    /**
     * Result identifier
     * 
     */
    @Import(name="id", required=true)
    private String id;

    /**
     * @return Result identifier
     * 
     */
    public String id() {
        return this.id;
    }

    /**
     * The state of the login.
     * 
     */
    @Import(name="isEnabled", required=true)
    private Boolean isEnabled;

    /**
     * @return The state of the login.
     * 
     */
    public Boolean isEnabled() {
        return this.isEnabled;
    }

    /**
     * The type of login.
     * 
     */
    @Import(name="loginType", required=true)
    private String loginType;

    /**
     * @return The type of login.
     * 
     */
    public String loginType() {
        return this.loginType;
    }

    /**
     * Information about eligibility of login for migration.
     * 
     */
    @Import(name="migrationEligibility", required=true)
    private MigrationEligibilityInfoResponse migrationEligibility;

    /**
     * @return Information about eligibility of login for migration.
     * 
     */
    public MigrationEligibilityInfoResponse migrationEligibility() {
        return this.migrationEligibility;
    }

    /**
     * Login name.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return Login name.
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * Type of result - database level or task level
     * Expected value is &#39;LoginLevelOutput&#39;.
     * 
     */
    @Import(name="resultType", required=true)
    private String resultType;

    /**
     * @return Type of result - database level or task level
     * Expected value is &#39;LoginLevelOutput&#39;.
     * 
     */
    public String resultType() {
        return this.resultType;
    }

    private ConnectToSourceSqlServerTaskOutputLoginLevelResponse() {}

    private ConnectToSourceSqlServerTaskOutputLoginLevelResponse(ConnectToSourceSqlServerTaskOutputLoginLevelResponse $) {
        this.defaultDatabase = $.defaultDatabase;
        this.id = $.id;
        this.isEnabled = $.isEnabled;
        this.loginType = $.loginType;
        this.migrationEligibility = $.migrationEligibility;
        this.name = $.name;
        this.resultType = $.resultType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectToSourceSqlServerTaskOutputLoginLevelResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectToSourceSqlServerTaskOutputLoginLevelResponse $;

        public Builder() {
            $ = new ConnectToSourceSqlServerTaskOutputLoginLevelResponse();
        }

        public Builder(ConnectToSourceSqlServerTaskOutputLoginLevelResponse defaults) {
            $ = new ConnectToSourceSqlServerTaskOutputLoginLevelResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param defaultDatabase The default database for the login.
         * 
         * @return builder
         * 
         */
        public Builder defaultDatabase(String defaultDatabase) {
            $.defaultDatabase = defaultDatabase;
            return this;
        }

        /**
         * @param id Result identifier
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            $.id = id;
            return this;
        }

        /**
         * @param isEnabled The state of the login.
         * 
         * @return builder
         * 
         */
        public Builder isEnabled(Boolean isEnabled) {
            $.isEnabled = isEnabled;
            return this;
        }

        /**
         * @param loginType The type of login.
         * 
         * @return builder
         * 
         */
        public Builder loginType(String loginType) {
            $.loginType = loginType;
            return this;
        }

        /**
         * @param migrationEligibility Information about eligibility of login for migration.
         * 
         * @return builder
         * 
         */
        public Builder migrationEligibility(MigrationEligibilityInfoResponse migrationEligibility) {
            $.migrationEligibility = migrationEligibility;
            return this;
        }

        /**
         * @param name Login name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param resultType Type of result - database level or task level
         * Expected value is &#39;LoginLevelOutput&#39;.
         * 
         * @return builder
         * 
         */
        public Builder resultType(String resultType) {
            $.resultType = resultType;
            return this;
        }

        public ConnectToSourceSqlServerTaskOutputLoginLevelResponse build() {
            $.defaultDatabase = Objects.requireNonNull($.defaultDatabase, "expected parameter 'defaultDatabase' to be non-null");
            $.id = Objects.requireNonNull($.id, "expected parameter 'id' to be non-null");
            $.isEnabled = Objects.requireNonNull($.isEnabled, "expected parameter 'isEnabled' to be non-null");
            $.loginType = Objects.requireNonNull($.loginType, "expected parameter 'loginType' to be non-null");
            $.migrationEligibility = Objects.requireNonNull($.migrationEligibility, "expected parameter 'migrationEligibility' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.resultType = Codegen.stringProp("resultType").arg($.resultType).require();
            return $;
        }
    }

}
