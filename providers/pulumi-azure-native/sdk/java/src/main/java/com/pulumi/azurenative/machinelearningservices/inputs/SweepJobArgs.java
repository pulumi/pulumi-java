// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.machinelearningservices.inputs;

import com.pulumi.azurenative.machinelearningservices.enums.SamplingAlgorithm;
import com.pulumi.azurenative.machinelearningservices.inputs.AmlTokenArgs;
import com.pulumi.azurenative.machinelearningservices.inputs.BanditPolicyArgs;
import com.pulumi.azurenative.machinelearningservices.inputs.ComputeConfigurationArgs;
import com.pulumi.azurenative.machinelearningservices.inputs.ManagedIdentityArgs;
import com.pulumi.azurenative.machinelearningservices.inputs.MedianStoppingPolicyArgs;
import com.pulumi.azurenative.machinelearningservices.inputs.ObjectiveArgs;
import com.pulumi.azurenative.machinelearningservices.inputs.TrialComponentArgs;
import com.pulumi.azurenative.machinelearningservices.inputs.TruncationSelectionPolicyArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Sweep job definition.
 * 
 */
public final class SweepJobArgs extends com.pulumi.resources.ResourceArgs {

    public static final SweepJobArgs Empty = new SweepJobArgs();

    /**
     * Type of the hyperparameter sampling algorithms
     * 
     */
    @Import(name="algorithm", required=true)
    private Output<Either<String,SamplingAlgorithm>> algorithm;

    public Output<Either<String,SamplingAlgorithm>> algorithm() {
        return this.algorithm;
    }

    /**
     * Compute binding for the job.
     * 
     */
    @Import(name="compute", required=true)
    private Output<ComputeConfigurationArgs> compute;

    public Output<ComputeConfigurationArgs> compute() {
        return this.compute;
    }

    /**
     * The asset description text.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Early termination policies enable canceling poor-performing runs before they complete.
     * 
     */
    @Import(name="earlyTermination")
    private @Nullable Output<Object> earlyTermination;

    public Optional<Output<Object>> earlyTermination() {
        return Optional.ofNullable(this.earlyTermination);
    }

    /**
     * The name of the experiment the job belongs to. If not set, the job is placed in the &#34;Default&#34; experiment.
     * 
     */
    @Import(name="experimentName")
    private @Nullable Output<String> experimentName;

    public Optional<Output<String>> experimentName() {
        return Optional.ofNullable(this.experimentName);
    }

    /**
     * Identity configuration. If set, this should be one of AmlToken, ManagedIdentity or null.
     * Defaults to AmlToken if null.
     * 
     */
    @Import(name="identity")
    private @Nullable Output<Either<AmlTokenArgs,ManagedIdentityArgs>> identity;

    public Optional<Output<Either<AmlTokenArgs,ManagedIdentityArgs>>> identity() {
        return Optional.ofNullable(this.identity);
    }

    /**
     * Enum to determine the type of job.
     * Expected value is &#39;Sweep&#39;.
     * 
     */
    @Import(name="jobType", required=true)
    private Output<String> jobType;

    public Output<String> jobType() {
        return this.jobType;
    }

    /**
     * An upper bound on the number of trials performed in parallel.
     * 
     */
    @Import(name="maxConcurrentTrials")
    private @Nullable Output<Integer> maxConcurrentTrials;

    public Optional<Output<Integer>> maxConcurrentTrials() {
        return Optional.ofNullable(this.maxConcurrentTrials);
    }

    /**
     * An upper bound on the number of trials to perform.
     * 
     */
    @Import(name="maxTotalTrials")
    private @Nullable Output<Integer> maxTotalTrials;

    public Optional<Output<Integer>> maxTotalTrials() {
        return Optional.ofNullable(this.maxTotalTrials);
    }

    /**
     * Optimization objective.
     * 
     */
    @Import(name="objective", required=true)
    private Output<ObjectiveArgs> objective;

    public Output<ObjectiveArgs> objective() {
        return this.objective;
    }

    /**
     * Job priority for scheduling policy. Only applies to AMLCompute.
     * Private preview feature and only available to users on the allow list.
     * 
     */
    @Import(name="priority")
    private @Nullable Output<Integer> priority;

    public Optional<Output<Integer>> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * The asset property dictionary.
     * 
     */
    @Import(name="properties")
    private @Nullable Output<Map<String,String>> properties;

    public Optional<Output<Map<String,String>>> properties() {
        return Optional.ofNullable(this.properties);
    }

    /**
     * A dictionary containing each parameter and its distribution. The dictionary key is the name of the parameter
     * 
     */
    @Import(name="searchSpace", required=true)
    private Output<Map<String,Object>> searchSpace;

    public Output<Map<String,Object>> searchSpace() {
        return this.searchSpace;
    }

    /**
     * Tag dictionary. Tags can be added, removed, and updated.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The total timeout in ISO 8601 format. Only supports duration with precision as low as Minutes.
     * 
     */
    @Import(name="timeout")
    private @Nullable Output<String> timeout;

    public Optional<Output<String>> timeout() {
        return Optional.ofNullable(this.timeout);
    }

    /**
     * Trial component definition.
     * 
     */
    @Import(name="trial")
    private @Nullable Output<TrialComponentArgs> trial;

    public Optional<Output<TrialComponentArgs>> trial() {
        return Optional.ofNullable(this.trial);
    }

    private SweepJobArgs() {}

    private SweepJobArgs(SweepJobArgs $) {
        this.algorithm = $.algorithm;
        this.compute = $.compute;
        this.description = $.description;
        this.earlyTermination = $.earlyTermination;
        this.experimentName = $.experimentName;
        this.identity = $.identity;
        this.jobType = $.jobType;
        this.maxConcurrentTrials = $.maxConcurrentTrials;
        this.maxTotalTrials = $.maxTotalTrials;
        this.objective = $.objective;
        this.priority = $.priority;
        this.properties = $.properties;
        this.searchSpace = $.searchSpace;
        this.tags = $.tags;
        this.timeout = $.timeout;
        this.trial = $.trial;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SweepJobArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SweepJobArgs $;

        public Builder() {
            $ = new SweepJobArgs();
        }

        public Builder(SweepJobArgs defaults) {
            $ = new SweepJobArgs(Objects.requireNonNull(defaults));
        }

        public Builder algorithm(Output<Either<String,SamplingAlgorithm>> algorithm) {
            $.algorithm = algorithm;
            return this;
        }

        public Builder algorithm(Either<String,SamplingAlgorithm> algorithm) {
            return algorithm(Output.of(algorithm));
        }

        public Builder algorithm(String algorithm) {
            return algorithm(Either.ofLeft(algorithm));
        }

        public Builder algorithm(SamplingAlgorithm algorithm) {
            return algorithm(Either.ofRight(algorithm));
        }

        public Builder compute(Output<ComputeConfigurationArgs> compute) {
            $.compute = compute;
            return this;
        }

        public Builder compute(ComputeConfigurationArgs compute) {
            return compute(Output.of(compute));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder earlyTermination(@Nullable Output<Object> earlyTermination) {
            $.earlyTermination = earlyTermination;
            return this;
        }

        public Builder earlyTermination(Object earlyTermination) {
            return earlyTermination(Output.of(earlyTermination));
        }

        public Builder experimentName(@Nullable Output<String> experimentName) {
            $.experimentName = experimentName;
            return this;
        }

        public Builder experimentName(String experimentName) {
            return experimentName(Output.of(experimentName));
        }

        public Builder identity(@Nullable Output<Either<AmlTokenArgs,ManagedIdentityArgs>> identity) {
            $.identity = identity;
            return this;
        }

        public Builder identity(Either<AmlTokenArgs,ManagedIdentityArgs> identity) {
            return identity(Output.of(identity));
        }

        public Builder identity(AmlTokenArgs identity) {
            return identity(Either.ofLeft(identity));
        }

        public Builder identity(ManagedIdentityArgs identity) {
            return identity(Either.ofRight(identity));
        }

        public Builder jobType(Output<String> jobType) {
            $.jobType = jobType;
            return this;
        }

        public Builder jobType(String jobType) {
            return jobType(Output.of(jobType));
        }

        public Builder maxConcurrentTrials(@Nullable Output<Integer> maxConcurrentTrials) {
            $.maxConcurrentTrials = maxConcurrentTrials;
            return this;
        }

        public Builder maxConcurrentTrials(Integer maxConcurrentTrials) {
            return maxConcurrentTrials(Output.of(maxConcurrentTrials));
        }

        public Builder maxTotalTrials(@Nullable Output<Integer> maxTotalTrials) {
            $.maxTotalTrials = maxTotalTrials;
            return this;
        }

        public Builder maxTotalTrials(Integer maxTotalTrials) {
            return maxTotalTrials(Output.of(maxTotalTrials));
        }

        public Builder objective(Output<ObjectiveArgs> objective) {
            $.objective = objective;
            return this;
        }

        public Builder objective(ObjectiveArgs objective) {
            return objective(Output.of(objective));
        }

        public Builder priority(@Nullable Output<Integer> priority) {
            $.priority = priority;
            return this;
        }

        public Builder priority(Integer priority) {
            return priority(Output.of(priority));
        }

        public Builder properties(@Nullable Output<Map<String,String>> properties) {
            $.properties = properties;
            return this;
        }

        public Builder properties(Map<String,String> properties) {
            return properties(Output.of(properties));
        }

        public Builder searchSpace(Output<Map<String,Object>> searchSpace) {
            $.searchSpace = searchSpace;
            return this;
        }

        public Builder searchSpace(Map<String,Object> searchSpace) {
            return searchSpace(Output.of(searchSpace));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder timeout(@Nullable Output<String> timeout) {
            $.timeout = timeout;
            return this;
        }

        public Builder timeout(String timeout) {
            return timeout(Output.of(timeout));
        }

        public Builder trial(@Nullable Output<TrialComponentArgs> trial) {
            $.trial = trial;
            return this;
        }

        public Builder trial(TrialComponentArgs trial) {
            return trial(Output.of(trial));
        }

        public SweepJobArgs build() {
            $.algorithm = Objects.requireNonNull($.algorithm, "expected parameter 'algorithm' to be non-null");
            $.compute = Objects.requireNonNull($.compute, "expected parameter 'compute' to be non-null");
            $.jobType = Codegen.stringProp("jobType").output().arg($.jobType).require();
            $.objective = Objects.requireNonNull($.objective, "expected parameter 'objective' to be non-null");
            $.searchSpace = Objects.requireNonNull($.searchSpace, "expected parameter 'searchSpace' to be non-null");
            return $;
        }
    }

}
