// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.machinelearningservices.inputs;

import com.pulumi.azurenative.machinelearningservices.enums.SamplingAlgorithm;
import com.pulumi.azurenative.machinelearningservices.inputs.AmlTokenArgs;
import com.pulumi.azurenative.machinelearningservices.inputs.BanditPolicyArgs;
import com.pulumi.azurenative.machinelearningservices.inputs.ComputeConfigurationArgs;
import com.pulumi.azurenative.machinelearningservices.inputs.ManagedIdentityArgs;
import com.pulumi.azurenative.machinelearningservices.inputs.MedianStoppingPolicyArgs;
import com.pulumi.azurenative.machinelearningservices.inputs.ObjectiveArgs;
import com.pulumi.azurenative.machinelearningservices.inputs.TrialComponentArgs;
import com.pulumi.azurenative.machinelearningservices.inputs.TruncationSelectionPolicyArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Sweep job definition.
 * 
 */
public final class SweepJobArgs extends com.pulumi.resources.ResourceArgs {

    public static final SweepJobArgs Empty = new SweepJobArgs();

    /**
     * Type of the hyperparameter sampling algorithms
     * 
     */
    @Import(name="algorithm", required=true)
      private final Output<Either<String,SamplingAlgorithm>> algorithm;

    public Output<Either<String,SamplingAlgorithm>> algorithm() {
        return this.algorithm;
    }

    /**
     * Compute binding for the job.
     * 
     */
    @Import(name="compute", required=true)
      private final Output<ComputeConfigurationArgs> compute;

    public Output<ComputeConfigurationArgs> compute() {
        return this.compute;
    }

    /**
     * The asset description text.
     * 
     */
    @Import(name="description")
      private final @Nullable Output<String> description;

    public Output<String> description() {
        return this.description == null ? Codegen.empty() : this.description;
    }

    /**
     * Early termination policies enable canceling poor-performing runs before they complete.
     * 
     */
    @Import(name="earlyTermination")
      private final @Nullable Output<Object> earlyTermination;

    public Output<Object> earlyTermination() {
        return this.earlyTermination == null ? Codegen.empty() : this.earlyTermination;
    }

    /**
     * The name of the experiment the job belongs to. If not set, the job is placed in the "Default" experiment.
     * 
     */
    @Import(name="experimentName")
      private final @Nullable Output<String> experimentName;

    public Output<String> experimentName() {
        return this.experimentName == null ? Codegen.empty() : this.experimentName;
    }

    /**
     * Identity configuration. If set, this should be one of AmlToken, ManagedIdentity or null.
     * Defaults to AmlToken if null.
     * 
     */
    @Import(name="identity")
      private final @Nullable Output<Either<AmlTokenArgs,ManagedIdentityArgs>> identity;

    public Output<Either<AmlTokenArgs,ManagedIdentityArgs>> identity() {
        return this.identity == null ? Codegen.empty() : this.identity;
    }

    /**
     * Enum to determine the type of job.
     * Expected value is 'Sweep'.
     * 
     */
    @Import(name="jobType", required=true)
      private final Output<String> jobType;

    public Output<String> jobType() {
        return this.jobType;
    }

    /**
     * An upper bound on the number of trials performed in parallel.
     * 
     */
    @Import(name="maxConcurrentTrials")
      private final @Nullable Output<Integer> maxConcurrentTrials;

    public Output<Integer> maxConcurrentTrials() {
        return this.maxConcurrentTrials == null ? Codegen.empty() : this.maxConcurrentTrials;
    }

    /**
     * An upper bound on the number of trials to perform.
     * 
     */
    @Import(name="maxTotalTrials")
      private final @Nullable Output<Integer> maxTotalTrials;

    public Output<Integer> maxTotalTrials() {
        return this.maxTotalTrials == null ? Codegen.empty() : this.maxTotalTrials;
    }

    /**
     * Optimization objective.
     * 
     */
    @Import(name="objective", required=true)
      private final Output<ObjectiveArgs> objective;

    public Output<ObjectiveArgs> objective() {
        return this.objective;
    }

    /**
     * Job priority for scheduling policy. Only applies to AMLCompute.
     * Private preview feature and only available to users on the allow list.
     * 
     */
    @Import(name="priority")
      private final @Nullable Output<Integer> priority;

    public Output<Integer> priority() {
        return this.priority == null ? Codegen.empty() : this.priority;
    }

    /**
     * The asset property dictionary.
     * 
     */
    @Import(name="properties")
      private final @Nullable Output<Map<String,String>> properties;

    public Output<Map<String,String>> properties() {
        return this.properties == null ? Codegen.empty() : this.properties;
    }

    /**
     * A dictionary containing each parameter and its distribution. The dictionary key is the name of the parameter
     * 
     */
    @Import(name="searchSpace", required=true)
      private final Output<Map<String,Object>> searchSpace;

    public Output<Map<String,Object>> searchSpace() {
        return this.searchSpace;
    }

    /**
     * Tag dictionary. Tags can be added, removed, and updated.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    /**
     * The total timeout in ISO 8601 format. Only supports duration with precision as low as Minutes.
     * 
     */
    @Import(name="timeout")
      private final @Nullable Output<String> timeout;

    public Output<String> timeout() {
        return this.timeout == null ? Codegen.empty() : this.timeout;
    }

    /**
     * Trial component definition.
     * 
     */
    @Import(name="trial")
      private final @Nullable Output<TrialComponentArgs> trial;

    public Output<TrialComponentArgs> trial() {
        return this.trial == null ? Codegen.empty() : this.trial;
    }

    public SweepJobArgs(
        Output<Either<String,SamplingAlgorithm>> algorithm,
        Output<ComputeConfigurationArgs> compute,
        @Nullable Output<String> description,
        @Nullable Output<Object> earlyTermination,
        @Nullable Output<String> experimentName,
        @Nullable Output<Either<AmlTokenArgs,ManagedIdentityArgs>> identity,
        Output<String> jobType,
        @Nullable Output<Integer> maxConcurrentTrials,
        @Nullable Output<Integer> maxTotalTrials,
        Output<ObjectiveArgs> objective,
        @Nullable Output<Integer> priority,
        @Nullable Output<Map<String,String>> properties,
        Output<Map<String,Object>> searchSpace,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<String> timeout,
        @Nullable Output<TrialComponentArgs> trial) {
        this.algorithm = Objects.requireNonNull(algorithm, "expected parameter 'algorithm' to be non-null");
        this.compute = Objects.requireNonNull(compute, "expected parameter 'compute' to be non-null");
        this.description = description;
        this.earlyTermination = earlyTermination;
        this.experimentName = experimentName;
        this.identity = identity;
        this.jobType = Objects.requireNonNull(jobType, "expected parameter 'jobType' to be non-null");
        this.maxConcurrentTrials = maxConcurrentTrials;
        this.maxTotalTrials = maxTotalTrials;
        this.objective = Objects.requireNonNull(objective, "expected parameter 'objective' to be non-null");
        this.priority = priority;
        this.properties = properties;
        this.searchSpace = Objects.requireNonNull(searchSpace, "expected parameter 'searchSpace' to be non-null");
        this.tags = tags;
        this.timeout = timeout;
        this.trial = trial;
    }

    private SweepJobArgs() {
        this.algorithm = Codegen.empty();
        this.compute = Codegen.empty();
        this.description = Codegen.empty();
        this.earlyTermination = Codegen.empty();
        this.experimentName = Codegen.empty();
        this.identity = Codegen.empty();
        this.jobType = Codegen.empty();
        this.maxConcurrentTrials = Codegen.empty();
        this.maxTotalTrials = Codegen.empty();
        this.objective = Codegen.empty();
        this.priority = Codegen.empty();
        this.properties = Codegen.empty();
        this.searchSpace = Codegen.empty();
        this.tags = Codegen.empty();
        this.timeout = Codegen.empty();
        this.trial = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SweepJobArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<Either<String,SamplingAlgorithm>> algorithm;
        private Output<ComputeConfigurationArgs> compute;
        private @Nullable Output<String> description;
        private @Nullable Output<Object> earlyTermination;
        private @Nullable Output<String> experimentName;
        private @Nullable Output<Either<AmlTokenArgs,ManagedIdentityArgs>> identity;
        private Output<String> jobType;
        private @Nullable Output<Integer> maxConcurrentTrials;
        private @Nullable Output<Integer> maxTotalTrials;
        private Output<ObjectiveArgs> objective;
        private @Nullable Output<Integer> priority;
        private @Nullable Output<Map<String,String>> properties;
        private Output<Map<String,Object>> searchSpace;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<String> timeout;
        private @Nullable Output<TrialComponentArgs> trial;

        public Builder() {
    	      // Empty
        }

        public Builder(SweepJobArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.algorithm = defaults.algorithm;
    	      this.compute = defaults.compute;
    	      this.description = defaults.description;
    	      this.earlyTermination = defaults.earlyTermination;
    	      this.experimentName = defaults.experimentName;
    	      this.identity = defaults.identity;
    	      this.jobType = defaults.jobType;
    	      this.maxConcurrentTrials = defaults.maxConcurrentTrials;
    	      this.maxTotalTrials = defaults.maxTotalTrials;
    	      this.objective = defaults.objective;
    	      this.priority = defaults.priority;
    	      this.properties = defaults.properties;
    	      this.searchSpace = defaults.searchSpace;
    	      this.tags = defaults.tags;
    	      this.timeout = defaults.timeout;
    	      this.trial = defaults.trial;
        }

        public Builder algorithm(Output<Either<String,SamplingAlgorithm>> algorithm) {
            this.algorithm = Objects.requireNonNull(algorithm);
            return this;
        }
        public Builder algorithm(Either<String,SamplingAlgorithm> algorithm) {
            this.algorithm = Output.of(Objects.requireNonNull(algorithm));
            return this;
        }
        public Builder compute(Output<ComputeConfigurationArgs> compute) {
            this.compute = Objects.requireNonNull(compute);
            return this;
        }
        public Builder compute(ComputeConfigurationArgs compute) {
            this.compute = Output.of(Objects.requireNonNull(compute));
            return this;
        }
        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = Codegen.ofNullable(description);
            return this;
        }
        public Builder earlyTermination(@Nullable Output<Object> earlyTermination) {
            this.earlyTermination = earlyTermination;
            return this;
        }
        public Builder earlyTermination(@Nullable Object earlyTermination) {
            this.earlyTermination = Codegen.ofNullable(earlyTermination);
            return this;
        }
        public Builder experimentName(@Nullable Output<String> experimentName) {
            this.experimentName = experimentName;
            return this;
        }
        public Builder experimentName(@Nullable String experimentName) {
            this.experimentName = Codegen.ofNullable(experimentName);
            return this;
        }
        public Builder identity(@Nullable Output<Either<AmlTokenArgs,ManagedIdentityArgs>> identity) {
            this.identity = identity;
            return this;
        }
        public Builder identity(@Nullable Either<AmlTokenArgs,ManagedIdentityArgs> identity) {
            this.identity = Codegen.ofNullable(identity);
            return this;
        }
        public Builder jobType(Output<String> jobType) {
            this.jobType = Objects.requireNonNull(jobType);
            return this;
        }
        public Builder jobType(String jobType) {
            this.jobType = Output.of(Objects.requireNonNull(jobType));
            return this;
        }
        public Builder maxConcurrentTrials(@Nullable Output<Integer> maxConcurrentTrials) {
            this.maxConcurrentTrials = maxConcurrentTrials;
            return this;
        }
        public Builder maxConcurrentTrials(@Nullable Integer maxConcurrentTrials) {
            this.maxConcurrentTrials = Codegen.ofNullable(maxConcurrentTrials);
            return this;
        }
        public Builder maxTotalTrials(@Nullable Output<Integer> maxTotalTrials) {
            this.maxTotalTrials = maxTotalTrials;
            return this;
        }
        public Builder maxTotalTrials(@Nullable Integer maxTotalTrials) {
            this.maxTotalTrials = Codegen.ofNullable(maxTotalTrials);
            return this;
        }
        public Builder objective(Output<ObjectiveArgs> objective) {
            this.objective = Objects.requireNonNull(objective);
            return this;
        }
        public Builder objective(ObjectiveArgs objective) {
            this.objective = Output.of(Objects.requireNonNull(objective));
            return this;
        }
        public Builder priority(@Nullable Output<Integer> priority) {
            this.priority = priority;
            return this;
        }
        public Builder priority(@Nullable Integer priority) {
            this.priority = Codegen.ofNullable(priority);
            return this;
        }
        public Builder properties(@Nullable Output<Map<String,String>> properties) {
            this.properties = properties;
            return this;
        }
        public Builder properties(@Nullable Map<String,String> properties) {
            this.properties = Codegen.ofNullable(properties);
            return this;
        }
        public Builder searchSpace(Output<Map<String,Object>> searchSpace) {
            this.searchSpace = Objects.requireNonNull(searchSpace);
            return this;
        }
        public Builder searchSpace(Map<String,Object> searchSpace) {
            this.searchSpace = Output.of(Objects.requireNonNull(searchSpace));
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder timeout(@Nullable Output<String> timeout) {
            this.timeout = timeout;
            return this;
        }
        public Builder timeout(@Nullable String timeout) {
            this.timeout = Codegen.ofNullable(timeout);
            return this;
        }
        public Builder trial(@Nullable Output<TrialComponentArgs> trial) {
            this.trial = trial;
            return this;
        }
        public Builder trial(@Nullable TrialComponentArgs trial) {
            this.trial = Codegen.ofNullable(trial);
            return this;
        }        public SweepJobArgs build() {
            return new SweepJobArgs(algorithm, compute, description, earlyTermination, experimentName, identity, jobType, maxConcurrentTrials, maxTotalTrials, objective, priority, properties, searchSpace, tags, timeout, trial);
        }
    }
}
