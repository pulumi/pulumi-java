// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.azurenative.network.enums.RouteNextHopType;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Route resource.
 * 
 */
public final class RouteArgs extends com.pulumi.resources.ResourceArgs {

    public static final RouteArgs Empty = new RouteArgs();

    /**
     * The destination CIDR to which the route applies.
     * 
     */
    @Import(name="addressPrefix")
      private final @Nullable Output<String> addressPrefix;

    public Output<String> addressPrefix() {
        return this.addressPrefix == null ? Codegen.empty() : this.addressPrefix;
    }

    /**
     * A value indicating whether this route overrides overlapping BGP routes regardless of LPM.
     * 
     */
    @Import(name="hasBgpOverride")
      private final @Nullable Output<Boolean> hasBgpOverride;

    public Output<Boolean> hasBgpOverride() {
        return this.hasBgpOverride == null ? Codegen.empty() : this.hasBgpOverride;
    }

    /**
     * Resource ID.
     * 
     */
    @Import(name="id")
      private final @Nullable Output<String> id;

    public Output<String> id() {
        return this.id == null ? Codegen.empty() : this.id;
    }

    /**
     * The name of the resource that is unique within a resource group. This name can be used to access the resource.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * The IP address packets should be forwarded to. Next hop values are only allowed in routes where the next hop type is VirtualAppliance.
     * 
     */
    @Import(name="nextHopIpAddress")
      private final @Nullable Output<String> nextHopIpAddress;

    public Output<String> nextHopIpAddress() {
        return this.nextHopIpAddress == null ? Codegen.empty() : this.nextHopIpAddress;
    }

    /**
     * The type of Azure hop the packet should be sent to.
     * 
     */
    @Import(name="nextHopType", required=true)
      private final Output<Either<String,RouteNextHopType>> nextHopType;

    public Output<Either<String,RouteNextHopType>> nextHopType() {
        return this.nextHopType;
    }

    /**
     * The type of the resource.
     * 
     */
    @Import(name="type")
      private final @Nullable Output<String> type;

    public Output<String> type() {
        return this.type == null ? Codegen.empty() : this.type;
    }

    public RouteArgs(
        @Nullable Output<String> addressPrefix,
        @Nullable Output<Boolean> hasBgpOverride,
        @Nullable Output<String> id,
        @Nullable Output<String> name,
        @Nullable Output<String> nextHopIpAddress,
        Output<Either<String,RouteNextHopType>> nextHopType,
        @Nullable Output<String> type) {
        this.addressPrefix = addressPrefix;
        this.hasBgpOverride = hasBgpOverride;
        this.id = id;
        this.name = name;
        this.nextHopIpAddress = nextHopIpAddress;
        this.nextHopType = Objects.requireNonNull(nextHopType, "expected parameter 'nextHopType' to be non-null");
        this.type = type;
    }

    private RouteArgs() {
        this.addressPrefix = Codegen.empty();
        this.hasBgpOverride = Codegen.empty();
        this.id = Codegen.empty();
        this.name = Codegen.empty();
        this.nextHopIpAddress = Codegen.empty();
        this.nextHopType = Codegen.empty();
        this.type = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RouteArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> addressPrefix;
        private @Nullable Output<Boolean> hasBgpOverride;
        private @Nullable Output<String> id;
        private @Nullable Output<String> name;
        private @Nullable Output<String> nextHopIpAddress;
        private Output<Either<String,RouteNextHopType>> nextHopType;
        private @Nullable Output<String> type;

        public Builder() {
    	      // Empty
        }

        public Builder(RouteArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.addressPrefix = defaults.addressPrefix;
    	      this.hasBgpOverride = defaults.hasBgpOverride;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.nextHopIpAddress = defaults.nextHopIpAddress;
    	      this.nextHopType = defaults.nextHopType;
    	      this.type = defaults.type;
        }

        public Builder addressPrefix(@Nullable Output<String> addressPrefix) {
            this.addressPrefix = addressPrefix;
            return this;
        }
        public Builder addressPrefix(@Nullable String addressPrefix) {
            this.addressPrefix = Codegen.ofNullable(addressPrefix);
            return this;
        }
        public Builder hasBgpOverride(@Nullable Output<Boolean> hasBgpOverride) {
            this.hasBgpOverride = hasBgpOverride;
            return this;
        }
        public Builder hasBgpOverride(@Nullable Boolean hasBgpOverride) {
            this.hasBgpOverride = Codegen.ofNullable(hasBgpOverride);
            return this;
        }
        public Builder id(@Nullable Output<String> id) {
            this.id = id;
            return this;
        }
        public Builder id(@Nullable String id) {
            this.id = Codegen.ofNullable(id);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder nextHopIpAddress(@Nullable Output<String> nextHopIpAddress) {
            this.nextHopIpAddress = nextHopIpAddress;
            return this;
        }
        public Builder nextHopIpAddress(@Nullable String nextHopIpAddress) {
            this.nextHopIpAddress = Codegen.ofNullable(nextHopIpAddress);
            return this;
        }
        public Builder nextHopType(Output<Either<String,RouteNextHopType>> nextHopType) {
            this.nextHopType = Objects.requireNonNull(nextHopType);
            return this;
        }
        public Builder nextHopType(Either<String,RouteNextHopType> nextHopType) {
            this.nextHopType = Output.of(Objects.requireNonNull(nextHopType));
            return this;
        }
        public Builder type(@Nullable Output<String> type) {
            this.type = type;
            return this;
        }
        public Builder type(@Nullable String type) {
            this.type = Codegen.ofNullable(type);
            return this;
        }        public RouteArgs build() {
            return new RouteArgs(addressPrefix, hasBgpOverride, id, name, nextHopIpAddress, nextHopType, type);
        }
    }
}
