// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.media.inputs;

import com.pulumi.azurenative.media.enums.FilterTrackPropertyCompareOperation;
import com.pulumi.azurenative.media.enums.FilterTrackPropertyType;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * The class to specify one track property condition.
 * 
 */
public final class FilterTrackPropertyConditionArgs extends com.pulumi.resources.ResourceArgs {

    public static final FilterTrackPropertyConditionArgs Empty = new FilterTrackPropertyConditionArgs();

    /**
     * The track property condition operation.
     * 
     */
    @Import(name="operation", required=true)
    private Output<Either<String,FilterTrackPropertyCompareOperation>> operation;

    public Output<Either<String,FilterTrackPropertyCompareOperation>> operation() {
        return this.operation;
    }

    /**
     * The track property type.
     * 
     */
    @Import(name="property", required=true)
    private Output<Either<String,FilterTrackPropertyType>> property;

    public Output<Either<String,FilterTrackPropertyType>> property() {
        return this.property;
    }

    /**
     * The track property value.
     * 
     */
    @Import(name="value", required=true)
    private Output<String> value;

    public Output<String> value() {
        return this.value;
    }

    private FilterTrackPropertyConditionArgs() {}

    private FilterTrackPropertyConditionArgs(FilterTrackPropertyConditionArgs $) {
        this.operation = $.operation;
        this.property = $.property;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FilterTrackPropertyConditionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FilterTrackPropertyConditionArgs $;

        public Builder() {
            $ = new FilterTrackPropertyConditionArgs();
        }

        public Builder(FilterTrackPropertyConditionArgs defaults) {
            $ = new FilterTrackPropertyConditionArgs(Objects.requireNonNull(defaults));
        }

        public Builder operation(Output<Either<String,FilterTrackPropertyCompareOperation>> operation) {
            $.operation = operation;
            return this;
        }

        public Builder operation(Either<String,FilterTrackPropertyCompareOperation> operation) {
            return operation(Output.of(operation));
        }

        public Builder property(Output<Either<String,FilterTrackPropertyType>> property) {
            $.property = property;
            return this;
        }

        public Builder property(Either<String,FilterTrackPropertyType> property) {
            return property(Output.of(property));
        }

        public Builder value(Output<String> value) {
            $.value = value;
            return this;
        }

        public Builder value(String value) {
            return value(Output.of(value));
        }

        public FilterTrackPropertyConditionArgs build() {
            $.operation = Objects.requireNonNull($.operation, "expected parameter 'operation' to be non-null");
            $.property = Objects.requireNonNull($.property, "expected parameter 'property' to be non-null");
            $.value = Objects.requireNonNull($.value, "expected parameter 'value' to be non-null");
            return $;
        }
    }

}
