// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.storsimple;

import com.pulumi.azurenative.storsimple.enums.Kind;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ManagerExtendedInfoArgs extends com.pulumi.resources.ResourceArgs {

    public static final ManagerExtendedInfoArgs Empty = new ManagerExtendedInfoArgs();

    /**
     * Represents the encryption algorithm used to encrypt the keys. None - if Key is saved in plain text format. Algorithm name - if key is encrypted
     * 
     */
    @Import(name="algorithm", required=true)
    private Output<String> algorithm;

    /**
     * @return Represents the encryption algorithm used to encrypt the keys. None - if Key is saved in plain text format. Algorithm name - if key is encrypted
     * 
     */
    public Output<String> algorithm() {
        return this.algorithm;
    }

    /**
     * Represents the CEK of the resource.
     * 
     */
    @Import(name="encryptionKey")
    private @Nullable Output<String> encryptionKey;

    /**
     * @return Represents the CEK of the resource.
     * 
     */
    public Optional<Output<String>> encryptionKey() {
        return Optional.ofNullable(this.encryptionKey);
    }

    /**
     * Represents the Cert thumbprint that was used to encrypt the CEK.
     * 
     */
    @Import(name="encryptionKeyThumbprint")
    private @Nullable Output<String> encryptionKeyThumbprint;

    /**
     * @return Represents the Cert thumbprint that was used to encrypt the CEK.
     * 
     */
    public Optional<Output<String>> encryptionKeyThumbprint() {
        return Optional.ofNullable(this.encryptionKeyThumbprint);
    }

    /**
     * Represents the CIK of the resource.
     * 
     */
    @Import(name="integrityKey", required=true)
    private Output<String> integrityKey;

    /**
     * @return Represents the CIK of the resource.
     * 
     */
    public Output<String> integrityKey() {
        return this.integrityKey;
    }

    /**
     * The Kind of the object. Currently only Series8000 is supported
     * 
     */
    @Import(name="kind")
    private @Nullable Output<Kind> kind;

    /**
     * @return The Kind of the object. Currently only Series8000 is supported
     * 
     */
    public Optional<Output<Kind>> kind() {
        return Optional.ofNullable(this.kind);
    }

    /**
     * The manager name
     * 
     */
    @Import(name="managerName", required=true)
    private Output<String> managerName;

    /**
     * @return The manager name
     * 
     */
    public Output<String> managerName() {
        return this.managerName;
    }

    /**
     * Represents the portal thumbprint which can be used optionally to encrypt the entire data before storing it.
     * 
     */
    @Import(name="portalCertificateThumbprint")
    private @Nullable Output<String> portalCertificateThumbprint;

    /**
     * @return Represents the portal thumbprint which can be used optionally to encrypt the entire data before storing it.
     * 
     */
    public Optional<Output<String>> portalCertificateThumbprint() {
        return Optional.ofNullable(this.portalCertificateThumbprint);
    }

    /**
     * The resource group name
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The resource group name
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The version of the extended info being persisted.
     * 
     */
    @Import(name="version")
    private @Nullable Output<String> version;

    /**
     * @return The version of the extended info being persisted.
     * 
     */
    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    private ManagerExtendedInfoArgs() {}

    private ManagerExtendedInfoArgs(ManagerExtendedInfoArgs $) {
        this.algorithm = $.algorithm;
        this.encryptionKey = $.encryptionKey;
        this.encryptionKeyThumbprint = $.encryptionKeyThumbprint;
        this.integrityKey = $.integrityKey;
        this.kind = $.kind;
        this.managerName = $.managerName;
        this.portalCertificateThumbprint = $.portalCertificateThumbprint;
        this.resourceGroupName = $.resourceGroupName;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagerExtendedInfoArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagerExtendedInfoArgs $;

        public Builder() {
            $ = new ManagerExtendedInfoArgs();
        }

        public Builder(ManagerExtendedInfoArgs defaults) {
            $ = new ManagerExtendedInfoArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param algorithm Represents the encryption algorithm used to encrypt the keys. None - if Key is saved in plain text format. Algorithm name - if key is encrypted
         * 
         * @return builder
         * 
         */
        public Builder algorithm(Output<String> algorithm) {
            $.algorithm = algorithm;
            return this;
        }

        /**
         * @param algorithm Represents the encryption algorithm used to encrypt the keys. None - if Key is saved in plain text format. Algorithm name - if key is encrypted
         * 
         * @return builder
         * 
         */
        public Builder algorithm(String algorithm) {
            return algorithm(Output.of(algorithm));
        }

        /**
         * @param encryptionKey Represents the CEK of the resource.
         * 
         * @return builder
         * 
         */
        public Builder encryptionKey(@Nullable Output<String> encryptionKey) {
            $.encryptionKey = encryptionKey;
            return this;
        }

        /**
         * @param encryptionKey Represents the CEK of the resource.
         * 
         * @return builder
         * 
         */
        public Builder encryptionKey(String encryptionKey) {
            return encryptionKey(Output.of(encryptionKey));
        }

        /**
         * @param encryptionKeyThumbprint Represents the Cert thumbprint that was used to encrypt the CEK.
         * 
         * @return builder
         * 
         */
        public Builder encryptionKeyThumbprint(@Nullable Output<String> encryptionKeyThumbprint) {
            $.encryptionKeyThumbprint = encryptionKeyThumbprint;
            return this;
        }

        /**
         * @param encryptionKeyThumbprint Represents the Cert thumbprint that was used to encrypt the CEK.
         * 
         * @return builder
         * 
         */
        public Builder encryptionKeyThumbprint(String encryptionKeyThumbprint) {
            return encryptionKeyThumbprint(Output.of(encryptionKeyThumbprint));
        }

        /**
         * @param integrityKey Represents the CIK of the resource.
         * 
         * @return builder
         * 
         */
        public Builder integrityKey(Output<String> integrityKey) {
            $.integrityKey = integrityKey;
            return this;
        }

        /**
         * @param integrityKey Represents the CIK of the resource.
         * 
         * @return builder
         * 
         */
        public Builder integrityKey(String integrityKey) {
            return integrityKey(Output.of(integrityKey));
        }

        /**
         * @param kind The Kind of the object. Currently only Series8000 is supported
         * 
         * @return builder
         * 
         */
        public Builder kind(@Nullable Output<Kind> kind) {
            $.kind = kind;
            return this;
        }

        /**
         * @param kind The Kind of the object. Currently only Series8000 is supported
         * 
         * @return builder
         * 
         */
        public Builder kind(Kind kind) {
            return kind(Output.of(kind));
        }

        /**
         * @param managerName The manager name
         * 
         * @return builder
         * 
         */
        public Builder managerName(Output<String> managerName) {
            $.managerName = managerName;
            return this;
        }

        /**
         * @param managerName The manager name
         * 
         * @return builder
         * 
         */
        public Builder managerName(String managerName) {
            return managerName(Output.of(managerName));
        }

        /**
         * @param portalCertificateThumbprint Represents the portal thumbprint which can be used optionally to encrypt the entire data before storing it.
         * 
         * @return builder
         * 
         */
        public Builder portalCertificateThumbprint(@Nullable Output<String> portalCertificateThumbprint) {
            $.portalCertificateThumbprint = portalCertificateThumbprint;
            return this;
        }

        /**
         * @param portalCertificateThumbprint Represents the portal thumbprint which can be used optionally to encrypt the entire data before storing it.
         * 
         * @return builder
         * 
         */
        public Builder portalCertificateThumbprint(String portalCertificateThumbprint) {
            return portalCertificateThumbprint(Output.of(portalCertificateThumbprint));
        }

        /**
         * @param resourceGroupName The resource group name
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The resource group name
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param version The version of the extended info being persisted.
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version The version of the extended info being persisted.
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        public ManagerExtendedInfoArgs build() {
            $.algorithm = Objects.requireNonNull($.algorithm, "expected parameter 'algorithm' to be non-null");
            $.integrityKey = Objects.requireNonNull($.integrityKey, "expected parameter 'integrityKey' to be non-null");
            $.managerName = Objects.requireNonNull($.managerName, "expected parameter 'managerName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
