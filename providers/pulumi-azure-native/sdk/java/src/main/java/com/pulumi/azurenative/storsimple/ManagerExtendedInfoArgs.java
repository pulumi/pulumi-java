// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.storsimple;

import com.pulumi.azurenative.storsimple.enums.Kind;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ManagerExtendedInfoArgs extends com.pulumi.resources.ResourceArgs {

    public static final ManagerExtendedInfoArgs Empty = new ManagerExtendedInfoArgs();

    /**
     * Represents the encryption algorithm used to encrypt the keys. None - if Key is saved in plain text format. Algorithm name - if key is encrypted
     * 
     */
    @Import(name="algorithm", required=true)
      private final Output<String> algorithm;

    public Output<String> algorithm() {
        return this.algorithm;
    }

    /**
     * Represents the CEK of the resource.
     * 
     */
    @Import(name="encryptionKey")
      private final @Nullable Output<String> encryptionKey;

    public Output<String> encryptionKey() {
        return this.encryptionKey == null ? Codegen.empty() : this.encryptionKey;
    }

    /**
     * Represents the Cert thumbprint that was used to encrypt the CEK.
     * 
     */
    @Import(name="encryptionKeyThumbprint")
      private final @Nullable Output<String> encryptionKeyThumbprint;

    public Output<String> encryptionKeyThumbprint() {
        return this.encryptionKeyThumbprint == null ? Codegen.empty() : this.encryptionKeyThumbprint;
    }

    /**
     * Represents the CIK of the resource.
     * 
     */
    @Import(name="integrityKey", required=true)
      private final Output<String> integrityKey;

    public Output<String> integrityKey() {
        return this.integrityKey;
    }

    /**
     * The Kind of the object. Currently only Series8000 is supported
     * 
     */
    @Import(name="kind")
      private final @Nullable Output<Kind> kind;

    public Output<Kind> kind() {
        return this.kind == null ? Codegen.empty() : this.kind;
    }

    /**
     * The manager name
     * 
     */
    @Import(name="managerName", required=true)
      private final Output<String> managerName;

    public Output<String> managerName() {
        return this.managerName;
    }

    /**
     * Represents the portal thumbprint which can be used optionally to encrypt the entire data before storing it.
     * 
     */
    @Import(name="portalCertificateThumbprint")
      private final @Nullable Output<String> portalCertificateThumbprint;

    public Output<String> portalCertificateThumbprint() {
        return this.portalCertificateThumbprint == null ? Codegen.empty() : this.portalCertificateThumbprint;
    }

    /**
     * The resource group name
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The version of the extended info being persisted.
     * 
     */
    @Import(name="version")
      private final @Nullable Output<String> version;

    public Output<String> version() {
        return this.version == null ? Codegen.empty() : this.version;
    }

    public ManagerExtendedInfoArgs(
        Output<String> algorithm,
        @Nullable Output<String> encryptionKey,
        @Nullable Output<String> encryptionKeyThumbprint,
        Output<String> integrityKey,
        @Nullable Output<Kind> kind,
        Output<String> managerName,
        @Nullable Output<String> portalCertificateThumbprint,
        Output<String> resourceGroupName,
        @Nullable Output<String> version) {
        this.algorithm = Objects.requireNonNull(algorithm, "expected parameter 'algorithm' to be non-null");
        this.encryptionKey = encryptionKey;
        this.encryptionKeyThumbprint = encryptionKeyThumbprint;
        this.integrityKey = Objects.requireNonNull(integrityKey, "expected parameter 'integrityKey' to be non-null");
        this.kind = kind;
        this.managerName = Objects.requireNonNull(managerName, "expected parameter 'managerName' to be non-null");
        this.portalCertificateThumbprint = portalCertificateThumbprint;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.version = version;
    }

    private ManagerExtendedInfoArgs() {
        this.algorithm = Codegen.empty();
        this.encryptionKey = Codegen.empty();
        this.encryptionKeyThumbprint = Codegen.empty();
        this.integrityKey = Codegen.empty();
        this.kind = Codegen.empty();
        this.managerName = Codegen.empty();
        this.portalCertificateThumbprint = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.version = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ManagerExtendedInfoArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> algorithm;
        private @Nullable Output<String> encryptionKey;
        private @Nullable Output<String> encryptionKeyThumbprint;
        private Output<String> integrityKey;
        private @Nullable Output<Kind> kind;
        private Output<String> managerName;
        private @Nullable Output<String> portalCertificateThumbprint;
        private Output<String> resourceGroupName;
        private @Nullable Output<String> version;

        public Builder() {
    	      // Empty
        }

        public Builder(ManagerExtendedInfoArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.algorithm = defaults.algorithm;
    	      this.encryptionKey = defaults.encryptionKey;
    	      this.encryptionKeyThumbprint = defaults.encryptionKeyThumbprint;
    	      this.integrityKey = defaults.integrityKey;
    	      this.kind = defaults.kind;
    	      this.managerName = defaults.managerName;
    	      this.portalCertificateThumbprint = defaults.portalCertificateThumbprint;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.version = defaults.version;
        }

        public Builder algorithm(Output<String> algorithm) {
            this.algorithm = Objects.requireNonNull(algorithm);
            return this;
        }
        public Builder algorithm(String algorithm) {
            this.algorithm = Output.of(Objects.requireNonNull(algorithm));
            return this;
        }
        public Builder encryptionKey(@Nullable Output<String> encryptionKey) {
            this.encryptionKey = encryptionKey;
            return this;
        }
        public Builder encryptionKey(@Nullable String encryptionKey) {
            this.encryptionKey = Codegen.ofNullable(encryptionKey);
            return this;
        }
        public Builder encryptionKeyThumbprint(@Nullable Output<String> encryptionKeyThumbprint) {
            this.encryptionKeyThumbprint = encryptionKeyThumbprint;
            return this;
        }
        public Builder encryptionKeyThumbprint(@Nullable String encryptionKeyThumbprint) {
            this.encryptionKeyThumbprint = Codegen.ofNullable(encryptionKeyThumbprint);
            return this;
        }
        public Builder integrityKey(Output<String> integrityKey) {
            this.integrityKey = Objects.requireNonNull(integrityKey);
            return this;
        }
        public Builder integrityKey(String integrityKey) {
            this.integrityKey = Output.of(Objects.requireNonNull(integrityKey));
            return this;
        }
        public Builder kind(@Nullable Output<Kind> kind) {
            this.kind = kind;
            return this;
        }
        public Builder kind(@Nullable Kind kind) {
            this.kind = Codegen.ofNullable(kind);
            return this;
        }
        public Builder managerName(Output<String> managerName) {
            this.managerName = Objects.requireNonNull(managerName);
            return this;
        }
        public Builder managerName(String managerName) {
            this.managerName = Output.of(Objects.requireNonNull(managerName));
            return this;
        }
        public Builder portalCertificateThumbprint(@Nullable Output<String> portalCertificateThumbprint) {
            this.portalCertificateThumbprint = portalCertificateThumbprint;
            return this;
        }
        public Builder portalCertificateThumbprint(@Nullable String portalCertificateThumbprint) {
            this.portalCertificateThumbprint = Codegen.ofNullable(portalCertificateThumbprint);
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder version(@Nullable Output<String> version) {
            this.version = version;
            return this;
        }
        public Builder version(@Nullable String version) {
            this.version = Codegen.ofNullable(version);
            return this;
        }        public ManagerExtendedInfoArgs build() {
            return new ManagerExtendedInfoArgs(algorithm, encryptionKey, encryptionKeyThumbprint, integrityKey, kind, managerName, portalCertificateThumbprint, resourceGroupName, version);
        }
    }
}
