// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.cache.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


/**
 * Details of single instance of redis.
 * 
 */
public final class RedisInstanceDetailsResponse extends com.pulumi.resources.InvokeArgs {

    public static final RedisInstanceDetailsResponse Empty = new RedisInstanceDetailsResponse();

    /**
     * Specifies whether the instance is a master node.
     * 
     */
    @Import(name="isMaster", required=true)
    private Boolean isMaster;

    public Boolean isMaster() {
        return this.isMaster;
    }

    /**
     * If enableNonSslPort is true, provides Redis instance Non-SSL port.
     * 
     */
    @Import(name="nonSslPort", required=true)
    private Integer nonSslPort;

    public Integer nonSslPort() {
        return this.nonSslPort;
    }

    /**
     * If clustering is enabled, the Shard ID of Redis Instance
     * 
     */
    @Import(name="shardId", required=true)
    private Integer shardId;

    public Integer shardId() {
        return this.shardId;
    }

    /**
     * Redis instance SSL port.
     * 
     */
    @Import(name="sslPort", required=true)
    private Integer sslPort;

    public Integer sslPort() {
        return this.sslPort;
    }

    /**
     * If the Cache uses availability zones, specifies availability zone where this instance is located.
     * 
     */
    @Import(name="zone", required=true)
    private String zone;

    public String zone() {
        return this.zone;
    }

    private RedisInstanceDetailsResponse() {}

    private RedisInstanceDetailsResponse(RedisInstanceDetailsResponse $) {
        this.isMaster = $.isMaster;
        this.nonSslPort = $.nonSslPort;
        this.shardId = $.shardId;
        this.sslPort = $.sslPort;
        this.zone = $.zone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RedisInstanceDetailsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RedisInstanceDetailsResponse $;

        public Builder() {
            $ = new RedisInstanceDetailsResponse();
        }

        public Builder(RedisInstanceDetailsResponse defaults) {
            $ = new RedisInstanceDetailsResponse(Objects.requireNonNull(defaults));
        }

        public Builder isMaster(Boolean isMaster) {
            $.isMaster = isMaster;
            return this;
        }

        public Builder nonSslPort(Integer nonSslPort) {
            $.nonSslPort = nonSslPort;
            return this;
        }

        public Builder shardId(Integer shardId) {
            $.shardId = shardId;
            return this;
        }

        public Builder sslPort(Integer sslPort) {
            $.sslPort = sslPort;
            return this;
        }

        public Builder zone(String zone) {
            $.zone = zone;
            return this;
        }

        public RedisInstanceDetailsResponse build() {
            $.isMaster = Objects.requireNonNull($.isMaster, "expected parameter 'isMaster' to be non-null");
            $.nonSslPort = Objects.requireNonNull($.nonSslPort, "expected parameter 'nonSslPort' to be non-null");
            $.shardId = Objects.requireNonNull($.shardId, "expected parameter 'shardId' to be non-null");
            $.sslPort = Objects.requireNonNull($.sslPort, "expected parameter 'sslPort' to be non-null");
            $.zone = Objects.requireNonNull($.zone, "expected parameter 'zone' to be non-null");
            return $;
        }
    }

}
