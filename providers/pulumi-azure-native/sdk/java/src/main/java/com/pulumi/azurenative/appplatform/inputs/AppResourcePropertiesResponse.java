// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.appplatform.inputs;

import com.pulumi.azurenative.appplatform.inputs.PersistentDiskResponse;
import com.pulumi.azurenative.appplatform.inputs.TemporaryDiskResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * App resource properties payload
 * 
 */
public final class AppResourcePropertiesResponse extends com.pulumi.resources.InvokeArgs {

    public static final AppResourcePropertiesResponse Empty = new AppResourcePropertiesResponse();

    /**
     * Name of the active deployment of the App
     * 
     */
    @Import(name="activeDeploymentName")
    private @Nullable String activeDeploymentName;

    public Optional<String> activeDeploymentName() {
        return Optional.ofNullable(this.activeDeploymentName);
    }

    /**
     * Date time when the resource is created
     * 
     */
    @Import(name="createdTime", required=true)
    private String createdTime;

    public String createdTime() {
        return this.createdTime;
    }

    /**
     * Fully qualified dns Name.
     * 
     */
    @Import(name="fqdn")
    private @Nullable String fqdn;

    public Optional<String> fqdn() {
        return Optional.ofNullable(this.fqdn);
    }

    /**
     * Indicate if only https is allowed.
     * 
     */
    @Import(name="httpsOnly")
    private @Nullable Boolean httpsOnly;

    public Optional<Boolean> httpsOnly() {
        return Optional.ofNullable(this.httpsOnly);
    }

    /**
     * Persistent disk settings
     * 
     */
    @Import(name="persistentDisk")
    private @Nullable PersistentDiskResponse persistentDisk;

    public Optional<PersistentDiskResponse> persistentDisk() {
        return Optional.ofNullable(this.persistentDisk);
    }

    /**
     * Provisioning state of the App
     * 
     */
    @Import(name="provisioningState", required=true)
    private String provisioningState;

    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Indicates whether the App exposes public endpoint
     * 
     */
    @Import(name="public")
    private @Nullable Boolean public_;

    public Optional<Boolean> public_() {
        return Optional.ofNullable(this.public_);
    }

    /**
     * Temporary disk settings
     * 
     */
    @Import(name="temporaryDisk")
    private @Nullable TemporaryDiskResponse temporaryDisk;

    public Optional<TemporaryDiskResponse> temporaryDisk() {
        return Optional.ofNullable(this.temporaryDisk);
    }

    /**
     * URL of the App
     * 
     */
    @Import(name="url", required=true)
    private String url;

    public String url() {
        return this.url;
    }

    private AppResourcePropertiesResponse() {}

    private AppResourcePropertiesResponse(AppResourcePropertiesResponse $) {
        this.activeDeploymentName = $.activeDeploymentName;
        this.createdTime = $.createdTime;
        this.fqdn = $.fqdn;
        this.httpsOnly = $.httpsOnly;
        this.persistentDisk = $.persistentDisk;
        this.provisioningState = $.provisioningState;
        this.public_ = $.public_;
        this.temporaryDisk = $.temporaryDisk;
        this.url = $.url;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AppResourcePropertiesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AppResourcePropertiesResponse $;

        public Builder() {
            $ = new AppResourcePropertiesResponse();
        }

        public Builder(AppResourcePropertiesResponse defaults) {
            $ = new AppResourcePropertiesResponse(Objects.requireNonNull(defaults));
        }

        public Builder activeDeploymentName(@Nullable String activeDeploymentName) {
            $.activeDeploymentName = activeDeploymentName;
            return this;
        }

        public Builder createdTime(String createdTime) {
            $.createdTime = createdTime;
            return this;
        }

        public Builder fqdn(@Nullable String fqdn) {
            $.fqdn = fqdn;
            return this;
        }

        public Builder httpsOnly(@Nullable Boolean httpsOnly) {
            $.httpsOnly = httpsOnly;
            return this;
        }

        public Builder persistentDisk(@Nullable PersistentDiskResponse persistentDisk) {
            $.persistentDisk = persistentDisk;
            return this;
        }

        public Builder provisioningState(String provisioningState) {
            $.provisioningState = provisioningState;
            return this;
        }

        public Builder public_(@Nullable Boolean public_) {
            $.public_ = public_;
            return this;
        }

        public Builder temporaryDisk(@Nullable TemporaryDiskResponse temporaryDisk) {
            $.temporaryDisk = temporaryDisk;
            return this;
        }

        public Builder url(String url) {
            $.url = url;
            return this;
        }

        public AppResourcePropertiesResponse build() {
            $.createdTime = Objects.requireNonNull($.createdTime, "expected parameter 'createdTime' to be non-null");
            $.httpsOnly = Codegen.booleanProp("httpsOnly").arg($.httpsOnly).def(false).getNullable();
            $.provisioningState = Objects.requireNonNull($.provisioningState, "expected parameter 'provisioningState' to be non-null");
            $.url = Objects.requireNonNull($.url, "expected parameter 'url' to be non-null");
            return $;
        }
    }

}
