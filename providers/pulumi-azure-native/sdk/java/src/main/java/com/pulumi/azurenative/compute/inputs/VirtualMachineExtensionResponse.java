// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.compute.inputs;

import com.pulumi.azurenative.compute.inputs.VirtualMachineExtensionInstanceViewResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Describes a Virtual Machine Extension.
 * 
 */
public final class VirtualMachineExtensionResponse extends com.pulumi.resources.InvokeArgs {

    public static final VirtualMachineExtensionResponse Empty = new VirtualMachineExtensionResponse();

    /**
     * Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true.
     * 
     */
    @Import(name="autoUpgradeMinorVersion")
    private @Nullable Boolean autoUpgradeMinorVersion;

    /**
     * @return Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true.
     * 
     */
    public Optional<Boolean> autoUpgradeMinorVersion() {
        return Optional.ofNullable(this.autoUpgradeMinorVersion);
    }

    /**
     * Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available.
     * 
     */
    @Import(name="enableAutomaticUpgrade")
    private @Nullable Boolean enableAutomaticUpgrade;

    /**
     * @return Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available.
     * 
     */
    public Optional<Boolean> enableAutomaticUpgrade() {
        return Optional.ofNullable(this.enableAutomaticUpgrade);
    }

    /**
     * How the extension handler should be forced to update even if the extension configuration has not changed.
     * 
     */
    @Import(name="forceUpdateTag")
    private @Nullable String forceUpdateTag;

    /**
     * @return How the extension handler should be forced to update even if the extension configuration has not changed.
     * 
     */
    public Optional<String> forceUpdateTag() {
        return Optional.ofNullable(this.forceUpdateTag);
    }

    /**
     * Resource Id
     * 
     */
    @Import(name="id", required=true)
    private String id;

    /**
     * @return Resource Id
     * 
     */
    public String id() {
        return this.id;
    }

    /**
     * The virtual machine extension instance view.
     * 
     */
    @Import(name="instanceView")
    private @Nullable VirtualMachineExtensionInstanceViewResponse instanceView;

    /**
     * @return The virtual machine extension instance view.
     * 
     */
    public Optional<VirtualMachineExtensionInstanceViewResponse> instanceView() {
        return Optional.ofNullable(this.instanceView);
    }

    /**
     * Resource location
     * 
     */
    @Import(name="location", required=true)
    private String location;

    /**
     * @return Resource location
     * 
     */
    public String location() {
        return this.location;
    }

    /**
     * Resource name
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return Resource name
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all.
     * 
     */
    @Import(name="protectedSettings")
    private @Nullable Object protectedSettings;

    /**
     * @return The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all.
     * 
     */
    public Optional<Object> protectedSettings() {
        return Optional.ofNullable(this.protectedSettings);
    }

    /**
     * The provisioning state, which only appears in the response.
     * 
     */
    @Import(name="provisioningState", required=true)
    private String provisioningState;

    /**
     * @return The provisioning state, which only appears in the response.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * The name of the extension handler publisher.
     * 
     */
    @Import(name="publisher")
    private @Nullable String publisher;

    /**
     * @return The name of the extension handler publisher.
     * 
     */
    public Optional<String> publisher() {
        return Optional.ofNullable(this.publisher);
    }

    /**
     * Json formatted public settings for the extension.
     * 
     */
    @Import(name="settings")
    private @Nullable Object settings;

    /**
     * @return Json formatted public settings for the extension.
     * 
     */
    public Optional<Object> settings() {
        return Optional.ofNullable(this.settings);
    }

    /**
     * Resource tags
     * 
     */
    @Import(name="tags")
    private @Nullable Map<String,String> tags;

    /**
     * @return Resource tags
     * 
     */
    public Optional<Map<String,String>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Resource type
     * 
     */
    @Import(name="type", required=true)
    private String type;

    /**
     * @return Resource type
     * 
     */
    public String type() {
        return this.type;
    }

    /**
     * Specifies the version of the script handler.
     * 
     */
    @Import(name="typeHandlerVersion")
    private @Nullable String typeHandlerVersion;

    /**
     * @return Specifies the version of the script handler.
     * 
     */
    public Optional<String> typeHandlerVersion() {
        return Optional.ofNullable(this.typeHandlerVersion);
    }

    private VirtualMachineExtensionResponse() {}

    private VirtualMachineExtensionResponse(VirtualMachineExtensionResponse $) {
        this.autoUpgradeMinorVersion = $.autoUpgradeMinorVersion;
        this.enableAutomaticUpgrade = $.enableAutomaticUpgrade;
        this.forceUpdateTag = $.forceUpdateTag;
        this.id = $.id;
        this.instanceView = $.instanceView;
        this.location = $.location;
        this.name = $.name;
        this.protectedSettings = $.protectedSettings;
        this.provisioningState = $.provisioningState;
        this.publisher = $.publisher;
        this.settings = $.settings;
        this.tags = $.tags;
        this.type = $.type;
        this.typeHandlerVersion = $.typeHandlerVersion;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VirtualMachineExtensionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VirtualMachineExtensionResponse $;

        public Builder() {
            $ = new VirtualMachineExtensionResponse();
        }

        public Builder(VirtualMachineExtensionResponse defaults) {
            $ = new VirtualMachineExtensionResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoUpgradeMinorVersion Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true.
         * 
         * @return builder
         * 
         */
        public Builder autoUpgradeMinorVersion(@Nullable Boolean autoUpgradeMinorVersion) {
            $.autoUpgradeMinorVersion = autoUpgradeMinorVersion;
            return this;
        }

        /**
         * @param enableAutomaticUpgrade Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available.
         * 
         * @return builder
         * 
         */
        public Builder enableAutomaticUpgrade(@Nullable Boolean enableAutomaticUpgrade) {
            $.enableAutomaticUpgrade = enableAutomaticUpgrade;
            return this;
        }

        /**
         * @param forceUpdateTag How the extension handler should be forced to update even if the extension configuration has not changed.
         * 
         * @return builder
         * 
         */
        public Builder forceUpdateTag(@Nullable String forceUpdateTag) {
            $.forceUpdateTag = forceUpdateTag;
            return this;
        }

        /**
         * @param id Resource Id
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            $.id = id;
            return this;
        }

        /**
         * @param instanceView The virtual machine extension instance view.
         * 
         * @return builder
         * 
         */
        public Builder instanceView(@Nullable VirtualMachineExtensionInstanceViewResponse instanceView) {
            $.instanceView = instanceView;
            return this;
        }

        /**
         * @param location Resource location
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            $.location = location;
            return this;
        }

        /**
         * @param name Resource name
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param protectedSettings The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all.
         * 
         * @return builder
         * 
         */
        public Builder protectedSettings(@Nullable Object protectedSettings) {
            $.protectedSettings = protectedSettings;
            return this;
        }

        /**
         * @param provisioningState The provisioning state, which only appears in the response.
         * 
         * @return builder
         * 
         */
        public Builder provisioningState(String provisioningState) {
            $.provisioningState = provisioningState;
            return this;
        }

        /**
         * @param publisher The name of the extension handler publisher.
         * 
         * @return builder
         * 
         */
        public Builder publisher(@Nullable String publisher) {
            $.publisher = publisher;
            return this;
        }

        /**
         * @param settings Json formatted public settings for the extension.
         * 
         * @return builder
         * 
         */
        public Builder settings(@Nullable Object settings) {
            $.settings = settings;
            return this;
        }

        /**
         * @param tags Resource tags
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Map<String,String> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param type Resource type
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            $.type = type;
            return this;
        }

        /**
         * @param typeHandlerVersion Specifies the version of the script handler.
         * 
         * @return builder
         * 
         */
        public Builder typeHandlerVersion(@Nullable String typeHandlerVersion) {
            $.typeHandlerVersion = typeHandlerVersion;
            return this;
        }

        public VirtualMachineExtensionResponse build() {
            $.id = Objects.requireNonNull($.id, "expected parameter 'id' to be non-null");
            $.location = Objects.requireNonNull($.location, "expected parameter 'location' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.provisioningState = Objects.requireNonNull($.provisioningState, "expected parameter 'provisioningState' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
