// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.apimanagement;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CacheArgs extends com.pulumi.resources.ResourceArgs {

    public static final CacheArgs Empty = new CacheArgs();

    /**
     * Identifier of the Cache entity. Cache identifier (should be either &#39;default&#39; or valid Azure region identifier).
     * 
     */
    @Import(name="cacheId")
    private @Nullable Output<String> cacheId;

    /**
     * @return Identifier of the Cache entity. Cache identifier (should be either &#39;default&#39; or valid Azure region identifier).
     * 
     */
    public Optional<Output<String>> cacheId() {
        return Optional.ofNullable(this.cacheId);
    }

    /**
     * Runtime connection string to cache
     * 
     */
    @Import(name="connectionString", required=true)
    private Output<String> connectionString;

    /**
     * @return Runtime connection string to cache
     * 
     */
    public Output<String> connectionString() {
        return this.connectionString;
    }

    /**
     * Cache description
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Cache description
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Original uri of entity in external system cache points to
     * 
     */
    @Import(name="resourceId")
    private @Nullable Output<String> resourceId;

    /**
     * @return Original uri of entity in external system cache points to
     * 
     */
    public Optional<Output<String>> resourceId() {
        return Optional.ofNullable(this.resourceId);
    }

    /**
     * The name of the API Management service.
     * 
     */
    @Import(name="serviceName", required=true)
    private Output<String> serviceName;

    /**
     * @return The name of the API Management service.
     * 
     */
    public Output<String> serviceName() {
        return this.serviceName;
    }

    /**
     * Location identifier to use cache from (should be either &#39;default&#39; or valid Azure region identifier)
     * 
     */
    @Import(name="useFromLocation", required=true)
    private Output<String> useFromLocation;

    /**
     * @return Location identifier to use cache from (should be either &#39;default&#39; or valid Azure region identifier)
     * 
     */
    public Output<String> useFromLocation() {
        return this.useFromLocation;
    }

    private CacheArgs() {}

    private CacheArgs(CacheArgs $) {
        this.cacheId = $.cacheId;
        this.connectionString = $.connectionString;
        this.description = $.description;
        this.resourceGroupName = $.resourceGroupName;
        this.resourceId = $.resourceId;
        this.serviceName = $.serviceName;
        this.useFromLocation = $.useFromLocation;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CacheArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CacheArgs $;

        public Builder() {
            $ = new CacheArgs();
        }

        public Builder(CacheArgs defaults) {
            $ = new CacheArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cacheId Identifier of the Cache entity. Cache identifier (should be either &#39;default&#39; or valid Azure region identifier).
         * 
         * @return builder
         * 
         */
        public Builder cacheId(@Nullable Output<String> cacheId) {
            $.cacheId = cacheId;
            return this;
        }

        /**
         * @param cacheId Identifier of the Cache entity. Cache identifier (should be either &#39;default&#39; or valid Azure region identifier).
         * 
         * @return builder
         * 
         */
        public Builder cacheId(String cacheId) {
            return cacheId(Output.of(cacheId));
        }

        /**
         * @param connectionString Runtime connection string to cache
         * 
         * @return builder
         * 
         */
        public Builder connectionString(Output<String> connectionString) {
            $.connectionString = connectionString;
            return this;
        }

        /**
         * @param connectionString Runtime connection string to cache
         * 
         * @return builder
         * 
         */
        public Builder connectionString(String connectionString) {
            return connectionString(Output.of(connectionString));
        }

        /**
         * @param description Cache description
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Cache description
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param resourceGroupName The name of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param resourceId Original uri of entity in external system cache points to
         * 
         * @return builder
         * 
         */
        public Builder resourceId(@Nullable Output<String> resourceId) {
            $.resourceId = resourceId;
            return this;
        }

        /**
         * @param resourceId Original uri of entity in external system cache points to
         * 
         * @return builder
         * 
         */
        public Builder resourceId(String resourceId) {
            return resourceId(Output.of(resourceId));
        }

        /**
         * @param serviceName The name of the API Management service.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        /**
         * @param serviceName The name of the API Management service.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        /**
         * @param useFromLocation Location identifier to use cache from (should be either &#39;default&#39; or valid Azure region identifier)
         * 
         * @return builder
         * 
         */
        public Builder useFromLocation(Output<String> useFromLocation) {
            $.useFromLocation = useFromLocation;
            return this;
        }

        /**
         * @param useFromLocation Location identifier to use cache from (should be either &#39;default&#39; or valid Azure region identifier)
         * 
         * @return builder
         * 
         */
        public Builder useFromLocation(String useFromLocation) {
            return useFromLocation(Output.of(useFromLocation));
        }

        public CacheArgs build() {
            $.connectionString = Objects.requireNonNull($.connectionString, "expected parameter 'connectionString' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.serviceName = Objects.requireNonNull($.serviceName, "expected parameter 'serviceName' to be non-null");
            $.useFromLocation = Objects.requireNonNull($.useFromLocation, "expected parameter 'useFromLocation' to be non-null");
            return $;
        }
    }

}
