// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.customerinsights.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.util.Objects;


/**
 * Defines the KPI Threshold limits.
 * 
 */
public final class KpiThresholdsResponse extends com.pulumi.resources.InvokeArgs {

    public static final KpiThresholdsResponse Empty = new KpiThresholdsResponse();

    /**
     * Whether or not the KPI is an increasing KPI.
     * 
     */
    @Import(name="increasingKpi", required=true)
    private Boolean increasingKpi;

    /**
     * @return Whether or not the KPI is an increasing KPI.
     * 
     */
    public Boolean increasingKpi() {
        return this.increasingKpi;
    }

    /**
     * The lower threshold limit.
     * 
     */
    @Import(name="lowerLimit", required=true)
    private Double lowerLimit;

    /**
     * @return The lower threshold limit.
     * 
     */
    public Double lowerLimit() {
        return this.lowerLimit;
    }

    /**
     * The upper threshold limit.
     * 
     */
    @Import(name="upperLimit", required=true)
    private Double upperLimit;

    /**
     * @return The upper threshold limit.
     * 
     */
    public Double upperLimit() {
        return this.upperLimit;
    }

    private KpiThresholdsResponse() {}

    private KpiThresholdsResponse(KpiThresholdsResponse $) {
        this.increasingKpi = $.increasingKpi;
        this.lowerLimit = $.lowerLimit;
        this.upperLimit = $.upperLimit;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KpiThresholdsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KpiThresholdsResponse $;

        public Builder() {
            $ = new KpiThresholdsResponse();
        }

        public Builder(KpiThresholdsResponse defaults) {
            $ = new KpiThresholdsResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param increasingKpi Whether or not the KPI is an increasing KPI.
         * 
         * @return builder
         * 
         */
        public Builder increasingKpi(Boolean increasingKpi) {
            $.increasingKpi = increasingKpi;
            return this;
        }

        /**
         * @param lowerLimit The lower threshold limit.
         * 
         * @return builder
         * 
         */
        public Builder lowerLimit(Double lowerLimit) {
            $.lowerLimit = lowerLimit;
            return this;
        }

        /**
         * @param upperLimit The upper threshold limit.
         * 
         * @return builder
         * 
         */
        public Builder upperLimit(Double upperLimit) {
            $.upperLimit = upperLimit;
            return this;
        }

        public KpiThresholdsResponse build() {
            $.increasingKpi = Objects.requireNonNull($.increasingKpi, "expected parameter 'increasingKpi' to be non-null");
            $.lowerLimit = Objects.requireNonNull($.lowerLimit, "expected parameter 'lowerLimit' to be non-null");
            $.upperLimit = Objects.requireNonNull($.upperLimit, "expected parameter 'upperLimit' to be non-null");
            return $;
        }
    }

}
