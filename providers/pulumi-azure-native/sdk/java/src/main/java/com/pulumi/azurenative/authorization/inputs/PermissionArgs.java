// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.authorization.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Role definition permissions.
 * 
 */
public final class PermissionArgs extends com.pulumi.resources.ResourceArgs {

    public static final PermissionArgs Empty = new PermissionArgs();

    /**
     * Allowed actions.
     * 
     */
    @Import(name="actions")
    private @Nullable Output<List<String>> actions;

    /**
     * @return Allowed actions.
     * 
     */
    public Optional<Output<List<String>>> actions() {
        return Optional.ofNullable(this.actions);
    }

    /**
     * Allowed Data actions.
     * 
     */
    @Import(name="dataActions")
    private @Nullable Output<List<String>> dataActions;

    /**
     * @return Allowed Data actions.
     * 
     */
    public Optional<Output<List<String>>> dataActions() {
        return Optional.ofNullable(this.dataActions);
    }

    /**
     * Denied actions.
     * 
     */
    @Import(name="notActions")
    private @Nullable Output<List<String>> notActions;

    /**
     * @return Denied actions.
     * 
     */
    public Optional<Output<List<String>>> notActions() {
        return Optional.ofNullable(this.notActions);
    }

    /**
     * Denied Data actions.
     * 
     */
    @Import(name="notDataActions")
    private @Nullable Output<List<String>> notDataActions;

    /**
     * @return Denied Data actions.
     * 
     */
    public Optional<Output<List<String>>> notDataActions() {
        return Optional.ofNullable(this.notDataActions);
    }

    private PermissionArgs() {}

    private PermissionArgs(PermissionArgs $) {
        this.actions = $.actions;
        this.dataActions = $.dataActions;
        this.notActions = $.notActions;
        this.notDataActions = $.notDataActions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PermissionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PermissionArgs $;

        public Builder() {
            $ = new PermissionArgs();
        }

        public Builder(PermissionArgs defaults) {
            $ = new PermissionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param actions Allowed actions.
         * 
         * @return builder
         * 
         */
        public Builder actions(@Nullable Output<List<String>> actions) {
            $.actions = actions;
            return this;
        }

        /**
         * @param actions Allowed actions.
         * 
         * @return builder
         * 
         */
        public Builder actions(List<String> actions) {
            return actions(Output.of(actions));
        }

        /**
         * @param actions Allowed actions.
         * 
         * @return builder
         * 
         */
        public Builder actions(String... actions) {
            return actions(List.of(actions));
        }

        /**
         * @param dataActions Allowed Data actions.
         * 
         * @return builder
         * 
         */
        public Builder dataActions(@Nullable Output<List<String>> dataActions) {
            $.dataActions = dataActions;
            return this;
        }

        /**
         * @param dataActions Allowed Data actions.
         * 
         * @return builder
         * 
         */
        public Builder dataActions(List<String> dataActions) {
            return dataActions(Output.of(dataActions));
        }

        /**
         * @param dataActions Allowed Data actions.
         * 
         * @return builder
         * 
         */
        public Builder dataActions(String... dataActions) {
            return dataActions(List.of(dataActions));
        }

        /**
         * @param notActions Denied actions.
         * 
         * @return builder
         * 
         */
        public Builder notActions(@Nullable Output<List<String>> notActions) {
            $.notActions = notActions;
            return this;
        }

        /**
         * @param notActions Denied actions.
         * 
         * @return builder
         * 
         */
        public Builder notActions(List<String> notActions) {
            return notActions(Output.of(notActions));
        }

        /**
         * @param notActions Denied actions.
         * 
         * @return builder
         * 
         */
        public Builder notActions(String... notActions) {
            return notActions(List.of(notActions));
        }

        /**
         * @param notDataActions Denied Data actions.
         * 
         * @return builder
         * 
         */
        public Builder notDataActions(@Nullable Output<List<String>> notDataActions) {
            $.notDataActions = notDataActions;
            return this;
        }

        /**
         * @param notDataActions Denied Data actions.
         * 
         * @return builder
         * 
         */
        public Builder notDataActions(List<String> notDataActions) {
            return notDataActions(Output.of(notDataActions));
        }

        /**
         * @param notDataActions Denied Data actions.
         * 
         * @return builder
         * 
         */
        public Builder notDataActions(String... notDataActions) {
            return notDataActions(List.of(notDataActions));
        }

        public PermissionArgs build() {
            return $;
        }
    }

}
