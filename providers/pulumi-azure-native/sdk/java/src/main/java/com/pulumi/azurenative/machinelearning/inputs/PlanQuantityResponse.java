// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.machinelearning.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;


/**
 * Represents the quantity a commitment plan provides of a metered resource.
 * 
 */
public final class PlanQuantityResponse extends com.pulumi.resources.InvokeArgs {

    public static final PlanQuantityResponse Empty = new PlanQuantityResponse();

    /**
     * The quantity added to the commitment plan at an interval specified by its allowance frequency.
     * 
     */
    @Import(name="allowance", required=true)
    private Double allowance;

    public Double allowance() {
        return this.allowance;
    }

    /**
     * The quantity available to the plan the last time usage was calculated.
     * 
     */
    @Import(name="amount", required=true)
    private Double amount;

    public Double amount() {
        return this.amount;
    }

    /**
     * The Azure meter for usage against included quantities.
     * 
     */
    @Import(name="includedQuantityMeter", required=true)
    private String includedQuantityMeter;

    public String includedQuantityMeter() {
        return this.includedQuantityMeter;
    }

    /**
     * The Azure meter for usage which exceeds included quantities.
     * 
     */
    @Import(name="overageMeter", required=true)
    private String overageMeter;

    public String overageMeter() {
        return this.overageMeter;
    }

    private PlanQuantityResponse() {}

    private PlanQuantityResponse(PlanQuantityResponse $) {
        this.allowance = $.allowance;
        this.amount = $.amount;
        this.includedQuantityMeter = $.includedQuantityMeter;
        this.overageMeter = $.overageMeter;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PlanQuantityResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PlanQuantityResponse $;

        public Builder() {
            $ = new PlanQuantityResponse();
        }

        public Builder(PlanQuantityResponse defaults) {
            $ = new PlanQuantityResponse(Objects.requireNonNull(defaults));
        }

        public Builder allowance(Double allowance) {
            $.allowance = allowance;
            return this;
        }

        public Builder amount(Double amount) {
            $.amount = amount;
            return this;
        }

        public Builder includedQuantityMeter(String includedQuantityMeter) {
            $.includedQuantityMeter = includedQuantityMeter;
            return this;
        }

        public Builder overageMeter(String overageMeter) {
            $.overageMeter = overageMeter;
            return this;
        }

        public PlanQuantityResponse build() {
            $.allowance = Objects.requireNonNull($.allowance, "expected parameter 'allowance' to be non-null");
            $.amount = Objects.requireNonNull($.amount, "expected parameter 'amount' to be non-null");
            $.includedQuantityMeter = Objects.requireNonNull($.includedQuantityMeter, "expected parameter 'includedQuantityMeter' to be non-null");
            $.overageMeter = Objects.requireNonNull($.overageMeter, "expected parameter 'overageMeter' to be non-null");
            return $;
        }
    }

}
