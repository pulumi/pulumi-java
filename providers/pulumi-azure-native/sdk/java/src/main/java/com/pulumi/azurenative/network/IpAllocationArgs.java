// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network;

import com.pulumi.azurenative.network.enums.IPVersion;
import com.pulumi.azurenative.network.enums.IpAllocationType;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IpAllocationArgs extends com.pulumi.resources.ResourceArgs {

    public static final IpAllocationArgs Empty = new IpAllocationArgs();

    /**
     * IpAllocation tags.
     * 
     */
    @Import(name="allocationTags")
    private @Nullable Output<Map<String,String>> allocationTags;

    public Optional<Output<Map<String,String>>> allocationTags() {
        return Optional.ofNullable(this.allocationTags);
    }

    /**
     * Resource ID.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The name of the IpAllocation.
     * 
     */
    @Import(name="ipAllocationName")
    private @Nullable Output<String> ipAllocationName;

    public Optional<Output<String>> ipAllocationName() {
        return Optional.ofNullable(this.ipAllocationName);
    }

    /**
     * The IPAM allocation ID.
     * 
     */
    @Import(name="ipamAllocationId")
    private @Nullable Output<String> ipamAllocationId;

    public Optional<Output<String>> ipamAllocationId() {
        return Optional.ofNullable(this.ipamAllocationId);
    }

    /**
     * Resource location.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The address prefix for the IpAllocation.
     * 
     */
    @Import(name="prefix")
    private @Nullable Output<String> prefix;

    public Optional<Output<String>> prefix() {
        return Optional.ofNullable(this.prefix);
    }

    /**
     * The address prefix length for the IpAllocation.
     * 
     */
    @Import(name="prefixLength")
    private @Nullable Output<Integer> prefixLength;

    public Optional<Output<Integer>> prefixLength() {
        return Optional.ofNullable(this.prefixLength);
    }

    /**
     * The address prefix Type for the IpAllocation.
     * 
     */
    @Import(name="prefixType")
    private @Nullable Output<Either<String,IPVersion>> prefixType;

    public Optional<Output<Either<String,IPVersion>>> prefixType() {
        return Optional.ofNullable(this.prefixType);
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The type for the IpAllocation.
     * 
     */
    @Import(name="type")
    private @Nullable Output<Either<String,IpAllocationType>> type;

    public Optional<Output<Either<String,IpAllocationType>>> type() {
        return Optional.ofNullable(this.type);
    }

    private IpAllocationArgs() {}

    private IpAllocationArgs(IpAllocationArgs $) {
        this.allocationTags = $.allocationTags;
        this.id = $.id;
        this.ipAllocationName = $.ipAllocationName;
        this.ipamAllocationId = $.ipamAllocationId;
        this.location = $.location;
        this.prefix = $.prefix;
        this.prefixLength = $.prefixLength;
        this.prefixType = $.prefixType;
        this.resourceGroupName = $.resourceGroupName;
        this.tags = $.tags;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IpAllocationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IpAllocationArgs $;

        public Builder() {
            $ = new IpAllocationArgs();
        }

        public Builder(IpAllocationArgs defaults) {
            $ = new IpAllocationArgs(Objects.requireNonNull(defaults));
        }

        public Builder allocationTags(@Nullable Output<Map<String,String>> allocationTags) {
            $.allocationTags = allocationTags;
            return this;
        }

        public Builder allocationTags(Map<String,String> allocationTags) {
            return allocationTags(Output.of(allocationTags));
        }

        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        public Builder id(String id) {
            return id(Output.of(id));
        }

        public Builder ipAllocationName(@Nullable Output<String> ipAllocationName) {
            $.ipAllocationName = ipAllocationName;
            return this;
        }

        public Builder ipAllocationName(String ipAllocationName) {
            return ipAllocationName(Output.of(ipAllocationName));
        }

        public Builder ipamAllocationId(@Nullable Output<String> ipamAllocationId) {
            $.ipamAllocationId = ipamAllocationId;
            return this;
        }

        public Builder ipamAllocationId(String ipamAllocationId) {
            return ipamAllocationId(Output.of(ipamAllocationId));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder prefix(@Nullable Output<String> prefix) {
            $.prefix = prefix;
            return this;
        }

        public Builder prefix(String prefix) {
            return prefix(Output.of(prefix));
        }

        public Builder prefixLength(@Nullable Output<Integer> prefixLength) {
            $.prefixLength = prefixLength;
            return this;
        }

        public Builder prefixLength(Integer prefixLength) {
            return prefixLength(Output.of(prefixLength));
        }

        public Builder prefixType(@Nullable Output<Either<String,IPVersion>> prefixType) {
            $.prefixType = prefixType;
            return this;
        }

        public Builder prefixType(Either<String,IPVersion> prefixType) {
            return prefixType(Output.of(prefixType));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public Builder type(@Nullable Output<Either<String,IpAllocationType>> type) {
            $.type = type;
            return this;
        }

        public Builder type(Either<String,IpAllocationType> type) {
            return type(Output.of(type));
        }

        public IpAllocationArgs build() {
            $.prefixLength = Codegen.integerProp("prefixLength").output().arg($.prefixLength).def(0).getNullable();
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
