// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.insights.inputs;

import com.pulumi.azurenative.insights.enums.AggregationTypeEnum;
import com.pulumi.azurenative.insights.enums.Operator;
import com.pulumi.azurenative.insights.inputs.MetricDimensionArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Criterion to filter metrics.
 * 
 */
public final class MetricCriteriaArgs extends com.pulumi.resources.ResourceArgs {

    public static final MetricCriteriaArgs Empty = new MetricCriteriaArgs();

    /**
     * Specifies the type of threshold criteria
     * Expected value is &#39;StaticThresholdCriterion&#39;.
     * 
     */
    @Import(name="criterionType", required=true)
    private Output<String> criterionType;

    public Output<String> criterionType() {
        return this.criterionType;
    }

    /**
     * List of dimension conditions.
     * 
     */
    @Import(name="dimensions")
    private @Nullable Output<List<MetricDimensionArgs>> dimensions;

    public Optional<Output<List<MetricDimensionArgs>>> dimensions() {
        return Optional.ofNullable(this.dimensions);
    }

    /**
     * Name of the metric.
     * 
     */
    @Import(name="metricName", required=true)
    private Output<String> metricName;

    public Output<String> metricName() {
        return this.metricName;
    }

    /**
     * Namespace of the metric.
     * 
     */
    @Import(name="metricNamespace")
    private @Nullable Output<String> metricNamespace;

    public Optional<Output<String>> metricNamespace() {
        return Optional.ofNullable(this.metricNamespace);
    }

    /**
     * Name of the criteria.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    public Output<String> name() {
        return this.name;
    }

    /**
     * the criteria operator.
     * 
     */
    @Import(name="operator", required=true)
    private Output<Either<String,Operator>> operator;

    public Output<Either<String,Operator>> operator() {
        return this.operator;
    }

    /**
     * Allows creating an alert rule on a custom metric that isn&#39;t yet emitted, by causing the metric validation to be skipped.
     * 
     */
    @Import(name="skipMetricValidation")
    private @Nullable Output<Boolean> skipMetricValidation;

    public Optional<Output<Boolean>> skipMetricValidation() {
        return Optional.ofNullable(this.skipMetricValidation);
    }

    /**
     * the criteria threshold value that activates the alert.
     * 
     */
    @Import(name="threshold", required=true)
    private Output<Double> threshold;

    public Output<Double> threshold() {
        return this.threshold;
    }

    /**
     * the criteria time aggregation types.
     * 
     */
    @Import(name="timeAggregation", required=true)
    private Output<Either<String,AggregationTypeEnum>> timeAggregation;

    public Output<Either<String,AggregationTypeEnum>> timeAggregation() {
        return this.timeAggregation;
    }

    private MetricCriteriaArgs() {}

    private MetricCriteriaArgs(MetricCriteriaArgs $) {
        this.criterionType = $.criterionType;
        this.dimensions = $.dimensions;
        this.metricName = $.metricName;
        this.metricNamespace = $.metricNamespace;
        this.name = $.name;
        this.operator = $.operator;
        this.skipMetricValidation = $.skipMetricValidation;
        this.threshold = $.threshold;
        this.timeAggregation = $.timeAggregation;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MetricCriteriaArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MetricCriteriaArgs $;

        public Builder() {
            $ = new MetricCriteriaArgs();
        }

        public Builder(MetricCriteriaArgs defaults) {
            $ = new MetricCriteriaArgs(Objects.requireNonNull(defaults));
        }

        public Builder criterionType(Output<String> criterionType) {
            $.criterionType = criterionType;
            return this;
        }

        public Builder criterionType(String criterionType) {
            return criterionType(Output.of(criterionType));
        }

        public Builder dimensions(@Nullable Output<List<MetricDimensionArgs>> dimensions) {
            $.dimensions = dimensions;
            return this;
        }

        public Builder dimensions(List<MetricDimensionArgs> dimensions) {
            return dimensions(Output.of(dimensions));
        }

        public Builder dimensions(MetricDimensionArgs... dimensions) {
            return dimensions(List.of(dimensions));
        }

        public Builder metricName(Output<String> metricName) {
            $.metricName = metricName;
            return this;
        }

        public Builder metricName(String metricName) {
            return metricName(Output.of(metricName));
        }

        public Builder metricNamespace(@Nullable Output<String> metricNamespace) {
            $.metricNamespace = metricNamespace;
            return this;
        }

        public Builder metricNamespace(String metricNamespace) {
            return metricNamespace(Output.of(metricNamespace));
        }

        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder operator(Output<Either<String,Operator>> operator) {
            $.operator = operator;
            return this;
        }

        public Builder operator(Either<String,Operator> operator) {
            return operator(Output.of(operator));
        }

        public Builder operator(String operator) {
            return operator(Either.ofLeft(operator));
        }

        public Builder operator(Operator operator) {
            return operator(Either.ofRight(operator));
        }

        public Builder skipMetricValidation(@Nullable Output<Boolean> skipMetricValidation) {
            $.skipMetricValidation = skipMetricValidation;
            return this;
        }

        public Builder skipMetricValidation(Boolean skipMetricValidation) {
            return skipMetricValidation(Output.of(skipMetricValidation));
        }

        public Builder threshold(Output<Double> threshold) {
            $.threshold = threshold;
            return this;
        }

        public Builder threshold(Double threshold) {
            return threshold(Output.of(threshold));
        }

        public Builder timeAggregation(Output<Either<String,AggregationTypeEnum>> timeAggregation) {
            $.timeAggregation = timeAggregation;
            return this;
        }

        public Builder timeAggregation(Either<String,AggregationTypeEnum> timeAggregation) {
            return timeAggregation(Output.of(timeAggregation));
        }

        public Builder timeAggregation(String timeAggregation) {
            return timeAggregation(Either.ofLeft(timeAggregation));
        }

        public Builder timeAggregation(AggregationTypeEnum timeAggregation) {
            return timeAggregation(Either.ofRight(timeAggregation));
        }

        public MetricCriteriaArgs build() {
            $.criterionType = Codegen.stringProp("criterionType").output().arg($.criterionType).require();
            $.metricName = Objects.requireNonNull($.metricName, "expected parameter 'metricName' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.operator = Objects.requireNonNull($.operator, "expected parameter 'operator' to be non-null");
            $.threshold = Objects.requireNonNull($.threshold, "expected parameter 'threshold' to be non-null");
            $.timeAggregation = Objects.requireNonNull($.timeAggregation, "expected parameter 'timeAggregation' to be non-null");
            return $;
        }
    }

}
