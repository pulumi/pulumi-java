// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.recoveryservices.inputs;

import com.pulumi.azurenative.recoveryservices.inputs.VMwareCbtNicDetailsResponse;
import com.pulumi.azurenative.recoveryservices.inputs.VMwareCbtProtectedDiskDetailsResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * VMwareCbt provider specific settings
 * 
 */
public final class VMwareCbtMigrationDetailsResponse extends com.pulumi.resources.InvokeArgs {

    public static final VMwareCbtMigrationDetailsResponse Empty = new VMwareCbtMigrationDetailsResponse();

    /**
     * The data mover RunAs account Id.
     * 
     */
    @Import(name="dataMoverRunAsAccountId", required=true)
    private String dataMoverRunAsAccountId;

    /**
     * @return The data mover RunAs account Id.
     * 
     */
    public String dataMoverRunAsAccountId() {
        return this.dataMoverRunAsAccountId;
    }

    /**
     * Gets the instance type.
     * Expected value is &#39;VMwareCbt&#39;.
     * 
     */
    @Import(name="instanceType", required=true)
    private String instanceType;

    /**
     * @return Gets the instance type.
     * Expected value is &#39;VMwareCbt&#39;.
     * 
     */
    public String instanceType() {
        return this.instanceType;
    }

    /**
     * The last recovery point received time.
     * 
     */
    @Import(name="lastRecoveryPointReceived", required=true)
    private String lastRecoveryPointReceived;

    /**
     * @return The last recovery point received time.
     * 
     */
    public String lastRecoveryPointReceived() {
        return this.lastRecoveryPointReceived;
    }

    /**
     * License Type of the VM to be used.
     * 
     */
    @Import(name="licenseType")
    private @Nullable String licenseType;

    /**
     * @return License Type of the VM to be used.
     * 
     */
    public Optional<String> licenseType() {
        return Optional.ofNullable(this.licenseType);
    }

    /**
     * The recovery point Id to which the VM was migrated.
     * 
     */
    @Import(name="migrationRecoveryPointId", required=true)
    private String migrationRecoveryPointId;

    /**
     * @return The recovery point Id to which the VM was migrated.
     * 
     */
    public String migrationRecoveryPointId() {
        return this.migrationRecoveryPointId;
    }

    /**
     * The type of the OS on the VM.
     * 
     */
    @Import(name="osType", required=true)
    private String osType;

    /**
     * @return The type of the OS on the VM.
     * 
     */
    public String osType() {
        return this.osType;
    }

    /**
     * The list of protected disks.
     * 
     */
    @Import(name="protectedDisks")
    private @Nullable List<VMwareCbtProtectedDiskDetailsResponse> protectedDisks;

    /**
     * @return The list of protected disks.
     * 
     */
    public Optional<List<VMwareCbtProtectedDiskDetailsResponse>> protectedDisks() {
        return Optional.ofNullable(this.protectedDisks);
    }

    /**
     * The snapshot RunAs account Id.
     * 
     */
    @Import(name="snapshotRunAsAccountId", required=true)
    private String snapshotRunAsAccountId;

    /**
     * @return The snapshot RunAs account Id.
     * 
     */
    public String snapshotRunAsAccountId() {
        return this.snapshotRunAsAccountId;
    }

    /**
     * The target availability set Id.
     * 
     */
    @Import(name="targetAvailabilitySetId")
    private @Nullable String targetAvailabilitySetId;

    /**
     * @return The target availability set Id.
     * 
     */
    public Optional<String> targetAvailabilitySetId() {
        return Optional.ofNullable(this.targetAvailabilitySetId);
    }

    /**
     * The target boot diagnostics storage account ARM Id.
     * 
     */
    @Import(name="targetBootDiagnosticsStorageAccountId")
    private @Nullable String targetBootDiagnosticsStorageAccountId;

    /**
     * @return The target boot diagnostics storage account ARM Id.
     * 
     */
    public Optional<String> targetBootDiagnosticsStorageAccountId() {
        return Optional.ofNullable(this.targetBootDiagnosticsStorageAccountId);
    }

    /**
     * The target location.
     * 
     */
    @Import(name="targetLocation", required=true)
    private String targetLocation;

    /**
     * @return The target location.
     * 
     */
    public String targetLocation() {
        return this.targetLocation;
    }

    /**
     * The target network Id.
     * 
     */
    @Import(name="targetNetworkId")
    private @Nullable String targetNetworkId;

    /**
     * @return The target network Id.
     * 
     */
    public Optional<String> targetNetworkId() {
        return Optional.ofNullable(this.targetNetworkId);
    }

    /**
     * The target resource group Id.
     * 
     */
    @Import(name="targetResourceGroupId")
    private @Nullable String targetResourceGroupId;

    /**
     * @return The target resource group Id.
     * 
     */
    public Optional<String> targetResourceGroupId() {
        return Optional.ofNullable(this.targetResourceGroupId);
    }

    /**
     * Target VM name.
     * 
     */
    @Import(name="targetVmName")
    private @Nullable String targetVmName;

    /**
     * @return Target VM name.
     * 
     */
    public Optional<String> targetVmName() {
        return Optional.ofNullable(this.targetVmName);
    }

    /**
     * The target VM size.
     * 
     */
    @Import(name="targetVmSize")
    private @Nullable String targetVmSize;

    /**
     * @return The target VM size.
     * 
     */
    public Optional<String> targetVmSize() {
        return Optional.ofNullable(this.targetVmSize);
    }

    /**
     * The network details.
     * 
     */
    @Import(name="vmNics")
    private @Nullable List<VMwareCbtNicDetailsResponse> vmNics;

    /**
     * @return The network details.
     * 
     */
    public Optional<List<VMwareCbtNicDetailsResponse>> vmNics() {
        return Optional.ofNullable(this.vmNics);
    }

    /**
     * The ARM Id of the VM discovered in VMware.
     * 
     */
    @Import(name="vmwareMachineId", required=true)
    private String vmwareMachineId;

    /**
     * @return The ARM Id of the VM discovered in VMware.
     * 
     */
    public String vmwareMachineId() {
        return this.vmwareMachineId;
    }

    private VMwareCbtMigrationDetailsResponse() {}

    private VMwareCbtMigrationDetailsResponse(VMwareCbtMigrationDetailsResponse $) {
        this.dataMoverRunAsAccountId = $.dataMoverRunAsAccountId;
        this.instanceType = $.instanceType;
        this.lastRecoveryPointReceived = $.lastRecoveryPointReceived;
        this.licenseType = $.licenseType;
        this.migrationRecoveryPointId = $.migrationRecoveryPointId;
        this.osType = $.osType;
        this.protectedDisks = $.protectedDisks;
        this.snapshotRunAsAccountId = $.snapshotRunAsAccountId;
        this.targetAvailabilitySetId = $.targetAvailabilitySetId;
        this.targetBootDiagnosticsStorageAccountId = $.targetBootDiagnosticsStorageAccountId;
        this.targetLocation = $.targetLocation;
        this.targetNetworkId = $.targetNetworkId;
        this.targetResourceGroupId = $.targetResourceGroupId;
        this.targetVmName = $.targetVmName;
        this.targetVmSize = $.targetVmSize;
        this.vmNics = $.vmNics;
        this.vmwareMachineId = $.vmwareMachineId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VMwareCbtMigrationDetailsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VMwareCbtMigrationDetailsResponse $;

        public Builder() {
            $ = new VMwareCbtMigrationDetailsResponse();
        }

        public Builder(VMwareCbtMigrationDetailsResponse defaults) {
            $ = new VMwareCbtMigrationDetailsResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param dataMoverRunAsAccountId The data mover RunAs account Id.
         * 
         * @return builder
         * 
         */
        public Builder dataMoverRunAsAccountId(String dataMoverRunAsAccountId) {
            $.dataMoverRunAsAccountId = dataMoverRunAsAccountId;
            return this;
        }

        /**
         * @param instanceType Gets the instance type.
         * Expected value is &#39;VMwareCbt&#39;.
         * 
         * @return builder
         * 
         */
        public Builder instanceType(String instanceType) {
            $.instanceType = instanceType;
            return this;
        }

        /**
         * @param lastRecoveryPointReceived The last recovery point received time.
         * 
         * @return builder
         * 
         */
        public Builder lastRecoveryPointReceived(String lastRecoveryPointReceived) {
            $.lastRecoveryPointReceived = lastRecoveryPointReceived;
            return this;
        }

        /**
         * @param licenseType License Type of the VM to be used.
         * 
         * @return builder
         * 
         */
        public Builder licenseType(@Nullable String licenseType) {
            $.licenseType = licenseType;
            return this;
        }

        /**
         * @param migrationRecoveryPointId The recovery point Id to which the VM was migrated.
         * 
         * @return builder
         * 
         */
        public Builder migrationRecoveryPointId(String migrationRecoveryPointId) {
            $.migrationRecoveryPointId = migrationRecoveryPointId;
            return this;
        }

        /**
         * @param osType The type of the OS on the VM.
         * 
         * @return builder
         * 
         */
        public Builder osType(String osType) {
            $.osType = osType;
            return this;
        }

        /**
         * @param protectedDisks The list of protected disks.
         * 
         * @return builder
         * 
         */
        public Builder protectedDisks(@Nullable List<VMwareCbtProtectedDiskDetailsResponse> protectedDisks) {
            $.protectedDisks = protectedDisks;
            return this;
        }

        /**
         * @param protectedDisks The list of protected disks.
         * 
         * @return builder
         * 
         */
        public Builder protectedDisks(VMwareCbtProtectedDiskDetailsResponse... protectedDisks) {
            return protectedDisks(List.of(protectedDisks));
        }

        /**
         * @param snapshotRunAsAccountId The snapshot RunAs account Id.
         * 
         * @return builder
         * 
         */
        public Builder snapshotRunAsAccountId(String snapshotRunAsAccountId) {
            $.snapshotRunAsAccountId = snapshotRunAsAccountId;
            return this;
        }

        /**
         * @param targetAvailabilitySetId The target availability set Id.
         * 
         * @return builder
         * 
         */
        public Builder targetAvailabilitySetId(@Nullable String targetAvailabilitySetId) {
            $.targetAvailabilitySetId = targetAvailabilitySetId;
            return this;
        }

        /**
         * @param targetBootDiagnosticsStorageAccountId The target boot diagnostics storage account ARM Id.
         * 
         * @return builder
         * 
         */
        public Builder targetBootDiagnosticsStorageAccountId(@Nullable String targetBootDiagnosticsStorageAccountId) {
            $.targetBootDiagnosticsStorageAccountId = targetBootDiagnosticsStorageAccountId;
            return this;
        }

        /**
         * @param targetLocation The target location.
         * 
         * @return builder
         * 
         */
        public Builder targetLocation(String targetLocation) {
            $.targetLocation = targetLocation;
            return this;
        }

        /**
         * @param targetNetworkId The target network Id.
         * 
         * @return builder
         * 
         */
        public Builder targetNetworkId(@Nullable String targetNetworkId) {
            $.targetNetworkId = targetNetworkId;
            return this;
        }

        /**
         * @param targetResourceGroupId The target resource group Id.
         * 
         * @return builder
         * 
         */
        public Builder targetResourceGroupId(@Nullable String targetResourceGroupId) {
            $.targetResourceGroupId = targetResourceGroupId;
            return this;
        }

        /**
         * @param targetVmName Target VM name.
         * 
         * @return builder
         * 
         */
        public Builder targetVmName(@Nullable String targetVmName) {
            $.targetVmName = targetVmName;
            return this;
        }

        /**
         * @param targetVmSize The target VM size.
         * 
         * @return builder
         * 
         */
        public Builder targetVmSize(@Nullable String targetVmSize) {
            $.targetVmSize = targetVmSize;
            return this;
        }

        /**
         * @param vmNics The network details.
         * 
         * @return builder
         * 
         */
        public Builder vmNics(@Nullable List<VMwareCbtNicDetailsResponse> vmNics) {
            $.vmNics = vmNics;
            return this;
        }

        /**
         * @param vmNics The network details.
         * 
         * @return builder
         * 
         */
        public Builder vmNics(VMwareCbtNicDetailsResponse... vmNics) {
            return vmNics(List.of(vmNics));
        }

        /**
         * @param vmwareMachineId The ARM Id of the VM discovered in VMware.
         * 
         * @return builder
         * 
         */
        public Builder vmwareMachineId(String vmwareMachineId) {
            $.vmwareMachineId = vmwareMachineId;
            return this;
        }

        public VMwareCbtMigrationDetailsResponse build() {
            $.dataMoverRunAsAccountId = Objects.requireNonNull($.dataMoverRunAsAccountId, "expected parameter 'dataMoverRunAsAccountId' to be non-null");
            $.instanceType = Codegen.stringProp("instanceType").arg($.instanceType).require();
            $.lastRecoveryPointReceived = Objects.requireNonNull($.lastRecoveryPointReceived, "expected parameter 'lastRecoveryPointReceived' to be non-null");
            $.migrationRecoveryPointId = Objects.requireNonNull($.migrationRecoveryPointId, "expected parameter 'migrationRecoveryPointId' to be non-null");
            $.osType = Objects.requireNonNull($.osType, "expected parameter 'osType' to be non-null");
            $.snapshotRunAsAccountId = Objects.requireNonNull($.snapshotRunAsAccountId, "expected parameter 'snapshotRunAsAccountId' to be non-null");
            $.targetLocation = Objects.requireNonNull($.targetLocation, "expected parameter 'targetLocation' to be non-null");
            $.vmwareMachineId = Objects.requireNonNull($.vmwareMachineId, "expected parameter 'vmwareMachineId' to be non-null");
            return $;
        }
    }

}
