// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.web.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ListConnectionKeysArgs extends com.pulumi.resources.InvokeArgs {

    public static final ListConnectionKeysArgs Empty = new ListConnectionKeysArgs();

    /**
     * The connection name.
     * 
     */
    @Import(name="connectionName", required=true)
    private Output<String> connectionName;

    /**
     * @return The connection name.
     * 
     */
    public Output<String> connectionName() {
        return this.connectionName;
    }

    /**
     * Resource Id
     * 
     */
    @Import(name="id")
    private Output</* @Nullable */ String> id;

    /**
     * @return Resource Id
     * 
     */
    public Output</* @Nullable */ String> id() {
        return this.id;
    }

    /**
     * Kind of resource
     * 
     */
    @Import(name="kind")
    private Output</* @Nullable */ String> kind;

    /**
     * @return Kind of resource
     * 
     */
    public Output</* @Nullable */ String> kind() {
        return this.kind;
    }

    /**
     * Resource Location
     * 
     */
    @Import(name="location")
    private Output</* @Nullable */ String> location;

    /**
     * @return Resource Location
     * 
     */
    public Output</* @Nullable */ String> location() {
        return this.location;
    }

    /**
     * Resource Name
     * 
     */
    @Import(name="name")
    private Output</* @Nullable */ String> name;

    /**
     * @return Resource Name
     * 
     */
    public Output</* @Nullable */ String> name() {
        return this.name;
    }

    /**
     * The resource group name.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The resource group name.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Resource tags
     * 
     */
    @Import(name="tags")
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return Resource tags
     * 
     */
    public Output</* @Nullable */ Map<String,String>> tags() {
        return this.tags;
    }

    /**
     * Resource type
     * 
     */
    @Import(name="type")
    private Output</* @Nullable */ String> type;

    /**
     * @return Resource type
     * 
     */
    public Output</* @Nullable */ String> type() {
        return this.type;
    }

    /**
     * time span for how long the keys will be valid
     * 
     */
    @Import(name="validityTimeSpan")
    private Output</* @Nullable */ String> validityTimeSpan;

    /**
     * @return time span for how long the keys will be valid
     * 
     */
    public Output</* @Nullable */ String> validityTimeSpan() {
        return this.validityTimeSpan;
    }

    private ListConnectionKeysArgs() {}

    private ListConnectionKeysArgs(ListConnectionKeysArgs $) {
        this.connectionName = $.connectionName;
        this.id = $.id;
        this.kind = $.kind;
        this.location = $.location;
        this.name = $.name;
        this.resourceGroupName = $.resourceGroupName;
        this.tags = $.tags;
        this.type = $.type;
        this.validityTimeSpan = $.validityTimeSpan;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ListConnectionKeysArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ListConnectionKeysArgs $;

        public Builder() {
            $ = new ListConnectionKeysArgs();
        }

        public Builder(ListConnectionKeysArgs defaults) {
            $ = new ListConnectionKeysArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param connectionName The connection name.
         * 
         * @return builder
         * 
         */
        public Builder connectionName(Output<String> connectionName) {
            $.connectionName = connectionName;
            return this;
        }

        /**
         * @param connectionName The connection name.
         * 
         * @return builder
         * 
         */
        public Builder connectionName(String connectionName) {
            return connectionName(Output.of(connectionName));
        }

        /**
         * @param id Resource Id
         * 
         * @return builder
         * 
         */
        public Builder id(Output</* @Nullable */ String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id Resource Id
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable String id) {
            return id(Output.of(id));
        }

        /**
         * @param kind Kind of resource
         * 
         * @return builder
         * 
         */
        public Builder kind(Output</* @Nullable */ String> kind) {
            $.kind = kind;
            return this;
        }

        /**
         * @param kind Kind of resource
         * 
         * @return builder
         * 
         */
        public Builder kind(@Nullable String kind) {
            return kind(Output.of(kind));
        }

        /**
         * @param location Resource Location
         * 
         * @return builder
         * 
         */
        public Builder location(Output</* @Nullable */ String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Resource Location
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable String location) {
            return location(Output.of(location));
        }

        /**
         * @param name Resource Name
         * 
         * @return builder
         * 
         */
        public Builder name(Output</* @Nullable */ String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Resource Name
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            return name(Output.of(name));
        }

        /**
         * @param resourceGroupName The resource group name.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The resource group name.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param tags Resource tags
         * 
         * @return builder
         * 
         */
        public Builder tags(Output</* @Nullable */ Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Resource tags
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param type Resource type
         * 
         * @return builder
         * 
         */
        public Builder type(Output</* @Nullable */ String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Resource type
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable String type) {
            return type(Output.of(type));
        }

        /**
         * @param validityTimeSpan time span for how long the keys will be valid
         * 
         * @return builder
         * 
         */
        public Builder validityTimeSpan(Output</* @Nullable */ String> validityTimeSpan) {
            $.validityTimeSpan = validityTimeSpan;
            return this;
        }

        /**
         * @param validityTimeSpan time span for how long the keys will be valid
         * 
         * @return builder
         * 
         */
        public Builder validityTimeSpan(@Nullable String validityTimeSpan) {
            return validityTimeSpan(Output.of(validityTimeSpan));
        }

        public ListConnectionKeysArgs build() {
            $.connectionName = Objects.requireNonNull($.connectionName, "expected parameter 'connectionName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
