// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.servicefabric.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ArmRollingUpgradeMonitoringPolicyResponse {
    /**
     * @return The activation Mode of the service package
     * 
     */
    private final @Nullable String failureAction;
    /**
     * @return The amount of time to retry health evaluation when the application or cluster is unhealthy before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
     * 
     */
    private final @Nullable String healthCheckRetryTimeout;
    /**
     * @return The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
     * 
     */
    private final @Nullable String healthCheckStableDuration;
    /**
     * @return The amount of time to wait after completing an upgrade domain before applying health policies. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
     * 
     */
    private final @Nullable String healthCheckWaitDuration;
    /**
     * @return The amount of time each upgrade domain has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
     * 
     */
    private final @Nullable String upgradeDomainTimeout;
    /**
     * @return The amount of time the overall upgrade has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
     * 
     */
    private final @Nullable String upgradeTimeout;

    @CustomType.Constructor
    private ArmRollingUpgradeMonitoringPolicyResponse(
        @CustomType.Parameter("failureAction") @Nullable String failureAction,
        @CustomType.Parameter("healthCheckRetryTimeout") @Nullable String healthCheckRetryTimeout,
        @CustomType.Parameter("healthCheckStableDuration") @Nullable String healthCheckStableDuration,
        @CustomType.Parameter("healthCheckWaitDuration") @Nullable String healthCheckWaitDuration,
        @CustomType.Parameter("upgradeDomainTimeout") @Nullable String upgradeDomainTimeout,
        @CustomType.Parameter("upgradeTimeout") @Nullable String upgradeTimeout) {
        this.failureAction = failureAction;
        this.healthCheckRetryTimeout = healthCheckRetryTimeout;
        this.healthCheckStableDuration = healthCheckStableDuration;
        this.healthCheckWaitDuration = healthCheckWaitDuration;
        this.upgradeDomainTimeout = upgradeDomainTimeout;
        this.upgradeTimeout = upgradeTimeout;
    }

    /**
     * @return The activation Mode of the service package
     * 
     */
    public Optional<String> failureAction() {
        return Optional.ofNullable(this.failureAction);
    }
    /**
     * @return The amount of time to retry health evaluation when the application or cluster is unhealthy before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
     * 
     */
    public Optional<String> healthCheckRetryTimeout() {
        return Optional.ofNullable(this.healthCheckRetryTimeout);
    }
    /**
     * @return The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
     * 
     */
    public Optional<String> healthCheckStableDuration() {
        return Optional.ofNullable(this.healthCheckStableDuration);
    }
    /**
     * @return The amount of time to wait after completing an upgrade domain before applying health policies. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
     * 
     */
    public Optional<String> healthCheckWaitDuration() {
        return Optional.ofNullable(this.healthCheckWaitDuration);
    }
    /**
     * @return The amount of time each upgrade domain has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
     * 
     */
    public Optional<String> upgradeDomainTimeout() {
        return Optional.ofNullable(this.upgradeDomainTimeout);
    }
    /**
     * @return The amount of time the overall upgrade has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
     * 
     */
    public Optional<String> upgradeTimeout() {
        return Optional.ofNullable(this.upgradeTimeout);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ArmRollingUpgradeMonitoringPolicyResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String failureAction;
        private @Nullable String healthCheckRetryTimeout;
        private @Nullable String healthCheckStableDuration;
        private @Nullable String healthCheckWaitDuration;
        private @Nullable String upgradeDomainTimeout;
        private @Nullable String upgradeTimeout;

        public Builder() {
    	      // Empty
        }

        public Builder(ArmRollingUpgradeMonitoringPolicyResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.failureAction = defaults.failureAction;
    	      this.healthCheckRetryTimeout = defaults.healthCheckRetryTimeout;
    	      this.healthCheckStableDuration = defaults.healthCheckStableDuration;
    	      this.healthCheckWaitDuration = defaults.healthCheckWaitDuration;
    	      this.upgradeDomainTimeout = defaults.upgradeDomainTimeout;
    	      this.upgradeTimeout = defaults.upgradeTimeout;
        }

        public Builder failureAction(@Nullable String failureAction) {
            this.failureAction = failureAction;
            return this;
        }
        public Builder healthCheckRetryTimeout(@Nullable String healthCheckRetryTimeout) {
            this.healthCheckRetryTimeout = healthCheckRetryTimeout;
            return this;
        }
        public Builder healthCheckStableDuration(@Nullable String healthCheckStableDuration) {
            this.healthCheckStableDuration = healthCheckStableDuration;
            return this;
        }
        public Builder healthCheckWaitDuration(@Nullable String healthCheckWaitDuration) {
            this.healthCheckWaitDuration = healthCheckWaitDuration;
            return this;
        }
        public Builder upgradeDomainTimeout(@Nullable String upgradeDomainTimeout) {
            this.upgradeDomainTimeout = upgradeDomainTimeout;
            return this;
        }
        public Builder upgradeTimeout(@Nullable String upgradeTimeout) {
            this.upgradeTimeout = upgradeTimeout;
            return this;
        }        public ArmRollingUpgradeMonitoringPolicyResponse build() {
            return new ArmRollingUpgradeMonitoringPolicyResponse(failureAction, healthCheckRetryTimeout, healthCheckStableDuration, healthCheckWaitDuration, upgradeDomainTimeout, upgradeTimeout);
        }
    }
}
