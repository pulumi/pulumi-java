// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.logic;

import com.pulumi.azurenative.logic.inputs.IntegrationServiceEnvironmentManagedApiDeploymentParametersArgs;
import com.pulumi.azurenative.logic.inputs.ResourceReferenceArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IntegrationServiceEnvironmentManagedApiArgs extends com.pulumi.resources.ResourceArgs {

    public static final IntegrationServiceEnvironmentManagedApiArgs Empty = new IntegrationServiceEnvironmentManagedApiArgs();

    /**
     * The api name.
     * 
     */
    @Import(name="apiName")
    private @Nullable Output<String> apiName;

    public Optional<Output<String>> apiName() {
        return Optional.ofNullable(this.apiName);
    }

    /**
     * The integration service environment managed api deployment parameters.
     * 
     */
    @Import(name="deploymentParameters")
    private @Nullable Output<IntegrationServiceEnvironmentManagedApiDeploymentParametersArgs> deploymentParameters;

    public Optional<Output<IntegrationServiceEnvironmentManagedApiDeploymentParametersArgs>> deploymentParameters() {
        return Optional.ofNullable(this.deploymentParameters);
    }

    /**
     * The integration service environment reference.
     * 
     */
    @Import(name="integrationServiceEnvironment")
    private @Nullable Output<ResourceReferenceArgs> integrationServiceEnvironment;

    public Optional<Output<ResourceReferenceArgs>> integrationServiceEnvironment() {
        return Optional.ofNullable(this.integrationServiceEnvironment);
    }

    /**
     * The integration service environment name.
     * 
     */
    @Import(name="integrationServiceEnvironmentName", required=true)
    private Output<String> integrationServiceEnvironmentName;

    public Output<String> integrationServiceEnvironmentName() {
        return this.integrationServiceEnvironmentName;
    }

    /**
     * The resource location.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The resource group name.
     * 
     */
    @Import(name="resourceGroup", required=true)
    private Output<String> resourceGroup;

    public Output<String> resourceGroup() {
        return this.resourceGroup;
    }

    /**
     * The resource tags.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private IntegrationServiceEnvironmentManagedApiArgs() {}

    private IntegrationServiceEnvironmentManagedApiArgs(IntegrationServiceEnvironmentManagedApiArgs $) {
        this.apiName = $.apiName;
        this.deploymentParameters = $.deploymentParameters;
        this.integrationServiceEnvironment = $.integrationServiceEnvironment;
        this.integrationServiceEnvironmentName = $.integrationServiceEnvironmentName;
        this.location = $.location;
        this.resourceGroup = $.resourceGroup;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IntegrationServiceEnvironmentManagedApiArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IntegrationServiceEnvironmentManagedApiArgs $;

        public Builder() {
            $ = new IntegrationServiceEnvironmentManagedApiArgs();
        }

        public Builder(IntegrationServiceEnvironmentManagedApiArgs defaults) {
            $ = new IntegrationServiceEnvironmentManagedApiArgs(Objects.requireNonNull(defaults));
        }

        public Builder apiName(@Nullable Output<String> apiName) {
            $.apiName = apiName;
            return this;
        }

        public Builder apiName(String apiName) {
            return apiName(Output.of(apiName));
        }

        public Builder deploymentParameters(@Nullable Output<IntegrationServiceEnvironmentManagedApiDeploymentParametersArgs> deploymentParameters) {
            $.deploymentParameters = deploymentParameters;
            return this;
        }

        public Builder deploymentParameters(IntegrationServiceEnvironmentManagedApiDeploymentParametersArgs deploymentParameters) {
            return deploymentParameters(Output.of(deploymentParameters));
        }

        public Builder integrationServiceEnvironment(@Nullable Output<ResourceReferenceArgs> integrationServiceEnvironment) {
            $.integrationServiceEnvironment = integrationServiceEnvironment;
            return this;
        }

        public Builder integrationServiceEnvironment(ResourceReferenceArgs integrationServiceEnvironment) {
            return integrationServiceEnvironment(Output.of(integrationServiceEnvironment));
        }

        public Builder integrationServiceEnvironmentName(Output<String> integrationServiceEnvironmentName) {
            $.integrationServiceEnvironmentName = integrationServiceEnvironmentName;
            return this;
        }

        public Builder integrationServiceEnvironmentName(String integrationServiceEnvironmentName) {
            return integrationServiceEnvironmentName(Output.of(integrationServiceEnvironmentName));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder resourceGroup(Output<String> resourceGroup) {
            $.resourceGroup = resourceGroup;
            return this;
        }

        public Builder resourceGroup(String resourceGroup) {
            return resourceGroup(Output.of(resourceGroup));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public IntegrationServiceEnvironmentManagedApiArgs build() {
            $.integrationServiceEnvironmentName = Objects.requireNonNull($.integrationServiceEnvironmentName, "expected parameter 'integrationServiceEnvironmentName' to be non-null");
            $.resourceGroup = Objects.requireNonNull($.resourceGroup, "expected parameter 'resourceGroup' to be non-null");
            return $;
        }
    }

}
