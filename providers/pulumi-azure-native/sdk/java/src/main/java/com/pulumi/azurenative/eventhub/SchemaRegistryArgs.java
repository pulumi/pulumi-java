// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.eventhub;

import com.pulumi.azurenative.eventhub.enums.SchemaCompatibility;
import com.pulumi.azurenative.eventhub.enums.SchemaType;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SchemaRegistryArgs extends com.pulumi.resources.ResourceArgs {

    public static final SchemaRegistryArgs Empty = new SchemaRegistryArgs();

    /**
     * dictionary object for SchemaGroup group properties
     * 
     */
    @Import(name="groupProperties")
    private @Nullable Output<Map<String,String>> groupProperties;

    /**
     * @return dictionary object for SchemaGroup group properties
     * 
     */
    public Optional<Output<Map<String,String>>> groupProperties() {
        return Optional.ofNullable(this.groupProperties);
    }

    /**
     * The Namespace name
     * 
     */
    @Import(name="namespaceName", required=true)
    private Output<String> namespaceName;

    /**
     * @return The Namespace name
     * 
     */
    public Output<String> namespaceName() {
        return this.namespaceName;
    }

    /**
     * Name of the resource group within the azure subscription.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return Name of the resource group within the azure subscription.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    @Import(name="schemaCompatibility")
    private @Nullable Output<Either<String,SchemaCompatibility>> schemaCompatibility;

    public Optional<Output<Either<String,SchemaCompatibility>>> schemaCompatibility() {
        return Optional.ofNullable(this.schemaCompatibility);
    }

    /**
     * The Schema Group name
     * 
     */
    @Import(name="schemaGroupName")
    private @Nullable Output<String> schemaGroupName;

    /**
     * @return The Schema Group name
     * 
     */
    public Optional<Output<String>> schemaGroupName() {
        return Optional.ofNullable(this.schemaGroupName);
    }

    @Import(name="schemaType")
    private @Nullable Output<Either<String,SchemaType>> schemaType;

    public Optional<Output<Either<String,SchemaType>>> schemaType() {
        return Optional.ofNullable(this.schemaType);
    }

    private SchemaRegistryArgs() {}

    private SchemaRegistryArgs(SchemaRegistryArgs $) {
        this.groupProperties = $.groupProperties;
        this.namespaceName = $.namespaceName;
        this.resourceGroupName = $.resourceGroupName;
        this.schemaCompatibility = $.schemaCompatibility;
        this.schemaGroupName = $.schemaGroupName;
        this.schemaType = $.schemaType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SchemaRegistryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SchemaRegistryArgs $;

        public Builder() {
            $ = new SchemaRegistryArgs();
        }

        public Builder(SchemaRegistryArgs defaults) {
            $ = new SchemaRegistryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param groupProperties dictionary object for SchemaGroup group properties
         * 
         * @return builder
         * 
         */
        public Builder groupProperties(@Nullable Output<Map<String,String>> groupProperties) {
            $.groupProperties = groupProperties;
            return this;
        }

        /**
         * @param groupProperties dictionary object for SchemaGroup group properties
         * 
         * @return builder
         * 
         */
        public Builder groupProperties(Map<String,String> groupProperties) {
            return groupProperties(Output.of(groupProperties));
        }

        /**
         * @param namespaceName The Namespace name
         * 
         * @return builder
         * 
         */
        public Builder namespaceName(Output<String> namespaceName) {
            $.namespaceName = namespaceName;
            return this;
        }

        /**
         * @param namespaceName The Namespace name
         * 
         * @return builder
         * 
         */
        public Builder namespaceName(String namespaceName) {
            return namespaceName(Output.of(namespaceName));
        }

        /**
         * @param resourceGroupName Name of the resource group within the azure subscription.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName Name of the resource group within the azure subscription.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder schemaCompatibility(@Nullable Output<Either<String,SchemaCompatibility>> schemaCompatibility) {
            $.schemaCompatibility = schemaCompatibility;
            return this;
        }

        public Builder schemaCompatibility(Either<String,SchemaCompatibility> schemaCompatibility) {
            return schemaCompatibility(Output.of(schemaCompatibility));
        }

        public Builder schemaCompatibility(String schemaCompatibility) {
            return schemaCompatibility(Either.ofLeft(schemaCompatibility));
        }

        public Builder schemaCompatibility(SchemaCompatibility schemaCompatibility) {
            return schemaCompatibility(Either.ofRight(schemaCompatibility));
        }

        /**
         * @param schemaGroupName The Schema Group name
         * 
         * @return builder
         * 
         */
        public Builder schemaGroupName(@Nullable Output<String> schemaGroupName) {
            $.schemaGroupName = schemaGroupName;
            return this;
        }

        /**
         * @param schemaGroupName The Schema Group name
         * 
         * @return builder
         * 
         */
        public Builder schemaGroupName(String schemaGroupName) {
            return schemaGroupName(Output.of(schemaGroupName));
        }

        public Builder schemaType(@Nullable Output<Either<String,SchemaType>> schemaType) {
            $.schemaType = schemaType;
            return this;
        }

        public Builder schemaType(Either<String,SchemaType> schemaType) {
            return schemaType(Output.of(schemaType));
        }

        public Builder schemaType(String schemaType) {
            return schemaType(Either.ofLeft(schemaType));
        }

        public Builder schemaType(SchemaType schemaType) {
            return schemaType(Either.ofRight(schemaType));
        }

        public SchemaRegistryArgs build() {
            $.namespaceName = Objects.requireNonNull($.namespaceName, "expected parameter 'namespaceName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
