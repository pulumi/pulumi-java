// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.media.inputs;

import com.pulumi.azurenative.media.inputs.AudioTrackDescriptorResponse;
import com.pulumi.azurenative.media.inputs.SelectAudioTrackByAttributeResponse;
import com.pulumi.azurenative.media.inputs.SelectAudioTrackByIdResponse;
import com.pulumi.azurenative.media.inputs.SelectVideoTrackByAttributeResponse;
import com.pulumi.azurenative.media.inputs.SelectVideoTrackByIdResponse;
import com.pulumi.azurenative.media.inputs.VideoTrackDescriptorResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * An InputDefinition that looks at each input file provided to select tracks specified by the IncludedTracks property. Generally used with the AudioTrackByAttribute and VideoTrackByAttribute to select tracks from each file given.
 * 
 */
public final class FromEachInputFileResponse extends com.pulumi.resources.InvokeArgs {

    public static final FromEachInputFileResponse Empty = new FromEachInputFileResponse();

    /**
     * The list of TrackDescriptors which define the metadata and selection of tracks in the input.
     * 
     */
    @Import(name="includedTracks")
    private @Nullable List<Object> includedTracks;

    /**
     * @return The list of TrackDescriptors which define the metadata and selection of tracks in the input.
     * 
     */
    public Optional<List<Object>> includedTracks() {
        return Optional.ofNullable(this.includedTracks);
    }

    /**
     * The discriminator for derived types.
     * Expected value is &#39;#Microsoft.Media.FromEachInputFile&#39;.
     * 
     */
    @Import(name="odataType", required=true)
    private String odataType;

    /**
     * @return The discriminator for derived types.
     * Expected value is &#39;#Microsoft.Media.FromEachInputFile&#39;.
     * 
     */
    public String odataType() {
        return this.odataType;
    }

    private FromEachInputFileResponse() {}

    private FromEachInputFileResponse(FromEachInputFileResponse $) {
        this.includedTracks = $.includedTracks;
        this.odataType = $.odataType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FromEachInputFileResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FromEachInputFileResponse $;

        public Builder() {
            $ = new FromEachInputFileResponse();
        }

        public Builder(FromEachInputFileResponse defaults) {
            $ = new FromEachInputFileResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param includedTracks The list of TrackDescriptors which define the metadata and selection of tracks in the input.
         * 
         * @return builder
         * 
         */
        public Builder includedTracks(@Nullable List<Object> includedTracks) {
            $.includedTracks = includedTracks;
            return this;
        }

        /**
         * @param includedTracks The list of TrackDescriptors which define the metadata and selection of tracks in the input.
         * 
         * @return builder
         * 
         */
        public Builder includedTracks(Object... includedTracks) {
            return includedTracks(List.of(includedTracks));
        }

        /**
         * @param odataType The discriminator for derived types.
         * Expected value is &#39;#Microsoft.Media.FromEachInputFile&#39;.
         * 
         * @return builder
         * 
         */
        public Builder odataType(String odataType) {
            $.odataType = odataType;
            return this;
        }

        public FromEachInputFileResponse build() {
            $.odataType = Codegen.stringProp("odataType").arg($.odataType).require();
            return $;
        }
    }

}
