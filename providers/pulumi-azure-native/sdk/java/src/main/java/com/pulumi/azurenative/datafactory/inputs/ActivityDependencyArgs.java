// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.azurenative.datafactory.enums.DependencyCondition;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Activity dependency information.
 * 
 */
public final class ActivityDependencyArgs extends com.pulumi.resources.ResourceArgs {

    public static final ActivityDependencyArgs Empty = new ActivityDependencyArgs();

    /**
     * Activity name.
     * 
     */
    @Import(name="activity", required=true)
    private Output<String> activity;

    /**
     * @return Activity name.
     * 
     */
    public Output<String> activity() {
        return this.activity;
    }

    /**
     * Match-Condition for the dependency.
     * 
     */
    @Import(name="dependencyConditions", required=true)
    private Output<List<Either<String,DependencyCondition>>> dependencyConditions;

    /**
     * @return Match-Condition for the dependency.
     * 
     */
    public Output<List<Either<String,DependencyCondition>>> dependencyConditions() {
        return this.dependencyConditions;
    }

    private ActivityDependencyArgs() {}

    private ActivityDependencyArgs(ActivityDependencyArgs $) {
        this.activity = $.activity;
        this.dependencyConditions = $.dependencyConditions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ActivityDependencyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ActivityDependencyArgs $;

        public Builder() {
            $ = new ActivityDependencyArgs();
        }

        public Builder(ActivityDependencyArgs defaults) {
            $ = new ActivityDependencyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param activity Activity name.
         * 
         * @return builder
         * 
         */
        public Builder activity(Output<String> activity) {
            $.activity = activity;
            return this;
        }

        /**
         * @param activity Activity name.
         * 
         * @return builder
         * 
         */
        public Builder activity(String activity) {
            return activity(Output.of(activity));
        }

        /**
         * @param dependencyConditions Match-Condition for the dependency.
         * 
         * @return builder
         * 
         */
        public Builder dependencyConditions(Output<List<Either<String,DependencyCondition>>> dependencyConditions) {
            $.dependencyConditions = dependencyConditions;
            return this;
        }

        /**
         * @param dependencyConditions Match-Condition for the dependency.
         * 
         * @return builder
         * 
         */
        public Builder dependencyConditions(List<Either<String,DependencyCondition>> dependencyConditions) {
            return dependencyConditions(Output.of(dependencyConditions));
        }

        /**
         * @param dependencyConditions Match-Condition for the dependency.
         * 
         * @return builder
         * 
         */
        public Builder dependencyConditions(Either<String,DependencyCondition>... dependencyConditions) {
            return dependencyConditions(List.of(dependencyConditions));
        }

        public ActivityDependencyArgs build() {
            $.activity = Objects.requireNonNull($.activity, "expected parameter 'activity' to be non-null");
            $.dependencyConditions = Objects.requireNonNull($.dependencyConditions, "expected parameter 'dependencyConditions' to be non-null");
            return $;
        }
    }

}
