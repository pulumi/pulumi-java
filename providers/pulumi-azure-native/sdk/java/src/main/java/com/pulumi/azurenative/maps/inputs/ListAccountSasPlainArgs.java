// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.maps.inputs;

import com.pulumi.azurenative.maps.enums.SigningKey;
import com.pulumi.core.Either;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ListAccountSasPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final ListAccountSasPlainArgs Empty = new ListAccountSasPlainArgs();

    /**
     * The name of the Maps Account.
     * 
     */
    @Import(name="accountName", required=true)
    private String accountName;

    /**
     * @return The name of the Maps Account.
     * 
     */
    public String accountName() {
        return this.accountName;
    }

    /**
     * The date time offset of when the token validity expires. For example &#34;2017-05-24T10:42:03.1567373Z&#34;
     * 
     */
    @Import(name="expiry", required=true)
    private String expiry;

    /**
     * @return The date time offset of when the token validity expires. For example &#34;2017-05-24T10:42:03.1567373Z&#34;
     * 
     */
    public String expiry() {
        return this.expiry;
    }

    /**
     * Required parameter which represents the desired maximum request per second to allowed for the given SAS token. This does not guarantee perfect accuracy in measurements but provides application safe guards of abuse with eventual enforcement.
     * 
     */
    @Import(name="maxRatePerSecond", required=true)
    private Integer maxRatePerSecond;

    /**
     * @return Required parameter which represents the desired maximum request per second to allowed for the given SAS token. This does not guarantee perfect accuracy in measurements but provides application safe guards of abuse with eventual enforcement.
     * 
     */
    public Integer maxRatePerSecond() {
        return this.maxRatePerSecond;
    }

    /**
     * The principal Id also known as the object Id of a User Assigned Managed Identity currently assigned to the Map Account. To assign a Managed Identity of the account, use operation Create or Update an assign a User Assigned Identity resource Id.
     * 
     */
    @Import(name="principalId", required=true)
    private String principalId;

    /**
     * @return The principal Id also known as the object Id of a User Assigned Managed Identity currently assigned to the Map Account. To assign a Managed Identity of the account, use operation Create or Update an assign a User Assigned Identity resource Id.
     * 
     */
    public String principalId() {
        return this.principalId;
    }

    /**
     * Optional, allows control of which region locations are permitted access to Azure Maps REST APIs with the SAS token. Example: &#34;eastus&#34;, &#34;westus2&#34;. Omitting this parameter will allow all region locations to be accessible.
     * 
     */
    @Import(name="regions")
    private @Nullable List<String> regions;

    /**
     * @return Optional, allows control of which region locations are permitted access to Azure Maps REST APIs with the SAS token. Example: &#34;eastus&#34;, &#34;westus2&#34;. Omitting this parameter will allow all region locations to be accessible.
     * 
     */
    public Optional<List<String>> regions() {
        return Optional.ofNullable(this.regions);
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private String resourceGroupName;

    /**
     * @return The name of the resource group. The name is case insensitive.
     * 
     */
    public String resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The Map account key to use for signing.
     * 
     */
    @Import(name="signingKey", required=true)
    private Either<String,SigningKey> signingKey;

    /**
     * @return The Map account key to use for signing.
     * 
     */
    public Either<String,SigningKey> signingKey() {
        return this.signingKey;
    }

    /**
     * The date time offset of when the token validity begins. For example &#34;2017-05-24T10:42:03.1567373Z&#34;.
     * 
     */
    @Import(name="start", required=true)
    private String start;

    /**
     * @return The date time offset of when the token validity begins. For example &#34;2017-05-24T10:42:03.1567373Z&#34;.
     * 
     */
    public String start() {
        return this.start;
    }

    private ListAccountSasPlainArgs() {}

    private ListAccountSasPlainArgs(ListAccountSasPlainArgs $) {
        this.accountName = $.accountName;
        this.expiry = $.expiry;
        this.maxRatePerSecond = $.maxRatePerSecond;
        this.principalId = $.principalId;
        this.regions = $.regions;
        this.resourceGroupName = $.resourceGroupName;
        this.signingKey = $.signingKey;
        this.start = $.start;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ListAccountSasPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ListAccountSasPlainArgs $;

        public Builder() {
            $ = new ListAccountSasPlainArgs();
        }

        public Builder(ListAccountSasPlainArgs defaults) {
            $ = new ListAccountSasPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountName The name of the Maps Account.
         * 
         * @return builder
         * 
         */
        public Builder accountName(String accountName) {
            $.accountName = accountName;
            return this;
        }

        /**
         * @param expiry The date time offset of when the token validity expires. For example &#34;2017-05-24T10:42:03.1567373Z&#34;
         * 
         * @return builder
         * 
         */
        public Builder expiry(String expiry) {
            $.expiry = expiry;
            return this;
        }

        /**
         * @param maxRatePerSecond Required parameter which represents the desired maximum request per second to allowed for the given SAS token. This does not guarantee perfect accuracy in measurements but provides application safe guards of abuse with eventual enforcement.
         * 
         * @return builder
         * 
         */
        public Builder maxRatePerSecond(Integer maxRatePerSecond) {
            $.maxRatePerSecond = maxRatePerSecond;
            return this;
        }

        /**
         * @param principalId The principal Id also known as the object Id of a User Assigned Managed Identity currently assigned to the Map Account. To assign a Managed Identity of the account, use operation Create or Update an assign a User Assigned Identity resource Id.
         * 
         * @return builder
         * 
         */
        public Builder principalId(String principalId) {
            $.principalId = principalId;
            return this;
        }

        /**
         * @param regions Optional, allows control of which region locations are permitted access to Azure Maps REST APIs with the SAS token. Example: &#34;eastus&#34;, &#34;westus2&#34;. Omitting this parameter will allow all region locations to be accessible.
         * 
         * @return builder
         * 
         */
        public Builder regions(@Nullable List<String> regions) {
            $.regions = regions;
            return this;
        }

        /**
         * @param regions Optional, allows control of which region locations are permitted access to Azure Maps REST APIs with the SAS token. Example: &#34;eastus&#34;, &#34;westus2&#34;. Omitting this parameter will allow all region locations to be accessible.
         * 
         * @return builder
         * 
         */
        public Builder regions(String... regions) {
            return regions(List.of(regions));
        }

        /**
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param signingKey The Map account key to use for signing.
         * 
         * @return builder
         * 
         */
        public Builder signingKey(Either<String,SigningKey> signingKey) {
            $.signingKey = signingKey;
            return this;
        }

        /**
         * @param signingKey The Map account key to use for signing.
         * 
         * @return builder
         * 
         */
        public Builder signingKey(String signingKey) {
            return signingKey(Either.ofLeft(signingKey));
        }

        /**
         * @param signingKey The Map account key to use for signing.
         * 
         * @return builder
         * 
         */
        public Builder signingKey(SigningKey signingKey) {
            return signingKey(Either.ofRight(signingKey));
        }

        /**
         * @param start The date time offset of when the token validity begins. For example &#34;2017-05-24T10:42:03.1567373Z&#34;.
         * 
         * @return builder
         * 
         */
        public Builder start(String start) {
            $.start = start;
            return this;
        }

        public ListAccountSasPlainArgs build() {
            $.accountName = Objects.requireNonNull($.accountName, "expected parameter 'accountName' to be non-null");
            $.expiry = Objects.requireNonNull($.expiry, "expected parameter 'expiry' to be non-null");
            $.maxRatePerSecond = Codegen.integerProp("maxRatePerSecond").arg($.maxRatePerSecond).def(500).require();
            $.principalId = Objects.requireNonNull($.principalId, "expected parameter 'principalId' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.signingKey = Objects.requireNonNull($.signingKey, "expected parameter 'signingKey' to be non-null");
            $.start = Objects.requireNonNull($.start, "expected parameter 'start' to be non-null");
            return $;
        }
    }

}
