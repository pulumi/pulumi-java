// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.web;

import com.pulumi.azurenative.web.inputs.AuthPlatformArgs;
import com.pulumi.azurenative.web.inputs.GlobalValidationArgs;
import com.pulumi.azurenative.web.inputs.HttpSettingsArgs;
import com.pulumi.azurenative.web.inputs.IdentityProvidersArgs;
import com.pulumi.azurenative.web.inputs.LoginArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class WebAppAuthSettingsV2SlotArgs extends com.pulumi.resources.ResourceArgs {

    public static final WebAppAuthSettingsV2SlotArgs Empty = new WebAppAuthSettingsV2SlotArgs();

    /**
     * The configuration settings that determines the validation flow of users using App Service Authentication/Authorization.
     * 
     */
    @Import(name="globalValidation")
      private final @Nullable Output<GlobalValidationArgs> globalValidation;

    public Output<GlobalValidationArgs> globalValidation() {
        return this.globalValidation == null ? Codegen.empty() : this.globalValidation;
    }

    /**
     * The configuration settings of the HTTP requests for authentication and authorization requests made against App Service Authentication/Authorization.
     * 
     */
    @Import(name="httpSettings")
      private final @Nullable Output<HttpSettingsArgs> httpSettings;

    public Output<HttpSettingsArgs> httpSettings() {
        return this.httpSettings == null ? Codegen.empty() : this.httpSettings;
    }

    /**
     * The configuration settings of each of the identity providers used to configure App Service Authentication/Authorization.
     * 
     */
    @Import(name="identityProviders")
      private final @Nullable Output<IdentityProvidersArgs> identityProviders;

    public Output<IdentityProvidersArgs> identityProviders() {
        return this.identityProviders == null ? Codegen.empty() : this.identityProviders;
    }

    /**
     * Kind of resource.
     * 
     */
    @Import(name="kind")
      private final @Nullable Output<String> kind;

    public Output<String> kind() {
        return this.kind == null ? Codegen.empty() : this.kind;
    }

    /**
     * The configuration settings of the login flow of users using App Service Authentication/Authorization.
     * 
     */
    @Import(name="login")
      private final @Nullable Output<LoginArgs> login;

    public Output<LoginArgs> login() {
        return this.login == null ? Codegen.empty() : this.login;
    }

    /**
     * Name of web app.
     * 
     */
    @Import(name="name", required=true)
      private final Output<String> name;

    public Output<String> name() {
        return this.name;
    }

    /**
     * The configuration settings of the platform of App Service Authentication/Authorization.
     * 
     */
    @Import(name="platform")
      private final @Nullable Output<AuthPlatformArgs> platform;

    public Output<AuthPlatformArgs> platform() {
        return this.platform == null ? Codegen.empty() : this.platform;
    }

    /**
     * Name of the resource group to which the resource belongs.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Name of web app slot. If not specified then will default to production slot.
     * 
     */
    @Import(name="slot", required=true)
      private final Output<String> slot;

    public Output<String> slot() {
        return this.slot;
    }

    public WebAppAuthSettingsV2SlotArgs(
        @Nullable Output<GlobalValidationArgs> globalValidation,
        @Nullable Output<HttpSettingsArgs> httpSettings,
        @Nullable Output<IdentityProvidersArgs> identityProviders,
        @Nullable Output<String> kind,
        @Nullable Output<LoginArgs> login,
        Output<String> name,
        @Nullable Output<AuthPlatformArgs> platform,
        Output<String> resourceGroupName,
        Output<String> slot) {
        this.globalValidation = globalValidation;
        this.httpSettings = httpSettings;
        this.identityProviders = identityProviders;
        this.kind = kind;
        this.login = login;
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.platform = platform;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.slot = Objects.requireNonNull(slot, "expected parameter 'slot' to be non-null");
    }

    private WebAppAuthSettingsV2SlotArgs() {
        this.globalValidation = Codegen.empty();
        this.httpSettings = Codegen.empty();
        this.identityProviders = Codegen.empty();
        this.kind = Codegen.empty();
        this.login = Codegen.empty();
        this.name = Codegen.empty();
        this.platform = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.slot = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(WebAppAuthSettingsV2SlotArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<GlobalValidationArgs> globalValidation;
        private @Nullable Output<HttpSettingsArgs> httpSettings;
        private @Nullable Output<IdentityProvidersArgs> identityProviders;
        private @Nullable Output<String> kind;
        private @Nullable Output<LoginArgs> login;
        private Output<String> name;
        private @Nullable Output<AuthPlatformArgs> platform;
        private Output<String> resourceGroupName;
        private Output<String> slot;

        public Builder() {
    	      // Empty
        }

        public Builder(WebAppAuthSettingsV2SlotArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.globalValidation = defaults.globalValidation;
    	      this.httpSettings = defaults.httpSettings;
    	      this.identityProviders = defaults.identityProviders;
    	      this.kind = defaults.kind;
    	      this.login = defaults.login;
    	      this.name = defaults.name;
    	      this.platform = defaults.platform;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.slot = defaults.slot;
        }

        public Builder globalValidation(@Nullable Output<GlobalValidationArgs> globalValidation) {
            this.globalValidation = globalValidation;
            return this;
        }
        public Builder globalValidation(@Nullable GlobalValidationArgs globalValidation) {
            this.globalValidation = Codegen.ofNullable(globalValidation);
            return this;
        }
        public Builder httpSettings(@Nullable Output<HttpSettingsArgs> httpSettings) {
            this.httpSettings = httpSettings;
            return this;
        }
        public Builder httpSettings(@Nullable HttpSettingsArgs httpSettings) {
            this.httpSettings = Codegen.ofNullable(httpSettings);
            return this;
        }
        public Builder identityProviders(@Nullable Output<IdentityProvidersArgs> identityProviders) {
            this.identityProviders = identityProviders;
            return this;
        }
        public Builder identityProviders(@Nullable IdentityProvidersArgs identityProviders) {
            this.identityProviders = Codegen.ofNullable(identityProviders);
            return this;
        }
        public Builder kind(@Nullable Output<String> kind) {
            this.kind = kind;
            return this;
        }
        public Builder kind(@Nullable String kind) {
            this.kind = Codegen.ofNullable(kind);
            return this;
        }
        public Builder login(@Nullable Output<LoginArgs> login) {
            this.login = login;
            return this;
        }
        public Builder login(@Nullable LoginArgs login) {
            this.login = Codegen.ofNullable(login);
            return this;
        }
        public Builder name(Output<String> name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder name(String name) {
            this.name = Output.of(Objects.requireNonNull(name));
            return this;
        }
        public Builder platform(@Nullable Output<AuthPlatformArgs> platform) {
            this.platform = platform;
            return this;
        }
        public Builder platform(@Nullable AuthPlatformArgs platform) {
            this.platform = Codegen.ofNullable(platform);
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder slot(Output<String> slot) {
            this.slot = Objects.requireNonNull(slot);
            return this;
        }
        public Builder slot(String slot) {
            this.slot = Output.of(Objects.requireNonNull(slot));
            return this;
        }        public WebAppAuthSettingsV2SlotArgs build() {
            return new WebAppAuthSettingsV2SlotArgs(globalValidation, httpSettings, identityProviders, kind, login, name, platform, resourceGroupName, slot);
        }
    }
}
