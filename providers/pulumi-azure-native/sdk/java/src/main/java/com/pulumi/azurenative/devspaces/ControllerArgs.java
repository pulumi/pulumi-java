// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.devspaces;

import com.pulumi.azurenative.devspaces.inputs.SkuArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ControllerArgs extends com.pulumi.resources.ResourceArgs {

    public static final ControllerArgs Empty = new ControllerArgs();

    /**
     * Region where the Azure resource is located.
     * 
     */
    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> location() {
        return this.location == null ? Codegen.empty() : this.location;
    }

    /**
     * Name of the resource.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> name() {
        return this.name == null ? Codegen.empty() : this.name;
    }

    /**
     * Resource group to which the resource belongs.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Model representing SKU for Azure Dev Spaces Controller.
     * 
     */
    @Import(name="sku", required=true)
      private final Output<SkuArgs> sku;

    public Output<SkuArgs> sku() {
        return this.sku;
    }

    /**
     * Tags for the Azure resource.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    /**
     * Credentials of the target container host (base64).
     * 
     */
    @Import(name="targetContainerHostCredentialsBase64", required=true)
      private final Output<String> targetContainerHostCredentialsBase64;

    public Output<String> targetContainerHostCredentialsBase64() {
        return this.targetContainerHostCredentialsBase64;
    }

    /**
     * Resource ID of the target container host
     * 
     */
    @Import(name="targetContainerHostResourceId", required=true)
      private final Output<String> targetContainerHostResourceId;

    public Output<String> targetContainerHostResourceId() {
        return this.targetContainerHostResourceId;
    }

    public ControllerArgs(
        @Nullable Output<String> location,
        @Nullable Output<String> name,
        Output<String> resourceGroupName,
        Output<SkuArgs> sku,
        @Nullable Output<Map<String,String>> tags,
        Output<String> targetContainerHostCredentialsBase64,
        Output<String> targetContainerHostResourceId) {
        this.location = location;
        this.name = name;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.sku = Objects.requireNonNull(sku, "expected parameter 'sku' to be non-null");
        this.tags = tags;
        this.targetContainerHostCredentialsBase64 = Objects.requireNonNull(targetContainerHostCredentialsBase64, "expected parameter 'targetContainerHostCredentialsBase64' to be non-null");
        this.targetContainerHostResourceId = Objects.requireNonNull(targetContainerHostResourceId, "expected parameter 'targetContainerHostResourceId' to be non-null");
    }

    private ControllerArgs() {
        this.location = Codegen.empty();
        this.name = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.sku = Codegen.empty();
        this.tags = Codegen.empty();
        this.targetContainerHostCredentialsBase64 = Codegen.empty();
        this.targetContainerHostResourceId = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ControllerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> location;
        private @Nullable Output<String> name;
        private Output<String> resourceGroupName;
        private Output<SkuArgs> sku;
        private @Nullable Output<Map<String,String>> tags;
        private Output<String> targetContainerHostCredentialsBase64;
        private Output<String> targetContainerHostResourceId;

        public Builder() {
    	      // Empty
        }

        public Builder(ControllerArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.sku = defaults.sku;
    	      this.tags = defaults.tags;
    	      this.targetContainerHostCredentialsBase64 = defaults.targetContainerHostCredentialsBase64;
    	      this.targetContainerHostResourceId = defaults.targetContainerHostResourceId;
        }

        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Codegen.ofNullable(location);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Codegen.ofNullable(name);
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder sku(Output<SkuArgs> sku) {
            this.sku = Objects.requireNonNull(sku);
            return this;
        }
        public Builder sku(SkuArgs sku) {
            this.sku = Output.of(Objects.requireNonNull(sku));
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder targetContainerHostCredentialsBase64(Output<String> targetContainerHostCredentialsBase64) {
            this.targetContainerHostCredentialsBase64 = Objects.requireNonNull(targetContainerHostCredentialsBase64);
            return this;
        }
        public Builder targetContainerHostCredentialsBase64(String targetContainerHostCredentialsBase64) {
            this.targetContainerHostCredentialsBase64 = Output.of(Objects.requireNonNull(targetContainerHostCredentialsBase64));
            return this;
        }
        public Builder targetContainerHostResourceId(Output<String> targetContainerHostResourceId) {
            this.targetContainerHostResourceId = Objects.requireNonNull(targetContainerHostResourceId);
            return this;
        }
        public Builder targetContainerHostResourceId(String targetContainerHostResourceId) {
            this.targetContainerHostResourceId = Output.of(Objects.requireNonNull(targetContainerHostResourceId));
            return this;
        }        public ControllerArgs build() {
            return new ControllerArgs(location, name, resourceGroupName, sku, tags, targetContainerHostCredentialsBase64, targetContainerHostResourceId);
        }
    }
}
