// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.machinelearningservices.inputs;

import com.pulumi.azurenative.machinelearningservices.enums.ApplicationSharingPolicy;
import com.pulumi.azurenative.machinelearningservices.enums.ComputeInstanceAuthorizationType;
import com.pulumi.azurenative.machinelearningservices.inputs.ComputeInstanceSshSettingsArgs;
import com.pulumi.azurenative.machinelearningservices.inputs.PersonalComputeInstanceSettingsArgs;
import com.pulumi.azurenative.machinelearningservices.inputs.ResourceIdArgs;
import com.pulumi.azurenative.machinelearningservices.inputs.SetupScriptsArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Compute Instance properties
 * 
 */
public final class ComputeInstancePropertiesArgs extends com.pulumi.resources.ResourceArgs {

    public static final ComputeInstancePropertiesArgs Empty = new ComputeInstancePropertiesArgs();

    /**
     * Policy for sharing applications on this compute instance among users of parent workspace. If Personal, only the creator can access applications on this compute instance. When Shared, any workspace user can access applications on this instance depending on his/her assigned role.
     * 
     */
    @Import(name="applicationSharingPolicy")
    private @Nullable Output<Either<String,ApplicationSharingPolicy>> applicationSharingPolicy;

    /**
     * @return Policy for sharing applications on this compute instance among users of parent workspace. If Personal, only the creator can access applications on this compute instance. When Shared, any workspace user can access applications on this instance depending on his/her assigned role.
     * 
     */
    public Optional<Output<Either<String,ApplicationSharingPolicy>>> applicationSharingPolicy() {
        return Optional.ofNullable(this.applicationSharingPolicy);
    }

    /**
     * The Compute Instance Authorization type. Available values are personal (default).
     * 
     */
    @Import(name="computeInstanceAuthorizationType")
    private @Nullable Output<Either<String,ComputeInstanceAuthorizationType>> computeInstanceAuthorizationType;

    /**
     * @return The Compute Instance Authorization type. Available values are personal (default).
     * 
     */
    public Optional<Output<Either<String,ComputeInstanceAuthorizationType>>> computeInstanceAuthorizationType() {
        return Optional.ofNullable(this.computeInstanceAuthorizationType);
    }

    /**
     * Settings for a personal compute instance.
     * 
     */
    @Import(name="personalComputeInstanceSettings")
    private @Nullable Output<PersonalComputeInstanceSettingsArgs> personalComputeInstanceSettings;

    /**
     * @return Settings for a personal compute instance.
     * 
     */
    public Optional<Output<PersonalComputeInstanceSettingsArgs>> personalComputeInstanceSettings() {
        return Optional.ofNullable(this.personalComputeInstanceSettings);
    }

    /**
     * Details of customized scripts to execute for setting up the cluster.
     * 
     */
    @Import(name="setupScripts")
    private @Nullable Output<SetupScriptsArgs> setupScripts;

    /**
     * @return Details of customized scripts to execute for setting up the cluster.
     * 
     */
    public Optional<Output<SetupScriptsArgs>> setupScripts() {
        return Optional.ofNullable(this.setupScripts);
    }

    /**
     * Specifies policy and settings for SSH access.
     * 
     */
    @Import(name="sshSettings")
    private @Nullable Output<ComputeInstanceSshSettingsArgs> sshSettings;

    /**
     * @return Specifies policy and settings for SSH access.
     * 
     */
    public Optional<Output<ComputeInstanceSshSettingsArgs>> sshSettings() {
        return Optional.ofNullable(this.sshSettings);
    }

    /**
     * Virtual network subnet resource ID the compute nodes belong to.
     * 
     */
    @Import(name="subnet")
    private @Nullable Output<ResourceIdArgs> subnet;

    /**
     * @return Virtual network subnet resource ID the compute nodes belong to.
     * 
     */
    public Optional<Output<ResourceIdArgs>> subnet() {
        return Optional.ofNullable(this.subnet);
    }

    /**
     * Virtual Machine Size
     * 
     */
    @Import(name="vmSize")
    private @Nullable Output<String> vmSize;

    /**
     * @return Virtual Machine Size
     * 
     */
    public Optional<Output<String>> vmSize() {
        return Optional.ofNullable(this.vmSize);
    }

    private ComputeInstancePropertiesArgs() {}

    private ComputeInstancePropertiesArgs(ComputeInstancePropertiesArgs $) {
        this.applicationSharingPolicy = $.applicationSharingPolicy;
        this.computeInstanceAuthorizationType = $.computeInstanceAuthorizationType;
        this.personalComputeInstanceSettings = $.personalComputeInstanceSettings;
        this.setupScripts = $.setupScripts;
        this.sshSettings = $.sshSettings;
        this.subnet = $.subnet;
        this.vmSize = $.vmSize;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ComputeInstancePropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ComputeInstancePropertiesArgs $;

        public Builder() {
            $ = new ComputeInstancePropertiesArgs();
        }

        public Builder(ComputeInstancePropertiesArgs defaults) {
            $ = new ComputeInstancePropertiesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param applicationSharingPolicy Policy for sharing applications on this compute instance among users of parent workspace. If Personal, only the creator can access applications on this compute instance. When Shared, any workspace user can access applications on this instance depending on his/her assigned role.
         * 
         * @return builder
         * 
         */
        public Builder applicationSharingPolicy(@Nullable Output<Either<String,ApplicationSharingPolicy>> applicationSharingPolicy) {
            $.applicationSharingPolicy = applicationSharingPolicy;
            return this;
        }

        /**
         * @param applicationSharingPolicy Policy for sharing applications on this compute instance among users of parent workspace. If Personal, only the creator can access applications on this compute instance. When Shared, any workspace user can access applications on this instance depending on his/her assigned role.
         * 
         * @return builder
         * 
         */
        public Builder applicationSharingPolicy(Either<String,ApplicationSharingPolicy> applicationSharingPolicy) {
            return applicationSharingPolicy(Output.of(applicationSharingPolicy));
        }

        /**
         * @param applicationSharingPolicy Policy for sharing applications on this compute instance among users of parent workspace. If Personal, only the creator can access applications on this compute instance. When Shared, any workspace user can access applications on this instance depending on his/her assigned role.
         * 
         * @return builder
         * 
         */
        public Builder applicationSharingPolicy(String applicationSharingPolicy) {
            return applicationSharingPolicy(Either.ofLeft(applicationSharingPolicy));
        }

        /**
         * @param applicationSharingPolicy Policy for sharing applications on this compute instance among users of parent workspace. If Personal, only the creator can access applications on this compute instance. When Shared, any workspace user can access applications on this instance depending on his/her assigned role.
         * 
         * @return builder
         * 
         */
        public Builder applicationSharingPolicy(ApplicationSharingPolicy applicationSharingPolicy) {
            return applicationSharingPolicy(Either.ofRight(applicationSharingPolicy));
        }

        /**
         * @param computeInstanceAuthorizationType The Compute Instance Authorization type. Available values are personal (default).
         * 
         * @return builder
         * 
         */
        public Builder computeInstanceAuthorizationType(@Nullable Output<Either<String,ComputeInstanceAuthorizationType>> computeInstanceAuthorizationType) {
            $.computeInstanceAuthorizationType = computeInstanceAuthorizationType;
            return this;
        }

        /**
         * @param computeInstanceAuthorizationType The Compute Instance Authorization type. Available values are personal (default).
         * 
         * @return builder
         * 
         */
        public Builder computeInstanceAuthorizationType(Either<String,ComputeInstanceAuthorizationType> computeInstanceAuthorizationType) {
            return computeInstanceAuthorizationType(Output.of(computeInstanceAuthorizationType));
        }

        /**
         * @param computeInstanceAuthorizationType The Compute Instance Authorization type. Available values are personal (default).
         * 
         * @return builder
         * 
         */
        public Builder computeInstanceAuthorizationType(String computeInstanceAuthorizationType) {
            return computeInstanceAuthorizationType(Either.ofLeft(computeInstanceAuthorizationType));
        }

        /**
         * @param computeInstanceAuthorizationType The Compute Instance Authorization type. Available values are personal (default).
         * 
         * @return builder
         * 
         */
        public Builder computeInstanceAuthorizationType(ComputeInstanceAuthorizationType computeInstanceAuthorizationType) {
            return computeInstanceAuthorizationType(Either.ofRight(computeInstanceAuthorizationType));
        }

        /**
         * @param personalComputeInstanceSettings Settings for a personal compute instance.
         * 
         * @return builder
         * 
         */
        public Builder personalComputeInstanceSettings(@Nullable Output<PersonalComputeInstanceSettingsArgs> personalComputeInstanceSettings) {
            $.personalComputeInstanceSettings = personalComputeInstanceSettings;
            return this;
        }

        /**
         * @param personalComputeInstanceSettings Settings for a personal compute instance.
         * 
         * @return builder
         * 
         */
        public Builder personalComputeInstanceSettings(PersonalComputeInstanceSettingsArgs personalComputeInstanceSettings) {
            return personalComputeInstanceSettings(Output.of(personalComputeInstanceSettings));
        }

        /**
         * @param setupScripts Details of customized scripts to execute for setting up the cluster.
         * 
         * @return builder
         * 
         */
        public Builder setupScripts(@Nullable Output<SetupScriptsArgs> setupScripts) {
            $.setupScripts = setupScripts;
            return this;
        }

        /**
         * @param setupScripts Details of customized scripts to execute for setting up the cluster.
         * 
         * @return builder
         * 
         */
        public Builder setupScripts(SetupScriptsArgs setupScripts) {
            return setupScripts(Output.of(setupScripts));
        }

        /**
         * @param sshSettings Specifies policy and settings for SSH access.
         * 
         * @return builder
         * 
         */
        public Builder sshSettings(@Nullable Output<ComputeInstanceSshSettingsArgs> sshSettings) {
            $.sshSettings = sshSettings;
            return this;
        }

        /**
         * @param sshSettings Specifies policy and settings for SSH access.
         * 
         * @return builder
         * 
         */
        public Builder sshSettings(ComputeInstanceSshSettingsArgs sshSettings) {
            return sshSettings(Output.of(sshSettings));
        }

        /**
         * @param subnet Virtual network subnet resource ID the compute nodes belong to.
         * 
         * @return builder
         * 
         */
        public Builder subnet(@Nullable Output<ResourceIdArgs> subnet) {
            $.subnet = subnet;
            return this;
        }

        /**
         * @param subnet Virtual network subnet resource ID the compute nodes belong to.
         * 
         * @return builder
         * 
         */
        public Builder subnet(ResourceIdArgs subnet) {
            return subnet(Output.of(subnet));
        }

        /**
         * @param vmSize Virtual Machine Size
         * 
         * @return builder
         * 
         */
        public Builder vmSize(@Nullable Output<String> vmSize) {
            $.vmSize = vmSize;
            return this;
        }

        /**
         * @param vmSize Virtual Machine Size
         * 
         * @return builder
         * 
         */
        public Builder vmSize(String vmSize) {
            return vmSize(Output.of(vmSize));
        }

        public ComputeInstancePropertiesArgs build() {
            $.applicationSharingPolicy = Codegen.stringProp("applicationSharingPolicy").left(ApplicationSharingPolicy.class).output().arg($.applicationSharingPolicy).def("Shared").getNullable();
            $.computeInstanceAuthorizationType = Codegen.stringProp("computeInstanceAuthorizationType").left(ComputeInstanceAuthorizationType.class).output().arg($.computeInstanceAuthorizationType).def("personal").getNullable();
            return $;
        }
    }

}
