// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.web;

import com.pulumi.azurenative.web.inputs.BackupScheduleArgs;
import com.pulumi.azurenative.web.inputs.DatabaseBackupSettingArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WebAppBackupConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final WebAppBackupConfigurationArgs Empty = new WebAppBackupConfigurationArgs();

    /**
     * Name of the backup.
     * 
     */
    @Import(name="backupName")
    private @Nullable Output<String> backupName;

    public Optional<Output<String>> backupName() {
        return Optional.ofNullable(this.backupName);
    }

    /**
     * Schedule for the backup if it is executed periodically.
     * 
     */
    @Import(name="backupSchedule")
    private @Nullable Output<BackupScheduleArgs> backupSchedule;

    public Optional<Output<BackupScheduleArgs>> backupSchedule() {
        return Optional.ofNullable(this.backupSchedule);
    }

    /**
     * Databases included in the backup.
     * 
     */
    @Import(name="databases")
    private @Nullable Output<List<DatabaseBackupSettingArgs>> databases;

    public Optional<Output<List<DatabaseBackupSettingArgs>>> databases() {
        return Optional.ofNullable(this.databases);
    }

    /**
     * True if the backup schedule is enabled (must be included in that case), false if the backup schedule should be disabled.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Kind of resource.
     * 
     */
    @Import(name="kind")
    private @Nullable Output<String> kind;

    public Optional<Output<String>> kind() {
        return Optional.ofNullable(this.kind);
    }

    /**
     * Name of the app.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    public Output<String> name() {
        return this.name;
    }

    /**
     * Name of the resource group to which the resource belongs.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * SAS URL to the container.
     * 
     */
    @Import(name="storageAccountUrl", required=true)
    private Output<String> storageAccountUrl;

    public Output<String> storageAccountUrl() {
        return this.storageAccountUrl;
    }

    private WebAppBackupConfigurationArgs() {}

    private WebAppBackupConfigurationArgs(WebAppBackupConfigurationArgs $) {
        this.backupName = $.backupName;
        this.backupSchedule = $.backupSchedule;
        this.databases = $.databases;
        this.enabled = $.enabled;
        this.kind = $.kind;
        this.name = $.name;
        this.resourceGroupName = $.resourceGroupName;
        this.storageAccountUrl = $.storageAccountUrl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WebAppBackupConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WebAppBackupConfigurationArgs $;

        public Builder() {
            $ = new WebAppBackupConfigurationArgs();
        }

        public Builder(WebAppBackupConfigurationArgs defaults) {
            $ = new WebAppBackupConfigurationArgs(Objects.requireNonNull(defaults));
        }

        public Builder backupName(@Nullable Output<String> backupName) {
            $.backupName = backupName;
            return this;
        }

        public Builder backupName(String backupName) {
            return backupName(Output.of(backupName));
        }

        public Builder backupSchedule(@Nullable Output<BackupScheduleArgs> backupSchedule) {
            $.backupSchedule = backupSchedule;
            return this;
        }

        public Builder backupSchedule(BackupScheduleArgs backupSchedule) {
            return backupSchedule(Output.of(backupSchedule));
        }

        public Builder databases(@Nullable Output<List<DatabaseBackupSettingArgs>> databases) {
            $.databases = databases;
            return this;
        }

        public Builder databases(List<DatabaseBackupSettingArgs> databases) {
            return databases(Output.of(databases));
        }

        public Builder databases(DatabaseBackupSettingArgs... databases) {
            return databases(List.of(databases));
        }

        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        public Builder kind(@Nullable Output<String> kind) {
            $.kind = kind;
            return this;
        }

        public Builder kind(String kind) {
            return kind(Output.of(kind));
        }

        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder storageAccountUrl(Output<String> storageAccountUrl) {
            $.storageAccountUrl = storageAccountUrl;
            return this;
        }

        public Builder storageAccountUrl(String storageAccountUrl) {
            return storageAccountUrl(Output.of(storageAccountUrl));
        }

        public WebAppBackupConfigurationArgs build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.storageAccountUrl = Objects.requireNonNull($.storageAccountUrl, "expected parameter 'storageAccountUrl' to be non-null");
            return $;
        }
    }

}
