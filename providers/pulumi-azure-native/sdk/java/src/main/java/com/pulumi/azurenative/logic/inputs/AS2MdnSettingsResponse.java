// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.logic.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The AS2 agreement mdn settings.
 * 
 */
public final class AS2MdnSettingsResponse extends com.pulumi.resources.InvokeArgs {

    public static final AS2MdnSettingsResponse Empty = new AS2MdnSettingsResponse();

    /**
     * The disposition notification to header value.
     * 
     */
    @Import(name="dispositionNotificationTo")
    private @Nullable String dispositionNotificationTo;

    public Optional<String> dispositionNotificationTo() {
        return Optional.ofNullable(this.dispositionNotificationTo);
    }

    /**
     * The MDN text.
     * 
     */
    @Import(name="mdnText")
    private @Nullable String mdnText;

    public Optional<String> mdnText() {
        return Optional.ofNullable(this.mdnText);
    }

    /**
     * The signing or hashing algorithm.
     * 
     */
    @Import(name="micHashingAlgorithm", required=true)
    private String micHashingAlgorithm;

    public String micHashingAlgorithm() {
        return this.micHashingAlgorithm;
    }

    /**
     * The value indicating whether to send or request a MDN.
     * 
     */
    @Import(name="needMDN", required=true)
    private Boolean needMDN;

    public Boolean needMDN() {
        return this.needMDN;
    }

    /**
     * The receipt delivery URL.
     * 
     */
    @Import(name="receiptDeliveryUrl")
    private @Nullable String receiptDeliveryUrl;

    public Optional<String> receiptDeliveryUrl() {
        return Optional.ofNullable(this.receiptDeliveryUrl);
    }

    /**
     * The value indicating whether to send inbound MDN to message box.
     * 
     */
    @Import(name="sendInboundMDNToMessageBox", required=true)
    private Boolean sendInboundMDNToMessageBox;

    public Boolean sendInboundMDNToMessageBox() {
        return this.sendInboundMDNToMessageBox;
    }

    /**
     * The value indicating whether to send the asynchronous MDN.
     * 
     */
    @Import(name="sendMDNAsynchronously", required=true)
    private Boolean sendMDNAsynchronously;

    public Boolean sendMDNAsynchronously() {
        return this.sendMDNAsynchronously;
    }

    /**
     * The value indicating whether the MDN needs to be signed or not.
     * 
     */
    @Import(name="signMDN", required=true)
    private Boolean signMDN;

    public Boolean signMDN() {
        return this.signMDN;
    }

    /**
     * The value indicating whether to sign the outbound MDN if optional.
     * 
     */
    @Import(name="signOutboundMDNIfOptional", required=true)
    private Boolean signOutboundMDNIfOptional;

    public Boolean signOutboundMDNIfOptional() {
        return this.signOutboundMDNIfOptional;
    }

    private AS2MdnSettingsResponse() {}

    private AS2MdnSettingsResponse(AS2MdnSettingsResponse $) {
        this.dispositionNotificationTo = $.dispositionNotificationTo;
        this.mdnText = $.mdnText;
        this.micHashingAlgorithm = $.micHashingAlgorithm;
        this.needMDN = $.needMDN;
        this.receiptDeliveryUrl = $.receiptDeliveryUrl;
        this.sendInboundMDNToMessageBox = $.sendInboundMDNToMessageBox;
        this.sendMDNAsynchronously = $.sendMDNAsynchronously;
        this.signMDN = $.signMDN;
        this.signOutboundMDNIfOptional = $.signOutboundMDNIfOptional;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AS2MdnSettingsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AS2MdnSettingsResponse $;

        public Builder() {
            $ = new AS2MdnSettingsResponse();
        }

        public Builder(AS2MdnSettingsResponse defaults) {
            $ = new AS2MdnSettingsResponse(Objects.requireNonNull(defaults));
        }

        public Builder dispositionNotificationTo(@Nullable String dispositionNotificationTo) {
            $.dispositionNotificationTo = dispositionNotificationTo;
            return this;
        }

        public Builder mdnText(@Nullable String mdnText) {
            $.mdnText = mdnText;
            return this;
        }

        public Builder micHashingAlgorithm(String micHashingAlgorithm) {
            $.micHashingAlgorithm = micHashingAlgorithm;
            return this;
        }

        public Builder needMDN(Boolean needMDN) {
            $.needMDN = needMDN;
            return this;
        }

        public Builder receiptDeliveryUrl(@Nullable String receiptDeliveryUrl) {
            $.receiptDeliveryUrl = receiptDeliveryUrl;
            return this;
        }

        public Builder sendInboundMDNToMessageBox(Boolean sendInboundMDNToMessageBox) {
            $.sendInboundMDNToMessageBox = sendInboundMDNToMessageBox;
            return this;
        }

        public Builder sendMDNAsynchronously(Boolean sendMDNAsynchronously) {
            $.sendMDNAsynchronously = sendMDNAsynchronously;
            return this;
        }

        public Builder signMDN(Boolean signMDN) {
            $.signMDN = signMDN;
            return this;
        }

        public Builder signOutboundMDNIfOptional(Boolean signOutboundMDNIfOptional) {
            $.signOutboundMDNIfOptional = signOutboundMDNIfOptional;
            return this;
        }

        public AS2MdnSettingsResponse build() {
            $.micHashingAlgorithm = Objects.requireNonNull($.micHashingAlgorithm, "expected parameter 'micHashingAlgorithm' to be non-null");
            $.needMDN = Objects.requireNonNull($.needMDN, "expected parameter 'needMDN' to be non-null");
            $.sendInboundMDNToMessageBox = Objects.requireNonNull($.sendInboundMDNToMessageBox, "expected parameter 'sendInboundMDNToMessageBox' to be non-null");
            $.sendMDNAsynchronously = Objects.requireNonNull($.sendMDNAsynchronously, "expected parameter 'sendMDNAsynchronously' to be non-null");
            $.signMDN = Objects.requireNonNull($.signMDN, "expected parameter 'signMDN' to be non-null");
            $.signOutboundMDNIfOptional = Objects.requireNonNull($.signOutboundMDNIfOptional, "expected parameter 'signOutboundMDNIfOptional' to be non-null");
            return $;
        }
    }

}
