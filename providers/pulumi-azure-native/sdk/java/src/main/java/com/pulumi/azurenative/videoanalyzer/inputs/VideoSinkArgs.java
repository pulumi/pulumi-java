// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.videoanalyzer.inputs;

import com.pulumi.azurenative.videoanalyzer.inputs.NodeInputArgs;
import com.pulumi.azurenative.videoanalyzer.inputs.VideoCreationPropertiesArgs;
import com.pulumi.azurenative.videoanalyzer.inputs.VideoPublishingOptionsArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Video sink in a live topology allows for video and audio to be captured, optionally archived, and published via a video resource. If archiving is enabled, this results in a video of type &#39;archive&#39;. If used in a batch topology, this allows for video and audio to be stored as a file, and published via a video resource of type &#39;file&#39;
 * 
 */
public final class VideoSinkArgs extends com.pulumi.resources.ResourceArgs {

    public static final VideoSinkArgs Empty = new VideoSinkArgs();

    /**
     * An array of upstream node references within the topology to be used as inputs for this node.
     * 
     */
    @Import(name="inputs", required=true)
    private Output<List<NodeInputArgs>> inputs;

    public Output<List<NodeInputArgs>> inputs() {
        return this.inputs;
    }

    /**
     * Node name. Must be unique within the topology.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    public Output<String> name() {
        return this.name;
    }

    /**
     * The discriminator for derived types.
     * Expected value is &#39;#Microsoft.VideoAnalyzer.VideoSink&#39;.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    /**
     * Optional video properties to be used in case a new video resource needs to be created on the service.
     * 
     */
    @Import(name="videoCreationProperties")
    private @Nullable Output<VideoCreationPropertiesArgs> videoCreationProperties;

    public Optional<Output<VideoCreationPropertiesArgs>> videoCreationProperties() {
        return Optional.ofNullable(this.videoCreationProperties);
    }

    /**
     * Name of a new or existing video resource used to capture and publish content. Note: if downstream of RTSP source, and if disableArchive is set to true, then no content is archived.
     * 
     */
    @Import(name="videoName", required=true)
    private Output<String> videoName;

    public Output<String> videoName() {
        return this.videoName;
    }

    /**
     * Options to change how the video sink publishes content via the video resource. This property is only allowed for topologies where &#34;kind&#34; is set to &#34;live&#34;.
     * 
     */
    @Import(name="videoPublishingOptions")
    private @Nullable Output<VideoPublishingOptionsArgs> videoPublishingOptions;

    public Optional<Output<VideoPublishingOptionsArgs>> videoPublishingOptions() {
        return Optional.ofNullable(this.videoPublishingOptions);
    }

    private VideoSinkArgs() {}

    private VideoSinkArgs(VideoSinkArgs $) {
        this.inputs = $.inputs;
        this.name = $.name;
        this.type = $.type;
        this.videoCreationProperties = $.videoCreationProperties;
        this.videoName = $.videoName;
        this.videoPublishingOptions = $.videoPublishingOptions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VideoSinkArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VideoSinkArgs $;

        public Builder() {
            $ = new VideoSinkArgs();
        }

        public Builder(VideoSinkArgs defaults) {
            $ = new VideoSinkArgs(Objects.requireNonNull(defaults));
        }

        public Builder inputs(Output<List<NodeInputArgs>> inputs) {
            $.inputs = inputs;
            return this;
        }

        public Builder inputs(List<NodeInputArgs> inputs) {
            return inputs(Output.of(inputs));
        }

        public Builder inputs(NodeInputArgs... inputs) {
            return inputs(List.of(inputs));
        }

        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public Builder videoCreationProperties(@Nullable Output<VideoCreationPropertiesArgs> videoCreationProperties) {
            $.videoCreationProperties = videoCreationProperties;
            return this;
        }

        public Builder videoCreationProperties(VideoCreationPropertiesArgs videoCreationProperties) {
            return videoCreationProperties(Output.of(videoCreationProperties));
        }

        public Builder videoName(Output<String> videoName) {
            $.videoName = videoName;
            return this;
        }

        public Builder videoName(String videoName) {
            return videoName(Output.of(videoName));
        }

        public Builder videoPublishingOptions(@Nullable Output<VideoPublishingOptionsArgs> videoPublishingOptions) {
            $.videoPublishingOptions = videoPublishingOptions;
            return this;
        }

        public Builder videoPublishingOptions(VideoPublishingOptionsArgs videoPublishingOptions) {
            return videoPublishingOptions(Output.of(videoPublishingOptions));
        }

        public VideoSinkArgs build() {
            $.inputs = Objects.requireNonNull($.inputs, "expected parameter 'inputs' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.type = Codegen.stringProp("type").output().arg($.type).require();
            $.videoName = Objects.requireNonNull($.videoName, "expected parameter 'videoName' to be non-null");
            return $;
        }
    }

}
