// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.authorization.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * General metadata for the parameter.
 * 
 */
public final class ParameterDefinitionsValueMetadataArgs extends com.pulumi.resources.ResourceArgs {

    public static final ParameterDefinitionsValueMetadataArgs Empty = new ParameterDefinitionsValueMetadataArgs();

    /**
     * Set to true to have Azure portal create role assignments on the resource ID or resource scope value of this parameter during policy assignment. This property is useful in case you wish to assign permissions outside the assignment scope.
     * 
     */
    @Import(name="assignPermissions")
    private @Nullable Output<Boolean> assignPermissions;

    /**
     * @return Set to true to have Azure portal create role assignments on the resource ID or resource scope value of this parameter during policy assignment. This property is useful in case you wish to assign permissions outside the assignment scope.
     * 
     */
    public Optional<Output<Boolean>> assignPermissions() {
        return Optional.ofNullable(this.assignPermissions);
    }

    /**
     * The description of the parameter.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the parameter.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The display name for the parameter.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return The display name for the parameter.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Used when assigning the policy definition through the portal. Provides a context aware list of values for the user to choose from.
     * 
     */
    @Import(name="strongType")
    private @Nullable Output<String> strongType;

    /**
     * @return Used when assigning the policy definition through the portal. Provides a context aware list of values for the user to choose from.
     * 
     */
    public Optional<Output<String>> strongType() {
        return Optional.ofNullable(this.strongType);
    }

    private ParameterDefinitionsValueMetadataArgs() {}

    private ParameterDefinitionsValueMetadataArgs(ParameterDefinitionsValueMetadataArgs $) {
        this.assignPermissions = $.assignPermissions;
        this.description = $.description;
        this.displayName = $.displayName;
        this.strongType = $.strongType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ParameterDefinitionsValueMetadataArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ParameterDefinitionsValueMetadataArgs $;

        public Builder() {
            $ = new ParameterDefinitionsValueMetadataArgs();
        }

        public Builder(ParameterDefinitionsValueMetadataArgs defaults) {
            $ = new ParameterDefinitionsValueMetadataArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param assignPermissions Set to true to have Azure portal create role assignments on the resource ID or resource scope value of this parameter during policy assignment. This property is useful in case you wish to assign permissions outside the assignment scope.
         * 
         * @return builder
         * 
         */
        public Builder assignPermissions(@Nullable Output<Boolean> assignPermissions) {
            $.assignPermissions = assignPermissions;
            return this;
        }

        /**
         * @param assignPermissions Set to true to have Azure portal create role assignments on the resource ID or resource scope value of this parameter during policy assignment. This property is useful in case you wish to assign permissions outside the assignment scope.
         * 
         * @return builder
         * 
         */
        public Builder assignPermissions(Boolean assignPermissions) {
            return assignPermissions(Output.of(assignPermissions));
        }

        /**
         * @param description The description of the parameter.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the parameter.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName The display name for the parameter.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The display name for the parameter.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param strongType Used when assigning the policy definition through the portal. Provides a context aware list of values for the user to choose from.
         * 
         * @return builder
         * 
         */
        public Builder strongType(@Nullable Output<String> strongType) {
            $.strongType = strongType;
            return this;
        }

        /**
         * @param strongType Used when assigning the policy definition through the portal. Provides a context aware list of values for the user to choose from.
         * 
         * @return builder
         * 
         */
        public Builder strongType(String strongType) {
            return strongType(Output.of(strongType));
        }

        public ParameterDefinitionsValueMetadataArgs build() {
            return $;
        }
    }

}
