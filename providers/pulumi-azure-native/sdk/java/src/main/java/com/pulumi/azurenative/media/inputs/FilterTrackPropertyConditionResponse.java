// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.media.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * The class to specify one track property condition.
 * 
 */
public final class FilterTrackPropertyConditionResponse extends com.pulumi.resources.InvokeArgs {

    public static final FilterTrackPropertyConditionResponse Empty = new FilterTrackPropertyConditionResponse();

    /**
     * The track property condition operation.
     * 
     */
    @Import(name="operation", required=true)
    private String operation;

    /**
     * @return The track property condition operation.
     * 
     */
    public String operation() {
        return this.operation;
    }

    /**
     * The track property type.
     * 
     */
    @Import(name="property", required=true)
    private String property;

    /**
     * @return The track property type.
     * 
     */
    public String property() {
        return this.property;
    }

    /**
     * The track property value.
     * 
     */
    @Import(name="value", required=true)
    private String value;

    /**
     * @return The track property value.
     * 
     */
    public String value() {
        return this.value;
    }

    private FilterTrackPropertyConditionResponse() {}

    private FilterTrackPropertyConditionResponse(FilterTrackPropertyConditionResponse $) {
        this.operation = $.operation;
        this.property = $.property;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FilterTrackPropertyConditionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FilterTrackPropertyConditionResponse $;

        public Builder() {
            $ = new FilterTrackPropertyConditionResponse();
        }

        public Builder(FilterTrackPropertyConditionResponse defaults) {
            $ = new FilterTrackPropertyConditionResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param operation The track property condition operation.
         * 
         * @return builder
         * 
         */
        public Builder operation(String operation) {
            $.operation = operation;
            return this;
        }

        /**
         * @param property The track property type.
         * 
         * @return builder
         * 
         */
        public Builder property(String property) {
            $.property = property;
            return this;
        }

        /**
         * @param value The track property value.
         * 
         * @return builder
         * 
         */
        public Builder value(String value) {
            $.value = value;
            return this;
        }

        public FilterTrackPropertyConditionResponse build() {
            $.operation = Objects.requireNonNull($.operation, "expected parameter 'operation' to be non-null");
            $.property = Objects.requireNonNull($.property, "expected parameter 'property' to be non-null");
            $.value = Objects.requireNonNull($.value, "expected parameter 'value' to be non-null");
            return $;
        }
    }

}
