// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.logic.inputs;

import com.pulumi.azurenative.logic.enums.RosettaNetPipRoleType;
import com.pulumi.azurenative.logic.inputs.RosettaNetPipBusinessDocumentArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The integration account RosettaNet ProcessConfiguration role settings.
 * 
 */
public final class RosettaNetPipRoleSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final RosettaNetPipRoleSettingsArgs Empty = new RosettaNetPipRoleSettingsArgs();

    /**
     * The action name.
     * 
     */
    @Import(name="action", required=true)
    private Output<String> action;

    public Output<String> action() {
        return this.action;
    }

    /**
     * The RosettaNet ProcessConfiguration business document.
     * 
     */
    @Import(name="businessDocument", required=true)
    private Output<RosettaNetPipBusinessDocumentArgs> businessDocument;

    public Output<RosettaNetPipBusinessDocumentArgs> businessDocument() {
        return this.businessDocument;
    }

    /**
     * The description.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The role name.
     * 
     */
    @Import(name="role", required=true)
    private Output<String> role;

    public Output<String> role() {
        return this.role;
    }

    /**
     * The RosettaNet ProcessConfiguration role type.
     * 
     */
    @Import(name="roleType", required=true)
    private Output<RosettaNetPipRoleType> roleType;

    public Output<RosettaNetPipRoleType> roleType() {
        return this.roleType;
    }

    /**
     * The service name.
     * 
     */
    @Import(name="service", required=true)
    private Output<String> service;

    public Output<String> service() {
        return this.service;
    }

    /**
     * The service classification name.
     * 
     */
    @Import(name="serviceClassification", required=true)
    private Output<String> serviceClassification;

    public Output<String> serviceClassification() {
        return this.serviceClassification;
    }

    private RosettaNetPipRoleSettingsArgs() {}

    private RosettaNetPipRoleSettingsArgs(RosettaNetPipRoleSettingsArgs $) {
        this.action = $.action;
        this.businessDocument = $.businessDocument;
        this.description = $.description;
        this.role = $.role;
        this.roleType = $.roleType;
        this.service = $.service;
        this.serviceClassification = $.serviceClassification;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RosettaNetPipRoleSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RosettaNetPipRoleSettingsArgs $;

        public Builder() {
            $ = new RosettaNetPipRoleSettingsArgs();
        }

        public Builder(RosettaNetPipRoleSettingsArgs defaults) {
            $ = new RosettaNetPipRoleSettingsArgs(Objects.requireNonNull(defaults));
        }

        public Builder action(Output<String> action) {
            $.action = action;
            return this;
        }

        public Builder action(String action) {
            return action(Output.of(action));
        }

        public Builder businessDocument(Output<RosettaNetPipBusinessDocumentArgs> businessDocument) {
            $.businessDocument = businessDocument;
            return this;
        }

        public Builder businessDocument(RosettaNetPipBusinessDocumentArgs businessDocument) {
            return businessDocument(Output.of(businessDocument));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder role(Output<String> role) {
            $.role = role;
            return this;
        }

        public Builder role(String role) {
            return role(Output.of(role));
        }

        public Builder roleType(Output<RosettaNetPipRoleType> roleType) {
            $.roleType = roleType;
            return this;
        }

        public Builder roleType(RosettaNetPipRoleType roleType) {
            return roleType(Output.of(roleType));
        }

        public Builder service(Output<String> service) {
            $.service = service;
            return this;
        }

        public Builder service(String service) {
            return service(Output.of(service));
        }

        public Builder serviceClassification(Output<String> serviceClassification) {
            $.serviceClassification = serviceClassification;
            return this;
        }

        public Builder serviceClassification(String serviceClassification) {
            return serviceClassification(Output.of(serviceClassification));
        }

        public RosettaNetPipRoleSettingsArgs build() {
            $.action = Objects.requireNonNull($.action, "expected parameter 'action' to be non-null");
            $.businessDocument = Objects.requireNonNull($.businessDocument, "expected parameter 'businessDocument' to be non-null");
            $.role = Objects.requireNonNull($.role, "expected parameter 'role' to be non-null");
            $.roleType = Objects.requireNonNull($.roleType, "expected parameter 'roleType' to be non-null");
            $.service = Objects.requireNonNull($.service, "expected parameter 'service' to be non-null");
            $.serviceClassification = Objects.requireNonNull($.serviceClassification, "expected parameter 'serviceClassification' to be non-null");
            return $;
        }
    }

}
