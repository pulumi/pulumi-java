// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.batch.outputs;

import com.pulumi.azurenative.batch.outputs.EnvironmentSettingResponse;
import com.pulumi.azurenative.batch.outputs.ResourceFileResponse;
import com.pulumi.azurenative.batch.outputs.TaskContainerSettingsResponse;
import com.pulumi.azurenative.batch.outputs.UserIdentityResponse;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class StartTaskResponse {
    /**
     * The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. Required if any other properties of the startTask are specified.
     * 
     */
    private final @Nullable String commandLine;
    /**
     * When this is specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all task environment variables are mapped into the container, and the task command line is executed in the container.
     * 
     */
    private final @Nullable TaskContainerSettingsResponse containerSettings;
    private final @Nullable List<EnvironmentSettingResponse> environmentSettings;
    /**
     * The Batch service retries a task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try the task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the task. If the maximum retry count is -1, the Batch service retries the task without limit.
     * 
     */
    private final @Nullable Integer maxTaskRetryCount;
    private final @Nullable List<ResourceFileResponse> resourceFiles;
    /**
     * If omitted, the task runs as a non-administrative user unique to the task.
     * 
     */
    private final @Nullable UserIdentityResponse userIdentity;
    /**
     * If true and the start task fails on a compute node, the Batch service retries the start task up to its maximum retry count (maxTaskRetryCount). If the task has still not completed successfully after all retries, then the Batch service marks the compute node unusable, and will not schedule tasks to it. This condition can be detected via the node state and scheduling error detail. If false, the Batch service will not wait for the start task to complete. In this case, other tasks can start executing on the compute node while the start task is still running; and even if the start task fails, new tasks will continue to be scheduled on the node. The default is true.
     * 
     */
    private final @Nullable Boolean waitForSuccess;

    @CustomType.Constructor
    private StartTaskResponse(
        @CustomType.Parameter("commandLine") @Nullable String commandLine,
        @CustomType.Parameter("containerSettings") @Nullable TaskContainerSettingsResponse containerSettings,
        @CustomType.Parameter("environmentSettings") @Nullable List<EnvironmentSettingResponse> environmentSettings,
        @CustomType.Parameter("maxTaskRetryCount") @Nullable Integer maxTaskRetryCount,
        @CustomType.Parameter("resourceFiles") @Nullable List<ResourceFileResponse> resourceFiles,
        @CustomType.Parameter("userIdentity") @Nullable UserIdentityResponse userIdentity,
        @CustomType.Parameter("waitForSuccess") @Nullable Boolean waitForSuccess) {
        this.commandLine = commandLine;
        this.containerSettings = containerSettings;
        this.environmentSettings = environmentSettings;
        this.maxTaskRetryCount = maxTaskRetryCount;
        this.resourceFiles = resourceFiles;
        this.userIdentity = userIdentity;
        this.waitForSuccess = waitForSuccess;
    }

    /**
     * The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. Required if any other properties of the startTask are specified.
     * 
    */
    public Optional<String> commandLine() {
        return Optional.ofNullable(this.commandLine);
    }
    /**
     * When this is specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all task environment variables are mapped into the container, and the task command line is executed in the container.
     * 
    */
    public Optional<TaskContainerSettingsResponse> containerSettings() {
        return Optional.ofNullable(this.containerSettings);
    }
    public List<EnvironmentSettingResponse> environmentSettings() {
        return this.environmentSettings == null ? List.of() : this.environmentSettings;
    }
    /**
     * The Batch service retries a task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try the task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the task. If the maximum retry count is -1, the Batch service retries the task without limit.
     * 
    */
    public Optional<Integer> maxTaskRetryCount() {
        return Optional.ofNullable(this.maxTaskRetryCount);
    }
    public List<ResourceFileResponse> resourceFiles() {
        return this.resourceFiles == null ? List.of() : this.resourceFiles;
    }
    /**
     * If omitted, the task runs as a non-administrative user unique to the task.
     * 
    */
    public Optional<UserIdentityResponse> userIdentity() {
        return Optional.ofNullable(this.userIdentity);
    }
    /**
     * If true and the start task fails on a compute node, the Batch service retries the start task up to its maximum retry count (maxTaskRetryCount). If the task has still not completed successfully after all retries, then the Batch service marks the compute node unusable, and will not schedule tasks to it. This condition can be detected via the node state and scheduling error detail. If false, the Batch service will not wait for the start task to complete. In this case, other tasks can start executing on the compute node while the start task is still running; and even if the start task fails, new tasks will continue to be scheduled on the node. The default is true.
     * 
    */
    public Optional<Boolean> waitForSuccess() {
        return Optional.ofNullable(this.waitForSuccess);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(StartTaskResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String commandLine;
        private @Nullable TaskContainerSettingsResponse containerSettings;
        private @Nullable List<EnvironmentSettingResponse> environmentSettings;
        private @Nullable Integer maxTaskRetryCount;
        private @Nullable List<ResourceFileResponse> resourceFiles;
        private @Nullable UserIdentityResponse userIdentity;
        private @Nullable Boolean waitForSuccess;

        public Builder() {
    	      // Empty
        }

        public Builder(StartTaskResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.commandLine = defaults.commandLine;
    	      this.containerSettings = defaults.containerSettings;
    	      this.environmentSettings = defaults.environmentSettings;
    	      this.maxTaskRetryCount = defaults.maxTaskRetryCount;
    	      this.resourceFiles = defaults.resourceFiles;
    	      this.userIdentity = defaults.userIdentity;
    	      this.waitForSuccess = defaults.waitForSuccess;
        }

        public Builder commandLine(@Nullable String commandLine) {
            this.commandLine = commandLine;
            return this;
        }
        public Builder containerSettings(@Nullable TaskContainerSettingsResponse containerSettings) {
            this.containerSettings = containerSettings;
            return this;
        }
        public Builder environmentSettings(@Nullable List<EnvironmentSettingResponse> environmentSettings) {
            this.environmentSettings = environmentSettings;
            return this;
        }
        public Builder environmentSettings(EnvironmentSettingResponse... environmentSettings) {
            return environmentSettings(List.of(environmentSettings));
        }
        public Builder maxTaskRetryCount(@Nullable Integer maxTaskRetryCount) {
            this.maxTaskRetryCount = maxTaskRetryCount;
            return this;
        }
        public Builder resourceFiles(@Nullable List<ResourceFileResponse> resourceFiles) {
            this.resourceFiles = resourceFiles;
            return this;
        }
        public Builder resourceFiles(ResourceFileResponse... resourceFiles) {
            return resourceFiles(List.of(resourceFiles));
        }
        public Builder userIdentity(@Nullable UserIdentityResponse userIdentity) {
            this.userIdentity = userIdentity;
            return this;
        }
        public Builder waitForSuccess(@Nullable Boolean waitForSuccess) {
            this.waitForSuccess = waitForSuccess;
            return this;
        }        public StartTaskResponse build() {
            return new StartTaskResponse(commandLine, containerSettings, environmentSettings, maxTaskRetryCount, resourceFiles, userIdentity, waitForSuccess);
        }
    }
}
