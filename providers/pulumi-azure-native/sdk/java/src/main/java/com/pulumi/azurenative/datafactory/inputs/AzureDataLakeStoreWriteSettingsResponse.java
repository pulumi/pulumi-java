// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Object;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Azure data lake store write settings.
 * 
 */
public final class AzureDataLakeStoreWriteSettingsResponse extends com.pulumi.resources.InvokeArgs {

    public static final AzureDataLakeStoreWriteSettingsResponse Empty = new AzureDataLakeStoreWriteSettingsResponse();

    /**
     * The type of copy behavior for copy sink.
     * 
     */
    @Import(name="copyBehavior")
    private @Nullable Object copyBehavior;

    public Optional<Object> copyBehavior() {
        return Optional.ofNullable(this.copyBehavior);
    }

    /**
     * If true, disable data store metrics collection. Default is false. Type: boolean (or Expression with resultType boolean).
     * 
     */
    @Import(name="disableMetricsCollection")
    private @Nullable Object disableMetricsCollection;

    public Optional<Object> disableMetricsCollection() {
        return Optional.ofNullable(this.disableMetricsCollection);
    }

    /**
     * Specifies the expiry time of the written files. The time is applied to the UTC time zone in the format of &#34;2018-12-01T05:00:00Z&#34;. Default value is NULL. Type: integer (or Expression with resultType integer).
     * 
     */
    @Import(name="expiryDateTime")
    private @Nullable Object expiryDateTime;

    public Optional<Object> expiryDateTime() {
        return Optional.ofNullable(this.expiryDateTime);
    }

    /**
     * The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
     * 
     */
    @Import(name="maxConcurrentConnections")
    private @Nullable Object maxConcurrentConnections;

    public Optional<Object> maxConcurrentConnections() {
        return Optional.ofNullable(this.maxConcurrentConnections);
    }

    /**
     * The write setting type.
     * Expected value is &#39;AzureDataLakeStoreWriteSettings&#39;.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    public String type() {
        return this.type;
    }

    private AzureDataLakeStoreWriteSettingsResponse() {}

    private AzureDataLakeStoreWriteSettingsResponse(AzureDataLakeStoreWriteSettingsResponse $) {
        this.copyBehavior = $.copyBehavior;
        this.disableMetricsCollection = $.disableMetricsCollection;
        this.expiryDateTime = $.expiryDateTime;
        this.maxConcurrentConnections = $.maxConcurrentConnections;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AzureDataLakeStoreWriteSettingsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AzureDataLakeStoreWriteSettingsResponse $;

        public Builder() {
            $ = new AzureDataLakeStoreWriteSettingsResponse();
        }

        public Builder(AzureDataLakeStoreWriteSettingsResponse defaults) {
            $ = new AzureDataLakeStoreWriteSettingsResponse(Objects.requireNonNull(defaults));
        }

        public Builder copyBehavior(@Nullable Object copyBehavior) {
            $.copyBehavior = copyBehavior;
            return this;
        }

        public Builder disableMetricsCollection(@Nullable Object disableMetricsCollection) {
            $.disableMetricsCollection = disableMetricsCollection;
            return this;
        }

        public Builder expiryDateTime(@Nullable Object expiryDateTime) {
            $.expiryDateTime = expiryDateTime;
            return this;
        }

        public Builder maxConcurrentConnections(@Nullable Object maxConcurrentConnections) {
            $.maxConcurrentConnections = maxConcurrentConnections;
            return this;
        }

        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public AzureDataLakeStoreWriteSettingsResponse build() {
            $.type = Codegen.stringProp("type").arg($.type).require();
            return $;
        }
    }

}
