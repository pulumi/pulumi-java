// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.azurenative.network.enums.MatchProcessingBehavior;
import com.pulumi.azurenative.network.inputs.RulesEngineActionArgs;
import com.pulumi.azurenative.network.inputs.RulesEngineMatchConditionArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Contains a list of match conditions, and an action on how to modify the request/response. If multiple rules match, the actions from one rule that conflict with a previous rule overwrite for a singular action, or append in the case of headers manipulation.
 * 
 */
public final class RulesEngineRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final RulesEngineRuleArgs Empty = new RulesEngineRuleArgs();

    /**
     * Actions to perform on the request and response if all of the match conditions are met.
     * 
     */
    @Import(name="action", required=true)
      private final Output<RulesEngineActionArgs> action;

    public Output<RulesEngineActionArgs> action() {
        return this.action;
    }

    /**
     * A list of match conditions that must meet in order for the actions of this rule to run. Having no match conditions means the actions will always run.
     * 
     */
    @Import(name="matchConditions")
      private final @Nullable Output<List<RulesEngineMatchConditionArgs>> matchConditions;

    public Output<List<RulesEngineMatchConditionArgs>> matchConditions() {
        return this.matchConditions == null ? Codegen.empty() : this.matchConditions;
    }

    /**
     * If this rule is a match should the rules engine continue running the remaining rules or stop. If not present, defaults to Continue.
     * 
     */
    @Import(name="matchProcessingBehavior")
      private final @Nullable Output<Either<String,MatchProcessingBehavior>> matchProcessingBehavior;

    public Output<Either<String,MatchProcessingBehavior>> matchProcessingBehavior() {
        return this.matchProcessingBehavior == null ? Codegen.empty() : this.matchProcessingBehavior;
    }

    /**
     * A name to refer to this specific rule.
     * 
     */
    @Import(name="name", required=true)
      private final Output<String> name;

    public Output<String> name() {
        return this.name;
    }

    /**
     * A priority assigned to this rule.
     * 
     */
    @Import(name="priority", required=true)
      private final Output<Integer> priority;

    public Output<Integer> priority() {
        return this.priority;
    }

    public RulesEngineRuleArgs(
        Output<RulesEngineActionArgs> action,
        @Nullable Output<List<RulesEngineMatchConditionArgs>> matchConditions,
        @Nullable Output<Either<String,MatchProcessingBehavior>> matchProcessingBehavior,
        Output<String> name,
        Output<Integer> priority) {
        this.action = Objects.requireNonNull(action, "expected parameter 'action' to be non-null");
        this.matchConditions = matchConditions;
        this.matchProcessingBehavior = matchProcessingBehavior;
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.priority = Objects.requireNonNull(priority, "expected parameter 'priority' to be non-null");
    }

    private RulesEngineRuleArgs() {
        this.action = Codegen.empty();
        this.matchConditions = Codegen.empty();
        this.matchProcessingBehavior = Codegen.empty();
        this.name = Codegen.empty();
        this.priority = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RulesEngineRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<RulesEngineActionArgs> action;
        private @Nullable Output<List<RulesEngineMatchConditionArgs>> matchConditions;
        private @Nullable Output<Either<String,MatchProcessingBehavior>> matchProcessingBehavior;
        private Output<String> name;
        private Output<Integer> priority;

        public Builder() {
    	      // Empty
        }

        public Builder(RulesEngineRuleArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.matchConditions = defaults.matchConditions;
    	      this.matchProcessingBehavior = defaults.matchProcessingBehavior;
    	      this.name = defaults.name;
    	      this.priority = defaults.priority;
        }

        public Builder action(Output<RulesEngineActionArgs> action) {
            this.action = Objects.requireNonNull(action);
            return this;
        }
        public Builder action(RulesEngineActionArgs action) {
            this.action = Output.of(Objects.requireNonNull(action));
            return this;
        }
        public Builder matchConditions(@Nullable Output<List<RulesEngineMatchConditionArgs>> matchConditions) {
            this.matchConditions = matchConditions;
            return this;
        }
        public Builder matchConditions(@Nullable List<RulesEngineMatchConditionArgs> matchConditions) {
            this.matchConditions = Codegen.ofNullable(matchConditions);
            return this;
        }
        public Builder matchConditions(RulesEngineMatchConditionArgs... matchConditions) {
            return matchConditions(List.of(matchConditions));
        }
        public Builder matchProcessingBehavior(@Nullable Output<Either<String,MatchProcessingBehavior>> matchProcessingBehavior) {
            this.matchProcessingBehavior = matchProcessingBehavior;
            return this;
        }
        public Builder matchProcessingBehavior(@Nullable Either<String,MatchProcessingBehavior> matchProcessingBehavior) {
            this.matchProcessingBehavior = Codegen.ofNullable(matchProcessingBehavior);
            return this;
        }
        public Builder name(Output<String> name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder name(String name) {
            this.name = Output.of(Objects.requireNonNull(name));
            return this;
        }
        public Builder priority(Output<Integer> priority) {
            this.priority = Objects.requireNonNull(priority);
            return this;
        }
        public Builder priority(Integer priority) {
            this.priority = Output.of(Objects.requireNonNull(priority));
            return this;
        }        public RulesEngineRuleArgs build() {
            return new RulesEngineRuleArgs(action, matchConditions, matchProcessingBehavior, name, priority);
        }
    }
}
