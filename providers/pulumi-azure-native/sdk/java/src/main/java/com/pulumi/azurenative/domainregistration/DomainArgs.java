// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.domainregistration;

import com.pulumi.azurenative.domainregistration.enums.DnsType;
import com.pulumi.azurenative.domainregistration.inputs.ContactArgs;
import com.pulumi.azurenative.domainregistration.inputs.DomainPurchaseConsentArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainArgs extends com.pulumi.resources.ResourceArgs {

    public static final DomainArgs Empty = new DomainArgs();

    @Import(name="authCode")
    private @Nullable Output<String> authCode;

    public Optional<Output<String>> authCode() {
        return Optional.ofNullable(this.authCode);
    }

    /**
     * &lt;code&gt;true&lt;/code&gt; if the domain should be automatically renewed; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    @Import(name="autoRenew")
    private @Nullable Output<Boolean> autoRenew;

    /**
     * @return &lt;code&gt;true&lt;/code&gt; if the domain should be automatically renewed; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    public Optional<Output<Boolean>> autoRenew() {
        return Optional.ofNullable(this.autoRenew);
    }

    /**
     * Legal agreement consent.
     * 
     */
    @Import(name="consent", required=true)
    private Output<DomainPurchaseConsentArgs> consent;

    /**
     * @return Legal agreement consent.
     * 
     */
    public Output<DomainPurchaseConsentArgs> consent() {
        return this.consent;
    }

    /**
     * Administrative contact.
     * 
     */
    @Import(name="contactAdmin", required=true)
    private Output<ContactArgs> contactAdmin;

    /**
     * @return Administrative contact.
     * 
     */
    public Output<ContactArgs> contactAdmin() {
        return this.contactAdmin;
    }

    /**
     * Billing contact.
     * 
     */
    @Import(name="contactBilling", required=true)
    private Output<ContactArgs> contactBilling;

    /**
     * @return Billing contact.
     * 
     */
    public Output<ContactArgs> contactBilling() {
        return this.contactBilling;
    }

    /**
     * Registrant contact.
     * 
     */
    @Import(name="contactRegistrant", required=true)
    private Output<ContactArgs> contactRegistrant;

    /**
     * @return Registrant contact.
     * 
     */
    public Output<ContactArgs> contactRegistrant() {
        return this.contactRegistrant;
    }

    /**
     * Technical contact.
     * 
     */
    @Import(name="contactTech", required=true)
    private Output<ContactArgs> contactTech;

    /**
     * @return Technical contact.
     * 
     */
    public Output<ContactArgs> contactTech() {
        return this.contactTech;
    }

    /**
     * Current DNS type
     * 
     */
    @Import(name="dnsType")
    private @Nullable Output<DnsType> dnsType;

    /**
     * @return Current DNS type
     * 
     */
    public Optional<Output<DnsType>> dnsType() {
        return Optional.ofNullable(this.dnsType);
    }

    /**
     * Azure DNS Zone to use
     * 
     */
    @Import(name="dnsZoneId")
    private @Nullable Output<String> dnsZoneId;

    /**
     * @return Azure DNS Zone to use
     * 
     */
    public Optional<Output<String>> dnsZoneId() {
        return Optional.ofNullable(this.dnsZoneId);
    }

    /**
     * Name of the domain.
     * 
     */
    @Import(name="domainName")
    private @Nullable Output<String> domainName;

    /**
     * @return Name of the domain.
     * 
     */
    public Optional<Output<String>> domainName() {
        return Optional.ofNullable(this.domainName);
    }

    /**
     * Kind of resource.
     * 
     */
    @Import(name="kind")
    private @Nullable Output<String> kind;

    /**
     * @return Kind of resource.
     * 
     */
    public Optional<Output<String>> kind() {
        return Optional.ofNullable(this.kind);
    }

    /**
     * Resource Location.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Resource Location.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * &lt;code&gt;true&lt;/code&gt; if domain privacy is enabled for this domain; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    @Import(name="privacy")
    private @Nullable Output<Boolean> privacy;

    /**
     * @return &lt;code&gt;true&lt;/code&gt; if domain privacy is enabled for this domain; otherwise, &lt;code&gt;false&lt;/code&gt;.
     * 
     */
    public Optional<Output<Boolean>> privacy() {
        return Optional.ofNullable(this.privacy);
    }

    /**
     * Name of the resource group to which the resource belongs.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return Name of the resource group to which the resource belongs.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Resource tags.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Target DNS type (would be used for migration)
     * 
     */
    @Import(name="targetDnsType")
    private @Nullable Output<DnsType> targetDnsType;

    /**
     * @return Target DNS type (would be used for migration)
     * 
     */
    public Optional<Output<DnsType>> targetDnsType() {
        return Optional.ofNullable(this.targetDnsType);
    }

    private DomainArgs() {}

    private DomainArgs(DomainArgs $) {
        this.authCode = $.authCode;
        this.autoRenew = $.autoRenew;
        this.consent = $.consent;
        this.contactAdmin = $.contactAdmin;
        this.contactBilling = $.contactBilling;
        this.contactRegistrant = $.contactRegistrant;
        this.contactTech = $.contactTech;
        this.dnsType = $.dnsType;
        this.dnsZoneId = $.dnsZoneId;
        this.domainName = $.domainName;
        this.kind = $.kind;
        this.location = $.location;
        this.privacy = $.privacy;
        this.resourceGroupName = $.resourceGroupName;
        this.tags = $.tags;
        this.targetDnsType = $.targetDnsType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainArgs $;

        public Builder() {
            $ = new DomainArgs();
        }

        public Builder(DomainArgs defaults) {
            $ = new DomainArgs(Objects.requireNonNull(defaults));
        }

        public Builder authCode(@Nullable Output<String> authCode) {
            $.authCode = authCode;
            return this;
        }

        public Builder authCode(String authCode) {
            return authCode(Output.of(authCode));
        }

        /**
         * @param autoRenew &lt;code&gt;true&lt;/code&gt; if the domain should be automatically renewed; otherwise, &lt;code&gt;false&lt;/code&gt;.
         * 
         * @return builder
         * 
         */
        public Builder autoRenew(@Nullable Output<Boolean> autoRenew) {
            $.autoRenew = autoRenew;
            return this;
        }

        /**
         * @param autoRenew &lt;code&gt;true&lt;/code&gt; if the domain should be automatically renewed; otherwise, &lt;code&gt;false&lt;/code&gt;.
         * 
         * @return builder
         * 
         */
        public Builder autoRenew(Boolean autoRenew) {
            return autoRenew(Output.of(autoRenew));
        }

        /**
         * @param consent Legal agreement consent.
         * 
         * @return builder
         * 
         */
        public Builder consent(Output<DomainPurchaseConsentArgs> consent) {
            $.consent = consent;
            return this;
        }

        /**
         * @param consent Legal agreement consent.
         * 
         * @return builder
         * 
         */
        public Builder consent(DomainPurchaseConsentArgs consent) {
            return consent(Output.of(consent));
        }

        /**
         * @param contactAdmin Administrative contact.
         * 
         * @return builder
         * 
         */
        public Builder contactAdmin(Output<ContactArgs> contactAdmin) {
            $.contactAdmin = contactAdmin;
            return this;
        }

        /**
         * @param contactAdmin Administrative contact.
         * 
         * @return builder
         * 
         */
        public Builder contactAdmin(ContactArgs contactAdmin) {
            return contactAdmin(Output.of(contactAdmin));
        }

        /**
         * @param contactBilling Billing contact.
         * 
         * @return builder
         * 
         */
        public Builder contactBilling(Output<ContactArgs> contactBilling) {
            $.contactBilling = contactBilling;
            return this;
        }

        /**
         * @param contactBilling Billing contact.
         * 
         * @return builder
         * 
         */
        public Builder contactBilling(ContactArgs contactBilling) {
            return contactBilling(Output.of(contactBilling));
        }

        /**
         * @param contactRegistrant Registrant contact.
         * 
         * @return builder
         * 
         */
        public Builder contactRegistrant(Output<ContactArgs> contactRegistrant) {
            $.contactRegistrant = contactRegistrant;
            return this;
        }

        /**
         * @param contactRegistrant Registrant contact.
         * 
         * @return builder
         * 
         */
        public Builder contactRegistrant(ContactArgs contactRegistrant) {
            return contactRegistrant(Output.of(contactRegistrant));
        }

        /**
         * @param contactTech Technical contact.
         * 
         * @return builder
         * 
         */
        public Builder contactTech(Output<ContactArgs> contactTech) {
            $.contactTech = contactTech;
            return this;
        }

        /**
         * @param contactTech Technical contact.
         * 
         * @return builder
         * 
         */
        public Builder contactTech(ContactArgs contactTech) {
            return contactTech(Output.of(contactTech));
        }

        /**
         * @param dnsType Current DNS type
         * 
         * @return builder
         * 
         */
        public Builder dnsType(@Nullable Output<DnsType> dnsType) {
            $.dnsType = dnsType;
            return this;
        }

        /**
         * @param dnsType Current DNS type
         * 
         * @return builder
         * 
         */
        public Builder dnsType(DnsType dnsType) {
            return dnsType(Output.of(dnsType));
        }

        /**
         * @param dnsZoneId Azure DNS Zone to use
         * 
         * @return builder
         * 
         */
        public Builder dnsZoneId(@Nullable Output<String> dnsZoneId) {
            $.dnsZoneId = dnsZoneId;
            return this;
        }

        /**
         * @param dnsZoneId Azure DNS Zone to use
         * 
         * @return builder
         * 
         */
        public Builder dnsZoneId(String dnsZoneId) {
            return dnsZoneId(Output.of(dnsZoneId));
        }

        /**
         * @param domainName Name of the domain.
         * 
         * @return builder
         * 
         */
        public Builder domainName(@Nullable Output<String> domainName) {
            $.domainName = domainName;
            return this;
        }

        /**
         * @param domainName Name of the domain.
         * 
         * @return builder
         * 
         */
        public Builder domainName(String domainName) {
            return domainName(Output.of(domainName));
        }

        /**
         * @param kind Kind of resource.
         * 
         * @return builder
         * 
         */
        public Builder kind(@Nullable Output<String> kind) {
            $.kind = kind;
            return this;
        }

        /**
         * @param kind Kind of resource.
         * 
         * @return builder
         * 
         */
        public Builder kind(String kind) {
            return kind(Output.of(kind));
        }

        /**
         * @param location Resource Location.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Resource Location.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param privacy &lt;code&gt;true&lt;/code&gt; if domain privacy is enabled for this domain; otherwise, &lt;code&gt;false&lt;/code&gt;.
         * 
         * @return builder
         * 
         */
        public Builder privacy(@Nullable Output<Boolean> privacy) {
            $.privacy = privacy;
            return this;
        }

        /**
         * @param privacy &lt;code&gt;true&lt;/code&gt; if domain privacy is enabled for this domain; otherwise, &lt;code&gt;false&lt;/code&gt;.
         * 
         * @return builder
         * 
         */
        public Builder privacy(Boolean privacy) {
            return privacy(Output.of(privacy));
        }

        /**
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName Name of the resource group to which the resource belongs.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param tags Resource tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Resource tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param targetDnsType Target DNS type (would be used for migration)
         * 
         * @return builder
         * 
         */
        public Builder targetDnsType(@Nullable Output<DnsType> targetDnsType) {
            $.targetDnsType = targetDnsType;
            return this;
        }

        /**
         * @param targetDnsType Target DNS type (would be used for migration)
         * 
         * @return builder
         * 
         */
        public Builder targetDnsType(DnsType targetDnsType) {
            return targetDnsType(Output.of(targetDnsType));
        }

        public DomainArgs build() {
            $.autoRenew = Codegen.booleanProp("autoRenew").output().arg($.autoRenew).def(true).getNullable();
            $.consent = Objects.requireNonNull($.consent, "expected parameter 'consent' to be non-null");
            $.contactAdmin = Objects.requireNonNull($.contactAdmin, "expected parameter 'contactAdmin' to be non-null");
            $.contactBilling = Objects.requireNonNull($.contactBilling, "expected parameter 'contactBilling' to be non-null");
            $.contactRegistrant = Objects.requireNonNull($.contactRegistrant, "expected parameter 'contactRegistrant' to be non-null");
            $.contactTech = Objects.requireNonNull($.contactTech, "expected parameter 'contactTech' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
