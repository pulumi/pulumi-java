// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.domainregistration;

import com.pulumi.azurenative.domainregistration.enums.DnsType;
import com.pulumi.azurenative.domainregistration.inputs.ContactArgs;
import com.pulumi.azurenative.domainregistration.inputs.DomainPurchaseConsentArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DomainArgs extends com.pulumi.resources.ResourceArgs {

    public static final DomainArgs Empty = new DomainArgs();

    @Import(name="authCode")
      private final @Nullable Output<String> authCode;

    public Output<String> authCode() {
        return this.authCode == null ? Codegen.empty() : this.authCode;
    }

    /**
     * <code>true</code> if the domain should be automatically renewed; otherwise, <code>false</code>.
     * 
     */
    @Import(name="autoRenew")
      private final @Nullable Output<Boolean> autoRenew;

    public Output<Boolean> autoRenew() {
        return this.autoRenew == null ? Codegen.empty() : this.autoRenew;
    }

    /**
     * Legal agreement consent.
     * 
     */
    @Import(name="consent", required=true)
      private final Output<DomainPurchaseConsentArgs> consent;

    public Output<DomainPurchaseConsentArgs> consent() {
        return this.consent;
    }

    /**
     * Administrative contact.
     * 
     */
    @Import(name="contactAdmin", required=true)
      private final Output<ContactArgs> contactAdmin;

    public Output<ContactArgs> contactAdmin() {
        return this.contactAdmin;
    }

    /**
     * Billing contact.
     * 
     */
    @Import(name="contactBilling", required=true)
      private final Output<ContactArgs> contactBilling;

    public Output<ContactArgs> contactBilling() {
        return this.contactBilling;
    }

    /**
     * Registrant contact.
     * 
     */
    @Import(name="contactRegistrant", required=true)
      private final Output<ContactArgs> contactRegistrant;

    public Output<ContactArgs> contactRegistrant() {
        return this.contactRegistrant;
    }

    /**
     * Technical contact.
     * 
     */
    @Import(name="contactTech", required=true)
      private final Output<ContactArgs> contactTech;

    public Output<ContactArgs> contactTech() {
        return this.contactTech;
    }

    /**
     * Current DNS type
     * 
     */
    @Import(name="dnsType")
      private final @Nullable Output<DnsType> dnsType;

    public Output<DnsType> dnsType() {
        return this.dnsType == null ? Codegen.empty() : this.dnsType;
    }

    /**
     * Azure DNS Zone to use
     * 
     */
    @Import(name="dnsZoneId")
      private final @Nullable Output<String> dnsZoneId;

    public Output<String> dnsZoneId() {
        return this.dnsZoneId == null ? Codegen.empty() : this.dnsZoneId;
    }

    /**
     * Name of the domain.
     * 
     */
    @Import(name="domainName")
      private final @Nullable Output<String> domainName;

    public Output<String> domainName() {
        return this.domainName == null ? Codegen.empty() : this.domainName;
    }

    /**
     * Kind of resource.
     * 
     */
    @Import(name="kind")
      private final @Nullable Output<String> kind;

    public Output<String> kind() {
        return this.kind == null ? Codegen.empty() : this.kind;
    }

    /**
     * Resource Location.
     * 
     */
    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> location() {
        return this.location == null ? Codegen.empty() : this.location;
    }

    /**
     * <code>true</code> if domain privacy is enabled for this domain; otherwise, <code>false</code>.
     * 
     */
    @Import(name="privacy")
      private final @Nullable Output<Boolean> privacy;

    public Output<Boolean> privacy() {
        return this.privacy == null ? Codegen.empty() : this.privacy;
    }

    /**
     * Name of the resource group to which the resource belongs.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    /**
     * Target DNS type (would be used for migration)
     * 
     */
    @Import(name="targetDnsType")
      private final @Nullable Output<DnsType> targetDnsType;

    public Output<DnsType> targetDnsType() {
        return this.targetDnsType == null ? Codegen.empty() : this.targetDnsType;
    }

    public DomainArgs(
        @Nullable Output<String> authCode,
        @Nullable Output<Boolean> autoRenew,
        Output<DomainPurchaseConsentArgs> consent,
        Output<ContactArgs> contactAdmin,
        Output<ContactArgs> contactBilling,
        Output<ContactArgs> contactRegistrant,
        Output<ContactArgs> contactTech,
        @Nullable Output<DnsType> dnsType,
        @Nullable Output<String> dnsZoneId,
        @Nullable Output<String> domainName,
        @Nullable Output<String> kind,
        @Nullable Output<String> location,
        @Nullable Output<Boolean> privacy,
        Output<String> resourceGroupName,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<DnsType> targetDnsType) {
        this.authCode = authCode;
        this.autoRenew = Codegen.booleanProp("autoRenew").output().arg(autoRenew).def(true).getNullable();
        this.consent = Objects.requireNonNull(consent, "expected parameter 'consent' to be non-null");
        this.contactAdmin = Objects.requireNonNull(contactAdmin, "expected parameter 'contactAdmin' to be non-null");
        this.contactBilling = Objects.requireNonNull(contactBilling, "expected parameter 'contactBilling' to be non-null");
        this.contactRegistrant = Objects.requireNonNull(contactRegistrant, "expected parameter 'contactRegistrant' to be non-null");
        this.contactTech = Objects.requireNonNull(contactTech, "expected parameter 'contactTech' to be non-null");
        this.dnsType = dnsType;
        this.dnsZoneId = dnsZoneId;
        this.domainName = domainName;
        this.kind = kind;
        this.location = location;
        this.privacy = privacy;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.tags = tags;
        this.targetDnsType = targetDnsType;
    }

    private DomainArgs() {
        this.authCode = Codegen.empty();
        this.autoRenew = Codegen.empty();
        this.consent = Codegen.empty();
        this.contactAdmin = Codegen.empty();
        this.contactBilling = Codegen.empty();
        this.contactRegistrant = Codegen.empty();
        this.contactTech = Codegen.empty();
        this.dnsType = Codegen.empty();
        this.dnsZoneId = Codegen.empty();
        this.domainName = Codegen.empty();
        this.kind = Codegen.empty();
        this.location = Codegen.empty();
        this.privacy = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.tags = Codegen.empty();
        this.targetDnsType = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DomainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> authCode;
        private @Nullable Output<Boolean> autoRenew;
        private Output<DomainPurchaseConsentArgs> consent;
        private Output<ContactArgs> contactAdmin;
        private Output<ContactArgs> contactBilling;
        private Output<ContactArgs> contactRegistrant;
        private Output<ContactArgs> contactTech;
        private @Nullable Output<DnsType> dnsType;
        private @Nullable Output<String> dnsZoneId;
        private @Nullable Output<String> domainName;
        private @Nullable Output<String> kind;
        private @Nullable Output<String> location;
        private @Nullable Output<Boolean> privacy;
        private Output<String> resourceGroupName;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<DnsType> targetDnsType;

        public Builder() {
    	      // Empty
        }

        public Builder(DomainArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authCode = defaults.authCode;
    	      this.autoRenew = defaults.autoRenew;
    	      this.consent = defaults.consent;
    	      this.contactAdmin = defaults.contactAdmin;
    	      this.contactBilling = defaults.contactBilling;
    	      this.contactRegistrant = defaults.contactRegistrant;
    	      this.contactTech = defaults.contactTech;
    	      this.dnsType = defaults.dnsType;
    	      this.dnsZoneId = defaults.dnsZoneId;
    	      this.domainName = defaults.domainName;
    	      this.kind = defaults.kind;
    	      this.location = defaults.location;
    	      this.privacy = defaults.privacy;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.tags = defaults.tags;
    	      this.targetDnsType = defaults.targetDnsType;
        }

        public Builder authCode(@Nullable Output<String> authCode) {
            this.authCode = authCode;
            return this;
        }
        public Builder authCode(@Nullable String authCode) {
            this.authCode = Codegen.ofNullable(authCode);
            return this;
        }
        public Builder autoRenew(@Nullable Output<Boolean> autoRenew) {
            this.autoRenew = autoRenew;
            return this;
        }
        public Builder autoRenew(@Nullable Boolean autoRenew) {
            this.autoRenew = Codegen.ofNullable(autoRenew);
            return this;
        }
        public Builder consent(Output<DomainPurchaseConsentArgs> consent) {
            this.consent = Objects.requireNonNull(consent);
            return this;
        }
        public Builder consent(DomainPurchaseConsentArgs consent) {
            this.consent = Output.of(Objects.requireNonNull(consent));
            return this;
        }
        public Builder contactAdmin(Output<ContactArgs> contactAdmin) {
            this.contactAdmin = Objects.requireNonNull(contactAdmin);
            return this;
        }
        public Builder contactAdmin(ContactArgs contactAdmin) {
            this.contactAdmin = Output.of(Objects.requireNonNull(contactAdmin));
            return this;
        }
        public Builder contactBilling(Output<ContactArgs> contactBilling) {
            this.contactBilling = Objects.requireNonNull(contactBilling);
            return this;
        }
        public Builder contactBilling(ContactArgs contactBilling) {
            this.contactBilling = Output.of(Objects.requireNonNull(contactBilling));
            return this;
        }
        public Builder contactRegistrant(Output<ContactArgs> contactRegistrant) {
            this.contactRegistrant = Objects.requireNonNull(contactRegistrant);
            return this;
        }
        public Builder contactRegistrant(ContactArgs contactRegistrant) {
            this.contactRegistrant = Output.of(Objects.requireNonNull(contactRegistrant));
            return this;
        }
        public Builder contactTech(Output<ContactArgs> contactTech) {
            this.contactTech = Objects.requireNonNull(contactTech);
            return this;
        }
        public Builder contactTech(ContactArgs contactTech) {
            this.contactTech = Output.of(Objects.requireNonNull(contactTech));
            return this;
        }
        public Builder dnsType(@Nullable Output<DnsType> dnsType) {
            this.dnsType = dnsType;
            return this;
        }
        public Builder dnsType(@Nullable DnsType dnsType) {
            this.dnsType = Codegen.ofNullable(dnsType);
            return this;
        }
        public Builder dnsZoneId(@Nullable Output<String> dnsZoneId) {
            this.dnsZoneId = dnsZoneId;
            return this;
        }
        public Builder dnsZoneId(@Nullable String dnsZoneId) {
            this.dnsZoneId = Codegen.ofNullable(dnsZoneId);
            return this;
        }
        public Builder domainName(@Nullable Output<String> domainName) {
            this.domainName = domainName;
            return this;
        }
        public Builder domainName(@Nullable String domainName) {
            this.domainName = Codegen.ofNullable(domainName);
            return this;
        }
        public Builder kind(@Nullable Output<String> kind) {
            this.kind = kind;
            return this;
        }
        public Builder kind(@Nullable String kind) {
            this.kind = Codegen.ofNullable(kind);
            return this;
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Codegen.ofNullable(location);
            return this;
        }
        public Builder privacy(@Nullable Output<Boolean> privacy) {
            this.privacy = privacy;
            return this;
        }
        public Builder privacy(@Nullable Boolean privacy) {
            this.privacy = Codegen.ofNullable(privacy);
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder targetDnsType(@Nullable Output<DnsType> targetDnsType) {
            this.targetDnsType = targetDnsType;
            return this;
        }
        public Builder targetDnsType(@Nullable DnsType targetDnsType) {
            this.targetDnsType = Codegen.ofNullable(targetDnsType);
            return this;
        }        public DomainArgs build() {
            return new DomainArgs(authCode, autoRenew, consent, contactAdmin, contactBilling, contactRegistrant, contactTech, dnsType, dnsZoneId, domainName, kind, location, privacy, resourceGroupName, tags, targetDnsType);
        }
    }
}
