// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.videoanalyzer.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Single topology parameter declaration. Declared parameters can and must be referenced throughout the topology and can optionally have default values to be used when they are not defined in the pipelines.
 * 
 */
public final class ParameterDeclarationResponse extends com.pulumi.resources.InvokeArgs {

    public static final ParameterDeclarationResponse Empty = new ParameterDeclarationResponse();

    /**
     * The default value for the parameter to be used if the pipeline does not specify a value.
     * 
     */
    @Import(name="default")
    private @Nullable String default_;

    /**
     * @return The default value for the parameter to be used if the pipeline does not specify a value.
     * 
     */
    public Optional<String> default_() {
        return Optional.ofNullable(this.default_);
    }

    /**
     * Description of the parameter.
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    /**
     * @return Description of the parameter.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Name of the parameter.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return Name of the parameter.
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * Type of the parameter.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    /**
     * @return Type of the parameter.
     * 
     */
    public String type() {
        return this.type;
    }

    private ParameterDeclarationResponse() {}

    private ParameterDeclarationResponse(ParameterDeclarationResponse $) {
        this.default_ = $.default_;
        this.description = $.description;
        this.name = $.name;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ParameterDeclarationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ParameterDeclarationResponse $;

        public Builder() {
            $ = new ParameterDeclarationResponse();
        }

        public Builder(ParameterDeclarationResponse defaults) {
            $ = new ParameterDeclarationResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param default_ The default value for the parameter to be used if the pipeline does not specify a value.
         * 
         * @return builder
         * 
         */
        public Builder default_(@Nullable String default_) {
            $.default_ = default_;
            return this;
        }

        /**
         * @param description Description of the parameter.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        /**
         * @param name Name of the parameter.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param type Type of the parameter.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public ParameterDeclarationResponse build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
