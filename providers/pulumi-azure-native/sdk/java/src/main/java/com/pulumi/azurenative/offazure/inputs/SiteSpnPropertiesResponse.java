// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.offazure.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Class for site properties.
 * 
 */
public final class SiteSpnPropertiesResponse extends com.pulumi.resources.InvokeArgs {

    public static final SiteSpnPropertiesResponse Empty = new SiteSpnPropertiesResponse();

    /**
     * AAD Authority URL which was used to request the token for the service principal.
     * 
     */
    @Import(name="aadAuthority")
    private @Nullable String aadAuthority;

    /**
     * @return AAD Authority URL which was used to request the token for the service principal.
     * 
     */
    public Optional<String> aadAuthority() {
        return Optional.ofNullable(this.aadAuthority);
    }

    /**
     * Application/client Id for the service principal with which the on-premise management/data plane components would communicate with our Azure services.
     * 
     */
    @Import(name="applicationId")
    private @Nullable String applicationId;

    /**
     * @return Application/client Id for the service principal with which the on-premise management/data plane components would communicate with our Azure services.
     * 
     */
    public Optional<String> applicationId() {
        return Optional.ofNullable(this.applicationId);
    }

    /**
     * Intended audience for the service principal.
     * 
     */
    @Import(name="audience")
    private @Nullable String audience;

    /**
     * @return Intended audience for the service principal.
     * 
     */
    public Optional<String> audience() {
        return Optional.ofNullable(this.audience);
    }

    /**
     * Object Id of the service principal with which the on-premise management/data plane components would communicate with our Azure services.
     * 
     */
    @Import(name="objectId")
    private @Nullable String objectId;

    /**
     * @return Object Id of the service principal with which the on-premise management/data plane components would communicate with our Azure services.
     * 
     */
    public Optional<String> objectId() {
        return Optional.ofNullable(this.objectId);
    }

    /**
     * Raw certificate data for building certificate expiry flows.
     * 
     */
    @Import(name="rawCertData")
    private @Nullable String rawCertData;

    /**
     * @return Raw certificate data for building certificate expiry flows.
     * 
     */
    public Optional<String> rawCertData() {
        return Optional.ofNullable(this.rawCertData);
    }

    /**
     * Tenant Id for the service principal with which the on-premise management/data plane components would communicate with our Azure services.
     * 
     */
    @Import(name="tenantId")
    private @Nullable String tenantId;

    /**
     * @return Tenant Id for the service principal with which the on-premise management/data plane components would communicate with our Azure services.
     * 
     */
    public Optional<String> tenantId() {
        return Optional.ofNullable(this.tenantId);
    }

    private SiteSpnPropertiesResponse() {}

    private SiteSpnPropertiesResponse(SiteSpnPropertiesResponse $) {
        this.aadAuthority = $.aadAuthority;
        this.applicationId = $.applicationId;
        this.audience = $.audience;
        this.objectId = $.objectId;
        this.rawCertData = $.rawCertData;
        this.tenantId = $.tenantId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SiteSpnPropertiesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SiteSpnPropertiesResponse $;

        public Builder() {
            $ = new SiteSpnPropertiesResponse();
        }

        public Builder(SiteSpnPropertiesResponse defaults) {
            $ = new SiteSpnPropertiesResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param aadAuthority AAD Authority URL which was used to request the token for the service principal.
         * 
         * @return builder
         * 
         */
        public Builder aadAuthority(@Nullable String aadAuthority) {
            $.aadAuthority = aadAuthority;
            return this;
        }

        /**
         * @param applicationId Application/client Id for the service principal with which the on-premise management/data plane components would communicate with our Azure services.
         * 
         * @return builder
         * 
         */
        public Builder applicationId(@Nullable String applicationId) {
            $.applicationId = applicationId;
            return this;
        }

        /**
         * @param audience Intended audience for the service principal.
         * 
         * @return builder
         * 
         */
        public Builder audience(@Nullable String audience) {
            $.audience = audience;
            return this;
        }

        /**
         * @param objectId Object Id of the service principal with which the on-premise management/data plane components would communicate with our Azure services.
         * 
         * @return builder
         * 
         */
        public Builder objectId(@Nullable String objectId) {
            $.objectId = objectId;
            return this;
        }

        /**
         * @param rawCertData Raw certificate data for building certificate expiry flows.
         * 
         * @return builder
         * 
         */
        public Builder rawCertData(@Nullable String rawCertData) {
            $.rawCertData = rawCertData;
            return this;
        }

        /**
         * @param tenantId Tenant Id for the service principal with which the on-premise management/data plane components would communicate with our Azure services.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(@Nullable String tenantId) {
            $.tenantId = tenantId;
            return this;
        }

        public SiteSpnPropertiesResponse build() {
            return $;
        }
    }

}
