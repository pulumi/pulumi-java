// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.botservice.inputs;

import com.pulumi.azurenative.botservice.inputs.ServiceProviderParameterResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The Object used to describe a Service Provider supported by Bot Service
 * 
 */
public final class ServiceProviderPropertiesResponse extends com.pulumi.resources.InvokeArgs {

    public static final ServiceProviderPropertiesResponse Empty = new ServiceProviderPropertiesResponse();

    /**
     * Display Name of the Service Provider
     * 
     */
    @Import(name="devPortalUrl", required=true)
    private String devPortalUrl;

    public String devPortalUrl() {
        return this.devPortalUrl;
    }

    /**
     * Display Name of the Service Provider
     * 
     */
    @Import(name="displayName", required=true)
    private String displayName;

    public String displayName() {
        return this.displayName;
    }

    /**
     * Display Name of the Service Provider
     * 
     */
    @Import(name="iconUrl", required=true)
    private String iconUrl;

    public String iconUrl() {
        return this.iconUrl;
    }

    /**
     * Id for Service Provider
     * 
     */
    @Import(name="id", required=true)
    private String id;

    public String id() {
        return this.id;
    }

    /**
     * The list of parameters for the Service Provider
     * 
     */
    @Import(name="parameters")
    private @Nullable List<ServiceProviderParameterResponse> parameters;

    public Optional<List<ServiceProviderParameterResponse>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    /**
     * Display Name of the Service Provider
     * 
     */
    @Import(name="serviceProviderName", required=true)
    private String serviceProviderName;

    public String serviceProviderName() {
        return this.serviceProviderName;
    }

    private ServiceProviderPropertiesResponse() {}

    private ServiceProviderPropertiesResponse(ServiceProviderPropertiesResponse $) {
        this.devPortalUrl = $.devPortalUrl;
        this.displayName = $.displayName;
        this.iconUrl = $.iconUrl;
        this.id = $.id;
        this.parameters = $.parameters;
        this.serviceProviderName = $.serviceProviderName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceProviderPropertiesResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceProviderPropertiesResponse $;

        public Builder() {
            $ = new ServiceProviderPropertiesResponse();
        }

        public Builder(ServiceProviderPropertiesResponse defaults) {
            $ = new ServiceProviderPropertiesResponse(Objects.requireNonNull(defaults));
        }

        public Builder devPortalUrl(String devPortalUrl) {
            $.devPortalUrl = devPortalUrl;
            return this;
        }

        public Builder displayName(String displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder iconUrl(String iconUrl) {
            $.iconUrl = iconUrl;
            return this;
        }

        public Builder id(String id) {
            $.id = id;
            return this;
        }

        public Builder parameters(@Nullable List<ServiceProviderParameterResponse> parameters) {
            $.parameters = parameters;
            return this;
        }

        public Builder parameters(ServiceProviderParameterResponse... parameters) {
            return parameters(List.of(parameters));
        }

        public Builder serviceProviderName(String serviceProviderName) {
            $.serviceProviderName = serviceProviderName;
            return this;
        }

        public ServiceProviderPropertiesResponse build() {
            $.devPortalUrl = Objects.requireNonNull($.devPortalUrl, "expected parameter 'devPortalUrl' to be non-null");
            $.displayName = Objects.requireNonNull($.displayName, "expected parameter 'displayName' to be non-null");
            $.iconUrl = Objects.requireNonNull($.iconUrl, "expected parameter 'iconUrl' to be non-null");
            $.id = Objects.requireNonNull($.id, "expected parameter 'id' to be non-null");
            $.serviceProviderName = Objects.requireNonNull($.serviceProviderName, "expected parameter 'serviceProviderName' to be non-null");
            return $;
        }
    }

}
