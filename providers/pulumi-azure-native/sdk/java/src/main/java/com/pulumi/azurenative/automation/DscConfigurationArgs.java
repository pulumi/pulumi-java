// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.automation;

import com.pulumi.azurenative.automation.inputs.ContentSourceArgs;
import com.pulumi.azurenative.automation.inputs.DscConfigurationParameterArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DscConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final DscConfigurationArgs Empty = new DscConfigurationArgs();

    /**
     * The name of the automation account.
     * 
     */
    @Import(name="automationAccountName", required=true)
    private Output<String> automationAccountName;

    public Output<String> automationAccountName() {
        return this.automationAccountName;
    }

    /**
     * The create or update parameters for configuration.
     * 
     */
    @Import(name="configurationName")
    private @Nullable Output<String> configurationName;

    public Optional<Output<String>> configurationName() {
        return Optional.ofNullable(this.configurationName);
    }

    /**
     * Gets or sets the description of the configuration.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Gets or sets the location of the resource.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Gets or sets progress log option.
     * 
     */
    @Import(name="logProgress")
    private @Nullable Output<Boolean> logProgress;

    public Optional<Output<Boolean>> logProgress() {
        return Optional.ofNullable(this.logProgress);
    }

    /**
     * Gets or sets verbose log option.
     * 
     */
    @Import(name="logVerbose")
    private @Nullable Output<Boolean> logVerbose;

    public Optional<Output<Boolean>> logVerbose() {
        return Optional.ofNullable(this.logVerbose);
    }

    /**
     * Gets or sets name of the resource.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Gets or sets the configuration parameters.
     * 
     */
    @Import(name="parameters")
    private @Nullable Output<Map<String,DscConfigurationParameterArgs>> parameters;

    public Optional<Output<Map<String,DscConfigurationParameterArgs>>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    /**
     * Name of an Azure Resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Gets or sets the source.
     * 
     */
    @Import(name="source", required=true)
    private Output<ContentSourceArgs> source;

    public Output<ContentSourceArgs> source() {
        return this.source;
    }

    /**
     * Gets or sets the tags attached to the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private DscConfigurationArgs() {}

    private DscConfigurationArgs(DscConfigurationArgs $) {
        this.automationAccountName = $.automationAccountName;
        this.configurationName = $.configurationName;
        this.description = $.description;
        this.location = $.location;
        this.logProgress = $.logProgress;
        this.logVerbose = $.logVerbose;
        this.name = $.name;
        this.parameters = $.parameters;
        this.resourceGroupName = $.resourceGroupName;
        this.source = $.source;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DscConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DscConfigurationArgs $;

        public Builder() {
            $ = new DscConfigurationArgs();
        }

        public Builder(DscConfigurationArgs defaults) {
            $ = new DscConfigurationArgs(Objects.requireNonNull(defaults));
        }

        public Builder automationAccountName(Output<String> automationAccountName) {
            $.automationAccountName = automationAccountName;
            return this;
        }

        public Builder automationAccountName(String automationAccountName) {
            return automationAccountName(Output.of(automationAccountName));
        }

        public Builder configurationName(@Nullable Output<String> configurationName) {
            $.configurationName = configurationName;
            return this;
        }

        public Builder configurationName(String configurationName) {
            return configurationName(Output.of(configurationName));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder logProgress(@Nullable Output<Boolean> logProgress) {
            $.logProgress = logProgress;
            return this;
        }

        public Builder logProgress(Boolean logProgress) {
            return logProgress(Output.of(logProgress));
        }

        public Builder logVerbose(@Nullable Output<Boolean> logVerbose) {
            $.logVerbose = logVerbose;
            return this;
        }

        public Builder logVerbose(Boolean logVerbose) {
            return logVerbose(Output.of(logVerbose));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder parameters(@Nullable Output<Map<String,DscConfigurationParameterArgs>> parameters) {
            $.parameters = parameters;
            return this;
        }

        public Builder parameters(Map<String,DscConfigurationParameterArgs> parameters) {
            return parameters(Output.of(parameters));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder source(Output<ContentSourceArgs> source) {
            $.source = source;
            return this;
        }

        public Builder source(ContentSourceArgs source) {
            return source(Output.of(source));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public DscConfigurationArgs build() {
            $.automationAccountName = Objects.requireNonNull($.automationAccountName, "expected parameter 'automationAccountName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.source = Objects.requireNonNull($.source, "expected parameter 'source' to be non-null");
            return $;
        }
    }

}
