// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datashare;

import com.pulumi.azurenative.datashare.enums.TriggerKind;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TriggerArgs extends com.pulumi.resources.ResourceArgs {

    public static final TriggerArgs Empty = new TriggerArgs();

    /**
     * The name of the share account.
     * 
     */
    @Import(name="accountName", required=true)
    private Output<String> accountName;

    /**
     * @return The name of the share account.
     * 
     */
    public Output<String> accountName() {
        return this.accountName;
    }

    /**
     * Kind of synchronization on trigger.
     * 
     */
    @Import(name="kind", required=true)
    private Output<Either<String,TriggerKind>> kind;

    /**
     * @return Kind of synchronization on trigger.
     * 
     */
    public Output<Either<String,TriggerKind>> kind() {
        return this.kind;
    }

    /**
     * The resource group name.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The resource group name.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The name of the share subscription which will hold the data set sink.
     * 
     */
    @Import(name="shareSubscriptionName", required=true)
    private Output<String> shareSubscriptionName;

    /**
     * @return The name of the share subscription which will hold the data set sink.
     * 
     */
    public Output<String> shareSubscriptionName() {
        return this.shareSubscriptionName;
    }

    /**
     * The name of the trigger.
     * 
     */
    @Import(name="triggerName")
    private @Nullable Output<String> triggerName;

    /**
     * @return The name of the trigger.
     * 
     */
    public Optional<Output<String>> triggerName() {
        return Optional.ofNullable(this.triggerName);
    }

    private TriggerArgs() {}

    private TriggerArgs(TriggerArgs $) {
        this.accountName = $.accountName;
        this.kind = $.kind;
        this.resourceGroupName = $.resourceGroupName;
        this.shareSubscriptionName = $.shareSubscriptionName;
        this.triggerName = $.triggerName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TriggerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TriggerArgs $;

        public Builder() {
            $ = new TriggerArgs();
        }

        public Builder(TriggerArgs defaults) {
            $ = new TriggerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountName The name of the share account.
         * 
         * @return builder
         * 
         */
        public Builder accountName(Output<String> accountName) {
            $.accountName = accountName;
            return this;
        }

        /**
         * @param accountName The name of the share account.
         * 
         * @return builder
         * 
         */
        public Builder accountName(String accountName) {
            return accountName(Output.of(accountName));
        }

        /**
         * @param kind Kind of synchronization on trigger.
         * 
         * @return builder
         * 
         */
        public Builder kind(Output<Either<String,TriggerKind>> kind) {
            $.kind = kind;
            return this;
        }

        /**
         * @param kind Kind of synchronization on trigger.
         * 
         * @return builder
         * 
         */
        public Builder kind(Either<String,TriggerKind> kind) {
            return kind(Output.of(kind));
        }

        /**
         * @param kind Kind of synchronization on trigger.
         * 
         * @return builder
         * 
         */
        public Builder kind(String kind) {
            return kind(Either.ofLeft(kind));
        }

        /**
         * @param kind Kind of synchronization on trigger.
         * 
         * @return builder
         * 
         */
        public Builder kind(TriggerKind kind) {
            return kind(Either.ofRight(kind));
        }

        /**
         * @param resourceGroupName The resource group name.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The resource group name.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param shareSubscriptionName The name of the share subscription which will hold the data set sink.
         * 
         * @return builder
         * 
         */
        public Builder shareSubscriptionName(Output<String> shareSubscriptionName) {
            $.shareSubscriptionName = shareSubscriptionName;
            return this;
        }

        /**
         * @param shareSubscriptionName The name of the share subscription which will hold the data set sink.
         * 
         * @return builder
         * 
         */
        public Builder shareSubscriptionName(String shareSubscriptionName) {
            return shareSubscriptionName(Output.of(shareSubscriptionName));
        }

        /**
         * @param triggerName The name of the trigger.
         * 
         * @return builder
         * 
         */
        public Builder triggerName(@Nullable Output<String> triggerName) {
            $.triggerName = triggerName;
            return this;
        }

        /**
         * @param triggerName The name of the trigger.
         * 
         * @return builder
         * 
         */
        public Builder triggerName(String triggerName) {
            return triggerName(Output.of(triggerName));
        }

        public TriggerArgs build() {
            $.accountName = Objects.requireNonNull($.accountName, "expected parameter 'accountName' to be non-null");
            $.kind = Objects.requireNonNull($.kind, "expected parameter 'kind' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.shareSubscriptionName = Objects.requireNonNull($.shareSubscriptionName, "expected parameter 'shareSubscriptionName' to be non-null");
            return $;
        }
    }

}
