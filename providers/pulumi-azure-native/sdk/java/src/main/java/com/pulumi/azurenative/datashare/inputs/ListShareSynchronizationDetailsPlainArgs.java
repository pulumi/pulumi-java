// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datashare.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ListShareSynchronizationDetailsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final ListShareSynchronizationDetailsPlainArgs Empty = new ListShareSynchronizationDetailsPlainArgs();

    /**
     * The name of the share account.
     * 
     */
    @Import(name="accountName", required=true)
    private String accountName;

    /**
     * @return The name of the share account.
     * 
     */
    public String accountName() {
        return this.accountName;
    }

    /**
     * Email of the user who created the synchronization
     * 
     */
    @Import(name="consumerEmail")
    private @Nullable String consumerEmail;

    /**
     * @return Email of the user who created the synchronization
     * 
     */
    public Optional<String> consumerEmail() {
        return Optional.ofNullable(this.consumerEmail);
    }

    /**
     * Name of the user who created the synchronization
     * 
     */
    @Import(name="consumerName")
    private @Nullable String consumerName;

    /**
     * @return Name of the user who created the synchronization
     * 
     */
    public Optional<String> consumerName() {
        return Optional.ofNullable(this.consumerName);
    }

    /**
     * Tenant name of the consumer who created the synchronization
     * 
     */
    @Import(name="consumerTenantName")
    private @Nullable String consumerTenantName;

    /**
     * @return Tenant name of the consumer who created the synchronization
     * 
     */
    public Optional<String> consumerTenantName() {
        return Optional.ofNullable(this.consumerTenantName);
    }

    /**
     * synchronization duration
     * 
     */
    @Import(name="durationMs")
    private @Nullable Integer durationMs;

    /**
     * @return synchronization duration
     * 
     */
    public Optional<Integer> durationMs() {
        return Optional.ofNullable(this.durationMs);
    }

    /**
     * End time of synchronization
     * 
     */
    @Import(name="endTime")
    private @Nullable String endTime;

    /**
     * @return End time of synchronization
     * 
     */
    public Optional<String> endTime() {
        return Optional.ofNullable(this.endTime);
    }

    /**
     * Filters the results using OData syntax.
     * 
     */
    @Import(name="filter")
    private @Nullable String filter;

    /**
     * @return Filters the results using OData syntax.
     * 
     */
    public Optional<String> filter() {
        return Optional.ofNullable(this.filter);
    }

    /**
     * message of synchronization
     * 
     */
    @Import(name="message")
    private @Nullable String message;

    /**
     * @return message of synchronization
     * 
     */
    public Optional<String> message() {
        return Optional.ofNullable(this.message);
    }

    /**
     * Sorts the results using OData syntax.
     * 
     */
    @Import(name="orderby")
    private @Nullable String orderby;

    /**
     * @return Sorts the results using OData syntax.
     * 
     */
    public Optional<String> orderby() {
        return Optional.ofNullable(this.orderby);
    }

    /**
     * The resource group name.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private String resourceGroupName;

    /**
     * @return The resource group name.
     * 
     */
    public String resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The name of the share.
     * 
     */
    @Import(name="shareName", required=true)
    private String shareName;

    /**
     * @return The name of the share.
     * 
     */
    public String shareName() {
        return this.shareName;
    }

    /**
     * Continuation token
     * 
     */
    @Import(name="skipToken")
    private @Nullable String skipToken;

    /**
     * @return Continuation token
     * 
     */
    public Optional<String> skipToken() {
        return Optional.ofNullable(this.skipToken);
    }

    /**
     * start time of synchronization
     * 
     */
    @Import(name="startTime")
    private @Nullable String startTime;

    /**
     * @return start time of synchronization
     * 
     */
    public Optional<String> startTime() {
        return Optional.ofNullable(this.startTime);
    }

    /**
     * Raw Status
     * 
     */
    @Import(name="status")
    private @Nullable String status;

    /**
     * @return Raw Status
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Synchronization id
     * 
     */
    @Import(name="synchronizationId")
    private @Nullable String synchronizationId;

    /**
     * @return Synchronization id
     * 
     */
    public Optional<String> synchronizationId() {
        return Optional.ofNullable(this.synchronizationId);
    }

    private ListShareSynchronizationDetailsPlainArgs() {}

    private ListShareSynchronizationDetailsPlainArgs(ListShareSynchronizationDetailsPlainArgs $) {
        this.accountName = $.accountName;
        this.consumerEmail = $.consumerEmail;
        this.consumerName = $.consumerName;
        this.consumerTenantName = $.consumerTenantName;
        this.durationMs = $.durationMs;
        this.endTime = $.endTime;
        this.filter = $.filter;
        this.message = $.message;
        this.orderby = $.orderby;
        this.resourceGroupName = $.resourceGroupName;
        this.shareName = $.shareName;
        this.skipToken = $.skipToken;
        this.startTime = $.startTime;
        this.status = $.status;
        this.synchronizationId = $.synchronizationId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ListShareSynchronizationDetailsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ListShareSynchronizationDetailsPlainArgs $;

        public Builder() {
            $ = new ListShareSynchronizationDetailsPlainArgs();
        }

        public Builder(ListShareSynchronizationDetailsPlainArgs defaults) {
            $ = new ListShareSynchronizationDetailsPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountName The name of the share account.
         * 
         * @return builder
         * 
         */
        public Builder accountName(String accountName) {
            $.accountName = accountName;
            return this;
        }

        /**
         * @param consumerEmail Email of the user who created the synchronization
         * 
         * @return builder
         * 
         */
        public Builder consumerEmail(@Nullable String consumerEmail) {
            $.consumerEmail = consumerEmail;
            return this;
        }

        /**
         * @param consumerName Name of the user who created the synchronization
         * 
         * @return builder
         * 
         */
        public Builder consumerName(@Nullable String consumerName) {
            $.consumerName = consumerName;
            return this;
        }

        /**
         * @param consumerTenantName Tenant name of the consumer who created the synchronization
         * 
         * @return builder
         * 
         */
        public Builder consumerTenantName(@Nullable String consumerTenantName) {
            $.consumerTenantName = consumerTenantName;
            return this;
        }

        /**
         * @param durationMs synchronization duration
         * 
         * @return builder
         * 
         */
        public Builder durationMs(@Nullable Integer durationMs) {
            $.durationMs = durationMs;
            return this;
        }

        /**
         * @param endTime End time of synchronization
         * 
         * @return builder
         * 
         */
        public Builder endTime(@Nullable String endTime) {
            $.endTime = endTime;
            return this;
        }

        /**
         * @param filter Filters the results using OData syntax.
         * 
         * @return builder
         * 
         */
        public Builder filter(@Nullable String filter) {
            $.filter = filter;
            return this;
        }

        /**
         * @param message message of synchronization
         * 
         * @return builder
         * 
         */
        public Builder message(@Nullable String message) {
            $.message = message;
            return this;
        }

        /**
         * @param orderby Sorts the results using OData syntax.
         * 
         * @return builder
         * 
         */
        public Builder orderby(@Nullable String orderby) {
            $.orderby = orderby;
            return this;
        }

        /**
         * @param resourceGroupName The resource group name.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param shareName The name of the share.
         * 
         * @return builder
         * 
         */
        public Builder shareName(String shareName) {
            $.shareName = shareName;
            return this;
        }

        /**
         * @param skipToken Continuation token
         * 
         * @return builder
         * 
         */
        public Builder skipToken(@Nullable String skipToken) {
            $.skipToken = skipToken;
            return this;
        }

        /**
         * @param startTime start time of synchronization
         * 
         * @return builder
         * 
         */
        public Builder startTime(@Nullable String startTime) {
            $.startTime = startTime;
            return this;
        }

        /**
         * @param status Raw Status
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable String status) {
            $.status = status;
            return this;
        }

        /**
         * @param synchronizationId Synchronization id
         * 
         * @return builder
         * 
         */
        public Builder synchronizationId(@Nullable String synchronizationId) {
            $.synchronizationId = synchronizationId;
            return this;
        }

        public ListShareSynchronizationDetailsPlainArgs build() {
            $.accountName = Objects.requireNonNull($.accountName, "expected parameter 'accountName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.shareName = Objects.requireNonNull($.shareName, "expected parameter 'shareName' to be non-null");
            return $;
        }
    }

}
