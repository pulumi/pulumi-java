// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.sql;

import com.pulumi.azurenative.sql.enums.ServerKeyType;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ManagedInstanceKeyArgs extends com.pulumi.resources.ResourceArgs {

    public static final ManagedInstanceKeyArgs Empty = new ManagedInstanceKeyArgs();

    /**
     * The name of the managed instance key to be operated on (updated or created).
     * 
     */
    @Import(name="keyName")
    private @Nullable Output<String> keyName;

    public Optional<Output<String>> keyName() {
        return Optional.ofNullable(this.keyName);
    }

    /**
     * The name of the managed instance.
     * 
     */
    @Import(name="managedInstanceName", required=true)
    private Output<String> managedInstanceName;

    public Output<String> managedInstanceName() {
        return this.managedInstanceName;
    }

    /**
     * The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The key type like &#39;ServiceManaged&#39;, &#39;AzureKeyVault&#39;.
     * 
     */
    @Import(name="serverKeyType", required=true)
    private Output<Either<String,ServerKeyType>> serverKeyType;

    public Output<Either<String,ServerKeyType>> serverKeyType() {
        return this.serverKeyType;
    }

    /**
     * The URI of the key. If the ServerKeyType is AzureKeyVault, then the URI is required.
     * 
     */
    @Import(name="uri")
    private @Nullable Output<String> uri;

    public Optional<Output<String>> uri() {
        return Optional.ofNullable(this.uri);
    }

    private ManagedInstanceKeyArgs() {}

    private ManagedInstanceKeyArgs(ManagedInstanceKeyArgs $) {
        this.keyName = $.keyName;
        this.managedInstanceName = $.managedInstanceName;
        this.resourceGroupName = $.resourceGroupName;
        this.serverKeyType = $.serverKeyType;
        this.uri = $.uri;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ManagedInstanceKeyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ManagedInstanceKeyArgs $;

        public Builder() {
            $ = new ManagedInstanceKeyArgs();
        }

        public Builder(ManagedInstanceKeyArgs defaults) {
            $ = new ManagedInstanceKeyArgs(Objects.requireNonNull(defaults));
        }

        public Builder keyName(@Nullable Output<String> keyName) {
            $.keyName = keyName;
            return this;
        }

        public Builder keyName(String keyName) {
            return keyName(Output.of(keyName));
        }

        public Builder managedInstanceName(Output<String> managedInstanceName) {
            $.managedInstanceName = managedInstanceName;
            return this;
        }

        public Builder managedInstanceName(String managedInstanceName) {
            return managedInstanceName(Output.of(managedInstanceName));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder serverKeyType(Output<Either<String,ServerKeyType>> serverKeyType) {
            $.serverKeyType = serverKeyType;
            return this;
        }

        public Builder serverKeyType(Either<String,ServerKeyType> serverKeyType) {
            return serverKeyType(Output.of(serverKeyType));
        }

        public Builder uri(@Nullable Output<String> uri) {
            $.uri = uri;
            return this;
        }

        public Builder uri(String uri) {
            return uri(Output.of(uri));
        }

        public ManagedInstanceKeyArgs build() {
            $.managedInstanceName = Objects.requireNonNull($.managedInstanceName, "expected parameter 'managedInstanceName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.serverKeyType = Objects.requireNonNull($.serverKeyType, "expected parameter 'serverKeyType' to be non-null");
            return $;
        }
    }

}
