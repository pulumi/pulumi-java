// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.machinelearningcompute.inputs;

import com.pulumi.azurenative.machinelearningcompute.inputs.AutoScaleConfigurationArgs;
import com.pulumi.azurenative.machinelearningcompute.inputs.ServiceAuthConfigurationArgs;
import com.pulumi.azurenative.machinelearningcompute.inputs.SslConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Global configuration for services in the cluster.
 * 
 */
public final class GlobalServiceConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final GlobalServiceConfigurationArgs Empty = new GlobalServiceConfigurationArgs();

    /**
     * The auto-scale configuration
     * 
     */
    @Import(name="autoScale")
    private @Nullable Output<AutoScaleConfigurationArgs> autoScale;

    /**
     * @return The auto-scale configuration
     * 
     */
    public Optional<Output<AutoScaleConfigurationArgs>> autoScale() {
        return Optional.ofNullable(this.autoScale);
    }

    /**
     * The configuration ETag for updates.
     * 
     */
    @Import(name="etag")
    private @Nullable Output<String> etag;

    /**
     * @return The configuration ETag for updates.
     * 
     */
    public Optional<Output<String>> etag() {
        return Optional.ofNullable(this.etag);
    }

    /**
     * Optional global authorization keys for all user services deployed in cluster. These are used if the service does not have auth keys.
     * 
     */
    @Import(name="serviceAuth")
    private @Nullable Output<ServiceAuthConfigurationArgs> serviceAuth;

    /**
     * @return Optional global authorization keys for all user services deployed in cluster. These are used if the service does not have auth keys.
     * 
     */
    public Optional<Output<ServiceAuthConfigurationArgs>> serviceAuth() {
        return Optional.ofNullable(this.serviceAuth);
    }

    /**
     * The SSL configuration properties
     * 
     */
    @Import(name="ssl")
    private @Nullable Output<SslConfigurationArgs> ssl;

    /**
     * @return The SSL configuration properties
     * 
     */
    public Optional<Output<SslConfigurationArgs>> ssl() {
        return Optional.ofNullable(this.ssl);
    }

    private GlobalServiceConfigurationArgs() {}

    private GlobalServiceConfigurationArgs(GlobalServiceConfigurationArgs $) {
        this.autoScale = $.autoScale;
        this.etag = $.etag;
        this.serviceAuth = $.serviceAuth;
        this.ssl = $.ssl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GlobalServiceConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GlobalServiceConfigurationArgs $;

        public Builder() {
            $ = new GlobalServiceConfigurationArgs();
        }

        public Builder(GlobalServiceConfigurationArgs defaults) {
            $ = new GlobalServiceConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoScale The auto-scale configuration
         * 
         * @return builder
         * 
         */
        public Builder autoScale(@Nullable Output<AutoScaleConfigurationArgs> autoScale) {
            $.autoScale = autoScale;
            return this;
        }

        /**
         * @param autoScale The auto-scale configuration
         * 
         * @return builder
         * 
         */
        public Builder autoScale(AutoScaleConfigurationArgs autoScale) {
            return autoScale(Output.of(autoScale));
        }

        /**
         * @param etag The configuration ETag for updates.
         * 
         * @return builder
         * 
         */
        public Builder etag(@Nullable Output<String> etag) {
            $.etag = etag;
            return this;
        }

        /**
         * @param etag The configuration ETag for updates.
         * 
         * @return builder
         * 
         */
        public Builder etag(String etag) {
            return etag(Output.of(etag));
        }

        /**
         * @param serviceAuth Optional global authorization keys for all user services deployed in cluster. These are used if the service does not have auth keys.
         * 
         * @return builder
         * 
         */
        public Builder serviceAuth(@Nullable Output<ServiceAuthConfigurationArgs> serviceAuth) {
            $.serviceAuth = serviceAuth;
            return this;
        }

        /**
         * @param serviceAuth Optional global authorization keys for all user services deployed in cluster. These are used if the service does not have auth keys.
         * 
         * @return builder
         * 
         */
        public Builder serviceAuth(ServiceAuthConfigurationArgs serviceAuth) {
            return serviceAuth(Output.of(serviceAuth));
        }

        /**
         * @param ssl The SSL configuration properties
         * 
         * @return builder
         * 
         */
        public Builder ssl(@Nullable Output<SslConfigurationArgs> ssl) {
            $.ssl = ssl;
            return this;
        }

        /**
         * @param ssl The SSL configuration properties
         * 
         * @return builder
         * 
         */
        public Builder ssl(SslConfigurationArgs ssl) {
            return ssl(Output.of(ssl));
        }

        public GlobalServiceConfigurationArgs build() {
            return $;
        }
    }

}
