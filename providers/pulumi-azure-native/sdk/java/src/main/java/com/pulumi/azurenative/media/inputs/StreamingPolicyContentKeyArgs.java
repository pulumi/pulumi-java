// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.media.inputs;

import com.pulumi.azurenative.media.inputs.TrackSelectionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Class to specify properties of content key
 * 
 */
public final class StreamingPolicyContentKeyArgs extends com.pulumi.resources.ResourceArgs {

    public static final StreamingPolicyContentKeyArgs Empty = new StreamingPolicyContentKeyArgs();

    /**
     * Label can be used to specify Content Key when creating a Streaming Locator
     * 
     */
    @Import(name="label")
    private @Nullable Output<String> label;

    /**
     * @return Label can be used to specify Content Key when creating a Streaming Locator
     * 
     */
    public Optional<Output<String>> label() {
        return Optional.ofNullable(this.label);
    }

    /**
     * Policy used by Content Key
     * 
     */
    @Import(name="policyName")
    private @Nullable Output<String> policyName;

    /**
     * @return Policy used by Content Key
     * 
     */
    public Optional<Output<String>> policyName() {
        return Optional.ofNullable(this.policyName);
    }

    /**
     * Tracks which use this content key
     * 
     */
    @Import(name="tracks")
    private @Nullable Output<List<TrackSelectionArgs>> tracks;

    /**
     * @return Tracks which use this content key
     * 
     */
    public Optional<Output<List<TrackSelectionArgs>>> tracks() {
        return Optional.ofNullable(this.tracks);
    }

    private StreamingPolicyContentKeyArgs() {}

    private StreamingPolicyContentKeyArgs(StreamingPolicyContentKeyArgs $) {
        this.label = $.label;
        this.policyName = $.policyName;
        this.tracks = $.tracks;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StreamingPolicyContentKeyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StreamingPolicyContentKeyArgs $;

        public Builder() {
            $ = new StreamingPolicyContentKeyArgs();
        }

        public Builder(StreamingPolicyContentKeyArgs defaults) {
            $ = new StreamingPolicyContentKeyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param label Label can be used to specify Content Key when creating a Streaming Locator
         * 
         * @return builder
         * 
         */
        public Builder label(@Nullable Output<String> label) {
            $.label = label;
            return this;
        }

        /**
         * @param label Label can be used to specify Content Key when creating a Streaming Locator
         * 
         * @return builder
         * 
         */
        public Builder label(String label) {
            return label(Output.of(label));
        }

        /**
         * @param policyName Policy used by Content Key
         * 
         * @return builder
         * 
         */
        public Builder policyName(@Nullable Output<String> policyName) {
            $.policyName = policyName;
            return this;
        }

        /**
         * @param policyName Policy used by Content Key
         * 
         * @return builder
         * 
         */
        public Builder policyName(String policyName) {
            return policyName(Output.of(policyName));
        }

        /**
         * @param tracks Tracks which use this content key
         * 
         * @return builder
         * 
         */
        public Builder tracks(@Nullable Output<List<TrackSelectionArgs>> tracks) {
            $.tracks = tracks;
            return this;
        }

        /**
         * @param tracks Tracks which use this content key
         * 
         * @return builder
         * 
         */
        public Builder tracks(List<TrackSelectionArgs> tracks) {
            return tracks(Output.of(tracks));
        }

        /**
         * @param tracks Tracks which use this content key
         * 
         * @return builder
         * 
         */
        public Builder tracks(TrackSelectionArgs... tracks) {
            return tracks(List.of(tracks));
        }

        public StreamingPolicyContentKeyArgs build() {
            return $;
        }
    }

}
