// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.azurenative.datafactory.inputs.AzureKeyVaultSecretReferenceResponse;
import com.pulumi.azurenative.datafactory.inputs.CredentialReferenceResponse;
import com.pulumi.azurenative.datafactory.inputs.IntegrationRuntimeReferenceResponse;
import com.pulumi.azurenative.datafactory.inputs.ParameterSpecificationResponse;
import com.pulumi.azurenative.datafactory.inputs.SecureStringResponse;
import com.pulumi.core.Either;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Azure Databricks linked service.
 * 
 */
public final class AzureDatabricksLinkedServiceResponse extends com.pulumi.resources.InvokeArgs {

    public static final AzureDatabricksLinkedServiceResponse Empty = new AzureDatabricksLinkedServiceResponse();

    /**
     * Access token for databricks REST API. Refer to https://docs.azuredatabricks.net/api/latest/authentication.html. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="accessToken")
    private @Nullable Either<AzureKeyVaultSecretReferenceResponse,SecureStringResponse> accessToken;

    public Optional<Either<AzureKeyVaultSecretReferenceResponse,SecureStringResponse>> accessToken() {
        return Optional.ofNullable(this.accessToken);
    }

    /**
     * List of tags that can be used for describing the linked service.
     * 
     */
    @Import(name="annotations")
    private @Nullable List<Object> annotations;

    public Optional<List<Object>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    /**
     * Required to specify MSI, if using Workspace resource id for databricks REST API. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="authentication")
    private @Nullable Object authentication;

    public Optional<Object> authentication() {
        return Optional.ofNullable(this.authentication);
    }

    /**
     * The integration runtime reference.
     * 
     */
    @Import(name="connectVia")
    private @Nullable IntegrationRuntimeReferenceResponse connectVia;

    public Optional<IntegrationRuntimeReferenceResponse> connectVia() {
        return Optional.ofNullable(this.connectVia);
    }

    /**
     * The credential reference containing authentication information.
     * 
     */
    @Import(name="credential")
    private @Nullable CredentialReferenceResponse credential;

    public Optional<CredentialReferenceResponse> credential() {
        return Optional.ofNullable(this.credential);
    }

    /**
     * Linked service description.
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * &lt;REGION&gt;.azuredatabricks.net, domain name of your Databricks deployment. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="domain", required=true)
    private Object domain;

    public Object domain() {
        return this.domain;
    }

    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="encryptedCredential")
    private @Nullable Object encryptedCredential;

    public Optional<Object> encryptedCredential() {
        return Optional.ofNullable(this.encryptedCredential);
    }

    /**
     * The id of an existing interactive cluster that will be used for all runs of this activity. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="existingClusterId")
    private @Nullable Object existingClusterId;

    public Optional<Object> existingClusterId() {
        return Optional.ofNullable(this.existingClusterId);
    }

    /**
     * The id of an existing instance pool that will be used for all runs of this activity. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="instancePoolId")
    private @Nullable Object instancePoolId;

    public Optional<Object> instancePoolId() {
        return Optional.ofNullable(this.instancePoolId);
    }

    /**
     * Additional tags for cluster resources. This property is ignored in instance pool configurations.
     * 
     */
    @Import(name="newClusterCustomTags")
    private @Nullable Map<String,Object> newClusterCustomTags;

    public Optional<Map<String,Object>> newClusterCustomTags() {
        return Optional.ofNullable(this.newClusterCustomTags);
    }

    /**
     * The driver node type for the new job cluster. This property is ignored in instance pool configurations. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="newClusterDriverNodeType")
    private @Nullable Object newClusterDriverNodeType;

    public Optional<Object> newClusterDriverNodeType() {
        return Optional.ofNullable(this.newClusterDriverNodeType);
    }

    /**
     * Enable the elastic disk on the new cluster. This property is now ignored, and takes the default elastic disk behavior in Databricks (elastic disks are always enabled). Type: boolean (or Expression with resultType boolean).
     * 
     */
    @Import(name="newClusterEnableElasticDisk")
    private @Nullable Object newClusterEnableElasticDisk;

    public Optional<Object> newClusterEnableElasticDisk() {
        return Optional.ofNullable(this.newClusterEnableElasticDisk);
    }

    /**
     * User-defined initialization scripts for the new cluster. Type: array of strings (or Expression with resultType array of strings).
     * 
     */
    @Import(name="newClusterInitScripts")
    private @Nullable Object newClusterInitScripts;

    public Optional<Object> newClusterInitScripts() {
        return Optional.ofNullable(this.newClusterInitScripts);
    }

    /**
     * Specify a location to deliver Spark driver, worker, and event logs. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="newClusterLogDestination")
    private @Nullable Object newClusterLogDestination;

    public Optional<Object> newClusterLogDestination() {
        return Optional.ofNullable(this.newClusterLogDestination);
    }

    /**
     * The node type of the new job cluster. This property is required if newClusterVersion is specified and instancePoolId is not specified. If instancePoolId is specified, this property is ignored. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="newClusterNodeType")
    private @Nullable Object newClusterNodeType;

    public Optional<Object> newClusterNodeType() {
        return Optional.ofNullable(this.newClusterNodeType);
    }

    /**
     * If not using an existing interactive cluster, this specifies the number of worker nodes to use for the new job cluster or instance pool. For new job clusters, this a string-formatted Int32, like &#39;1&#39; means numOfWorker is 1 or &#39;1:10&#39; means auto-scale from 1 (min) to 10 (max). For instance pools, this is a string-formatted Int32, and can only specify a fixed number of worker nodes, such as &#39;2&#39;. Required if newClusterVersion is specified. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="newClusterNumOfWorker")
    private @Nullable Object newClusterNumOfWorker;

    public Optional<Object> newClusterNumOfWorker() {
        return Optional.ofNullable(this.newClusterNumOfWorker);
    }

    /**
     * A set of optional, user-specified Spark configuration key-value pairs.
     * 
     */
    @Import(name="newClusterSparkConf")
    private @Nullable Map<String,Object> newClusterSparkConf;

    public Optional<Map<String,Object>> newClusterSparkConf() {
        return Optional.ofNullable(this.newClusterSparkConf);
    }

    /**
     * A set of optional, user-specified Spark environment variables key-value pairs.
     * 
     */
    @Import(name="newClusterSparkEnvVars")
    private @Nullable Map<String,Object> newClusterSparkEnvVars;

    public Optional<Map<String,Object>> newClusterSparkEnvVars() {
        return Optional.ofNullable(this.newClusterSparkEnvVars);
    }

    /**
     * If not using an existing interactive cluster, this specifies the Spark version of a new job cluster or instance pool nodes created for each run of this activity. Required if instancePoolId is specified. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="newClusterVersion")
    private @Nullable Object newClusterVersion;

    public Optional<Object> newClusterVersion() {
        return Optional.ofNullable(this.newClusterVersion);
    }

    /**
     * Parameters for linked service.
     * 
     */
    @Import(name="parameters")
    private @Nullable Map<String,ParameterSpecificationResponse> parameters;

    public Optional<Map<String,ParameterSpecificationResponse>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    /**
     * The policy id for limiting the ability to configure clusters based on a user defined set of rules. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="policyId")
    private @Nullable Object policyId;

    public Optional<Object> policyId() {
        return Optional.ofNullable(this.policyId);
    }

    /**
     * Type of linked service.
     * Expected value is &#39;AzureDatabricks&#39;.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    public String type() {
        return this.type;
    }

    /**
     * Workspace resource id for databricks REST API. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="workspaceResourceId")
    private @Nullable Object workspaceResourceId;

    public Optional<Object> workspaceResourceId() {
        return Optional.ofNullable(this.workspaceResourceId);
    }

    private AzureDatabricksLinkedServiceResponse() {}

    private AzureDatabricksLinkedServiceResponse(AzureDatabricksLinkedServiceResponse $) {
        this.accessToken = $.accessToken;
        this.annotations = $.annotations;
        this.authentication = $.authentication;
        this.connectVia = $.connectVia;
        this.credential = $.credential;
        this.description = $.description;
        this.domain = $.domain;
        this.encryptedCredential = $.encryptedCredential;
        this.existingClusterId = $.existingClusterId;
        this.instancePoolId = $.instancePoolId;
        this.newClusterCustomTags = $.newClusterCustomTags;
        this.newClusterDriverNodeType = $.newClusterDriverNodeType;
        this.newClusterEnableElasticDisk = $.newClusterEnableElasticDisk;
        this.newClusterInitScripts = $.newClusterInitScripts;
        this.newClusterLogDestination = $.newClusterLogDestination;
        this.newClusterNodeType = $.newClusterNodeType;
        this.newClusterNumOfWorker = $.newClusterNumOfWorker;
        this.newClusterSparkConf = $.newClusterSparkConf;
        this.newClusterSparkEnvVars = $.newClusterSparkEnvVars;
        this.newClusterVersion = $.newClusterVersion;
        this.parameters = $.parameters;
        this.policyId = $.policyId;
        this.type = $.type;
        this.workspaceResourceId = $.workspaceResourceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AzureDatabricksLinkedServiceResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AzureDatabricksLinkedServiceResponse $;

        public Builder() {
            $ = new AzureDatabricksLinkedServiceResponse();
        }

        public Builder(AzureDatabricksLinkedServiceResponse defaults) {
            $ = new AzureDatabricksLinkedServiceResponse(Objects.requireNonNull(defaults));
        }

        public Builder accessToken(@Nullable Either<AzureKeyVaultSecretReferenceResponse,SecureStringResponse> accessToken) {
            $.accessToken = accessToken;
            return this;
        }

        public Builder annotations(@Nullable List<Object> annotations) {
            $.annotations = annotations;
            return this;
        }

        public Builder annotations(Object... annotations) {
            return annotations(List.of(annotations));
        }

        public Builder authentication(@Nullable Object authentication) {
            $.authentication = authentication;
            return this;
        }

        public Builder connectVia(@Nullable IntegrationRuntimeReferenceResponse connectVia) {
            $.connectVia = connectVia;
            return this;
        }

        public Builder credential(@Nullable CredentialReferenceResponse credential) {
            $.credential = credential;
            return this;
        }

        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        public Builder domain(Object domain) {
            $.domain = domain;
            return this;
        }

        public Builder encryptedCredential(@Nullable Object encryptedCredential) {
            $.encryptedCredential = encryptedCredential;
            return this;
        }

        public Builder existingClusterId(@Nullable Object existingClusterId) {
            $.existingClusterId = existingClusterId;
            return this;
        }

        public Builder instancePoolId(@Nullable Object instancePoolId) {
            $.instancePoolId = instancePoolId;
            return this;
        }

        public Builder newClusterCustomTags(@Nullable Map<String,Object> newClusterCustomTags) {
            $.newClusterCustomTags = newClusterCustomTags;
            return this;
        }

        public Builder newClusterDriverNodeType(@Nullable Object newClusterDriverNodeType) {
            $.newClusterDriverNodeType = newClusterDriverNodeType;
            return this;
        }

        public Builder newClusterEnableElasticDisk(@Nullable Object newClusterEnableElasticDisk) {
            $.newClusterEnableElasticDisk = newClusterEnableElasticDisk;
            return this;
        }

        public Builder newClusterInitScripts(@Nullable Object newClusterInitScripts) {
            $.newClusterInitScripts = newClusterInitScripts;
            return this;
        }

        public Builder newClusterLogDestination(@Nullable Object newClusterLogDestination) {
            $.newClusterLogDestination = newClusterLogDestination;
            return this;
        }

        public Builder newClusterNodeType(@Nullable Object newClusterNodeType) {
            $.newClusterNodeType = newClusterNodeType;
            return this;
        }

        public Builder newClusterNumOfWorker(@Nullable Object newClusterNumOfWorker) {
            $.newClusterNumOfWorker = newClusterNumOfWorker;
            return this;
        }

        public Builder newClusterSparkConf(@Nullable Map<String,Object> newClusterSparkConf) {
            $.newClusterSparkConf = newClusterSparkConf;
            return this;
        }

        public Builder newClusterSparkEnvVars(@Nullable Map<String,Object> newClusterSparkEnvVars) {
            $.newClusterSparkEnvVars = newClusterSparkEnvVars;
            return this;
        }

        public Builder newClusterVersion(@Nullable Object newClusterVersion) {
            $.newClusterVersion = newClusterVersion;
            return this;
        }

        public Builder parameters(@Nullable Map<String,ParameterSpecificationResponse> parameters) {
            $.parameters = parameters;
            return this;
        }

        public Builder policyId(@Nullable Object policyId) {
            $.policyId = policyId;
            return this;
        }

        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public Builder workspaceResourceId(@Nullable Object workspaceResourceId) {
            $.workspaceResourceId = workspaceResourceId;
            return this;
        }

        public AzureDatabricksLinkedServiceResponse build() {
            $.domain = Objects.requireNonNull($.domain, "expected parameter 'domain' to be non-null");
            $.type = Codegen.stringProp("type").arg($.type).require();
            return $;
        }
    }

}
