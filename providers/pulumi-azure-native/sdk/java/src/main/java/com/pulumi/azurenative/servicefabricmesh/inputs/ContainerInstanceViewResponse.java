// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.servicefabricmesh.inputs;

import com.pulumi.azurenative.servicefabricmesh.inputs.ContainerEventResponse;
import com.pulumi.azurenative.servicefabricmesh.inputs.ContainerStateResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Runtime information of a container instance.
 * 
 */
public final class ContainerInstanceViewResponse extends com.pulumi.resources.InvokeArgs {

    public static final ContainerInstanceViewResponse Empty = new ContainerInstanceViewResponse();

    /**
     * Current container instance state.
     * 
     */
    @Import(name="currentState")
    private @Nullable ContainerStateResponse currentState;

    public Optional<ContainerStateResponse> currentState() {
        return Optional.ofNullable(this.currentState);
    }

    /**
     * The events of this container instance.
     * 
     */
    @Import(name="events")
    private @Nullable List<ContainerEventResponse> events;

    public Optional<List<ContainerEventResponse>> events() {
        return Optional.ofNullable(this.events);
    }

    /**
     * Previous container instance state.
     * 
     */
    @Import(name="previousState")
    private @Nullable ContainerStateResponse previousState;

    public Optional<ContainerStateResponse> previousState() {
        return Optional.ofNullable(this.previousState);
    }

    /**
     * The number of times the container has been restarted.
     * 
     */
    @Import(name="restartCount")
    private @Nullable Integer restartCount;

    public Optional<Integer> restartCount() {
        return Optional.ofNullable(this.restartCount);
    }

    private ContainerInstanceViewResponse() {}

    private ContainerInstanceViewResponse(ContainerInstanceViewResponse $) {
        this.currentState = $.currentState;
        this.events = $.events;
        this.previousState = $.previousState;
        this.restartCount = $.restartCount;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContainerInstanceViewResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContainerInstanceViewResponse $;

        public Builder() {
            $ = new ContainerInstanceViewResponse();
        }

        public Builder(ContainerInstanceViewResponse defaults) {
            $ = new ContainerInstanceViewResponse(Objects.requireNonNull(defaults));
        }

        public Builder currentState(@Nullable ContainerStateResponse currentState) {
            $.currentState = currentState;
            return this;
        }

        public Builder events(@Nullable List<ContainerEventResponse> events) {
            $.events = events;
            return this;
        }

        public Builder events(ContainerEventResponse... events) {
            return events(List.of(events));
        }

        public Builder previousState(@Nullable ContainerStateResponse previousState) {
            $.previousState = previousState;
            return this;
        }

        public Builder restartCount(@Nullable Integer restartCount) {
            $.restartCount = restartCount;
            return this;
        }

        public ContainerInstanceViewResponse build() {
            return $;
        }
    }

}
