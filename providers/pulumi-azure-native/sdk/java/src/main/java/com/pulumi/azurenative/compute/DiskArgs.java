// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.compute;

import com.pulumi.azurenative.compute.enums.HyperVGeneration;
import com.pulumi.azurenative.compute.enums.NetworkAccessPolicy;
import com.pulumi.azurenative.compute.enums.OperatingSystemTypes;
import com.pulumi.azurenative.compute.inputs.CreationDataArgs;
import com.pulumi.azurenative.compute.inputs.DiskSecurityProfileArgs;
import com.pulumi.azurenative.compute.inputs.DiskSkuArgs;
import com.pulumi.azurenative.compute.inputs.EncryptionArgs;
import com.pulumi.azurenative.compute.inputs.EncryptionSettingsCollectionArgs;
import com.pulumi.azurenative.compute.inputs.ExtendedLocationArgs;
import com.pulumi.azurenative.compute.inputs.PurchasePlanArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class DiskArgs extends com.pulumi.resources.ResourceArgs {

    public static final DiskArgs Empty = new DiskArgs();

    /**
     * Set to true to enable bursting beyond the provisioned performance target of the disk. Bursting is disabled by default. Does not apply to Ultra disks.
     * 
     */
    @Import(name="burstingEnabled")
      private final @Nullable Output<Boolean> burstingEnabled;

    public Output<Boolean> burstingEnabled() {
        return this.burstingEnabled == null ? Codegen.empty() : this.burstingEnabled;
    }

    /**
     * Disk source information. CreationData information cannot be changed after the disk has been created.
     * 
     */
    @Import(name="creationData", required=true)
      private final Output<CreationDataArgs> creationData;

    public Output<CreationDataArgs> creationData() {
        return this.creationData;
    }

    /**
     * ARM id of the DiskAccess resource for using private endpoints on disks.
     * 
     */
    @Import(name="diskAccessId")
      private final @Nullable Output<String> diskAccessId;

    public Output<String> diskAccessId() {
        return this.diskAccessId == null ? Codegen.empty() : this.diskAccessId;
    }

    /**
     * The total number of IOPS that will be allowed across all VMs mounting the shared disk as ReadOnly. One operation can transfer between 4k and 256k bytes.
     * 
     */
    @Import(name="diskIOPSReadOnly")
      private final @Nullable Output<Double> diskIOPSReadOnly;

    public Output<Double> diskIOPSReadOnly() {
        return this.diskIOPSReadOnly == null ? Codegen.empty() : this.diskIOPSReadOnly;
    }

    /**
     * The number of IOPS allowed for this disk; only settable for UltraSSD disks. One operation can transfer between 4k and 256k bytes.
     * 
     */
    @Import(name="diskIOPSReadWrite")
      private final @Nullable Output<Double> diskIOPSReadWrite;

    public Output<Double> diskIOPSReadWrite() {
        return this.diskIOPSReadWrite == null ? Codegen.empty() : this.diskIOPSReadWrite;
    }

    /**
     * The total throughput (MBps) that will be allowed across all VMs mounting the shared disk as ReadOnly. MBps means millions of bytes per second - MB here uses the ISO notation, of powers of 10.
     * 
     */
    @Import(name="diskMBpsReadOnly")
      private final @Nullable Output<Double> diskMBpsReadOnly;

    public Output<Double> diskMBpsReadOnly() {
        return this.diskMBpsReadOnly == null ? Codegen.empty() : this.diskMBpsReadOnly;
    }

    /**
     * The bandwidth allowed for this disk; only settable for UltraSSD disks. MBps means millions of bytes per second - MB here uses the ISO notation, of powers of 10.
     * 
     */
    @Import(name="diskMBpsReadWrite")
      private final @Nullable Output<Double> diskMBpsReadWrite;

    public Output<Double> diskMBpsReadWrite() {
        return this.diskMBpsReadWrite == null ? Codegen.empty() : this.diskMBpsReadWrite;
    }

    /**
     * The name of the managed disk that is being created. The name can't be changed after the disk is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * 
     */
    @Import(name="diskName")
      private final @Nullable Output<String> diskName;

    public Output<String> diskName() {
        return this.diskName == null ? Codegen.empty() : this.diskName;
    }

    /**
     * If creationData.createOption is Empty, this field is mandatory and it indicates the size of the disk to create. If this field is present for updates or creation with other options, it indicates a resize. Resizes are only allowed if the disk is not attached to a running VM, and can only increase the disk's size.
     * 
     */
    @Import(name="diskSizeGB")
      private final @Nullable Output<Integer> diskSizeGB;

    public Output<Integer> diskSizeGB() {
        return this.diskSizeGB == null ? Codegen.empty() : this.diskSizeGB;
    }

    /**
     * Encryption property can be used to encrypt data at rest with customer managed keys or platform managed keys.
     * 
     */
    @Import(name="encryption")
      private final @Nullable Output<EncryptionArgs> encryption;

    public Output<EncryptionArgs> encryption() {
        return this.encryption == null ? Codegen.empty() : this.encryption;
    }

    /**
     * Encryption settings collection used for Azure Disk Encryption, can contain multiple encryption settings per disk or snapshot.
     * 
     */
    @Import(name="encryptionSettingsCollection")
      private final @Nullable Output<EncryptionSettingsCollectionArgs> encryptionSettingsCollection;

    public Output<EncryptionSettingsCollectionArgs> encryptionSettingsCollection() {
        return this.encryptionSettingsCollection == null ? Codegen.empty() : this.encryptionSettingsCollection;
    }

    /**
     * The extended location where the disk will be created. Extended location cannot be changed.
     * 
     */
    @Import(name="extendedLocation")
      private final @Nullable Output<ExtendedLocationArgs> extendedLocation;

    public Output<ExtendedLocationArgs> extendedLocation() {
        return this.extendedLocation == null ? Codegen.empty() : this.extendedLocation;
    }

    /**
     * The hypervisor generation of the Virtual Machine. Applicable to OS disks only.
     * 
     */
    @Import(name="hyperVGeneration")
      private final @Nullable Output<Either<String,HyperVGeneration>> hyperVGeneration;

    public Output<Either<String,HyperVGeneration>> hyperVGeneration() {
        return this.hyperVGeneration == null ? Codegen.empty() : this.hyperVGeneration;
    }

    /**
     * Resource location
     * 
     */
    @Import(name="location")
      private final @Nullable Output<String> location;

    public Output<String> location() {
        return this.location == null ? Codegen.empty() : this.location;
    }

    /**
     * The maximum number of VMs that can attach to the disk at the same time. Value greater than one indicates a disk that can be mounted on multiple VMs at the same time.
     * 
     */
    @Import(name="maxShares")
      private final @Nullable Output<Integer> maxShares;

    public Output<Integer> maxShares() {
        return this.maxShares == null ? Codegen.empty() : this.maxShares;
    }

    /**
     * Policy for accessing the disk via network.
     * 
     */
    @Import(name="networkAccessPolicy")
      private final @Nullable Output<Either<String,NetworkAccessPolicy>> networkAccessPolicy;

    public Output<Either<String,NetworkAccessPolicy>> networkAccessPolicy() {
        return this.networkAccessPolicy == null ? Codegen.empty() : this.networkAccessPolicy;
    }

    /**
     * The Operating System type.
     * 
     */
    @Import(name="osType")
      private final @Nullable Output<OperatingSystemTypes> osType;

    public Output<OperatingSystemTypes> osType() {
        return this.osType == null ? Codegen.empty() : this.osType;
    }

    /**
     * Purchase plan information for the the image from which the OS disk was created. E.g. - {name: 2019-Datacenter, publisher: MicrosoftWindowsServer, product: WindowsServer}
     * 
     */
    @Import(name="purchasePlan")
      private final @Nullable Output<PurchasePlanArgs> purchasePlan;

    public Output<PurchasePlanArgs> purchasePlan() {
        return this.purchasePlan == null ? Codegen.empty() : this.purchasePlan;
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Contains the security related information for the resource.
     * 
     */
    @Import(name="securityProfile")
      private final @Nullable Output<DiskSecurityProfileArgs> securityProfile;

    public Output<DiskSecurityProfileArgs> securityProfile() {
        return this.securityProfile == null ? Codegen.empty() : this.securityProfile;
    }

    /**
     * The disks sku name. Can be Standard_LRS, Premium_LRS, StandardSSD_LRS, UltraSSD_LRS, Premium_ZRS, or StandardSSD_ZRS.
     * 
     */
    @Import(name="sku")
      private final @Nullable Output<DiskSkuArgs> sku;

    public Output<DiskSkuArgs> sku() {
        return this.sku == null ? Codegen.empty() : this.sku;
    }

    /**
     * Indicates the OS on a disk supports hibernation.
     * 
     */
    @Import(name="supportsHibernation")
      private final @Nullable Output<Boolean> supportsHibernation;

    public Output<Boolean> supportsHibernation() {
        return this.supportsHibernation == null ? Codegen.empty() : this.supportsHibernation;
    }

    /**
     * Resource tags
     * 
     */
    @Import(name="tags")
      private final @Nullable Output<Map<String,String>> tags;

    public Output<Map<String,String>> tags() {
        return this.tags == null ? Codegen.empty() : this.tags;
    }

    /**
     * Performance tier of the disk (e.g, P4, S10) as described here: https://azure.microsoft.com/en-us/pricing/details/managed-disks/. Does not apply to Ultra disks.
     * 
     */
    @Import(name="tier")
      private final @Nullable Output<String> tier;

    public Output<String> tier() {
        return this.tier == null ? Codegen.empty() : this.tier;
    }

    /**
     * The Logical zone list for Disk.
     * 
     */
    @Import(name="zones")
      private final @Nullable Output<List<String>> zones;

    public Output<List<String>> zones() {
        return this.zones == null ? Codegen.empty() : this.zones;
    }

    public DiskArgs(
        @Nullable Output<Boolean> burstingEnabled,
        Output<CreationDataArgs> creationData,
        @Nullable Output<String> diskAccessId,
        @Nullable Output<Double> diskIOPSReadOnly,
        @Nullable Output<Double> diskIOPSReadWrite,
        @Nullable Output<Double> diskMBpsReadOnly,
        @Nullable Output<Double> diskMBpsReadWrite,
        @Nullable Output<String> diskName,
        @Nullable Output<Integer> diskSizeGB,
        @Nullable Output<EncryptionArgs> encryption,
        @Nullable Output<EncryptionSettingsCollectionArgs> encryptionSettingsCollection,
        @Nullable Output<ExtendedLocationArgs> extendedLocation,
        @Nullable Output<Either<String,HyperVGeneration>> hyperVGeneration,
        @Nullable Output<String> location,
        @Nullable Output<Integer> maxShares,
        @Nullable Output<Either<String,NetworkAccessPolicy>> networkAccessPolicy,
        @Nullable Output<OperatingSystemTypes> osType,
        @Nullable Output<PurchasePlanArgs> purchasePlan,
        Output<String> resourceGroupName,
        @Nullable Output<DiskSecurityProfileArgs> securityProfile,
        @Nullable Output<DiskSkuArgs> sku,
        @Nullable Output<Boolean> supportsHibernation,
        @Nullable Output<Map<String,String>> tags,
        @Nullable Output<String> tier,
        @Nullable Output<List<String>> zones) {
        this.burstingEnabled = burstingEnabled;
        this.creationData = Objects.requireNonNull(creationData, "expected parameter 'creationData' to be non-null");
        this.diskAccessId = diskAccessId;
        this.diskIOPSReadOnly = diskIOPSReadOnly;
        this.diskIOPSReadWrite = diskIOPSReadWrite;
        this.diskMBpsReadOnly = diskMBpsReadOnly;
        this.diskMBpsReadWrite = diskMBpsReadWrite;
        this.diskName = diskName;
        this.diskSizeGB = diskSizeGB;
        this.encryption = encryption;
        this.encryptionSettingsCollection = encryptionSettingsCollection;
        this.extendedLocation = extendedLocation;
        this.hyperVGeneration = hyperVGeneration;
        this.location = location;
        this.maxShares = maxShares;
        this.networkAccessPolicy = networkAccessPolicy;
        this.osType = osType;
        this.purchasePlan = purchasePlan;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.securityProfile = securityProfile;
        this.sku = sku;
        this.supportsHibernation = supportsHibernation;
        this.tags = tags;
        this.tier = tier;
        this.zones = zones;
    }

    private DiskArgs() {
        this.burstingEnabled = Codegen.empty();
        this.creationData = Codegen.empty();
        this.diskAccessId = Codegen.empty();
        this.diskIOPSReadOnly = Codegen.empty();
        this.diskIOPSReadWrite = Codegen.empty();
        this.diskMBpsReadOnly = Codegen.empty();
        this.diskMBpsReadWrite = Codegen.empty();
        this.diskName = Codegen.empty();
        this.diskSizeGB = Codegen.empty();
        this.encryption = Codegen.empty();
        this.encryptionSettingsCollection = Codegen.empty();
        this.extendedLocation = Codegen.empty();
        this.hyperVGeneration = Codegen.empty();
        this.location = Codegen.empty();
        this.maxShares = Codegen.empty();
        this.networkAccessPolicy = Codegen.empty();
        this.osType = Codegen.empty();
        this.purchasePlan = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.securityProfile = Codegen.empty();
        this.sku = Codegen.empty();
        this.supportsHibernation = Codegen.empty();
        this.tags = Codegen.empty();
        this.tier = Codegen.empty();
        this.zones = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DiskArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Boolean> burstingEnabled;
        private Output<CreationDataArgs> creationData;
        private @Nullable Output<String> diskAccessId;
        private @Nullable Output<Double> diskIOPSReadOnly;
        private @Nullable Output<Double> diskIOPSReadWrite;
        private @Nullable Output<Double> diskMBpsReadOnly;
        private @Nullable Output<Double> diskMBpsReadWrite;
        private @Nullable Output<String> diskName;
        private @Nullable Output<Integer> diskSizeGB;
        private @Nullable Output<EncryptionArgs> encryption;
        private @Nullable Output<EncryptionSettingsCollectionArgs> encryptionSettingsCollection;
        private @Nullable Output<ExtendedLocationArgs> extendedLocation;
        private @Nullable Output<Either<String,HyperVGeneration>> hyperVGeneration;
        private @Nullable Output<String> location;
        private @Nullable Output<Integer> maxShares;
        private @Nullable Output<Either<String,NetworkAccessPolicy>> networkAccessPolicy;
        private @Nullable Output<OperatingSystemTypes> osType;
        private @Nullable Output<PurchasePlanArgs> purchasePlan;
        private Output<String> resourceGroupName;
        private @Nullable Output<DiskSecurityProfileArgs> securityProfile;
        private @Nullable Output<DiskSkuArgs> sku;
        private @Nullable Output<Boolean> supportsHibernation;
        private @Nullable Output<Map<String,String>> tags;
        private @Nullable Output<String> tier;
        private @Nullable Output<List<String>> zones;

        public Builder() {
    	      // Empty
        }

        public Builder(DiskArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.burstingEnabled = defaults.burstingEnabled;
    	      this.creationData = defaults.creationData;
    	      this.diskAccessId = defaults.diskAccessId;
    	      this.diskIOPSReadOnly = defaults.diskIOPSReadOnly;
    	      this.diskIOPSReadWrite = defaults.diskIOPSReadWrite;
    	      this.diskMBpsReadOnly = defaults.diskMBpsReadOnly;
    	      this.diskMBpsReadWrite = defaults.diskMBpsReadWrite;
    	      this.diskName = defaults.diskName;
    	      this.diskSizeGB = defaults.diskSizeGB;
    	      this.encryption = defaults.encryption;
    	      this.encryptionSettingsCollection = defaults.encryptionSettingsCollection;
    	      this.extendedLocation = defaults.extendedLocation;
    	      this.hyperVGeneration = defaults.hyperVGeneration;
    	      this.location = defaults.location;
    	      this.maxShares = defaults.maxShares;
    	      this.networkAccessPolicy = defaults.networkAccessPolicy;
    	      this.osType = defaults.osType;
    	      this.purchasePlan = defaults.purchasePlan;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.securityProfile = defaults.securityProfile;
    	      this.sku = defaults.sku;
    	      this.supportsHibernation = defaults.supportsHibernation;
    	      this.tags = defaults.tags;
    	      this.tier = defaults.tier;
    	      this.zones = defaults.zones;
        }

        public Builder burstingEnabled(@Nullable Output<Boolean> burstingEnabled) {
            this.burstingEnabled = burstingEnabled;
            return this;
        }
        public Builder burstingEnabled(@Nullable Boolean burstingEnabled) {
            this.burstingEnabled = Codegen.ofNullable(burstingEnabled);
            return this;
        }
        public Builder creationData(Output<CreationDataArgs> creationData) {
            this.creationData = Objects.requireNonNull(creationData);
            return this;
        }
        public Builder creationData(CreationDataArgs creationData) {
            this.creationData = Output.of(Objects.requireNonNull(creationData));
            return this;
        }
        public Builder diskAccessId(@Nullable Output<String> diskAccessId) {
            this.diskAccessId = diskAccessId;
            return this;
        }
        public Builder diskAccessId(@Nullable String diskAccessId) {
            this.diskAccessId = Codegen.ofNullable(diskAccessId);
            return this;
        }
        public Builder diskIOPSReadOnly(@Nullable Output<Double> diskIOPSReadOnly) {
            this.diskIOPSReadOnly = diskIOPSReadOnly;
            return this;
        }
        public Builder diskIOPSReadOnly(@Nullable Double diskIOPSReadOnly) {
            this.diskIOPSReadOnly = Codegen.ofNullable(diskIOPSReadOnly);
            return this;
        }
        public Builder diskIOPSReadWrite(@Nullable Output<Double> diskIOPSReadWrite) {
            this.diskIOPSReadWrite = diskIOPSReadWrite;
            return this;
        }
        public Builder diskIOPSReadWrite(@Nullable Double diskIOPSReadWrite) {
            this.diskIOPSReadWrite = Codegen.ofNullable(diskIOPSReadWrite);
            return this;
        }
        public Builder diskMBpsReadOnly(@Nullable Output<Double> diskMBpsReadOnly) {
            this.diskMBpsReadOnly = diskMBpsReadOnly;
            return this;
        }
        public Builder diskMBpsReadOnly(@Nullable Double diskMBpsReadOnly) {
            this.diskMBpsReadOnly = Codegen.ofNullable(diskMBpsReadOnly);
            return this;
        }
        public Builder diskMBpsReadWrite(@Nullable Output<Double> diskMBpsReadWrite) {
            this.diskMBpsReadWrite = diskMBpsReadWrite;
            return this;
        }
        public Builder diskMBpsReadWrite(@Nullable Double diskMBpsReadWrite) {
            this.diskMBpsReadWrite = Codegen.ofNullable(diskMBpsReadWrite);
            return this;
        }
        public Builder diskName(@Nullable Output<String> diskName) {
            this.diskName = diskName;
            return this;
        }
        public Builder diskName(@Nullable String diskName) {
            this.diskName = Codegen.ofNullable(diskName);
            return this;
        }
        public Builder diskSizeGB(@Nullable Output<Integer> diskSizeGB) {
            this.diskSizeGB = diskSizeGB;
            return this;
        }
        public Builder diskSizeGB(@Nullable Integer diskSizeGB) {
            this.diskSizeGB = Codegen.ofNullable(diskSizeGB);
            return this;
        }
        public Builder encryption(@Nullable Output<EncryptionArgs> encryption) {
            this.encryption = encryption;
            return this;
        }
        public Builder encryption(@Nullable EncryptionArgs encryption) {
            this.encryption = Codegen.ofNullable(encryption);
            return this;
        }
        public Builder encryptionSettingsCollection(@Nullable Output<EncryptionSettingsCollectionArgs> encryptionSettingsCollection) {
            this.encryptionSettingsCollection = encryptionSettingsCollection;
            return this;
        }
        public Builder encryptionSettingsCollection(@Nullable EncryptionSettingsCollectionArgs encryptionSettingsCollection) {
            this.encryptionSettingsCollection = Codegen.ofNullable(encryptionSettingsCollection);
            return this;
        }
        public Builder extendedLocation(@Nullable Output<ExtendedLocationArgs> extendedLocation) {
            this.extendedLocation = extendedLocation;
            return this;
        }
        public Builder extendedLocation(@Nullable ExtendedLocationArgs extendedLocation) {
            this.extendedLocation = Codegen.ofNullable(extendedLocation);
            return this;
        }
        public Builder hyperVGeneration(@Nullable Output<Either<String,HyperVGeneration>> hyperVGeneration) {
            this.hyperVGeneration = hyperVGeneration;
            return this;
        }
        public Builder hyperVGeneration(@Nullable Either<String,HyperVGeneration> hyperVGeneration) {
            this.hyperVGeneration = Codegen.ofNullable(hyperVGeneration);
            return this;
        }
        public Builder location(@Nullable Output<String> location) {
            this.location = location;
            return this;
        }
        public Builder location(@Nullable String location) {
            this.location = Codegen.ofNullable(location);
            return this;
        }
        public Builder maxShares(@Nullable Output<Integer> maxShares) {
            this.maxShares = maxShares;
            return this;
        }
        public Builder maxShares(@Nullable Integer maxShares) {
            this.maxShares = Codegen.ofNullable(maxShares);
            return this;
        }
        public Builder networkAccessPolicy(@Nullable Output<Either<String,NetworkAccessPolicy>> networkAccessPolicy) {
            this.networkAccessPolicy = networkAccessPolicy;
            return this;
        }
        public Builder networkAccessPolicy(@Nullable Either<String,NetworkAccessPolicy> networkAccessPolicy) {
            this.networkAccessPolicy = Codegen.ofNullable(networkAccessPolicy);
            return this;
        }
        public Builder osType(@Nullable Output<OperatingSystemTypes> osType) {
            this.osType = osType;
            return this;
        }
        public Builder osType(@Nullable OperatingSystemTypes osType) {
            this.osType = Codegen.ofNullable(osType);
            return this;
        }
        public Builder purchasePlan(@Nullable Output<PurchasePlanArgs> purchasePlan) {
            this.purchasePlan = purchasePlan;
            return this;
        }
        public Builder purchasePlan(@Nullable PurchasePlanArgs purchasePlan) {
            this.purchasePlan = Codegen.ofNullable(purchasePlan);
            return this;
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder securityProfile(@Nullable Output<DiskSecurityProfileArgs> securityProfile) {
            this.securityProfile = securityProfile;
            return this;
        }
        public Builder securityProfile(@Nullable DiskSecurityProfileArgs securityProfile) {
            this.securityProfile = Codegen.ofNullable(securityProfile);
            return this;
        }
        public Builder sku(@Nullable Output<DiskSkuArgs> sku) {
            this.sku = sku;
            return this;
        }
        public Builder sku(@Nullable DiskSkuArgs sku) {
            this.sku = Codegen.ofNullable(sku);
            return this;
        }
        public Builder supportsHibernation(@Nullable Output<Boolean> supportsHibernation) {
            this.supportsHibernation = supportsHibernation;
            return this;
        }
        public Builder supportsHibernation(@Nullable Boolean supportsHibernation) {
            this.supportsHibernation = Codegen.ofNullable(supportsHibernation);
            return this;
        }
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            this.tags = tags;
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = Codegen.ofNullable(tags);
            return this;
        }
        public Builder tier(@Nullable Output<String> tier) {
            this.tier = tier;
            return this;
        }
        public Builder tier(@Nullable String tier) {
            this.tier = Codegen.ofNullable(tier);
            return this;
        }
        public Builder zones(@Nullable Output<List<String>> zones) {
            this.zones = zones;
            return this;
        }
        public Builder zones(@Nullable List<String> zones) {
            this.zones = Codegen.ofNullable(zones);
            return this;
        }
        public Builder zones(String... zones) {
            return zones(List.of(zones));
        }        public DiskArgs build() {
            return new DiskArgs(burstingEnabled, creationData, diskAccessId, diskIOPSReadOnly, diskIOPSReadWrite, diskMBpsReadOnly, diskMBpsReadWrite, diskName, diskSizeGB, encryption, encryptionSettingsCollection, extendedLocation, hyperVGeneration, location, maxShares, networkAccessPolicy, osType, purchasePlan, resourceGroupName, securityProfile, sku, supportsHibernation, tags, tier, zones);
        }
    }
}
