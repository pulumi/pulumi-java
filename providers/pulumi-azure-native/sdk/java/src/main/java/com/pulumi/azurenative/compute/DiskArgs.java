// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.compute;

import com.pulumi.azurenative.compute.enums.HyperVGeneration;
import com.pulumi.azurenative.compute.enums.NetworkAccessPolicy;
import com.pulumi.azurenative.compute.enums.OperatingSystemTypes;
import com.pulumi.azurenative.compute.inputs.CreationDataArgs;
import com.pulumi.azurenative.compute.inputs.DiskSecurityProfileArgs;
import com.pulumi.azurenative.compute.inputs.DiskSkuArgs;
import com.pulumi.azurenative.compute.inputs.EncryptionArgs;
import com.pulumi.azurenative.compute.inputs.EncryptionSettingsCollectionArgs;
import com.pulumi.azurenative.compute.inputs.ExtendedLocationArgs;
import com.pulumi.azurenative.compute.inputs.PurchasePlanArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DiskArgs extends com.pulumi.resources.ResourceArgs {

    public static final DiskArgs Empty = new DiskArgs();

    /**
     * Set to true to enable bursting beyond the provisioned performance target of the disk. Bursting is disabled by default. Does not apply to Ultra disks.
     * 
     */
    @Import(name="burstingEnabled")
    private @Nullable Output<Boolean> burstingEnabled;

    /**
     * @return Set to true to enable bursting beyond the provisioned performance target of the disk. Bursting is disabled by default. Does not apply to Ultra disks.
     * 
     */
    public Optional<Output<Boolean>> burstingEnabled() {
        return Optional.ofNullable(this.burstingEnabled);
    }

    /**
     * Disk source information. CreationData information cannot be changed after the disk has been created.
     * 
     */
    @Import(name="creationData", required=true)
    private Output<CreationDataArgs> creationData;

    /**
     * @return Disk source information. CreationData information cannot be changed after the disk has been created.
     * 
     */
    public Output<CreationDataArgs> creationData() {
        return this.creationData;
    }

    /**
     * ARM id of the DiskAccess resource for using private endpoints on disks.
     * 
     */
    @Import(name="diskAccessId")
    private @Nullable Output<String> diskAccessId;

    /**
     * @return ARM id of the DiskAccess resource for using private endpoints on disks.
     * 
     */
    public Optional<Output<String>> diskAccessId() {
        return Optional.ofNullable(this.diskAccessId);
    }

    /**
     * The total number of IOPS that will be allowed across all VMs mounting the shared disk as ReadOnly. One operation can transfer between 4k and 256k bytes.
     * 
     */
    @Import(name="diskIOPSReadOnly")
    private @Nullable Output<Double> diskIOPSReadOnly;

    /**
     * @return The total number of IOPS that will be allowed across all VMs mounting the shared disk as ReadOnly. One operation can transfer between 4k and 256k bytes.
     * 
     */
    public Optional<Output<Double>> diskIOPSReadOnly() {
        return Optional.ofNullable(this.diskIOPSReadOnly);
    }

    /**
     * The number of IOPS allowed for this disk; only settable for UltraSSD disks. One operation can transfer between 4k and 256k bytes.
     * 
     */
    @Import(name="diskIOPSReadWrite")
    private @Nullable Output<Double> diskIOPSReadWrite;

    /**
     * @return The number of IOPS allowed for this disk; only settable for UltraSSD disks. One operation can transfer between 4k and 256k bytes.
     * 
     */
    public Optional<Output<Double>> diskIOPSReadWrite() {
        return Optional.ofNullable(this.diskIOPSReadWrite);
    }

    /**
     * The total throughput (MBps) that will be allowed across all VMs mounting the shared disk as ReadOnly. MBps means millions of bytes per second - MB here uses the ISO notation, of powers of 10.
     * 
     */
    @Import(name="diskMBpsReadOnly")
    private @Nullable Output<Double> diskMBpsReadOnly;

    /**
     * @return The total throughput (MBps) that will be allowed across all VMs mounting the shared disk as ReadOnly. MBps means millions of bytes per second - MB here uses the ISO notation, of powers of 10.
     * 
     */
    public Optional<Output<Double>> diskMBpsReadOnly() {
        return Optional.ofNullable(this.diskMBpsReadOnly);
    }

    /**
     * The bandwidth allowed for this disk; only settable for UltraSSD disks. MBps means millions of bytes per second - MB here uses the ISO notation, of powers of 10.
     * 
     */
    @Import(name="diskMBpsReadWrite")
    private @Nullable Output<Double> diskMBpsReadWrite;

    /**
     * @return The bandwidth allowed for this disk; only settable for UltraSSD disks. MBps means millions of bytes per second - MB here uses the ISO notation, of powers of 10.
     * 
     */
    public Optional<Output<Double>> diskMBpsReadWrite() {
        return Optional.ofNullable(this.diskMBpsReadWrite);
    }

    /**
     * The name of the managed disk that is being created. The name can&#39;t be changed after the disk is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * 
     */
    @Import(name="diskName")
    private @Nullable Output<String> diskName;

    /**
     * @return The name of the managed disk that is being created. The name can&#39;t be changed after the disk is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * 
     */
    public Optional<Output<String>> diskName() {
        return Optional.ofNullable(this.diskName);
    }

    /**
     * If creationData.createOption is Empty, this field is mandatory and it indicates the size of the disk to create. If this field is present for updates or creation with other options, it indicates a resize. Resizes are only allowed if the disk is not attached to a running VM, and can only increase the disk&#39;s size.
     * 
     */
    @Import(name="diskSizeGB")
    private @Nullable Output<Integer> diskSizeGB;

    /**
     * @return If creationData.createOption is Empty, this field is mandatory and it indicates the size of the disk to create. If this field is present for updates or creation with other options, it indicates a resize. Resizes are only allowed if the disk is not attached to a running VM, and can only increase the disk&#39;s size.
     * 
     */
    public Optional<Output<Integer>> diskSizeGB() {
        return Optional.ofNullable(this.diskSizeGB);
    }

    /**
     * Encryption property can be used to encrypt data at rest with customer managed keys or platform managed keys.
     * 
     */
    @Import(name="encryption")
    private @Nullable Output<EncryptionArgs> encryption;

    /**
     * @return Encryption property can be used to encrypt data at rest with customer managed keys or platform managed keys.
     * 
     */
    public Optional<Output<EncryptionArgs>> encryption() {
        return Optional.ofNullable(this.encryption);
    }

    /**
     * Encryption settings collection used for Azure Disk Encryption, can contain multiple encryption settings per disk or snapshot.
     * 
     */
    @Import(name="encryptionSettingsCollection")
    private @Nullable Output<EncryptionSettingsCollectionArgs> encryptionSettingsCollection;

    /**
     * @return Encryption settings collection used for Azure Disk Encryption, can contain multiple encryption settings per disk or snapshot.
     * 
     */
    public Optional<Output<EncryptionSettingsCollectionArgs>> encryptionSettingsCollection() {
        return Optional.ofNullable(this.encryptionSettingsCollection);
    }

    /**
     * The extended location where the disk will be created. Extended location cannot be changed.
     * 
     */
    @Import(name="extendedLocation")
    private @Nullable Output<ExtendedLocationArgs> extendedLocation;

    /**
     * @return The extended location where the disk will be created. Extended location cannot be changed.
     * 
     */
    public Optional<Output<ExtendedLocationArgs>> extendedLocation() {
        return Optional.ofNullable(this.extendedLocation);
    }

    /**
     * The hypervisor generation of the Virtual Machine. Applicable to OS disks only.
     * 
     */
    @Import(name="hyperVGeneration")
    private @Nullable Output<Either<String,HyperVGeneration>> hyperVGeneration;

    /**
     * @return The hypervisor generation of the Virtual Machine. Applicable to OS disks only.
     * 
     */
    public Optional<Output<Either<String,HyperVGeneration>>> hyperVGeneration() {
        return Optional.ofNullable(this.hyperVGeneration);
    }

    /**
     * Resource location
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Resource location
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The maximum number of VMs that can attach to the disk at the same time. Value greater than one indicates a disk that can be mounted on multiple VMs at the same time.
     * 
     */
    @Import(name="maxShares")
    private @Nullable Output<Integer> maxShares;

    /**
     * @return The maximum number of VMs that can attach to the disk at the same time. Value greater than one indicates a disk that can be mounted on multiple VMs at the same time.
     * 
     */
    public Optional<Output<Integer>> maxShares() {
        return Optional.ofNullable(this.maxShares);
    }

    /**
     * Policy for accessing the disk via network.
     * 
     */
    @Import(name="networkAccessPolicy")
    private @Nullable Output<Either<String,NetworkAccessPolicy>> networkAccessPolicy;

    /**
     * @return Policy for accessing the disk via network.
     * 
     */
    public Optional<Output<Either<String,NetworkAccessPolicy>>> networkAccessPolicy() {
        return Optional.ofNullable(this.networkAccessPolicy);
    }

    /**
     * The Operating System type.
     * 
     */
    @Import(name="osType")
    private @Nullable Output<OperatingSystemTypes> osType;

    /**
     * @return The Operating System type.
     * 
     */
    public Optional<Output<OperatingSystemTypes>> osType() {
        return Optional.ofNullable(this.osType);
    }

    /**
     * Purchase plan information for the the image from which the OS disk was created. E.g. - {name: 2019-Datacenter, publisher: MicrosoftWindowsServer, product: WindowsServer}
     * 
     */
    @Import(name="purchasePlan")
    private @Nullable Output<PurchasePlanArgs> purchasePlan;

    /**
     * @return Purchase plan information for the the image from which the OS disk was created. E.g. - {name: 2019-Datacenter, publisher: MicrosoftWindowsServer, product: WindowsServer}
     * 
     */
    public Optional<Output<PurchasePlanArgs>> purchasePlan() {
        return Optional.ofNullable(this.purchasePlan);
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Contains the security related information for the resource.
     * 
     */
    @Import(name="securityProfile")
    private @Nullable Output<DiskSecurityProfileArgs> securityProfile;

    /**
     * @return Contains the security related information for the resource.
     * 
     */
    public Optional<Output<DiskSecurityProfileArgs>> securityProfile() {
        return Optional.ofNullable(this.securityProfile);
    }

    /**
     * The disks sku name. Can be Standard_LRS, Premium_LRS, StandardSSD_LRS, UltraSSD_LRS, Premium_ZRS, or StandardSSD_ZRS.
     * 
     */
    @Import(name="sku")
    private @Nullable Output<DiskSkuArgs> sku;

    /**
     * @return The disks sku name. Can be Standard_LRS, Premium_LRS, StandardSSD_LRS, UltraSSD_LRS, Premium_ZRS, or StandardSSD_ZRS.
     * 
     */
    public Optional<Output<DiskSkuArgs>> sku() {
        return Optional.ofNullable(this.sku);
    }

    /**
     * Indicates the OS on a disk supports hibernation.
     * 
     */
    @Import(name="supportsHibernation")
    private @Nullable Output<Boolean> supportsHibernation;

    /**
     * @return Indicates the OS on a disk supports hibernation.
     * 
     */
    public Optional<Output<Boolean>> supportsHibernation() {
        return Optional.ofNullable(this.supportsHibernation);
    }

    /**
     * Resource tags
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Resource tags
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Performance tier of the disk (e.g, P4, S10) as described here: https://azure.microsoft.com/en-us/pricing/details/managed-disks/. Does not apply to Ultra disks.
     * 
     */
    @Import(name="tier")
    private @Nullable Output<String> tier;

    /**
     * @return Performance tier of the disk (e.g, P4, S10) as described here: https://azure.microsoft.com/en-us/pricing/details/managed-disks/. Does not apply to Ultra disks.
     * 
     */
    public Optional<Output<String>> tier() {
        return Optional.ofNullable(this.tier);
    }

    /**
     * The Logical zone list for Disk.
     * 
     */
    @Import(name="zones")
    private @Nullable Output<List<String>> zones;

    /**
     * @return The Logical zone list for Disk.
     * 
     */
    public Optional<Output<List<String>>> zones() {
        return Optional.ofNullable(this.zones);
    }

    private DiskArgs() {}

    private DiskArgs(DiskArgs $) {
        this.burstingEnabled = $.burstingEnabled;
        this.creationData = $.creationData;
        this.diskAccessId = $.diskAccessId;
        this.diskIOPSReadOnly = $.diskIOPSReadOnly;
        this.diskIOPSReadWrite = $.diskIOPSReadWrite;
        this.diskMBpsReadOnly = $.diskMBpsReadOnly;
        this.diskMBpsReadWrite = $.diskMBpsReadWrite;
        this.diskName = $.diskName;
        this.diskSizeGB = $.diskSizeGB;
        this.encryption = $.encryption;
        this.encryptionSettingsCollection = $.encryptionSettingsCollection;
        this.extendedLocation = $.extendedLocation;
        this.hyperVGeneration = $.hyperVGeneration;
        this.location = $.location;
        this.maxShares = $.maxShares;
        this.networkAccessPolicy = $.networkAccessPolicy;
        this.osType = $.osType;
        this.purchasePlan = $.purchasePlan;
        this.resourceGroupName = $.resourceGroupName;
        this.securityProfile = $.securityProfile;
        this.sku = $.sku;
        this.supportsHibernation = $.supportsHibernation;
        this.tags = $.tags;
        this.tier = $.tier;
        this.zones = $.zones;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DiskArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DiskArgs $;

        public Builder() {
            $ = new DiskArgs();
        }

        public Builder(DiskArgs defaults) {
            $ = new DiskArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param burstingEnabled Set to true to enable bursting beyond the provisioned performance target of the disk. Bursting is disabled by default. Does not apply to Ultra disks.
         * 
         * @return builder
         * 
         */
        public Builder burstingEnabled(@Nullable Output<Boolean> burstingEnabled) {
            $.burstingEnabled = burstingEnabled;
            return this;
        }

        /**
         * @param burstingEnabled Set to true to enable bursting beyond the provisioned performance target of the disk. Bursting is disabled by default. Does not apply to Ultra disks.
         * 
         * @return builder
         * 
         */
        public Builder burstingEnabled(Boolean burstingEnabled) {
            return burstingEnabled(Output.of(burstingEnabled));
        }

        /**
         * @param creationData Disk source information. CreationData information cannot be changed after the disk has been created.
         * 
         * @return builder
         * 
         */
        public Builder creationData(Output<CreationDataArgs> creationData) {
            $.creationData = creationData;
            return this;
        }

        /**
         * @param creationData Disk source information. CreationData information cannot be changed after the disk has been created.
         * 
         * @return builder
         * 
         */
        public Builder creationData(CreationDataArgs creationData) {
            return creationData(Output.of(creationData));
        }

        /**
         * @param diskAccessId ARM id of the DiskAccess resource for using private endpoints on disks.
         * 
         * @return builder
         * 
         */
        public Builder diskAccessId(@Nullable Output<String> diskAccessId) {
            $.diskAccessId = diskAccessId;
            return this;
        }

        /**
         * @param diskAccessId ARM id of the DiskAccess resource for using private endpoints on disks.
         * 
         * @return builder
         * 
         */
        public Builder diskAccessId(String diskAccessId) {
            return diskAccessId(Output.of(diskAccessId));
        }

        /**
         * @param diskIOPSReadOnly The total number of IOPS that will be allowed across all VMs mounting the shared disk as ReadOnly. One operation can transfer between 4k and 256k bytes.
         * 
         * @return builder
         * 
         */
        public Builder diskIOPSReadOnly(@Nullable Output<Double> diskIOPSReadOnly) {
            $.diskIOPSReadOnly = diskIOPSReadOnly;
            return this;
        }

        /**
         * @param diskIOPSReadOnly The total number of IOPS that will be allowed across all VMs mounting the shared disk as ReadOnly. One operation can transfer between 4k and 256k bytes.
         * 
         * @return builder
         * 
         */
        public Builder diskIOPSReadOnly(Double diskIOPSReadOnly) {
            return diskIOPSReadOnly(Output.of(diskIOPSReadOnly));
        }

        /**
         * @param diskIOPSReadWrite The number of IOPS allowed for this disk; only settable for UltraSSD disks. One operation can transfer between 4k and 256k bytes.
         * 
         * @return builder
         * 
         */
        public Builder diskIOPSReadWrite(@Nullable Output<Double> diskIOPSReadWrite) {
            $.diskIOPSReadWrite = diskIOPSReadWrite;
            return this;
        }

        /**
         * @param diskIOPSReadWrite The number of IOPS allowed for this disk; only settable for UltraSSD disks. One operation can transfer between 4k and 256k bytes.
         * 
         * @return builder
         * 
         */
        public Builder diskIOPSReadWrite(Double diskIOPSReadWrite) {
            return diskIOPSReadWrite(Output.of(diskIOPSReadWrite));
        }

        /**
         * @param diskMBpsReadOnly The total throughput (MBps) that will be allowed across all VMs mounting the shared disk as ReadOnly. MBps means millions of bytes per second - MB here uses the ISO notation, of powers of 10.
         * 
         * @return builder
         * 
         */
        public Builder diskMBpsReadOnly(@Nullable Output<Double> diskMBpsReadOnly) {
            $.diskMBpsReadOnly = diskMBpsReadOnly;
            return this;
        }

        /**
         * @param diskMBpsReadOnly The total throughput (MBps) that will be allowed across all VMs mounting the shared disk as ReadOnly. MBps means millions of bytes per second - MB here uses the ISO notation, of powers of 10.
         * 
         * @return builder
         * 
         */
        public Builder diskMBpsReadOnly(Double diskMBpsReadOnly) {
            return diskMBpsReadOnly(Output.of(diskMBpsReadOnly));
        }

        /**
         * @param diskMBpsReadWrite The bandwidth allowed for this disk; only settable for UltraSSD disks. MBps means millions of bytes per second - MB here uses the ISO notation, of powers of 10.
         * 
         * @return builder
         * 
         */
        public Builder diskMBpsReadWrite(@Nullable Output<Double> diskMBpsReadWrite) {
            $.diskMBpsReadWrite = diskMBpsReadWrite;
            return this;
        }

        /**
         * @param diskMBpsReadWrite The bandwidth allowed for this disk; only settable for UltraSSD disks. MBps means millions of bytes per second - MB here uses the ISO notation, of powers of 10.
         * 
         * @return builder
         * 
         */
        public Builder diskMBpsReadWrite(Double diskMBpsReadWrite) {
            return diskMBpsReadWrite(Output.of(diskMBpsReadWrite));
        }

        /**
         * @param diskName The name of the managed disk that is being created. The name can&#39;t be changed after the disk is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
         * 
         * @return builder
         * 
         */
        public Builder diskName(@Nullable Output<String> diskName) {
            $.diskName = diskName;
            return this;
        }

        /**
         * @param diskName The name of the managed disk that is being created. The name can&#39;t be changed after the disk is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
         * 
         * @return builder
         * 
         */
        public Builder diskName(String diskName) {
            return diskName(Output.of(diskName));
        }

        /**
         * @param diskSizeGB If creationData.createOption is Empty, this field is mandatory and it indicates the size of the disk to create. If this field is present for updates or creation with other options, it indicates a resize. Resizes are only allowed if the disk is not attached to a running VM, and can only increase the disk&#39;s size.
         * 
         * @return builder
         * 
         */
        public Builder diskSizeGB(@Nullable Output<Integer> diskSizeGB) {
            $.diskSizeGB = diskSizeGB;
            return this;
        }

        /**
         * @param diskSizeGB If creationData.createOption is Empty, this field is mandatory and it indicates the size of the disk to create. If this field is present for updates or creation with other options, it indicates a resize. Resizes are only allowed if the disk is not attached to a running VM, and can only increase the disk&#39;s size.
         * 
         * @return builder
         * 
         */
        public Builder diskSizeGB(Integer diskSizeGB) {
            return diskSizeGB(Output.of(diskSizeGB));
        }

        /**
         * @param encryption Encryption property can be used to encrypt data at rest with customer managed keys or platform managed keys.
         * 
         * @return builder
         * 
         */
        public Builder encryption(@Nullable Output<EncryptionArgs> encryption) {
            $.encryption = encryption;
            return this;
        }

        /**
         * @param encryption Encryption property can be used to encrypt data at rest with customer managed keys or platform managed keys.
         * 
         * @return builder
         * 
         */
        public Builder encryption(EncryptionArgs encryption) {
            return encryption(Output.of(encryption));
        }

        /**
         * @param encryptionSettingsCollection Encryption settings collection used for Azure Disk Encryption, can contain multiple encryption settings per disk or snapshot.
         * 
         * @return builder
         * 
         */
        public Builder encryptionSettingsCollection(@Nullable Output<EncryptionSettingsCollectionArgs> encryptionSettingsCollection) {
            $.encryptionSettingsCollection = encryptionSettingsCollection;
            return this;
        }

        /**
         * @param encryptionSettingsCollection Encryption settings collection used for Azure Disk Encryption, can contain multiple encryption settings per disk or snapshot.
         * 
         * @return builder
         * 
         */
        public Builder encryptionSettingsCollection(EncryptionSettingsCollectionArgs encryptionSettingsCollection) {
            return encryptionSettingsCollection(Output.of(encryptionSettingsCollection));
        }

        /**
         * @param extendedLocation The extended location where the disk will be created. Extended location cannot be changed.
         * 
         * @return builder
         * 
         */
        public Builder extendedLocation(@Nullable Output<ExtendedLocationArgs> extendedLocation) {
            $.extendedLocation = extendedLocation;
            return this;
        }

        /**
         * @param extendedLocation The extended location where the disk will be created. Extended location cannot be changed.
         * 
         * @return builder
         * 
         */
        public Builder extendedLocation(ExtendedLocationArgs extendedLocation) {
            return extendedLocation(Output.of(extendedLocation));
        }

        /**
         * @param hyperVGeneration The hypervisor generation of the Virtual Machine. Applicable to OS disks only.
         * 
         * @return builder
         * 
         */
        public Builder hyperVGeneration(@Nullable Output<Either<String,HyperVGeneration>> hyperVGeneration) {
            $.hyperVGeneration = hyperVGeneration;
            return this;
        }

        /**
         * @param hyperVGeneration The hypervisor generation of the Virtual Machine. Applicable to OS disks only.
         * 
         * @return builder
         * 
         */
        public Builder hyperVGeneration(Either<String,HyperVGeneration> hyperVGeneration) {
            return hyperVGeneration(Output.of(hyperVGeneration));
        }

        /**
         * @param hyperVGeneration The hypervisor generation of the Virtual Machine. Applicable to OS disks only.
         * 
         * @return builder
         * 
         */
        public Builder hyperVGeneration(String hyperVGeneration) {
            return hyperVGeneration(Either.ofLeft(hyperVGeneration));
        }

        /**
         * @param hyperVGeneration The hypervisor generation of the Virtual Machine. Applicable to OS disks only.
         * 
         * @return builder
         * 
         */
        public Builder hyperVGeneration(HyperVGeneration hyperVGeneration) {
            return hyperVGeneration(Either.ofRight(hyperVGeneration));
        }

        /**
         * @param location Resource location
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Resource location
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param maxShares The maximum number of VMs that can attach to the disk at the same time. Value greater than one indicates a disk that can be mounted on multiple VMs at the same time.
         * 
         * @return builder
         * 
         */
        public Builder maxShares(@Nullable Output<Integer> maxShares) {
            $.maxShares = maxShares;
            return this;
        }

        /**
         * @param maxShares The maximum number of VMs that can attach to the disk at the same time. Value greater than one indicates a disk that can be mounted on multiple VMs at the same time.
         * 
         * @return builder
         * 
         */
        public Builder maxShares(Integer maxShares) {
            return maxShares(Output.of(maxShares));
        }

        /**
         * @param networkAccessPolicy Policy for accessing the disk via network.
         * 
         * @return builder
         * 
         */
        public Builder networkAccessPolicy(@Nullable Output<Either<String,NetworkAccessPolicy>> networkAccessPolicy) {
            $.networkAccessPolicy = networkAccessPolicy;
            return this;
        }

        /**
         * @param networkAccessPolicy Policy for accessing the disk via network.
         * 
         * @return builder
         * 
         */
        public Builder networkAccessPolicy(Either<String,NetworkAccessPolicy> networkAccessPolicy) {
            return networkAccessPolicy(Output.of(networkAccessPolicy));
        }

        /**
         * @param networkAccessPolicy Policy for accessing the disk via network.
         * 
         * @return builder
         * 
         */
        public Builder networkAccessPolicy(String networkAccessPolicy) {
            return networkAccessPolicy(Either.ofLeft(networkAccessPolicy));
        }

        /**
         * @param networkAccessPolicy Policy for accessing the disk via network.
         * 
         * @return builder
         * 
         */
        public Builder networkAccessPolicy(NetworkAccessPolicy networkAccessPolicy) {
            return networkAccessPolicy(Either.ofRight(networkAccessPolicy));
        }

        /**
         * @param osType The Operating System type.
         * 
         * @return builder
         * 
         */
        public Builder osType(@Nullable Output<OperatingSystemTypes> osType) {
            $.osType = osType;
            return this;
        }

        /**
         * @param osType The Operating System type.
         * 
         * @return builder
         * 
         */
        public Builder osType(OperatingSystemTypes osType) {
            return osType(Output.of(osType));
        }

        /**
         * @param purchasePlan Purchase plan information for the the image from which the OS disk was created. E.g. - {name: 2019-Datacenter, publisher: MicrosoftWindowsServer, product: WindowsServer}
         * 
         * @return builder
         * 
         */
        public Builder purchasePlan(@Nullable Output<PurchasePlanArgs> purchasePlan) {
            $.purchasePlan = purchasePlan;
            return this;
        }

        /**
         * @param purchasePlan Purchase plan information for the the image from which the OS disk was created. E.g. - {name: 2019-Datacenter, publisher: MicrosoftWindowsServer, product: WindowsServer}
         * 
         * @return builder
         * 
         */
        public Builder purchasePlan(PurchasePlanArgs purchasePlan) {
            return purchasePlan(Output.of(purchasePlan));
        }

        /**
         * @param resourceGroupName The name of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param securityProfile Contains the security related information for the resource.
         * 
         * @return builder
         * 
         */
        public Builder securityProfile(@Nullable Output<DiskSecurityProfileArgs> securityProfile) {
            $.securityProfile = securityProfile;
            return this;
        }

        /**
         * @param securityProfile Contains the security related information for the resource.
         * 
         * @return builder
         * 
         */
        public Builder securityProfile(DiskSecurityProfileArgs securityProfile) {
            return securityProfile(Output.of(securityProfile));
        }

        /**
         * @param sku The disks sku name. Can be Standard_LRS, Premium_LRS, StandardSSD_LRS, UltraSSD_LRS, Premium_ZRS, or StandardSSD_ZRS.
         * 
         * @return builder
         * 
         */
        public Builder sku(@Nullable Output<DiskSkuArgs> sku) {
            $.sku = sku;
            return this;
        }

        /**
         * @param sku The disks sku name. Can be Standard_LRS, Premium_LRS, StandardSSD_LRS, UltraSSD_LRS, Premium_ZRS, or StandardSSD_ZRS.
         * 
         * @return builder
         * 
         */
        public Builder sku(DiskSkuArgs sku) {
            return sku(Output.of(sku));
        }

        /**
         * @param supportsHibernation Indicates the OS on a disk supports hibernation.
         * 
         * @return builder
         * 
         */
        public Builder supportsHibernation(@Nullable Output<Boolean> supportsHibernation) {
            $.supportsHibernation = supportsHibernation;
            return this;
        }

        /**
         * @param supportsHibernation Indicates the OS on a disk supports hibernation.
         * 
         * @return builder
         * 
         */
        public Builder supportsHibernation(Boolean supportsHibernation) {
            return supportsHibernation(Output.of(supportsHibernation));
        }

        /**
         * @param tags Resource tags
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Resource tags
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tier Performance tier of the disk (e.g, P4, S10) as described here: https://azure.microsoft.com/en-us/pricing/details/managed-disks/. Does not apply to Ultra disks.
         * 
         * @return builder
         * 
         */
        public Builder tier(@Nullable Output<String> tier) {
            $.tier = tier;
            return this;
        }

        /**
         * @param tier Performance tier of the disk (e.g, P4, S10) as described here: https://azure.microsoft.com/en-us/pricing/details/managed-disks/. Does not apply to Ultra disks.
         * 
         * @return builder
         * 
         */
        public Builder tier(String tier) {
            return tier(Output.of(tier));
        }

        /**
         * @param zones The Logical zone list for Disk.
         * 
         * @return builder
         * 
         */
        public Builder zones(@Nullable Output<List<String>> zones) {
            $.zones = zones;
            return this;
        }

        /**
         * @param zones The Logical zone list for Disk.
         * 
         * @return builder
         * 
         */
        public Builder zones(List<String> zones) {
            return zones(Output.of(zones));
        }

        /**
         * @param zones The Logical zone list for Disk.
         * 
         * @return builder
         * 
         */
        public Builder zones(String... zones) {
            return zones(List.of(zones));
        }

        public DiskArgs build() {
            $.creationData = Objects.requireNonNull($.creationData, "expected parameter 'creationData' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
