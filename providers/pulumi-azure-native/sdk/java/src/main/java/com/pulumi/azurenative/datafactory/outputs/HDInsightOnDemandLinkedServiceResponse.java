// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.outputs;

import com.pulumi.azurenative.datafactory.outputs.AzureKeyVaultSecretReferenceResponse;
import com.pulumi.azurenative.datafactory.outputs.CredentialReferenceResponse;
import com.pulumi.azurenative.datafactory.outputs.IntegrationRuntimeReferenceResponse;
import com.pulumi.azurenative.datafactory.outputs.LinkedServiceReferenceResponse;
import com.pulumi.azurenative.datafactory.outputs.ParameterSpecificationResponse;
import com.pulumi.azurenative.datafactory.outputs.ScriptActionResponse;
import com.pulumi.azurenative.datafactory.outputs.SecureStringResponse;
import com.pulumi.core.Either;
import com.pulumi.core.annotations.CustomType;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class HDInsightOnDemandLinkedServiceResponse {
    /**
     * Specifies additional storage accounts for the HDInsight linked service so that the Data Factory service can register them on your behalf.
     * 
     */
    private final @Nullable List<LinkedServiceReferenceResponse> additionalLinkedServiceNames;
    /**
     * List of tags that can be used for describing the linked service.
     * 
     */
    private final @Nullable List<Object> annotations;
    /**
     * The prefix of cluster name, postfix will be distinct with timestamp. Type: string (or Expression with resultType string).
     * 
     */
    private final @Nullable Object clusterNamePrefix;
    /**
     * The password to access the cluster.
     * 
     */
    private final @Nullable Either<AzureKeyVaultSecretReferenceResponse,SecureStringResponse> clusterPassword;
    /**
     * The resource group where the cluster belongs. Type: string (or Expression with resultType string).
     * 
     */
    private final Object clusterResourceGroup;
    /**
     * Number of worker/data nodes in the cluster. Suggestion value: 4. Type: string (or Expression with resultType string).
     * 
     */
    private final Object clusterSize;
    /**
     * The password to SSH remotely connect cluster’s node (for Linux).
     * 
     */
    private final @Nullable Either<AzureKeyVaultSecretReferenceResponse,SecureStringResponse> clusterSshPassword;
    /**
     * The username to SSH remotely connect to cluster’s node (for Linux). Type: string (or Expression with resultType string).
     * 
     */
    private final @Nullable Object clusterSshUserName;
    /**
     * The cluster type. Type: string (or Expression with resultType string).
     * 
     */
    private final @Nullable Object clusterType;
    /**
     * The username to access the cluster. Type: string (or Expression with resultType string).
     * 
     */
    private final @Nullable Object clusterUserName;
    /**
     * The integration runtime reference.
     * 
     */
    private final @Nullable IntegrationRuntimeReferenceResponse connectVia;
    /**
     * Specifies the core configuration parameters (as in core-site.xml) for the HDInsight cluster to be created.
     * 
     */
    private final @Nullable Object coreConfiguration;
    /**
     * The credential reference containing authentication information.
     * 
     */
    private final @Nullable CredentialReferenceResponse credential;
    /**
     * Specifies the size of the data node for the HDInsight cluster.
     * 
     */
    private final @Nullable Object dataNodeSize;
    /**
     * Linked service description.
     * 
     */
    private final @Nullable String description;
    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     * 
     */
    private final @Nullable Object encryptedCredential;
    /**
     * Specifies the HBase configuration parameters (hbase-site.xml) for the HDInsight cluster.
     * 
     */
    private final @Nullable Object hBaseConfiguration;
    /**
     * The name of Azure SQL linked service that point to the HCatalog database. The on-demand HDInsight cluster is created by using the Azure SQL database as the metastore.
     * 
     */
    private final @Nullable LinkedServiceReferenceResponse hcatalogLinkedServiceName;
    /**
     * Specifies the HDFS configuration parameters (hdfs-site.xml) for the HDInsight cluster.
     * 
     */
    private final @Nullable Object hdfsConfiguration;
    /**
     * Specifies the size of the head node for the HDInsight cluster.
     * 
     */
    private final @Nullable Object headNodeSize;
    /**
     * Specifies the hive configuration parameters (hive-site.xml) for the HDInsight cluster.
     * 
     */
    private final @Nullable Object hiveConfiguration;
    /**
     * The customer’s subscription to host the cluster. Type: string (or Expression with resultType string).
     * 
     */
    private final Object hostSubscriptionId;
    /**
     * Azure Storage linked service to be used by the on-demand cluster for storing and processing data.
     * 
     */
    private final LinkedServiceReferenceResponse linkedServiceName;
    /**
     * Specifies the MapReduce configuration parameters (mapred-site.xml) for the HDInsight cluster.
     * 
     */
    private final @Nullable Object mapReduceConfiguration;
    /**
     * Specifies the Oozie configuration parameters (oozie-site.xml) for the HDInsight cluster.
     * 
     */
    private final @Nullable Object oozieConfiguration;
    /**
     * Parameters for linked service.
     * 
     */
    private final @Nullable Map<String,ParameterSpecificationResponse> parameters;
    /**
     * Custom script actions to run on HDI ondemand cluster once it's up. Please refer to https://docs.microsoft.com/en-us/azure/hdinsight/hdinsight-hadoop-customize-cluster-linux?toc=%2Fen-us%2Fazure%2Fhdinsight%2Fr-server%2FTOC.json&bc=%2Fen-us%2Fazure%2Fbread%2Ftoc.json#understanding-script-actions.
     * 
     */
    private final @Nullable List<ScriptActionResponse> scriptActions;
    /**
     * The service principal id for the hostSubscriptionId. Type: string (or Expression with resultType string).
     * 
     */
    private final @Nullable Object servicePrincipalId;
    /**
     * The key for the service principal id.
     * 
     */
    private final @Nullable Either<AzureKeyVaultSecretReferenceResponse,SecureStringResponse> servicePrincipalKey;
    /**
     * The version of spark if the cluster type is 'spark'. Type: string (or Expression with resultType string).
     * 
     */
    private final @Nullable Object sparkVersion;
    /**
     * Specifies the Storm configuration parameters (storm-site.xml) for the HDInsight cluster.
     * 
     */
    private final @Nullable Object stormConfiguration;
    /**
     * The ARM resource ID for the subnet in the vNet. If virtualNetworkId was specified, then this property is required. Type: string (or Expression with resultType string).
     * 
     */
    private final @Nullable Object subnetName;
    /**
     * The Tenant id/name to which the service principal belongs. Type: string (or Expression with resultType string).
     * 
     */
    private final Object tenant;
    /**
     * The allowed idle time for the on-demand HDInsight cluster. Specifies how long the on-demand HDInsight cluster stays alive after completion of an activity run if there are no other active jobs in the cluster. The minimum value is 5 mins. Type: string (or Expression with resultType string).
     * 
     */
    private final Object timeToLive;
    /**
     * Type of linked service.
     * Expected value is 'HDInsightOnDemand'.
     * 
     */
    private final String type;
    /**
     * Version of the HDInsight cluster.  Type: string (or Expression with resultType string).
     * 
     */
    private final Object version;
    /**
     * The ARM resource ID for the vNet to which the cluster should be joined after creation. Type: string (or Expression with resultType string).
     * 
     */
    private final @Nullable Object virtualNetworkId;
    /**
     * Specifies the Yarn configuration parameters (yarn-site.xml) for the HDInsight cluster.
     * 
     */
    private final @Nullable Object yarnConfiguration;
    /**
     * Specifies the size of the Zoo Keeper node for the HDInsight cluster.
     * 
     */
    private final @Nullable Object zookeeperNodeSize;

    @CustomType.Constructor
    private HDInsightOnDemandLinkedServiceResponse(
        @CustomType.Parameter("additionalLinkedServiceNames") @Nullable List<LinkedServiceReferenceResponse> additionalLinkedServiceNames,
        @CustomType.Parameter("annotations") @Nullable List<Object> annotations,
        @CustomType.Parameter("clusterNamePrefix") @Nullable Object clusterNamePrefix,
        @CustomType.Parameter("clusterPassword") @Nullable Either<AzureKeyVaultSecretReferenceResponse,SecureStringResponse> clusterPassword,
        @CustomType.Parameter("clusterResourceGroup") Object clusterResourceGroup,
        @CustomType.Parameter("clusterSize") Object clusterSize,
        @CustomType.Parameter("clusterSshPassword") @Nullable Either<AzureKeyVaultSecretReferenceResponse,SecureStringResponse> clusterSshPassword,
        @CustomType.Parameter("clusterSshUserName") @Nullable Object clusterSshUserName,
        @CustomType.Parameter("clusterType") @Nullable Object clusterType,
        @CustomType.Parameter("clusterUserName") @Nullable Object clusterUserName,
        @CustomType.Parameter("connectVia") @Nullable IntegrationRuntimeReferenceResponse connectVia,
        @CustomType.Parameter("coreConfiguration") @Nullable Object coreConfiguration,
        @CustomType.Parameter("credential") @Nullable CredentialReferenceResponse credential,
        @CustomType.Parameter("dataNodeSize") @Nullable Object dataNodeSize,
        @CustomType.Parameter("description") @Nullable String description,
        @CustomType.Parameter("encryptedCredential") @Nullable Object encryptedCredential,
        @CustomType.Parameter("hBaseConfiguration") @Nullable Object hBaseConfiguration,
        @CustomType.Parameter("hcatalogLinkedServiceName") @Nullable LinkedServiceReferenceResponse hcatalogLinkedServiceName,
        @CustomType.Parameter("hdfsConfiguration") @Nullable Object hdfsConfiguration,
        @CustomType.Parameter("headNodeSize") @Nullable Object headNodeSize,
        @CustomType.Parameter("hiveConfiguration") @Nullable Object hiveConfiguration,
        @CustomType.Parameter("hostSubscriptionId") Object hostSubscriptionId,
        @CustomType.Parameter("linkedServiceName") LinkedServiceReferenceResponse linkedServiceName,
        @CustomType.Parameter("mapReduceConfiguration") @Nullable Object mapReduceConfiguration,
        @CustomType.Parameter("oozieConfiguration") @Nullable Object oozieConfiguration,
        @CustomType.Parameter("parameters") @Nullable Map<String,ParameterSpecificationResponse> parameters,
        @CustomType.Parameter("scriptActions") @Nullable List<ScriptActionResponse> scriptActions,
        @CustomType.Parameter("servicePrincipalId") @Nullable Object servicePrincipalId,
        @CustomType.Parameter("servicePrincipalKey") @Nullable Either<AzureKeyVaultSecretReferenceResponse,SecureStringResponse> servicePrincipalKey,
        @CustomType.Parameter("sparkVersion") @Nullable Object sparkVersion,
        @CustomType.Parameter("stormConfiguration") @Nullable Object stormConfiguration,
        @CustomType.Parameter("subnetName") @Nullable Object subnetName,
        @CustomType.Parameter("tenant") Object tenant,
        @CustomType.Parameter("timeToLive") Object timeToLive,
        @CustomType.Parameter("type") String type,
        @CustomType.Parameter("version") Object version,
        @CustomType.Parameter("virtualNetworkId") @Nullable Object virtualNetworkId,
        @CustomType.Parameter("yarnConfiguration") @Nullable Object yarnConfiguration,
        @CustomType.Parameter("zookeeperNodeSize") @Nullable Object zookeeperNodeSize) {
        this.additionalLinkedServiceNames = additionalLinkedServiceNames;
        this.annotations = annotations;
        this.clusterNamePrefix = clusterNamePrefix;
        this.clusterPassword = clusterPassword;
        this.clusterResourceGroup = clusterResourceGroup;
        this.clusterSize = clusterSize;
        this.clusterSshPassword = clusterSshPassword;
        this.clusterSshUserName = clusterSshUserName;
        this.clusterType = clusterType;
        this.clusterUserName = clusterUserName;
        this.connectVia = connectVia;
        this.coreConfiguration = coreConfiguration;
        this.credential = credential;
        this.dataNodeSize = dataNodeSize;
        this.description = description;
        this.encryptedCredential = encryptedCredential;
        this.hBaseConfiguration = hBaseConfiguration;
        this.hcatalogLinkedServiceName = hcatalogLinkedServiceName;
        this.hdfsConfiguration = hdfsConfiguration;
        this.headNodeSize = headNodeSize;
        this.hiveConfiguration = hiveConfiguration;
        this.hostSubscriptionId = hostSubscriptionId;
        this.linkedServiceName = linkedServiceName;
        this.mapReduceConfiguration = mapReduceConfiguration;
        this.oozieConfiguration = oozieConfiguration;
        this.parameters = parameters;
        this.scriptActions = scriptActions;
        this.servicePrincipalId = servicePrincipalId;
        this.servicePrincipalKey = servicePrincipalKey;
        this.sparkVersion = sparkVersion;
        this.stormConfiguration = stormConfiguration;
        this.subnetName = subnetName;
        this.tenant = tenant;
        this.timeToLive = timeToLive;
        this.type = type;
        this.version = version;
        this.virtualNetworkId = virtualNetworkId;
        this.yarnConfiguration = yarnConfiguration;
        this.zookeeperNodeSize = zookeeperNodeSize;
    }

    /**
     * Specifies additional storage accounts for the HDInsight linked service so that the Data Factory service can register them on your behalf.
     * 
    */
    public List<LinkedServiceReferenceResponse> additionalLinkedServiceNames() {
        return this.additionalLinkedServiceNames == null ? List.of() : this.additionalLinkedServiceNames;
    }
    /**
     * List of tags that can be used for describing the linked service.
     * 
    */
    public List<Object> annotations() {
        return this.annotations == null ? List.of() : this.annotations;
    }
    /**
     * The prefix of cluster name, postfix will be distinct with timestamp. Type: string (or Expression with resultType string).
     * 
    */
    public Optional<Object> clusterNamePrefix() {
        return Optional.ofNullable(this.clusterNamePrefix);
    }
    /**
     * The password to access the cluster.
     * 
    */
    public Optional<Either<AzureKeyVaultSecretReferenceResponse,SecureStringResponse>> clusterPassword() {
        return Optional.ofNullable(this.clusterPassword);
    }
    /**
     * The resource group where the cluster belongs. Type: string (or Expression with resultType string).
     * 
    */
    public Object clusterResourceGroup() {
        return this.clusterResourceGroup;
    }
    /**
     * Number of worker/data nodes in the cluster. Suggestion value: 4. Type: string (or Expression with resultType string).
     * 
    */
    public Object clusterSize() {
        return this.clusterSize;
    }
    /**
     * The password to SSH remotely connect cluster’s node (for Linux).
     * 
    */
    public Optional<Either<AzureKeyVaultSecretReferenceResponse,SecureStringResponse>> clusterSshPassword() {
        return Optional.ofNullable(this.clusterSshPassword);
    }
    /**
     * The username to SSH remotely connect to cluster’s node (for Linux). Type: string (or Expression with resultType string).
     * 
    */
    public Optional<Object> clusterSshUserName() {
        return Optional.ofNullable(this.clusterSshUserName);
    }
    /**
     * The cluster type. Type: string (or Expression with resultType string).
     * 
    */
    public Optional<Object> clusterType() {
        return Optional.ofNullable(this.clusterType);
    }
    /**
     * The username to access the cluster. Type: string (or Expression with resultType string).
     * 
    */
    public Optional<Object> clusterUserName() {
        return Optional.ofNullable(this.clusterUserName);
    }
    /**
     * The integration runtime reference.
     * 
    */
    public Optional<IntegrationRuntimeReferenceResponse> connectVia() {
        return Optional.ofNullable(this.connectVia);
    }
    /**
     * Specifies the core configuration parameters (as in core-site.xml) for the HDInsight cluster to be created.
     * 
    */
    public Optional<Object> coreConfiguration() {
        return Optional.ofNullable(this.coreConfiguration);
    }
    /**
     * The credential reference containing authentication information.
     * 
    */
    public Optional<CredentialReferenceResponse> credential() {
        return Optional.ofNullable(this.credential);
    }
    /**
     * Specifies the size of the data node for the HDInsight cluster.
     * 
    */
    public Optional<Object> dataNodeSize() {
        return Optional.ofNullable(this.dataNodeSize);
    }
    /**
     * Linked service description.
     * 
    */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     * 
    */
    public Optional<Object> encryptedCredential() {
        return Optional.ofNullable(this.encryptedCredential);
    }
    /**
     * Specifies the HBase configuration parameters (hbase-site.xml) for the HDInsight cluster.
     * 
    */
    public Optional<Object> hBaseConfiguration() {
        return Optional.ofNullable(this.hBaseConfiguration);
    }
    /**
     * The name of Azure SQL linked service that point to the HCatalog database. The on-demand HDInsight cluster is created by using the Azure SQL database as the metastore.
     * 
    */
    public Optional<LinkedServiceReferenceResponse> hcatalogLinkedServiceName() {
        return Optional.ofNullable(this.hcatalogLinkedServiceName);
    }
    /**
     * Specifies the HDFS configuration parameters (hdfs-site.xml) for the HDInsight cluster.
     * 
    */
    public Optional<Object> hdfsConfiguration() {
        return Optional.ofNullable(this.hdfsConfiguration);
    }
    /**
     * Specifies the size of the head node for the HDInsight cluster.
     * 
    */
    public Optional<Object> headNodeSize() {
        return Optional.ofNullable(this.headNodeSize);
    }
    /**
     * Specifies the hive configuration parameters (hive-site.xml) for the HDInsight cluster.
     * 
    */
    public Optional<Object> hiveConfiguration() {
        return Optional.ofNullable(this.hiveConfiguration);
    }
    /**
     * The customer’s subscription to host the cluster. Type: string (or Expression with resultType string).
     * 
    */
    public Object hostSubscriptionId() {
        return this.hostSubscriptionId;
    }
    /**
     * Azure Storage linked service to be used by the on-demand cluster for storing and processing data.
     * 
    */
    public LinkedServiceReferenceResponse linkedServiceName() {
        return this.linkedServiceName;
    }
    /**
     * Specifies the MapReduce configuration parameters (mapred-site.xml) for the HDInsight cluster.
     * 
    */
    public Optional<Object> mapReduceConfiguration() {
        return Optional.ofNullable(this.mapReduceConfiguration);
    }
    /**
     * Specifies the Oozie configuration parameters (oozie-site.xml) for the HDInsight cluster.
     * 
    */
    public Optional<Object> oozieConfiguration() {
        return Optional.ofNullable(this.oozieConfiguration);
    }
    /**
     * Parameters for linked service.
     * 
    */
    public Map<String,ParameterSpecificationResponse> parameters() {
        return this.parameters == null ? Map.of() : this.parameters;
    }
    /**
     * Custom script actions to run on HDI ondemand cluster once it's up. Please refer to https://docs.microsoft.com/en-us/azure/hdinsight/hdinsight-hadoop-customize-cluster-linux?toc=%2Fen-us%2Fazure%2Fhdinsight%2Fr-server%2FTOC.json&bc=%2Fen-us%2Fazure%2Fbread%2Ftoc.json#understanding-script-actions.
     * 
    */
    public List<ScriptActionResponse> scriptActions() {
        return this.scriptActions == null ? List.of() : this.scriptActions;
    }
    /**
     * The service principal id for the hostSubscriptionId. Type: string (or Expression with resultType string).
     * 
    */
    public Optional<Object> servicePrincipalId() {
        return Optional.ofNullable(this.servicePrincipalId);
    }
    /**
     * The key for the service principal id.
     * 
    */
    public Optional<Either<AzureKeyVaultSecretReferenceResponse,SecureStringResponse>> servicePrincipalKey() {
        return Optional.ofNullable(this.servicePrincipalKey);
    }
    /**
     * The version of spark if the cluster type is 'spark'. Type: string (or Expression with resultType string).
     * 
    */
    public Optional<Object> sparkVersion() {
        return Optional.ofNullable(this.sparkVersion);
    }
    /**
     * Specifies the Storm configuration parameters (storm-site.xml) for the HDInsight cluster.
     * 
    */
    public Optional<Object> stormConfiguration() {
        return Optional.ofNullable(this.stormConfiguration);
    }
    /**
     * The ARM resource ID for the subnet in the vNet. If virtualNetworkId was specified, then this property is required. Type: string (or Expression with resultType string).
     * 
    */
    public Optional<Object> subnetName() {
        return Optional.ofNullable(this.subnetName);
    }
    /**
     * The Tenant id/name to which the service principal belongs. Type: string (or Expression with resultType string).
     * 
    */
    public Object tenant() {
        return this.tenant;
    }
    /**
     * The allowed idle time for the on-demand HDInsight cluster. Specifies how long the on-demand HDInsight cluster stays alive after completion of an activity run if there are no other active jobs in the cluster. The minimum value is 5 mins. Type: string (or Expression with resultType string).
     * 
    */
    public Object timeToLive() {
        return this.timeToLive;
    }
    /**
     * Type of linked service.
     * Expected value is 'HDInsightOnDemand'.
     * 
    */
    public String type() {
        return this.type;
    }
    /**
     * Version of the HDInsight cluster.  Type: string (or Expression with resultType string).
     * 
    */
    public Object version() {
        return this.version;
    }
    /**
     * The ARM resource ID for the vNet to which the cluster should be joined after creation. Type: string (or Expression with resultType string).
     * 
    */
    public Optional<Object> virtualNetworkId() {
        return Optional.ofNullable(this.virtualNetworkId);
    }
    /**
     * Specifies the Yarn configuration parameters (yarn-site.xml) for the HDInsight cluster.
     * 
    */
    public Optional<Object> yarnConfiguration() {
        return Optional.ofNullable(this.yarnConfiguration);
    }
    /**
     * Specifies the size of the Zoo Keeper node for the HDInsight cluster.
     * 
    */
    public Optional<Object> zookeeperNodeSize() {
        return Optional.ofNullable(this.zookeeperNodeSize);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(HDInsightOnDemandLinkedServiceResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<LinkedServiceReferenceResponse> additionalLinkedServiceNames;
        private @Nullable List<Object> annotations;
        private @Nullable Object clusterNamePrefix;
        private @Nullable Either<AzureKeyVaultSecretReferenceResponse,SecureStringResponse> clusterPassword;
        private Object clusterResourceGroup;
        private Object clusterSize;
        private @Nullable Either<AzureKeyVaultSecretReferenceResponse,SecureStringResponse> clusterSshPassword;
        private @Nullable Object clusterSshUserName;
        private @Nullable Object clusterType;
        private @Nullable Object clusterUserName;
        private @Nullable IntegrationRuntimeReferenceResponse connectVia;
        private @Nullable Object coreConfiguration;
        private @Nullable CredentialReferenceResponse credential;
        private @Nullable Object dataNodeSize;
        private @Nullable String description;
        private @Nullable Object encryptedCredential;
        private @Nullable Object hBaseConfiguration;
        private @Nullable LinkedServiceReferenceResponse hcatalogLinkedServiceName;
        private @Nullable Object hdfsConfiguration;
        private @Nullable Object headNodeSize;
        private @Nullable Object hiveConfiguration;
        private Object hostSubscriptionId;
        private LinkedServiceReferenceResponse linkedServiceName;
        private @Nullable Object mapReduceConfiguration;
        private @Nullable Object oozieConfiguration;
        private @Nullable Map<String,ParameterSpecificationResponse> parameters;
        private @Nullable List<ScriptActionResponse> scriptActions;
        private @Nullable Object servicePrincipalId;
        private @Nullable Either<AzureKeyVaultSecretReferenceResponse,SecureStringResponse> servicePrincipalKey;
        private @Nullable Object sparkVersion;
        private @Nullable Object stormConfiguration;
        private @Nullable Object subnetName;
        private Object tenant;
        private Object timeToLive;
        private String type;
        private Object version;
        private @Nullable Object virtualNetworkId;
        private @Nullable Object yarnConfiguration;
        private @Nullable Object zookeeperNodeSize;

        public Builder() {
    	      // Empty
        }

        public Builder(HDInsightOnDemandLinkedServiceResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalLinkedServiceNames = defaults.additionalLinkedServiceNames;
    	      this.annotations = defaults.annotations;
    	      this.clusterNamePrefix = defaults.clusterNamePrefix;
    	      this.clusterPassword = defaults.clusterPassword;
    	      this.clusterResourceGroup = defaults.clusterResourceGroup;
    	      this.clusterSize = defaults.clusterSize;
    	      this.clusterSshPassword = defaults.clusterSshPassword;
    	      this.clusterSshUserName = defaults.clusterSshUserName;
    	      this.clusterType = defaults.clusterType;
    	      this.clusterUserName = defaults.clusterUserName;
    	      this.connectVia = defaults.connectVia;
    	      this.coreConfiguration = defaults.coreConfiguration;
    	      this.credential = defaults.credential;
    	      this.dataNodeSize = defaults.dataNodeSize;
    	      this.description = defaults.description;
    	      this.encryptedCredential = defaults.encryptedCredential;
    	      this.hBaseConfiguration = defaults.hBaseConfiguration;
    	      this.hcatalogLinkedServiceName = defaults.hcatalogLinkedServiceName;
    	      this.hdfsConfiguration = defaults.hdfsConfiguration;
    	      this.headNodeSize = defaults.headNodeSize;
    	      this.hiveConfiguration = defaults.hiveConfiguration;
    	      this.hostSubscriptionId = defaults.hostSubscriptionId;
    	      this.linkedServiceName = defaults.linkedServiceName;
    	      this.mapReduceConfiguration = defaults.mapReduceConfiguration;
    	      this.oozieConfiguration = defaults.oozieConfiguration;
    	      this.parameters = defaults.parameters;
    	      this.scriptActions = defaults.scriptActions;
    	      this.servicePrincipalId = defaults.servicePrincipalId;
    	      this.servicePrincipalKey = defaults.servicePrincipalKey;
    	      this.sparkVersion = defaults.sparkVersion;
    	      this.stormConfiguration = defaults.stormConfiguration;
    	      this.subnetName = defaults.subnetName;
    	      this.tenant = defaults.tenant;
    	      this.timeToLive = defaults.timeToLive;
    	      this.type = defaults.type;
    	      this.version = defaults.version;
    	      this.virtualNetworkId = defaults.virtualNetworkId;
    	      this.yarnConfiguration = defaults.yarnConfiguration;
    	      this.zookeeperNodeSize = defaults.zookeeperNodeSize;
        }

        public Builder additionalLinkedServiceNames(@Nullable List<LinkedServiceReferenceResponse> additionalLinkedServiceNames) {
            this.additionalLinkedServiceNames = additionalLinkedServiceNames;
            return this;
        }
        public Builder additionalLinkedServiceNames(LinkedServiceReferenceResponse... additionalLinkedServiceNames) {
            return additionalLinkedServiceNames(List.of(additionalLinkedServiceNames));
        }
        public Builder annotations(@Nullable List<Object> annotations) {
            this.annotations = annotations;
            return this;
        }
        public Builder annotations(Object... annotations) {
            return annotations(List.of(annotations));
        }
        public Builder clusterNamePrefix(@Nullable Object clusterNamePrefix) {
            this.clusterNamePrefix = clusterNamePrefix;
            return this;
        }
        public Builder clusterPassword(@Nullable Either<AzureKeyVaultSecretReferenceResponse,SecureStringResponse> clusterPassword) {
            this.clusterPassword = clusterPassword;
            return this;
        }
        public Builder clusterResourceGroup(Object clusterResourceGroup) {
            this.clusterResourceGroup = Objects.requireNonNull(clusterResourceGroup);
            return this;
        }
        public Builder clusterSize(Object clusterSize) {
            this.clusterSize = Objects.requireNonNull(clusterSize);
            return this;
        }
        public Builder clusterSshPassword(@Nullable Either<AzureKeyVaultSecretReferenceResponse,SecureStringResponse> clusterSshPassword) {
            this.clusterSshPassword = clusterSshPassword;
            return this;
        }
        public Builder clusterSshUserName(@Nullable Object clusterSshUserName) {
            this.clusterSshUserName = clusterSshUserName;
            return this;
        }
        public Builder clusterType(@Nullable Object clusterType) {
            this.clusterType = clusterType;
            return this;
        }
        public Builder clusterUserName(@Nullable Object clusterUserName) {
            this.clusterUserName = clusterUserName;
            return this;
        }
        public Builder connectVia(@Nullable IntegrationRuntimeReferenceResponse connectVia) {
            this.connectVia = connectVia;
            return this;
        }
        public Builder coreConfiguration(@Nullable Object coreConfiguration) {
            this.coreConfiguration = coreConfiguration;
            return this;
        }
        public Builder credential(@Nullable CredentialReferenceResponse credential) {
            this.credential = credential;
            return this;
        }
        public Builder dataNodeSize(@Nullable Object dataNodeSize) {
            this.dataNodeSize = dataNodeSize;
            return this;
        }
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        public Builder encryptedCredential(@Nullable Object encryptedCredential) {
            this.encryptedCredential = encryptedCredential;
            return this;
        }
        public Builder hBaseConfiguration(@Nullable Object hBaseConfiguration) {
            this.hBaseConfiguration = hBaseConfiguration;
            return this;
        }
        public Builder hcatalogLinkedServiceName(@Nullable LinkedServiceReferenceResponse hcatalogLinkedServiceName) {
            this.hcatalogLinkedServiceName = hcatalogLinkedServiceName;
            return this;
        }
        public Builder hdfsConfiguration(@Nullable Object hdfsConfiguration) {
            this.hdfsConfiguration = hdfsConfiguration;
            return this;
        }
        public Builder headNodeSize(@Nullable Object headNodeSize) {
            this.headNodeSize = headNodeSize;
            return this;
        }
        public Builder hiveConfiguration(@Nullable Object hiveConfiguration) {
            this.hiveConfiguration = hiveConfiguration;
            return this;
        }
        public Builder hostSubscriptionId(Object hostSubscriptionId) {
            this.hostSubscriptionId = Objects.requireNonNull(hostSubscriptionId);
            return this;
        }
        public Builder linkedServiceName(LinkedServiceReferenceResponse linkedServiceName) {
            this.linkedServiceName = Objects.requireNonNull(linkedServiceName);
            return this;
        }
        public Builder mapReduceConfiguration(@Nullable Object mapReduceConfiguration) {
            this.mapReduceConfiguration = mapReduceConfiguration;
            return this;
        }
        public Builder oozieConfiguration(@Nullable Object oozieConfiguration) {
            this.oozieConfiguration = oozieConfiguration;
            return this;
        }
        public Builder parameters(@Nullable Map<String,ParameterSpecificationResponse> parameters) {
            this.parameters = parameters;
            return this;
        }
        public Builder scriptActions(@Nullable List<ScriptActionResponse> scriptActions) {
            this.scriptActions = scriptActions;
            return this;
        }
        public Builder scriptActions(ScriptActionResponse... scriptActions) {
            return scriptActions(List.of(scriptActions));
        }
        public Builder servicePrincipalId(@Nullable Object servicePrincipalId) {
            this.servicePrincipalId = servicePrincipalId;
            return this;
        }
        public Builder servicePrincipalKey(@Nullable Either<AzureKeyVaultSecretReferenceResponse,SecureStringResponse> servicePrincipalKey) {
            this.servicePrincipalKey = servicePrincipalKey;
            return this;
        }
        public Builder sparkVersion(@Nullable Object sparkVersion) {
            this.sparkVersion = sparkVersion;
            return this;
        }
        public Builder stormConfiguration(@Nullable Object stormConfiguration) {
            this.stormConfiguration = stormConfiguration;
            return this;
        }
        public Builder subnetName(@Nullable Object subnetName) {
            this.subnetName = subnetName;
            return this;
        }
        public Builder tenant(Object tenant) {
            this.tenant = Objects.requireNonNull(tenant);
            return this;
        }
        public Builder timeToLive(Object timeToLive) {
            this.timeToLive = Objects.requireNonNull(timeToLive);
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder version(Object version) {
            this.version = Objects.requireNonNull(version);
            return this;
        }
        public Builder virtualNetworkId(@Nullable Object virtualNetworkId) {
            this.virtualNetworkId = virtualNetworkId;
            return this;
        }
        public Builder yarnConfiguration(@Nullable Object yarnConfiguration) {
            this.yarnConfiguration = yarnConfiguration;
            return this;
        }
        public Builder zookeeperNodeSize(@Nullable Object zookeeperNodeSize) {
            this.zookeeperNodeSize = zookeeperNodeSize;
            return this;
        }        public HDInsightOnDemandLinkedServiceResponse build() {
            return new HDInsightOnDemandLinkedServiceResponse(additionalLinkedServiceNames, annotations, clusterNamePrefix, clusterPassword, clusterResourceGroup, clusterSize, clusterSshPassword, clusterSshUserName, clusterType, clusterUserName, connectVia, coreConfiguration, credential, dataNodeSize, description, encryptedCredential, hBaseConfiguration, hcatalogLinkedServiceName, hdfsConfiguration, headNodeSize, hiveConfiguration, hostSubscriptionId, linkedServiceName, mapReduceConfiguration, oozieConfiguration, parameters, scriptActions, servicePrincipalId, servicePrincipalKey, sparkVersion, stormConfiguration, subnetName, tenant, timeToLive, type, version, virtualNetworkId, yarnConfiguration, zookeeperNodeSize);
        }
    }
}
