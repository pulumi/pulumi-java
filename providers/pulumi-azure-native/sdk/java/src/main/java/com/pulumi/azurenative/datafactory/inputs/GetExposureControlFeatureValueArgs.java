// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetExposureControlFeatureValueArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetExposureControlFeatureValueArgs Empty = new GetExposureControlFeatureValueArgs();

    /**
     * The feature name.
     * 
     */
    @Import(name="featureName")
    private @Nullable Output<String> featureName;

    /**
     * @return The feature name.
     * 
     */
    public Optional<Output<String>> featureName() {
        return Optional.ofNullable(this.featureName);
    }

    /**
     * The feature type.
     * 
     */
    @Import(name="featureType")
    private @Nullable Output<String> featureType;

    /**
     * @return The feature type.
     * 
     */
    public Optional<Output<String>> featureType() {
        return Optional.ofNullable(this.featureType);
    }

    /**
     * The location identifier.
     * 
     */
    @Import(name="locationId", required=true)
    private Output<String> locationId;

    /**
     * @return The location identifier.
     * 
     */
    public Output<String> locationId() {
        return this.locationId;
    }

    private GetExposureControlFeatureValueArgs() {}

    private GetExposureControlFeatureValueArgs(GetExposureControlFeatureValueArgs $) {
        this.featureName = $.featureName;
        this.featureType = $.featureType;
        this.locationId = $.locationId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetExposureControlFeatureValueArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetExposureControlFeatureValueArgs $;

        public Builder() {
            $ = new GetExposureControlFeatureValueArgs();
        }

        public Builder(GetExposureControlFeatureValueArgs defaults) {
            $ = new GetExposureControlFeatureValueArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param featureName The feature name.
         * 
         * @return builder
         * 
         */
        public Builder featureName(@Nullable Output<String> featureName) {
            $.featureName = featureName;
            return this;
        }

        /**
         * @param featureName The feature name.
         * 
         * @return builder
         * 
         */
        public Builder featureName(String featureName) {
            return featureName(Output.of(featureName));
        }

        /**
         * @param featureType The feature type.
         * 
         * @return builder
         * 
         */
        public Builder featureType(@Nullable Output<String> featureType) {
            $.featureType = featureType;
            return this;
        }

        /**
         * @param featureType The feature type.
         * 
         * @return builder
         * 
         */
        public Builder featureType(String featureType) {
            return featureType(Output.of(featureType));
        }

        /**
         * @param locationId The location identifier.
         * 
         * @return builder
         * 
         */
        public Builder locationId(Output<String> locationId) {
            $.locationId = locationId;
            return this;
        }

        /**
         * @param locationId The location identifier.
         * 
         * @return builder
         * 
         */
        public Builder locationId(String locationId) {
            return locationId(Output.of(locationId));
        }

        public GetExposureControlFeatureValueArgs build() {
            $.locationId = Objects.requireNonNull($.locationId, "expected parameter 'locationId' to be non-null");
            return $;
        }
    }

}
