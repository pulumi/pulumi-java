// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Route resource.
 * 
 */
public final class RouteResponse extends com.pulumi.resources.InvokeArgs {

    public static final RouteResponse Empty = new RouteResponse();

    /**
     * The destination CIDR to which the route applies.
     * 
     */
    @Import(name="addressPrefix")
    private @Nullable String addressPrefix;

    /**
     * @return The destination CIDR to which the route applies.
     * 
     */
    public Optional<String> addressPrefix() {
        return Optional.ofNullable(this.addressPrefix);
    }

    /**
     * A unique read-only string that changes whenever the resource is updated.
     * 
     */
    @Import(name="etag", required=true)
    private String etag;

    /**
     * @return A unique read-only string that changes whenever the resource is updated.
     * 
     */
    public String etag() {
        return this.etag;
    }

    /**
     * A value indicating whether this route overrides overlapping BGP routes regardless of LPM.
     * 
     */
    @Import(name="hasBgpOverride")
    private @Nullable Boolean hasBgpOverride;

    /**
     * @return A value indicating whether this route overrides overlapping BGP routes regardless of LPM.
     * 
     */
    public Optional<Boolean> hasBgpOverride() {
        return Optional.ofNullable(this.hasBgpOverride);
    }

    /**
     * Resource ID.
     * 
     */
    @Import(name="id")
    private @Nullable String id;

    /**
     * @return Resource ID.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The name of the resource that is unique within a resource group. This name can be used to access the resource.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return The name of the resource that is unique within a resource group. This name can be used to access the resource.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The IP address packets should be forwarded to. Next hop values are only allowed in routes where the next hop type is VirtualAppliance.
     * 
     */
    @Import(name="nextHopIpAddress")
    private @Nullable String nextHopIpAddress;

    /**
     * @return The IP address packets should be forwarded to. Next hop values are only allowed in routes where the next hop type is VirtualAppliance.
     * 
     */
    public Optional<String> nextHopIpAddress() {
        return Optional.ofNullable(this.nextHopIpAddress);
    }

    /**
     * The type of Azure hop the packet should be sent to.
     * 
     */
    @Import(name="nextHopType", required=true)
    private String nextHopType;

    /**
     * @return The type of Azure hop the packet should be sent to.
     * 
     */
    public String nextHopType() {
        return this.nextHopType;
    }

    /**
     * The provisioning state of the route resource.
     * 
     */
    @Import(name="provisioningState", required=true)
    private String provisioningState;

    /**
     * @return The provisioning state of the route resource.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * The type of the resource.
     * 
     */
    @Import(name="type")
    private @Nullable String type;

    /**
     * @return The type of the resource.
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    private RouteResponse() {}

    private RouteResponse(RouteResponse $) {
        this.addressPrefix = $.addressPrefix;
        this.etag = $.etag;
        this.hasBgpOverride = $.hasBgpOverride;
        this.id = $.id;
        this.name = $.name;
        this.nextHopIpAddress = $.nextHopIpAddress;
        this.nextHopType = $.nextHopType;
        this.provisioningState = $.provisioningState;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RouteResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RouteResponse $;

        public Builder() {
            $ = new RouteResponse();
        }

        public Builder(RouteResponse defaults) {
            $ = new RouteResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param addressPrefix The destination CIDR to which the route applies.
         * 
         * @return builder
         * 
         */
        public Builder addressPrefix(@Nullable String addressPrefix) {
            $.addressPrefix = addressPrefix;
            return this;
        }

        /**
         * @param etag A unique read-only string that changes whenever the resource is updated.
         * 
         * @return builder
         * 
         */
        public Builder etag(String etag) {
            $.etag = etag;
            return this;
        }

        /**
         * @param hasBgpOverride A value indicating whether this route overrides overlapping BGP routes regardless of LPM.
         * 
         * @return builder
         * 
         */
        public Builder hasBgpOverride(@Nullable Boolean hasBgpOverride) {
            $.hasBgpOverride = hasBgpOverride;
            return this;
        }

        /**
         * @param id Resource ID.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable String id) {
            $.id = id;
            return this;
        }

        /**
         * @param name The name of the resource that is unique within a resource group. This name can be used to access the resource.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param nextHopIpAddress The IP address packets should be forwarded to. Next hop values are only allowed in routes where the next hop type is VirtualAppliance.
         * 
         * @return builder
         * 
         */
        public Builder nextHopIpAddress(@Nullable String nextHopIpAddress) {
            $.nextHopIpAddress = nextHopIpAddress;
            return this;
        }

        /**
         * @param nextHopType The type of Azure hop the packet should be sent to.
         * 
         * @return builder
         * 
         */
        public Builder nextHopType(String nextHopType) {
            $.nextHopType = nextHopType;
            return this;
        }

        /**
         * @param provisioningState The provisioning state of the route resource.
         * 
         * @return builder
         * 
         */
        public Builder provisioningState(String provisioningState) {
            $.provisioningState = provisioningState;
            return this;
        }

        /**
         * @param type The type of the resource.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable String type) {
            $.type = type;
            return this;
        }

        public RouteResponse build() {
            $.etag = Objects.requireNonNull($.etag, "expected parameter 'etag' to be non-null");
            $.nextHopType = Objects.requireNonNull($.nextHopType, "expected parameter 'nextHopType' to be non-null");
            $.provisioningState = Objects.requireNonNull($.provisioningState, "expected parameter 'provisioningState' to be non-null");
            return $;
        }
    }

}
