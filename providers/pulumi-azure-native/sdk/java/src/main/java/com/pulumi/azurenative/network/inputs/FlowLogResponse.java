// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.azurenative.network.inputs.FlowLogFormatParametersResponse;
import com.pulumi.azurenative.network.inputs.RetentionPolicyParametersResponse;
import com.pulumi.azurenative.network.inputs.TrafficAnalyticsPropertiesResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A flow log resource.
 * 
 */
public final class FlowLogResponse extends com.pulumi.resources.InvokeArgs {

    public static final FlowLogResponse Empty = new FlowLogResponse();

    /**
     * Flag to enable/disable flow logging.
     * 
     */
    @Import(name="enabled")
    private @Nullable Boolean enabled;

    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * A unique read-only string that changes whenever the resource is updated.
     * 
     */
    @Import(name="etag", required=true)
    private String etag;

    public String etag() {
        return this.etag;
    }

    /**
     * Parameters that define the configuration of traffic analytics.
     * 
     */
    @Import(name="flowAnalyticsConfiguration")
    private @Nullable TrafficAnalyticsPropertiesResponse flowAnalyticsConfiguration;

    public Optional<TrafficAnalyticsPropertiesResponse> flowAnalyticsConfiguration() {
        return Optional.ofNullable(this.flowAnalyticsConfiguration);
    }

    /**
     * Parameters that define the flow log format.
     * 
     */
    @Import(name="format")
    private @Nullable FlowLogFormatParametersResponse format;

    public Optional<FlowLogFormatParametersResponse> format() {
        return Optional.ofNullable(this.format);
    }

    /**
     * Resource ID.
     * 
     */
    @Import(name="id")
    private @Nullable String id;

    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Resource location.
     * 
     */
    @Import(name="location")
    private @Nullable String location;

    public Optional<String> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Resource name.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    public String name() {
        return this.name;
    }

    /**
     * The provisioning state of the flow log.
     * 
     */
    @Import(name="provisioningState", required=true)
    private String provisioningState;

    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Parameters that define the retention policy for flow log.
     * 
     */
    @Import(name="retentionPolicy")
    private @Nullable RetentionPolicyParametersResponse retentionPolicy;

    public Optional<RetentionPolicyParametersResponse> retentionPolicy() {
        return Optional.ofNullable(this.retentionPolicy);
    }

    /**
     * ID of the storage account which is used to store the flow log.
     * 
     */
    @Import(name="storageId", required=true)
    private String storageId;

    public String storageId() {
        return this.storageId;
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
    private @Nullable Map<String,String> tags;

    public Optional<Map<String,String>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Guid of network security group to which flow log will be applied.
     * 
     */
    @Import(name="targetResourceGuid", required=true)
    private String targetResourceGuid;

    public String targetResourceGuid() {
        return this.targetResourceGuid;
    }

    /**
     * ID of network security group to which flow log will be applied.
     * 
     */
    @Import(name="targetResourceId", required=true)
    private String targetResourceId;

    public String targetResourceId() {
        return this.targetResourceId;
    }

    /**
     * Resource type.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    public String type() {
        return this.type;
    }

    private FlowLogResponse() {}

    private FlowLogResponse(FlowLogResponse $) {
        this.enabled = $.enabled;
        this.etag = $.etag;
        this.flowAnalyticsConfiguration = $.flowAnalyticsConfiguration;
        this.format = $.format;
        this.id = $.id;
        this.location = $.location;
        this.name = $.name;
        this.provisioningState = $.provisioningState;
        this.retentionPolicy = $.retentionPolicy;
        this.storageId = $.storageId;
        this.tags = $.tags;
        this.targetResourceGuid = $.targetResourceGuid;
        this.targetResourceId = $.targetResourceId;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FlowLogResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FlowLogResponse $;

        public Builder() {
            $ = new FlowLogResponse();
        }

        public Builder(FlowLogResponse defaults) {
            $ = new FlowLogResponse(Objects.requireNonNull(defaults));
        }

        public Builder enabled(@Nullable Boolean enabled) {
            $.enabled = enabled;
            return this;
        }

        public Builder etag(String etag) {
            $.etag = etag;
            return this;
        }

        public Builder flowAnalyticsConfiguration(@Nullable TrafficAnalyticsPropertiesResponse flowAnalyticsConfiguration) {
            $.flowAnalyticsConfiguration = flowAnalyticsConfiguration;
            return this;
        }

        public Builder format(@Nullable FlowLogFormatParametersResponse format) {
            $.format = format;
            return this;
        }

        public Builder id(@Nullable String id) {
            $.id = id;
            return this;
        }

        public Builder location(@Nullable String location) {
            $.location = location;
            return this;
        }

        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public Builder provisioningState(String provisioningState) {
            $.provisioningState = provisioningState;
            return this;
        }

        public Builder retentionPolicy(@Nullable RetentionPolicyParametersResponse retentionPolicy) {
            $.retentionPolicy = retentionPolicy;
            return this;
        }

        public Builder storageId(String storageId) {
            $.storageId = storageId;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            $.tags = tags;
            return this;
        }

        public Builder targetResourceGuid(String targetResourceGuid) {
            $.targetResourceGuid = targetResourceGuid;
            return this;
        }

        public Builder targetResourceId(String targetResourceId) {
            $.targetResourceId = targetResourceId;
            return this;
        }

        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public FlowLogResponse build() {
            $.etag = Objects.requireNonNull($.etag, "expected parameter 'etag' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.provisioningState = Objects.requireNonNull($.provisioningState, "expected parameter 'provisioningState' to be non-null");
            $.storageId = Objects.requireNonNull($.storageId, "expected parameter 'storageId' to be non-null");
            $.targetResourceGuid = Objects.requireNonNull($.targetResourceGuid, "expected parameter 'targetResourceGuid' to be non-null");
            $.targetResourceId = Objects.requireNonNull($.targetResourceId, "expected parameter 'targetResourceId' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
