// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.securityinsights.inputs;

import com.pulumi.azurenative.securityinsights.inputs.ContentPathMapResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * metadata of a repository.
 * 
 */
public final class RepositoryResponse extends com.pulumi.resources.InvokeArgs {

    public static final RepositoryResponse Empty = new RepositoryResponse();

    /**
     * Branch name of repository.
     * 
     */
    @Import(name="branch")
    private @Nullable String branch;

    public Optional<String> branch() {
        return Optional.ofNullable(this.branch);
    }

    /**
     * Url to access repository action logs.
     * 
     */
    @Import(name="deploymentLogsUrl")
    private @Nullable String deploymentLogsUrl;

    public Optional<String> deploymentLogsUrl() {
        return Optional.ofNullable(this.deploymentLogsUrl);
    }

    /**
     * Display url of repository.
     * 
     */
    @Import(name="displayUrl")
    private @Nullable String displayUrl;

    public Optional<String> displayUrl() {
        return Optional.ofNullable(this.displayUrl);
    }

    /**
     * Dictionary of source control content type and path mapping.
     * 
     */
    @Import(name="pathMapping")
    private @Nullable List<ContentPathMapResponse> pathMapping;

    public Optional<List<ContentPathMapResponse>> pathMapping() {
        return Optional.ofNullable(this.pathMapping);
    }

    /**
     * Url of repository.
     * 
     */
    @Import(name="url")
    private @Nullable String url;

    public Optional<String> url() {
        return Optional.ofNullable(this.url);
    }

    private RepositoryResponse() {}

    private RepositoryResponse(RepositoryResponse $) {
        this.branch = $.branch;
        this.deploymentLogsUrl = $.deploymentLogsUrl;
        this.displayUrl = $.displayUrl;
        this.pathMapping = $.pathMapping;
        this.url = $.url;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RepositoryResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RepositoryResponse $;

        public Builder() {
            $ = new RepositoryResponse();
        }

        public Builder(RepositoryResponse defaults) {
            $ = new RepositoryResponse(Objects.requireNonNull(defaults));
        }

        public Builder branch(@Nullable String branch) {
            $.branch = branch;
            return this;
        }

        public Builder deploymentLogsUrl(@Nullable String deploymentLogsUrl) {
            $.deploymentLogsUrl = deploymentLogsUrl;
            return this;
        }

        public Builder displayUrl(@Nullable String displayUrl) {
            $.displayUrl = displayUrl;
            return this;
        }

        public Builder pathMapping(@Nullable List<ContentPathMapResponse> pathMapping) {
            $.pathMapping = pathMapping;
            return this;
        }

        public Builder pathMapping(ContentPathMapResponse... pathMapping) {
            return pathMapping(List.of(pathMapping));
        }

        public Builder url(@Nullable String url) {
            $.url = url;
            return this;
        }

        public RepositoryResponse build() {
            return $;
        }
    }

}
