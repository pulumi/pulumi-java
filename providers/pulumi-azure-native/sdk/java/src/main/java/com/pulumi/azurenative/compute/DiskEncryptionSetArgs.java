// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.compute;

import com.pulumi.azurenative.compute.enums.DiskEncryptionSetType;
import com.pulumi.azurenative.compute.inputs.EncryptionSetIdentityArgs;
import com.pulumi.azurenative.compute.inputs.KeyForDiskEncryptionSetArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DiskEncryptionSetArgs extends com.pulumi.resources.ResourceArgs {

    public static final DiskEncryptionSetArgs Empty = new DiskEncryptionSetArgs();

    /**
     * The key vault key which is currently used by this disk encryption set.
     * 
     */
    @Import(name="activeKey")
    private @Nullable Output<KeyForDiskEncryptionSetArgs> activeKey;

    public Optional<Output<KeyForDiskEncryptionSetArgs>> activeKey() {
        return Optional.ofNullable(this.activeKey);
    }

    /**
     * The name of the disk encryption set that is being created. The name can&#39;t be changed after the disk encryption set is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * 
     */
    @Import(name="diskEncryptionSetName")
    private @Nullable Output<String> diskEncryptionSetName;

    public Optional<Output<String>> diskEncryptionSetName() {
        return Optional.ofNullable(this.diskEncryptionSetName);
    }

    /**
     * The type of key used to encrypt the data of the disk.
     * 
     */
    @Import(name="encryptionType")
    private @Nullable Output<Either<String,DiskEncryptionSetType>> encryptionType;

    public Optional<Output<Either<String,DiskEncryptionSetType>>> encryptionType() {
        return Optional.ofNullable(this.encryptionType);
    }

    /**
     * The managed identity for the disk encryption set. It should be given permission on the key vault before it can be used to encrypt disks.
     * 
     */
    @Import(name="identity")
    private @Nullable Output<EncryptionSetIdentityArgs> identity;

    public Optional<Output<EncryptionSetIdentityArgs>> identity() {
        return Optional.ofNullable(this.identity);
    }

    /**
     * Resource location
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Set this flag to true to enable auto-updating of this disk encryption set to the latest key version.
     * 
     */
    @Import(name="rotationToLatestKeyVersionEnabled")
    private @Nullable Output<Boolean> rotationToLatestKeyVersionEnabled;

    public Optional<Output<Boolean>> rotationToLatestKeyVersionEnabled() {
        return Optional.ofNullable(this.rotationToLatestKeyVersionEnabled);
    }

    /**
     * Resource tags
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private DiskEncryptionSetArgs() {}

    private DiskEncryptionSetArgs(DiskEncryptionSetArgs $) {
        this.activeKey = $.activeKey;
        this.diskEncryptionSetName = $.diskEncryptionSetName;
        this.encryptionType = $.encryptionType;
        this.identity = $.identity;
        this.location = $.location;
        this.resourceGroupName = $.resourceGroupName;
        this.rotationToLatestKeyVersionEnabled = $.rotationToLatestKeyVersionEnabled;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DiskEncryptionSetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DiskEncryptionSetArgs $;

        public Builder() {
            $ = new DiskEncryptionSetArgs();
        }

        public Builder(DiskEncryptionSetArgs defaults) {
            $ = new DiskEncryptionSetArgs(Objects.requireNonNull(defaults));
        }

        public Builder activeKey(@Nullable Output<KeyForDiskEncryptionSetArgs> activeKey) {
            $.activeKey = activeKey;
            return this;
        }

        public Builder activeKey(KeyForDiskEncryptionSetArgs activeKey) {
            return activeKey(Output.of(activeKey));
        }

        public Builder diskEncryptionSetName(@Nullable Output<String> diskEncryptionSetName) {
            $.diskEncryptionSetName = diskEncryptionSetName;
            return this;
        }

        public Builder diskEncryptionSetName(String diskEncryptionSetName) {
            return diskEncryptionSetName(Output.of(diskEncryptionSetName));
        }

        public Builder encryptionType(@Nullable Output<Either<String,DiskEncryptionSetType>> encryptionType) {
            $.encryptionType = encryptionType;
            return this;
        }

        public Builder encryptionType(Either<String,DiskEncryptionSetType> encryptionType) {
            return encryptionType(Output.of(encryptionType));
        }

        public Builder encryptionType(String encryptionType) {
            return encryptionType(Either.ofLeft(encryptionType));
        }

        public Builder encryptionType(DiskEncryptionSetType encryptionType) {
            return encryptionType(Either.ofRight(encryptionType));
        }

        public Builder identity(@Nullable Output<EncryptionSetIdentityArgs> identity) {
            $.identity = identity;
            return this;
        }

        public Builder identity(EncryptionSetIdentityArgs identity) {
            return identity(Output.of(identity));
        }

        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        public Builder location(String location) {
            return location(Output.of(location));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder rotationToLatestKeyVersionEnabled(@Nullable Output<Boolean> rotationToLatestKeyVersionEnabled) {
            $.rotationToLatestKeyVersionEnabled = rotationToLatestKeyVersionEnabled;
            return this;
        }

        public Builder rotationToLatestKeyVersionEnabled(Boolean rotationToLatestKeyVersionEnabled) {
            return rotationToLatestKeyVersionEnabled(Output.of(rotationToLatestKeyVersionEnabled));
        }

        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        public DiskEncryptionSetArgs build() {
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            return $;
        }
    }

}
