// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datamigration.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Information for connecting to MySQL server
 * 
 */
public final class MySqlConnectionInfoResponse extends com.pulumi.resources.InvokeArgs {

    public static final MySqlConnectionInfoResponse Empty = new MySqlConnectionInfoResponse();

    /**
     * Password credential.
     * 
     */
    @Import(name="password")
    private @Nullable String password;

    public Optional<String> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * Port for Server
     * 
     */
    @Import(name="port", required=true)
    private Integer port;

    public Integer port() {
        return this.port;
    }

    /**
     * Name of the server
     * 
     */
    @Import(name="serverName", required=true)
    private String serverName;

    public String serverName() {
        return this.serverName;
    }

    /**
     * Type of connection info
     * Expected value is &#39;MySqlConnectionInfo&#39;.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    public String type() {
        return this.type;
    }

    /**
     * User name
     * 
     */
    @Import(name="userName")
    private @Nullable String userName;

    public Optional<String> userName() {
        return Optional.ofNullable(this.userName);
    }

    private MySqlConnectionInfoResponse() {}

    private MySqlConnectionInfoResponse(MySqlConnectionInfoResponse $) {
        this.password = $.password;
        this.port = $.port;
        this.serverName = $.serverName;
        this.type = $.type;
        this.userName = $.userName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MySqlConnectionInfoResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MySqlConnectionInfoResponse $;

        public Builder() {
            $ = new MySqlConnectionInfoResponse();
        }

        public Builder(MySqlConnectionInfoResponse defaults) {
            $ = new MySqlConnectionInfoResponse(Objects.requireNonNull(defaults));
        }

        public Builder password(@Nullable String password) {
            $.password = password;
            return this;
        }

        public Builder port(Integer port) {
            $.port = port;
            return this;
        }

        public Builder serverName(String serverName) {
            $.serverName = serverName;
            return this;
        }

        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public Builder userName(@Nullable String userName) {
            $.userName = userName;
            return this;
        }

        public MySqlConnectionInfoResponse build() {
            $.port = Objects.requireNonNull($.port, "expected parameter 'port' to be non-null");
            $.serverName = Objects.requireNonNull($.serverName, "expected parameter 'serverName' to be non-null");
            $.type = Codegen.stringProp("type").arg($.type).require();
            return $;
        }
    }

}
