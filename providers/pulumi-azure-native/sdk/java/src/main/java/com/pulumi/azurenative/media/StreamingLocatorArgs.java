// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.media;

import com.pulumi.azurenative.media.inputs.StreamingLocatorContentKeyArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StreamingLocatorArgs extends com.pulumi.resources.ResourceArgs {

    public static final StreamingLocatorArgs Empty = new StreamingLocatorArgs();

    /**
     * The Media Services account name.
     * 
     */
    @Import(name="accountName", required=true)
    private Output<String> accountName;

    public Output<String> accountName() {
        return this.accountName;
    }

    /**
     * Alternative Media ID of this Streaming Locator
     * 
     */
    @Import(name="alternativeMediaId")
    private @Nullable Output<String> alternativeMediaId;

    public Optional<Output<String>> alternativeMediaId() {
        return Optional.ofNullable(this.alternativeMediaId);
    }

    /**
     * Asset Name
     * 
     */
    @Import(name="assetName", required=true)
    private Output<String> assetName;

    public Output<String> assetName() {
        return this.assetName;
    }

    /**
     * The ContentKeys used by this Streaming Locator.
     * 
     */
    @Import(name="contentKeys")
    private @Nullable Output<List<StreamingLocatorContentKeyArgs>> contentKeys;

    public Optional<Output<List<StreamingLocatorContentKeyArgs>>> contentKeys() {
        return Optional.ofNullable(this.contentKeys);
    }

    /**
     * Name of the default ContentKeyPolicy used by this Streaming Locator.
     * 
     */
    @Import(name="defaultContentKeyPolicyName")
    private @Nullable Output<String> defaultContentKeyPolicyName;

    public Optional<Output<String>> defaultContentKeyPolicyName() {
        return Optional.ofNullable(this.defaultContentKeyPolicyName);
    }

    /**
     * The end time of the Streaming Locator.
     * 
     */
    @Import(name="endTime")
    private @Nullable Output<String> endTime;

    public Optional<Output<String>> endTime() {
        return Optional.ofNullable(this.endTime);
    }

    /**
     * A list of asset or account filters which apply to this streaming locator
     * 
     */
    @Import(name="filters")
    private @Nullable Output<List<String>> filters;

    public Optional<Output<List<String>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * The name of the resource group within the Azure subscription.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The start time of the Streaming Locator.
     * 
     */
    @Import(name="startTime")
    private @Nullable Output<String> startTime;

    public Optional<Output<String>> startTime() {
        return Optional.ofNullable(this.startTime);
    }

    /**
     * The StreamingLocatorId of the Streaming Locator.
     * 
     */
    @Import(name="streamingLocatorId")
    private @Nullable Output<String> streamingLocatorId;

    public Optional<Output<String>> streamingLocatorId() {
        return Optional.ofNullable(this.streamingLocatorId);
    }

    /**
     * The Streaming Locator name.
     * 
     */
    @Import(name="streamingLocatorName")
    private @Nullable Output<String> streamingLocatorName;

    public Optional<Output<String>> streamingLocatorName() {
        return Optional.ofNullable(this.streamingLocatorName);
    }

    /**
     * Name of the Streaming Policy used by this Streaming Locator. Either specify the name of Streaming Policy you created or use one of the predefined Streaming Policies. The predefined Streaming Policies available are: &#39;Predefined_DownloadOnly&#39;, &#39;Predefined_ClearStreamingOnly&#39;, &#39;Predefined_DownloadAndClearStreaming&#39;, &#39;Predefined_ClearKey&#39;, &#39;Predefined_MultiDrmCencStreaming&#39; and &#39;Predefined_MultiDrmStreaming&#39;
     * 
     */
    @Import(name="streamingPolicyName", required=true)
    private Output<String> streamingPolicyName;

    public Output<String> streamingPolicyName() {
        return this.streamingPolicyName;
    }

    private StreamingLocatorArgs() {}

    private StreamingLocatorArgs(StreamingLocatorArgs $) {
        this.accountName = $.accountName;
        this.alternativeMediaId = $.alternativeMediaId;
        this.assetName = $.assetName;
        this.contentKeys = $.contentKeys;
        this.defaultContentKeyPolicyName = $.defaultContentKeyPolicyName;
        this.endTime = $.endTime;
        this.filters = $.filters;
        this.resourceGroupName = $.resourceGroupName;
        this.startTime = $.startTime;
        this.streamingLocatorId = $.streamingLocatorId;
        this.streamingLocatorName = $.streamingLocatorName;
        this.streamingPolicyName = $.streamingPolicyName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StreamingLocatorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StreamingLocatorArgs $;

        public Builder() {
            $ = new StreamingLocatorArgs();
        }

        public Builder(StreamingLocatorArgs defaults) {
            $ = new StreamingLocatorArgs(Objects.requireNonNull(defaults));
        }

        public Builder accountName(Output<String> accountName) {
            $.accountName = accountName;
            return this;
        }

        public Builder accountName(String accountName) {
            return accountName(Output.of(accountName));
        }

        public Builder alternativeMediaId(@Nullable Output<String> alternativeMediaId) {
            $.alternativeMediaId = alternativeMediaId;
            return this;
        }

        public Builder alternativeMediaId(String alternativeMediaId) {
            return alternativeMediaId(Output.of(alternativeMediaId));
        }

        public Builder assetName(Output<String> assetName) {
            $.assetName = assetName;
            return this;
        }

        public Builder assetName(String assetName) {
            return assetName(Output.of(assetName));
        }

        public Builder contentKeys(@Nullable Output<List<StreamingLocatorContentKeyArgs>> contentKeys) {
            $.contentKeys = contentKeys;
            return this;
        }

        public Builder contentKeys(List<StreamingLocatorContentKeyArgs> contentKeys) {
            return contentKeys(Output.of(contentKeys));
        }

        public Builder contentKeys(StreamingLocatorContentKeyArgs... contentKeys) {
            return contentKeys(List.of(contentKeys));
        }

        public Builder defaultContentKeyPolicyName(@Nullable Output<String> defaultContentKeyPolicyName) {
            $.defaultContentKeyPolicyName = defaultContentKeyPolicyName;
            return this;
        }

        public Builder defaultContentKeyPolicyName(String defaultContentKeyPolicyName) {
            return defaultContentKeyPolicyName(Output.of(defaultContentKeyPolicyName));
        }

        public Builder endTime(@Nullable Output<String> endTime) {
            $.endTime = endTime;
            return this;
        }

        public Builder endTime(String endTime) {
            return endTime(Output.of(endTime));
        }

        public Builder filters(@Nullable Output<List<String>> filters) {
            $.filters = filters;
            return this;
        }

        public Builder filters(List<String> filters) {
            return filters(Output.of(filters));
        }

        public Builder filters(String... filters) {
            return filters(List.of(filters));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder startTime(@Nullable Output<String> startTime) {
            $.startTime = startTime;
            return this;
        }

        public Builder startTime(String startTime) {
            return startTime(Output.of(startTime));
        }

        public Builder streamingLocatorId(@Nullable Output<String> streamingLocatorId) {
            $.streamingLocatorId = streamingLocatorId;
            return this;
        }

        public Builder streamingLocatorId(String streamingLocatorId) {
            return streamingLocatorId(Output.of(streamingLocatorId));
        }

        public Builder streamingLocatorName(@Nullable Output<String> streamingLocatorName) {
            $.streamingLocatorName = streamingLocatorName;
            return this;
        }

        public Builder streamingLocatorName(String streamingLocatorName) {
            return streamingLocatorName(Output.of(streamingLocatorName));
        }

        public Builder streamingPolicyName(Output<String> streamingPolicyName) {
            $.streamingPolicyName = streamingPolicyName;
            return this;
        }

        public Builder streamingPolicyName(String streamingPolicyName) {
            return streamingPolicyName(Output.of(streamingPolicyName));
        }

        public StreamingLocatorArgs build() {
            $.accountName = Objects.requireNonNull($.accountName, "expected parameter 'accountName' to be non-null");
            $.assetName = Objects.requireNonNull($.assetName, "expected parameter 'assetName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.streamingPolicyName = Objects.requireNonNull($.streamingPolicyName, "expected parameter 'streamingPolicyName' to be non-null");
            return $;
        }
    }

}
