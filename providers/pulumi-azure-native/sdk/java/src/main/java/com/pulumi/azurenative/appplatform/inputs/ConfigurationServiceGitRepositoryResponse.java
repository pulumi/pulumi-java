// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.appplatform.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Git repository property payload for Application Configuration Service
 * 
 */
public final class ConfigurationServiceGitRepositoryResponse extends com.pulumi.resources.InvokeArgs {

    public static final ConfigurationServiceGitRepositoryResponse Empty = new ConfigurationServiceGitRepositoryResponse();

    /**
     * Public sshKey of git repository.
     * 
     */
    @Import(name="hostKey")
    private @Nullable String hostKey;

    /**
     * @return Public sshKey of git repository.
     * 
     */
    public Optional<String> hostKey() {
        return Optional.ofNullable(this.hostKey);
    }

    /**
     * SshKey algorithm of git repository.
     * 
     */
    @Import(name="hostKeyAlgorithm")
    private @Nullable String hostKeyAlgorithm;

    /**
     * @return SshKey algorithm of git repository.
     * 
     */
    public Optional<String> hostKeyAlgorithm() {
        return Optional.ofNullable(this.hostKeyAlgorithm);
    }

    /**
     * Label of the repository
     * 
     */
    @Import(name="label", required=true)
    private String label;

    /**
     * @return Label of the repository
     * 
     */
    public String label() {
        return this.label;
    }

    /**
     * Name of the repository
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return Name of the repository
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * Password of git repository basic auth.
     * 
     */
    @Import(name="password")
    private @Nullable String password;

    /**
     * @return Password of git repository basic auth.
     * 
     */
    public Optional<String> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * Collection of patterns of the repository
     * 
     */
    @Import(name="patterns", required=true)
    private List<String> patterns;

    /**
     * @return Collection of patterns of the repository
     * 
     */
    public List<String> patterns() {
        return this.patterns;
    }

    /**
     * Private sshKey algorithm of git repository.
     * 
     */
    @Import(name="privateKey")
    private @Nullable String privateKey;

    /**
     * @return Private sshKey algorithm of git repository.
     * 
     */
    public Optional<String> privateKey() {
        return Optional.ofNullable(this.privateKey);
    }

    /**
     * Searching path of the repository
     * 
     */
    @Import(name="searchPaths")
    private @Nullable List<String> searchPaths;

    /**
     * @return Searching path of the repository
     * 
     */
    public Optional<List<String>> searchPaths() {
        return Optional.ofNullable(this.searchPaths);
    }

    /**
     * Strict host key checking or not.
     * 
     */
    @Import(name="strictHostKeyChecking")
    private @Nullable Boolean strictHostKeyChecking;

    /**
     * @return Strict host key checking or not.
     * 
     */
    public Optional<Boolean> strictHostKeyChecking() {
        return Optional.ofNullable(this.strictHostKeyChecking);
    }

    /**
     * URI of the repository
     * 
     */
    @Import(name="uri", required=true)
    private String uri;

    /**
     * @return URI of the repository
     * 
     */
    public String uri() {
        return this.uri;
    }

    /**
     * Username of git repository basic auth.
     * 
     */
    @Import(name="username")
    private @Nullable String username;

    /**
     * @return Username of git repository basic auth.
     * 
     */
    public Optional<String> username() {
        return Optional.ofNullable(this.username);
    }

    private ConfigurationServiceGitRepositoryResponse() {}

    private ConfigurationServiceGitRepositoryResponse(ConfigurationServiceGitRepositoryResponse $) {
        this.hostKey = $.hostKey;
        this.hostKeyAlgorithm = $.hostKeyAlgorithm;
        this.label = $.label;
        this.name = $.name;
        this.password = $.password;
        this.patterns = $.patterns;
        this.privateKey = $.privateKey;
        this.searchPaths = $.searchPaths;
        this.strictHostKeyChecking = $.strictHostKeyChecking;
        this.uri = $.uri;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConfigurationServiceGitRepositoryResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConfigurationServiceGitRepositoryResponse $;

        public Builder() {
            $ = new ConfigurationServiceGitRepositoryResponse();
        }

        public Builder(ConfigurationServiceGitRepositoryResponse defaults) {
            $ = new ConfigurationServiceGitRepositoryResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param hostKey Public sshKey of git repository.
         * 
         * @return builder
         * 
         */
        public Builder hostKey(@Nullable String hostKey) {
            $.hostKey = hostKey;
            return this;
        }

        /**
         * @param hostKeyAlgorithm SshKey algorithm of git repository.
         * 
         * @return builder
         * 
         */
        public Builder hostKeyAlgorithm(@Nullable String hostKeyAlgorithm) {
            $.hostKeyAlgorithm = hostKeyAlgorithm;
            return this;
        }

        /**
         * @param label Label of the repository
         * 
         * @return builder
         * 
         */
        public Builder label(String label) {
            $.label = label;
            return this;
        }

        /**
         * @param name Name of the repository
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param password Password of git repository basic auth.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable String password) {
            $.password = password;
            return this;
        }

        /**
         * @param patterns Collection of patterns of the repository
         * 
         * @return builder
         * 
         */
        public Builder patterns(List<String> patterns) {
            $.patterns = patterns;
            return this;
        }

        /**
         * @param patterns Collection of patterns of the repository
         * 
         * @return builder
         * 
         */
        public Builder patterns(String... patterns) {
            return patterns(List.of(patterns));
        }

        /**
         * @param privateKey Private sshKey algorithm of git repository.
         * 
         * @return builder
         * 
         */
        public Builder privateKey(@Nullable String privateKey) {
            $.privateKey = privateKey;
            return this;
        }

        /**
         * @param searchPaths Searching path of the repository
         * 
         * @return builder
         * 
         */
        public Builder searchPaths(@Nullable List<String> searchPaths) {
            $.searchPaths = searchPaths;
            return this;
        }

        /**
         * @param searchPaths Searching path of the repository
         * 
         * @return builder
         * 
         */
        public Builder searchPaths(String... searchPaths) {
            return searchPaths(List.of(searchPaths));
        }

        /**
         * @param strictHostKeyChecking Strict host key checking or not.
         * 
         * @return builder
         * 
         */
        public Builder strictHostKeyChecking(@Nullable Boolean strictHostKeyChecking) {
            $.strictHostKeyChecking = strictHostKeyChecking;
            return this;
        }

        /**
         * @param uri URI of the repository
         * 
         * @return builder
         * 
         */
        public Builder uri(String uri) {
            $.uri = uri;
            return this;
        }

        /**
         * @param username Username of git repository basic auth.
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable String username) {
            $.username = username;
            return this;
        }

        public ConfigurationServiceGitRepositoryResponse build() {
            $.label = Objects.requireNonNull($.label, "expected parameter 'label' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.patterns = Objects.requireNonNull($.patterns, "expected parameter 'patterns' to be non-null");
            $.uri = Objects.requireNonNull($.uri, "expected parameter 'uri' to be non-null");
            return $;
        }
    }

}
