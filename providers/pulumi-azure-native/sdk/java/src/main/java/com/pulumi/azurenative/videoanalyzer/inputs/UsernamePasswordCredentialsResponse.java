// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.videoanalyzer.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;


/**
 * Username and password credentials.
 * 
 */
public final class UsernamePasswordCredentialsResponse extends com.pulumi.resources.InvokeArgs {

    public static final UsernamePasswordCredentialsResponse Empty = new UsernamePasswordCredentialsResponse();

    /**
     * Password to be presented as part of the credentials. It is recommended that this value is parameterized as a secret string in order to prevent this value to be returned as part of the resource on API requests.
     * 
     */
    @Import(name="password", required=true)
    private String password;

    /**
     * @return Password to be presented as part of the credentials. It is recommended that this value is parameterized as a secret string in order to prevent this value to be returned as part of the resource on API requests.
     * 
     */
    public String password() {
        return this.password;
    }

    /**
     * The discriminator for derived types.
     * Expected value is &#39;#Microsoft.VideoAnalyzer.UsernamePasswordCredentials&#39;.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    /**
     * @return The discriminator for derived types.
     * Expected value is &#39;#Microsoft.VideoAnalyzer.UsernamePasswordCredentials&#39;.
     * 
     */
    public String type() {
        return this.type;
    }

    /**
     * Username to be presented as part of the credentials.
     * 
     */
    @Import(name="username", required=true)
    private String username;

    /**
     * @return Username to be presented as part of the credentials.
     * 
     */
    public String username() {
        return this.username;
    }

    private UsernamePasswordCredentialsResponse() {}

    private UsernamePasswordCredentialsResponse(UsernamePasswordCredentialsResponse $) {
        this.password = $.password;
        this.type = $.type;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UsernamePasswordCredentialsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UsernamePasswordCredentialsResponse $;

        public Builder() {
            $ = new UsernamePasswordCredentialsResponse();
        }

        public Builder(UsernamePasswordCredentialsResponse defaults) {
            $ = new UsernamePasswordCredentialsResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param password Password to be presented as part of the credentials. It is recommended that this value is parameterized as a secret string in order to prevent this value to be returned as part of the resource on API requests.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            $.password = password;
            return this;
        }

        /**
         * @param type The discriminator for derived types.
         * Expected value is &#39;#Microsoft.VideoAnalyzer.UsernamePasswordCredentials&#39;.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            $.type = type;
            return this;
        }

        /**
         * @param username Username to be presented as part of the credentials.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            $.username = username;
            return this;
        }

        public UsernamePasswordCredentialsResponse build() {
            $.password = Objects.requireNonNull($.password, "expected parameter 'password' to be non-null");
            $.type = Codegen.stringProp("type").arg($.type).require();
            $.username = Objects.requireNonNull($.username, "expected parameter 'username' to be non-null");
            return $;
        }
    }

}
