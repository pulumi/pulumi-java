// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.servicefabricmesh.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Describes a reference to a volume resource.
 * 
 */
public final class VolumeReferenceArgs extends com.pulumi.resources.ResourceArgs {

    public static final VolumeReferenceArgs Empty = new VolumeReferenceArgs();

    /**
     * The path within the container at which the volume should be mounted. Only valid path characters are allowed.
     * 
     */
    @Import(name="destinationPath", required=true)
    private Output<String> destinationPath;

    /**
     * @return The path within the container at which the volume should be mounted. Only valid path characters are allowed.
     * 
     */
    public Output<String> destinationPath() {
        return this.destinationPath;
    }

    /**
     * Name of the volume being referenced.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Name of the volume being referenced.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The flag indicating whether the volume is read only. Default is &#39;false&#39;.
     * 
     */
    @Import(name="readOnly")
    private @Nullable Output<Boolean> readOnly;

    /**
     * @return The flag indicating whether the volume is read only. Default is &#39;false&#39;.
     * 
     */
    public Optional<Output<Boolean>> readOnly() {
        return Optional.ofNullable(this.readOnly);
    }

    private VolumeReferenceArgs() {}

    private VolumeReferenceArgs(VolumeReferenceArgs $) {
        this.destinationPath = $.destinationPath;
        this.name = $.name;
        this.readOnly = $.readOnly;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VolumeReferenceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VolumeReferenceArgs $;

        public Builder() {
            $ = new VolumeReferenceArgs();
        }

        public Builder(VolumeReferenceArgs defaults) {
            $ = new VolumeReferenceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param destinationPath The path within the container at which the volume should be mounted. Only valid path characters are allowed.
         * 
         * @return builder
         * 
         */
        public Builder destinationPath(Output<String> destinationPath) {
            $.destinationPath = destinationPath;
            return this;
        }

        /**
         * @param destinationPath The path within the container at which the volume should be mounted. Only valid path characters are allowed.
         * 
         * @return builder
         * 
         */
        public Builder destinationPath(String destinationPath) {
            return destinationPath(Output.of(destinationPath));
        }

        /**
         * @param name Name of the volume being referenced.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the volume being referenced.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param readOnly The flag indicating whether the volume is read only. Default is &#39;false&#39;.
         * 
         * @return builder
         * 
         */
        public Builder readOnly(@Nullable Output<Boolean> readOnly) {
            $.readOnly = readOnly;
            return this;
        }

        /**
         * @param readOnly The flag indicating whether the volume is read only. Default is &#39;false&#39;.
         * 
         * @return builder
         * 
         */
        public Builder readOnly(Boolean readOnly) {
            return readOnly(Output.of(readOnly));
        }

        public VolumeReferenceArgs build() {
            $.destinationPath = Objects.requireNonNull($.destinationPath, "expected parameter 'destinationPath' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            return $;
        }
    }

}
