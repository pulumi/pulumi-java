// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.operationsmanagement.inputs;

import com.pulumi.azurenative.operationsmanagement.inputs.ArmTemplateParameterArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * ManagementConfiguration properties supported by the OperationsManagement resource provider.
 * 
 */
public final class ManagementConfigurationPropertiesArgs extends com.pulumi.resources.ResourceArgs {

    public static final ManagementConfigurationPropertiesArgs Empty = new ManagementConfigurationPropertiesArgs();

    /**
     * The applicationId of the appliance for this Management.
     * 
     */
    @Import(name="applicationId")
      private final @Nullable Output<String> applicationId;

    public Output<String> applicationId() {
        return this.applicationId == null ? Codegen.empty() : this.applicationId;
    }

    /**
     * Parameters to run the ARM template
     * 
     */
    @Import(name="parameters", required=true)
      private final Output<List<ArmTemplateParameterArgs>> parameters;

    public Output<List<ArmTemplateParameterArgs>> parameters() {
        return this.parameters;
    }

    /**
     * The type of the parent resource.
     * 
     */
    @Import(name="parentResourceType", required=true)
      private final Output<String> parentResourceType;

    public Output<String> parentResourceType() {
        return this.parentResourceType;
    }

    /**
     * The Json object containing the ARM template to deploy
     * 
     */
    @Import(name="template", required=true)
      private final Output<Object> template;

    public Output<Object> template() {
        return this.template;
    }

    public ManagementConfigurationPropertiesArgs(
        @Nullable Output<String> applicationId,
        Output<List<ArmTemplateParameterArgs>> parameters,
        Output<String> parentResourceType,
        Output<Object> template) {
        this.applicationId = applicationId;
        this.parameters = Objects.requireNonNull(parameters, "expected parameter 'parameters' to be non-null");
        this.parentResourceType = Objects.requireNonNull(parentResourceType, "expected parameter 'parentResourceType' to be non-null");
        this.template = Objects.requireNonNull(template, "expected parameter 'template' to be non-null");
    }

    private ManagementConfigurationPropertiesArgs() {
        this.applicationId = Codegen.empty();
        this.parameters = Codegen.empty();
        this.parentResourceType = Codegen.empty();
        this.template = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ManagementConfigurationPropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> applicationId;
        private Output<List<ArmTemplateParameterArgs>> parameters;
        private Output<String> parentResourceType;
        private Output<Object> template;

        public Builder() {
    	      // Empty
        }

        public Builder(ManagementConfigurationPropertiesArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicationId = defaults.applicationId;
    	      this.parameters = defaults.parameters;
    	      this.parentResourceType = defaults.parentResourceType;
    	      this.template = defaults.template;
        }

        public Builder applicationId(@Nullable Output<String> applicationId) {
            this.applicationId = applicationId;
            return this;
        }
        public Builder applicationId(@Nullable String applicationId) {
            this.applicationId = Codegen.ofNullable(applicationId);
            return this;
        }
        public Builder parameters(Output<List<ArmTemplateParameterArgs>> parameters) {
            this.parameters = Objects.requireNonNull(parameters);
            return this;
        }
        public Builder parameters(List<ArmTemplateParameterArgs> parameters) {
            this.parameters = Output.of(Objects.requireNonNull(parameters));
            return this;
        }
        public Builder parameters(ArmTemplateParameterArgs... parameters) {
            return parameters(List.of(parameters));
        }
        public Builder parentResourceType(Output<String> parentResourceType) {
            this.parentResourceType = Objects.requireNonNull(parentResourceType);
            return this;
        }
        public Builder parentResourceType(String parentResourceType) {
            this.parentResourceType = Output.of(Objects.requireNonNull(parentResourceType));
            return this;
        }
        public Builder template(Output<Object> template) {
            this.template = Objects.requireNonNull(template);
            return this;
        }
        public Builder template(Object template) {
            this.template = Output.of(Objects.requireNonNull(template));
            return this;
        }        public ManagementConfigurationPropertiesArgs build() {
            return new ManagementConfigurationPropertiesArgs(applicationId, parameters, parentResourceType, template);
        }
    }
}
