// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Backend address of a frontDoor load balancer.
 * 
 */
public final class BackendResponse extends com.pulumi.resources.InvokeArgs {

    public static final BackendResponse Empty = new BackendResponse();

    /**
     * Location of the backend (IP address or FQDN)
     * 
     */
    @Import(name="address")
    private @Nullable String address;

    public Optional<String> address() {
        return Optional.ofNullable(this.address);
    }

    /**
     * The value to use as the host header sent to the backend. If blank or unspecified, this defaults to the incoming host.
     * 
     */
    @Import(name="backendHostHeader")
    private @Nullable String backendHostHeader;

    public Optional<String> backendHostHeader() {
        return Optional.ofNullable(this.backendHostHeader);
    }

    /**
     * Whether to enable use of this backend. Permitted values are &#39;Enabled&#39; or &#39;Disabled&#39;
     * 
     */
    @Import(name="enabledState")
    private @Nullable String enabledState;

    public Optional<String> enabledState() {
        return Optional.ofNullable(this.enabledState);
    }

    /**
     * The HTTP TCP port number. Must be between 1 and 65535.
     * 
     */
    @Import(name="httpPort")
    private @Nullable Integer httpPort;

    public Optional<Integer> httpPort() {
        return Optional.ofNullable(this.httpPort);
    }

    /**
     * The HTTPS TCP port number. Must be between 1 and 65535.
     * 
     */
    @Import(name="httpsPort")
    private @Nullable Integer httpsPort;

    public Optional<Integer> httpsPort() {
        return Optional.ofNullable(this.httpsPort);
    }

    /**
     * Priority to use for load balancing. Higher priorities will not be used for load balancing if any lower priority backend is healthy.
     * 
     */
    @Import(name="priority")
    private @Nullable Integer priority;

    public Optional<Integer> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * The Approval status for the connection to the Private Link
     * 
     */
    @Import(name="privateEndpointStatus", required=true)
    private String privateEndpointStatus;

    public String privateEndpointStatus() {
        return this.privateEndpointStatus;
    }

    /**
     * The Alias of the Private Link resource. Populating this optional field indicates that this backend is &#39;Private&#39;
     * 
     */
    @Import(name="privateLinkAlias")
    private @Nullable String privateLinkAlias;

    public Optional<String> privateLinkAlias() {
        return Optional.ofNullable(this.privateLinkAlias);
    }

    /**
     * A custom message to be included in the approval request to connect to the Private Link
     * 
     */
    @Import(name="privateLinkApprovalMessage")
    private @Nullable String privateLinkApprovalMessage;

    public Optional<String> privateLinkApprovalMessage() {
        return Optional.ofNullable(this.privateLinkApprovalMessage);
    }

    /**
     * The location of the Private Link resource. Required only if &#39;privateLinkResourceId&#39; is populated
     * 
     */
    @Import(name="privateLinkLocation")
    private @Nullable String privateLinkLocation;

    public Optional<String> privateLinkLocation() {
        return Optional.ofNullable(this.privateLinkLocation);
    }

    /**
     * The Resource Id of the Private Link resource. Populating this optional field indicates that this backend is &#39;Private&#39;
     * 
     */
    @Import(name="privateLinkResourceId")
    private @Nullable String privateLinkResourceId;

    public Optional<String> privateLinkResourceId() {
        return Optional.ofNullable(this.privateLinkResourceId);
    }

    /**
     * Weight of this endpoint for load balancing purposes.
     * 
     */
    @Import(name="weight")
    private @Nullable Integer weight;

    public Optional<Integer> weight() {
        return Optional.ofNullable(this.weight);
    }

    private BackendResponse() {}

    private BackendResponse(BackendResponse $) {
        this.address = $.address;
        this.backendHostHeader = $.backendHostHeader;
        this.enabledState = $.enabledState;
        this.httpPort = $.httpPort;
        this.httpsPort = $.httpsPort;
        this.priority = $.priority;
        this.privateEndpointStatus = $.privateEndpointStatus;
        this.privateLinkAlias = $.privateLinkAlias;
        this.privateLinkApprovalMessage = $.privateLinkApprovalMessage;
        this.privateLinkLocation = $.privateLinkLocation;
        this.privateLinkResourceId = $.privateLinkResourceId;
        this.weight = $.weight;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BackendResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BackendResponse $;

        public Builder() {
            $ = new BackendResponse();
        }

        public Builder(BackendResponse defaults) {
            $ = new BackendResponse(Objects.requireNonNull(defaults));
        }

        public Builder address(@Nullable String address) {
            $.address = address;
            return this;
        }

        public Builder backendHostHeader(@Nullable String backendHostHeader) {
            $.backendHostHeader = backendHostHeader;
            return this;
        }

        public Builder enabledState(@Nullable String enabledState) {
            $.enabledState = enabledState;
            return this;
        }

        public Builder httpPort(@Nullable Integer httpPort) {
            $.httpPort = httpPort;
            return this;
        }

        public Builder httpsPort(@Nullable Integer httpsPort) {
            $.httpsPort = httpsPort;
            return this;
        }

        public Builder priority(@Nullable Integer priority) {
            $.priority = priority;
            return this;
        }

        public Builder privateEndpointStatus(String privateEndpointStatus) {
            $.privateEndpointStatus = privateEndpointStatus;
            return this;
        }

        public Builder privateLinkAlias(@Nullable String privateLinkAlias) {
            $.privateLinkAlias = privateLinkAlias;
            return this;
        }

        public Builder privateLinkApprovalMessage(@Nullable String privateLinkApprovalMessage) {
            $.privateLinkApprovalMessage = privateLinkApprovalMessage;
            return this;
        }

        public Builder privateLinkLocation(@Nullable String privateLinkLocation) {
            $.privateLinkLocation = privateLinkLocation;
            return this;
        }

        public Builder privateLinkResourceId(@Nullable String privateLinkResourceId) {
            $.privateLinkResourceId = privateLinkResourceId;
            return this;
        }

        public Builder weight(@Nullable Integer weight) {
            $.weight = weight;
            return this;
        }

        public BackendResponse build() {
            $.privateEndpointStatus = Objects.requireNonNull($.privateEndpointStatus, "expected parameter 'privateEndpointStatus' to be non-null");
            return $;
        }
    }

}
