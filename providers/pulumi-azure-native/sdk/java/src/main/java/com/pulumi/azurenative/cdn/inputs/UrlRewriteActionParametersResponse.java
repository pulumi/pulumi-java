// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.cdn.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Defines the parameters for the url rewrite action.
 * 
 */
public final class UrlRewriteActionParametersResponse extends com.pulumi.resources.InvokeArgs {

    public static final UrlRewriteActionParametersResponse Empty = new UrlRewriteActionParametersResponse();

    /**
     * Define the relative URL to which the above requests will be rewritten by.
     * 
     */
    @Import(name="destination", required=true)
    private String destination;

    /**
     * @return Define the relative URL to which the above requests will be rewritten by.
     * 
     */
    public String destination() {
        return this.destination;
    }

    @Import(name="odataType", required=true)
    private String odataType;

    public String odataType() {
        return this.odataType;
    }

    /**
     * Whether to preserve unmatched path. Default value is true.
     * 
     */
    @Import(name="preserveUnmatchedPath")
    private @Nullable Boolean preserveUnmatchedPath;

    /**
     * @return Whether to preserve unmatched path. Default value is true.
     * 
     */
    public Optional<Boolean> preserveUnmatchedPath() {
        return Optional.ofNullable(this.preserveUnmatchedPath);
    }

    /**
     * define a request URI pattern that identifies the type of requests that may be rewritten. If value is blank, all strings are matched.
     * 
     */
    @Import(name="sourcePattern", required=true)
    private String sourcePattern;

    /**
     * @return define a request URI pattern that identifies the type of requests that may be rewritten. If value is blank, all strings are matched.
     * 
     */
    public String sourcePattern() {
        return this.sourcePattern;
    }

    private UrlRewriteActionParametersResponse() {}

    private UrlRewriteActionParametersResponse(UrlRewriteActionParametersResponse $) {
        this.destination = $.destination;
        this.odataType = $.odataType;
        this.preserveUnmatchedPath = $.preserveUnmatchedPath;
        this.sourcePattern = $.sourcePattern;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UrlRewriteActionParametersResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UrlRewriteActionParametersResponse $;

        public Builder() {
            $ = new UrlRewriteActionParametersResponse();
        }

        public Builder(UrlRewriteActionParametersResponse defaults) {
            $ = new UrlRewriteActionParametersResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param destination Define the relative URL to which the above requests will be rewritten by.
         * 
         * @return builder
         * 
         */
        public Builder destination(String destination) {
            $.destination = destination;
            return this;
        }

        public Builder odataType(String odataType) {
            $.odataType = odataType;
            return this;
        }

        /**
         * @param preserveUnmatchedPath Whether to preserve unmatched path. Default value is true.
         * 
         * @return builder
         * 
         */
        public Builder preserveUnmatchedPath(@Nullable Boolean preserveUnmatchedPath) {
            $.preserveUnmatchedPath = preserveUnmatchedPath;
            return this;
        }

        /**
         * @param sourcePattern define a request URI pattern that identifies the type of requests that may be rewritten. If value is blank, all strings are matched.
         * 
         * @return builder
         * 
         */
        public Builder sourcePattern(String sourcePattern) {
            $.sourcePattern = sourcePattern;
            return this;
        }

        public UrlRewriteActionParametersResponse build() {
            $.destination = Objects.requireNonNull($.destination, "expected parameter 'destination' to be non-null");
            $.odataType = Objects.requireNonNull($.odataType, "expected parameter 'odataType' to be non-null");
            $.sourcePattern = Objects.requireNonNull($.sourcePattern, "expected parameter 'sourcePattern' to be non-null");
            return $;
        }
    }

}
