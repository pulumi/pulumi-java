// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.servicefabricmesh.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A container event.
 * 
 */
public final class ContainerEventResponse extends com.pulumi.resources.InvokeArgs {

    public static final ContainerEventResponse Empty = new ContainerEventResponse();

    /**
     * The count of the event.
     * 
     */
    @Import(name="count")
    private @Nullable Integer count;

    /**
     * @return The count of the event.
     * 
     */
    public Optional<Integer> count() {
        return Optional.ofNullable(this.count);
    }

    /**
     * Date/time of the first event.
     * 
     */
    @Import(name="firstTimestamp")
    private @Nullable String firstTimestamp;

    /**
     * @return Date/time of the first event.
     * 
     */
    public Optional<String> firstTimestamp() {
        return Optional.ofNullable(this.firstTimestamp);
    }

    /**
     * Date/time of the last event.
     * 
     */
    @Import(name="lastTimestamp")
    private @Nullable String lastTimestamp;

    /**
     * @return Date/time of the last event.
     * 
     */
    public Optional<String> lastTimestamp() {
        return Optional.ofNullable(this.lastTimestamp);
    }

    /**
     * The event message
     * 
     */
    @Import(name="message")
    private @Nullable String message;

    /**
     * @return The event message
     * 
     */
    public Optional<String> message() {
        return Optional.ofNullable(this.message);
    }

    /**
     * The name of the container event.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return The name of the container event.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The event type.
     * 
     */
    @Import(name="type")
    private @Nullable String type;

    /**
     * @return The event type.
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    private ContainerEventResponse() {}

    private ContainerEventResponse(ContainerEventResponse $) {
        this.count = $.count;
        this.firstTimestamp = $.firstTimestamp;
        this.lastTimestamp = $.lastTimestamp;
        this.message = $.message;
        this.name = $.name;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContainerEventResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContainerEventResponse $;

        public Builder() {
            $ = new ContainerEventResponse();
        }

        public Builder(ContainerEventResponse defaults) {
            $ = new ContainerEventResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param count The count of the event.
         * 
         * @return builder
         * 
         */
        public Builder count(@Nullable Integer count) {
            $.count = count;
            return this;
        }

        /**
         * @param firstTimestamp Date/time of the first event.
         * 
         * @return builder
         * 
         */
        public Builder firstTimestamp(@Nullable String firstTimestamp) {
            $.firstTimestamp = firstTimestamp;
            return this;
        }

        /**
         * @param lastTimestamp Date/time of the last event.
         * 
         * @return builder
         * 
         */
        public Builder lastTimestamp(@Nullable String lastTimestamp) {
            $.lastTimestamp = lastTimestamp;
            return this;
        }

        /**
         * @param message The event message
         * 
         * @return builder
         * 
         */
        public Builder message(@Nullable String message) {
            $.message = message;
            return this;
        }

        /**
         * @param name The name of the container event.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param type The event type.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable String type) {
            $.type = type;
            return this;
        }

        public ContainerEventResponse build() {
            return $;
        }
    }

}
