// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.insights.inputs;

import com.pulumi.azurenative.insights.inputs.RecurrenceResponse;
import com.pulumi.azurenative.insights.inputs.ScaleCapacityResponse;
import com.pulumi.azurenative.insights.inputs.ScaleRuleResponse;
import com.pulumi.azurenative.insights.inputs.TimeWindowResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Autoscale profile.
 * 
 */
public final class AutoscaleProfileResponse extends com.pulumi.resources.InvokeArgs {

    public static final AutoscaleProfileResponse Empty = new AutoscaleProfileResponse();

    /**
     * the number of instances that can be used during this profile.
     * 
     */
    @Import(name="capacity", required=true)
    private ScaleCapacityResponse capacity;

    /**
     * @return the number of instances that can be used during this profile.
     * 
     */
    public ScaleCapacityResponse capacity() {
        return this.capacity;
    }

    /**
     * the specific date-time for the profile. This element is not used if the Recurrence element is used.
     * 
     */
    @Import(name="fixedDate")
    private @Nullable TimeWindowResponse fixedDate;

    /**
     * @return the specific date-time for the profile. This element is not used if the Recurrence element is used.
     * 
     */
    public Optional<TimeWindowResponse> fixedDate() {
        return Optional.ofNullable(this.fixedDate);
    }

    /**
     * the name of the profile.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return the name of the profile.
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * the repeating times at which this profile begins. This element is not used if the FixedDate element is used.
     * 
     */
    @Import(name="recurrence")
    private @Nullable RecurrenceResponse recurrence;

    /**
     * @return the repeating times at which this profile begins. This element is not used if the FixedDate element is used.
     * 
     */
    public Optional<RecurrenceResponse> recurrence() {
        return Optional.ofNullable(this.recurrence);
    }

    /**
     * the collection of rules that provide the triggers and parameters for the scaling action. A maximum of 10 rules can be specified.
     * 
     */
    @Import(name="rules", required=true)
    private List<ScaleRuleResponse> rules;

    /**
     * @return the collection of rules that provide the triggers and parameters for the scaling action. A maximum of 10 rules can be specified.
     * 
     */
    public List<ScaleRuleResponse> rules() {
        return this.rules;
    }

    private AutoscaleProfileResponse() {}

    private AutoscaleProfileResponse(AutoscaleProfileResponse $) {
        this.capacity = $.capacity;
        this.fixedDate = $.fixedDate;
        this.name = $.name;
        this.recurrence = $.recurrence;
        this.rules = $.rules;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AutoscaleProfileResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AutoscaleProfileResponse $;

        public Builder() {
            $ = new AutoscaleProfileResponse();
        }

        public Builder(AutoscaleProfileResponse defaults) {
            $ = new AutoscaleProfileResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param capacity the number of instances that can be used during this profile.
         * 
         * @return builder
         * 
         */
        public Builder capacity(ScaleCapacityResponse capacity) {
            $.capacity = capacity;
            return this;
        }

        /**
         * @param fixedDate the specific date-time for the profile. This element is not used if the Recurrence element is used.
         * 
         * @return builder
         * 
         */
        public Builder fixedDate(@Nullable TimeWindowResponse fixedDate) {
            $.fixedDate = fixedDate;
            return this;
        }

        /**
         * @param name the name of the profile.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param recurrence the repeating times at which this profile begins. This element is not used if the FixedDate element is used.
         * 
         * @return builder
         * 
         */
        public Builder recurrence(@Nullable RecurrenceResponse recurrence) {
            $.recurrence = recurrence;
            return this;
        }

        /**
         * @param rules the collection of rules that provide the triggers and parameters for the scaling action. A maximum of 10 rules can be specified.
         * 
         * @return builder
         * 
         */
        public Builder rules(List<ScaleRuleResponse> rules) {
            $.rules = rules;
            return this;
        }

        /**
         * @param rules the collection of rules that provide the triggers and parameters for the scaling action. A maximum of 10 rules can be specified.
         * 
         * @return builder
         * 
         */
        public Builder rules(ScaleRuleResponse... rules) {
            return rules(List.of(rules));
        }

        public AutoscaleProfileResponse build() {
            $.capacity = Objects.requireNonNull($.capacity, "expected parameter 'capacity' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.rules = Objects.requireNonNull($.rules, "expected parameter 'rules' to be non-null");
            return $;
        }
    }

}
