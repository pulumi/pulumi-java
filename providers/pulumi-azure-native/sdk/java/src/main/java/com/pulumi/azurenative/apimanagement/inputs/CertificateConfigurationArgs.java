// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.apimanagement.inputs;

import com.pulumi.azurenative.apimanagement.inputs.CertificateInformationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Certificate configuration which consist of non-trusted intermediates and root certificates.
 * 
 */
public final class CertificateConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final CertificateConfigurationArgs Empty = new CertificateConfigurationArgs();

    /**
     * Certificate information.
     * 
     */
    @Import(name="certificate")
    private @Nullable Output<CertificateInformationArgs> certificate;

    public Optional<Output<CertificateInformationArgs>> certificate() {
        return Optional.ofNullable(this.certificate);
    }

    /**
     * Certificate Password.
     * 
     */
    @Import(name="certificatePassword")
    private @Nullable Output<String> certificatePassword;

    public Optional<Output<String>> certificatePassword() {
        return Optional.ofNullable(this.certificatePassword);
    }

    /**
     * Base64 Encoded certificate.
     * 
     */
    @Import(name="encodedCertificate")
    private @Nullable Output<String> encodedCertificate;

    public Optional<Output<String>> encodedCertificate() {
        return Optional.ofNullable(this.encodedCertificate);
    }

    /**
     * The System.Security.Cryptography.x509certificates.StoreName certificate store location. Only Root and CertificateAuthority are valid locations.
     * 
     */
    @Import(name="storeName", required=true)
    private Output<String> storeName;

    public Output<String> storeName() {
        return this.storeName;
    }

    private CertificateConfigurationArgs() {}

    private CertificateConfigurationArgs(CertificateConfigurationArgs $) {
        this.certificate = $.certificate;
        this.certificatePassword = $.certificatePassword;
        this.encodedCertificate = $.encodedCertificate;
        this.storeName = $.storeName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CertificateConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CertificateConfigurationArgs $;

        public Builder() {
            $ = new CertificateConfigurationArgs();
        }

        public Builder(CertificateConfigurationArgs defaults) {
            $ = new CertificateConfigurationArgs(Objects.requireNonNull(defaults));
        }

        public Builder certificate(@Nullable Output<CertificateInformationArgs> certificate) {
            $.certificate = certificate;
            return this;
        }

        public Builder certificate(CertificateInformationArgs certificate) {
            return certificate(Output.of(certificate));
        }

        public Builder certificatePassword(@Nullable Output<String> certificatePassword) {
            $.certificatePassword = certificatePassword;
            return this;
        }

        public Builder certificatePassword(String certificatePassword) {
            return certificatePassword(Output.of(certificatePassword));
        }

        public Builder encodedCertificate(@Nullable Output<String> encodedCertificate) {
            $.encodedCertificate = encodedCertificate;
            return this;
        }

        public Builder encodedCertificate(String encodedCertificate) {
            return encodedCertificate(Output.of(encodedCertificate));
        }

        public Builder storeName(Output<String> storeName) {
            $.storeName = storeName;
            return this;
        }

        public Builder storeName(String storeName) {
            return storeName(Output.of(storeName));
        }

        public CertificateConfigurationArgs build() {
            $.storeName = Objects.requireNonNull($.storeName, "expected parameter 'storeName' to be non-null");
            return $;
        }
    }

}
