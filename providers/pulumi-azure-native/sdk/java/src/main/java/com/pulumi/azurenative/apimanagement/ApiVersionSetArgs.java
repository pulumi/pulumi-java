// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.apimanagement;

import com.pulumi.azurenative.apimanagement.enums.VersioningScheme;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApiVersionSetArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApiVersionSetArgs Empty = new ApiVersionSetArgs();

    /**
     * Description of API Version Set.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Name of API Version Set
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * The name of the resource group.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The name of the API Management service.
     * 
     */
    @Import(name="serviceName", required=true)
    private Output<String> serviceName;

    public Output<String> serviceName() {
        return this.serviceName;
    }

    /**
     * Name of HTTP header parameter that indicates the API Version if versioningScheme is set to `header`.
     * 
     */
    @Import(name="versionHeaderName")
    private @Nullable Output<String> versionHeaderName;

    public Optional<Output<String>> versionHeaderName() {
        return Optional.ofNullable(this.versionHeaderName);
    }

    /**
     * Name of query parameter that indicates the API Version if versioningScheme is set to `query`.
     * 
     */
    @Import(name="versionQueryName")
    private @Nullable Output<String> versionQueryName;

    public Optional<Output<String>> versionQueryName() {
        return Optional.ofNullable(this.versionQueryName);
    }

    /**
     * Api Version Set identifier. Must be unique in the current API Management service instance.
     * 
     */
    @Import(name="versionSetId")
    private @Nullable Output<String> versionSetId;

    public Optional<Output<String>> versionSetId() {
        return Optional.ofNullable(this.versionSetId);
    }

    /**
     * An value that determines where the API Version identifier will be located in a HTTP request.
     * 
     */
    @Import(name="versioningScheme", required=true)
    private Output<Either<String,VersioningScheme>> versioningScheme;

    public Output<Either<String,VersioningScheme>> versioningScheme() {
        return this.versioningScheme;
    }

    private ApiVersionSetArgs() {}

    private ApiVersionSetArgs(ApiVersionSetArgs $) {
        this.description = $.description;
        this.displayName = $.displayName;
        this.resourceGroupName = $.resourceGroupName;
        this.serviceName = $.serviceName;
        this.versionHeaderName = $.versionHeaderName;
        this.versionQueryName = $.versionQueryName;
        this.versionSetId = $.versionSetId;
        this.versioningScheme = $.versioningScheme;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApiVersionSetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApiVersionSetArgs $;

        public Builder() {
            $ = new ApiVersionSetArgs();
        }

        public Builder(ApiVersionSetArgs defaults) {
            $ = new ApiVersionSetArgs(Objects.requireNonNull(defaults));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        public Builder serviceName(Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        public Builder versionHeaderName(@Nullable Output<String> versionHeaderName) {
            $.versionHeaderName = versionHeaderName;
            return this;
        }

        public Builder versionHeaderName(String versionHeaderName) {
            return versionHeaderName(Output.of(versionHeaderName));
        }

        public Builder versionQueryName(@Nullable Output<String> versionQueryName) {
            $.versionQueryName = versionQueryName;
            return this;
        }

        public Builder versionQueryName(String versionQueryName) {
            return versionQueryName(Output.of(versionQueryName));
        }

        public Builder versionSetId(@Nullable Output<String> versionSetId) {
            $.versionSetId = versionSetId;
            return this;
        }

        public Builder versionSetId(String versionSetId) {
            return versionSetId(Output.of(versionSetId));
        }

        public Builder versioningScheme(Output<Either<String,VersioningScheme>> versioningScheme) {
            $.versioningScheme = versioningScheme;
            return this;
        }

        public Builder versioningScheme(Either<String,VersioningScheme> versioningScheme) {
            return versioningScheme(Output.of(versioningScheme));
        }

        public ApiVersionSetArgs build() {
            $.displayName = Objects.requireNonNull($.displayName, "expected parameter 'displayName' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.serviceName = Objects.requireNonNull($.serviceName, "expected parameter 'serviceName' to be non-null");
            $.versioningScheme = Objects.requireNonNull($.versioningScheme, "expected parameter 'versioningScheme' to be non-null");
            return $;
        }
    }

}
