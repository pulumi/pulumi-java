// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.authorization.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Access Review History Definition Instance.
 * 
 */
public final class AccessReviewHistoryInstanceResponse extends com.pulumi.resources.InvokeArgs {

    public static final AccessReviewHistoryInstanceResponse Empty = new AccessReviewHistoryInstanceResponse();

    /**
     * The display name for the parent history definition.
     * 
     */
    @Import(name="displayName")
    private @Nullable String displayName;

    /**
     * @return The display name for the parent history definition.
     * 
     */
    public Optional<String> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Uri which can be used to retrieve review history data. To generate this Uri, generateDownloadUri() must be called for a specific accessReviewHistoryDefinitionInstance. The link expires after a 24 hour period. Callers can see the expiration date time by looking at the &#39;se&#39; parameter in the generated uri.
     * 
     */
    @Import(name="downloadUri", required=true)
    private String downloadUri;

    /**
     * @return Uri which can be used to retrieve review history data. To generate this Uri, generateDownloadUri() must be called for a specific accessReviewHistoryDefinitionInstance. The link expires after a 24 hour period. Callers can see the expiration date time by looking at the &#39;se&#39; parameter in the generated uri.
     * 
     */
    public String downloadUri() {
        return this.downloadUri;
    }

    /**
     * Date time when history data report expires and the associated data is deleted.
     * 
     */
    @Import(name="expiration")
    private @Nullable String expiration;

    /**
     * @return Date time when history data report expires and the associated data is deleted.
     * 
     */
    public Optional<String> expiration() {
        return Optional.ofNullable(this.expiration);
    }

    /**
     * Date time when the history data report is scheduled to be generated.
     * 
     */
    @Import(name="fulfilledDateTime")
    private @Nullable String fulfilledDateTime;

    /**
     * @return Date time when the history data report is scheduled to be generated.
     * 
     */
    public Optional<String> fulfilledDateTime() {
        return Optional.ofNullable(this.fulfilledDateTime);
    }

    /**
     * The access review history definition instance id.
     * 
     */
    @Import(name="id", required=true)
    private String id;

    /**
     * @return The access review history definition instance id.
     * 
     */
    public String id() {
        return this.id;
    }

    /**
     * The access review history definition instance unique id.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return The access review history definition instance unique id.
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * Date time used when selecting review data, all reviews included in data end on or before this date. For use only with one-time/non-recurring reports.
     * 
     */
    @Import(name="reviewHistoryPeriodEndDateTime")
    private @Nullable String reviewHistoryPeriodEndDateTime;

    /**
     * @return Date time used when selecting review data, all reviews included in data end on or before this date. For use only with one-time/non-recurring reports.
     * 
     */
    public Optional<String> reviewHistoryPeriodEndDateTime() {
        return Optional.ofNullable(this.reviewHistoryPeriodEndDateTime);
    }

    /**
     * Date time used when selecting review data, all reviews included in data start on or after this date. For use only with one-time/non-recurring reports.
     * 
     */
    @Import(name="reviewHistoryPeriodStartDateTime")
    private @Nullable String reviewHistoryPeriodStartDateTime;

    /**
     * @return Date time used when selecting review data, all reviews included in data start on or after this date. For use only with one-time/non-recurring reports.
     * 
     */
    public Optional<String> reviewHistoryPeriodStartDateTime() {
        return Optional.ofNullable(this.reviewHistoryPeriodStartDateTime);
    }

    /**
     * Date time when the history data report is scheduled to be generated.
     * 
     */
    @Import(name="runDateTime")
    private @Nullable String runDateTime;

    /**
     * @return Date time when the history data report is scheduled to be generated.
     * 
     */
    public Optional<String> runDateTime() {
        return Optional.ofNullable(this.runDateTime);
    }

    /**
     * Status of the requested review history instance data. This is either requested, in-progress, done or error. The state transitions are as follows - Requested -&gt; InProgress -&gt; Done -&gt; Expired
     * 
     */
    @Import(name="status", required=true)
    private String status;

    /**
     * @return Status of the requested review history instance data. This is either requested, in-progress, done or error. The state transitions are as follows - Requested -&gt; InProgress -&gt; Done -&gt; Expired
     * 
     */
    public String status() {
        return this.status;
    }

    /**
     * The resource type.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    /**
     * @return The resource type.
     * 
     */
    public String type() {
        return this.type;
    }

    private AccessReviewHistoryInstanceResponse() {}

    private AccessReviewHistoryInstanceResponse(AccessReviewHistoryInstanceResponse $) {
        this.displayName = $.displayName;
        this.downloadUri = $.downloadUri;
        this.expiration = $.expiration;
        this.fulfilledDateTime = $.fulfilledDateTime;
        this.id = $.id;
        this.name = $.name;
        this.reviewHistoryPeriodEndDateTime = $.reviewHistoryPeriodEndDateTime;
        this.reviewHistoryPeriodStartDateTime = $.reviewHistoryPeriodStartDateTime;
        this.runDateTime = $.runDateTime;
        this.status = $.status;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AccessReviewHistoryInstanceResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AccessReviewHistoryInstanceResponse $;

        public Builder() {
            $ = new AccessReviewHistoryInstanceResponse();
        }

        public Builder(AccessReviewHistoryInstanceResponse defaults) {
            $ = new AccessReviewHistoryInstanceResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param displayName The display name for the parent history definition.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable String displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param downloadUri Uri which can be used to retrieve review history data. To generate this Uri, generateDownloadUri() must be called for a specific accessReviewHistoryDefinitionInstance. The link expires after a 24 hour period. Callers can see the expiration date time by looking at the &#39;se&#39; parameter in the generated uri.
         * 
         * @return builder
         * 
         */
        public Builder downloadUri(String downloadUri) {
            $.downloadUri = downloadUri;
            return this;
        }

        /**
         * @param expiration Date time when history data report expires and the associated data is deleted.
         * 
         * @return builder
         * 
         */
        public Builder expiration(@Nullable String expiration) {
            $.expiration = expiration;
            return this;
        }

        /**
         * @param fulfilledDateTime Date time when the history data report is scheduled to be generated.
         * 
         * @return builder
         * 
         */
        public Builder fulfilledDateTime(@Nullable String fulfilledDateTime) {
            $.fulfilledDateTime = fulfilledDateTime;
            return this;
        }

        /**
         * @param id The access review history definition instance id.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            $.id = id;
            return this;
        }

        /**
         * @param name The access review history definition instance unique id.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param reviewHistoryPeriodEndDateTime Date time used when selecting review data, all reviews included in data end on or before this date. For use only with one-time/non-recurring reports.
         * 
         * @return builder
         * 
         */
        public Builder reviewHistoryPeriodEndDateTime(@Nullable String reviewHistoryPeriodEndDateTime) {
            $.reviewHistoryPeriodEndDateTime = reviewHistoryPeriodEndDateTime;
            return this;
        }

        /**
         * @param reviewHistoryPeriodStartDateTime Date time used when selecting review data, all reviews included in data start on or after this date. For use only with one-time/non-recurring reports.
         * 
         * @return builder
         * 
         */
        public Builder reviewHistoryPeriodStartDateTime(@Nullable String reviewHistoryPeriodStartDateTime) {
            $.reviewHistoryPeriodStartDateTime = reviewHistoryPeriodStartDateTime;
            return this;
        }

        /**
         * @param runDateTime Date time when the history data report is scheduled to be generated.
         * 
         * @return builder
         * 
         */
        public Builder runDateTime(@Nullable String runDateTime) {
            $.runDateTime = runDateTime;
            return this;
        }

        /**
         * @param status Status of the requested review history instance data. This is either requested, in-progress, done or error. The state transitions are as follows - Requested -&gt; InProgress -&gt; Done -&gt; Expired
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            $.status = status;
            return this;
        }

        /**
         * @param type The resource type.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public AccessReviewHistoryInstanceResponse build() {
            $.downloadUri = Objects.requireNonNull($.downloadUri, "expected parameter 'downloadUri' to be non-null");
            $.id = Objects.requireNonNull($.id, "expected parameter 'id' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.status = Objects.requireNonNull($.status, "expected parameter 'status' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
