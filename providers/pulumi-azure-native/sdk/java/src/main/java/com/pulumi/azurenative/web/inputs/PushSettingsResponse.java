// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.web.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Push settings for the App.
 * 
 */
public final class PushSettingsResponse extends com.pulumi.resources.InvokeArgs {

    public static final PushSettingsResponse Empty = new PushSettingsResponse();

    /**
     * Gets or sets a JSON string containing a list of dynamic tags that will be evaluated from user claims in the push registration endpoint.
     * 
     */
    @Import(name="dynamicTagsJson")
    private @Nullable String dynamicTagsJson;

    /**
     * @return Gets or sets a JSON string containing a list of dynamic tags that will be evaluated from user claims in the push registration endpoint.
     * 
     */
    public Optional<String> dynamicTagsJson() {
        return Optional.ofNullable(this.dynamicTagsJson);
    }

    /**
     * Resource Id.
     * 
     */
    @Import(name="id", required=true)
    private String id;

    /**
     * @return Resource Id.
     * 
     */
    public String id() {
        return this.id;
    }

    /**
     * Gets or sets a flag indicating whether the Push endpoint is enabled.
     * 
     */
    @Import(name="isPushEnabled", required=true)
    private Boolean isPushEnabled;

    /**
     * @return Gets or sets a flag indicating whether the Push endpoint is enabled.
     * 
     */
    public Boolean isPushEnabled() {
        return this.isPushEnabled;
    }

    /**
     * Kind of resource.
     * 
     */
    @Import(name="kind")
    private @Nullable String kind;

    /**
     * @return Kind of resource.
     * 
     */
    public Optional<String> kind() {
        return Optional.ofNullable(this.kind);
    }

    /**
     * Resource Name.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return Resource Name.
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * Gets or sets a JSON string containing a list of tags that are whitelisted for use by the push registration endpoint.
     * 
     */
    @Import(name="tagWhitelistJson")
    private @Nullable String tagWhitelistJson;

    /**
     * @return Gets or sets a JSON string containing a list of tags that are whitelisted for use by the push registration endpoint.
     * 
     */
    public Optional<String> tagWhitelistJson() {
        return Optional.ofNullable(this.tagWhitelistJson);
    }

    /**
     * Gets or sets a JSON string containing a list of tags that require user authentication to be used in the push registration endpoint.
     * Tags can consist of alphanumeric characters and the following:
     * &#39;_&#39;, &#39;@&#39;, &#39;#&#39;, &#39;.&#39;, &#39;:&#39;, &#39;-&#39;.
     * Validation should be performed at the PushRequestHandler.
     * 
     */
    @Import(name="tagsRequiringAuth")
    private @Nullable String tagsRequiringAuth;

    /**
     * @return Gets or sets a JSON string containing a list of tags that require user authentication to be used in the push registration endpoint.
     * Tags can consist of alphanumeric characters and the following:
     * &#39;_&#39;, &#39;@&#39;, &#39;#&#39;, &#39;.&#39;, &#39;:&#39;, &#39;-&#39;.
     * Validation should be performed at the PushRequestHandler.
     * 
     */
    public Optional<String> tagsRequiringAuth() {
        return Optional.ofNullable(this.tagsRequiringAuth);
    }

    /**
     * Resource type.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    /**
     * @return Resource type.
     * 
     */
    public String type() {
        return this.type;
    }

    private PushSettingsResponse() {}

    private PushSettingsResponse(PushSettingsResponse $) {
        this.dynamicTagsJson = $.dynamicTagsJson;
        this.id = $.id;
        this.isPushEnabled = $.isPushEnabled;
        this.kind = $.kind;
        this.name = $.name;
        this.tagWhitelistJson = $.tagWhitelistJson;
        this.tagsRequiringAuth = $.tagsRequiringAuth;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PushSettingsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PushSettingsResponse $;

        public Builder() {
            $ = new PushSettingsResponse();
        }

        public Builder(PushSettingsResponse defaults) {
            $ = new PushSettingsResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param dynamicTagsJson Gets or sets a JSON string containing a list of dynamic tags that will be evaluated from user claims in the push registration endpoint.
         * 
         * @return builder
         * 
         */
        public Builder dynamicTagsJson(@Nullable String dynamicTagsJson) {
            $.dynamicTagsJson = dynamicTagsJson;
            return this;
        }

        /**
         * @param id Resource Id.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            $.id = id;
            return this;
        }

        /**
         * @param isPushEnabled Gets or sets a flag indicating whether the Push endpoint is enabled.
         * 
         * @return builder
         * 
         */
        public Builder isPushEnabled(Boolean isPushEnabled) {
            $.isPushEnabled = isPushEnabled;
            return this;
        }

        /**
         * @param kind Kind of resource.
         * 
         * @return builder
         * 
         */
        public Builder kind(@Nullable String kind) {
            $.kind = kind;
            return this;
        }

        /**
         * @param name Resource Name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param tagWhitelistJson Gets or sets a JSON string containing a list of tags that are whitelisted for use by the push registration endpoint.
         * 
         * @return builder
         * 
         */
        public Builder tagWhitelistJson(@Nullable String tagWhitelistJson) {
            $.tagWhitelistJson = tagWhitelistJson;
            return this;
        }

        /**
         * @param tagsRequiringAuth Gets or sets a JSON string containing a list of tags that require user authentication to be used in the push registration endpoint.
         * Tags can consist of alphanumeric characters and the following:
         * &#39;_&#39;, &#39;@&#39;, &#39;#&#39;, &#39;.&#39;, &#39;:&#39;, &#39;-&#39;.
         * Validation should be performed at the PushRequestHandler.
         * 
         * @return builder
         * 
         */
        public Builder tagsRequiringAuth(@Nullable String tagsRequiringAuth) {
            $.tagsRequiringAuth = tagsRequiringAuth;
            return this;
        }

        /**
         * @param type Resource type.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public PushSettingsResponse build() {
            $.id = Objects.requireNonNull($.id, "expected parameter 'id' to be non-null");
            $.isPushEnabled = Objects.requireNonNull($.isPushEnabled, "expected parameter 'isPushEnabled' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
