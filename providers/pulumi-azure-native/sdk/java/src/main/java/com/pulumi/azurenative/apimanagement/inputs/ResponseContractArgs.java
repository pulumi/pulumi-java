// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.apimanagement.inputs;

import com.pulumi.azurenative.apimanagement.inputs.ParameterContractArgs;
import com.pulumi.azurenative.apimanagement.inputs.RepresentationContractArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Operation response details.
 * 
 */
public final class ResponseContractArgs extends com.pulumi.resources.ResourceArgs {

    public static final ResponseContractArgs Empty = new ResponseContractArgs();

    /**
     * Operation response description.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Collection of operation response headers.
     * 
     */
    @Import(name="headers")
    private @Nullable Output<List<ParameterContractArgs>> headers;

    public Optional<Output<List<ParameterContractArgs>>> headers() {
        return Optional.ofNullable(this.headers);
    }

    /**
     * Collection of operation response representations.
     * 
     */
    @Import(name="representations")
    private @Nullable Output<List<RepresentationContractArgs>> representations;

    public Optional<Output<List<RepresentationContractArgs>>> representations() {
        return Optional.ofNullable(this.representations);
    }

    /**
     * Operation response HTTP status code.
     * 
     */
    @Import(name="statusCode", required=true)
    private Output<Integer> statusCode;

    public Output<Integer> statusCode() {
        return this.statusCode;
    }

    private ResponseContractArgs() {}

    private ResponseContractArgs(ResponseContractArgs $) {
        this.description = $.description;
        this.headers = $.headers;
        this.representations = $.representations;
        this.statusCode = $.statusCode;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ResponseContractArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ResponseContractArgs $;

        public Builder() {
            $ = new ResponseContractArgs();
        }

        public Builder(ResponseContractArgs defaults) {
            $ = new ResponseContractArgs(Objects.requireNonNull(defaults));
        }

        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder headers(@Nullable Output<List<ParameterContractArgs>> headers) {
            $.headers = headers;
            return this;
        }

        public Builder headers(List<ParameterContractArgs> headers) {
            return headers(Output.of(headers));
        }

        public Builder headers(ParameterContractArgs... headers) {
            return headers(List.of(headers));
        }

        public Builder representations(@Nullable Output<List<RepresentationContractArgs>> representations) {
            $.representations = representations;
            return this;
        }

        public Builder representations(List<RepresentationContractArgs> representations) {
            return representations(Output.of(representations));
        }

        public Builder representations(RepresentationContractArgs... representations) {
            return representations(List.of(representations));
        }

        public Builder statusCode(Output<Integer> statusCode) {
            $.statusCode = statusCode;
            return this;
        }

        public Builder statusCode(Integer statusCode) {
            return statusCode(Output.of(statusCode));
        }

        public ResponseContractArgs build() {
            $.statusCode = Objects.requireNonNull($.statusCode, "expected parameter 'statusCode' to be non-null");
            return $;
        }
    }

}
