// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.netapp.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetPoolResult {
    /**
     * @return Resource Id
     * 
     */
    private final String id;
    /**
     * @return Resource location
     * 
     */
    private final String location;
    /**
     * @return Resource name
     * 
     */
    private final String name;
    /**
     * @return UUID v4 used to identify the Pool
     * 
     */
    private final String poolId;
    /**
     * @return Azure lifecycle management
     * 
     */
    private final String provisioningState;
    /**
     * @return The qos type of the pool
     * 
     */
    private final @Nullable String qosType;
    /**
     * @return The service level of the file system
     * 
     */
    private final String serviceLevel;
    /**
     * @return Provisioned size of the pool (in bytes). Allowed values are in 4TiB chunks (value must be multiply of 4398046511104).
     * 
     */
    private final Double size;
    /**
     * @return Resource tags
     * 
     */
    private final @Nullable Map<String,String> tags;
    /**
     * @return Total throughput of pool in Mibps
     * 
     */
    private final Double totalThroughputMibps;
    /**
     * @return Resource type
     * 
     */
    private final String type;
    /**
     * @return Utilized throughput of pool in Mibps
     * 
     */
    private final Double utilizedThroughputMibps;

    @CustomType.Constructor
    private GetPoolResult(
        @CustomType.Parameter("id") String id,
        @CustomType.Parameter("location") String location,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("poolId") String poolId,
        @CustomType.Parameter("provisioningState") String provisioningState,
        @CustomType.Parameter("qosType") @Nullable String qosType,
        @CustomType.Parameter("serviceLevel") String serviceLevel,
        @CustomType.Parameter("size") Double size,
        @CustomType.Parameter("tags") @Nullable Map<String,String> tags,
        @CustomType.Parameter("totalThroughputMibps") Double totalThroughputMibps,
        @CustomType.Parameter("type") String type,
        @CustomType.Parameter("utilizedThroughputMibps") Double utilizedThroughputMibps) {
        this.id = id;
        this.location = location;
        this.name = name;
        this.poolId = poolId;
        this.provisioningState = provisioningState;
        this.qosType = qosType;
        this.serviceLevel = serviceLevel;
        this.size = size;
        this.tags = tags;
        this.totalThroughputMibps = totalThroughputMibps;
        this.type = type;
        this.utilizedThroughputMibps = utilizedThroughputMibps;
    }

    /**
     * @return Resource Id
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Resource location
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return Resource name
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return UUID v4 used to identify the Pool
     * 
     */
    public String poolId() {
        return this.poolId;
    }
    /**
     * @return Azure lifecycle management
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }
    /**
     * @return The qos type of the pool
     * 
     */
    public Optional<String> qosType() {
        return Optional.ofNullable(this.qosType);
    }
    /**
     * @return The service level of the file system
     * 
     */
    public String serviceLevel() {
        return this.serviceLevel;
    }
    /**
     * @return Provisioned size of the pool (in bytes). Allowed values are in 4TiB chunks (value must be multiply of 4398046511104).
     * 
     */
    public Double size() {
        return this.size;
    }
    /**
     * @return Resource tags
     * 
     */
    public Map<String,String> tags() {
        return this.tags == null ? Map.of() : this.tags;
    }
    /**
     * @return Total throughput of pool in Mibps
     * 
     */
    public Double totalThroughputMibps() {
        return this.totalThroughputMibps;
    }
    /**
     * @return Resource type
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Utilized throughput of pool in Mibps
     * 
     */
    public Double utilizedThroughputMibps() {
        return this.utilizedThroughputMibps;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPoolResult defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String id;
        private String location;
        private String name;
        private String poolId;
        private String provisioningState;
        private @Nullable String qosType;
        private String serviceLevel;
        private Double size;
        private @Nullable Map<String,String> tags;
        private Double totalThroughputMibps;
        private String type;
        private Double utilizedThroughputMibps;

        public Builder() {
    	      // Empty
        }

        public Builder(GetPoolResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.poolId = defaults.poolId;
    	      this.provisioningState = defaults.provisioningState;
    	      this.qosType = defaults.qosType;
    	      this.serviceLevel = defaults.serviceLevel;
    	      this.size = defaults.size;
    	      this.tags = defaults.tags;
    	      this.totalThroughputMibps = defaults.totalThroughputMibps;
    	      this.type = defaults.type;
    	      this.utilizedThroughputMibps = defaults.utilizedThroughputMibps;
        }

        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder poolId(String poolId) {
            this.poolId = Objects.requireNonNull(poolId);
            return this;
        }
        public Builder provisioningState(String provisioningState) {
            this.provisioningState = Objects.requireNonNull(provisioningState);
            return this;
        }
        public Builder qosType(@Nullable String qosType) {
            this.qosType = qosType;
            return this;
        }
        public Builder serviceLevel(String serviceLevel) {
            this.serviceLevel = Objects.requireNonNull(serviceLevel);
            return this;
        }
        public Builder size(Double size) {
            this.size = Objects.requireNonNull(size);
            return this;
        }
        public Builder tags(@Nullable Map<String,String> tags) {
            this.tags = tags;
            return this;
        }
        public Builder totalThroughputMibps(Double totalThroughputMibps) {
            this.totalThroughputMibps = Objects.requireNonNull(totalThroughputMibps);
            return this;
        }
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder utilizedThroughputMibps(Double utilizedThroughputMibps) {
            this.utilizedThroughputMibps = Objects.requireNonNull(utilizedThroughputMibps);
            return this;
        }        public GetPoolResult build() {
            return new GetPoolResult(id, location, name, poolId, provisioningState, qosType, serviceLevel, size, tags, totalThroughputMibps, type, utilizedThroughputMibps);
        }
    }
}
