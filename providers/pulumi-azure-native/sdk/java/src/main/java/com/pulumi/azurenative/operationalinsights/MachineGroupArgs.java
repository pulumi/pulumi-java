// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.operationalinsights;

import com.pulumi.azurenative.operationalinsights.enums.MachineGroupType;
import com.pulumi.azurenative.operationalinsights.inputs.MachineReferenceWithHintsArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class MachineGroupArgs extends com.pulumi.resources.ResourceArgs {

    public static final MachineGroupArgs Empty = new MachineGroupArgs();

    /**
     * Count of machines in this group. The value of count may be bigger than the number of machines in case of the group has been truncated due to exceeding the max number of machines a group can handle.
     * 
     */
    @Import(name="count")
      private final @Nullable Output<Integer> count;

    public Output<Integer> count() {
        return this.count == null ? Codegen.empty() : this.count;
    }

    /**
     * User defined name for the group
     * 
     */
    @Import(name="displayName", required=true)
      private final Output<String> displayName;

    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * Type of the machine group
     * 
     */
    @Import(name="groupType")
      private final @Nullable Output<Either<String,MachineGroupType>> groupType;

    public Output<Either<String,MachineGroupType>> groupType() {
        return this.groupType == null ? Codegen.empty() : this.groupType;
    }

    /**
     * Additional resource type qualifier.
     * Expected value is 'machineGroup'.
     * 
     */
    @Import(name="kind", required=true)
      private final Output<String> kind;

    public Output<String> kind() {
        return this.kind;
    }

    /**
     * Machine Group resource name.
     * 
     */
    @Import(name="machineGroupName")
      private final @Nullable Output<String> machineGroupName;

    public Output<String> machineGroupName() {
        return this.machineGroupName == null ? Codegen.empty() : this.machineGroupName;
    }

    /**
     * References of the machines in this group. The hints within each reference do not represent the current value of the corresponding fields. They are a snapshot created during the last time the machine group was updated.
     * 
     */
    @Import(name="machines")
      private final @Nullable Output<List<MachineReferenceWithHintsArgs>> machines;

    public Output<List<MachineReferenceWithHintsArgs>> machines() {
        return this.machines == null ? Codegen.empty() : this.machines;
    }

    /**
     * Resource group name within the specified subscriptionId.
     * 
     */
    @Import(name="resourceGroupName", required=true)
      private final Output<String> resourceGroupName;

    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * OMS workspace containing the resources of interest.
     * 
     */
    @Import(name="workspaceName", required=true)
      private final Output<String> workspaceName;

    public Output<String> workspaceName() {
        return this.workspaceName;
    }

    public MachineGroupArgs(
        @Nullable Output<Integer> count,
        Output<String> displayName,
        @Nullable Output<Either<String,MachineGroupType>> groupType,
        Output<String> kind,
        @Nullable Output<String> machineGroupName,
        @Nullable Output<List<MachineReferenceWithHintsArgs>> machines,
        Output<String> resourceGroupName,
        Output<String> workspaceName) {
        this.count = count;
        this.displayName = Objects.requireNonNull(displayName, "expected parameter 'displayName' to be non-null");
        this.groupType = groupType;
        this.kind = Codegen.stringProp("kind").output().arg(kind).require();
        this.machineGroupName = machineGroupName;
        this.machines = machines;
        this.resourceGroupName = Objects.requireNonNull(resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
        this.workspaceName = Objects.requireNonNull(workspaceName, "expected parameter 'workspaceName' to be non-null");
    }

    private MachineGroupArgs() {
        this.count = Codegen.empty();
        this.displayName = Codegen.empty();
        this.groupType = Codegen.empty();
        this.kind = Codegen.empty();
        this.machineGroupName = Codegen.empty();
        this.machines = Codegen.empty();
        this.resourceGroupName = Codegen.empty();
        this.workspaceName = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MachineGroupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Integer> count;
        private Output<String> displayName;
        private @Nullable Output<Either<String,MachineGroupType>> groupType;
        private Output<String> kind;
        private @Nullable Output<String> machineGroupName;
        private @Nullable Output<List<MachineReferenceWithHintsArgs>> machines;
        private Output<String> resourceGroupName;
        private Output<String> workspaceName;

        public Builder() {
    	      // Empty
        }

        public Builder(MachineGroupArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.count = defaults.count;
    	      this.displayName = defaults.displayName;
    	      this.groupType = defaults.groupType;
    	      this.kind = defaults.kind;
    	      this.machineGroupName = defaults.machineGroupName;
    	      this.machines = defaults.machines;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.workspaceName = defaults.workspaceName;
        }

        public Builder count(@Nullable Output<Integer> count) {
            this.count = count;
            return this;
        }
        public Builder count(@Nullable Integer count) {
            this.count = Codegen.ofNullable(count);
            return this;
        }
        public Builder displayName(Output<String> displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        public Builder displayName(String displayName) {
            this.displayName = Output.of(Objects.requireNonNull(displayName));
            return this;
        }
        public Builder groupType(@Nullable Output<Either<String,MachineGroupType>> groupType) {
            this.groupType = groupType;
            return this;
        }
        public Builder groupType(@Nullable Either<String,MachineGroupType> groupType) {
            this.groupType = Codegen.ofNullable(groupType);
            return this;
        }
        public Builder kind(Output<String> kind) {
            this.kind = Objects.requireNonNull(kind);
            return this;
        }
        public Builder kind(String kind) {
            this.kind = Output.of(Objects.requireNonNull(kind));
            return this;
        }
        public Builder machineGroupName(@Nullable Output<String> machineGroupName) {
            this.machineGroupName = machineGroupName;
            return this;
        }
        public Builder machineGroupName(@Nullable String machineGroupName) {
            this.machineGroupName = Codegen.ofNullable(machineGroupName);
            return this;
        }
        public Builder machines(@Nullable Output<List<MachineReferenceWithHintsArgs>> machines) {
            this.machines = machines;
            return this;
        }
        public Builder machines(@Nullable List<MachineReferenceWithHintsArgs> machines) {
            this.machines = Codegen.ofNullable(machines);
            return this;
        }
        public Builder machines(MachineReferenceWithHintsArgs... machines) {
            return machines(List.of(machines));
        }
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            this.resourceGroupName = Objects.requireNonNull(resourceGroupName);
            return this;
        }
        public Builder resourceGroupName(String resourceGroupName) {
            this.resourceGroupName = Output.of(Objects.requireNonNull(resourceGroupName));
            return this;
        }
        public Builder workspaceName(Output<String> workspaceName) {
            this.workspaceName = Objects.requireNonNull(workspaceName);
            return this;
        }
        public Builder workspaceName(String workspaceName) {
            this.workspaceName = Output.of(Objects.requireNonNull(workspaceName));
            return this;
        }        public MachineGroupArgs build() {
            return new MachineGroupArgs(count, displayName, groupType, kind, machineGroupName, machines, resourceGroupName, workspaceName);
        }
    }
}
