// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.sqlvirtualmachine.inputs;

import com.pulumi.azurenative.sqlvirtualmachine.inputs.SQLStorageSettingsResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Storage Configurations for SQL Data, Log and TempDb.
 * 
 */
public final class StorageConfigurationSettingsResponse extends com.pulumi.resources.InvokeArgs {

    public static final StorageConfigurationSettingsResponse Empty = new StorageConfigurationSettingsResponse();

    /**
     * Disk configuration to apply to SQL Server.
     * 
     */
    @Import(name="diskConfigurationType")
    private @Nullable String diskConfigurationType;

    /**
     * @return Disk configuration to apply to SQL Server.
     * 
     */
    public Optional<String> diskConfigurationType() {
        return Optional.ofNullable(this.diskConfigurationType);
    }

    /**
     * SQL Server Data Storage Settings.
     * 
     */
    @Import(name="sqlDataSettings")
    private @Nullable SQLStorageSettingsResponse sqlDataSettings;

    /**
     * @return SQL Server Data Storage Settings.
     * 
     */
    public Optional<SQLStorageSettingsResponse> sqlDataSettings() {
        return Optional.ofNullable(this.sqlDataSettings);
    }

    /**
     * SQL Server Log Storage Settings.
     * 
     */
    @Import(name="sqlLogSettings")
    private @Nullable SQLStorageSettingsResponse sqlLogSettings;

    /**
     * @return SQL Server Log Storage Settings.
     * 
     */
    public Optional<SQLStorageSettingsResponse> sqlLogSettings() {
        return Optional.ofNullable(this.sqlLogSettings);
    }

    /**
     * SQL Server TempDb Storage Settings.
     * 
     */
    @Import(name="sqlTempDbSettings")
    private @Nullable SQLStorageSettingsResponse sqlTempDbSettings;

    /**
     * @return SQL Server TempDb Storage Settings.
     * 
     */
    public Optional<SQLStorageSettingsResponse> sqlTempDbSettings() {
        return Optional.ofNullable(this.sqlTempDbSettings);
    }

    /**
     * Storage workload type.
     * 
     */
    @Import(name="storageWorkloadType")
    private @Nullable String storageWorkloadType;

    /**
     * @return Storage workload type.
     * 
     */
    public Optional<String> storageWorkloadType() {
        return Optional.ofNullable(this.storageWorkloadType);
    }

    private StorageConfigurationSettingsResponse() {}

    private StorageConfigurationSettingsResponse(StorageConfigurationSettingsResponse $) {
        this.diskConfigurationType = $.diskConfigurationType;
        this.sqlDataSettings = $.sqlDataSettings;
        this.sqlLogSettings = $.sqlLogSettings;
        this.sqlTempDbSettings = $.sqlTempDbSettings;
        this.storageWorkloadType = $.storageWorkloadType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StorageConfigurationSettingsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StorageConfigurationSettingsResponse $;

        public Builder() {
            $ = new StorageConfigurationSettingsResponse();
        }

        public Builder(StorageConfigurationSettingsResponse defaults) {
            $ = new StorageConfigurationSettingsResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param diskConfigurationType Disk configuration to apply to SQL Server.
         * 
         * @return builder
         * 
         */
        public Builder diskConfigurationType(@Nullable String diskConfigurationType) {
            $.diskConfigurationType = diskConfigurationType;
            return this;
        }

        /**
         * @param sqlDataSettings SQL Server Data Storage Settings.
         * 
         * @return builder
         * 
         */
        public Builder sqlDataSettings(@Nullable SQLStorageSettingsResponse sqlDataSettings) {
            $.sqlDataSettings = sqlDataSettings;
            return this;
        }

        /**
         * @param sqlLogSettings SQL Server Log Storage Settings.
         * 
         * @return builder
         * 
         */
        public Builder sqlLogSettings(@Nullable SQLStorageSettingsResponse sqlLogSettings) {
            $.sqlLogSettings = sqlLogSettings;
            return this;
        }

        /**
         * @param sqlTempDbSettings SQL Server TempDb Storage Settings.
         * 
         * @return builder
         * 
         */
        public Builder sqlTempDbSettings(@Nullable SQLStorageSettingsResponse sqlTempDbSettings) {
            $.sqlTempDbSettings = sqlTempDbSettings;
            return this;
        }

        /**
         * @param storageWorkloadType Storage workload type.
         * 
         * @return builder
         * 
         */
        public Builder storageWorkloadType(@Nullable String storageWorkloadType) {
            $.storageWorkloadType = storageWorkloadType;
            return this;
        }

        public StorageConfigurationSettingsResponse build() {
            return $;
        }
    }

}
