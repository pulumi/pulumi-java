// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.chaos.inputs;

import com.pulumi.azurenative.chaos.inputs.BranchArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Model that represents a step in the Experiment resource.
 * 
 */
public final class StepArgs extends com.pulumi.resources.ResourceArgs {

    public static final StepArgs Empty = new StepArgs();

    /**
     * List of branches.
     * 
     */
    @Import(name="branches", required=true)
    private Output<List<BranchArgs>> branches;

    /**
     * @return List of branches.
     * 
     */
    public Output<List<BranchArgs>> branches() {
        return this.branches;
    }

    /**
     * String of the step name.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return String of the step name.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    private StepArgs() {}

    private StepArgs(StepArgs $) {
        this.branches = $.branches;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StepArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StepArgs $;

        public Builder() {
            $ = new StepArgs();
        }

        public Builder(StepArgs defaults) {
            $ = new StepArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param branches List of branches.
         * 
         * @return builder
         * 
         */
        public Builder branches(Output<List<BranchArgs>> branches) {
            $.branches = branches;
            return this;
        }

        /**
         * @param branches List of branches.
         * 
         * @return builder
         * 
         */
        public Builder branches(List<BranchArgs> branches) {
            return branches(Output.of(branches));
        }

        /**
         * @param branches List of branches.
         * 
         * @return builder
         * 
         */
        public Builder branches(BranchArgs... branches) {
            return branches(List.of(branches));
        }

        /**
         * @param name String of the step name.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name String of the step name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public StepArgs build() {
            $.branches = Objects.requireNonNull($.branches, "expected parameter 'branches' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            return $;
        }
    }

}
