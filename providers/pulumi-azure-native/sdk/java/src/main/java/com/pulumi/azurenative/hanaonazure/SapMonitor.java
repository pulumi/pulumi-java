// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.hanaonazure;

import com.pulumi.azurenative.Utilities;
import com.pulumi.azurenative.hanaonazure.SapMonitorArgs;
import com.pulumi.core.Alias;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import javax.annotation.Nullable;

/**
 * SAP monitor info on Azure (ARM properties and SAP monitor properties)
 * API Version: 2020-02-07-preview.
 * 
 * ## Example Usage
 * 
 * ## Import
 * 
 * An existing resource can be imported using its type token, name, and identifier, e.g.
 * 
 * ```sh
 * $ pulumi import azure-native:hanaonazure:SapMonitor myHanaInstance /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.HanaOnAzure/hanaInstances/myHanaInstance 
 * ```
 * 
 */
@ResourceType(type="azure-native:hanaonazure:SapMonitor")
public class SapMonitor extends com.pulumi.resources.CustomResource {
    /**
     * The value indicating whether to send analytics to Microsoft
     * 
     */
    @Export(name="enableCustomerAnalytics", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> enableCustomerAnalytics;

    /**
     * @return The value indicating whether to send analytics to Microsoft
     * 
     */
    public Output</* @Nullable */ Boolean> enableCustomerAnalytics() {
        return this.enableCustomerAnalytics;
    }
    /**
     * The geo-location where the resource lives
     * 
     */
    @Export(name="location", type=String.class, parameters={})
    private Output<String> location;

    /**
     * @return The geo-location where the resource lives
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * The ARM ID of the Log Analytics Workspace that is used for monitoring
     * 
     */
    @Export(name="logAnalyticsWorkspaceArmId", type=String.class, parameters={})
    private Output</* @Nullable */ String> logAnalyticsWorkspaceArmId;

    /**
     * @return The ARM ID of the Log Analytics Workspace that is used for monitoring
     * 
     */
    public Output</* @Nullable */ String> logAnalyticsWorkspaceArmId() {
        return this.logAnalyticsWorkspaceArmId;
    }
    /**
     * The workspace ID of the log analytics workspace to be used for monitoring
     * 
     */
    @Export(name="logAnalyticsWorkspaceId", type=String.class, parameters={})
    private Output</* @Nullable */ String> logAnalyticsWorkspaceId;

    /**
     * @return The workspace ID of the log analytics workspace to be used for monitoring
     * 
     */
    public Output</* @Nullable */ String> logAnalyticsWorkspaceId() {
        return this.logAnalyticsWorkspaceId;
    }
    /**
     * The shared key of the log analytics workspace that is used for monitoring
     * 
     */
    @Export(name="logAnalyticsWorkspaceSharedKey", type=String.class, parameters={})
    private Output</* @Nullable */ String> logAnalyticsWorkspaceSharedKey;

    /**
     * @return The shared key of the log analytics workspace that is used for monitoring
     * 
     */
    public Output</* @Nullable */ String> logAnalyticsWorkspaceSharedKey() {
        return this.logAnalyticsWorkspaceSharedKey;
    }
    /**
     * The name of the resource group the SAP Monitor resources get deployed into.
     * 
     */
    @Export(name="managedResourceGroupName", type=String.class, parameters={})
    private Output<String> managedResourceGroupName;

    /**
     * @return The name of the resource group the SAP Monitor resources get deployed into.
     * 
     */
    public Output<String> managedResourceGroupName() {
        return this.managedResourceGroupName;
    }
    /**
     * The subnet which the SAP monitor will be deployed in
     * 
     */
    @Export(name="monitorSubnet", type=String.class, parameters={})
    private Output</* @Nullable */ String> monitorSubnet;

    /**
     * @return The subnet which the SAP monitor will be deployed in
     * 
     */
    public Output</* @Nullable */ String> monitorSubnet() {
        return this.monitorSubnet;
    }
    /**
     * The name of the resource
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the resource
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * State of provisioning of the HanaInstance
     * 
     */
    @Export(name="provisioningState", type=String.class, parameters={})
    private Output<String> provisioningState;

    /**
     * @return State of provisioning of the HanaInstance
     * 
     */
    public Output<String> provisioningState() {
        return this.provisioningState;
    }
    /**
     * The version of the payload running in the Collector VM
     * 
     */
    @Export(name="sapMonitorCollectorVersion", type=String.class, parameters={})
    private Output<String> sapMonitorCollectorVersion;

    /**
     * @return The version of the payload running in the Collector VM
     * 
     */
    public Output<String> sapMonitorCollectorVersion() {
        return this.sapMonitorCollectorVersion;
    }
    /**
     * Resource tags.
     * 
     */
    @Export(name="tags", type=Map.class, parameters={String.class, String.class})
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return Resource tags.
     * 
     */
    public Output</* @Nullable */ Map<String,String>> tags() {
        return this.tags;
    }
    /**
     * The type of the resource. E.g. &#34;Microsoft.Compute/virtualMachines&#34; or &#34;Microsoft.Storage/storageAccounts&#34;
     * 
     */
    @Export(name="type", type=String.class, parameters={})
    private Output<String> type;

    /**
     * @return The type of the resource. E.g. &#34;Microsoft.Compute/virtualMachines&#34; or &#34;Microsoft.Storage/storageAccounts&#34;
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public SapMonitor(String name) {
        this(name, SapMonitorArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public SapMonitor(String name, SapMonitorArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public SapMonitor(String name, SapMonitorArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:hanaonazure:SapMonitor", name, args == null ? SapMonitorArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private SapMonitor(String name, Output<String> id, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("azure-native:hanaonazure:SapMonitor", name, null, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .aliases(List.of(
                Output.of(Alias.builder().type("azure-native:hanaonazure/v20200207preview:SapMonitor").build())
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static SapMonitor get(String name, Output<String> id, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new SapMonitor(name, id, options);
    }
}
