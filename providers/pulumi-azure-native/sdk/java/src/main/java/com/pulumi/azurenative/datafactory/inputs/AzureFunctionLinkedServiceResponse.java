// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.azurenative.datafactory.inputs.AzureKeyVaultSecretReferenceResponse;
import com.pulumi.azurenative.datafactory.inputs.CredentialReferenceResponse;
import com.pulumi.azurenative.datafactory.inputs.IntegrationRuntimeReferenceResponse;
import com.pulumi.azurenative.datafactory.inputs.ParameterSpecificationResponse;
import com.pulumi.azurenative.datafactory.inputs.SecureStringResponse;
import com.pulumi.core.Either;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Azure Function linked service.
 * 
 */
public final class AzureFunctionLinkedServiceResponse extends com.pulumi.resources.InvokeArgs {

    public static final AzureFunctionLinkedServiceResponse Empty = new AzureFunctionLinkedServiceResponse();

    /**
     * List of tags that can be used for describing the linked service.
     * 
     */
    @Import(name="annotations")
    private @Nullable List<Object> annotations;

    public Optional<List<Object>> annotations() {
        return Optional.ofNullable(this.annotations);
    }

    /**
     * Type of authentication (Required to specify MSI) used to connect to AzureFunction. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="authentication")
    private @Nullable Object authentication;

    public Optional<Object> authentication() {
        return Optional.ofNullable(this.authentication);
    }

    /**
     * The integration runtime reference.
     * 
     */
    @Import(name="connectVia")
    private @Nullable IntegrationRuntimeReferenceResponse connectVia;

    public Optional<IntegrationRuntimeReferenceResponse> connectVia() {
        return Optional.ofNullable(this.connectVia);
    }

    /**
     * The credential reference containing authentication information.
     * 
     */
    @Import(name="credential")
    private @Nullable CredentialReferenceResponse credential;

    public Optional<CredentialReferenceResponse> credential() {
        return Optional.ofNullable(this.credential);
    }

    /**
     * Linked service description.
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="encryptedCredential")
    private @Nullable Object encryptedCredential;

    public Optional<Object> encryptedCredential() {
        return Optional.ofNullable(this.encryptedCredential);
    }

    /**
     * The endpoint of the Azure Function App. URL will be in the format https://&lt;accountName&gt;.azurewebsites.net.
     * 
     */
    @Import(name="functionAppUrl", required=true)
    private Object functionAppUrl;

    public Object functionAppUrl() {
        return this.functionAppUrl;
    }

    /**
     * Function or Host key for Azure Function App.
     * 
     */
    @Import(name="functionKey")
    private @Nullable Either<AzureKeyVaultSecretReferenceResponse,SecureStringResponse> functionKey;

    public Optional<Either<AzureKeyVaultSecretReferenceResponse,SecureStringResponse>> functionKey() {
        return Optional.ofNullable(this.functionKey);
    }

    /**
     * Parameters for linked service.
     * 
     */
    @Import(name="parameters")
    private @Nullable Map<String,ParameterSpecificationResponse> parameters;

    public Optional<Map<String,ParameterSpecificationResponse>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    /**
     * Allowed token audiences for azure function.
     * 
     */
    @Import(name="resourceId")
    private @Nullable Object resourceId;

    public Optional<Object> resourceId() {
        return Optional.ofNullable(this.resourceId);
    }

    /**
     * Type of linked service.
     * Expected value is &#39;AzureFunction&#39;.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    public String type() {
        return this.type;
    }

    private AzureFunctionLinkedServiceResponse() {}

    private AzureFunctionLinkedServiceResponse(AzureFunctionLinkedServiceResponse $) {
        this.annotations = $.annotations;
        this.authentication = $.authentication;
        this.connectVia = $.connectVia;
        this.credential = $.credential;
        this.description = $.description;
        this.encryptedCredential = $.encryptedCredential;
        this.functionAppUrl = $.functionAppUrl;
        this.functionKey = $.functionKey;
        this.parameters = $.parameters;
        this.resourceId = $.resourceId;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AzureFunctionLinkedServiceResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AzureFunctionLinkedServiceResponse $;

        public Builder() {
            $ = new AzureFunctionLinkedServiceResponse();
        }

        public Builder(AzureFunctionLinkedServiceResponse defaults) {
            $ = new AzureFunctionLinkedServiceResponse(Objects.requireNonNull(defaults));
        }

        public Builder annotations(@Nullable List<Object> annotations) {
            $.annotations = annotations;
            return this;
        }

        public Builder annotations(Object... annotations) {
            return annotations(List.of(annotations));
        }

        public Builder authentication(@Nullable Object authentication) {
            $.authentication = authentication;
            return this;
        }

        public Builder connectVia(@Nullable IntegrationRuntimeReferenceResponse connectVia) {
            $.connectVia = connectVia;
            return this;
        }

        public Builder credential(@Nullable CredentialReferenceResponse credential) {
            $.credential = credential;
            return this;
        }

        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        public Builder encryptedCredential(@Nullable Object encryptedCredential) {
            $.encryptedCredential = encryptedCredential;
            return this;
        }

        public Builder functionAppUrl(Object functionAppUrl) {
            $.functionAppUrl = functionAppUrl;
            return this;
        }

        public Builder functionKey(@Nullable Either<AzureKeyVaultSecretReferenceResponse,SecureStringResponse> functionKey) {
            $.functionKey = functionKey;
            return this;
        }

        public Builder parameters(@Nullable Map<String,ParameterSpecificationResponse> parameters) {
            $.parameters = parameters;
            return this;
        }

        public Builder resourceId(@Nullable Object resourceId) {
            $.resourceId = resourceId;
            return this;
        }

        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public AzureFunctionLinkedServiceResponse build() {
            $.functionAppUrl = Objects.requireNonNull($.functionAppUrl, "expected parameter 'functionAppUrl' to be non-null");
            $.type = Codegen.stringProp("type").arg($.type).require();
            return $;
        }
    }

}
