// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.web.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The configuration settings of the checks that should be made while validating the JWT Claims.
 * 
 */
public final class JwtClaimChecksArgs extends com.pulumi.resources.ResourceArgs {

    public static final JwtClaimChecksArgs Empty = new JwtClaimChecksArgs();

    /**
     * The list of the allowed client applications.
     * 
     */
    @Import(name="allowedClientApplications")
    private @Nullable Output<List<String>> allowedClientApplications;

    /**
     * @return The list of the allowed client applications.
     * 
     */
    public Optional<Output<List<String>>> allowedClientApplications() {
        return Optional.ofNullable(this.allowedClientApplications);
    }

    /**
     * The list of the allowed groups.
     * 
     */
    @Import(name="allowedGroups")
    private @Nullable Output<List<String>> allowedGroups;

    /**
     * @return The list of the allowed groups.
     * 
     */
    public Optional<Output<List<String>>> allowedGroups() {
        return Optional.ofNullable(this.allowedGroups);
    }

    private JwtClaimChecksArgs() {}

    private JwtClaimChecksArgs(JwtClaimChecksArgs $) {
        this.allowedClientApplications = $.allowedClientApplications;
        this.allowedGroups = $.allowedGroups;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(JwtClaimChecksArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private JwtClaimChecksArgs $;

        public Builder() {
            $ = new JwtClaimChecksArgs();
        }

        public Builder(JwtClaimChecksArgs defaults) {
            $ = new JwtClaimChecksArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowedClientApplications The list of the allowed client applications.
         * 
         * @return builder
         * 
         */
        public Builder allowedClientApplications(@Nullable Output<List<String>> allowedClientApplications) {
            $.allowedClientApplications = allowedClientApplications;
            return this;
        }

        /**
         * @param allowedClientApplications The list of the allowed client applications.
         * 
         * @return builder
         * 
         */
        public Builder allowedClientApplications(List<String> allowedClientApplications) {
            return allowedClientApplications(Output.of(allowedClientApplications));
        }

        /**
         * @param allowedClientApplications The list of the allowed client applications.
         * 
         * @return builder
         * 
         */
        public Builder allowedClientApplications(String... allowedClientApplications) {
            return allowedClientApplications(List.of(allowedClientApplications));
        }

        /**
         * @param allowedGroups The list of the allowed groups.
         * 
         * @return builder
         * 
         */
        public Builder allowedGroups(@Nullable Output<List<String>> allowedGroups) {
            $.allowedGroups = allowedGroups;
            return this;
        }

        /**
         * @param allowedGroups The list of the allowed groups.
         * 
         * @return builder
         * 
         */
        public Builder allowedGroups(List<String> allowedGroups) {
            return allowedGroups(Output.of(allowedGroups));
        }

        /**
         * @param allowedGroups The list of the allowed groups.
         * 
         * @return builder
         * 
         */
        public Builder allowedGroups(String... allowedGroups) {
            return allowedGroups(List.of(allowedGroups));
        }

        public JwtClaimChecksArgs build() {
            return $;
        }
    }

}
