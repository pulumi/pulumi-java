// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.storagepool;

import com.pulumi.azurenative.storagepool.enums.DiskPoolTier;
import com.pulumi.azurenative.storagepool.inputs.DiskArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DiskPoolArgs extends com.pulumi.resources.ResourceArgs {

    public static final DiskPoolArgs Empty = new DiskPoolArgs();

    /**
     * List of additional capabilities for a Disk pool.
     * 
     */
    @Import(name="additionalCapabilities")
    private @Nullable Output<List<String>> additionalCapabilities;

    /**
     * @return List of additional capabilities for a Disk pool.
     * 
     */
    public Optional<Output<List<String>>> additionalCapabilities() {
        return Optional.ofNullable(this.additionalCapabilities);
    }

    /**
     * Logical zone for Disk pool resource; example: [&#34;1&#34;].
     * 
     */
    @Import(name="availabilityZones", required=true)
    private Output<List<String>> availabilityZones;

    /**
     * @return Logical zone for Disk pool resource; example: [&#34;1&#34;].
     * 
     */
    public Output<List<String>> availabilityZones() {
        return this.availabilityZones;
    }

    /**
     * The name of the Disk pool.
     * 
     */
    @Import(name="diskPoolName")
    private @Nullable Output<String> diskPoolName;

    /**
     * @return The name of the Disk pool.
     * 
     */
    public Optional<Output<String>> diskPoolName() {
        return Optional.ofNullable(this.diskPoolName);
    }

    /**
     * List of Azure Managed Disks to attach to a Disk pool. Can attach 8 disks at most.
     * 
     */
    @Import(name="disks")
    private @Nullable Output<List<DiskArgs>> disks;

    /**
     * @return List of Azure Managed Disks to attach to a Disk pool. Can attach 8 disks at most.
     * 
     */
    public Optional<Output<List<DiskArgs>>> disks() {
        return Optional.ofNullable(this.disks);
    }

    /**
     * The geo-location where the resource lives.
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return The geo-location where the resource lives.
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name of the resource group. The name is case insensitive.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group. The name is case insensitive.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Azure Resource ID of a Subnet for the Disk pool.
     * 
     */
    @Import(name="subnetId", required=true)
    private Output<String> subnetId;

    /**
     * @return Azure Resource ID of a Subnet for the Disk pool.
     * 
     */
    public Output<String> subnetId() {
        return this.subnetId;
    }

    /**
     * Resource tags.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Resource tags.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Determines the SKU of VM deployed for Disk pool
     * 
     */
    @Import(name="tier", required=true)
    private Output<Either<String,DiskPoolTier>> tier;

    /**
     * @return Determines the SKU of VM deployed for Disk pool
     * 
     */
    public Output<Either<String,DiskPoolTier>> tier() {
        return this.tier;
    }

    private DiskPoolArgs() {}

    private DiskPoolArgs(DiskPoolArgs $) {
        this.additionalCapabilities = $.additionalCapabilities;
        this.availabilityZones = $.availabilityZones;
        this.diskPoolName = $.diskPoolName;
        this.disks = $.disks;
        this.location = $.location;
        this.resourceGroupName = $.resourceGroupName;
        this.subnetId = $.subnetId;
        this.tags = $.tags;
        this.tier = $.tier;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DiskPoolArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DiskPoolArgs $;

        public Builder() {
            $ = new DiskPoolArgs();
        }

        public Builder(DiskPoolArgs defaults) {
            $ = new DiskPoolArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param additionalCapabilities List of additional capabilities for a Disk pool.
         * 
         * @return builder
         * 
         */
        public Builder additionalCapabilities(@Nullable Output<List<String>> additionalCapabilities) {
            $.additionalCapabilities = additionalCapabilities;
            return this;
        }

        /**
         * @param additionalCapabilities List of additional capabilities for a Disk pool.
         * 
         * @return builder
         * 
         */
        public Builder additionalCapabilities(List<String> additionalCapabilities) {
            return additionalCapabilities(Output.of(additionalCapabilities));
        }

        /**
         * @param additionalCapabilities List of additional capabilities for a Disk pool.
         * 
         * @return builder
         * 
         */
        public Builder additionalCapabilities(String... additionalCapabilities) {
            return additionalCapabilities(List.of(additionalCapabilities));
        }

        /**
         * @param availabilityZones Logical zone for Disk pool resource; example: [&#34;1&#34;].
         * 
         * @return builder
         * 
         */
        public Builder availabilityZones(Output<List<String>> availabilityZones) {
            $.availabilityZones = availabilityZones;
            return this;
        }

        /**
         * @param availabilityZones Logical zone for Disk pool resource; example: [&#34;1&#34;].
         * 
         * @return builder
         * 
         */
        public Builder availabilityZones(List<String> availabilityZones) {
            return availabilityZones(Output.of(availabilityZones));
        }

        /**
         * @param availabilityZones Logical zone for Disk pool resource; example: [&#34;1&#34;].
         * 
         * @return builder
         * 
         */
        public Builder availabilityZones(String... availabilityZones) {
            return availabilityZones(List.of(availabilityZones));
        }

        /**
         * @param diskPoolName The name of the Disk pool.
         * 
         * @return builder
         * 
         */
        public Builder diskPoolName(@Nullable Output<String> diskPoolName) {
            $.diskPoolName = diskPoolName;
            return this;
        }

        /**
         * @param diskPoolName The name of the Disk pool.
         * 
         * @return builder
         * 
         */
        public Builder diskPoolName(String diskPoolName) {
            return diskPoolName(Output.of(diskPoolName));
        }

        /**
         * @param disks List of Azure Managed Disks to attach to a Disk pool. Can attach 8 disks at most.
         * 
         * @return builder
         * 
         */
        public Builder disks(@Nullable Output<List<DiskArgs>> disks) {
            $.disks = disks;
            return this;
        }

        /**
         * @param disks List of Azure Managed Disks to attach to a Disk pool. Can attach 8 disks at most.
         * 
         * @return builder
         * 
         */
        public Builder disks(List<DiskArgs> disks) {
            return disks(Output.of(disks));
        }

        /**
         * @param disks List of Azure Managed Disks to attach to a Disk pool. Can attach 8 disks at most.
         * 
         * @return builder
         * 
         */
        public Builder disks(DiskArgs... disks) {
            return disks(List.of(disks));
        }

        /**
         * @param location The geo-location where the resource lives.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location The geo-location where the resource lives.
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param subnetId Azure Resource ID of a Subnet for the Disk pool.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(Output<String> subnetId) {
            $.subnetId = subnetId;
            return this;
        }

        /**
         * @param subnetId Azure Resource ID of a Subnet for the Disk pool.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(String subnetId) {
            return subnetId(Output.of(subnetId));
        }

        /**
         * @param tags Resource tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Resource tags.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tier Determines the SKU of VM deployed for Disk pool
         * 
         * @return builder
         * 
         */
        public Builder tier(Output<Either<String,DiskPoolTier>> tier) {
            $.tier = tier;
            return this;
        }

        /**
         * @param tier Determines the SKU of VM deployed for Disk pool
         * 
         * @return builder
         * 
         */
        public Builder tier(Either<String,DiskPoolTier> tier) {
            return tier(Output.of(tier));
        }

        /**
         * @param tier Determines the SKU of VM deployed for Disk pool
         * 
         * @return builder
         * 
         */
        public Builder tier(String tier) {
            return tier(Either.ofLeft(tier));
        }

        /**
         * @param tier Determines the SKU of VM deployed for Disk pool
         * 
         * @return builder
         * 
         */
        public Builder tier(DiskPoolTier tier) {
            return tier(Either.ofRight(tier));
        }

        public DiskPoolArgs build() {
            $.availabilityZones = Objects.requireNonNull($.availabilityZones, "expected parameter 'availabilityZones' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.subnetId = Objects.requireNonNull($.subnetId, "expected parameter 'subnetId' to be non-null");
            $.tier = Objects.requireNonNull($.tier, "expected parameter 'tier' to be non-null");
            return $;
        }
    }

}
