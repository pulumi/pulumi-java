// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.servicefabric.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Describes the named partition scheme of the service.
 * 
 */
public final class NamedPartitionSchemeDescriptionResponse extends com.pulumi.resources.InvokeArgs {

    public static final NamedPartitionSchemeDescriptionResponse Empty = new NamedPartitionSchemeDescriptionResponse();

    /**
     * The number of partitions.
     * 
     */
    @Import(name="count", required=true)
    private Integer count;

    public Integer count() {
        return this.count;
    }

    /**
     * Array of size specified by the ‘count’ parameter, for the names of the partitions.
     * 
     */
    @Import(name="names", required=true)
    private List<String> names;

    public List<String> names() {
        return this.names;
    }

    /**
     * Enumerates the ways that a service can be partitioned.
     * Expected value is &#39;Named&#39;.
     * 
     */
    @Import(name="partitionScheme", required=true)
    private String partitionScheme;

    public String partitionScheme() {
        return this.partitionScheme;
    }

    private NamedPartitionSchemeDescriptionResponse() {}

    private NamedPartitionSchemeDescriptionResponse(NamedPartitionSchemeDescriptionResponse $) {
        this.count = $.count;
        this.names = $.names;
        this.partitionScheme = $.partitionScheme;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NamedPartitionSchemeDescriptionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NamedPartitionSchemeDescriptionResponse $;

        public Builder() {
            $ = new NamedPartitionSchemeDescriptionResponse();
        }

        public Builder(NamedPartitionSchemeDescriptionResponse defaults) {
            $ = new NamedPartitionSchemeDescriptionResponse(Objects.requireNonNull(defaults));
        }

        public Builder count(Integer count) {
            $.count = count;
            return this;
        }

        public Builder names(List<String> names) {
            $.names = names;
            return this;
        }

        public Builder names(String... names) {
            return names(List.of(names));
        }

        public Builder partitionScheme(String partitionScheme) {
            $.partitionScheme = partitionScheme;
            return this;
        }

        public NamedPartitionSchemeDescriptionResponse build() {
            $.count = Objects.requireNonNull($.count, "expected parameter 'count' to be non-null");
            $.names = Objects.requireNonNull($.names, "expected parameter 'names' to be non-null");
            $.partitionScheme = Codegen.stringProp("partitionScheme").arg($.partitionScheme).require();
            return $;
        }
    }

}
