// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.customerinsights.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


/**
 * The participant property reference.
 * 
 */
public final class ParticipantPropertyReferenceArgs extends com.pulumi.resources.ResourceArgs {

    public static final ParticipantPropertyReferenceArgs Empty = new ParticipantPropertyReferenceArgs();

    /**
     * The source property that maps to the target property.
     * 
     */
    @Import(name="sourcePropertyName", required=true)
    private Output<String> sourcePropertyName;

    public Output<String> sourcePropertyName() {
        return this.sourcePropertyName;
    }

    /**
     * The target property that maps to the source property.
     * 
     */
    @Import(name="targetPropertyName", required=true)
    private Output<String> targetPropertyName;

    public Output<String> targetPropertyName() {
        return this.targetPropertyName;
    }

    private ParticipantPropertyReferenceArgs() {}

    private ParticipantPropertyReferenceArgs(ParticipantPropertyReferenceArgs $) {
        this.sourcePropertyName = $.sourcePropertyName;
        this.targetPropertyName = $.targetPropertyName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ParticipantPropertyReferenceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ParticipantPropertyReferenceArgs $;

        public Builder() {
            $ = new ParticipantPropertyReferenceArgs();
        }

        public Builder(ParticipantPropertyReferenceArgs defaults) {
            $ = new ParticipantPropertyReferenceArgs(Objects.requireNonNull(defaults));
        }

        public Builder sourcePropertyName(Output<String> sourcePropertyName) {
            $.sourcePropertyName = sourcePropertyName;
            return this;
        }

        public Builder sourcePropertyName(String sourcePropertyName) {
            return sourcePropertyName(Output.of(sourcePropertyName));
        }

        public Builder targetPropertyName(Output<String> targetPropertyName) {
            $.targetPropertyName = targetPropertyName;
            return this;
        }

        public Builder targetPropertyName(String targetPropertyName) {
            return targetPropertyName(Output.of(targetPropertyName));
        }

        public ParticipantPropertyReferenceArgs build() {
            $.sourcePropertyName = Objects.requireNonNull($.sourcePropertyName, "expected parameter 'sourcePropertyName' to be non-null");
            $.targetPropertyName = Objects.requireNonNull($.targetPropertyName, "expected parameter 'targetPropertyName' to be non-null");
            return $;
        }
    }

}
