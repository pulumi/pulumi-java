// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.devtestlab.inputs;

import com.pulumi.azurenative.devtestlab.inputs.ArtifactInstallPropertiesResponse;
import com.pulumi.azurenative.devtestlab.inputs.BulkCreationParametersResponse;
import com.pulumi.azurenative.devtestlab.inputs.DataDiskPropertiesResponse;
import com.pulumi.azurenative.devtestlab.inputs.GalleryImageReferenceResponse;
import com.pulumi.azurenative.devtestlab.inputs.NetworkInterfacePropertiesResponse;
import com.pulumi.azurenative.devtestlab.inputs.ScheduleCreationParameterResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Properties for creating a virtual machine.
 * 
 */
public final class LabVirtualMachineCreationParameterResponse extends com.pulumi.resources.InvokeArgs {

    public static final LabVirtualMachineCreationParameterResponse Empty = new LabVirtualMachineCreationParameterResponse();

    /**
     * Indicates whether another user can take ownership of the virtual machine
     * 
     */
    @Import(name="allowClaim")
    private @Nullable Boolean allowClaim;

    public Optional<Boolean> allowClaim() {
        return Optional.ofNullable(this.allowClaim);
    }

    /**
     * The artifacts to be installed on the virtual machine.
     * 
     */
    @Import(name="artifacts")
    private @Nullable List<ArtifactInstallPropertiesResponse> artifacts;

    public Optional<List<ArtifactInstallPropertiesResponse>> artifacts() {
        return Optional.ofNullable(this.artifacts);
    }

    /**
     * The number of virtual machine instances to create.
     * 
     */
    @Import(name="bulkCreationParameters")
    private @Nullable BulkCreationParametersResponse bulkCreationParameters;

    public Optional<BulkCreationParametersResponse> bulkCreationParameters() {
        return Optional.ofNullable(this.bulkCreationParameters);
    }

    /**
     * The creation date of the virtual machine.
     * 
     */
    @Import(name="createdDate")
    private @Nullable String createdDate;

    public Optional<String> createdDate() {
        return Optional.ofNullable(this.createdDate);
    }

    /**
     * The custom image identifier of the virtual machine.
     * 
     */
    @Import(name="customImageId")
    private @Nullable String customImageId;

    public Optional<String> customImageId() {
        return Optional.ofNullable(this.customImageId);
    }

    /**
     * New or existing data disks to attach to the virtual machine after creation
     * 
     */
    @Import(name="dataDiskParameters")
    private @Nullable List<DataDiskPropertiesResponse> dataDiskParameters;

    public Optional<List<DataDiskPropertiesResponse>> dataDiskParameters() {
        return Optional.ofNullable(this.dataDiskParameters);
    }

    /**
     * Indicates whether the virtual machine is to be created without a public IP address.
     * 
     */
    @Import(name="disallowPublicIpAddress")
    private @Nullable Boolean disallowPublicIpAddress;

    public Optional<Boolean> disallowPublicIpAddress() {
        return Optional.ofNullable(this.disallowPublicIpAddress);
    }

    /**
     * The resource ID of the environment that contains this virtual machine, if any.
     * 
     */
    @Import(name="environmentId")
    private @Nullable String environmentId;

    public Optional<String> environmentId() {
        return Optional.ofNullable(this.environmentId);
    }

    /**
     * The expiration date for VM.
     * 
     */
    @Import(name="expirationDate")
    private @Nullable String expirationDate;

    public Optional<String> expirationDate() {
        return Optional.ofNullable(this.expirationDate);
    }

    /**
     * The Microsoft Azure Marketplace image reference of the virtual machine.
     * 
     */
    @Import(name="galleryImageReference")
    private @Nullable GalleryImageReferenceResponse galleryImageReference;

    public Optional<GalleryImageReferenceResponse> galleryImageReference() {
        return Optional.ofNullable(this.galleryImageReference);
    }

    /**
     * Indicates whether this virtual machine uses an SSH key for authentication.
     * 
     */
    @Import(name="isAuthenticationWithSshKey")
    private @Nullable Boolean isAuthenticationWithSshKey;

    public Optional<Boolean> isAuthenticationWithSshKey() {
        return Optional.ofNullable(this.isAuthenticationWithSshKey);
    }

    /**
     * The lab subnet name of the virtual machine.
     * 
     */
    @Import(name="labSubnetName")
    private @Nullable String labSubnetName;

    public Optional<String> labSubnetName() {
        return Optional.ofNullable(this.labSubnetName);
    }

    /**
     * The lab virtual network identifier of the virtual machine.
     * 
     */
    @Import(name="labVirtualNetworkId")
    private @Nullable String labVirtualNetworkId;

    public Optional<String> labVirtualNetworkId() {
        return Optional.ofNullable(this.labVirtualNetworkId);
    }

    /**
     * The location of the new virtual machine or environment
     * 
     */
    @Import(name="location")
    private @Nullable String location;

    public Optional<String> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name of the virtual machine or environment
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The network interface properties.
     * 
     */
    @Import(name="networkInterface")
    private @Nullable NetworkInterfacePropertiesResponse networkInterface;

    public Optional<NetworkInterfacePropertiesResponse> networkInterface() {
        return Optional.ofNullable(this.networkInterface);
    }

    /**
     * The notes of the virtual machine.
     * 
     */
    @Import(name="notes")
    private @Nullable String notes;

    public Optional<String> notes() {
        return Optional.ofNullable(this.notes);
    }

    /**
     * The object identifier of the owner of the virtual machine.
     * 
     */
    @Import(name="ownerObjectId")
    private @Nullable String ownerObjectId;

    public Optional<String> ownerObjectId() {
        return Optional.ofNullable(this.ownerObjectId);
    }

    /**
     * The user principal name of the virtual machine owner.
     * 
     */
    @Import(name="ownerUserPrincipalName")
    private @Nullable String ownerUserPrincipalName;

    public Optional<String> ownerUserPrincipalName() {
        return Optional.ofNullable(this.ownerUserPrincipalName);
    }

    /**
     * The password of the virtual machine administrator.
     * 
     */
    @Import(name="password")
    private @Nullable String password;

    public Optional<String> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * The id of the plan associated with the virtual machine image
     * 
     */
    @Import(name="planId")
    private @Nullable String planId;

    public Optional<String> planId() {
        return Optional.ofNullable(this.planId);
    }

    /**
     * Virtual Machine schedules to be created
     * 
     */
    @Import(name="scheduleParameters")
    private @Nullable List<ScheduleCreationParameterResponse> scheduleParameters;

    public Optional<List<ScheduleCreationParameterResponse>> scheduleParameters() {
        return Optional.ofNullable(this.scheduleParameters);
    }

    /**
     * The size of the virtual machine.
     * 
     */
    @Import(name="size")
    private @Nullable String size;

    public Optional<String> size() {
        return Optional.ofNullable(this.size);
    }

    /**
     * The SSH key of the virtual machine administrator.
     * 
     */
    @Import(name="sshKey")
    private @Nullable String sshKey;

    public Optional<String> sshKey() {
        return Optional.ofNullable(this.sshKey);
    }

    /**
     * Storage type to use for virtual machine (i.e. Standard, Premium).
     * 
     */
    @Import(name="storageType")
    private @Nullable String storageType;

    public Optional<String> storageType() {
        return Optional.ofNullable(this.storageType);
    }

    /**
     * The tags of the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Map<String,String> tags;

    public Optional<Map<String,String>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The user name of the virtual machine.
     * 
     */
    @Import(name="userName")
    private @Nullable String userName;

    public Optional<String> userName() {
        return Optional.ofNullable(this.userName);
    }

    private LabVirtualMachineCreationParameterResponse() {}

    private LabVirtualMachineCreationParameterResponse(LabVirtualMachineCreationParameterResponse $) {
        this.allowClaim = $.allowClaim;
        this.artifacts = $.artifacts;
        this.bulkCreationParameters = $.bulkCreationParameters;
        this.createdDate = $.createdDate;
        this.customImageId = $.customImageId;
        this.dataDiskParameters = $.dataDiskParameters;
        this.disallowPublicIpAddress = $.disallowPublicIpAddress;
        this.environmentId = $.environmentId;
        this.expirationDate = $.expirationDate;
        this.galleryImageReference = $.galleryImageReference;
        this.isAuthenticationWithSshKey = $.isAuthenticationWithSshKey;
        this.labSubnetName = $.labSubnetName;
        this.labVirtualNetworkId = $.labVirtualNetworkId;
        this.location = $.location;
        this.name = $.name;
        this.networkInterface = $.networkInterface;
        this.notes = $.notes;
        this.ownerObjectId = $.ownerObjectId;
        this.ownerUserPrincipalName = $.ownerUserPrincipalName;
        this.password = $.password;
        this.planId = $.planId;
        this.scheduleParameters = $.scheduleParameters;
        this.size = $.size;
        this.sshKey = $.sshKey;
        this.storageType = $.storageType;
        this.tags = $.tags;
        this.userName = $.userName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LabVirtualMachineCreationParameterResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LabVirtualMachineCreationParameterResponse $;

        public Builder() {
            $ = new LabVirtualMachineCreationParameterResponse();
        }

        public Builder(LabVirtualMachineCreationParameterResponse defaults) {
            $ = new LabVirtualMachineCreationParameterResponse(Objects.requireNonNull(defaults));
        }

        public Builder allowClaim(@Nullable Boolean allowClaim) {
            $.allowClaim = allowClaim;
            return this;
        }

        public Builder artifacts(@Nullable List<ArtifactInstallPropertiesResponse> artifacts) {
            $.artifacts = artifacts;
            return this;
        }

        public Builder artifacts(ArtifactInstallPropertiesResponse... artifacts) {
            return artifacts(List.of(artifacts));
        }

        public Builder bulkCreationParameters(@Nullable BulkCreationParametersResponse bulkCreationParameters) {
            $.bulkCreationParameters = bulkCreationParameters;
            return this;
        }

        public Builder createdDate(@Nullable String createdDate) {
            $.createdDate = createdDate;
            return this;
        }

        public Builder customImageId(@Nullable String customImageId) {
            $.customImageId = customImageId;
            return this;
        }

        public Builder dataDiskParameters(@Nullable List<DataDiskPropertiesResponse> dataDiskParameters) {
            $.dataDiskParameters = dataDiskParameters;
            return this;
        }

        public Builder dataDiskParameters(DataDiskPropertiesResponse... dataDiskParameters) {
            return dataDiskParameters(List.of(dataDiskParameters));
        }

        public Builder disallowPublicIpAddress(@Nullable Boolean disallowPublicIpAddress) {
            $.disallowPublicIpAddress = disallowPublicIpAddress;
            return this;
        }

        public Builder environmentId(@Nullable String environmentId) {
            $.environmentId = environmentId;
            return this;
        }

        public Builder expirationDate(@Nullable String expirationDate) {
            $.expirationDate = expirationDate;
            return this;
        }

        public Builder galleryImageReference(@Nullable GalleryImageReferenceResponse galleryImageReference) {
            $.galleryImageReference = galleryImageReference;
            return this;
        }

        public Builder isAuthenticationWithSshKey(@Nullable Boolean isAuthenticationWithSshKey) {
            $.isAuthenticationWithSshKey = isAuthenticationWithSshKey;
            return this;
        }

        public Builder labSubnetName(@Nullable String labSubnetName) {
            $.labSubnetName = labSubnetName;
            return this;
        }

        public Builder labVirtualNetworkId(@Nullable String labVirtualNetworkId) {
            $.labVirtualNetworkId = labVirtualNetworkId;
            return this;
        }

        public Builder location(@Nullable String location) {
            $.location = location;
            return this;
        }

        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        public Builder networkInterface(@Nullable NetworkInterfacePropertiesResponse networkInterface) {
            $.networkInterface = networkInterface;
            return this;
        }

        public Builder notes(@Nullable String notes) {
            $.notes = notes;
            return this;
        }

        public Builder ownerObjectId(@Nullable String ownerObjectId) {
            $.ownerObjectId = ownerObjectId;
            return this;
        }

        public Builder ownerUserPrincipalName(@Nullable String ownerUserPrincipalName) {
            $.ownerUserPrincipalName = ownerUserPrincipalName;
            return this;
        }

        public Builder password(@Nullable String password) {
            $.password = password;
            return this;
        }

        public Builder planId(@Nullable String planId) {
            $.planId = planId;
            return this;
        }

        public Builder scheduleParameters(@Nullable List<ScheduleCreationParameterResponse> scheduleParameters) {
            $.scheduleParameters = scheduleParameters;
            return this;
        }

        public Builder scheduleParameters(ScheduleCreationParameterResponse... scheduleParameters) {
            return scheduleParameters(List.of(scheduleParameters));
        }

        public Builder size(@Nullable String size) {
            $.size = size;
            return this;
        }

        public Builder sshKey(@Nullable String sshKey) {
            $.sshKey = sshKey;
            return this;
        }

        public Builder storageType(@Nullable String storageType) {
            $.storageType = storageType;
            return this;
        }

        public Builder tags(@Nullable Map<String,String> tags) {
            $.tags = tags;
            return this;
        }

        public Builder userName(@Nullable String userName) {
            $.userName = userName;
            return this;
        }

        public LabVirtualMachineCreationParameterResponse build() {
            $.allowClaim = Codegen.booleanProp("allowClaim").arg($.allowClaim).def(false).getNullable();
            $.disallowPublicIpAddress = Codegen.booleanProp("disallowPublicIpAddress").arg($.disallowPublicIpAddress).def(false).getNullable();
            $.ownerObjectId = Codegen.stringProp("ownerObjectId").arg($.ownerObjectId).def("dynamicValue").getNullable();
            $.storageType = Codegen.stringProp("storageType").arg($.storageType).def("labStorageType").getNullable();
            return $;
        }
    }

}
