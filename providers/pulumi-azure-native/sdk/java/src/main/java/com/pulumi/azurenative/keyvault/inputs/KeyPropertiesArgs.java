// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.keyvault.inputs;

import com.pulumi.azurenative.keyvault.enums.JsonWebKeyCurveName;
import com.pulumi.azurenative.keyvault.enums.JsonWebKeyOperation;
import com.pulumi.azurenative.keyvault.enums.JsonWebKeyType;
import com.pulumi.azurenative.keyvault.inputs.KeyAttributesArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The properties of the key.
 * 
 */
public final class KeyPropertiesArgs extends com.pulumi.resources.ResourceArgs {

    public static final KeyPropertiesArgs Empty = new KeyPropertiesArgs();

    /**
     * The attributes of the key.
     * 
     */
    @Import(name="attributes")
    private @Nullable Output<KeyAttributesArgs> attributes;

    public Optional<Output<KeyAttributesArgs>> attributes() {
        return Optional.ofNullable(this.attributes);
    }

    /**
     * The elliptic curve name. For valid values, see JsonWebKeyCurveName.
     * 
     */
    @Import(name="curveName")
    private @Nullable Output<Either<String,JsonWebKeyCurveName>> curveName;

    public Optional<Output<Either<String,JsonWebKeyCurveName>>> curveName() {
        return Optional.ofNullable(this.curveName);
    }

    @Import(name="keyOps")
    private @Nullable Output<List<Either<String,JsonWebKeyOperation>>> keyOps;

    public Optional<Output<List<Either<String,JsonWebKeyOperation>>>> keyOps() {
        return Optional.ofNullable(this.keyOps);
    }

    /**
     * The key size in bits. For example: 2048, 3072, or 4096 for RSA.
     * 
     */
    @Import(name="keySize")
    private @Nullable Output<Integer> keySize;

    public Optional<Output<Integer>> keySize() {
        return Optional.ofNullable(this.keySize);
    }

    /**
     * The type of the key. For valid values, see JsonWebKeyType.
     * 
     */
    @Import(name="kty")
    private @Nullable Output<Either<String,JsonWebKeyType>> kty;

    public Optional<Output<Either<String,JsonWebKeyType>>> kty() {
        return Optional.ofNullable(this.kty);
    }

    private KeyPropertiesArgs() {}

    private KeyPropertiesArgs(KeyPropertiesArgs $) {
        this.attributes = $.attributes;
        this.curveName = $.curveName;
        this.keyOps = $.keyOps;
        this.keySize = $.keySize;
        this.kty = $.kty;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KeyPropertiesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KeyPropertiesArgs $;

        public Builder() {
            $ = new KeyPropertiesArgs();
        }

        public Builder(KeyPropertiesArgs defaults) {
            $ = new KeyPropertiesArgs(Objects.requireNonNull(defaults));
        }

        public Builder attributes(@Nullable Output<KeyAttributesArgs> attributes) {
            $.attributes = attributes;
            return this;
        }

        public Builder attributes(KeyAttributesArgs attributes) {
            return attributes(Output.of(attributes));
        }

        public Builder curveName(@Nullable Output<Either<String,JsonWebKeyCurveName>> curveName) {
            $.curveName = curveName;
            return this;
        }

        public Builder curveName(Either<String,JsonWebKeyCurveName> curveName) {
            return curveName(Output.of(curveName));
        }

        public Builder curveName(String curveName) {
            return curveName(Either.ofLeft(curveName));
        }

        public Builder curveName(JsonWebKeyCurveName curveName) {
            return curveName(Either.ofRight(curveName));
        }

        public Builder keyOps(@Nullable Output<List<Either<String,JsonWebKeyOperation>>> keyOps) {
            $.keyOps = keyOps;
            return this;
        }

        public Builder keyOps(List<Either<String,JsonWebKeyOperation>> keyOps) {
            return keyOps(Output.of(keyOps));
        }

        public Builder keyOps(Either<String,JsonWebKeyOperation>... keyOps) {
            return keyOps(List.of(keyOps));
        }

        public Builder keySize(@Nullable Output<Integer> keySize) {
            $.keySize = keySize;
            return this;
        }

        public Builder keySize(Integer keySize) {
            return keySize(Output.of(keySize));
        }

        public Builder kty(@Nullable Output<Either<String,JsonWebKeyType>> kty) {
            $.kty = kty;
            return this;
        }

        public Builder kty(Either<String,JsonWebKeyType> kty) {
            return kty(Output.of(kty));
        }

        public Builder kty(String kty) {
            return kty(Either.ofLeft(kty));
        }

        public Builder kty(JsonWebKeyType kty) {
            return kty(Either.ofRight(kty));
        }

        public KeyPropertiesArgs build() {
            return $;
        }
    }

}
