// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.devtestlab.inputs;

import com.pulumi.azurenative.devtestlab.enums.StorageType;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Storage information about the data disks present in the custom image
 * 
 */
public final class DataDiskStorageTypeInfoArgs extends com.pulumi.resources.ResourceArgs {

    public static final DataDiskStorageTypeInfoArgs Empty = new DataDiskStorageTypeInfoArgs();

    /**
     * Disk Lun
     * 
     */
    @Import(name="lun")
    private @Nullable Output<String> lun;

    /**
     * @return Disk Lun
     * 
     */
    public Optional<Output<String>> lun() {
        return Optional.ofNullable(this.lun);
    }

    /**
     * Disk Storage Type
     * 
     */
    @Import(name="storageType")
    private @Nullable Output<Either<String,StorageType>> storageType;

    /**
     * @return Disk Storage Type
     * 
     */
    public Optional<Output<Either<String,StorageType>>> storageType() {
        return Optional.ofNullable(this.storageType);
    }

    private DataDiskStorageTypeInfoArgs() {}

    private DataDiskStorageTypeInfoArgs(DataDiskStorageTypeInfoArgs $) {
        this.lun = $.lun;
        this.storageType = $.storageType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataDiskStorageTypeInfoArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataDiskStorageTypeInfoArgs $;

        public Builder() {
            $ = new DataDiskStorageTypeInfoArgs();
        }

        public Builder(DataDiskStorageTypeInfoArgs defaults) {
            $ = new DataDiskStorageTypeInfoArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param lun Disk Lun
         * 
         * @return builder
         * 
         */
        public Builder lun(@Nullable Output<String> lun) {
            $.lun = lun;
            return this;
        }

        /**
         * @param lun Disk Lun
         * 
         * @return builder
         * 
         */
        public Builder lun(String lun) {
            return lun(Output.of(lun));
        }

        /**
         * @param storageType Disk Storage Type
         * 
         * @return builder
         * 
         */
        public Builder storageType(@Nullable Output<Either<String,StorageType>> storageType) {
            $.storageType = storageType;
            return this;
        }

        /**
         * @param storageType Disk Storage Type
         * 
         * @return builder
         * 
         */
        public Builder storageType(Either<String,StorageType> storageType) {
            return storageType(Output.of(storageType));
        }

        /**
         * @param storageType Disk Storage Type
         * 
         * @return builder
         * 
         */
        public Builder storageType(String storageType) {
            return storageType(Either.ofLeft(storageType));
        }

        /**
         * @param storageType Disk Storage Type
         * 
         * @return builder
         * 
         */
        public Builder storageType(StorageType storageType) {
            return storageType(Either.ofRight(storageType));
        }

        public DataDiskStorageTypeInfoArgs build() {
            return $;
        }
    }

}
