// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.machinelearningservices.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * scale settings for AML Compute
 * 
 */
public final class ScaleSettingsResponse extends com.pulumi.resources.InvokeArgs {

    public static final ScaleSettingsResponse Empty = new ScaleSettingsResponse();

    /**
     * Max number of nodes to use
     * 
     */
    @Import(name="maxNodeCount", required=true)
    private Integer maxNodeCount;

    public Integer maxNodeCount() {
        return this.maxNodeCount;
    }

    /**
     * Min number of nodes to use
     * 
     */
    @Import(name="minNodeCount")
    private @Nullable Integer minNodeCount;

    public Optional<Integer> minNodeCount() {
        return Optional.ofNullable(this.minNodeCount);
    }

    /**
     * Node Idle Time before scaling down amlCompute. This string needs to be in the RFC Format.
     * 
     */
    @Import(name="nodeIdleTimeBeforeScaleDown")
    private @Nullable String nodeIdleTimeBeforeScaleDown;

    public Optional<String> nodeIdleTimeBeforeScaleDown() {
        return Optional.ofNullable(this.nodeIdleTimeBeforeScaleDown);
    }

    private ScaleSettingsResponse() {}

    private ScaleSettingsResponse(ScaleSettingsResponse $) {
        this.maxNodeCount = $.maxNodeCount;
        this.minNodeCount = $.minNodeCount;
        this.nodeIdleTimeBeforeScaleDown = $.nodeIdleTimeBeforeScaleDown;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ScaleSettingsResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ScaleSettingsResponse $;

        public Builder() {
            $ = new ScaleSettingsResponse();
        }

        public Builder(ScaleSettingsResponse defaults) {
            $ = new ScaleSettingsResponse(Objects.requireNonNull(defaults));
        }

        public Builder maxNodeCount(Integer maxNodeCount) {
            $.maxNodeCount = maxNodeCount;
            return this;
        }

        public Builder minNodeCount(@Nullable Integer minNodeCount) {
            $.minNodeCount = minNodeCount;
            return this;
        }

        public Builder nodeIdleTimeBeforeScaleDown(@Nullable String nodeIdleTimeBeforeScaleDown) {
            $.nodeIdleTimeBeforeScaleDown = nodeIdleTimeBeforeScaleDown;
            return this;
        }

        public ScaleSettingsResponse build() {
            $.maxNodeCount = Objects.requireNonNull($.maxNodeCount, "expected parameter 'maxNodeCount' to be non-null");
            $.minNodeCount = Codegen.integerProp("minNodeCount").arg($.minNodeCount).def(0).getNullable();
            return $;
        }
    }

}
