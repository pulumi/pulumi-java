// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datafactory.inputs;

import com.pulumi.azurenative.datafactory.inputs.ActivityDependencyResponse;
import com.pulumi.azurenative.datafactory.inputs.ActivityPolicyResponse;
import com.pulumi.azurenative.datafactory.inputs.LinkedServiceReferenceResponse;
import com.pulumi.azurenative.datafactory.inputs.UserPropertyResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * HDInsight streaming activity type.
 * 
 */
public final class HDInsightStreamingActivityResponse extends com.pulumi.resources.InvokeArgs {

    public static final HDInsightStreamingActivityResponse Empty = new HDInsightStreamingActivityResponse();

    /**
     * User specified arguments to HDInsightActivity.
     * 
     */
    @Import(name="arguments")
    private @Nullable List<Object> arguments;

    public Optional<List<Object>> arguments() {
        return Optional.ofNullable(this.arguments);
    }

    /**
     * Combiner executable name. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="combiner")
    private @Nullable Object combiner;

    public Optional<Object> combiner() {
        return Optional.ofNullable(this.combiner);
    }

    /**
     * Command line environment values.
     * 
     */
    @Import(name="commandEnvironment")
    private @Nullable List<Object> commandEnvironment;

    public Optional<List<Object>> commandEnvironment() {
        return Optional.ofNullable(this.commandEnvironment);
    }

    /**
     * Allows user to specify defines for streaming job request.
     * 
     */
    @Import(name="defines")
    private @Nullable Map<String,Object> defines;

    public Optional<Map<String,Object>> defines() {
        return Optional.ofNullable(this.defines);
    }

    /**
     * Activity depends on condition.
     * 
     */
    @Import(name="dependsOn")
    private @Nullable List<ActivityDependencyResponse> dependsOn;

    public Optional<List<ActivityDependencyResponse>> dependsOn() {
        return Optional.ofNullable(this.dependsOn);
    }

    /**
     * Activity description.
     * 
     */
    @Import(name="description")
    private @Nullable String description;

    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Linked service reference where the files are located.
     * 
     */
    @Import(name="fileLinkedService")
    private @Nullable LinkedServiceReferenceResponse fileLinkedService;

    public Optional<LinkedServiceReferenceResponse> fileLinkedService() {
        return Optional.ofNullable(this.fileLinkedService);
    }

    /**
     * Paths to streaming job files. Can be directories.
     * 
     */
    @Import(name="filePaths", required=true)
    private List<Object> filePaths;

    public List<Object> filePaths() {
        return this.filePaths;
    }

    /**
     * Debug info option.
     * 
     */
    @Import(name="getDebugInfo")
    private @Nullable String getDebugInfo;

    public Optional<String> getDebugInfo() {
        return Optional.ofNullable(this.getDebugInfo);
    }

    /**
     * Input blob path. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="input", required=true)
    private Object input;

    public Object input() {
        return this.input;
    }

    /**
     * Linked service reference.
     * 
     */
    @Import(name="linkedServiceName")
    private @Nullable LinkedServiceReferenceResponse linkedServiceName;

    public Optional<LinkedServiceReferenceResponse> linkedServiceName() {
        return Optional.ofNullable(this.linkedServiceName);
    }

    /**
     * Mapper executable name. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="mapper", required=true)
    private Object mapper;

    public Object mapper() {
        return this.mapper;
    }

    /**
     * Activity name.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    public String name() {
        return this.name;
    }

    /**
     * Output blob path. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="output", required=true)
    private Object output;

    public Object output() {
        return this.output;
    }

    /**
     * Activity policy.
     * 
     */
    @Import(name="policy")
    private @Nullable ActivityPolicyResponse policy;

    public Optional<ActivityPolicyResponse> policy() {
        return Optional.ofNullable(this.policy);
    }

    /**
     * Reducer executable name. Type: string (or Expression with resultType string).
     * 
     */
    @Import(name="reducer", required=true)
    private Object reducer;

    public Object reducer() {
        return this.reducer;
    }

    /**
     * Storage linked service references.
     * 
     */
    @Import(name="storageLinkedServices")
    private @Nullable List<LinkedServiceReferenceResponse> storageLinkedServices;

    public Optional<List<LinkedServiceReferenceResponse>> storageLinkedServices() {
        return Optional.ofNullable(this.storageLinkedServices);
    }

    /**
     * Type of activity.
     * Expected value is &#39;HDInsightStreaming&#39;.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    public String type() {
        return this.type;
    }

    /**
     * Activity user properties.
     * 
     */
    @Import(name="userProperties")
    private @Nullable List<UserPropertyResponse> userProperties;

    public Optional<List<UserPropertyResponse>> userProperties() {
        return Optional.ofNullable(this.userProperties);
    }

    private HDInsightStreamingActivityResponse() {}

    private HDInsightStreamingActivityResponse(HDInsightStreamingActivityResponse $) {
        this.arguments = $.arguments;
        this.combiner = $.combiner;
        this.commandEnvironment = $.commandEnvironment;
        this.defines = $.defines;
        this.dependsOn = $.dependsOn;
        this.description = $.description;
        this.fileLinkedService = $.fileLinkedService;
        this.filePaths = $.filePaths;
        this.getDebugInfo = $.getDebugInfo;
        this.input = $.input;
        this.linkedServiceName = $.linkedServiceName;
        this.mapper = $.mapper;
        this.name = $.name;
        this.output = $.output;
        this.policy = $.policy;
        this.reducer = $.reducer;
        this.storageLinkedServices = $.storageLinkedServices;
        this.type = $.type;
        this.userProperties = $.userProperties;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(HDInsightStreamingActivityResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private HDInsightStreamingActivityResponse $;

        public Builder() {
            $ = new HDInsightStreamingActivityResponse();
        }

        public Builder(HDInsightStreamingActivityResponse defaults) {
            $ = new HDInsightStreamingActivityResponse(Objects.requireNonNull(defaults));
        }

        public Builder arguments(@Nullable List<Object> arguments) {
            $.arguments = arguments;
            return this;
        }

        public Builder arguments(Object... arguments) {
            return arguments(List.of(arguments));
        }

        public Builder combiner(@Nullable Object combiner) {
            $.combiner = combiner;
            return this;
        }

        public Builder commandEnvironment(@Nullable List<Object> commandEnvironment) {
            $.commandEnvironment = commandEnvironment;
            return this;
        }

        public Builder commandEnvironment(Object... commandEnvironment) {
            return commandEnvironment(List.of(commandEnvironment));
        }

        public Builder defines(@Nullable Map<String,Object> defines) {
            $.defines = defines;
            return this;
        }

        public Builder dependsOn(@Nullable List<ActivityDependencyResponse> dependsOn) {
            $.dependsOn = dependsOn;
            return this;
        }

        public Builder dependsOn(ActivityDependencyResponse... dependsOn) {
            return dependsOn(List.of(dependsOn));
        }

        public Builder description(@Nullable String description) {
            $.description = description;
            return this;
        }

        public Builder fileLinkedService(@Nullable LinkedServiceReferenceResponse fileLinkedService) {
            $.fileLinkedService = fileLinkedService;
            return this;
        }

        public Builder filePaths(List<Object> filePaths) {
            $.filePaths = filePaths;
            return this;
        }

        public Builder filePaths(Object... filePaths) {
            return filePaths(List.of(filePaths));
        }

        public Builder getDebugInfo(@Nullable String getDebugInfo) {
            $.getDebugInfo = getDebugInfo;
            return this;
        }

        public Builder input(Object input) {
            $.input = input;
            return this;
        }

        public Builder linkedServiceName(@Nullable LinkedServiceReferenceResponse linkedServiceName) {
            $.linkedServiceName = linkedServiceName;
            return this;
        }

        public Builder mapper(Object mapper) {
            $.mapper = mapper;
            return this;
        }

        public Builder name(String name) {
            $.name = name;
            return this;
        }

        public Builder output(Object output) {
            $.output = output;
            return this;
        }

        public Builder policy(@Nullable ActivityPolicyResponse policy) {
            $.policy = policy;
            return this;
        }

        public Builder reducer(Object reducer) {
            $.reducer = reducer;
            return this;
        }

        public Builder storageLinkedServices(@Nullable List<LinkedServiceReferenceResponse> storageLinkedServices) {
            $.storageLinkedServices = storageLinkedServices;
            return this;
        }

        public Builder storageLinkedServices(LinkedServiceReferenceResponse... storageLinkedServices) {
            return storageLinkedServices(List.of(storageLinkedServices));
        }

        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public Builder userProperties(@Nullable List<UserPropertyResponse> userProperties) {
            $.userProperties = userProperties;
            return this;
        }

        public Builder userProperties(UserPropertyResponse... userProperties) {
            return userProperties(List.of(userProperties));
        }

        public HDInsightStreamingActivityResponse build() {
            $.filePaths = Objects.requireNonNull($.filePaths, "expected parameter 'filePaths' to be non-null");
            $.input = Objects.requireNonNull($.input, "expected parameter 'input' to be non-null");
            $.mapper = Objects.requireNonNull($.mapper, "expected parameter 'mapper' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.output = Objects.requireNonNull($.output, "expected parameter 'output' to be non-null");
            $.reducer = Objects.requireNonNull($.reducer, "expected parameter 'reducer' to be non-null");
            $.type = Codegen.stringProp("type").arg($.type).require();
            return $;
        }
    }

}
