// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.compute.inputs;

import com.pulumi.azurenative.compute.enums.StorageAccountType;
import com.pulumi.azurenative.compute.inputs.EncryptionImagesArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Describes the target region information.
 * 
 */
public final class TargetRegionArgs extends com.pulumi.resources.ResourceArgs {

    public static final TargetRegionArgs Empty = new TargetRegionArgs();

    /**
     * Optional. Allows users to provide customer managed keys for encrypting the OS and data disks in the gallery artifact.
     * 
     */
    @Import(name="encryption")
    private @Nullable Output<EncryptionImagesArgs> encryption;

    public Optional<Output<EncryptionImagesArgs>> encryption() {
        return Optional.ofNullable(this.encryption);
    }

    /**
     * The name of the region.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    public Output<String> name() {
        return this.name;
    }

    /**
     * The number of replicas of the Image Version to be created per region. This property is updatable.
     * 
     */
    @Import(name="regionalReplicaCount")
    private @Nullable Output<Integer> regionalReplicaCount;

    public Optional<Output<Integer>> regionalReplicaCount() {
        return Optional.ofNullable(this.regionalReplicaCount);
    }

    /**
     * Specifies the storage account type to be used to store the image. This property is not updatable.
     * 
     */
    @Import(name="storageAccountType")
    private @Nullable Output<Either<String,StorageAccountType>> storageAccountType;

    public Optional<Output<Either<String,StorageAccountType>>> storageAccountType() {
        return Optional.ofNullable(this.storageAccountType);
    }

    private TargetRegionArgs() {}

    private TargetRegionArgs(TargetRegionArgs $) {
        this.encryption = $.encryption;
        this.name = $.name;
        this.regionalReplicaCount = $.regionalReplicaCount;
        this.storageAccountType = $.storageAccountType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TargetRegionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TargetRegionArgs $;

        public Builder() {
            $ = new TargetRegionArgs();
        }

        public Builder(TargetRegionArgs defaults) {
            $ = new TargetRegionArgs(Objects.requireNonNull(defaults));
        }

        public Builder encryption(@Nullable Output<EncryptionImagesArgs> encryption) {
            $.encryption = encryption;
            return this;
        }

        public Builder encryption(EncryptionImagesArgs encryption) {
            return encryption(Output.of(encryption));
        }

        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder regionalReplicaCount(@Nullable Output<Integer> regionalReplicaCount) {
            $.regionalReplicaCount = regionalReplicaCount;
            return this;
        }

        public Builder regionalReplicaCount(Integer regionalReplicaCount) {
            return regionalReplicaCount(Output.of(regionalReplicaCount));
        }

        public Builder storageAccountType(@Nullable Output<Either<String,StorageAccountType>> storageAccountType) {
            $.storageAccountType = storageAccountType;
            return this;
        }

        public Builder storageAccountType(Either<String,StorageAccountType> storageAccountType) {
            return storageAccountType(Output.of(storageAccountType));
        }

        public Builder storageAccountType(String storageAccountType) {
            return storageAccountType(Either.ofLeft(storageAccountType));
        }

        public Builder storageAccountType(StorageAccountType storageAccountType) {
            return storageAccountType(Either.ofRight(storageAccountType));
        }

        public TargetRegionArgs build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            return $;
        }
    }

}
