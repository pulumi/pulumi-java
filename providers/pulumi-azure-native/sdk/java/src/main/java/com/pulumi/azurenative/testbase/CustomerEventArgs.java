// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.testbase;

import com.pulumi.azurenative.testbase.inputs.NotificationEventReceiverArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CustomerEventArgs extends com.pulumi.resources.ResourceArgs {

    public static final CustomerEventArgs Empty = new CustomerEventArgs();

    /**
     * The resource name of the Test Base Customer event.
     * 
     */
    @Import(name="customerEventName")
    private @Nullable Output<String> customerEventName;

    /**
     * @return The resource name of the Test Base Customer event.
     * 
     */
    public Optional<Output<String>> customerEventName() {
        return Optional.ofNullable(this.customerEventName);
    }

    /**
     * The name of the event subscribed to.
     * 
     */
    @Import(name="eventName", required=true)
    private Output<String> eventName;

    /**
     * @return The name of the event subscribed to.
     * 
     */
    public Output<String> eventName() {
        return this.eventName;
    }

    /**
     * The notification event receivers.
     * 
     */
    @Import(name="receivers", required=true)
    private Output<List<NotificationEventReceiverArgs>> receivers;

    /**
     * @return The notification event receivers.
     * 
     */
    public Output<List<NotificationEventReceiverArgs>> receivers() {
        return this.receivers;
    }

    /**
     * The name of the resource group that contains the resource.
     * 
     */
    @Import(name="resourceGroupName", required=true)
    private Output<String> resourceGroupName;

    /**
     * @return The name of the resource group that contains the resource.
     * 
     */
    public Output<String> resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * The resource name of the Test Base Account.
     * 
     */
    @Import(name="testBaseAccountName", required=true)
    private Output<String> testBaseAccountName;

    /**
     * @return The resource name of the Test Base Account.
     * 
     */
    public Output<String> testBaseAccountName() {
        return this.testBaseAccountName;
    }

    private CustomerEventArgs() {}

    private CustomerEventArgs(CustomerEventArgs $) {
        this.customerEventName = $.customerEventName;
        this.eventName = $.eventName;
        this.receivers = $.receivers;
        this.resourceGroupName = $.resourceGroupName;
        this.testBaseAccountName = $.testBaseAccountName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CustomerEventArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CustomerEventArgs $;

        public Builder() {
            $ = new CustomerEventArgs();
        }

        public Builder(CustomerEventArgs defaults) {
            $ = new CustomerEventArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param customerEventName The resource name of the Test Base Customer event.
         * 
         * @return builder
         * 
         */
        public Builder customerEventName(@Nullable Output<String> customerEventName) {
            $.customerEventName = customerEventName;
            return this;
        }

        /**
         * @param customerEventName The resource name of the Test Base Customer event.
         * 
         * @return builder
         * 
         */
        public Builder customerEventName(String customerEventName) {
            return customerEventName(Output.of(customerEventName));
        }

        /**
         * @param eventName The name of the event subscribed to.
         * 
         * @return builder
         * 
         */
        public Builder eventName(Output<String> eventName) {
            $.eventName = eventName;
            return this;
        }

        /**
         * @param eventName The name of the event subscribed to.
         * 
         * @return builder
         * 
         */
        public Builder eventName(String eventName) {
            return eventName(Output.of(eventName));
        }

        /**
         * @param receivers The notification event receivers.
         * 
         * @return builder
         * 
         */
        public Builder receivers(Output<List<NotificationEventReceiverArgs>> receivers) {
            $.receivers = receivers;
            return this;
        }

        /**
         * @param receivers The notification event receivers.
         * 
         * @return builder
         * 
         */
        public Builder receivers(List<NotificationEventReceiverArgs> receivers) {
            return receivers(Output.of(receivers));
        }

        /**
         * @param receivers The notification event receivers.
         * 
         * @return builder
         * 
         */
        public Builder receivers(NotificationEventReceiverArgs... receivers) {
            return receivers(List.of(receivers));
        }

        /**
         * @param resourceGroupName The name of the resource group that contains the resource.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName The name of the resource group that contains the resource.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param testBaseAccountName The resource name of the Test Base Account.
         * 
         * @return builder
         * 
         */
        public Builder testBaseAccountName(Output<String> testBaseAccountName) {
            $.testBaseAccountName = testBaseAccountName;
            return this;
        }

        /**
         * @param testBaseAccountName The resource name of the Test Base Account.
         * 
         * @return builder
         * 
         */
        public Builder testBaseAccountName(String testBaseAccountName) {
            return testBaseAccountName(Output.of(testBaseAccountName));
        }

        public CustomerEventArgs build() {
            $.eventName = Objects.requireNonNull($.eventName, "expected parameter 'eventName' to be non-null");
            $.receivers = Objects.requireNonNull($.receivers, "expected parameter 'receivers' to be non-null");
            $.resourceGroupName = Objects.requireNonNull($.resourceGroupName, "expected parameter 'resourceGroupName' to be non-null");
            $.testBaseAccountName = Objects.requireNonNull($.testBaseAccountName, "expected parameter 'testBaseAccountName' to be non-null");
            return $;
        }
    }

}
