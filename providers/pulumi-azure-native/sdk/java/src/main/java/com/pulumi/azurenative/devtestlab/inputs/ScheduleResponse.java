// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.devtestlab.inputs;

import com.pulumi.azurenative.devtestlab.inputs.DayDetailsResponse;
import com.pulumi.azurenative.devtestlab.inputs.HourDetailsResponse;
import com.pulumi.azurenative.devtestlab.inputs.NotificationSettingsResponse;
import com.pulumi.azurenative.devtestlab.inputs.WeekDetailsResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A schedule.
 * 
 */
public final class ScheduleResponse extends com.pulumi.resources.InvokeArgs {

    public static final ScheduleResponse Empty = new ScheduleResponse();

    /**
     * The creation date of the schedule.
     * 
     */
    @Import(name="createdDate", required=true)
    private String createdDate;

    /**
     * @return The creation date of the schedule.
     * 
     */
    public String createdDate() {
        return this.createdDate;
    }

    /**
     * If the schedule will occur once each day of the week, specify the daily recurrence.
     * 
     */
    @Import(name="dailyRecurrence")
    private @Nullable DayDetailsResponse dailyRecurrence;

    /**
     * @return If the schedule will occur once each day of the week, specify the daily recurrence.
     * 
     */
    public Optional<DayDetailsResponse> dailyRecurrence() {
        return Optional.ofNullable(this.dailyRecurrence);
    }

    /**
     * If the schedule will occur multiple times a day, specify the hourly recurrence.
     * 
     */
    @Import(name="hourlyRecurrence")
    private @Nullable HourDetailsResponse hourlyRecurrence;

    /**
     * @return If the schedule will occur multiple times a day, specify the hourly recurrence.
     * 
     */
    public Optional<HourDetailsResponse> hourlyRecurrence() {
        return Optional.ofNullable(this.hourlyRecurrence);
    }

    /**
     * The identifier of the resource.
     * 
     */
    @Import(name="id", required=true)
    private String id;

    /**
     * @return The identifier of the resource.
     * 
     */
    public String id() {
        return this.id;
    }

    /**
     * The location of the resource.
     * 
     */
    @Import(name="location")
    private @Nullable String location;

    /**
     * @return The location of the resource.
     * 
     */
    public Optional<String> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * The name of the resource.
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return The name of the resource.
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * Notification settings.
     * 
     */
    @Import(name="notificationSettings")
    private @Nullable NotificationSettingsResponse notificationSettings;

    /**
     * @return Notification settings.
     * 
     */
    public Optional<NotificationSettingsResponse> notificationSettings() {
        return Optional.ofNullable(this.notificationSettings);
    }

    /**
     * The provisioning status of the resource.
     * 
     */
    @Import(name="provisioningState", required=true)
    private String provisioningState;

    /**
     * @return The provisioning status of the resource.
     * 
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * The status of the schedule (i.e. Enabled, Disabled)
     * 
     */
    @Import(name="status")
    private @Nullable String status;

    /**
     * @return The status of the schedule (i.e. Enabled, Disabled)
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The tags of the resource.
     * 
     */
    @Import(name="tags")
    private @Nullable Map<String,String> tags;

    /**
     * @return The tags of the resource.
     * 
     */
    public Optional<Map<String,String>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The resource ID to which the schedule belongs
     * 
     */
    @Import(name="targetResourceId")
    private @Nullable String targetResourceId;

    /**
     * @return The resource ID to which the schedule belongs
     * 
     */
    public Optional<String> targetResourceId() {
        return Optional.ofNullable(this.targetResourceId);
    }

    /**
     * The task type of the schedule (e.g. LabVmsShutdownTask, LabVmAutoStart).
     * 
     */
    @Import(name="taskType")
    private @Nullable String taskType;

    /**
     * @return The task type of the schedule (e.g. LabVmsShutdownTask, LabVmAutoStart).
     * 
     */
    public Optional<String> taskType() {
        return Optional.ofNullable(this.taskType);
    }

    /**
     * The time zone ID (e.g. Pacific Standard time).
     * 
     */
    @Import(name="timeZoneId")
    private @Nullable String timeZoneId;

    /**
     * @return The time zone ID (e.g. Pacific Standard time).
     * 
     */
    public Optional<String> timeZoneId() {
        return Optional.ofNullable(this.timeZoneId);
    }

    /**
     * The type of the resource.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    /**
     * @return The type of the resource.
     * 
     */
    public String type() {
        return this.type;
    }

    /**
     * The unique immutable identifier of a resource (Guid).
     * 
     */
    @Import(name="uniqueIdentifier", required=true)
    private String uniqueIdentifier;

    /**
     * @return The unique immutable identifier of a resource (Guid).
     * 
     */
    public String uniqueIdentifier() {
        return this.uniqueIdentifier;
    }

    /**
     * If the schedule will occur only some days of the week, specify the weekly recurrence.
     * 
     */
    @Import(name="weeklyRecurrence")
    private @Nullable WeekDetailsResponse weeklyRecurrence;

    /**
     * @return If the schedule will occur only some days of the week, specify the weekly recurrence.
     * 
     */
    public Optional<WeekDetailsResponse> weeklyRecurrence() {
        return Optional.ofNullable(this.weeklyRecurrence);
    }

    private ScheduleResponse() {}

    private ScheduleResponse(ScheduleResponse $) {
        this.createdDate = $.createdDate;
        this.dailyRecurrence = $.dailyRecurrence;
        this.hourlyRecurrence = $.hourlyRecurrence;
        this.id = $.id;
        this.location = $.location;
        this.name = $.name;
        this.notificationSettings = $.notificationSettings;
        this.provisioningState = $.provisioningState;
        this.status = $.status;
        this.tags = $.tags;
        this.targetResourceId = $.targetResourceId;
        this.taskType = $.taskType;
        this.timeZoneId = $.timeZoneId;
        this.type = $.type;
        this.uniqueIdentifier = $.uniqueIdentifier;
        this.weeklyRecurrence = $.weeklyRecurrence;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ScheduleResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ScheduleResponse $;

        public Builder() {
            $ = new ScheduleResponse();
        }

        public Builder(ScheduleResponse defaults) {
            $ = new ScheduleResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param createdDate The creation date of the schedule.
         * 
         * @return builder
         * 
         */
        public Builder createdDate(String createdDate) {
            $.createdDate = createdDate;
            return this;
        }

        /**
         * @param dailyRecurrence If the schedule will occur once each day of the week, specify the daily recurrence.
         * 
         * @return builder
         * 
         */
        public Builder dailyRecurrence(@Nullable DayDetailsResponse dailyRecurrence) {
            $.dailyRecurrence = dailyRecurrence;
            return this;
        }

        /**
         * @param hourlyRecurrence If the schedule will occur multiple times a day, specify the hourly recurrence.
         * 
         * @return builder
         * 
         */
        public Builder hourlyRecurrence(@Nullable HourDetailsResponse hourlyRecurrence) {
            $.hourlyRecurrence = hourlyRecurrence;
            return this;
        }

        /**
         * @param id The identifier of the resource.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            $.id = id;
            return this;
        }

        /**
         * @param location The location of the resource.
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable String location) {
            $.location = location;
            return this;
        }

        /**
         * @param name The name of the resource.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param notificationSettings Notification settings.
         * 
         * @return builder
         * 
         */
        public Builder notificationSettings(@Nullable NotificationSettingsResponse notificationSettings) {
            $.notificationSettings = notificationSettings;
            return this;
        }

        /**
         * @param provisioningState The provisioning status of the resource.
         * 
         * @return builder
         * 
         */
        public Builder provisioningState(String provisioningState) {
            $.provisioningState = provisioningState;
            return this;
        }

        /**
         * @param status The status of the schedule (i.e. Enabled, Disabled)
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable String status) {
            $.status = status;
            return this;
        }

        /**
         * @param tags The tags of the resource.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Map<String,String> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param targetResourceId The resource ID to which the schedule belongs
         * 
         * @return builder
         * 
         */
        public Builder targetResourceId(@Nullable String targetResourceId) {
            $.targetResourceId = targetResourceId;
            return this;
        }

        /**
         * @param taskType The task type of the schedule (e.g. LabVmsShutdownTask, LabVmAutoStart).
         * 
         * @return builder
         * 
         */
        public Builder taskType(@Nullable String taskType) {
            $.taskType = taskType;
            return this;
        }

        /**
         * @param timeZoneId The time zone ID (e.g. Pacific Standard time).
         * 
         * @return builder
         * 
         */
        public Builder timeZoneId(@Nullable String timeZoneId) {
            $.timeZoneId = timeZoneId;
            return this;
        }

        /**
         * @param type The type of the resource.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            $.type = type;
            return this;
        }

        /**
         * @param uniqueIdentifier The unique immutable identifier of a resource (Guid).
         * 
         * @return builder
         * 
         */
        public Builder uniqueIdentifier(String uniqueIdentifier) {
            $.uniqueIdentifier = uniqueIdentifier;
            return this;
        }

        /**
         * @param weeklyRecurrence If the schedule will occur only some days of the week, specify the weekly recurrence.
         * 
         * @return builder
         * 
         */
        public Builder weeklyRecurrence(@Nullable WeekDetailsResponse weeklyRecurrence) {
            $.weeklyRecurrence = weeklyRecurrence;
            return this;
        }

        public ScheduleResponse build() {
            $.createdDate = Objects.requireNonNull($.createdDate, "expected parameter 'createdDate' to be non-null");
            $.id = Objects.requireNonNull($.id, "expected parameter 'id' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.provisioningState = Objects.requireNonNull($.provisioningState, "expected parameter 'provisioningState' to be non-null");
            $.status = Codegen.stringProp("status").arg($.status).def("Disabled").getNullable();
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            $.uniqueIdentifier = Objects.requireNonNull($.uniqueIdentifier, "expected parameter 'uniqueIdentifier' to be non-null");
            return $;
        }
    }

}
