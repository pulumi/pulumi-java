// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.orbital.inputs;

import com.pulumi.azurenative.orbital.enums.Direction;
import com.pulumi.azurenative.orbital.enums.Polarization;
import com.pulumi.azurenative.orbital.inputs.ContactProfileLinkChannelArgs;
import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Contact Profile link
 * 
 */
public final class ContactProfileLinkArgs extends com.pulumi.resources.ResourceArgs {

    public static final ContactProfileLinkArgs Empty = new ContactProfileLinkArgs();

    /**
     * Contact Profile Link Channel
     * 
     */
    @Import(name="channels", required=true)
      private final Output<List<ContactProfileLinkChannelArgs>> channels;

    public Output<List<ContactProfileLinkChannelArgs>> channels() {
        return this.channels;
    }

    /**
     * Direction (uplink or downlink)
     * 
     */
    @Import(name="direction", required=true)
      private final Output<Either<String,Direction>> direction;

    public Output<Either<String,Direction>> direction() {
        return this.direction;
    }

    /**
     * Effective Isotropic Radiated Power (EIRP) in dBW.
     * 
     */
    @Import(name="eirpdBW")
      private final @Nullable Output<Double> eirpdBW;

    public Output<Double> eirpdBW() {
        return this.eirpdBW == null ? Codegen.empty() : this.eirpdBW;
    }

    /**
     * Gain To Noise Temperature in db/K.
     * 
     */
    @Import(name="gainOverTemperature")
      private final @Nullable Output<Double> gainOverTemperature;

    public Output<Double> gainOverTemperature() {
        return this.gainOverTemperature == null ? Codegen.empty() : this.gainOverTemperature;
    }

    /**
     * polarization. eg (RHCP, LHCP)
     * 
     */
    @Import(name="polarization", required=true)
      private final Output<Either<String,Polarization>> polarization;

    public Output<Either<String,Polarization>> polarization() {
        return this.polarization;
    }

    public ContactProfileLinkArgs(
        Output<List<ContactProfileLinkChannelArgs>> channels,
        Output<Either<String,Direction>> direction,
        @Nullable Output<Double> eirpdBW,
        @Nullable Output<Double> gainOverTemperature,
        Output<Either<String,Polarization>> polarization) {
        this.channels = Objects.requireNonNull(channels, "expected parameter 'channels' to be non-null");
        this.direction = Objects.requireNonNull(direction, "expected parameter 'direction' to be non-null");
        this.eirpdBW = eirpdBW;
        this.gainOverTemperature = gainOverTemperature;
        this.polarization = Objects.requireNonNull(polarization, "expected parameter 'polarization' to be non-null");
    }

    private ContactProfileLinkArgs() {
        this.channels = Codegen.empty();
        this.direction = Codegen.empty();
        this.eirpdBW = Codegen.empty();
        this.gainOverTemperature = Codegen.empty();
        this.polarization = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ContactProfileLinkArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<List<ContactProfileLinkChannelArgs>> channels;
        private Output<Either<String,Direction>> direction;
        private @Nullable Output<Double> eirpdBW;
        private @Nullable Output<Double> gainOverTemperature;
        private Output<Either<String,Polarization>> polarization;

        public Builder() {
    	      // Empty
        }

        public Builder(ContactProfileLinkArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.channels = defaults.channels;
    	      this.direction = defaults.direction;
    	      this.eirpdBW = defaults.eirpdBW;
    	      this.gainOverTemperature = defaults.gainOverTemperature;
    	      this.polarization = defaults.polarization;
        }

        public Builder channels(Output<List<ContactProfileLinkChannelArgs>> channels) {
            this.channels = Objects.requireNonNull(channels);
            return this;
        }
        public Builder channels(List<ContactProfileLinkChannelArgs> channels) {
            this.channels = Output.of(Objects.requireNonNull(channels));
            return this;
        }
        public Builder channels(ContactProfileLinkChannelArgs... channels) {
            return channels(List.of(channels));
        }
        public Builder direction(Output<Either<String,Direction>> direction) {
            this.direction = Objects.requireNonNull(direction);
            return this;
        }
        public Builder direction(Either<String,Direction> direction) {
            this.direction = Output.of(Objects.requireNonNull(direction));
            return this;
        }
        public Builder eirpdBW(@Nullable Output<Double> eirpdBW) {
            this.eirpdBW = eirpdBW;
            return this;
        }
        public Builder eirpdBW(@Nullable Double eirpdBW) {
            this.eirpdBW = Codegen.ofNullable(eirpdBW);
            return this;
        }
        public Builder gainOverTemperature(@Nullable Output<Double> gainOverTemperature) {
            this.gainOverTemperature = gainOverTemperature;
            return this;
        }
        public Builder gainOverTemperature(@Nullable Double gainOverTemperature) {
            this.gainOverTemperature = Codegen.ofNullable(gainOverTemperature);
            return this;
        }
        public Builder polarization(Output<Either<String,Polarization>> polarization) {
            this.polarization = Objects.requireNonNull(polarization);
            return this;
        }
        public Builder polarization(Either<String,Polarization> polarization) {
            this.polarization = Output.of(Objects.requireNonNull(polarization));
            return this;
        }        public ContactProfileLinkArgs build() {
            return new ContactProfileLinkArgs(channels, direction, eirpdBW, gainOverTemperature, polarization);
        }
    }
}
