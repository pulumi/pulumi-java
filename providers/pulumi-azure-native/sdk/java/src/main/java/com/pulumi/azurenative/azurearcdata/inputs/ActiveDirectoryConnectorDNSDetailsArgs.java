// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.azurearcdata.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * DNS server details
 * 
 */
public final class ActiveDirectoryConnectorDNSDetailsArgs extends com.pulumi.resources.ResourceArgs {

    public static final ActiveDirectoryConnectorDNSDetailsArgs Empty = new ActiveDirectoryConnectorDNSDetailsArgs();

    /**
     * DNS domain name for which DNS lookups should be forwarded to the Active Directory DNS servers.
     * 
     */
    @Import(name="domainName")
    private @Nullable Output<String> domainName;

    /**
     * @return DNS domain name for which DNS lookups should be forwarded to the Active Directory DNS servers.
     * 
     */
    public Optional<Output<String>> domainName() {
        return Optional.ofNullable(this.domainName);
    }

    /**
     * List of Active Directory DNS server IP addresses.
     * 
     */
    @Import(name="nameserverIPAddresses", required=true)
    private Output<List<String>> nameserverIPAddresses;

    /**
     * @return List of Active Directory DNS server IP addresses.
     * 
     */
    public Output<List<String>> nameserverIPAddresses() {
        return this.nameserverIPAddresses;
    }

    /**
     * Flag indicating whether to prefer Kubernetes DNS server response over AD DNS server response for IP address lookups.
     * 
     */
    @Import(name="preferK8sDnsForPtrLookups")
    private @Nullable Output<Boolean> preferK8sDnsForPtrLookups;

    /**
     * @return Flag indicating whether to prefer Kubernetes DNS server response over AD DNS server response for IP address lookups.
     * 
     */
    public Optional<Output<Boolean>> preferK8sDnsForPtrLookups() {
        return Optional.ofNullable(this.preferK8sDnsForPtrLookups);
    }

    /**
     * Replica count for DNS proxy service. Default value is 1.
     * 
     */
    @Import(name="replicas")
    private @Nullable Output<Double> replicas;

    /**
     * @return Replica count for DNS proxy service. Default value is 1.
     * 
     */
    public Optional<Output<Double>> replicas() {
        return Optional.ofNullable(this.replicas);
    }

    private ActiveDirectoryConnectorDNSDetailsArgs() {}

    private ActiveDirectoryConnectorDNSDetailsArgs(ActiveDirectoryConnectorDNSDetailsArgs $) {
        this.domainName = $.domainName;
        this.nameserverIPAddresses = $.nameserverIPAddresses;
        this.preferK8sDnsForPtrLookups = $.preferK8sDnsForPtrLookups;
        this.replicas = $.replicas;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ActiveDirectoryConnectorDNSDetailsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ActiveDirectoryConnectorDNSDetailsArgs $;

        public Builder() {
            $ = new ActiveDirectoryConnectorDNSDetailsArgs();
        }

        public Builder(ActiveDirectoryConnectorDNSDetailsArgs defaults) {
            $ = new ActiveDirectoryConnectorDNSDetailsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param domainName DNS domain name for which DNS lookups should be forwarded to the Active Directory DNS servers.
         * 
         * @return builder
         * 
         */
        public Builder domainName(@Nullable Output<String> domainName) {
            $.domainName = domainName;
            return this;
        }

        /**
         * @param domainName DNS domain name for which DNS lookups should be forwarded to the Active Directory DNS servers.
         * 
         * @return builder
         * 
         */
        public Builder domainName(String domainName) {
            return domainName(Output.of(domainName));
        }

        /**
         * @param nameserverIPAddresses List of Active Directory DNS server IP addresses.
         * 
         * @return builder
         * 
         */
        public Builder nameserverIPAddresses(Output<List<String>> nameserverIPAddresses) {
            $.nameserverIPAddresses = nameserverIPAddresses;
            return this;
        }

        /**
         * @param nameserverIPAddresses List of Active Directory DNS server IP addresses.
         * 
         * @return builder
         * 
         */
        public Builder nameserverIPAddresses(List<String> nameserverIPAddresses) {
            return nameserverIPAddresses(Output.of(nameserverIPAddresses));
        }

        /**
         * @param nameserverIPAddresses List of Active Directory DNS server IP addresses.
         * 
         * @return builder
         * 
         */
        public Builder nameserverIPAddresses(String... nameserverIPAddresses) {
            return nameserverIPAddresses(List.of(nameserverIPAddresses));
        }

        /**
         * @param preferK8sDnsForPtrLookups Flag indicating whether to prefer Kubernetes DNS server response over AD DNS server response for IP address lookups.
         * 
         * @return builder
         * 
         */
        public Builder preferK8sDnsForPtrLookups(@Nullable Output<Boolean> preferK8sDnsForPtrLookups) {
            $.preferK8sDnsForPtrLookups = preferK8sDnsForPtrLookups;
            return this;
        }

        /**
         * @param preferK8sDnsForPtrLookups Flag indicating whether to prefer Kubernetes DNS server response over AD DNS server response for IP address lookups.
         * 
         * @return builder
         * 
         */
        public Builder preferK8sDnsForPtrLookups(Boolean preferK8sDnsForPtrLookups) {
            return preferK8sDnsForPtrLookups(Output.of(preferK8sDnsForPtrLookups));
        }

        /**
         * @param replicas Replica count for DNS proxy service. Default value is 1.
         * 
         * @return builder
         * 
         */
        public Builder replicas(@Nullable Output<Double> replicas) {
            $.replicas = replicas;
            return this;
        }

        /**
         * @param replicas Replica count for DNS proxy service. Default value is 1.
         * 
         * @return builder
         * 
         */
        public Builder replicas(Double replicas) {
            return replicas(Output.of(replicas));
        }

        public ActiveDirectoryConnectorDNSDetailsArgs build() {
            $.nameserverIPAddresses = Objects.requireNonNull($.nameserverIPAddresses, "expected parameter 'nameserverIPAddresses' to be non-null");
            $.preferK8sDnsForPtrLookups = Codegen.booleanProp("preferK8sDnsForPtrLookups").output().arg($.preferK8sDnsForPtrLookups).def(true).getNullable();
            $.replicas = Codegen.doubleProp("replicas").output().arg($.replicas).def(1e+00).getNullable();
            return $;
        }
    }

}
