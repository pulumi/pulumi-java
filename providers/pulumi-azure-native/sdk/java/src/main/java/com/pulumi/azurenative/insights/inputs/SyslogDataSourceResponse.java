// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.insights.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Definition of which syslog data will be collected and how it will be collected.
 * Only collected from Linux machines.
 * 
 */
public final class SyslogDataSourceResponse extends com.pulumi.resources.InvokeArgs {

    public static final SyslogDataSourceResponse Empty = new SyslogDataSourceResponse();

    /**
     * The list of facility names.
     * 
     */
    @Import(name="facilityNames")
    private @Nullable List<String> facilityNames;

    public Optional<List<String>> facilityNames() {
        return Optional.ofNullable(this.facilityNames);
    }

    /**
     * The log levels to collect.
     * 
     */
    @Import(name="logLevels")
    private @Nullable List<String> logLevels;

    public Optional<List<String>> logLevels() {
        return Optional.ofNullable(this.logLevels);
    }

    /**
     * A friendly name for the data source.
     * This name should be unique across all data sources (regardless of type) within the data collection rule.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * List of streams that this data source will be sent to.
     * A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.
     * 
     */
    @Import(name="streams")
    private @Nullable List<String> streams;

    public Optional<List<String>> streams() {
        return Optional.ofNullable(this.streams);
    }

    private SyslogDataSourceResponse() {}

    private SyslogDataSourceResponse(SyslogDataSourceResponse $) {
        this.facilityNames = $.facilityNames;
        this.logLevels = $.logLevels;
        this.name = $.name;
        this.streams = $.streams;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SyslogDataSourceResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SyslogDataSourceResponse $;

        public Builder() {
            $ = new SyslogDataSourceResponse();
        }

        public Builder(SyslogDataSourceResponse defaults) {
            $ = new SyslogDataSourceResponse(Objects.requireNonNull(defaults));
        }

        public Builder facilityNames(@Nullable List<String> facilityNames) {
            $.facilityNames = facilityNames;
            return this;
        }

        public Builder facilityNames(String... facilityNames) {
            return facilityNames(List.of(facilityNames));
        }

        public Builder logLevels(@Nullable List<String> logLevels) {
            $.logLevels = logLevels;
            return this;
        }

        public Builder logLevels(String... logLevels) {
            return logLevels(List.of(logLevels));
        }

        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        public Builder streams(@Nullable List<String> streams) {
            $.streams = streams;
            return this;
        }

        public Builder streams(String... streams) {
            return streams(List.of(streams));
        }

        public SyslogDataSourceResponse build() {
            return $;
        }
    }

}
