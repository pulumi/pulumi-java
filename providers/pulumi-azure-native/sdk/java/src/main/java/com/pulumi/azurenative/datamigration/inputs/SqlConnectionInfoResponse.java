// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.datamigration.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Information for connecting to SQL database server
 * 
 */
public final class SqlConnectionInfoResponse extends com.pulumi.resources.InvokeArgs {

    public static final SqlConnectionInfoResponse Empty = new SqlConnectionInfoResponse();

    /**
     * Additional connection settings
     * 
     */
    @Import(name="additionalSettings")
    private @Nullable String additionalSettings;

    public Optional<String> additionalSettings() {
        return Optional.ofNullable(this.additionalSettings);
    }

    /**
     * Authentication type to use for connection
     * 
     */
    @Import(name="authentication")
    private @Nullable String authentication;

    public Optional<String> authentication() {
        return Optional.ofNullable(this.authentication);
    }

    /**
     * Data source in the format Protocol:MachineName\SQLServerInstanceName,PortNumber
     * 
     */
    @Import(name="dataSource", required=true)
    private String dataSource;

    public String dataSource() {
        return this.dataSource;
    }

    /**
     * Whether to encrypt the connection
     * 
     */
    @Import(name="encryptConnection")
    private @Nullable Boolean encryptConnection;

    public Optional<Boolean> encryptConnection() {
        return Optional.ofNullable(this.encryptConnection);
    }

    /**
     * Password credential.
     * 
     */
    @Import(name="password")
    private @Nullable String password;

    public Optional<String> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * Server platform type for connection
     * 
     */
    @Import(name="platform")
    private @Nullable String platform;

    public Optional<String> platform() {
        return Optional.ofNullable(this.platform);
    }

    /**
     * Whether to trust the server certificate
     * 
     */
    @Import(name="trustServerCertificate")
    private @Nullable Boolean trustServerCertificate;

    public Optional<Boolean> trustServerCertificate() {
        return Optional.ofNullable(this.trustServerCertificate);
    }

    /**
     * Type of connection info
     * Expected value is &#39;SqlConnectionInfo&#39;.
     * 
     */
    @Import(name="type", required=true)
    private String type;

    public String type() {
        return this.type;
    }

    /**
     * User name
     * 
     */
    @Import(name="userName")
    private @Nullable String userName;

    public Optional<String> userName() {
        return Optional.ofNullable(this.userName);
    }

    private SqlConnectionInfoResponse() {}

    private SqlConnectionInfoResponse(SqlConnectionInfoResponse $) {
        this.additionalSettings = $.additionalSettings;
        this.authentication = $.authentication;
        this.dataSource = $.dataSource;
        this.encryptConnection = $.encryptConnection;
        this.password = $.password;
        this.platform = $.platform;
        this.trustServerCertificate = $.trustServerCertificate;
        this.type = $.type;
        this.userName = $.userName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SqlConnectionInfoResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SqlConnectionInfoResponse $;

        public Builder() {
            $ = new SqlConnectionInfoResponse();
        }

        public Builder(SqlConnectionInfoResponse defaults) {
            $ = new SqlConnectionInfoResponse(Objects.requireNonNull(defaults));
        }

        public Builder additionalSettings(@Nullable String additionalSettings) {
            $.additionalSettings = additionalSettings;
            return this;
        }

        public Builder authentication(@Nullable String authentication) {
            $.authentication = authentication;
            return this;
        }

        public Builder dataSource(String dataSource) {
            $.dataSource = dataSource;
            return this;
        }

        public Builder encryptConnection(@Nullable Boolean encryptConnection) {
            $.encryptConnection = encryptConnection;
            return this;
        }

        public Builder password(@Nullable String password) {
            $.password = password;
            return this;
        }

        public Builder platform(@Nullable String platform) {
            $.platform = platform;
            return this;
        }

        public Builder trustServerCertificate(@Nullable Boolean trustServerCertificate) {
            $.trustServerCertificate = trustServerCertificate;
            return this;
        }

        public Builder type(String type) {
            $.type = type;
            return this;
        }

        public Builder userName(@Nullable String userName) {
            $.userName = userName;
            return this;
        }

        public SqlConnectionInfoResponse build() {
            $.dataSource = Objects.requireNonNull($.dataSource, "expected parameter 'dataSource' to be non-null");
            $.encryptConnection = Codegen.booleanProp("encryptConnection").arg($.encryptConnection).def(true).getNullable();
            $.trustServerCertificate = Codegen.booleanProp("trustServerCertificate").arg($.trustServerCertificate).def(false).getNullable();
            $.type = Codegen.stringProp("type").arg($.type).require();
            return $;
        }
    }

}
