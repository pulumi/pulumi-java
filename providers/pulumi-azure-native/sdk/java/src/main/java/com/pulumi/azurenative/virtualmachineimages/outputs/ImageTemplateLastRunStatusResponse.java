// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.virtualmachineimages.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ImageTemplateLastRunStatusResponse {
    /**
     * End time of the last run (UTC)
     * 
     */
    private final @Nullable String endTime;
    /**
     * Verbose information about the last run state
     * 
     */
    private final @Nullable String message;
    /**
     * State of the last run
     * 
     */
    private final @Nullable String runState;
    /**
     * Sub-state of the last run
     * 
     */
    private final @Nullable String runSubState;
    /**
     * Start time of the last run (UTC)
     * 
     */
    private final @Nullable String startTime;

    @CustomType.Constructor
    private ImageTemplateLastRunStatusResponse(
        @CustomType.Parameter("endTime") @Nullable String endTime,
        @CustomType.Parameter("message") @Nullable String message,
        @CustomType.Parameter("runState") @Nullable String runState,
        @CustomType.Parameter("runSubState") @Nullable String runSubState,
        @CustomType.Parameter("startTime") @Nullable String startTime) {
        this.endTime = endTime;
        this.message = message;
        this.runState = runState;
        this.runSubState = runSubState;
        this.startTime = startTime;
    }

    /**
     * End time of the last run (UTC)
     * 
    */
    public Optional<String> endTime() {
        return Optional.ofNullable(this.endTime);
    }
    /**
     * Verbose information about the last run state
     * 
    */
    public Optional<String> message() {
        return Optional.ofNullable(this.message);
    }
    /**
     * State of the last run
     * 
    */
    public Optional<String> runState() {
        return Optional.ofNullable(this.runState);
    }
    /**
     * Sub-state of the last run
     * 
    */
    public Optional<String> runSubState() {
        return Optional.ofNullable(this.runSubState);
    }
    /**
     * Start time of the last run (UTC)
     * 
    */
    public Optional<String> startTime() {
        return Optional.ofNullable(this.startTime);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ImageTemplateLastRunStatusResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String endTime;
        private @Nullable String message;
        private @Nullable String runState;
        private @Nullable String runSubState;
        private @Nullable String startTime;

        public Builder() {
    	      // Empty
        }

        public Builder(ImageTemplateLastRunStatusResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.endTime = defaults.endTime;
    	      this.message = defaults.message;
    	      this.runState = defaults.runState;
    	      this.runSubState = defaults.runSubState;
    	      this.startTime = defaults.startTime;
        }

        public Builder endTime(@Nullable String endTime) {
            this.endTime = endTime;
            return this;
        }
        public Builder message(@Nullable String message) {
            this.message = message;
            return this;
        }
        public Builder runState(@Nullable String runState) {
            this.runState = runState;
            return this;
        }
        public Builder runSubState(@Nullable String runSubState) {
            this.runSubState = runSubState;
            return this;
        }
        public Builder startTime(@Nullable String startTime) {
            this.startTime = startTime;
            return this;
        }        public ImageTemplateLastRunStatusResponse build() {
            return new ImageTemplateLastRunStatusResponse(endTime, message, runState, runSubState, startTime);
        }
    }
}
