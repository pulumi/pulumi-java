// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.storagesync.inputs;

import com.pulumi.azurenative.storagesync.inputs.ServerEndpointSyncActivityStatusResponse;
import com.pulumi.azurenative.storagesync.inputs.ServerEndpointSyncSessionStatusResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;


/**
 * Server Endpoint sync status
 * 
 */
public final class ServerEndpointSyncStatusResponse extends com.pulumi.resources.InvokeArgs {

    public static final ServerEndpointSyncStatusResponse Empty = new ServerEndpointSyncStatusResponse();

    /**
     * Combined Health Status.
     * 
     */
    @Import(name="combinedHealth", required=true)
      private final String combinedHealth;

    public String combinedHealth() {
        return this.combinedHealth;
    }

    /**
     * Download sync activity
     * 
     */
    @Import(name="downloadActivity", required=true)
      private final ServerEndpointSyncActivityStatusResponse downloadActivity;

    public ServerEndpointSyncActivityStatusResponse downloadActivity() {
        return this.downloadActivity;
    }

    /**
     * Download Health Status.
     * 
     */
    @Import(name="downloadHealth", required=true)
      private final String downloadHealth;

    public String downloadHealth() {
        return this.downloadHealth;
    }

    /**
     * Download Status
     * 
     */
    @Import(name="downloadStatus", required=true)
      private final ServerEndpointSyncSessionStatusResponse downloadStatus;

    public ServerEndpointSyncSessionStatusResponse downloadStatus() {
        return this.downloadStatus;
    }

    /**
     * Last Updated Timestamp
     * 
     */
    @Import(name="lastUpdatedTimestamp", required=true)
      private final String lastUpdatedTimestamp;

    public String lastUpdatedTimestamp() {
        return this.lastUpdatedTimestamp;
    }

    /**
     * Offline Data Transfer State
     * 
     */
    @Import(name="offlineDataTransferStatus", required=true)
      private final String offlineDataTransferStatus;

    public String offlineDataTransferStatus() {
        return this.offlineDataTransferStatus;
    }

    /**
     * Sync activity
     * 
     */
    @Import(name="syncActivity", required=true)
      private final String syncActivity;

    public String syncActivity() {
        return this.syncActivity;
    }

    /**
     * Total count of persistent files not syncing (combined upload + download).
     * 
     */
    @Import(name="totalPersistentFilesNotSyncingCount", required=true)
      private final Double totalPersistentFilesNotSyncingCount;

    public Double totalPersistentFilesNotSyncingCount() {
        return this.totalPersistentFilesNotSyncingCount;
    }

    /**
     * Upload sync activity
     * 
     */
    @Import(name="uploadActivity", required=true)
      private final ServerEndpointSyncActivityStatusResponse uploadActivity;

    public ServerEndpointSyncActivityStatusResponse uploadActivity() {
        return this.uploadActivity;
    }

    /**
     * Upload Health Status.
     * 
     */
    @Import(name="uploadHealth", required=true)
      private final String uploadHealth;

    public String uploadHealth() {
        return this.uploadHealth;
    }

    /**
     * Upload Status
     * 
     */
    @Import(name="uploadStatus", required=true)
      private final ServerEndpointSyncSessionStatusResponse uploadStatus;

    public ServerEndpointSyncSessionStatusResponse uploadStatus() {
        return this.uploadStatus;
    }

    public ServerEndpointSyncStatusResponse(
        String combinedHealth,
        ServerEndpointSyncActivityStatusResponse downloadActivity,
        String downloadHealth,
        ServerEndpointSyncSessionStatusResponse downloadStatus,
        String lastUpdatedTimestamp,
        String offlineDataTransferStatus,
        String syncActivity,
        Double totalPersistentFilesNotSyncingCount,
        ServerEndpointSyncActivityStatusResponse uploadActivity,
        String uploadHealth,
        ServerEndpointSyncSessionStatusResponse uploadStatus) {
        this.combinedHealth = Objects.requireNonNull(combinedHealth, "expected parameter 'combinedHealth' to be non-null");
        this.downloadActivity = Objects.requireNonNull(downloadActivity, "expected parameter 'downloadActivity' to be non-null");
        this.downloadHealth = Objects.requireNonNull(downloadHealth, "expected parameter 'downloadHealth' to be non-null");
        this.downloadStatus = Objects.requireNonNull(downloadStatus, "expected parameter 'downloadStatus' to be non-null");
        this.lastUpdatedTimestamp = Objects.requireNonNull(lastUpdatedTimestamp, "expected parameter 'lastUpdatedTimestamp' to be non-null");
        this.offlineDataTransferStatus = Objects.requireNonNull(offlineDataTransferStatus, "expected parameter 'offlineDataTransferStatus' to be non-null");
        this.syncActivity = Objects.requireNonNull(syncActivity, "expected parameter 'syncActivity' to be non-null");
        this.totalPersistentFilesNotSyncingCount = Objects.requireNonNull(totalPersistentFilesNotSyncingCount, "expected parameter 'totalPersistentFilesNotSyncingCount' to be non-null");
        this.uploadActivity = Objects.requireNonNull(uploadActivity, "expected parameter 'uploadActivity' to be non-null");
        this.uploadHealth = Objects.requireNonNull(uploadHealth, "expected parameter 'uploadHealth' to be non-null");
        this.uploadStatus = Objects.requireNonNull(uploadStatus, "expected parameter 'uploadStatus' to be non-null");
    }

    private ServerEndpointSyncStatusResponse() {
        this.combinedHealth = null;
        this.downloadActivity = null;
        this.downloadHealth = null;
        this.downloadStatus = null;
        this.lastUpdatedTimestamp = null;
        this.offlineDataTransferStatus = null;
        this.syncActivity = null;
        this.totalPersistentFilesNotSyncingCount = null;
        this.uploadActivity = null;
        this.uploadHealth = null;
        this.uploadStatus = null;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServerEndpointSyncStatusResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String combinedHealth;
        private ServerEndpointSyncActivityStatusResponse downloadActivity;
        private String downloadHealth;
        private ServerEndpointSyncSessionStatusResponse downloadStatus;
        private String lastUpdatedTimestamp;
        private String offlineDataTransferStatus;
        private String syncActivity;
        private Double totalPersistentFilesNotSyncingCount;
        private ServerEndpointSyncActivityStatusResponse uploadActivity;
        private String uploadHealth;
        private ServerEndpointSyncSessionStatusResponse uploadStatus;

        public Builder() {
    	      // Empty
        }

        public Builder(ServerEndpointSyncStatusResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.combinedHealth = defaults.combinedHealth;
    	      this.downloadActivity = defaults.downloadActivity;
    	      this.downloadHealth = defaults.downloadHealth;
    	      this.downloadStatus = defaults.downloadStatus;
    	      this.lastUpdatedTimestamp = defaults.lastUpdatedTimestamp;
    	      this.offlineDataTransferStatus = defaults.offlineDataTransferStatus;
    	      this.syncActivity = defaults.syncActivity;
    	      this.totalPersistentFilesNotSyncingCount = defaults.totalPersistentFilesNotSyncingCount;
    	      this.uploadActivity = defaults.uploadActivity;
    	      this.uploadHealth = defaults.uploadHealth;
    	      this.uploadStatus = defaults.uploadStatus;
        }

        public Builder combinedHealth(String combinedHealth) {
            this.combinedHealth = Objects.requireNonNull(combinedHealth);
            return this;
        }
        public Builder downloadActivity(ServerEndpointSyncActivityStatusResponse downloadActivity) {
            this.downloadActivity = Objects.requireNonNull(downloadActivity);
            return this;
        }
        public Builder downloadHealth(String downloadHealth) {
            this.downloadHealth = Objects.requireNonNull(downloadHealth);
            return this;
        }
        public Builder downloadStatus(ServerEndpointSyncSessionStatusResponse downloadStatus) {
            this.downloadStatus = Objects.requireNonNull(downloadStatus);
            return this;
        }
        public Builder lastUpdatedTimestamp(String lastUpdatedTimestamp) {
            this.lastUpdatedTimestamp = Objects.requireNonNull(lastUpdatedTimestamp);
            return this;
        }
        public Builder offlineDataTransferStatus(String offlineDataTransferStatus) {
            this.offlineDataTransferStatus = Objects.requireNonNull(offlineDataTransferStatus);
            return this;
        }
        public Builder syncActivity(String syncActivity) {
            this.syncActivity = Objects.requireNonNull(syncActivity);
            return this;
        }
        public Builder totalPersistentFilesNotSyncingCount(Double totalPersistentFilesNotSyncingCount) {
            this.totalPersistentFilesNotSyncingCount = Objects.requireNonNull(totalPersistentFilesNotSyncingCount);
            return this;
        }
        public Builder uploadActivity(ServerEndpointSyncActivityStatusResponse uploadActivity) {
            this.uploadActivity = Objects.requireNonNull(uploadActivity);
            return this;
        }
        public Builder uploadHealth(String uploadHealth) {
            this.uploadHealth = Objects.requireNonNull(uploadHealth);
            return this;
        }
        public Builder uploadStatus(ServerEndpointSyncSessionStatusResponse uploadStatus) {
            this.uploadStatus = Objects.requireNonNull(uploadStatus);
            return this;
        }        public ServerEndpointSyncStatusResponse build() {
            return new ServerEndpointSyncStatusResponse(combinedHealth, downloadActivity, downloadHealth, downloadStatus, lastUpdatedTimestamp, offlineDataTransferStatus, syncActivity, totalPersistentFilesNotSyncingCount, uploadActivity, uploadHealth, uploadStatus);
        }
    }
}
