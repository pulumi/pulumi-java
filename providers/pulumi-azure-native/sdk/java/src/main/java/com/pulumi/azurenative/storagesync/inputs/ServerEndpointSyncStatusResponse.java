// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.storagesync.inputs;

import com.pulumi.azurenative.storagesync.inputs.ServerEndpointSyncActivityStatusResponse;
import com.pulumi.azurenative.storagesync.inputs.ServerEndpointSyncSessionStatusResponse;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;


/**
 * Server Endpoint sync status
 * 
 */
public final class ServerEndpointSyncStatusResponse extends com.pulumi.resources.InvokeArgs {

    public static final ServerEndpointSyncStatusResponse Empty = new ServerEndpointSyncStatusResponse();

    /**
     * Combined Health Status.
     * 
     */
    @Import(name="combinedHealth", required=true)
    private String combinedHealth;

    public String combinedHealth() {
        return this.combinedHealth;
    }

    /**
     * Download sync activity
     * 
     */
    @Import(name="downloadActivity", required=true)
    private ServerEndpointSyncActivityStatusResponse downloadActivity;

    public ServerEndpointSyncActivityStatusResponse downloadActivity() {
        return this.downloadActivity;
    }

    /**
     * Download Health Status.
     * 
     */
    @Import(name="downloadHealth", required=true)
    private String downloadHealth;

    public String downloadHealth() {
        return this.downloadHealth;
    }

    /**
     * Download Status
     * 
     */
    @Import(name="downloadStatus", required=true)
    private ServerEndpointSyncSessionStatusResponse downloadStatus;

    public ServerEndpointSyncSessionStatusResponse downloadStatus() {
        return this.downloadStatus;
    }

    /**
     * Last Updated Timestamp
     * 
     */
    @Import(name="lastUpdatedTimestamp", required=true)
    private String lastUpdatedTimestamp;

    public String lastUpdatedTimestamp() {
        return this.lastUpdatedTimestamp;
    }

    /**
     * Offline Data Transfer State
     * 
     */
    @Import(name="offlineDataTransferStatus", required=true)
    private String offlineDataTransferStatus;

    public String offlineDataTransferStatus() {
        return this.offlineDataTransferStatus;
    }

    /**
     * Sync activity
     * 
     */
    @Import(name="syncActivity", required=true)
    private String syncActivity;

    public String syncActivity() {
        return this.syncActivity;
    }

    /**
     * Total count of persistent files not syncing (combined upload + download).
     * 
     */
    @Import(name="totalPersistentFilesNotSyncingCount", required=true)
    private Double totalPersistentFilesNotSyncingCount;

    public Double totalPersistentFilesNotSyncingCount() {
        return this.totalPersistentFilesNotSyncingCount;
    }

    /**
     * Upload sync activity
     * 
     */
    @Import(name="uploadActivity", required=true)
    private ServerEndpointSyncActivityStatusResponse uploadActivity;

    public ServerEndpointSyncActivityStatusResponse uploadActivity() {
        return this.uploadActivity;
    }

    /**
     * Upload Health Status.
     * 
     */
    @Import(name="uploadHealth", required=true)
    private String uploadHealth;

    public String uploadHealth() {
        return this.uploadHealth;
    }

    /**
     * Upload Status
     * 
     */
    @Import(name="uploadStatus", required=true)
    private ServerEndpointSyncSessionStatusResponse uploadStatus;

    public ServerEndpointSyncSessionStatusResponse uploadStatus() {
        return this.uploadStatus;
    }

    private ServerEndpointSyncStatusResponse() {}

    private ServerEndpointSyncStatusResponse(ServerEndpointSyncStatusResponse $) {
        this.combinedHealth = $.combinedHealth;
        this.downloadActivity = $.downloadActivity;
        this.downloadHealth = $.downloadHealth;
        this.downloadStatus = $.downloadStatus;
        this.lastUpdatedTimestamp = $.lastUpdatedTimestamp;
        this.offlineDataTransferStatus = $.offlineDataTransferStatus;
        this.syncActivity = $.syncActivity;
        this.totalPersistentFilesNotSyncingCount = $.totalPersistentFilesNotSyncingCount;
        this.uploadActivity = $.uploadActivity;
        this.uploadHealth = $.uploadHealth;
        this.uploadStatus = $.uploadStatus;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServerEndpointSyncStatusResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServerEndpointSyncStatusResponse $;

        public Builder() {
            $ = new ServerEndpointSyncStatusResponse();
        }

        public Builder(ServerEndpointSyncStatusResponse defaults) {
            $ = new ServerEndpointSyncStatusResponse(Objects.requireNonNull(defaults));
        }

        public Builder combinedHealth(String combinedHealth) {
            $.combinedHealth = combinedHealth;
            return this;
        }

        public Builder downloadActivity(ServerEndpointSyncActivityStatusResponse downloadActivity) {
            $.downloadActivity = downloadActivity;
            return this;
        }

        public Builder downloadHealth(String downloadHealth) {
            $.downloadHealth = downloadHealth;
            return this;
        }

        public Builder downloadStatus(ServerEndpointSyncSessionStatusResponse downloadStatus) {
            $.downloadStatus = downloadStatus;
            return this;
        }

        public Builder lastUpdatedTimestamp(String lastUpdatedTimestamp) {
            $.lastUpdatedTimestamp = lastUpdatedTimestamp;
            return this;
        }

        public Builder offlineDataTransferStatus(String offlineDataTransferStatus) {
            $.offlineDataTransferStatus = offlineDataTransferStatus;
            return this;
        }

        public Builder syncActivity(String syncActivity) {
            $.syncActivity = syncActivity;
            return this;
        }

        public Builder totalPersistentFilesNotSyncingCount(Double totalPersistentFilesNotSyncingCount) {
            $.totalPersistentFilesNotSyncingCount = totalPersistentFilesNotSyncingCount;
            return this;
        }

        public Builder uploadActivity(ServerEndpointSyncActivityStatusResponse uploadActivity) {
            $.uploadActivity = uploadActivity;
            return this;
        }

        public Builder uploadHealth(String uploadHealth) {
            $.uploadHealth = uploadHealth;
            return this;
        }

        public Builder uploadStatus(ServerEndpointSyncSessionStatusResponse uploadStatus) {
            $.uploadStatus = uploadStatus;
            return this;
        }

        public ServerEndpointSyncStatusResponse build() {
            $.combinedHealth = Objects.requireNonNull($.combinedHealth, "expected parameter 'combinedHealth' to be non-null");
            $.downloadActivity = Objects.requireNonNull($.downloadActivity, "expected parameter 'downloadActivity' to be non-null");
            $.downloadHealth = Objects.requireNonNull($.downloadHealth, "expected parameter 'downloadHealth' to be non-null");
            $.downloadStatus = Objects.requireNonNull($.downloadStatus, "expected parameter 'downloadStatus' to be non-null");
            $.lastUpdatedTimestamp = Objects.requireNonNull($.lastUpdatedTimestamp, "expected parameter 'lastUpdatedTimestamp' to be non-null");
            $.offlineDataTransferStatus = Objects.requireNonNull($.offlineDataTransferStatus, "expected parameter 'offlineDataTransferStatus' to be non-null");
            $.syncActivity = Objects.requireNonNull($.syncActivity, "expected parameter 'syncActivity' to be non-null");
            $.totalPersistentFilesNotSyncingCount = Objects.requireNonNull($.totalPersistentFilesNotSyncingCount, "expected parameter 'totalPersistentFilesNotSyncingCount' to be non-null");
            $.uploadActivity = Objects.requireNonNull($.uploadActivity, "expected parameter 'uploadActivity' to be non-null");
            $.uploadHealth = Objects.requireNonNull($.uploadHealth, "expected parameter 'uploadHealth' to be non-null");
            $.uploadStatus = Objects.requireNonNull($.uploadStatus, "expected parameter 'uploadStatus' to be non-null");
            return $;
        }
    }

}
