// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.network.inputs;

import com.pulumi.azurenative.network.inputs.ApplicationRuleConditionResponse;
import com.pulumi.azurenative.network.inputs.FirewallPolicyFilterRuleActionResponse;
import com.pulumi.azurenative.network.inputs.NatRuleConditionResponse;
import com.pulumi.azurenative.network.inputs.NetworkRuleConditionResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Firewall Policy Filter Rule.
 * 
 */
public final class FirewallPolicyFilterRuleResponse extends com.pulumi.resources.InvokeArgs {

    public static final FirewallPolicyFilterRuleResponse Empty = new FirewallPolicyFilterRuleResponse();

    /**
     * The action type of a Filter rule.
     * 
     */
    @Import(name="action")
    private @Nullable FirewallPolicyFilterRuleActionResponse action;

    public Optional<FirewallPolicyFilterRuleActionResponse> action() {
        return Optional.ofNullable(this.action);
    }

    /**
     * The name of the rule.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Priority of the Firewall Policy Rule resource.
     * 
     */
    @Import(name="priority")
    private @Nullable Integer priority;

    public Optional<Integer> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * Collection of rule conditions used by a rule.
     * 
     */
    @Import(name="ruleConditions")
    private @Nullable List<Object> ruleConditions;

    public Optional<List<Object>> ruleConditions() {
        return Optional.ofNullable(this.ruleConditions);
    }

    /**
     * The type of the rule.
     * Expected value is &#39;FirewallPolicyFilterRule&#39;.
     * 
     */
    @Import(name="ruleType", required=true)
    private String ruleType;

    public String ruleType() {
        return this.ruleType;
    }

    private FirewallPolicyFilterRuleResponse() {}

    private FirewallPolicyFilterRuleResponse(FirewallPolicyFilterRuleResponse $) {
        this.action = $.action;
        this.name = $.name;
        this.priority = $.priority;
        this.ruleConditions = $.ruleConditions;
        this.ruleType = $.ruleType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FirewallPolicyFilterRuleResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FirewallPolicyFilterRuleResponse $;

        public Builder() {
            $ = new FirewallPolicyFilterRuleResponse();
        }

        public Builder(FirewallPolicyFilterRuleResponse defaults) {
            $ = new FirewallPolicyFilterRuleResponse(Objects.requireNonNull(defaults));
        }

        public Builder action(@Nullable FirewallPolicyFilterRuleActionResponse action) {
            $.action = action;
            return this;
        }

        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        public Builder priority(@Nullable Integer priority) {
            $.priority = priority;
            return this;
        }

        public Builder ruleConditions(@Nullable List<Object> ruleConditions) {
            $.ruleConditions = ruleConditions;
            return this;
        }

        public Builder ruleConditions(Object... ruleConditions) {
            return ruleConditions(List.of(ruleConditions));
        }

        public Builder ruleType(String ruleType) {
            $.ruleType = ruleType;
            return this;
        }

        public FirewallPolicyFilterRuleResponse build() {
            $.ruleType = Codegen.stringProp("ruleType").arg($.ruleType).require();
            return $;
        }
    }

}
