// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.consumption.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * The notification associated with a budget.
 * 
 */
public final class NotificationResponse extends com.pulumi.resources.InvokeArgs {

    public static final NotificationResponse Empty = new NotificationResponse();

    /**
     * Email addresses to send the budget notification to when the threshold is exceeded. Must have at least one contact email or contact group specified at the Subscription or Resource Group scopes. All other scopes must have at least one contact email specified.
     * 
     */
    @Import(name="contactEmails", required=true)
    private List<String> contactEmails;

    public List<String> contactEmails() {
        return this.contactEmails;
    }

    /**
     * Action groups to send the budget notification to when the threshold is exceeded. Must be provided as a fully qualified Azure resource id. Only supported at Subscription or Resource Group scopes.
     * 
     */
    @Import(name="contactGroups")
    private @Nullable List<String> contactGroups;

    public Optional<List<String>> contactGroups() {
        return Optional.ofNullable(this.contactGroups);
    }

    /**
     * Contact roles to send the budget notification to when the threshold is exceeded.
     * 
     */
    @Import(name="contactRoles")
    private @Nullable List<String> contactRoles;

    public Optional<List<String>> contactRoles() {
        return Optional.ofNullable(this.contactRoles);
    }

    /**
     * The notification is enabled or not.
     * 
     */
    @Import(name="enabled", required=true)
    private Boolean enabled;

    public Boolean enabled() {
        return this.enabled;
    }

    /**
     * Language in which the recipient will receive the notification
     * 
     */
    @Import(name="locale")
    private @Nullable String locale;

    public Optional<String> locale() {
        return Optional.ofNullable(this.locale);
    }

    /**
     * The comparison operator.
     * 
     */
    @Import(name="operator", required=true)
    private String operator;

    public String operator() {
        return this.operator;
    }

    /**
     * Threshold value associated with a notification. Notification is sent when the cost exceeded the threshold. It is always percent and has to be between 0 and 1000.
     * 
     */
    @Import(name="threshold", required=true)
    private Double threshold;

    public Double threshold() {
        return this.threshold;
    }

    /**
     * The type of threshold
     * 
     */
    @Import(name="thresholdType")
    private @Nullable String thresholdType;

    public Optional<String> thresholdType() {
        return Optional.ofNullable(this.thresholdType);
    }

    private NotificationResponse() {}

    private NotificationResponse(NotificationResponse $) {
        this.contactEmails = $.contactEmails;
        this.contactGroups = $.contactGroups;
        this.contactRoles = $.contactRoles;
        this.enabled = $.enabled;
        this.locale = $.locale;
        this.operator = $.operator;
        this.threshold = $.threshold;
        this.thresholdType = $.thresholdType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NotificationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NotificationResponse $;

        public Builder() {
            $ = new NotificationResponse();
        }

        public Builder(NotificationResponse defaults) {
            $ = new NotificationResponse(Objects.requireNonNull(defaults));
        }

        public Builder contactEmails(List<String> contactEmails) {
            $.contactEmails = contactEmails;
            return this;
        }

        public Builder contactEmails(String... contactEmails) {
            return contactEmails(List.of(contactEmails));
        }

        public Builder contactGroups(@Nullable List<String> contactGroups) {
            $.contactGroups = contactGroups;
            return this;
        }

        public Builder contactGroups(String... contactGroups) {
            return contactGroups(List.of(contactGroups));
        }

        public Builder contactRoles(@Nullable List<String> contactRoles) {
            $.contactRoles = contactRoles;
            return this;
        }

        public Builder contactRoles(String... contactRoles) {
            return contactRoles(List.of(contactRoles));
        }

        public Builder enabled(Boolean enabled) {
            $.enabled = enabled;
            return this;
        }

        public Builder locale(@Nullable String locale) {
            $.locale = locale;
            return this;
        }

        public Builder operator(String operator) {
            $.operator = operator;
            return this;
        }

        public Builder threshold(Double threshold) {
            $.threshold = threshold;
            return this;
        }

        public Builder thresholdType(@Nullable String thresholdType) {
            $.thresholdType = thresholdType;
            return this;
        }

        public NotificationResponse build() {
            $.contactEmails = Objects.requireNonNull($.contactEmails, "expected parameter 'contactEmails' to be non-null");
            $.enabled = Objects.requireNonNull($.enabled, "expected parameter 'enabled' to be non-null");
            $.operator = Objects.requireNonNull($.operator, "expected parameter 'operator' to be non-null");
            $.threshold = Objects.requireNonNull($.threshold, "expected parameter 'threshold' to be non-null");
            $.thresholdType = Codegen.stringProp("thresholdType").arg($.thresholdType).def("Actual").getNullable();
            return $;
        }
    }

}
