// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.edgeorder.inputs;

import com.pulumi.azurenative.edgeorder.inputs.AvailabilityInformationResponse;
import com.pulumi.azurenative.edgeorder.inputs.CostInformationResponse;
import com.pulumi.azurenative.edgeorder.inputs.DescriptionResponse;
import com.pulumi.azurenative.edgeorder.inputs.DimensionsResponse;
import com.pulumi.azurenative.edgeorder.inputs.FilterablePropertyResponse;
import com.pulumi.azurenative.edgeorder.inputs.HierarchyInformationResponse;
import com.pulumi.azurenative.edgeorder.inputs.ImageInformationResponse;
import com.pulumi.azurenative.edgeorder.inputs.SpecificationResponse;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;


/**
 * Configuration object.
 * 
 */
public final class ConfigurationResponse extends com.pulumi.resources.InvokeArgs {

    public static final ConfigurationResponse Empty = new ConfigurationResponse();

    /**
     * Availability information of the product system.
     * 
     */
    @Import(name="availabilityInformation", required=true)
    private AvailabilityInformationResponse availabilityInformation;

    /**
     * @return Availability information of the product system.
     * 
     */
    public AvailabilityInformationResponse availabilityInformation() {
        return this.availabilityInformation;
    }

    /**
     * Cost information for the product system.
     * 
     */
    @Import(name="costInformation", required=true)
    private CostInformationResponse costInformation;

    /**
     * @return Cost information for the product system.
     * 
     */
    public CostInformationResponse costInformation() {
        return this.costInformation;
    }

    /**
     * Description related to the product system.
     * 
     */
    @Import(name="description", required=true)
    private DescriptionResponse description;

    /**
     * @return Description related to the product system.
     * 
     */
    public DescriptionResponse description() {
        return this.description;
    }

    /**
     * Dimensions of the configuration
     * 
     */
    @Import(name="dimensions", required=true)
    private DimensionsResponse dimensions;

    /**
     * @return Dimensions of the configuration
     * 
     */
    public DimensionsResponse dimensions() {
        return this.dimensions;
    }

    /**
     * Display Name for the product system.
     * 
     */
    @Import(name="displayName", required=true)
    private String displayName;

    /**
     * @return Display Name for the product system.
     * 
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * list of filters supported for a product
     * 
     */
    @Import(name="filterableProperties", required=true)
    private List<FilterablePropertyResponse> filterableProperties;

    /**
     * @return list of filters supported for a product
     * 
     */
    public List<FilterablePropertyResponse> filterableProperties() {
        return this.filterableProperties;
    }

    /**
     * Hierarchy information of a product.
     * 
     */
    @Import(name="hierarchyInformation", required=true)
    private HierarchyInformationResponse hierarchyInformation;

    /**
     * @return Hierarchy information of a product.
     * 
     */
    public HierarchyInformationResponse hierarchyInformation() {
        return this.hierarchyInformation;
    }

    /**
     * Image information for the product system.
     * 
     */
    @Import(name="imageInformation", required=true)
    private List<ImageInformationResponse> imageInformation;

    /**
     * @return Image information for the product system.
     * 
     */
    public List<ImageInformationResponse> imageInformation() {
        return this.imageInformation;
    }

    /**
     * Specifications of the configuration
     * 
     */
    @Import(name="specifications", required=true)
    private List<SpecificationResponse> specifications;

    /**
     * @return Specifications of the configuration
     * 
     */
    public List<SpecificationResponse> specifications() {
        return this.specifications;
    }

    private ConfigurationResponse() {}

    private ConfigurationResponse(ConfigurationResponse $) {
        this.availabilityInformation = $.availabilityInformation;
        this.costInformation = $.costInformation;
        this.description = $.description;
        this.dimensions = $.dimensions;
        this.displayName = $.displayName;
        this.filterableProperties = $.filterableProperties;
        this.hierarchyInformation = $.hierarchyInformation;
        this.imageInformation = $.imageInformation;
        this.specifications = $.specifications;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConfigurationResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConfigurationResponse $;

        public Builder() {
            $ = new ConfigurationResponse();
        }

        public Builder(ConfigurationResponse defaults) {
            $ = new ConfigurationResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param availabilityInformation Availability information of the product system.
         * 
         * @return builder
         * 
         */
        public Builder availabilityInformation(AvailabilityInformationResponse availabilityInformation) {
            $.availabilityInformation = availabilityInformation;
            return this;
        }

        /**
         * @param costInformation Cost information for the product system.
         * 
         * @return builder
         * 
         */
        public Builder costInformation(CostInformationResponse costInformation) {
            $.costInformation = costInformation;
            return this;
        }

        /**
         * @param description Description related to the product system.
         * 
         * @return builder
         * 
         */
        public Builder description(DescriptionResponse description) {
            $.description = description;
            return this;
        }

        /**
         * @param dimensions Dimensions of the configuration
         * 
         * @return builder
         * 
         */
        public Builder dimensions(DimensionsResponse dimensions) {
            $.dimensions = dimensions;
            return this;
        }

        /**
         * @param displayName Display Name for the product system.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param filterableProperties list of filters supported for a product
         * 
         * @return builder
         * 
         */
        public Builder filterableProperties(List<FilterablePropertyResponse> filterableProperties) {
            $.filterableProperties = filterableProperties;
            return this;
        }

        /**
         * @param filterableProperties list of filters supported for a product
         * 
         * @return builder
         * 
         */
        public Builder filterableProperties(FilterablePropertyResponse... filterableProperties) {
            return filterableProperties(List.of(filterableProperties));
        }

        /**
         * @param hierarchyInformation Hierarchy information of a product.
         * 
         * @return builder
         * 
         */
        public Builder hierarchyInformation(HierarchyInformationResponse hierarchyInformation) {
            $.hierarchyInformation = hierarchyInformation;
            return this;
        }

        /**
         * @param imageInformation Image information for the product system.
         * 
         * @return builder
         * 
         */
        public Builder imageInformation(List<ImageInformationResponse> imageInformation) {
            $.imageInformation = imageInformation;
            return this;
        }

        /**
         * @param imageInformation Image information for the product system.
         * 
         * @return builder
         * 
         */
        public Builder imageInformation(ImageInformationResponse... imageInformation) {
            return imageInformation(List.of(imageInformation));
        }

        /**
         * @param specifications Specifications of the configuration
         * 
         * @return builder
         * 
         */
        public Builder specifications(List<SpecificationResponse> specifications) {
            $.specifications = specifications;
            return this;
        }

        /**
         * @param specifications Specifications of the configuration
         * 
         * @return builder
         * 
         */
        public Builder specifications(SpecificationResponse... specifications) {
            return specifications(List.of(specifications));
        }

        public ConfigurationResponse build() {
            $.availabilityInformation = Objects.requireNonNull($.availabilityInformation, "expected parameter 'availabilityInformation' to be non-null");
            $.costInformation = Objects.requireNonNull($.costInformation, "expected parameter 'costInformation' to be non-null");
            $.description = Objects.requireNonNull($.description, "expected parameter 'description' to be non-null");
            $.dimensions = Objects.requireNonNull($.dimensions, "expected parameter 'dimensions' to be non-null");
            $.displayName = Objects.requireNonNull($.displayName, "expected parameter 'displayName' to be non-null");
            $.filterableProperties = Objects.requireNonNull($.filterableProperties, "expected parameter 'filterableProperties' to be non-null");
            $.hierarchyInformation = Objects.requireNonNull($.hierarchyInformation, "expected parameter 'hierarchyInformation' to be non-null");
            $.imageInformation = Objects.requireNonNull($.imageInformation, "expected parameter 'imageInformation' to be non-null");
            $.specifications = Objects.requireNonNull($.specifications, "expected parameter 'specifications' to be non-null");
            return $;
        }
    }

}
