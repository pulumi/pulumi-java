// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.storagecache.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * A namespace junction.
 * 
 */
public final class NamespaceJunctionResponse extends com.pulumi.resources.InvokeArgs {

    public static final NamespaceJunctionResponse Empty = new NamespaceJunctionResponse();

    /**
     * Namespace path on a Cache for a Storage Target.
     * 
     */
    @Import(name="namespacePath")
    private @Nullable String namespacePath;

    /**
     * @return Namespace path on a Cache for a Storage Target.
     * 
     */
    public Optional<String> namespacePath() {
        return Optional.ofNullable(this.namespacePath);
    }

    /**
     * Name of the access policy applied to this junction.
     * 
     */
    @Import(name="nfsAccessPolicy")
    private @Nullable String nfsAccessPolicy;

    /**
     * @return Name of the access policy applied to this junction.
     * 
     */
    public Optional<String> nfsAccessPolicy() {
        return Optional.ofNullable(this.nfsAccessPolicy);
    }

    /**
     * NFS export where targetPath exists.
     * 
     */
    @Import(name="nfsExport")
    private @Nullable String nfsExport;

    /**
     * @return NFS export where targetPath exists.
     * 
     */
    public Optional<String> nfsExport() {
        return Optional.ofNullable(this.nfsExport);
    }

    /**
     * Path in Storage Target to which namespacePath points.
     * 
     */
    @Import(name="targetPath")
    private @Nullable String targetPath;

    /**
     * @return Path in Storage Target to which namespacePath points.
     * 
     */
    public Optional<String> targetPath() {
        return Optional.ofNullable(this.targetPath);
    }

    private NamespaceJunctionResponse() {}

    private NamespaceJunctionResponse(NamespaceJunctionResponse $) {
        this.namespacePath = $.namespacePath;
        this.nfsAccessPolicy = $.nfsAccessPolicy;
        this.nfsExport = $.nfsExport;
        this.targetPath = $.targetPath;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NamespaceJunctionResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NamespaceJunctionResponse $;

        public Builder() {
            $ = new NamespaceJunctionResponse();
        }

        public Builder(NamespaceJunctionResponse defaults) {
            $ = new NamespaceJunctionResponse(Objects.requireNonNull(defaults));
        }

        /**
         * @param namespacePath Namespace path on a Cache for a Storage Target.
         * 
         * @return builder
         * 
         */
        public Builder namespacePath(@Nullable String namespacePath) {
            $.namespacePath = namespacePath;
            return this;
        }

        /**
         * @param nfsAccessPolicy Name of the access policy applied to this junction.
         * 
         * @return builder
         * 
         */
        public Builder nfsAccessPolicy(@Nullable String nfsAccessPolicy) {
            $.nfsAccessPolicy = nfsAccessPolicy;
            return this;
        }

        /**
         * @param nfsExport NFS export where targetPath exists.
         * 
         * @return builder
         * 
         */
        public Builder nfsExport(@Nullable String nfsExport) {
            $.nfsExport = nfsExport;
            return this;
        }

        /**
         * @param targetPath Path in Storage Target to which namespacePath points.
         * 
         * @return builder
         * 
         */
        public Builder targetPath(@Nullable String targetPath) {
            $.targetPath = targetPath;
            return this;
        }

        public NamespaceJunctionResponse build() {
            $.nfsAccessPolicy = Codegen.stringProp("nfsAccessPolicy").arg($.nfsAccessPolicy).def("default").getNullable();
            return $;
        }
    }

}
