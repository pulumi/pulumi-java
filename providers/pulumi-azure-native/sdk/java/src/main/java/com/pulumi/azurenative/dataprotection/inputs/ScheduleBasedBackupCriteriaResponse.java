// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.azurenative.dataprotection.inputs;

import com.pulumi.azurenative.dataprotection.inputs.DayResponse;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Schedule based backup criteria
 * 
 */
public final class ScheduleBasedBackupCriteriaResponse extends com.pulumi.resources.InvokeArgs {

    public static final ScheduleBasedBackupCriteriaResponse Empty = new ScheduleBasedBackupCriteriaResponse();

    /**
     * it contains absolute values like &#34;AllBackup&#34; / &#34;FirstOfDay&#34; / &#34;FirstOfWeek&#34; / &#34;FirstOfMonth&#34;
     * and should be part of AbsoluteMarker enum
     * 
     */
    @Import(name="absoluteCriteria")
      private final @Nullable List<String> absoluteCriteria;

    public List<String> absoluteCriteria() {
        return this.absoluteCriteria == null ? List.of() : this.absoluteCriteria;
    }

    /**
     * This is day of the month from 1 to 28 other wise last of month
     * 
     */
    @Import(name="daysOfMonth")
      private final @Nullable List<DayResponse> daysOfMonth;

    public List<DayResponse> daysOfMonth() {
        return this.daysOfMonth == null ? List.of() : this.daysOfMonth;
    }

    /**
     * It should be Sunday/Monday/T..../Saturday
     * 
     */
    @Import(name="daysOfTheWeek")
      private final @Nullable List<String> daysOfTheWeek;

    public List<String> daysOfTheWeek() {
        return this.daysOfTheWeek == null ? List.of() : this.daysOfTheWeek;
    }

    /**
     * It should be January/February/....../December
     * 
     */
    @Import(name="monthsOfYear")
      private final @Nullable List<String> monthsOfYear;

    public List<String> monthsOfYear() {
        return this.monthsOfYear == null ? List.of() : this.monthsOfYear;
    }

    /**
     * Type of the specific object - used for deserializing
     * Expected value is &#39;ScheduleBasedBackupCriteria&#39;.
     * 
     */
    @Import(name="objectType", required=true)
      private final String objectType;

    public String objectType() {
        return this.objectType;
    }

    /**
     * List of schedule times for backup
     * 
     */
    @Import(name="scheduleTimes")
      private final @Nullable List<String> scheduleTimes;

    public List<String> scheduleTimes() {
        return this.scheduleTimes == null ? List.of() : this.scheduleTimes;
    }

    /**
     * It should be First/Second/Third/Fourth/Last
     * 
     */
    @Import(name="weeksOfTheMonth")
      private final @Nullable List<String> weeksOfTheMonth;

    public List<String> weeksOfTheMonth() {
        return this.weeksOfTheMonth == null ? List.of() : this.weeksOfTheMonth;
    }

    public ScheduleBasedBackupCriteriaResponse(
        @Nullable List<String> absoluteCriteria,
        @Nullable List<DayResponse> daysOfMonth,
        @Nullable List<String> daysOfTheWeek,
        @Nullable List<String> monthsOfYear,
        String objectType,
        @Nullable List<String> scheduleTimes,
        @Nullable List<String> weeksOfTheMonth) {
        this.absoluteCriteria = absoluteCriteria;
        this.daysOfMonth = daysOfMonth;
        this.daysOfTheWeek = daysOfTheWeek;
        this.monthsOfYear = monthsOfYear;
        this.objectType = Codegen.stringProp("objectType").arg(objectType).require();
        this.scheduleTimes = scheduleTimes;
        this.weeksOfTheMonth = weeksOfTheMonth;
    }

    private ScheduleBasedBackupCriteriaResponse() {
        this.absoluteCriteria = List.of();
        this.daysOfMonth = List.of();
        this.daysOfTheWeek = List.of();
        this.monthsOfYear = List.of();
        this.objectType = null;
        this.scheduleTimes = List.of();
        this.weeksOfTheMonth = List.of();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ScheduleBasedBackupCriteriaResponse defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<String> absoluteCriteria;
        private @Nullable List<DayResponse> daysOfMonth;
        private @Nullable List<String> daysOfTheWeek;
        private @Nullable List<String> monthsOfYear;
        private String objectType;
        private @Nullable List<String> scheduleTimes;
        private @Nullable List<String> weeksOfTheMonth;

        public Builder() {
    	      // Empty
        }

        public Builder(ScheduleBasedBackupCriteriaResponse defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.absoluteCriteria = defaults.absoluteCriteria;
    	      this.daysOfMonth = defaults.daysOfMonth;
    	      this.daysOfTheWeek = defaults.daysOfTheWeek;
    	      this.monthsOfYear = defaults.monthsOfYear;
    	      this.objectType = defaults.objectType;
    	      this.scheduleTimes = defaults.scheduleTimes;
    	      this.weeksOfTheMonth = defaults.weeksOfTheMonth;
        }

        public Builder absoluteCriteria(@Nullable List<String> absoluteCriteria) {
            this.absoluteCriteria = absoluteCriteria;
            return this;
        }
        public Builder absoluteCriteria(String... absoluteCriteria) {
            return absoluteCriteria(List.of(absoluteCriteria));
        }
        public Builder daysOfMonth(@Nullable List<DayResponse> daysOfMonth) {
            this.daysOfMonth = daysOfMonth;
            return this;
        }
        public Builder daysOfMonth(DayResponse... daysOfMonth) {
            return daysOfMonth(List.of(daysOfMonth));
        }
        public Builder daysOfTheWeek(@Nullable List<String> daysOfTheWeek) {
            this.daysOfTheWeek = daysOfTheWeek;
            return this;
        }
        public Builder daysOfTheWeek(String... daysOfTheWeek) {
            return daysOfTheWeek(List.of(daysOfTheWeek));
        }
        public Builder monthsOfYear(@Nullable List<String> monthsOfYear) {
            this.monthsOfYear = monthsOfYear;
            return this;
        }
        public Builder monthsOfYear(String... monthsOfYear) {
            return monthsOfYear(List.of(monthsOfYear));
        }
        public Builder objectType(String objectType) {
            this.objectType = Objects.requireNonNull(objectType);
            return this;
        }
        public Builder scheduleTimes(@Nullable List<String> scheduleTimes) {
            this.scheduleTimes = scheduleTimes;
            return this;
        }
        public Builder scheduleTimes(String... scheduleTimes) {
            return scheduleTimes(List.of(scheduleTimes));
        }
        public Builder weeksOfTheMonth(@Nullable List<String> weeksOfTheMonth) {
            this.weeksOfTheMonth = weeksOfTheMonth;
            return this;
        }
        public Builder weeksOfTheMonth(String... weeksOfTheMonth) {
            return weeksOfTheMonth(List.of(weeksOfTheMonth));
        }        public ScheduleBasedBackupCriteriaResponse build() {
            return new ScheduleBasedBackupCriteriaResponse(absoluteCriteria, daysOfMonth, daysOfTheWeek, monthsOfYear, objectType, scheduleTimes, weeksOfTheMonth);
        }
    }
}
