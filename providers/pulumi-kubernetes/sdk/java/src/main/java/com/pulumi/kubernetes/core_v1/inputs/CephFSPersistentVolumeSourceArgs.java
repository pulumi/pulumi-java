// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.core_v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.kubernetes.core_v1.inputs.SecretReferenceArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.
 * 
 */
public final class CephFSPersistentVolumeSourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final CephFSPersistentVolumeSourceArgs Empty = new CephFSPersistentVolumeSourceArgs();

    /**
     * Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     * 
     */
    @Import(name="monitors", required=true)
    private Output<List<String>> monitors;

    public Output<List<String>> monitors() {
        return this.monitors;
    }

    /**
     * Optional: Used as the mounted root, rather than the full Ceph tree, default is /
     * 
     */
    @Import(name="path")
    private @Nullable Output<String> path;

    public Optional<Output<String>> path() {
        return Optional.ofNullable(this.path);
    }

    /**
     * Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     * 
     */
    @Import(name="readOnly")
    private @Nullable Output<Boolean> readOnly;

    public Optional<Output<Boolean>> readOnly() {
        return Optional.ofNullable(this.readOnly);
    }

    /**
     * Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     * 
     */
    @Import(name="secretFile")
    private @Nullable Output<String> secretFile;

    public Optional<Output<String>> secretFile() {
        return Optional.ofNullable(this.secretFile);
    }

    /**
     * Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     * 
     */
    @Import(name="secretRef")
    private @Nullable Output<SecretReferenceArgs> secretRef;

    public Optional<Output<SecretReferenceArgs>> secretRef() {
        return Optional.ofNullable(this.secretRef);
    }

    /**
     * Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
     * 
     */
    @Import(name="user")
    private @Nullable Output<String> user;

    public Optional<Output<String>> user() {
        return Optional.ofNullable(this.user);
    }

    private CephFSPersistentVolumeSourceArgs() {}

    private CephFSPersistentVolumeSourceArgs(CephFSPersistentVolumeSourceArgs $) {
        this.monitors = $.monitors;
        this.path = $.path;
        this.readOnly = $.readOnly;
        this.secretFile = $.secretFile;
        this.secretRef = $.secretRef;
        this.user = $.user;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CephFSPersistentVolumeSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CephFSPersistentVolumeSourceArgs $;

        public Builder() {
            $ = new CephFSPersistentVolumeSourceArgs();
        }

        public Builder(CephFSPersistentVolumeSourceArgs defaults) {
            $ = new CephFSPersistentVolumeSourceArgs(Objects.requireNonNull(defaults));
        }

        public Builder monitors(Output<List<String>> monitors) {
            $.monitors = monitors;
            return this;
        }

        public Builder monitors(List<String> monitors) {
            return monitors(Output.of(monitors));
        }

        public Builder monitors(String... monitors) {
            return monitors(List.of(monitors));
        }

        public Builder path(@Nullable Output<String> path) {
            $.path = path;
            return this;
        }

        public Builder path(String path) {
            return path(Output.of(path));
        }

        public Builder readOnly(@Nullable Output<Boolean> readOnly) {
            $.readOnly = readOnly;
            return this;
        }

        public Builder readOnly(Boolean readOnly) {
            return readOnly(Output.of(readOnly));
        }

        public Builder secretFile(@Nullable Output<String> secretFile) {
            $.secretFile = secretFile;
            return this;
        }

        public Builder secretFile(String secretFile) {
            return secretFile(Output.of(secretFile));
        }

        public Builder secretRef(@Nullable Output<SecretReferenceArgs> secretRef) {
            $.secretRef = secretRef;
            return this;
        }

        public Builder secretRef(SecretReferenceArgs secretRef) {
            return secretRef(Output.of(secretRef));
        }

        public Builder user(@Nullable Output<String> user) {
            $.user = user;
            return this;
        }

        public Builder user(String user) {
            return user(Output.of(user));
        }

        public CephFSPersistentVolumeSourceArgs build() {
            $.monitors = Objects.requireNonNull($.monitors, "expected parameter 'monitors' to be non-null");
            return $;
        }
    }

}
