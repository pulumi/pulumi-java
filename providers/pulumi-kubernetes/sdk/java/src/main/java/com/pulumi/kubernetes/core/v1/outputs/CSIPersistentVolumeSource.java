// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.core.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.kubernetes.core.v1.outputs.SecretReference;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class CSIPersistentVolumeSource {
    /**
     * @return controllerExpandSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerExpandVolume call. This is an alpha field and requires enabling ExpandCSIVolumes feature gate. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
     * 
     */
    private final @Nullable SecretReference controllerExpandSecretRef;
    /**
     * @return controllerPublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerPublishVolume and ControllerUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
     * 
     */
    private final @Nullable SecretReference controllerPublishSecretRef;
    /**
     * @return driver is the name of the driver to use for this volume. Required.
     * 
     */
    private final String driver;
    /**
     * @return fsType to mount. Must be a filesystem type supported by the host operating system. Ex. &#34;ext4&#34;, &#34;xfs&#34;, &#34;ntfs&#34;.
     * 
     */
    private final @Nullable String fsType;
    /**
     * @return nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
     * 
     */
    private final @Nullable SecretReference nodePublishSecretRef;
    /**
     * @return nodeStageSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodeStageVolume and NodeStageVolume and NodeUnstageVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
     * 
     */
    private final @Nullable SecretReference nodeStageSecretRef;
    /**
     * @return readOnly value to pass to ControllerPublishVolumeRequest. Defaults to false (read/write).
     * 
     */
    private final @Nullable Boolean readOnly;
    /**
     * @return volumeAttributes of the volume to publish.
     * 
     */
    private final @Nullable Map<String,String> volumeAttributes;
    /**
     * @return volumeHandle is the unique volume name returned by the CSI volume plugin’s CreateVolume to refer to the volume on all subsequent calls. Required.
     * 
     */
    private final String volumeHandle;

    @CustomType.Constructor
    private CSIPersistentVolumeSource(
        @CustomType.Parameter("controllerExpandSecretRef") @Nullable SecretReference controllerExpandSecretRef,
        @CustomType.Parameter("controllerPublishSecretRef") @Nullable SecretReference controllerPublishSecretRef,
        @CustomType.Parameter("driver") String driver,
        @CustomType.Parameter("fsType") @Nullable String fsType,
        @CustomType.Parameter("nodePublishSecretRef") @Nullable SecretReference nodePublishSecretRef,
        @CustomType.Parameter("nodeStageSecretRef") @Nullable SecretReference nodeStageSecretRef,
        @CustomType.Parameter("readOnly") @Nullable Boolean readOnly,
        @CustomType.Parameter("volumeAttributes") @Nullable Map<String,String> volumeAttributes,
        @CustomType.Parameter("volumeHandle") String volumeHandle) {
        this.controllerExpandSecretRef = controllerExpandSecretRef;
        this.controllerPublishSecretRef = controllerPublishSecretRef;
        this.driver = driver;
        this.fsType = fsType;
        this.nodePublishSecretRef = nodePublishSecretRef;
        this.nodeStageSecretRef = nodeStageSecretRef;
        this.readOnly = readOnly;
        this.volumeAttributes = volumeAttributes;
        this.volumeHandle = volumeHandle;
    }

    /**
     * @return controllerExpandSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerExpandVolume call. This is an alpha field and requires enabling ExpandCSIVolumes feature gate. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
     * 
     */
    public Optional<SecretReference> controllerExpandSecretRef() {
        return Optional.ofNullable(this.controllerExpandSecretRef);
    }
    /**
     * @return controllerPublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerPublishVolume and ControllerUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
     * 
     */
    public Optional<SecretReference> controllerPublishSecretRef() {
        return Optional.ofNullable(this.controllerPublishSecretRef);
    }
    /**
     * @return driver is the name of the driver to use for this volume. Required.
     * 
     */
    public String driver() {
        return this.driver;
    }
    /**
     * @return fsType to mount. Must be a filesystem type supported by the host operating system. Ex. &#34;ext4&#34;, &#34;xfs&#34;, &#34;ntfs&#34;.
     * 
     */
    public Optional<String> fsType() {
        return Optional.ofNullable(this.fsType);
    }
    /**
     * @return nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
     * 
     */
    public Optional<SecretReference> nodePublishSecretRef() {
        return Optional.ofNullable(this.nodePublishSecretRef);
    }
    /**
     * @return nodeStageSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodeStageVolume and NodeStageVolume and NodeUnstageVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
     * 
     */
    public Optional<SecretReference> nodeStageSecretRef() {
        return Optional.ofNullable(this.nodeStageSecretRef);
    }
    /**
     * @return readOnly value to pass to ControllerPublishVolumeRequest. Defaults to false (read/write).
     * 
     */
    public Optional<Boolean> readOnly() {
        return Optional.ofNullable(this.readOnly);
    }
    /**
     * @return volumeAttributes of the volume to publish.
     * 
     */
    public Map<String,String> volumeAttributes() {
        return this.volumeAttributes == null ? Map.of() : this.volumeAttributes;
    }
    /**
     * @return volumeHandle is the unique volume name returned by the CSI volume plugin’s CreateVolume to refer to the volume on all subsequent calls. Required.
     * 
     */
    public String volumeHandle() {
        return this.volumeHandle;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CSIPersistentVolumeSource defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable SecretReference controllerExpandSecretRef;
        private @Nullable SecretReference controllerPublishSecretRef;
        private String driver;
        private @Nullable String fsType;
        private @Nullable SecretReference nodePublishSecretRef;
        private @Nullable SecretReference nodeStageSecretRef;
        private @Nullable Boolean readOnly;
        private @Nullable Map<String,String> volumeAttributes;
        private String volumeHandle;

        public Builder() {
    	      // Empty
        }

        public Builder(CSIPersistentVolumeSource defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.controllerExpandSecretRef = defaults.controllerExpandSecretRef;
    	      this.controllerPublishSecretRef = defaults.controllerPublishSecretRef;
    	      this.driver = defaults.driver;
    	      this.fsType = defaults.fsType;
    	      this.nodePublishSecretRef = defaults.nodePublishSecretRef;
    	      this.nodeStageSecretRef = defaults.nodeStageSecretRef;
    	      this.readOnly = defaults.readOnly;
    	      this.volumeAttributes = defaults.volumeAttributes;
    	      this.volumeHandle = defaults.volumeHandle;
        }

        public Builder controllerExpandSecretRef(@Nullable SecretReference controllerExpandSecretRef) {
            this.controllerExpandSecretRef = controllerExpandSecretRef;
            return this;
        }
        public Builder controllerPublishSecretRef(@Nullable SecretReference controllerPublishSecretRef) {
            this.controllerPublishSecretRef = controllerPublishSecretRef;
            return this;
        }
        public Builder driver(String driver) {
            this.driver = Objects.requireNonNull(driver);
            return this;
        }
        public Builder fsType(@Nullable String fsType) {
            this.fsType = fsType;
            return this;
        }
        public Builder nodePublishSecretRef(@Nullable SecretReference nodePublishSecretRef) {
            this.nodePublishSecretRef = nodePublishSecretRef;
            return this;
        }
        public Builder nodeStageSecretRef(@Nullable SecretReference nodeStageSecretRef) {
            this.nodeStageSecretRef = nodeStageSecretRef;
            return this;
        }
        public Builder readOnly(@Nullable Boolean readOnly) {
            this.readOnly = readOnly;
            return this;
        }
        public Builder volumeAttributes(@Nullable Map<String,String> volumeAttributes) {
            this.volumeAttributes = volumeAttributes;
            return this;
        }
        public Builder volumeHandle(String volumeHandle) {
            this.volumeHandle = Objects.requireNonNull(volumeHandle);
            return this;
        }        public CSIPersistentVolumeSource build() {
            return new CSIPersistentVolumeSource(controllerExpandSecretRef, controllerPublishSecretRef, driver, fsType, nodePublishSecretRef, nodeStageSecretRef, readOnly, volumeAttributes, volumeHandle);
        }
    }
}
