// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.core_v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.kubernetes.core_v1.inputs.AWSElasticBlockStoreVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.AzureDiskVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.AzureFilePersistentVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.CSIPersistentVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.CephFSPersistentVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.CinderPersistentVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.FCVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.FlexPersistentVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.FlockerVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.GCEPersistentDiskVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.GlusterfsPersistentVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.HostPathVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.ISCSIPersistentVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.LocalVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.NFSVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.ObjectReferenceArgs;
import com.pulumi.kubernetes.core_v1.inputs.PhotonPersistentDiskVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.PortworxVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.QuobyteVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.RBDPersistentVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.ScaleIOPersistentVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.StorageOSPersistentVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.VolumeNodeAffinityArgs;
import com.pulumi.kubernetes.core_v1.inputs.VsphereVirtualDiskVolumeSourceArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * PersistentVolumeSpec is the specification of a persistent volume.
 * 
 */
public final class PersistentVolumeSpecArgs extends com.pulumi.resources.ResourceArgs {

    public static final PersistentVolumeSpecArgs Empty = new PersistentVolumeSpecArgs();

    /**
     * AccessModes contains all ways the volume can be mounted. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes
     * 
     */
    @Import(name="accessModes")
    private @Nullable Output<List<String>> accessModes;

    public Optional<Output<List<String>>> accessModes() {
        return Optional.ofNullable(this.accessModes);
    }

    /**
     * AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet&#39;s host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     * 
     */
    @Import(name="awsElasticBlockStore")
    private @Nullable Output<AWSElasticBlockStoreVolumeSourceArgs> awsElasticBlockStore;

    public Optional<Output<AWSElasticBlockStoreVolumeSourceArgs>> awsElasticBlockStore() {
        return Optional.ofNullable(this.awsElasticBlockStore);
    }

    /**
     * AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
     * 
     */
    @Import(name="azureDisk")
    private @Nullable Output<AzureDiskVolumeSourceArgs> azureDisk;

    public Optional<Output<AzureDiskVolumeSourceArgs>> azureDisk() {
        return Optional.ofNullable(this.azureDisk);
    }

    /**
     * AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
     * 
     */
    @Import(name="azureFile")
    private @Nullable Output<AzureFilePersistentVolumeSourceArgs> azureFile;

    public Optional<Output<AzureFilePersistentVolumeSourceArgs>> azureFile() {
        return Optional.ofNullable(this.azureFile);
    }

    /**
     * A description of the persistent volume&#39;s resources and capacity. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
     * 
     */
    @Import(name="capacity")
    private @Nullable Output<Map<String,String>> capacity;

    public Optional<Output<Map<String,String>>> capacity() {
        return Optional.ofNullable(this.capacity);
    }

    /**
     * CephFS represents a Ceph FS mount on the host that shares a pod&#39;s lifetime
     * 
     */
    @Import(name="cephfs")
    private @Nullable Output<CephFSPersistentVolumeSourceArgs> cephfs;

    public Optional<Output<CephFSPersistentVolumeSourceArgs>> cephfs() {
        return Optional.ofNullable(this.cephfs);
    }

    /**
     * Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     * 
     */
    @Import(name="cinder")
    private @Nullable Output<CinderPersistentVolumeSourceArgs> cinder;

    public Optional<Output<CinderPersistentVolumeSourceArgs>> cinder() {
        return Optional.ofNullable(this.cinder);
    }

    /**
     * ClaimRef is part of a bi-directional binding between PersistentVolume and PersistentVolumeClaim. Expected to be non-nil when bound. claim.VolumeName is the authoritative bind between PV and PVC. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#binding
     * 
     */
    @Import(name="claimRef")
    private @Nullable Output<ObjectReferenceArgs> claimRef;

    public Optional<Output<ObjectReferenceArgs>> claimRef() {
        return Optional.ofNullable(this.claimRef);
    }

    /**
     * CSI represents storage that is handled by an external CSI driver (Beta feature).
     * 
     */
    @Import(name="csi")
    private @Nullable Output<CSIPersistentVolumeSourceArgs> csi;

    public Optional<Output<CSIPersistentVolumeSourceArgs>> csi() {
        return Optional.ofNullable(this.csi);
    }

    /**
     * FC represents a Fibre Channel resource that is attached to a kubelet&#39;s host machine and then exposed to the pod.
     * 
     */
    @Import(name="fc")
    private @Nullable Output<FCVolumeSourceArgs> fc;

    public Optional<Output<FCVolumeSourceArgs>> fc() {
        return Optional.ofNullable(this.fc);
    }

    /**
     * FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
     * 
     */
    @Import(name="flexVolume")
    private @Nullable Output<FlexPersistentVolumeSourceArgs> flexVolume;

    public Optional<Output<FlexPersistentVolumeSourceArgs>> flexVolume() {
        return Optional.ofNullable(this.flexVolume);
    }

    /**
     * Flocker represents a Flocker volume attached to a kubelet&#39;s host machine and exposed to the pod for its usage. This depends on the Flocker control service being running
     * 
     */
    @Import(name="flocker")
    private @Nullable Output<FlockerVolumeSourceArgs> flocker;

    public Optional<Output<FlockerVolumeSourceArgs>> flocker() {
        return Optional.ofNullable(this.flocker);
    }

    /**
     * GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet&#39;s host machine and then exposed to the pod. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     * 
     */
    @Import(name="gcePersistentDisk")
    private @Nullable Output<GCEPersistentDiskVolumeSourceArgs> gcePersistentDisk;

    public Optional<Output<GCEPersistentDiskVolumeSourceArgs>> gcePersistentDisk() {
        return Optional.ofNullable(this.gcePersistentDisk);
    }

    /**
     * Glusterfs represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: https://examples.k8s.io/volumes/glusterfs/README.md
     * 
     */
    @Import(name="glusterfs")
    private @Nullable Output<GlusterfsPersistentVolumeSourceArgs> glusterfs;

    public Optional<Output<GlusterfsPersistentVolumeSourceArgs>> glusterfs() {
        return Optional.ofNullable(this.glusterfs);
    }

    /**
     * HostPath represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
     * 
     */
    @Import(name="hostPath")
    private @Nullable Output<HostPathVolumeSourceArgs> hostPath;

    public Optional<Output<HostPathVolumeSourceArgs>> hostPath() {
        return Optional.ofNullable(this.hostPath);
    }

    /**
     * ISCSI represents an ISCSI Disk resource that is attached to a kubelet&#39;s host machine and then exposed to the pod. Provisioned by an admin.
     * 
     */
    @Import(name="iscsi")
    private @Nullable Output<ISCSIPersistentVolumeSourceArgs> iscsi;

    public Optional<Output<ISCSIPersistentVolumeSourceArgs>> iscsi() {
        return Optional.ofNullable(this.iscsi);
    }

    /**
     * Local represents directly-attached storage with node affinity
     * 
     */
    @Import(name="local")
    private @Nullable Output<LocalVolumeSourceArgs> local;

    public Optional<Output<LocalVolumeSourceArgs>> local() {
        return Optional.ofNullable(this.local);
    }

    /**
     * A list of mount options, e.g. [&#34;ro&#34;, &#34;soft&#34;]. Not validated - mount will simply fail if one is invalid. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#mount-options
     * 
     */
    @Import(name="mountOptions")
    private @Nullable Output<List<String>> mountOptions;

    public Optional<Output<List<String>>> mountOptions() {
        return Optional.ofNullable(this.mountOptions);
    }

    /**
     * NFS represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     * 
     */
    @Import(name="nfs")
    private @Nullable Output<NFSVolumeSourceArgs> nfs;

    public Optional<Output<NFSVolumeSourceArgs>> nfs() {
        return Optional.ofNullable(this.nfs);
    }

    /**
     * NodeAffinity defines constraints that limit what nodes this volume can be accessed from. This field influences the scheduling of pods that use this volume.
     * 
     */
    @Import(name="nodeAffinity")
    private @Nullable Output<VolumeNodeAffinityArgs> nodeAffinity;

    public Optional<Output<VolumeNodeAffinityArgs>> nodeAffinity() {
        return Optional.ofNullable(this.nodeAffinity);
    }

    /**
     * What happens to a persistent volume when released from its claim. Valid options are Retain (default for manually created PersistentVolumes), Delete (default for dynamically provisioned PersistentVolumes), and Recycle (deprecated). Recycle must be supported by the volume plugin underlying this PersistentVolume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#reclaiming
     * 
     * Possible enum values:
     *  - `&#34;Delete&#34;` means the volume will be deleted from Kubernetes on release from its claim. The volume plugin must support Deletion.
     *  - `&#34;Recycle&#34;` means the volume will be recycled back into the pool of unbound persistent volumes on release from its claim. The volume plugin must support Recycling.
     *  - `&#34;Retain&#34;` means the volume will be left in its current phase (Released) for manual reclamation by the administrator. The default policy is Retain.
     * 
     */
    @Import(name="persistentVolumeReclaimPolicy")
    private @Nullable Output<String> persistentVolumeReclaimPolicy;

    public Optional<Output<String>> persistentVolumeReclaimPolicy() {
        return Optional.ofNullable(this.persistentVolumeReclaimPolicy);
    }

    /**
     * PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
     * 
     */
    @Import(name="photonPersistentDisk")
    private @Nullable Output<PhotonPersistentDiskVolumeSourceArgs> photonPersistentDisk;

    public Optional<Output<PhotonPersistentDiskVolumeSourceArgs>> photonPersistentDisk() {
        return Optional.ofNullable(this.photonPersistentDisk);
    }

    /**
     * PortworxVolume represents a portworx volume attached and mounted on kubelets host machine
     * 
     */
    @Import(name="portworxVolume")
    private @Nullable Output<PortworxVolumeSourceArgs> portworxVolume;

    public Optional<Output<PortworxVolumeSourceArgs>> portworxVolume() {
        return Optional.ofNullable(this.portworxVolume);
    }

    /**
     * Quobyte represents a Quobyte mount on the host that shares a pod&#39;s lifetime
     * 
     */
    @Import(name="quobyte")
    private @Nullable Output<QuobyteVolumeSourceArgs> quobyte;

    public Optional<Output<QuobyteVolumeSourceArgs>> quobyte() {
        return Optional.ofNullable(this.quobyte);
    }

    /**
     * RBD represents a Rados Block Device mount on the host that shares a pod&#39;s lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
     * 
     */
    @Import(name="rbd")
    private @Nullable Output<RBDPersistentVolumeSourceArgs> rbd;

    public Optional<Output<RBDPersistentVolumeSourceArgs>> rbd() {
        return Optional.ofNullable(this.rbd);
    }

    /**
     * ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
     * 
     */
    @Import(name="scaleIO")
    private @Nullable Output<ScaleIOPersistentVolumeSourceArgs> scaleIO;

    public Optional<Output<ScaleIOPersistentVolumeSourceArgs>> scaleIO() {
        return Optional.ofNullable(this.scaleIO);
    }

    /**
     * Name of StorageClass to which this persistent volume belongs. Empty value means that this volume does not belong to any StorageClass.
     * 
     */
    @Import(name="storageClassName")
    private @Nullable Output<String> storageClassName;

    public Optional<Output<String>> storageClassName() {
        return Optional.ofNullable(this.storageClassName);
    }

    /**
     * StorageOS represents a StorageOS volume that is attached to the kubelet&#39;s host machine and mounted into the pod More info: https://examples.k8s.io/volumes/storageos/README.md
     * 
     */
    @Import(name="storageos")
    private @Nullable Output<StorageOSPersistentVolumeSourceArgs> storageos;

    public Optional<Output<StorageOSPersistentVolumeSourceArgs>> storageos() {
        return Optional.ofNullable(this.storageos);
    }

    /**
     * volumeMode defines if a volume is intended to be used with a formatted filesystem or to remain in raw block state. Value of Filesystem is implied when not included in spec.
     * 
     */
    @Import(name="volumeMode")
    private @Nullable Output<String> volumeMode;

    public Optional<Output<String>> volumeMode() {
        return Optional.ofNullable(this.volumeMode);
    }

    /**
     * VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
     * 
     */
    @Import(name="vsphereVolume")
    private @Nullable Output<VsphereVirtualDiskVolumeSourceArgs> vsphereVolume;

    public Optional<Output<VsphereVirtualDiskVolumeSourceArgs>> vsphereVolume() {
        return Optional.ofNullable(this.vsphereVolume);
    }

    private PersistentVolumeSpecArgs() {}

    private PersistentVolumeSpecArgs(PersistentVolumeSpecArgs $) {
        this.accessModes = $.accessModes;
        this.awsElasticBlockStore = $.awsElasticBlockStore;
        this.azureDisk = $.azureDisk;
        this.azureFile = $.azureFile;
        this.capacity = $.capacity;
        this.cephfs = $.cephfs;
        this.cinder = $.cinder;
        this.claimRef = $.claimRef;
        this.csi = $.csi;
        this.fc = $.fc;
        this.flexVolume = $.flexVolume;
        this.flocker = $.flocker;
        this.gcePersistentDisk = $.gcePersistentDisk;
        this.glusterfs = $.glusterfs;
        this.hostPath = $.hostPath;
        this.iscsi = $.iscsi;
        this.local = $.local;
        this.mountOptions = $.mountOptions;
        this.nfs = $.nfs;
        this.nodeAffinity = $.nodeAffinity;
        this.persistentVolumeReclaimPolicy = $.persistentVolumeReclaimPolicy;
        this.photonPersistentDisk = $.photonPersistentDisk;
        this.portworxVolume = $.portworxVolume;
        this.quobyte = $.quobyte;
        this.rbd = $.rbd;
        this.scaleIO = $.scaleIO;
        this.storageClassName = $.storageClassName;
        this.storageos = $.storageos;
        this.volumeMode = $.volumeMode;
        this.vsphereVolume = $.vsphereVolume;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PersistentVolumeSpecArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PersistentVolumeSpecArgs $;

        public Builder() {
            $ = new PersistentVolumeSpecArgs();
        }

        public Builder(PersistentVolumeSpecArgs defaults) {
            $ = new PersistentVolumeSpecArgs(Objects.requireNonNull(defaults));
        }

        public Builder accessModes(@Nullable Output<List<String>> accessModes) {
            $.accessModes = accessModes;
            return this;
        }

        public Builder accessModes(List<String> accessModes) {
            return accessModes(Output.of(accessModes));
        }

        public Builder accessModes(String... accessModes) {
            return accessModes(List.of(accessModes));
        }

        public Builder awsElasticBlockStore(@Nullable Output<AWSElasticBlockStoreVolumeSourceArgs> awsElasticBlockStore) {
            $.awsElasticBlockStore = awsElasticBlockStore;
            return this;
        }

        public Builder awsElasticBlockStore(AWSElasticBlockStoreVolumeSourceArgs awsElasticBlockStore) {
            return awsElasticBlockStore(Output.of(awsElasticBlockStore));
        }

        public Builder azureDisk(@Nullable Output<AzureDiskVolumeSourceArgs> azureDisk) {
            $.azureDisk = azureDisk;
            return this;
        }

        public Builder azureDisk(AzureDiskVolumeSourceArgs azureDisk) {
            return azureDisk(Output.of(azureDisk));
        }

        public Builder azureFile(@Nullable Output<AzureFilePersistentVolumeSourceArgs> azureFile) {
            $.azureFile = azureFile;
            return this;
        }

        public Builder azureFile(AzureFilePersistentVolumeSourceArgs azureFile) {
            return azureFile(Output.of(azureFile));
        }

        public Builder capacity(@Nullable Output<Map<String,String>> capacity) {
            $.capacity = capacity;
            return this;
        }

        public Builder capacity(Map<String,String> capacity) {
            return capacity(Output.of(capacity));
        }

        public Builder cephfs(@Nullable Output<CephFSPersistentVolumeSourceArgs> cephfs) {
            $.cephfs = cephfs;
            return this;
        }

        public Builder cephfs(CephFSPersistentVolumeSourceArgs cephfs) {
            return cephfs(Output.of(cephfs));
        }

        public Builder cinder(@Nullable Output<CinderPersistentVolumeSourceArgs> cinder) {
            $.cinder = cinder;
            return this;
        }

        public Builder cinder(CinderPersistentVolumeSourceArgs cinder) {
            return cinder(Output.of(cinder));
        }

        public Builder claimRef(@Nullable Output<ObjectReferenceArgs> claimRef) {
            $.claimRef = claimRef;
            return this;
        }

        public Builder claimRef(ObjectReferenceArgs claimRef) {
            return claimRef(Output.of(claimRef));
        }

        public Builder csi(@Nullable Output<CSIPersistentVolumeSourceArgs> csi) {
            $.csi = csi;
            return this;
        }

        public Builder csi(CSIPersistentVolumeSourceArgs csi) {
            return csi(Output.of(csi));
        }

        public Builder fc(@Nullable Output<FCVolumeSourceArgs> fc) {
            $.fc = fc;
            return this;
        }

        public Builder fc(FCVolumeSourceArgs fc) {
            return fc(Output.of(fc));
        }

        public Builder flexVolume(@Nullable Output<FlexPersistentVolumeSourceArgs> flexVolume) {
            $.flexVolume = flexVolume;
            return this;
        }

        public Builder flexVolume(FlexPersistentVolumeSourceArgs flexVolume) {
            return flexVolume(Output.of(flexVolume));
        }

        public Builder flocker(@Nullable Output<FlockerVolumeSourceArgs> flocker) {
            $.flocker = flocker;
            return this;
        }

        public Builder flocker(FlockerVolumeSourceArgs flocker) {
            return flocker(Output.of(flocker));
        }

        public Builder gcePersistentDisk(@Nullable Output<GCEPersistentDiskVolumeSourceArgs> gcePersistentDisk) {
            $.gcePersistentDisk = gcePersistentDisk;
            return this;
        }

        public Builder gcePersistentDisk(GCEPersistentDiskVolumeSourceArgs gcePersistentDisk) {
            return gcePersistentDisk(Output.of(gcePersistentDisk));
        }

        public Builder glusterfs(@Nullable Output<GlusterfsPersistentVolumeSourceArgs> glusterfs) {
            $.glusterfs = glusterfs;
            return this;
        }

        public Builder glusterfs(GlusterfsPersistentVolumeSourceArgs glusterfs) {
            return glusterfs(Output.of(glusterfs));
        }

        public Builder hostPath(@Nullable Output<HostPathVolumeSourceArgs> hostPath) {
            $.hostPath = hostPath;
            return this;
        }

        public Builder hostPath(HostPathVolumeSourceArgs hostPath) {
            return hostPath(Output.of(hostPath));
        }

        public Builder iscsi(@Nullable Output<ISCSIPersistentVolumeSourceArgs> iscsi) {
            $.iscsi = iscsi;
            return this;
        }

        public Builder iscsi(ISCSIPersistentVolumeSourceArgs iscsi) {
            return iscsi(Output.of(iscsi));
        }

        public Builder local(@Nullable Output<LocalVolumeSourceArgs> local) {
            $.local = local;
            return this;
        }

        public Builder local(LocalVolumeSourceArgs local) {
            return local(Output.of(local));
        }

        public Builder mountOptions(@Nullable Output<List<String>> mountOptions) {
            $.mountOptions = mountOptions;
            return this;
        }

        public Builder mountOptions(List<String> mountOptions) {
            return mountOptions(Output.of(mountOptions));
        }

        public Builder mountOptions(String... mountOptions) {
            return mountOptions(List.of(mountOptions));
        }

        public Builder nfs(@Nullable Output<NFSVolumeSourceArgs> nfs) {
            $.nfs = nfs;
            return this;
        }

        public Builder nfs(NFSVolumeSourceArgs nfs) {
            return nfs(Output.of(nfs));
        }

        public Builder nodeAffinity(@Nullable Output<VolumeNodeAffinityArgs> nodeAffinity) {
            $.nodeAffinity = nodeAffinity;
            return this;
        }

        public Builder nodeAffinity(VolumeNodeAffinityArgs nodeAffinity) {
            return nodeAffinity(Output.of(nodeAffinity));
        }

        public Builder persistentVolumeReclaimPolicy(@Nullable Output<String> persistentVolumeReclaimPolicy) {
            $.persistentVolumeReclaimPolicy = persistentVolumeReclaimPolicy;
            return this;
        }

        public Builder persistentVolumeReclaimPolicy(String persistentVolumeReclaimPolicy) {
            return persistentVolumeReclaimPolicy(Output.of(persistentVolumeReclaimPolicy));
        }

        public Builder photonPersistentDisk(@Nullable Output<PhotonPersistentDiskVolumeSourceArgs> photonPersistentDisk) {
            $.photonPersistentDisk = photonPersistentDisk;
            return this;
        }

        public Builder photonPersistentDisk(PhotonPersistentDiskVolumeSourceArgs photonPersistentDisk) {
            return photonPersistentDisk(Output.of(photonPersistentDisk));
        }

        public Builder portworxVolume(@Nullable Output<PortworxVolumeSourceArgs> portworxVolume) {
            $.portworxVolume = portworxVolume;
            return this;
        }

        public Builder portworxVolume(PortworxVolumeSourceArgs portworxVolume) {
            return portworxVolume(Output.of(portworxVolume));
        }

        public Builder quobyte(@Nullable Output<QuobyteVolumeSourceArgs> quobyte) {
            $.quobyte = quobyte;
            return this;
        }

        public Builder quobyte(QuobyteVolumeSourceArgs quobyte) {
            return quobyte(Output.of(quobyte));
        }

        public Builder rbd(@Nullable Output<RBDPersistentVolumeSourceArgs> rbd) {
            $.rbd = rbd;
            return this;
        }

        public Builder rbd(RBDPersistentVolumeSourceArgs rbd) {
            return rbd(Output.of(rbd));
        }

        public Builder scaleIO(@Nullable Output<ScaleIOPersistentVolumeSourceArgs> scaleIO) {
            $.scaleIO = scaleIO;
            return this;
        }

        public Builder scaleIO(ScaleIOPersistentVolumeSourceArgs scaleIO) {
            return scaleIO(Output.of(scaleIO));
        }

        public Builder storageClassName(@Nullable Output<String> storageClassName) {
            $.storageClassName = storageClassName;
            return this;
        }

        public Builder storageClassName(String storageClassName) {
            return storageClassName(Output.of(storageClassName));
        }

        public Builder storageos(@Nullable Output<StorageOSPersistentVolumeSourceArgs> storageos) {
            $.storageos = storageos;
            return this;
        }

        public Builder storageos(StorageOSPersistentVolumeSourceArgs storageos) {
            return storageos(Output.of(storageos));
        }

        public Builder volumeMode(@Nullable Output<String> volumeMode) {
            $.volumeMode = volumeMode;
            return this;
        }

        public Builder volumeMode(String volumeMode) {
            return volumeMode(Output.of(volumeMode));
        }

        public Builder vsphereVolume(@Nullable Output<VsphereVirtualDiskVolumeSourceArgs> vsphereVolume) {
            $.vsphereVolume = vsphereVolume;
            return this;
        }

        public Builder vsphereVolume(VsphereVirtualDiskVolumeSourceArgs vsphereVolume) {
            return vsphereVolume(Output.of(vsphereVolume));
        }

        public PersistentVolumeSpecArgs build() {
            return $;
        }
    }

}
