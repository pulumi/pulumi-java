// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.core_v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
 * 
 */
public final class AzureFilePersistentVolumeSourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final AzureFilePersistentVolumeSourceArgs Empty = new AzureFilePersistentVolumeSourceArgs();

    /**
     * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
     * 
     */
    @Import(name="readOnly")
    private @Nullable Output<Boolean> readOnly;

    public Optional<Output<Boolean>> readOnly() {
        return Optional.ofNullable(this.readOnly);
    }

    /**
     * the name of secret that contains Azure Storage Account Name and Key
     * 
     */
    @Import(name="secretName", required=true)
    private Output<String> secretName;

    public Output<String> secretName() {
        return this.secretName;
    }

    /**
     * the namespace of the secret that contains Azure Storage Account Name and Key default is the same as the Pod
     * 
     */
    @Import(name="secretNamespace")
    private @Nullable Output<String> secretNamespace;

    public Optional<Output<String>> secretNamespace() {
        return Optional.ofNullable(this.secretNamespace);
    }

    /**
     * Share Name
     * 
     */
    @Import(name="shareName", required=true)
    private Output<String> shareName;

    public Output<String> shareName() {
        return this.shareName;
    }

    private AzureFilePersistentVolumeSourceArgs() {}

    private AzureFilePersistentVolumeSourceArgs(AzureFilePersistentVolumeSourceArgs $) {
        this.readOnly = $.readOnly;
        this.secretName = $.secretName;
        this.secretNamespace = $.secretNamespace;
        this.shareName = $.shareName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AzureFilePersistentVolumeSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AzureFilePersistentVolumeSourceArgs $;

        public Builder() {
            $ = new AzureFilePersistentVolumeSourceArgs();
        }

        public Builder(AzureFilePersistentVolumeSourceArgs defaults) {
            $ = new AzureFilePersistentVolumeSourceArgs(Objects.requireNonNull(defaults));
        }

        public Builder readOnly(@Nullable Output<Boolean> readOnly) {
            $.readOnly = readOnly;
            return this;
        }

        public Builder readOnly(Boolean readOnly) {
            return readOnly(Output.of(readOnly));
        }

        public Builder secretName(Output<String> secretName) {
            $.secretName = secretName;
            return this;
        }

        public Builder secretName(String secretName) {
            return secretName(Output.of(secretName));
        }

        public Builder secretNamespace(@Nullable Output<String> secretNamespace) {
            $.secretNamespace = secretNamespace;
            return this;
        }

        public Builder secretNamespace(String secretNamespace) {
            return secretNamespace(Output.of(secretNamespace));
        }

        public Builder shareName(Output<String> shareName) {
            $.shareName = shareName;
            return this;
        }

        public Builder shareName(String shareName) {
            return shareName(Output.of(shareName));
        }

        public AzureFilePersistentVolumeSourceArgs build() {
            $.secretName = Objects.requireNonNull($.secretName, "expected parameter 'secretName' to be non-null");
            $.shareName = Objects.requireNonNull($.shareName, "expected parameter 'shareName' to be non-null");
            return $;
        }
    }

}
