// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.core.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.kubernetes.core.v1.outputs.ContainerStatus;
import com.pulumi.kubernetes.core.v1.outputs.PodCondition;
import com.pulumi.kubernetes.core.v1.outputs.PodIP;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class PodStatus {
    /**
     * @return Current service state of pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
     * 
     */
    private final @Nullable List<PodCondition> conditions;
    /**
     * @return The list has one entry per container in the manifest. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
     * 
     */
    private final @Nullable List<ContainerStatus> containerStatuses;
    /**
     * @return Status for any ephemeral containers that have run in this pod. This field is beta-level and available on clusters that haven&#39;t disabled the EphemeralContainers feature gate.
     * 
     */
    private final @Nullable List<ContainerStatus> ephemeralContainerStatuses;
    /**
     * @return IP address of the host to which the pod is assigned. Empty if not yet scheduled.
     * 
     */
    private final @Nullable String hostIP;
    /**
     * @return The list has one entry per init container in the manifest. The most recent successful init container will have ready = true, the most recently started container will have startTime set. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
     * 
     */
    private final @Nullable List<ContainerStatus> initContainerStatuses;
    /**
     * @return A human readable message indicating details about why the pod is in this condition.
     * 
     */
    private final @Nullable String message;
    /**
     * @return nominatedNodeName is set only when this pod preempts other pods on the node, but it cannot be scheduled right away as preemption victims receive their graceful termination periods. This field does not guarantee that the pod will be scheduled on this node. Scheduler may decide to place the pod elsewhere if other nodes become available sooner. Scheduler may also decide to give the resources on this node to a higher priority pod that is created after preemption. As a result, this field may be different than PodSpec.nodeName when the pod is scheduled.
     * 
     */
    private final @Nullable String nominatedNodeName;
    /**
     * @return The phase of a Pod is a simple, high-level summary of where the Pod is in its lifecycle. The conditions array, the reason and message fields, and the individual container status arrays contain more detail about the pod&#39;s status. There are five possible phase values:
     * 
     * Pending: The pod has been accepted by the Kubernetes system, but one or more of the container images has not been created. This includes time before being scheduled as well as time spent downloading images over the network, which could take a while. Running: The pod has been bound to a node, and all of the containers have been created. At least one container is still running, or is in the process of starting or restarting. Succeeded: All containers in the pod have terminated in success, and will not be restarted. Failed: All containers in the pod have terminated, and at least one container has terminated in failure. The container either exited with non-zero status or was terminated by the system. Unknown: For some reason the state of the pod could not be obtained, typically due to an error in communicating with the host of the pod.
     * 
     * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase
     * 
     */
    private final @Nullable String phase;
    /**
     * @return IP address allocated to the pod. Routable at least within the cluster. Empty if not yet allocated.
     * 
     */
    private final @Nullable String podIP;
    /**
     * @return podIPs holds the IP addresses allocated to the pod. If this field is specified, the 0th entry must match the podIP field. Pods may be allocated at most 1 value for each of IPv4 and IPv6. This list is empty if no IPs have been allocated yet.
     * 
     */
    private final @Nullable List<PodIP> podIPs;
    /**
     * @return The Quality of Service (QOS) classification assigned to the pod based on resource requirements See PodQOSClass type for available QOS classes More info: https://git.k8s.io/community/contributors/design-proposals/node/resource-qos.md
     * 
     */
    private final @Nullable String qosClass;
    /**
     * @return A brief CamelCase message indicating details about why the pod is in this state. e.g. &#39;Evicted&#39;
     * 
     */
    private final @Nullable String reason;
    /**
     * @return RFC 3339 date and time at which the object was acknowledged by the Kubelet. This is before the Kubelet pulled the container image(s) for the pod.
     * 
     */
    private final @Nullable String startTime;

    @CustomType.Constructor
    private PodStatus(
        @CustomType.Parameter("conditions") @Nullable List<PodCondition> conditions,
        @CustomType.Parameter("containerStatuses") @Nullable List<ContainerStatus> containerStatuses,
        @CustomType.Parameter("ephemeralContainerStatuses") @Nullable List<ContainerStatus> ephemeralContainerStatuses,
        @CustomType.Parameter("hostIP") @Nullable String hostIP,
        @CustomType.Parameter("initContainerStatuses") @Nullable List<ContainerStatus> initContainerStatuses,
        @CustomType.Parameter("message") @Nullable String message,
        @CustomType.Parameter("nominatedNodeName") @Nullable String nominatedNodeName,
        @CustomType.Parameter("phase") @Nullable String phase,
        @CustomType.Parameter("podIP") @Nullable String podIP,
        @CustomType.Parameter("podIPs") @Nullable List<PodIP> podIPs,
        @CustomType.Parameter("qosClass") @Nullable String qosClass,
        @CustomType.Parameter("reason") @Nullable String reason,
        @CustomType.Parameter("startTime") @Nullable String startTime) {
        this.conditions = conditions;
        this.containerStatuses = containerStatuses;
        this.ephemeralContainerStatuses = ephemeralContainerStatuses;
        this.hostIP = hostIP;
        this.initContainerStatuses = initContainerStatuses;
        this.message = message;
        this.nominatedNodeName = nominatedNodeName;
        this.phase = phase;
        this.podIP = podIP;
        this.podIPs = podIPs;
        this.qosClass = qosClass;
        this.reason = reason;
        this.startTime = startTime;
    }

    /**
     * @return Current service state of pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
     * 
     */
    public List<PodCondition> conditions() {
        return this.conditions == null ? List.of() : this.conditions;
    }
    /**
     * @return The list has one entry per container in the manifest. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
     * 
     */
    public List<ContainerStatus> containerStatuses() {
        return this.containerStatuses == null ? List.of() : this.containerStatuses;
    }
    /**
     * @return Status for any ephemeral containers that have run in this pod. This field is beta-level and available on clusters that haven&#39;t disabled the EphemeralContainers feature gate.
     * 
     */
    public List<ContainerStatus> ephemeralContainerStatuses() {
        return this.ephemeralContainerStatuses == null ? List.of() : this.ephemeralContainerStatuses;
    }
    /**
     * @return IP address of the host to which the pod is assigned. Empty if not yet scheduled.
     * 
     */
    public Optional<String> hostIP() {
        return Optional.ofNullable(this.hostIP);
    }
    /**
     * @return The list has one entry per init container in the manifest. The most recent successful init container will have ready = true, the most recently started container will have startTime set. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
     * 
     */
    public List<ContainerStatus> initContainerStatuses() {
        return this.initContainerStatuses == null ? List.of() : this.initContainerStatuses;
    }
    /**
     * @return A human readable message indicating details about why the pod is in this condition.
     * 
     */
    public Optional<String> message() {
        return Optional.ofNullable(this.message);
    }
    /**
     * @return nominatedNodeName is set only when this pod preempts other pods on the node, but it cannot be scheduled right away as preemption victims receive their graceful termination periods. This field does not guarantee that the pod will be scheduled on this node. Scheduler may decide to place the pod elsewhere if other nodes become available sooner. Scheduler may also decide to give the resources on this node to a higher priority pod that is created after preemption. As a result, this field may be different than PodSpec.nodeName when the pod is scheduled.
     * 
     */
    public Optional<String> nominatedNodeName() {
        return Optional.ofNullable(this.nominatedNodeName);
    }
    /**
     * @return The phase of a Pod is a simple, high-level summary of where the Pod is in its lifecycle. The conditions array, the reason and message fields, and the individual container status arrays contain more detail about the pod&#39;s status. There are five possible phase values:
     * 
     * Pending: The pod has been accepted by the Kubernetes system, but one or more of the container images has not been created. This includes time before being scheduled as well as time spent downloading images over the network, which could take a while. Running: The pod has been bound to a node, and all of the containers have been created. At least one container is still running, or is in the process of starting or restarting. Succeeded: All containers in the pod have terminated in success, and will not be restarted. Failed: All containers in the pod have terminated, and at least one container has terminated in failure. The container either exited with non-zero status or was terminated by the system. Unknown: For some reason the state of the pod could not be obtained, typically due to an error in communicating with the host of the pod.
     * 
     * More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase
     * 
     */
    public Optional<String> phase() {
        return Optional.ofNullable(this.phase);
    }
    /**
     * @return IP address allocated to the pod. Routable at least within the cluster. Empty if not yet allocated.
     * 
     */
    public Optional<String> podIP() {
        return Optional.ofNullable(this.podIP);
    }
    /**
     * @return podIPs holds the IP addresses allocated to the pod. If this field is specified, the 0th entry must match the podIP field. Pods may be allocated at most 1 value for each of IPv4 and IPv6. This list is empty if no IPs have been allocated yet.
     * 
     */
    public List<PodIP> podIPs() {
        return this.podIPs == null ? List.of() : this.podIPs;
    }
    /**
     * @return The Quality of Service (QOS) classification assigned to the pod based on resource requirements See PodQOSClass type for available QOS classes More info: https://git.k8s.io/community/contributors/design-proposals/node/resource-qos.md
     * 
     */
    public Optional<String> qosClass() {
        return Optional.ofNullable(this.qosClass);
    }
    /**
     * @return A brief CamelCase message indicating details about why the pod is in this state. e.g. &#39;Evicted&#39;
     * 
     */
    public Optional<String> reason() {
        return Optional.ofNullable(this.reason);
    }
    /**
     * @return RFC 3339 date and time at which the object was acknowledged by the Kubelet. This is before the Kubelet pulled the container image(s) for the pod.
     * 
     */
    public Optional<String> startTime() {
        return Optional.ofNullable(this.startTime);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PodStatus defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<PodCondition> conditions;
        private @Nullable List<ContainerStatus> containerStatuses;
        private @Nullable List<ContainerStatus> ephemeralContainerStatuses;
        private @Nullable String hostIP;
        private @Nullable List<ContainerStatus> initContainerStatuses;
        private @Nullable String message;
        private @Nullable String nominatedNodeName;
        private @Nullable String phase;
        private @Nullable String podIP;
        private @Nullable List<PodIP> podIPs;
        private @Nullable String qosClass;
        private @Nullable String reason;
        private @Nullable String startTime;

        public Builder() {
    	      // Empty
        }

        public Builder(PodStatus defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.conditions = defaults.conditions;
    	      this.containerStatuses = defaults.containerStatuses;
    	      this.ephemeralContainerStatuses = defaults.ephemeralContainerStatuses;
    	      this.hostIP = defaults.hostIP;
    	      this.initContainerStatuses = defaults.initContainerStatuses;
    	      this.message = defaults.message;
    	      this.nominatedNodeName = defaults.nominatedNodeName;
    	      this.phase = defaults.phase;
    	      this.podIP = defaults.podIP;
    	      this.podIPs = defaults.podIPs;
    	      this.qosClass = defaults.qosClass;
    	      this.reason = defaults.reason;
    	      this.startTime = defaults.startTime;
        }

        public Builder conditions(@Nullable List<PodCondition> conditions) {
            this.conditions = conditions;
            return this;
        }
        public Builder conditions(PodCondition... conditions) {
            return conditions(List.of(conditions));
        }
        public Builder containerStatuses(@Nullable List<ContainerStatus> containerStatuses) {
            this.containerStatuses = containerStatuses;
            return this;
        }
        public Builder containerStatuses(ContainerStatus... containerStatuses) {
            return containerStatuses(List.of(containerStatuses));
        }
        public Builder ephemeralContainerStatuses(@Nullable List<ContainerStatus> ephemeralContainerStatuses) {
            this.ephemeralContainerStatuses = ephemeralContainerStatuses;
            return this;
        }
        public Builder ephemeralContainerStatuses(ContainerStatus... ephemeralContainerStatuses) {
            return ephemeralContainerStatuses(List.of(ephemeralContainerStatuses));
        }
        public Builder hostIP(@Nullable String hostIP) {
            this.hostIP = hostIP;
            return this;
        }
        public Builder initContainerStatuses(@Nullable List<ContainerStatus> initContainerStatuses) {
            this.initContainerStatuses = initContainerStatuses;
            return this;
        }
        public Builder initContainerStatuses(ContainerStatus... initContainerStatuses) {
            return initContainerStatuses(List.of(initContainerStatuses));
        }
        public Builder message(@Nullable String message) {
            this.message = message;
            return this;
        }
        public Builder nominatedNodeName(@Nullable String nominatedNodeName) {
            this.nominatedNodeName = nominatedNodeName;
            return this;
        }
        public Builder phase(@Nullable String phase) {
            this.phase = phase;
            return this;
        }
        public Builder podIP(@Nullable String podIP) {
            this.podIP = podIP;
            return this;
        }
        public Builder podIPs(@Nullable List<PodIP> podIPs) {
            this.podIPs = podIPs;
            return this;
        }
        public Builder podIPs(PodIP... podIPs) {
            return podIPs(List.of(podIPs));
        }
        public Builder qosClass(@Nullable String qosClass) {
            this.qosClass = qosClass;
            return this;
        }
        public Builder reason(@Nullable String reason) {
            this.reason = reason;
            return this;
        }
        public Builder startTime(@Nullable String startTime) {
            this.startTime = startTime;
            return this;
        }        public PodStatus build() {
            return new PodStatus(conditions, containerStatuses, ephemeralContainerStatuses, hostIP, initContainerStatuses, message, nominatedNodeName, phase, podIP, podIPs, qosClass, reason, startTime);
        }
    }
}
