// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.core_v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.kubernetes.core_v1.inputs.LocalObjectReferenceArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
 * 
 */
public final class FlexVolumeSourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final FlexVolumeSourceArgs Empty = new FlexVolumeSourceArgs();

    /**
     * Driver is the name of the driver to use for this volume.
     * 
     */
    @Import(name="driver", required=true)
    private Output<String> driver;

    public Output<String> driver() {
        return this.driver;
    }

    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. &#34;ext4&#34;, &#34;xfs&#34;, &#34;ntfs&#34;. The default filesystem depends on FlexVolume script.
     * 
     */
    @Import(name="fsType")
    private @Nullable Output<String> fsType;

    public Optional<Output<String>> fsType() {
        return Optional.ofNullable(this.fsType);
    }

    /**
     * Optional: Extra command options if any.
     * 
     */
    @Import(name="options")
    private @Nullable Output<Map<String,String>> options;

    public Optional<Output<Map<String,String>>> options() {
        return Optional.ofNullable(this.options);
    }

    /**
     * Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
     * 
     */
    @Import(name="readOnly")
    private @Nullable Output<Boolean> readOnly;

    public Optional<Output<Boolean>> readOnly() {
        return Optional.ofNullable(this.readOnly);
    }

    /**
     * Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
     * 
     */
    @Import(name="secretRef")
    private @Nullable Output<LocalObjectReferenceArgs> secretRef;

    public Optional<Output<LocalObjectReferenceArgs>> secretRef() {
        return Optional.ofNullable(this.secretRef);
    }

    private FlexVolumeSourceArgs() {}

    private FlexVolumeSourceArgs(FlexVolumeSourceArgs $) {
        this.driver = $.driver;
        this.fsType = $.fsType;
        this.options = $.options;
        this.readOnly = $.readOnly;
        this.secretRef = $.secretRef;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FlexVolumeSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FlexVolumeSourceArgs $;

        public Builder() {
            $ = new FlexVolumeSourceArgs();
        }

        public Builder(FlexVolumeSourceArgs defaults) {
            $ = new FlexVolumeSourceArgs(Objects.requireNonNull(defaults));
        }

        public Builder driver(Output<String> driver) {
            $.driver = driver;
            return this;
        }

        public Builder driver(String driver) {
            return driver(Output.of(driver));
        }

        public Builder fsType(@Nullable Output<String> fsType) {
            $.fsType = fsType;
            return this;
        }

        public Builder fsType(String fsType) {
            return fsType(Output.of(fsType));
        }

        public Builder options(@Nullable Output<Map<String,String>> options) {
            $.options = options;
            return this;
        }

        public Builder options(Map<String,String> options) {
            return options(Output.of(options));
        }

        public Builder readOnly(@Nullable Output<Boolean> readOnly) {
            $.readOnly = readOnly;
            return this;
        }

        public Builder readOnly(Boolean readOnly) {
            return readOnly(Output.of(readOnly));
        }

        public Builder secretRef(@Nullable Output<LocalObjectReferenceArgs> secretRef) {
            $.secretRef = secretRef;
            return this;
        }

        public Builder secretRef(LocalObjectReferenceArgs secretRef) {
            return secretRef(Output.of(secretRef));
        }

        public FlexVolumeSourceArgs build() {
            $.driver = Objects.requireNonNull($.driver, "expected parameter 'driver' to be non-null");
            return $;
        }
    }

}
