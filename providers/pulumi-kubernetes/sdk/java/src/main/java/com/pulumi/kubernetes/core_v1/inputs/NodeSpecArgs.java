// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.core_v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.kubernetes.core_v1.inputs.NodeConfigSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.TaintArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * NodeSpec describes the attributes that a node is created with.
 * 
 */
public final class NodeSpecArgs extends com.pulumi.resources.ResourceArgs {

    public static final NodeSpecArgs Empty = new NodeSpecArgs();

    /**
     * Deprecated. If specified, the source of the node&#39;s configuration. The DynamicKubeletConfig feature gate must be enabled for the Kubelet to use this field. This field is deprecated as of 1.22: https://git.k8s.io/enhancements/keps/sig-node/281-dynamic-kubelet-configuration
     * 
     */
    @Import(name="configSource")
    private @Nullable Output<NodeConfigSourceArgs> configSource;

    public Optional<Output<NodeConfigSourceArgs>> configSource() {
        return Optional.ofNullable(this.configSource);
    }

    /**
     * Deprecated. Not all kubelets will set this field. Remove field after 1.13. see: https://issues.k8s.io/61966
     * 
     */
    @Import(name="externalID")
    private @Nullable Output<String> externalID;

    public Optional<Output<String>> externalID() {
        return Optional.ofNullable(this.externalID);
    }

    /**
     * PodCIDR represents the pod IP range assigned to the node.
     * 
     */
    @Import(name="podCIDR")
    private @Nullable Output<String> podCIDR;

    public Optional<Output<String>> podCIDR() {
        return Optional.ofNullable(this.podCIDR);
    }

    /**
     * podCIDRs represents the IP ranges assigned to the node for usage by Pods on that node. If this field is specified, the 0th entry must match the podCIDR field. It may contain at most 1 value for each of IPv4 and IPv6.
     * 
     */
    @Import(name="podCIDRs")
    private @Nullable Output<List<String>> podCIDRs;

    public Optional<Output<List<String>>> podCIDRs() {
        return Optional.ofNullable(this.podCIDRs);
    }

    /**
     * ID of the node assigned by the cloud provider in the format: &lt;ProviderName&gt;://&lt;ProviderSpecificNodeID&gt;
     * 
     */
    @Import(name="providerID")
    private @Nullable Output<String> providerID;

    public Optional<Output<String>> providerID() {
        return Optional.ofNullable(this.providerID);
    }

    /**
     * If specified, the node&#39;s taints.
     * 
     */
    @Import(name="taints")
    private @Nullable Output<List<TaintArgs>> taints;

    public Optional<Output<List<TaintArgs>>> taints() {
        return Optional.ofNullable(this.taints);
    }

    /**
     * Unschedulable controls node schedulability of new pods. By default, node is schedulable. More info: https://kubernetes.io/docs/concepts/nodes/node/#manual-node-administration
     * 
     */
    @Import(name="unschedulable")
    private @Nullable Output<Boolean> unschedulable;

    public Optional<Output<Boolean>> unschedulable() {
        return Optional.ofNullable(this.unschedulable);
    }

    private NodeSpecArgs() {}

    private NodeSpecArgs(NodeSpecArgs $) {
        this.configSource = $.configSource;
        this.externalID = $.externalID;
        this.podCIDR = $.podCIDR;
        this.podCIDRs = $.podCIDRs;
        this.providerID = $.providerID;
        this.taints = $.taints;
        this.unschedulable = $.unschedulable;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NodeSpecArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NodeSpecArgs $;

        public Builder() {
            $ = new NodeSpecArgs();
        }

        public Builder(NodeSpecArgs defaults) {
            $ = new NodeSpecArgs(Objects.requireNonNull(defaults));
        }

        public Builder configSource(@Nullable Output<NodeConfigSourceArgs> configSource) {
            $.configSource = configSource;
            return this;
        }

        public Builder configSource(NodeConfigSourceArgs configSource) {
            return configSource(Output.of(configSource));
        }

        public Builder externalID(@Nullable Output<String> externalID) {
            $.externalID = externalID;
            return this;
        }

        public Builder externalID(String externalID) {
            return externalID(Output.of(externalID));
        }

        public Builder podCIDR(@Nullable Output<String> podCIDR) {
            $.podCIDR = podCIDR;
            return this;
        }

        public Builder podCIDR(String podCIDR) {
            return podCIDR(Output.of(podCIDR));
        }

        public Builder podCIDRs(@Nullable Output<List<String>> podCIDRs) {
            $.podCIDRs = podCIDRs;
            return this;
        }

        public Builder podCIDRs(List<String> podCIDRs) {
            return podCIDRs(Output.of(podCIDRs));
        }

        public Builder podCIDRs(String... podCIDRs) {
            return podCIDRs(List.of(podCIDRs));
        }

        public Builder providerID(@Nullable Output<String> providerID) {
            $.providerID = providerID;
            return this;
        }

        public Builder providerID(String providerID) {
            return providerID(Output.of(providerID));
        }

        public Builder taints(@Nullable Output<List<TaintArgs>> taints) {
            $.taints = taints;
            return this;
        }

        public Builder taints(List<TaintArgs> taints) {
            return taints(Output.of(taints));
        }

        public Builder taints(TaintArgs... taints) {
            return taints(List.of(taints));
        }

        public Builder unschedulable(@Nullable Output<Boolean> unschedulable) {
            $.unschedulable = unschedulable;
            return this;
        }

        public Builder unschedulable(Boolean unschedulable) {
            return unschedulable(Output.of(unschedulable));
        }

        public NodeSpecArgs build() {
            return $;
        }
    }

}
