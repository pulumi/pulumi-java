// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.core_v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * ContainerStateTerminated is a terminated state of a container.
 * 
 */
public final class ContainerStateTerminatedArgs extends com.pulumi.resources.ResourceArgs {

    public static final ContainerStateTerminatedArgs Empty = new ContainerStateTerminatedArgs();

    /**
     * Container&#39;s ID in the format &#39;docker://&lt;container_id&gt;&#39;
     * 
     */
    @Import(name="containerID")
    private @Nullable Output<String> containerID;

    public Optional<Output<String>> containerID() {
        return Optional.ofNullable(this.containerID);
    }

    /**
     * Exit status from the last termination of the container
     * 
     */
    @Import(name="exitCode", required=true)
    private Output<Integer> exitCode;

    public Output<Integer> exitCode() {
        return this.exitCode;
    }

    /**
     * Time at which the container last terminated
     * 
     */
    @Import(name="finishedAt")
    private @Nullable Output<String> finishedAt;

    public Optional<Output<String>> finishedAt() {
        return Optional.ofNullable(this.finishedAt);
    }

    /**
     * Message regarding the last termination of the container
     * 
     */
    @Import(name="message")
    private @Nullable Output<String> message;

    public Optional<Output<String>> message() {
        return Optional.ofNullable(this.message);
    }

    /**
     * (brief) reason from the last termination of the container
     * 
     */
    @Import(name="reason")
    private @Nullable Output<String> reason;

    public Optional<Output<String>> reason() {
        return Optional.ofNullable(this.reason);
    }

    /**
     * Signal from the last termination of the container
     * 
     */
    @Import(name="signal")
    private @Nullable Output<Integer> signal;

    public Optional<Output<Integer>> signal() {
        return Optional.ofNullable(this.signal);
    }

    /**
     * Time at which previous execution of the container started
     * 
     */
    @Import(name="startedAt")
    private @Nullable Output<String> startedAt;

    public Optional<Output<String>> startedAt() {
        return Optional.ofNullable(this.startedAt);
    }

    private ContainerStateTerminatedArgs() {}

    private ContainerStateTerminatedArgs(ContainerStateTerminatedArgs $) {
        this.containerID = $.containerID;
        this.exitCode = $.exitCode;
        this.finishedAt = $.finishedAt;
        this.message = $.message;
        this.reason = $.reason;
        this.signal = $.signal;
        this.startedAt = $.startedAt;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContainerStateTerminatedArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContainerStateTerminatedArgs $;

        public Builder() {
            $ = new ContainerStateTerminatedArgs();
        }

        public Builder(ContainerStateTerminatedArgs defaults) {
            $ = new ContainerStateTerminatedArgs(Objects.requireNonNull(defaults));
        }

        public Builder containerID(@Nullable Output<String> containerID) {
            $.containerID = containerID;
            return this;
        }

        public Builder containerID(String containerID) {
            return containerID(Output.of(containerID));
        }

        public Builder exitCode(Output<Integer> exitCode) {
            $.exitCode = exitCode;
            return this;
        }

        public Builder exitCode(Integer exitCode) {
            return exitCode(Output.of(exitCode));
        }

        public Builder finishedAt(@Nullable Output<String> finishedAt) {
            $.finishedAt = finishedAt;
            return this;
        }

        public Builder finishedAt(String finishedAt) {
            return finishedAt(Output.of(finishedAt));
        }

        public Builder message(@Nullable Output<String> message) {
            $.message = message;
            return this;
        }

        public Builder message(String message) {
            return message(Output.of(message));
        }

        public Builder reason(@Nullable Output<String> reason) {
            $.reason = reason;
            return this;
        }

        public Builder reason(String reason) {
            return reason(Output.of(reason));
        }

        public Builder signal(@Nullable Output<Integer> signal) {
            $.signal = signal;
            return this;
        }

        public Builder signal(Integer signal) {
            return signal(Output.of(signal));
        }

        public Builder startedAt(@Nullable Output<String> startedAt) {
            $.startedAt = startedAt;
            return this;
        }

        public Builder startedAt(String startedAt) {
            return startedAt(Output.of(startedAt));
        }

        public ContainerStateTerminatedArgs build() {
            $.exitCode = Objects.requireNonNull($.exitCode, "expected parameter 'exitCode' to be non-null");
            return $;
        }
    }

}
