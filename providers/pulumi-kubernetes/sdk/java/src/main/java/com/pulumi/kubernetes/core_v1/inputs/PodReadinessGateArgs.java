// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.core_v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;


/**
 * PodReadinessGate contains the reference to a pod condition
 * 
 */
public final class PodReadinessGateArgs extends com.pulumi.resources.ResourceArgs {

    public static final PodReadinessGateArgs Empty = new PodReadinessGateArgs();

    /**
     * ConditionType refers to a condition in the pod's condition list with matching type.
     * 
     * Possible enum values:
     *  - `"ContainersReady"` indicates whether all containers in the pod are ready.
     *  - `"Initialized"` means that all init containers in the pod have started successfully.
     *  - `"PodScheduled"` represents status of the scheduling process for this pod.
     *  - `"Ready"` means the pod is able to service requests and should be added to the load balancing pools of all matching services.
     * 
     */
    @Import(name="conditionType", required=true)
      private final Output<String> conditionType;

    public Output<String> conditionType() {
        return this.conditionType;
    }

    public PodReadinessGateArgs(Output<String> conditionType) {
        this.conditionType = Objects.requireNonNull(conditionType, "expected parameter 'conditionType' to be non-null");
    }

    private PodReadinessGateArgs() {
        this.conditionType = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PodReadinessGateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> conditionType;

        public Builder() {
    	      // Empty
        }

        public Builder(PodReadinessGateArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.conditionType = defaults.conditionType;
        }

        public Builder conditionType(Output<String> conditionType) {
            this.conditionType = Objects.requireNonNull(conditionType);
            return this;
        }
        public Builder conditionType(String conditionType) {
            this.conditionType = Output.of(Objects.requireNonNull(conditionType));
            return this;
        }        public PodReadinessGateArgs build() {
            return new PodReadinessGateArgs(conditionType);
        }
    }
}
