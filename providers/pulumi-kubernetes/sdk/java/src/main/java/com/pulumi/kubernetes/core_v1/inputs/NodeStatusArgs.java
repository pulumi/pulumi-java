// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.core_v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.kubernetes.core_v1.inputs.AttachedVolumeArgs;
import com.pulumi.kubernetes.core_v1.inputs.ContainerImageArgs;
import com.pulumi.kubernetes.core_v1.inputs.NodeAddressArgs;
import com.pulumi.kubernetes.core_v1.inputs.NodeConditionArgs;
import com.pulumi.kubernetes.core_v1.inputs.NodeConfigStatusArgs;
import com.pulumi.kubernetes.core_v1.inputs.NodeDaemonEndpointsArgs;
import com.pulumi.kubernetes.core_v1.inputs.NodeSystemInfoArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * NodeStatus is information about the current status of a node.
 * 
 */
public final class NodeStatusArgs extends com.pulumi.resources.ResourceArgs {

    public static final NodeStatusArgs Empty = new NodeStatusArgs();

    /**
     * List of addresses reachable to the node. Queried from cloud provider, if available. More info: https://kubernetes.io/docs/concepts/nodes/node/#addresses Note: This field is declared as mergeable, but the merge key is not sufficiently unique, which can cause data corruption when it is merged. Callers should instead use a full-replacement patch. See http://pr.k8s.io/79391 for an example.
     * 
     */
    @Import(name="addresses")
      private final @Nullable Output<List<NodeAddressArgs>> addresses;

    public Output<List<NodeAddressArgs>> addresses() {
        return this.addresses == null ? Codegen.empty() : this.addresses;
    }

    /**
     * Allocatable represents the resources of a node that are available for scheduling. Defaults to Capacity.
     * 
     */
    @Import(name="allocatable")
      private final @Nullable Output<Map<String,String>> allocatable;

    public Output<Map<String,String>> allocatable() {
        return this.allocatable == null ? Codegen.empty() : this.allocatable;
    }

    /**
     * Capacity represents the total resources of a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
     * 
     */
    @Import(name="capacity")
      private final @Nullable Output<Map<String,String>> capacity;

    public Output<Map<String,String>> capacity() {
        return this.capacity == null ? Codegen.empty() : this.capacity;
    }

    /**
     * Conditions is an array of current observed node conditions. More info: https://kubernetes.io/docs/concepts/nodes/node/#condition
     * 
     */
    @Import(name="conditions")
      private final @Nullable Output<List<NodeConditionArgs>> conditions;

    public Output<List<NodeConditionArgs>> conditions() {
        return this.conditions == null ? Codegen.empty() : this.conditions;
    }

    /**
     * Status of the config assigned to the node via the dynamic Kubelet config feature.
     * 
     */
    @Import(name="config")
      private final @Nullable Output<NodeConfigStatusArgs> config;

    public Output<NodeConfigStatusArgs> config() {
        return this.config == null ? Codegen.empty() : this.config;
    }

    /**
     * Endpoints of daemons running on the Node.
     * 
     */
    @Import(name="daemonEndpoints")
      private final @Nullable Output<NodeDaemonEndpointsArgs> daemonEndpoints;

    public Output<NodeDaemonEndpointsArgs> daemonEndpoints() {
        return this.daemonEndpoints == null ? Codegen.empty() : this.daemonEndpoints;
    }

    /**
     * List of container images on this node
     * 
     */
    @Import(name="images")
      private final @Nullable Output<List<ContainerImageArgs>> images;

    public Output<List<ContainerImageArgs>> images() {
        return this.images == null ? Codegen.empty() : this.images;
    }

    /**
     * Set of ids/uuids to uniquely identify the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#info
     * 
     */
    @Import(name="nodeInfo")
      private final @Nullable Output<NodeSystemInfoArgs> nodeInfo;

    public Output<NodeSystemInfoArgs> nodeInfo() {
        return this.nodeInfo == null ? Codegen.empty() : this.nodeInfo;
    }

    /**
     * NodePhase is the recently observed lifecycle phase of the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#phase The field is never populated, and now is deprecated.
     * 
     * Possible enum values:
     *  - `&#34;Pending&#34;` means the node has been created/added by the system, but not configured.
     *  - `&#34;Running&#34;` means the node has been configured and has Kubernetes components running.
     *  - `&#34;Terminated&#34;` means the node has been removed from the cluster.
     * 
     */
    @Import(name="phase")
      private final @Nullable Output<String> phase;

    public Output<String> phase() {
        return this.phase == null ? Codegen.empty() : this.phase;
    }

    /**
     * List of volumes that are attached to the node.
     * 
     */
    @Import(name="volumesAttached")
      private final @Nullable Output<List<AttachedVolumeArgs>> volumesAttached;

    public Output<List<AttachedVolumeArgs>> volumesAttached() {
        return this.volumesAttached == null ? Codegen.empty() : this.volumesAttached;
    }

    /**
     * List of attachable volumes in use (mounted) by the node.
     * 
     */
    @Import(name="volumesInUse")
      private final @Nullable Output<List<String>> volumesInUse;

    public Output<List<String>> volumesInUse() {
        return this.volumesInUse == null ? Codegen.empty() : this.volumesInUse;
    }

    public NodeStatusArgs(
        @Nullable Output<List<NodeAddressArgs>> addresses,
        @Nullable Output<Map<String,String>> allocatable,
        @Nullable Output<Map<String,String>> capacity,
        @Nullable Output<List<NodeConditionArgs>> conditions,
        @Nullable Output<NodeConfigStatusArgs> config,
        @Nullable Output<NodeDaemonEndpointsArgs> daemonEndpoints,
        @Nullable Output<List<ContainerImageArgs>> images,
        @Nullable Output<NodeSystemInfoArgs> nodeInfo,
        @Nullable Output<String> phase,
        @Nullable Output<List<AttachedVolumeArgs>> volumesAttached,
        @Nullable Output<List<String>> volumesInUse) {
        this.addresses = addresses;
        this.allocatable = allocatable;
        this.capacity = capacity;
        this.conditions = conditions;
        this.config = config;
        this.daemonEndpoints = daemonEndpoints;
        this.images = images;
        this.nodeInfo = nodeInfo;
        this.phase = phase;
        this.volumesAttached = volumesAttached;
        this.volumesInUse = volumesInUse;
    }

    private NodeStatusArgs() {
        this.addresses = Codegen.empty();
        this.allocatable = Codegen.empty();
        this.capacity = Codegen.empty();
        this.conditions = Codegen.empty();
        this.config = Codegen.empty();
        this.daemonEndpoints = Codegen.empty();
        this.images = Codegen.empty();
        this.nodeInfo = Codegen.empty();
        this.phase = Codegen.empty();
        this.volumesAttached = Codegen.empty();
        this.volumesInUse = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NodeStatusArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<NodeAddressArgs>> addresses;
        private @Nullable Output<Map<String,String>> allocatable;
        private @Nullable Output<Map<String,String>> capacity;
        private @Nullable Output<List<NodeConditionArgs>> conditions;
        private @Nullable Output<NodeConfigStatusArgs> config;
        private @Nullable Output<NodeDaemonEndpointsArgs> daemonEndpoints;
        private @Nullable Output<List<ContainerImageArgs>> images;
        private @Nullable Output<NodeSystemInfoArgs> nodeInfo;
        private @Nullable Output<String> phase;
        private @Nullable Output<List<AttachedVolumeArgs>> volumesAttached;
        private @Nullable Output<List<String>> volumesInUse;

        public Builder() {
    	      // Empty
        }

        public Builder(NodeStatusArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.addresses = defaults.addresses;
    	      this.allocatable = defaults.allocatable;
    	      this.capacity = defaults.capacity;
    	      this.conditions = defaults.conditions;
    	      this.config = defaults.config;
    	      this.daemonEndpoints = defaults.daemonEndpoints;
    	      this.images = defaults.images;
    	      this.nodeInfo = defaults.nodeInfo;
    	      this.phase = defaults.phase;
    	      this.volumesAttached = defaults.volumesAttached;
    	      this.volumesInUse = defaults.volumesInUse;
        }

        public Builder addresses(@Nullable Output<List<NodeAddressArgs>> addresses) {
            this.addresses = addresses;
            return this;
        }
        public Builder addresses(@Nullable List<NodeAddressArgs> addresses) {
            this.addresses = Codegen.ofNullable(addresses);
            return this;
        }
        public Builder addresses(NodeAddressArgs... addresses) {
            return addresses(List.of(addresses));
        }
        public Builder allocatable(@Nullable Output<Map<String,String>> allocatable) {
            this.allocatable = allocatable;
            return this;
        }
        public Builder allocatable(@Nullable Map<String,String> allocatable) {
            this.allocatable = Codegen.ofNullable(allocatable);
            return this;
        }
        public Builder capacity(@Nullable Output<Map<String,String>> capacity) {
            this.capacity = capacity;
            return this;
        }
        public Builder capacity(@Nullable Map<String,String> capacity) {
            this.capacity = Codegen.ofNullable(capacity);
            return this;
        }
        public Builder conditions(@Nullable Output<List<NodeConditionArgs>> conditions) {
            this.conditions = conditions;
            return this;
        }
        public Builder conditions(@Nullable List<NodeConditionArgs> conditions) {
            this.conditions = Codegen.ofNullable(conditions);
            return this;
        }
        public Builder conditions(NodeConditionArgs... conditions) {
            return conditions(List.of(conditions));
        }
        public Builder config(@Nullable Output<NodeConfigStatusArgs> config) {
            this.config = config;
            return this;
        }
        public Builder config(@Nullable NodeConfigStatusArgs config) {
            this.config = Codegen.ofNullable(config);
            return this;
        }
        public Builder daemonEndpoints(@Nullable Output<NodeDaemonEndpointsArgs> daemonEndpoints) {
            this.daemonEndpoints = daemonEndpoints;
            return this;
        }
        public Builder daemonEndpoints(@Nullable NodeDaemonEndpointsArgs daemonEndpoints) {
            this.daemonEndpoints = Codegen.ofNullable(daemonEndpoints);
            return this;
        }
        public Builder images(@Nullable Output<List<ContainerImageArgs>> images) {
            this.images = images;
            return this;
        }
        public Builder images(@Nullable List<ContainerImageArgs> images) {
            this.images = Codegen.ofNullable(images);
            return this;
        }
        public Builder images(ContainerImageArgs... images) {
            return images(List.of(images));
        }
        public Builder nodeInfo(@Nullable Output<NodeSystemInfoArgs> nodeInfo) {
            this.nodeInfo = nodeInfo;
            return this;
        }
        public Builder nodeInfo(@Nullable NodeSystemInfoArgs nodeInfo) {
            this.nodeInfo = Codegen.ofNullable(nodeInfo);
            return this;
        }
        public Builder phase(@Nullable Output<String> phase) {
            this.phase = phase;
            return this;
        }
        public Builder phase(@Nullable String phase) {
            this.phase = Codegen.ofNullable(phase);
            return this;
        }
        public Builder volumesAttached(@Nullable Output<List<AttachedVolumeArgs>> volumesAttached) {
            this.volumesAttached = volumesAttached;
            return this;
        }
        public Builder volumesAttached(@Nullable List<AttachedVolumeArgs> volumesAttached) {
            this.volumesAttached = Codegen.ofNullable(volumesAttached);
            return this;
        }
        public Builder volumesAttached(AttachedVolumeArgs... volumesAttached) {
            return volumesAttached(List.of(volumesAttached));
        }
        public Builder volumesInUse(@Nullable Output<List<String>> volumesInUse) {
            this.volumesInUse = volumesInUse;
            return this;
        }
        public Builder volumesInUse(@Nullable List<String> volumesInUse) {
            this.volumesInUse = Codegen.ofNullable(volumesInUse);
            return this;
        }
        public Builder volumesInUse(String... volumesInUse) {
            return volumesInUse(List.of(volumesInUse));
        }        public NodeStatusArgs build() {
            return new NodeStatusArgs(addresses, allocatable, capacity, conditions, config, daemonEndpoints, images, nodeInfo, phase, volumesAttached, volumesInUse);
        }
    }
}
