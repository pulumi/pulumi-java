// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.core_v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.kubernetes.core_v1.inputs.AWSElasticBlockStoreVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.AzureDiskVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.AzureFileVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.CSIVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.CephFSVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.CinderVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.ConfigMapVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.DownwardAPIVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.EmptyDirVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.EphemeralVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.FCVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.FlexVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.FlockerVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.GCEPersistentDiskVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.GitRepoVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.GlusterfsVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.HostPathVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.ISCSIVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.NFSVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.PersistentVolumeClaimVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.PhotonPersistentDiskVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.PortworxVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.ProjectedVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.QuobyteVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.RBDVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.ScaleIOVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.SecretVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.StorageOSVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.VsphereVirtualDiskVolumeSourceArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Volume represents a named volume in a pod that may be accessed by any container in the pod.
 * 
 */
public final class VolumeArgs extends com.pulumi.resources.ResourceArgs {

    public static final VolumeArgs Empty = new VolumeArgs();

    /**
     * AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet&#39;s host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     * 
     */
    @Import(name="awsElasticBlockStore")
    private @Nullable Output<AWSElasticBlockStoreVolumeSourceArgs> awsElasticBlockStore;

    public Optional<Output<AWSElasticBlockStoreVolumeSourceArgs>> awsElasticBlockStore() {
        return Optional.ofNullable(this.awsElasticBlockStore);
    }

    /**
     * AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
     * 
     */
    @Import(name="azureDisk")
    private @Nullable Output<AzureDiskVolumeSourceArgs> azureDisk;

    public Optional<Output<AzureDiskVolumeSourceArgs>> azureDisk() {
        return Optional.ofNullable(this.azureDisk);
    }

    /**
     * AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
     * 
     */
    @Import(name="azureFile")
    private @Nullable Output<AzureFileVolumeSourceArgs> azureFile;

    public Optional<Output<AzureFileVolumeSourceArgs>> azureFile() {
        return Optional.ofNullable(this.azureFile);
    }

    /**
     * CephFS represents a Ceph FS mount on the host that shares a pod&#39;s lifetime
     * 
     */
    @Import(name="cephfs")
    private @Nullable Output<CephFSVolumeSourceArgs> cephfs;

    public Optional<Output<CephFSVolumeSourceArgs>> cephfs() {
        return Optional.ofNullable(this.cephfs);
    }

    /**
     * Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     * 
     */
    @Import(name="cinder")
    private @Nullable Output<CinderVolumeSourceArgs> cinder;

    public Optional<Output<CinderVolumeSourceArgs>> cinder() {
        return Optional.ofNullable(this.cinder);
    }

    /**
     * ConfigMap represents a configMap that should populate this volume
     * 
     */
    @Import(name="configMap")
    private @Nullable Output<ConfigMapVolumeSourceArgs> configMap;

    public Optional<Output<ConfigMapVolumeSourceArgs>> configMap() {
        return Optional.ofNullable(this.configMap);
    }

    /**
     * CSI (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
     * 
     */
    @Import(name="csi")
    private @Nullable Output<CSIVolumeSourceArgs> csi;

    public Optional<Output<CSIVolumeSourceArgs>> csi() {
        return Optional.ofNullable(this.csi);
    }

    /**
     * DownwardAPI represents downward API about the pod that should populate this volume
     * 
     */
    @Import(name="downwardAPI")
    private @Nullable Output<DownwardAPIVolumeSourceArgs> downwardAPI;

    public Optional<Output<DownwardAPIVolumeSourceArgs>> downwardAPI() {
        return Optional.ofNullable(this.downwardAPI);
    }

    /**
     * EmptyDir represents a temporary directory that shares a pod&#39;s lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
     * 
     */
    @Import(name="emptyDir")
    private @Nullable Output<EmptyDirVolumeSourceArgs> emptyDir;

    public Optional<Output<EmptyDirVolumeSourceArgs>> emptyDir() {
        return Optional.ofNullable(this.emptyDir);
    }

    /**
     * Ephemeral represents a volume that is handled by a cluster storage driver. The volume&#39;s lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed.
     * 
     * Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity
     *    tracking are needed,
     * c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through
     *    a PersistentVolumeClaim (see EphemeralVolumeSource for more
     *    information on the connection between this volume type
     *    and PersistentVolumeClaim).
     * 
     * Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod.
     * 
     * Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information.
     * 
     * A pod can use both types of ephemeral volumes and persistent volumes at the same time.
     * 
     */
    @Import(name="ephemeral")
    private @Nullable Output<EphemeralVolumeSourceArgs> ephemeral;

    public Optional<Output<EphemeralVolumeSourceArgs>> ephemeral() {
        return Optional.ofNullable(this.ephemeral);
    }

    /**
     * FC represents a Fibre Channel resource that is attached to a kubelet&#39;s host machine and then exposed to the pod.
     * 
     */
    @Import(name="fc")
    private @Nullable Output<FCVolumeSourceArgs> fc;

    public Optional<Output<FCVolumeSourceArgs>> fc() {
        return Optional.ofNullable(this.fc);
    }

    /**
     * FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
     * 
     */
    @Import(name="flexVolume")
    private @Nullable Output<FlexVolumeSourceArgs> flexVolume;

    public Optional<Output<FlexVolumeSourceArgs>> flexVolume() {
        return Optional.ofNullable(this.flexVolume);
    }

    /**
     * Flocker represents a Flocker volume attached to a kubelet&#39;s host machine. This depends on the Flocker control service being running
     * 
     */
    @Import(name="flocker")
    private @Nullable Output<FlockerVolumeSourceArgs> flocker;

    public Optional<Output<FlockerVolumeSourceArgs>> flocker() {
        return Optional.ofNullable(this.flocker);
    }

    /**
     * GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet&#39;s host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     * 
     */
    @Import(name="gcePersistentDisk")
    private @Nullable Output<GCEPersistentDiskVolumeSourceArgs> gcePersistentDisk;

    public Optional<Output<GCEPersistentDiskVolumeSourceArgs>> gcePersistentDisk() {
        return Optional.ofNullable(this.gcePersistentDisk);
    }

    /**
     * GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod&#39;s container.
     * 
     */
    @Import(name="gitRepo")
    private @Nullable Output<GitRepoVolumeSourceArgs> gitRepo;

    public Optional<Output<GitRepoVolumeSourceArgs>> gitRepo() {
        return Optional.ofNullable(this.gitRepo);
    }

    /**
     * Glusterfs represents a Glusterfs mount on the host that shares a pod&#39;s lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
     * 
     */
    @Import(name="glusterfs")
    private @Nullable Output<GlusterfsVolumeSourceArgs> glusterfs;

    public Optional<Output<GlusterfsVolumeSourceArgs>> glusterfs() {
        return Optional.ofNullable(this.glusterfs);
    }

    /**
     * HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
     * 
     */
    @Import(name="hostPath")
    private @Nullable Output<HostPathVolumeSourceArgs> hostPath;

    public Optional<Output<HostPathVolumeSourceArgs>> hostPath() {
        return Optional.ofNullable(this.hostPath);
    }

    /**
     * ISCSI represents an ISCSI Disk resource that is attached to a kubelet&#39;s host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
     * 
     */
    @Import(name="iscsi")
    private @Nullable Output<ISCSIVolumeSourceArgs> iscsi;

    public Optional<Output<ISCSIVolumeSourceArgs>> iscsi() {
        return Optional.ofNullable(this.iscsi);
    }

    /**
     * Volume&#39;s name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    public Output<String> name() {
        return this.name;
    }

    /**
     * NFS represents an NFS mount on the host that shares a pod&#39;s lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     * 
     */
    @Import(name="nfs")
    private @Nullable Output<NFSVolumeSourceArgs> nfs;

    public Optional<Output<NFSVolumeSourceArgs>> nfs() {
        return Optional.ofNullable(this.nfs);
    }

    /**
     * PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
     * 
     */
    @Import(name="persistentVolumeClaim")
    private @Nullable Output<PersistentVolumeClaimVolumeSourceArgs> persistentVolumeClaim;

    public Optional<Output<PersistentVolumeClaimVolumeSourceArgs>> persistentVolumeClaim() {
        return Optional.ofNullable(this.persistentVolumeClaim);
    }

    /**
     * PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
     * 
     */
    @Import(name="photonPersistentDisk")
    private @Nullable Output<PhotonPersistentDiskVolumeSourceArgs> photonPersistentDisk;

    public Optional<Output<PhotonPersistentDiskVolumeSourceArgs>> photonPersistentDisk() {
        return Optional.ofNullable(this.photonPersistentDisk);
    }

    /**
     * PortworxVolume represents a portworx volume attached and mounted on kubelets host machine
     * 
     */
    @Import(name="portworxVolume")
    private @Nullable Output<PortworxVolumeSourceArgs> portworxVolume;

    public Optional<Output<PortworxVolumeSourceArgs>> portworxVolume() {
        return Optional.ofNullable(this.portworxVolume);
    }

    /**
     * Items for all in one resources secrets, configmaps, and downward API
     * 
     */
    @Import(name="projected")
    private @Nullable Output<ProjectedVolumeSourceArgs> projected;

    public Optional<Output<ProjectedVolumeSourceArgs>> projected() {
        return Optional.ofNullable(this.projected);
    }

    /**
     * Quobyte represents a Quobyte mount on the host that shares a pod&#39;s lifetime
     * 
     */
    @Import(name="quobyte")
    private @Nullable Output<QuobyteVolumeSourceArgs> quobyte;

    public Optional<Output<QuobyteVolumeSourceArgs>> quobyte() {
        return Optional.ofNullable(this.quobyte);
    }

    /**
     * RBD represents a Rados Block Device mount on the host that shares a pod&#39;s lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
     * 
     */
    @Import(name="rbd")
    private @Nullable Output<RBDVolumeSourceArgs> rbd;

    public Optional<Output<RBDVolumeSourceArgs>> rbd() {
        return Optional.ofNullable(this.rbd);
    }

    /**
     * ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
     * 
     */
    @Import(name="scaleIO")
    private @Nullable Output<ScaleIOVolumeSourceArgs> scaleIO;

    public Optional<Output<ScaleIOVolumeSourceArgs>> scaleIO() {
        return Optional.ofNullable(this.scaleIO);
    }

    /**
     * Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
     * 
     */
    @Import(name="secret")
    private @Nullable Output<SecretVolumeSourceArgs> secret;

    public Optional<Output<SecretVolumeSourceArgs>> secret() {
        return Optional.ofNullable(this.secret);
    }

    /**
     * StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
     * 
     */
    @Import(name="storageos")
    private @Nullable Output<StorageOSVolumeSourceArgs> storageos;

    public Optional<Output<StorageOSVolumeSourceArgs>> storageos() {
        return Optional.ofNullable(this.storageos);
    }

    /**
     * VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
     * 
     */
    @Import(name="vsphereVolume")
    private @Nullable Output<VsphereVirtualDiskVolumeSourceArgs> vsphereVolume;

    public Optional<Output<VsphereVirtualDiskVolumeSourceArgs>> vsphereVolume() {
        return Optional.ofNullable(this.vsphereVolume);
    }

    private VolumeArgs() {}

    private VolumeArgs(VolumeArgs $) {
        this.awsElasticBlockStore = $.awsElasticBlockStore;
        this.azureDisk = $.azureDisk;
        this.azureFile = $.azureFile;
        this.cephfs = $.cephfs;
        this.cinder = $.cinder;
        this.configMap = $.configMap;
        this.csi = $.csi;
        this.downwardAPI = $.downwardAPI;
        this.emptyDir = $.emptyDir;
        this.ephemeral = $.ephemeral;
        this.fc = $.fc;
        this.flexVolume = $.flexVolume;
        this.flocker = $.flocker;
        this.gcePersistentDisk = $.gcePersistentDisk;
        this.gitRepo = $.gitRepo;
        this.glusterfs = $.glusterfs;
        this.hostPath = $.hostPath;
        this.iscsi = $.iscsi;
        this.name = $.name;
        this.nfs = $.nfs;
        this.persistentVolumeClaim = $.persistentVolumeClaim;
        this.photonPersistentDisk = $.photonPersistentDisk;
        this.portworxVolume = $.portworxVolume;
        this.projected = $.projected;
        this.quobyte = $.quobyte;
        this.rbd = $.rbd;
        this.scaleIO = $.scaleIO;
        this.secret = $.secret;
        this.storageos = $.storageos;
        this.vsphereVolume = $.vsphereVolume;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VolumeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VolumeArgs $;

        public Builder() {
            $ = new VolumeArgs();
        }

        public Builder(VolumeArgs defaults) {
            $ = new VolumeArgs(Objects.requireNonNull(defaults));
        }

        public Builder awsElasticBlockStore(@Nullable Output<AWSElasticBlockStoreVolumeSourceArgs> awsElasticBlockStore) {
            $.awsElasticBlockStore = awsElasticBlockStore;
            return this;
        }

        public Builder awsElasticBlockStore(AWSElasticBlockStoreVolumeSourceArgs awsElasticBlockStore) {
            return awsElasticBlockStore(Output.of(awsElasticBlockStore));
        }

        public Builder azureDisk(@Nullable Output<AzureDiskVolumeSourceArgs> azureDisk) {
            $.azureDisk = azureDisk;
            return this;
        }

        public Builder azureDisk(AzureDiskVolumeSourceArgs azureDisk) {
            return azureDisk(Output.of(azureDisk));
        }

        public Builder azureFile(@Nullable Output<AzureFileVolumeSourceArgs> azureFile) {
            $.azureFile = azureFile;
            return this;
        }

        public Builder azureFile(AzureFileVolumeSourceArgs azureFile) {
            return azureFile(Output.of(azureFile));
        }

        public Builder cephfs(@Nullable Output<CephFSVolumeSourceArgs> cephfs) {
            $.cephfs = cephfs;
            return this;
        }

        public Builder cephfs(CephFSVolumeSourceArgs cephfs) {
            return cephfs(Output.of(cephfs));
        }

        public Builder cinder(@Nullable Output<CinderVolumeSourceArgs> cinder) {
            $.cinder = cinder;
            return this;
        }

        public Builder cinder(CinderVolumeSourceArgs cinder) {
            return cinder(Output.of(cinder));
        }

        public Builder configMap(@Nullable Output<ConfigMapVolumeSourceArgs> configMap) {
            $.configMap = configMap;
            return this;
        }

        public Builder configMap(ConfigMapVolumeSourceArgs configMap) {
            return configMap(Output.of(configMap));
        }

        public Builder csi(@Nullable Output<CSIVolumeSourceArgs> csi) {
            $.csi = csi;
            return this;
        }

        public Builder csi(CSIVolumeSourceArgs csi) {
            return csi(Output.of(csi));
        }

        public Builder downwardAPI(@Nullable Output<DownwardAPIVolumeSourceArgs> downwardAPI) {
            $.downwardAPI = downwardAPI;
            return this;
        }

        public Builder downwardAPI(DownwardAPIVolumeSourceArgs downwardAPI) {
            return downwardAPI(Output.of(downwardAPI));
        }

        public Builder emptyDir(@Nullable Output<EmptyDirVolumeSourceArgs> emptyDir) {
            $.emptyDir = emptyDir;
            return this;
        }

        public Builder emptyDir(EmptyDirVolumeSourceArgs emptyDir) {
            return emptyDir(Output.of(emptyDir));
        }

        public Builder ephemeral(@Nullable Output<EphemeralVolumeSourceArgs> ephemeral) {
            $.ephemeral = ephemeral;
            return this;
        }

        public Builder ephemeral(EphemeralVolumeSourceArgs ephemeral) {
            return ephemeral(Output.of(ephemeral));
        }

        public Builder fc(@Nullable Output<FCVolumeSourceArgs> fc) {
            $.fc = fc;
            return this;
        }

        public Builder fc(FCVolumeSourceArgs fc) {
            return fc(Output.of(fc));
        }

        public Builder flexVolume(@Nullable Output<FlexVolumeSourceArgs> flexVolume) {
            $.flexVolume = flexVolume;
            return this;
        }

        public Builder flexVolume(FlexVolumeSourceArgs flexVolume) {
            return flexVolume(Output.of(flexVolume));
        }

        public Builder flocker(@Nullable Output<FlockerVolumeSourceArgs> flocker) {
            $.flocker = flocker;
            return this;
        }

        public Builder flocker(FlockerVolumeSourceArgs flocker) {
            return flocker(Output.of(flocker));
        }

        public Builder gcePersistentDisk(@Nullable Output<GCEPersistentDiskVolumeSourceArgs> gcePersistentDisk) {
            $.gcePersistentDisk = gcePersistentDisk;
            return this;
        }

        public Builder gcePersistentDisk(GCEPersistentDiskVolumeSourceArgs gcePersistentDisk) {
            return gcePersistentDisk(Output.of(gcePersistentDisk));
        }

        public Builder gitRepo(@Nullable Output<GitRepoVolumeSourceArgs> gitRepo) {
            $.gitRepo = gitRepo;
            return this;
        }

        public Builder gitRepo(GitRepoVolumeSourceArgs gitRepo) {
            return gitRepo(Output.of(gitRepo));
        }

        public Builder glusterfs(@Nullable Output<GlusterfsVolumeSourceArgs> glusterfs) {
            $.glusterfs = glusterfs;
            return this;
        }

        public Builder glusterfs(GlusterfsVolumeSourceArgs glusterfs) {
            return glusterfs(Output.of(glusterfs));
        }

        public Builder hostPath(@Nullable Output<HostPathVolumeSourceArgs> hostPath) {
            $.hostPath = hostPath;
            return this;
        }

        public Builder hostPath(HostPathVolumeSourceArgs hostPath) {
            return hostPath(Output.of(hostPath));
        }

        public Builder iscsi(@Nullable Output<ISCSIVolumeSourceArgs> iscsi) {
            $.iscsi = iscsi;
            return this;
        }

        public Builder iscsi(ISCSIVolumeSourceArgs iscsi) {
            return iscsi(Output.of(iscsi));
        }

        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder nfs(@Nullable Output<NFSVolumeSourceArgs> nfs) {
            $.nfs = nfs;
            return this;
        }

        public Builder nfs(NFSVolumeSourceArgs nfs) {
            return nfs(Output.of(nfs));
        }

        public Builder persistentVolumeClaim(@Nullable Output<PersistentVolumeClaimVolumeSourceArgs> persistentVolumeClaim) {
            $.persistentVolumeClaim = persistentVolumeClaim;
            return this;
        }

        public Builder persistentVolumeClaim(PersistentVolumeClaimVolumeSourceArgs persistentVolumeClaim) {
            return persistentVolumeClaim(Output.of(persistentVolumeClaim));
        }

        public Builder photonPersistentDisk(@Nullable Output<PhotonPersistentDiskVolumeSourceArgs> photonPersistentDisk) {
            $.photonPersistentDisk = photonPersistentDisk;
            return this;
        }

        public Builder photonPersistentDisk(PhotonPersistentDiskVolumeSourceArgs photonPersistentDisk) {
            return photonPersistentDisk(Output.of(photonPersistentDisk));
        }

        public Builder portworxVolume(@Nullable Output<PortworxVolumeSourceArgs> portworxVolume) {
            $.portworxVolume = portworxVolume;
            return this;
        }

        public Builder portworxVolume(PortworxVolumeSourceArgs portworxVolume) {
            return portworxVolume(Output.of(portworxVolume));
        }

        public Builder projected(@Nullable Output<ProjectedVolumeSourceArgs> projected) {
            $.projected = projected;
            return this;
        }

        public Builder projected(ProjectedVolumeSourceArgs projected) {
            return projected(Output.of(projected));
        }

        public Builder quobyte(@Nullable Output<QuobyteVolumeSourceArgs> quobyte) {
            $.quobyte = quobyte;
            return this;
        }

        public Builder quobyte(QuobyteVolumeSourceArgs quobyte) {
            return quobyte(Output.of(quobyte));
        }

        public Builder rbd(@Nullable Output<RBDVolumeSourceArgs> rbd) {
            $.rbd = rbd;
            return this;
        }

        public Builder rbd(RBDVolumeSourceArgs rbd) {
            return rbd(Output.of(rbd));
        }

        public Builder scaleIO(@Nullable Output<ScaleIOVolumeSourceArgs> scaleIO) {
            $.scaleIO = scaleIO;
            return this;
        }

        public Builder scaleIO(ScaleIOVolumeSourceArgs scaleIO) {
            return scaleIO(Output.of(scaleIO));
        }

        public Builder secret(@Nullable Output<SecretVolumeSourceArgs> secret) {
            $.secret = secret;
            return this;
        }

        public Builder secret(SecretVolumeSourceArgs secret) {
            return secret(Output.of(secret));
        }

        public Builder storageos(@Nullable Output<StorageOSVolumeSourceArgs> storageos) {
            $.storageos = storageos;
            return this;
        }

        public Builder storageos(StorageOSVolumeSourceArgs storageos) {
            return storageos(Output.of(storageos));
        }

        public Builder vsphereVolume(@Nullable Output<VsphereVirtualDiskVolumeSourceArgs> vsphereVolume) {
            $.vsphereVolume = vsphereVolume;
            return this;
        }

        public Builder vsphereVolume(VsphereVirtualDiskVolumeSourceArgs vsphereVolume) {
            return vsphereVolume(Output.of(vsphereVolume));
        }

        public VolumeArgs build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            return $;
        }
    }

}
