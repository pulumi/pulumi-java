// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.core_v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.kubernetes.core_v1.inputs.AWSElasticBlockStoreVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.AzureDiskVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.AzureFileVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.CSIVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.CephFSVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.CinderVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.ConfigMapVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.DownwardAPIVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.EmptyDirVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.EphemeralVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.FCVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.FlexVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.FlockerVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.GCEPersistentDiskVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.GitRepoVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.GlusterfsVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.HostPathVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.ISCSIVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.NFSVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.PersistentVolumeClaimVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.PhotonPersistentDiskVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.PortworxVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.ProjectedVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.QuobyteVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.RBDVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.ScaleIOVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.SecretVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.StorageOSVolumeSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.VsphereVirtualDiskVolumeSourceArgs;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Volume represents a named volume in a pod that may be accessed by any container in the pod.
 * 
 */
public final class VolumeArgs extends com.pulumi.resources.ResourceArgs {

    public static final VolumeArgs Empty = new VolumeArgs();

    /**
     * AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet&#39;s host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     * 
     */
    @Import(name="awsElasticBlockStore")
      private final @Nullable Output<AWSElasticBlockStoreVolumeSourceArgs> awsElasticBlockStore;

    public Output<AWSElasticBlockStoreVolumeSourceArgs> awsElasticBlockStore() {
        return this.awsElasticBlockStore == null ? Codegen.empty() : this.awsElasticBlockStore;
    }

    /**
     * AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
     * 
     */
    @Import(name="azureDisk")
      private final @Nullable Output<AzureDiskVolumeSourceArgs> azureDisk;

    public Output<AzureDiskVolumeSourceArgs> azureDisk() {
        return this.azureDisk == null ? Codegen.empty() : this.azureDisk;
    }

    /**
     * AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
     * 
     */
    @Import(name="azureFile")
      private final @Nullable Output<AzureFileVolumeSourceArgs> azureFile;

    public Output<AzureFileVolumeSourceArgs> azureFile() {
        return this.azureFile == null ? Codegen.empty() : this.azureFile;
    }

    /**
     * CephFS represents a Ceph FS mount on the host that shares a pod&#39;s lifetime
     * 
     */
    @Import(name="cephfs")
      private final @Nullable Output<CephFSVolumeSourceArgs> cephfs;

    public Output<CephFSVolumeSourceArgs> cephfs() {
        return this.cephfs == null ? Codegen.empty() : this.cephfs;
    }

    /**
     * Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     * 
     */
    @Import(name="cinder")
      private final @Nullable Output<CinderVolumeSourceArgs> cinder;

    public Output<CinderVolumeSourceArgs> cinder() {
        return this.cinder == null ? Codegen.empty() : this.cinder;
    }

    /**
     * ConfigMap represents a configMap that should populate this volume
     * 
     */
    @Import(name="configMap")
      private final @Nullable Output<ConfigMapVolumeSourceArgs> configMap;

    public Output<ConfigMapVolumeSourceArgs> configMap() {
        return this.configMap == null ? Codegen.empty() : this.configMap;
    }

    /**
     * CSI (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
     * 
     */
    @Import(name="csi")
      private final @Nullable Output<CSIVolumeSourceArgs> csi;

    public Output<CSIVolumeSourceArgs> csi() {
        return this.csi == null ? Codegen.empty() : this.csi;
    }

    /**
     * DownwardAPI represents downward API about the pod that should populate this volume
     * 
     */
    @Import(name="downwardAPI")
      private final @Nullable Output<DownwardAPIVolumeSourceArgs> downwardAPI;

    public Output<DownwardAPIVolumeSourceArgs> downwardAPI() {
        return this.downwardAPI == null ? Codegen.empty() : this.downwardAPI;
    }

    /**
     * EmptyDir represents a temporary directory that shares a pod&#39;s lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
     * 
     */
    @Import(name="emptyDir")
      private final @Nullable Output<EmptyDirVolumeSourceArgs> emptyDir;

    public Output<EmptyDirVolumeSourceArgs> emptyDir() {
        return this.emptyDir == null ? Codegen.empty() : this.emptyDir;
    }

    /**
     * Ephemeral represents a volume that is handled by a cluster storage driver. The volume&#39;s lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed.
     * 
     * Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity
     *    tracking are needed,
     * c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through
     *    a PersistentVolumeClaim (see EphemeralVolumeSource for more
     *    information on the connection between this volume type
     *    and PersistentVolumeClaim).
     * 
     * Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod.
     * 
     * Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information.
     * 
     * A pod can use both types of ephemeral volumes and persistent volumes at the same time.
     * 
     */
    @Import(name="ephemeral")
      private final @Nullable Output<EphemeralVolumeSourceArgs> ephemeral;

    public Output<EphemeralVolumeSourceArgs> ephemeral() {
        return this.ephemeral == null ? Codegen.empty() : this.ephemeral;
    }

    /**
     * FC represents a Fibre Channel resource that is attached to a kubelet&#39;s host machine and then exposed to the pod.
     * 
     */
    @Import(name="fc")
      private final @Nullable Output<FCVolumeSourceArgs> fc;

    public Output<FCVolumeSourceArgs> fc() {
        return this.fc == null ? Codegen.empty() : this.fc;
    }

    /**
     * FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
     * 
     */
    @Import(name="flexVolume")
      private final @Nullable Output<FlexVolumeSourceArgs> flexVolume;

    public Output<FlexVolumeSourceArgs> flexVolume() {
        return this.flexVolume == null ? Codegen.empty() : this.flexVolume;
    }

    /**
     * Flocker represents a Flocker volume attached to a kubelet&#39;s host machine. This depends on the Flocker control service being running
     * 
     */
    @Import(name="flocker")
      private final @Nullable Output<FlockerVolumeSourceArgs> flocker;

    public Output<FlockerVolumeSourceArgs> flocker() {
        return this.flocker == null ? Codegen.empty() : this.flocker;
    }

    /**
     * GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet&#39;s host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     * 
     */
    @Import(name="gcePersistentDisk")
      private final @Nullable Output<GCEPersistentDiskVolumeSourceArgs> gcePersistentDisk;

    public Output<GCEPersistentDiskVolumeSourceArgs> gcePersistentDisk() {
        return this.gcePersistentDisk == null ? Codegen.empty() : this.gcePersistentDisk;
    }

    /**
     * GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod&#39;s container.
     * 
     */
    @Import(name="gitRepo")
      private final @Nullable Output<GitRepoVolumeSourceArgs> gitRepo;

    public Output<GitRepoVolumeSourceArgs> gitRepo() {
        return this.gitRepo == null ? Codegen.empty() : this.gitRepo;
    }

    /**
     * Glusterfs represents a Glusterfs mount on the host that shares a pod&#39;s lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
     * 
     */
    @Import(name="glusterfs")
      private final @Nullable Output<GlusterfsVolumeSourceArgs> glusterfs;

    public Output<GlusterfsVolumeSourceArgs> glusterfs() {
        return this.glusterfs == null ? Codegen.empty() : this.glusterfs;
    }

    /**
     * HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
     * 
     */
    @Import(name="hostPath")
      private final @Nullable Output<HostPathVolumeSourceArgs> hostPath;

    public Output<HostPathVolumeSourceArgs> hostPath() {
        return this.hostPath == null ? Codegen.empty() : this.hostPath;
    }

    /**
     * ISCSI represents an ISCSI Disk resource that is attached to a kubelet&#39;s host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
     * 
     */
    @Import(name="iscsi")
      private final @Nullable Output<ISCSIVolumeSourceArgs> iscsi;

    public Output<ISCSIVolumeSourceArgs> iscsi() {
        return this.iscsi == null ? Codegen.empty() : this.iscsi;
    }

    /**
     * Volume&#39;s name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     * 
     */
    @Import(name="name", required=true)
      private final Output<String> name;

    public Output<String> name() {
        return this.name;
    }

    /**
     * NFS represents an NFS mount on the host that shares a pod&#39;s lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     * 
     */
    @Import(name="nfs")
      private final @Nullable Output<NFSVolumeSourceArgs> nfs;

    public Output<NFSVolumeSourceArgs> nfs() {
        return this.nfs == null ? Codegen.empty() : this.nfs;
    }

    /**
     * PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
     * 
     */
    @Import(name="persistentVolumeClaim")
      private final @Nullable Output<PersistentVolumeClaimVolumeSourceArgs> persistentVolumeClaim;

    public Output<PersistentVolumeClaimVolumeSourceArgs> persistentVolumeClaim() {
        return this.persistentVolumeClaim == null ? Codegen.empty() : this.persistentVolumeClaim;
    }

    /**
     * PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
     * 
     */
    @Import(name="photonPersistentDisk")
      private final @Nullable Output<PhotonPersistentDiskVolumeSourceArgs> photonPersistentDisk;

    public Output<PhotonPersistentDiskVolumeSourceArgs> photonPersistentDisk() {
        return this.photonPersistentDisk == null ? Codegen.empty() : this.photonPersistentDisk;
    }

    /**
     * PortworxVolume represents a portworx volume attached and mounted on kubelets host machine
     * 
     */
    @Import(name="portworxVolume")
      private final @Nullable Output<PortworxVolumeSourceArgs> portworxVolume;

    public Output<PortworxVolumeSourceArgs> portworxVolume() {
        return this.portworxVolume == null ? Codegen.empty() : this.portworxVolume;
    }

    /**
     * Items for all in one resources secrets, configmaps, and downward API
     * 
     */
    @Import(name="projected")
      private final @Nullable Output<ProjectedVolumeSourceArgs> projected;

    public Output<ProjectedVolumeSourceArgs> projected() {
        return this.projected == null ? Codegen.empty() : this.projected;
    }

    /**
     * Quobyte represents a Quobyte mount on the host that shares a pod&#39;s lifetime
     * 
     */
    @Import(name="quobyte")
      private final @Nullable Output<QuobyteVolumeSourceArgs> quobyte;

    public Output<QuobyteVolumeSourceArgs> quobyte() {
        return this.quobyte == null ? Codegen.empty() : this.quobyte;
    }

    /**
     * RBD represents a Rados Block Device mount on the host that shares a pod&#39;s lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
     * 
     */
    @Import(name="rbd")
      private final @Nullable Output<RBDVolumeSourceArgs> rbd;

    public Output<RBDVolumeSourceArgs> rbd() {
        return this.rbd == null ? Codegen.empty() : this.rbd;
    }

    /**
     * ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
     * 
     */
    @Import(name="scaleIO")
      private final @Nullable Output<ScaleIOVolumeSourceArgs> scaleIO;

    public Output<ScaleIOVolumeSourceArgs> scaleIO() {
        return this.scaleIO == null ? Codegen.empty() : this.scaleIO;
    }

    /**
     * Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
     * 
     */
    @Import(name="secret")
      private final @Nullable Output<SecretVolumeSourceArgs> secret;

    public Output<SecretVolumeSourceArgs> secret() {
        return this.secret == null ? Codegen.empty() : this.secret;
    }

    /**
     * StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
     * 
     */
    @Import(name="storageos")
      private final @Nullable Output<StorageOSVolumeSourceArgs> storageos;

    public Output<StorageOSVolumeSourceArgs> storageos() {
        return this.storageos == null ? Codegen.empty() : this.storageos;
    }

    /**
     * VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
     * 
     */
    @Import(name="vsphereVolume")
      private final @Nullable Output<VsphereVirtualDiskVolumeSourceArgs> vsphereVolume;

    public Output<VsphereVirtualDiskVolumeSourceArgs> vsphereVolume() {
        return this.vsphereVolume == null ? Codegen.empty() : this.vsphereVolume;
    }

    public VolumeArgs(
        @Nullable Output<AWSElasticBlockStoreVolumeSourceArgs> awsElasticBlockStore,
        @Nullable Output<AzureDiskVolumeSourceArgs> azureDisk,
        @Nullable Output<AzureFileVolumeSourceArgs> azureFile,
        @Nullable Output<CephFSVolumeSourceArgs> cephfs,
        @Nullable Output<CinderVolumeSourceArgs> cinder,
        @Nullable Output<ConfigMapVolumeSourceArgs> configMap,
        @Nullable Output<CSIVolumeSourceArgs> csi,
        @Nullable Output<DownwardAPIVolumeSourceArgs> downwardAPI,
        @Nullable Output<EmptyDirVolumeSourceArgs> emptyDir,
        @Nullable Output<EphemeralVolumeSourceArgs> ephemeral,
        @Nullable Output<FCVolumeSourceArgs> fc,
        @Nullable Output<FlexVolumeSourceArgs> flexVolume,
        @Nullable Output<FlockerVolumeSourceArgs> flocker,
        @Nullable Output<GCEPersistentDiskVolumeSourceArgs> gcePersistentDisk,
        @Nullable Output<GitRepoVolumeSourceArgs> gitRepo,
        @Nullable Output<GlusterfsVolumeSourceArgs> glusterfs,
        @Nullable Output<HostPathVolumeSourceArgs> hostPath,
        @Nullable Output<ISCSIVolumeSourceArgs> iscsi,
        Output<String> name,
        @Nullable Output<NFSVolumeSourceArgs> nfs,
        @Nullable Output<PersistentVolumeClaimVolumeSourceArgs> persistentVolumeClaim,
        @Nullable Output<PhotonPersistentDiskVolumeSourceArgs> photonPersistentDisk,
        @Nullable Output<PortworxVolumeSourceArgs> portworxVolume,
        @Nullable Output<ProjectedVolumeSourceArgs> projected,
        @Nullable Output<QuobyteVolumeSourceArgs> quobyte,
        @Nullable Output<RBDVolumeSourceArgs> rbd,
        @Nullable Output<ScaleIOVolumeSourceArgs> scaleIO,
        @Nullable Output<SecretVolumeSourceArgs> secret,
        @Nullable Output<StorageOSVolumeSourceArgs> storageos,
        @Nullable Output<VsphereVirtualDiskVolumeSourceArgs> vsphereVolume) {
        this.awsElasticBlockStore = awsElasticBlockStore;
        this.azureDisk = azureDisk;
        this.azureFile = azureFile;
        this.cephfs = cephfs;
        this.cinder = cinder;
        this.configMap = configMap;
        this.csi = csi;
        this.downwardAPI = downwardAPI;
        this.emptyDir = emptyDir;
        this.ephemeral = ephemeral;
        this.fc = fc;
        this.flexVolume = flexVolume;
        this.flocker = flocker;
        this.gcePersistentDisk = gcePersistentDisk;
        this.gitRepo = gitRepo;
        this.glusterfs = glusterfs;
        this.hostPath = hostPath;
        this.iscsi = iscsi;
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.nfs = nfs;
        this.persistentVolumeClaim = persistentVolumeClaim;
        this.photonPersistentDisk = photonPersistentDisk;
        this.portworxVolume = portworxVolume;
        this.projected = projected;
        this.quobyte = quobyte;
        this.rbd = rbd;
        this.scaleIO = scaleIO;
        this.secret = secret;
        this.storageos = storageos;
        this.vsphereVolume = vsphereVolume;
    }

    private VolumeArgs() {
        this.awsElasticBlockStore = Codegen.empty();
        this.azureDisk = Codegen.empty();
        this.azureFile = Codegen.empty();
        this.cephfs = Codegen.empty();
        this.cinder = Codegen.empty();
        this.configMap = Codegen.empty();
        this.csi = Codegen.empty();
        this.downwardAPI = Codegen.empty();
        this.emptyDir = Codegen.empty();
        this.ephemeral = Codegen.empty();
        this.fc = Codegen.empty();
        this.flexVolume = Codegen.empty();
        this.flocker = Codegen.empty();
        this.gcePersistentDisk = Codegen.empty();
        this.gitRepo = Codegen.empty();
        this.glusterfs = Codegen.empty();
        this.hostPath = Codegen.empty();
        this.iscsi = Codegen.empty();
        this.name = Codegen.empty();
        this.nfs = Codegen.empty();
        this.persistentVolumeClaim = Codegen.empty();
        this.photonPersistentDisk = Codegen.empty();
        this.portworxVolume = Codegen.empty();
        this.projected = Codegen.empty();
        this.quobyte = Codegen.empty();
        this.rbd = Codegen.empty();
        this.scaleIO = Codegen.empty();
        this.secret = Codegen.empty();
        this.storageos = Codegen.empty();
        this.vsphereVolume = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VolumeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<AWSElasticBlockStoreVolumeSourceArgs> awsElasticBlockStore;
        private @Nullable Output<AzureDiskVolumeSourceArgs> azureDisk;
        private @Nullable Output<AzureFileVolumeSourceArgs> azureFile;
        private @Nullable Output<CephFSVolumeSourceArgs> cephfs;
        private @Nullable Output<CinderVolumeSourceArgs> cinder;
        private @Nullable Output<ConfigMapVolumeSourceArgs> configMap;
        private @Nullable Output<CSIVolumeSourceArgs> csi;
        private @Nullable Output<DownwardAPIVolumeSourceArgs> downwardAPI;
        private @Nullable Output<EmptyDirVolumeSourceArgs> emptyDir;
        private @Nullable Output<EphemeralVolumeSourceArgs> ephemeral;
        private @Nullable Output<FCVolumeSourceArgs> fc;
        private @Nullable Output<FlexVolumeSourceArgs> flexVolume;
        private @Nullable Output<FlockerVolumeSourceArgs> flocker;
        private @Nullable Output<GCEPersistentDiskVolumeSourceArgs> gcePersistentDisk;
        private @Nullable Output<GitRepoVolumeSourceArgs> gitRepo;
        private @Nullable Output<GlusterfsVolumeSourceArgs> glusterfs;
        private @Nullable Output<HostPathVolumeSourceArgs> hostPath;
        private @Nullable Output<ISCSIVolumeSourceArgs> iscsi;
        private Output<String> name;
        private @Nullable Output<NFSVolumeSourceArgs> nfs;
        private @Nullable Output<PersistentVolumeClaimVolumeSourceArgs> persistentVolumeClaim;
        private @Nullable Output<PhotonPersistentDiskVolumeSourceArgs> photonPersistentDisk;
        private @Nullable Output<PortworxVolumeSourceArgs> portworxVolume;
        private @Nullable Output<ProjectedVolumeSourceArgs> projected;
        private @Nullable Output<QuobyteVolumeSourceArgs> quobyte;
        private @Nullable Output<RBDVolumeSourceArgs> rbd;
        private @Nullable Output<ScaleIOVolumeSourceArgs> scaleIO;
        private @Nullable Output<SecretVolumeSourceArgs> secret;
        private @Nullable Output<StorageOSVolumeSourceArgs> storageos;
        private @Nullable Output<VsphereVirtualDiskVolumeSourceArgs> vsphereVolume;

        public Builder() {
    	      // Empty
        }

        public Builder(VolumeArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.awsElasticBlockStore = defaults.awsElasticBlockStore;
    	      this.azureDisk = defaults.azureDisk;
    	      this.azureFile = defaults.azureFile;
    	      this.cephfs = defaults.cephfs;
    	      this.cinder = defaults.cinder;
    	      this.configMap = defaults.configMap;
    	      this.csi = defaults.csi;
    	      this.downwardAPI = defaults.downwardAPI;
    	      this.emptyDir = defaults.emptyDir;
    	      this.ephemeral = defaults.ephemeral;
    	      this.fc = defaults.fc;
    	      this.flexVolume = defaults.flexVolume;
    	      this.flocker = defaults.flocker;
    	      this.gcePersistentDisk = defaults.gcePersistentDisk;
    	      this.gitRepo = defaults.gitRepo;
    	      this.glusterfs = defaults.glusterfs;
    	      this.hostPath = defaults.hostPath;
    	      this.iscsi = defaults.iscsi;
    	      this.name = defaults.name;
    	      this.nfs = defaults.nfs;
    	      this.persistentVolumeClaim = defaults.persistentVolumeClaim;
    	      this.photonPersistentDisk = defaults.photonPersistentDisk;
    	      this.portworxVolume = defaults.portworxVolume;
    	      this.projected = defaults.projected;
    	      this.quobyte = defaults.quobyte;
    	      this.rbd = defaults.rbd;
    	      this.scaleIO = defaults.scaleIO;
    	      this.secret = defaults.secret;
    	      this.storageos = defaults.storageos;
    	      this.vsphereVolume = defaults.vsphereVolume;
        }

        public Builder awsElasticBlockStore(@Nullable Output<AWSElasticBlockStoreVolumeSourceArgs> awsElasticBlockStore) {
            this.awsElasticBlockStore = awsElasticBlockStore;
            return this;
        }
        public Builder awsElasticBlockStore(@Nullable AWSElasticBlockStoreVolumeSourceArgs awsElasticBlockStore) {
            this.awsElasticBlockStore = Codegen.ofNullable(awsElasticBlockStore);
            return this;
        }
        public Builder azureDisk(@Nullable Output<AzureDiskVolumeSourceArgs> azureDisk) {
            this.azureDisk = azureDisk;
            return this;
        }
        public Builder azureDisk(@Nullable AzureDiskVolumeSourceArgs azureDisk) {
            this.azureDisk = Codegen.ofNullable(azureDisk);
            return this;
        }
        public Builder azureFile(@Nullable Output<AzureFileVolumeSourceArgs> azureFile) {
            this.azureFile = azureFile;
            return this;
        }
        public Builder azureFile(@Nullable AzureFileVolumeSourceArgs azureFile) {
            this.azureFile = Codegen.ofNullable(azureFile);
            return this;
        }
        public Builder cephfs(@Nullable Output<CephFSVolumeSourceArgs> cephfs) {
            this.cephfs = cephfs;
            return this;
        }
        public Builder cephfs(@Nullable CephFSVolumeSourceArgs cephfs) {
            this.cephfs = Codegen.ofNullable(cephfs);
            return this;
        }
        public Builder cinder(@Nullable Output<CinderVolumeSourceArgs> cinder) {
            this.cinder = cinder;
            return this;
        }
        public Builder cinder(@Nullable CinderVolumeSourceArgs cinder) {
            this.cinder = Codegen.ofNullable(cinder);
            return this;
        }
        public Builder configMap(@Nullable Output<ConfigMapVolumeSourceArgs> configMap) {
            this.configMap = configMap;
            return this;
        }
        public Builder configMap(@Nullable ConfigMapVolumeSourceArgs configMap) {
            this.configMap = Codegen.ofNullable(configMap);
            return this;
        }
        public Builder csi(@Nullable Output<CSIVolumeSourceArgs> csi) {
            this.csi = csi;
            return this;
        }
        public Builder csi(@Nullable CSIVolumeSourceArgs csi) {
            this.csi = Codegen.ofNullable(csi);
            return this;
        }
        public Builder downwardAPI(@Nullable Output<DownwardAPIVolumeSourceArgs> downwardAPI) {
            this.downwardAPI = downwardAPI;
            return this;
        }
        public Builder downwardAPI(@Nullable DownwardAPIVolumeSourceArgs downwardAPI) {
            this.downwardAPI = Codegen.ofNullable(downwardAPI);
            return this;
        }
        public Builder emptyDir(@Nullable Output<EmptyDirVolumeSourceArgs> emptyDir) {
            this.emptyDir = emptyDir;
            return this;
        }
        public Builder emptyDir(@Nullable EmptyDirVolumeSourceArgs emptyDir) {
            this.emptyDir = Codegen.ofNullable(emptyDir);
            return this;
        }
        public Builder ephemeral(@Nullable Output<EphemeralVolumeSourceArgs> ephemeral) {
            this.ephemeral = ephemeral;
            return this;
        }
        public Builder ephemeral(@Nullable EphemeralVolumeSourceArgs ephemeral) {
            this.ephemeral = Codegen.ofNullable(ephemeral);
            return this;
        }
        public Builder fc(@Nullable Output<FCVolumeSourceArgs> fc) {
            this.fc = fc;
            return this;
        }
        public Builder fc(@Nullable FCVolumeSourceArgs fc) {
            this.fc = Codegen.ofNullable(fc);
            return this;
        }
        public Builder flexVolume(@Nullable Output<FlexVolumeSourceArgs> flexVolume) {
            this.flexVolume = flexVolume;
            return this;
        }
        public Builder flexVolume(@Nullable FlexVolumeSourceArgs flexVolume) {
            this.flexVolume = Codegen.ofNullable(flexVolume);
            return this;
        }
        public Builder flocker(@Nullable Output<FlockerVolumeSourceArgs> flocker) {
            this.flocker = flocker;
            return this;
        }
        public Builder flocker(@Nullable FlockerVolumeSourceArgs flocker) {
            this.flocker = Codegen.ofNullable(flocker);
            return this;
        }
        public Builder gcePersistentDisk(@Nullable Output<GCEPersistentDiskVolumeSourceArgs> gcePersistentDisk) {
            this.gcePersistentDisk = gcePersistentDisk;
            return this;
        }
        public Builder gcePersistentDisk(@Nullable GCEPersistentDiskVolumeSourceArgs gcePersistentDisk) {
            this.gcePersistentDisk = Codegen.ofNullable(gcePersistentDisk);
            return this;
        }
        public Builder gitRepo(@Nullable Output<GitRepoVolumeSourceArgs> gitRepo) {
            this.gitRepo = gitRepo;
            return this;
        }
        public Builder gitRepo(@Nullable GitRepoVolumeSourceArgs gitRepo) {
            this.gitRepo = Codegen.ofNullable(gitRepo);
            return this;
        }
        public Builder glusterfs(@Nullable Output<GlusterfsVolumeSourceArgs> glusterfs) {
            this.glusterfs = glusterfs;
            return this;
        }
        public Builder glusterfs(@Nullable GlusterfsVolumeSourceArgs glusterfs) {
            this.glusterfs = Codegen.ofNullable(glusterfs);
            return this;
        }
        public Builder hostPath(@Nullable Output<HostPathVolumeSourceArgs> hostPath) {
            this.hostPath = hostPath;
            return this;
        }
        public Builder hostPath(@Nullable HostPathVolumeSourceArgs hostPath) {
            this.hostPath = Codegen.ofNullable(hostPath);
            return this;
        }
        public Builder iscsi(@Nullable Output<ISCSIVolumeSourceArgs> iscsi) {
            this.iscsi = iscsi;
            return this;
        }
        public Builder iscsi(@Nullable ISCSIVolumeSourceArgs iscsi) {
            this.iscsi = Codegen.ofNullable(iscsi);
            return this;
        }
        public Builder name(Output<String> name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder name(String name) {
            this.name = Output.of(Objects.requireNonNull(name));
            return this;
        }
        public Builder nfs(@Nullable Output<NFSVolumeSourceArgs> nfs) {
            this.nfs = nfs;
            return this;
        }
        public Builder nfs(@Nullable NFSVolumeSourceArgs nfs) {
            this.nfs = Codegen.ofNullable(nfs);
            return this;
        }
        public Builder persistentVolumeClaim(@Nullable Output<PersistentVolumeClaimVolumeSourceArgs> persistentVolumeClaim) {
            this.persistentVolumeClaim = persistentVolumeClaim;
            return this;
        }
        public Builder persistentVolumeClaim(@Nullable PersistentVolumeClaimVolumeSourceArgs persistentVolumeClaim) {
            this.persistentVolumeClaim = Codegen.ofNullable(persistentVolumeClaim);
            return this;
        }
        public Builder photonPersistentDisk(@Nullable Output<PhotonPersistentDiskVolumeSourceArgs> photonPersistentDisk) {
            this.photonPersistentDisk = photonPersistentDisk;
            return this;
        }
        public Builder photonPersistentDisk(@Nullable PhotonPersistentDiskVolumeSourceArgs photonPersistentDisk) {
            this.photonPersistentDisk = Codegen.ofNullable(photonPersistentDisk);
            return this;
        }
        public Builder portworxVolume(@Nullable Output<PortworxVolumeSourceArgs> portworxVolume) {
            this.portworxVolume = portworxVolume;
            return this;
        }
        public Builder portworxVolume(@Nullable PortworxVolumeSourceArgs portworxVolume) {
            this.portworxVolume = Codegen.ofNullable(portworxVolume);
            return this;
        }
        public Builder projected(@Nullable Output<ProjectedVolumeSourceArgs> projected) {
            this.projected = projected;
            return this;
        }
        public Builder projected(@Nullable ProjectedVolumeSourceArgs projected) {
            this.projected = Codegen.ofNullable(projected);
            return this;
        }
        public Builder quobyte(@Nullable Output<QuobyteVolumeSourceArgs> quobyte) {
            this.quobyte = quobyte;
            return this;
        }
        public Builder quobyte(@Nullable QuobyteVolumeSourceArgs quobyte) {
            this.quobyte = Codegen.ofNullable(quobyte);
            return this;
        }
        public Builder rbd(@Nullable Output<RBDVolumeSourceArgs> rbd) {
            this.rbd = rbd;
            return this;
        }
        public Builder rbd(@Nullable RBDVolumeSourceArgs rbd) {
            this.rbd = Codegen.ofNullable(rbd);
            return this;
        }
        public Builder scaleIO(@Nullable Output<ScaleIOVolumeSourceArgs> scaleIO) {
            this.scaleIO = scaleIO;
            return this;
        }
        public Builder scaleIO(@Nullable ScaleIOVolumeSourceArgs scaleIO) {
            this.scaleIO = Codegen.ofNullable(scaleIO);
            return this;
        }
        public Builder secret(@Nullable Output<SecretVolumeSourceArgs> secret) {
            this.secret = secret;
            return this;
        }
        public Builder secret(@Nullable SecretVolumeSourceArgs secret) {
            this.secret = Codegen.ofNullable(secret);
            return this;
        }
        public Builder storageos(@Nullable Output<StorageOSVolumeSourceArgs> storageos) {
            this.storageos = storageos;
            return this;
        }
        public Builder storageos(@Nullable StorageOSVolumeSourceArgs storageos) {
            this.storageos = Codegen.ofNullable(storageos);
            return this;
        }
        public Builder vsphereVolume(@Nullable Output<VsphereVirtualDiskVolumeSourceArgs> vsphereVolume) {
            this.vsphereVolume = vsphereVolume;
            return this;
        }
        public Builder vsphereVolume(@Nullable VsphereVirtualDiskVolumeSourceArgs vsphereVolume) {
            this.vsphereVolume = Codegen.ofNullable(vsphereVolume);
            return this;
        }        public VolumeArgs build() {
            return new VolumeArgs(awsElasticBlockStore, azureDisk, azureFile, cephfs, cinder, configMap, csi, downwardAPI, emptyDir, ephemeral, fc, flexVolume, flocker, gcePersistentDisk, gitRepo, glusterfs, hostPath, iscsi, name, nfs, persistentVolumeClaim, photonPersistentDisk, portworxVolume, projected, quobyte, rbd, scaleIO, secret, storageos, vsphereVolume);
        }
    }
}
