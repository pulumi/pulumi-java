// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.core_v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.kubernetes.core_v1.inputs.ExecActionArgs;
import com.pulumi.kubernetes.core_v1.inputs.HTTPGetActionArgs;
import com.pulumi.kubernetes.core_v1.inputs.TCPSocketActionArgs;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * LifecycleHandler defines a specific action that should be taken in a lifecycle hook. One and only one of the fields, except TCPSocket must be specified.
 * 
 */
public final class LifecycleHandlerArgs extends com.pulumi.resources.ResourceArgs {

    public static final LifecycleHandlerArgs Empty = new LifecycleHandlerArgs();

    /**
     * Exec specifies the action to take.
     * 
     */
    @Import(name="exec")
    private @Nullable Output<ExecActionArgs> exec;

    public Optional<Output<ExecActionArgs>> exec() {
        return Optional.ofNullable(this.exec);
    }

    /**
     * HTTPGet specifies the http request to perform.
     * 
     */
    @Import(name="httpGet")
    private @Nullable Output<HTTPGetActionArgs> httpGet;

    public Optional<Output<HTTPGetActionArgs>> httpGet() {
        return Optional.ofNullable(this.httpGet);
    }

    /**
     * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
     * 
     */
    @Import(name="tcpSocket")
    private @Nullable Output<TCPSocketActionArgs> tcpSocket;

    public Optional<Output<TCPSocketActionArgs>> tcpSocket() {
        return Optional.ofNullable(this.tcpSocket);
    }

    private LifecycleHandlerArgs() {}

    private LifecycleHandlerArgs(LifecycleHandlerArgs $) {
        this.exec = $.exec;
        this.httpGet = $.httpGet;
        this.tcpSocket = $.tcpSocket;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LifecycleHandlerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LifecycleHandlerArgs $;

        public Builder() {
            $ = new LifecycleHandlerArgs();
        }

        public Builder(LifecycleHandlerArgs defaults) {
            $ = new LifecycleHandlerArgs(Objects.requireNonNull(defaults));
        }

        public Builder exec(@Nullable Output<ExecActionArgs> exec) {
            $.exec = exec;
            return this;
        }

        public Builder exec(ExecActionArgs exec) {
            return exec(Output.of(exec));
        }

        public Builder httpGet(@Nullable Output<HTTPGetActionArgs> httpGet) {
            $.httpGet = httpGet;
            return this;
        }

        public Builder httpGet(HTTPGetActionArgs httpGet) {
            return httpGet(Output.of(httpGet));
        }

        public Builder tcpSocket(@Nullable Output<TCPSocketActionArgs> tcpSocket) {
            $.tcpSocket = tcpSocket;
            return this;
        }

        public Builder tcpSocket(TCPSocketActionArgs tcpSocket) {
            return tcpSocket(Output.of(tcpSocket));
        }

        public LifecycleHandlerArgs build() {
            return $;
        }
    }

}
