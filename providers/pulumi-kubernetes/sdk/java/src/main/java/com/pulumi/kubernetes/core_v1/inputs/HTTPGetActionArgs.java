// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.core_v1.inputs;

import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.kubernetes.core_v1.inputs.HTTPHeaderArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * HTTPGetAction describes an action based on HTTP Get requests.
 * 
 */
public final class HTTPGetActionArgs extends com.pulumi.resources.ResourceArgs {

    public static final HTTPGetActionArgs Empty = new HTTPGetActionArgs();

    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set &#34;Host&#34; in httpHeaders instead.
     * 
     */
    @Import(name="host")
      private final @Nullable Output<String> host;

    public Output<String> host() {
        return this.host == null ? Codegen.empty() : this.host;
    }

    /**
     * Custom headers to set in the request. HTTP allows repeated headers.
     * 
     */
    @Import(name="httpHeaders")
      private final @Nullable Output<List<HTTPHeaderArgs>> httpHeaders;

    public Output<List<HTTPHeaderArgs>> httpHeaders() {
        return this.httpHeaders == null ? Codegen.empty() : this.httpHeaders;
    }

    /**
     * Path to access on the HTTP server.
     * 
     */
    @Import(name="path")
      private final @Nullable Output<String> path;

    public Output<String> path() {
        return this.path == null ? Codegen.empty() : this.path;
    }

    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     * 
     */
    @Import(name="port", required=true)
      private final Output<Either<Integer,String>> port;

    public Output<Either<Integer,String>> port() {
        return this.port;
    }

    /**
     * Scheme to use for connecting to the host. Defaults to HTTP.
     * 
     * Possible enum values:
     *  - `&#34;HTTP&#34;` means that the scheme used will be http://
     *  - `&#34;HTTPS&#34;` means that the scheme used will be https://
     * 
     */
    @Import(name="scheme")
      private final @Nullable Output<String> scheme;

    public Output<String> scheme() {
        return this.scheme == null ? Codegen.empty() : this.scheme;
    }

    public HTTPGetActionArgs(
        @Nullable Output<String> host,
        @Nullable Output<List<HTTPHeaderArgs>> httpHeaders,
        @Nullable Output<String> path,
        Output<Either<Integer,String>> port,
        @Nullable Output<String> scheme) {
        this.host = host;
        this.httpHeaders = httpHeaders;
        this.path = path;
        this.port = Objects.requireNonNull(port, "expected parameter 'port' to be non-null");
        this.scheme = scheme;
    }

    private HTTPGetActionArgs() {
        this.host = Codegen.empty();
        this.httpHeaders = Codegen.empty();
        this.path = Codegen.empty();
        this.port = Codegen.empty();
        this.scheme = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(HTTPGetActionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> host;
        private @Nullable Output<List<HTTPHeaderArgs>> httpHeaders;
        private @Nullable Output<String> path;
        private Output<Either<Integer,String>> port;
        private @Nullable Output<String> scheme;

        public Builder() {
    	      // Empty
        }

        public Builder(HTTPGetActionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.host = defaults.host;
    	      this.httpHeaders = defaults.httpHeaders;
    	      this.path = defaults.path;
    	      this.port = defaults.port;
    	      this.scheme = defaults.scheme;
        }

        public Builder host(@Nullable Output<String> host) {
            this.host = host;
            return this;
        }
        public Builder host(@Nullable String host) {
            this.host = Codegen.ofNullable(host);
            return this;
        }
        public Builder httpHeaders(@Nullable Output<List<HTTPHeaderArgs>> httpHeaders) {
            this.httpHeaders = httpHeaders;
            return this;
        }
        public Builder httpHeaders(@Nullable List<HTTPHeaderArgs> httpHeaders) {
            this.httpHeaders = Codegen.ofNullable(httpHeaders);
            return this;
        }
        public Builder httpHeaders(HTTPHeaderArgs... httpHeaders) {
            return httpHeaders(List.of(httpHeaders));
        }
        public Builder path(@Nullable Output<String> path) {
            this.path = path;
            return this;
        }
        public Builder path(@Nullable String path) {
            this.path = Codegen.ofNullable(path);
            return this;
        }
        public Builder port(Output<Either<Integer,String>> port) {
            this.port = Objects.requireNonNull(port);
            return this;
        }
        public Builder port(Either<Integer,String> port) {
            this.port = Output.of(Objects.requireNonNull(port));
            return this;
        }
        public Builder scheme(@Nullable Output<String> scheme) {
            this.scheme = scheme;
            return this;
        }
        public Builder scheme(@Nullable String scheme) {
            this.scheme = Codegen.ofNullable(scheme);
            return this;
        }        public HTTPGetActionArgs build() {
            return new HTTPGetActionArgs(host, httpHeaders, path, port, scheme);
        }
    }
}
