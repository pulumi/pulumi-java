// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.core_v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.kubernetes.core_v1.inputs.ReplicationControllerConditionArgs;
import java.lang.Integer;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * ReplicationControllerStatus represents the current status of a replication controller.
 * 
 */
public final class ReplicationControllerStatusArgs extends com.pulumi.resources.ResourceArgs {

    public static final ReplicationControllerStatusArgs Empty = new ReplicationControllerStatusArgs();

    /**
     * The number of available replicas (ready for at least minReadySeconds) for this replication controller.
     * 
     */
    @Import(name="availableReplicas")
      private final @Nullable Output<Integer> availableReplicas;

    public Output<Integer> availableReplicas() {
        return this.availableReplicas == null ? Codegen.empty() : this.availableReplicas;
    }

    /**
     * Represents the latest available observations of a replication controller's current state.
     * 
     */
    @Import(name="conditions")
      private final @Nullable Output<List<ReplicationControllerConditionArgs>> conditions;

    public Output<List<ReplicationControllerConditionArgs>> conditions() {
        return this.conditions == null ? Codegen.empty() : this.conditions;
    }

    /**
     * The number of pods that have labels matching the labels of the pod template of the replication controller.
     * 
     */
    @Import(name="fullyLabeledReplicas")
      private final @Nullable Output<Integer> fullyLabeledReplicas;

    public Output<Integer> fullyLabeledReplicas() {
        return this.fullyLabeledReplicas == null ? Codegen.empty() : this.fullyLabeledReplicas;
    }

    /**
     * ObservedGeneration reflects the generation of the most recently observed replication controller.
     * 
     */
    @Import(name="observedGeneration")
      private final @Nullable Output<Integer> observedGeneration;

    public Output<Integer> observedGeneration() {
        return this.observedGeneration == null ? Codegen.empty() : this.observedGeneration;
    }

    /**
     * The number of ready replicas for this replication controller.
     * 
     */
    @Import(name="readyReplicas")
      private final @Nullable Output<Integer> readyReplicas;

    public Output<Integer> readyReplicas() {
        return this.readyReplicas == null ? Codegen.empty() : this.readyReplicas;
    }

    /**
     * Replicas is the most recently oberved number of replicas. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller
     * 
     */
    @Import(name="replicas", required=true)
      private final Output<Integer> replicas;

    public Output<Integer> replicas() {
        return this.replicas;
    }

    public ReplicationControllerStatusArgs(
        @Nullable Output<Integer> availableReplicas,
        @Nullable Output<List<ReplicationControllerConditionArgs>> conditions,
        @Nullable Output<Integer> fullyLabeledReplicas,
        @Nullable Output<Integer> observedGeneration,
        @Nullable Output<Integer> readyReplicas,
        Output<Integer> replicas) {
        this.availableReplicas = availableReplicas;
        this.conditions = conditions;
        this.fullyLabeledReplicas = fullyLabeledReplicas;
        this.observedGeneration = observedGeneration;
        this.readyReplicas = readyReplicas;
        this.replicas = Objects.requireNonNull(replicas, "expected parameter 'replicas' to be non-null");
    }

    private ReplicationControllerStatusArgs() {
        this.availableReplicas = Codegen.empty();
        this.conditions = Codegen.empty();
        this.fullyLabeledReplicas = Codegen.empty();
        this.observedGeneration = Codegen.empty();
        this.readyReplicas = Codegen.empty();
        this.replicas = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ReplicationControllerStatusArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Integer> availableReplicas;
        private @Nullable Output<List<ReplicationControllerConditionArgs>> conditions;
        private @Nullable Output<Integer> fullyLabeledReplicas;
        private @Nullable Output<Integer> observedGeneration;
        private @Nullable Output<Integer> readyReplicas;
        private Output<Integer> replicas;

        public Builder() {
    	      // Empty
        }

        public Builder(ReplicationControllerStatusArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availableReplicas = defaults.availableReplicas;
    	      this.conditions = defaults.conditions;
    	      this.fullyLabeledReplicas = defaults.fullyLabeledReplicas;
    	      this.observedGeneration = defaults.observedGeneration;
    	      this.readyReplicas = defaults.readyReplicas;
    	      this.replicas = defaults.replicas;
        }

        public Builder availableReplicas(@Nullable Output<Integer> availableReplicas) {
            this.availableReplicas = availableReplicas;
            return this;
        }
        public Builder availableReplicas(@Nullable Integer availableReplicas) {
            this.availableReplicas = Codegen.ofNullable(availableReplicas);
            return this;
        }
        public Builder conditions(@Nullable Output<List<ReplicationControllerConditionArgs>> conditions) {
            this.conditions = conditions;
            return this;
        }
        public Builder conditions(@Nullable List<ReplicationControllerConditionArgs> conditions) {
            this.conditions = Codegen.ofNullable(conditions);
            return this;
        }
        public Builder conditions(ReplicationControllerConditionArgs... conditions) {
            return conditions(List.of(conditions));
        }
        public Builder fullyLabeledReplicas(@Nullable Output<Integer> fullyLabeledReplicas) {
            this.fullyLabeledReplicas = fullyLabeledReplicas;
            return this;
        }
        public Builder fullyLabeledReplicas(@Nullable Integer fullyLabeledReplicas) {
            this.fullyLabeledReplicas = Codegen.ofNullable(fullyLabeledReplicas);
            return this;
        }
        public Builder observedGeneration(@Nullable Output<Integer> observedGeneration) {
            this.observedGeneration = observedGeneration;
            return this;
        }
        public Builder observedGeneration(@Nullable Integer observedGeneration) {
            this.observedGeneration = Codegen.ofNullable(observedGeneration);
            return this;
        }
        public Builder readyReplicas(@Nullable Output<Integer> readyReplicas) {
            this.readyReplicas = readyReplicas;
            return this;
        }
        public Builder readyReplicas(@Nullable Integer readyReplicas) {
            this.readyReplicas = Codegen.ofNullable(readyReplicas);
            return this;
        }
        public Builder replicas(Output<Integer> replicas) {
            this.replicas = Objects.requireNonNull(replicas);
            return this;
        }
        public Builder replicas(Integer replicas) {
            this.replicas = Output.of(Objects.requireNonNull(replicas));
            return this;
        }        public ReplicationControllerStatusArgs build() {
            return new ReplicationControllerStatusArgs(availableReplicas, conditions, fullyLabeledReplicas, observedGeneration, readyReplicas, replicas);
        }
    }
}
