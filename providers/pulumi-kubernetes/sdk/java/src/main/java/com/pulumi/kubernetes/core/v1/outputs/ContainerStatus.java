// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.core.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.kubernetes.core.v1.outputs.ContainerState;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ContainerStatus {
    /**
     * @return Container&#39;s ID in the format &#39;&lt;type&gt;://&lt;container_id&gt;&#39;.
     * 
     */
    private final @Nullable String containerID;
    /**
     * @return The image the container is running. More info: https://kubernetes.io/docs/concepts/containers/images.
     * 
     */
    private final String image;
    /**
     * @return ImageID of the container&#39;s image.
     * 
     */
    private final String imageID;
    /**
     * @return Details about the container&#39;s last termination condition.
     * 
     */
    private final @Nullable ContainerState lastState;
    /**
     * @return This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated.
     * 
     */
    private final String name;
    /**
     * @return Specifies whether the container has passed its readiness probe.
     * 
     */
    private final Boolean ready;
    /**
     * @return The number of times the container has been restarted.
     * 
     */
    private final Integer restartCount;
    /**
     * @return Specifies whether the container has passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. Is always true when no startupProbe is defined.
     * 
     */
    private final @Nullable Boolean started;
    /**
     * @return Details about the container&#39;s current condition.
     * 
     */
    private final @Nullable ContainerState state;

    @CustomType.Constructor
    private ContainerStatus(
        @CustomType.Parameter("containerID") @Nullable String containerID,
        @CustomType.Parameter("image") String image,
        @CustomType.Parameter("imageID") String imageID,
        @CustomType.Parameter("lastState") @Nullable ContainerState lastState,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("ready") Boolean ready,
        @CustomType.Parameter("restartCount") Integer restartCount,
        @CustomType.Parameter("started") @Nullable Boolean started,
        @CustomType.Parameter("state") @Nullable ContainerState state) {
        this.containerID = containerID;
        this.image = image;
        this.imageID = imageID;
        this.lastState = lastState;
        this.name = name;
        this.ready = ready;
        this.restartCount = restartCount;
        this.started = started;
        this.state = state;
    }

    /**
     * @return Container&#39;s ID in the format &#39;&lt;type&gt;://&lt;container_id&gt;&#39;.
     * 
     */
    public Optional<String> containerID() {
        return Optional.ofNullable(this.containerID);
    }
    /**
     * @return The image the container is running. More info: https://kubernetes.io/docs/concepts/containers/images.
     * 
     */
    public String image() {
        return this.image;
    }
    /**
     * @return ImageID of the container&#39;s image.
     * 
     */
    public String imageID() {
        return this.imageID;
    }
    /**
     * @return Details about the container&#39;s last termination condition.
     * 
     */
    public Optional<ContainerState> lastState() {
        return Optional.ofNullable(this.lastState);
    }
    /**
     * @return This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Specifies whether the container has passed its readiness probe.
     * 
     */
    public Boolean ready() {
        return this.ready;
    }
    /**
     * @return The number of times the container has been restarted.
     * 
     */
    public Integer restartCount() {
        return this.restartCount;
    }
    /**
     * @return Specifies whether the container has passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. Is always true when no startupProbe is defined.
     * 
     */
    public Optional<Boolean> started() {
        return Optional.ofNullable(this.started);
    }
    /**
     * @return Details about the container&#39;s current condition.
     * 
     */
    public Optional<ContainerState> state() {
        return Optional.ofNullable(this.state);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ContainerStatus defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String containerID;
        private String image;
        private String imageID;
        private @Nullable ContainerState lastState;
        private String name;
        private Boolean ready;
        private Integer restartCount;
        private @Nullable Boolean started;
        private @Nullable ContainerState state;

        public Builder() {
    	      // Empty
        }

        public Builder(ContainerStatus defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.containerID = defaults.containerID;
    	      this.image = defaults.image;
    	      this.imageID = defaults.imageID;
    	      this.lastState = defaults.lastState;
    	      this.name = defaults.name;
    	      this.ready = defaults.ready;
    	      this.restartCount = defaults.restartCount;
    	      this.started = defaults.started;
    	      this.state = defaults.state;
        }

        public Builder containerID(@Nullable String containerID) {
            this.containerID = containerID;
            return this;
        }
        public Builder image(String image) {
            this.image = Objects.requireNonNull(image);
            return this;
        }
        public Builder imageID(String imageID) {
            this.imageID = Objects.requireNonNull(imageID);
            return this;
        }
        public Builder lastState(@Nullable ContainerState lastState) {
            this.lastState = lastState;
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder ready(Boolean ready) {
            this.ready = Objects.requireNonNull(ready);
            return this;
        }
        public Builder restartCount(Integer restartCount) {
            this.restartCount = Objects.requireNonNull(restartCount);
            return this;
        }
        public Builder started(@Nullable Boolean started) {
            this.started = started;
            return this;
        }
        public Builder state(@Nullable ContainerState state) {
            this.state = state;
            return this;
        }        public ContainerStatus build() {
            return new ContainerStatus(containerID, image, imageID, lastState, name, ready, restartCount, started, state);
        }
    }
}
