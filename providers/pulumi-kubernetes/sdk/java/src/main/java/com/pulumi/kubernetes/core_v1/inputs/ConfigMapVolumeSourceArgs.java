// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.core_v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.kubernetes.core_v1.inputs.KeyToPathArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Adapts a ConfigMap into a volume.
 * 
 * The contents of the target ConfigMap&#39;s Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.
 * 
 */
public final class ConfigMapVolumeSourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConfigMapVolumeSourceArgs Empty = new ConfigMapVolumeSourceArgs();

    /**
     * Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
     * 
     */
    @Import(name="defaultMode")
    private @Nullable Output<Integer> defaultMode;

    public Optional<Output<Integer>> defaultMode() {
        return Optional.ofNullable(this.defaultMode);
    }

    /**
     * If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the &#39;..&#39; path or start with &#39;..&#39;.
     * 
     */
    @Import(name="items")
    private @Nullable Output<List<KeyToPathArgs>> items;

    public Optional<Output<List<KeyToPathArgs>>> items() {
        return Optional.ofNullable(this.items);
    }

    /**
     * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Specify whether the ConfigMap or its keys must be defined
     * 
     */
    @Import(name="optional")
    private @Nullable Output<Boolean> optional;

    public Optional<Output<Boolean>> optional() {
        return Optional.ofNullable(this.optional);
    }

    private ConfigMapVolumeSourceArgs() {}

    private ConfigMapVolumeSourceArgs(ConfigMapVolumeSourceArgs $) {
        this.defaultMode = $.defaultMode;
        this.items = $.items;
        this.name = $.name;
        this.optional = $.optional;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConfigMapVolumeSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConfigMapVolumeSourceArgs $;

        public Builder() {
            $ = new ConfigMapVolumeSourceArgs();
        }

        public Builder(ConfigMapVolumeSourceArgs defaults) {
            $ = new ConfigMapVolumeSourceArgs(Objects.requireNonNull(defaults));
        }

        public Builder defaultMode(@Nullable Output<Integer> defaultMode) {
            $.defaultMode = defaultMode;
            return this;
        }

        public Builder defaultMode(Integer defaultMode) {
            return defaultMode(Output.of(defaultMode));
        }

        public Builder items(@Nullable Output<List<KeyToPathArgs>> items) {
            $.items = items;
            return this;
        }

        public Builder items(List<KeyToPathArgs> items) {
            return items(Output.of(items));
        }

        public Builder items(KeyToPathArgs... items) {
            return items(List.of(items));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder optional(@Nullable Output<Boolean> optional) {
            $.optional = optional;
            return this;
        }

        public Builder optional(Boolean optional) {
            return optional(Output.of(optional));
        }

        public ConfigMapVolumeSourceArgs build() {
            return $;
        }
    }

}
