// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.extensions_v1beta1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * RuntimeClassStrategyOptions define the strategy that will dictate the allowable RuntimeClasses for a pod.
 * 
 */
public final class RuntimeClassStrategyOptionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final RuntimeClassStrategyOptionsArgs Empty = new RuntimeClassStrategyOptionsArgs();

    /**
     * allowedRuntimeClassNames is a whitelist of RuntimeClass names that may be specified on a pod. A value of "*" means that any RuntimeClass name is allowed, and must be the only item in the list. An empty list requires the RuntimeClassName field to be unset.
     * 
     */
    @Import(name="allowedRuntimeClassNames", required=true)
      private final Output<List<String>> allowedRuntimeClassNames;

    public Output<List<String>> allowedRuntimeClassNames() {
        return this.allowedRuntimeClassNames;
    }

    /**
     * defaultRuntimeClassName is the default RuntimeClassName to set on the pod. The default MUST be allowed by the allowedRuntimeClassNames list. A value of nil does not mutate the Pod.
     * 
     */
    @Import(name="defaultRuntimeClassName")
      private final @Nullable Output<String> defaultRuntimeClassName;

    public Output<String> defaultRuntimeClassName() {
        return this.defaultRuntimeClassName == null ? Codegen.empty() : this.defaultRuntimeClassName;
    }

    public RuntimeClassStrategyOptionsArgs(
        Output<List<String>> allowedRuntimeClassNames,
        @Nullable Output<String> defaultRuntimeClassName) {
        this.allowedRuntimeClassNames = Objects.requireNonNull(allowedRuntimeClassNames, "expected parameter 'allowedRuntimeClassNames' to be non-null");
        this.defaultRuntimeClassName = defaultRuntimeClassName;
    }

    private RuntimeClassStrategyOptionsArgs() {
        this.allowedRuntimeClassNames = Codegen.empty();
        this.defaultRuntimeClassName = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RuntimeClassStrategyOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<List<String>> allowedRuntimeClassNames;
        private @Nullable Output<String> defaultRuntimeClassName;

        public Builder() {
    	      // Empty
        }

        public Builder(RuntimeClassStrategyOptionsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowedRuntimeClassNames = defaults.allowedRuntimeClassNames;
    	      this.defaultRuntimeClassName = defaults.defaultRuntimeClassName;
        }

        public Builder allowedRuntimeClassNames(Output<List<String>> allowedRuntimeClassNames) {
            this.allowedRuntimeClassNames = Objects.requireNonNull(allowedRuntimeClassNames);
            return this;
        }
        public Builder allowedRuntimeClassNames(List<String> allowedRuntimeClassNames) {
            this.allowedRuntimeClassNames = Output.of(Objects.requireNonNull(allowedRuntimeClassNames));
            return this;
        }
        public Builder allowedRuntimeClassNames(String... allowedRuntimeClassNames) {
            return allowedRuntimeClassNames(List.of(allowedRuntimeClassNames));
        }
        public Builder defaultRuntimeClassName(@Nullable Output<String> defaultRuntimeClassName) {
            this.defaultRuntimeClassName = defaultRuntimeClassName;
            return this;
        }
        public Builder defaultRuntimeClassName(@Nullable String defaultRuntimeClassName) {
            this.defaultRuntimeClassName = Codegen.ofNullable(defaultRuntimeClassName);
            return this;
        }        public RuntimeClassStrategyOptionsArgs build() {
            return new RuntimeClassStrategyOptionsArgs(allowedRuntimeClassNames, defaultRuntimeClassName);
        }
    }
}
