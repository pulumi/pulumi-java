// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.autoscaling.v2beta1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.kubernetes.meta.v1.outputs.LabelSelector;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ExternalMetricSource {
    /**
     * @return metricName is the name of the metric in question.
     * 
     */
    private final String metricName;
    /**
     * @return metricSelector is used to identify a specific time series within a given metric.
     * 
     */
    private final @Nullable LabelSelector metricSelector;
    /**
     * @return targetAverageValue is the target per-pod value of global metric (as a quantity). Mutually exclusive with TargetValue.
     * 
     */
    private final @Nullable String targetAverageValue;
    /**
     * @return targetValue is the target value of the metric (as a quantity). Mutually exclusive with TargetAverageValue.
     * 
     */
    private final @Nullable String targetValue;

    @CustomType.Constructor
    private ExternalMetricSource(
        @CustomType.Parameter("metricName") String metricName,
        @CustomType.Parameter("metricSelector") @Nullable LabelSelector metricSelector,
        @CustomType.Parameter("targetAverageValue") @Nullable String targetAverageValue,
        @CustomType.Parameter("targetValue") @Nullable String targetValue) {
        this.metricName = metricName;
        this.metricSelector = metricSelector;
        this.targetAverageValue = targetAverageValue;
        this.targetValue = targetValue;
    }

    /**
     * @return metricName is the name of the metric in question.
     * 
     */
    public String metricName() {
        return this.metricName;
    }
    /**
     * @return metricSelector is used to identify a specific time series within a given metric.
     * 
     */
    public Optional<LabelSelector> metricSelector() {
        return Optional.ofNullable(this.metricSelector);
    }
    /**
     * @return targetAverageValue is the target per-pod value of global metric (as a quantity). Mutually exclusive with TargetValue.
     * 
     */
    public Optional<String> targetAverageValue() {
        return Optional.ofNullable(this.targetAverageValue);
    }
    /**
     * @return targetValue is the target value of the metric (as a quantity). Mutually exclusive with TargetAverageValue.
     * 
     */
    public Optional<String> targetValue() {
        return Optional.ofNullable(this.targetValue);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ExternalMetricSource defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String metricName;
        private @Nullable LabelSelector metricSelector;
        private @Nullable String targetAverageValue;
        private @Nullable String targetValue;

        public Builder() {
    	      // Empty
        }

        public Builder(ExternalMetricSource defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.metricName = defaults.metricName;
    	      this.metricSelector = defaults.metricSelector;
    	      this.targetAverageValue = defaults.targetAverageValue;
    	      this.targetValue = defaults.targetValue;
        }

        public Builder metricName(String metricName) {
            this.metricName = Objects.requireNonNull(metricName);
            return this;
        }
        public Builder metricSelector(@Nullable LabelSelector metricSelector) {
            this.metricSelector = metricSelector;
            return this;
        }
        public Builder targetAverageValue(@Nullable String targetAverageValue) {
            this.targetAverageValue = targetAverageValue;
            return this;
        }
        public Builder targetValue(@Nullable String targetValue) {
            this.targetValue = targetValue;
            return this;
        }        public ExternalMetricSource build() {
            return new ExternalMetricSource(metricName, metricSelector, targetAverageValue, targetValue);
        }
    }
}
