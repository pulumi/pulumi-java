// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.core.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AzureDiskVolumeSource {
    /**
     * @return cachingMode is the Host Caching mode: None, Read Only, Read Write.
     * 
     */
    private final @Nullable String cachingMode;
    /**
     * @return diskName is the Name of the data disk in the blob storage
     * 
     */
    private final String diskName;
    /**
     * @return diskURI is the URI of data disk in the blob storage
     * 
     */
    private final String diskURI;
    /**
     * @return fsType is Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. &#34;ext4&#34;, &#34;xfs&#34;, &#34;ntfs&#34;. Implicitly inferred to be &#34;ext4&#34; if unspecified.
     * 
     */
    private final @Nullable String fsType;
    /**
     * @return kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
     * 
     */
    private final @Nullable String kind;
    /**
     * @return readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
     * 
     */
    private final @Nullable Boolean readOnly;

    @CustomType.Constructor
    private AzureDiskVolumeSource(
        @CustomType.Parameter("cachingMode") @Nullable String cachingMode,
        @CustomType.Parameter("diskName") String diskName,
        @CustomType.Parameter("diskURI") String diskURI,
        @CustomType.Parameter("fsType") @Nullable String fsType,
        @CustomType.Parameter("kind") @Nullable String kind,
        @CustomType.Parameter("readOnly") @Nullable Boolean readOnly) {
        this.cachingMode = cachingMode;
        this.diskName = diskName;
        this.diskURI = diskURI;
        this.fsType = fsType;
        this.kind = kind;
        this.readOnly = readOnly;
    }

    /**
     * @return cachingMode is the Host Caching mode: None, Read Only, Read Write.
     * 
     */
    public Optional<String> cachingMode() {
        return Optional.ofNullable(this.cachingMode);
    }
    /**
     * @return diskName is the Name of the data disk in the blob storage
     * 
     */
    public String diskName() {
        return this.diskName;
    }
    /**
     * @return diskURI is the URI of data disk in the blob storage
     * 
     */
    public String diskURI() {
        return this.diskURI;
    }
    /**
     * @return fsType is Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. &#34;ext4&#34;, &#34;xfs&#34;, &#34;ntfs&#34;. Implicitly inferred to be &#34;ext4&#34; if unspecified.
     * 
     */
    public Optional<String> fsType() {
        return Optional.ofNullable(this.fsType);
    }
    /**
     * @return kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
     * 
     */
    public Optional<String> kind() {
        return Optional.ofNullable(this.kind);
    }
    /**
     * @return readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
     * 
     */
    public Optional<Boolean> readOnly() {
        return Optional.ofNullable(this.readOnly);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AzureDiskVolumeSource defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String cachingMode;
        private String diskName;
        private String diskURI;
        private @Nullable String fsType;
        private @Nullable String kind;
        private @Nullable Boolean readOnly;

        public Builder() {
    	      // Empty
        }

        public Builder(AzureDiskVolumeSource defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cachingMode = defaults.cachingMode;
    	      this.diskName = defaults.diskName;
    	      this.diskURI = defaults.diskURI;
    	      this.fsType = defaults.fsType;
    	      this.kind = defaults.kind;
    	      this.readOnly = defaults.readOnly;
        }

        public Builder cachingMode(@Nullable String cachingMode) {
            this.cachingMode = cachingMode;
            return this;
        }
        public Builder diskName(String diskName) {
            this.diskName = Objects.requireNonNull(diskName);
            return this;
        }
        public Builder diskURI(String diskURI) {
            this.diskURI = Objects.requireNonNull(diskURI);
            return this;
        }
        public Builder fsType(@Nullable String fsType) {
            this.fsType = fsType;
            return this;
        }
        public Builder kind(@Nullable String kind) {
            this.kind = kind;
            return this;
        }
        public Builder readOnly(@Nullable Boolean readOnly) {
            this.readOnly = readOnly;
            return this;
        }        public AzureDiskVolumeSource build() {
            return new AzureDiskVolumeSource(cachingMode, diskName, diskURI, fsType, kind, readOnly);
        }
    }
}
