// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.core_v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.kubernetes.core_v1.inputs.SELinuxOptionsArgs;
import com.pulumi.kubernetes.core_v1.inputs.SeccompProfileArgs;
import com.pulumi.kubernetes.core_v1.inputs.SysctlArgs;
import com.pulumi.kubernetes.core_v1.inputs.WindowsSecurityContextOptionsArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.
 * 
 */
public final class PodSecurityContextArgs extends com.pulumi.resources.ResourceArgs {

    public static final PodSecurityContextArgs Empty = new PodSecurityContextArgs();

    /**
     * A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:
     * 
     * 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----
     * 
     * If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
     * 
     */
    @Import(name="fsGroup")
      private final @Nullable Output<Integer> fsGroup;

    public Output<Integer> fsGroup() {
        return this.fsGroup == null ? Codegen.empty() : this.fsGroup;
    }

    /**
     * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.
     * 
     */
    @Import(name="fsGroupChangePolicy")
      private final @Nullable Output<String> fsGroupChangePolicy;

    public Output<String> fsGroupChangePolicy() {
        return this.fsGroupChangePolicy == null ? Codegen.empty() : this.fsGroupChangePolicy;
    }

    /**
     * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
     * 
     */
    @Import(name="runAsGroup")
      private final @Nullable Output<Integer> runAsGroup;

    public Output<Integer> runAsGroup() {
        return this.runAsGroup == null ? Codegen.empty() : this.runAsGroup;
    }

    /**
     * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     * 
     */
    @Import(name="runAsNonRoot")
      private final @Nullable Output<Boolean> runAsNonRoot;

    public Output<Boolean> runAsNonRoot() {
        return this.runAsNonRoot == null ? Codegen.empty() : this.runAsNonRoot;
    }

    /**
     * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
     * 
     */
    @Import(name="runAsUser")
      private final @Nullable Output<Integer> runAsUser;

    public Output<Integer> runAsUser() {
        return this.runAsUser == null ? Codegen.empty() : this.runAsUser;
    }

    /**
     * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
     * 
     */
    @Import(name="seLinuxOptions")
      private final @Nullable Output<SELinuxOptionsArgs> seLinuxOptions;

    public Output<SELinuxOptionsArgs> seLinuxOptions() {
        return this.seLinuxOptions == null ? Codegen.empty() : this.seLinuxOptions;
    }

    /**
     * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
     * 
     */
    @Import(name="seccompProfile")
      private final @Nullable Output<SeccompProfileArgs> seccompProfile;

    public Output<SeccompProfileArgs> seccompProfile() {
        return this.seccompProfile == null ? Codegen.empty() : this.seccompProfile;
    }

    /**
     * A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container. Note that this field cannot be set when spec.os.name is windows.
     * 
     */
    @Import(name="supplementalGroups")
      private final @Nullable Output<List<Integer>> supplementalGroups;

    public Output<List<Integer>> supplementalGroups() {
        return this.supplementalGroups == null ? Codegen.empty() : this.supplementalGroups;
    }

    /**
     * Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
     * 
     */
    @Import(name="sysctls")
      private final @Nullable Output<List<SysctlArgs>> sysctls;

    public Output<List<SysctlArgs>> sysctls() {
        return this.sysctls == null ? Codegen.empty() : this.sysctls;
    }

    /**
     * The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
     * 
     */
    @Import(name="windowsOptions")
      private final @Nullable Output<WindowsSecurityContextOptionsArgs> windowsOptions;

    public Output<WindowsSecurityContextOptionsArgs> windowsOptions() {
        return this.windowsOptions == null ? Codegen.empty() : this.windowsOptions;
    }

    public PodSecurityContextArgs(
        @Nullable Output<Integer> fsGroup,
        @Nullable Output<String> fsGroupChangePolicy,
        @Nullable Output<Integer> runAsGroup,
        @Nullable Output<Boolean> runAsNonRoot,
        @Nullable Output<Integer> runAsUser,
        @Nullable Output<SELinuxOptionsArgs> seLinuxOptions,
        @Nullable Output<SeccompProfileArgs> seccompProfile,
        @Nullable Output<List<Integer>> supplementalGroups,
        @Nullable Output<List<SysctlArgs>> sysctls,
        @Nullable Output<WindowsSecurityContextOptionsArgs> windowsOptions) {
        this.fsGroup = fsGroup;
        this.fsGroupChangePolicy = fsGroupChangePolicy;
        this.runAsGroup = runAsGroup;
        this.runAsNonRoot = runAsNonRoot;
        this.runAsUser = runAsUser;
        this.seLinuxOptions = seLinuxOptions;
        this.seccompProfile = seccompProfile;
        this.supplementalGroups = supplementalGroups;
        this.sysctls = sysctls;
        this.windowsOptions = windowsOptions;
    }

    private PodSecurityContextArgs() {
        this.fsGroup = Codegen.empty();
        this.fsGroupChangePolicy = Codegen.empty();
        this.runAsGroup = Codegen.empty();
        this.runAsNonRoot = Codegen.empty();
        this.runAsUser = Codegen.empty();
        this.seLinuxOptions = Codegen.empty();
        this.seccompProfile = Codegen.empty();
        this.supplementalGroups = Codegen.empty();
        this.sysctls = Codegen.empty();
        this.windowsOptions = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PodSecurityContextArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Integer> fsGroup;
        private @Nullable Output<String> fsGroupChangePolicy;
        private @Nullable Output<Integer> runAsGroup;
        private @Nullable Output<Boolean> runAsNonRoot;
        private @Nullable Output<Integer> runAsUser;
        private @Nullable Output<SELinuxOptionsArgs> seLinuxOptions;
        private @Nullable Output<SeccompProfileArgs> seccompProfile;
        private @Nullable Output<List<Integer>> supplementalGroups;
        private @Nullable Output<List<SysctlArgs>> sysctls;
        private @Nullable Output<WindowsSecurityContextOptionsArgs> windowsOptions;

        public Builder() {
    	      // Empty
        }

        public Builder(PodSecurityContextArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.fsGroup = defaults.fsGroup;
    	      this.fsGroupChangePolicy = defaults.fsGroupChangePolicy;
    	      this.runAsGroup = defaults.runAsGroup;
    	      this.runAsNonRoot = defaults.runAsNonRoot;
    	      this.runAsUser = defaults.runAsUser;
    	      this.seLinuxOptions = defaults.seLinuxOptions;
    	      this.seccompProfile = defaults.seccompProfile;
    	      this.supplementalGroups = defaults.supplementalGroups;
    	      this.sysctls = defaults.sysctls;
    	      this.windowsOptions = defaults.windowsOptions;
        }

        public Builder fsGroup(@Nullable Output<Integer> fsGroup) {
            this.fsGroup = fsGroup;
            return this;
        }
        public Builder fsGroup(@Nullable Integer fsGroup) {
            this.fsGroup = Codegen.ofNullable(fsGroup);
            return this;
        }
        public Builder fsGroupChangePolicy(@Nullable Output<String> fsGroupChangePolicy) {
            this.fsGroupChangePolicy = fsGroupChangePolicy;
            return this;
        }
        public Builder fsGroupChangePolicy(@Nullable String fsGroupChangePolicy) {
            this.fsGroupChangePolicy = Codegen.ofNullable(fsGroupChangePolicy);
            return this;
        }
        public Builder runAsGroup(@Nullable Output<Integer> runAsGroup) {
            this.runAsGroup = runAsGroup;
            return this;
        }
        public Builder runAsGroup(@Nullable Integer runAsGroup) {
            this.runAsGroup = Codegen.ofNullable(runAsGroup);
            return this;
        }
        public Builder runAsNonRoot(@Nullable Output<Boolean> runAsNonRoot) {
            this.runAsNonRoot = runAsNonRoot;
            return this;
        }
        public Builder runAsNonRoot(@Nullable Boolean runAsNonRoot) {
            this.runAsNonRoot = Codegen.ofNullable(runAsNonRoot);
            return this;
        }
        public Builder runAsUser(@Nullable Output<Integer> runAsUser) {
            this.runAsUser = runAsUser;
            return this;
        }
        public Builder runAsUser(@Nullable Integer runAsUser) {
            this.runAsUser = Codegen.ofNullable(runAsUser);
            return this;
        }
        public Builder seLinuxOptions(@Nullable Output<SELinuxOptionsArgs> seLinuxOptions) {
            this.seLinuxOptions = seLinuxOptions;
            return this;
        }
        public Builder seLinuxOptions(@Nullable SELinuxOptionsArgs seLinuxOptions) {
            this.seLinuxOptions = Codegen.ofNullable(seLinuxOptions);
            return this;
        }
        public Builder seccompProfile(@Nullable Output<SeccompProfileArgs> seccompProfile) {
            this.seccompProfile = seccompProfile;
            return this;
        }
        public Builder seccompProfile(@Nullable SeccompProfileArgs seccompProfile) {
            this.seccompProfile = Codegen.ofNullable(seccompProfile);
            return this;
        }
        public Builder supplementalGroups(@Nullable Output<List<Integer>> supplementalGroups) {
            this.supplementalGroups = supplementalGroups;
            return this;
        }
        public Builder supplementalGroups(@Nullable List<Integer> supplementalGroups) {
            this.supplementalGroups = Codegen.ofNullable(supplementalGroups);
            return this;
        }
        public Builder supplementalGroups(Integer... supplementalGroups) {
            return supplementalGroups(List.of(supplementalGroups));
        }
        public Builder sysctls(@Nullable Output<List<SysctlArgs>> sysctls) {
            this.sysctls = sysctls;
            return this;
        }
        public Builder sysctls(@Nullable List<SysctlArgs> sysctls) {
            this.sysctls = Codegen.ofNullable(sysctls);
            return this;
        }
        public Builder sysctls(SysctlArgs... sysctls) {
            return sysctls(List.of(sysctls));
        }
        public Builder windowsOptions(@Nullable Output<WindowsSecurityContextOptionsArgs> windowsOptions) {
            this.windowsOptions = windowsOptions;
            return this;
        }
        public Builder windowsOptions(@Nullable WindowsSecurityContextOptionsArgs windowsOptions) {
            this.windowsOptions = Codegen.ofNullable(windowsOptions);
            return this;
        }        public PodSecurityContextArgs build() {
            return new PodSecurityContextArgs(fsGroup, fsGroupChangePolicy, runAsGroup, runAsNonRoot, runAsUser, seLinuxOptions, seccompProfile, supplementalGroups, sysctls, windowsOptions);
        }
    }
}
