// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.core_v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.
 * 
 */
public final class SeccompProfileArgs extends com.pulumi.resources.ResourceArgs {

    public static final SeccompProfileArgs Empty = new SeccompProfileArgs();

    /**
     * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
     * 
     */
    @Import(name="localhostProfile")
      private final @Nullable Output<String> localhostProfile;

    public Output<String> localhostProfile() {
        return this.localhostProfile == null ? Codegen.empty() : this.localhostProfile;
    }

    /**
     * type indicates which kind of seccomp profile will be applied. Valid options are:
     * 
     * Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
     * 
     * Possible enum values:
     *  - `"Localhost"` indicates a profile defined in a file on the node should be used. The file's location relative to <kubelet-root-dir>/seccomp.
     *  - `"RuntimeDefault"` represents the default container runtime seccomp profile.
     *  - `"Unconfined"` indicates no seccomp profile is applied (A.K.A. unconfined).
     * 
     */
    @Import(name="type", required=true)
      private final Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    public SeccompProfileArgs(
        @Nullable Output<String> localhostProfile,
        Output<String> type) {
        this.localhostProfile = localhostProfile;
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
    }

    private SeccompProfileArgs() {
        this.localhostProfile = Codegen.empty();
        this.type = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SeccompProfileArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> localhostProfile;
        private Output<String> type;

        public Builder() {
    	      // Empty
        }

        public Builder(SeccompProfileArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.localhostProfile = defaults.localhostProfile;
    	      this.type = defaults.type;
        }

        public Builder localhostProfile(@Nullable Output<String> localhostProfile) {
            this.localhostProfile = localhostProfile;
            return this;
        }
        public Builder localhostProfile(@Nullable String localhostProfile) {
            this.localhostProfile = Codegen.ofNullable(localhostProfile);
            return this;
        }
        public Builder type(Output<String> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder type(String type) {
            this.type = Output.of(Objects.requireNonNull(type));
            return this;
        }        public SeccompProfileArgs build() {
            return new SeccompProfileArgs(localhostProfile, type);
        }
    }
}
