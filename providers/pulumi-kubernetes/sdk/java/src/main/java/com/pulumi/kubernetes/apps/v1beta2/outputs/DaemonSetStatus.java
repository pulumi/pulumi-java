// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.apps.v1beta2.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.kubernetes.apps.v1beta2.outputs.DaemonSetCondition;
import java.lang.Integer;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DaemonSetStatus {
    /**
     * @return Count of hash collisions for the DaemonSet. The DaemonSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
     * 
     */
    private final @Nullable Integer collisionCount;
    /**
     * @return Represents the latest available observations of a DaemonSet&#39;s current state.
     * 
     */
    private final @Nullable List<DaemonSetCondition> conditions;
    /**
     * @return The number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
     * 
     */
    private final Integer currentNumberScheduled;
    /**
     * @return The total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod). More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
     * 
     */
    private final Integer desiredNumberScheduled;
    /**
     * @return The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and available (ready for at least spec.minReadySeconds)
     * 
     */
    private final @Nullable Integer numberAvailable;
    /**
     * @return The number of nodes that are running the daemon pod, but are not supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
     * 
     */
    private final Integer numberMisscheduled;
    /**
     * @return The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready.
     * 
     */
    private final Integer numberReady;
    /**
     * @return The number of nodes that should be running the daemon pod and have none of the daemon pod running and available (ready for at least spec.minReadySeconds)
     * 
     */
    private final @Nullable Integer numberUnavailable;
    /**
     * @return The most recent generation observed by the daemon set controller.
     * 
     */
    private final @Nullable Integer observedGeneration;
    /**
     * @return The total number of nodes that are running updated daemon pod
     * 
     */
    private final @Nullable Integer updatedNumberScheduled;

    @CustomType.Constructor
    private DaemonSetStatus(
        @CustomType.Parameter("collisionCount") @Nullable Integer collisionCount,
        @CustomType.Parameter("conditions") @Nullable List<DaemonSetCondition> conditions,
        @CustomType.Parameter("currentNumberScheduled") Integer currentNumberScheduled,
        @CustomType.Parameter("desiredNumberScheduled") Integer desiredNumberScheduled,
        @CustomType.Parameter("numberAvailable") @Nullable Integer numberAvailable,
        @CustomType.Parameter("numberMisscheduled") Integer numberMisscheduled,
        @CustomType.Parameter("numberReady") Integer numberReady,
        @CustomType.Parameter("numberUnavailable") @Nullable Integer numberUnavailable,
        @CustomType.Parameter("observedGeneration") @Nullable Integer observedGeneration,
        @CustomType.Parameter("updatedNumberScheduled") @Nullable Integer updatedNumberScheduled) {
        this.collisionCount = collisionCount;
        this.conditions = conditions;
        this.currentNumberScheduled = currentNumberScheduled;
        this.desiredNumberScheduled = desiredNumberScheduled;
        this.numberAvailable = numberAvailable;
        this.numberMisscheduled = numberMisscheduled;
        this.numberReady = numberReady;
        this.numberUnavailable = numberUnavailable;
        this.observedGeneration = observedGeneration;
        this.updatedNumberScheduled = updatedNumberScheduled;
    }

    /**
     * @return Count of hash collisions for the DaemonSet. The DaemonSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
     * 
     */
    public Optional<Integer> collisionCount() {
        return Optional.ofNullable(this.collisionCount);
    }
    /**
     * @return Represents the latest available observations of a DaemonSet&#39;s current state.
     * 
     */
    public List<DaemonSetCondition> conditions() {
        return this.conditions == null ? List.of() : this.conditions;
    }
    /**
     * @return The number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
     * 
     */
    public Integer currentNumberScheduled() {
        return this.currentNumberScheduled;
    }
    /**
     * @return The total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod). More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
     * 
     */
    public Integer desiredNumberScheduled() {
        return this.desiredNumberScheduled;
    }
    /**
     * @return The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and available (ready for at least spec.minReadySeconds)
     * 
     */
    public Optional<Integer> numberAvailable() {
        return Optional.ofNullable(this.numberAvailable);
    }
    /**
     * @return The number of nodes that are running the daemon pod, but are not supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
     * 
     */
    public Integer numberMisscheduled() {
        return this.numberMisscheduled;
    }
    /**
     * @return The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready.
     * 
     */
    public Integer numberReady() {
        return this.numberReady;
    }
    /**
     * @return The number of nodes that should be running the daemon pod and have none of the daemon pod running and available (ready for at least spec.minReadySeconds)
     * 
     */
    public Optional<Integer> numberUnavailable() {
        return Optional.ofNullable(this.numberUnavailable);
    }
    /**
     * @return The most recent generation observed by the daemon set controller.
     * 
     */
    public Optional<Integer> observedGeneration() {
        return Optional.ofNullable(this.observedGeneration);
    }
    /**
     * @return The total number of nodes that are running updated daemon pod
     * 
     */
    public Optional<Integer> updatedNumberScheduled() {
        return Optional.ofNullable(this.updatedNumberScheduled);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DaemonSetStatus defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Integer collisionCount;
        private @Nullable List<DaemonSetCondition> conditions;
        private Integer currentNumberScheduled;
        private Integer desiredNumberScheduled;
        private @Nullable Integer numberAvailable;
        private Integer numberMisscheduled;
        private Integer numberReady;
        private @Nullable Integer numberUnavailable;
        private @Nullable Integer observedGeneration;
        private @Nullable Integer updatedNumberScheduled;

        public Builder() {
    	      // Empty
        }

        public Builder(DaemonSetStatus defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.collisionCount = defaults.collisionCount;
    	      this.conditions = defaults.conditions;
    	      this.currentNumberScheduled = defaults.currentNumberScheduled;
    	      this.desiredNumberScheduled = defaults.desiredNumberScheduled;
    	      this.numberAvailable = defaults.numberAvailable;
    	      this.numberMisscheduled = defaults.numberMisscheduled;
    	      this.numberReady = defaults.numberReady;
    	      this.numberUnavailable = defaults.numberUnavailable;
    	      this.observedGeneration = defaults.observedGeneration;
    	      this.updatedNumberScheduled = defaults.updatedNumberScheduled;
        }

        public Builder collisionCount(@Nullable Integer collisionCount) {
            this.collisionCount = collisionCount;
            return this;
        }
        public Builder conditions(@Nullable List<DaemonSetCondition> conditions) {
            this.conditions = conditions;
            return this;
        }
        public Builder conditions(DaemonSetCondition... conditions) {
            return conditions(List.of(conditions));
        }
        public Builder currentNumberScheduled(Integer currentNumberScheduled) {
            this.currentNumberScheduled = Objects.requireNonNull(currentNumberScheduled);
            return this;
        }
        public Builder desiredNumberScheduled(Integer desiredNumberScheduled) {
            this.desiredNumberScheduled = Objects.requireNonNull(desiredNumberScheduled);
            return this;
        }
        public Builder numberAvailable(@Nullable Integer numberAvailable) {
            this.numberAvailable = numberAvailable;
            return this;
        }
        public Builder numberMisscheduled(Integer numberMisscheduled) {
            this.numberMisscheduled = Objects.requireNonNull(numberMisscheduled);
            return this;
        }
        public Builder numberReady(Integer numberReady) {
            this.numberReady = Objects.requireNonNull(numberReady);
            return this;
        }
        public Builder numberUnavailable(@Nullable Integer numberUnavailable) {
            this.numberUnavailable = numberUnavailable;
            return this;
        }
        public Builder observedGeneration(@Nullable Integer observedGeneration) {
            this.observedGeneration = observedGeneration;
            return this;
        }
        public Builder updatedNumberScheduled(@Nullable Integer updatedNumberScheduled) {
            this.updatedNumberScheduled = updatedNumberScheduled;
            return this;
        }        public DaemonSetStatus build() {
            return new DaemonSetStatus(collisionCount, conditions, currentNumberScheduled, desiredNumberScheduled, numberAvailable, numberMisscheduled, numberReady, numberUnavailable, observedGeneration, updatedNumberScheduled);
        }
    }
}
