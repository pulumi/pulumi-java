// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.networking.k8s.io_v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.kubernetes.meta_v1.inputs.LabelSelectorArgs;
import com.pulumi.kubernetes.networking.k8s.io_v1.inputs.IPBlockArgs;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * NetworkPolicyPeer describes a peer to allow traffic to/from. Only certain combinations of fields are allowed
 * 
 */
public final class NetworkPolicyPeerArgs extends com.pulumi.resources.ResourceArgs {

    public static final NetworkPolicyPeerArgs Empty = new NetworkPolicyPeerArgs();

    /**
     * IPBlock defines policy on a particular IPBlock. If this field is set then neither of the other fields can be.
     * 
     */
    @Import(name="ipBlock")
      private final @Nullable Output<IPBlockArgs> ipBlock;

    public Output<IPBlockArgs> ipBlock() {
        return this.ipBlock == null ? Codegen.empty() : this.ipBlock;
    }

    /**
     * Selects Namespaces using cluster-scoped labels. This field follows standard label selector semantics; if present but empty, it selects all namespaces.
     * 
     * If PodSelector is also set, then the NetworkPolicyPeer as a whole selects the Pods matching PodSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects all Pods in the Namespaces selected by NamespaceSelector.
     * 
     */
    @Import(name="namespaceSelector")
      private final @Nullable Output<LabelSelectorArgs> namespaceSelector;

    public Output<LabelSelectorArgs> namespaceSelector() {
        return this.namespaceSelector == null ? Codegen.empty() : this.namespaceSelector;
    }

    /**
     * This is a label selector which selects Pods. This field follows standard label selector semantics; if present but empty, it selects all pods.
     * 
     * If NamespaceSelector is also set, then the NetworkPolicyPeer as a whole selects the Pods matching PodSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects the Pods matching PodSelector in the policy's own Namespace.
     * 
     */
    @Import(name="podSelector")
      private final @Nullable Output<LabelSelectorArgs> podSelector;

    public Output<LabelSelectorArgs> podSelector() {
        return this.podSelector == null ? Codegen.empty() : this.podSelector;
    }

    public NetworkPolicyPeerArgs(
        @Nullable Output<IPBlockArgs> ipBlock,
        @Nullable Output<LabelSelectorArgs> namespaceSelector,
        @Nullable Output<LabelSelectorArgs> podSelector) {
        this.ipBlock = ipBlock;
        this.namespaceSelector = namespaceSelector;
        this.podSelector = podSelector;
    }

    private NetworkPolicyPeerArgs() {
        this.ipBlock = Codegen.empty();
        this.namespaceSelector = Codegen.empty();
        this.podSelector = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NetworkPolicyPeerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<IPBlockArgs> ipBlock;
        private @Nullable Output<LabelSelectorArgs> namespaceSelector;
        private @Nullable Output<LabelSelectorArgs> podSelector;

        public Builder() {
    	      // Empty
        }

        public Builder(NetworkPolicyPeerArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ipBlock = defaults.ipBlock;
    	      this.namespaceSelector = defaults.namespaceSelector;
    	      this.podSelector = defaults.podSelector;
        }

        public Builder ipBlock(@Nullable Output<IPBlockArgs> ipBlock) {
            this.ipBlock = ipBlock;
            return this;
        }
        public Builder ipBlock(@Nullable IPBlockArgs ipBlock) {
            this.ipBlock = Codegen.ofNullable(ipBlock);
            return this;
        }
        public Builder namespaceSelector(@Nullable Output<LabelSelectorArgs> namespaceSelector) {
            this.namespaceSelector = namespaceSelector;
            return this;
        }
        public Builder namespaceSelector(@Nullable LabelSelectorArgs namespaceSelector) {
            this.namespaceSelector = Codegen.ofNullable(namespaceSelector);
            return this;
        }
        public Builder podSelector(@Nullable Output<LabelSelectorArgs> podSelector) {
            this.podSelector = podSelector;
            return this;
        }
        public Builder podSelector(@Nullable LabelSelectorArgs podSelector) {
            this.podSelector = Codegen.ofNullable(podSelector);
            return this;
        }        public NetworkPolicyPeerArgs build() {
            return new NetworkPolicyPeerArgs(ipBlock, namespaceSelector, podSelector);
        }
    }
}
