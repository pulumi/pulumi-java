// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.core_v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.kubernetes.core_v1.inputs.CapabilitiesArgs;
import com.pulumi.kubernetes.core_v1.inputs.SELinuxOptionsArgs;
import com.pulumi.kubernetes.core_v1.inputs.SeccompProfileArgs;
import com.pulumi.kubernetes.core_v1.inputs.WindowsSecurityContextOptionsArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.
 * 
 */
public final class SecurityContextArgs extends com.pulumi.resources.ResourceArgs {

    public static final SecurityContextArgs Empty = new SecurityContextArgs();

    /**
     * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
     * 
     */
    @Import(name="allowPrivilegeEscalation")
      private final @Nullable Output<Boolean> allowPrivilegeEscalation;

    public Output<Boolean> allowPrivilegeEscalation() {
        return this.allowPrivilegeEscalation == null ? Codegen.empty() : this.allowPrivilegeEscalation;
    }

    /**
     * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
     * 
     */
    @Import(name="capabilities")
      private final @Nullable Output<CapabilitiesArgs> capabilities;

    public Output<CapabilitiesArgs> capabilities() {
        return this.capabilities == null ? Codegen.empty() : this.capabilities;
    }

    /**
     * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
     * 
     */
    @Import(name="privileged")
      private final @Nullable Output<Boolean> privileged;

    public Output<Boolean> privileged() {
        return this.privileged == null ? Codegen.empty() : this.privileged;
    }

    /**
     * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
     * 
     */
    @Import(name="procMount")
      private final @Nullable Output<String> procMount;

    public Output<String> procMount() {
        return this.procMount == null ? Codegen.empty() : this.procMount;
    }

    /**
     * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
     * 
     */
    @Import(name="readOnlyRootFilesystem")
      private final @Nullable Output<Boolean> readOnlyRootFilesystem;

    public Output<Boolean> readOnlyRootFilesystem() {
        return this.readOnlyRootFilesystem == null ? Codegen.empty() : this.readOnlyRootFilesystem;
    }

    /**
     * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
     * 
     */
    @Import(name="runAsGroup")
      private final @Nullable Output<Integer> runAsGroup;

    public Output<Integer> runAsGroup() {
        return this.runAsGroup == null ? Codegen.empty() : this.runAsGroup;
    }

    /**
     * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
     * 
     */
    @Import(name="runAsNonRoot")
      private final @Nullable Output<Boolean> runAsNonRoot;

    public Output<Boolean> runAsNonRoot() {
        return this.runAsNonRoot == null ? Codegen.empty() : this.runAsNonRoot;
    }

    /**
     * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
     * 
     */
    @Import(name="runAsUser")
      private final @Nullable Output<Integer> runAsUser;

    public Output<Integer> runAsUser() {
        return this.runAsUser == null ? Codegen.empty() : this.runAsUser;
    }

    /**
     * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
     * 
     */
    @Import(name="seLinuxOptions")
      private final @Nullable Output<SELinuxOptionsArgs> seLinuxOptions;

    public Output<SELinuxOptionsArgs> seLinuxOptions() {
        return this.seLinuxOptions == null ? Codegen.empty() : this.seLinuxOptions;
    }

    /**
     * The seccomp options to use by this container. If seccomp options are provided at both the pod &amp; container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
     * 
     */
    @Import(name="seccompProfile")
      private final @Nullable Output<SeccompProfileArgs> seccompProfile;

    public Output<SeccompProfileArgs> seccompProfile() {
        return this.seccompProfile == null ? Codegen.empty() : this.seccompProfile;
    }

    /**
     * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
     * 
     */
    @Import(name="windowsOptions")
      private final @Nullable Output<WindowsSecurityContextOptionsArgs> windowsOptions;

    public Output<WindowsSecurityContextOptionsArgs> windowsOptions() {
        return this.windowsOptions == null ? Codegen.empty() : this.windowsOptions;
    }

    public SecurityContextArgs(
        @Nullable Output<Boolean> allowPrivilegeEscalation,
        @Nullable Output<CapabilitiesArgs> capabilities,
        @Nullable Output<Boolean> privileged,
        @Nullable Output<String> procMount,
        @Nullable Output<Boolean> readOnlyRootFilesystem,
        @Nullable Output<Integer> runAsGroup,
        @Nullable Output<Boolean> runAsNonRoot,
        @Nullable Output<Integer> runAsUser,
        @Nullable Output<SELinuxOptionsArgs> seLinuxOptions,
        @Nullable Output<SeccompProfileArgs> seccompProfile,
        @Nullable Output<WindowsSecurityContextOptionsArgs> windowsOptions) {
        this.allowPrivilegeEscalation = allowPrivilegeEscalation;
        this.capabilities = capabilities;
        this.privileged = privileged;
        this.procMount = procMount;
        this.readOnlyRootFilesystem = readOnlyRootFilesystem;
        this.runAsGroup = runAsGroup;
        this.runAsNonRoot = runAsNonRoot;
        this.runAsUser = runAsUser;
        this.seLinuxOptions = seLinuxOptions;
        this.seccompProfile = seccompProfile;
        this.windowsOptions = windowsOptions;
    }

    private SecurityContextArgs() {
        this.allowPrivilegeEscalation = Codegen.empty();
        this.capabilities = Codegen.empty();
        this.privileged = Codegen.empty();
        this.procMount = Codegen.empty();
        this.readOnlyRootFilesystem = Codegen.empty();
        this.runAsGroup = Codegen.empty();
        this.runAsNonRoot = Codegen.empty();
        this.runAsUser = Codegen.empty();
        this.seLinuxOptions = Codegen.empty();
        this.seccompProfile = Codegen.empty();
        this.windowsOptions = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SecurityContextArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Boolean> allowPrivilegeEscalation;
        private @Nullable Output<CapabilitiesArgs> capabilities;
        private @Nullable Output<Boolean> privileged;
        private @Nullable Output<String> procMount;
        private @Nullable Output<Boolean> readOnlyRootFilesystem;
        private @Nullable Output<Integer> runAsGroup;
        private @Nullable Output<Boolean> runAsNonRoot;
        private @Nullable Output<Integer> runAsUser;
        private @Nullable Output<SELinuxOptionsArgs> seLinuxOptions;
        private @Nullable Output<SeccompProfileArgs> seccompProfile;
        private @Nullable Output<WindowsSecurityContextOptionsArgs> windowsOptions;

        public Builder() {
    	      // Empty
        }

        public Builder(SecurityContextArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowPrivilegeEscalation = defaults.allowPrivilegeEscalation;
    	      this.capabilities = defaults.capabilities;
    	      this.privileged = defaults.privileged;
    	      this.procMount = defaults.procMount;
    	      this.readOnlyRootFilesystem = defaults.readOnlyRootFilesystem;
    	      this.runAsGroup = defaults.runAsGroup;
    	      this.runAsNonRoot = defaults.runAsNonRoot;
    	      this.runAsUser = defaults.runAsUser;
    	      this.seLinuxOptions = defaults.seLinuxOptions;
    	      this.seccompProfile = defaults.seccompProfile;
    	      this.windowsOptions = defaults.windowsOptions;
        }

        public Builder allowPrivilegeEscalation(@Nullable Output<Boolean> allowPrivilegeEscalation) {
            this.allowPrivilegeEscalation = allowPrivilegeEscalation;
            return this;
        }
        public Builder allowPrivilegeEscalation(@Nullable Boolean allowPrivilegeEscalation) {
            this.allowPrivilegeEscalation = Codegen.ofNullable(allowPrivilegeEscalation);
            return this;
        }
        public Builder capabilities(@Nullable Output<CapabilitiesArgs> capabilities) {
            this.capabilities = capabilities;
            return this;
        }
        public Builder capabilities(@Nullable CapabilitiesArgs capabilities) {
            this.capabilities = Codegen.ofNullable(capabilities);
            return this;
        }
        public Builder privileged(@Nullable Output<Boolean> privileged) {
            this.privileged = privileged;
            return this;
        }
        public Builder privileged(@Nullable Boolean privileged) {
            this.privileged = Codegen.ofNullable(privileged);
            return this;
        }
        public Builder procMount(@Nullable Output<String> procMount) {
            this.procMount = procMount;
            return this;
        }
        public Builder procMount(@Nullable String procMount) {
            this.procMount = Codegen.ofNullable(procMount);
            return this;
        }
        public Builder readOnlyRootFilesystem(@Nullable Output<Boolean> readOnlyRootFilesystem) {
            this.readOnlyRootFilesystem = readOnlyRootFilesystem;
            return this;
        }
        public Builder readOnlyRootFilesystem(@Nullable Boolean readOnlyRootFilesystem) {
            this.readOnlyRootFilesystem = Codegen.ofNullable(readOnlyRootFilesystem);
            return this;
        }
        public Builder runAsGroup(@Nullable Output<Integer> runAsGroup) {
            this.runAsGroup = runAsGroup;
            return this;
        }
        public Builder runAsGroup(@Nullable Integer runAsGroup) {
            this.runAsGroup = Codegen.ofNullable(runAsGroup);
            return this;
        }
        public Builder runAsNonRoot(@Nullable Output<Boolean> runAsNonRoot) {
            this.runAsNonRoot = runAsNonRoot;
            return this;
        }
        public Builder runAsNonRoot(@Nullable Boolean runAsNonRoot) {
            this.runAsNonRoot = Codegen.ofNullable(runAsNonRoot);
            return this;
        }
        public Builder runAsUser(@Nullable Output<Integer> runAsUser) {
            this.runAsUser = runAsUser;
            return this;
        }
        public Builder runAsUser(@Nullable Integer runAsUser) {
            this.runAsUser = Codegen.ofNullable(runAsUser);
            return this;
        }
        public Builder seLinuxOptions(@Nullable Output<SELinuxOptionsArgs> seLinuxOptions) {
            this.seLinuxOptions = seLinuxOptions;
            return this;
        }
        public Builder seLinuxOptions(@Nullable SELinuxOptionsArgs seLinuxOptions) {
            this.seLinuxOptions = Codegen.ofNullable(seLinuxOptions);
            return this;
        }
        public Builder seccompProfile(@Nullable Output<SeccompProfileArgs> seccompProfile) {
            this.seccompProfile = seccompProfile;
            return this;
        }
        public Builder seccompProfile(@Nullable SeccompProfileArgs seccompProfile) {
            this.seccompProfile = Codegen.ofNullable(seccompProfile);
            return this;
        }
        public Builder windowsOptions(@Nullable Output<WindowsSecurityContextOptionsArgs> windowsOptions) {
            this.windowsOptions = windowsOptions;
            return this;
        }
        public Builder windowsOptions(@Nullable WindowsSecurityContextOptionsArgs windowsOptions) {
            this.windowsOptions = Codegen.ofNullable(windowsOptions);
            return this;
        }        public SecurityContextArgs build() {
            return new SecurityContextArgs(allowPrivilegeEscalation, capabilities, privileged, procMount, readOnlyRootFilesystem, runAsGroup, runAsNonRoot, runAsUser, seLinuxOptions, seccompProfile, windowsOptions);
        }
    }
}
