// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.core.v1.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.kubernetes.core.v1.outputs.AWSElasticBlockStoreVolumeSource;
import com.pulumi.kubernetes.core.v1.outputs.AzureDiskVolumeSource;
import com.pulumi.kubernetes.core.v1.outputs.AzureFileVolumeSource;
import com.pulumi.kubernetes.core.v1.outputs.CSIVolumeSource;
import com.pulumi.kubernetes.core.v1.outputs.CephFSVolumeSource;
import com.pulumi.kubernetes.core.v1.outputs.CinderVolumeSource;
import com.pulumi.kubernetes.core.v1.outputs.ConfigMapVolumeSource;
import com.pulumi.kubernetes.core.v1.outputs.DownwardAPIVolumeSource;
import com.pulumi.kubernetes.core.v1.outputs.EmptyDirVolumeSource;
import com.pulumi.kubernetes.core.v1.outputs.EphemeralVolumeSource;
import com.pulumi.kubernetes.core.v1.outputs.FCVolumeSource;
import com.pulumi.kubernetes.core.v1.outputs.FlexVolumeSource;
import com.pulumi.kubernetes.core.v1.outputs.FlockerVolumeSource;
import com.pulumi.kubernetes.core.v1.outputs.GCEPersistentDiskVolumeSource;
import com.pulumi.kubernetes.core.v1.outputs.GitRepoVolumeSource;
import com.pulumi.kubernetes.core.v1.outputs.GlusterfsVolumeSource;
import com.pulumi.kubernetes.core.v1.outputs.HostPathVolumeSource;
import com.pulumi.kubernetes.core.v1.outputs.ISCSIVolumeSource;
import com.pulumi.kubernetes.core.v1.outputs.NFSVolumeSource;
import com.pulumi.kubernetes.core.v1.outputs.PersistentVolumeClaimVolumeSource;
import com.pulumi.kubernetes.core.v1.outputs.PhotonPersistentDiskVolumeSource;
import com.pulumi.kubernetes.core.v1.outputs.PortworxVolumeSource;
import com.pulumi.kubernetes.core.v1.outputs.ProjectedVolumeSource;
import com.pulumi.kubernetes.core.v1.outputs.QuobyteVolumeSource;
import com.pulumi.kubernetes.core.v1.outputs.RBDVolumeSource;
import com.pulumi.kubernetes.core.v1.outputs.ScaleIOVolumeSource;
import com.pulumi.kubernetes.core.v1.outputs.SecretVolumeSource;
import com.pulumi.kubernetes.core.v1.outputs.StorageOSVolumeSource;
import com.pulumi.kubernetes.core.v1.outputs.VsphereVirtualDiskVolumeSource;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class Volume {
    /**
     * @return awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet&#39;s host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     * 
     */
    private final @Nullable AWSElasticBlockStoreVolumeSource awsElasticBlockStore;
    /**
     * @return azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
     * 
     */
    private final @Nullable AzureDiskVolumeSource azureDisk;
    /**
     * @return azureFile represents an Azure File Service mount on the host and bind mount to the pod.
     * 
     */
    private final @Nullable AzureFileVolumeSource azureFile;
    /**
     * @return cephFS represents a Ceph FS mount on the host that shares a pod&#39;s lifetime
     * 
     */
    private final @Nullable CephFSVolumeSource cephfs;
    /**
     * @return cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     * 
     */
    private final @Nullable CinderVolumeSource cinder;
    /**
     * @return configMap represents a configMap that should populate this volume
     * 
     */
    private final @Nullable ConfigMapVolumeSource configMap;
    /**
     * @return csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
     * 
     */
    private final @Nullable CSIVolumeSource csi;
    /**
     * @return downwardAPI represents downward API about the pod that should populate this volume
     * 
     */
    private final @Nullable DownwardAPIVolumeSource downwardAPI;
    /**
     * @return emptyDir represents a temporary directory that shares a pod&#39;s lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
     * 
     */
    private final @Nullable EmptyDirVolumeSource emptyDir;
    /**
     * @return ephemeral represents a volume that is handled by a cluster storage driver. The volume&#39;s lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed.
     * 
     * Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity
     *    tracking are needed,
     * c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through
     *    a PersistentVolumeClaim (see EphemeralVolumeSource for more
     *    information on the connection between this volume type
     *    and PersistentVolumeClaim).
     * 
     * Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod.
     * 
     * Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information.
     * 
     * A pod can use both types of ephemeral volumes and persistent volumes at the same time.
     * 
     */
    private final @Nullable EphemeralVolumeSource ephemeral;
    /**
     * @return fc represents a Fibre Channel resource that is attached to a kubelet&#39;s host machine and then exposed to the pod.
     * 
     */
    private final @Nullable FCVolumeSource fc;
    /**
     * @return flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
     * 
     */
    private final @Nullable FlexVolumeSource flexVolume;
    /**
     * @return flocker represents a Flocker volume attached to a kubelet&#39;s host machine. This depends on the Flocker control service being running
     * 
     */
    private final @Nullable FlockerVolumeSource flocker;
    /**
     * @return gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet&#39;s host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     * 
     */
    private final @Nullable GCEPersistentDiskVolumeSource gcePersistentDisk;
    /**
     * @return gitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod&#39;s container.
     * 
     */
    private final @Nullable GitRepoVolumeSource gitRepo;
    /**
     * @return glusterfs represents a Glusterfs mount on the host that shares a pod&#39;s lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
     * 
     */
    private final @Nullable GlusterfsVolumeSource glusterfs;
    /**
     * @return hostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
     * 
     */
    private final @Nullable HostPathVolumeSource hostPath;
    /**
     * @return iscsi represents an ISCSI Disk resource that is attached to a kubelet&#39;s host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
     * 
     */
    private final @Nullable ISCSIVolumeSource iscsi;
    /**
     * @return name of the volume. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     * 
     */
    private final String name;
    /**
     * @return nfs represents an NFS mount on the host that shares a pod&#39;s lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     * 
     */
    private final @Nullable NFSVolumeSource nfs;
    /**
     * @return persistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
     * 
     */
    private final @Nullable PersistentVolumeClaimVolumeSource persistentVolumeClaim;
    /**
     * @return photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
     * 
     */
    private final @Nullable PhotonPersistentDiskVolumeSource photonPersistentDisk;
    /**
     * @return portworxVolume represents a portworx volume attached and mounted on kubelets host machine
     * 
     */
    private final @Nullable PortworxVolumeSource portworxVolume;
    /**
     * @return projected items for all in one resources secrets, configmaps, and downward API
     * 
     */
    private final @Nullable ProjectedVolumeSource projected;
    /**
     * @return quobyte represents a Quobyte mount on the host that shares a pod&#39;s lifetime
     * 
     */
    private final @Nullable QuobyteVolumeSource quobyte;
    /**
     * @return rbd represents a Rados Block Device mount on the host that shares a pod&#39;s lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
     * 
     */
    private final @Nullable RBDVolumeSource rbd;
    /**
     * @return scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
     * 
     */
    private final @Nullable ScaleIOVolumeSource scaleIO;
    /**
     * @return secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
     * 
     */
    private final @Nullable SecretVolumeSource secret;
    /**
     * @return storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
     * 
     */
    private final @Nullable StorageOSVolumeSource storageos;
    /**
     * @return vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
     * 
     */
    private final @Nullable VsphereVirtualDiskVolumeSource vsphereVolume;

    @CustomType.Constructor
    private Volume(
        @CustomType.Parameter("awsElasticBlockStore") @Nullable AWSElasticBlockStoreVolumeSource awsElasticBlockStore,
        @CustomType.Parameter("azureDisk") @Nullable AzureDiskVolumeSource azureDisk,
        @CustomType.Parameter("azureFile") @Nullable AzureFileVolumeSource azureFile,
        @CustomType.Parameter("cephfs") @Nullable CephFSVolumeSource cephfs,
        @CustomType.Parameter("cinder") @Nullable CinderVolumeSource cinder,
        @CustomType.Parameter("configMap") @Nullable ConfigMapVolumeSource configMap,
        @CustomType.Parameter("csi") @Nullable CSIVolumeSource csi,
        @CustomType.Parameter("downwardAPI") @Nullable DownwardAPIVolumeSource downwardAPI,
        @CustomType.Parameter("emptyDir") @Nullable EmptyDirVolumeSource emptyDir,
        @CustomType.Parameter("ephemeral") @Nullable EphemeralVolumeSource ephemeral,
        @CustomType.Parameter("fc") @Nullable FCVolumeSource fc,
        @CustomType.Parameter("flexVolume") @Nullable FlexVolumeSource flexVolume,
        @CustomType.Parameter("flocker") @Nullable FlockerVolumeSource flocker,
        @CustomType.Parameter("gcePersistentDisk") @Nullable GCEPersistentDiskVolumeSource gcePersistentDisk,
        @CustomType.Parameter("gitRepo") @Nullable GitRepoVolumeSource gitRepo,
        @CustomType.Parameter("glusterfs") @Nullable GlusterfsVolumeSource glusterfs,
        @CustomType.Parameter("hostPath") @Nullable HostPathVolumeSource hostPath,
        @CustomType.Parameter("iscsi") @Nullable ISCSIVolumeSource iscsi,
        @CustomType.Parameter("name") String name,
        @CustomType.Parameter("nfs") @Nullable NFSVolumeSource nfs,
        @CustomType.Parameter("persistentVolumeClaim") @Nullable PersistentVolumeClaimVolumeSource persistentVolumeClaim,
        @CustomType.Parameter("photonPersistentDisk") @Nullable PhotonPersistentDiskVolumeSource photonPersistentDisk,
        @CustomType.Parameter("portworxVolume") @Nullable PortworxVolumeSource portworxVolume,
        @CustomType.Parameter("projected") @Nullable ProjectedVolumeSource projected,
        @CustomType.Parameter("quobyte") @Nullable QuobyteVolumeSource quobyte,
        @CustomType.Parameter("rbd") @Nullable RBDVolumeSource rbd,
        @CustomType.Parameter("scaleIO") @Nullable ScaleIOVolumeSource scaleIO,
        @CustomType.Parameter("secret") @Nullable SecretVolumeSource secret,
        @CustomType.Parameter("storageos") @Nullable StorageOSVolumeSource storageos,
        @CustomType.Parameter("vsphereVolume") @Nullable VsphereVirtualDiskVolumeSource vsphereVolume) {
        this.awsElasticBlockStore = awsElasticBlockStore;
        this.azureDisk = azureDisk;
        this.azureFile = azureFile;
        this.cephfs = cephfs;
        this.cinder = cinder;
        this.configMap = configMap;
        this.csi = csi;
        this.downwardAPI = downwardAPI;
        this.emptyDir = emptyDir;
        this.ephemeral = ephemeral;
        this.fc = fc;
        this.flexVolume = flexVolume;
        this.flocker = flocker;
        this.gcePersistentDisk = gcePersistentDisk;
        this.gitRepo = gitRepo;
        this.glusterfs = glusterfs;
        this.hostPath = hostPath;
        this.iscsi = iscsi;
        this.name = name;
        this.nfs = nfs;
        this.persistentVolumeClaim = persistentVolumeClaim;
        this.photonPersistentDisk = photonPersistentDisk;
        this.portworxVolume = portworxVolume;
        this.projected = projected;
        this.quobyte = quobyte;
        this.rbd = rbd;
        this.scaleIO = scaleIO;
        this.secret = secret;
        this.storageos = storageos;
        this.vsphereVolume = vsphereVolume;
    }

    /**
     * @return awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet&#39;s host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
     * 
     */
    public Optional<AWSElasticBlockStoreVolumeSource> awsElasticBlockStore() {
        return Optional.ofNullable(this.awsElasticBlockStore);
    }
    /**
     * @return azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
     * 
     */
    public Optional<AzureDiskVolumeSource> azureDisk() {
        return Optional.ofNullable(this.azureDisk);
    }
    /**
     * @return azureFile represents an Azure File Service mount on the host and bind mount to the pod.
     * 
     */
    public Optional<AzureFileVolumeSource> azureFile() {
        return Optional.ofNullable(this.azureFile);
    }
    /**
     * @return cephFS represents a Ceph FS mount on the host that shares a pod&#39;s lifetime
     * 
     */
    public Optional<CephFSVolumeSource> cephfs() {
        return Optional.ofNullable(this.cephfs);
    }
    /**
     * @return cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
     * 
     */
    public Optional<CinderVolumeSource> cinder() {
        return Optional.ofNullable(this.cinder);
    }
    /**
     * @return configMap represents a configMap that should populate this volume
     * 
     */
    public Optional<ConfigMapVolumeSource> configMap() {
        return Optional.ofNullable(this.configMap);
    }
    /**
     * @return csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
     * 
     */
    public Optional<CSIVolumeSource> csi() {
        return Optional.ofNullable(this.csi);
    }
    /**
     * @return downwardAPI represents downward API about the pod that should populate this volume
     * 
     */
    public Optional<DownwardAPIVolumeSource> downwardAPI() {
        return Optional.ofNullable(this.downwardAPI);
    }
    /**
     * @return emptyDir represents a temporary directory that shares a pod&#39;s lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
     * 
     */
    public Optional<EmptyDirVolumeSource> emptyDir() {
        return Optional.ofNullable(this.emptyDir);
    }
    /**
     * @return ephemeral represents a volume that is handled by a cluster storage driver. The volume&#39;s lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed.
     * 
     * Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity
     *    tracking are needed,
     * c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through
     *    a PersistentVolumeClaim (see EphemeralVolumeSource for more
     *    information on the connection between this volume type
     *    and PersistentVolumeClaim).
     * 
     * Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod.
     * 
     * Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information.
     * 
     * A pod can use both types of ephemeral volumes and persistent volumes at the same time.
     * 
     */
    public Optional<EphemeralVolumeSource> ephemeral() {
        return Optional.ofNullable(this.ephemeral);
    }
    /**
     * @return fc represents a Fibre Channel resource that is attached to a kubelet&#39;s host machine and then exposed to the pod.
     * 
     */
    public Optional<FCVolumeSource> fc() {
        return Optional.ofNullable(this.fc);
    }
    /**
     * @return flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
     * 
     */
    public Optional<FlexVolumeSource> flexVolume() {
        return Optional.ofNullable(this.flexVolume);
    }
    /**
     * @return flocker represents a Flocker volume attached to a kubelet&#39;s host machine. This depends on the Flocker control service being running
     * 
     */
    public Optional<FlockerVolumeSource> flocker() {
        return Optional.ofNullable(this.flocker);
    }
    /**
     * @return gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet&#39;s host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
     * 
     */
    public Optional<GCEPersistentDiskVolumeSource> gcePersistentDisk() {
        return Optional.ofNullable(this.gcePersistentDisk);
    }
    /**
     * @return gitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod&#39;s container.
     * 
     */
    public Optional<GitRepoVolumeSource> gitRepo() {
        return Optional.ofNullable(this.gitRepo);
    }
    /**
     * @return glusterfs represents a Glusterfs mount on the host that shares a pod&#39;s lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
     * 
     */
    public Optional<GlusterfsVolumeSource> glusterfs() {
        return Optional.ofNullable(this.glusterfs);
    }
    /**
     * @return hostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
     * 
     */
    public Optional<HostPathVolumeSource> hostPath() {
        return Optional.ofNullable(this.hostPath);
    }
    /**
     * @return iscsi represents an ISCSI Disk resource that is attached to a kubelet&#39;s host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
     * 
     */
    public Optional<ISCSIVolumeSource> iscsi() {
        return Optional.ofNullable(this.iscsi);
    }
    /**
     * @return name of the volume. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return nfs represents an NFS mount on the host that shares a pod&#39;s lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     * 
     */
    public Optional<NFSVolumeSource> nfs() {
        return Optional.ofNullable(this.nfs);
    }
    /**
     * @return persistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
     * 
     */
    public Optional<PersistentVolumeClaimVolumeSource> persistentVolumeClaim() {
        return Optional.ofNullable(this.persistentVolumeClaim);
    }
    /**
     * @return photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
     * 
     */
    public Optional<PhotonPersistentDiskVolumeSource> photonPersistentDisk() {
        return Optional.ofNullable(this.photonPersistentDisk);
    }
    /**
     * @return portworxVolume represents a portworx volume attached and mounted on kubelets host machine
     * 
     */
    public Optional<PortworxVolumeSource> portworxVolume() {
        return Optional.ofNullable(this.portworxVolume);
    }
    /**
     * @return projected items for all in one resources secrets, configmaps, and downward API
     * 
     */
    public Optional<ProjectedVolumeSource> projected() {
        return Optional.ofNullable(this.projected);
    }
    /**
     * @return quobyte represents a Quobyte mount on the host that shares a pod&#39;s lifetime
     * 
     */
    public Optional<QuobyteVolumeSource> quobyte() {
        return Optional.ofNullable(this.quobyte);
    }
    /**
     * @return rbd represents a Rados Block Device mount on the host that shares a pod&#39;s lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
     * 
     */
    public Optional<RBDVolumeSource> rbd() {
        return Optional.ofNullable(this.rbd);
    }
    /**
     * @return scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
     * 
     */
    public Optional<ScaleIOVolumeSource> scaleIO() {
        return Optional.ofNullable(this.scaleIO);
    }
    /**
     * @return secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
     * 
     */
    public Optional<SecretVolumeSource> secret() {
        return Optional.ofNullable(this.secret);
    }
    /**
     * @return storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
     * 
     */
    public Optional<StorageOSVolumeSource> storageos() {
        return Optional.ofNullable(this.storageos);
    }
    /**
     * @return vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
     * 
     */
    public Optional<VsphereVirtualDiskVolumeSource> vsphereVolume() {
        return Optional.ofNullable(this.vsphereVolume);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(Volume defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable AWSElasticBlockStoreVolumeSource awsElasticBlockStore;
        private @Nullable AzureDiskVolumeSource azureDisk;
        private @Nullable AzureFileVolumeSource azureFile;
        private @Nullable CephFSVolumeSource cephfs;
        private @Nullable CinderVolumeSource cinder;
        private @Nullable ConfigMapVolumeSource configMap;
        private @Nullable CSIVolumeSource csi;
        private @Nullable DownwardAPIVolumeSource downwardAPI;
        private @Nullable EmptyDirVolumeSource emptyDir;
        private @Nullable EphemeralVolumeSource ephemeral;
        private @Nullable FCVolumeSource fc;
        private @Nullable FlexVolumeSource flexVolume;
        private @Nullable FlockerVolumeSource flocker;
        private @Nullable GCEPersistentDiskVolumeSource gcePersistentDisk;
        private @Nullable GitRepoVolumeSource gitRepo;
        private @Nullable GlusterfsVolumeSource glusterfs;
        private @Nullable HostPathVolumeSource hostPath;
        private @Nullable ISCSIVolumeSource iscsi;
        private String name;
        private @Nullable NFSVolumeSource nfs;
        private @Nullable PersistentVolumeClaimVolumeSource persistentVolumeClaim;
        private @Nullable PhotonPersistentDiskVolumeSource photonPersistentDisk;
        private @Nullable PortworxVolumeSource portworxVolume;
        private @Nullable ProjectedVolumeSource projected;
        private @Nullable QuobyteVolumeSource quobyte;
        private @Nullable RBDVolumeSource rbd;
        private @Nullable ScaleIOVolumeSource scaleIO;
        private @Nullable SecretVolumeSource secret;
        private @Nullable StorageOSVolumeSource storageos;
        private @Nullable VsphereVirtualDiskVolumeSource vsphereVolume;

        public Builder() {
    	      // Empty
        }

        public Builder(Volume defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.awsElasticBlockStore = defaults.awsElasticBlockStore;
    	      this.azureDisk = defaults.azureDisk;
    	      this.azureFile = defaults.azureFile;
    	      this.cephfs = defaults.cephfs;
    	      this.cinder = defaults.cinder;
    	      this.configMap = defaults.configMap;
    	      this.csi = defaults.csi;
    	      this.downwardAPI = defaults.downwardAPI;
    	      this.emptyDir = defaults.emptyDir;
    	      this.ephemeral = defaults.ephemeral;
    	      this.fc = defaults.fc;
    	      this.flexVolume = defaults.flexVolume;
    	      this.flocker = defaults.flocker;
    	      this.gcePersistentDisk = defaults.gcePersistentDisk;
    	      this.gitRepo = defaults.gitRepo;
    	      this.glusterfs = defaults.glusterfs;
    	      this.hostPath = defaults.hostPath;
    	      this.iscsi = defaults.iscsi;
    	      this.name = defaults.name;
    	      this.nfs = defaults.nfs;
    	      this.persistentVolumeClaim = defaults.persistentVolumeClaim;
    	      this.photonPersistentDisk = defaults.photonPersistentDisk;
    	      this.portworxVolume = defaults.portworxVolume;
    	      this.projected = defaults.projected;
    	      this.quobyte = defaults.quobyte;
    	      this.rbd = defaults.rbd;
    	      this.scaleIO = defaults.scaleIO;
    	      this.secret = defaults.secret;
    	      this.storageos = defaults.storageos;
    	      this.vsphereVolume = defaults.vsphereVolume;
        }

        public Builder awsElasticBlockStore(@Nullable AWSElasticBlockStoreVolumeSource awsElasticBlockStore) {
            this.awsElasticBlockStore = awsElasticBlockStore;
            return this;
        }
        public Builder azureDisk(@Nullable AzureDiskVolumeSource azureDisk) {
            this.azureDisk = azureDisk;
            return this;
        }
        public Builder azureFile(@Nullable AzureFileVolumeSource azureFile) {
            this.azureFile = azureFile;
            return this;
        }
        public Builder cephfs(@Nullable CephFSVolumeSource cephfs) {
            this.cephfs = cephfs;
            return this;
        }
        public Builder cinder(@Nullable CinderVolumeSource cinder) {
            this.cinder = cinder;
            return this;
        }
        public Builder configMap(@Nullable ConfigMapVolumeSource configMap) {
            this.configMap = configMap;
            return this;
        }
        public Builder csi(@Nullable CSIVolumeSource csi) {
            this.csi = csi;
            return this;
        }
        public Builder downwardAPI(@Nullable DownwardAPIVolumeSource downwardAPI) {
            this.downwardAPI = downwardAPI;
            return this;
        }
        public Builder emptyDir(@Nullable EmptyDirVolumeSource emptyDir) {
            this.emptyDir = emptyDir;
            return this;
        }
        public Builder ephemeral(@Nullable EphemeralVolumeSource ephemeral) {
            this.ephemeral = ephemeral;
            return this;
        }
        public Builder fc(@Nullable FCVolumeSource fc) {
            this.fc = fc;
            return this;
        }
        public Builder flexVolume(@Nullable FlexVolumeSource flexVolume) {
            this.flexVolume = flexVolume;
            return this;
        }
        public Builder flocker(@Nullable FlockerVolumeSource flocker) {
            this.flocker = flocker;
            return this;
        }
        public Builder gcePersistentDisk(@Nullable GCEPersistentDiskVolumeSource gcePersistentDisk) {
            this.gcePersistentDisk = gcePersistentDisk;
            return this;
        }
        public Builder gitRepo(@Nullable GitRepoVolumeSource gitRepo) {
            this.gitRepo = gitRepo;
            return this;
        }
        public Builder glusterfs(@Nullable GlusterfsVolumeSource glusterfs) {
            this.glusterfs = glusterfs;
            return this;
        }
        public Builder hostPath(@Nullable HostPathVolumeSource hostPath) {
            this.hostPath = hostPath;
            return this;
        }
        public Builder iscsi(@Nullable ISCSIVolumeSource iscsi) {
            this.iscsi = iscsi;
            return this;
        }
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public Builder nfs(@Nullable NFSVolumeSource nfs) {
            this.nfs = nfs;
            return this;
        }
        public Builder persistentVolumeClaim(@Nullable PersistentVolumeClaimVolumeSource persistentVolumeClaim) {
            this.persistentVolumeClaim = persistentVolumeClaim;
            return this;
        }
        public Builder photonPersistentDisk(@Nullable PhotonPersistentDiskVolumeSource photonPersistentDisk) {
            this.photonPersistentDisk = photonPersistentDisk;
            return this;
        }
        public Builder portworxVolume(@Nullable PortworxVolumeSource portworxVolume) {
            this.portworxVolume = portworxVolume;
            return this;
        }
        public Builder projected(@Nullable ProjectedVolumeSource projected) {
            this.projected = projected;
            return this;
        }
        public Builder quobyte(@Nullable QuobyteVolumeSource quobyte) {
            this.quobyte = quobyte;
            return this;
        }
        public Builder rbd(@Nullable RBDVolumeSource rbd) {
            this.rbd = rbd;
            return this;
        }
        public Builder scaleIO(@Nullable ScaleIOVolumeSource scaleIO) {
            this.scaleIO = scaleIO;
            return this;
        }
        public Builder secret(@Nullable SecretVolumeSource secret) {
            this.secret = secret;
            return this;
        }
        public Builder storageos(@Nullable StorageOSVolumeSource storageos) {
            this.storageos = storageos;
            return this;
        }
        public Builder vsphereVolume(@Nullable VsphereVirtualDiskVolumeSource vsphereVolume) {
            this.vsphereVolume = vsphereVolume;
            return this;
        }        public Volume build() {
            return new Volume(awsElasticBlockStore, azureDisk, azureFile, cephfs, cinder, configMap, csi, downwardAPI, emptyDir, ephemeral, fc, flexVolume, flocker, gcePersistentDisk, gitRepo, glusterfs, hostPath, iscsi, name, nfs, persistentVolumeClaim, photonPersistentDisk, portworxVolume, projected, quobyte, rbd, scaleIO, secret, storageos, vsphereVolume);
        }
    }
}
