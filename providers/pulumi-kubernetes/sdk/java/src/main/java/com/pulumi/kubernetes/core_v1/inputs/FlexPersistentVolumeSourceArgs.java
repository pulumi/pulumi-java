// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.core_v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.kubernetes.core_v1.inputs.SecretReferenceArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * FlexPersistentVolumeSource represents a generic persistent volume resource that is provisioned/attached using an exec based plugin.
 * 
 */
public final class FlexPersistentVolumeSourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final FlexPersistentVolumeSourceArgs Empty = new FlexPersistentVolumeSourceArgs();

    /**
     * Driver is the name of the driver to use for this volume.
     * 
     */
    @Import(name="driver", required=true)
      private final Output<String> driver;

    public Output<String> driver() {
        return this.driver;
    }

    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
     * 
     */
    @Import(name="fsType")
      private final @Nullable Output<String> fsType;

    public Output<String> fsType() {
        return this.fsType == null ? Codegen.empty() : this.fsType;
    }

    /**
     * Optional: Extra command options if any.
     * 
     */
    @Import(name="options")
      private final @Nullable Output<Map<String,String>> options;

    public Output<Map<String,String>> options() {
        return this.options == null ? Codegen.empty() : this.options;
    }

    /**
     * Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
     * 
     */
    @Import(name="readOnly")
      private final @Nullable Output<Boolean> readOnly;

    public Output<Boolean> readOnly() {
        return this.readOnly == null ? Codegen.empty() : this.readOnly;
    }

    /**
     * Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
     * 
     */
    @Import(name="secretRef")
      private final @Nullable Output<SecretReferenceArgs> secretRef;

    public Output<SecretReferenceArgs> secretRef() {
        return this.secretRef == null ? Codegen.empty() : this.secretRef;
    }

    public FlexPersistentVolumeSourceArgs(
        Output<String> driver,
        @Nullable Output<String> fsType,
        @Nullable Output<Map<String,String>> options,
        @Nullable Output<Boolean> readOnly,
        @Nullable Output<SecretReferenceArgs> secretRef) {
        this.driver = Objects.requireNonNull(driver, "expected parameter 'driver' to be non-null");
        this.fsType = fsType;
        this.options = options;
        this.readOnly = readOnly;
        this.secretRef = secretRef;
    }

    private FlexPersistentVolumeSourceArgs() {
        this.driver = Codegen.empty();
        this.fsType = Codegen.empty();
        this.options = Codegen.empty();
        this.readOnly = Codegen.empty();
        this.secretRef = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FlexPersistentVolumeSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> driver;
        private @Nullable Output<String> fsType;
        private @Nullable Output<Map<String,String>> options;
        private @Nullable Output<Boolean> readOnly;
        private @Nullable Output<SecretReferenceArgs> secretRef;

        public Builder() {
    	      // Empty
        }

        public Builder(FlexPersistentVolumeSourceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.driver = defaults.driver;
    	      this.fsType = defaults.fsType;
    	      this.options = defaults.options;
    	      this.readOnly = defaults.readOnly;
    	      this.secretRef = defaults.secretRef;
        }

        public Builder driver(Output<String> driver) {
            this.driver = Objects.requireNonNull(driver);
            return this;
        }
        public Builder driver(String driver) {
            this.driver = Output.of(Objects.requireNonNull(driver));
            return this;
        }
        public Builder fsType(@Nullable Output<String> fsType) {
            this.fsType = fsType;
            return this;
        }
        public Builder fsType(@Nullable String fsType) {
            this.fsType = Codegen.ofNullable(fsType);
            return this;
        }
        public Builder options(@Nullable Output<Map<String,String>> options) {
            this.options = options;
            return this;
        }
        public Builder options(@Nullable Map<String,String> options) {
            this.options = Codegen.ofNullable(options);
            return this;
        }
        public Builder readOnly(@Nullable Output<Boolean> readOnly) {
            this.readOnly = readOnly;
            return this;
        }
        public Builder readOnly(@Nullable Boolean readOnly) {
            this.readOnly = Codegen.ofNullable(readOnly);
            return this;
        }
        public Builder secretRef(@Nullable Output<SecretReferenceArgs> secretRef) {
            this.secretRef = secretRef;
            return this;
        }
        public Builder secretRef(@Nullable SecretReferenceArgs secretRef) {
            this.secretRef = Codegen.ofNullable(secretRef);
            return this;
        }        public FlexPersistentVolumeSourceArgs build() {
            return new FlexPersistentVolumeSourceArgs(driver, fsType, options, readOnly, secretRef);
        }
    }
}
