// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.core_v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.kubernetes.core_v1.inputs.ObjectReferenceArgs;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * EndpointAddress is a tuple that describes single IP address.
 * 
 */
public final class EndpointAddressArgs extends com.pulumi.resources.ResourceArgs {

    public static final EndpointAddressArgs Empty = new EndpointAddressArgs();

    /**
     * The Hostname of this endpoint
     * 
     */
    @Import(name="hostname")
      private final @Nullable Output<String> hostname;

    public Output<String> hostname() {
        return this.hostname == null ? Codegen.empty() : this.hostname;
    }

    /**
     * The IP of this endpoint. May not be loopback (127.0.0.0/8), link-local (169.254.0.0/16), or link-local multicast ((224.0.0.0/24). IPv6 is also accepted but not fully supported on all platforms. Also, certain kubernetes components, like kube-proxy, are not IPv6 ready.
     * 
     */
    @Import(name="ip", required=true)
      private final Output<String> ip;

    public Output<String> ip() {
        return this.ip;
    }

    /**
     * Optional: Node hosting this endpoint. This can be used to determine endpoints local to a node.
     * 
     */
    @Import(name="nodeName")
      private final @Nullable Output<String> nodeName;

    public Output<String> nodeName() {
        return this.nodeName == null ? Codegen.empty() : this.nodeName;
    }

    /**
     * Reference to object providing the endpoint.
     * 
     */
    @Import(name="targetRef")
      private final @Nullable Output<ObjectReferenceArgs> targetRef;

    public Output<ObjectReferenceArgs> targetRef() {
        return this.targetRef == null ? Codegen.empty() : this.targetRef;
    }

    public EndpointAddressArgs(
        @Nullable Output<String> hostname,
        Output<String> ip,
        @Nullable Output<String> nodeName,
        @Nullable Output<ObjectReferenceArgs> targetRef) {
        this.hostname = hostname;
        this.ip = Objects.requireNonNull(ip, "expected parameter 'ip' to be non-null");
        this.nodeName = nodeName;
        this.targetRef = targetRef;
    }

    private EndpointAddressArgs() {
        this.hostname = Codegen.empty();
        this.ip = Codegen.empty();
        this.nodeName = Codegen.empty();
        this.targetRef = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EndpointAddressArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> hostname;
        private Output<String> ip;
        private @Nullable Output<String> nodeName;
        private @Nullable Output<ObjectReferenceArgs> targetRef;

        public Builder() {
    	      // Empty
        }

        public Builder(EndpointAddressArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.hostname = defaults.hostname;
    	      this.ip = defaults.ip;
    	      this.nodeName = defaults.nodeName;
    	      this.targetRef = defaults.targetRef;
        }

        public Builder hostname(@Nullable Output<String> hostname) {
            this.hostname = hostname;
            return this;
        }
        public Builder hostname(@Nullable String hostname) {
            this.hostname = Codegen.ofNullable(hostname);
            return this;
        }
        public Builder ip(Output<String> ip) {
            this.ip = Objects.requireNonNull(ip);
            return this;
        }
        public Builder ip(String ip) {
            this.ip = Output.of(Objects.requireNonNull(ip));
            return this;
        }
        public Builder nodeName(@Nullable Output<String> nodeName) {
            this.nodeName = nodeName;
            return this;
        }
        public Builder nodeName(@Nullable String nodeName) {
            this.nodeName = Codegen.ofNullable(nodeName);
            return this;
        }
        public Builder targetRef(@Nullable Output<ObjectReferenceArgs> targetRef) {
            this.targetRef = targetRef;
            return this;
        }
        public Builder targetRef(@Nullable ObjectReferenceArgs targetRef) {
            this.targetRef = Codegen.ofNullable(targetRef);
            return this;
        }        public EndpointAddressArgs build() {
            return new EndpointAddressArgs(hostname, ip, nodeName, targetRef);
        }
    }
}
