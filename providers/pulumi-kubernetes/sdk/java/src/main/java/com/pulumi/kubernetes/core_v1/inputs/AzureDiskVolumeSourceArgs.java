// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.core_v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
 * 
 */
public final class AzureDiskVolumeSourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final AzureDiskVolumeSourceArgs Empty = new AzureDiskVolumeSourceArgs();

    /**
     * Host Caching mode: None, Read Only, Read Write.
     * 
     */
    @Import(name="cachingMode")
    private @Nullable Output<String> cachingMode;

    public Optional<Output<String>> cachingMode() {
        return Optional.ofNullable(this.cachingMode);
    }

    /**
     * The Name of the data disk in the blob storage
     * 
     */
    @Import(name="diskName", required=true)
    private Output<String> diskName;

    public Output<String> diskName() {
        return this.diskName;
    }

    /**
     * The URI the data disk in the blob storage
     * 
     */
    @Import(name="diskURI", required=true)
    private Output<String> diskURI;

    public Output<String> diskURI() {
        return this.diskURI;
    }

    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. &#34;ext4&#34;, &#34;xfs&#34;, &#34;ntfs&#34;. Implicitly inferred to be &#34;ext4&#34; if unspecified.
     * 
     */
    @Import(name="fsType")
    private @Nullable Output<String> fsType;

    public Optional<Output<String>> fsType() {
        return Optional.ofNullable(this.fsType);
    }

    /**
     * Expected values Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
     * 
     */
    @Import(name="kind")
    private @Nullable Output<String> kind;

    public Optional<Output<String>> kind() {
        return Optional.ofNullable(this.kind);
    }

    /**
     * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
     * 
     */
    @Import(name="readOnly")
    private @Nullable Output<Boolean> readOnly;

    public Optional<Output<Boolean>> readOnly() {
        return Optional.ofNullable(this.readOnly);
    }

    private AzureDiskVolumeSourceArgs() {}

    private AzureDiskVolumeSourceArgs(AzureDiskVolumeSourceArgs $) {
        this.cachingMode = $.cachingMode;
        this.diskName = $.diskName;
        this.diskURI = $.diskURI;
        this.fsType = $.fsType;
        this.kind = $.kind;
        this.readOnly = $.readOnly;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AzureDiskVolumeSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AzureDiskVolumeSourceArgs $;

        public Builder() {
            $ = new AzureDiskVolumeSourceArgs();
        }

        public Builder(AzureDiskVolumeSourceArgs defaults) {
            $ = new AzureDiskVolumeSourceArgs(Objects.requireNonNull(defaults));
        }

        public Builder cachingMode(@Nullable Output<String> cachingMode) {
            $.cachingMode = cachingMode;
            return this;
        }

        public Builder cachingMode(String cachingMode) {
            return cachingMode(Output.of(cachingMode));
        }

        public Builder diskName(Output<String> diskName) {
            $.diskName = diskName;
            return this;
        }

        public Builder diskName(String diskName) {
            return diskName(Output.of(diskName));
        }

        public Builder diskURI(Output<String> diskURI) {
            $.diskURI = diskURI;
            return this;
        }

        public Builder diskURI(String diskURI) {
            return diskURI(Output.of(diskURI));
        }

        public Builder fsType(@Nullable Output<String> fsType) {
            $.fsType = fsType;
            return this;
        }

        public Builder fsType(String fsType) {
            return fsType(Output.of(fsType));
        }

        public Builder kind(@Nullable Output<String> kind) {
            $.kind = kind;
            return this;
        }

        public Builder kind(String kind) {
            return kind(Output.of(kind));
        }

        public Builder readOnly(@Nullable Output<Boolean> readOnly) {
            $.readOnly = readOnly;
            return this;
        }

        public Builder readOnly(Boolean readOnly) {
            return readOnly(Output.of(readOnly));
        }

        public AzureDiskVolumeSourceArgs build() {
            $.diskName = Objects.requireNonNull($.diskName, "expected parameter 'diskName' to be non-null");
            $.diskURI = Objects.requireNonNull($.diskURI, "expected parameter 'diskURI' to be non-null");
            return $;
        }
    }

}
