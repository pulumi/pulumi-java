// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.core_v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
 * 
 */
public final class AzureDiskVolumeSourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final AzureDiskVolumeSourceArgs Empty = new AzureDiskVolumeSourceArgs();

    /**
     * Host Caching mode: None, Read Only, Read Write.
     * 
     */
    @Import(name="cachingMode")
      private final @Nullable Output<String> cachingMode;

    public Output<String> cachingMode() {
        return this.cachingMode == null ? Codegen.empty() : this.cachingMode;
    }

    /**
     * The Name of the data disk in the blob storage
     * 
     */
    @Import(name="diskName", required=true)
      private final Output<String> diskName;

    public Output<String> diskName() {
        return this.diskName;
    }

    /**
     * The URI the data disk in the blob storage
     * 
     */
    @Import(name="diskURI", required=true)
      private final Output<String> diskURI;

    public Output<String> diskURI() {
        return this.diskURI;
    }

    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     * 
     */
    @Import(name="fsType")
      private final @Nullable Output<String> fsType;

    public Output<String> fsType() {
        return this.fsType == null ? Codegen.empty() : this.fsType;
    }

    /**
     * Expected values Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
     * 
     */
    @Import(name="kind")
      private final @Nullable Output<String> kind;

    public Output<String> kind() {
        return this.kind == null ? Codegen.empty() : this.kind;
    }

    /**
     * Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
     * 
     */
    @Import(name="readOnly")
      private final @Nullable Output<Boolean> readOnly;

    public Output<Boolean> readOnly() {
        return this.readOnly == null ? Codegen.empty() : this.readOnly;
    }

    public AzureDiskVolumeSourceArgs(
        @Nullable Output<String> cachingMode,
        Output<String> diskName,
        Output<String> diskURI,
        @Nullable Output<String> fsType,
        @Nullable Output<String> kind,
        @Nullable Output<Boolean> readOnly) {
        this.cachingMode = cachingMode;
        this.diskName = Objects.requireNonNull(diskName, "expected parameter 'diskName' to be non-null");
        this.diskURI = Objects.requireNonNull(diskURI, "expected parameter 'diskURI' to be non-null");
        this.fsType = fsType;
        this.kind = kind;
        this.readOnly = readOnly;
    }

    private AzureDiskVolumeSourceArgs() {
        this.cachingMode = Codegen.empty();
        this.diskName = Codegen.empty();
        this.diskURI = Codegen.empty();
        this.fsType = Codegen.empty();
        this.kind = Codegen.empty();
        this.readOnly = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AzureDiskVolumeSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> cachingMode;
        private Output<String> diskName;
        private Output<String> diskURI;
        private @Nullable Output<String> fsType;
        private @Nullable Output<String> kind;
        private @Nullable Output<Boolean> readOnly;

        public Builder() {
    	      // Empty
        }

        public Builder(AzureDiskVolumeSourceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cachingMode = defaults.cachingMode;
    	      this.diskName = defaults.diskName;
    	      this.diskURI = defaults.diskURI;
    	      this.fsType = defaults.fsType;
    	      this.kind = defaults.kind;
    	      this.readOnly = defaults.readOnly;
        }

        public Builder cachingMode(@Nullable Output<String> cachingMode) {
            this.cachingMode = cachingMode;
            return this;
        }
        public Builder cachingMode(@Nullable String cachingMode) {
            this.cachingMode = Codegen.ofNullable(cachingMode);
            return this;
        }
        public Builder diskName(Output<String> diskName) {
            this.diskName = Objects.requireNonNull(diskName);
            return this;
        }
        public Builder diskName(String diskName) {
            this.diskName = Output.of(Objects.requireNonNull(diskName));
            return this;
        }
        public Builder diskURI(Output<String> diskURI) {
            this.diskURI = Objects.requireNonNull(diskURI);
            return this;
        }
        public Builder diskURI(String diskURI) {
            this.diskURI = Output.of(Objects.requireNonNull(diskURI));
            return this;
        }
        public Builder fsType(@Nullable Output<String> fsType) {
            this.fsType = fsType;
            return this;
        }
        public Builder fsType(@Nullable String fsType) {
            this.fsType = Codegen.ofNullable(fsType);
            return this;
        }
        public Builder kind(@Nullable Output<String> kind) {
            this.kind = kind;
            return this;
        }
        public Builder kind(@Nullable String kind) {
            this.kind = Codegen.ofNullable(kind);
            return this;
        }
        public Builder readOnly(@Nullable Output<Boolean> readOnly) {
            this.readOnly = readOnly;
            return this;
        }
        public Builder readOnly(@Nullable Boolean readOnly) {
            this.readOnly = Codegen.ofNullable(readOnly);
            return this;
        }        public AzureDiskVolumeSourceArgs build() {
            return new AzureDiskVolumeSourceArgs(cachingMode, diskName, diskURI, fsType, kind, readOnly);
        }
    }
}
