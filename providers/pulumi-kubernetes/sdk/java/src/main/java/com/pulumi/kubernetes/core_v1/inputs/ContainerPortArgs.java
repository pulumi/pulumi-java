// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.core_v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * ContainerPort represents a network port in a single container.
 * 
 */
public final class ContainerPortArgs extends com.pulumi.resources.ResourceArgs {

    public static final ContainerPortArgs Empty = new ContainerPortArgs();

    /**
     * Number of port to expose on the pod&#39;s IP address. This must be a valid port number, 0 &lt; x &lt; 65536.
     * 
     */
    @Import(name="containerPort", required=true)
    private Output<Integer> containerPort;

    public Output<Integer> containerPort() {
        return this.containerPort;
    }

    /**
     * What host IP to bind the external port to.
     * 
     */
    @Import(name="hostIP")
    private @Nullable Output<String> hostIP;

    public Optional<Output<String>> hostIP() {
        return Optional.ofNullable(this.hostIP);
    }

    /**
     * Number of port to expose on the host. If specified, this must be a valid port number, 0 &lt; x &lt; 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
     * 
     */
    @Import(name="hostPort")
    private @Nullable Output<Integer> hostPort;

    public Optional<Output<Integer>> hostPort() {
        return Optional.ofNullable(this.hostPort);
    }

    /**
     * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to &#34;TCP&#34;.
     * 
     * Possible enum values:
     *  - `&#34;SCTP&#34;` is the SCTP protocol.
     *  - `&#34;TCP&#34;` is the TCP protocol.
     *  - `&#34;UDP&#34;` is the UDP protocol.
     * 
     */
    @Import(name="protocol")
    private @Nullable Output<String> protocol;

    public Optional<Output<String>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    private ContainerPortArgs() {}

    private ContainerPortArgs(ContainerPortArgs $) {
        this.containerPort = $.containerPort;
        this.hostIP = $.hostIP;
        this.hostPort = $.hostPort;
        this.name = $.name;
        this.protocol = $.protocol;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContainerPortArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContainerPortArgs $;

        public Builder() {
            $ = new ContainerPortArgs();
        }

        public Builder(ContainerPortArgs defaults) {
            $ = new ContainerPortArgs(Objects.requireNonNull(defaults));
        }

        public Builder containerPort(Output<Integer> containerPort) {
            $.containerPort = containerPort;
            return this;
        }

        public Builder containerPort(Integer containerPort) {
            return containerPort(Output.of(containerPort));
        }

        public Builder hostIP(@Nullable Output<String> hostIP) {
            $.hostIP = hostIP;
            return this;
        }

        public Builder hostIP(String hostIP) {
            return hostIP(Output.of(hostIP));
        }

        public Builder hostPort(@Nullable Output<Integer> hostPort) {
            $.hostPort = hostPort;
            return this;
        }

        public Builder hostPort(Integer hostPort) {
            return hostPort(Output.of(hostPort));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder protocol(@Nullable Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        public ContainerPortArgs build() {
            $.containerPort = Objects.requireNonNull($.containerPort, "expected parameter 'containerPort' to be non-null");
            return $;
        }
    }

}
