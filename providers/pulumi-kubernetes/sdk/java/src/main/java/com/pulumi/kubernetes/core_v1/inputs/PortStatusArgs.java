// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.core_v1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class PortStatusArgs extends com.pulumi.resources.ResourceArgs {

    public static final PortStatusArgs Empty = new PortStatusArgs();

    /**
     * Error is to record the problem with the service port The format of the error shall comply with the following rules: - built-in error values shall be specified in this file and those shall use
     *   CamelCase names
     * - cloud provider specific error values must have names that comply with the
     *   format foo.example.com/CamelCase.
     * 
     */
    @Import(name="error")
      private final @Nullable Output<String> error;

    public Output<String> error() {
        return this.error == null ? Codegen.empty() : this.error;
    }

    /**
     * Port is the port number of the service port of which status is recorded here
     * 
     */
    @Import(name="port", required=true)
      private final Output<Integer> port;

    public Output<Integer> port() {
        return this.port;
    }

    /**
     * Protocol is the protocol of the service port of which status is recorded here The supported values are: &#34;TCP&#34;, &#34;UDP&#34;, &#34;SCTP&#34;
     * 
     * Possible enum values:
     *  - `&#34;SCTP&#34;` is the SCTP protocol.
     *  - `&#34;TCP&#34;` is the TCP protocol.
     *  - `&#34;UDP&#34;` is the UDP protocol.
     * 
     */
    @Import(name="protocol", required=true)
      private final Output<String> protocol;

    public Output<String> protocol() {
        return this.protocol;
    }

    public PortStatusArgs(
        @Nullable Output<String> error,
        Output<Integer> port,
        Output<String> protocol) {
        this.error = error;
        this.port = Objects.requireNonNull(port, "expected parameter 'port' to be non-null");
        this.protocol = Objects.requireNonNull(protocol, "expected parameter 'protocol' to be non-null");
    }

    private PortStatusArgs() {
        this.error = Codegen.empty();
        this.port = Codegen.empty();
        this.protocol = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PortStatusArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> error;
        private Output<Integer> port;
        private Output<String> protocol;

        public Builder() {
    	      // Empty
        }

        public Builder(PortStatusArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.error = defaults.error;
    	      this.port = defaults.port;
    	      this.protocol = defaults.protocol;
        }

        public Builder error(@Nullable Output<String> error) {
            this.error = error;
            return this;
        }
        public Builder error(@Nullable String error) {
            this.error = Codegen.ofNullable(error);
            return this;
        }
        public Builder port(Output<Integer> port) {
            this.port = Objects.requireNonNull(port);
            return this;
        }
        public Builder port(Integer port) {
            this.port = Output.of(Objects.requireNonNull(port));
            return this;
        }
        public Builder protocol(Output<String> protocol) {
            this.protocol = Objects.requireNonNull(protocol);
            return this;
        }
        public Builder protocol(String protocol) {
            this.protocol = Output.of(Objects.requireNonNull(protocol));
            return this;
        }        public PortStatusArgs build() {
            return new PortStatusArgs(error, port, protocol);
        }
    }
}
