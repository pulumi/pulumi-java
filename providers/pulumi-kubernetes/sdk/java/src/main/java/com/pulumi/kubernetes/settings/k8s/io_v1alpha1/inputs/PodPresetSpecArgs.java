// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.settings.k8s.io_v1alpha1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.kubernetes.core_v1.inputs.EnvFromSourceArgs;
import com.pulumi.kubernetes.core_v1.inputs.EnvVarArgs;
import com.pulumi.kubernetes.core_v1.inputs.VolumeArgs;
import com.pulumi.kubernetes.core_v1.inputs.VolumeMountArgs;
import com.pulumi.kubernetes.meta_v1.inputs.LabelSelectorArgs;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * PodPresetSpec is a description of a pod preset.
 * 
 */
public final class PodPresetSpecArgs extends com.pulumi.resources.ResourceArgs {

    public static final PodPresetSpecArgs Empty = new PodPresetSpecArgs();

    /**
     * Env defines the collection of EnvVar to inject into containers.
     * 
     */
    @Import(name="env")
      private final @Nullable Output<List<EnvVarArgs>> env;

    public Output<List<EnvVarArgs>> env() {
        return this.env == null ? Codegen.empty() : this.env;
    }

    /**
     * EnvFrom defines the collection of EnvFromSource to inject into containers.
     * 
     */
    @Import(name="envFrom")
      private final @Nullable Output<List<EnvFromSourceArgs>> envFrom;

    public Output<List<EnvFromSourceArgs>> envFrom() {
        return this.envFrom == null ? Codegen.empty() : this.envFrom;
    }

    /**
     * Selector is a label query over a set of resources, in this case pods. Required.
     * 
     */
    @Import(name="selector")
      private final @Nullable Output<LabelSelectorArgs> selector;

    public Output<LabelSelectorArgs> selector() {
        return this.selector == null ? Codegen.empty() : this.selector;
    }

    /**
     * VolumeMounts defines the collection of VolumeMount to inject into containers.
     * 
     */
    @Import(name="volumeMounts")
      private final @Nullable Output<List<VolumeMountArgs>> volumeMounts;

    public Output<List<VolumeMountArgs>> volumeMounts() {
        return this.volumeMounts == null ? Codegen.empty() : this.volumeMounts;
    }

    /**
     * Volumes defines the collection of Volume to inject into the pod.
     * 
     */
    @Import(name="volumes")
      private final @Nullable Output<List<VolumeArgs>> volumes;

    public Output<List<VolumeArgs>> volumes() {
        return this.volumes == null ? Codegen.empty() : this.volumes;
    }

    public PodPresetSpecArgs(
        @Nullable Output<List<EnvVarArgs>> env,
        @Nullable Output<List<EnvFromSourceArgs>> envFrom,
        @Nullable Output<LabelSelectorArgs> selector,
        @Nullable Output<List<VolumeMountArgs>> volumeMounts,
        @Nullable Output<List<VolumeArgs>> volumes) {
        this.env = env;
        this.envFrom = envFrom;
        this.selector = selector;
        this.volumeMounts = volumeMounts;
        this.volumes = volumes;
    }

    private PodPresetSpecArgs() {
        this.env = Codegen.empty();
        this.envFrom = Codegen.empty();
        this.selector = Codegen.empty();
        this.volumeMounts = Codegen.empty();
        this.volumes = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PodPresetSpecArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<EnvVarArgs>> env;
        private @Nullable Output<List<EnvFromSourceArgs>> envFrom;
        private @Nullable Output<LabelSelectorArgs> selector;
        private @Nullable Output<List<VolumeMountArgs>> volumeMounts;
        private @Nullable Output<List<VolumeArgs>> volumes;

        public Builder() {
    	      // Empty
        }

        public Builder(PodPresetSpecArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.env = defaults.env;
    	      this.envFrom = defaults.envFrom;
    	      this.selector = defaults.selector;
    	      this.volumeMounts = defaults.volumeMounts;
    	      this.volumes = defaults.volumes;
        }

        public Builder env(@Nullable Output<List<EnvVarArgs>> env) {
            this.env = env;
            return this;
        }
        public Builder env(@Nullable List<EnvVarArgs> env) {
            this.env = Codegen.ofNullable(env);
            return this;
        }
        public Builder env(EnvVarArgs... env) {
            return env(List.of(env));
        }
        public Builder envFrom(@Nullable Output<List<EnvFromSourceArgs>> envFrom) {
            this.envFrom = envFrom;
            return this;
        }
        public Builder envFrom(@Nullable List<EnvFromSourceArgs> envFrom) {
            this.envFrom = Codegen.ofNullable(envFrom);
            return this;
        }
        public Builder envFrom(EnvFromSourceArgs... envFrom) {
            return envFrom(List.of(envFrom));
        }
        public Builder selector(@Nullable Output<LabelSelectorArgs> selector) {
            this.selector = selector;
            return this;
        }
        public Builder selector(@Nullable LabelSelectorArgs selector) {
            this.selector = Codegen.ofNullable(selector);
            return this;
        }
        public Builder volumeMounts(@Nullable Output<List<VolumeMountArgs>> volumeMounts) {
            this.volumeMounts = volumeMounts;
            return this;
        }
        public Builder volumeMounts(@Nullable List<VolumeMountArgs> volumeMounts) {
            this.volumeMounts = Codegen.ofNullable(volumeMounts);
            return this;
        }
        public Builder volumeMounts(VolumeMountArgs... volumeMounts) {
            return volumeMounts(List.of(volumeMounts));
        }
        public Builder volumes(@Nullable Output<List<VolumeArgs>> volumes) {
            this.volumes = volumes;
            return this;
        }
        public Builder volumes(@Nullable List<VolumeArgs> volumes) {
            this.volumes = Codegen.ofNullable(volumes);
            return this;
        }
        public Builder volumes(VolumeArgs... volumes) {
            return volumes(List.of(volumes));
        }        public PodPresetSpecArgs build() {
            return new PodPresetSpecArgs(env, envFrom, selector, volumeMounts, volumes);
        }
    }
}
