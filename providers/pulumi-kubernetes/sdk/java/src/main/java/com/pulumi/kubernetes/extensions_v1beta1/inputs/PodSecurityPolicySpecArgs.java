// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kubernetes.extensions_v1beta1.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.kubernetes.extensions_v1beta1.inputs.AllowedCSIDriverArgs;
import com.pulumi.kubernetes.extensions_v1beta1.inputs.AllowedFlexVolumeArgs;
import com.pulumi.kubernetes.extensions_v1beta1.inputs.AllowedHostPathArgs;
import com.pulumi.kubernetes.extensions_v1beta1.inputs.FSGroupStrategyOptionsArgs;
import com.pulumi.kubernetes.extensions_v1beta1.inputs.HostPortRangeArgs;
import com.pulumi.kubernetes.extensions_v1beta1.inputs.RunAsGroupStrategyOptionsArgs;
import com.pulumi.kubernetes.extensions_v1beta1.inputs.RunAsUserStrategyOptionsArgs;
import com.pulumi.kubernetes.extensions_v1beta1.inputs.RuntimeClassStrategyOptionsArgs;
import com.pulumi.kubernetes.extensions_v1beta1.inputs.SELinuxStrategyOptionsArgs;
import com.pulumi.kubernetes.extensions_v1beta1.inputs.SupplementalGroupsStrategyOptionsArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * PodSecurityPolicySpec defines the policy enforced. Deprecated: use PodSecurityPolicySpec from policy API Group instead.
 * 
 */
public final class PodSecurityPolicySpecArgs extends com.pulumi.resources.ResourceArgs {

    public static final PodSecurityPolicySpecArgs Empty = new PodSecurityPolicySpecArgs();

    /**
     * allowPrivilegeEscalation determines if a pod can request to allow privilege escalation. If unspecified, defaults to true.
     * 
     */
    @Import(name="allowPrivilegeEscalation")
    private @Nullable Output<Boolean> allowPrivilegeEscalation;

    public Optional<Output<Boolean>> allowPrivilegeEscalation() {
        return Optional.ofNullable(this.allowPrivilegeEscalation);
    }

    /**
     * AllowedCSIDrivers is a whitelist of inline CSI drivers that must be explicitly set to be embedded within a pod spec. An empty value indicates that any CSI driver can be used for inline ephemeral volumes.
     * 
     */
    @Import(name="allowedCSIDrivers")
    private @Nullable Output<List<AllowedCSIDriverArgs>> allowedCSIDrivers;

    public Optional<Output<List<AllowedCSIDriverArgs>>> allowedCSIDrivers() {
        return Optional.ofNullable(this.allowedCSIDrivers);
    }

    /**
     * allowedCapabilities is a list of capabilities that can be requested to add to the container. Capabilities in this field may be added at the pod author&#39;s discretion. You must not list a capability in both allowedCapabilities and requiredDropCapabilities.
     * 
     */
    @Import(name="allowedCapabilities")
    private @Nullable Output<List<String>> allowedCapabilities;

    public Optional<Output<List<String>>> allowedCapabilities() {
        return Optional.ofNullable(this.allowedCapabilities);
    }

    /**
     * allowedFlexVolumes is a whitelist of allowed Flexvolumes.  Empty or nil indicates that all Flexvolumes may be used.  This parameter is effective only when the usage of the Flexvolumes is allowed in the &#34;volumes&#34; field.
     * 
     */
    @Import(name="allowedFlexVolumes")
    private @Nullable Output<List<AllowedFlexVolumeArgs>> allowedFlexVolumes;

    public Optional<Output<List<AllowedFlexVolumeArgs>>> allowedFlexVolumes() {
        return Optional.ofNullable(this.allowedFlexVolumes);
    }

    /**
     * allowedHostPaths is a white list of allowed host paths. Empty indicates that all host paths may be used.
     * 
     */
    @Import(name="allowedHostPaths")
    private @Nullable Output<List<AllowedHostPathArgs>> allowedHostPaths;

    public Optional<Output<List<AllowedHostPathArgs>>> allowedHostPaths() {
        return Optional.ofNullable(this.allowedHostPaths);
    }

    /**
     * AllowedProcMountTypes is a whitelist of allowed ProcMountTypes. Empty or nil indicates that only the DefaultProcMountType may be used. This requires the ProcMountType feature flag to be enabled.
     * 
     */
    @Import(name="allowedProcMountTypes")
    private @Nullable Output<List<String>> allowedProcMountTypes;

    public Optional<Output<List<String>>> allowedProcMountTypes() {
        return Optional.ofNullable(this.allowedProcMountTypes);
    }

    /**
     * allowedUnsafeSysctls is a list of explicitly allowed unsafe sysctls, defaults to none. Each entry is either a plain sysctl name or ends in &#34;*&#34; in which case it is considered as a prefix of allowed sysctls. Single * means all unsafe sysctls are allowed. Kubelet has to whitelist all allowed unsafe sysctls explicitly to avoid rejection.
     * 
     * Examples: e.g. &#34;foo/*&#34; allows &#34;foo/bar&#34;, &#34;foo/baz&#34;, etc. e.g. &#34;foo.*&#34; allows &#34;foo.bar&#34;, &#34;foo.baz&#34;, etc.
     * 
     */
    @Import(name="allowedUnsafeSysctls")
    private @Nullable Output<List<String>> allowedUnsafeSysctls;

    public Optional<Output<List<String>>> allowedUnsafeSysctls() {
        return Optional.ofNullable(this.allowedUnsafeSysctls);
    }

    /**
     * defaultAddCapabilities is the default set of capabilities that will be added to the container unless the pod spec specifically drops the capability.  You may not list a capability in both defaultAddCapabilities and requiredDropCapabilities. Capabilities added here are implicitly allowed, and need not be included in the allowedCapabilities list.
     * 
     */
    @Import(name="defaultAddCapabilities")
    private @Nullable Output<List<String>> defaultAddCapabilities;

    public Optional<Output<List<String>>> defaultAddCapabilities() {
        return Optional.ofNullable(this.defaultAddCapabilities);
    }

    /**
     * defaultAllowPrivilegeEscalation controls the default setting for whether a process can gain more privileges than its parent process.
     * 
     */
    @Import(name="defaultAllowPrivilegeEscalation")
    private @Nullable Output<Boolean> defaultAllowPrivilegeEscalation;

    public Optional<Output<Boolean>> defaultAllowPrivilegeEscalation() {
        return Optional.ofNullable(this.defaultAllowPrivilegeEscalation);
    }

    /**
     * forbiddenSysctls is a list of explicitly forbidden sysctls, defaults to none. Each entry is either a plain sysctl name or ends in &#34;*&#34; in which case it is considered as a prefix of forbidden sysctls. Single * means all sysctls are forbidden.
     * 
     * Examples: e.g. &#34;foo/*&#34; forbids &#34;foo/bar&#34;, &#34;foo/baz&#34;, etc. e.g. &#34;foo.*&#34; forbids &#34;foo.bar&#34;, &#34;foo.baz&#34;, etc.
     * 
     */
    @Import(name="forbiddenSysctls")
    private @Nullable Output<List<String>> forbiddenSysctls;

    public Optional<Output<List<String>>> forbiddenSysctls() {
        return Optional.ofNullable(this.forbiddenSysctls);
    }

    /**
     * fsGroup is the strategy that will dictate what fs group is used by the SecurityContext.
     * 
     */
    @Import(name="fsGroup", required=true)
    private Output<FSGroupStrategyOptionsArgs> fsGroup;

    public Output<FSGroupStrategyOptionsArgs> fsGroup() {
        return this.fsGroup;
    }

    /**
     * hostIPC determines if the policy allows the use of HostIPC in the pod spec.
     * 
     */
    @Import(name="hostIPC")
    private @Nullable Output<Boolean> hostIPC;

    public Optional<Output<Boolean>> hostIPC() {
        return Optional.ofNullable(this.hostIPC);
    }

    /**
     * hostNetwork determines if the policy allows the use of HostNetwork in the pod spec.
     * 
     */
    @Import(name="hostNetwork")
    private @Nullable Output<Boolean> hostNetwork;

    public Optional<Output<Boolean>> hostNetwork() {
        return Optional.ofNullable(this.hostNetwork);
    }

    /**
     * hostPID determines if the policy allows the use of HostPID in the pod spec.
     * 
     */
    @Import(name="hostPID")
    private @Nullable Output<Boolean> hostPID;

    public Optional<Output<Boolean>> hostPID() {
        return Optional.ofNullable(this.hostPID);
    }

    /**
     * hostPorts determines which host port ranges are allowed to be exposed.
     * 
     */
    @Import(name="hostPorts")
    private @Nullable Output<List<HostPortRangeArgs>> hostPorts;

    public Optional<Output<List<HostPortRangeArgs>>> hostPorts() {
        return Optional.ofNullable(this.hostPorts);
    }

    /**
     * privileged determines if a pod can request to be run as privileged.
     * 
     */
    @Import(name="privileged")
    private @Nullable Output<Boolean> privileged;

    public Optional<Output<Boolean>> privileged() {
        return Optional.ofNullable(this.privileged);
    }

    /**
     * readOnlyRootFilesystem when set to true will force containers to run with a read only root file system.  If the container specifically requests to run with a non-read only root file system the PSP should deny the pod. If set to false the container may run with a read only root file system if it wishes but it will not be forced to.
     * 
     */
    @Import(name="readOnlyRootFilesystem")
    private @Nullable Output<Boolean> readOnlyRootFilesystem;

    public Optional<Output<Boolean>> readOnlyRootFilesystem() {
        return Optional.ofNullable(this.readOnlyRootFilesystem);
    }

    /**
     * requiredDropCapabilities are the capabilities that will be dropped from the container.  These are required to be dropped and cannot be added.
     * 
     */
    @Import(name="requiredDropCapabilities")
    private @Nullable Output<List<String>> requiredDropCapabilities;

    public Optional<Output<List<String>>> requiredDropCapabilities() {
        return Optional.ofNullable(this.requiredDropCapabilities);
    }

    /**
     * RunAsGroup is the strategy that will dictate the allowable RunAsGroup values that may be set. If this field is omitted, the pod&#39;s RunAsGroup can take any value. This field requires the RunAsGroup feature gate to be enabled.
     * 
     */
    @Import(name="runAsGroup")
    private @Nullable Output<RunAsGroupStrategyOptionsArgs> runAsGroup;

    public Optional<Output<RunAsGroupStrategyOptionsArgs>> runAsGroup() {
        return Optional.ofNullable(this.runAsGroup);
    }

    /**
     * runAsUser is the strategy that will dictate the allowable RunAsUser values that may be set.
     * 
     */
    @Import(name="runAsUser", required=true)
    private Output<RunAsUserStrategyOptionsArgs> runAsUser;

    public Output<RunAsUserStrategyOptionsArgs> runAsUser() {
        return this.runAsUser;
    }

    /**
     * runtimeClass is the strategy that will dictate the allowable RuntimeClasses for a pod. If this field is omitted, the pod&#39;s runtimeClassName field is unrestricted. Enforcement of this field depends on the RuntimeClass feature gate being enabled.
     * 
     */
    @Import(name="runtimeClass")
    private @Nullable Output<RuntimeClassStrategyOptionsArgs> runtimeClass;

    public Optional<Output<RuntimeClassStrategyOptionsArgs>> runtimeClass() {
        return Optional.ofNullable(this.runtimeClass);
    }

    /**
     * seLinux is the strategy that will dictate the allowable labels that may be set.
     * 
     */
    @Import(name="seLinux", required=true)
    private Output<SELinuxStrategyOptionsArgs> seLinux;

    public Output<SELinuxStrategyOptionsArgs> seLinux() {
        return this.seLinux;
    }

    /**
     * supplementalGroups is the strategy that will dictate what supplemental groups are used by the SecurityContext.
     * 
     */
    @Import(name="supplementalGroups", required=true)
    private Output<SupplementalGroupsStrategyOptionsArgs> supplementalGroups;

    public Output<SupplementalGroupsStrategyOptionsArgs> supplementalGroups() {
        return this.supplementalGroups;
    }

    /**
     * volumes is a white list of allowed volume plugins. Empty indicates that no volumes may be used. To allow all volumes you may use &#39;*&#39;.
     * 
     */
    @Import(name="volumes")
    private @Nullable Output<List<String>> volumes;

    public Optional<Output<List<String>>> volumes() {
        return Optional.ofNullable(this.volumes);
    }

    private PodSecurityPolicySpecArgs() {}

    private PodSecurityPolicySpecArgs(PodSecurityPolicySpecArgs $) {
        this.allowPrivilegeEscalation = $.allowPrivilegeEscalation;
        this.allowedCSIDrivers = $.allowedCSIDrivers;
        this.allowedCapabilities = $.allowedCapabilities;
        this.allowedFlexVolumes = $.allowedFlexVolumes;
        this.allowedHostPaths = $.allowedHostPaths;
        this.allowedProcMountTypes = $.allowedProcMountTypes;
        this.allowedUnsafeSysctls = $.allowedUnsafeSysctls;
        this.defaultAddCapabilities = $.defaultAddCapabilities;
        this.defaultAllowPrivilegeEscalation = $.defaultAllowPrivilegeEscalation;
        this.forbiddenSysctls = $.forbiddenSysctls;
        this.fsGroup = $.fsGroup;
        this.hostIPC = $.hostIPC;
        this.hostNetwork = $.hostNetwork;
        this.hostPID = $.hostPID;
        this.hostPorts = $.hostPorts;
        this.privileged = $.privileged;
        this.readOnlyRootFilesystem = $.readOnlyRootFilesystem;
        this.requiredDropCapabilities = $.requiredDropCapabilities;
        this.runAsGroup = $.runAsGroup;
        this.runAsUser = $.runAsUser;
        this.runtimeClass = $.runtimeClass;
        this.seLinux = $.seLinux;
        this.supplementalGroups = $.supplementalGroups;
        this.volumes = $.volumes;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PodSecurityPolicySpecArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PodSecurityPolicySpecArgs $;

        public Builder() {
            $ = new PodSecurityPolicySpecArgs();
        }

        public Builder(PodSecurityPolicySpecArgs defaults) {
            $ = new PodSecurityPolicySpecArgs(Objects.requireNonNull(defaults));
        }

        public Builder allowPrivilegeEscalation(@Nullable Output<Boolean> allowPrivilegeEscalation) {
            $.allowPrivilegeEscalation = allowPrivilegeEscalation;
            return this;
        }

        public Builder allowPrivilegeEscalation(Boolean allowPrivilegeEscalation) {
            return allowPrivilegeEscalation(Output.of(allowPrivilegeEscalation));
        }

        public Builder allowedCSIDrivers(@Nullable Output<List<AllowedCSIDriverArgs>> allowedCSIDrivers) {
            $.allowedCSIDrivers = allowedCSIDrivers;
            return this;
        }

        public Builder allowedCSIDrivers(List<AllowedCSIDriverArgs> allowedCSIDrivers) {
            return allowedCSIDrivers(Output.of(allowedCSIDrivers));
        }

        public Builder allowedCSIDrivers(AllowedCSIDriverArgs... allowedCSIDrivers) {
            return allowedCSIDrivers(List.of(allowedCSIDrivers));
        }

        public Builder allowedCapabilities(@Nullable Output<List<String>> allowedCapabilities) {
            $.allowedCapabilities = allowedCapabilities;
            return this;
        }

        public Builder allowedCapabilities(List<String> allowedCapabilities) {
            return allowedCapabilities(Output.of(allowedCapabilities));
        }

        public Builder allowedCapabilities(String... allowedCapabilities) {
            return allowedCapabilities(List.of(allowedCapabilities));
        }

        public Builder allowedFlexVolumes(@Nullable Output<List<AllowedFlexVolumeArgs>> allowedFlexVolumes) {
            $.allowedFlexVolumes = allowedFlexVolumes;
            return this;
        }

        public Builder allowedFlexVolumes(List<AllowedFlexVolumeArgs> allowedFlexVolumes) {
            return allowedFlexVolumes(Output.of(allowedFlexVolumes));
        }

        public Builder allowedFlexVolumes(AllowedFlexVolumeArgs... allowedFlexVolumes) {
            return allowedFlexVolumes(List.of(allowedFlexVolumes));
        }

        public Builder allowedHostPaths(@Nullable Output<List<AllowedHostPathArgs>> allowedHostPaths) {
            $.allowedHostPaths = allowedHostPaths;
            return this;
        }

        public Builder allowedHostPaths(List<AllowedHostPathArgs> allowedHostPaths) {
            return allowedHostPaths(Output.of(allowedHostPaths));
        }

        public Builder allowedHostPaths(AllowedHostPathArgs... allowedHostPaths) {
            return allowedHostPaths(List.of(allowedHostPaths));
        }

        public Builder allowedProcMountTypes(@Nullable Output<List<String>> allowedProcMountTypes) {
            $.allowedProcMountTypes = allowedProcMountTypes;
            return this;
        }

        public Builder allowedProcMountTypes(List<String> allowedProcMountTypes) {
            return allowedProcMountTypes(Output.of(allowedProcMountTypes));
        }

        public Builder allowedProcMountTypes(String... allowedProcMountTypes) {
            return allowedProcMountTypes(List.of(allowedProcMountTypes));
        }

        public Builder allowedUnsafeSysctls(@Nullable Output<List<String>> allowedUnsafeSysctls) {
            $.allowedUnsafeSysctls = allowedUnsafeSysctls;
            return this;
        }

        public Builder allowedUnsafeSysctls(List<String> allowedUnsafeSysctls) {
            return allowedUnsafeSysctls(Output.of(allowedUnsafeSysctls));
        }

        public Builder allowedUnsafeSysctls(String... allowedUnsafeSysctls) {
            return allowedUnsafeSysctls(List.of(allowedUnsafeSysctls));
        }

        public Builder defaultAddCapabilities(@Nullable Output<List<String>> defaultAddCapabilities) {
            $.defaultAddCapabilities = defaultAddCapabilities;
            return this;
        }

        public Builder defaultAddCapabilities(List<String> defaultAddCapabilities) {
            return defaultAddCapabilities(Output.of(defaultAddCapabilities));
        }

        public Builder defaultAddCapabilities(String... defaultAddCapabilities) {
            return defaultAddCapabilities(List.of(defaultAddCapabilities));
        }

        public Builder defaultAllowPrivilegeEscalation(@Nullable Output<Boolean> defaultAllowPrivilegeEscalation) {
            $.defaultAllowPrivilegeEscalation = defaultAllowPrivilegeEscalation;
            return this;
        }

        public Builder defaultAllowPrivilegeEscalation(Boolean defaultAllowPrivilegeEscalation) {
            return defaultAllowPrivilegeEscalation(Output.of(defaultAllowPrivilegeEscalation));
        }

        public Builder forbiddenSysctls(@Nullable Output<List<String>> forbiddenSysctls) {
            $.forbiddenSysctls = forbiddenSysctls;
            return this;
        }

        public Builder forbiddenSysctls(List<String> forbiddenSysctls) {
            return forbiddenSysctls(Output.of(forbiddenSysctls));
        }

        public Builder forbiddenSysctls(String... forbiddenSysctls) {
            return forbiddenSysctls(List.of(forbiddenSysctls));
        }

        public Builder fsGroup(Output<FSGroupStrategyOptionsArgs> fsGroup) {
            $.fsGroup = fsGroup;
            return this;
        }

        public Builder fsGroup(FSGroupStrategyOptionsArgs fsGroup) {
            return fsGroup(Output.of(fsGroup));
        }

        public Builder hostIPC(@Nullable Output<Boolean> hostIPC) {
            $.hostIPC = hostIPC;
            return this;
        }

        public Builder hostIPC(Boolean hostIPC) {
            return hostIPC(Output.of(hostIPC));
        }

        public Builder hostNetwork(@Nullable Output<Boolean> hostNetwork) {
            $.hostNetwork = hostNetwork;
            return this;
        }

        public Builder hostNetwork(Boolean hostNetwork) {
            return hostNetwork(Output.of(hostNetwork));
        }

        public Builder hostPID(@Nullable Output<Boolean> hostPID) {
            $.hostPID = hostPID;
            return this;
        }

        public Builder hostPID(Boolean hostPID) {
            return hostPID(Output.of(hostPID));
        }

        public Builder hostPorts(@Nullable Output<List<HostPortRangeArgs>> hostPorts) {
            $.hostPorts = hostPorts;
            return this;
        }

        public Builder hostPorts(List<HostPortRangeArgs> hostPorts) {
            return hostPorts(Output.of(hostPorts));
        }

        public Builder hostPorts(HostPortRangeArgs... hostPorts) {
            return hostPorts(List.of(hostPorts));
        }

        public Builder privileged(@Nullable Output<Boolean> privileged) {
            $.privileged = privileged;
            return this;
        }

        public Builder privileged(Boolean privileged) {
            return privileged(Output.of(privileged));
        }

        public Builder readOnlyRootFilesystem(@Nullable Output<Boolean> readOnlyRootFilesystem) {
            $.readOnlyRootFilesystem = readOnlyRootFilesystem;
            return this;
        }

        public Builder readOnlyRootFilesystem(Boolean readOnlyRootFilesystem) {
            return readOnlyRootFilesystem(Output.of(readOnlyRootFilesystem));
        }

        public Builder requiredDropCapabilities(@Nullable Output<List<String>> requiredDropCapabilities) {
            $.requiredDropCapabilities = requiredDropCapabilities;
            return this;
        }

        public Builder requiredDropCapabilities(List<String> requiredDropCapabilities) {
            return requiredDropCapabilities(Output.of(requiredDropCapabilities));
        }

        public Builder requiredDropCapabilities(String... requiredDropCapabilities) {
            return requiredDropCapabilities(List.of(requiredDropCapabilities));
        }

        public Builder runAsGroup(@Nullable Output<RunAsGroupStrategyOptionsArgs> runAsGroup) {
            $.runAsGroup = runAsGroup;
            return this;
        }

        public Builder runAsGroup(RunAsGroupStrategyOptionsArgs runAsGroup) {
            return runAsGroup(Output.of(runAsGroup));
        }

        public Builder runAsUser(Output<RunAsUserStrategyOptionsArgs> runAsUser) {
            $.runAsUser = runAsUser;
            return this;
        }

        public Builder runAsUser(RunAsUserStrategyOptionsArgs runAsUser) {
            return runAsUser(Output.of(runAsUser));
        }

        public Builder runtimeClass(@Nullable Output<RuntimeClassStrategyOptionsArgs> runtimeClass) {
            $.runtimeClass = runtimeClass;
            return this;
        }

        public Builder runtimeClass(RuntimeClassStrategyOptionsArgs runtimeClass) {
            return runtimeClass(Output.of(runtimeClass));
        }

        public Builder seLinux(Output<SELinuxStrategyOptionsArgs> seLinux) {
            $.seLinux = seLinux;
            return this;
        }

        public Builder seLinux(SELinuxStrategyOptionsArgs seLinux) {
            return seLinux(Output.of(seLinux));
        }

        public Builder supplementalGroups(Output<SupplementalGroupsStrategyOptionsArgs> supplementalGroups) {
            $.supplementalGroups = supplementalGroups;
            return this;
        }

        public Builder supplementalGroups(SupplementalGroupsStrategyOptionsArgs supplementalGroups) {
            return supplementalGroups(Output.of(supplementalGroups));
        }

        public Builder volumes(@Nullable Output<List<String>> volumes) {
            $.volumes = volumes;
            return this;
        }

        public Builder volumes(List<String> volumes) {
            return volumes(Output.of(volumes));
        }

        public Builder volumes(String... volumes) {
            return volumes(List.of(volumes));
        }

        public PodSecurityPolicySpecArgs build() {
            $.fsGroup = Objects.requireNonNull($.fsGroup, "expected parameter 'fsGroup' to be non-null");
            $.runAsUser = Objects.requireNonNull($.runAsUser, "expected parameter 'runAsUser' to be non-null");
            $.seLinux = Objects.requireNonNull($.seLinux, "expected parameter 'seLinux' to be non-null");
            $.supplementalGroups = Objects.requireNonNull($.supplementalGroups, "expected parameter 'supplementalGroups' to be non-null");
            return $;
        }
    }

}
