// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.kubernetes.core_v1.outputs;

import io.pulumi.core.annotations.CustomType;
import io.pulumi.kubernetes.core_v1.outputs.Affinity;
import io.pulumi.kubernetes.core_v1.outputs.Container;
import io.pulumi.kubernetes.core_v1.outputs.EphemeralContainer;
import io.pulumi.kubernetes.core_v1.outputs.HostAlias;
import io.pulumi.kubernetes.core_v1.outputs.LocalObjectReference;
import io.pulumi.kubernetes.core_v1.outputs.PodDNSConfig;
import io.pulumi.kubernetes.core_v1.outputs.PodOS;
import io.pulumi.kubernetes.core_v1.outputs.PodReadinessGate;
import io.pulumi.kubernetes.core_v1.outputs.PodSecurityContext;
import io.pulumi.kubernetes.core_v1.outputs.Toleration;
import io.pulumi.kubernetes.core_v1.outputs.TopologySpreadConstraint;
import io.pulumi.kubernetes.core_v1.outputs.Volume;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class PodSpec {
    /**
     * Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
     * 
     */
    private final @Nullable Integer activeDeadlineSeconds;
    /**
     * If specified, the pod's scheduling constraints
     * 
     */
    private final @Nullable Affinity affinity;
    /**
     * AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
     * 
     */
    private final @Nullable Boolean automountServiceAccountToken;
    /**
     * List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.
     * 
     */
    private final List<Container> containers;
    /**
     * Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.
     * 
     */
    private final @Nullable PodDNSConfig dnsConfig;
    /**
     * Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.
     * 
     * Possible enum values:
     *  - `"ClusterFirst"` indicates that the pod should use cluster DNS first unless hostNetwork is true, if it is available, then fall back on the default (as determined by kubelet) DNS settings.
     *  - `"ClusterFirstWithHostNet"` indicates that the pod should use cluster DNS first, if it is available, then fall back on the default (as determined by kubelet) DNS settings.
     *  - `"Default"` indicates that the pod should use the default (as determined by kubelet) DNS settings.
     *  - `"None"` indicates that the pod should use empty DNS settings. DNS parameters such as nameservers and search paths should be defined via DNSConfig.
     * 
     */
    private final @Nullable String dnsPolicy;
    /**
     * EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.
     * 
     */
    private final @Nullable Boolean enableServiceLinks;
    /**
     * List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource. This field is beta-level and available on clusters that haven't disabled the EphemeralContainers feature gate.
     * 
     */
    private final @Nullable List<EphemeralContainer> ephemeralContainers;
    /**
     * HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.
     * 
     */
    private final @Nullable List<HostAlias> hostAliases;
    /**
     * Use the host's ipc namespace. Optional: Default to false.
     * 
     */
    private final @Nullable Boolean hostIPC;
    /**
     * Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.
     * 
     */
    private final @Nullable Boolean hostNetwork;
    /**
     * Use the host's pid namespace. Optional: Default to false.
     * 
     */
    private final @Nullable Boolean hostPID;
    /**
     * Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
     * 
     */
    private final @Nullable String hostname;
    /**
     * ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
     * 
     */
    private final @Nullable List<LocalObjectReference> imagePullSecrets;
    /**
     * List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
     * 
     */
    private final @Nullable List<Container> initContainers;
    /**
     * NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
     * 
     */
    private final @Nullable String nodeName;
    /**
     * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
     * 
     */
    private final @Nullable Map<String,String> nodeSelector;
    /**
     * Specifies the OS of the containers in the pod. Some pod and container fields are restricted if this is set.
     * 
     * If the OS field is set to linux, the following fields must be unset: -securityContext.windowsOptions
     * 
     * If the OS field is set to windows, following fields must be unset: - spec.hostPID - spec.hostIPC - spec.securityContext.seLinuxOptions - spec.securityContext.seccompProfile - spec.securityContext.fsGroup - spec.securityContext.fsGroupChangePolicy - spec.securityContext.sysctls - spec.shareProcessNamespace - spec.securityContext.runAsUser - spec.securityContext.runAsGroup - spec.securityContext.supplementalGroups - spec.containers[*].securityContext.seLinuxOptions - spec.containers[*].securityContext.seccompProfile - spec.containers[*].securityContext.capabilities - spec.containers[*].securityContext.readOnlyRootFilesystem - spec.containers[*].securityContext.privileged - spec.containers[*].securityContext.allowPrivilegeEscalation - spec.containers[*].securityContext.procMount - spec.containers[*].securityContext.runAsUser - spec.containers[*].securityContext.runAsGroup This is an alpha field and requires the IdentifyPodOS feature
     * 
     */
    private final @Nullable PodOS os;
    /**
     * Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md This field is beta-level as of Kubernetes v1.18, and is only honored by servers that enable the PodOverhead feature.
     * 
     */
    private final @Nullable Map<String,String> overhead;
    /**
     * PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset. This field is beta-level, gated by the NonPreemptingPriority feature-gate.
     * 
     */
    private final @Nullable String preemptionPolicy;
    /**
     * The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.
     * 
     */
    private final @Nullable Integer priority;
    /**
     * If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
     * 
     */
    private final @Nullable String priorityClassName;
    /**
     * If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates
     * 
     */
    private final @Nullable List<PodReadinessGate> readinessGates;
    /**
     * Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy
     * 
     * Possible enum values:
     *  - `"Always"`
     *  - `"Never"`
     *  - `"OnFailure"`
     * 
     */
    private final @Nullable String restartPolicy;
    /**
     * RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the "legacy" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class This is a beta feature as of Kubernetes v1.14.
     * 
     */
    private final @Nullable String runtimeClassName;
    /**
     * If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
     * 
     */
    private final @Nullable String schedulerName;
    /**
     * SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.
     * 
     */
    private final @Nullable PodSecurityContext securityContext;
    /**
     * DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.
     * 
     */
    private final @Nullable String serviceAccount;
    /**
     * ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
     * 
     */
    private final @Nullable String serviceAccountName;
    /**
     * If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default). In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname). In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters to FQDN. If a pod does not have FQDN, this has no effect. Default to false.
     * 
     */
    private final @Nullable Boolean setHostnameAsFQDN;
    /**
     * Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false.
     * 
     */
    private final @Nullable Boolean shareProcessNamespace;
    /**
     * If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified, the pod will not have a domainname at all.
     * 
     */
    private final @Nullable String subdomain;
    /**
     * Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.
     * 
     */
    private final @Nullable Integer terminationGracePeriodSeconds;
    /**
     * If specified, the pod's tolerations.
     * 
     */
    private final @Nullable List<Toleration> tolerations;
    /**
     * TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. All topologySpreadConstraints are ANDed.
     * 
     */
    private final @Nullable List<TopologySpreadConstraint> topologySpreadConstraints;
    /**
     * List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes
     * 
     */
    private final @Nullable List<Volume> volumes;

    @CustomType.Constructor
    private PodSpec(
        @CustomType.Parameter("activeDeadlineSeconds") @Nullable Integer activeDeadlineSeconds,
        @CustomType.Parameter("affinity") @Nullable Affinity affinity,
        @CustomType.Parameter("automountServiceAccountToken") @Nullable Boolean automountServiceAccountToken,
        @CustomType.Parameter("containers") List<Container> containers,
        @CustomType.Parameter("dnsConfig") @Nullable PodDNSConfig dnsConfig,
        @CustomType.Parameter("dnsPolicy") @Nullable String dnsPolicy,
        @CustomType.Parameter("enableServiceLinks") @Nullable Boolean enableServiceLinks,
        @CustomType.Parameter("ephemeralContainers") @Nullable List<EphemeralContainer> ephemeralContainers,
        @CustomType.Parameter("hostAliases") @Nullable List<HostAlias> hostAliases,
        @CustomType.Parameter("hostIPC") @Nullable Boolean hostIPC,
        @CustomType.Parameter("hostNetwork") @Nullable Boolean hostNetwork,
        @CustomType.Parameter("hostPID") @Nullable Boolean hostPID,
        @CustomType.Parameter("hostname") @Nullable String hostname,
        @CustomType.Parameter("imagePullSecrets") @Nullable List<LocalObjectReference> imagePullSecrets,
        @CustomType.Parameter("initContainers") @Nullable List<Container> initContainers,
        @CustomType.Parameter("nodeName") @Nullable String nodeName,
        @CustomType.Parameter("nodeSelector") @Nullable Map<String,String> nodeSelector,
        @CustomType.Parameter("os") @Nullable PodOS os,
        @CustomType.Parameter("overhead") @Nullable Map<String,String> overhead,
        @CustomType.Parameter("preemptionPolicy") @Nullable String preemptionPolicy,
        @CustomType.Parameter("priority") @Nullable Integer priority,
        @CustomType.Parameter("priorityClassName") @Nullable String priorityClassName,
        @CustomType.Parameter("readinessGates") @Nullable List<PodReadinessGate> readinessGates,
        @CustomType.Parameter("restartPolicy") @Nullable String restartPolicy,
        @CustomType.Parameter("runtimeClassName") @Nullable String runtimeClassName,
        @CustomType.Parameter("schedulerName") @Nullable String schedulerName,
        @CustomType.Parameter("securityContext") @Nullable PodSecurityContext securityContext,
        @CustomType.Parameter("serviceAccount") @Nullable String serviceAccount,
        @CustomType.Parameter("serviceAccountName") @Nullable String serviceAccountName,
        @CustomType.Parameter("setHostnameAsFQDN") @Nullable Boolean setHostnameAsFQDN,
        @CustomType.Parameter("shareProcessNamespace") @Nullable Boolean shareProcessNamespace,
        @CustomType.Parameter("subdomain") @Nullable String subdomain,
        @CustomType.Parameter("terminationGracePeriodSeconds") @Nullable Integer terminationGracePeriodSeconds,
        @CustomType.Parameter("tolerations") @Nullable List<Toleration> tolerations,
        @CustomType.Parameter("topologySpreadConstraints") @Nullable List<TopologySpreadConstraint> topologySpreadConstraints,
        @CustomType.Parameter("volumes") @Nullable List<Volume> volumes) {
        this.activeDeadlineSeconds = activeDeadlineSeconds;
        this.affinity = affinity;
        this.automountServiceAccountToken = automountServiceAccountToken;
        this.containers = containers;
        this.dnsConfig = dnsConfig;
        this.dnsPolicy = dnsPolicy;
        this.enableServiceLinks = enableServiceLinks;
        this.ephemeralContainers = ephemeralContainers;
        this.hostAliases = hostAliases;
        this.hostIPC = hostIPC;
        this.hostNetwork = hostNetwork;
        this.hostPID = hostPID;
        this.hostname = hostname;
        this.imagePullSecrets = imagePullSecrets;
        this.initContainers = initContainers;
        this.nodeName = nodeName;
        this.nodeSelector = nodeSelector;
        this.os = os;
        this.overhead = overhead;
        this.preemptionPolicy = preemptionPolicy;
        this.priority = priority;
        this.priorityClassName = priorityClassName;
        this.readinessGates = readinessGates;
        this.restartPolicy = restartPolicy;
        this.runtimeClassName = runtimeClassName;
        this.schedulerName = schedulerName;
        this.securityContext = securityContext;
        this.serviceAccount = serviceAccount;
        this.serviceAccountName = serviceAccountName;
        this.setHostnameAsFQDN = setHostnameAsFQDN;
        this.shareProcessNamespace = shareProcessNamespace;
        this.subdomain = subdomain;
        this.terminationGracePeriodSeconds = terminationGracePeriodSeconds;
        this.tolerations = tolerations;
        this.topologySpreadConstraints = topologySpreadConstraints;
        this.volumes = volumes;
    }

    /**
     * Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
     * 
    */
    public Optional<Integer> getActiveDeadlineSeconds() {
        return Optional.ofNullable(this.activeDeadlineSeconds);
    }
    /**
     * If specified, the pod's scheduling constraints
     * 
    */
    public Optional<Affinity> getAffinity() {
        return Optional.ofNullable(this.affinity);
    }
    /**
     * AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
     * 
    */
    public Optional<Boolean> getAutomountServiceAccountToken() {
        return Optional.ofNullable(this.automountServiceAccountToken);
    }
    /**
     * List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.
     * 
    */
    public List<Container> getContainers() {
        return this.containers;
    }
    /**
     * Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.
     * 
    */
    public Optional<PodDNSConfig> getDnsConfig() {
        return Optional.ofNullable(this.dnsConfig);
    }
    /**
     * Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.
     * 
     * Possible enum values:
     *  - `"ClusterFirst"` indicates that the pod should use cluster DNS first unless hostNetwork is true, if it is available, then fall back on the default (as determined by kubelet) DNS settings.
     *  - `"ClusterFirstWithHostNet"` indicates that the pod should use cluster DNS first, if it is available, then fall back on the default (as determined by kubelet) DNS settings.
     *  - `"Default"` indicates that the pod should use the default (as determined by kubelet) DNS settings.
     *  - `"None"` indicates that the pod should use empty DNS settings. DNS parameters such as nameservers and search paths should be defined via DNSConfig.
     * 
    */
    public Optional<String> getDnsPolicy() {
        return Optional.ofNullable(this.dnsPolicy);
    }
    /**
     * EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.
     * 
    */
    public Optional<Boolean> getEnableServiceLinks() {
        return Optional.ofNullable(this.enableServiceLinks);
    }
    /**
     * List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource. This field is beta-level and available on clusters that haven't disabled the EphemeralContainers feature gate.
     * 
    */
    public List<EphemeralContainer> getEphemeralContainers() {
        return this.ephemeralContainers == null ? List.of() : this.ephemeralContainers;
    }
    /**
     * HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.
     * 
    */
    public List<HostAlias> getHostAliases() {
        return this.hostAliases == null ? List.of() : this.hostAliases;
    }
    /**
     * Use the host's ipc namespace. Optional: Default to false.
     * 
    */
    public Optional<Boolean> getHostIPC() {
        return Optional.ofNullable(this.hostIPC);
    }
    /**
     * Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.
     * 
    */
    public Optional<Boolean> getHostNetwork() {
        return Optional.ofNullable(this.hostNetwork);
    }
    /**
     * Use the host's pid namespace. Optional: Default to false.
     * 
    */
    public Optional<Boolean> getHostPID() {
        return Optional.ofNullable(this.hostPID);
    }
    /**
     * Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
     * 
    */
    public Optional<String> getHostname() {
        return Optional.ofNullable(this.hostname);
    }
    /**
     * ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
     * 
    */
    public List<LocalObjectReference> getImagePullSecrets() {
        return this.imagePullSecrets == null ? List.of() : this.imagePullSecrets;
    }
    /**
     * List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
     * 
    */
    public List<Container> getInitContainers() {
        return this.initContainers == null ? List.of() : this.initContainers;
    }
    /**
     * NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
     * 
    */
    public Optional<String> getNodeName() {
        return Optional.ofNullable(this.nodeName);
    }
    /**
     * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
     * 
    */
    public Map<String,String> getNodeSelector() {
        return this.nodeSelector == null ? Map.of() : this.nodeSelector;
    }
    /**
     * Specifies the OS of the containers in the pod. Some pod and container fields are restricted if this is set.
     * 
     * If the OS field is set to linux, the following fields must be unset: -securityContext.windowsOptions
     * 
     * If the OS field is set to windows, following fields must be unset: - spec.hostPID - spec.hostIPC - spec.securityContext.seLinuxOptions - spec.securityContext.seccompProfile - spec.securityContext.fsGroup - spec.securityContext.fsGroupChangePolicy - spec.securityContext.sysctls - spec.shareProcessNamespace - spec.securityContext.runAsUser - spec.securityContext.runAsGroup - spec.securityContext.supplementalGroups - spec.containers[*].securityContext.seLinuxOptions - spec.containers[*].securityContext.seccompProfile - spec.containers[*].securityContext.capabilities - spec.containers[*].securityContext.readOnlyRootFilesystem - spec.containers[*].securityContext.privileged - spec.containers[*].securityContext.allowPrivilegeEscalation - spec.containers[*].securityContext.procMount - spec.containers[*].securityContext.runAsUser - spec.containers[*].securityContext.runAsGroup This is an alpha field and requires the IdentifyPodOS feature
     * 
    */
    public Optional<PodOS> getOs() {
        return Optional.ofNullable(this.os);
    }
    /**
     * Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md This field is beta-level as of Kubernetes v1.18, and is only honored by servers that enable the PodOverhead feature.
     * 
    */
    public Map<String,String> getOverhead() {
        return this.overhead == null ? Map.of() : this.overhead;
    }
    /**
     * PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset. This field is beta-level, gated by the NonPreemptingPriority feature-gate.
     * 
    */
    public Optional<String> getPreemptionPolicy() {
        return Optional.ofNullable(this.preemptionPolicy);
    }
    /**
     * The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.
     * 
    */
    public Optional<Integer> getPriority() {
        return Optional.ofNullable(this.priority);
    }
    /**
     * If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
     * 
    */
    public Optional<String> getPriorityClassName() {
        return Optional.ofNullable(this.priorityClassName);
    }
    /**
     * If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates
     * 
    */
    public List<PodReadinessGate> getReadinessGates() {
        return this.readinessGates == null ? List.of() : this.readinessGates;
    }
    /**
     * Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy
     * 
     * Possible enum values:
     *  - `"Always"`
     *  - `"Never"`
     *  - `"OnFailure"`
     * 
    */
    public Optional<String> getRestartPolicy() {
        return Optional.ofNullable(this.restartPolicy);
    }
    /**
     * RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the "legacy" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class This is a beta feature as of Kubernetes v1.14.
     * 
    */
    public Optional<String> getRuntimeClassName() {
        return Optional.ofNullable(this.runtimeClassName);
    }
    /**
     * If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
     * 
    */
    public Optional<String> getSchedulerName() {
        return Optional.ofNullable(this.schedulerName);
    }
    /**
     * SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.
     * 
    */
    public Optional<PodSecurityContext> getSecurityContext() {
        return Optional.ofNullable(this.securityContext);
    }
    /**
     * DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.
     * 
    */
    public Optional<String> getServiceAccount() {
        return Optional.ofNullable(this.serviceAccount);
    }
    /**
     * ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
     * 
    */
    public Optional<String> getServiceAccountName() {
        return Optional.ofNullable(this.serviceAccountName);
    }
    /**
     * If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default). In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname). In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters to FQDN. If a pod does not have FQDN, this has no effect. Default to false.
     * 
    */
    public Optional<Boolean> getSetHostnameAsFQDN() {
        return Optional.ofNullable(this.setHostnameAsFQDN);
    }
    /**
     * Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false.
     * 
    */
    public Optional<Boolean> getShareProcessNamespace() {
        return Optional.ofNullable(this.shareProcessNamespace);
    }
    /**
     * If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified, the pod will not have a domainname at all.
     * 
    */
    public Optional<String> getSubdomain() {
        return Optional.ofNullable(this.subdomain);
    }
    /**
     * Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.
     * 
    */
    public Optional<Integer> getTerminationGracePeriodSeconds() {
        return Optional.ofNullable(this.terminationGracePeriodSeconds);
    }
    /**
     * If specified, the pod's tolerations.
     * 
    */
    public List<Toleration> getTolerations() {
        return this.tolerations == null ? List.of() : this.tolerations;
    }
    /**
     * TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. All topologySpreadConstraints are ANDed.
     * 
    */
    public List<TopologySpreadConstraint> getTopologySpreadConstraints() {
        return this.topologySpreadConstraints == null ? List.of() : this.topologySpreadConstraints;
    }
    /**
     * List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes
     * 
    */
    public List<Volume> getVolumes() {
        return this.volumes == null ? List.of() : this.volumes;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PodSpec defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Integer activeDeadlineSeconds;
        private @Nullable Affinity affinity;
        private @Nullable Boolean automountServiceAccountToken;
        private List<Container> containers;
        private @Nullable PodDNSConfig dnsConfig;
        private @Nullable String dnsPolicy;
        private @Nullable Boolean enableServiceLinks;
        private @Nullable List<EphemeralContainer> ephemeralContainers;
        private @Nullable List<HostAlias> hostAliases;
        private @Nullable Boolean hostIPC;
        private @Nullable Boolean hostNetwork;
        private @Nullable Boolean hostPID;
        private @Nullable String hostname;
        private @Nullable List<LocalObjectReference> imagePullSecrets;
        private @Nullable List<Container> initContainers;
        private @Nullable String nodeName;
        private @Nullable Map<String,String> nodeSelector;
        private @Nullable PodOS os;
        private @Nullable Map<String,String> overhead;
        private @Nullable String preemptionPolicy;
        private @Nullable Integer priority;
        private @Nullable String priorityClassName;
        private @Nullable List<PodReadinessGate> readinessGates;
        private @Nullable String restartPolicy;
        private @Nullable String runtimeClassName;
        private @Nullable String schedulerName;
        private @Nullable PodSecurityContext securityContext;
        private @Nullable String serviceAccount;
        private @Nullable String serviceAccountName;
        private @Nullable Boolean setHostnameAsFQDN;
        private @Nullable Boolean shareProcessNamespace;
        private @Nullable String subdomain;
        private @Nullable Integer terminationGracePeriodSeconds;
        private @Nullable List<Toleration> tolerations;
        private @Nullable List<TopologySpreadConstraint> topologySpreadConstraints;
        private @Nullable List<Volume> volumes;

        public Builder() {
    	      // Empty
        }

        public Builder(PodSpec defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activeDeadlineSeconds = defaults.activeDeadlineSeconds;
    	      this.affinity = defaults.affinity;
    	      this.automountServiceAccountToken = defaults.automountServiceAccountToken;
    	      this.containers = defaults.containers;
    	      this.dnsConfig = defaults.dnsConfig;
    	      this.dnsPolicy = defaults.dnsPolicy;
    	      this.enableServiceLinks = defaults.enableServiceLinks;
    	      this.ephemeralContainers = defaults.ephemeralContainers;
    	      this.hostAliases = defaults.hostAliases;
    	      this.hostIPC = defaults.hostIPC;
    	      this.hostNetwork = defaults.hostNetwork;
    	      this.hostPID = defaults.hostPID;
    	      this.hostname = defaults.hostname;
    	      this.imagePullSecrets = defaults.imagePullSecrets;
    	      this.initContainers = defaults.initContainers;
    	      this.nodeName = defaults.nodeName;
    	      this.nodeSelector = defaults.nodeSelector;
    	      this.os = defaults.os;
    	      this.overhead = defaults.overhead;
    	      this.preemptionPolicy = defaults.preemptionPolicy;
    	      this.priority = defaults.priority;
    	      this.priorityClassName = defaults.priorityClassName;
    	      this.readinessGates = defaults.readinessGates;
    	      this.restartPolicy = defaults.restartPolicy;
    	      this.runtimeClassName = defaults.runtimeClassName;
    	      this.schedulerName = defaults.schedulerName;
    	      this.securityContext = defaults.securityContext;
    	      this.serviceAccount = defaults.serviceAccount;
    	      this.serviceAccountName = defaults.serviceAccountName;
    	      this.setHostnameAsFQDN = defaults.setHostnameAsFQDN;
    	      this.shareProcessNamespace = defaults.shareProcessNamespace;
    	      this.subdomain = defaults.subdomain;
    	      this.terminationGracePeriodSeconds = defaults.terminationGracePeriodSeconds;
    	      this.tolerations = defaults.tolerations;
    	      this.topologySpreadConstraints = defaults.topologySpreadConstraints;
    	      this.volumes = defaults.volumes;
        }

        public Builder activeDeadlineSeconds(@Nullable Integer activeDeadlineSeconds) {
            this.activeDeadlineSeconds = activeDeadlineSeconds;
            return this;
        }

        public Builder affinity(@Nullable Affinity affinity) {
            this.affinity = affinity;
            return this;
        }

        public Builder automountServiceAccountToken(@Nullable Boolean automountServiceAccountToken) {
            this.automountServiceAccountToken = automountServiceAccountToken;
            return this;
        }

        public Builder containers(List<Container> containers) {
            this.containers = Objects.requireNonNull(containers);
            return this;
        }

        public Builder dnsConfig(@Nullable PodDNSConfig dnsConfig) {
            this.dnsConfig = dnsConfig;
            return this;
        }

        public Builder dnsPolicy(@Nullable String dnsPolicy) {
            this.dnsPolicy = dnsPolicy;
            return this;
        }

        public Builder enableServiceLinks(@Nullable Boolean enableServiceLinks) {
            this.enableServiceLinks = enableServiceLinks;
            return this;
        }

        public Builder ephemeralContainers(@Nullable List<EphemeralContainer> ephemeralContainers) {
            this.ephemeralContainers = ephemeralContainers;
            return this;
        }

        public Builder hostAliases(@Nullable List<HostAlias> hostAliases) {
            this.hostAliases = hostAliases;
            return this;
        }

        public Builder hostIPC(@Nullable Boolean hostIPC) {
            this.hostIPC = hostIPC;
            return this;
        }

        public Builder hostNetwork(@Nullable Boolean hostNetwork) {
            this.hostNetwork = hostNetwork;
            return this;
        }

        public Builder hostPID(@Nullable Boolean hostPID) {
            this.hostPID = hostPID;
            return this;
        }

        public Builder hostname(@Nullable String hostname) {
            this.hostname = hostname;
            return this;
        }

        public Builder imagePullSecrets(@Nullable List<LocalObjectReference> imagePullSecrets) {
            this.imagePullSecrets = imagePullSecrets;
            return this;
        }

        public Builder initContainers(@Nullable List<Container> initContainers) {
            this.initContainers = initContainers;
            return this;
        }

        public Builder nodeName(@Nullable String nodeName) {
            this.nodeName = nodeName;
            return this;
        }

        public Builder nodeSelector(@Nullable Map<String,String> nodeSelector) {
            this.nodeSelector = nodeSelector;
            return this;
        }

        public Builder os(@Nullable PodOS os) {
            this.os = os;
            return this;
        }

        public Builder overhead(@Nullable Map<String,String> overhead) {
            this.overhead = overhead;
            return this;
        }

        public Builder preemptionPolicy(@Nullable String preemptionPolicy) {
            this.preemptionPolicy = preemptionPolicy;
            return this;
        }

        public Builder priority(@Nullable Integer priority) {
            this.priority = priority;
            return this;
        }

        public Builder priorityClassName(@Nullable String priorityClassName) {
            this.priorityClassName = priorityClassName;
            return this;
        }

        public Builder readinessGates(@Nullable List<PodReadinessGate> readinessGates) {
            this.readinessGates = readinessGates;
            return this;
        }

        public Builder restartPolicy(@Nullable String restartPolicy) {
            this.restartPolicy = restartPolicy;
            return this;
        }

        public Builder runtimeClassName(@Nullable String runtimeClassName) {
            this.runtimeClassName = runtimeClassName;
            return this;
        }

        public Builder schedulerName(@Nullable String schedulerName) {
            this.schedulerName = schedulerName;
            return this;
        }

        public Builder securityContext(@Nullable PodSecurityContext securityContext) {
            this.securityContext = securityContext;
            return this;
        }

        public Builder serviceAccount(@Nullable String serviceAccount) {
            this.serviceAccount = serviceAccount;
            return this;
        }

        public Builder serviceAccountName(@Nullable String serviceAccountName) {
            this.serviceAccountName = serviceAccountName;
            return this;
        }

        public Builder setHostnameAsFQDN(@Nullable Boolean setHostnameAsFQDN) {
            this.setHostnameAsFQDN = setHostnameAsFQDN;
            return this;
        }

        public Builder shareProcessNamespace(@Nullable Boolean shareProcessNamespace) {
            this.shareProcessNamespace = shareProcessNamespace;
            return this;
        }

        public Builder subdomain(@Nullable String subdomain) {
            this.subdomain = subdomain;
            return this;
        }

        public Builder terminationGracePeriodSeconds(@Nullable Integer terminationGracePeriodSeconds) {
            this.terminationGracePeriodSeconds = terminationGracePeriodSeconds;
            return this;
        }

        public Builder tolerations(@Nullable List<Toleration> tolerations) {
            this.tolerations = tolerations;
            return this;
        }

        public Builder topologySpreadConstraints(@Nullable List<TopologySpreadConstraint> topologySpreadConstraints) {
            this.topologySpreadConstraints = topologySpreadConstraints;
            return this;
        }

        public Builder volumes(@Nullable List<Volume> volumes) {
            this.volumes = volumes;
            return this;
        }
        public PodSpec build() {
            return new PodSpec(activeDeadlineSeconds, affinity, automountServiceAccountToken, containers, dnsConfig, dnsPolicy, enableServiceLinks, ephemeralContainers, hostAliases, hostIPC, hostNetwork, hostPID, hostname, imagePullSecrets, initContainers, nodeName, nodeSelector, os, overhead, preemptionPolicy, priority, priorityClassName, readinessGates, restartPolicy, runtimeClassName, schedulerName, securityContext, serviceAccount, serviceAccountName, setHostnameAsFQDN, shareProcessNamespace, subdomain, terminationGracePeriodSeconds, tolerations, topologySpreadConstraints, volumes);
        }
    }
}
