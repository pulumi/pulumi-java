// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.kubernetes.core_v1.outputs;

import io.pulumi.core.Either;
import io.pulumi.core.internal.annotations.OutputCustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class ServicePort {
    private final @Nullable String appProtocol;
    private final @Nullable String name;
    private final @Nullable Integer nodePort;
    private final Integer port;
    private final @Nullable String protocol;
    private final @Nullable Either<Integer,String> targetPort;

    @OutputCustomType.Constructor({"appProtocol","name","nodePort","port","protocol","targetPort"})
    private ServicePort(
        @Nullable String appProtocol,
        @Nullable String name,
        @Nullable Integer nodePort,
        Integer port,
        @Nullable String protocol,
        @Nullable Either<Integer,String> targetPort) {
        this.appProtocol = appProtocol;
        this.name = name;
        this.nodePort = nodePort;
        this.port = Objects.requireNonNull(port);
        this.protocol = protocol;
        this.targetPort = targetPort;
    }

    public Optional<String> getAppProtocol() {
        return Optional.ofNullable(this.appProtocol);
    }
    public Optional<String> getName() {
        return Optional.ofNullable(this.name);
    }
    public Optional<Integer> getNodePort() {
        return Optional.ofNullable(this.nodePort);
    }
    public Integer getPort() {
        return this.port;
    }
    public Optional<String> getProtocol() {
        return Optional.ofNullable(this.protocol);
    }
    public Optional<Either<Integer,String>> getTargetPort() {
        return Optional.ofNullable(this.targetPort);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServicePort defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String appProtocol;
        private @Nullable String name;
        private @Nullable Integer nodePort;
        private Integer port;
        private @Nullable String protocol;
        private @Nullable Either<Integer,String> targetPort;

        public Builder() {
    	      // Empty
        }

        public Builder(ServicePort defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appProtocol = defaults.appProtocol;
    	      this.name = defaults.name;
    	      this.nodePort = defaults.nodePort;
    	      this.port = defaults.port;
    	      this.protocol = defaults.protocol;
    	      this.targetPort = defaults.targetPort;
        }

        public Builder setAppProtocol(@Nullable String appProtocol) {
            this.appProtocol = appProtocol;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = name;
            return this;
        }

        public Builder setNodePort(@Nullable Integer nodePort) {
            this.nodePort = nodePort;
            return this;
        }

        public Builder setPort(Integer port) {
            this.port = Objects.requireNonNull(port);
            return this;
        }

        public Builder setProtocol(@Nullable String protocol) {
            this.protocol = protocol;
            return this;
        }

        public Builder setTargetPort(@Nullable Either<Integer,String> targetPort) {
            this.targetPort = targetPort;
            return this;
        }

        public ServicePort build() {
            return new ServicePort(appProtocol, name, nodePort, port, protocol, targetPort);
        }
    }
}
