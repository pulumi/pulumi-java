// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.kubernetes.policy_v1.outputs;

import io.pulumi.core.annotations.OutputCustomType;
import io.pulumi.kubernetes.meta_v1.outputs.Condition;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class PodDisruptionBudgetStatus {
    /**
     * Conditions contain conditions for PDB. The disruption controller sets the DisruptionAllowed condition. The following are known values for the reason field (additional reasons could be added in the future): - SyncFailed: The controller encountered an error and wasn't able to compute
     *               the number of allowed disruptions. Therefore no disruptions are
     *               allowed and the status of the condition will be False.
     * - InsufficientPods: The number of pods are either at or below the number
     *                     required by the PodDisruptionBudget. No disruptions are
     *                     allowed and the status of the condition will be False.
     * - SufficientPods: There are more pods than required by the PodDisruptionBudget.
     *                   The condition will be True, and the number of allowed
     *                   disruptions are provided by the disruptionsAllowed property.
     * 
     */
    private final @Nullable List<Condition> conditions;
    /**
     * current number of healthy pods
     * 
     */
    private final Integer currentHealthy;
    /**
     * minimum desired number of healthy pods
     * 
     */
    private final Integer desiredHealthy;
    /**
     * DisruptedPods contains information about pods whose eviction was processed by the API server eviction subresource handler but has not yet been observed by the PodDisruptionBudget controller. A pod will be in this map from the time when the API server processed the eviction request to the time when the pod is seen by PDB controller as having been marked for deletion (or after a timeout). The key in the map is the name of the pod and the value is the time when the API server processed the eviction request. If the deletion didn't occur and a pod is still there it will be removed from the list automatically by PodDisruptionBudget controller after some time. If everything goes smooth this map should be empty for the most of the time. Large number of entries in the map may indicate problems with pod deletions.
     * 
     */
    private final @Nullable Map<String,String> disruptedPods;
    /**
     * Number of pod disruptions that are currently allowed.
     * 
     */
    private final Integer disruptionsAllowed;
    /**
     * total number of pods counted by this disruption budget
     * 
     */
    private final Integer expectedPods;
    /**
     * Most recent generation observed when updating this PDB status. DisruptionsAllowed and other status information is valid only if observedGeneration equals to PDB's object generation.
     * 
     */
    private final @Nullable Integer observedGeneration;

    @OutputCustomType.Constructor({"conditions","currentHealthy","desiredHealthy","disruptedPods","disruptionsAllowed","expectedPods","observedGeneration"})
    private PodDisruptionBudgetStatus(
        @Nullable List<Condition> conditions,
        Integer currentHealthy,
        Integer desiredHealthy,
        @Nullable Map<String,String> disruptedPods,
        Integer disruptionsAllowed,
        Integer expectedPods,
        @Nullable Integer observedGeneration) {
        this.conditions = conditions;
        this.currentHealthy = Objects.requireNonNull(currentHealthy);
        this.desiredHealthy = Objects.requireNonNull(desiredHealthy);
        this.disruptedPods = disruptedPods;
        this.disruptionsAllowed = Objects.requireNonNull(disruptionsAllowed);
        this.expectedPods = Objects.requireNonNull(expectedPods);
        this.observedGeneration = observedGeneration;
    }

    /**
     * Conditions contain conditions for PDB. The disruption controller sets the DisruptionAllowed condition. The following are known values for the reason field (additional reasons could be added in the future): - SyncFailed: The controller encountered an error and wasn't able to compute
     *               the number of allowed disruptions. Therefore no disruptions are
     *               allowed and the status of the condition will be False.
     * - InsufficientPods: The number of pods are either at or below the number
     *                     required by the PodDisruptionBudget. No disruptions are
     *                     allowed and the status of the condition will be False.
     * - SufficientPods: There are more pods than required by the PodDisruptionBudget.
     *                   The condition will be True, and the number of allowed
     *                   disruptions are provided by the disruptionsAllowed property.
     * 
    */
    public List<Condition> getConditions() {
        return this.conditions == null ? List.of() : this.conditions;
    }
    /**
     * current number of healthy pods
     * 
    */
    public Integer getCurrentHealthy() {
        return this.currentHealthy;
    }
    /**
     * minimum desired number of healthy pods
     * 
    */
    public Integer getDesiredHealthy() {
        return this.desiredHealthy;
    }
    /**
     * DisruptedPods contains information about pods whose eviction was processed by the API server eviction subresource handler but has not yet been observed by the PodDisruptionBudget controller. A pod will be in this map from the time when the API server processed the eviction request to the time when the pod is seen by PDB controller as having been marked for deletion (or after a timeout). The key in the map is the name of the pod and the value is the time when the API server processed the eviction request. If the deletion didn't occur and a pod is still there it will be removed from the list automatically by PodDisruptionBudget controller after some time. If everything goes smooth this map should be empty for the most of the time. Large number of entries in the map may indicate problems with pod deletions.
     * 
    */
    public Map<String,String> getDisruptedPods() {
        return this.disruptedPods == null ? Map.of() : this.disruptedPods;
    }
    /**
     * Number of pod disruptions that are currently allowed.
     * 
    */
    public Integer getDisruptionsAllowed() {
        return this.disruptionsAllowed;
    }
    /**
     * total number of pods counted by this disruption budget
     * 
    */
    public Integer getExpectedPods() {
        return this.expectedPods;
    }
    /**
     * Most recent generation observed when updating this PDB status. DisruptionsAllowed and other status information is valid only if observedGeneration equals to PDB's object generation.
     * 
    */
    public Optional<Integer> getObservedGeneration() {
        return Optional.ofNullable(this.observedGeneration);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PodDisruptionBudgetStatus defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<Condition> conditions;
        private Integer currentHealthy;
        private Integer desiredHealthy;
        private @Nullable Map<String,String> disruptedPods;
        private Integer disruptionsAllowed;
        private Integer expectedPods;
        private @Nullable Integer observedGeneration;

        public Builder() {
    	      // Empty
        }

        public Builder(PodDisruptionBudgetStatus defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.conditions = defaults.conditions;
    	      this.currentHealthy = defaults.currentHealthy;
    	      this.desiredHealthy = defaults.desiredHealthy;
    	      this.disruptedPods = defaults.disruptedPods;
    	      this.disruptionsAllowed = defaults.disruptionsAllowed;
    	      this.expectedPods = defaults.expectedPods;
    	      this.observedGeneration = defaults.observedGeneration;
        }

        public Builder setConditions(@Nullable List<Condition> conditions) {
            this.conditions = conditions;
            return this;
        }

        public Builder setCurrentHealthy(Integer currentHealthy) {
            this.currentHealthy = Objects.requireNonNull(currentHealthy);
            return this;
        }

        public Builder setDesiredHealthy(Integer desiredHealthy) {
            this.desiredHealthy = Objects.requireNonNull(desiredHealthy);
            return this;
        }

        public Builder setDisruptedPods(@Nullable Map<String,String> disruptedPods) {
            this.disruptedPods = disruptedPods;
            return this;
        }

        public Builder setDisruptionsAllowed(Integer disruptionsAllowed) {
            this.disruptionsAllowed = Objects.requireNonNull(disruptionsAllowed);
            return this;
        }

        public Builder setExpectedPods(Integer expectedPods) {
            this.expectedPods = Objects.requireNonNull(expectedPods);
            return this;
        }

        public Builder setObservedGeneration(@Nullable Integer observedGeneration) {
            this.observedGeneration = observedGeneration;
            return this;
        }
        public PodDisruptionBudgetStatus build() {
            return new PodDisruptionBudgetStatus(conditions, currentHealthy, desiredHealthy, disruptedPods, disruptionsAllowed, expectedPods, observedGeneration);
        }
    }
}
