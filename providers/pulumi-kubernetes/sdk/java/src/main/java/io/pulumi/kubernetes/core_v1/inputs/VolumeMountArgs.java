// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.kubernetes.core_v1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * VolumeMount describes a mounting of a Volume within a container.
 * 
 */
public final class VolumeMountArgs extends io.pulumi.resources.ResourceArgs {

    public static final VolumeMountArgs Empty = new VolumeMountArgs();

    /**
     * Path within the container at which the volume should be mounted.  Must not contain ':'.
     * 
     */
    @InputImport(name="mountPath", required=true)
      private final Output<String> mountPath;

    public Output<String> getMountPath() {
        return this.mountPath;
    }

    /**
     * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
     * 
     */
    @InputImport(name="mountPropagation")
      private final @Nullable Output<String> mountPropagation;

    public Output<String> getMountPropagation() {
        return this.mountPropagation == null ? Output.empty() : this.mountPropagation;
    }

    /**
     * This must match the Name of a Volume.
     * 
     */
    @InputImport(name="name", required=true)
      private final Output<String> name;

    public Output<String> getName() {
        return this.name;
    }

    /**
     * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
     * 
     */
    @InputImport(name="readOnly")
      private final @Nullable Output<Boolean> readOnly;

    public Output<Boolean> getReadOnly() {
        return this.readOnly == null ? Output.empty() : this.readOnly;
    }

    /**
     * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
     * 
     */
    @InputImport(name="subPath")
      private final @Nullable Output<String> subPath;

    public Output<String> getSubPath() {
        return this.subPath == null ? Output.empty() : this.subPath;
    }

    /**
     * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
     * 
     */
    @InputImport(name="subPathExpr")
      private final @Nullable Output<String> subPathExpr;

    public Output<String> getSubPathExpr() {
        return this.subPathExpr == null ? Output.empty() : this.subPathExpr;
    }

    public VolumeMountArgs(
        Output<String> mountPath,
        @Nullable Output<String> mountPropagation,
        Output<String> name,
        @Nullable Output<Boolean> readOnly,
        @Nullable Output<String> subPath,
        @Nullable Output<String> subPathExpr) {
        this.mountPath = Objects.requireNonNull(mountPath, "expected parameter 'mountPath' to be non-null");
        this.mountPropagation = mountPropagation;
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.readOnly = readOnly;
        this.subPath = subPath;
        this.subPathExpr = subPathExpr;
    }

    private VolumeMountArgs() {
        this.mountPath = Output.empty();
        this.mountPropagation = Output.empty();
        this.name = Output.empty();
        this.readOnly = Output.empty();
        this.subPath = Output.empty();
        this.subPathExpr = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VolumeMountArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> mountPath;
        private @Nullable Output<String> mountPropagation;
        private Output<String> name;
        private @Nullable Output<Boolean> readOnly;
        private @Nullable Output<String> subPath;
        private @Nullable Output<String> subPathExpr;

        public Builder() {
    	      // Empty
        }

        public Builder(VolumeMountArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.mountPath = defaults.mountPath;
    	      this.mountPropagation = defaults.mountPropagation;
    	      this.name = defaults.name;
    	      this.readOnly = defaults.readOnly;
    	      this.subPath = defaults.subPath;
    	      this.subPathExpr = defaults.subPathExpr;
        }

        public Builder mountPath(Output<String> mountPath) {
            this.mountPath = Objects.requireNonNull(mountPath);
            return this;
        }

        public Builder mountPath(String mountPath) {
            this.mountPath = Output.of(Objects.requireNonNull(mountPath));
            return this;
        }

        public Builder mountPropagation(@Nullable Output<String> mountPropagation) {
            this.mountPropagation = mountPropagation;
            return this;
        }

        public Builder mountPropagation(@Nullable String mountPropagation) {
            this.mountPropagation = Output.ofNullable(mountPropagation);
            return this;
        }

        public Builder name(Output<String> name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder name(String name) {
            this.name = Output.of(Objects.requireNonNull(name));
            return this;
        }

        public Builder readOnly(@Nullable Output<Boolean> readOnly) {
            this.readOnly = readOnly;
            return this;
        }

        public Builder readOnly(@Nullable Boolean readOnly) {
            this.readOnly = Output.ofNullable(readOnly);
            return this;
        }

        public Builder subPath(@Nullable Output<String> subPath) {
            this.subPath = subPath;
            return this;
        }

        public Builder subPath(@Nullable String subPath) {
            this.subPath = Output.ofNullable(subPath);
            return this;
        }

        public Builder subPathExpr(@Nullable Output<String> subPathExpr) {
            this.subPathExpr = subPathExpr;
            return this;
        }

        public Builder subPathExpr(@Nullable String subPathExpr) {
            this.subPathExpr = Output.ofNullable(subPathExpr);
            return this;
        }
        public VolumeMountArgs build() {
            return new VolumeMountArgs(mountPath, mountPropagation, name, readOnly, subPath, subPathExpr);
        }
    }
}
