// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.kubernetes.core_v1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.
 * 
 */
public final class FCVolumeSourceArgs extends io.pulumi.resources.ResourceArgs {

    public static final FCVolumeSourceArgs Empty = new FCVolumeSourceArgs();

    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
     * 
     */
    @Import(name="fsType")
      private final @Nullable Output<String> fsType;

    public Output<String> getFsType() {
        return this.fsType == null ? Codegen.empty() : this.fsType;
    }

    /**
     * Optional: FC target lun number
     * 
     */
    @Import(name="lun")
      private final @Nullable Output<Integer> lun;

    public Output<Integer> getLun() {
        return this.lun == null ? Codegen.empty() : this.lun;
    }

    /**
     * Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
     * 
     */
    @Import(name="readOnly")
      private final @Nullable Output<Boolean> readOnly;

    public Output<Boolean> getReadOnly() {
        return this.readOnly == null ? Codegen.empty() : this.readOnly;
    }

    /**
     * Optional: FC target worldwide names (WWNs)
     * 
     */
    @Import(name="targetWWNs")
      private final @Nullable Output<List<String>> targetWWNs;

    public Output<List<String>> getTargetWWNs() {
        return this.targetWWNs == null ? Codegen.empty() : this.targetWWNs;
    }

    /**
     * Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
     * 
     */
    @Import(name="wwids")
      private final @Nullable Output<List<String>> wwids;

    public Output<List<String>> getWwids() {
        return this.wwids == null ? Codegen.empty() : this.wwids;
    }

    public FCVolumeSourceArgs(
        @Nullable Output<String> fsType,
        @Nullable Output<Integer> lun,
        @Nullable Output<Boolean> readOnly,
        @Nullable Output<List<String>> targetWWNs,
        @Nullable Output<List<String>> wwids) {
        this.fsType = fsType;
        this.lun = lun;
        this.readOnly = readOnly;
        this.targetWWNs = targetWWNs;
        this.wwids = wwids;
    }

    private FCVolumeSourceArgs() {
        this.fsType = Codegen.empty();
        this.lun = Codegen.empty();
        this.readOnly = Codegen.empty();
        this.targetWWNs = Codegen.empty();
        this.wwids = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(FCVolumeSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> fsType;
        private @Nullable Output<Integer> lun;
        private @Nullable Output<Boolean> readOnly;
        private @Nullable Output<List<String>> targetWWNs;
        private @Nullable Output<List<String>> wwids;

        public Builder() {
    	      // Empty
        }

        public Builder(FCVolumeSourceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.fsType = defaults.fsType;
    	      this.lun = defaults.lun;
    	      this.readOnly = defaults.readOnly;
    	      this.targetWWNs = defaults.targetWWNs;
    	      this.wwids = defaults.wwids;
        }

        public Builder fsType(@Nullable Output<String> fsType) {
            this.fsType = fsType;
            return this;
        }
        public Builder fsType(@Nullable String fsType) {
            this.fsType = Codegen.ofNullable(fsType);
            return this;
        }
        public Builder lun(@Nullable Output<Integer> lun) {
            this.lun = lun;
            return this;
        }
        public Builder lun(@Nullable Integer lun) {
            this.lun = Codegen.ofNullable(lun);
            return this;
        }
        public Builder readOnly(@Nullable Output<Boolean> readOnly) {
            this.readOnly = readOnly;
            return this;
        }
        public Builder readOnly(@Nullable Boolean readOnly) {
            this.readOnly = Codegen.ofNullable(readOnly);
            return this;
        }
        public Builder targetWWNs(@Nullable Output<List<String>> targetWWNs) {
            this.targetWWNs = targetWWNs;
            return this;
        }
        public Builder targetWWNs(@Nullable List<String> targetWWNs) {
            this.targetWWNs = Codegen.ofNullable(targetWWNs);
            return this;
        }
        public Builder targetWWNs(String... targetWWNs) {
            return targetWWNs(List.of(targetWWNs));
        }
        public Builder wwids(@Nullable Output<List<String>> wwids) {
            this.wwids = wwids;
            return this;
        }
        public Builder wwids(@Nullable List<String> wwids) {
            this.wwids = Codegen.ofNullable(wwids);
            return this;
        }
        public Builder wwids(String... wwids) {
            return wwids(List.of(wwids));
        }        public FCVolumeSourceArgs build() {
            return new FCVolumeSourceArgs(fsType, lun, readOnly, targetWWNs, wwids);
        }
    }
}
