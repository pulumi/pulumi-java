// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.kubernetes.core_v1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * ServiceAccountTokenProjection represents a projected service account token volume. This projection can be used to insert a service account token into the pods runtime filesystem for use against APIs (Kubernetes API Server or otherwise).
 * 
 */
public final class ServiceAccountTokenProjectionArgs extends io.pulumi.resources.ResourceArgs {

    public static final ServiceAccountTokenProjectionArgs Empty = new ServiceAccountTokenProjectionArgs();

    /**
     * Audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
     * 
     */
    @InputImport(name="audience")
      private final @Nullable Input<String> audience;

    public Input<String> getAudience() {
        return this.audience == null ? Input.empty() : this.audience;
    }

    /**
     * ExpirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
     * 
     */
    @InputImport(name="expirationSeconds")
      private final @Nullable Input<Integer> expirationSeconds;

    public Input<Integer> getExpirationSeconds() {
        return this.expirationSeconds == null ? Input.empty() : this.expirationSeconds;
    }

    /**
     * Path is the path relative to the mount point of the file to project the token into.
     * 
     */
    @InputImport(name="path", required=true)
      private final Input<String> path;

    public Input<String> getPath() {
        return this.path;
    }

    public ServiceAccountTokenProjectionArgs(
        @Nullable Input<String> audience,
        @Nullable Input<Integer> expirationSeconds,
        Input<String> path) {
        this.audience = audience;
        this.expirationSeconds = expirationSeconds;
        this.path = Objects.requireNonNull(path, "expected parameter 'path' to be non-null");
    }

    private ServiceAccountTokenProjectionArgs() {
        this.audience = Input.empty();
        this.expirationSeconds = Input.empty();
        this.path = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServiceAccountTokenProjectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> audience;
        private @Nullable Input<Integer> expirationSeconds;
        private Input<String> path;

        public Builder() {
    	      // Empty
        }

        public Builder(ServiceAccountTokenProjectionArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.audience = defaults.audience;
    	      this.expirationSeconds = defaults.expirationSeconds;
    	      this.path = defaults.path;
        }

        public Builder setAudience(@Nullable Input<String> audience) {
            this.audience = audience;
            return this;
        }

        public Builder setAudience(@Nullable String audience) {
            this.audience = Input.ofNullable(audience);
            return this;
        }

        public Builder setExpirationSeconds(@Nullable Input<Integer> expirationSeconds) {
            this.expirationSeconds = expirationSeconds;
            return this;
        }

        public Builder setExpirationSeconds(@Nullable Integer expirationSeconds) {
            this.expirationSeconds = Input.ofNullable(expirationSeconds);
            return this;
        }

        public Builder setPath(Input<String> path) {
            this.path = Objects.requireNonNull(path);
            return this;
        }

        public Builder setPath(String path) {
            this.path = Input.of(Objects.requireNonNull(path));
            return this;
        }
        public ServiceAccountTokenProjectionArgs build() {
            return new ServiceAccountTokenProjectionArgs(audience, expirationSeconds, path);
        }
    }
}
