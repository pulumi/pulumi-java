// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.kubernetes.core_v1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.kubernetes.meta_v1.inputs.LabelSelectorArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class TopologySpreadConstraintArgs extends io.pulumi.resources.ResourceArgs {

    public static final TopologySpreadConstraintArgs Empty = new TopologySpreadConstraintArgs();

    @InputImport(name="labelSelector")
    private final @Nullable Input<LabelSelectorArgs> labelSelector;

    public Input<LabelSelectorArgs> getLabelSelector() {
        return this.labelSelector == null ? Input.empty() : this.labelSelector;
    }

    @InputImport(name="maxSkew", required=true)
    private final Input<Integer> maxSkew;

    public Input<Integer> getMaxSkew() {
        return this.maxSkew;
    }

    @InputImport(name="topologyKey", required=true)
    private final Input<String> topologyKey;

    public Input<String> getTopologyKey() {
        return this.topologyKey;
    }

    @InputImport(name="whenUnsatisfiable", required=true)
    private final Input<String> whenUnsatisfiable;

    public Input<String> getWhenUnsatisfiable() {
        return this.whenUnsatisfiable;
    }

    public TopologySpreadConstraintArgs(
        @Nullable Input<LabelSelectorArgs> labelSelector,
        Input<Integer> maxSkew,
        Input<String> topologyKey,
        Input<String> whenUnsatisfiable) {
        this.labelSelector = labelSelector;
        this.maxSkew = Objects.requireNonNull(maxSkew, "expected parameter 'maxSkew' to be non-null");
        this.topologyKey = Objects.requireNonNull(topologyKey, "expected parameter 'topologyKey' to be non-null");
        this.whenUnsatisfiable = Objects.requireNonNull(whenUnsatisfiable, "expected parameter 'whenUnsatisfiable' to be non-null");
    }

    private TopologySpreadConstraintArgs() {
        this.labelSelector = Input.empty();
        this.maxSkew = Input.empty();
        this.topologyKey = Input.empty();
        this.whenUnsatisfiable = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TopologySpreadConstraintArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<LabelSelectorArgs> labelSelector;
        private Input<Integer> maxSkew;
        private Input<String> topologyKey;
        private Input<String> whenUnsatisfiable;

        public Builder() {
    	      // Empty
        }

        public Builder(TopologySpreadConstraintArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.labelSelector = defaults.labelSelector;
    	      this.maxSkew = defaults.maxSkew;
    	      this.topologyKey = defaults.topologyKey;
    	      this.whenUnsatisfiable = defaults.whenUnsatisfiable;
        }

        public Builder setLabelSelector(@Nullable Input<LabelSelectorArgs> labelSelector) {
            this.labelSelector = labelSelector;
            return this;
        }

        public Builder setLabelSelector(@Nullable LabelSelectorArgs labelSelector) {
            this.labelSelector = Input.ofNullable(labelSelector);
            return this;
        }

        public Builder setMaxSkew(Input<Integer> maxSkew) {
            this.maxSkew = Objects.requireNonNull(maxSkew);
            return this;
        }

        public Builder setMaxSkew(Integer maxSkew) {
            this.maxSkew = Input.of(Objects.requireNonNull(maxSkew));
            return this;
        }

        public Builder setTopologyKey(Input<String> topologyKey) {
            this.topologyKey = Objects.requireNonNull(topologyKey);
            return this;
        }

        public Builder setTopologyKey(String topologyKey) {
            this.topologyKey = Input.of(Objects.requireNonNull(topologyKey));
            return this;
        }

        public Builder setWhenUnsatisfiable(Input<String> whenUnsatisfiable) {
            this.whenUnsatisfiable = Objects.requireNonNull(whenUnsatisfiable);
            return this;
        }

        public Builder setWhenUnsatisfiable(String whenUnsatisfiable) {
            this.whenUnsatisfiable = Input.of(Objects.requireNonNull(whenUnsatisfiable));
            return this;
        }

        public TopologySpreadConstraintArgs build() {
            return new TopologySpreadConstraintArgs(labelSelector, maxSkew, topologyKey, whenUnsatisfiable);
        }
    }
}
