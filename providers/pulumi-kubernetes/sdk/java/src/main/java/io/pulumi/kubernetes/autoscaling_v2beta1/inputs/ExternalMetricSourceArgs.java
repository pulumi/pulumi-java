// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.kubernetes.autoscaling_v2beta1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.kubernetes.meta_v1.inputs.LabelSelectorArgs;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * ExternalMetricSource indicates how to scale on a metric not associated with any Kubernetes object (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster). Exactly one "target" type should be set.
 * 
 */
public final class ExternalMetricSourceArgs extends io.pulumi.resources.ResourceArgs {

    public static final ExternalMetricSourceArgs Empty = new ExternalMetricSourceArgs();

    /**
     * metricName is the name of the metric in question.
     * 
     */
    @Import(name="metricName", required=true)
      private final Output<String> metricName;

    public Output<String> metricName() {
        return this.metricName;
    }

    /**
     * metricSelector is used to identify a specific time series within a given metric.
     * 
     */
    @Import(name="metricSelector")
      private final @Nullable Output<LabelSelectorArgs> metricSelector;

    public Output<LabelSelectorArgs> metricSelector() {
        return this.metricSelector == null ? Codegen.empty() : this.metricSelector;
    }

    /**
     * targetAverageValue is the target per-pod value of global metric (as a quantity). Mutually exclusive with TargetValue.
     * 
     */
    @Import(name="targetAverageValue")
      private final @Nullable Output<String> targetAverageValue;

    public Output<String> targetAverageValue() {
        return this.targetAverageValue == null ? Codegen.empty() : this.targetAverageValue;
    }

    /**
     * targetValue is the target value of the metric (as a quantity). Mutually exclusive with TargetAverageValue.
     * 
     */
    @Import(name="targetValue")
      private final @Nullable Output<String> targetValue;

    public Output<String> targetValue() {
        return this.targetValue == null ? Codegen.empty() : this.targetValue;
    }

    public ExternalMetricSourceArgs(
        Output<String> metricName,
        @Nullable Output<LabelSelectorArgs> metricSelector,
        @Nullable Output<String> targetAverageValue,
        @Nullable Output<String> targetValue) {
        this.metricName = Objects.requireNonNull(metricName, "expected parameter 'metricName' to be non-null");
        this.metricSelector = metricSelector;
        this.targetAverageValue = targetAverageValue;
        this.targetValue = targetValue;
    }

    private ExternalMetricSourceArgs() {
        this.metricName = Codegen.empty();
        this.metricSelector = Codegen.empty();
        this.targetAverageValue = Codegen.empty();
        this.targetValue = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ExternalMetricSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> metricName;
        private @Nullable Output<LabelSelectorArgs> metricSelector;
        private @Nullable Output<String> targetAverageValue;
        private @Nullable Output<String> targetValue;

        public Builder() {
    	      // Empty
        }

        public Builder(ExternalMetricSourceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.metricName = defaults.metricName;
    	      this.metricSelector = defaults.metricSelector;
    	      this.targetAverageValue = defaults.targetAverageValue;
    	      this.targetValue = defaults.targetValue;
        }

        public Builder metricName(Output<String> metricName) {
            this.metricName = Objects.requireNonNull(metricName);
            return this;
        }
        public Builder metricName(String metricName) {
            this.metricName = Output.of(Objects.requireNonNull(metricName));
            return this;
        }
        public Builder metricSelector(@Nullable Output<LabelSelectorArgs> metricSelector) {
            this.metricSelector = metricSelector;
            return this;
        }
        public Builder metricSelector(@Nullable LabelSelectorArgs metricSelector) {
            this.metricSelector = Codegen.ofNullable(metricSelector);
            return this;
        }
        public Builder targetAverageValue(@Nullable Output<String> targetAverageValue) {
            this.targetAverageValue = targetAverageValue;
            return this;
        }
        public Builder targetAverageValue(@Nullable String targetAverageValue) {
            this.targetAverageValue = Codegen.ofNullable(targetAverageValue);
            return this;
        }
        public Builder targetValue(@Nullable Output<String> targetValue) {
            this.targetValue = targetValue;
            return this;
        }
        public Builder targetValue(@Nullable String targetValue) {
            this.targetValue = Codegen.ofNullable(targetValue);
            return this;
        }        public ExternalMetricSourceArgs build() {
            return new ExternalMetricSourceArgs(metricName, metricSelector, targetAverageValue, targetValue);
        }
    }
}
