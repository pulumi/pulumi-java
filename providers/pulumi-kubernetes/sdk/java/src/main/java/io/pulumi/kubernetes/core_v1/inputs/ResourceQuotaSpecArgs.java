// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.kubernetes.core_v1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.kubernetes.core_v1.inputs.ScopeSelectorArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * ResourceQuotaSpec defines the desired hard limits to enforce for Quota.
 * 
 */
public final class ResourceQuotaSpecArgs extends io.pulumi.resources.ResourceArgs {

    public static final ResourceQuotaSpecArgs Empty = new ResourceQuotaSpecArgs();

    /**
     * hard is the set of desired hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/
     * 
     */
    @InputImport(name="hard")
      private final @Nullable Output<Map<String,String>> hard;

    public Output<Map<String,String>> getHard() {
        return this.hard == null ? Output.empty() : this.hard;
    }

    /**
     * scopeSelector is also a collection of filters like scopes that must match each object tracked by a quota but expressed using ScopeSelectorOperator in combination with possible values. For a resource to match, both scopes AND scopeSelector (if specified in spec), must be matched.
     * 
     */
    @InputImport(name="scopeSelector")
      private final @Nullable Output<ScopeSelectorArgs> scopeSelector;

    public Output<ScopeSelectorArgs> getScopeSelector() {
        return this.scopeSelector == null ? Output.empty() : this.scopeSelector;
    }

    /**
     * A collection of filters that must match each object tracked by a quota. If not specified, the quota matches all objects.
     * 
     */
    @InputImport(name="scopes")
      private final @Nullable Output<List<String>> scopes;

    public Output<List<String>> getScopes() {
        return this.scopes == null ? Output.empty() : this.scopes;
    }

    public ResourceQuotaSpecArgs(
        @Nullable Output<Map<String,String>> hard,
        @Nullable Output<ScopeSelectorArgs> scopeSelector,
        @Nullable Output<List<String>> scopes) {
        this.hard = hard;
        this.scopeSelector = scopeSelector;
        this.scopes = scopes;
    }

    private ResourceQuotaSpecArgs() {
        this.hard = Output.empty();
        this.scopeSelector = Output.empty();
        this.scopes = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ResourceQuotaSpecArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Map<String,String>> hard;
        private @Nullable Output<ScopeSelectorArgs> scopeSelector;
        private @Nullable Output<List<String>> scopes;

        public Builder() {
    	      // Empty
        }

        public Builder(ResourceQuotaSpecArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.hard = defaults.hard;
    	      this.scopeSelector = defaults.scopeSelector;
    	      this.scopes = defaults.scopes;
        }

        public Builder hard(@Nullable Output<Map<String,String>> hard) {
            this.hard = hard;
            return this;
        }

        public Builder hard(@Nullable Map<String,String> hard) {
            this.hard = Output.ofNullable(hard);
            return this;
        }

        public Builder scopeSelector(@Nullable Output<ScopeSelectorArgs> scopeSelector) {
            this.scopeSelector = scopeSelector;
            return this;
        }

        public Builder scopeSelector(@Nullable ScopeSelectorArgs scopeSelector) {
            this.scopeSelector = Output.ofNullable(scopeSelector);
            return this;
        }

        public Builder scopes(@Nullable Output<List<String>> scopes) {
            this.scopes = scopes;
            return this;
        }

        public Builder scopes(@Nullable List<String> scopes) {
            this.scopes = Output.ofNullable(scopes);
            return this;
        }
        public ResourceQuotaSpecArgs build() {
            return new ResourceQuotaSpecArgs(hard, scopeSelector, scopes);
        }
    }
}
