// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.kubernetes.discovery.k8s.io_v1beta1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.kubernetes.core_v1.inputs.ObjectReferenceArgs;
import io.pulumi.kubernetes.discovery.k8s.io_v1beta1.inputs.EndpointConditionsArgs;
import io.pulumi.kubernetes.discovery.k8s.io_v1beta1.inputs.EndpointHintsArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class EndpointArgs extends io.pulumi.resources.ResourceArgs {

    public static final EndpointArgs Empty = new EndpointArgs();

    @InputImport(name="addresses", required=true)
    private final Input<List<String>> addresses;

    public Input<List<String>> getAddresses() {
        return this.addresses;
    }

    @InputImport(name="conditions")
    private final @Nullable Input<EndpointConditionsArgs> conditions;

    public Input<EndpointConditionsArgs> getConditions() {
        return this.conditions == null ? Input.empty() : this.conditions;
    }

    @InputImport(name="hints")
    private final @Nullable Input<EndpointHintsArgs> hints;

    public Input<EndpointHintsArgs> getHints() {
        return this.hints == null ? Input.empty() : this.hints;
    }

    @InputImport(name="hostname")
    private final @Nullable Input<String> hostname;

    public Input<String> getHostname() {
        return this.hostname == null ? Input.empty() : this.hostname;
    }

    @InputImport(name="nodeName")
    private final @Nullable Input<String> nodeName;

    public Input<String> getNodeName() {
        return this.nodeName == null ? Input.empty() : this.nodeName;
    }

    @InputImport(name="targetRef")
    private final @Nullable Input<ObjectReferenceArgs> targetRef;

    public Input<ObjectReferenceArgs> getTargetRef() {
        return this.targetRef == null ? Input.empty() : this.targetRef;
    }

    @InputImport(name="topology")
    private final @Nullable Input<Map<String,String>> topology;

    public Input<Map<String,String>> getTopology() {
        return this.topology == null ? Input.empty() : this.topology;
    }

    public EndpointArgs(
        Input<List<String>> addresses,
        @Nullable Input<EndpointConditionsArgs> conditions,
        @Nullable Input<EndpointHintsArgs> hints,
        @Nullable Input<String> hostname,
        @Nullable Input<String> nodeName,
        @Nullable Input<ObjectReferenceArgs> targetRef,
        @Nullable Input<Map<String,String>> topology) {
        this.addresses = Objects.requireNonNull(addresses, "expected parameter 'addresses' to be non-null");
        this.conditions = conditions;
        this.hints = hints;
        this.hostname = hostname;
        this.nodeName = nodeName;
        this.targetRef = targetRef;
        this.topology = topology;
    }

    private EndpointArgs() {
        this.addresses = Input.empty();
        this.conditions = Input.empty();
        this.hints = Input.empty();
        this.hostname = Input.empty();
        this.nodeName = Input.empty();
        this.targetRef = Input.empty();
        this.topology = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EndpointArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<List<String>> addresses;
        private @Nullable Input<EndpointConditionsArgs> conditions;
        private @Nullable Input<EndpointHintsArgs> hints;
        private @Nullable Input<String> hostname;
        private @Nullable Input<String> nodeName;
        private @Nullable Input<ObjectReferenceArgs> targetRef;
        private @Nullable Input<Map<String,String>> topology;

        public Builder() {
    	      // Empty
        }

        public Builder(EndpointArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.addresses = defaults.addresses;
    	      this.conditions = defaults.conditions;
    	      this.hints = defaults.hints;
    	      this.hostname = defaults.hostname;
    	      this.nodeName = defaults.nodeName;
    	      this.targetRef = defaults.targetRef;
    	      this.topology = defaults.topology;
        }

        public Builder setAddresses(Input<List<String>> addresses) {
            this.addresses = Objects.requireNonNull(addresses);
            return this;
        }

        public Builder setAddresses(List<String> addresses) {
            this.addresses = Input.of(Objects.requireNonNull(addresses));
            return this;
        }

        public Builder setConditions(@Nullable Input<EndpointConditionsArgs> conditions) {
            this.conditions = conditions;
            return this;
        }

        public Builder setConditions(@Nullable EndpointConditionsArgs conditions) {
            this.conditions = Input.ofNullable(conditions);
            return this;
        }

        public Builder setHints(@Nullable Input<EndpointHintsArgs> hints) {
            this.hints = hints;
            return this;
        }

        public Builder setHints(@Nullable EndpointHintsArgs hints) {
            this.hints = Input.ofNullable(hints);
            return this;
        }

        public Builder setHostname(@Nullable Input<String> hostname) {
            this.hostname = hostname;
            return this;
        }

        public Builder setHostname(@Nullable String hostname) {
            this.hostname = Input.ofNullable(hostname);
            return this;
        }

        public Builder setNodeName(@Nullable Input<String> nodeName) {
            this.nodeName = nodeName;
            return this;
        }

        public Builder setNodeName(@Nullable String nodeName) {
            this.nodeName = Input.ofNullable(nodeName);
            return this;
        }

        public Builder setTargetRef(@Nullable Input<ObjectReferenceArgs> targetRef) {
            this.targetRef = targetRef;
            return this;
        }

        public Builder setTargetRef(@Nullable ObjectReferenceArgs targetRef) {
            this.targetRef = Input.ofNullable(targetRef);
            return this;
        }

        public Builder setTopology(@Nullable Input<Map<String,String>> topology) {
            this.topology = topology;
            return this;
        }

        public Builder setTopology(@Nullable Map<String,String> topology) {
            this.topology = Input.ofNullable(topology);
            return this;
        }

        public EndpointArgs build() {
            return new EndpointArgs(addresses, conditions, hints, hostname, nodeName, targetRef, topology);
        }
    }
}
