// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.kubernetes.discovery.k8s.io_v1beta1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * EndpointConditions represents the current condition of an endpoint.
 * 
 */
public final class EndpointConditionsArgs extends io.pulumi.resources.ResourceArgs {

    public static final EndpointConditionsArgs Empty = new EndpointConditionsArgs();

    /**
     * ready indicates that this endpoint is prepared to receive traffic, according to whatever system is managing the endpoint. A nil value indicates an unknown state. In most cases consumers should interpret this unknown state as ready. For compatibility reasons, ready should never be "true" for terminating endpoints.
     * 
     */
    @InputImport(name="ready")
        private final @Nullable Input<Boolean> ready;

    public Input<Boolean> getReady() {
        return this.ready == null ? Input.empty() : this.ready;
    }

    /**
     * serving is identical to ready except that it is set regardless of the terminating state of endpoints. This condition should be set to true for a ready endpoint that is terminating. If nil, consumers should defer to the ready condition. This field can be enabled with the EndpointSliceTerminatingCondition feature gate.
     * 
     */
    @InputImport(name="serving")
        private final @Nullable Input<Boolean> serving;

    public Input<Boolean> getServing() {
        return this.serving == null ? Input.empty() : this.serving;
    }

    /**
     * terminating indicates that this endpoint is terminating. A nil value indicates an unknown state. Consumers should interpret this unknown state to mean that the endpoint is not terminating. This field can be enabled with the EndpointSliceTerminatingCondition feature gate.
     * 
     */
    @InputImport(name="terminating")
        private final @Nullable Input<Boolean> terminating;

    public Input<Boolean> getTerminating() {
        return this.terminating == null ? Input.empty() : this.terminating;
    }

    public EndpointConditionsArgs(
        @Nullable Input<Boolean> ready,
        @Nullable Input<Boolean> serving,
        @Nullable Input<Boolean> terminating) {
        this.ready = ready;
        this.serving = serving;
        this.terminating = terminating;
    }

    private EndpointConditionsArgs() {
        this.ready = Input.empty();
        this.serving = Input.empty();
        this.terminating = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EndpointConditionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Boolean> ready;
        private @Nullable Input<Boolean> serving;
        private @Nullable Input<Boolean> terminating;

        public Builder() {
    	      // Empty
        }

        public Builder(EndpointConditionsArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ready = defaults.ready;
    	      this.serving = defaults.serving;
    	      this.terminating = defaults.terminating;
        }

        public Builder setReady(@Nullable Input<Boolean> ready) {
            this.ready = ready;
            return this;
        }

        public Builder setReady(@Nullable Boolean ready) {
            this.ready = Input.ofNullable(ready);
            return this;
        }

        public Builder setServing(@Nullable Input<Boolean> serving) {
            this.serving = serving;
            return this;
        }

        public Builder setServing(@Nullable Boolean serving) {
            this.serving = Input.ofNullable(serving);
            return this;
        }

        public Builder setTerminating(@Nullable Input<Boolean> terminating) {
            this.terminating = terminating;
            return this;
        }

        public Builder setTerminating(@Nullable Boolean terminating) {
            this.terminating = Input.ofNullable(terminating);
            return this;
        }
        public EndpointConditionsArgs build() {
            return new EndpointConditionsArgs(ready, serving, terminating);
        }
    }
}
