// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.kubernetes.core_v1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.
 * 
 */
public final class QuobyteVolumeSourceArgs extends io.pulumi.resources.ResourceArgs {

    public static final QuobyteVolumeSourceArgs Empty = new QuobyteVolumeSourceArgs();

    /**
     * Group to map volume access to Default is no group
     * 
     */
    @Import(name="group")
      private final @Nullable Output<String> group;

    public Output<String> getGroup() {
        return this.group == null ? Output.empty() : this.group;
    }

    /**
     * ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
     * 
     */
    @Import(name="readOnly")
      private final @Nullable Output<Boolean> readOnly;

    public Output<Boolean> getReadOnly() {
        return this.readOnly == null ? Output.empty() : this.readOnly;
    }

    /**
     * Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
     * 
     */
    @Import(name="registry", required=true)
      private final Output<String> registry;

    public Output<String> getRegistry() {
        return this.registry;
    }

    /**
     * Tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
     * 
     */
    @Import(name="tenant")
      private final @Nullable Output<String> tenant;

    public Output<String> getTenant() {
        return this.tenant == null ? Output.empty() : this.tenant;
    }

    /**
     * User to map volume access to Defaults to serivceaccount user
     * 
     */
    @Import(name="user")
      private final @Nullable Output<String> user;

    public Output<String> getUser() {
        return this.user == null ? Output.empty() : this.user;
    }

    /**
     * Volume is a string that references an already created Quobyte volume by name.
     * 
     */
    @Import(name="volume", required=true)
      private final Output<String> volume;

    public Output<String> getVolume() {
        return this.volume;
    }

    public QuobyteVolumeSourceArgs(
        @Nullable Output<String> group,
        @Nullable Output<Boolean> readOnly,
        Output<String> registry,
        @Nullable Output<String> tenant,
        @Nullable Output<String> user,
        Output<String> volume) {
        this.group = group;
        this.readOnly = readOnly;
        this.registry = Objects.requireNonNull(registry, "expected parameter 'registry' to be non-null");
        this.tenant = tenant;
        this.user = user;
        this.volume = Objects.requireNonNull(volume, "expected parameter 'volume' to be non-null");
    }

    private QuobyteVolumeSourceArgs() {
        this.group = Output.empty();
        this.readOnly = Output.empty();
        this.registry = Output.empty();
        this.tenant = Output.empty();
        this.user = Output.empty();
        this.volume = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(QuobyteVolumeSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> group;
        private @Nullable Output<Boolean> readOnly;
        private Output<String> registry;
        private @Nullable Output<String> tenant;
        private @Nullable Output<String> user;
        private Output<String> volume;

        public Builder() {
    	      // Empty
        }

        public Builder(QuobyteVolumeSourceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.group = defaults.group;
    	      this.readOnly = defaults.readOnly;
    	      this.registry = defaults.registry;
    	      this.tenant = defaults.tenant;
    	      this.user = defaults.user;
    	      this.volume = defaults.volume;
        }

        public Builder group(@Nullable Output<String> group) {
            this.group = group;
            return this;
        }
        public Builder group(@Nullable String group) {
            this.group = Output.ofNullable(group);
            return this;
        }
        public Builder readOnly(@Nullable Output<Boolean> readOnly) {
            this.readOnly = readOnly;
            return this;
        }
        public Builder readOnly(@Nullable Boolean readOnly) {
            this.readOnly = Output.ofNullable(readOnly);
            return this;
        }
        public Builder registry(Output<String> registry) {
            this.registry = Objects.requireNonNull(registry);
            return this;
        }
        public Builder registry(String registry) {
            this.registry = Output.of(Objects.requireNonNull(registry));
            return this;
        }
        public Builder tenant(@Nullable Output<String> tenant) {
            this.tenant = tenant;
            return this;
        }
        public Builder tenant(@Nullable String tenant) {
            this.tenant = Output.ofNullable(tenant);
            return this;
        }
        public Builder user(@Nullable Output<String> user) {
            this.user = user;
            return this;
        }
        public Builder user(@Nullable String user) {
            this.user = Output.ofNullable(user);
            return this;
        }
        public Builder volume(Output<String> volume) {
            this.volume = Objects.requireNonNull(volume);
            return this;
        }
        public Builder volume(String volume) {
            this.volume = Output.of(Objects.requireNonNull(volume));
            return this;
        }        public QuobyteVolumeSourceArgs build() {
            return new QuobyteVolumeSourceArgs(group, readOnly, registry, tenant, user, volume);
        }
    }
}
