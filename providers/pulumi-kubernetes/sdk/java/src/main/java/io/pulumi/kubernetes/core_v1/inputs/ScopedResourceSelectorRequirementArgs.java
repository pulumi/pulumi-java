// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.kubernetes.core_v1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * A scoped-resource selector requirement is a selector that contains values, a scope name, and an operator that relates the scope name and values.
 * 
 */
public final class ScopedResourceSelectorRequirementArgs extends io.pulumi.resources.ResourceArgs {

    public static final ScopedResourceSelectorRequirementArgs Empty = new ScopedResourceSelectorRequirementArgs();

    /**
     * Represents a scope's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist.
     * 
     * Possible enum values:
     *  - `"DoesNotExist"`
     *  - `"Exists"`
     *  - `"In"`
     *  - `"NotIn"`
     * 
     */
    @InputImport(name="operator", required=true)
        private final Input<String> operator;

    public Input<String> getOperator() {
        return this.operator;
    }

    /**
     * The name of the scope that the selector applies to.
     * 
     * Possible enum values:
     *  - `"BestEffort"` Match all pod objects that have best effort quality of service
     *  - `"CrossNamespacePodAffinity"` Match all pod objects that have cross-namespace pod (anti)affinity mentioned. This is a beta feature enabled by the PodAffinityNamespaceSelector feature flag.
     *  - `"NotBestEffort"` Match all pod objects that do not have best effort quality of service
     *  - `"NotTerminating"` Match all pod objects where spec.activeDeadlineSeconds is nil
     *  - `"PriorityClass"` Match all pod objects that have priority class mentioned
     *  - `"Terminating"` Match all pod objects where spec.activeDeadlineSeconds >=0
     * 
     */
    @InputImport(name="scopeName", required=true)
        private final Input<String> scopeName;

    public Input<String> getScopeName() {
        return this.scopeName;
    }

    /**
     * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
     * 
     */
    @InputImport(name="values")
        private final @Nullable Input<List<String>> values;

    public Input<List<String>> getValues() {
        return this.values == null ? Input.empty() : this.values;
    }

    public ScopedResourceSelectorRequirementArgs(
        Input<String> operator,
        Input<String> scopeName,
        @Nullable Input<List<String>> values) {
        this.operator = Objects.requireNonNull(operator, "expected parameter 'operator' to be non-null");
        this.scopeName = Objects.requireNonNull(scopeName, "expected parameter 'scopeName' to be non-null");
        this.values = values;
    }

    private ScopedResourceSelectorRequirementArgs() {
        this.operator = Input.empty();
        this.scopeName = Input.empty();
        this.values = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ScopedResourceSelectorRequirementArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> operator;
        private Input<String> scopeName;
        private @Nullable Input<List<String>> values;

        public Builder() {
    	      // Empty
        }

        public Builder(ScopedResourceSelectorRequirementArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.operator = defaults.operator;
    	      this.scopeName = defaults.scopeName;
    	      this.values = defaults.values;
        }

        public Builder setOperator(Input<String> operator) {
            this.operator = Objects.requireNonNull(operator);
            return this;
        }

        public Builder setOperator(String operator) {
            this.operator = Input.of(Objects.requireNonNull(operator));
            return this;
        }

        public Builder setScopeName(Input<String> scopeName) {
            this.scopeName = Objects.requireNonNull(scopeName);
            return this;
        }

        public Builder setScopeName(String scopeName) {
            this.scopeName = Input.of(Objects.requireNonNull(scopeName));
            return this;
        }

        public Builder setValues(@Nullable Input<List<String>> values) {
            this.values = values;
            return this;
        }

        public Builder setValues(@Nullable List<String> values) {
            this.values = Input.ofNullable(values);
            return this;
        }
        public ScopedResourceSelectorRequirementArgs build() {
            return new ScopedResourceSelectorRequirementArgs(operator, scopeName, values);
        }
    }
}
