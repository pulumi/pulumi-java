// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.kubernetes.core_v1.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import io.pulumi.kubernetes.core_v1.outputs.SecretReference;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class ISCSIPersistentVolumeSource {
    private final @Nullable Boolean chapAuthDiscovery;
    private final @Nullable Boolean chapAuthSession;
    private final @Nullable String fsType;
    private final @Nullable String initiatorName;
    private final String iqn;
    private final @Nullable String iscsiInterface;
    private final Integer lun;
    private final @Nullable List<String> portals;
    private final @Nullable Boolean readOnly;
    private final @Nullable SecretReference secretRef;
    private final String targetPortal;

    @OutputCustomType.Constructor({"chapAuthDiscovery","chapAuthSession","fsType","initiatorName","iqn","iscsiInterface","lun","portals","readOnly","secretRef","targetPortal"})
    private ISCSIPersistentVolumeSource(
        @Nullable Boolean chapAuthDiscovery,
        @Nullable Boolean chapAuthSession,
        @Nullable String fsType,
        @Nullable String initiatorName,
        String iqn,
        @Nullable String iscsiInterface,
        Integer lun,
        @Nullable List<String> portals,
        @Nullable Boolean readOnly,
        @Nullable SecretReference secretRef,
        String targetPortal) {
        this.chapAuthDiscovery = chapAuthDiscovery;
        this.chapAuthSession = chapAuthSession;
        this.fsType = fsType;
        this.initiatorName = initiatorName;
        this.iqn = Objects.requireNonNull(iqn);
        this.iscsiInterface = iscsiInterface;
        this.lun = Objects.requireNonNull(lun);
        this.portals = portals;
        this.readOnly = readOnly;
        this.secretRef = secretRef;
        this.targetPortal = Objects.requireNonNull(targetPortal);
    }

    public Optional<Boolean> getChapAuthDiscovery() {
        return Optional.ofNullable(this.chapAuthDiscovery);
    }
    public Optional<Boolean> getChapAuthSession() {
        return Optional.ofNullable(this.chapAuthSession);
    }
    public Optional<String> getFsType() {
        return Optional.ofNullable(this.fsType);
    }
    public Optional<String> getInitiatorName() {
        return Optional.ofNullable(this.initiatorName);
    }
    public String getIqn() {
        return this.iqn;
    }
    public Optional<String> getIscsiInterface() {
        return Optional.ofNullable(this.iscsiInterface);
    }
    public Integer getLun() {
        return this.lun;
    }
    public List<String> getPortals() {
        return this.portals == null ? List.of() : this.portals;
    }
    public Optional<Boolean> getReadOnly() {
        return Optional.ofNullable(this.readOnly);
    }
    public Optional<SecretReference> getSecretRef() {
        return Optional.ofNullable(this.secretRef);
    }
    public String getTargetPortal() {
        return this.targetPortal;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ISCSIPersistentVolumeSource defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Boolean chapAuthDiscovery;
        private @Nullable Boolean chapAuthSession;
        private @Nullable String fsType;
        private @Nullable String initiatorName;
        private String iqn;
        private @Nullable String iscsiInterface;
        private Integer lun;
        private @Nullable List<String> portals;
        private @Nullable Boolean readOnly;
        private @Nullable SecretReference secretRef;
        private String targetPortal;

        public Builder() {
    	      // Empty
        }

        public Builder(ISCSIPersistentVolumeSource defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.chapAuthDiscovery = defaults.chapAuthDiscovery;
    	      this.chapAuthSession = defaults.chapAuthSession;
    	      this.fsType = defaults.fsType;
    	      this.initiatorName = defaults.initiatorName;
    	      this.iqn = defaults.iqn;
    	      this.iscsiInterface = defaults.iscsiInterface;
    	      this.lun = defaults.lun;
    	      this.portals = defaults.portals;
    	      this.readOnly = defaults.readOnly;
    	      this.secretRef = defaults.secretRef;
    	      this.targetPortal = defaults.targetPortal;
        }

        public Builder setChapAuthDiscovery(@Nullable Boolean chapAuthDiscovery) {
            this.chapAuthDiscovery = chapAuthDiscovery;
            return this;
        }

        public Builder setChapAuthSession(@Nullable Boolean chapAuthSession) {
            this.chapAuthSession = chapAuthSession;
            return this;
        }

        public Builder setFsType(@Nullable String fsType) {
            this.fsType = fsType;
            return this;
        }

        public Builder setInitiatorName(@Nullable String initiatorName) {
            this.initiatorName = initiatorName;
            return this;
        }

        public Builder setIqn(String iqn) {
            this.iqn = Objects.requireNonNull(iqn);
            return this;
        }

        public Builder setIscsiInterface(@Nullable String iscsiInterface) {
            this.iscsiInterface = iscsiInterface;
            return this;
        }

        public Builder setLun(Integer lun) {
            this.lun = Objects.requireNonNull(lun);
            return this;
        }

        public Builder setPortals(@Nullable List<String> portals) {
            this.portals = portals;
            return this;
        }

        public Builder setReadOnly(@Nullable Boolean readOnly) {
            this.readOnly = readOnly;
            return this;
        }

        public Builder setSecretRef(@Nullable SecretReference secretRef) {
            this.secretRef = secretRef;
            return this;
        }

        public Builder setTargetPortal(String targetPortal) {
            this.targetPortal = Objects.requireNonNull(targetPortal);
            return this;
        }

        public ISCSIPersistentVolumeSource build() {
            return new ISCSIPersistentVolumeSource(chapAuthDiscovery, chapAuthSession, fsType, initiatorName, iqn, iscsiInterface, lun, portals, readOnly, secretRef, targetPortal);
        }
    }
}
