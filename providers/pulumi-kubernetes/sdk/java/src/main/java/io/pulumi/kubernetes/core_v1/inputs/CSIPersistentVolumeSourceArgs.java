// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.kubernetes.core_v1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.kubernetes.core_v1.inputs.SecretReferenceArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Represents storage that is managed by an external CSI volume driver (Beta feature)
 * 
 */
public final class CSIPersistentVolumeSourceArgs extends io.pulumi.resources.ResourceArgs {

    public static final CSIPersistentVolumeSourceArgs Empty = new CSIPersistentVolumeSourceArgs();

    /**
     * ControllerExpandSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerExpandVolume call. This is an alpha field and requires enabling ExpandCSIVolumes feature gate. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
     * 
     */
    @InputImport(name="controllerExpandSecretRef")
      private final @Nullable Input<SecretReferenceArgs> controllerExpandSecretRef;

    public Input<SecretReferenceArgs> getControllerExpandSecretRef() {
        return this.controllerExpandSecretRef == null ? Input.empty() : this.controllerExpandSecretRef;
    }

    /**
     * ControllerPublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerPublishVolume and ControllerUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
     * 
     */
    @InputImport(name="controllerPublishSecretRef")
      private final @Nullable Input<SecretReferenceArgs> controllerPublishSecretRef;

    public Input<SecretReferenceArgs> getControllerPublishSecretRef() {
        return this.controllerPublishSecretRef == null ? Input.empty() : this.controllerPublishSecretRef;
    }

    /**
     * Driver is the name of the driver to use for this volume. Required.
     * 
     */
    @InputImport(name="driver", required=true)
      private final Input<String> driver;

    public Input<String> getDriver() {
        return this.driver;
    }

    /**
     * Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs".
     * 
     */
    @InputImport(name="fsType")
      private final @Nullable Input<String> fsType;

    public Input<String> getFsType() {
        return this.fsType == null ? Input.empty() : this.fsType;
    }

    /**
     * NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
     * 
     */
    @InputImport(name="nodePublishSecretRef")
      private final @Nullable Input<SecretReferenceArgs> nodePublishSecretRef;

    public Input<SecretReferenceArgs> getNodePublishSecretRef() {
        return this.nodePublishSecretRef == null ? Input.empty() : this.nodePublishSecretRef;
    }

    /**
     * NodeStageSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodeStageVolume and NodeStageVolume and NodeUnstageVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
     * 
     */
    @InputImport(name="nodeStageSecretRef")
      private final @Nullable Input<SecretReferenceArgs> nodeStageSecretRef;

    public Input<SecretReferenceArgs> getNodeStageSecretRef() {
        return this.nodeStageSecretRef == null ? Input.empty() : this.nodeStageSecretRef;
    }

    /**
     * Optional: The value to pass to ControllerPublishVolumeRequest. Defaults to false (read/write).
     * 
     */
    @InputImport(name="readOnly")
      private final @Nullable Input<Boolean> readOnly;

    public Input<Boolean> getReadOnly() {
        return this.readOnly == null ? Input.empty() : this.readOnly;
    }

    /**
     * Attributes of the volume to publish.
     * 
     */
    @InputImport(name="volumeAttributes")
      private final @Nullable Input<Map<String,String>> volumeAttributes;

    public Input<Map<String,String>> getVolumeAttributes() {
        return this.volumeAttributes == null ? Input.empty() : this.volumeAttributes;
    }

    /**
     * VolumeHandle is the unique volume name returned by the CSI volume pluginâ€™s CreateVolume to refer to the volume on all subsequent calls. Required.
     * 
     */
    @InputImport(name="volumeHandle", required=true)
      private final Input<String> volumeHandle;

    public Input<String> getVolumeHandle() {
        return this.volumeHandle;
    }

    public CSIPersistentVolumeSourceArgs(
        @Nullable Input<SecretReferenceArgs> controllerExpandSecretRef,
        @Nullable Input<SecretReferenceArgs> controllerPublishSecretRef,
        Input<String> driver,
        @Nullable Input<String> fsType,
        @Nullable Input<SecretReferenceArgs> nodePublishSecretRef,
        @Nullable Input<SecretReferenceArgs> nodeStageSecretRef,
        @Nullable Input<Boolean> readOnly,
        @Nullable Input<Map<String,String>> volumeAttributes,
        Input<String> volumeHandle) {
        this.controllerExpandSecretRef = controllerExpandSecretRef;
        this.controllerPublishSecretRef = controllerPublishSecretRef;
        this.driver = Objects.requireNonNull(driver, "expected parameter 'driver' to be non-null");
        this.fsType = fsType;
        this.nodePublishSecretRef = nodePublishSecretRef;
        this.nodeStageSecretRef = nodeStageSecretRef;
        this.readOnly = readOnly;
        this.volumeAttributes = volumeAttributes;
        this.volumeHandle = Objects.requireNonNull(volumeHandle, "expected parameter 'volumeHandle' to be non-null");
    }

    private CSIPersistentVolumeSourceArgs() {
        this.controllerExpandSecretRef = Input.empty();
        this.controllerPublishSecretRef = Input.empty();
        this.driver = Input.empty();
        this.fsType = Input.empty();
        this.nodePublishSecretRef = Input.empty();
        this.nodeStageSecretRef = Input.empty();
        this.readOnly = Input.empty();
        this.volumeAttributes = Input.empty();
        this.volumeHandle = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CSIPersistentVolumeSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<SecretReferenceArgs> controllerExpandSecretRef;
        private @Nullable Input<SecretReferenceArgs> controllerPublishSecretRef;
        private Input<String> driver;
        private @Nullable Input<String> fsType;
        private @Nullable Input<SecretReferenceArgs> nodePublishSecretRef;
        private @Nullable Input<SecretReferenceArgs> nodeStageSecretRef;
        private @Nullable Input<Boolean> readOnly;
        private @Nullable Input<Map<String,String>> volumeAttributes;
        private Input<String> volumeHandle;

        public Builder() {
    	      // Empty
        }

        public Builder(CSIPersistentVolumeSourceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.controllerExpandSecretRef = defaults.controllerExpandSecretRef;
    	      this.controllerPublishSecretRef = defaults.controllerPublishSecretRef;
    	      this.driver = defaults.driver;
    	      this.fsType = defaults.fsType;
    	      this.nodePublishSecretRef = defaults.nodePublishSecretRef;
    	      this.nodeStageSecretRef = defaults.nodeStageSecretRef;
    	      this.readOnly = defaults.readOnly;
    	      this.volumeAttributes = defaults.volumeAttributes;
    	      this.volumeHandle = defaults.volumeHandle;
        }

        public Builder controllerExpandSecretRef(@Nullable Input<SecretReferenceArgs> controllerExpandSecretRef) {
            this.controllerExpandSecretRef = controllerExpandSecretRef;
            return this;
        }

        public Builder controllerExpandSecretRef(@Nullable SecretReferenceArgs controllerExpandSecretRef) {
            this.controllerExpandSecretRef = Input.ofNullable(controllerExpandSecretRef);
            return this;
        }

        public Builder controllerPublishSecretRef(@Nullable Input<SecretReferenceArgs> controllerPublishSecretRef) {
            this.controllerPublishSecretRef = controllerPublishSecretRef;
            return this;
        }

        public Builder controllerPublishSecretRef(@Nullable SecretReferenceArgs controllerPublishSecretRef) {
            this.controllerPublishSecretRef = Input.ofNullable(controllerPublishSecretRef);
            return this;
        }

        public Builder driver(Input<String> driver) {
            this.driver = Objects.requireNonNull(driver);
            return this;
        }

        public Builder driver(String driver) {
            this.driver = Input.of(Objects.requireNonNull(driver));
            return this;
        }

        public Builder fsType(@Nullable Input<String> fsType) {
            this.fsType = fsType;
            return this;
        }

        public Builder fsType(@Nullable String fsType) {
            this.fsType = Input.ofNullable(fsType);
            return this;
        }

        public Builder nodePublishSecretRef(@Nullable Input<SecretReferenceArgs> nodePublishSecretRef) {
            this.nodePublishSecretRef = nodePublishSecretRef;
            return this;
        }

        public Builder nodePublishSecretRef(@Nullable SecretReferenceArgs nodePublishSecretRef) {
            this.nodePublishSecretRef = Input.ofNullable(nodePublishSecretRef);
            return this;
        }

        public Builder nodeStageSecretRef(@Nullable Input<SecretReferenceArgs> nodeStageSecretRef) {
            this.nodeStageSecretRef = nodeStageSecretRef;
            return this;
        }

        public Builder nodeStageSecretRef(@Nullable SecretReferenceArgs nodeStageSecretRef) {
            this.nodeStageSecretRef = Input.ofNullable(nodeStageSecretRef);
            return this;
        }

        public Builder readOnly(@Nullable Input<Boolean> readOnly) {
            this.readOnly = readOnly;
            return this;
        }

        public Builder readOnly(@Nullable Boolean readOnly) {
            this.readOnly = Input.ofNullable(readOnly);
            return this;
        }

        public Builder volumeAttributes(@Nullable Input<Map<String,String>> volumeAttributes) {
            this.volumeAttributes = volumeAttributes;
            return this;
        }

        public Builder volumeAttributes(@Nullable Map<String,String> volumeAttributes) {
            this.volumeAttributes = Input.ofNullable(volumeAttributes);
            return this;
        }

        public Builder volumeHandle(Input<String> volumeHandle) {
            this.volumeHandle = Objects.requireNonNull(volumeHandle);
            return this;
        }

        public Builder volumeHandle(String volumeHandle) {
            this.volumeHandle = Input.of(Objects.requireNonNull(volumeHandle));
            return this;
        }
        public CSIPersistentVolumeSourceArgs build() {
            return new CSIPersistentVolumeSourceArgs(controllerExpandSecretRef, controllerPublishSecretRef, driver, fsType, nodePublishSecretRef, nodeStageSecretRef, readOnly, volumeAttributes, volumeHandle);
        }
    }
}
