// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.kubernetes.core_v1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.kubernetes.core_v1.inputs.ExecActionArgs;
import io.pulumi.kubernetes.core_v1.inputs.GRPCActionArgs;
import io.pulumi.kubernetes.core_v1.inputs.HTTPGetActionArgs;
import io.pulumi.kubernetes.core_v1.inputs.TCPSocketActionArgs;
import java.lang.Integer;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
 * 
 */
public final class ProbeArgs extends io.pulumi.resources.ResourceArgs {

    public static final ProbeArgs Empty = new ProbeArgs();

    /**
     * Exec specifies the action to take.
     * 
     */
    @InputImport(name="exec")
    private final @Nullable Input<ExecActionArgs> exec;

    public Input<ExecActionArgs> getExec() {
        return this.exec == null ? Input.empty() : this.exec;
    }

    /**
     * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
     * 
     */
    @InputImport(name="failureThreshold")
    private final @Nullable Input<Integer> failureThreshold;

    public Input<Integer> getFailureThreshold() {
        return this.failureThreshold == null ? Input.empty() : this.failureThreshold;
    }

    /**
     * GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate.
     * 
     */
    @InputImport(name="grpc")
    private final @Nullable Input<GRPCActionArgs> grpc;

    public Input<GRPCActionArgs> getGrpc() {
        return this.grpc == null ? Input.empty() : this.grpc;
    }

    /**
     * HTTPGet specifies the http request to perform.
     * 
     */
    @InputImport(name="httpGet")
    private final @Nullable Input<HTTPGetActionArgs> httpGet;

    public Input<HTTPGetActionArgs> getHttpGet() {
        return this.httpGet == null ? Input.empty() : this.httpGet;
    }

    /**
     * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
     * 
     */
    @InputImport(name="initialDelaySeconds")
    private final @Nullable Input<Integer> initialDelaySeconds;

    public Input<Integer> getInitialDelaySeconds() {
        return this.initialDelaySeconds == null ? Input.empty() : this.initialDelaySeconds;
    }

    /**
     * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
     * 
     */
    @InputImport(name="periodSeconds")
    private final @Nullable Input<Integer> periodSeconds;

    public Input<Integer> getPeriodSeconds() {
        return this.periodSeconds == null ? Input.empty() : this.periodSeconds;
    }

    /**
     * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
     * 
     */
    @InputImport(name="successThreshold")
    private final @Nullable Input<Integer> successThreshold;

    public Input<Integer> getSuccessThreshold() {
        return this.successThreshold == null ? Input.empty() : this.successThreshold;
    }

    /**
     * TCPSocket specifies an action involving a TCP port.
     * 
     */
    @InputImport(name="tcpSocket")
    private final @Nullable Input<TCPSocketActionArgs> tcpSocket;

    public Input<TCPSocketActionArgs> getTcpSocket() {
        return this.tcpSocket == null ? Input.empty() : this.tcpSocket;
    }

    /**
     * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
     * 
     */
    @InputImport(name="terminationGracePeriodSeconds")
    private final @Nullable Input<Integer> terminationGracePeriodSeconds;

    public Input<Integer> getTerminationGracePeriodSeconds() {
        return this.terminationGracePeriodSeconds == null ? Input.empty() : this.terminationGracePeriodSeconds;
    }

    /**
     * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
     * 
     */
    @InputImport(name="timeoutSeconds")
    private final @Nullable Input<Integer> timeoutSeconds;

    public Input<Integer> getTimeoutSeconds() {
        return this.timeoutSeconds == null ? Input.empty() : this.timeoutSeconds;
    }

    public ProbeArgs(
        @Nullable Input<ExecActionArgs> exec,
        @Nullable Input<Integer> failureThreshold,
        @Nullable Input<GRPCActionArgs> grpc,
        @Nullable Input<HTTPGetActionArgs> httpGet,
        @Nullable Input<Integer> initialDelaySeconds,
        @Nullable Input<Integer> periodSeconds,
        @Nullable Input<Integer> successThreshold,
        @Nullable Input<TCPSocketActionArgs> tcpSocket,
        @Nullable Input<Integer> terminationGracePeriodSeconds,
        @Nullable Input<Integer> timeoutSeconds) {
        this.exec = exec;
        this.failureThreshold = failureThreshold;
        this.grpc = grpc;
        this.httpGet = httpGet;
        this.initialDelaySeconds = initialDelaySeconds;
        this.periodSeconds = periodSeconds;
        this.successThreshold = successThreshold;
        this.tcpSocket = tcpSocket;
        this.terminationGracePeriodSeconds = terminationGracePeriodSeconds;
        this.timeoutSeconds = timeoutSeconds;
    }

    private ProbeArgs() {
        this.exec = Input.empty();
        this.failureThreshold = Input.empty();
        this.grpc = Input.empty();
        this.httpGet = Input.empty();
        this.initialDelaySeconds = Input.empty();
        this.periodSeconds = Input.empty();
        this.successThreshold = Input.empty();
        this.tcpSocket = Input.empty();
        this.terminationGracePeriodSeconds = Input.empty();
        this.timeoutSeconds = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ProbeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<ExecActionArgs> exec;
        private @Nullable Input<Integer> failureThreshold;
        private @Nullable Input<GRPCActionArgs> grpc;
        private @Nullable Input<HTTPGetActionArgs> httpGet;
        private @Nullable Input<Integer> initialDelaySeconds;
        private @Nullable Input<Integer> periodSeconds;
        private @Nullable Input<Integer> successThreshold;
        private @Nullable Input<TCPSocketActionArgs> tcpSocket;
        private @Nullable Input<Integer> terminationGracePeriodSeconds;
        private @Nullable Input<Integer> timeoutSeconds;

        public Builder() {
    	      // Empty
        }

        public Builder(ProbeArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.exec = defaults.exec;
    	      this.failureThreshold = defaults.failureThreshold;
    	      this.grpc = defaults.grpc;
    	      this.httpGet = defaults.httpGet;
    	      this.initialDelaySeconds = defaults.initialDelaySeconds;
    	      this.periodSeconds = defaults.periodSeconds;
    	      this.successThreshold = defaults.successThreshold;
    	      this.tcpSocket = defaults.tcpSocket;
    	      this.terminationGracePeriodSeconds = defaults.terminationGracePeriodSeconds;
    	      this.timeoutSeconds = defaults.timeoutSeconds;
        }

        public Builder setExec(@Nullable Input<ExecActionArgs> exec) {
            this.exec = exec;
            return this;
        }

        public Builder setExec(@Nullable ExecActionArgs exec) {
            this.exec = Input.ofNullable(exec);
            return this;
        }

        public Builder setFailureThreshold(@Nullable Input<Integer> failureThreshold) {
            this.failureThreshold = failureThreshold;
            return this;
        }

        public Builder setFailureThreshold(@Nullable Integer failureThreshold) {
            this.failureThreshold = Input.ofNullable(failureThreshold);
            return this;
        }

        public Builder setGrpc(@Nullable Input<GRPCActionArgs> grpc) {
            this.grpc = grpc;
            return this;
        }

        public Builder setGrpc(@Nullable GRPCActionArgs grpc) {
            this.grpc = Input.ofNullable(grpc);
            return this;
        }

        public Builder setHttpGet(@Nullable Input<HTTPGetActionArgs> httpGet) {
            this.httpGet = httpGet;
            return this;
        }

        public Builder setHttpGet(@Nullable HTTPGetActionArgs httpGet) {
            this.httpGet = Input.ofNullable(httpGet);
            return this;
        }

        public Builder setInitialDelaySeconds(@Nullable Input<Integer> initialDelaySeconds) {
            this.initialDelaySeconds = initialDelaySeconds;
            return this;
        }

        public Builder setInitialDelaySeconds(@Nullable Integer initialDelaySeconds) {
            this.initialDelaySeconds = Input.ofNullable(initialDelaySeconds);
            return this;
        }

        public Builder setPeriodSeconds(@Nullable Input<Integer> periodSeconds) {
            this.periodSeconds = periodSeconds;
            return this;
        }

        public Builder setPeriodSeconds(@Nullable Integer periodSeconds) {
            this.periodSeconds = Input.ofNullable(periodSeconds);
            return this;
        }

        public Builder setSuccessThreshold(@Nullable Input<Integer> successThreshold) {
            this.successThreshold = successThreshold;
            return this;
        }

        public Builder setSuccessThreshold(@Nullable Integer successThreshold) {
            this.successThreshold = Input.ofNullable(successThreshold);
            return this;
        }

        public Builder setTcpSocket(@Nullable Input<TCPSocketActionArgs> tcpSocket) {
            this.tcpSocket = tcpSocket;
            return this;
        }

        public Builder setTcpSocket(@Nullable TCPSocketActionArgs tcpSocket) {
            this.tcpSocket = Input.ofNullable(tcpSocket);
            return this;
        }

        public Builder setTerminationGracePeriodSeconds(@Nullable Input<Integer> terminationGracePeriodSeconds) {
            this.terminationGracePeriodSeconds = terminationGracePeriodSeconds;
            return this;
        }

        public Builder setTerminationGracePeriodSeconds(@Nullable Integer terminationGracePeriodSeconds) {
            this.terminationGracePeriodSeconds = Input.ofNullable(terminationGracePeriodSeconds);
            return this;
        }

        public Builder setTimeoutSeconds(@Nullable Input<Integer> timeoutSeconds) {
            this.timeoutSeconds = timeoutSeconds;
            return this;
        }

        public Builder setTimeoutSeconds(@Nullable Integer timeoutSeconds) {
            this.timeoutSeconds = Input.ofNullable(timeoutSeconds);
            return this;
        }

        public ProbeArgs build() {
            return new ProbeArgs(exec, failureThreshold, grpc, httpGet, initialDelaySeconds, periodSeconds, successThreshold, tcpSocket, terminationGracePeriodSeconds, timeoutSeconds);
        }
    }
}
