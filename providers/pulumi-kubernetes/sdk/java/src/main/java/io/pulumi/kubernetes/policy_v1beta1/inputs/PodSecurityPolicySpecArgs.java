// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.kubernetes.policy_v1beta1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.kubernetes.policy_v1beta1.inputs.AllowedCSIDriverArgs;
import io.pulumi.kubernetes.policy_v1beta1.inputs.AllowedFlexVolumeArgs;
import io.pulumi.kubernetes.policy_v1beta1.inputs.AllowedHostPathArgs;
import io.pulumi.kubernetes.policy_v1beta1.inputs.FSGroupStrategyOptionsArgs;
import io.pulumi.kubernetes.policy_v1beta1.inputs.HostPortRangeArgs;
import io.pulumi.kubernetes.policy_v1beta1.inputs.RunAsGroupStrategyOptionsArgs;
import io.pulumi.kubernetes.policy_v1beta1.inputs.RunAsUserStrategyOptionsArgs;
import io.pulumi.kubernetes.policy_v1beta1.inputs.RuntimeClassStrategyOptionsArgs;
import io.pulumi.kubernetes.policy_v1beta1.inputs.SELinuxStrategyOptionsArgs;
import io.pulumi.kubernetes.policy_v1beta1.inputs.SupplementalGroupsStrategyOptionsArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * PodSecurityPolicySpec defines the policy enforced.
 * 
 */
public final class PodSecurityPolicySpecArgs extends io.pulumi.resources.ResourceArgs {

    public static final PodSecurityPolicySpecArgs Empty = new PodSecurityPolicySpecArgs();

    /**
     * allowPrivilegeEscalation determines if a pod can request to allow privilege escalation. If unspecified, defaults to true.
     * 
     */
    @InputImport(name="allowPrivilegeEscalation")
        private final @Nullable Input<Boolean> allowPrivilegeEscalation;

    public Input<Boolean> getAllowPrivilegeEscalation() {
        return this.allowPrivilegeEscalation == null ? Input.empty() : this.allowPrivilegeEscalation;
    }

    /**
     * AllowedCSIDrivers is an allowlist of inline CSI drivers that must be explicitly set to be embedded within a pod spec. An empty value indicates that any CSI driver can be used for inline ephemeral volumes. This is a beta field, and is only honored if the API server enables the CSIInlineVolume feature gate.
     * 
     */
    @InputImport(name="allowedCSIDrivers")
        private final @Nullable Input<List<AllowedCSIDriverArgs>> allowedCSIDrivers;

    public Input<List<AllowedCSIDriverArgs>> getAllowedCSIDrivers() {
        return this.allowedCSIDrivers == null ? Input.empty() : this.allowedCSIDrivers;
    }

    /**
     * allowedCapabilities is a list of capabilities that can be requested to add to the container. Capabilities in this field may be added at the pod author's discretion. You must not list a capability in both allowedCapabilities and requiredDropCapabilities.
     * 
     */
    @InputImport(name="allowedCapabilities")
        private final @Nullable Input<List<String>> allowedCapabilities;

    public Input<List<String>> getAllowedCapabilities() {
        return this.allowedCapabilities == null ? Input.empty() : this.allowedCapabilities;
    }

    /**
     * allowedFlexVolumes is an allowlist of Flexvolumes.  Empty or nil indicates that all Flexvolumes may be used.  This parameter is effective only when the usage of the Flexvolumes is allowed in the "volumes" field.
     * 
     */
    @InputImport(name="allowedFlexVolumes")
        private final @Nullable Input<List<AllowedFlexVolumeArgs>> allowedFlexVolumes;

    public Input<List<AllowedFlexVolumeArgs>> getAllowedFlexVolumes() {
        return this.allowedFlexVolumes == null ? Input.empty() : this.allowedFlexVolumes;
    }

    /**
     * allowedHostPaths is an allowlist of host paths. Empty indicates that all host paths may be used.
     * 
     */
    @InputImport(name="allowedHostPaths")
        private final @Nullable Input<List<AllowedHostPathArgs>> allowedHostPaths;

    public Input<List<AllowedHostPathArgs>> getAllowedHostPaths() {
        return this.allowedHostPaths == null ? Input.empty() : this.allowedHostPaths;
    }

    /**
     * AllowedProcMountTypes is an allowlist of allowed ProcMountTypes. Empty or nil indicates that only the DefaultProcMountType may be used. This requires the ProcMountType feature flag to be enabled.
     * 
     */
    @InputImport(name="allowedProcMountTypes")
        private final @Nullable Input<List<String>> allowedProcMountTypes;

    public Input<List<String>> getAllowedProcMountTypes() {
        return this.allowedProcMountTypes == null ? Input.empty() : this.allowedProcMountTypes;
    }

    /**
     * allowedUnsafeSysctls is a list of explicitly allowed unsafe sysctls, defaults to none. Each entry is either a plain sysctl name or ends in "*" in which case it is considered as a prefix of allowed sysctls. Single * means all unsafe sysctls are allowed. Kubelet has to allowlist all allowed unsafe sysctls explicitly to avoid rejection.
     * 
     * Examples: e.g. "foo/*" allows "foo/bar", "foo/baz", etc. e.g. "foo.*" allows "foo.bar", "foo.baz", etc.
     * 
     */
    @InputImport(name="allowedUnsafeSysctls")
        private final @Nullable Input<List<String>> allowedUnsafeSysctls;

    public Input<List<String>> getAllowedUnsafeSysctls() {
        return this.allowedUnsafeSysctls == null ? Input.empty() : this.allowedUnsafeSysctls;
    }

    /**
     * defaultAddCapabilities is the default set of capabilities that will be added to the container unless the pod spec specifically drops the capability.  You may not list a capability in both defaultAddCapabilities and requiredDropCapabilities. Capabilities added here are implicitly allowed, and need not be included in the allowedCapabilities list.
     * 
     */
    @InputImport(name="defaultAddCapabilities")
        private final @Nullable Input<List<String>> defaultAddCapabilities;

    public Input<List<String>> getDefaultAddCapabilities() {
        return this.defaultAddCapabilities == null ? Input.empty() : this.defaultAddCapabilities;
    }

    /**
     * defaultAllowPrivilegeEscalation controls the default setting for whether a process can gain more privileges than its parent process.
     * 
     */
    @InputImport(name="defaultAllowPrivilegeEscalation")
        private final @Nullable Input<Boolean> defaultAllowPrivilegeEscalation;

    public Input<Boolean> getDefaultAllowPrivilegeEscalation() {
        return this.defaultAllowPrivilegeEscalation == null ? Input.empty() : this.defaultAllowPrivilegeEscalation;
    }

    /**
     * forbiddenSysctls is a list of explicitly forbidden sysctls, defaults to none. Each entry is either a plain sysctl name or ends in "*" in which case it is considered as a prefix of forbidden sysctls. Single * means all sysctls are forbidden.
     * 
     * Examples: e.g. "foo/*" forbids "foo/bar", "foo/baz", etc. e.g. "foo.*" forbids "foo.bar", "foo.baz", etc.
     * 
     */
    @InputImport(name="forbiddenSysctls")
        private final @Nullable Input<List<String>> forbiddenSysctls;

    public Input<List<String>> getForbiddenSysctls() {
        return this.forbiddenSysctls == null ? Input.empty() : this.forbiddenSysctls;
    }

    /**
     * fsGroup is the strategy that will dictate what fs group is used by the SecurityContext.
     * 
     */
    @InputImport(name="fsGroup", required=true)
        private final Input<FSGroupStrategyOptionsArgs> fsGroup;

    public Input<FSGroupStrategyOptionsArgs> getFsGroup() {
        return this.fsGroup;
    }

    /**
     * hostIPC determines if the policy allows the use of HostIPC in the pod spec.
     * 
     */
    @InputImport(name="hostIPC")
        private final @Nullable Input<Boolean> hostIPC;

    public Input<Boolean> getHostIPC() {
        return this.hostIPC == null ? Input.empty() : this.hostIPC;
    }

    /**
     * hostNetwork determines if the policy allows the use of HostNetwork in the pod spec.
     * 
     */
    @InputImport(name="hostNetwork")
        private final @Nullable Input<Boolean> hostNetwork;

    public Input<Boolean> getHostNetwork() {
        return this.hostNetwork == null ? Input.empty() : this.hostNetwork;
    }

    /**
     * hostPID determines if the policy allows the use of HostPID in the pod spec.
     * 
     */
    @InputImport(name="hostPID")
        private final @Nullable Input<Boolean> hostPID;

    public Input<Boolean> getHostPID() {
        return this.hostPID == null ? Input.empty() : this.hostPID;
    }

    /**
     * hostPorts determines which host port ranges are allowed to be exposed.
     * 
     */
    @InputImport(name="hostPorts")
        private final @Nullable Input<List<HostPortRangeArgs>> hostPorts;

    public Input<List<HostPortRangeArgs>> getHostPorts() {
        return this.hostPorts == null ? Input.empty() : this.hostPorts;
    }

    /**
     * privileged determines if a pod can request to be run as privileged.
     * 
     */
    @InputImport(name="privileged")
        private final @Nullable Input<Boolean> privileged;

    public Input<Boolean> getPrivileged() {
        return this.privileged == null ? Input.empty() : this.privileged;
    }

    /**
     * readOnlyRootFilesystem when set to true will force containers to run with a read only root file system.  If the container specifically requests to run with a non-read only root file system the PSP should deny the pod. If set to false the container may run with a read only root file system if it wishes but it will not be forced to.
     * 
     */
    @InputImport(name="readOnlyRootFilesystem")
        private final @Nullable Input<Boolean> readOnlyRootFilesystem;

    public Input<Boolean> getReadOnlyRootFilesystem() {
        return this.readOnlyRootFilesystem == null ? Input.empty() : this.readOnlyRootFilesystem;
    }

    /**
     * requiredDropCapabilities are the capabilities that will be dropped from the container.  These are required to be dropped and cannot be added.
     * 
     */
    @InputImport(name="requiredDropCapabilities")
        private final @Nullable Input<List<String>> requiredDropCapabilities;

    public Input<List<String>> getRequiredDropCapabilities() {
        return this.requiredDropCapabilities == null ? Input.empty() : this.requiredDropCapabilities;
    }

    /**
     * RunAsGroup is the strategy that will dictate the allowable RunAsGroup values that may be set. If this field is omitted, the pod's RunAsGroup can take any value. This field requires the RunAsGroup feature gate to be enabled.
     * 
     */
    @InputImport(name="runAsGroup")
        private final @Nullable Input<RunAsGroupStrategyOptionsArgs> runAsGroup;

    public Input<RunAsGroupStrategyOptionsArgs> getRunAsGroup() {
        return this.runAsGroup == null ? Input.empty() : this.runAsGroup;
    }

    /**
     * runAsUser is the strategy that will dictate the allowable RunAsUser values that may be set.
     * 
     */
    @InputImport(name="runAsUser", required=true)
        private final Input<RunAsUserStrategyOptionsArgs> runAsUser;

    public Input<RunAsUserStrategyOptionsArgs> getRunAsUser() {
        return this.runAsUser;
    }

    /**
     * runtimeClass is the strategy that will dictate the allowable RuntimeClasses for a pod. If this field is omitted, the pod's runtimeClassName field is unrestricted. Enforcement of this field depends on the RuntimeClass feature gate being enabled.
     * 
     */
    @InputImport(name="runtimeClass")
        private final @Nullable Input<RuntimeClassStrategyOptionsArgs> runtimeClass;

    public Input<RuntimeClassStrategyOptionsArgs> getRuntimeClass() {
        return this.runtimeClass == null ? Input.empty() : this.runtimeClass;
    }

    /**
     * seLinux is the strategy that will dictate the allowable labels that may be set.
     * 
     */
    @InputImport(name="seLinux", required=true)
        private final Input<SELinuxStrategyOptionsArgs> seLinux;

    public Input<SELinuxStrategyOptionsArgs> getSeLinux() {
        return this.seLinux;
    }

    /**
     * supplementalGroups is the strategy that will dictate what supplemental groups are used by the SecurityContext.
     * 
     */
    @InputImport(name="supplementalGroups", required=true)
        private final Input<SupplementalGroupsStrategyOptionsArgs> supplementalGroups;

    public Input<SupplementalGroupsStrategyOptionsArgs> getSupplementalGroups() {
        return this.supplementalGroups;
    }

    /**
     * volumes is an allowlist of volume plugins. Empty indicates that no volumes may be used. To allow all volumes you may use '*'.
     * 
     */
    @InputImport(name="volumes")
        private final @Nullable Input<List<String>> volumes;

    public Input<List<String>> getVolumes() {
        return this.volumes == null ? Input.empty() : this.volumes;
    }

    public PodSecurityPolicySpecArgs(
        @Nullable Input<Boolean> allowPrivilegeEscalation,
        @Nullable Input<List<AllowedCSIDriverArgs>> allowedCSIDrivers,
        @Nullable Input<List<String>> allowedCapabilities,
        @Nullable Input<List<AllowedFlexVolumeArgs>> allowedFlexVolumes,
        @Nullable Input<List<AllowedHostPathArgs>> allowedHostPaths,
        @Nullable Input<List<String>> allowedProcMountTypes,
        @Nullable Input<List<String>> allowedUnsafeSysctls,
        @Nullable Input<List<String>> defaultAddCapabilities,
        @Nullable Input<Boolean> defaultAllowPrivilegeEscalation,
        @Nullable Input<List<String>> forbiddenSysctls,
        Input<FSGroupStrategyOptionsArgs> fsGroup,
        @Nullable Input<Boolean> hostIPC,
        @Nullable Input<Boolean> hostNetwork,
        @Nullable Input<Boolean> hostPID,
        @Nullable Input<List<HostPortRangeArgs>> hostPorts,
        @Nullable Input<Boolean> privileged,
        @Nullable Input<Boolean> readOnlyRootFilesystem,
        @Nullable Input<List<String>> requiredDropCapabilities,
        @Nullable Input<RunAsGroupStrategyOptionsArgs> runAsGroup,
        Input<RunAsUserStrategyOptionsArgs> runAsUser,
        @Nullable Input<RuntimeClassStrategyOptionsArgs> runtimeClass,
        Input<SELinuxStrategyOptionsArgs> seLinux,
        Input<SupplementalGroupsStrategyOptionsArgs> supplementalGroups,
        @Nullable Input<List<String>> volumes) {
        this.allowPrivilegeEscalation = allowPrivilegeEscalation;
        this.allowedCSIDrivers = allowedCSIDrivers;
        this.allowedCapabilities = allowedCapabilities;
        this.allowedFlexVolumes = allowedFlexVolumes;
        this.allowedHostPaths = allowedHostPaths;
        this.allowedProcMountTypes = allowedProcMountTypes;
        this.allowedUnsafeSysctls = allowedUnsafeSysctls;
        this.defaultAddCapabilities = defaultAddCapabilities;
        this.defaultAllowPrivilegeEscalation = defaultAllowPrivilegeEscalation;
        this.forbiddenSysctls = forbiddenSysctls;
        this.fsGroup = Objects.requireNonNull(fsGroup, "expected parameter 'fsGroup' to be non-null");
        this.hostIPC = hostIPC;
        this.hostNetwork = hostNetwork;
        this.hostPID = hostPID;
        this.hostPorts = hostPorts;
        this.privileged = privileged;
        this.readOnlyRootFilesystem = readOnlyRootFilesystem;
        this.requiredDropCapabilities = requiredDropCapabilities;
        this.runAsGroup = runAsGroup;
        this.runAsUser = Objects.requireNonNull(runAsUser, "expected parameter 'runAsUser' to be non-null");
        this.runtimeClass = runtimeClass;
        this.seLinux = Objects.requireNonNull(seLinux, "expected parameter 'seLinux' to be non-null");
        this.supplementalGroups = Objects.requireNonNull(supplementalGroups, "expected parameter 'supplementalGroups' to be non-null");
        this.volumes = volumes;
    }

    private PodSecurityPolicySpecArgs() {
        this.allowPrivilegeEscalation = Input.empty();
        this.allowedCSIDrivers = Input.empty();
        this.allowedCapabilities = Input.empty();
        this.allowedFlexVolumes = Input.empty();
        this.allowedHostPaths = Input.empty();
        this.allowedProcMountTypes = Input.empty();
        this.allowedUnsafeSysctls = Input.empty();
        this.defaultAddCapabilities = Input.empty();
        this.defaultAllowPrivilegeEscalation = Input.empty();
        this.forbiddenSysctls = Input.empty();
        this.fsGroup = Input.empty();
        this.hostIPC = Input.empty();
        this.hostNetwork = Input.empty();
        this.hostPID = Input.empty();
        this.hostPorts = Input.empty();
        this.privileged = Input.empty();
        this.readOnlyRootFilesystem = Input.empty();
        this.requiredDropCapabilities = Input.empty();
        this.runAsGroup = Input.empty();
        this.runAsUser = Input.empty();
        this.runtimeClass = Input.empty();
        this.seLinux = Input.empty();
        this.supplementalGroups = Input.empty();
        this.volumes = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PodSecurityPolicySpecArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Boolean> allowPrivilegeEscalation;
        private @Nullable Input<List<AllowedCSIDriverArgs>> allowedCSIDrivers;
        private @Nullable Input<List<String>> allowedCapabilities;
        private @Nullable Input<List<AllowedFlexVolumeArgs>> allowedFlexVolumes;
        private @Nullable Input<List<AllowedHostPathArgs>> allowedHostPaths;
        private @Nullable Input<List<String>> allowedProcMountTypes;
        private @Nullable Input<List<String>> allowedUnsafeSysctls;
        private @Nullable Input<List<String>> defaultAddCapabilities;
        private @Nullable Input<Boolean> defaultAllowPrivilegeEscalation;
        private @Nullable Input<List<String>> forbiddenSysctls;
        private Input<FSGroupStrategyOptionsArgs> fsGroup;
        private @Nullable Input<Boolean> hostIPC;
        private @Nullable Input<Boolean> hostNetwork;
        private @Nullable Input<Boolean> hostPID;
        private @Nullable Input<List<HostPortRangeArgs>> hostPorts;
        private @Nullable Input<Boolean> privileged;
        private @Nullable Input<Boolean> readOnlyRootFilesystem;
        private @Nullable Input<List<String>> requiredDropCapabilities;
        private @Nullable Input<RunAsGroupStrategyOptionsArgs> runAsGroup;
        private Input<RunAsUserStrategyOptionsArgs> runAsUser;
        private @Nullable Input<RuntimeClassStrategyOptionsArgs> runtimeClass;
        private Input<SELinuxStrategyOptionsArgs> seLinux;
        private Input<SupplementalGroupsStrategyOptionsArgs> supplementalGroups;
        private @Nullable Input<List<String>> volumes;

        public Builder() {
    	      // Empty
        }

        public Builder(PodSecurityPolicySpecArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowPrivilegeEscalation = defaults.allowPrivilegeEscalation;
    	      this.allowedCSIDrivers = defaults.allowedCSIDrivers;
    	      this.allowedCapabilities = defaults.allowedCapabilities;
    	      this.allowedFlexVolumes = defaults.allowedFlexVolumes;
    	      this.allowedHostPaths = defaults.allowedHostPaths;
    	      this.allowedProcMountTypes = defaults.allowedProcMountTypes;
    	      this.allowedUnsafeSysctls = defaults.allowedUnsafeSysctls;
    	      this.defaultAddCapabilities = defaults.defaultAddCapabilities;
    	      this.defaultAllowPrivilegeEscalation = defaults.defaultAllowPrivilegeEscalation;
    	      this.forbiddenSysctls = defaults.forbiddenSysctls;
    	      this.fsGroup = defaults.fsGroup;
    	      this.hostIPC = defaults.hostIPC;
    	      this.hostNetwork = defaults.hostNetwork;
    	      this.hostPID = defaults.hostPID;
    	      this.hostPorts = defaults.hostPorts;
    	      this.privileged = defaults.privileged;
    	      this.readOnlyRootFilesystem = defaults.readOnlyRootFilesystem;
    	      this.requiredDropCapabilities = defaults.requiredDropCapabilities;
    	      this.runAsGroup = defaults.runAsGroup;
    	      this.runAsUser = defaults.runAsUser;
    	      this.runtimeClass = defaults.runtimeClass;
    	      this.seLinux = defaults.seLinux;
    	      this.supplementalGroups = defaults.supplementalGroups;
    	      this.volumes = defaults.volumes;
        }

        public Builder setAllowPrivilegeEscalation(@Nullable Input<Boolean> allowPrivilegeEscalation) {
            this.allowPrivilegeEscalation = allowPrivilegeEscalation;
            return this;
        }

        public Builder setAllowPrivilegeEscalation(@Nullable Boolean allowPrivilegeEscalation) {
            this.allowPrivilegeEscalation = Input.ofNullable(allowPrivilegeEscalation);
            return this;
        }

        public Builder setAllowedCSIDrivers(@Nullable Input<List<AllowedCSIDriverArgs>> allowedCSIDrivers) {
            this.allowedCSIDrivers = allowedCSIDrivers;
            return this;
        }

        public Builder setAllowedCSIDrivers(@Nullable List<AllowedCSIDriverArgs> allowedCSIDrivers) {
            this.allowedCSIDrivers = Input.ofNullable(allowedCSIDrivers);
            return this;
        }

        public Builder setAllowedCapabilities(@Nullable Input<List<String>> allowedCapabilities) {
            this.allowedCapabilities = allowedCapabilities;
            return this;
        }

        public Builder setAllowedCapabilities(@Nullable List<String> allowedCapabilities) {
            this.allowedCapabilities = Input.ofNullable(allowedCapabilities);
            return this;
        }

        public Builder setAllowedFlexVolumes(@Nullable Input<List<AllowedFlexVolumeArgs>> allowedFlexVolumes) {
            this.allowedFlexVolumes = allowedFlexVolumes;
            return this;
        }

        public Builder setAllowedFlexVolumes(@Nullable List<AllowedFlexVolumeArgs> allowedFlexVolumes) {
            this.allowedFlexVolumes = Input.ofNullable(allowedFlexVolumes);
            return this;
        }

        public Builder setAllowedHostPaths(@Nullable Input<List<AllowedHostPathArgs>> allowedHostPaths) {
            this.allowedHostPaths = allowedHostPaths;
            return this;
        }

        public Builder setAllowedHostPaths(@Nullable List<AllowedHostPathArgs> allowedHostPaths) {
            this.allowedHostPaths = Input.ofNullable(allowedHostPaths);
            return this;
        }

        public Builder setAllowedProcMountTypes(@Nullable Input<List<String>> allowedProcMountTypes) {
            this.allowedProcMountTypes = allowedProcMountTypes;
            return this;
        }

        public Builder setAllowedProcMountTypes(@Nullable List<String> allowedProcMountTypes) {
            this.allowedProcMountTypes = Input.ofNullable(allowedProcMountTypes);
            return this;
        }

        public Builder setAllowedUnsafeSysctls(@Nullable Input<List<String>> allowedUnsafeSysctls) {
            this.allowedUnsafeSysctls = allowedUnsafeSysctls;
            return this;
        }

        public Builder setAllowedUnsafeSysctls(@Nullable List<String> allowedUnsafeSysctls) {
            this.allowedUnsafeSysctls = Input.ofNullable(allowedUnsafeSysctls);
            return this;
        }

        public Builder setDefaultAddCapabilities(@Nullable Input<List<String>> defaultAddCapabilities) {
            this.defaultAddCapabilities = defaultAddCapabilities;
            return this;
        }

        public Builder setDefaultAddCapabilities(@Nullable List<String> defaultAddCapabilities) {
            this.defaultAddCapabilities = Input.ofNullable(defaultAddCapabilities);
            return this;
        }

        public Builder setDefaultAllowPrivilegeEscalation(@Nullable Input<Boolean> defaultAllowPrivilegeEscalation) {
            this.defaultAllowPrivilegeEscalation = defaultAllowPrivilegeEscalation;
            return this;
        }

        public Builder setDefaultAllowPrivilegeEscalation(@Nullable Boolean defaultAllowPrivilegeEscalation) {
            this.defaultAllowPrivilegeEscalation = Input.ofNullable(defaultAllowPrivilegeEscalation);
            return this;
        }

        public Builder setForbiddenSysctls(@Nullable Input<List<String>> forbiddenSysctls) {
            this.forbiddenSysctls = forbiddenSysctls;
            return this;
        }

        public Builder setForbiddenSysctls(@Nullable List<String> forbiddenSysctls) {
            this.forbiddenSysctls = Input.ofNullable(forbiddenSysctls);
            return this;
        }

        public Builder setFsGroup(Input<FSGroupStrategyOptionsArgs> fsGroup) {
            this.fsGroup = Objects.requireNonNull(fsGroup);
            return this;
        }

        public Builder setFsGroup(FSGroupStrategyOptionsArgs fsGroup) {
            this.fsGroup = Input.of(Objects.requireNonNull(fsGroup));
            return this;
        }

        public Builder setHostIPC(@Nullable Input<Boolean> hostIPC) {
            this.hostIPC = hostIPC;
            return this;
        }

        public Builder setHostIPC(@Nullable Boolean hostIPC) {
            this.hostIPC = Input.ofNullable(hostIPC);
            return this;
        }

        public Builder setHostNetwork(@Nullable Input<Boolean> hostNetwork) {
            this.hostNetwork = hostNetwork;
            return this;
        }

        public Builder setHostNetwork(@Nullable Boolean hostNetwork) {
            this.hostNetwork = Input.ofNullable(hostNetwork);
            return this;
        }

        public Builder setHostPID(@Nullable Input<Boolean> hostPID) {
            this.hostPID = hostPID;
            return this;
        }

        public Builder setHostPID(@Nullable Boolean hostPID) {
            this.hostPID = Input.ofNullable(hostPID);
            return this;
        }

        public Builder setHostPorts(@Nullable Input<List<HostPortRangeArgs>> hostPorts) {
            this.hostPorts = hostPorts;
            return this;
        }

        public Builder setHostPorts(@Nullable List<HostPortRangeArgs> hostPorts) {
            this.hostPorts = Input.ofNullable(hostPorts);
            return this;
        }

        public Builder setPrivileged(@Nullable Input<Boolean> privileged) {
            this.privileged = privileged;
            return this;
        }

        public Builder setPrivileged(@Nullable Boolean privileged) {
            this.privileged = Input.ofNullable(privileged);
            return this;
        }

        public Builder setReadOnlyRootFilesystem(@Nullable Input<Boolean> readOnlyRootFilesystem) {
            this.readOnlyRootFilesystem = readOnlyRootFilesystem;
            return this;
        }

        public Builder setReadOnlyRootFilesystem(@Nullable Boolean readOnlyRootFilesystem) {
            this.readOnlyRootFilesystem = Input.ofNullable(readOnlyRootFilesystem);
            return this;
        }

        public Builder setRequiredDropCapabilities(@Nullable Input<List<String>> requiredDropCapabilities) {
            this.requiredDropCapabilities = requiredDropCapabilities;
            return this;
        }

        public Builder setRequiredDropCapabilities(@Nullable List<String> requiredDropCapabilities) {
            this.requiredDropCapabilities = Input.ofNullable(requiredDropCapabilities);
            return this;
        }

        public Builder setRunAsGroup(@Nullable Input<RunAsGroupStrategyOptionsArgs> runAsGroup) {
            this.runAsGroup = runAsGroup;
            return this;
        }

        public Builder setRunAsGroup(@Nullable RunAsGroupStrategyOptionsArgs runAsGroup) {
            this.runAsGroup = Input.ofNullable(runAsGroup);
            return this;
        }

        public Builder setRunAsUser(Input<RunAsUserStrategyOptionsArgs> runAsUser) {
            this.runAsUser = Objects.requireNonNull(runAsUser);
            return this;
        }

        public Builder setRunAsUser(RunAsUserStrategyOptionsArgs runAsUser) {
            this.runAsUser = Input.of(Objects.requireNonNull(runAsUser));
            return this;
        }

        public Builder setRuntimeClass(@Nullable Input<RuntimeClassStrategyOptionsArgs> runtimeClass) {
            this.runtimeClass = runtimeClass;
            return this;
        }

        public Builder setRuntimeClass(@Nullable RuntimeClassStrategyOptionsArgs runtimeClass) {
            this.runtimeClass = Input.ofNullable(runtimeClass);
            return this;
        }

        public Builder setSeLinux(Input<SELinuxStrategyOptionsArgs> seLinux) {
            this.seLinux = Objects.requireNonNull(seLinux);
            return this;
        }

        public Builder setSeLinux(SELinuxStrategyOptionsArgs seLinux) {
            this.seLinux = Input.of(Objects.requireNonNull(seLinux));
            return this;
        }

        public Builder setSupplementalGroups(Input<SupplementalGroupsStrategyOptionsArgs> supplementalGroups) {
            this.supplementalGroups = Objects.requireNonNull(supplementalGroups);
            return this;
        }

        public Builder setSupplementalGroups(SupplementalGroupsStrategyOptionsArgs supplementalGroups) {
            this.supplementalGroups = Input.of(Objects.requireNonNull(supplementalGroups));
            return this;
        }

        public Builder setVolumes(@Nullable Input<List<String>> volumes) {
            this.volumes = volumes;
            return this;
        }

        public Builder setVolumes(@Nullable List<String> volumes) {
            this.volumes = Input.ofNullable(volumes);
            return this;
        }
        public PodSecurityPolicySpecArgs build() {
            return new PodSecurityPolicySpecArgs(allowPrivilegeEscalation, allowedCSIDrivers, allowedCapabilities, allowedFlexVolumes, allowedHostPaths, allowedProcMountTypes, allowedUnsafeSysctls, defaultAddCapabilities, defaultAllowPrivilegeEscalation, forbiddenSysctls, fsGroup, hostIPC, hostNetwork, hostPID, hostPorts, privileged, readOnlyRootFilesystem, requiredDropCapabilities, runAsGroup, runAsUser, runtimeClass, seLinux, supplementalGroups, volumes);
        }
    }
}
