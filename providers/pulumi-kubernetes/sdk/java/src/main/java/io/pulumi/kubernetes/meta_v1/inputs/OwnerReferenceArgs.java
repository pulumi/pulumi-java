// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.kubernetes.meta_v1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.
 * 
 */
public final class OwnerReferenceArgs extends io.pulumi.resources.ResourceArgs {

    public static final OwnerReferenceArgs Empty = new OwnerReferenceArgs();

    /**
     * API version of the referent.
     * 
     */
    @InputImport(name="apiVersion", required=true)
    private final Input<String> apiVersion;

    public Input<String> getApiVersion() {
        return this.apiVersion;
    }

    /**
     * If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
     * 
     */
    @InputImport(name="blockOwnerDeletion")
    private final @Nullable Input<Boolean> blockOwnerDeletion;

    public Input<Boolean> getBlockOwnerDeletion() {
        return this.blockOwnerDeletion == null ? Input.empty() : this.blockOwnerDeletion;
    }

    /**
     * If true, this reference points to the managing controller.
     * 
     */
    @InputImport(name="controller")
    private final @Nullable Input<Boolean> controller;

    public Input<Boolean> getController() {
        return this.controller == null ? Input.empty() : this.controller;
    }

    /**
     * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     * 
     */
    @InputImport(name="kind", required=true)
    private final Input<String> kind;

    public Input<String> getKind() {
        return this.kind;
    }

    /**
     * Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
     * 
     */
    @InputImport(name="name", required=true)
    private final Input<String> name;

    public Input<String> getName() {
        return this.name;
    }

    /**
     * UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
     * 
     */
    @InputImport(name="uid", required=true)
    private final Input<String> uid;

    public Input<String> getUid() {
        return this.uid;
    }

    public OwnerReferenceArgs(
        Input<String> apiVersion,
        @Nullable Input<Boolean> blockOwnerDeletion,
        @Nullable Input<Boolean> controller,
        Input<String> kind,
        Input<String> name,
        Input<String> uid) {
        this.apiVersion = Objects.requireNonNull(apiVersion, "expected parameter 'apiVersion' to be non-null");
        this.blockOwnerDeletion = blockOwnerDeletion;
        this.controller = controller;
        this.kind = Objects.requireNonNull(kind, "expected parameter 'kind' to be non-null");
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.uid = Objects.requireNonNull(uid, "expected parameter 'uid' to be non-null");
    }

    private OwnerReferenceArgs() {
        this.apiVersion = Input.empty();
        this.blockOwnerDeletion = Input.empty();
        this.controller = Input.empty();
        this.kind = Input.empty();
        this.name = Input.empty();
        this.uid = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(OwnerReferenceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> apiVersion;
        private @Nullable Input<Boolean> blockOwnerDeletion;
        private @Nullable Input<Boolean> controller;
        private Input<String> kind;
        private Input<String> name;
        private Input<String> uid;

        public Builder() {
    	      // Empty
        }

        public Builder(OwnerReferenceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.apiVersion = defaults.apiVersion;
    	      this.blockOwnerDeletion = defaults.blockOwnerDeletion;
    	      this.controller = defaults.controller;
    	      this.kind = defaults.kind;
    	      this.name = defaults.name;
    	      this.uid = defaults.uid;
        }

        public Builder setApiVersion(Input<String> apiVersion) {
            this.apiVersion = Objects.requireNonNull(apiVersion);
            return this;
        }

        public Builder setApiVersion(String apiVersion) {
            this.apiVersion = Input.of(Objects.requireNonNull(apiVersion));
            return this;
        }

        public Builder setBlockOwnerDeletion(@Nullable Input<Boolean> blockOwnerDeletion) {
            this.blockOwnerDeletion = blockOwnerDeletion;
            return this;
        }

        public Builder setBlockOwnerDeletion(@Nullable Boolean blockOwnerDeletion) {
            this.blockOwnerDeletion = Input.ofNullable(blockOwnerDeletion);
            return this;
        }

        public Builder setController(@Nullable Input<Boolean> controller) {
            this.controller = controller;
            return this;
        }

        public Builder setController(@Nullable Boolean controller) {
            this.controller = Input.ofNullable(controller);
            return this;
        }

        public Builder setKind(Input<String> kind) {
            this.kind = Objects.requireNonNull(kind);
            return this;
        }

        public Builder setKind(String kind) {
            this.kind = Input.of(Objects.requireNonNull(kind));
            return this;
        }

        public Builder setName(Input<String> name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setName(String name) {
            this.name = Input.of(Objects.requireNonNull(name));
            return this;
        }

        public Builder setUid(Input<String> uid) {
            this.uid = Objects.requireNonNull(uid);
            return this;
        }

        public Builder setUid(String uid) {
            this.uid = Input.of(Objects.requireNonNull(uid));
            return this;
        }

        public OwnerReferenceArgs build() {
            return new OwnerReferenceArgs(apiVersion, blockOwnerDeletion, controller, kind, name, uid);
        }
    }
}
