// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.kubernetes.apiregistration.k8s.io_v1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.kubernetes.apiregistration.k8s.io_v1.inputs.ServiceReferenceArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * APIServiceSpec contains information for locating and communicating with a server. Only https is supported, though you are able to disable certificate verification.
 * 
 */
public final class APIServiceSpecArgs extends io.pulumi.resources.ResourceArgs {

    public static final APIServiceSpecArgs Empty = new APIServiceSpecArgs();

    /**
     * CABundle is a PEM encoded CA bundle which will be used to validate an API server's serving certificate. If unspecified, system trust roots on the apiserver are used.
     * 
     */
    @Import(name="caBundle")
      private final @Nullable Output<String> caBundle;

    public Output<String> getCaBundle() {
        return this.caBundle == null ? Output.empty() : this.caBundle;
    }

    /**
     * Group is the API group name this server hosts
     * 
     */
    @Import(name="group")
      private final @Nullable Output<String> group;

    public Output<String> getGroup() {
        return this.group == null ? Output.empty() : this.group;
    }

    /**
     * GroupPriorityMininum is the priority this group should have at least. Higher priority means that the group is preferred by clients over lower priority ones. Note that other versions of this group might specify even higher GroupPriorityMininum values such that the whole group gets a higher priority. The primary sort is based on GroupPriorityMinimum, ordered highest number to lowest (20 before 10). The secondary sort is based on the alphabetical comparison of the name of the object.  (v1.bar before v1.foo) We'd recommend something like: *.k8s.io (except extensions) at 18000 and PaaSes (OpenShift, Deis) are recommended to be in the 2000s
     * 
     */
    @Import(name="groupPriorityMinimum", required=true)
      private final Output<Integer> groupPriorityMinimum;

    public Output<Integer> getGroupPriorityMinimum() {
        return this.groupPriorityMinimum;
    }

    /**
     * InsecureSkipTLSVerify disables TLS certificate verification when communicating with this server. This is strongly discouraged.  You should use the CABundle instead.
     * 
     */
    @Import(name="insecureSkipTLSVerify")
      private final @Nullable Output<Boolean> insecureSkipTLSVerify;

    public Output<Boolean> getInsecureSkipTLSVerify() {
        return this.insecureSkipTLSVerify == null ? Output.empty() : this.insecureSkipTLSVerify;
    }

    /**
     * Service is a reference to the service for this API server.  It must communicate on port 443. If the Service is nil, that means the handling for the API groupversion is handled locally on this server. The call will simply delegate to the normal handler chain to be fulfilled.
     * 
     */
    @Import(name="service")
      private final @Nullable Output<ServiceReferenceArgs> service;

    public Output<ServiceReferenceArgs> getService() {
        return this.service == null ? Output.empty() : this.service;
    }

    /**
     * Version is the API version this server hosts.  For example, "v1"
     * 
     */
    @Import(name="version")
      private final @Nullable Output<String> version;

    public Output<String> getVersion() {
        return this.version == null ? Output.empty() : this.version;
    }

    /**
     * VersionPriority controls the ordering of this API version inside of its group.  Must be greater than zero. The primary sort is based on VersionPriority, ordered highest to lowest (20 before 10). Since it's inside of a group, the number can be small, probably in the 10s. In case of equal version priorities, the version string will be used to compute the order inside a group. If the version string is "kube-like", it will sort above non "kube-like" version strings, which are ordered lexicographically. "Kube-like" versions start with a "v", then are followed by a number (the major version), then optionally the string "alpha" or "beta" and another number (the minor version). These are sorted first by GA > beta > alpha (where GA is a version with no suffix such as beta or alpha), and then by comparing major version, then minor version. An example sorted list of versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10.
     * 
     */
    @Import(name="versionPriority", required=true)
      private final Output<Integer> versionPriority;

    public Output<Integer> getVersionPriority() {
        return this.versionPriority;
    }

    public APIServiceSpecArgs(
        @Nullable Output<String> caBundle,
        @Nullable Output<String> group,
        Output<Integer> groupPriorityMinimum,
        @Nullable Output<Boolean> insecureSkipTLSVerify,
        @Nullable Output<ServiceReferenceArgs> service,
        @Nullable Output<String> version,
        Output<Integer> versionPriority) {
        this.caBundle = caBundle;
        this.group = group;
        this.groupPriorityMinimum = Objects.requireNonNull(groupPriorityMinimum, "expected parameter 'groupPriorityMinimum' to be non-null");
        this.insecureSkipTLSVerify = insecureSkipTLSVerify;
        this.service = service;
        this.version = version;
        this.versionPriority = Objects.requireNonNull(versionPriority, "expected parameter 'versionPriority' to be non-null");
    }

    private APIServiceSpecArgs() {
        this.caBundle = Output.empty();
        this.group = Output.empty();
        this.groupPriorityMinimum = Output.empty();
        this.insecureSkipTLSVerify = Output.empty();
        this.service = Output.empty();
        this.version = Output.empty();
        this.versionPriority = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(APIServiceSpecArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> caBundle;
        private @Nullable Output<String> group;
        private Output<Integer> groupPriorityMinimum;
        private @Nullable Output<Boolean> insecureSkipTLSVerify;
        private @Nullable Output<ServiceReferenceArgs> service;
        private @Nullable Output<String> version;
        private Output<Integer> versionPriority;

        public Builder() {
    	      // Empty
        }

        public Builder(APIServiceSpecArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.caBundle = defaults.caBundle;
    	      this.group = defaults.group;
    	      this.groupPriorityMinimum = defaults.groupPriorityMinimum;
    	      this.insecureSkipTLSVerify = defaults.insecureSkipTLSVerify;
    	      this.service = defaults.service;
    	      this.version = defaults.version;
    	      this.versionPriority = defaults.versionPriority;
        }

        public Builder caBundle(@Nullable Output<String> caBundle) {
            this.caBundle = caBundle;
            return this;
        }

        public Builder caBundle(@Nullable String caBundle) {
            this.caBundle = Output.ofNullable(caBundle);
            return this;
        }

        public Builder group(@Nullable Output<String> group) {
            this.group = group;
            return this;
        }

        public Builder group(@Nullable String group) {
            this.group = Output.ofNullable(group);
            return this;
        }

        public Builder groupPriorityMinimum(Output<Integer> groupPriorityMinimum) {
            this.groupPriorityMinimum = Objects.requireNonNull(groupPriorityMinimum);
            return this;
        }

        public Builder groupPriorityMinimum(Integer groupPriorityMinimum) {
            this.groupPriorityMinimum = Output.of(Objects.requireNonNull(groupPriorityMinimum));
            return this;
        }

        public Builder insecureSkipTLSVerify(@Nullable Output<Boolean> insecureSkipTLSVerify) {
            this.insecureSkipTLSVerify = insecureSkipTLSVerify;
            return this;
        }

        public Builder insecureSkipTLSVerify(@Nullable Boolean insecureSkipTLSVerify) {
            this.insecureSkipTLSVerify = Output.ofNullable(insecureSkipTLSVerify);
            return this;
        }

        public Builder service(@Nullable Output<ServiceReferenceArgs> service) {
            this.service = service;
            return this;
        }

        public Builder service(@Nullable ServiceReferenceArgs service) {
            this.service = Output.ofNullable(service);
            return this;
        }

        public Builder version(@Nullable Output<String> version) {
            this.version = version;
            return this;
        }

        public Builder version(@Nullable String version) {
            this.version = Output.ofNullable(version);
            return this;
        }

        public Builder versionPriority(Output<Integer> versionPriority) {
            this.versionPriority = Objects.requireNonNull(versionPriority);
            return this;
        }

        public Builder versionPriority(Integer versionPriority) {
            this.versionPriority = Output.of(Objects.requireNonNull(versionPriority));
            return this;
        }
        public APIServiceSpecArgs build() {
            return new APIServiceSpecArgs(caBundle, group, groupPriorityMinimum, insecureSkipTLSVerify, service, version, versionPriority);
        }
    }
}
