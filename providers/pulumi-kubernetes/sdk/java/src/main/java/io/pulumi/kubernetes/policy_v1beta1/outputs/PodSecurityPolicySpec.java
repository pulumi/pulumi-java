// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.kubernetes.policy_v1beta1.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import io.pulumi.kubernetes.policy_v1beta1.outputs.AllowedCSIDriver;
import io.pulumi.kubernetes.policy_v1beta1.outputs.AllowedFlexVolume;
import io.pulumi.kubernetes.policy_v1beta1.outputs.AllowedHostPath;
import io.pulumi.kubernetes.policy_v1beta1.outputs.FSGroupStrategyOptions;
import io.pulumi.kubernetes.policy_v1beta1.outputs.HostPortRange;
import io.pulumi.kubernetes.policy_v1beta1.outputs.RunAsGroupStrategyOptions;
import io.pulumi.kubernetes.policy_v1beta1.outputs.RunAsUserStrategyOptions;
import io.pulumi.kubernetes.policy_v1beta1.outputs.RuntimeClassStrategyOptions;
import io.pulumi.kubernetes.policy_v1beta1.outputs.SELinuxStrategyOptions;
import io.pulumi.kubernetes.policy_v1beta1.outputs.SupplementalGroupsStrategyOptions;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class PodSecurityPolicySpec {
    private final @Nullable Boolean allowPrivilegeEscalation;
    private final @Nullable List<AllowedCSIDriver> allowedCSIDrivers;
    private final @Nullable List<String> allowedCapabilities;
    private final @Nullable List<AllowedFlexVolume> allowedFlexVolumes;
    private final @Nullable List<AllowedHostPath> allowedHostPaths;
    private final @Nullable List<String> allowedProcMountTypes;
    private final @Nullable List<String> allowedUnsafeSysctls;
    private final @Nullable List<String> defaultAddCapabilities;
    private final @Nullable Boolean defaultAllowPrivilegeEscalation;
    private final @Nullable List<String> forbiddenSysctls;
    private final FSGroupStrategyOptions fsGroup;
    private final @Nullable Boolean hostIPC;
    private final @Nullable Boolean hostNetwork;
    private final @Nullable Boolean hostPID;
    private final @Nullable List<HostPortRange> hostPorts;
    private final @Nullable Boolean privileged;
    private final @Nullable Boolean readOnlyRootFilesystem;
    private final @Nullable List<String> requiredDropCapabilities;
    private final @Nullable RunAsGroupStrategyOptions runAsGroup;
    private final RunAsUserStrategyOptions runAsUser;
    private final @Nullable RuntimeClassStrategyOptions runtimeClass;
    private final SELinuxStrategyOptions seLinux;
    private final SupplementalGroupsStrategyOptions supplementalGroups;
    private final @Nullable List<String> volumes;

    @OutputCustomType.Constructor({"allowPrivilegeEscalation","allowedCSIDrivers","allowedCapabilities","allowedFlexVolumes","allowedHostPaths","allowedProcMountTypes","allowedUnsafeSysctls","defaultAddCapabilities","defaultAllowPrivilegeEscalation","forbiddenSysctls","fsGroup","hostIPC","hostNetwork","hostPID","hostPorts","privileged","readOnlyRootFilesystem","requiredDropCapabilities","runAsGroup","runAsUser","runtimeClass","seLinux","supplementalGroups","volumes"})
    private PodSecurityPolicySpec(
        @Nullable Boolean allowPrivilegeEscalation,
        @Nullable List<AllowedCSIDriver> allowedCSIDrivers,
        @Nullable List<String> allowedCapabilities,
        @Nullable List<AllowedFlexVolume> allowedFlexVolumes,
        @Nullable List<AllowedHostPath> allowedHostPaths,
        @Nullable List<String> allowedProcMountTypes,
        @Nullable List<String> allowedUnsafeSysctls,
        @Nullable List<String> defaultAddCapabilities,
        @Nullable Boolean defaultAllowPrivilegeEscalation,
        @Nullable List<String> forbiddenSysctls,
        FSGroupStrategyOptions fsGroup,
        @Nullable Boolean hostIPC,
        @Nullable Boolean hostNetwork,
        @Nullable Boolean hostPID,
        @Nullable List<HostPortRange> hostPorts,
        @Nullable Boolean privileged,
        @Nullable Boolean readOnlyRootFilesystem,
        @Nullable List<String> requiredDropCapabilities,
        @Nullable RunAsGroupStrategyOptions runAsGroup,
        RunAsUserStrategyOptions runAsUser,
        @Nullable RuntimeClassStrategyOptions runtimeClass,
        SELinuxStrategyOptions seLinux,
        SupplementalGroupsStrategyOptions supplementalGroups,
        @Nullable List<String> volumes) {
        this.allowPrivilegeEscalation = allowPrivilegeEscalation;
        this.allowedCSIDrivers = allowedCSIDrivers;
        this.allowedCapabilities = allowedCapabilities;
        this.allowedFlexVolumes = allowedFlexVolumes;
        this.allowedHostPaths = allowedHostPaths;
        this.allowedProcMountTypes = allowedProcMountTypes;
        this.allowedUnsafeSysctls = allowedUnsafeSysctls;
        this.defaultAddCapabilities = defaultAddCapabilities;
        this.defaultAllowPrivilegeEscalation = defaultAllowPrivilegeEscalation;
        this.forbiddenSysctls = forbiddenSysctls;
        this.fsGroup = Objects.requireNonNull(fsGroup);
        this.hostIPC = hostIPC;
        this.hostNetwork = hostNetwork;
        this.hostPID = hostPID;
        this.hostPorts = hostPorts;
        this.privileged = privileged;
        this.readOnlyRootFilesystem = readOnlyRootFilesystem;
        this.requiredDropCapabilities = requiredDropCapabilities;
        this.runAsGroup = runAsGroup;
        this.runAsUser = Objects.requireNonNull(runAsUser);
        this.runtimeClass = runtimeClass;
        this.seLinux = Objects.requireNonNull(seLinux);
        this.supplementalGroups = Objects.requireNonNull(supplementalGroups);
        this.volumes = volumes;
    }

    public Optional<Boolean> getAllowPrivilegeEscalation() {
        return Optional.ofNullable(this.allowPrivilegeEscalation);
    }
    public List<AllowedCSIDriver> getAllowedCSIDrivers() {
        return this.allowedCSIDrivers == null ? List.of() : this.allowedCSIDrivers;
    }
    public List<String> getAllowedCapabilities() {
        return this.allowedCapabilities == null ? List.of() : this.allowedCapabilities;
    }
    public List<AllowedFlexVolume> getAllowedFlexVolumes() {
        return this.allowedFlexVolumes == null ? List.of() : this.allowedFlexVolumes;
    }
    public List<AllowedHostPath> getAllowedHostPaths() {
        return this.allowedHostPaths == null ? List.of() : this.allowedHostPaths;
    }
    public List<String> getAllowedProcMountTypes() {
        return this.allowedProcMountTypes == null ? List.of() : this.allowedProcMountTypes;
    }
    public List<String> getAllowedUnsafeSysctls() {
        return this.allowedUnsafeSysctls == null ? List.of() : this.allowedUnsafeSysctls;
    }
    public List<String> getDefaultAddCapabilities() {
        return this.defaultAddCapabilities == null ? List.of() : this.defaultAddCapabilities;
    }
    public Optional<Boolean> getDefaultAllowPrivilegeEscalation() {
        return Optional.ofNullable(this.defaultAllowPrivilegeEscalation);
    }
    public List<String> getForbiddenSysctls() {
        return this.forbiddenSysctls == null ? List.of() : this.forbiddenSysctls;
    }
    public FSGroupStrategyOptions getFsGroup() {
        return this.fsGroup;
    }
    public Optional<Boolean> getHostIPC() {
        return Optional.ofNullable(this.hostIPC);
    }
    public Optional<Boolean> getHostNetwork() {
        return Optional.ofNullable(this.hostNetwork);
    }
    public Optional<Boolean> getHostPID() {
        return Optional.ofNullable(this.hostPID);
    }
    public List<HostPortRange> getHostPorts() {
        return this.hostPorts == null ? List.of() : this.hostPorts;
    }
    public Optional<Boolean> getPrivileged() {
        return Optional.ofNullable(this.privileged);
    }
    public Optional<Boolean> getReadOnlyRootFilesystem() {
        return Optional.ofNullable(this.readOnlyRootFilesystem);
    }
    public List<String> getRequiredDropCapabilities() {
        return this.requiredDropCapabilities == null ? List.of() : this.requiredDropCapabilities;
    }
    public Optional<RunAsGroupStrategyOptions> getRunAsGroup() {
        return Optional.ofNullable(this.runAsGroup);
    }
    public RunAsUserStrategyOptions getRunAsUser() {
        return this.runAsUser;
    }
    public Optional<RuntimeClassStrategyOptions> getRuntimeClass() {
        return Optional.ofNullable(this.runtimeClass);
    }
    public SELinuxStrategyOptions getSeLinux() {
        return this.seLinux;
    }
    public SupplementalGroupsStrategyOptions getSupplementalGroups() {
        return this.supplementalGroups;
    }
    public List<String> getVolumes() {
        return this.volumes == null ? List.of() : this.volumes;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PodSecurityPolicySpec defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Boolean allowPrivilegeEscalation;
        private @Nullable List<AllowedCSIDriver> allowedCSIDrivers;
        private @Nullable List<String> allowedCapabilities;
        private @Nullable List<AllowedFlexVolume> allowedFlexVolumes;
        private @Nullable List<AllowedHostPath> allowedHostPaths;
        private @Nullable List<String> allowedProcMountTypes;
        private @Nullable List<String> allowedUnsafeSysctls;
        private @Nullable List<String> defaultAddCapabilities;
        private @Nullable Boolean defaultAllowPrivilegeEscalation;
        private @Nullable List<String> forbiddenSysctls;
        private FSGroupStrategyOptions fsGroup;
        private @Nullable Boolean hostIPC;
        private @Nullable Boolean hostNetwork;
        private @Nullable Boolean hostPID;
        private @Nullable List<HostPortRange> hostPorts;
        private @Nullable Boolean privileged;
        private @Nullable Boolean readOnlyRootFilesystem;
        private @Nullable List<String> requiredDropCapabilities;
        private @Nullable RunAsGroupStrategyOptions runAsGroup;
        private RunAsUserStrategyOptions runAsUser;
        private @Nullable RuntimeClassStrategyOptions runtimeClass;
        private SELinuxStrategyOptions seLinux;
        private SupplementalGroupsStrategyOptions supplementalGroups;
        private @Nullable List<String> volumes;

        public Builder() {
    	      // Empty
        }

        public Builder(PodSecurityPolicySpec defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowPrivilegeEscalation = defaults.allowPrivilegeEscalation;
    	      this.allowedCSIDrivers = defaults.allowedCSIDrivers;
    	      this.allowedCapabilities = defaults.allowedCapabilities;
    	      this.allowedFlexVolumes = defaults.allowedFlexVolumes;
    	      this.allowedHostPaths = defaults.allowedHostPaths;
    	      this.allowedProcMountTypes = defaults.allowedProcMountTypes;
    	      this.allowedUnsafeSysctls = defaults.allowedUnsafeSysctls;
    	      this.defaultAddCapabilities = defaults.defaultAddCapabilities;
    	      this.defaultAllowPrivilegeEscalation = defaults.defaultAllowPrivilegeEscalation;
    	      this.forbiddenSysctls = defaults.forbiddenSysctls;
    	      this.fsGroup = defaults.fsGroup;
    	      this.hostIPC = defaults.hostIPC;
    	      this.hostNetwork = defaults.hostNetwork;
    	      this.hostPID = defaults.hostPID;
    	      this.hostPorts = defaults.hostPorts;
    	      this.privileged = defaults.privileged;
    	      this.readOnlyRootFilesystem = defaults.readOnlyRootFilesystem;
    	      this.requiredDropCapabilities = defaults.requiredDropCapabilities;
    	      this.runAsGroup = defaults.runAsGroup;
    	      this.runAsUser = defaults.runAsUser;
    	      this.runtimeClass = defaults.runtimeClass;
    	      this.seLinux = defaults.seLinux;
    	      this.supplementalGroups = defaults.supplementalGroups;
    	      this.volumes = defaults.volumes;
        }

        public Builder setAllowPrivilegeEscalation(@Nullable Boolean allowPrivilegeEscalation) {
            this.allowPrivilegeEscalation = allowPrivilegeEscalation;
            return this;
        }

        public Builder setAllowedCSIDrivers(@Nullable List<AllowedCSIDriver> allowedCSIDrivers) {
            this.allowedCSIDrivers = allowedCSIDrivers;
            return this;
        }

        public Builder setAllowedCapabilities(@Nullable List<String> allowedCapabilities) {
            this.allowedCapabilities = allowedCapabilities;
            return this;
        }

        public Builder setAllowedFlexVolumes(@Nullable List<AllowedFlexVolume> allowedFlexVolumes) {
            this.allowedFlexVolumes = allowedFlexVolumes;
            return this;
        }

        public Builder setAllowedHostPaths(@Nullable List<AllowedHostPath> allowedHostPaths) {
            this.allowedHostPaths = allowedHostPaths;
            return this;
        }

        public Builder setAllowedProcMountTypes(@Nullable List<String> allowedProcMountTypes) {
            this.allowedProcMountTypes = allowedProcMountTypes;
            return this;
        }

        public Builder setAllowedUnsafeSysctls(@Nullable List<String> allowedUnsafeSysctls) {
            this.allowedUnsafeSysctls = allowedUnsafeSysctls;
            return this;
        }

        public Builder setDefaultAddCapabilities(@Nullable List<String> defaultAddCapabilities) {
            this.defaultAddCapabilities = defaultAddCapabilities;
            return this;
        }

        public Builder setDefaultAllowPrivilegeEscalation(@Nullable Boolean defaultAllowPrivilegeEscalation) {
            this.defaultAllowPrivilegeEscalation = defaultAllowPrivilegeEscalation;
            return this;
        }

        public Builder setForbiddenSysctls(@Nullable List<String> forbiddenSysctls) {
            this.forbiddenSysctls = forbiddenSysctls;
            return this;
        }

        public Builder setFsGroup(FSGroupStrategyOptions fsGroup) {
            this.fsGroup = Objects.requireNonNull(fsGroup);
            return this;
        }

        public Builder setHostIPC(@Nullable Boolean hostIPC) {
            this.hostIPC = hostIPC;
            return this;
        }

        public Builder setHostNetwork(@Nullable Boolean hostNetwork) {
            this.hostNetwork = hostNetwork;
            return this;
        }

        public Builder setHostPID(@Nullable Boolean hostPID) {
            this.hostPID = hostPID;
            return this;
        }

        public Builder setHostPorts(@Nullable List<HostPortRange> hostPorts) {
            this.hostPorts = hostPorts;
            return this;
        }

        public Builder setPrivileged(@Nullable Boolean privileged) {
            this.privileged = privileged;
            return this;
        }

        public Builder setReadOnlyRootFilesystem(@Nullable Boolean readOnlyRootFilesystem) {
            this.readOnlyRootFilesystem = readOnlyRootFilesystem;
            return this;
        }

        public Builder setRequiredDropCapabilities(@Nullable List<String> requiredDropCapabilities) {
            this.requiredDropCapabilities = requiredDropCapabilities;
            return this;
        }

        public Builder setRunAsGroup(@Nullable RunAsGroupStrategyOptions runAsGroup) {
            this.runAsGroup = runAsGroup;
            return this;
        }

        public Builder setRunAsUser(RunAsUserStrategyOptions runAsUser) {
            this.runAsUser = Objects.requireNonNull(runAsUser);
            return this;
        }

        public Builder setRuntimeClass(@Nullable RuntimeClassStrategyOptions runtimeClass) {
            this.runtimeClass = runtimeClass;
            return this;
        }

        public Builder setSeLinux(SELinuxStrategyOptions seLinux) {
            this.seLinux = Objects.requireNonNull(seLinux);
            return this;
        }

        public Builder setSupplementalGroups(SupplementalGroupsStrategyOptions supplementalGroups) {
            this.supplementalGroups = Objects.requireNonNull(supplementalGroups);
            return this;
        }

        public Builder setVolumes(@Nullable List<String> volumes) {
            this.volumes = volumes;
            return this;
        }

        public PodSecurityPolicySpec build() {
            return new PodSecurityPolicySpec(allowPrivilegeEscalation, allowedCSIDrivers, allowedCapabilities, allowedFlexVolumes, allowedHostPaths, allowedProcMountTypes, allowedUnsafeSysctls, defaultAddCapabilities, defaultAllowPrivilegeEscalation, forbiddenSysctls, fsGroup, hostIPC, hostNetwork, hostPID, hostPorts, privileged, readOnlyRootFilesystem, requiredDropCapabilities, runAsGroup, runAsUser, runtimeClass, seLinux, supplementalGroups, volumes);
        }
    }
}
