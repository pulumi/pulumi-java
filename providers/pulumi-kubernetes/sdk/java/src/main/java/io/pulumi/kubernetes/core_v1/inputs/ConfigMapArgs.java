// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.kubernetes.core_v1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.kubernetes.meta_v1.inputs.ObjectMetaArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * ConfigMap holds configuration data for pods to consume.
 * 
 */
public final class ConfigMapArgs extends io.pulumi.resources.ResourceArgs {

    public static final ConfigMapArgs Empty = new ConfigMapArgs();

    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     * 
     */
    @InputImport(name="apiVersion")
    private final @Nullable Input<String> apiVersion;

    public Input<String> getApiVersion() {
        return this.apiVersion == null ? Input.empty() : this.apiVersion;
    }

    /**
     * BinaryData contains the binary data. Each key must consist of alphanumeric characters, '-', '_' or '.'. BinaryData can contain byte sequences that are not in the UTF-8 range. The keys stored in BinaryData must not overlap with the ones in the Data field, this is enforced during validation process. Using this field will require 1.10+ apiserver and kubelet.
     * 
     */
    @InputImport(name="binaryData")
    private final @Nullable Input<Map<String,String>> binaryData;

    public Input<Map<String,String>> getBinaryData() {
        return this.binaryData == null ? Input.empty() : this.binaryData;
    }

    /**
     * Data contains the configuration data. Each key must consist of alphanumeric characters, '-', '_' or '.'. Values with non-UTF-8 byte sequences must use the BinaryData field. The keys stored in Data must not overlap with the keys in the BinaryData field, this is enforced during validation process.
     * 
     */
    @InputImport(name="data")
    private final @Nullable Input<Map<String,String>> data;

    public Input<Map<String,String>> getData() {
        return this.data == null ? Input.empty() : this.data;
    }

    /**
     * Immutable, if set to true, ensures that data stored in the ConfigMap cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil.
     * 
     */
    @InputImport(name="immutable")
    private final @Nullable Input<Boolean> immutable;

    public Input<Boolean> getImmutable() {
        return this.immutable == null ? Input.empty() : this.immutable;
    }

    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     * 
     */
    @InputImport(name="kind")
    private final @Nullable Input<String> kind;

    public Input<String> getKind() {
        return this.kind == null ? Input.empty() : this.kind;
    }

    /**
     * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
     * 
     */
    @InputImport(name="metadata")
    private final @Nullable Input<ObjectMetaArgs> metadata;

    public Input<ObjectMetaArgs> getMetadata() {
        return this.metadata == null ? Input.empty() : this.metadata;
    }

    public ConfigMapArgs(
        @Nullable Input<String> apiVersion,
        @Nullable Input<Map<String,String>> binaryData,
        @Nullable Input<Map<String,String>> data,
        @Nullable Input<Boolean> immutable,
        @Nullable Input<String> kind,
        @Nullable Input<ObjectMetaArgs> metadata) {
        this.apiVersion = apiVersion;
        this.binaryData = binaryData;
        this.data = data;
        this.immutable = immutable;
        this.kind = kind;
        this.metadata = metadata;
    }

    private ConfigMapArgs() {
        this.apiVersion = Input.empty();
        this.binaryData = Input.empty();
        this.data = Input.empty();
        this.immutable = Input.empty();
        this.kind = Input.empty();
        this.metadata = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConfigMapArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> apiVersion;
        private @Nullable Input<Map<String,String>> binaryData;
        private @Nullable Input<Map<String,String>> data;
        private @Nullable Input<Boolean> immutable;
        private @Nullable Input<String> kind;
        private @Nullable Input<ObjectMetaArgs> metadata;

        public Builder() {
    	      // Empty
        }

        public Builder(ConfigMapArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.apiVersion = defaults.apiVersion;
    	      this.binaryData = defaults.binaryData;
    	      this.data = defaults.data;
    	      this.immutable = defaults.immutable;
    	      this.kind = defaults.kind;
    	      this.metadata = defaults.metadata;
        }

        public Builder setApiVersion(@Nullable Input<String> apiVersion) {
            this.apiVersion = apiVersion;
            return this;
        }

        public Builder setApiVersion(@Nullable String apiVersion) {
            this.apiVersion = Input.ofNullable(apiVersion);
            return this;
        }

        public Builder setBinaryData(@Nullable Input<Map<String,String>> binaryData) {
            this.binaryData = binaryData;
            return this;
        }

        public Builder setBinaryData(@Nullable Map<String,String> binaryData) {
            this.binaryData = Input.ofNullable(binaryData);
            return this;
        }

        public Builder setData(@Nullable Input<Map<String,String>> data) {
            this.data = data;
            return this;
        }

        public Builder setData(@Nullable Map<String,String> data) {
            this.data = Input.ofNullable(data);
            return this;
        }

        public Builder setImmutable(@Nullable Input<Boolean> immutable) {
            this.immutable = immutable;
            return this;
        }

        public Builder setImmutable(@Nullable Boolean immutable) {
            this.immutable = Input.ofNullable(immutable);
            return this;
        }

        public Builder setKind(@Nullable Input<String> kind) {
            this.kind = kind;
            return this;
        }

        public Builder setKind(@Nullable String kind) {
            this.kind = Input.ofNullable(kind);
            return this;
        }

        public Builder setMetadata(@Nullable Input<ObjectMetaArgs> metadata) {
            this.metadata = metadata;
            return this;
        }

        public Builder setMetadata(@Nullable ObjectMetaArgs metadata) {
            this.metadata = Input.ofNullable(metadata);
            return this;
        }

        public ConfigMapArgs build() {
            return new ConfigMapArgs(apiVersion, binaryData, data, immutable, kind, metadata);
        }
    }
}
