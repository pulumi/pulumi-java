// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.kubernetes.certificates.k8s.io_v1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * CertificateSigningRequestSpec contains the certificate request.
 * 
 */
public final class CertificateSigningRequestSpecArgs extends io.pulumi.resources.ResourceArgs {

    public static final CertificateSigningRequestSpecArgs Empty = new CertificateSigningRequestSpecArgs();

    /**
     * expirationSeconds is the requested duration of validity of the issued certificate. The certificate signer may issue a certificate with a different validity duration so a client must check the delta between the notBefore and and notAfter fields in the issued certificate to determine the actual duration.
     * 
     * The v1.22+ in-tree implementations of the well-known Kubernetes signers will honor this field as long as the requested duration is not greater than the maximum duration they will honor per the --cluster-signing-duration CLI flag to the Kubernetes controller manager.
     * 
     * Certificate signers may not honor this field for various reasons:
     * 
     *   1. Old signer that is unaware of the field (such as the in-tree
     *      implementations prior to v1.22)
     *   2. Signer whose configured maximum is shorter than the requested duration
     *   3. Signer whose configured minimum is longer than the requested duration
     * 
     * The minimum valid value for expirationSeconds is 600, i.e. 10 minutes.
     * 
     * As of v1.22, this field is beta and is controlled via the CSRDuration feature gate.
     * 
     */
    @Import(name="expirationSeconds")
      private final @Nullable Output<Integer> expirationSeconds;

    public Output<Integer> getExpirationSeconds() {
        return this.expirationSeconds == null ? Output.empty() : this.expirationSeconds;
    }

    /**
     * extra contains extra attributes of the user that created the CertificateSigningRequest. Populated by the API server on creation and immutable.
     * 
     */
    @Import(name="extra")
      private final @Nullable Output<Map<String,List<String>>> extra;

    public Output<Map<String,List<String>>> getExtra() {
        return this.extra == null ? Output.empty() : this.extra;
    }

    /**
     * groups contains group membership of the user that created the CertificateSigningRequest. Populated by the API server on creation and immutable.
     * 
     */
    @Import(name="groups")
      private final @Nullable Output<List<String>> groups;

    public Output<List<String>> getGroups() {
        return this.groups == null ? Output.empty() : this.groups;
    }

    /**
     * request contains an x509 certificate signing request encoded in a "CERTIFICATE REQUEST" PEM block. When serialized as JSON or YAML, the data is additionally base64-encoded.
     * 
     */
    @Import(name="request", required=true)
      private final Output<String> request;

    public Output<String> getRequest() {
        return this.request;
    }

    /**
     * signerName indicates the requested signer, and is a qualified name.
     * 
     * List/watch requests for CertificateSigningRequests can filter on this field using a "spec.signerName=NAME" fieldSelector.
     * 
     * Well-known Kubernetes signers are:
     *  1. "kubernetes.io/kube-apiserver-client": issues client certificates that can be used to authenticate to kube-apiserver.
     *       Requests for this signer are never auto-approved by kube-controller-manager, can be issued by the "csrsigning" controller in kube-controller-manager.
     *  2. "kubernetes.io/kube-apiserver-client-kubelet": issues client certificates that kubelets use to authenticate to kube-apiserver.
     *       Requests for this signer can be auto-approved by the "csrapproving" controller in kube-controller-manager, and can be issued by the "csrsigning" controller in kube-controller-manager.
     *  3. "kubernetes.io/kubelet-serving" issues serving certificates that kubelets use to serve TLS endpoints, which kube-apiserver can connect to securely.
     *       Requests for this signer are never auto-approved by kube-controller-manager, and can be issued by the "csrsigning" controller in kube-controller-manager.
     * 
     * More details are available at https://k8s.io/docs/reference/access-authn-authz/certificate-signing-requests/#kubernetes-signers
     * 
     * Custom signerNames can also be specified. The signer defines:
     *  1. Trust distribution: how trust (CA bundles) are distributed.
     *  2. Permitted subjects: and behavior when a disallowed subject is requested.
     *  3. Required, permitted, or forbidden x509 extensions in the request (including whether subjectAltNames are allowed, which types, restrictions on allowed values) and behavior when a disallowed extension is requested.
     *  4. Required, permitted, or forbidden key usages / extended key usages.
     *  5. Expiration/certificate lifetime: whether it is fixed by the signer, configurable by the admin.
     *  6. Whether or not requests for CA certificates are allowed.
     * 
     */
    @Import(name="signerName", required=true)
      private final Output<String> signerName;

    public Output<String> getSignerName() {
        return this.signerName;
    }

    /**
     * uid contains the uid of the user that created the CertificateSigningRequest. Populated by the API server on creation and immutable.
     * 
     */
    @Import(name="uid")
      private final @Nullable Output<String> uid;

    public Output<String> getUid() {
        return this.uid == null ? Output.empty() : this.uid;
    }

    /**
     * usages specifies a set of key usages requested in the issued certificate.
     * 
     * Requests for TLS client certificates typically request: "digital signature", "key encipherment", "client auth".
     * 
     * Requests for TLS serving certificates typically request: "key encipherment", "digital signature", "server auth".
     * 
     * Valid values are:
     *  "signing", "digital signature", "content commitment",
     *  "key encipherment", "key agreement", "data encipherment",
     *  "cert sign", "crl sign", "encipher only", "decipher only", "any",
     *  "server auth", "client auth",
     *  "code signing", "email protection", "s/mime",
     *  "ipsec end system", "ipsec tunnel", "ipsec user",
     *  "timestamping", "ocsp signing", "microsoft sgc", "netscape sgc"
     * 
     */
    @Import(name="usages")
      private final @Nullable Output<List<String>> usages;

    public Output<List<String>> getUsages() {
        return this.usages == null ? Output.empty() : this.usages;
    }

    /**
     * username contains the name of the user that created the CertificateSigningRequest. Populated by the API server on creation and immutable.
     * 
     */
    @Import(name="username")
      private final @Nullable Output<String> username;

    public Output<String> getUsername() {
        return this.username == null ? Output.empty() : this.username;
    }

    public CertificateSigningRequestSpecArgs(
        @Nullable Output<Integer> expirationSeconds,
        @Nullable Output<Map<String,List<String>>> extra,
        @Nullable Output<List<String>> groups,
        Output<String> request,
        Output<String> signerName,
        @Nullable Output<String> uid,
        @Nullable Output<List<String>> usages,
        @Nullable Output<String> username) {
        this.expirationSeconds = expirationSeconds;
        this.extra = extra;
        this.groups = groups;
        this.request = Objects.requireNonNull(request, "expected parameter 'request' to be non-null");
        this.signerName = Objects.requireNonNull(signerName, "expected parameter 'signerName' to be non-null");
        this.uid = uid;
        this.usages = usages;
        this.username = username;
    }

    private CertificateSigningRequestSpecArgs() {
        this.expirationSeconds = Output.empty();
        this.extra = Output.empty();
        this.groups = Output.empty();
        this.request = Output.empty();
        this.signerName = Output.empty();
        this.uid = Output.empty();
        this.usages = Output.empty();
        this.username = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CertificateSigningRequestSpecArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Integer> expirationSeconds;
        private @Nullable Output<Map<String,List<String>>> extra;
        private @Nullable Output<List<String>> groups;
        private Output<String> request;
        private Output<String> signerName;
        private @Nullable Output<String> uid;
        private @Nullable Output<List<String>> usages;
        private @Nullable Output<String> username;

        public Builder() {
    	      // Empty
        }

        public Builder(CertificateSigningRequestSpecArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.expirationSeconds = defaults.expirationSeconds;
    	      this.extra = defaults.extra;
    	      this.groups = defaults.groups;
    	      this.request = defaults.request;
    	      this.signerName = defaults.signerName;
    	      this.uid = defaults.uid;
    	      this.usages = defaults.usages;
    	      this.username = defaults.username;
        }

        public Builder expirationSeconds(@Nullable Output<Integer> expirationSeconds) {
            this.expirationSeconds = expirationSeconds;
            return this;
        }
        public Builder expirationSeconds(@Nullable Integer expirationSeconds) {
            this.expirationSeconds = Output.ofNullable(expirationSeconds);
            return this;
        }
        public Builder extra(@Nullable Output<Map<String,List<String>>> extra) {
            this.extra = extra;
            return this;
        }
        public Builder extra(@Nullable Map<String,List<String>> extra) {
            this.extra = Output.ofNullable(extra);
            return this;
        }
        public Builder groups(@Nullable Output<List<String>> groups) {
            this.groups = groups;
            return this;
        }
        public Builder groups(@Nullable List<String> groups) {
            this.groups = Output.ofNullable(groups);
            return this;
        }
        public Builder groups(String... groups) {
            return groups(List.of(groups));
        }
        public Builder request(Output<String> request) {
            this.request = Objects.requireNonNull(request);
            return this;
        }
        public Builder request(String request) {
            this.request = Output.of(Objects.requireNonNull(request));
            return this;
        }
        public Builder signerName(Output<String> signerName) {
            this.signerName = Objects.requireNonNull(signerName);
            return this;
        }
        public Builder signerName(String signerName) {
            this.signerName = Output.of(Objects.requireNonNull(signerName));
            return this;
        }
        public Builder uid(@Nullable Output<String> uid) {
            this.uid = uid;
            return this;
        }
        public Builder uid(@Nullable String uid) {
            this.uid = Output.ofNullable(uid);
            return this;
        }
        public Builder usages(@Nullable Output<List<String>> usages) {
            this.usages = usages;
            return this;
        }
        public Builder usages(@Nullable List<String> usages) {
            this.usages = Output.ofNullable(usages);
            return this;
        }
        public Builder usages(String... usages) {
            return usages(List.of(usages));
        }
        public Builder username(@Nullable Output<String> username) {
            this.username = username;
            return this;
        }
        public Builder username(@Nullable String username) {
            this.username = Output.ofNullable(username);
            return this;
        }        public CertificateSigningRequestSpecArgs build() {
            return new CertificateSigningRequestSpecArgs(expirationSeconds, extra, groups, request, signerName, uid, usages, username);
        }
    }
}
