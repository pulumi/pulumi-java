// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.kubernetes.core_v1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.kubernetes.core_v1.inputs.LocalObjectReferenceArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.
 * 
 */
public final class ISCSIVolumeSourceArgs extends io.pulumi.resources.ResourceArgs {

    public static final ISCSIVolumeSourceArgs Empty = new ISCSIVolumeSourceArgs();

    /**
     * whether support iSCSI Discovery CHAP authentication
     * 
     */
    @Import(name="chapAuthDiscovery")
      private final @Nullable Output<Boolean> chapAuthDiscovery;

    public Output<Boolean> chapAuthDiscovery() {
        return this.chapAuthDiscovery == null ? Codegen.empty() : this.chapAuthDiscovery;
    }

    /**
     * whether support iSCSI Session CHAP authentication
     * 
     */
    @Import(name="chapAuthSession")
      private final @Nullable Output<Boolean> chapAuthSession;

    public Output<Boolean> chapAuthSession() {
        return this.chapAuthSession == null ? Codegen.empty() : this.chapAuthSession;
    }

    /**
     * Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
     * 
     */
    @Import(name="fsType")
      private final @Nullable Output<String> fsType;

    public Output<String> fsType() {
        return this.fsType == null ? Codegen.empty() : this.fsType;
    }

    /**
     * Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
     * 
     */
    @Import(name="initiatorName")
      private final @Nullable Output<String> initiatorName;

    public Output<String> initiatorName() {
        return this.initiatorName == null ? Codegen.empty() : this.initiatorName;
    }

    /**
     * Target iSCSI Qualified Name.
     * 
     */
    @Import(name="iqn", required=true)
      private final Output<String> iqn;

    public Output<String> iqn() {
        return this.iqn;
    }

    /**
     * iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
     * 
     */
    @Import(name="iscsiInterface")
      private final @Nullable Output<String> iscsiInterface;

    public Output<String> iscsiInterface() {
        return this.iscsiInterface == null ? Codegen.empty() : this.iscsiInterface;
    }

    /**
     * iSCSI Target Lun number.
     * 
     */
    @Import(name="lun", required=true)
      private final Output<Integer> lun;

    public Output<Integer> lun() {
        return this.lun;
    }

    /**
     * iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
     * 
     */
    @Import(name="portals")
      private final @Nullable Output<List<String>> portals;

    public Output<List<String>> portals() {
        return this.portals == null ? Codegen.empty() : this.portals;
    }

    /**
     * ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
     * 
     */
    @Import(name="readOnly")
      private final @Nullable Output<Boolean> readOnly;

    public Output<Boolean> readOnly() {
        return this.readOnly == null ? Codegen.empty() : this.readOnly;
    }

    /**
     * CHAP Secret for iSCSI target and initiator authentication
     * 
     */
    @Import(name="secretRef")
      private final @Nullable Output<LocalObjectReferenceArgs> secretRef;

    public Output<LocalObjectReferenceArgs> secretRef() {
        return this.secretRef == null ? Codegen.empty() : this.secretRef;
    }

    /**
     * iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
     * 
     */
    @Import(name="targetPortal", required=true)
      private final Output<String> targetPortal;

    public Output<String> targetPortal() {
        return this.targetPortal;
    }

    public ISCSIVolumeSourceArgs(
        @Nullable Output<Boolean> chapAuthDiscovery,
        @Nullable Output<Boolean> chapAuthSession,
        @Nullable Output<String> fsType,
        @Nullable Output<String> initiatorName,
        Output<String> iqn,
        @Nullable Output<String> iscsiInterface,
        Output<Integer> lun,
        @Nullable Output<List<String>> portals,
        @Nullable Output<Boolean> readOnly,
        @Nullable Output<LocalObjectReferenceArgs> secretRef,
        Output<String> targetPortal) {
        this.chapAuthDiscovery = chapAuthDiscovery;
        this.chapAuthSession = chapAuthSession;
        this.fsType = fsType;
        this.initiatorName = initiatorName;
        this.iqn = Objects.requireNonNull(iqn, "expected parameter 'iqn' to be non-null");
        this.iscsiInterface = iscsiInterface;
        this.lun = Objects.requireNonNull(lun, "expected parameter 'lun' to be non-null");
        this.portals = portals;
        this.readOnly = readOnly;
        this.secretRef = secretRef;
        this.targetPortal = Objects.requireNonNull(targetPortal, "expected parameter 'targetPortal' to be non-null");
    }

    private ISCSIVolumeSourceArgs() {
        this.chapAuthDiscovery = Codegen.empty();
        this.chapAuthSession = Codegen.empty();
        this.fsType = Codegen.empty();
        this.initiatorName = Codegen.empty();
        this.iqn = Codegen.empty();
        this.iscsiInterface = Codegen.empty();
        this.lun = Codegen.empty();
        this.portals = Codegen.empty();
        this.readOnly = Codegen.empty();
        this.secretRef = Codegen.empty();
        this.targetPortal = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ISCSIVolumeSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Boolean> chapAuthDiscovery;
        private @Nullable Output<Boolean> chapAuthSession;
        private @Nullable Output<String> fsType;
        private @Nullable Output<String> initiatorName;
        private Output<String> iqn;
        private @Nullable Output<String> iscsiInterface;
        private Output<Integer> lun;
        private @Nullable Output<List<String>> portals;
        private @Nullable Output<Boolean> readOnly;
        private @Nullable Output<LocalObjectReferenceArgs> secretRef;
        private Output<String> targetPortal;

        public Builder() {
    	      // Empty
        }

        public Builder(ISCSIVolumeSourceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.chapAuthDiscovery = defaults.chapAuthDiscovery;
    	      this.chapAuthSession = defaults.chapAuthSession;
    	      this.fsType = defaults.fsType;
    	      this.initiatorName = defaults.initiatorName;
    	      this.iqn = defaults.iqn;
    	      this.iscsiInterface = defaults.iscsiInterface;
    	      this.lun = defaults.lun;
    	      this.portals = defaults.portals;
    	      this.readOnly = defaults.readOnly;
    	      this.secretRef = defaults.secretRef;
    	      this.targetPortal = defaults.targetPortal;
        }

        public Builder chapAuthDiscovery(@Nullable Output<Boolean> chapAuthDiscovery) {
            this.chapAuthDiscovery = chapAuthDiscovery;
            return this;
        }
        public Builder chapAuthDiscovery(@Nullable Boolean chapAuthDiscovery) {
            this.chapAuthDiscovery = Codegen.ofNullable(chapAuthDiscovery);
            return this;
        }
        public Builder chapAuthSession(@Nullable Output<Boolean> chapAuthSession) {
            this.chapAuthSession = chapAuthSession;
            return this;
        }
        public Builder chapAuthSession(@Nullable Boolean chapAuthSession) {
            this.chapAuthSession = Codegen.ofNullable(chapAuthSession);
            return this;
        }
        public Builder fsType(@Nullable Output<String> fsType) {
            this.fsType = fsType;
            return this;
        }
        public Builder fsType(@Nullable String fsType) {
            this.fsType = Codegen.ofNullable(fsType);
            return this;
        }
        public Builder initiatorName(@Nullable Output<String> initiatorName) {
            this.initiatorName = initiatorName;
            return this;
        }
        public Builder initiatorName(@Nullable String initiatorName) {
            this.initiatorName = Codegen.ofNullable(initiatorName);
            return this;
        }
        public Builder iqn(Output<String> iqn) {
            this.iqn = Objects.requireNonNull(iqn);
            return this;
        }
        public Builder iqn(String iqn) {
            this.iqn = Output.of(Objects.requireNonNull(iqn));
            return this;
        }
        public Builder iscsiInterface(@Nullable Output<String> iscsiInterface) {
            this.iscsiInterface = iscsiInterface;
            return this;
        }
        public Builder iscsiInterface(@Nullable String iscsiInterface) {
            this.iscsiInterface = Codegen.ofNullable(iscsiInterface);
            return this;
        }
        public Builder lun(Output<Integer> lun) {
            this.lun = Objects.requireNonNull(lun);
            return this;
        }
        public Builder lun(Integer lun) {
            this.lun = Output.of(Objects.requireNonNull(lun));
            return this;
        }
        public Builder portals(@Nullable Output<List<String>> portals) {
            this.portals = portals;
            return this;
        }
        public Builder portals(@Nullable List<String> portals) {
            this.portals = Codegen.ofNullable(portals);
            return this;
        }
        public Builder portals(String... portals) {
            return portals(List.of(portals));
        }
        public Builder readOnly(@Nullable Output<Boolean> readOnly) {
            this.readOnly = readOnly;
            return this;
        }
        public Builder readOnly(@Nullable Boolean readOnly) {
            this.readOnly = Codegen.ofNullable(readOnly);
            return this;
        }
        public Builder secretRef(@Nullable Output<LocalObjectReferenceArgs> secretRef) {
            this.secretRef = secretRef;
            return this;
        }
        public Builder secretRef(@Nullable LocalObjectReferenceArgs secretRef) {
            this.secretRef = Codegen.ofNullable(secretRef);
            return this;
        }
        public Builder targetPortal(Output<String> targetPortal) {
            this.targetPortal = Objects.requireNonNull(targetPortal);
            return this;
        }
        public Builder targetPortal(String targetPortal) {
            this.targetPortal = Output.of(Objects.requireNonNull(targetPortal));
            return this;
        }        public ISCSIVolumeSourceArgs build() {
            return new ISCSIVolumeSourceArgs(chapAuthDiscovery, chapAuthSession, fsType, initiatorName, iqn, iscsiInterface, lun, portals, readOnly, secretRef, targetPortal);
        }
    }
}
