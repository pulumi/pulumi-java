// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.kubernetes.meta_v1.inputs;

import com.google.gson.JsonElement;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.
 * 
 */
public final class ManagedFieldsEntryArgs extends io.pulumi.resources.ResourceArgs {

    public static final ManagedFieldsEntryArgs Empty = new ManagedFieldsEntryArgs();

    /**
     * APIVersion defines the version of this resource that this field set applies to. The format is "group/version" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.
     * 
     */
    @InputImport(name="apiVersion")
      private final @Nullable Output<String> apiVersion;

    public Output<String> getApiVersion() {
        return this.apiVersion == null ? Output.empty() : this.apiVersion;
    }

    /**
     * FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: "FieldsV1"
     * 
     */
    @InputImport(name="fieldsType")
      private final @Nullable Output<String> fieldsType;

    public Output<String> getFieldsType() {
        return this.fieldsType == null ? Output.empty() : this.fieldsType;
    }

    /**
     * FieldsV1 holds the first JSON version format as described in the "FieldsV1" type.
     * 
     */
    @InputImport(name="fieldsV1")
      private final @Nullable Output<JsonElement> fieldsV1;

    public Output<JsonElement> getFieldsV1() {
        return this.fieldsV1 == null ? Output.empty() : this.fieldsV1;
    }

    /**
     * Manager is an identifier of the workflow managing these fields.
     * 
     */
    @InputImport(name="manager")
      private final @Nullable Output<String> manager;

    public Output<String> getManager() {
        return this.manager == null ? Output.empty() : this.manager;
    }

    /**
     * Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.
     * 
     */
    @InputImport(name="operation")
      private final @Nullable Output<String> operation;

    public Output<String> getOperation() {
        return this.operation == null ? Output.empty() : this.operation;
    }

    /**
     * Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.
     * 
     */
    @InputImport(name="subresource")
      private final @Nullable Output<String> subresource;

    public Output<String> getSubresource() {
        return this.subresource == null ? Output.empty() : this.subresource;
    }

    /**
     * Time is timestamp of when these fields were set. It should always be empty if Operation is 'Apply'
     * 
     */
    @InputImport(name="time")
      private final @Nullable Output<String> time;

    public Output<String> getTime() {
        return this.time == null ? Output.empty() : this.time;
    }

    public ManagedFieldsEntryArgs(
        @Nullable Output<String> apiVersion,
        @Nullable Output<String> fieldsType,
        @Nullable Output<JsonElement> fieldsV1,
        @Nullable Output<String> manager,
        @Nullable Output<String> operation,
        @Nullable Output<String> subresource,
        @Nullable Output<String> time) {
        this.apiVersion = apiVersion;
        this.fieldsType = fieldsType;
        this.fieldsV1 = fieldsV1;
        this.manager = manager;
        this.operation = operation;
        this.subresource = subresource;
        this.time = time;
    }

    private ManagedFieldsEntryArgs() {
        this.apiVersion = Output.empty();
        this.fieldsType = Output.empty();
        this.fieldsV1 = Output.empty();
        this.manager = Output.empty();
        this.operation = Output.empty();
        this.subresource = Output.empty();
        this.time = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ManagedFieldsEntryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> apiVersion;
        private @Nullable Output<String> fieldsType;
        private @Nullable Output<JsonElement> fieldsV1;
        private @Nullable Output<String> manager;
        private @Nullable Output<String> operation;
        private @Nullable Output<String> subresource;
        private @Nullable Output<String> time;

        public Builder() {
    	      // Empty
        }

        public Builder(ManagedFieldsEntryArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.apiVersion = defaults.apiVersion;
    	      this.fieldsType = defaults.fieldsType;
    	      this.fieldsV1 = defaults.fieldsV1;
    	      this.manager = defaults.manager;
    	      this.operation = defaults.operation;
    	      this.subresource = defaults.subresource;
    	      this.time = defaults.time;
        }

        public Builder apiVersion(@Nullable Output<String> apiVersion) {
            this.apiVersion = apiVersion;
            return this;
        }

        public Builder apiVersion(@Nullable String apiVersion) {
            this.apiVersion = Output.ofNullable(apiVersion);
            return this;
        }

        public Builder fieldsType(@Nullable Output<String> fieldsType) {
            this.fieldsType = fieldsType;
            return this;
        }

        public Builder fieldsType(@Nullable String fieldsType) {
            this.fieldsType = Output.ofNullable(fieldsType);
            return this;
        }

        public Builder fieldsV1(@Nullable Output<JsonElement> fieldsV1) {
            this.fieldsV1 = fieldsV1;
            return this;
        }

        public Builder fieldsV1(@Nullable JsonElement fieldsV1) {
            this.fieldsV1 = Output.ofNullable(fieldsV1);
            return this;
        }

        public Builder manager(@Nullable Output<String> manager) {
            this.manager = manager;
            return this;
        }

        public Builder manager(@Nullable String manager) {
            this.manager = Output.ofNullable(manager);
            return this;
        }

        public Builder operation(@Nullable Output<String> operation) {
            this.operation = operation;
            return this;
        }

        public Builder operation(@Nullable String operation) {
            this.operation = Output.ofNullable(operation);
            return this;
        }

        public Builder subresource(@Nullable Output<String> subresource) {
            this.subresource = subresource;
            return this;
        }

        public Builder subresource(@Nullable String subresource) {
            this.subresource = Output.ofNullable(subresource);
            return this;
        }

        public Builder time(@Nullable Output<String> time) {
            this.time = time;
            return this;
        }

        public Builder time(@Nullable String time) {
            this.time = Output.ofNullable(time);
            return this;
        }
        public ManagedFieldsEntryArgs build() {
            return new ManagedFieldsEntryArgs(apiVersion, fieldsType, fieldsV1, manager, operation, subresource, time);
        }
    }
}
