// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.kubernetes.authentication.k8s.io_v1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.kubernetes.authentication.k8s.io_v1.inputs.BoundObjectReferenceArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * TokenRequestSpec contains client provided parameters of a token request.
 * 
 */
public final class TokenRequestSpecArgs extends io.pulumi.resources.ResourceArgs {

    public static final TokenRequestSpecArgs Empty = new TokenRequestSpecArgs();

    /**
     * Audiences are the intendend audiences of the token. A recipient of a token must identitfy themself with an identifier in the list of audiences of the token, and otherwise should reject the token. A token issued for multiple audiences may be used to authenticate against any of the audiences listed but implies a high degree of trust between the target audiences.
     * 
     */
    @Import(name="audiences", required=true)
      private final Output<List<String>> audiences;

    public Output<List<String>> getAudiences() {
        return this.audiences;
    }

    /**
     * BoundObjectRef is a reference to an object that the token will be bound to. The token will only be valid for as long as the bound object exists. NOTE: The API server's TokenReview endpoint will validate the BoundObjectRef, but other audiences may not. Keep ExpirationSeconds small if you want prompt revocation.
     * 
     */
    @Import(name="boundObjectRef")
      private final @Nullable Output<BoundObjectReferenceArgs> boundObjectRef;

    public Output<BoundObjectReferenceArgs> getBoundObjectRef() {
        return this.boundObjectRef == null ? Codegen.empty() : this.boundObjectRef;
    }

    /**
     * ExpirationSeconds is the requested duration of validity of the request. The token issuer may return a token with a different validity duration so a client needs to check the 'expiration' field in a response.
     * 
     */
    @Import(name="expirationSeconds")
      private final @Nullable Output<Integer> expirationSeconds;

    public Output<Integer> getExpirationSeconds() {
        return this.expirationSeconds == null ? Codegen.empty() : this.expirationSeconds;
    }

    public TokenRequestSpecArgs(
        Output<List<String>> audiences,
        @Nullable Output<BoundObjectReferenceArgs> boundObjectRef,
        @Nullable Output<Integer> expirationSeconds) {
        this.audiences = Objects.requireNonNull(audiences, "expected parameter 'audiences' to be non-null");
        this.boundObjectRef = boundObjectRef;
        this.expirationSeconds = expirationSeconds;
    }

    private TokenRequestSpecArgs() {
        this.audiences = Codegen.empty();
        this.boundObjectRef = Codegen.empty();
        this.expirationSeconds = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TokenRequestSpecArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<List<String>> audiences;
        private @Nullable Output<BoundObjectReferenceArgs> boundObjectRef;
        private @Nullable Output<Integer> expirationSeconds;

        public Builder() {
    	      // Empty
        }

        public Builder(TokenRequestSpecArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.audiences = defaults.audiences;
    	      this.boundObjectRef = defaults.boundObjectRef;
    	      this.expirationSeconds = defaults.expirationSeconds;
        }

        public Builder audiences(Output<List<String>> audiences) {
            this.audiences = Objects.requireNonNull(audiences);
            return this;
        }
        public Builder audiences(List<String> audiences) {
            this.audiences = Output.of(Objects.requireNonNull(audiences));
            return this;
        }
        public Builder audiences(String... audiences) {
            return audiences(List.of(audiences));
        }
        public Builder boundObjectRef(@Nullable Output<BoundObjectReferenceArgs> boundObjectRef) {
            this.boundObjectRef = boundObjectRef;
            return this;
        }
        public Builder boundObjectRef(@Nullable BoundObjectReferenceArgs boundObjectRef) {
            this.boundObjectRef = Codegen.ofNullable(boundObjectRef);
            return this;
        }
        public Builder expirationSeconds(@Nullable Output<Integer> expirationSeconds) {
            this.expirationSeconds = expirationSeconds;
            return this;
        }
        public Builder expirationSeconds(@Nullable Integer expirationSeconds) {
            this.expirationSeconds = Codegen.ofNullable(expirationSeconds);
            return this;
        }        public TokenRequestSpecArgs build() {
            return new TokenRequestSpecArgs(audiences, boundObjectRef, expirationSeconds);
        }
    }
}
