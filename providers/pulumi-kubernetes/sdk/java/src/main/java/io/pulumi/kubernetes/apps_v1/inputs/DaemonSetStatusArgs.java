// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.kubernetes.apps_v1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.kubernetes.apps_v1.inputs.DaemonSetConditionArgs;
import java.lang.Integer;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * DaemonSetStatus represents the current status of a daemon set.
 * 
 */
public final class DaemonSetStatusArgs extends io.pulumi.resources.ResourceArgs {

    public static final DaemonSetStatusArgs Empty = new DaemonSetStatusArgs();

    /**
     * Count of hash collisions for the DaemonSet. The DaemonSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
     * 
     */
    @InputImport(name="collisionCount")
      private final @Nullable Input<Integer> collisionCount;

    public Input<Integer> getCollisionCount() {
        return this.collisionCount == null ? Input.empty() : this.collisionCount;
    }

    /**
     * Represents the latest available observations of a DaemonSet's current state.
     * 
     */
    @InputImport(name="conditions")
      private final @Nullable Input<List<DaemonSetConditionArgs>> conditions;

    public Input<List<DaemonSetConditionArgs>> getConditions() {
        return this.conditions == null ? Input.empty() : this.conditions;
    }

    /**
     * The number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
     * 
     */
    @InputImport(name="currentNumberScheduled", required=true)
      private final Input<Integer> currentNumberScheduled;

    public Input<Integer> getCurrentNumberScheduled() {
        return this.currentNumberScheduled;
    }

    /**
     * The total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod). More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
     * 
     */
    @InputImport(name="desiredNumberScheduled", required=true)
      private final Input<Integer> desiredNumberScheduled;

    public Input<Integer> getDesiredNumberScheduled() {
        return this.desiredNumberScheduled;
    }

    /**
     * The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and available (ready for at least spec.minReadySeconds)
     * 
     */
    @InputImport(name="numberAvailable")
      private final @Nullable Input<Integer> numberAvailable;

    public Input<Integer> getNumberAvailable() {
        return this.numberAvailable == null ? Input.empty() : this.numberAvailable;
    }

    /**
     * The number of nodes that are running the daemon pod, but are not supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
     * 
     */
    @InputImport(name="numberMisscheduled", required=true)
      private final Input<Integer> numberMisscheduled;

    public Input<Integer> getNumberMisscheduled() {
        return this.numberMisscheduled;
    }

    /**
     * numberReady is the number of nodes that should be running the daemon pod and have one or more of the daemon pod running with a Ready Condition.
     * 
     */
    @InputImport(name="numberReady", required=true)
      private final Input<Integer> numberReady;

    public Input<Integer> getNumberReady() {
        return this.numberReady;
    }

    /**
     * The number of nodes that should be running the daemon pod and have none of the daemon pod running and available (ready for at least spec.minReadySeconds)
     * 
     */
    @InputImport(name="numberUnavailable")
      private final @Nullable Input<Integer> numberUnavailable;

    public Input<Integer> getNumberUnavailable() {
        return this.numberUnavailable == null ? Input.empty() : this.numberUnavailable;
    }

    /**
     * The most recent generation observed by the daemon set controller.
     * 
     */
    @InputImport(name="observedGeneration")
      private final @Nullable Input<Integer> observedGeneration;

    public Input<Integer> getObservedGeneration() {
        return this.observedGeneration == null ? Input.empty() : this.observedGeneration;
    }

    /**
     * The total number of nodes that are running updated daemon pod
     * 
     */
    @InputImport(name="updatedNumberScheduled")
      private final @Nullable Input<Integer> updatedNumberScheduled;

    public Input<Integer> getUpdatedNumberScheduled() {
        return this.updatedNumberScheduled == null ? Input.empty() : this.updatedNumberScheduled;
    }

    public DaemonSetStatusArgs(
        @Nullable Input<Integer> collisionCount,
        @Nullable Input<List<DaemonSetConditionArgs>> conditions,
        Input<Integer> currentNumberScheduled,
        Input<Integer> desiredNumberScheduled,
        @Nullable Input<Integer> numberAvailable,
        Input<Integer> numberMisscheduled,
        Input<Integer> numberReady,
        @Nullable Input<Integer> numberUnavailable,
        @Nullable Input<Integer> observedGeneration,
        @Nullable Input<Integer> updatedNumberScheduled) {
        this.collisionCount = collisionCount;
        this.conditions = conditions;
        this.currentNumberScheduled = Objects.requireNonNull(currentNumberScheduled, "expected parameter 'currentNumberScheduled' to be non-null");
        this.desiredNumberScheduled = Objects.requireNonNull(desiredNumberScheduled, "expected parameter 'desiredNumberScheduled' to be non-null");
        this.numberAvailable = numberAvailable;
        this.numberMisscheduled = Objects.requireNonNull(numberMisscheduled, "expected parameter 'numberMisscheduled' to be non-null");
        this.numberReady = Objects.requireNonNull(numberReady, "expected parameter 'numberReady' to be non-null");
        this.numberUnavailable = numberUnavailable;
        this.observedGeneration = observedGeneration;
        this.updatedNumberScheduled = updatedNumberScheduled;
    }

    private DaemonSetStatusArgs() {
        this.collisionCount = Input.empty();
        this.conditions = Input.empty();
        this.currentNumberScheduled = Input.empty();
        this.desiredNumberScheduled = Input.empty();
        this.numberAvailable = Input.empty();
        this.numberMisscheduled = Input.empty();
        this.numberReady = Input.empty();
        this.numberUnavailable = Input.empty();
        this.observedGeneration = Input.empty();
        this.updatedNumberScheduled = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DaemonSetStatusArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Integer> collisionCount;
        private @Nullable Input<List<DaemonSetConditionArgs>> conditions;
        private Input<Integer> currentNumberScheduled;
        private Input<Integer> desiredNumberScheduled;
        private @Nullable Input<Integer> numberAvailable;
        private Input<Integer> numberMisscheduled;
        private Input<Integer> numberReady;
        private @Nullable Input<Integer> numberUnavailable;
        private @Nullable Input<Integer> observedGeneration;
        private @Nullable Input<Integer> updatedNumberScheduled;

        public Builder() {
    	      // Empty
        }

        public Builder(DaemonSetStatusArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.collisionCount = defaults.collisionCount;
    	      this.conditions = defaults.conditions;
    	      this.currentNumberScheduled = defaults.currentNumberScheduled;
    	      this.desiredNumberScheduled = defaults.desiredNumberScheduled;
    	      this.numberAvailable = defaults.numberAvailable;
    	      this.numberMisscheduled = defaults.numberMisscheduled;
    	      this.numberReady = defaults.numberReady;
    	      this.numberUnavailable = defaults.numberUnavailable;
    	      this.observedGeneration = defaults.observedGeneration;
    	      this.updatedNumberScheduled = defaults.updatedNumberScheduled;
        }

        public Builder collisionCount(@Nullable Input<Integer> collisionCount) {
            this.collisionCount = collisionCount;
            return this;
        }

        public Builder collisionCount(@Nullable Integer collisionCount) {
            this.collisionCount = Input.ofNullable(collisionCount);
            return this;
        }

        public Builder conditions(@Nullable Input<List<DaemonSetConditionArgs>> conditions) {
            this.conditions = conditions;
            return this;
        }

        public Builder conditions(@Nullable List<DaemonSetConditionArgs> conditions) {
            this.conditions = Input.ofNullable(conditions);
            return this;
        }

        public Builder currentNumberScheduled(Input<Integer> currentNumberScheduled) {
            this.currentNumberScheduled = Objects.requireNonNull(currentNumberScheduled);
            return this;
        }

        public Builder currentNumberScheduled(Integer currentNumberScheduled) {
            this.currentNumberScheduled = Input.of(Objects.requireNonNull(currentNumberScheduled));
            return this;
        }

        public Builder desiredNumberScheduled(Input<Integer> desiredNumberScheduled) {
            this.desiredNumberScheduled = Objects.requireNonNull(desiredNumberScheduled);
            return this;
        }

        public Builder desiredNumberScheduled(Integer desiredNumberScheduled) {
            this.desiredNumberScheduled = Input.of(Objects.requireNonNull(desiredNumberScheduled));
            return this;
        }

        public Builder numberAvailable(@Nullable Input<Integer> numberAvailable) {
            this.numberAvailable = numberAvailable;
            return this;
        }

        public Builder numberAvailable(@Nullable Integer numberAvailable) {
            this.numberAvailable = Input.ofNullable(numberAvailable);
            return this;
        }

        public Builder numberMisscheduled(Input<Integer> numberMisscheduled) {
            this.numberMisscheduled = Objects.requireNonNull(numberMisscheduled);
            return this;
        }

        public Builder numberMisscheduled(Integer numberMisscheduled) {
            this.numberMisscheduled = Input.of(Objects.requireNonNull(numberMisscheduled));
            return this;
        }

        public Builder numberReady(Input<Integer> numberReady) {
            this.numberReady = Objects.requireNonNull(numberReady);
            return this;
        }

        public Builder numberReady(Integer numberReady) {
            this.numberReady = Input.of(Objects.requireNonNull(numberReady));
            return this;
        }

        public Builder numberUnavailable(@Nullable Input<Integer> numberUnavailable) {
            this.numberUnavailable = numberUnavailable;
            return this;
        }

        public Builder numberUnavailable(@Nullable Integer numberUnavailable) {
            this.numberUnavailable = Input.ofNullable(numberUnavailable);
            return this;
        }

        public Builder observedGeneration(@Nullable Input<Integer> observedGeneration) {
            this.observedGeneration = observedGeneration;
            return this;
        }

        public Builder observedGeneration(@Nullable Integer observedGeneration) {
            this.observedGeneration = Input.ofNullable(observedGeneration);
            return this;
        }

        public Builder updatedNumberScheduled(@Nullable Input<Integer> updatedNumberScheduled) {
            this.updatedNumberScheduled = updatedNumberScheduled;
            return this;
        }

        public Builder updatedNumberScheduled(@Nullable Integer updatedNumberScheduled) {
            this.updatedNumberScheduled = Input.ofNullable(updatedNumberScheduled);
            return this;
        }
        public DaemonSetStatusArgs build() {
            return new DaemonSetStatusArgs(collisionCount, conditions, currentNumberScheduled, desiredNumberScheduled, numberAvailable, numberMisscheduled, numberReady, numberUnavailable, observedGeneration, updatedNumberScheduled);
        }
    }
}
