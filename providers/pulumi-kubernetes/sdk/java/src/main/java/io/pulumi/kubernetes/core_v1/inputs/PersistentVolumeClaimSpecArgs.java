// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.kubernetes.core_v1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.kubernetes.core_v1.inputs.ResourceRequirementsArgs;
import io.pulumi.kubernetes.core_v1.inputs.TypedLocalObjectReferenceArgs;
import io.pulumi.kubernetes.meta_v1.inputs.LabelSelectorArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes
 * 
 */
public final class PersistentVolumeClaimSpecArgs extends io.pulumi.resources.ResourceArgs {

    public static final PersistentVolumeClaimSpecArgs Empty = new PersistentVolumeClaimSpecArgs();

    /**
     * AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
     * 
     */
    @Import(name="accessModes")
      private final @Nullable Output<List<String>> accessModes;

    public Output<List<String>> accessModes() {
        return this.accessModes == null ? Codegen.empty() : this.accessModes;
    }

    /**
     * This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.
     * 
     */
    @Import(name="dataSource")
      private final @Nullable Output<TypedLocalObjectReferenceArgs> dataSource;

    public Output<TypedLocalObjectReferenceArgs> dataSource() {
        return this.dataSource == null ? Codegen.empty() : this.dataSource;
    }

    /**
     * Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef
     *   allows any non-core object, as well as PersistentVolumeClaim objects.
     * * While DataSource ignores disallowed values (dropping them), DataSourceRef
     *   preserves all values, and generates an error if a disallowed value is
     *   specified.
     *   (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
     * 
     */
    @Import(name="dataSourceRef")
      private final @Nullable Output<TypedLocalObjectReferenceArgs> dataSourceRef;

    public Output<TypedLocalObjectReferenceArgs> dataSourceRef() {
        return this.dataSourceRef == null ? Codegen.empty() : this.dataSourceRef;
    }

    /**
     * Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
     * 
     */
    @Import(name="resources")
      private final @Nullable Output<ResourceRequirementsArgs> resources;

    public Output<ResourceRequirementsArgs> resources() {
        return this.resources == null ? Codegen.empty() : this.resources;
    }

    /**
     * A label query over volumes to consider for binding.
     * 
     */
    @Import(name="selector")
      private final @Nullable Output<LabelSelectorArgs> selector;

    public Output<LabelSelectorArgs> selector() {
        return this.selector == null ? Codegen.empty() : this.selector;
    }

    /**
     * Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
     * 
     */
    @Import(name="storageClassName")
      private final @Nullable Output<String> storageClassName;

    public Output<String> storageClassName() {
        return this.storageClassName == null ? Codegen.empty() : this.storageClassName;
    }

    /**
     * volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
     * 
     */
    @Import(name="volumeMode")
      private final @Nullable Output<String> volumeMode;

    public Output<String> volumeMode() {
        return this.volumeMode == null ? Codegen.empty() : this.volumeMode;
    }

    /**
     * VolumeName is the binding reference to the PersistentVolume backing this claim.
     * 
     */
    @Import(name="volumeName")
      private final @Nullable Output<String> volumeName;

    public Output<String> volumeName() {
        return this.volumeName == null ? Codegen.empty() : this.volumeName;
    }

    public PersistentVolumeClaimSpecArgs(
        @Nullable Output<List<String>> accessModes,
        @Nullable Output<TypedLocalObjectReferenceArgs> dataSource,
        @Nullable Output<TypedLocalObjectReferenceArgs> dataSourceRef,
        @Nullable Output<ResourceRequirementsArgs> resources,
        @Nullable Output<LabelSelectorArgs> selector,
        @Nullable Output<String> storageClassName,
        @Nullable Output<String> volumeMode,
        @Nullable Output<String> volumeName) {
        this.accessModes = accessModes;
        this.dataSource = dataSource;
        this.dataSourceRef = dataSourceRef;
        this.resources = resources;
        this.selector = selector;
        this.storageClassName = storageClassName;
        this.volumeMode = volumeMode;
        this.volumeName = volumeName;
    }

    private PersistentVolumeClaimSpecArgs() {
        this.accessModes = Codegen.empty();
        this.dataSource = Codegen.empty();
        this.dataSourceRef = Codegen.empty();
        this.resources = Codegen.empty();
        this.selector = Codegen.empty();
        this.storageClassName = Codegen.empty();
        this.volumeMode = Codegen.empty();
        this.volumeName = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PersistentVolumeClaimSpecArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<String>> accessModes;
        private @Nullable Output<TypedLocalObjectReferenceArgs> dataSource;
        private @Nullable Output<TypedLocalObjectReferenceArgs> dataSourceRef;
        private @Nullable Output<ResourceRequirementsArgs> resources;
        private @Nullable Output<LabelSelectorArgs> selector;
        private @Nullable Output<String> storageClassName;
        private @Nullable Output<String> volumeMode;
        private @Nullable Output<String> volumeName;

        public Builder() {
    	      // Empty
        }

        public Builder(PersistentVolumeClaimSpecArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessModes = defaults.accessModes;
    	      this.dataSource = defaults.dataSource;
    	      this.dataSourceRef = defaults.dataSourceRef;
    	      this.resources = defaults.resources;
    	      this.selector = defaults.selector;
    	      this.storageClassName = defaults.storageClassName;
    	      this.volumeMode = defaults.volumeMode;
    	      this.volumeName = defaults.volumeName;
        }

        public Builder accessModes(@Nullable Output<List<String>> accessModes) {
            this.accessModes = accessModes;
            return this;
        }
        public Builder accessModes(@Nullable List<String> accessModes) {
            this.accessModes = Codegen.ofNullable(accessModes);
            return this;
        }
        public Builder accessModes(String... accessModes) {
            return accessModes(List.of(accessModes));
        }
        public Builder dataSource(@Nullable Output<TypedLocalObjectReferenceArgs> dataSource) {
            this.dataSource = dataSource;
            return this;
        }
        public Builder dataSource(@Nullable TypedLocalObjectReferenceArgs dataSource) {
            this.dataSource = Codegen.ofNullable(dataSource);
            return this;
        }
        public Builder dataSourceRef(@Nullable Output<TypedLocalObjectReferenceArgs> dataSourceRef) {
            this.dataSourceRef = dataSourceRef;
            return this;
        }
        public Builder dataSourceRef(@Nullable TypedLocalObjectReferenceArgs dataSourceRef) {
            this.dataSourceRef = Codegen.ofNullable(dataSourceRef);
            return this;
        }
        public Builder resources(@Nullable Output<ResourceRequirementsArgs> resources) {
            this.resources = resources;
            return this;
        }
        public Builder resources(@Nullable ResourceRequirementsArgs resources) {
            this.resources = Codegen.ofNullable(resources);
            return this;
        }
        public Builder selector(@Nullable Output<LabelSelectorArgs> selector) {
            this.selector = selector;
            return this;
        }
        public Builder selector(@Nullable LabelSelectorArgs selector) {
            this.selector = Codegen.ofNullable(selector);
            return this;
        }
        public Builder storageClassName(@Nullable Output<String> storageClassName) {
            this.storageClassName = storageClassName;
            return this;
        }
        public Builder storageClassName(@Nullable String storageClassName) {
            this.storageClassName = Codegen.ofNullable(storageClassName);
            return this;
        }
        public Builder volumeMode(@Nullable Output<String> volumeMode) {
            this.volumeMode = volumeMode;
            return this;
        }
        public Builder volumeMode(@Nullable String volumeMode) {
            this.volumeMode = Codegen.ofNullable(volumeMode);
            return this;
        }
        public Builder volumeName(@Nullable Output<String> volumeName) {
            this.volumeName = volumeName;
            return this;
        }
        public Builder volumeName(@Nullable String volumeName) {
            this.volumeName = Codegen.ofNullable(volumeName);
            return this;
        }        public PersistentVolumeClaimSpecArgs build() {
            return new PersistentVolumeClaimSpecArgs(accessModes, dataSource, dataSourceRef, resources, selector, storageClassName, volumeMode, volumeName);
        }
    }
}
