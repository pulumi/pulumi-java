// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.kubernetes.policy_v1beta1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * AllowedHostPath defines the host volume conditions that will be enabled by a policy for pods to use. It requires the path prefix to be defined.
 * 
 */
public final class AllowedHostPathArgs extends io.pulumi.resources.ResourceArgs {

    public static final AllowedHostPathArgs Empty = new AllowedHostPathArgs();

    /**
     * pathPrefix is the path prefix that the host volume must match. It does not support `*`. Trailing slashes are trimmed when validating the path prefix with a host path.
     * 
     * Examples: `/foo` would allow `/foo`, `/foo/` and `/foo/bar` `/foo` would not allow `/food` or `/etc/foo`
     * 
     */
    @Import(name="pathPrefix")
      private final @Nullable Output<String> pathPrefix;

    public Output<String> getPathPrefix() {
        return this.pathPrefix == null ? Codegen.empty() : this.pathPrefix;
    }

    /**
     * when set to true, will allow host volumes matching the pathPrefix only if all volume mounts are readOnly.
     * 
     */
    @Import(name="readOnly")
      private final @Nullable Output<Boolean> readOnly;

    public Output<Boolean> getReadOnly() {
        return this.readOnly == null ? Codegen.empty() : this.readOnly;
    }

    public AllowedHostPathArgs(
        @Nullable Output<String> pathPrefix,
        @Nullable Output<Boolean> readOnly) {
        this.pathPrefix = pathPrefix;
        this.readOnly = readOnly;
    }

    private AllowedHostPathArgs() {
        this.pathPrefix = Codegen.empty();
        this.readOnly = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AllowedHostPathArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> pathPrefix;
        private @Nullable Output<Boolean> readOnly;

        public Builder() {
    	      // Empty
        }

        public Builder(AllowedHostPathArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.pathPrefix = defaults.pathPrefix;
    	      this.readOnly = defaults.readOnly;
        }

        public Builder pathPrefix(@Nullable Output<String> pathPrefix) {
            this.pathPrefix = pathPrefix;
            return this;
        }
        public Builder pathPrefix(@Nullable String pathPrefix) {
            this.pathPrefix = Codegen.ofNullable(pathPrefix);
            return this;
        }
        public Builder readOnly(@Nullable Output<Boolean> readOnly) {
            this.readOnly = readOnly;
            return this;
        }
        public Builder readOnly(@Nullable Boolean readOnly) {
            this.readOnly = Codegen.ofNullable(readOnly);
            return this;
        }        public AllowedHostPathArgs build() {
            return new AllowedHostPathArgs(pathPrefix, readOnly);
        }
    }
}
