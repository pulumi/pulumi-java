// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.kubernetes.core_v1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.kubernetes.core_v1.inputs.NodeSelectorTermArgs;
import java.lang.Integer;
import java.util.Objects;


/**
 * An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
 * 
 */
public final class PreferredSchedulingTermArgs extends io.pulumi.resources.ResourceArgs {

    public static final PreferredSchedulingTermArgs Empty = new PreferredSchedulingTermArgs();

    /**
     * A node selector term, associated with the corresponding weight.
     * 
     */
    @Import(name="preference", required=true)
      private final Output<NodeSelectorTermArgs> preference;

    public Output<NodeSelectorTermArgs> getPreference() {
        return this.preference;
    }

    /**
     * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
     * 
     */
    @Import(name="weight", required=true)
      private final Output<Integer> weight;

    public Output<Integer> getWeight() {
        return this.weight;
    }

    public PreferredSchedulingTermArgs(
        Output<NodeSelectorTermArgs> preference,
        Output<Integer> weight) {
        this.preference = Objects.requireNonNull(preference, "expected parameter 'preference' to be non-null");
        this.weight = Objects.requireNonNull(weight, "expected parameter 'weight' to be non-null");
    }

    private PreferredSchedulingTermArgs() {
        this.preference = Codegen.empty();
        this.weight = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PreferredSchedulingTermArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<NodeSelectorTermArgs> preference;
        private Output<Integer> weight;

        public Builder() {
    	      // Empty
        }

        public Builder(PreferredSchedulingTermArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.preference = defaults.preference;
    	      this.weight = defaults.weight;
        }

        public Builder preference(Output<NodeSelectorTermArgs> preference) {
            this.preference = Objects.requireNonNull(preference);
            return this;
        }
        public Builder preference(NodeSelectorTermArgs preference) {
            this.preference = Output.of(Objects.requireNonNull(preference));
            return this;
        }
        public Builder weight(Output<Integer> weight) {
            this.weight = Objects.requireNonNull(weight);
            return this;
        }
        public Builder weight(Integer weight) {
            this.weight = Output.of(Objects.requireNonNull(weight));
            return this;
        }        public PreferredSchedulingTermArgs build() {
            return new PreferredSchedulingTermArgs(preference, weight);
        }
    }
}
