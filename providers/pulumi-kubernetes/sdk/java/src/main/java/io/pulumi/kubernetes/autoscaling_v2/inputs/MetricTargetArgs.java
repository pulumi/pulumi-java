// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.kubernetes.autoscaling_v2.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * MetricTarget defines the target value, average value, or average utilization of a specific metric
 * 
 */
public final class MetricTargetArgs extends io.pulumi.resources.ResourceArgs {

    public static final MetricTargetArgs Empty = new MetricTargetArgs();

    /**
     * averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type
     * 
     */
    @Import(name="averageUtilization")
      private final @Nullable Output<Integer> averageUtilization;

    public Output<Integer> averageUtilization() {
        return this.averageUtilization == null ? Codegen.empty() : this.averageUtilization;
    }

    /**
     * averageValue is the target value of the average of the metric across all relevant pods (as a quantity)
     * 
     */
    @Import(name="averageValue")
      private final @Nullable Output<String> averageValue;

    public Output<String> averageValue() {
        return this.averageValue == null ? Codegen.empty() : this.averageValue;
    }

    /**
     * type represents whether the metric type is Utilization, Value, or AverageValue
     * 
     */
    @Import(name="type", required=true)
      private final Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    /**
     * value is the target value of the metric (as a quantity).
     * 
     */
    @Import(name="value")
      private final @Nullable Output<String> value;

    public Output<String> value() {
        return this.value == null ? Codegen.empty() : this.value;
    }

    public MetricTargetArgs(
        @Nullable Output<Integer> averageUtilization,
        @Nullable Output<String> averageValue,
        Output<String> type,
        @Nullable Output<String> value) {
        this.averageUtilization = averageUtilization;
        this.averageValue = averageValue;
        this.type = Objects.requireNonNull(type, "expected parameter 'type' to be non-null");
        this.value = value;
    }

    private MetricTargetArgs() {
        this.averageUtilization = Codegen.empty();
        this.averageValue = Codegen.empty();
        this.type = Codegen.empty();
        this.value = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MetricTargetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Integer> averageUtilization;
        private @Nullable Output<String> averageValue;
        private Output<String> type;
        private @Nullable Output<String> value;

        public Builder() {
    	      // Empty
        }

        public Builder(MetricTargetArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.averageUtilization = defaults.averageUtilization;
    	      this.averageValue = defaults.averageValue;
    	      this.type = defaults.type;
    	      this.value = defaults.value;
        }

        public Builder averageUtilization(@Nullable Output<Integer> averageUtilization) {
            this.averageUtilization = averageUtilization;
            return this;
        }
        public Builder averageUtilization(@Nullable Integer averageUtilization) {
            this.averageUtilization = Codegen.ofNullable(averageUtilization);
            return this;
        }
        public Builder averageValue(@Nullable Output<String> averageValue) {
            this.averageValue = averageValue;
            return this;
        }
        public Builder averageValue(@Nullable String averageValue) {
            this.averageValue = Codegen.ofNullable(averageValue);
            return this;
        }
        public Builder type(Output<String> type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public Builder type(String type) {
            this.type = Output.of(Objects.requireNonNull(type));
            return this;
        }
        public Builder value(@Nullable Output<String> value) {
            this.value = value;
            return this;
        }
        public Builder value(@Nullable String value) {
            this.value = Codegen.ofNullable(value);
            return this;
        }        public MetricTargetArgs build() {
            return new MetricTargetArgs(averageUtilization, averageValue, type, value);
        }
    }
}
