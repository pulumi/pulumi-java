// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.kubernetes.core_v1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.kubernetes.core_v1.inputs.CapabilitiesArgs;
import io.pulumi.kubernetes.core_v1.inputs.SELinuxOptionsArgs;
import io.pulumi.kubernetes.core_v1.inputs.SeccompProfileArgs;
import io.pulumi.kubernetes.core_v1.inputs.WindowsSecurityContextOptionsArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class SecurityContextArgs extends io.pulumi.resources.ResourceArgs {

    public static final SecurityContextArgs Empty = new SecurityContextArgs();

    @InputImport(name="allowPrivilegeEscalation")
    private final @Nullable Input<Boolean> allowPrivilegeEscalation;

    public Input<Boolean> getAllowPrivilegeEscalation() {
        return this.allowPrivilegeEscalation == null ? Input.empty() : this.allowPrivilegeEscalation;
    }

    @InputImport(name="capabilities")
    private final @Nullable Input<CapabilitiesArgs> capabilities;

    public Input<CapabilitiesArgs> getCapabilities() {
        return this.capabilities == null ? Input.empty() : this.capabilities;
    }

    @InputImport(name="privileged")
    private final @Nullable Input<Boolean> privileged;

    public Input<Boolean> getPrivileged() {
        return this.privileged == null ? Input.empty() : this.privileged;
    }

    @InputImport(name="procMount")
    private final @Nullable Input<String> procMount;

    public Input<String> getProcMount() {
        return this.procMount == null ? Input.empty() : this.procMount;
    }

    @InputImport(name="readOnlyRootFilesystem")
    private final @Nullable Input<Boolean> readOnlyRootFilesystem;

    public Input<Boolean> getReadOnlyRootFilesystem() {
        return this.readOnlyRootFilesystem == null ? Input.empty() : this.readOnlyRootFilesystem;
    }

    @InputImport(name="runAsGroup")
    private final @Nullable Input<Integer> runAsGroup;

    public Input<Integer> getRunAsGroup() {
        return this.runAsGroup == null ? Input.empty() : this.runAsGroup;
    }

    @InputImport(name="runAsNonRoot")
    private final @Nullable Input<Boolean> runAsNonRoot;

    public Input<Boolean> getRunAsNonRoot() {
        return this.runAsNonRoot == null ? Input.empty() : this.runAsNonRoot;
    }

    @InputImport(name="runAsUser")
    private final @Nullable Input<Integer> runAsUser;

    public Input<Integer> getRunAsUser() {
        return this.runAsUser == null ? Input.empty() : this.runAsUser;
    }

    @InputImport(name="seLinuxOptions")
    private final @Nullable Input<SELinuxOptionsArgs> seLinuxOptions;

    public Input<SELinuxOptionsArgs> getSeLinuxOptions() {
        return this.seLinuxOptions == null ? Input.empty() : this.seLinuxOptions;
    }

    @InputImport(name="seccompProfile")
    private final @Nullable Input<SeccompProfileArgs> seccompProfile;

    public Input<SeccompProfileArgs> getSeccompProfile() {
        return this.seccompProfile == null ? Input.empty() : this.seccompProfile;
    }

    @InputImport(name="windowsOptions")
    private final @Nullable Input<WindowsSecurityContextOptionsArgs> windowsOptions;

    public Input<WindowsSecurityContextOptionsArgs> getWindowsOptions() {
        return this.windowsOptions == null ? Input.empty() : this.windowsOptions;
    }

    public SecurityContextArgs(
        @Nullable Input<Boolean> allowPrivilegeEscalation,
        @Nullable Input<CapabilitiesArgs> capabilities,
        @Nullable Input<Boolean> privileged,
        @Nullable Input<String> procMount,
        @Nullable Input<Boolean> readOnlyRootFilesystem,
        @Nullable Input<Integer> runAsGroup,
        @Nullable Input<Boolean> runAsNonRoot,
        @Nullable Input<Integer> runAsUser,
        @Nullable Input<SELinuxOptionsArgs> seLinuxOptions,
        @Nullable Input<SeccompProfileArgs> seccompProfile,
        @Nullable Input<WindowsSecurityContextOptionsArgs> windowsOptions) {
        this.allowPrivilegeEscalation = allowPrivilegeEscalation;
        this.capabilities = capabilities;
        this.privileged = privileged;
        this.procMount = procMount;
        this.readOnlyRootFilesystem = readOnlyRootFilesystem;
        this.runAsGroup = runAsGroup;
        this.runAsNonRoot = runAsNonRoot;
        this.runAsUser = runAsUser;
        this.seLinuxOptions = seLinuxOptions;
        this.seccompProfile = seccompProfile;
        this.windowsOptions = windowsOptions;
    }

    private SecurityContextArgs() {
        this.allowPrivilegeEscalation = Input.empty();
        this.capabilities = Input.empty();
        this.privileged = Input.empty();
        this.procMount = Input.empty();
        this.readOnlyRootFilesystem = Input.empty();
        this.runAsGroup = Input.empty();
        this.runAsNonRoot = Input.empty();
        this.runAsUser = Input.empty();
        this.seLinuxOptions = Input.empty();
        this.seccompProfile = Input.empty();
        this.windowsOptions = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SecurityContextArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<Boolean> allowPrivilegeEscalation;
        private @Nullable Input<CapabilitiesArgs> capabilities;
        private @Nullable Input<Boolean> privileged;
        private @Nullable Input<String> procMount;
        private @Nullable Input<Boolean> readOnlyRootFilesystem;
        private @Nullable Input<Integer> runAsGroup;
        private @Nullable Input<Boolean> runAsNonRoot;
        private @Nullable Input<Integer> runAsUser;
        private @Nullable Input<SELinuxOptionsArgs> seLinuxOptions;
        private @Nullable Input<SeccompProfileArgs> seccompProfile;
        private @Nullable Input<WindowsSecurityContextOptionsArgs> windowsOptions;

        public Builder() {
    	      // Empty
        }

        public Builder(SecurityContextArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowPrivilegeEscalation = defaults.allowPrivilegeEscalation;
    	      this.capabilities = defaults.capabilities;
    	      this.privileged = defaults.privileged;
    	      this.procMount = defaults.procMount;
    	      this.readOnlyRootFilesystem = defaults.readOnlyRootFilesystem;
    	      this.runAsGroup = defaults.runAsGroup;
    	      this.runAsNonRoot = defaults.runAsNonRoot;
    	      this.runAsUser = defaults.runAsUser;
    	      this.seLinuxOptions = defaults.seLinuxOptions;
    	      this.seccompProfile = defaults.seccompProfile;
    	      this.windowsOptions = defaults.windowsOptions;
        }

        public Builder setAllowPrivilegeEscalation(@Nullable Input<Boolean> allowPrivilegeEscalation) {
            this.allowPrivilegeEscalation = allowPrivilegeEscalation;
            return this;
        }

        public Builder setAllowPrivilegeEscalation(@Nullable Boolean allowPrivilegeEscalation) {
            this.allowPrivilegeEscalation = Input.ofNullable(allowPrivilegeEscalation);
            return this;
        }

        public Builder setCapabilities(@Nullable Input<CapabilitiesArgs> capabilities) {
            this.capabilities = capabilities;
            return this;
        }

        public Builder setCapabilities(@Nullable CapabilitiesArgs capabilities) {
            this.capabilities = Input.ofNullable(capabilities);
            return this;
        }

        public Builder setPrivileged(@Nullable Input<Boolean> privileged) {
            this.privileged = privileged;
            return this;
        }

        public Builder setPrivileged(@Nullable Boolean privileged) {
            this.privileged = Input.ofNullable(privileged);
            return this;
        }

        public Builder setProcMount(@Nullable Input<String> procMount) {
            this.procMount = procMount;
            return this;
        }

        public Builder setProcMount(@Nullable String procMount) {
            this.procMount = Input.ofNullable(procMount);
            return this;
        }

        public Builder setReadOnlyRootFilesystem(@Nullable Input<Boolean> readOnlyRootFilesystem) {
            this.readOnlyRootFilesystem = readOnlyRootFilesystem;
            return this;
        }

        public Builder setReadOnlyRootFilesystem(@Nullable Boolean readOnlyRootFilesystem) {
            this.readOnlyRootFilesystem = Input.ofNullable(readOnlyRootFilesystem);
            return this;
        }

        public Builder setRunAsGroup(@Nullable Input<Integer> runAsGroup) {
            this.runAsGroup = runAsGroup;
            return this;
        }

        public Builder setRunAsGroup(@Nullable Integer runAsGroup) {
            this.runAsGroup = Input.ofNullable(runAsGroup);
            return this;
        }

        public Builder setRunAsNonRoot(@Nullable Input<Boolean> runAsNonRoot) {
            this.runAsNonRoot = runAsNonRoot;
            return this;
        }

        public Builder setRunAsNonRoot(@Nullable Boolean runAsNonRoot) {
            this.runAsNonRoot = Input.ofNullable(runAsNonRoot);
            return this;
        }

        public Builder setRunAsUser(@Nullable Input<Integer> runAsUser) {
            this.runAsUser = runAsUser;
            return this;
        }

        public Builder setRunAsUser(@Nullable Integer runAsUser) {
            this.runAsUser = Input.ofNullable(runAsUser);
            return this;
        }

        public Builder setSeLinuxOptions(@Nullable Input<SELinuxOptionsArgs> seLinuxOptions) {
            this.seLinuxOptions = seLinuxOptions;
            return this;
        }

        public Builder setSeLinuxOptions(@Nullable SELinuxOptionsArgs seLinuxOptions) {
            this.seLinuxOptions = Input.ofNullable(seLinuxOptions);
            return this;
        }

        public Builder setSeccompProfile(@Nullable Input<SeccompProfileArgs> seccompProfile) {
            this.seccompProfile = seccompProfile;
            return this;
        }

        public Builder setSeccompProfile(@Nullable SeccompProfileArgs seccompProfile) {
            this.seccompProfile = Input.ofNullable(seccompProfile);
            return this;
        }

        public Builder setWindowsOptions(@Nullable Input<WindowsSecurityContextOptionsArgs> windowsOptions) {
            this.windowsOptions = windowsOptions;
            return this;
        }

        public Builder setWindowsOptions(@Nullable WindowsSecurityContextOptionsArgs windowsOptions) {
            this.windowsOptions = Input.ofNullable(windowsOptions);
            return this;
        }

        public SecurityContextArgs build() {
            return new SecurityContextArgs(allowPrivilegeEscalation, capabilities, privileged, procMount, readOnlyRootFilesystem, runAsGroup, runAsNonRoot, runAsUser, seLinuxOptions, seccompProfile, windowsOptions);
        }
    }
}
