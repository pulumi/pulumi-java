// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.kubernetes.helm.sh_v3;

import io.pulumi.core.AssetOrArchive;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.kubernetes.helm.sh_v3.inputs.RepositoryOptsArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ReleaseArgs extends io.pulumi.resources.ResourceArgs {

    public static final ReleaseArgs Empty = new ReleaseArgs();

    /**
     * If set, installation process purges chart on fail. `skipAwait` will be disabled automatically if atomic is used.
     * 
     */
    @InputImport(name="atomic")
      private final @Nullable Output<Boolean> atomic;

    public Output<Boolean> getAtomic() {
        return this.atomic == null ? Output.empty() : this.atomic;
    }

    /**
     * Chart name to be installed. A path may be used.
     * 
     */
    @InputImport(name="chart", required=true)
      private final Output<String> chart;

    public Output<String> getChart() {
        return this.chart;
    }

    /**
     * Allow deletion of new resources created in this upgrade when upgrade fails.
     * 
     */
    @InputImport(name="cleanupOnFail")
      private final @Nullable Output<Boolean> cleanupOnFail;

    public Output<Boolean> getCleanupOnFail() {
        return this.cleanupOnFail == null ? Output.empty() : this.cleanupOnFail;
    }

    @InputImport(name="compat")
      private final @Nullable Output<String> compat;

    public Output<String> getCompat() {
        return this.compat == null ? Output.empty() : this.compat;
    }

    /**
     * Create the namespace if it does not exist.
     * 
     */
    @InputImport(name="createNamespace")
      private final @Nullable Output<Boolean> createNamespace;

    public Output<Boolean> getCreateNamespace() {
        return this.createNamespace == null ? Output.empty() : this.createNamespace;
    }

    /**
     * Run helm dependency update before installing the chart.
     * 
     */
    @InputImport(name="dependencyUpdate")
      private final @Nullable Output<Boolean> dependencyUpdate;

    public Output<Boolean> getDependencyUpdate() {
        return this.dependencyUpdate == null ? Output.empty() : this.dependencyUpdate;
    }

    /**
     * Add a custom description
     * 
     */
    @InputImport(name="description")
      private final @Nullable Output<String> description;

    public Output<String> getDescription() {
        return this.description == null ? Output.empty() : this.description;
    }

    /**
     * Use chart development versions, too. Equivalent to version '>0.0.0-0'. If `version` is set, this is ignored.
     * 
     */
    @InputImport(name="devel")
      private final @Nullable Output<Boolean> devel;

    public Output<Boolean> getDevel() {
        return this.devel == null ? Output.empty() : this.devel;
    }

    /**
     * Prevent CRD hooks from, running, but run other hooks.  See helm install --no-crd-hook
     * 
     */
    @InputImport(name="disableCRDHooks")
      private final @Nullable Output<Boolean> disableCRDHooks;

    public Output<Boolean> getDisableCRDHooks() {
        return this.disableCRDHooks == null ? Output.empty() : this.disableCRDHooks;
    }

    /**
     * If set, the installation process will not validate rendered templates against the Kubernetes OpenAPI Schema
     * 
     */
    @InputImport(name="disableOpenapiValidation")
      private final @Nullable Output<Boolean> disableOpenapiValidation;

    public Output<Boolean> getDisableOpenapiValidation() {
        return this.disableOpenapiValidation == null ? Output.empty() : this.disableOpenapiValidation;
    }

    /**
     * Prevent hooks from running.
     * 
     */
    @InputImport(name="disableWebhooks")
      private final @Nullable Output<Boolean> disableWebhooks;

    public Output<Boolean> getDisableWebhooks() {
        return this.disableWebhooks == null ? Output.empty() : this.disableWebhooks;
    }

    /**
     * Force resource update through delete/recreate if needed.
     * 
     */
    @InputImport(name="forceUpdate")
      private final @Nullable Output<Boolean> forceUpdate;

    public Output<Boolean> getForceUpdate() {
        return this.forceUpdate == null ? Output.empty() : this.forceUpdate;
    }

    /**
     * Location of public keys used for verification. Used only if `verify` is true
     * 
     */
    @InputImport(name="keyring")
      private final @Nullable Output<String> keyring;

    public Output<String> getKeyring() {
        return this.keyring == null ? Output.empty() : this.keyring;
    }

    /**
     * Run helm lint when planning.
     * 
     */
    @InputImport(name="lint")
      private final @Nullable Output<Boolean> lint;

    public Output<Boolean> getLint() {
        return this.lint == null ? Output.empty() : this.lint;
    }

    /**
     * The rendered manifests as JSON. Not yet supported.
     * 
     */
    @InputImport(name="manifest")
      private final @Nullable Output<Map<String,Object>> manifest;

    public Output<Map<String,Object>> getManifest() {
        return this.manifest == null ? Output.empty() : this.manifest;
    }

    /**
     * Limit the maximum number of revisions saved per release. Use 0 for no limit.
     * 
     */
    @InputImport(name="maxHistory")
      private final @Nullable Output<Integer> maxHistory;

    public Output<Integer> getMaxHistory() {
        return this.maxHistory == null ? Output.empty() : this.maxHistory;
    }

    /**
     * Release name.
     * 
     */
    @InputImport(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    /**
     * Namespace to install the release into.
     * 
     */
    @InputImport(name="namespace")
      private final @Nullable Output<String> namespace;

    public Output<String> getNamespace() {
        return this.namespace == null ? Output.empty() : this.namespace;
    }

    /**
     * Postrender command to run.
     * 
     */
    @InputImport(name="postrender")
      private final @Nullable Output<String> postrender;

    public Output<String> getPostrender() {
        return this.postrender == null ? Output.empty() : this.postrender;
    }

    /**
     * Perform pods restart during upgrade/rollback.
     * 
     */
    @InputImport(name="recreatePods")
      private final @Nullable Output<Boolean> recreatePods;

    public Output<Boolean> getRecreatePods() {
        return this.recreatePods == null ? Output.empty() : this.recreatePods;
    }

    /**
     * If set, render subchart notes along with the parent.
     * 
     */
    @InputImport(name="renderSubchartNotes")
      private final @Nullable Output<Boolean> renderSubchartNotes;

    public Output<Boolean> getRenderSubchartNotes() {
        return this.renderSubchartNotes == null ? Output.empty() : this.renderSubchartNotes;
    }

    /**
     * Re-use the given name, even if that name is already used. This is unsafe in production
     * 
     */
    @InputImport(name="replace")
      private final @Nullable Output<Boolean> replace;

    public Output<Boolean> getReplace() {
        return this.replace == null ? Output.empty() : this.replace;
    }

    /**
     * Specification defining the Helm chart repository to use.
     * 
     */
    @InputImport(name="repositoryOpts")
      private final @Nullable Output<RepositoryOptsArgs> repositoryOpts;

    public Output<RepositoryOptsArgs> getRepositoryOpts() {
        return this.repositoryOpts == null ? Output.empty() : this.repositoryOpts;
    }

    /**
     * When upgrading, reset the values to the ones built into the chart.
     * 
     */
    @InputImport(name="resetValues")
      private final @Nullable Output<Boolean> resetValues;

    public Output<Boolean> getResetValues() {
        return this.resetValues == null ? Output.empty() : this.resetValues;
    }

    /**
     * Names of resources created by the release grouped by "kind/version".
     * 
     */
    @InputImport(name="resourceNames")
      private final @Nullable Output<Map<String,List<String>>> resourceNames;

    public Output<Map<String,List<String>>> getResourceNames() {
        return this.resourceNames == null ? Output.empty() : this.resourceNames;
    }

    /**
     * When upgrading, reuse the last release's values and merge in any overrides. If 'resetValues' is specified, this is ignored
     * 
     */
    @InputImport(name="reuseValues")
      private final @Nullable Output<Boolean> reuseValues;

    public Output<Boolean> getReuseValues() {
        return this.reuseValues == null ? Output.empty() : this.reuseValues;
    }

    /**
     * By default, the provider waits until all resources are in a ready state before marking the release as successful. Setting this to true will skip such await logic.
     * 
     */
    @InputImport(name="skipAwait")
      private final @Nullable Output<Boolean> skipAwait;

    public Output<Boolean> getSkipAwait() {
        return this.skipAwait == null ? Output.empty() : this.skipAwait;
    }

    /**
     * If set, no CRDs will be installed. By default, CRDs are installed if not already present.
     * 
     */
    @InputImport(name="skipCrds")
      private final @Nullable Output<Boolean> skipCrds;

    public Output<Boolean> getSkipCrds() {
        return this.skipCrds == null ? Output.empty() : this.skipCrds;
    }

    /**
     * Time in seconds to wait for any individual kubernetes operation.
     * 
     */
    @InputImport(name="timeout")
      private final @Nullable Output<Integer> timeout;

    public Output<Integer> getTimeout() {
        return this.timeout == null ? Output.empty() : this.timeout;
    }

    /**
     * List of assets (raw yaml files). Content is read and merged with values.
     * 
     */
    @InputImport(name="valueYamlFiles")
      private final @Nullable Output<List<AssetOrArchive>> valueYamlFiles;

    public Output<List<AssetOrArchive>> getValueYamlFiles() {
        return this.valueYamlFiles == null ? Output.empty() : this.valueYamlFiles;
    }

    /**
     * Custom values set for the release.
     * 
     */
    @InputImport(name="values")
      private final @Nullable Output<Map<String,Object>> values;

    public Output<Map<String,Object>> getValues() {
        return this.values == null ? Output.empty() : this.values;
    }

    /**
     * Verify the package before installing it.
     * 
     */
    @InputImport(name="verify")
      private final @Nullable Output<Boolean> verify;

    public Output<Boolean> getVerify() {
        return this.verify == null ? Output.empty() : this.verify;
    }

    /**
     * Specify the exact chart version to install. If this is not specified, the latest version is installed.
     * 
     */
    @InputImport(name="version")
      private final @Nullable Output<String> version;

    public Output<String> getVersion() {
        return this.version == null ? Output.empty() : this.version;
    }

    /**
     * Will wait until all Jobs have been completed before marking the release as successful. This is ignored if `skipAwait` is enabled.
     * 
     */
    @InputImport(name="waitForJobs")
      private final @Nullable Output<Boolean> waitForJobs;

    public Output<Boolean> getWaitForJobs() {
        return this.waitForJobs == null ? Output.empty() : this.waitForJobs;
    }

    public ReleaseArgs(
        @Nullable Output<Boolean> atomic,
        Output<String> chart,
        @Nullable Output<Boolean> cleanupOnFail,
        @Nullable Output<String> compat,
        @Nullable Output<Boolean> createNamespace,
        @Nullable Output<Boolean> dependencyUpdate,
        @Nullable Output<String> description,
        @Nullable Output<Boolean> devel,
        @Nullable Output<Boolean> disableCRDHooks,
        @Nullable Output<Boolean> disableOpenapiValidation,
        @Nullable Output<Boolean> disableWebhooks,
        @Nullable Output<Boolean> forceUpdate,
        @Nullable Output<String> keyring,
        @Nullable Output<Boolean> lint,
        @Nullable Output<Map<String,Object>> manifest,
        @Nullable Output<Integer> maxHistory,
        @Nullable Output<String> name,
        @Nullable Output<String> namespace,
        @Nullable Output<String> postrender,
        @Nullable Output<Boolean> recreatePods,
        @Nullable Output<Boolean> renderSubchartNotes,
        @Nullable Output<Boolean> replace,
        @Nullable Output<RepositoryOptsArgs> repositoryOpts,
        @Nullable Output<Boolean> resetValues,
        @Nullable Output<Map<String,List<String>>> resourceNames,
        @Nullable Output<Boolean> reuseValues,
        @Nullable Output<Boolean> skipAwait,
        @Nullable Output<Boolean> skipCrds,
        @Nullable Output<Integer> timeout,
        @Nullable Output<List<AssetOrArchive>> valueYamlFiles,
        @Nullable Output<Map<String,Object>> values,
        @Nullable Output<Boolean> verify,
        @Nullable Output<String> version,
        @Nullable Output<Boolean> waitForJobs) {
        this.atomic = atomic;
        this.chart = Objects.requireNonNull(chart, "expected parameter 'chart' to be non-null");
        this.cleanupOnFail = cleanupOnFail;
        this.compat = compat;
        this.createNamespace = createNamespace;
        this.dependencyUpdate = dependencyUpdate;
        this.description = description;
        this.devel = devel;
        this.disableCRDHooks = disableCRDHooks;
        this.disableOpenapiValidation = disableOpenapiValidation;
        this.disableWebhooks = disableWebhooks;
        this.forceUpdate = forceUpdate;
        this.keyring = keyring;
        this.lint = lint;
        this.manifest = manifest;
        this.maxHistory = maxHistory;
        this.name = name;
        this.namespace = namespace;
        this.postrender = postrender;
        this.recreatePods = recreatePods;
        this.renderSubchartNotes = renderSubchartNotes;
        this.replace = replace;
        this.repositoryOpts = repositoryOpts;
        this.resetValues = resetValues;
        this.resourceNames = resourceNames;
        this.reuseValues = reuseValues;
        this.skipAwait = skipAwait;
        this.skipCrds = skipCrds;
        this.timeout = timeout;
        this.valueYamlFiles = valueYamlFiles;
        this.values = values;
        this.verify = verify;
        this.version = version;
        this.waitForJobs = waitForJobs;
    }

    private ReleaseArgs() {
        this.atomic = Output.empty();
        this.chart = Output.empty();
        this.cleanupOnFail = Output.empty();
        this.compat = Output.empty();
        this.createNamespace = Output.empty();
        this.dependencyUpdate = Output.empty();
        this.description = Output.empty();
        this.devel = Output.empty();
        this.disableCRDHooks = Output.empty();
        this.disableOpenapiValidation = Output.empty();
        this.disableWebhooks = Output.empty();
        this.forceUpdate = Output.empty();
        this.keyring = Output.empty();
        this.lint = Output.empty();
        this.manifest = Output.empty();
        this.maxHistory = Output.empty();
        this.name = Output.empty();
        this.namespace = Output.empty();
        this.postrender = Output.empty();
        this.recreatePods = Output.empty();
        this.renderSubchartNotes = Output.empty();
        this.replace = Output.empty();
        this.repositoryOpts = Output.empty();
        this.resetValues = Output.empty();
        this.resourceNames = Output.empty();
        this.reuseValues = Output.empty();
        this.skipAwait = Output.empty();
        this.skipCrds = Output.empty();
        this.timeout = Output.empty();
        this.valueYamlFiles = Output.empty();
        this.values = Output.empty();
        this.verify = Output.empty();
        this.version = Output.empty();
        this.waitForJobs = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ReleaseArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Boolean> atomic;
        private Output<String> chart;
        private @Nullable Output<Boolean> cleanupOnFail;
        private @Nullable Output<String> compat;
        private @Nullable Output<Boolean> createNamespace;
        private @Nullable Output<Boolean> dependencyUpdate;
        private @Nullable Output<String> description;
        private @Nullable Output<Boolean> devel;
        private @Nullable Output<Boolean> disableCRDHooks;
        private @Nullable Output<Boolean> disableOpenapiValidation;
        private @Nullable Output<Boolean> disableWebhooks;
        private @Nullable Output<Boolean> forceUpdate;
        private @Nullable Output<String> keyring;
        private @Nullable Output<Boolean> lint;
        private @Nullable Output<Map<String,Object>> manifest;
        private @Nullable Output<Integer> maxHistory;
        private @Nullable Output<String> name;
        private @Nullable Output<String> namespace;
        private @Nullable Output<String> postrender;
        private @Nullable Output<Boolean> recreatePods;
        private @Nullable Output<Boolean> renderSubchartNotes;
        private @Nullable Output<Boolean> replace;
        private @Nullable Output<RepositoryOptsArgs> repositoryOpts;
        private @Nullable Output<Boolean> resetValues;
        private @Nullable Output<Map<String,List<String>>> resourceNames;
        private @Nullable Output<Boolean> reuseValues;
        private @Nullable Output<Boolean> skipAwait;
        private @Nullable Output<Boolean> skipCrds;
        private @Nullable Output<Integer> timeout;
        private @Nullable Output<List<AssetOrArchive>> valueYamlFiles;
        private @Nullable Output<Map<String,Object>> values;
        private @Nullable Output<Boolean> verify;
        private @Nullable Output<String> version;
        private @Nullable Output<Boolean> waitForJobs;

        public Builder() {
    	      // Empty
        }

        public Builder(ReleaseArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.atomic = defaults.atomic;
    	      this.chart = defaults.chart;
    	      this.cleanupOnFail = defaults.cleanupOnFail;
    	      this.compat = defaults.compat;
    	      this.createNamespace = defaults.createNamespace;
    	      this.dependencyUpdate = defaults.dependencyUpdate;
    	      this.description = defaults.description;
    	      this.devel = defaults.devel;
    	      this.disableCRDHooks = defaults.disableCRDHooks;
    	      this.disableOpenapiValidation = defaults.disableOpenapiValidation;
    	      this.disableWebhooks = defaults.disableWebhooks;
    	      this.forceUpdate = defaults.forceUpdate;
    	      this.keyring = defaults.keyring;
    	      this.lint = defaults.lint;
    	      this.manifest = defaults.manifest;
    	      this.maxHistory = defaults.maxHistory;
    	      this.name = defaults.name;
    	      this.namespace = defaults.namespace;
    	      this.postrender = defaults.postrender;
    	      this.recreatePods = defaults.recreatePods;
    	      this.renderSubchartNotes = defaults.renderSubchartNotes;
    	      this.replace = defaults.replace;
    	      this.repositoryOpts = defaults.repositoryOpts;
    	      this.resetValues = defaults.resetValues;
    	      this.resourceNames = defaults.resourceNames;
    	      this.reuseValues = defaults.reuseValues;
    	      this.skipAwait = defaults.skipAwait;
    	      this.skipCrds = defaults.skipCrds;
    	      this.timeout = defaults.timeout;
    	      this.valueYamlFiles = defaults.valueYamlFiles;
    	      this.values = defaults.values;
    	      this.verify = defaults.verify;
    	      this.version = defaults.version;
    	      this.waitForJobs = defaults.waitForJobs;
        }

        public Builder atomic(@Nullable Output<Boolean> atomic) {
            this.atomic = atomic;
            return this;
        }

        public Builder atomic(@Nullable Boolean atomic) {
            this.atomic = Output.ofNullable(atomic);
            return this;
        }

        public Builder chart(Output<String> chart) {
            this.chart = Objects.requireNonNull(chart);
            return this;
        }

        public Builder chart(String chart) {
            this.chart = Output.of(Objects.requireNonNull(chart));
            return this;
        }

        public Builder cleanupOnFail(@Nullable Output<Boolean> cleanupOnFail) {
            this.cleanupOnFail = cleanupOnFail;
            return this;
        }

        public Builder cleanupOnFail(@Nullable Boolean cleanupOnFail) {
            this.cleanupOnFail = Output.ofNullable(cleanupOnFail);
            return this;
        }

        public Builder compat(@Nullable Output<String> compat) {
            this.compat = compat;
            return this;
        }

        public Builder compat(@Nullable String compat) {
            this.compat = Output.ofNullable(compat);
            return this;
        }

        public Builder createNamespace(@Nullable Output<Boolean> createNamespace) {
            this.createNamespace = createNamespace;
            return this;
        }

        public Builder createNamespace(@Nullable Boolean createNamespace) {
            this.createNamespace = Output.ofNullable(createNamespace);
            return this;
        }

        public Builder dependencyUpdate(@Nullable Output<Boolean> dependencyUpdate) {
            this.dependencyUpdate = dependencyUpdate;
            return this;
        }

        public Builder dependencyUpdate(@Nullable Boolean dependencyUpdate) {
            this.dependencyUpdate = Output.ofNullable(dependencyUpdate);
            return this;
        }

        public Builder description(@Nullable Output<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(@Nullable String description) {
            this.description = Output.ofNullable(description);
            return this;
        }

        public Builder devel(@Nullable Output<Boolean> devel) {
            this.devel = devel;
            return this;
        }

        public Builder devel(@Nullable Boolean devel) {
            this.devel = Output.ofNullable(devel);
            return this;
        }

        public Builder disableCRDHooks(@Nullable Output<Boolean> disableCRDHooks) {
            this.disableCRDHooks = disableCRDHooks;
            return this;
        }

        public Builder disableCRDHooks(@Nullable Boolean disableCRDHooks) {
            this.disableCRDHooks = Output.ofNullable(disableCRDHooks);
            return this;
        }

        public Builder disableOpenapiValidation(@Nullable Output<Boolean> disableOpenapiValidation) {
            this.disableOpenapiValidation = disableOpenapiValidation;
            return this;
        }

        public Builder disableOpenapiValidation(@Nullable Boolean disableOpenapiValidation) {
            this.disableOpenapiValidation = Output.ofNullable(disableOpenapiValidation);
            return this;
        }

        public Builder disableWebhooks(@Nullable Output<Boolean> disableWebhooks) {
            this.disableWebhooks = disableWebhooks;
            return this;
        }

        public Builder disableWebhooks(@Nullable Boolean disableWebhooks) {
            this.disableWebhooks = Output.ofNullable(disableWebhooks);
            return this;
        }

        public Builder forceUpdate(@Nullable Output<Boolean> forceUpdate) {
            this.forceUpdate = forceUpdate;
            return this;
        }

        public Builder forceUpdate(@Nullable Boolean forceUpdate) {
            this.forceUpdate = Output.ofNullable(forceUpdate);
            return this;
        }

        public Builder keyring(@Nullable Output<String> keyring) {
            this.keyring = keyring;
            return this;
        }

        public Builder keyring(@Nullable String keyring) {
            this.keyring = Output.ofNullable(keyring);
            return this;
        }

        public Builder lint(@Nullable Output<Boolean> lint) {
            this.lint = lint;
            return this;
        }

        public Builder lint(@Nullable Boolean lint) {
            this.lint = Output.ofNullable(lint);
            return this;
        }

        public Builder manifest(@Nullable Output<Map<String,Object>> manifest) {
            this.manifest = manifest;
            return this;
        }

        public Builder manifest(@Nullable Map<String,Object> manifest) {
            this.manifest = Output.ofNullable(manifest);
            return this;
        }

        public Builder maxHistory(@Nullable Output<Integer> maxHistory) {
            this.maxHistory = maxHistory;
            return this;
        }

        public Builder maxHistory(@Nullable Integer maxHistory) {
            this.maxHistory = Output.ofNullable(maxHistory);
            return this;
        }

        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }

        public Builder namespace(@Nullable Output<String> namespace) {
            this.namespace = namespace;
            return this;
        }

        public Builder namespace(@Nullable String namespace) {
            this.namespace = Output.ofNullable(namespace);
            return this;
        }

        public Builder postrender(@Nullable Output<String> postrender) {
            this.postrender = postrender;
            return this;
        }

        public Builder postrender(@Nullable String postrender) {
            this.postrender = Output.ofNullable(postrender);
            return this;
        }

        public Builder recreatePods(@Nullable Output<Boolean> recreatePods) {
            this.recreatePods = recreatePods;
            return this;
        }

        public Builder recreatePods(@Nullable Boolean recreatePods) {
            this.recreatePods = Output.ofNullable(recreatePods);
            return this;
        }

        public Builder renderSubchartNotes(@Nullable Output<Boolean> renderSubchartNotes) {
            this.renderSubchartNotes = renderSubchartNotes;
            return this;
        }

        public Builder renderSubchartNotes(@Nullable Boolean renderSubchartNotes) {
            this.renderSubchartNotes = Output.ofNullable(renderSubchartNotes);
            return this;
        }

        public Builder replace(@Nullable Output<Boolean> replace) {
            this.replace = replace;
            return this;
        }

        public Builder replace(@Nullable Boolean replace) {
            this.replace = Output.ofNullable(replace);
            return this;
        }

        public Builder repositoryOpts(@Nullable Output<RepositoryOptsArgs> repositoryOpts) {
            this.repositoryOpts = repositoryOpts;
            return this;
        }

        public Builder repositoryOpts(@Nullable RepositoryOptsArgs repositoryOpts) {
            this.repositoryOpts = Output.ofNullable(repositoryOpts);
            return this;
        }

        public Builder resetValues(@Nullable Output<Boolean> resetValues) {
            this.resetValues = resetValues;
            return this;
        }

        public Builder resetValues(@Nullable Boolean resetValues) {
            this.resetValues = Output.ofNullable(resetValues);
            return this;
        }

        public Builder resourceNames(@Nullable Output<Map<String,List<String>>> resourceNames) {
            this.resourceNames = resourceNames;
            return this;
        }

        public Builder resourceNames(@Nullable Map<String,List<String>> resourceNames) {
            this.resourceNames = Output.ofNullable(resourceNames);
            return this;
        }

        public Builder reuseValues(@Nullable Output<Boolean> reuseValues) {
            this.reuseValues = reuseValues;
            return this;
        }

        public Builder reuseValues(@Nullable Boolean reuseValues) {
            this.reuseValues = Output.ofNullable(reuseValues);
            return this;
        }

        public Builder skipAwait(@Nullable Output<Boolean> skipAwait) {
            this.skipAwait = skipAwait;
            return this;
        }

        public Builder skipAwait(@Nullable Boolean skipAwait) {
            this.skipAwait = Output.ofNullable(skipAwait);
            return this;
        }

        public Builder skipCrds(@Nullable Output<Boolean> skipCrds) {
            this.skipCrds = skipCrds;
            return this;
        }

        public Builder skipCrds(@Nullable Boolean skipCrds) {
            this.skipCrds = Output.ofNullable(skipCrds);
            return this;
        }

        public Builder timeout(@Nullable Output<Integer> timeout) {
            this.timeout = timeout;
            return this;
        }

        public Builder timeout(@Nullable Integer timeout) {
            this.timeout = Output.ofNullable(timeout);
            return this;
        }

        public Builder valueYamlFiles(@Nullable Output<List<AssetOrArchive>> valueYamlFiles) {
            this.valueYamlFiles = valueYamlFiles;
            return this;
        }

        public Builder valueYamlFiles(@Nullable List<AssetOrArchive> valueYamlFiles) {
            this.valueYamlFiles = Output.ofNullable(valueYamlFiles);
            return this;
        }

        public Builder values(@Nullable Output<Map<String,Object>> values) {
            this.values = values;
            return this;
        }

        public Builder values(@Nullable Map<String,Object> values) {
            this.values = Output.ofNullable(values);
            return this;
        }

        public Builder verify(@Nullable Output<Boolean> verify) {
            this.verify = verify;
            return this;
        }

        public Builder verify(@Nullable Boolean verify) {
            this.verify = Output.ofNullable(verify);
            return this;
        }

        public Builder version(@Nullable Output<String> version) {
            this.version = version;
            return this;
        }

        public Builder version(@Nullable String version) {
            this.version = Output.ofNullable(version);
            return this;
        }

        public Builder waitForJobs(@Nullable Output<Boolean> waitForJobs) {
            this.waitForJobs = waitForJobs;
            return this;
        }

        public Builder waitForJobs(@Nullable Boolean waitForJobs) {
            this.waitForJobs = Output.ofNullable(waitForJobs);
            return this;
        }
        public ReleaseArgs build() {
            return new ReleaseArgs(atomic, chart, cleanupOnFail, compat, createNamespace, dependencyUpdate, description, devel, disableCRDHooks, disableOpenapiValidation, disableWebhooks, forceUpdate, keyring, lint, manifest, maxHistory, name, namespace, postrender, recreatePods, renderSubchartNotes, replace, repositoryOpts, resetValues, resourceNames, reuseValues, skipAwait, skipCrds, timeout, valueYamlFiles, values, verify, version, waitForJobs);
        }
    }
}
