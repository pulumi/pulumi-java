// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.kubernetes.meta_v1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.kubernetes.meta_v1.inputs.LabelSelectorRequirementArgs;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
 * 
 */
public final class LabelSelectorArgs extends io.pulumi.resources.ResourceArgs {

    public static final LabelSelectorArgs Empty = new LabelSelectorArgs();

    /**
     * matchExpressions is a list of label selector requirements. The requirements are ANDed.
     * 
     */
    @Import(name="matchExpressions")
      private final @Nullable Output<List<LabelSelectorRequirementArgs>> matchExpressions;

    public Output<List<LabelSelectorRequirementArgs>> getMatchExpressions() {
        return this.matchExpressions == null ? Output.empty() : this.matchExpressions;
    }

    /**
     * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     * 
     */
    @Import(name="matchLabels")
      private final @Nullable Output<Map<String,String>> matchLabels;

    public Output<Map<String,String>> getMatchLabels() {
        return this.matchLabels == null ? Output.empty() : this.matchLabels;
    }

    public LabelSelectorArgs(
        @Nullable Output<List<LabelSelectorRequirementArgs>> matchExpressions,
        @Nullable Output<Map<String,String>> matchLabels) {
        this.matchExpressions = matchExpressions;
        this.matchLabels = matchLabels;
    }

    private LabelSelectorArgs() {
        this.matchExpressions = Output.empty();
        this.matchLabels = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LabelSelectorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<List<LabelSelectorRequirementArgs>> matchExpressions;
        private @Nullable Output<Map<String,String>> matchLabels;

        public Builder() {
    	      // Empty
        }

        public Builder(LabelSelectorArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.matchExpressions = defaults.matchExpressions;
    	      this.matchLabels = defaults.matchLabels;
        }

        public Builder matchExpressions(@Nullable Output<List<LabelSelectorRequirementArgs>> matchExpressions) {
            this.matchExpressions = matchExpressions;
            return this;
        }
        public Builder matchExpressions(@Nullable List<LabelSelectorRequirementArgs> matchExpressions) {
            this.matchExpressions = Output.ofNullable(matchExpressions);
            return this;
        }
        public Builder matchExpressions(LabelSelectorRequirementArgs... matchExpressions) {
            return matchExpressions(List.of(matchExpressions));
        }
        public Builder matchLabels(@Nullable Output<Map<String,String>> matchLabels) {
            this.matchLabels = matchLabels;
            return this;
        }
        public Builder matchLabels(@Nullable Map<String,String> matchLabels) {
            this.matchLabels = Output.ofNullable(matchLabels);
            return this;
        }        public LabelSelectorArgs build() {
            return new LabelSelectorArgs(matchExpressions, matchLabels);
        }
    }
}
