// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.kubernetes.core_v1.outputs;

import io.pulumi.core.Either;
import io.pulumi.core.annotations.OutputCustomType;
import io.pulumi.kubernetes.core_v1.outputs.HTTPHeader;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class HTTPGetAction {
    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     * 
     */
    private final @Nullable String host;
    /**
     * Custom headers to set in the request. HTTP allows repeated headers.
     * 
     */
    private final @Nullable List<HTTPHeader> httpHeaders;
    /**
     * Path to access on the HTTP server.
     * 
     */
    private final @Nullable String path;
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     * 
     */
    private final Either<Integer,String> port;
    /**
     * Scheme to use for connecting to the host. Defaults to HTTP.
     * 
     * Possible enum values:
     *  - `"HTTP"` means that the scheme used will be http://
     *  - `"HTTPS"` means that the scheme used will be https://
     * 
     */
    private final @Nullable String scheme;

    @OutputCustomType.Constructor
    private HTTPGetAction(
        @OutputCustomType.Parameter("host") @Nullable String host,
        @OutputCustomType.Parameter("httpHeaders") @Nullable List<HTTPHeader> httpHeaders,
        @OutputCustomType.Parameter("path") @Nullable String path,
        @OutputCustomType.Parameter("port") Either<Integer,String> port,
        @OutputCustomType.Parameter("scheme") @Nullable String scheme) {
        this.host = host;
        this.httpHeaders = httpHeaders;
        this.path = path;
        this.port = port;
        this.scheme = scheme;
    }

    /**
     * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
     * 
    */
    public Optional<String> getHost() {
        return Optional.ofNullable(this.host);
    }
    /**
     * Custom headers to set in the request. HTTP allows repeated headers.
     * 
    */
    public List<HTTPHeader> getHttpHeaders() {
        return this.httpHeaders == null ? List.of() : this.httpHeaders;
    }
    /**
     * Path to access on the HTTP server.
     * 
    */
    public Optional<String> getPath() {
        return Optional.ofNullable(this.path);
    }
    /**
     * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
     * 
    */
    public Either<Integer,String> getPort() {
        return this.port;
    }
    /**
     * Scheme to use for connecting to the host. Defaults to HTTP.
     * 
     * Possible enum values:
     *  - `"HTTP"` means that the scheme used will be http://
     *  - `"HTTPS"` means that the scheme used will be https://
     * 
    */
    public Optional<String> getScheme() {
        return Optional.ofNullable(this.scheme);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(HTTPGetAction defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String host;
        private @Nullable List<HTTPHeader> httpHeaders;
        private @Nullable String path;
        private Either<Integer,String> port;
        private @Nullable String scheme;

        public Builder() {
    	      // Empty
        }

        public Builder(HTTPGetAction defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.host = defaults.host;
    	      this.httpHeaders = defaults.httpHeaders;
    	      this.path = defaults.path;
    	      this.port = defaults.port;
    	      this.scheme = defaults.scheme;
        }

        public Builder host(@Nullable String host) {
            this.host = host;
            return this;
        }

        public Builder httpHeaders(@Nullable List<HTTPHeader> httpHeaders) {
            this.httpHeaders = httpHeaders;
            return this;
        }

        public Builder path(@Nullable String path) {
            this.path = path;
            return this;
        }

        public Builder port(Either<Integer,String> port) {
            this.port = Objects.requireNonNull(port);
            return this;
        }

        public Builder scheme(@Nullable String scheme) {
            this.scheme = scheme;
            return this;
        }
        public HTTPGetAction build() {
            return new HTTPGetAction(host, httpHeaders, path, port, scheme);
        }
    }
}
