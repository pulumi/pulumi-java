// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.kubernetes.core_v1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.kubernetes.core_v1.inputs.EventSeriesArgs;
import io.pulumi.kubernetes.core_v1.inputs.EventSourceArgs;
import io.pulumi.kubernetes.core_v1.inputs.ObjectReferenceArgs;
import io.pulumi.kubernetes.meta_v1.inputs.ObjectMetaArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Event is a report of an event somewhere in the cluster.  Events have a limited retention time and triggers and messages may evolve with time.  Event consumers should not rely on the timing of an event with a given Reason reflecting a consistent underlying trigger, or the continued existence of events with that Reason.  Events should be treated as informative, best-effort, supplemental data.
 * 
 */
public final class EventArgs extends io.pulumi.resources.ResourceArgs {

    public static final EventArgs Empty = new EventArgs();

    /**
     * What action was taken/failed regarding to the Regarding object.
     * 
     */
    @InputImport(name="action")
      private final @Nullable Output<String> action;

    public Output<String> getAction() {
        return this.action == null ? Output.empty() : this.action;
    }

    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     * 
     */
    @InputImport(name="apiVersion")
      private final @Nullable Output<String> apiVersion;

    public Output<String> getApiVersion() {
        return this.apiVersion == null ? Output.empty() : this.apiVersion;
    }

    /**
     * The number of times this event has occurred.
     * 
     */
    @InputImport(name="count")
      private final @Nullable Output<Integer> count;

    public Output<Integer> getCount() {
        return this.count == null ? Output.empty() : this.count;
    }

    /**
     * Time when this Event was first observed.
     * 
     */
    @InputImport(name="eventTime")
      private final @Nullable Output<String> eventTime;

    public Output<String> getEventTime() {
        return this.eventTime == null ? Output.empty() : this.eventTime;
    }

    /**
     * The time at which the event was first recorded. (Time of server receipt is in TypeMeta.)
     * 
     */
    @InputImport(name="firstTimestamp")
      private final @Nullable Output<String> firstTimestamp;

    public Output<String> getFirstTimestamp() {
        return this.firstTimestamp == null ? Output.empty() : this.firstTimestamp;
    }

    /**
     * The object that this event is about.
     * 
     */
    @InputImport(name="involvedObject", required=true)
      private final Output<ObjectReferenceArgs> involvedObject;

    public Output<ObjectReferenceArgs> getInvolvedObject() {
        return this.involvedObject;
    }

    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     * 
     */
    @InputImport(name="kind")
      private final @Nullable Output<String> kind;

    public Output<String> getKind() {
        return this.kind == null ? Output.empty() : this.kind;
    }

    /**
     * The time at which the most recent occurrence of this event was recorded.
     * 
     */
    @InputImport(name="lastTimestamp")
      private final @Nullable Output<String> lastTimestamp;

    public Output<String> getLastTimestamp() {
        return this.lastTimestamp == null ? Output.empty() : this.lastTimestamp;
    }

    /**
     * A human-readable description of the status of this operation.
     * 
     */
    @InputImport(name="message")
      private final @Nullable Output<String> message;

    public Output<String> getMessage() {
        return this.message == null ? Output.empty() : this.message;
    }

    /**
     * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
     * 
     */
    @InputImport(name="metadata", required=true)
      private final Output<ObjectMetaArgs> metadata;

    public Output<ObjectMetaArgs> getMetadata() {
        return this.metadata;
    }

    /**
     * This should be a short, machine understandable string that gives the reason for the transition into the object's current status.
     * 
     */
    @InputImport(name="reason")
      private final @Nullable Output<String> reason;

    public Output<String> getReason() {
        return this.reason == null ? Output.empty() : this.reason;
    }

    /**
     * Optional secondary object for more complex actions.
     * 
     */
    @InputImport(name="related")
      private final @Nullable Output<ObjectReferenceArgs> related;

    public Output<ObjectReferenceArgs> getRelated() {
        return this.related == null ? Output.empty() : this.related;
    }

    /**
     * Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.
     * 
     */
    @InputImport(name="reportingComponent")
      private final @Nullable Output<String> reportingComponent;

    public Output<String> getReportingComponent() {
        return this.reportingComponent == null ? Output.empty() : this.reportingComponent;
    }

    /**
     * ID of the controller instance, e.g. `kubelet-xyzf`.
     * 
     */
    @InputImport(name="reportingInstance")
      private final @Nullable Output<String> reportingInstance;

    public Output<String> getReportingInstance() {
        return this.reportingInstance == null ? Output.empty() : this.reportingInstance;
    }

    /**
     * Data about the Event series this event represents or nil if it's a singleton Event.
     * 
     */
    @InputImport(name="series")
      private final @Nullable Output<EventSeriesArgs> series;

    public Output<EventSeriesArgs> getSeries() {
        return this.series == null ? Output.empty() : this.series;
    }

    /**
     * The component reporting this event. Should be a short machine understandable string.
     * 
     */
    @InputImport(name="source")
      private final @Nullable Output<EventSourceArgs> source;

    public Output<EventSourceArgs> getSource() {
        return this.source == null ? Output.empty() : this.source;
    }

    /**
     * Type of this event (Normal, Warning), new types could be added in the future
     * 
     */
    @InputImport(name="type")
      private final @Nullable Output<String> type;

    public Output<String> getType() {
        return this.type == null ? Output.empty() : this.type;
    }

    public EventArgs(
        @Nullable Output<String> action,
        @Nullable Output<String> apiVersion,
        @Nullable Output<Integer> count,
        @Nullable Output<String> eventTime,
        @Nullable Output<String> firstTimestamp,
        Output<ObjectReferenceArgs> involvedObject,
        @Nullable Output<String> kind,
        @Nullable Output<String> lastTimestamp,
        @Nullable Output<String> message,
        Output<ObjectMetaArgs> metadata,
        @Nullable Output<String> reason,
        @Nullable Output<ObjectReferenceArgs> related,
        @Nullable Output<String> reportingComponent,
        @Nullable Output<String> reportingInstance,
        @Nullable Output<EventSeriesArgs> series,
        @Nullable Output<EventSourceArgs> source,
        @Nullable Output<String> type) {
        this.action = action;
        this.apiVersion = apiVersion;
        this.count = count;
        this.eventTime = eventTime;
        this.firstTimestamp = firstTimestamp;
        this.involvedObject = Objects.requireNonNull(involvedObject, "expected parameter 'involvedObject' to be non-null");
        this.kind = kind;
        this.lastTimestamp = lastTimestamp;
        this.message = message;
        this.metadata = Objects.requireNonNull(metadata, "expected parameter 'metadata' to be non-null");
        this.reason = reason;
        this.related = related;
        this.reportingComponent = reportingComponent;
        this.reportingInstance = reportingInstance;
        this.series = series;
        this.source = source;
        this.type = type;
    }

    private EventArgs() {
        this.action = Output.empty();
        this.apiVersion = Output.empty();
        this.count = Output.empty();
        this.eventTime = Output.empty();
        this.firstTimestamp = Output.empty();
        this.involvedObject = Output.empty();
        this.kind = Output.empty();
        this.lastTimestamp = Output.empty();
        this.message = Output.empty();
        this.metadata = Output.empty();
        this.reason = Output.empty();
        this.related = Output.empty();
        this.reportingComponent = Output.empty();
        this.reportingInstance = Output.empty();
        this.series = Output.empty();
        this.source = Output.empty();
        this.type = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EventArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> action;
        private @Nullable Output<String> apiVersion;
        private @Nullable Output<Integer> count;
        private @Nullable Output<String> eventTime;
        private @Nullable Output<String> firstTimestamp;
        private Output<ObjectReferenceArgs> involvedObject;
        private @Nullable Output<String> kind;
        private @Nullable Output<String> lastTimestamp;
        private @Nullable Output<String> message;
        private Output<ObjectMetaArgs> metadata;
        private @Nullable Output<String> reason;
        private @Nullable Output<ObjectReferenceArgs> related;
        private @Nullable Output<String> reportingComponent;
        private @Nullable Output<String> reportingInstance;
        private @Nullable Output<EventSeriesArgs> series;
        private @Nullable Output<EventSourceArgs> source;
        private @Nullable Output<String> type;

        public Builder() {
    	      // Empty
        }

        public Builder(EventArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.apiVersion = defaults.apiVersion;
    	      this.count = defaults.count;
    	      this.eventTime = defaults.eventTime;
    	      this.firstTimestamp = defaults.firstTimestamp;
    	      this.involvedObject = defaults.involvedObject;
    	      this.kind = defaults.kind;
    	      this.lastTimestamp = defaults.lastTimestamp;
    	      this.message = defaults.message;
    	      this.metadata = defaults.metadata;
    	      this.reason = defaults.reason;
    	      this.related = defaults.related;
    	      this.reportingComponent = defaults.reportingComponent;
    	      this.reportingInstance = defaults.reportingInstance;
    	      this.series = defaults.series;
    	      this.source = defaults.source;
    	      this.type = defaults.type;
        }

        public Builder action(@Nullable Output<String> action) {
            this.action = action;
            return this;
        }

        public Builder action(@Nullable String action) {
            this.action = Output.ofNullable(action);
            return this;
        }

        public Builder apiVersion(@Nullable Output<String> apiVersion) {
            this.apiVersion = apiVersion;
            return this;
        }

        public Builder apiVersion(@Nullable String apiVersion) {
            this.apiVersion = Output.ofNullable(apiVersion);
            return this;
        }

        public Builder count(@Nullable Output<Integer> count) {
            this.count = count;
            return this;
        }

        public Builder count(@Nullable Integer count) {
            this.count = Output.ofNullable(count);
            return this;
        }

        public Builder eventTime(@Nullable Output<String> eventTime) {
            this.eventTime = eventTime;
            return this;
        }

        public Builder eventTime(@Nullable String eventTime) {
            this.eventTime = Output.ofNullable(eventTime);
            return this;
        }

        public Builder firstTimestamp(@Nullable Output<String> firstTimestamp) {
            this.firstTimestamp = firstTimestamp;
            return this;
        }

        public Builder firstTimestamp(@Nullable String firstTimestamp) {
            this.firstTimestamp = Output.ofNullable(firstTimestamp);
            return this;
        }

        public Builder involvedObject(Output<ObjectReferenceArgs> involvedObject) {
            this.involvedObject = Objects.requireNonNull(involvedObject);
            return this;
        }

        public Builder involvedObject(ObjectReferenceArgs involvedObject) {
            this.involvedObject = Output.of(Objects.requireNonNull(involvedObject));
            return this;
        }

        public Builder kind(@Nullable Output<String> kind) {
            this.kind = kind;
            return this;
        }

        public Builder kind(@Nullable String kind) {
            this.kind = Output.ofNullable(kind);
            return this;
        }

        public Builder lastTimestamp(@Nullable Output<String> lastTimestamp) {
            this.lastTimestamp = lastTimestamp;
            return this;
        }

        public Builder lastTimestamp(@Nullable String lastTimestamp) {
            this.lastTimestamp = Output.ofNullable(lastTimestamp);
            return this;
        }

        public Builder message(@Nullable Output<String> message) {
            this.message = message;
            return this;
        }

        public Builder message(@Nullable String message) {
            this.message = Output.ofNullable(message);
            return this;
        }

        public Builder metadata(Output<ObjectMetaArgs> metadata) {
            this.metadata = Objects.requireNonNull(metadata);
            return this;
        }

        public Builder metadata(ObjectMetaArgs metadata) {
            this.metadata = Output.of(Objects.requireNonNull(metadata));
            return this;
        }

        public Builder reason(@Nullable Output<String> reason) {
            this.reason = reason;
            return this;
        }

        public Builder reason(@Nullable String reason) {
            this.reason = Output.ofNullable(reason);
            return this;
        }

        public Builder related(@Nullable Output<ObjectReferenceArgs> related) {
            this.related = related;
            return this;
        }

        public Builder related(@Nullable ObjectReferenceArgs related) {
            this.related = Output.ofNullable(related);
            return this;
        }

        public Builder reportingComponent(@Nullable Output<String> reportingComponent) {
            this.reportingComponent = reportingComponent;
            return this;
        }

        public Builder reportingComponent(@Nullable String reportingComponent) {
            this.reportingComponent = Output.ofNullable(reportingComponent);
            return this;
        }

        public Builder reportingInstance(@Nullable Output<String> reportingInstance) {
            this.reportingInstance = reportingInstance;
            return this;
        }

        public Builder reportingInstance(@Nullable String reportingInstance) {
            this.reportingInstance = Output.ofNullable(reportingInstance);
            return this;
        }

        public Builder series(@Nullable Output<EventSeriesArgs> series) {
            this.series = series;
            return this;
        }

        public Builder series(@Nullable EventSeriesArgs series) {
            this.series = Output.ofNullable(series);
            return this;
        }

        public Builder source(@Nullable Output<EventSourceArgs> source) {
            this.source = source;
            return this;
        }

        public Builder source(@Nullable EventSourceArgs source) {
            this.source = Output.ofNullable(source);
            return this;
        }

        public Builder type(@Nullable Output<String> type) {
            this.type = type;
            return this;
        }

        public Builder type(@Nullable String type) {
            this.type = Output.ofNullable(type);
            return this;
        }
        public EventArgs build() {
            return new EventArgs(action, apiVersion, count, eventTime, firstTimestamp, involvedObject, kind, lastTimestamp, message, metadata, reason, related, reportingComponent, reportingInstance, series, source, type);
        }
    }
}
