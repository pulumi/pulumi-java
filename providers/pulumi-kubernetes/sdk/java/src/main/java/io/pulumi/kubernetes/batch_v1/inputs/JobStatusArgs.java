// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.kubernetes.batch_v1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.kubernetes.batch_v1.inputs.JobConditionArgs;
import io.pulumi.kubernetes.batch_v1.inputs.UncountedTerminatedPodsArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * JobStatus represents the current state of a Job.
 * 
 */
public final class JobStatusArgs extends io.pulumi.resources.ResourceArgs {

    public static final JobStatusArgs Empty = new JobStatusArgs();

    /**
     * The number of pending and running pods.
     * 
     */
    @Import(name="active")
      private final @Nullable Output<Integer> active;

    public Output<Integer> getActive() {
        return this.active == null ? Codegen.empty() : this.active;
    }

    /**
     * CompletedIndexes holds the completed indexes when .spec.completionMode = "Indexed" in a text format. The indexes are represented as decimal integers separated by commas. The numbers are listed in increasing order. Three or more consecutive numbers are compressed and represented by the first and last element of the series, separated by a hyphen. For example, if the completed indexes are 1, 3, 4, 5 and 7, they are represented as "1,3-5,7".
     * 
     */
    @Import(name="completedIndexes")
      private final @Nullable Output<String> completedIndexes;

    public Output<String> getCompletedIndexes() {
        return this.completedIndexes == null ? Codegen.empty() : this.completedIndexes;
    }

    /**
     * Represents time when the job was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. The completion time is only set when the job finishes successfully.
     * 
     */
    @Import(name="completionTime")
      private final @Nullable Output<String> completionTime;

    public Output<String> getCompletionTime() {
        return this.completionTime == null ? Codegen.empty() : this.completionTime;
    }

    /**
     * The latest available observations of an object's current state. When a Job fails, one of the conditions will have type "Failed" and status true. When a Job is suspended, one of the conditions will have type "Suspended" and status true; when the Job is resumed, the status of this condition will become false. When a Job is completed, one of the conditions will have type "Complete" and status true. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
     * 
     */
    @Import(name="conditions")
      private final @Nullable Output<List<JobConditionArgs>> conditions;

    public Output<List<JobConditionArgs>> getConditions() {
        return this.conditions == null ? Codegen.empty() : this.conditions;
    }

    /**
     * The number of pods which reached phase Failed.
     * 
     */
    @Import(name="failed")
      private final @Nullable Output<Integer> failed;

    public Output<Integer> getFailed() {
        return this.failed == null ? Codegen.empty() : this.failed;
    }

    /**
     * The number of pods which have a Ready condition.
     * 
     * This field is alpha-level. The job controller populates the field when the feature gate JobReadyPods is enabled (disabled by default).
     * 
     */
    @Import(name="ready")
      private final @Nullable Output<Integer> ready;

    public Output<Integer> getReady() {
        return this.ready == null ? Codegen.empty() : this.ready;
    }

    /**
     * Represents time when the job controller started processing a job. When a Job is created in the suspended state, this field is not set until the first time it is resumed. This field is reset every time a Job is resumed from suspension. It is represented in RFC3339 form and is in UTC.
     * 
     */
    @Import(name="startTime")
      private final @Nullable Output<String> startTime;

    public Output<String> getStartTime() {
        return this.startTime == null ? Codegen.empty() : this.startTime;
    }

    /**
     * The number of pods which reached phase Succeeded.
     * 
     */
    @Import(name="succeeded")
      private final @Nullable Output<Integer> succeeded;

    public Output<Integer> getSucceeded() {
        return this.succeeded == null ? Codegen.empty() : this.succeeded;
    }

    /**
     * UncountedTerminatedPods holds the UIDs of Pods that have terminated but the job controller hasn't yet accounted for in the status counters.
     * 
     * The job controller creates pods with a finalizer. When a pod terminates (succeeded or failed), the controller does three steps to account for it in the job status: (1) Add the pod UID to the arrays in this field. (2) Remove the pod finalizer. (3) Remove the pod UID from the arrays while increasing the corresponding
     *     counter.
     * 
     * This field is beta-level. The job controller only makes use of this field when the feature gate JobTrackingWithFinalizers is enabled (enabled by default). Old jobs might not be tracked using this field, in which case the field remains null.
     * 
     */
    @Import(name="uncountedTerminatedPods")
      private final @Nullable Output<UncountedTerminatedPodsArgs> uncountedTerminatedPods;

    public Output<UncountedTerminatedPodsArgs> getUncountedTerminatedPods() {
        return this.uncountedTerminatedPods == null ? Codegen.empty() : this.uncountedTerminatedPods;
    }

    public JobStatusArgs(
        @Nullable Output<Integer> active,
        @Nullable Output<String> completedIndexes,
        @Nullable Output<String> completionTime,
        @Nullable Output<List<JobConditionArgs>> conditions,
        @Nullable Output<Integer> failed,
        @Nullable Output<Integer> ready,
        @Nullable Output<String> startTime,
        @Nullable Output<Integer> succeeded,
        @Nullable Output<UncountedTerminatedPodsArgs> uncountedTerminatedPods) {
        this.active = active;
        this.completedIndexes = completedIndexes;
        this.completionTime = completionTime;
        this.conditions = conditions;
        this.failed = failed;
        this.ready = ready;
        this.startTime = startTime;
        this.succeeded = succeeded;
        this.uncountedTerminatedPods = uncountedTerminatedPods;
    }

    private JobStatusArgs() {
        this.active = Codegen.empty();
        this.completedIndexes = Codegen.empty();
        this.completionTime = Codegen.empty();
        this.conditions = Codegen.empty();
        this.failed = Codegen.empty();
        this.ready = Codegen.empty();
        this.startTime = Codegen.empty();
        this.succeeded = Codegen.empty();
        this.uncountedTerminatedPods = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(JobStatusArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Integer> active;
        private @Nullable Output<String> completedIndexes;
        private @Nullable Output<String> completionTime;
        private @Nullable Output<List<JobConditionArgs>> conditions;
        private @Nullable Output<Integer> failed;
        private @Nullable Output<Integer> ready;
        private @Nullable Output<String> startTime;
        private @Nullable Output<Integer> succeeded;
        private @Nullable Output<UncountedTerminatedPodsArgs> uncountedTerminatedPods;

        public Builder() {
    	      // Empty
        }

        public Builder(JobStatusArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.active = defaults.active;
    	      this.completedIndexes = defaults.completedIndexes;
    	      this.completionTime = defaults.completionTime;
    	      this.conditions = defaults.conditions;
    	      this.failed = defaults.failed;
    	      this.ready = defaults.ready;
    	      this.startTime = defaults.startTime;
    	      this.succeeded = defaults.succeeded;
    	      this.uncountedTerminatedPods = defaults.uncountedTerminatedPods;
        }

        public Builder active(@Nullable Output<Integer> active) {
            this.active = active;
            return this;
        }
        public Builder active(@Nullable Integer active) {
            this.active = Codegen.ofNullable(active);
            return this;
        }
        public Builder completedIndexes(@Nullable Output<String> completedIndexes) {
            this.completedIndexes = completedIndexes;
            return this;
        }
        public Builder completedIndexes(@Nullable String completedIndexes) {
            this.completedIndexes = Codegen.ofNullable(completedIndexes);
            return this;
        }
        public Builder completionTime(@Nullable Output<String> completionTime) {
            this.completionTime = completionTime;
            return this;
        }
        public Builder completionTime(@Nullable String completionTime) {
            this.completionTime = Codegen.ofNullable(completionTime);
            return this;
        }
        public Builder conditions(@Nullable Output<List<JobConditionArgs>> conditions) {
            this.conditions = conditions;
            return this;
        }
        public Builder conditions(@Nullable List<JobConditionArgs> conditions) {
            this.conditions = Codegen.ofNullable(conditions);
            return this;
        }
        public Builder conditions(JobConditionArgs... conditions) {
            return conditions(List.of(conditions));
        }
        public Builder failed(@Nullable Output<Integer> failed) {
            this.failed = failed;
            return this;
        }
        public Builder failed(@Nullable Integer failed) {
            this.failed = Codegen.ofNullable(failed);
            return this;
        }
        public Builder ready(@Nullable Output<Integer> ready) {
            this.ready = ready;
            return this;
        }
        public Builder ready(@Nullable Integer ready) {
            this.ready = Codegen.ofNullable(ready);
            return this;
        }
        public Builder startTime(@Nullable Output<String> startTime) {
            this.startTime = startTime;
            return this;
        }
        public Builder startTime(@Nullable String startTime) {
            this.startTime = Codegen.ofNullable(startTime);
            return this;
        }
        public Builder succeeded(@Nullable Output<Integer> succeeded) {
            this.succeeded = succeeded;
            return this;
        }
        public Builder succeeded(@Nullable Integer succeeded) {
            this.succeeded = Codegen.ofNullable(succeeded);
            return this;
        }
        public Builder uncountedTerminatedPods(@Nullable Output<UncountedTerminatedPodsArgs> uncountedTerminatedPods) {
            this.uncountedTerminatedPods = uncountedTerminatedPods;
            return this;
        }
        public Builder uncountedTerminatedPods(@Nullable UncountedTerminatedPodsArgs uncountedTerminatedPods) {
            this.uncountedTerminatedPods = Codegen.ofNullable(uncountedTerminatedPods);
            return this;
        }        public JobStatusArgs build() {
            return new JobStatusArgs(active, completedIndexes, completionTime, conditions, failed, ready, startTime, succeeded, uncountedTerminatedPods);
        }
    }
}
