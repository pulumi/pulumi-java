// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.kubernetes.admissionregistration.k8s.io_v1beta1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.kubernetes.admissionregistration.k8s.io_v1beta1.inputs.RuleWithOperationsArgs;
import io.pulumi.kubernetes.admissionregistration.k8s.io_v1beta1.inputs.WebhookClientConfigArgs;
import io.pulumi.kubernetes.meta_v1.inputs.LabelSelectorArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


public final class MutatingWebhookArgs extends io.pulumi.resources.ResourceArgs {

    public static final MutatingWebhookArgs Empty = new MutatingWebhookArgs();

    @InputImport(name="admissionReviewVersions")
    private final @Nullable Input<List<String>> admissionReviewVersions;

    public Input<List<String>> getAdmissionReviewVersions() {
        return this.admissionReviewVersions == null ? Input.empty() : this.admissionReviewVersions;
    }

    @InputImport(name="clientConfig", required=true)
    private final Input<WebhookClientConfigArgs> clientConfig;

    public Input<WebhookClientConfigArgs> getClientConfig() {
        return this.clientConfig;
    }

    @InputImport(name="failurePolicy")
    private final @Nullable Input<String> failurePolicy;

    public Input<String> getFailurePolicy() {
        return this.failurePolicy == null ? Input.empty() : this.failurePolicy;
    }

    @InputImport(name="matchPolicy")
    private final @Nullable Input<String> matchPolicy;

    public Input<String> getMatchPolicy() {
        return this.matchPolicy == null ? Input.empty() : this.matchPolicy;
    }

    @InputImport(name="name", required=true)
    private final Input<String> name;

    public Input<String> getName() {
        return this.name;
    }

    @InputImport(name="namespaceSelector")
    private final @Nullable Input<LabelSelectorArgs> namespaceSelector;

    public Input<LabelSelectorArgs> getNamespaceSelector() {
        return this.namespaceSelector == null ? Input.empty() : this.namespaceSelector;
    }

    @InputImport(name="objectSelector")
    private final @Nullable Input<LabelSelectorArgs> objectSelector;

    public Input<LabelSelectorArgs> getObjectSelector() {
        return this.objectSelector == null ? Input.empty() : this.objectSelector;
    }

    @InputImport(name="reinvocationPolicy")
    private final @Nullable Input<String> reinvocationPolicy;

    public Input<String> getReinvocationPolicy() {
        return this.reinvocationPolicy == null ? Input.empty() : this.reinvocationPolicy;
    }

    @InputImport(name="rules")
    private final @Nullable Input<List<RuleWithOperationsArgs>> rules;

    public Input<List<RuleWithOperationsArgs>> getRules() {
        return this.rules == null ? Input.empty() : this.rules;
    }

    @InputImport(name="sideEffects")
    private final @Nullable Input<String> sideEffects;

    public Input<String> getSideEffects() {
        return this.sideEffects == null ? Input.empty() : this.sideEffects;
    }

    @InputImport(name="timeoutSeconds")
    private final @Nullable Input<Integer> timeoutSeconds;

    public Input<Integer> getTimeoutSeconds() {
        return this.timeoutSeconds == null ? Input.empty() : this.timeoutSeconds;
    }

    public MutatingWebhookArgs(
        @Nullable Input<List<String>> admissionReviewVersions,
        Input<WebhookClientConfigArgs> clientConfig,
        @Nullable Input<String> failurePolicy,
        @Nullable Input<String> matchPolicy,
        Input<String> name,
        @Nullable Input<LabelSelectorArgs> namespaceSelector,
        @Nullable Input<LabelSelectorArgs> objectSelector,
        @Nullable Input<String> reinvocationPolicy,
        @Nullable Input<List<RuleWithOperationsArgs>> rules,
        @Nullable Input<String> sideEffects,
        @Nullable Input<Integer> timeoutSeconds) {
        this.admissionReviewVersions = admissionReviewVersions;
        this.clientConfig = Objects.requireNonNull(clientConfig, "expected parameter 'clientConfig' to be non-null");
        this.failurePolicy = failurePolicy;
        this.matchPolicy = matchPolicy;
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.namespaceSelector = namespaceSelector;
        this.objectSelector = objectSelector;
        this.reinvocationPolicy = reinvocationPolicy;
        this.rules = rules;
        this.sideEffects = sideEffects;
        this.timeoutSeconds = timeoutSeconds;
    }

    private MutatingWebhookArgs() {
        this.admissionReviewVersions = Input.empty();
        this.clientConfig = Input.empty();
        this.failurePolicy = Input.empty();
        this.matchPolicy = Input.empty();
        this.name = Input.empty();
        this.namespaceSelector = Input.empty();
        this.objectSelector = Input.empty();
        this.reinvocationPolicy = Input.empty();
        this.rules = Input.empty();
        this.sideEffects = Input.empty();
        this.timeoutSeconds = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(MutatingWebhookArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<String>> admissionReviewVersions;
        private Input<WebhookClientConfigArgs> clientConfig;
        private @Nullable Input<String> failurePolicy;
        private @Nullable Input<String> matchPolicy;
        private Input<String> name;
        private @Nullable Input<LabelSelectorArgs> namespaceSelector;
        private @Nullable Input<LabelSelectorArgs> objectSelector;
        private @Nullable Input<String> reinvocationPolicy;
        private @Nullable Input<List<RuleWithOperationsArgs>> rules;
        private @Nullable Input<String> sideEffects;
        private @Nullable Input<Integer> timeoutSeconds;

        public Builder() {
    	      // Empty
        }

        public Builder(MutatingWebhookArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.admissionReviewVersions = defaults.admissionReviewVersions;
    	      this.clientConfig = defaults.clientConfig;
    	      this.failurePolicy = defaults.failurePolicy;
    	      this.matchPolicy = defaults.matchPolicy;
    	      this.name = defaults.name;
    	      this.namespaceSelector = defaults.namespaceSelector;
    	      this.objectSelector = defaults.objectSelector;
    	      this.reinvocationPolicy = defaults.reinvocationPolicy;
    	      this.rules = defaults.rules;
    	      this.sideEffects = defaults.sideEffects;
    	      this.timeoutSeconds = defaults.timeoutSeconds;
        }

        public Builder setAdmissionReviewVersions(@Nullable Input<List<String>> admissionReviewVersions) {
            this.admissionReviewVersions = admissionReviewVersions;
            return this;
        }

        public Builder setAdmissionReviewVersions(@Nullable List<String> admissionReviewVersions) {
            this.admissionReviewVersions = Input.ofNullable(admissionReviewVersions);
            return this;
        }

        public Builder setClientConfig(Input<WebhookClientConfigArgs> clientConfig) {
            this.clientConfig = Objects.requireNonNull(clientConfig);
            return this;
        }

        public Builder setClientConfig(WebhookClientConfigArgs clientConfig) {
            this.clientConfig = Input.of(Objects.requireNonNull(clientConfig));
            return this;
        }

        public Builder setFailurePolicy(@Nullable Input<String> failurePolicy) {
            this.failurePolicy = failurePolicy;
            return this;
        }

        public Builder setFailurePolicy(@Nullable String failurePolicy) {
            this.failurePolicy = Input.ofNullable(failurePolicy);
            return this;
        }

        public Builder setMatchPolicy(@Nullable Input<String> matchPolicy) {
            this.matchPolicy = matchPolicy;
            return this;
        }

        public Builder setMatchPolicy(@Nullable String matchPolicy) {
            this.matchPolicy = Input.ofNullable(matchPolicy);
            return this;
        }

        public Builder setName(Input<String> name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setName(String name) {
            this.name = Input.of(Objects.requireNonNull(name));
            return this;
        }

        public Builder setNamespaceSelector(@Nullable Input<LabelSelectorArgs> namespaceSelector) {
            this.namespaceSelector = namespaceSelector;
            return this;
        }

        public Builder setNamespaceSelector(@Nullable LabelSelectorArgs namespaceSelector) {
            this.namespaceSelector = Input.ofNullable(namespaceSelector);
            return this;
        }

        public Builder setObjectSelector(@Nullable Input<LabelSelectorArgs> objectSelector) {
            this.objectSelector = objectSelector;
            return this;
        }

        public Builder setObjectSelector(@Nullable LabelSelectorArgs objectSelector) {
            this.objectSelector = Input.ofNullable(objectSelector);
            return this;
        }

        public Builder setReinvocationPolicy(@Nullable Input<String> reinvocationPolicy) {
            this.reinvocationPolicy = reinvocationPolicy;
            return this;
        }

        public Builder setReinvocationPolicy(@Nullable String reinvocationPolicy) {
            this.reinvocationPolicy = Input.ofNullable(reinvocationPolicy);
            return this;
        }

        public Builder setRules(@Nullable Input<List<RuleWithOperationsArgs>> rules) {
            this.rules = rules;
            return this;
        }

        public Builder setRules(@Nullable List<RuleWithOperationsArgs> rules) {
            this.rules = Input.ofNullable(rules);
            return this;
        }

        public Builder setSideEffects(@Nullable Input<String> sideEffects) {
            this.sideEffects = sideEffects;
            return this;
        }

        public Builder setSideEffects(@Nullable String sideEffects) {
            this.sideEffects = Input.ofNullable(sideEffects);
            return this;
        }

        public Builder setTimeoutSeconds(@Nullable Input<Integer> timeoutSeconds) {
            this.timeoutSeconds = timeoutSeconds;
            return this;
        }

        public Builder setTimeoutSeconds(@Nullable Integer timeoutSeconds) {
            this.timeoutSeconds = Input.ofNullable(timeoutSeconds);
            return this;
        }

        public MutatingWebhookArgs build() {
            return new MutatingWebhookArgs(admissionReviewVersions, clientConfig, failurePolicy, matchPolicy, name, namespaceSelector, objectSelector, reinvocationPolicy, rules, sideEffects, timeoutSeconds);
        }
    }
}
