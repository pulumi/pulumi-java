// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.kubernetes.core_v1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.kubernetes.core_v1.inputs.EnvVarSourceArgs;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * EnvVar represents an environment variable present in a Container.
 * 
 */
public final class EnvVarArgs extends io.pulumi.resources.ResourceArgs {

    public static final EnvVarArgs Empty = new EnvVarArgs();

    /**
     * Name of the environment variable. Must be a C_IDENTIFIER.
     * 
     */
    @Import(name="name", required=true)
      private final Output<String> name;

    public Output<String> getName() {
        return this.name;
    }

    /**
     * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
     * 
     */
    @Import(name="value")
      private final @Nullable Output<String> value;

    public Output<String> getValue() {
        return this.value == null ? Output.empty() : this.value;
    }

    /**
     * Source for the environment variable's value. Cannot be used if value is not empty.
     * 
     */
    @Import(name="valueFrom")
      private final @Nullable Output<EnvVarSourceArgs> valueFrom;

    public Output<EnvVarSourceArgs> getValueFrom() {
        return this.valueFrom == null ? Output.empty() : this.valueFrom;
    }

    public EnvVarArgs(
        Output<String> name,
        @Nullable Output<String> value,
        @Nullable Output<EnvVarSourceArgs> valueFrom) {
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.value = value;
        this.valueFrom = valueFrom;
    }

    private EnvVarArgs() {
        this.name = Output.empty();
        this.value = Output.empty();
        this.valueFrom = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(EnvVarArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> name;
        private @Nullable Output<String> value;
        private @Nullable Output<EnvVarSourceArgs> valueFrom;

        public Builder() {
    	      // Empty
        }

        public Builder(EnvVarArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.name = defaults.name;
    	      this.value = defaults.value;
    	      this.valueFrom = defaults.valueFrom;
        }

        public Builder name(Output<String> name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder name(String name) {
            this.name = Output.of(Objects.requireNonNull(name));
            return this;
        }

        public Builder value(@Nullable Output<String> value) {
            this.value = value;
            return this;
        }

        public Builder value(@Nullable String value) {
            this.value = Output.ofNullable(value);
            return this;
        }

        public Builder valueFrom(@Nullable Output<EnvVarSourceArgs> valueFrom) {
            this.valueFrom = valueFrom;
            return this;
        }

        public Builder valueFrom(@Nullable EnvVarSourceArgs valueFrom) {
            this.valueFrom = Output.ofNullable(valueFrom);
            return this;
        }
        public EnvVarArgs build() {
            return new EnvVarArgs(name, value, valueFrom);
        }
    }
}
