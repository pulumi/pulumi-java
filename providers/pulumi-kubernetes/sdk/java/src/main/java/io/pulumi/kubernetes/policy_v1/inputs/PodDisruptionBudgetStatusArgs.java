// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.kubernetes.policy_v1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import io.pulumi.kubernetes.meta_v1.inputs.ConditionArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


public final class PodDisruptionBudgetStatusArgs extends io.pulumi.resources.ResourceArgs {

    public static final PodDisruptionBudgetStatusArgs Empty = new PodDisruptionBudgetStatusArgs();

    @InputImport(name="conditions")
    private final @Nullable Input<List<ConditionArgs>> conditions;

    public Input<List<ConditionArgs>> getConditions() {
        return this.conditions == null ? Input.empty() : this.conditions;
    }

    @InputImport(name="currentHealthy", required=true)
    private final Input<Integer> currentHealthy;

    public Input<Integer> getCurrentHealthy() {
        return this.currentHealthy;
    }

    @InputImport(name="desiredHealthy", required=true)
    private final Input<Integer> desiredHealthy;

    public Input<Integer> getDesiredHealthy() {
        return this.desiredHealthy;
    }

    @InputImport(name="disruptedPods")
    private final @Nullable Input<Map<String,String>> disruptedPods;

    public Input<Map<String,String>> getDisruptedPods() {
        return this.disruptedPods == null ? Input.empty() : this.disruptedPods;
    }

    @InputImport(name="disruptionsAllowed", required=true)
    private final Input<Integer> disruptionsAllowed;

    public Input<Integer> getDisruptionsAllowed() {
        return this.disruptionsAllowed;
    }

    @InputImport(name="expectedPods", required=true)
    private final Input<Integer> expectedPods;

    public Input<Integer> getExpectedPods() {
        return this.expectedPods;
    }

    @InputImport(name="observedGeneration")
    private final @Nullable Input<Integer> observedGeneration;

    public Input<Integer> getObservedGeneration() {
        return this.observedGeneration == null ? Input.empty() : this.observedGeneration;
    }

    public PodDisruptionBudgetStatusArgs(
        @Nullable Input<List<ConditionArgs>> conditions,
        Input<Integer> currentHealthy,
        Input<Integer> desiredHealthy,
        @Nullable Input<Map<String,String>> disruptedPods,
        Input<Integer> disruptionsAllowed,
        Input<Integer> expectedPods,
        @Nullable Input<Integer> observedGeneration) {
        this.conditions = conditions;
        this.currentHealthy = Objects.requireNonNull(currentHealthy, "expected parameter 'currentHealthy' to be non-null");
        this.desiredHealthy = Objects.requireNonNull(desiredHealthy, "expected parameter 'desiredHealthy' to be non-null");
        this.disruptedPods = disruptedPods;
        this.disruptionsAllowed = Objects.requireNonNull(disruptionsAllowed, "expected parameter 'disruptionsAllowed' to be non-null");
        this.expectedPods = Objects.requireNonNull(expectedPods, "expected parameter 'expectedPods' to be non-null");
        this.observedGeneration = observedGeneration;
    }

    private PodDisruptionBudgetStatusArgs() {
        this.conditions = Input.empty();
        this.currentHealthy = Input.empty();
        this.desiredHealthy = Input.empty();
        this.disruptedPods = Input.empty();
        this.disruptionsAllowed = Input.empty();
        this.expectedPods = Input.empty();
        this.observedGeneration = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PodDisruptionBudgetStatusArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<ConditionArgs>> conditions;
        private Input<Integer> currentHealthy;
        private Input<Integer> desiredHealthy;
        private @Nullable Input<Map<String,String>> disruptedPods;
        private Input<Integer> disruptionsAllowed;
        private Input<Integer> expectedPods;
        private @Nullable Input<Integer> observedGeneration;

        public Builder() {
    	      // Empty
        }

        public Builder(PodDisruptionBudgetStatusArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.conditions = defaults.conditions;
    	      this.currentHealthy = defaults.currentHealthy;
    	      this.desiredHealthy = defaults.desiredHealthy;
    	      this.disruptedPods = defaults.disruptedPods;
    	      this.disruptionsAllowed = defaults.disruptionsAllowed;
    	      this.expectedPods = defaults.expectedPods;
    	      this.observedGeneration = defaults.observedGeneration;
        }

        public Builder setConditions(@Nullable Input<List<ConditionArgs>> conditions) {
            this.conditions = conditions;
            return this;
        }

        public Builder setConditions(@Nullable List<ConditionArgs> conditions) {
            this.conditions = Input.ofNullable(conditions);
            return this;
        }

        public Builder setCurrentHealthy(Input<Integer> currentHealthy) {
            this.currentHealthy = Objects.requireNonNull(currentHealthy);
            return this;
        }

        public Builder setCurrentHealthy(Integer currentHealthy) {
            this.currentHealthy = Input.of(Objects.requireNonNull(currentHealthy));
            return this;
        }

        public Builder setDesiredHealthy(Input<Integer> desiredHealthy) {
            this.desiredHealthy = Objects.requireNonNull(desiredHealthy);
            return this;
        }

        public Builder setDesiredHealthy(Integer desiredHealthy) {
            this.desiredHealthy = Input.of(Objects.requireNonNull(desiredHealthy));
            return this;
        }

        public Builder setDisruptedPods(@Nullable Input<Map<String,String>> disruptedPods) {
            this.disruptedPods = disruptedPods;
            return this;
        }

        public Builder setDisruptedPods(@Nullable Map<String,String> disruptedPods) {
            this.disruptedPods = Input.ofNullable(disruptedPods);
            return this;
        }

        public Builder setDisruptionsAllowed(Input<Integer> disruptionsAllowed) {
            this.disruptionsAllowed = Objects.requireNonNull(disruptionsAllowed);
            return this;
        }

        public Builder setDisruptionsAllowed(Integer disruptionsAllowed) {
            this.disruptionsAllowed = Input.of(Objects.requireNonNull(disruptionsAllowed));
            return this;
        }

        public Builder setExpectedPods(Input<Integer> expectedPods) {
            this.expectedPods = Objects.requireNonNull(expectedPods);
            return this;
        }

        public Builder setExpectedPods(Integer expectedPods) {
            this.expectedPods = Input.of(Objects.requireNonNull(expectedPods));
            return this;
        }

        public Builder setObservedGeneration(@Nullable Input<Integer> observedGeneration) {
            this.observedGeneration = observedGeneration;
            return this;
        }

        public Builder setObservedGeneration(@Nullable Integer observedGeneration) {
            this.observedGeneration = Input.ofNullable(observedGeneration);
            return this;
        }

        public PodDisruptionBudgetStatusArgs build() {
            return new PodDisruptionBudgetStatusArgs(conditions, currentHealthy, desiredHealthy, disruptedPods, disruptionsAllowed, expectedPods, observedGeneration);
        }
    }
}
