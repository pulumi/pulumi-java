// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.kubernetes.flowcontrol.apiserver.k8s.io_v1beta2.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.kubernetes.flowcontrol.apiserver.k8s.io_v1beta2.inputs.GroupSubjectArgs;
import io.pulumi.kubernetes.flowcontrol.apiserver.k8s.io_v1beta2.inputs.ServiceAccountSubjectArgs;
import io.pulumi.kubernetes.flowcontrol.apiserver.k8s.io_v1beta2.inputs.UserSubjectArgs;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Subject matches the originator of a request, as identified by the request authentication system. There are three ways of matching an originator; by user, group, or service account.
 * 
 */
public final class SubjectArgs extends io.pulumi.resources.ResourceArgs {

    public static final SubjectArgs Empty = new SubjectArgs();

    /**
     * `group` matches based on user group name.
     * 
     */
    @InputImport(name="group")
      private final @Nullable Input<GroupSubjectArgs> group;

    public Input<GroupSubjectArgs> getGroup() {
        return this.group == null ? Input.empty() : this.group;
    }

    /**
     * `kind` indicates which one of the other fields is non-empty. Required
     * 
     */
    @InputImport(name="kind", required=true)
      private final Input<String> kind;

    public Input<String> getKind() {
        return this.kind;
    }

    /**
     * `serviceAccount` matches ServiceAccounts.
     * 
     */
    @InputImport(name="serviceAccount")
      private final @Nullable Input<ServiceAccountSubjectArgs> serviceAccount;

    public Input<ServiceAccountSubjectArgs> getServiceAccount() {
        return this.serviceAccount == null ? Input.empty() : this.serviceAccount;
    }

    /**
     * `user` matches based on username.
     * 
     */
    @InputImport(name="user")
      private final @Nullable Input<UserSubjectArgs> user;

    public Input<UserSubjectArgs> getUser() {
        return this.user == null ? Input.empty() : this.user;
    }

    public SubjectArgs(
        @Nullable Input<GroupSubjectArgs> group,
        Input<String> kind,
        @Nullable Input<ServiceAccountSubjectArgs> serviceAccount,
        @Nullable Input<UserSubjectArgs> user) {
        this.group = group;
        this.kind = Objects.requireNonNull(kind, "expected parameter 'kind' to be non-null");
        this.serviceAccount = serviceAccount;
        this.user = user;
    }

    private SubjectArgs() {
        this.group = Input.empty();
        this.kind = Input.empty();
        this.serviceAccount = Input.empty();
        this.user = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SubjectArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<GroupSubjectArgs> group;
        private Input<String> kind;
        private @Nullable Input<ServiceAccountSubjectArgs> serviceAccount;
        private @Nullable Input<UserSubjectArgs> user;

        public Builder() {
    	      // Empty
        }

        public Builder(SubjectArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.group = defaults.group;
    	      this.kind = defaults.kind;
    	      this.serviceAccount = defaults.serviceAccount;
    	      this.user = defaults.user;
        }

        public Builder group(@Nullable Input<GroupSubjectArgs> group) {
            this.group = group;
            return this;
        }

        public Builder group(@Nullable GroupSubjectArgs group) {
            this.group = Input.ofNullable(group);
            return this;
        }

        public Builder kind(Input<String> kind) {
            this.kind = Objects.requireNonNull(kind);
            return this;
        }

        public Builder kind(String kind) {
            this.kind = Input.of(Objects.requireNonNull(kind));
            return this;
        }

        public Builder serviceAccount(@Nullable Input<ServiceAccountSubjectArgs> serviceAccount) {
            this.serviceAccount = serviceAccount;
            return this;
        }

        public Builder serviceAccount(@Nullable ServiceAccountSubjectArgs serviceAccount) {
            this.serviceAccount = Input.ofNullable(serviceAccount);
            return this;
        }

        public Builder user(@Nullable Input<UserSubjectArgs> user) {
            this.user = user;
            return this;
        }

        public Builder user(@Nullable UserSubjectArgs user) {
            this.user = Input.ofNullable(user);
            return this;
        }
        public SubjectArgs build() {
            return new SubjectArgs(group, kind, serviceAccount, user);
        }
    }
}
