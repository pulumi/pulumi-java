// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.kubernetes.core_v1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.kubernetes.meta_v1.inputs.LabelSelectorArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
 * 
 */
public final class PodAffinityTermArgs extends io.pulumi.resources.ResourceArgs {

    public static final PodAffinityTermArgs Empty = new PodAffinityTermArgs();

    /**
     * A label query over a set of resources, in this case pods.
     * 
     */
    @InputImport(name="labelSelector")
    private final @Nullable Input<LabelSelectorArgs> labelSelector;

    public Input<LabelSelectorArgs> getLabelSelector() {
        return this.labelSelector == null ? Input.empty() : this.labelSelector;
    }

    /**
     * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
     * 
     */
    @InputImport(name="namespaceSelector")
    private final @Nullable Input<LabelSelectorArgs> namespaceSelector;

    public Input<LabelSelectorArgs> getNamespaceSelector() {
        return this.namespaceSelector == null ? Input.empty() : this.namespaceSelector;
    }

    /**
     * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace"
     * 
     */
    @InputImport(name="namespaces")
    private final @Nullable Input<List<String>> namespaces;

    public Input<List<String>> getNamespaces() {
        return this.namespaces == null ? Input.empty() : this.namespaces;
    }

    /**
     * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
     * 
     */
    @InputImport(name="topologyKey", required=true)
    private final Input<String> topologyKey;

    public Input<String> getTopologyKey() {
        return this.topologyKey;
    }

    public PodAffinityTermArgs(
        @Nullable Input<LabelSelectorArgs> labelSelector,
        @Nullable Input<LabelSelectorArgs> namespaceSelector,
        @Nullable Input<List<String>> namespaces,
        Input<String> topologyKey) {
        this.labelSelector = labelSelector;
        this.namespaceSelector = namespaceSelector;
        this.namespaces = namespaces;
        this.topologyKey = Objects.requireNonNull(topologyKey, "expected parameter 'topologyKey' to be non-null");
    }

    private PodAffinityTermArgs() {
        this.labelSelector = Input.empty();
        this.namespaceSelector = Input.empty();
        this.namespaces = Input.empty();
        this.topologyKey = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PodAffinityTermArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<LabelSelectorArgs> labelSelector;
        private @Nullable Input<LabelSelectorArgs> namespaceSelector;
        private @Nullable Input<List<String>> namespaces;
        private Input<String> topologyKey;

        public Builder() {
    	      // Empty
        }

        public Builder(PodAffinityTermArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.labelSelector = defaults.labelSelector;
    	      this.namespaceSelector = defaults.namespaceSelector;
    	      this.namespaces = defaults.namespaces;
    	      this.topologyKey = defaults.topologyKey;
        }

        public Builder setLabelSelector(@Nullable Input<LabelSelectorArgs> labelSelector) {
            this.labelSelector = labelSelector;
            return this;
        }

        public Builder setLabelSelector(@Nullable LabelSelectorArgs labelSelector) {
            this.labelSelector = Input.ofNullable(labelSelector);
            return this;
        }

        public Builder setNamespaceSelector(@Nullable Input<LabelSelectorArgs> namespaceSelector) {
            this.namespaceSelector = namespaceSelector;
            return this;
        }

        public Builder setNamespaceSelector(@Nullable LabelSelectorArgs namespaceSelector) {
            this.namespaceSelector = Input.ofNullable(namespaceSelector);
            return this;
        }

        public Builder setNamespaces(@Nullable Input<List<String>> namespaces) {
            this.namespaces = namespaces;
            return this;
        }

        public Builder setNamespaces(@Nullable List<String> namespaces) {
            this.namespaces = Input.ofNullable(namespaces);
            return this;
        }

        public Builder setTopologyKey(Input<String> topologyKey) {
            this.topologyKey = Objects.requireNonNull(topologyKey);
            return this;
        }

        public Builder setTopologyKey(String topologyKey) {
            this.topologyKey = Input.of(Objects.requireNonNull(topologyKey));
            return this;
        }

        public PodAffinityTermArgs build() {
            return new PodAffinityTermArgs(labelSelector, namespaceSelector, namespaces, topologyKey);
        }
    }
}
