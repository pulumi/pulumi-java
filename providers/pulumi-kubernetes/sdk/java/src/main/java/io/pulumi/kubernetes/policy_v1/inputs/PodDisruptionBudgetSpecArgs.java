// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.kubernetes.policy_v1.inputs;

import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.kubernetes.meta_v1.inputs.LabelSelectorArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * PodDisruptionBudgetSpec is a description of a PodDisruptionBudget.
 * 
 */
public final class PodDisruptionBudgetSpecArgs extends io.pulumi.resources.ResourceArgs {

    public static final PodDisruptionBudgetSpecArgs Empty = new PodDisruptionBudgetSpecArgs();

    /**
     * An eviction is allowed if at most "maxUnavailable" pods selected by "selector" are unavailable after the eviction, i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions by specifying 0. This is a mutually exclusive setting with "minAvailable".
     * 
     */
    @Import(name="maxUnavailable")
      private final @Nullable Output<Either<Integer,String>> maxUnavailable;

    public Output<Either<Integer,String>> getMaxUnavailable() {
        return this.maxUnavailable == null ? Output.empty() : this.maxUnavailable;
    }

    /**
     * An eviction is allowed if at least "minAvailable" pods selected by "selector" will still be available after the eviction, i.e. even in the absence of the evicted pod.  So for example you can prevent all voluntary evictions by specifying "100%".
     * 
     */
    @Import(name="minAvailable")
      private final @Nullable Output<Either<Integer,String>> minAvailable;

    public Output<Either<Integer,String>> getMinAvailable() {
        return this.minAvailable == null ? Output.empty() : this.minAvailable;
    }

    /**
     * Label query over pods whose evictions are managed by the disruption budget. A null selector will match no pods, while an empty ({}) selector will select all pods within the namespace.
     * 
     */
    @Import(name="selector")
      private final @Nullable Output<LabelSelectorArgs> selector;

    public Output<LabelSelectorArgs> getSelector() {
        return this.selector == null ? Output.empty() : this.selector;
    }

    public PodDisruptionBudgetSpecArgs(
        @Nullable Output<Either<Integer,String>> maxUnavailable,
        @Nullable Output<Either<Integer,String>> minAvailable,
        @Nullable Output<LabelSelectorArgs> selector) {
        this.maxUnavailable = maxUnavailable;
        this.minAvailable = minAvailable;
        this.selector = selector;
    }

    private PodDisruptionBudgetSpecArgs() {
        this.maxUnavailable = Output.empty();
        this.minAvailable = Output.empty();
        this.selector = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PodDisruptionBudgetSpecArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Either<Integer,String>> maxUnavailable;
        private @Nullable Output<Either<Integer,String>> minAvailable;
        private @Nullable Output<LabelSelectorArgs> selector;

        public Builder() {
    	      // Empty
        }

        public Builder(PodDisruptionBudgetSpecArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.maxUnavailable = defaults.maxUnavailable;
    	      this.minAvailable = defaults.minAvailable;
    	      this.selector = defaults.selector;
        }

        public Builder maxUnavailable(@Nullable Output<Either<Integer,String>> maxUnavailable) {
            this.maxUnavailable = maxUnavailable;
            return this;
        }
        public Builder maxUnavailable(@Nullable Either<Integer,String> maxUnavailable) {
            this.maxUnavailable = Output.ofNullable(maxUnavailable);
            return this;
        }
        public Builder minAvailable(@Nullable Output<Either<Integer,String>> minAvailable) {
            this.minAvailable = minAvailable;
            return this;
        }
        public Builder minAvailable(@Nullable Either<Integer,String> minAvailable) {
            this.minAvailable = Output.ofNullable(minAvailable);
            return this;
        }
        public Builder selector(@Nullable Output<LabelSelectorArgs> selector) {
            this.selector = selector;
            return this;
        }
        public Builder selector(@Nullable LabelSelectorArgs selector) {
            this.selector = Output.ofNullable(selector);
            return this;
        }        public PodDisruptionBudgetSpecArgs build() {
            return new PodDisruptionBudgetSpecArgs(maxUnavailable, minAvailable, selector);
        }
    }
}
