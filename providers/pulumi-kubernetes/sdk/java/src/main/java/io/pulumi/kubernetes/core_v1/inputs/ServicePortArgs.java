// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.kubernetes.core_v1.inputs;

import io.pulumi.core.Either;
import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ServicePortArgs extends io.pulumi.resources.ResourceArgs {

    public static final ServicePortArgs Empty = new ServicePortArgs();

    @InputImport(name="appProtocol")
    private final @Nullable Input<String> appProtocol;

    public Input<String> getAppProtocol() {
        return this.appProtocol == null ? Input.empty() : this.appProtocol;
    }

    @InputImport(name="name")
    private final @Nullable Input<String> name;

    public Input<String> getName() {
        return this.name == null ? Input.empty() : this.name;
    }

    @InputImport(name="nodePort")
    private final @Nullable Input<Integer> nodePort;

    public Input<Integer> getNodePort() {
        return this.nodePort == null ? Input.empty() : this.nodePort;
    }

    @InputImport(name="port", required=true)
    private final Input<Integer> port;

    public Input<Integer> getPort() {
        return this.port;
    }

    @InputImport(name="protocol")
    private final @Nullable Input<String> protocol;

    public Input<String> getProtocol() {
        return this.protocol == null ? Input.empty() : this.protocol;
    }

    @InputImport(name="targetPort")
    private final @Nullable Input<Either<Integer,String>> targetPort;

    public Input<Either<Integer,String>> getTargetPort() {
        return this.targetPort == null ? Input.empty() : this.targetPort;
    }

    public ServicePortArgs(
        @Nullable Input<String> appProtocol,
        @Nullable Input<String> name,
        @Nullable Input<Integer> nodePort,
        Input<Integer> port,
        @Nullable Input<String> protocol,
        @Nullable Input<Either<Integer,String>> targetPort) {
        this.appProtocol = appProtocol;
        this.name = name;
        this.nodePort = nodePort;
        this.port = Objects.requireNonNull(port, "expected parameter 'port' to be non-null");
        this.protocol = protocol;
        this.targetPort = targetPort;
    }

    private ServicePortArgs() {
        this.appProtocol = Input.empty();
        this.name = Input.empty();
        this.nodePort = Input.empty();
        this.port = Input.empty();
        this.protocol = Input.empty();
        this.targetPort = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServicePortArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> appProtocol;
        private @Nullable Input<String> name;
        private @Nullable Input<Integer> nodePort;
        private Input<Integer> port;
        private @Nullable Input<String> protocol;
        private @Nullable Input<Either<Integer,String>> targetPort;

        public Builder() {
    	      // Empty
        }

        public Builder(ServicePortArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appProtocol = defaults.appProtocol;
    	      this.name = defaults.name;
    	      this.nodePort = defaults.nodePort;
    	      this.port = defaults.port;
    	      this.protocol = defaults.protocol;
    	      this.targetPort = defaults.targetPort;
        }

        public Builder setAppProtocol(@Nullable Input<String> appProtocol) {
            this.appProtocol = appProtocol;
            return this;
        }

        public Builder setAppProtocol(@Nullable String appProtocol) {
            this.appProtocol = Input.ofNullable(appProtocol);
            return this;
        }

        public Builder setName(@Nullable Input<String> name) {
            this.name = name;
            return this;
        }

        public Builder setName(@Nullable String name) {
            this.name = Input.ofNullable(name);
            return this;
        }

        public Builder setNodePort(@Nullable Input<Integer> nodePort) {
            this.nodePort = nodePort;
            return this;
        }

        public Builder setNodePort(@Nullable Integer nodePort) {
            this.nodePort = Input.ofNullable(nodePort);
            return this;
        }

        public Builder setPort(Input<Integer> port) {
            this.port = Objects.requireNonNull(port);
            return this;
        }

        public Builder setPort(Integer port) {
            this.port = Input.of(Objects.requireNonNull(port));
            return this;
        }

        public Builder setProtocol(@Nullable Input<String> protocol) {
            this.protocol = protocol;
            return this;
        }

        public Builder setProtocol(@Nullable String protocol) {
            this.protocol = Input.ofNullable(protocol);
            return this;
        }

        public Builder setTargetPort(@Nullable Input<Either<Integer,String>> targetPort) {
            this.targetPort = targetPort;
            return this;
        }

        public Builder setTargetPort(@Nullable Either<Integer,String> targetPort) {
            this.targetPort = Input.ofNullable(targetPort);
            return this;
        }

        public ServicePortArgs build() {
            return new ServicePortArgs(appProtocol, name, nodePort, port, protocol, targetPort);
        }
    }
}
