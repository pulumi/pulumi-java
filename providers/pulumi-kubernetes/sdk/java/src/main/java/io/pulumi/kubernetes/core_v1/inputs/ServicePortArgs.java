// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.kubernetes.core_v1.inputs;

import io.pulumi.core.Either;
import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * ServicePort contains information on service's port.
 * 
 */
public final class ServicePortArgs extends io.pulumi.resources.ResourceArgs {

    public static final ServicePortArgs Empty = new ServicePortArgs();

    /**
     * The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol.
     * 
     */
    @Import(name="appProtocol")
      private final @Nullable Output<String> appProtocol;

    public Output<String> getAppProtocol() {
        return this.appProtocol == null ? Output.empty() : this.appProtocol;
    }

    /**
     * The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
     * 
     */
    @Import(name="name")
      private final @Nullable Output<String> name;

    public Output<String> getName() {
        return this.name == null ? Output.empty() : this.name;
    }

    /**
     * The port on each node on which this service is exposed when type is NodePort or LoadBalancer.  Usually assigned by the system. If a value is specified, in-range, and not in use it will be used, otherwise the operation will fail.  If not specified, a port will be allocated if this Service requires one.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type from NodePort to ClusterIP). More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
     * 
     */
    @Import(name="nodePort")
      private final @Nullable Output<Integer> nodePort;

    public Output<Integer> getNodePort() {
        return this.nodePort == null ? Output.empty() : this.nodePort;
    }

    /**
     * The port that will be exposed by this service.
     * 
     */
    @Import(name="port", required=true)
      private final Output<Integer> port;

    public Output<Integer> getPort() {
        return this.port;
    }

    /**
     * The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
     * 
     * Possible enum values:
     *  - `"SCTP"` is the SCTP protocol.
     *  - `"TCP"` is the TCP protocol.
     *  - `"UDP"` is the UDP protocol.
     * 
     */
    @Import(name="protocol")
      private final @Nullable Output<String> protocol;

    public Output<String> getProtocol() {
        return this.protocol == null ? Output.empty() : this.protocol;
    }

    /**
     * Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
     * 
     */
    @Import(name="targetPort")
      private final @Nullable Output<Either<Integer,String>> targetPort;

    public Output<Either<Integer,String>> getTargetPort() {
        return this.targetPort == null ? Output.empty() : this.targetPort;
    }

    public ServicePortArgs(
        @Nullable Output<String> appProtocol,
        @Nullable Output<String> name,
        @Nullable Output<Integer> nodePort,
        Output<Integer> port,
        @Nullable Output<String> protocol,
        @Nullable Output<Either<Integer,String>> targetPort) {
        this.appProtocol = appProtocol;
        this.name = name;
        this.nodePort = nodePort;
        this.port = Objects.requireNonNull(port, "expected parameter 'port' to be non-null");
        this.protocol = protocol;
        this.targetPort = targetPort;
    }

    private ServicePortArgs() {
        this.appProtocol = Output.empty();
        this.name = Output.empty();
        this.nodePort = Output.empty();
        this.port = Output.empty();
        this.protocol = Output.empty();
        this.targetPort = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServicePortArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> appProtocol;
        private @Nullable Output<String> name;
        private @Nullable Output<Integer> nodePort;
        private Output<Integer> port;
        private @Nullable Output<String> protocol;
        private @Nullable Output<Either<Integer,String>> targetPort;

        public Builder() {
    	      // Empty
        }

        public Builder(ServicePortArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appProtocol = defaults.appProtocol;
    	      this.name = defaults.name;
    	      this.nodePort = defaults.nodePort;
    	      this.port = defaults.port;
    	      this.protocol = defaults.protocol;
    	      this.targetPort = defaults.targetPort;
        }

        public Builder appProtocol(@Nullable Output<String> appProtocol) {
            this.appProtocol = appProtocol;
            return this;
        }
        public Builder appProtocol(@Nullable String appProtocol) {
            this.appProtocol = Output.ofNullable(appProtocol);
            return this;
        }
        public Builder name(@Nullable Output<String> name) {
            this.name = name;
            return this;
        }
        public Builder name(@Nullable String name) {
            this.name = Output.ofNullable(name);
            return this;
        }
        public Builder nodePort(@Nullable Output<Integer> nodePort) {
            this.nodePort = nodePort;
            return this;
        }
        public Builder nodePort(@Nullable Integer nodePort) {
            this.nodePort = Output.ofNullable(nodePort);
            return this;
        }
        public Builder port(Output<Integer> port) {
            this.port = Objects.requireNonNull(port);
            return this;
        }
        public Builder port(Integer port) {
            this.port = Output.of(Objects.requireNonNull(port));
            return this;
        }
        public Builder protocol(@Nullable Output<String> protocol) {
            this.protocol = protocol;
            return this;
        }
        public Builder protocol(@Nullable String protocol) {
            this.protocol = Output.ofNullable(protocol);
            return this;
        }
        public Builder targetPort(@Nullable Output<Either<Integer,String>> targetPort) {
            this.targetPort = targetPort;
            return this;
        }
        public Builder targetPort(@Nullable Either<Integer,String> targetPort) {
            this.targetPort = Output.ofNullable(targetPort);
            return this;
        }        public ServicePortArgs build() {
            return new ServicePortArgs(appProtocol, name, nodePort, port, protocol, targetPort);
        }
    }
}
