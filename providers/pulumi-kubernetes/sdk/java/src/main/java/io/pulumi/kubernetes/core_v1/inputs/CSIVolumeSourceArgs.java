// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.kubernetes.core_v1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.kubernetes.core_v1.inputs.LocalObjectReferenceArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Represents a source location of a volume to mount, managed by an external CSI driver
 * 
 */
public final class CSIVolumeSourceArgs extends io.pulumi.resources.ResourceArgs {

    public static final CSIVolumeSourceArgs Empty = new CSIVolumeSourceArgs();

    /**
     * Driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
     * 
     */
    @InputImport(name="driver", required=true)
        private final Input<String> driver;

    public Input<String> getDriver() {
        return this.driver;
    }

    /**
     * Filesystem type to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
     * 
     */
    @InputImport(name="fsType")
        private final @Nullable Input<String> fsType;

    public Input<String> getFsType() {
        return this.fsType == null ? Input.empty() : this.fsType;
    }

    /**
     * NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
     * 
     */
    @InputImport(name="nodePublishSecretRef")
        private final @Nullable Input<LocalObjectReferenceArgs> nodePublishSecretRef;

    public Input<LocalObjectReferenceArgs> getNodePublishSecretRef() {
        return this.nodePublishSecretRef == null ? Input.empty() : this.nodePublishSecretRef;
    }

    /**
     * Specifies a read-only configuration for the volume. Defaults to false (read/write).
     * 
     */
    @InputImport(name="readOnly")
        private final @Nullable Input<Boolean> readOnly;

    public Input<Boolean> getReadOnly() {
        return this.readOnly == null ? Input.empty() : this.readOnly;
    }

    /**
     * VolumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
     * 
     */
    @InputImport(name="volumeAttributes")
        private final @Nullable Input<Map<String,String>> volumeAttributes;

    public Input<Map<String,String>> getVolumeAttributes() {
        return this.volumeAttributes == null ? Input.empty() : this.volumeAttributes;
    }

    public CSIVolumeSourceArgs(
        Input<String> driver,
        @Nullable Input<String> fsType,
        @Nullable Input<LocalObjectReferenceArgs> nodePublishSecretRef,
        @Nullable Input<Boolean> readOnly,
        @Nullable Input<Map<String,String>> volumeAttributes) {
        this.driver = Objects.requireNonNull(driver, "expected parameter 'driver' to be non-null");
        this.fsType = fsType;
        this.nodePublishSecretRef = nodePublishSecretRef;
        this.readOnly = readOnly;
        this.volumeAttributes = volumeAttributes;
    }

    private CSIVolumeSourceArgs() {
        this.driver = Input.empty();
        this.fsType = Input.empty();
        this.nodePublishSecretRef = Input.empty();
        this.readOnly = Input.empty();
        this.volumeAttributes = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CSIVolumeSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<String> driver;
        private @Nullable Input<String> fsType;
        private @Nullable Input<LocalObjectReferenceArgs> nodePublishSecretRef;
        private @Nullable Input<Boolean> readOnly;
        private @Nullable Input<Map<String,String>> volumeAttributes;

        public Builder() {
    	      // Empty
        }

        public Builder(CSIVolumeSourceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.driver = defaults.driver;
    	      this.fsType = defaults.fsType;
    	      this.nodePublishSecretRef = defaults.nodePublishSecretRef;
    	      this.readOnly = defaults.readOnly;
    	      this.volumeAttributes = defaults.volumeAttributes;
        }

        public Builder setDriver(Input<String> driver) {
            this.driver = Objects.requireNonNull(driver);
            return this;
        }

        public Builder setDriver(String driver) {
            this.driver = Input.of(Objects.requireNonNull(driver));
            return this;
        }

        public Builder setFsType(@Nullable Input<String> fsType) {
            this.fsType = fsType;
            return this;
        }

        public Builder setFsType(@Nullable String fsType) {
            this.fsType = Input.ofNullable(fsType);
            return this;
        }

        public Builder setNodePublishSecretRef(@Nullable Input<LocalObjectReferenceArgs> nodePublishSecretRef) {
            this.nodePublishSecretRef = nodePublishSecretRef;
            return this;
        }

        public Builder setNodePublishSecretRef(@Nullable LocalObjectReferenceArgs nodePublishSecretRef) {
            this.nodePublishSecretRef = Input.ofNullable(nodePublishSecretRef);
            return this;
        }

        public Builder setReadOnly(@Nullable Input<Boolean> readOnly) {
            this.readOnly = readOnly;
            return this;
        }

        public Builder setReadOnly(@Nullable Boolean readOnly) {
            this.readOnly = Input.ofNullable(readOnly);
            return this;
        }

        public Builder setVolumeAttributes(@Nullable Input<Map<String,String>> volumeAttributes) {
            this.volumeAttributes = volumeAttributes;
            return this;
        }

        public Builder setVolumeAttributes(@Nullable Map<String,String> volumeAttributes) {
            this.volumeAttributes = Input.ofNullable(volumeAttributes);
            return this;
        }
        public CSIVolumeSourceArgs build() {
            return new CSIVolumeSourceArgs(driver, fsType, nodePublishSecretRef, readOnly, volumeAttributes);
        }
    }
}
