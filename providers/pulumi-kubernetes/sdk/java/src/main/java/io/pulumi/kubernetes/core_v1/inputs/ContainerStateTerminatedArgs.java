// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.kubernetes.core_v1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * ContainerStateTerminated is a terminated state of a container.
 * 
 */
public final class ContainerStateTerminatedArgs extends io.pulumi.resources.ResourceArgs {

    public static final ContainerStateTerminatedArgs Empty = new ContainerStateTerminatedArgs();

    /**
     * Container's ID in the format 'docker://<container_id>'
     * 
     */
    @Import(name="containerID")
      private final @Nullable Output<String> containerID;

    public Output<String> getContainerID() {
        return this.containerID == null ? Output.empty() : this.containerID;
    }

    /**
     * Exit status from the last termination of the container
     * 
     */
    @Import(name="exitCode", required=true)
      private final Output<Integer> exitCode;

    public Output<Integer> getExitCode() {
        return this.exitCode;
    }

    /**
     * Time at which the container last terminated
     * 
     */
    @Import(name="finishedAt")
      private final @Nullable Output<String> finishedAt;

    public Output<String> getFinishedAt() {
        return this.finishedAt == null ? Output.empty() : this.finishedAt;
    }

    /**
     * Message regarding the last termination of the container
     * 
     */
    @Import(name="message")
      private final @Nullable Output<String> message;

    public Output<String> getMessage() {
        return this.message == null ? Output.empty() : this.message;
    }

    /**
     * (brief) reason from the last termination of the container
     * 
     */
    @Import(name="reason")
      private final @Nullable Output<String> reason;

    public Output<String> getReason() {
        return this.reason == null ? Output.empty() : this.reason;
    }

    /**
     * Signal from the last termination of the container
     * 
     */
    @Import(name="signal")
      private final @Nullable Output<Integer> signal;

    public Output<Integer> getSignal() {
        return this.signal == null ? Output.empty() : this.signal;
    }

    /**
     * Time at which previous execution of the container started
     * 
     */
    @Import(name="startedAt")
      private final @Nullable Output<String> startedAt;

    public Output<String> getStartedAt() {
        return this.startedAt == null ? Output.empty() : this.startedAt;
    }

    public ContainerStateTerminatedArgs(
        @Nullable Output<String> containerID,
        Output<Integer> exitCode,
        @Nullable Output<String> finishedAt,
        @Nullable Output<String> message,
        @Nullable Output<String> reason,
        @Nullable Output<Integer> signal,
        @Nullable Output<String> startedAt) {
        this.containerID = containerID;
        this.exitCode = Objects.requireNonNull(exitCode, "expected parameter 'exitCode' to be non-null");
        this.finishedAt = finishedAt;
        this.message = message;
        this.reason = reason;
        this.signal = signal;
        this.startedAt = startedAt;
    }

    private ContainerStateTerminatedArgs() {
        this.containerID = Output.empty();
        this.exitCode = Output.empty();
        this.finishedAt = Output.empty();
        this.message = Output.empty();
        this.reason = Output.empty();
        this.signal = Output.empty();
        this.startedAt = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ContainerStateTerminatedArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> containerID;
        private Output<Integer> exitCode;
        private @Nullable Output<String> finishedAt;
        private @Nullable Output<String> message;
        private @Nullable Output<String> reason;
        private @Nullable Output<Integer> signal;
        private @Nullable Output<String> startedAt;

        public Builder() {
    	      // Empty
        }

        public Builder(ContainerStateTerminatedArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.containerID = defaults.containerID;
    	      this.exitCode = defaults.exitCode;
    	      this.finishedAt = defaults.finishedAt;
    	      this.message = defaults.message;
    	      this.reason = defaults.reason;
    	      this.signal = defaults.signal;
    	      this.startedAt = defaults.startedAt;
        }

        public Builder containerID(@Nullable Output<String> containerID) {
            this.containerID = containerID;
            return this;
        }

        public Builder containerID(@Nullable String containerID) {
            this.containerID = Output.ofNullable(containerID);
            return this;
        }

        public Builder exitCode(Output<Integer> exitCode) {
            this.exitCode = Objects.requireNonNull(exitCode);
            return this;
        }

        public Builder exitCode(Integer exitCode) {
            this.exitCode = Output.of(Objects.requireNonNull(exitCode));
            return this;
        }

        public Builder finishedAt(@Nullable Output<String> finishedAt) {
            this.finishedAt = finishedAt;
            return this;
        }

        public Builder finishedAt(@Nullable String finishedAt) {
            this.finishedAt = Output.ofNullable(finishedAt);
            return this;
        }

        public Builder message(@Nullable Output<String> message) {
            this.message = message;
            return this;
        }

        public Builder message(@Nullable String message) {
            this.message = Output.ofNullable(message);
            return this;
        }

        public Builder reason(@Nullable Output<String> reason) {
            this.reason = reason;
            return this;
        }

        public Builder reason(@Nullable String reason) {
            this.reason = Output.ofNullable(reason);
            return this;
        }

        public Builder signal(@Nullable Output<Integer> signal) {
            this.signal = signal;
            return this;
        }

        public Builder signal(@Nullable Integer signal) {
            this.signal = Output.ofNullable(signal);
            return this;
        }

        public Builder startedAt(@Nullable Output<String> startedAt) {
            this.startedAt = startedAt;
            return this;
        }

        public Builder startedAt(@Nullable String startedAt) {
            this.startedAt = Output.ofNullable(startedAt);
            return this;
        }
        public ContainerStateTerminatedArgs build() {
            return new ContainerStateTerminatedArgs(containerID, exitCode, finishedAt, message, reason, signal, startedAt);
        }
    }
}
