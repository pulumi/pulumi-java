// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.kubernetes.core_v1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.internal.annotations.InputImport;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


public final class ContainerStateTerminatedArgs extends io.pulumi.resources.ResourceArgs {

    public static final ContainerStateTerminatedArgs Empty = new ContainerStateTerminatedArgs();

    @InputImport(name="containerID")
    private final @Nullable Input<String> containerID;

    public Input<String> getContainerID() {
        return this.containerID == null ? Input.empty() : this.containerID;
    }

    @InputImport(name="exitCode", required=true)
    private final Input<Integer> exitCode;

    public Input<Integer> getExitCode() {
        return this.exitCode;
    }

    @InputImport(name="finishedAt")
    private final @Nullable Input<String> finishedAt;

    public Input<String> getFinishedAt() {
        return this.finishedAt == null ? Input.empty() : this.finishedAt;
    }

    @InputImport(name="message")
    private final @Nullable Input<String> message;

    public Input<String> getMessage() {
        return this.message == null ? Input.empty() : this.message;
    }

    @InputImport(name="reason")
    private final @Nullable Input<String> reason;

    public Input<String> getReason() {
        return this.reason == null ? Input.empty() : this.reason;
    }

    @InputImport(name="signal")
    private final @Nullable Input<Integer> signal;

    public Input<Integer> getSignal() {
        return this.signal == null ? Input.empty() : this.signal;
    }

    @InputImport(name="startedAt")
    private final @Nullable Input<String> startedAt;

    public Input<String> getStartedAt() {
        return this.startedAt == null ? Input.empty() : this.startedAt;
    }

    public ContainerStateTerminatedArgs(
        @Nullable Input<String> containerID,
        Input<Integer> exitCode,
        @Nullable Input<String> finishedAt,
        @Nullable Input<String> message,
        @Nullable Input<String> reason,
        @Nullable Input<Integer> signal,
        @Nullable Input<String> startedAt) {
        this.containerID = containerID;
        this.exitCode = Objects.requireNonNull(exitCode, "expected parameter 'exitCode' to be non-null");
        this.finishedAt = finishedAt;
        this.message = message;
        this.reason = reason;
        this.signal = signal;
        this.startedAt = startedAt;
    }

    private ContainerStateTerminatedArgs() {
        this.containerID = Input.empty();
        this.exitCode = Input.empty();
        this.finishedAt = Input.empty();
        this.message = Input.empty();
        this.reason = Input.empty();
        this.signal = Input.empty();
        this.startedAt = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ContainerStateTerminatedArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> containerID;
        private Input<Integer> exitCode;
        private @Nullable Input<String> finishedAt;
        private @Nullable Input<String> message;
        private @Nullable Input<String> reason;
        private @Nullable Input<Integer> signal;
        private @Nullable Input<String> startedAt;

        public Builder() {
    	      // Empty
        }

        public Builder(ContainerStateTerminatedArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.containerID = defaults.containerID;
    	      this.exitCode = defaults.exitCode;
    	      this.finishedAt = defaults.finishedAt;
    	      this.message = defaults.message;
    	      this.reason = defaults.reason;
    	      this.signal = defaults.signal;
    	      this.startedAt = defaults.startedAt;
        }

        public Builder setContainerID(@Nullable Input<String> containerID) {
            this.containerID = containerID;
            return this;
        }

        public Builder setContainerID(@Nullable String containerID) {
            this.containerID = Input.ofNullable(containerID);
            return this;
        }

        public Builder setExitCode(Input<Integer> exitCode) {
            this.exitCode = Objects.requireNonNull(exitCode);
            return this;
        }

        public Builder setExitCode(Integer exitCode) {
            this.exitCode = Input.of(Objects.requireNonNull(exitCode));
            return this;
        }

        public Builder setFinishedAt(@Nullable Input<String> finishedAt) {
            this.finishedAt = finishedAt;
            return this;
        }

        public Builder setFinishedAt(@Nullable String finishedAt) {
            this.finishedAt = Input.ofNullable(finishedAt);
            return this;
        }

        public Builder setMessage(@Nullable Input<String> message) {
            this.message = message;
            return this;
        }

        public Builder setMessage(@Nullable String message) {
            this.message = Input.ofNullable(message);
            return this;
        }

        public Builder setReason(@Nullable Input<String> reason) {
            this.reason = reason;
            return this;
        }

        public Builder setReason(@Nullable String reason) {
            this.reason = Input.ofNullable(reason);
            return this;
        }

        public Builder setSignal(@Nullable Input<Integer> signal) {
            this.signal = signal;
            return this;
        }

        public Builder setSignal(@Nullable Integer signal) {
            this.signal = Input.ofNullable(signal);
            return this;
        }

        public Builder setStartedAt(@Nullable Input<String> startedAt) {
            this.startedAt = startedAt;
            return this;
        }

        public Builder setStartedAt(@Nullable String startedAt) {
            this.startedAt = Input.ofNullable(startedAt);
            return this;
        }

        public ContainerStateTerminatedArgs build() {
            return new ContainerStateTerminatedArgs(containerID, exitCode, finishedAt, message, reason, signal, startedAt);
        }
    }
}
