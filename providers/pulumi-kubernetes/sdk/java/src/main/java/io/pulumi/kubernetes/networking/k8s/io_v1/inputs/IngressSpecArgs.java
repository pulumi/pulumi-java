// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.kubernetes.networking.k8s.io_v1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.kubernetes.networking.k8s.io_v1.inputs.IngressBackendArgs;
import io.pulumi.kubernetes.networking.k8s.io_v1.inputs.IngressRuleArgs;
import io.pulumi.kubernetes.networking.k8s.io_v1.inputs.IngressTLSArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * IngressSpec describes the Ingress the user wishes to exist.
 * 
 */
public final class IngressSpecArgs extends io.pulumi.resources.ResourceArgs {

    public static final IngressSpecArgs Empty = new IngressSpecArgs();

    /**
     * DefaultBackend is the backend that should handle requests that don't match any rule. If Rules are not specified, DefaultBackend must be specified. If DefaultBackend is not set, the handling of requests that do not match any of the rules will be up to the Ingress controller.
     * 
     */
    @InputImport(name="defaultBackend")
      private final @Nullable Output<IngressBackendArgs> defaultBackend;

    public Output<IngressBackendArgs> getDefaultBackend() {
        return this.defaultBackend == null ? Output.empty() : this.defaultBackend;
    }

    /**
     * IngressClassName is the name of the IngressClass cluster resource. The associated IngressClass defines which controller will implement the resource. This replaces the deprecated `kubernetes.io/ingress.class` annotation. For backwards compatibility, when that annotation is set, it must be given precedence over this field. The controller may emit a warning if the field and annotation have different values. Implementations of this API should ignore Ingresses without a class specified. An IngressClass resource may be marked as default, which can be used to set a default value for this field. For more information, refer to the IngressClass documentation.
     * 
     */
    @InputImport(name="ingressClassName")
      private final @Nullable Output<String> ingressClassName;

    public Output<String> getIngressClassName() {
        return this.ingressClassName == null ? Output.empty() : this.ingressClassName;
    }

    /**
     * A list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend.
     * 
     */
    @InputImport(name="rules")
      private final @Nullable Output<List<IngressRuleArgs>> rules;

    public Output<List<IngressRuleArgs>> getRules() {
        return this.rules == null ? Output.empty() : this.rules;
    }

    /**
     * TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.
     * 
     */
    @InputImport(name="tls")
      private final @Nullable Output<List<IngressTLSArgs>> tls;

    public Output<List<IngressTLSArgs>> getTls() {
        return this.tls == null ? Output.empty() : this.tls;
    }

    public IngressSpecArgs(
        @Nullable Output<IngressBackendArgs> defaultBackend,
        @Nullable Output<String> ingressClassName,
        @Nullable Output<List<IngressRuleArgs>> rules,
        @Nullable Output<List<IngressTLSArgs>> tls) {
        this.defaultBackend = defaultBackend;
        this.ingressClassName = ingressClassName;
        this.rules = rules;
        this.tls = tls;
    }

    private IngressSpecArgs() {
        this.defaultBackend = Output.empty();
        this.ingressClassName = Output.empty();
        this.rules = Output.empty();
        this.tls = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(IngressSpecArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<IngressBackendArgs> defaultBackend;
        private @Nullable Output<String> ingressClassName;
        private @Nullable Output<List<IngressRuleArgs>> rules;
        private @Nullable Output<List<IngressTLSArgs>> tls;

        public Builder() {
    	      // Empty
        }

        public Builder(IngressSpecArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.defaultBackend = defaults.defaultBackend;
    	      this.ingressClassName = defaults.ingressClassName;
    	      this.rules = defaults.rules;
    	      this.tls = defaults.tls;
        }

        public Builder defaultBackend(@Nullable Output<IngressBackendArgs> defaultBackend) {
            this.defaultBackend = defaultBackend;
            return this;
        }

        public Builder defaultBackend(@Nullable IngressBackendArgs defaultBackend) {
            this.defaultBackend = Output.ofNullable(defaultBackend);
            return this;
        }

        public Builder ingressClassName(@Nullable Output<String> ingressClassName) {
            this.ingressClassName = ingressClassName;
            return this;
        }

        public Builder ingressClassName(@Nullable String ingressClassName) {
            this.ingressClassName = Output.ofNullable(ingressClassName);
            return this;
        }

        public Builder rules(@Nullable Output<List<IngressRuleArgs>> rules) {
            this.rules = rules;
            return this;
        }

        public Builder rules(@Nullable List<IngressRuleArgs> rules) {
            this.rules = Output.ofNullable(rules);
            return this;
        }

        public Builder tls(@Nullable Output<List<IngressTLSArgs>> tls) {
            this.tls = tls;
            return this;
        }

        public Builder tls(@Nullable List<IngressTLSArgs> tls) {
            this.tls = Output.ofNullable(tls);
            return this;
        }
        public IngressSpecArgs build() {
            return new IngressSpecArgs(defaultBackend, ingressClassName, rules, tls);
        }
    }
}
