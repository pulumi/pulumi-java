// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.kubernetes.storage.k8s.io_v1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.kubernetes.storage.k8s.io_v1.inputs.VolumeNodeResourcesArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * CSINodeDriver holds information about the specification of one CSI driver installed on a node
 * 
 */
public final class CSINodeDriverArgs extends io.pulumi.resources.ResourceArgs {

    public static final CSINodeDriverArgs Empty = new CSINodeDriverArgs();

    /**
     * allocatable represents the volume resources of a node that are available for scheduling. This field is beta.
     * 
     */
    @InputImport(name="allocatable")
      private final @Nullable Input<VolumeNodeResourcesArgs> allocatable;

    public Input<VolumeNodeResourcesArgs> getAllocatable() {
        return this.allocatable == null ? Input.empty() : this.allocatable;
    }

    /**
     * This is the name of the CSI driver that this object refers to. This MUST be the same name returned by the CSI GetPluginName() call for that driver.
     * 
     */
    @InputImport(name="name", required=true)
      private final Input<String> name;

    public Input<String> getName() {
        return this.name;
    }

    /**
     * nodeID of the node from the driver point of view. This field enables Kubernetes to communicate with storage systems that do not share the same nomenclature for nodes. For example, Kubernetes may refer to a given node as "node1", but the storage system may refer to the same node as "nodeA". When Kubernetes issues a command to the storage system to attach a volume to a specific node, it can use this field to refer to the node name using the ID that the storage system will understand, e.g. "nodeA" instead of "node1". This field is required.
     * 
     */
    @InputImport(name="nodeID", required=true)
      private final Input<String> nodeID;

    public Input<String> getNodeID() {
        return this.nodeID;
    }

    /**
     * topologyKeys is the list of keys supported by the driver. When a driver is initialized on a cluster, it provides a set of topology keys that it understands (e.g. "company.com/zone", "company.com/region"). When a driver is initialized on a node, it provides the same topology keys along with values. Kubelet will expose these topology keys as labels on its own node object. When Kubernetes does topology aware provisioning, it can use this list to determine which labels it should retrieve from the node object and pass back to the driver. It is possible for different nodes to use different topology keys. This can be empty if driver does not support topology.
     * 
     */
    @InputImport(name="topologyKeys")
      private final @Nullable Input<List<String>> topologyKeys;

    public Input<List<String>> getTopologyKeys() {
        return this.topologyKeys == null ? Input.empty() : this.topologyKeys;
    }

    public CSINodeDriverArgs(
        @Nullable Input<VolumeNodeResourcesArgs> allocatable,
        Input<String> name,
        Input<String> nodeID,
        @Nullable Input<List<String>> topologyKeys) {
        this.allocatable = allocatable;
        this.name = Objects.requireNonNull(name, "expected parameter 'name' to be non-null");
        this.nodeID = Objects.requireNonNull(nodeID, "expected parameter 'nodeID' to be non-null");
        this.topologyKeys = topologyKeys;
    }

    private CSINodeDriverArgs() {
        this.allocatable = Input.empty();
        this.name = Input.empty();
        this.nodeID = Input.empty();
        this.topologyKeys = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CSINodeDriverArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<VolumeNodeResourcesArgs> allocatable;
        private Input<String> name;
        private Input<String> nodeID;
        private @Nullable Input<List<String>> topologyKeys;

        public Builder() {
    	      // Empty
        }

        public Builder(CSINodeDriverArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allocatable = defaults.allocatable;
    	      this.name = defaults.name;
    	      this.nodeID = defaults.nodeID;
    	      this.topologyKeys = defaults.topologyKeys;
        }

        public Builder setAllocatable(@Nullable Input<VolumeNodeResourcesArgs> allocatable) {
            this.allocatable = allocatable;
            return this;
        }

        public Builder setAllocatable(@Nullable VolumeNodeResourcesArgs allocatable) {
            this.allocatable = Input.ofNullable(allocatable);
            return this;
        }

        public Builder setName(Input<String> name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }

        public Builder setName(String name) {
            this.name = Input.of(Objects.requireNonNull(name));
            return this;
        }

        public Builder setNodeID(Input<String> nodeID) {
            this.nodeID = Objects.requireNonNull(nodeID);
            return this;
        }

        public Builder setNodeID(String nodeID) {
            this.nodeID = Input.of(Objects.requireNonNull(nodeID));
            return this;
        }

        public Builder setTopologyKeys(@Nullable Input<List<String>> topologyKeys) {
            this.topologyKeys = topologyKeys;
            return this;
        }

        public Builder setTopologyKeys(@Nullable List<String> topologyKeys) {
            this.topologyKeys = Input.ofNullable(topologyKeys);
            return this;
        }
        public CSINodeDriverArgs build() {
            return new CSINodeDriverArgs(allocatable, name, nodeID, topologyKeys);
        }
    }
}
