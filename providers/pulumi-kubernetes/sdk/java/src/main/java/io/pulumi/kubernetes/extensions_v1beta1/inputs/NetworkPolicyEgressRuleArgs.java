// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.kubernetes.extensions_v1beta1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.kubernetes.extensions_v1beta1.inputs.NetworkPolicyPeerArgs;
import io.pulumi.kubernetes.extensions_v1beta1.inputs.NetworkPolicyPortArgs;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * DEPRECATED 1.9 - This group version of NetworkPolicyEgressRule is deprecated by networking/v1/NetworkPolicyEgressRule. NetworkPolicyEgressRule describes a particular set of traffic that is allowed out of pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and to. This type is beta-level in 1.8
 * 
 */
public final class NetworkPolicyEgressRuleArgs extends io.pulumi.resources.ResourceArgs {

    public static final NetworkPolicyEgressRuleArgs Empty = new NetworkPolicyEgressRuleArgs();

    /**
     * List of destination ports for outgoing traffic. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.
     * 
     */
    @InputImport(name="ports")
      private final @Nullable Input<List<NetworkPolicyPortArgs>> ports;

    public Input<List<NetworkPolicyPortArgs>> getPorts() {
        return this.ports == null ? Input.empty() : this.ports;
    }

    /**
     * List of destinations for outgoing traffic of pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all destinations (traffic not restricted by destination). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the to list.
     * 
     */
    @InputImport(name="to")
      private final @Nullable Input<List<NetworkPolicyPeerArgs>> to;

    public Input<List<NetworkPolicyPeerArgs>> getTo() {
        return this.to == null ? Input.empty() : this.to;
    }

    public NetworkPolicyEgressRuleArgs(
        @Nullable Input<List<NetworkPolicyPortArgs>> ports,
        @Nullable Input<List<NetworkPolicyPeerArgs>> to) {
        this.ports = ports;
        this.to = to;
    }

    private NetworkPolicyEgressRuleArgs() {
        this.ports = Input.empty();
        this.to = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NetworkPolicyEgressRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<List<NetworkPolicyPortArgs>> ports;
        private @Nullable Input<List<NetworkPolicyPeerArgs>> to;

        public Builder() {
    	      // Empty
        }

        public Builder(NetworkPolicyEgressRuleArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ports = defaults.ports;
    	      this.to = defaults.to;
        }

        public Builder ports(@Nullable Input<List<NetworkPolicyPortArgs>> ports) {
            this.ports = ports;
            return this;
        }

        public Builder ports(@Nullable List<NetworkPolicyPortArgs> ports) {
            this.ports = Input.ofNullable(ports);
            return this;
        }

        public Builder to(@Nullable Input<List<NetworkPolicyPeerArgs>> to) {
            this.to = to;
            return this;
        }

        public Builder to(@Nullable List<NetworkPolicyPeerArgs> to) {
            this.to = Input.ofNullable(to);
            return this;
        }
        public NetworkPolicyEgressRuleArgs build() {
            return new NetworkPolicyEgressRuleArgs(ports, to);
        }
    }
}
