// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.kubernetes.autoscaling_v2beta1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.kubernetes.autoscaling_v2beta1.inputs.CrossVersionObjectReferenceArgs;
import io.pulumi.kubernetes.meta_v1.inputs.LabelSelectorArgs;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * ObjectMetricSource indicates how to scale on a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).
 * 
 */
public final class ObjectMetricSourceArgs extends io.pulumi.resources.ResourceArgs {

    public static final ObjectMetricSourceArgs Empty = new ObjectMetricSourceArgs();

    /**
     * averageValue is the target value of the average of the metric across all relevant pods (as a quantity)
     * 
     */
    @InputImport(name="averageValue")
      private final @Nullable Input<String> averageValue;

    public Input<String> getAverageValue() {
        return this.averageValue == null ? Input.empty() : this.averageValue;
    }

    /**
     * metricName is the name of the metric in question.
     * 
     */
    @InputImport(name="metricName", required=true)
      private final Input<String> metricName;

    public Input<String> getMetricName() {
        return this.metricName;
    }

    /**
     * selector is the string-encoded form of a standard kubernetes label selector for the given metric When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping When unset, just the metricName will be used to gather metrics.
     * 
     */
    @InputImport(name="selector")
      private final @Nullable Input<LabelSelectorArgs> selector;

    public Input<LabelSelectorArgs> getSelector() {
        return this.selector == null ? Input.empty() : this.selector;
    }

    /**
     * target is the described Kubernetes object.
     * 
     */
    @InputImport(name="target", required=true)
      private final Input<CrossVersionObjectReferenceArgs> target;

    public Input<CrossVersionObjectReferenceArgs> getTarget() {
        return this.target;
    }

    /**
     * targetValue is the target value of the metric (as a quantity).
     * 
     */
    @InputImport(name="targetValue", required=true)
      private final Input<String> targetValue;

    public Input<String> getTargetValue() {
        return this.targetValue;
    }

    public ObjectMetricSourceArgs(
        @Nullable Input<String> averageValue,
        Input<String> metricName,
        @Nullable Input<LabelSelectorArgs> selector,
        Input<CrossVersionObjectReferenceArgs> target,
        Input<String> targetValue) {
        this.averageValue = averageValue;
        this.metricName = Objects.requireNonNull(metricName, "expected parameter 'metricName' to be non-null");
        this.selector = selector;
        this.target = Objects.requireNonNull(target, "expected parameter 'target' to be non-null");
        this.targetValue = Objects.requireNonNull(targetValue, "expected parameter 'targetValue' to be non-null");
    }

    private ObjectMetricSourceArgs() {
        this.averageValue = Input.empty();
        this.metricName = Input.empty();
        this.selector = Input.empty();
        this.target = Input.empty();
        this.targetValue = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ObjectMetricSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Input<String> averageValue;
        private Input<String> metricName;
        private @Nullable Input<LabelSelectorArgs> selector;
        private Input<CrossVersionObjectReferenceArgs> target;
        private Input<String> targetValue;

        public Builder() {
    	      // Empty
        }

        public Builder(ObjectMetricSourceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.averageValue = defaults.averageValue;
    	      this.metricName = defaults.metricName;
    	      this.selector = defaults.selector;
    	      this.target = defaults.target;
    	      this.targetValue = defaults.targetValue;
        }

        public Builder setAverageValue(@Nullable Input<String> averageValue) {
            this.averageValue = averageValue;
            return this;
        }

        public Builder setAverageValue(@Nullable String averageValue) {
            this.averageValue = Input.ofNullable(averageValue);
            return this;
        }

        public Builder setMetricName(Input<String> metricName) {
            this.metricName = Objects.requireNonNull(metricName);
            return this;
        }

        public Builder setMetricName(String metricName) {
            this.metricName = Input.of(Objects.requireNonNull(metricName));
            return this;
        }

        public Builder setSelector(@Nullable Input<LabelSelectorArgs> selector) {
            this.selector = selector;
            return this;
        }

        public Builder setSelector(@Nullable LabelSelectorArgs selector) {
            this.selector = Input.ofNullable(selector);
            return this;
        }

        public Builder setTarget(Input<CrossVersionObjectReferenceArgs> target) {
            this.target = Objects.requireNonNull(target);
            return this;
        }

        public Builder setTarget(CrossVersionObjectReferenceArgs target) {
            this.target = Input.of(Objects.requireNonNull(target));
            return this;
        }

        public Builder setTargetValue(Input<String> targetValue) {
            this.targetValue = Objects.requireNonNull(targetValue);
            return this;
        }

        public Builder setTargetValue(String targetValue) {
            this.targetValue = Input.of(Objects.requireNonNull(targetValue));
            return this;
        }
        public ObjectMetricSourceArgs build() {
            return new ObjectMetricSourceArgs(averageValue, metricName, selector, target, targetValue);
        }
    }
}
