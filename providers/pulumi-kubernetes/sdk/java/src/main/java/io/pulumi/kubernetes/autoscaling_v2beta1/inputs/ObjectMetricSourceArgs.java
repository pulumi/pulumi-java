// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.kubernetes.autoscaling_v2beta1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.kubernetes.autoscaling_v2beta1.inputs.CrossVersionObjectReferenceArgs;
import io.pulumi.kubernetes.meta_v1.inputs.LabelSelectorArgs;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * ObjectMetricSource indicates how to scale on a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).
 * 
 */
public final class ObjectMetricSourceArgs extends io.pulumi.resources.ResourceArgs {

    public static final ObjectMetricSourceArgs Empty = new ObjectMetricSourceArgs();

    /**
     * averageValue is the target value of the average of the metric across all relevant pods (as a quantity)
     * 
     */
    @Import(name="averageValue")
      private final @Nullable Output<String> averageValue;

    public Output<String> averageValue() {
        return this.averageValue == null ? Codegen.empty() : this.averageValue;
    }

    /**
     * metricName is the name of the metric in question.
     * 
     */
    @Import(name="metricName", required=true)
      private final Output<String> metricName;

    public Output<String> metricName() {
        return this.metricName;
    }

    /**
     * selector is the string-encoded form of a standard kubernetes label selector for the given metric When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping When unset, just the metricName will be used to gather metrics.
     * 
     */
    @Import(name="selector")
      private final @Nullable Output<LabelSelectorArgs> selector;

    public Output<LabelSelectorArgs> selector() {
        return this.selector == null ? Codegen.empty() : this.selector;
    }

    /**
     * target is the described Kubernetes object.
     * 
     */
    @Import(name="target", required=true)
      private final Output<CrossVersionObjectReferenceArgs> target;

    public Output<CrossVersionObjectReferenceArgs> target() {
        return this.target;
    }

    /**
     * targetValue is the target value of the metric (as a quantity).
     * 
     */
    @Import(name="targetValue", required=true)
      private final Output<String> targetValue;

    public Output<String> targetValue() {
        return this.targetValue;
    }

    public ObjectMetricSourceArgs(
        @Nullable Output<String> averageValue,
        Output<String> metricName,
        @Nullable Output<LabelSelectorArgs> selector,
        Output<CrossVersionObjectReferenceArgs> target,
        Output<String> targetValue) {
        this.averageValue = averageValue;
        this.metricName = Objects.requireNonNull(metricName, "expected parameter 'metricName' to be non-null");
        this.selector = selector;
        this.target = Objects.requireNonNull(target, "expected parameter 'target' to be non-null");
        this.targetValue = Objects.requireNonNull(targetValue, "expected parameter 'targetValue' to be non-null");
    }

    private ObjectMetricSourceArgs() {
        this.averageValue = Codegen.empty();
        this.metricName = Codegen.empty();
        this.selector = Codegen.empty();
        this.target = Codegen.empty();
        this.targetValue = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ObjectMetricSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<String> averageValue;
        private Output<String> metricName;
        private @Nullable Output<LabelSelectorArgs> selector;
        private Output<CrossVersionObjectReferenceArgs> target;
        private Output<String> targetValue;

        public Builder() {
    	      // Empty
        }

        public Builder(ObjectMetricSourceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.averageValue = defaults.averageValue;
    	      this.metricName = defaults.metricName;
    	      this.selector = defaults.selector;
    	      this.target = defaults.target;
    	      this.targetValue = defaults.targetValue;
        }

        public Builder averageValue(@Nullable Output<String> averageValue) {
            this.averageValue = averageValue;
            return this;
        }
        public Builder averageValue(@Nullable String averageValue) {
            this.averageValue = Codegen.ofNullable(averageValue);
            return this;
        }
        public Builder metricName(Output<String> metricName) {
            this.metricName = Objects.requireNonNull(metricName);
            return this;
        }
        public Builder metricName(String metricName) {
            this.metricName = Output.of(Objects.requireNonNull(metricName));
            return this;
        }
        public Builder selector(@Nullable Output<LabelSelectorArgs> selector) {
            this.selector = selector;
            return this;
        }
        public Builder selector(@Nullable LabelSelectorArgs selector) {
            this.selector = Codegen.ofNullable(selector);
            return this;
        }
        public Builder target(Output<CrossVersionObjectReferenceArgs> target) {
            this.target = Objects.requireNonNull(target);
            return this;
        }
        public Builder target(CrossVersionObjectReferenceArgs target) {
            this.target = Output.of(Objects.requireNonNull(target));
            return this;
        }
        public Builder targetValue(Output<String> targetValue) {
            this.targetValue = Objects.requireNonNull(targetValue);
            return this;
        }
        public Builder targetValue(String targetValue) {
            this.targetValue = Output.of(Objects.requireNonNull(targetValue));
            return this;
        }        public ObjectMetricSourceArgs build() {
            return new ObjectMetricSourceArgs(averageValue, metricName, selector, target, targetValue);
        }
    }
}
