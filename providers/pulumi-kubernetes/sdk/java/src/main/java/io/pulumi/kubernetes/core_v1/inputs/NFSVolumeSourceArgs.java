// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.kubernetes.core_v1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.
 * 
 */
public final class NFSVolumeSourceArgs extends io.pulumi.resources.ResourceArgs {

    public static final NFSVolumeSourceArgs Empty = new NFSVolumeSourceArgs();

    /**
     * Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     * 
     */
    @Import(name="path", required=true)
      private final Output<String> path;

    public Output<String> path() {
        return this.path;
    }

    /**
     * ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     * 
     */
    @Import(name="readOnly")
      private final @Nullable Output<Boolean> readOnly;

    public Output<Boolean> readOnly() {
        return this.readOnly == null ? Codegen.empty() : this.readOnly;
    }

    /**
     * Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
     * 
     */
    @Import(name="server", required=true)
      private final Output<String> server;

    public Output<String> server() {
        return this.server;
    }

    public NFSVolumeSourceArgs(
        Output<String> path,
        @Nullable Output<Boolean> readOnly,
        Output<String> server) {
        this.path = Objects.requireNonNull(path, "expected parameter 'path' to be non-null");
        this.readOnly = readOnly;
        this.server = Objects.requireNonNull(server, "expected parameter 'server' to be non-null");
    }

    private NFSVolumeSourceArgs() {
        this.path = Codegen.empty();
        this.readOnly = Codegen.empty();
        this.server = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NFSVolumeSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> path;
        private @Nullable Output<Boolean> readOnly;
        private Output<String> server;

        public Builder() {
    	      // Empty
        }

        public Builder(NFSVolumeSourceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.path = defaults.path;
    	      this.readOnly = defaults.readOnly;
    	      this.server = defaults.server;
        }

        public Builder path(Output<String> path) {
            this.path = Objects.requireNonNull(path);
            return this;
        }
        public Builder path(String path) {
            this.path = Output.of(Objects.requireNonNull(path));
            return this;
        }
        public Builder readOnly(@Nullable Output<Boolean> readOnly) {
            this.readOnly = readOnly;
            return this;
        }
        public Builder readOnly(@Nullable Boolean readOnly) {
            this.readOnly = Codegen.ofNullable(readOnly);
            return this;
        }
        public Builder server(Output<String> server) {
            this.server = Objects.requireNonNull(server);
            return this;
        }
        public Builder server(String server) {
            this.server = Output.of(Objects.requireNonNull(server));
            return this;
        }        public NFSVolumeSourceArgs build() {
            return new NFSVolumeSourceArgs(path, readOnly, server);
        }
    }
}
