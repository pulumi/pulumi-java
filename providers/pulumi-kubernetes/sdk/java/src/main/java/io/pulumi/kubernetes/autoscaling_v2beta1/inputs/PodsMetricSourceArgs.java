// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.kubernetes.autoscaling_v2beta1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.Import;
import io.pulumi.core.internal.Codegen;
import io.pulumi.kubernetes.meta_v1.inputs.LabelSelectorArgs;
import java.lang.String;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * PodsMetricSource indicates how to scale on a metric describing each pod in the current scale target (for example, transactions-processed-per-second). The values will be averaged together before being compared to the target value.
 * 
 */
public final class PodsMetricSourceArgs extends io.pulumi.resources.ResourceArgs {

    public static final PodsMetricSourceArgs Empty = new PodsMetricSourceArgs();

    /**
     * metricName is the name of the metric in question
     * 
     */
    @Import(name="metricName", required=true)
      private final Output<String> metricName;

    public Output<String> getMetricName() {
        return this.metricName;
    }

    /**
     * selector is the string-encoded form of a standard kubernetes label selector for the given metric When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping When unset, just the metricName will be used to gather metrics.
     * 
     */
    @Import(name="selector")
      private final @Nullable Output<LabelSelectorArgs> selector;

    public Output<LabelSelectorArgs> getSelector() {
        return this.selector == null ? Codegen.empty() : this.selector;
    }

    /**
     * targetAverageValue is the target value of the average of the metric across all relevant pods (as a quantity)
     * 
     */
    @Import(name="targetAverageValue", required=true)
      private final Output<String> targetAverageValue;

    public Output<String> getTargetAverageValue() {
        return this.targetAverageValue;
    }

    public PodsMetricSourceArgs(
        Output<String> metricName,
        @Nullable Output<LabelSelectorArgs> selector,
        Output<String> targetAverageValue) {
        this.metricName = Objects.requireNonNull(metricName, "expected parameter 'metricName' to be non-null");
        this.selector = selector;
        this.targetAverageValue = Objects.requireNonNull(targetAverageValue, "expected parameter 'targetAverageValue' to be non-null");
    }

    private PodsMetricSourceArgs() {
        this.metricName = Codegen.empty();
        this.selector = Codegen.empty();
        this.targetAverageValue = Codegen.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PodsMetricSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Output<String> metricName;
        private @Nullable Output<LabelSelectorArgs> selector;
        private Output<String> targetAverageValue;

        public Builder() {
    	      // Empty
        }

        public Builder(PodsMetricSourceArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.metricName = defaults.metricName;
    	      this.selector = defaults.selector;
    	      this.targetAverageValue = defaults.targetAverageValue;
        }

        public Builder metricName(Output<String> metricName) {
            this.metricName = Objects.requireNonNull(metricName);
            return this;
        }
        public Builder metricName(String metricName) {
            this.metricName = Output.of(Objects.requireNonNull(metricName));
            return this;
        }
        public Builder selector(@Nullable Output<LabelSelectorArgs> selector) {
            this.selector = selector;
            return this;
        }
        public Builder selector(@Nullable LabelSelectorArgs selector) {
            this.selector = Codegen.ofNullable(selector);
            return this;
        }
        public Builder targetAverageValue(Output<String> targetAverageValue) {
            this.targetAverageValue = Objects.requireNonNull(targetAverageValue);
            return this;
        }
        public Builder targetAverageValue(String targetAverageValue) {
            this.targetAverageValue = Output.of(Objects.requireNonNull(targetAverageValue));
            return this;
        }        public PodsMetricSourceArgs build() {
            return new PodsMetricSourceArgs(metricName, selector, targetAverageValue);
        }
    }
}
