// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.kubernetes.core_v1.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import io.pulumi.kubernetes.meta_v1.outputs.ObjectMeta;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class Secret {
    private final @Nullable String apiVersion;
    private final @Nullable Map<String,String> data;
    private final @Nullable Boolean immutable;
    private final @Nullable String kind;
    private final @Nullable ObjectMeta metadata;
    private final @Nullable Map<String,String> stringData;
    private final @Nullable String type;

    @OutputCustomType.Constructor({"apiVersion","data","immutable","kind","metadata","stringData","type"})
    private Secret(
        @Nullable String apiVersion,
        @Nullable Map<String,String> data,
        @Nullable Boolean immutable,
        @Nullable String kind,
        @Nullable ObjectMeta metadata,
        @Nullable Map<String,String> stringData,
        @Nullable String type) {
        this.apiVersion = apiVersion;
        this.data = data;
        this.immutable = immutable;
        this.kind = kind;
        this.metadata = metadata;
        this.stringData = stringData;
        this.type = type;
    }

    public Optional<String> getApiVersion() {
        return Optional.ofNullable(this.apiVersion);
    }
    public Map<String,String> getData() {
        return this.data == null ? Map.of() : this.data;
    }
    public Optional<Boolean> getImmutable() {
        return Optional.ofNullable(this.immutable);
    }
    public Optional<String> getKind() {
        return Optional.ofNullable(this.kind);
    }
    public Optional<ObjectMeta> getMetadata() {
        return Optional.ofNullable(this.metadata);
    }
    public Map<String,String> getStringData() {
        return this.stringData == null ? Map.of() : this.stringData;
    }
    public Optional<String> getType() {
        return Optional.ofNullable(this.type);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(Secret defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable String apiVersion;
        private @Nullable Map<String,String> data;
        private @Nullable Boolean immutable;
        private @Nullable String kind;
        private @Nullable ObjectMeta metadata;
        private @Nullable Map<String,String> stringData;
        private @Nullable String type;

        public Builder() {
    	      // Empty
        }

        public Builder(Secret defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.apiVersion = defaults.apiVersion;
    	      this.data = defaults.data;
    	      this.immutable = defaults.immutable;
    	      this.kind = defaults.kind;
    	      this.metadata = defaults.metadata;
    	      this.stringData = defaults.stringData;
    	      this.type = defaults.type;
        }

        public Builder setApiVersion(@Nullable String apiVersion) {
            this.apiVersion = apiVersion;
            return this;
        }

        public Builder setData(@Nullable Map<String,String> data) {
            this.data = data;
            return this;
        }

        public Builder setImmutable(@Nullable Boolean immutable) {
            this.immutable = immutable;
            return this;
        }

        public Builder setKind(@Nullable String kind) {
            this.kind = kind;
            return this;
        }

        public Builder setMetadata(@Nullable ObjectMeta metadata) {
            this.metadata = metadata;
            return this;
        }

        public Builder setStringData(@Nullable Map<String,String> stringData) {
            this.stringData = stringData;
            return this;
        }

        public Builder setType(@Nullable String type) {
            this.type = type;
            return this;
        }

        public Secret build() {
            return new Secret(apiVersion, data, immutable, kind, metadata, stringData, type);
        }
    }
}
