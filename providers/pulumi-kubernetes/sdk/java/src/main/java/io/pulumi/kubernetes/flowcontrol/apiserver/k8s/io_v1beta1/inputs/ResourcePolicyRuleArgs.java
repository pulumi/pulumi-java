// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.kubernetes.flowcontrol.apiserver.k8s.io_v1beta1.inputs;

import io.pulumi.core.Input;
import io.pulumi.core.annotations.InputImport;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * ResourcePolicyRule is a predicate that matches some resource requests, testing the request's verb and the target resource. A ResourcePolicyRule matches a resource request if and only if: (a) at least one member of verbs matches the request, (b) at least one member of apiGroups matches the request, (c) at least one member of resources matches the request, and (d) either (d1) the request does not specify a namespace (i.e., `Namespace==""`) and clusterScope is true or (d2) the request specifies a namespace and least one member of namespaces matches the request's namespace.
 * 
 */
public final class ResourcePolicyRuleArgs extends io.pulumi.resources.ResourceArgs {

    public static final ResourcePolicyRuleArgs Empty = new ResourcePolicyRuleArgs();

    /**
     * `apiGroups` is a list of matching API groups and may not be empty. "*" matches all API groups and, if present, must be the only entry. Required.
     * 
     */
    @InputImport(name="apiGroups", required=true)
    private final Input<List<String>> apiGroups;

    public Input<List<String>> getApiGroups() {
        return this.apiGroups;
    }

    /**
     * `clusterScope` indicates whether to match requests that do not specify a namespace (which happens either because the resource is not namespaced or the request targets all namespaces). If this field is omitted or false then the `namespaces` field must contain a non-empty list.
     * 
     */
    @InputImport(name="clusterScope")
    private final @Nullable Input<Boolean> clusterScope;

    public Input<Boolean> getClusterScope() {
        return this.clusterScope == null ? Input.empty() : this.clusterScope;
    }

    /**
     * `namespaces` is a list of target namespaces that restricts matches.  A request that specifies a target namespace matches only if either (a) this list contains that target namespace or (b) this list contains "*".  Note that "*" matches any specified namespace but does not match a request that _does not specify_ a namespace (see the `clusterScope` field for that). This list may be empty, but only if `clusterScope` is true.
     * 
     */
    @InputImport(name="namespaces")
    private final @Nullable Input<List<String>> namespaces;

    public Input<List<String>> getNamespaces() {
        return this.namespaces == null ? Input.empty() : this.namespaces;
    }

    /**
     * `resources` is a list of matching resources (i.e., lowercase and plural) with, if desired, subresource.  For example, [ "services", "nodes/status" ].  This list may not be empty. "*" matches all resources and, if present, must be the only entry. Required.
     * 
     */
    @InputImport(name="resources", required=true)
    private final Input<List<String>> resources;

    public Input<List<String>> getResources() {
        return this.resources;
    }

    /**
     * `verbs` is a list of matching verbs and may not be empty. "*" matches all verbs and, if present, must be the only entry. Required.
     * 
     */
    @InputImport(name="verbs", required=true)
    private final Input<List<String>> verbs;

    public Input<List<String>> getVerbs() {
        return this.verbs;
    }

    public ResourcePolicyRuleArgs(
        Input<List<String>> apiGroups,
        @Nullable Input<Boolean> clusterScope,
        @Nullable Input<List<String>> namespaces,
        Input<List<String>> resources,
        Input<List<String>> verbs) {
        this.apiGroups = Objects.requireNonNull(apiGroups, "expected parameter 'apiGroups' to be non-null");
        this.clusterScope = clusterScope;
        this.namespaces = namespaces;
        this.resources = Objects.requireNonNull(resources, "expected parameter 'resources' to be non-null");
        this.verbs = Objects.requireNonNull(verbs, "expected parameter 'verbs' to be non-null");
    }

    private ResourcePolicyRuleArgs() {
        this.apiGroups = Input.empty();
        this.clusterScope = Input.empty();
        this.namespaces = Input.empty();
        this.resources = Input.empty();
        this.verbs = Input.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ResourcePolicyRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Input<List<String>> apiGroups;
        private @Nullable Input<Boolean> clusterScope;
        private @Nullable Input<List<String>> namespaces;
        private Input<List<String>> resources;
        private Input<List<String>> verbs;

        public Builder() {
    	      // Empty
        }

        public Builder(ResourcePolicyRuleArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.apiGroups = defaults.apiGroups;
    	      this.clusterScope = defaults.clusterScope;
    	      this.namespaces = defaults.namespaces;
    	      this.resources = defaults.resources;
    	      this.verbs = defaults.verbs;
        }

        public Builder setApiGroups(Input<List<String>> apiGroups) {
            this.apiGroups = Objects.requireNonNull(apiGroups);
            return this;
        }

        public Builder setApiGroups(List<String> apiGroups) {
            this.apiGroups = Input.of(Objects.requireNonNull(apiGroups));
            return this;
        }

        public Builder setClusterScope(@Nullable Input<Boolean> clusterScope) {
            this.clusterScope = clusterScope;
            return this;
        }

        public Builder setClusterScope(@Nullable Boolean clusterScope) {
            this.clusterScope = Input.ofNullable(clusterScope);
            return this;
        }

        public Builder setNamespaces(@Nullable Input<List<String>> namespaces) {
            this.namespaces = namespaces;
            return this;
        }

        public Builder setNamespaces(@Nullable List<String> namespaces) {
            this.namespaces = Input.ofNullable(namespaces);
            return this;
        }

        public Builder setResources(Input<List<String>> resources) {
            this.resources = Objects.requireNonNull(resources);
            return this;
        }

        public Builder setResources(List<String> resources) {
            this.resources = Input.of(Objects.requireNonNull(resources));
            return this;
        }

        public Builder setVerbs(Input<List<String>> verbs) {
            this.verbs = Objects.requireNonNull(verbs);
            return this;
        }

        public Builder setVerbs(List<String> verbs) {
            this.verbs = Input.of(Objects.requireNonNull(verbs));
            return this;
        }

        public ResourcePolicyRuleArgs build() {
            return new ResourcePolicyRuleArgs(apiGroups, clusterScope, namespaces, resources, verbs);
        }
    }
}
