// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.kubernetes.core_v1.outputs;

import io.pulumi.core.internal.annotations.OutputCustomType;
import io.pulumi.kubernetes.core_v1.outputs.AWSElasticBlockStoreVolumeSource;
import io.pulumi.kubernetes.core_v1.outputs.AzureDiskVolumeSource;
import io.pulumi.kubernetes.core_v1.outputs.AzureFilePersistentVolumeSource;
import io.pulumi.kubernetes.core_v1.outputs.CSIPersistentVolumeSource;
import io.pulumi.kubernetes.core_v1.outputs.CephFSPersistentVolumeSource;
import io.pulumi.kubernetes.core_v1.outputs.CinderPersistentVolumeSource;
import io.pulumi.kubernetes.core_v1.outputs.FCVolumeSource;
import io.pulumi.kubernetes.core_v1.outputs.FlexPersistentVolumeSource;
import io.pulumi.kubernetes.core_v1.outputs.FlockerVolumeSource;
import io.pulumi.kubernetes.core_v1.outputs.GCEPersistentDiskVolumeSource;
import io.pulumi.kubernetes.core_v1.outputs.GlusterfsPersistentVolumeSource;
import io.pulumi.kubernetes.core_v1.outputs.HostPathVolumeSource;
import io.pulumi.kubernetes.core_v1.outputs.ISCSIPersistentVolumeSource;
import io.pulumi.kubernetes.core_v1.outputs.LocalVolumeSource;
import io.pulumi.kubernetes.core_v1.outputs.NFSVolumeSource;
import io.pulumi.kubernetes.core_v1.outputs.ObjectReference;
import io.pulumi.kubernetes.core_v1.outputs.PhotonPersistentDiskVolumeSource;
import io.pulumi.kubernetes.core_v1.outputs.PortworxVolumeSource;
import io.pulumi.kubernetes.core_v1.outputs.QuobyteVolumeSource;
import io.pulumi.kubernetes.core_v1.outputs.RBDPersistentVolumeSource;
import io.pulumi.kubernetes.core_v1.outputs.ScaleIOPersistentVolumeSource;
import io.pulumi.kubernetes.core_v1.outputs.StorageOSPersistentVolumeSource;
import io.pulumi.kubernetes.core_v1.outputs.VolumeNodeAffinity;
import io.pulumi.kubernetes.core_v1.outputs.VsphereVirtualDiskVolumeSource;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@OutputCustomType
public final class PersistentVolumeSpec {
    private final @Nullable List<String> accessModes;
    private final @Nullable AWSElasticBlockStoreVolumeSource awsElasticBlockStore;
    private final @Nullable AzureDiskVolumeSource azureDisk;
    private final @Nullable AzureFilePersistentVolumeSource azureFile;
    private final @Nullable Map<String,String> capacity;
    private final @Nullable CephFSPersistentVolumeSource cephfs;
    private final @Nullable CinderPersistentVolumeSource cinder;
    private final @Nullable ObjectReference claimRef;
    private final @Nullable CSIPersistentVolumeSource csi;
    private final @Nullable FCVolumeSource fc;
    private final @Nullable FlexPersistentVolumeSource flexVolume;
    private final @Nullable FlockerVolumeSource flocker;
    private final @Nullable GCEPersistentDiskVolumeSource gcePersistentDisk;
    private final @Nullable GlusterfsPersistentVolumeSource glusterfs;
    private final @Nullable HostPathVolumeSource hostPath;
    private final @Nullable ISCSIPersistentVolumeSource iscsi;
    private final @Nullable LocalVolumeSource local;
    private final @Nullable List<String> mountOptions;
    private final @Nullable NFSVolumeSource nfs;
    private final @Nullable VolumeNodeAffinity nodeAffinity;
    private final @Nullable String persistentVolumeReclaimPolicy;
    private final @Nullable PhotonPersistentDiskVolumeSource photonPersistentDisk;
    private final @Nullable PortworxVolumeSource portworxVolume;
    private final @Nullable QuobyteVolumeSource quobyte;
    private final @Nullable RBDPersistentVolumeSource rbd;
    private final @Nullable ScaleIOPersistentVolumeSource scaleIO;
    private final @Nullable String storageClassName;
    private final @Nullable StorageOSPersistentVolumeSource storageos;
    private final @Nullable String volumeMode;
    private final @Nullable VsphereVirtualDiskVolumeSource vsphereVolume;

    @OutputCustomType.Constructor({"accessModes","awsElasticBlockStore","azureDisk","azureFile","capacity","cephfs","cinder","claimRef","csi","fc","flexVolume","flocker","gcePersistentDisk","glusterfs","hostPath","iscsi","local","mountOptions","nfs","nodeAffinity","persistentVolumeReclaimPolicy","photonPersistentDisk","portworxVolume","quobyte","rbd","scaleIO","storageClassName","storageos","volumeMode","vsphereVolume"})
    private PersistentVolumeSpec(
        @Nullable List<String> accessModes,
        @Nullable AWSElasticBlockStoreVolumeSource awsElasticBlockStore,
        @Nullable AzureDiskVolumeSource azureDisk,
        @Nullable AzureFilePersistentVolumeSource azureFile,
        @Nullable Map<String,String> capacity,
        @Nullable CephFSPersistentVolumeSource cephfs,
        @Nullable CinderPersistentVolumeSource cinder,
        @Nullable ObjectReference claimRef,
        @Nullable CSIPersistentVolumeSource csi,
        @Nullable FCVolumeSource fc,
        @Nullable FlexPersistentVolumeSource flexVolume,
        @Nullable FlockerVolumeSource flocker,
        @Nullable GCEPersistentDiskVolumeSource gcePersistentDisk,
        @Nullable GlusterfsPersistentVolumeSource glusterfs,
        @Nullable HostPathVolumeSource hostPath,
        @Nullable ISCSIPersistentVolumeSource iscsi,
        @Nullable LocalVolumeSource local,
        @Nullable List<String> mountOptions,
        @Nullable NFSVolumeSource nfs,
        @Nullable VolumeNodeAffinity nodeAffinity,
        @Nullable String persistentVolumeReclaimPolicy,
        @Nullable PhotonPersistentDiskVolumeSource photonPersistentDisk,
        @Nullable PortworxVolumeSource portworxVolume,
        @Nullable QuobyteVolumeSource quobyte,
        @Nullable RBDPersistentVolumeSource rbd,
        @Nullable ScaleIOPersistentVolumeSource scaleIO,
        @Nullable String storageClassName,
        @Nullable StorageOSPersistentVolumeSource storageos,
        @Nullable String volumeMode,
        @Nullable VsphereVirtualDiskVolumeSource vsphereVolume) {
        this.accessModes = accessModes;
        this.awsElasticBlockStore = awsElasticBlockStore;
        this.azureDisk = azureDisk;
        this.azureFile = azureFile;
        this.capacity = capacity;
        this.cephfs = cephfs;
        this.cinder = cinder;
        this.claimRef = claimRef;
        this.csi = csi;
        this.fc = fc;
        this.flexVolume = flexVolume;
        this.flocker = flocker;
        this.gcePersistentDisk = gcePersistentDisk;
        this.glusterfs = glusterfs;
        this.hostPath = hostPath;
        this.iscsi = iscsi;
        this.local = local;
        this.mountOptions = mountOptions;
        this.nfs = nfs;
        this.nodeAffinity = nodeAffinity;
        this.persistentVolumeReclaimPolicy = persistentVolumeReclaimPolicy;
        this.photonPersistentDisk = photonPersistentDisk;
        this.portworxVolume = portworxVolume;
        this.quobyte = quobyte;
        this.rbd = rbd;
        this.scaleIO = scaleIO;
        this.storageClassName = storageClassName;
        this.storageos = storageos;
        this.volumeMode = volumeMode;
        this.vsphereVolume = vsphereVolume;
    }

    public List<String> getAccessModes() {
        return this.accessModes == null ? List.of() : this.accessModes;
    }
    public Optional<AWSElasticBlockStoreVolumeSource> getAwsElasticBlockStore() {
        return Optional.ofNullable(this.awsElasticBlockStore);
    }
    public Optional<AzureDiskVolumeSource> getAzureDisk() {
        return Optional.ofNullable(this.azureDisk);
    }
    public Optional<AzureFilePersistentVolumeSource> getAzureFile() {
        return Optional.ofNullable(this.azureFile);
    }
    public Map<String,String> getCapacity() {
        return this.capacity == null ? Map.of() : this.capacity;
    }
    public Optional<CephFSPersistentVolumeSource> getCephfs() {
        return Optional.ofNullable(this.cephfs);
    }
    public Optional<CinderPersistentVolumeSource> getCinder() {
        return Optional.ofNullable(this.cinder);
    }
    public Optional<ObjectReference> getClaimRef() {
        return Optional.ofNullable(this.claimRef);
    }
    public Optional<CSIPersistentVolumeSource> getCsi() {
        return Optional.ofNullable(this.csi);
    }
    public Optional<FCVolumeSource> getFc() {
        return Optional.ofNullable(this.fc);
    }
    public Optional<FlexPersistentVolumeSource> getFlexVolume() {
        return Optional.ofNullable(this.flexVolume);
    }
    public Optional<FlockerVolumeSource> getFlocker() {
        return Optional.ofNullable(this.flocker);
    }
    public Optional<GCEPersistentDiskVolumeSource> getGcePersistentDisk() {
        return Optional.ofNullable(this.gcePersistentDisk);
    }
    public Optional<GlusterfsPersistentVolumeSource> getGlusterfs() {
        return Optional.ofNullable(this.glusterfs);
    }
    public Optional<HostPathVolumeSource> getHostPath() {
        return Optional.ofNullable(this.hostPath);
    }
    public Optional<ISCSIPersistentVolumeSource> getIscsi() {
        return Optional.ofNullable(this.iscsi);
    }
    public Optional<LocalVolumeSource> getLocal() {
        return Optional.ofNullable(this.local);
    }
    public List<String> getMountOptions() {
        return this.mountOptions == null ? List.of() : this.mountOptions;
    }
    public Optional<NFSVolumeSource> getNfs() {
        return Optional.ofNullable(this.nfs);
    }
    public Optional<VolumeNodeAffinity> getNodeAffinity() {
        return Optional.ofNullable(this.nodeAffinity);
    }
    public Optional<String> getPersistentVolumeReclaimPolicy() {
        return Optional.ofNullable(this.persistentVolumeReclaimPolicy);
    }
    public Optional<PhotonPersistentDiskVolumeSource> getPhotonPersistentDisk() {
        return Optional.ofNullable(this.photonPersistentDisk);
    }
    public Optional<PortworxVolumeSource> getPortworxVolume() {
        return Optional.ofNullable(this.portworxVolume);
    }
    public Optional<QuobyteVolumeSource> getQuobyte() {
        return Optional.ofNullable(this.quobyte);
    }
    public Optional<RBDPersistentVolumeSource> getRbd() {
        return Optional.ofNullable(this.rbd);
    }
    public Optional<ScaleIOPersistentVolumeSource> getScaleIO() {
        return Optional.ofNullable(this.scaleIO);
    }
    public Optional<String> getStorageClassName() {
        return Optional.ofNullable(this.storageClassName);
    }
    public Optional<StorageOSPersistentVolumeSource> getStorageos() {
        return Optional.ofNullable(this.storageos);
    }
    public Optional<String> getVolumeMode() {
        return Optional.ofNullable(this.volumeMode);
    }
    public Optional<VsphereVirtualDiskVolumeSource> getVsphereVolume() {
        return Optional.ofNullable(this.vsphereVolume);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PersistentVolumeSpec defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable List<String> accessModes;
        private @Nullable AWSElasticBlockStoreVolumeSource awsElasticBlockStore;
        private @Nullable AzureDiskVolumeSource azureDisk;
        private @Nullable AzureFilePersistentVolumeSource azureFile;
        private @Nullable Map<String,String> capacity;
        private @Nullable CephFSPersistentVolumeSource cephfs;
        private @Nullable CinderPersistentVolumeSource cinder;
        private @Nullable ObjectReference claimRef;
        private @Nullable CSIPersistentVolumeSource csi;
        private @Nullable FCVolumeSource fc;
        private @Nullable FlexPersistentVolumeSource flexVolume;
        private @Nullable FlockerVolumeSource flocker;
        private @Nullable GCEPersistentDiskVolumeSource gcePersistentDisk;
        private @Nullable GlusterfsPersistentVolumeSource glusterfs;
        private @Nullable HostPathVolumeSource hostPath;
        private @Nullable ISCSIPersistentVolumeSource iscsi;
        private @Nullable LocalVolumeSource local;
        private @Nullable List<String> mountOptions;
        private @Nullable NFSVolumeSource nfs;
        private @Nullable VolumeNodeAffinity nodeAffinity;
        private @Nullable String persistentVolumeReclaimPolicy;
        private @Nullable PhotonPersistentDiskVolumeSource photonPersistentDisk;
        private @Nullable PortworxVolumeSource portworxVolume;
        private @Nullable QuobyteVolumeSource quobyte;
        private @Nullable RBDPersistentVolumeSource rbd;
        private @Nullable ScaleIOPersistentVolumeSource scaleIO;
        private @Nullable String storageClassName;
        private @Nullable StorageOSPersistentVolumeSource storageos;
        private @Nullable String volumeMode;
        private @Nullable VsphereVirtualDiskVolumeSource vsphereVolume;

        public Builder() {
    	      // Empty
        }

        public Builder(PersistentVolumeSpec defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessModes = defaults.accessModes;
    	      this.awsElasticBlockStore = defaults.awsElasticBlockStore;
    	      this.azureDisk = defaults.azureDisk;
    	      this.azureFile = defaults.azureFile;
    	      this.capacity = defaults.capacity;
    	      this.cephfs = defaults.cephfs;
    	      this.cinder = defaults.cinder;
    	      this.claimRef = defaults.claimRef;
    	      this.csi = defaults.csi;
    	      this.fc = defaults.fc;
    	      this.flexVolume = defaults.flexVolume;
    	      this.flocker = defaults.flocker;
    	      this.gcePersistentDisk = defaults.gcePersistentDisk;
    	      this.glusterfs = defaults.glusterfs;
    	      this.hostPath = defaults.hostPath;
    	      this.iscsi = defaults.iscsi;
    	      this.local = defaults.local;
    	      this.mountOptions = defaults.mountOptions;
    	      this.nfs = defaults.nfs;
    	      this.nodeAffinity = defaults.nodeAffinity;
    	      this.persistentVolumeReclaimPolicy = defaults.persistentVolumeReclaimPolicy;
    	      this.photonPersistentDisk = defaults.photonPersistentDisk;
    	      this.portworxVolume = defaults.portworxVolume;
    	      this.quobyte = defaults.quobyte;
    	      this.rbd = defaults.rbd;
    	      this.scaleIO = defaults.scaleIO;
    	      this.storageClassName = defaults.storageClassName;
    	      this.storageos = defaults.storageos;
    	      this.volumeMode = defaults.volumeMode;
    	      this.vsphereVolume = defaults.vsphereVolume;
        }

        public Builder setAccessModes(@Nullable List<String> accessModes) {
            this.accessModes = accessModes;
            return this;
        }

        public Builder setAwsElasticBlockStore(@Nullable AWSElasticBlockStoreVolumeSource awsElasticBlockStore) {
            this.awsElasticBlockStore = awsElasticBlockStore;
            return this;
        }

        public Builder setAzureDisk(@Nullable AzureDiskVolumeSource azureDisk) {
            this.azureDisk = azureDisk;
            return this;
        }

        public Builder setAzureFile(@Nullable AzureFilePersistentVolumeSource azureFile) {
            this.azureFile = azureFile;
            return this;
        }

        public Builder setCapacity(@Nullable Map<String,String> capacity) {
            this.capacity = capacity;
            return this;
        }

        public Builder setCephfs(@Nullable CephFSPersistentVolumeSource cephfs) {
            this.cephfs = cephfs;
            return this;
        }

        public Builder setCinder(@Nullable CinderPersistentVolumeSource cinder) {
            this.cinder = cinder;
            return this;
        }

        public Builder setClaimRef(@Nullable ObjectReference claimRef) {
            this.claimRef = claimRef;
            return this;
        }

        public Builder setCsi(@Nullable CSIPersistentVolumeSource csi) {
            this.csi = csi;
            return this;
        }

        public Builder setFc(@Nullable FCVolumeSource fc) {
            this.fc = fc;
            return this;
        }

        public Builder setFlexVolume(@Nullable FlexPersistentVolumeSource flexVolume) {
            this.flexVolume = flexVolume;
            return this;
        }

        public Builder setFlocker(@Nullable FlockerVolumeSource flocker) {
            this.flocker = flocker;
            return this;
        }

        public Builder setGcePersistentDisk(@Nullable GCEPersistentDiskVolumeSource gcePersistentDisk) {
            this.gcePersistentDisk = gcePersistentDisk;
            return this;
        }

        public Builder setGlusterfs(@Nullable GlusterfsPersistentVolumeSource glusterfs) {
            this.glusterfs = glusterfs;
            return this;
        }

        public Builder setHostPath(@Nullable HostPathVolumeSource hostPath) {
            this.hostPath = hostPath;
            return this;
        }

        public Builder setIscsi(@Nullable ISCSIPersistentVolumeSource iscsi) {
            this.iscsi = iscsi;
            return this;
        }

        public Builder setLocal(@Nullable LocalVolumeSource local) {
            this.local = local;
            return this;
        }

        public Builder setMountOptions(@Nullable List<String> mountOptions) {
            this.mountOptions = mountOptions;
            return this;
        }

        public Builder setNfs(@Nullable NFSVolumeSource nfs) {
            this.nfs = nfs;
            return this;
        }

        public Builder setNodeAffinity(@Nullable VolumeNodeAffinity nodeAffinity) {
            this.nodeAffinity = nodeAffinity;
            return this;
        }

        public Builder setPersistentVolumeReclaimPolicy(@Nullable String persistentVolumeReclaimPolicy) {
            this.persistentVolumeReclaimPolicy = persistentVolumeReclaimPolicy;
            return this;
        }

        public Builder setPhotonPersistentDisk(@Nullable PhotonPersistentDiskVolumeSource photonPersistentDisk) {
            this.photonPersistentDisk = photonPersistentDisk;
            return this;
        }

        public Builder setPortworxVolume(@Nullable PortworxVolumeSource portworxVolume) {
            this.portworxVolume = portworxVolume;
            return this;
        }

        public Builder setQuobyte(@Nullable QuobyteVolumeSource quobyte) {
            this.quobyte = quobyte;
            return this;
        }

        public Builder setRbd(@Nullable RBDPersistentVolumeSource rbd) {
            this.rbd = rbd;
            return this;
        }

        public Builder setScaleIO(@Nullable ScaleIOPersistentVolumeSource scaleIO) {
            this.scaleIO = scaleIO;
            return this;
        }

        public Builder setStorageClassName(@Nullable String storageClassName) {
            this.storageClassName = storageClassName;
            return this;
        }

        public Builder setStorageos(@Nullable StorageOSPersistentVolumeSource storageos) {
            this.storageos = storageos;
            return this;
        }

        public Builder setVolumeMode(@Nullable String volumeMode) {
            this.volumeMode = volumeMode;
            return this;
        }

        public Builder setVsphereVolume(@Nullable VsphereVirtualDiskVolumeSource vsphereVolume) {
            this.vsphereVolume = vsphereVolume;
            return this;
        }

        public PersistentVolumeSpec build() {
            return new PersistentVolumeSpec(accessModes, awsElasticBlockStore, azureDisk, azureFile, capacity, cephfs, cinder, claimRef, csi, fc, flexVolume, flocker, gcePersistentDisk, glusterfs, hostPath, iscsi, local, mountOptions, nfs, nodeAffinity, persistentVolumeReclaimPolicy, photonPersistentDisk, portworxVolume, quobyte, rbd, scaleIO, storageClassName, storageos, volumeMode, vsphereVolume);
        }
    }
}
