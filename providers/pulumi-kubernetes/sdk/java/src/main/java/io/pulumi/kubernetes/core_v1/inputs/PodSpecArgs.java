// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.pulumi.kubernetes.core_v1.inputs;

import io.pulumi.core.Output;
import io.pulumi.core.annotations.InputImport;
import io.pulumi.kubernetes.core_v1.inputs.AffinityArgs;
import io.pulumi.kubernetes.core_v1.inputs.ContainerArgs;
import io.pulumi.kubernetes.core_v1.inputs.EphemeralContainerArgs;
import io.pulumi.kubernetes.core_v1.inputs.HostAliasArgs;
import io.pulumi.kubernetes.core_v1.inputs.LocalObjectReferenceArgs;
import io.pulumi.kubernetes.core_v1.inputs.PodDNSConfigArgs;
import io.pulumi.kubernetes.core_v1.inputs.PodOSArgs;
import io.pulumi.kubernetes.core_v1.inputs.PodReadinessGateArgs;
import io.pulumi.kubernetes.core_v1.inputs.PodSecurityContextArgs;
import io.pulumi.kubernetes.core_v1.inputs.TolerationArgs;
import io.pulumi.kubernetes.core_v1.inputs.TopologySpreadConstraintArgs;
import io.pulumi.kubernetes.core_v1.inputs.VolumeArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import javax.annotation.Nullable;


/**
 * PodSpec is a description of a pod.
 * 
 */
public final class PodSpecArgs extends io.pulumi.resources.ResourceArgs {

    public static final PodSpecArgs Empty = new PodSpecArgs();

    /**
     * Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
     * 
     */
    @InputImport(name="activeDeadlineSeconds")
      private final @Nullable Output<Integer> activeDeadlineSeconds;

    public Output<Integer> getActiveDeadlineSeconds() {
        return this.activeDeadlineSeconds == null ? Output.empty() : this.activeDeadlineSeconds;
    }

    /**
     * If specified, the pod's scheduling constraints
     * 
     */
    @InputImport(name="affinity")
      private final @Nullable Output<AffinityArgs> affinity;

    public Output<AffinityArgs> getAffinity() {
        return this.affinity == null ? Output.empty() : this.affinity;
    }

    /**
     * AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
     * 
     */
    @InputImport(name="automountServiceAccountToken")
      private final @Nullable Output<Boolean> automountServiceAccountToken;

    public Output<Boolean> getAutomountServiceAccountToken() {
        return this.automountServiceAccountToken == null ? Output.empty() : this.automountServiceAccountToken;
    }

    /**
     * List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.
     * 
     */
    @InputImport(name="containers", required=true)
      private final Output<List<ContainerArgs>> containers;

    public Output<List<ContainerArgs>> getContainers() {
        return this.containers;
    }

    /**
     * Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.
     * 
     */
    @InputImport(name="dnsConfig")
      private final @Nullable Output<PodDNSConfigArgs> dnsConfig;

    public Output<PodDNSConfigArgs> getDnsConfig() {
        return this.dnsConfig == null ? Output.empty() : this.dnsConfig;
    }

    /**
     * Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.
     * 
     * Possible enum values:
     *  - `"ClusterFirst"` indicates that the pod should use cluster DNS first unless hostNetwork is true, if it is available, then fall back on the default (as determined by kubelet) DNS settings.
     *  - `"ClusterFirstWithHostNet"` indicates that the pod should use cluster DNS first, if it is available, then fall back on the default (as determined by kubelet) DNS settings.
     *  - `"Default"` indicates that the pod should use the default (as determined by kubelet) DNS settings.
     *  - `"None"` indicates that the pod should use empty DNS settings. DNS parameters such as nameservers and search paths should be defined via DNSConfig.
     * 
     */
    @InputImport(name="dnsPolicy")
      private final @Nullable Output<String> dnsPolicy;

    public Output<String> getDnsPolicy() {
        return this.dnsPolicy == null ? Output.empty() : this.dnsPolicy;
    }

    /**
     * EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.
     * 
     */
    @InputImport(name="enableServiceLinks")
      private final @Nullable Output<Boolean> enableServiceLinks;

    public Output<Boolean> getEnableServiceLinks() {
        return this.enableServiceLinks == null ? Output.empty() : this.enableServiceLinks;
    }

    /**
     * List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource. This field is beta-level and available on clusters that haven't disabled the EphemeralContainers feature gate.
     * 
     */
    @InputImport(name="ephemeralContainers")
      private final @Nullable Output<List<EphemeralContainerArgs>> ephemeralContainers;

    public Output<List<EphemeralContainerArgs>> getEphemeralContainers() {
        return this.ephemeralContainers == null ? Output.empty() : this.ephemeralContainers;
    }

    /**
     * HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.
     * 
     */
    @InputImport(name="hostAliases")
      private final @Nullable Output<List<HostAliasArgs>> hostAliases;

    public Output<List<HostAliasArgs>> getHostAliases() {
        return this.hostAliases == null ? Output.empty() : this.hostAliases;
    }

    /**
     * Use the host's ipc namespace. Optional: Default to false.
     * 
     */
    @InputImport(name="hostIPC")
      private final @Nullable Output<Boolean> hostIPC;

    public Output<Boolean> getHostIPC() {
        return this.hostIPC == null ? Output.empty() : this.hostIPC;
    }

    /**
     * Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.
     * 
     */
    @InputImport(name="hostNetwork")
      private final @Nullable Output<Boolean> hostNetwork;

    public Output<Boolean> getHostNetwork() {
        return this.hostNetwork == null ? Output.empty() : this.hostNetwork;
    }

    /**
     * Use the host's pid namespace. Optional: Default to false.
     * 
     */
    @InputImport(name="hostPID")
      private final @Nullable Output<Boolean> hostPID;

    public Output<Boolean> getHostPID() {
        return this.hostPID == null ? Output.empty() : this.hostPID;
    }

    /**
     * Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
     * 
     */
    @InputImport(name="hostname")
      private final @Nullable Output<String> hostname;

    public Output<String> getHostname() {
        return this.hostname == null ? Output.empty() : this.hostname;
    }

    /**
     * ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
     * 
     */
    @InputImport(name="imagePullSecrets")
      private final @Nullable Output<List<LocalObjectReferenceArgs>> imagePullSecrets;

    public Output<List<LocalObjectReferenceArgs>> getImagePullSecrets() {
        return this.imagePullSecrets == null ? Output.empty() : this.imagePullSecrets;
    }

    /**
     * List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
     * 
     */
    @InputImport(name="initContainers")
      private final @Nullable Output<List<ContainerArgs>> initContainers;

    public Output<List<ContainerArgs>> getInitContainers() {
        return this.initContainers == null ? Output.empty() : this.initContainers;
    }

    /**
     * NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
     * 
     */
    @InputImport(name="nodeName")
      private final @Nullable Output<String> nodeName;

    public Output<String> getNodeName() {
        return this.nodeName == null ? Output.empty() : this.nodeName;
    }

    /**
     * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
     * 
     */
    @InputImport(name="nodeSelector")
      private final @Nullable Output<Map<String,String>> nodeSelector;

    public Output<Map<String,String>> getNodeSelector() {
        return this.nodeSelector == null ? Output.empty() : this.nodeSelector;
    }

    /**
     * Specifies the OS of the containers in the pod. Some pod and container fields are restricted if this is set.
     * 
     * If the OS field is set to linux, the following fields must be unset: -securityContext.windowsOptions
     * 
     * If the OS field is set to windows, following fields must be unset: - spec.hostPID - spec.hostIPC - spec.securityContext.seLinuxOptions - spec.securityContext.seccompProfile - spec.securityContext.fsGroup - spec.securityContext.fsGroupChangePolicy - spec.securityContext.sysctls - spec.shareProcessNamespace - spec.securityContext.runAsUser - spec.securityContext.runAsGroup - spec.securityContext.supplementalGroups - spec.containers[*].securityContext.seLinuxOptions - spec.containers[*].securityContext.seccompProfile - spec.containers[*].securityContext.capabilities - spec.containers[*].securityContext.readOnlyRootFilesystem - spec.containers[*].securityContext.privileged - spec.containers[*].securityContext.allowPrivilegeEscalation - spec.containers[*].securityContext.procMount - spec.containers[*].securityContext.runAsUser - spec.containers[*].securityContext.runAsGroup This is an alpha field and requires the IdentifyPodOS feature
     * 
     */
    @InputImport(name="os")
      private final @Nullable Output<PodOSArgs> os;

    public Output<PodOSArgs> getOs() {
        return this.os == null ? Output.empty() : this.os;
    }

    /**
     * Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md This field is beta-level as of Kubernetes v1.18, and is only honored by servers that enable the PodOverhead feature.
     * 
     */
    @InputImport(name="overhead")
      private final @Nullable Output<Map<String,String>> overhead;

    public Output<Map<String,String>> getOverhead() {
        return this.overhead == null ? Output.empty() : this.overhead;
    }

    /**
     * PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset. This field is beta-level, gated by the NonPreemptingPriority feature-gate.
     * 
     */
    @InputImport(name="preemptionPolicy")
      private final @Nullable Output<String> preemptionPolicy;

    public Output<String> getPreemptionPolicy() {
        return this.preemptionPolicy == null ? Output.empty() : this.preemptionPolicy;
    }

    /**
     * The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.
     * 
     */
    @InputImport(name="priority")
      private final @Nullable Output<Integer> priority;

    public Output<Integer> getPriority() {
        return this.priority == null ? Output.empty() : this.priority;
    }

    /**
     * If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
     * 
     */
    @InputImport(name="priorityClassName")
      private final @Nullable Output<String> priorityClassName;

    public Output<String> getPriorityClassName() {
        return this.priorityClassName == null ? Output.empty() : this.priorityClassName;
    }

    /**
     * If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates
     * 
     */
    @InputImport(name="readinessGates")
      private final @Nullable Output<List<PodReadinessGateArgs>> readinessGates;

    public Output<List<PodReadinessGateArgs>> getReadinessGates() {
        return this.readinessGates == null ? Output.empty() : this.readinessGates;
    }

    /**
     * Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy
     * 
     * Possible enum values:
     *  - `"Always"`
     *  - `"Never"`
     *  - `"OnFailure"`
     * 
     */
    @InputImport(name="restartPolicy")
      private final @Nullable Output<String> restartPolicy;

    public Output<String> getRestartPolicy() {
        return this.restartPolicy == null ? Output.empty() : this.restartPolicy;
    }

    /**
     * RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the "legacy" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class This is a beta feature as of Kubernetes v1.14.
     * 
     */
    @InputImport(name="runtimeClassName")
      private final @Nullable Output<String> runtimeClassName;

    public Output<String> getRuntimeClassName() {
        return this.runtimeClassName == null ? Output.empty() : this.runtimeClassName;
    }

    /**
     * If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
     * 
     */
    @InputImport(name="schedulerName")
      private final @Nullable Output<String> schedulerName;

    public Output<String> getSchedulerName() {
        return this.schedulerName == null ? Output.empty() : this.schedulerName;
    }

    /**
     * SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.
     * 
     */
    @InputImport(name="securityContext")
      private final @Nullable Output<PodSecurityContextArgs> securityContext;

    public Output<PodSecurityContextArgs> getSecurityContext() {
        return this.securityContext == null ? Output.empty() : this.securityContext;
    }

    /**
     * DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.
     * 
     */
    @InputImport(name="serviceAccount")
      private final @Nullable Output<String> serviceAccount;

    public Output<String> getServiceAccount() {
        return this.serviceAccount == null ? Output.empty() : this.serviceAccount;
    }

    /**
     * ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
     * 
     */
    @InputImport(name="serviceAccountName")
      private final @Nullable Output<String> serviceAccountName;

    public Output<String> getServiceAccountName() {
        return this.serviceAccountName == null ? Output.empty() : this.serviceAccountName;
    }

    /**
     * If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default). In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname). In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters to FQDN. If a pod does not have FQDN, this has no effect. Default to false.
     * 
     */
    @InputImport(name="setHostnameAsFQDN")
      private final @Nullable Output<Boolean> setHostnameAsFQDN;

    public Output<Boolean> getSetHostnameAsFQDN() {
        return this.setHostnameAsFQDN == null ? Output.empty() : this.setHostnameAsFQDN;
    }

    /**
     * Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false.
     * 
     */
    @InputImport(name="shareProcessNamespace")
      private final @Nullable Output<Boolean> shareProcessNamespace;

    public Output<Boolean> getShareProcessNamespace() {
        return this.shareProcessNamespace == null ? Output.empty() : this.shareProcessNamespace;
    }

    /**
     * If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified, the pod will not have a domainname at all.
     * 
     */
    @InputImport(name="subdomain")
      private final @Nullable Output<String> subdomain;

    public Output<String> getSubdomain() {
        return this.subdomain == null ? Output.empty() : this.subdomain;
    }

    /**
     * Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.
     * 
     */
    @InputImport(name="terminationGracePeriodSeconds")
      private final @Nullable Output<Integer> terminationGracePeriodSeconds;

    public Output<Integer> getTerminationGracePeriodSeconds() {
        return this.terminationGracePeriodSeconds == null ? Output.empty() : this.terminationGracePeriodSeconds;
    }

    /**
     * If specified, the pod's tolerations.
     * 
     */
    @InputImport(name="tolerations")
      private final @Nullable Output<List<TolerationArgs>> tolerations;

    public Output<List<TolerationArgs>> getTolerations() {
        return this.tolerations == null ? Output.empty() : this.tolerations;
    }

    /**
     * TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. All topologySpreadConstraints are ANDed.
     * 
     */
    @InputImport(name="topologySpreadConstraints")
      private final @Nullable Output<List<TopologySpreadConstraintArgs>> topologySpreadConstraints;

    public Output<List<TopologySpreadConstraintArgs>> getTopologySpreadConstraints() {
        return this.topologySpreadConstraints == null ? Output.empty() : this.topologySpreadConstraints;
    }

    /**
     * List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes
     * 
     */
    @InputImport(name="volumes")
      private final @Nullable Output<List<VolumeArgs>> volumes;

    public Output<List<VolumeArgs>> getVolumes() {
        return this.volumes == null ? Output.empty() : this.volumes;
    }

    public PodSpecArgs(
        @Nullable Output<Integer> activeDeadlineSeconds,
        @Nullable Output<AffinityArgs> affinity,
        @Nullable Output<Boolean> automountServiceAccountToken,
        Output<List<ContainerArgs>> containers,
        @Nullable Output<PodDNSConfigArgs> dnsConfig,
        @Nullable Output<String> dnsPolicy,
        @Nullable Output<Boolean> enableServiceLinks,
        @Nullable Output<List<EphemeralContainerArgs>> ephemeralContainers,
        @Nullable Output<List<HostAliasArgs>> hostAliases,
        @Nullable Output<Boolean> hostIPC,
        @Nullable Output<Boolean> hostNetwork,
        @Nullable Output<Boolean> hostPID,
        @Nullable Output<String> hostname,
        @Nullable Output<List<LocalObjectReferenceArgs>> imagePullSecrets,
        @Nullable Output<List<ContainerArgs>> initContainers,
        @Nullable Output<String> nodeName,
        @Nullable Output<Map<String,String>> nodeSelector,
        @Nullable Output<PodOSArgs> os,
        @Nullable Output<Map<String,String>> overhead,
        @Nullable Output<String> preemptionPolicy,
        @Nullable Output<Integer> priority,
        @Nullable Output<String> priorityClassName,
        @Nullable Output<List<PodReadinessGateArgs>> readinessGates,
        @Nullable Output<String> restartPolicy,
        @Nullable Output<String> runtimeClassName,
        @Nullable Output<String> schedulerName,
        @Nullable Output<PodSecurityContextArgs> securityContext,
        @Nullable Output<String> serviceAccount,
        @Nullable Output<String> serviceAccountName,
        @Nullable Output<Boolean> setHostnameAsFQDN,
        @Nullable Output<Boolean> shareProcessNamespace,
        @Nullable Output<String> subdomain,
        @Nullable Output<Integer> terminationGracePeriodSeconds,
        @Nullable Output<List<TolerationArgs>> tolerations,
        @Nullable Output<List<TopologySpreadConstraintArgs>> topologySpreadConstraints,
        @Nullable Output<List<VolumeArgs>> volumes) {
        this.activeDeadlineSeconds = activeDeadlineSeconds;
        this.affinity = affinity;
        this.automountServiceAccountToken = automountServiceAccountToken;
        this.containers = Objects.requireNonNull(containers, "expected parameter 'containers' to be non-null");
        this.dnsConfig = dnsConfig;
        this.dnsPolicy = dnsPolicy;
        this.enableServiceLinks = enableServiceLinks;
        this.ephemeralContainers = ephemeralContainers;
        this.hostAliases = hostAliases;
        this.hostIPC = hostIPC;
        this.hostNetwork = hostNetwork;
        this.hostPID = hostPID;
        this.hostname = hostname;
        this.imagePullSecrets = imagePullSecrets;
        this.initContainers = initContainers;
        this.nodeName = nodeName;
        this.nodeSelector = nodeSelector;
        this.os = os;
        this.overhead = overhead;
        this.preemptionPolicy = preemptionPolicy;
        this.priority = priority;
        this.priorityClassName = priorityClassName;
        this.readinessGates = readinessGates;
        this.restartPolicy = restartPolicy;
        this.runtimeClassName = runtimeClassName;
        this.schedulerName = schedulerName;
        this.securityContext = securityContext;
        this.serviceAccount = serviceAccount;
        this.serviceAccountName = serviceAccountName;
        this.setHostnameAsFQDN = setHostnameAsFQDN;
        this.shareProcessNamespace = shareProcessNamespace;
        this.subdomain = subdomain;
        this.terminationGracePeriodSeconds = terminationGracePeriodSeconds;
        this.tolerations = tolerations;
        this.topologySpreadConstraints = topologySpreadConstraints;
        this.volumes = volumes;
    }

    private PodSpecArgs() {
        this.activeDeadlineSeconds = Output.empty();
        this.affinity = Output.empty();
        this.automountServiceAccountToken = Output.empty();
        this.containers = Output.empty();
        this.dnsConfig = Output.empty();
        this.dnsPolicy = Output.empty();
        this.enableServiceLinks = Output.empty();
        this.ephemeralContainers = Output.empty();
        this.hostAliases = Output.empty();
        this.hostIPC = Output.empty();
        this.hostNetwork = Output.empty();
        this.hostPID = Output.empty();
        this.hostname = Output.empty();
        this.imagePullSecrets = Output.empty();
        this.initContainers = Output.empty();
        this.nodeName = Output.empty();
        this.nodeSelector = Output.empty();
        this.os = Output.empty();
        this.overhead = Output.empty();
        this.preemptionPolicy = Output.empty();
        this.priority = Output.empty();
        this.priorityClassName = Output.empty();
        this.readinessGates = Output.empty();
        this.restartPolicy = Output.empty();
        this.runtimeClassName = Output.empty();
        this.schedulerName = Output.empty();
        this.securityContext = Output.empty();
        this.serviceAccount = Output.empty();
        this.serviceAccountName = Output.empty();
        this.setHostnameAsFQDN = Output.empty();
        this.shareProcessNamespace = Output.empty();
        this.subdomain = Output.empty();
        this.terminationGracePeriodSeconds = Output.empty();
        this.tolerations = Output.empty();
        this.topologySpreadConstraints = Output.empty();
        this.volumes = Output.empty();
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(PodSpecArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Output<Integer> activeDeadlineSeconds;
        private @Nullable Output<AffinityArgs> affinity;
        private @Nullable Output<Boolean> automountServiceAccountToken;
        private Output<List<ContainerArgs>> containers;
        private @Nullable Output<PodDNSConfigArgs> dnsConfig;
        private @Nullable Output<String> dnsPolicy;
        private @Nullable Output<Boolean> enableServiceLinks;
        private @Nullable Output<List<EphemeralContainerArgs>> ephemeralContainers;
        private @Nullable Output<List<HostAliasArgs>> hostAliases;
        private @Nullable Output<Boolean> hostIPC;
        private @Nullable Output<Boolean> hostNetwork;
        private @Nullable Output<Boolean> hostPID;
        private @Nullable Output<String> hostname;
        private @Nullable Output<List<LocalObjectReferenceArgs>> imagePullSecrets;
        private @Nullable Output<List<ContainerArgs>> initContainers;
        private @Nullable Output<String> nodeName;
        private @Nullable Output<Map<String,String>> nodeSelector;
        private @Nullable Output<PodOSArgs> os;
        private @Nullable Output<Map<String,String>> overhead;
        private @Nullable Output<String> preemptionPolicy;
        private @Nullable Output<Integer> priority;
        private @Nullable Output<String> priorityClassName;
        private @Nullable Output<List<PodReadinessGateArgs>> readinessGates;
        private @Nullable Output<String> restartPolicy;
        private @Nullable Output<String> runtimeClassName;
        private @Nullable Output<String> schedulerName;
        private @Nullable Output<PodSecurityContextArgs> securityContext;
        private @Nullable Output<String> serviceAccount;
        private @Nullable Output<String> serviceAccountName;
        private @Nullable Output<Boolean> setHostnameAsFQDN;
        private @Nullable Output<Boolean> shareProcessNamespace;
        private @Nullable Output<String> subdomain;
        private @Nullable Output<Integer> terminationGracePeriodSeconds;
        private @Nullable Output<List<TolerationArgs>> tolerations;
        private @Nullable Output<List<TopologySpreadConstraintArgs>> topologySpreadConstraints;
        private @Nullable Output<List<VolumeArgs>> volumes;

        public Builder() {
    	      // Empty
        }

        public Builder(PodSpecArgs defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activeDeadlineSeconds = defaults.activeDeadlineSeconds;
    	      this.affinity = defaults.affinity;
    	      this.automountServiceAccountToken = defaults.automountServiceAccountToken;
    	      this.containers = defaults.containers;
    	      this.dnsConfig = defaults.dnsConfig;
    	      this.dnsPolicy = defaults.dnsPolicy;
    	      this.enableServiceLinks = defaults.enableServiceLinks;
    	      this.ephemeralContainers = defaults.ephemeralContainers;
    	      this.hostAliases = defaults.hostAliases;
    	      this.hostIPC = defaults.hostIPC;
    	      this.hostNetwork = defaults.hostNetwork;
    	      this.hostPID = defaults.hostPID;
    	      this.hostname = defaults.hostname;
    	      this.imagePullSecrets = defaults.imagePullSecrets;
    	      this.initContainers = defaults.initContainers;
    	      this.nodeName = defaults.nodeName;
    	      this.nodeSelector = defaults.nodeSelector;
    	      this.os = defaults.os;
    	      this.overhead = defaults.overhead;
    	      this.preemptionPolicy = defaults.preemptionPolicy;
    	      this.priority = defaults.priority;
    	      this.priorityClassName = defaults.priorityClassName;
    	      this.readinessGates = defaults.readinessGates;
    	      this.restartPolicy = defaults.restartPolicy;
    	      this.runtimeClassName = defaults.runtimeClassName;
    	      this.schedulerName = defaults.schedulerName;
    	      this.securityContext = defaults.securityContext;
    	      this.serviceAccount = defaults.serviceAccount;
    	      this.serviceAccountName = defaults.serviceAccountName;
    	      this.setHostnameAsFQDN = defaults.setHostnameAsFQDN;
    	      this.shareProcessNamespace = defaults.shareProcessNamespace;
    	      this.subdomain = defaults.subdomain;
    	      this.terminationGracePeriodSeconds = defaults.terminationGracePeriodSeconds;
    	      this.tolerations = defaults.tolerations;
    	      this.topologySpreadConstraints = defaults.topologySpreadConstraints;
    	      this.volumes = defaults.volumes;
        }

        public Builder activeDeadlineSeconds(@Nullable Output<Integer> activeDeadlineSeconds) {
            this.activeDeadlineSeconds = activeDeadlineSeconds;
            return this;
        }

        public Builder activeDeadlineSeconds(@Nullable Integer activeDeadlineSeconds) {
            this.activeDeadlineSeconds = Output.ofNullable(activeDeadlineSeconds);
            return this;
        }

        public Builder affinity(@Nullable Output<AffinityArgs> affinity) {
            this.affinity = affinity;
            return this;
        }

        public Builder affinity(@Nullable AffinityArgs affinity) {
            this.affinity = Output.ofNullable(affinity);
            return this;
        }

        public Builder automountServiceAccountToken(@Nullable Output<Boolean> automountServiceAccountToken) {
            this.automountServiceAccountToken = automountServiceAccountToken;
            return this;
        }

        public Builder automountServiceAccountToken(@Nullable Boolean automountServiceAccountToken) {
            this.automountServiceAccountToken = Output.ofNullable(automountServiceAccountToken);
            return this;
        }

        public Builder containers(Output<List<ContainerArgs>> containers) {
            this.containers = Objects.requireNonNull(containers);
            return this;
        }

        public Builder containers(List<ContainerArgs> containers) {
            this.containers = Output.of(Objects.requireNonNull(containers));
            return this;
        }

        public Builder dnsConfig(@Nullable Output<PodDNSConfigArgs> dnsConfig) {
            this.dnsConfig = dnsConfig;
            return this;
        }

        public Builder dnsConfig(@Nullable PodDNSConfigArgs dnsConfig) {
            this.dnsConfig = Output.ofNullable(dnsConfig);
            return this;
        }

        public Builder dnsPolicy(@Nullable Output<String> dnsPolicy) {
            this.dnsPolicy = dnsPolicy;
            return this;
        }

        public Builder dnsPolicy(@Nullable String dnsPolicy) {
            this.dnsPolicy = Output.ofNullable(dnsPolicy);
            return this;
        }

        public Builder enableServiceLinks(@Nullable Output<Boolean> enableServiceLinks) {
            this.enableServiceLinks = enableServiceLinks;
            return this;
        }

        public Builder enableServiceLinks(@Nullable Boolean enableServiceLinks) {
            this.enableServiceLinks = Output.ofNullable(enableServiceLinks);
            return this;
        }

        public Builder ephemeralContainers(@Nullable Output<List<EphemeralContainerArgs>> ephemeralContainers) {
            this.ephemeralContainers = ephemeralContainers;
            return this;
        }

        public Builder ephemeralContainers(@Nullable List<EphemeralContainerArgs> ephemeralContainers) {
            this.ephemeralContainers = Output.ofNullable(ephemeralContainers);
            return this;
        }

        public Builder hostAliases(@Nullable Output<List<HostAliasArgs>> hostAliases) {
            this.hostAliases = hostAliases;
            return this;
        }

        public Builder hostAliases(@Nullable List<HostAliasArgs> hostAliases) {
            this.hostAliases = Output.ofNullable(hostAliases);
            return this;
        }

        public Builder hostIPC(@Nullable Output<Boolean> hostIPC) {
            this.hostIPC = hostIPC;
            return this;
        }

        public Builder hostIPC(@Nullable Boolean hostIPC) {
            this.hostIPC = Output.ofNullable(hostIPC);
            return this;
        }

        public Builder hostNetwork(@Nullable Output<Boolean> hostNetwork) {
            this.hostNetwork = hostNetwork;
            return this;
        }

        public Builder hostNetwork(@Nullable Boolean hostNetwork) {
            this.hostNetwork = Output.ofNullable(hostNetwork);
            return this;
        }

        public Builder hostPID(@Nullable Output<Boolean> hostPID) {
            this.hostPID = hostPID;
            return this;
        }

        public Builder hostPID(@Nullable Boolean hostPID) {
            this.hostPID = Output.ofNullable(hostPID);
            return this;
        }

        public Builder hostname(@Nullable Output<String> hostname) {
            this.hostname = hostname;
            return this;
        }

        public Builder hostname(@Nullable String hostname) {
            this.hostname = Output.ofNullable(hostname);
            return this;
        }

        public Builder imagePullSecrets(@Nullable Output<List<LocalObjectReferenceArgs>> imagePullSecrets) {
            this.imagePullSecrets = imagePullSecrets;
            return this;
        }

        public Builder imagePullSecrets(@Nullable List<LocalObjectReferenceArgs> imagePullSecrets) {
            this.imagePullSecrets = Output.ofNullable(imagePullSecrets);
            return this;
        }

        public Builder initContainers(@Nullable Output<List<ContainerArgs>> initContainers) {
            this.initContainers = initContainers;
            return this;
        }

        public Builder initContainers(@Nullable List<ContainerArgs> initContainers) {
            this.initContainers = Output.ofNullable(initContainers);
            return this;
        }

        public Builder nodeName(@Nullable Output<String> nodeName) {
            this.nodeName = nodeName;
            return this;
        }

        public Builder nodeName(@Nullable String nodeName) {
            this.nodeName = Output.ofNullable(nodeName);
            return this;
        }

        public Builder nodeSelector(@Nullable Output<Map<String,String>> nodeSelector) {
            this.nodeSelector = nodeSelector;
            return this;
        }

        public Builder nodeSelector(@Nullable Map<String,String> nodeSelector) {
            this.nodeSelector = Output.ofNullable(nodeSelector);
            return this;
        }

        public Builder os(@Nullable Output<PodOSArgs> os) {
            this.os = os;
            return this;
        }

        public Builder os(@Nullable PodOSArgs os) {
            this.os = Output.ofNullable(os);
            return this;
        }

        public Builder overhead(@Nullable Output<Map<String,String>> overhead) {
            this.overhead = overhead;
            return this;
        }

        public Builder overhead(@Nullable Map<String,String> overhead) {
            this.overhead = Output.ofNullable(overhead);
            return this;
        }

        public Builder preemptionPolicy(@Nullable Output<String> preemptionPolicy) {
            this.preemptionPolicy = preemptionPolicy;
            return this;
        }

        public Builder preemptionPolicy(@Nullable String preemptionPolicy) {
            this.preemptionPolicy = Output.ofNullable(preemptionPolicy);
            return this;
        }

        public Builder priority(@Nullable Output<Integer> priority) {
            this.priority = priority;
            return this;
        }

        public Builder priority(@Nullable Integer priority) {
            this.priority = Output.ofNullable(priority);
            return this;
        }

        public Builder priorityClassName(@Nullable Output<String> priorityClassName) {
            this.priorityClassName = priorityClassName;
            return this;
        }

        public Builder priorityClassName(@Nullable String priorityClassName) {
            this.priorityClassName = Output.ofNullable(priorityClassName);
            return this;
        }

        public Builder readinessGates(@Nullable Output<List<PodReadinessGateArgs>> readinessGates) {
            this.readinessGates = readinessGates;
            return this;
        }

        public Builder readinessGates(@Nullable List<PodReadinessGateArgs> readinessGates) {
            this.readinessGates = Output.ofNullable(readinessGates);
            return this;
        }

        public Builder restartPolicy(@Nullable Output<String> restartPolicy) {
            this.restartPolicy = restartPolicy;
            return this;
        }

        public Builder restartPolicy(@Nullable String restartPolicy) {
            this.restartPolicy = Output.ofNullable(restartPolicy);
            return this;
        }

        public Builder runtimeClassName(@Nullable Output<String> runtimeClassName) {
            this.runtimeClassName = runtimeClassName;
            return this;
        }

        public Builder runtimeClassName(@Nullable String runtimeClassName) {
            this.runtimeClassName = Output.ofNullable(runtimeClassName);
            return this;
        }

        public Builder schedulerName(@Nullable Output<String> schedulerName) {
            this.schedulerName = schedulerName;
            return this;
        }

        public Builder schedulerName(@Nullable String schedulerName) {
            this.schedulerName = Output.ofNullable(schedulerName);
            return this;
        }

        public Builder securityContext(@Nullable Output<PodSecurityContextArgs> securityContext) {
            this.securityContext = securityContext;
            return this;
        }

        public Builder securityContext(@Nullable PodSecurityContextArgs securityContext) {
            this.securityContext = Output.ofNullable(securityContext);
            return this;
        }

        public Builder serviceAccount(@Nullable Output<String> serviceAccount) {
            this.serviceAccount = serviceAccount;
            return this;
        }

        public Builder serviceAccount(@Nullable String serviceAccount) {
            this.serviceAccount = Output.ofNullable(serviceAccount);
            return this;
        }

        public Builder serviceAccountName(@Nullable Output<String> serviceAccountName) {
            this.serviceAccountName = serviceAccountName;
            return this;
        }

        public Builder serviceAccountName(@Nullable String serviceAccountName) {
            this.serviceAccountName = Output.ofNullable(serviceAccountName);
            return this;
        }

        public Builder setHostnameAsFQDN(@Nullable Output<Boolean> setHostnameAsFQDN) {
            this.setHostnameAsFQDN = setHostnameAsFQDN;
            return this;
        }

        public Builder setHostnameAsFQDN(@Nullable Boolean setHostnameAsFQDN) {
            this.setHostnameAsFQDN = Output.ofNullable(setHostnameAsFQDN);
            return this;
        }

        public Builder shareProcessNamespace(@Nullable Output<Boolean> shareProcessNamespace) {
            this.shareProcessNamespace = shareProcessNamespace;
            return this;
        }

        public Builder shareProcessNamespace(@Nullable Boolean shareProcessNamespace) {
            this.shareProcessNamespace = Output.ofNullable(shareProcessNamespace);
            return this;
        }

        public Builder subdomain(@Nullable Output<String> subdomain) {
            this.subdomain = subdomain;
            return this;
        }

        public Builder subdomain(@Nullable String subdomain) {
            this.subdomain = Output.ofNullable(subdomain);
            return this;
        }

        public Builder terminationGracePeriodSeconds(@Nullable Output<Integer> terminationGracePeriodSeconds) {
            this.terminationGracePeriodSeconds = terminationGracePeriodSeconds;
            return this;
        }

        public Builder terminationGracePeriodSeconds(@Nullable Integer terminationGracePeriodSeconds) {
            this.terminationGracePeriodSeconds = Output.ofNullable(terminationGracePeriodSeconds);
            return this;
        }

        public Builder tolerations(@Nullable Output<List<TolerationArgs>> tolerations) {
            this.tolerations = tolerations;
            return this;
        }

        public Builder tolerations(@Nullable List<TolerationArgs> tolerations) {
            this.tolerations = Output.ofNullable(tolerations);
            return this;
        }

        public Builder topologySpreadConstraints(@Nullable Output<List<TopologySpreadConstraintArgs>> topologySpreadConstraints) {
            this.topologySpreadConstraints = topologySpreadConstraints;
            return this;
        }

        public Builder topologySpreadConstraints(@Nullable List<TopologySpreadConstraintArgs> topologySpreadConstraints) {
            this.topologySpreadConstraints = Output.ofNullable(topologySpreadConstraints);
            return this;
        }

        public Builder volumes(@Nullable Output<List<VolumeArgs>> volumes) {
            this.volumes = volumes;
            return this;
        }

        public Builder volumes(@Nullable List<VolumeArgs> volumes) {
            this.volumes = Output.ofNullable(volumes);
            return this;
        }
        public PodSpecArgs build() {
            return new PodSpecArgs(activeDeadlineSeconds, affinity, automountServiceAccountToken, containers, dnsConfig, dnsPolicy, enableServiceLinks, ephemeralContainers, hostAliases, hostIPC, hostNetwork, hostPID, hostname, imagePullSecrets, initContainers, nodeName, nodeSelector, os, overhead, preemptionPolicy, priority, priorityClassName, readinessGates, restartPolicy, runtimeClassName, schedulerName, securityContext, serviceAccount, serviceAccountName, setHostnameAsFQDN, shareProcessNamespace, subdomain, terminationGracePeriodSeconds, tolerations, topologySpreadConstraints, volumes);
        }
    }
}
